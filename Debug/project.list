
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024950  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000c620  08024ad8  08024ad8  00025ad8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080310f8  080310f8  000332f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080310f8  080310f8  000320f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08031100  08031100  000332f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08031100  08031100  00032100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08031104  08031104  00032104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002f4  20000000  08031108  00033000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c018  200002f4  080313fc  000332f4  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  2000c30c  080313fc  0003330c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000332f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003eba2  00000000  00000000  0003331d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000ad47  00000000  00000000  00071ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002a50  00000000  00000000  0007cc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002129  00000000  00000000  0007f658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003be75  00000000  00000000  00081781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00050e38  00000000  00000000  000bd5f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee8a1  00000000  00000000  0010e42e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001fcccf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c208  00000000  00000000  001fcd14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00208f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200002f4 	.word	0x200002f4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08024ac0 	.word	0x08024ac0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200002f8 	.word	0x200002f8
 80001c4:	08024ac0 	.word	0x08024ac0

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	@ 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__gedf2>:
 8000988:	f04f 3cff 	mov.w	ip, #4294967295
 800098c:	e006      	b.n	800099c <__cmpdf2+0x4>
 800098e:	bf00      	nop

08000990 <__ledf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	e002      	b.n	800099c <__cmpdf2+0x4>
 8000996:	bf00      	nop

08000998 <__cmpdf2>:
 8000998:	f04f 0c01 	mov.w	ip, #1
 800099c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ac:	bf18      	it	ne
 80009ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b2:	d01b      	beq.n	80009ec <__cmpdf2+0x54>
 80009b4:	b001      	add	sp, #4
 80009b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ba:	bf0c      	ite	eq
 80009bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c0:	ea91 0f03 	teqne	r1, r3
 80009c4:	bf02      	ittt	eq
 80009c6:	ea90 0f02 	teqeq	r0, r2
 80009ca:	2000      	moveq	r0, #0
 80009cc:	4770      	bxeq	lr
 80009ce:	f110 0f00 	cmn.w	r0, #0
 80009d2:	ea91 0f03 	teq	r1, r3
 80009d6:	bf58      	it	pl
 80009d8:	4299      	cmppl	r1, r3
 80009da:	bf08      	it	eq
 80009dc:	4290      	cmpeq	r0, r2
 80009de:	bf2c      	ite	cs
 80009e0:	17d8      	asrcs	r0, r3, #31
 80009e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e6:	f040 0001 	orr.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	d102      	bne.n	80009fc <__cmpdf2+0x64>
 80009f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fa:	d107      	bne.n	8000a0c <__cmpdf2+0x74>
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d1d6      	bne.n	80009b4 <__cmpdf2+0x1c>
 8000a06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0a:	d0d3      	beq.n	80009b4 <__cmpdf2+0x1c>
 8000a0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_cdrcmple>:
 8000a14:	4684      	mov	ip, r0
 8000a16:	4610      	mov	r0, r2
 8000a18:	4662      	mov	r2, ip
 8000a1a:	468c      	mov	ip, r1
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4663      	mov	r3, ip
 8000a20:	e000      	b.n	8000a24 <__aeabi_cdcmpeq>
 8000a22:	bf00      	nop

08000a24 <__aeabi_cdcmpeq>:
 8000a24:	b501      	push	{r0, lr}
 8000a26:	f7ff ffb7 	bl	8000998 <__cmpdf2>
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	bf48      	it	mi
 8000a2e:	f110 0f00 	cmnmi.w	r0, #0
 8000a32:	bd01      	pop	{r0, pc}

08000a34 <__aeabi_dcmpeq>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff fff4 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a3c:	bf0c      	ite	eq
 8000a3e:	2001      	moveq	r0, #1
 8000a40:	2000      	movne	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmplt>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffea 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a50:	bf34      	ite	cc
 8000a52:	2001      	movcc	r0, #1
 8000a54:	2000      	movcs	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmple>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffe0 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpge>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffce 	bl	8000a14 <__aeabi_cdrcmple>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpgt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffc4 	bl	8000a14 <__aeabi_cdrcmple>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpun>:
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__aeabi_dcmpun+0x10>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d10a      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__aeabi_dcmpun+0x20>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000ab8:	f04f 0000 	mov.w	r0, #0
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0001 	mov.w	r0, #1
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_frsub>:
 8000bb4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	e002      	b.n	8000bc0 <__addsf3>
 8000bba:	bf00      	nop

08000bbc <__aeabi_fsub>:
 8000bbc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bc0 <__addsf3>:
 8000bc0:	0042      	lsls	r2, r0, #1
 8000bc2:	bf1f      	itttt	ne
 8000bc4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bc8:	ea92 0f03 	teqne	r2, r3
 8000bcc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bd0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bd4:	d06a      	beq.n	8000cac <__addsf3+0xec>
 8000bd6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bda:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bde:	bfc1      	itttt	gt
 8000be0:	18d2      	addgt	r2, r2, r3
 8000be2:	4041      	eorgt	r1, r0
 8000be4:	4048      	eorgt	r0, r1
 8000be6:	4041      	eorgt	r1, r0
 8000be8:	bfb8      	it	lt
 8000bea:	425b      	neglt	r3, r3
 8000bec:	2b19      	cmp	r3, #25
 8000bee:	bf88      	it	hi
 8000bf0:	4770      	bxhi	lr
 8000bf2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bf6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bfa:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bfe:	bf18      	it	ne
 8000c00:	4240      	negne	r0, r0
 8000c02:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c06:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c0a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c0e:	bf18      	it	ne
 8000c10:	4249      	negne	r1, r1
 8000c12:	ea92 0f03 	teq	r2, r3
 8000c16:	d03f      	beq.n	8000c98 <__addsf3+0xd8>
 8000c18:	f1a2 0201 	sub.w	r2, r2, #1
 8000c1c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c20:	eb10 000c 	adds.w	r0, r0, ip
 8000c24:	f1c3 0320 	rsb	r3, r3, #32
 8000c28:	fa01 f103 	lsl.w	r1, r1, r3
 8000c2c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c30:	d502      	bpl.n	8000c38 <__addsf3+0x78>
 8000c32:	4249      	negs	r1, r1
 8000c34:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c38:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c3c:	d313      	bcc.n	8000c66 <__addsf3+0xa6>
 8000c3e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c42:	d306      	bcc.n	8000c52 <__addsf3+0x92>
 8000c44:	0840      	lsrs	r0, r0, #1
 8000c46:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c4a:	f102 0201 	add.w	r2, r2, #1
 8000c4e:	2afe      	cmp	r2, #254	@ 0xfe
 8000c50:	d251      	bcs.n	8000cf6 <__addsf3+0x136>
 8000c52:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c56:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c5a:	bf08      	it	eq
 8000c5c:	f020 0001 	biceq.w	r0, r0, #1
 8000c60:	ea40 0003 	orr.w	r0, r0, r3
 8000c64:	4770      	bx	lr
 8000c66:	0049      	lsls	r1, r1, #1
 8000c68:	eb40 0000 	adc.w	r0, r0, r0
 8000c6c:	3a01      	subs	r2, #1
 8000c6e:	bf28      	it	cs
 8000c70:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c74:	d2ed      	bcs.n	8000c52 <__addsf3+0x92>
 8000c76:	fab0 fc80 	clz	ip, r0
 8000c7a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c7e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c82:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c86:	bfaa      	itet	ge
 8000c88:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c8c:	4252      	neglt	r2, r2
 8000c8e:	4318      	orrge	r0, r3
 8000c90:	bfbc      	itt	lt
 8000c92:	40d0      	lsrlt	r0, r2
 8000c94:	4318      	orrlt	r0, r3
 8000c96:	4770      	bx	lr
 8000c98:	f092 0f00 	teq	r2, #0
 8000c9c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ca0:	bf06      	itte	eq
 8000ca2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ca6:	3201      	addeq	r2, #1
 8000ca8:	3b01      	subne	r3, #1
 8000caa:	e7b5      	b.n	8000c18 <__addsf3+0x58>
 8000cac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cb0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cb4:	bf18      	it	ne
 8000cb6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cba:	d021      	beq.n	8000d00 <__addsf3+0x140>
 8000cbc:	ea92 0f03 	teq	r2, r3
 8000cc0:	d004      	beq.n	8000ccc <__addsf3+0x10c>
 8000cc2:	f092 0f00 	teq	r2, #0
 8000cc6:	bf08      	it	eq
 8000cc8:	4608      	moveq	r0, r1
 8000cca:	4770      	bx	lr
 8000ccc:	ea90 0f01 	teq	r0, r1
 8000cd0:	bf1c      	itt	ne
 8000cd2:	2000      	movne	r0, #0
 8000cd4:	4770      	bxne	lr
 8000cd6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cda:	d104      	bne.n	8000ce6 <__addsf3+0x126>
 8000cdc:	0040      	lsls	r0, r0, #1
 8000cde:	bf28      	it	cs
 8000ce0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000ce4:	4770      	bx	lr
 8000ce6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cea:	bf3c      	itt	cc
 8000cec:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cf0:	4770      	bxcc	lr
 8000cf2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cf6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cfa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cfe:	4770      	bx	lr
 8000d00:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d04:	bf16      	itet	ne
 8000d06:	4608      	movne	r0, r1
 8000d08:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d0c:	4601      	movne	r1, r0
 8000d0e:	0242      	lsls	r2, r0, #9
 8000d10:	bf06      	itte	eq
 8000d12:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d16:	ea90 0f01 	teqeq	r0, r1
 8000d1a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d1e:	4770      	bx	lr

08000d20 <__aeabi_ui2f>:
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	e004      	b.n	8000d30 <__aeabi_i2f+0x8>
 8000d26:	bf00      	nop

08000d28 <__aeabi_i2f>:
 8000d28:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d2c:	bf48      	it	mi
 8000d2e:	4240      	negmi	r0, r0
 8000d30:	ea5f 0c00 	movs.w	ip, r0
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d3c:	4601      	mov	r1, r0
 8000d3e:	f04f 0000 	mov.w	r0, #0
 8000d42:	e01c      	b.n	8000d7e <__aeabi_l2f+0x2a>

08000d44 <__aeabi_ul2f>:
 8000d44:	ea50 0201 	orrs.w	r2, r0, r1
 8000d48:	bf08      	it	eq
 8000d4a:	4770      	bxeq	lr
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	e00a      	b.n	8000d68 <__aeabi_l2f+0x14>
 8000d52:	bf00      	nop

08000d54 <__aeabi_l2f>:
 8000d54:	ea50 0201 	orrs.w	r2, r0, r1
 8000d58:	bf08      	it	eq
 8000d5a:	4770      	bxeq	lr
 8000d5c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d60:	d502      	bpl.n	8000d68 <__aeabi_l2f+0x14>
 8000d62:	4240      	negs	r0, r0
 8000d64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d68:	ea5f 0c01 	movs.w	ip, r1
 8000d6c:	bf02      	ittt	eq
 8000d6e:	4684      	moveq	ip, r0
 8000d70:	4601      	moveq	r1, r0
 8000d72:	2000      	moveq	r0, #0
 8000d74:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d78:	bf08      	it	eq
 8000d7a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d7e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d82:	fabc f28c 	clz	r2, ip
 8000d86:	3a08      	subs	r2, #8
 8000d88:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d8c:	db10      	blt.n	8000db0 <__aeabi_l2f+0x5c>
 8000d8e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d92:	4463      	add	r3, ip
 8000d94:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d98:	f1c2 0220 	rsb	r2, r2, #32
 8000d9c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000da0:	fa20 f202 	lsr.w	r2, r0, r2
 8000da4:	eb43 0002 	adc.w	r0, r3, r2
 8000da8:	bf08      	it	eq
 8000daa:	f020 0001 	biceq.w	r0, r0, #1
 8000dae:	4770      	bx	lr
 8000db0:	f102 0220 	add.w	r2, r2, #32
 8000db4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000db8:	f1c2 0220 	rsb	r2, r2, #32
 8000dbc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dc0:	fa21 f202 	lsr.w	r2, r1, r2
 8000dc4:	eb43 0002 	adc.w	r0, r3, r2
 8000dc8:	bf08      	it	eq
 8000dca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dce:	4770      	bx	lr

08000dd0 <__aeabi_fmul>:
 8000dd0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000dd4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dd8:	bf1e      	ittt	ne
 8000dda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dde:	ea92 0f0c 	teqne	r2, ip
 8000de2:	ea93 0f0c 	teqne	r3, ip
 8000de6:	d06f      	beq.n	8000ec8 <__aeabi_fmul+0xf8>
 8000de8:	441a      	add	r2, r3
 8000dea:	ea80 0c01 	eor.w	ip, r0, r1
 8000dee:	0240      	lsls	r0, r0, #9
 8000df0:	bf18      	it	ne
 8000df2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000df6:	d01e      	beq.n	8000e36 <__aeabi_fmul+0x66>
 8000df8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000dfc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e00:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e04:	fba0 3101 	umull	r3, r1, r0, r1
 8000e08:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e0c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e10:	bf3e      	ittt	cc
 8000e12:	0049      	lslcc	r1, r1, #1
 8000e14:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e18:	005b      	lslcc	r3, r3, #1
 8000e1a:	ea40 0001 	orr.w	r0, r0, r1
 8000e1e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e22:	2afd      	cmp	r2, #253	@ 0xfd
 8000e24:	d81d      	bhi.n	8000e62 <__aeabi_fmul+0x92>
 8000e26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e2e:	bf08      	it	eq
 8000e30:	f020 0001 	biceq.w	r0, r0, #1
 8000e34:	4770      	bx	lr
 8000e36:	f090 0f00 	teq	r0, #0
 8000e3a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e3e:	bf08      	it	eq
 8000e40:	0249      	lsleq	r1, r1, #9
 8000e42:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e46:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e4a:	3a7f      	subs	r2, #127	@ 0x7f
 8000e4c:	bfc2      	ittt	gt
 8000e4e:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e52:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e56:	4770      	bxgt	lr
 8000e58:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e5c:	f04f 0300 	mov.w	r3, #0
 8000e60:	3a01      	subs	r2, #1
 8000e62:	dc5d      	bgt.n	8000f20 <__aeabi_fmul+0x150>
 8000e64:	f112 0f19 	cmn.w	r2, #25
 8000e68:	bfdc      	itt	le
 8000e6a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e6e:	4770      	bxle	lr
 8000e70:	f1c2 0200 	rsb	r2, r2, #0
 8000e74:	0041      	lsls	r1, r0, #1
 8000e76:	fa21 f102 	lsr.w	r1, r1, r2
 8000e7a:	f1c2 0220 	rsb	r2, r2, #32
 8000e7e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e82:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e86:	f140 0000 	adc.w	r0, r0, #0
 8000e8a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e8e:	bf08      	it	eq
 8000e90:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e94:	4770      	bx	lr
 8000e96:	f092 0f00 	teq	r2, #0
 8000e9a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e9e:	bf02      	ittt	eq
 8000ea0:	0040      	lsleq	r0, r0, #1
 8000ea2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ea6:	3a01      	subeq	r2, #1
 8000ea8:	d0f9      	beq.n	8000e9e <__aeabi_fmul+0xce>
 8000eaa:	ea40 000c 	orr.w	r0, r0, ip
 8000eae:	f093 0f00 	teq	r3, #0
 8000eb2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000eb6:	bf02      	ittt	eq
 8000eb8:	0049      	lsleq	r1, r1, #1
 8000eba:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ebe:	3b01      	subeq	r3, #1
 8000ec0:	d0f9      	beq.n	8000eb6 <__aeabi_fmul+0xe6>
 8000ec2:	ea41 010c 	orr.w	r1, r1, ip
 8000ec6:	e78f      	b.n	8000de8 <__aeabi_fmul+0x18>
 8000ec8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	bf18      	it	ne
 8000ed2:	ea93 0f0c 	teqne	r3, ip
 8000ed6:	d00a      	beq.n	8000eee <__aeabi_fmul+0x11e>
 8000ed8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000edc:	bf18      	it	ne
 8000ede:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ee2:	d1d8      	bne.n	8000e96 <__aeabi_fmul+0xc6>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eec:	4770      	bx	lr
 8000eee:	f090 0f00 	teq	r0, #0
 8000ef2:	bf17      	itett	ne
 8000ef4:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ef8:	4608      	moveq	r0, r1
 8000efa:	f091 0f00 	teqne	r1, #0
 8000efe:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000f02:	d014      	beq.n	8000f2e <__aeabi_fmul+0x15e>
 8000f04:	ea92 0f0c 	teq	r2, ip
 8000f08:	d101      	bne.n	8000f0e <__aeabi_fmul+0x13e>
 8000f0a:	0242      	lsls	r2, r0, #9
 8000f0c:	d10f      	bne.n	8000f2e <__aeabi_fmul+0x15e>
 8000f0e:	ea93 0f0c 	teq	r3, ip
 8000f12:	d103      	bne.n	8000f1c <__aeabi_fmul+0x14c>
 8000f14:	024b      	lsls	r3, r1, #9
 8000f16:	bf18      	it	ne
 8000f18:	4608      	movne	r0, r1
 8000f1a:	d108      	bne.n	8000f2e <__aeabi_fmul+0x15e>
 8000f1c:	ea80 0001 	eor.w	r0, r0, r1
 8000f20:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f24:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f28:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f2c:	4770      	bx	lr
 8000f2e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f32:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f36:	4770      	bx	lr

08000f38 <__aeabi_fdiv>:
 8000f38:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f3c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f40:	bf1e      	ittt	ne
 8000f42:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f46:	ea92 0f0c 	teqne	r2, ip
 8000f4a:	ea93 0f0c 	teqne	r3, ip
 8000f4e:	d069      	beq.n	8001024 <__aeabi_fdiv+0xec>
 8000f50:	eba2 0203 	sub.w	r2, r2, r3
 8000f54:	ea80 0c01 	eor.w	ip, r0, r1
 8000f58:	0249      	lsls	r1, r1, #9
 8000f5a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f5e:	d037      	beq.n	8000fd0 <__aeabi_fdiv+0x98>
 8000f60:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f64:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f68:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f6c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f70:	428b      	cmp	r3, r1
 8000f72:	bf38      	it	cc
 8000f74:	005b      	lslcc	r3, r3, #1
 8000f76:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f7a:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f7e:	428b      	cmp	r3, r1
 8000f80:	bf24      	itt	cs
 8000f82:	1a5b      	subcs	r3, r3, r1
 8000f84:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f88:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f8c:	bf24      	itt	cs
 8000f8e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f92:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f96:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f9a:	bf24      	itt	cs
 8000f9c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fa0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fa4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fa8:	bf24      	itt	cs
 8000faa:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fae:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fb2:	011b      	lsls	r3, r3, #4
 8000fb4:	bf18      	it	ne
 8000fb6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fba:	d1e0      	bne.n	8000f7e <__aeabi_fdiv+0x46>
 8000fbc:	2afd      	cmp	r2, #253	@ 0xfd
 8000fbe:	f63f af50 	bhi.w	8000e62 <__aeabi_fmul+0x92>
 8000fc2:	428b      	cmp	r3, r1
 8000fc4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fc8:	bf08      	it	eq
 8000fca:	f020 0001 	biceq.w	r0, r0, #1
 8000fce:	4770      	bx	lr
 8000fd0:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000fd4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fd8:	327f      	adds	r2, #127	@ 0x7f
 8000fda:	bfc2      	ittt	gt
 8000fdc:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fe0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fe4:	4770      	bxgt	lr
 8000fe6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fea:	f04f 0300 	mov.w	r3, #0
 8000fee:	3a01      	subs	r2, #1
 8000ff0:	e737      	b.n	8000e62 <__aeabi_fmul+0x92>
 8000ff2:	f092 0f00 	teq	r2, #0
 8000ff6:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ffa:	bf02      	ittt	eq
 8000ffc:	0040      	lsleq	r0, r0, #1
 8000ffe:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8001002:	3a01      	subeq	r2, #1
 8001004:	d0f9      	beq.n	8000ffa <__aeabi_fdiv+0xc2>
 8001006:	ea40 000c 	orr.w	r0, r0, ip
 800100a:	f093 0f00 	teq	r3, #0
 800100e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8001012:	bf02      	ittt	eq
 8001014:	0049      	lsleq	r1, r1, #1
 8001016:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800101a:	3b01      	subeq	r3, #1
 800101c:	d0f9      	beq.n	8001012 <__aeabi_fdiv+0xda>
 800101e:	ea41 010c 	orr.w	r1, r1, ip
 8001022:	e795      	b.n	8000f50 <__aeabi_fdiv+0x18>
 8001024:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001028:	ea92 0f0c 	teq	r2, ip
 800102c:	d108      	bne.n	8001040 <__aeabi_fdiv+0x108>
 800102e:	0242      	lsls	r2, r0, #9
 8001030:	f47f af7d 	bne.w	8000f2e <__aeabi_fmul+0x15e>
 8001034:	ea93 0f0c 	teq	r3, ip
 8001038:	f47f af70 	bne.w	8000f1c <__aeabi_fmul+0x14c>
 800103c:	4608      	mov	r0, r1
 800103e:	e776      	b.n	8000f2e <__aeabi_fmul+0x15e>
 8001040:	ea93 0f0c 	teq	r3, ip
 8001044:	d104      	bne.n	8001050 <__aeabi_fdiv+0x118>
 8001046:	024b      	lsls	r3, r1, #9
 8001048:	f43f af4c 	beq.w	8000ee4 <__aeabi_fmul+0x114>
 800104c:	4608      	mov	r0, r1
 800104e:	e76e      	b.n	8000f2e <__aeabi_fmul+0x15e>
 8001050:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001054:	bf18      	it	ne
 8001056:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800105a:	d1ca      	bne.n	8000ff2 <__aeabi_fdiv+0xba>
 800105c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001060:	f47f af5c 	bne.w	8000f1c <__aeabi_fmul+0x14c>
 8001064:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001068:	f47f af3c 	bne.w	8000ee4 <__aeabi_fmul+0x114>
 800106c:	e75f      	b.n	8000f2e <__aeabi_fmul+0x15e>
 800106e:	bf00      	nop

08001070 <__gesf2>:
 8001070:	f04f 3cff 	mov.w	ip, #4294967295
 8001074:	e006      	b.n	8001084 <__cmpsf2+0x4>
 8001076:	bf00      	nop

08001078 <__lesf2>:
 8001078:	f04f 0c01 	mov.w	ip, #1
 800107c:	e002      	b.n	8001084 <__cmpsf2+0x4>
 800107e:	bf00      	nop

08001080 <__cmpsf2>:
 8001080:	f04f 0c01 	mov.w	ip, #1
 8001084:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001088:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800108c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001090:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001094:	bf18      	it	ne
 8001096:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800109a:	d011      	beq.n	80010c0 <__cmpsf2+0x40>
 800109c:	b001      	add	sp, #4
 800109e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010a2:	bf18      	it	ne
 80010a4:	ea90 0f01 	teqne	r0, r1
 80010a8:	bf58      	it	pl
 80010aa:	ebb2 0003 	subspl.w	r0, r2, r3
 80010ae:	bf88      	it	hi
 80010b0:	17c8      	asrhi	r0, r1, #31
 80010b2:	bf38      	it	cc
 80010b4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010b8:	bf18      	it	ne
 80010ba:	f040 0001 	orrne.w	r0, r0, #1
 80010be:	4770      	bx	lr
 80010c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010c4:	d102      	bne.n	80010cc <__cmpsf2+0x4c>
 80010c6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010ca:	d105      	bne.n	80010d8 <__cmpsf2+0x58>
 80010cc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010d0:	d1e4      	bne.n	800109c <__cmpsf2+0x1c>
 80010d2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010d6:	d0e1      	beq.n	800109c <__cmpsf2+0x1c>
 80010d8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop

080010e0 <__aeabi_cfrcmple>:
 80010e0:	4684      	mov	ip, r0
 80010e2:	4608      	mov	r0, r1
 80010e4:	4661      	mov	r1, ip
 80010e6:	e7ff      	b.n	80010e8 <__aeabi_cfcmpeq>

080010e8 <__aeabi_cfcmpeq>:
 80010e8:	b50f      	push	{r0, r1, r2, r3, lr}
 80010ea:	f7ff ffc9 	bl	8001080 <__cmpsf2>
 80010ee:	2800      	cmp	r0, #0
 80010f0:	bf48      	it	mi
 80010f2:	f110 0f00 	cmnmi.w	r0, #0
 80010f6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010f8 <__aeabi_fcmpeq>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff fff4 	bl	80010e8 <__aeabi_cfcmpeq>
 8001100:	bf0c      	ite	eq
 8001102:	2001      	moveq	r0, #1
 8001104:	2000      	movne	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop

0800110c <__aeabi_fcmplt>:
 800110c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001110:	f7ff ffea 	bl	80010e8 <__aeabi_cfcmpeq>
 8001114:	bf34      	ite	cc
 8001116:	2001      	movcc	r0, #1
 8001118:	2000      	movcs	r0, #0
 800111a:	f85d fb08 	ldr.w	pc, [sp], #8
 800111e:	bf00      	nop

08001120 <__aeabi_fcmple>:
 8001120:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001124:	f7ff ffe0 	bl	80010e8 <__aeabi_cfcmpeq>
 8001128:	bf94      	ite	ls
 800112a:	2001      	movls	r0, #1
 800112c:	2000      	movhi	r0, #0
 800112e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001132:	bf00      	nop

08001134 <__aeabi_fcmpge>:
 8001134:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001138:	f7ff ffd2 	bl	80010e0 <__aeabi_cfrcmple>
 800113c:	bf94      	ite	ls
 800113e:	2001      	movls	r0, #1
 8001140:	2000      	movhi	r0, #0
 8001142:	f85d fb08 	ldr.w	pc, [sp], #8
 8001146:	bf00      	nop

08001148 <__aeabi_fcmpgt>:
 8001148:	f84d ed08 	str.w	lr, [sp, #-8]!
 800114c:	f7ff ffc8 	bl	80010e0 <__aeabi_cfrcmple>
 8001150:	bf34      	ite	cc
 8001152:	2001      	movcc	r0, #1
 8001154:	2000      	movcs	r0, #0
 8001156:	f85d fb08 	ldr.w	pc, [sp], #8
 800115a:	bf00      	nop

0800115c <__aeabi_fcmpun>:
 800115c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001160:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001164:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001168:	d102      	bne.n	8001170 <__aeabi_fcmpun+0x14>
 800116a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800116e:	d108      	bne.n	8001182 <__aeabi_fcmpun+0x26>
 8001170:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001174:	d102      	bne.n	800117c <__aeabi_fcmpun+0x20>
 8001176:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800117a:	d102      	bne.n	8001182 <__aeabi_fcmpun+0x26>
 800117c:	f04f 0000 	mov.w	r0, #0
 8001180:	4770      	bx	lr
 8001182:	f04f 0001 	mov.w	r0, #1
 8001186:	4770      	bx	lr

08001188 <__aeabi_f2iz>:
 8001188:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800118c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001190:	d30f      	bcc.n	80011b2 <__aeabi_f2iz+0x2a>
 8001192:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001196:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800119a:	d90d      	bls.n	80011b8 <__aeabi_f2iz+0x30>
 800119c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80011a4:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80011a8:	fa23 f002 	lsr.w	r0, r3, r2
 80011ac:	bf18      	it	ne
 80011ae:	4240      	negne	r0, r0
 80011b0:	4770      	bx	lr
 80011b2:	f04f 0000 	mov.w	r0, #0
 80011b6:	4770      	bx	lr
 80011b8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80011bc:	d101      	bne.n	80011c2 <__aeabi_f2iz+0x3a>
 80011be:	0242      	lsls	r2, r0, #9
 80011c0:	d105      	bne.n	80011ce <__aeabi_f2iz+0x46>
 80011c2:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80011c6:	bf08      	it	eq
 80011c8:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80011cc:	4770      	bx	lr
 80011ce:	f04f 0000 	mov.w	r0, #0
 80011d2:	4770      	bx	lr

080011d4 <__aeabi_f2uiz>:
 80011d4:	0042      	lsls	r2, r0, #1
 80011d6:	d20e      	bcs.n	80011f6 <__aeabi_f2uiz+0x22>
 80011d8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80011dc:	d30b      	bcc.n	80011f6 <__aeabi_f2uiz+0x22>
 80011de:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80011e2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011e6:	d409      	bmi.n	80011fc <__aeabi_f2uiz+0x28>
 80011e8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80011f0:	fa23 f002 	lsr.w	r0, r3, r2
 80011f4:	4770      	bx	lr
 80011f6:	f04f 0000 	mov.w	r0, #0
 80011fa:	4770      	bx	lr
 80011fc:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001200:	d101      	bne.n	8001206 <__aeabi_f2uiz+0x32>
 8001202:	0242      	lsls	r2, r0, #9
 8001204:	d102      	bne.n	800120c <__aeabi_f2uiz+0x38>
 8001206:	f04f 30ff 	mov.w	r0, #4294967295
 800120a:	4770      	bx	lr
 800120c:	f04f 0000 	mov.w	r0, #0
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop

08001214 <__aeabi_uldivmod>:
 8001214:	b953      	cbnz	r3, 800122c <__aeabi_uldivmod+0x18>
 8001216:	b94a      	cbnz	r2, 800122c <__aeabi_uldivmod+0x18>
 8001218:	2900      	cmp	r1, #0
 800121a:	bf08      	it	eq
 800121c:	2800      	cmpeq	r0, #0
 800121e:	bf1c      	itt	ne
 8001220:	f04f 31ff 	movne.w	r1, #4294967295
 8001224:	f04f 30ff 	movne.w	r0, #4294967295
 8001228:	f000 b98c 	b.w	8001544 <__aeabi_idiv0>
 800122c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001234:	f000 f806 	bl	8001244 <__udivmoddi4>
 8001238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800123c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001240:	b004      	add	sp, #16
 8001242:	4770      	bx	lr

08001244 <__udivmoddi4>:
 8001244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001248:	9d08      	ldr	r5, [sp, #32]
 800124a:	468e      	mov	lr, r1
 800124c:	4604      	mov	r4, r0
 800124e:	4688      	mov	r8, r1
 8001250:	2b00      	cmp	r3, #0
 8001252:	d14a      	bne.n	80012ea <__udivmoddi4+0xa6>
 8001254:	428a      	cmp	r2, r1
 8001256:	4617      	mov	r7, r2
 8001258:	d962      	bls.n	8001320 <__udivmoddi4+0xdc>
 800125a:	fab2 f682 	clz	r6, r2
 800125e:	b14e      	cbz	r6, 8001274 <__udivmoddi4+0x30>
 8001260:	f1c6 0320 	rsb	r3, r6, #32
 8001264:	fa01 f806 	lsl.w	r8, r1, r6
 8001268:	fa20 f303 	lsr.w	r3, r0, r3
 800126c:	40b7      	lsls	r7, r6
 800126e:	ea43 0808 	orr.w	r8, r3, r8
 8001272:	40b4      	lsls	r4, r6
 8001274:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001278:	fbb8 f1fe 	udiv	r1, r8, lr
 800127c:	fa1f fc87 	uxth.w	ip, r7
 8001280:	fb0e 8811 	mls	r8, lr, r1, r8
 8001284:	fb01 f20c 	mul.w	r2, r1, ip
 8001288:	0c23      	lsrs	r3, r4, #16
 800128a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800128e:	429a      	cmp	r2, r3
 8001290:	d909      	bls.n	80012a6 <__udivmoddi4+0x62>
 8001292:	18fb      	adds	r3, r7, r3
 8001294:	f101 30ff 	add.w	r0, r1, #4294967295
 8001298:	f080 80eb 	bcs.w	8001472 <__udivmoddi4+0x22e>
 800129c:	429a      	cmp	r2, r3
 800129e:	f240 80e8 	bls.w	8001472 <__udivmoddi4+0x22e>
 80012a2:	3902      	subs	r1, #2
 80012a4:	443b      	add	r3, r7
 80012a6:	1a9a      	subs	r2, r3, r2
 80012a8:	fbb2 f0fe 	udiv	r0, r2, lr
 80012ac:	fb0e 2210 	mls	r2, lr, r0, r2
 80012b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80012b4:	b2a3      	uxth	r3, r4
 80012b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80012ba:	459c      	cmp	ip, r3
 80012bc:	d909      	bls.n	80012d2 <__udivmoddi4+0x8e>
 80012be:	18fb      	adds	r3, r7, r3
 80012c0:	f100 32ff 	add.w	r2, r0, #4294967295
 80012c4:	f080 80d7 	bcs.w	8001476 <__udivmoddi4+0x232>
 80012c8:	459c      	cmp	ip, r3
 80012ca:	f240 80d4 	bls.w	8001476 <__udivmoddi4+0x232>
 80012ce:	443b      	add	r3, r7
 80012d0:	3802      	subs	r0, #2
 80012d2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80012d6:	2100      	movs	r1, #0
 80012d8:	eba3 030c 	sub.w	r3, r3, ip
 80012dc:	b11d      	cbz	r5, 80012e6 <__udivmoddi4+0xa2>
 80012de:	2200      	movs	r2, #0
 80012e0:	40f3      	lsrs	r3, r6
 80012e2:	e9c5 3200 	strd	r3, r2, [r5]
 80012e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012ea:	428b      	cmp	r3, r1
 80012ec:	d905      	bls.n	80012fa <__udivmoddi4+0xb6>
 80012ee:	b10d      	cbz	r5, 80012f4 <__udivmoddi4+0xb0>
 80012f0:	e9c5 0100 	strd	r0, r1, [r5]
 80012f4:	2100      	movs	r1, #0
 80012f6:	4608      	mov	r0, r1
 80012f8:	e7f5      	b.n	80012e6 <__udivmoddi4+0xa2>
 80012fa:	fab3 f183 	clz	r1, r3
 80012fe:	2900      	cmp	r1, #0
 8001300:	d146      	bne.n	8001390 <__udivmoddi4+0x14c>
 8001302:	4573      	cmp	r3, lr
 8001304:	d302      	bcc.n	800130c <__udivmoddi4+0xc8>
 8001306:	4282      	cmp	r2, r0
 8001308:	f200 8108 	bhi.w	800151c <__udivmoddi4+0x2d8>
 800130c:	1a84      	subs	r4, r0, r2
 800130e:	eb6e 0203 	sbc.w	r2, lr, r3
 8001312:	2001      	movs	r0, #1
 8001314:	4690      	mov	r8, r2
 8001316:	2d00      	cmp	r5, #0
 8001318:	d0e5      	beq.n	80012e6 <__udivmoddi4+0xa2>
 800131a:	e9c5 4800 	strd	r4, r8, [r5]
 800131e:	e7e2      	b.n	80012e6 <__udivmoddi4+0xa2>
 8001320:	2a00      	cmp	r2, #0
 8001322:	f000 8091 	beq.w	8001448 <__udivmoddi4+0x204>
 8001326:	fab2 f682 	clz	r6, r2
 800132a:	2e00      	cmp	r6, #0
 800132c:	f040 80a5 	bne.w	800147a <__udivmoddi4+0x236>
 8001330:	1a8a      	subs	r2, r1, r2
 8001332:	2101      	movs	r1, #1
 8001334:	0c03      	lsrs	r3, r0, #16
 8001336:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800133a:	b280      	uxth	r0, r0
 800133c:	b2bc      	uxth	r4, r7
 800133e:	fbb2 fcfe 	udiv	ip, r2, lr
 8001342:	fb0e 221c 	mls	r2, lr, ip, r2
 8001346:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800134a:	fb04 f20c 	mul.w	r2, r4, ip
 800134e:	429a      	cmp	r2, r3
 8001350:	d907      	bls.n	8001362 <__udivmoddi4+0x11e>
 8001352:	18fb      	adds	r3, r7, r3
 8001354:	f10c 38ff 	add.w	r8, ip, #4294967295
 8001358:	d202      	bcs.n	8001360 <__udivmoddi4+0x11c>
 800135a:	429a      	cmp	r2, r3
 800135c:	f200 80e3 	bhi.w	8001526 <__udivmoddi4+0x2e2>
 8001360:	46c4      	mov	ip, r8
 8001362:	1a9b      	subs	r3, r3, r2
 8001364:	fbb3 f2fe 	udiv	r2, r3, lr
 8001368:	fb0e 3312 	mls	r3, lr, r2, r3
 800136c:	fb02 f404 	mul.w	r4, r2, r4
 8001370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8001374:	429c      	cmp	r4, r3
 8001376:	d907      	bls.n	8001388 <__udivmoddi4+0x144>
 8001378:	18fb      	adds	r3, r7, r3
 800137a:	f102 30ff 	add.w	r0, r2, #4294967295
 800137e:	d202      	bcs.n	8001386 <__udivmoddi4+0x142>
 8001380:	429c      	cmp	r4, r3
 8001382:	f200 80cd 	bhi.w	8001520 <__udivmoddi4+0x2dc>
 8001386:	4602      	mov	r2, r0
 8001388:	1b1b      	subs	r3, r3, r4
 800138a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800138e:	e7a5      	b.n	80012dc <__udivmoddi4+0x98>
 8001390:	f1c1 0620 	rsb	r6, r1, #32
 8001394:	408b      	lsls	r3, r1
 8001396:	fa22 f706 	lsr.w	r7, r2, r6
 800139a:	431f      	orrs	r7, r3
 800139c:	fa2e fa06 	lsr.w	sl, lr, r6
 80013a0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80013a4:	fbba f8f9 	udiv	r8, sl, r9
 80013a8:	fa0e fe01 	lsl.w	lr, lr, r1
 80013ac:	fa20 f306 	lsr.w	r3, r0, r6
 80013b0:	fb09 aa18 	mls	sl, r9, r8, sl
 80013b4:	fa1f fc87 	uxth.w	ip, r7
 80013b8:	ea43 030e 	orr.w	r3, r3, lr
 80013bc:	fa00 fe01 	lsl.w	lr, r0, r1
 80013c0:	fb08 f00c 	mul.w	r0, r8, ip
 80013c4:	0c1c      	lsrs	r4, r3, #16
 80013c6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80013ca:	42a0      	cmp	r0, r4
 80013cc:	fa02 f201 	lsl.w	r2, r2, r1
 80013d0:	d90a      	bls.n	80013e8 <__udivmoddi4+0x1a4>
 80013d2:	193c      	adds	r4, r7, r4
 80013d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80013d8:	f080 809e 	bcs.w	8001518 <__udivmoddi4+0x2d4>
 80013dc:	42a0      	cmp	r0, r4
 80013de:	f240 809b 	bls.w	8001518 <__udivmoddi4+0x2d4>
 80013e2:	f1a8 0802 	sub.w	r8, r8, #2
 80013e6:	443c      	add	r4, r7
 80013e8:	1a24      	subs	r4, r4, r0
 80013ea:	b298      	uxth	r0, r3
 80013ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80013f0:	fb09 4413 	mls	r4, r9, r3, r4
 80013f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80013f8:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80013fc:	45a4      	cmp	ip, r4
 80013fe:	d909      	bls.n	8001414 <__udivmoddi4+0x1d0>
 8001400:	193c      	adds	r4, r7, r4
 8001402:	f103 30ff 	add.w	r0, r3, #4294967295
 8001406:	f080 8085 	bcs.w	8001514 <__udivmoddi4+0x2d0>
 800140a:	45a4      	cmp	ip, r4
 800140c:	f240 8082 	bls.w	8001514 <__udivmoddi4+0x2d0>
 8001410:	3b02      	subs	r3, #2
 8001412:	443c      	add	r4, r7
 8001414:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001418:	eba4 040c 	sub.w	r4, r4, ip
 800141c:	fba0 8c02 	umull	r8, ip, r0, r2
 8001420:	4564      	cmp	r4, ip
 8001422:	4643      	mov	r3, r8
 8001424:	46e1      	mov	r9, ip
 8001426:	d364      	bcc.n	80014f2 <__udivmoddi4+0x2ae>
 8001428:	d061      	beq.n	80014ee <__udivmoddi4+0x2aa>
 800142a:	b15d      	cbz	r5, 8001444 <__udivmoddi4+0x200>
 800142c:	ebbe 0203 	subs.w	r2, lr, r3
 8001430:	eb64 0409 	sbc.w	r4, r4, r9
 8001434:	fa04 f606 	lsl.w	r6, r4, r6
 8001438:	fa22 f301 	lsr.w	r3, r2, r1
 800143c:	431e      	orrs	r6, r3
 800143e:	40cc      	lsrs	r4, r1
 8001440:	e9c5 6400 	strd	r6, r4, [r5]
 8001444:	2100      	movs	r1, #0
 8001446:	e74e      	b.n	80012e6 <__udivmoddi4+0xa2>
 8001448:	fbb1 fcf2 	udiv	ip, r1, r2
 800144c:	0c01      	lsrs	r1, r0, #16
 800144e:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8001452:	b280      	uxth	r0, r0
 8001454:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001458:	463b      	mov	r3, r7
 800145a:	fbb1 f1f7 	udiv	r1, r1, r7
 800145e:	4638      	mov	r0, r7
 8001460:	463c      	mov	r4, r7
 8001462:	46b8      	mov	r8, r7
 8001464:	46be      	mov	lr, r7
 8001466:	2620      	movs	r6, #32
 8001468:	eba2 0208 	sub.w	r2, r2, r8
 800146c:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001470:	e765      	b.n	800133e <__udivmoddi4+0xfa>
 8001472:	4601      	mov	r1, r0
 8001474:	e717      	b.n	80012a6 <__udivmoddi4+0x62>
 8001476:	4610      	mov	r0, r2
 8001478:	e72b      	b.n	80012d2 <__udivmoddi4+0x8e>
 800147a:	f1c6 0120 	rsb	r1, r6, #32
 800147e:	fa2e fc01 	lsr.w	ip, lr, r1
 8001482:	40b7      	lsls	r7, r6
 8001484:	fa0e fe06 	lsl.w	lr, lr, r6
 8001488:	fa20 f101 	lsr.w	r1, r0, r1
 800148c:	ea41 010e 	orr.w	r1, r1, lr
 8001490:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001494:	fbbc f8fe 	udiv	r8, ip, lr
 8001498:	b2bc      	uxth	r4, r7
 800149a:	fb0e cc18 	mls	ip, lr, r8, ip
 800149e:	fb08 f904 	mul.w	r9, r8, r4
 80014a2:	0c0a      	lsrs	r2, r1, #16
 80014a4:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80014a8:	40b0      	lsls	r0, r6
 80014aa:	4591      	cmp	r9, r2
 80014ac:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80014b0:	b280      	uxth	r0, r0
 80014b2:	d93e      	bls.n	8001532 <__udivmoddi4+0x2ee>
 80014b4:	18ba      	adds	r2, r7, r2
 80014b6:	f108 3cff 	add.w	ip, r8, #4294967295
 80014ba:	d201      	bcs.n	80014c0 <__udivmoddi4+0x27c>
 80014bc:	4591      	cmp	r9, r2
 80014be:	d81f      	bhi.n	8001500 <__udivmoddi4+0x2bc>
 80014c0:	eba2 0209 	sub.w	r2, r2, r9
 80014c4:	fbb2 f9fe 	udiv	r9, r2, lr
 80014c8:	fb09 f804 	mul.w	r8, r9, r4
 80014cc:	fb0e 2a19 	mls	sl, lr, r9, r2
 80014d0:	b28a      	uxth	r2, r1
 80014d2:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 80014d6:	4542      	cmp	r2, r8
 80014d8:	d229      	bcs.n	800152e <__udivmoddi4+0x2ea>
 80014da:	18ba      	adds	r2, r7, r2
 80014dc:	f109 31ff 	add.w	r1, r9, #4294967295
 80014e0:	d2c2      	bcs.n	8001468 <__udivmoddi4+0x224>
 80014e2:	4542      	cmp	r2, r8
 80014e4:	d2c0      	bcs.n	8001468 <__udivmoddi4+0x224>
 80014e6:	f1a9 0102 	sub.w	r1, r9, #2
 80014ea:	443a      	add	r2, r7
 80014ec:	e7bc      	b.n	8001468 <__udivmoddi4+0x224>
 80014ee:	45c6      	cmp	lr, r8
 80014f0:	d29b      	bcs.n	800142a <__udivmoddi4+0x1e6>
 80014f2:	ebb8 0302 	subs.w	r3, r8, r2
 80014f6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80014fa:	3801      	subs	r0, #1
 80014fc:	46e1      	mov	r9, ip
 80014fe:	e794      	b.n	800142a <__udivmoddi4+0x1e6>
 8001500:	eba7 0909 	sub.w	r9, r7, r9
 8001504:	444a      	add	r2, r9
 8001506:	fbb2 f9fe 	udiv	r9, r2, lr
 800150a:	f1a8 0c02 	sub.w	ip, r8, #2
 800150e:	fb09 f804 	mul.w	r8, r9, r4
 8001512:	e7db      	b.n	80014cc <__udivmoddi4+0x288>
 8001514:	4603      	mov	r3, r0
 8001516:	e77d      	b.n	8001414 <__udivmoddi4+0x1d0>
 8001518:	46d0      	mov	r8, sl
 800151a:	e765      	b.n	80013e8 <__udivmoddi4+0x1a4>
 800151c:	4608      	mov	r0, r1
 800151e:	e6fa      	b.n	8001316 <__udivmoddi4+0xd2>
 8001520:	443b      	add	r3, r7
 8001522:	3a02      	subs	r2, #2
 8001524:	e730      	b.n	8001388 <__udivmoddi4+0x144>
 8001526:	f1ac 0c02 	sub.w	ip, ip, #2
 800152a:	443b      	add	r3, r7
 800152c:	e719      	b.n	8001362 <__udivmoddi4+0x11e>
 800152e:	4649      	mov	r1, r9
 8001530:	e79a      	b.n	8001468 <__udivmoddi4+0x224>
 8001532:	eba2 0209 	sub.w	r2, r2, r9
 8001536:	fbb2 f9fe 	udiv	r9, r2, lr
 800153a:	46c4      	mov	ip, r8
 800153c:	fb09 f804 	mul.w	r8, r9, r4
 8001540:	e7c4      	b.n	80014cc <__udivmoddi4+0x288>
 8001542:	bf00      	nop

08001544 <__aeabi_idiv0>:
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop

08001548 <rng32>:
static char g_req_cookie_sid[33];
static bool g_req_cookie_sid_present = false;
static char g_resp_setcookie_sid[33];
static bool g_resp_setcookie_pending = false;

static uint32_t rng32(void) {
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
    /* Weak RNG placeholder; replace with HW RNG if available */
    static uint32_t x = 0x12345678u;
    x ^= (x << 13);
 800154c:	4b10      	ldr	r3, [pc, #64]	@ (8001590 <rng32+0x48>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	035a      	lsls	r2, r3, #13
 8001552:	4b0f      	ldr	r3, [pc, #60]	@ (8001590 <rng32+0x48>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4053      	eors	r3, r2
 8001558:	4a0d      	ldr	r2, [pc, #52]	@ (8001590 <rng32+0x48>)
 800155a:	6013      	str	r3, [r2, #0]
    x ^= (x >> 17);
 800155c:	4b0c      	ldr	r3, [pc, #48]	@ (8001590 <rng32+0x48>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	0c5a      	lsrs	r2, r3, #17
 8001562:	4b0b      	ldr	r3, [pc, #44]	@ (8001590 <rng32+0x48>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4053      	eors	r3, r2
 8001568:	4a09      	ldr	r2, [pc, #36]	@ (8001590 <rng32+0x48>)
 800156a:	6013      	str	r3, [r2, #0]
    x ^= (x << 5);
 800156c:	4b08      	ldr	r3, [pc, #32]	@ (8001590 <rng32+0x48>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	015a      	lsls	r2, r3, #5
 8001572:	4b07      	ldr	r3, [pc, #28]	@ (8001590 <rng32+0x48>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4053      	eors	r3, r2
 8001578:	4a05      	ldr	r2, [pc, #20]	@ (8001590 <rng32+0x48>)
 800157a:	6013      	str	r3, [r2, #0]
    return x ^ sys_now();
 800157c:	f00a fa8e 	bl	800ba9c <sys_now>
 8001580:	4603      	mov	r3, r0
 8001582:	461a      	mov	r2, r3
 8001584:	4b02      	ldr	r3, [pc, #8]	@ (8001590 <rng32+0x48>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4053      	eors	r3, r2
}
 800158a:	4618      	mov	r0, r3
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000000 	.word	0x20000000

08001594 <gen_sid>:

static void gen_sid(char out[33]) {
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 16; i++) {
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	e022      	b.n	80015e8 <gen_sid+0x54>
        uint8_t b = (uint8_t)(rng32() & 0xFF);
 80015a2:	f7ff ffd1 	bl	8001548 <rng32>
 80015a6:	4603      	mov	r3, r0
 80015a8:	72fb      	strb	r3, [r7, #11]
        static const char* hex = "0123456789abcdef";
        out[i*2]   = hex[(b >> 4) & 0xF];
 80015aa:	4b15      	ldr	r3, [pc, #84]	@ (8001600 <gen_sid+0x6c>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	7afb      	ldrb	r3, [r7, #11]
 80015b0:	091b      	lsrs	r3, r3, #4
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	f003 030f 	and.w	r3, r3, #15
 80015b8:	441a      	add	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	4619      	mov	r1, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	440b      	add	r3, r1
 80015c4:	7812      	ldrb	r2, [r2, #0]
 80015c6:	701a      	strb	r2, [r3, #0]
        out[i*2+1] = hex[b & 0xF];
 80015c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001600 <gen_sid+0x6c>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	7afb      	ldrb	r3, [r7, #11]
 80015ce:	f003 030f 	and.w	r3, r3, #15
 80015d2:	441a      	add	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	3301      	adds	r3, #1
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	440b      	add	r3, r1
 80015de:	7812      	ldrb	r2, [r2, #0]
 80015e0:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 16; i++) {
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	3301      	adds	r3, #1
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2b0f      	cmp	r3, #15
 80015ec:	ddd9      	ble.n	80015a2 <gen_sid+0xe>
    }
    out[32] = '\0';
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	3320      	adds	r3, #32
 80015f2:	2200      	movs	r2, #0
 80015f4:	701a      	strb	r2, [r3, #0]
}
 80015f6:	bf00      	nop
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000004 	.word	0x20000004

08001604 <Auth_Init>:

void Auth_Init(void) {
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
    memset(g_sessions, 0, sizeof(g_sessions));
 8001608:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800160c:	2100      	movs	r1, #0
 800160e:	4807      	ldr	r0, [pc, #28]	@ (800162c <Auth_Init+0x28>)
 8001610:	f020 fd10 	bl	8022034 <memset>
    g_req_ip_set = false;
 8001614:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <Auth_Init+0x2c>)
 8001616:	2200      	movs	r2, #0
 8001618:	701a      	strb	r2, [r3, #0]
    g_req_cookie_sid_present = false;
 800161a:	4b06      	ldr	r3, [pc, #24]	@ (8001634 <Auth_Init+0x30>)
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
    g_resp_setcookie_pending = false;
 8001620:	4b05      	ldr	r3, [pc, #20]	@ (8001638 <Auth_Init+0x34>)
 8001622:	2200      	movs	r2, #0
 8001624:	701a      	strb	r2, [r3, #0]
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000310 	.word	0x20000310
 8001630:	20000494 	.word	0x20000494
 8001634:	200004b9 	.word	0x200004b9
 8001638:	200004dd 	.word	0x200004dd

0800163c <Auth_SetCurrentRemoteIp>:

void Auth_SetCurrentRemoteIp(const ip_addr_t* ip) {
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
    if (ip) {
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d007      	beq.n	800165a <Auth_SetCurrentRemoteIp+0x1e>
        g_req_ip = *ip;
 800164a:	4a08      	ldr	r2, [pc, #32]	@ (800166c <Auth_SetCurrentRemoteIp+0x30>)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6013      	str	r3, [r2, #0]
        g_req_ip_set = true;
 8001652:	4b07      	ldr	r3, [pc, #28]	@ (8001670 <Auth_SetCurrentRemoteIp+0x34>)
 8001654:	2201      	movs	r2, #1
 8001656:	701a      	strb	r2, [r3, #0]
    } else {
        g_req_ip_set = false;
    }
}
 8001658:	e002      	b.n	8001660 <Auth_SetCurrentRemoteIp+0x24>
        g_req_ip_set = false;
 800165a:	4b05      	ldr	r3, [pc, #20]	@ (8001670 <Auth_SetCurrentRemoteIp+0x34>)
 800165c:	2200      	movs	r2, #0
 800165e:	701a      	strb	r2, [r3, #0]
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	20000490 	.word	0x20000490
 8001670:	20000494 	.word	0x20000494

08001674 <Auth_BeginRequestWithCookieHeader>:

void Auth_BeginRequestWithCookieHeader(const char* headers, uint16_t headers_len) {
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	@ 0x28
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	807b      	strh	r3, [r7, #2]
    /* Parse a very simple "Cookie: SID=<sid>" header if present */
    g_req_cookie_sid_present = false;
 8001680:	4b53      	ldr	r3, [pc, #332]	@ (80017d0 <Auth_BeginRequestWithCookieHeader+0x15c>)
 8001682:	2200      	movs	r2, #0
 8001684:	701a      	strb	r2, [r3, #0]
    g_req_cookie_sid[0] = '\0';
 8001686:	4b53      	ldr	r3, [pc, #332]	@ (80017d4 <Auth_BeginRequestWithCookieHeader+0x160>)
 8001688:	2200      	movs	r2, #0
 800168a:	701a      	strb	r2, [r3, #0]
    if (!headers || headers_len == 0) return;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 8096 	beq.w	80017c0 <Auth_BeginRequestWithCookieHeader+0x14c>
 8001694:	887b      	ldrh	r3, [r7, #2]
 8001696:	2b00      	cmp	r3, #0
 8001698:	f000 8092 	beq.w	80017c0 <Auth_BeginRequestWithCookieHeader+0x14c>
    const char* p = headers;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	627b      	str	r3, [r7, #36]	@ 0x24
    const char* end = headers + headers_len;
 80016a0:	887b      	ldrh	r3, [r7, #2]
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
    while (p < end) {
 80016a8:	e084      	b.n	80017b4 <Auth_BeginRequestWithCookieHeader+0x140>
        const char* line_end = (const char*)memchr(p, '\n', (size_t)(end - p));
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	461a      	mov	r2, r3
 80016b2:	210a      	movs	r1, #10
 80016b4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80016b6:	f020 fdd4 	bl	8022262 <memchr>
 80016ba:	6178      	str	r0, [r7, #20]
        size_t line_len = line_end ? (size_t)(line_end - p) : (size_t)(end - p);
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <Auth_BeginRequestWithCookieHeader+0x56>
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	e002      	b.n	80016d0 <Auth_BeginRequestWithCookieHeader+0x5c>
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	613b      	str	r3, [r7, #16]
        if (line_len >= 7 && !strncasecmp(p, "Cookie:", 7)) {
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	2b06      	cmp	r3, #6
 80016d6:	d967      	bls.n	80017a8 <Auth_BeginRequestWithCookieHeader+0x134>
 80016d8:	2207      	movs	r2, #7
 80016da:	493f      	ldr	r1, [pc, #252]	@ (80017d8 <Auth_BeginRequestWithCookieHeader+0x164>)
 80016dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80016de:	f020 fcbf 	bl	8022060 <strncasecmp>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d15f      	bne.n	80017a8 <Auth_BeginRequestWithCookieHeader+0x134>
            const char* v = p + 7;
 80016e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ea:	3307      	adds	r3, #7
 80016ec:	623b      	str	r3, [r7, #32]
            while (v < p + line_len && (*v == ' ' || *v == '\t')) v++;
 80016ee:	e002      	b.n	80016f6 <Auth_BeginRequestWithCookieHeader+0x82>
 80016f0:	6a3b      	ldr	r3, [r7, #32]
 80016f2:	3301      	adds	r3, #1
 80016f4:	623b      	str	r3, [r7, #32]
 80016f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	4413      	add	r3, r2
 80016fc:	6a3a      	ldr	r2, [r7, #32]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d207      	bcs.n	8001712 <Auth_BeginRequestWithCookieHeader+0x9e>
 8001702:	6a3b      	ldr	r3, [r7, #32]
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b20      	cmp	r3, #32
 8001708:	d0f2      	beq.n	80016f0 <Auth_BeginRequestWithCookieHeader+0x7c>
 800170a:	6a3b      	ldr	r3, [r7, #32]
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b09      	cmp	r3, #9
 8001710:	d0ee      	beq.n	80016f0 <Auth_BeginRequestWithCookieHeader+0x7c>
            const char* sid_pos = strcasestr(v, "SID=");
 8001712:	4932      	ldr	r1, [pc, #200]	@ (80017dc <Auth_BeginRequestWithCookieHeader+0x168>)
 8001714:	6a38      	ldr	r0, [r7, #32]
 8001716:	f020 fcff 	bl	8022118 <strcasestr>
 800171a:	4603      	mov	r3, r0
 800171c:	60fb      	str	r3, [r7, #12]
            if (sid_pos) {
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d04f      	beq.n	80017c4 <Auth_BeginRequestWithCookieHeader+0x150>
                sid_pos += 4;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	3304      	adds	r3, #4
 8001728:	60fb      	str	r3, [r7, #12]
                size_t i = 0;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
                while (i < 32 && sid_pos + i < p + line_len) {
 800172e:	e024      	b.n	800177a <Auth_BeginRequestWithCookieHeader+0x106>
                    char c = sid_pos[i];
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	4413      	add	r3, r2
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	72fb      	strb	r3, [r7, #11]
                    if (!((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F'))) break;
 800173a:	7afb      	ldrb	r3, [r7, #11]
 800173c:	2b2f      	cmp	r3, #47	@ 0x2f
 800173e:	d902      	bls.n	8001746 <Auth_BeginRequestWithCookieHeader+0xd2>
 8001740:	7afb      	ldrb	r3, [r7, #11]
 8001742:	2b39      	cmp	r3, #57	@ 0x39
 8001744:	d90b      	bls.n	800175e <Auth_BeginRequestWithCookieHeader+0xea>
 8001746:	7afb      	ldrb	r3, [r7, #11]
 8001748:	2b60      	cmp	r3, #96	@ 0x60
 800174a:	d902      	bls.n	8001752 <Auth_BeginRequestWithCookieHeader+0xde>
 800174c:	7afb      	ldrb	r3, [r7, #11]
 800174e:	2b66      	cmp	r3, #102	@ 0x66
 8001750:	d905      	bls.n	800175e <Auth_BeginRequestWithCookieHeader+0xea>
 8001752:	7afb      	ldrb	r3, [r7, #11]
 8001754:	2b40      	cmp	r3, #64	@ 0x40
 8001756:	d91b      	bls.n	8001790 <Auth_BeginRequestWithCookieHeader+0x11c>
 8001758:	7afb      	ldrb	r3, [r7, #11]
 800175a:	2b46      	cmp	r3, #70	@ 0x46
 800175c:	d818      	bhi.n	8001790 <Auth_BeginRequestWithCookieHeader+0x11c>
                    g_req_cookie_sid[i] = (char)tolower((unsigned char)c);
 800175e:	7afb      	ldrb	r3, [r7, #11]
 8001760:	4618      	mov	r0, r3
 8001762:	f01f fd6b 	bl	802123c <tolower>
 8001766:	4603      	mov	r3, r0
 8001768:	b2d9      	uxtb	r1, r3
 800176a:	4a1a      	ldr	r2, [pc, #104]	@ (80017d4 <Auth_BeginRequestWithCookieHeader+0x160>)
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	4413      	add	r3, r2
 8001770:	460a      	mov	r2, r1
 8001772:	701a      	strb	r2, [r3, #0]
                    i++;
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	3301      	adds	r3, #1
 8001778:	61fb      	str	r3, [r7, #28]
                while (i < 32 && sid_pos + i < p + line_len) {
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	2b1f      	cmp	r3, #31
 800177e:	d807      	bhi.n	8001790 <Auth_BeginRequestWithCookieHeader+0x11c>
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	441a      	add	r2, r3
 8001786:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	440b      	add	r3, r1
 800178c:	429a      	cmp	r2, r3
 800178e:	d3cf      	bcc.n	8001730 <Auth_BeginRequestWithCookieHeader+0xbc>
                }
                g_req_cookie_sid[i] = '\0';
 8001790:	4a10      	ldr	r2, [pc, #64]	@ (80017d4 <Auth_BeginRequestWithCookieHeader+0x160>)
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	4413      	add	r3, r2
 8001796:	2200      	movs	r2, #0
 8001798:	701a      	strb	r2, [r3, #0]
                if (i == 32) g_req_cookie_sid_present = true;
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	2b20      	cmp	r3, #32
 800179e:	d111      	bne.n	80017c4 <Auth_BeginRequestWithCookieHeader+0x150>
 80017a0:	4b0b      	ldr	r3, [pc, #44]	@ (80017d0 <Auth_BeginRequestWithCookieHeader+0x15c>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	701a      	strb	r2, [r3, #0]
            }
            break;
 80017a6:	e00d      	b.n	80017c4 <Auth_BeginRequestWithCookieHeader+0x150>
        }
        if (!line_end) break;
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d00c      	beq.n	80017c8 <Auth_BeginRequestWithCookieHeader+0x154>
        p = line_end + 1;
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	3301      	adds	r3, #1
 80017b2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (p < end) {
 80017b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	f4ff af76 	bcc.w	80016aa <Auth_BeginRequestWithCookieHeader+0x36>
 80017be:	e004      	b.n	80017ca <Auth_BeginRequestWithCookieHeader+0x156>
    if (!headers || headers_len == 0) return;
 80017c0:	bf00      	nop
 80017c2:	e002      	b.n	80017ca <Auth_BeginRequestWithCookieHeader+0x156>
            break;
 80017c4:	bf00      	nop
 80017c6:	e000      	b.n	80017ca <Auth_BeginRequestWithCookieHeader+0x156>
        if (!line_end) break;
 80017c8:	bf00      	nop
    }
}
 80017ca:	3728      	adds	r7, #40	@ 0x28
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	200004b9 	.word	0x200004b9
 80017d4:	20000498 	.word	0x20000498
 80017d8:	08024ad8 	.word	0x08024ad8
 80017dc:	08024ae0 	.word	0x08024ae0

080017e0 <session_find_by_sid>:

static int session_find_by_sid(const char* sid) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
    if (!sid) return -1;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d102      	bne.n	80017f4 <session_find_by_sid+0x14>
 80017ee:	f04f 33ff 	mov.w	r3, #4294967295
 80017f2:	e025      	b.n	8001840 <session_find_by_sid+0x60>
    for (int i = 0; i < SESSION_TABLE_SIZE; i++) {
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	e01d      	b.n	8001836 <session_find_by_sid+0x56>
        if (g_sessions[i].in_use && strcmp(g_sessions[i].sid, sid) == 0) return i;
 80017fa:	4913      	ldr	r1, [pc, #76]	@ (8001848 <session_find_by_sid+0x68>)
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	4613      	mov	r3, r2
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	4413      	add	r3, r2
 8001804:	011b      	lsls	r3, r3, #4
 8001806:	440b      	add	r3, r1
 8001808:	332c      	adds	r3, #44	@ 0x2c
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d00f      	beq.n	8001830 <session_find_by_sid+0x50>
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	4613      	mov	r3, r2
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	4413      	add	r3, r2
 8001818:	011b      	lsls	r3, r3, #4
 800181a:	4a0b      	ldr	r2, [pc, #44]	@ (8001848 <session_find_by_sid+0x68>)
 800181c:	4413      	add	r3, r2
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	4618      	mov	r0, r3
 8001822:	f7fe fcd1 	bl	80001c8 <strcmp>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <session_find_by_sid+0x50>
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	e007      	b.n	8001840 <session_find_by_sid+0x60>
    for (int i = 0; i < SESSION_TABLE_SIZE; i++) {
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	3301      	adds	r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2b07      	cmp	r3, #7
 800183a:	ddde      	ble.n	80017fa <session_find_by_sid+0x1a>
    }
    return -1;
 800183c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001840:	4618      	mov	r0, r3
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000310 	.word	0x20000310

0800184c <Auth_CreateSessionForCurrentRequest>:

bool Auth_CreateSessionForCurrentRequest(uint32_t now_ms, uint32_t ttl_ms) {
 800184c:	b580      	push	{r7, lr}
 800184e:	b08e      	sub	sp, #56	@ 0x38
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
    char sid[33];
    gen_sid(sid);
 8001856:	f107 030c 	add.w	r3, r7, #12
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff fe9a 	bl	8001594 <gen_sid>
    int idx = -1;
 8001860:	f04f 33ff 	mov.w	r3, #4294967295
 8001864:	637b      	str	r3, [r7, #52]	@ 0x34
    for (int i = 0; i < SESSION_TABLE_SIZE; i++) {
 8001866:	2300      	movs	r3, #0
 8001868:	633b      	str	r3, [r7, #48]	@ 0x30
 800186a:	e013      	b.n	8001894 <Auth_CreateSessionForCurrentRequest+0x48>
        if (!g_sessions[i].in_use) { idx = i; break; }
 800186c:	493c      	ldr	r1, [pc, #240]	@ (8001960 <Auth_CreateSessionForCurrentRequest+0x114>)
 800186e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001870:	4613      	mov	r3, r2
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	4413      	add	r3, r2
 8001876:	011b      	lsls	r3, r3, #4
 8001878:	440b      	add	r3, r1
 800187a:	332c      	adds	r3, #44	@ 0x2c
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	f083 0301 	eor.w	r3, r3, #1
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b00      	cmp	r3, #0
 8001886:	d002      	beq.n	800188e <Auth_CreateSessionForCurrentRequest+0x42>
 8001888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800188a:	637b      	str	r3, [r7, #52]	@ 0x34
 800188c:	e005      	b.n	800189a <Auth_CreateSessionForCurrentRequest+0x4e>
    for (int i = 0; i < SESSION_TABLE_SIZE; i++) {
 800188e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001890:	3301      	adds	r3, #1
 8001892:	633b      	str	r3, [r7, #48]	@ 0x30
 8001894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001896:	2b07      	cmp	r3, #7
 8001898:	dde8      	ble.n	800186c <Auth_CreateSessionForCurrentRequest+0x20>
    }
    if (idx < 0) return false;
 800189a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800189c:	2b00      	cmp	r3, #0
 800189e:	da01      	bge.n	80018a4 <Auth_CreateSessionForCurrentRequest+0x58>
 80018a0:	2300      	movs	r3, #0
 80018a2:	e059      	b.n	8001958 <Auth_CreateSessionForCurrentRequest+0x10c>
    g_sessions[idx].in_use = true;
 80018a4:	492e      	ldr	r1, [pc, #184]	@ (8001960 <Auth_CreateSessionForCurrentRequest+0x114>)
 80018a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80018a8:	4613      	mov	r3, r2
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	4413      	add	r3, r2
 80018ae:	011b      	lsls	r3, r3, #4
 80018b0:	440b      	add	r3, r1
 80018b2:	332c      	adds	r3, #44	@ 0x2c
 80018b4:	2201      	movs	r2, #1
 80018b6:	701a      	strb	r2, [r3, #0]
    strncpy(g_sessions[idx].sid, sid, sizeof(g_sessions[idx].sid));
 80018b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80018ba:	4613      	mov	r3, r2
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	4413      	add	r3, r2
 80018c0:	011b      	lsls	r3, r3, #4
 80018c2:	4a27      	ldr	r2, [pc, #156]	@ (8001960 <Auth_CreateSessionForCurrentRequest+0x114>)
 80018c4:	4413      	add	r3, r2
 80018c6:	f107 010c 	add.w	r1, r7, #12
 80018ca:	2221      	movs	r2, #33	@ 0x21
 80018cc:	4618      	mov	r0, r3
 80018ce:	f020 fbf9 	bl	80220c4 <strncpy>
    g_sessions[idx].sid[32] = '\0';
 80018d2:	4923      	ldr	r1, [pc, #140]	@ (8001960 <Auth_CreateSessionForCurrentRequest+0x114>)
 80018d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80018d6:	4613      	mov	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	4413      	add	r3, r2
 80018dc:	011b      	lsls	r3, r3, #4
 80018de:	440b      	add	r3, r1
 80018e0:	3320      	adds	r3, #32
 80018e2:	2200      	movs	r2, #0
 80018e4:	701a      	strb	r2, [r3, #0]
    if (g_req_ip_set) g_sessions[idx].ip = g_req_ip; else memset(&g_sessions[idx].ip, 0, sizeof(g_sessions[idx].ip));
 80018e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001964 <Auth_CreateSessionForCurrentRequest+0x118>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00b      	beq.n	8001906 <Auth_CreateSessionForCurrentRequest+0xba>
 80018ee:	491c      	ldr	r1, [pc, #112]	@ (8001960 <Auth_CreateSessionForCurrentRequest+0x114>)
 80018f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80018f2:	4613      	mov	r3, r2
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	4413      	add	r3, r2
 80018f8:	011b      	lsls	r3, r3, #4
 80018fa:	440b      	add	r3, r1
 80018fc:	3324      	adds	r3, #36	@ 0x24
 80018fe:	4a1a      	ldr	r2, [pc, #104]	@ (8001968 <Auth_CreateSessionForCurrentRequest+0x11c>)
 8001900:	6812      	ldr	r2, [r2, #0]
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	e00d      	b.n	8001922 <Auth_CreateSessionForCurrentRequest+0xd6>
 8001906:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001908:	4613      	mov	r3, r2
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	4413      	add	r3, r2
 800190e:	011b      	lsls	r3, r3, #4
 8001910:	3320      	adds	r3, #32
 8001912:	4a13      	ldr	r2, [pc, #76]	@ (8001960 <Auth_CreateSessionForCurrentRequest+0x114>)
 8001914:	4413      	add	r3, r2
 8001916:	3304      	adds	r3, #4
 8001918:	2204      	movs	r2, #4
 800191a:	2100      	movs	r1, #0
 800191c:	4618      	mov	r0, r3
 800191e:	f020 fb89 	bl	8022034 <memset>
    g_sessions[idx].deadline_ms = now_ms + ttl_ms;
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	18d1      	adds	r1, r2, r3
 8001928:	480d      	ldr	r0, [pc, #52]	@ (8001960 <Auth_CreateSessionForCurrentRequest+0x114>)
 800192a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800192c:	4613      	mov	r3, r2
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	4413      	add	r3, r2
 8001932:	011b      	lsls	r3, r3, #4
 8001934:	4403      	add	r3, r0
 8001936:	3328      	adds	r3, #40	@ 0x28
 8001938:	6019      	str	r1, [r3, #0]
    strncpy(g_resp_setcookie_sid, sid, sizeof(g_resp_setcookie_sid));
 800193a:	f107 030c 	add.w	r3, r7, #12
 800193e:	2221      	movs	r2, #33	@ 0x21
 8001940:	4619      	mov	r1, r3
 8001942:	480a      	ldr	r0, [pc, #40]	@ (800196c <Auth_CreateSessionForCurrentRequest+0x120>)
 8001944:	f020 fbbe 	bl	80220c4 <strncpy>
    g_resp_setcookie_sid[32] = '\0';
 8001948:	4b08      	ldr	r3, [pc, #32]	@ (800196c <Auth_CreateSessionForCurrentRequest+0x120>)
 800194a:	2200      	movs	r2, #0
 800194c:	f883 2020 	strb.w	r2, [r3, #32]
    g_resp_setcookie_pending = true;
 8001950:	4b07      	ldr	r3, [pc, #28]	@ (8001970 <Auth_CreateSessionForCurrentRequest+0x124>)
 8001952:	2201      	movs	r2, #1
 8001954:	701a      	strb	r2, [r3, #0]
    return true;
 8001956:	2301      	movs	r3, #1
}
 8001958:	4618      	mov	r0, r3
 800195a:	3738      	adds	r7, #56	@ 0x38
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20000310 	.word	0x20000310
 8001964:	20000494 	.word	0x20000494
 8001968:	20000490 	.word	0x20000490
 800196c:	200004bc 	.word	0x200004bc
 8001970:	200004dd 	.word	0x200004dd

08001974 <Auth_TakePendingSetCookie>:

bool Auth_TakePendingSetCookie(char* out_sid, uint16_t out_len) {
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	807b      	strh	r3, [r7, #2]
    if (!g_resp_setcookie_pending || out_len < 33) return false;
 8001980:	4b0e      	ldr	r3, [pc, #56]	@ (80019bc <Auth_TakePendingSetCookie+0x48>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	f083 0301 	eor.w	r3, r3, #1
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b00      	cmp	r3, #0
 800198c:	d102      	bne.n	8001994 <Auth_TakePendingSetCookie+0x20>
 800198e:	887b      	ldrh	r3, [r7, #2]
 8001990:	2b20      	cmp	r3, #32
 8001992:	d801      	bhi.n	8001998 <Auth_TakePendingSetCookie+0x24>
 8001994:	2300      	movs	r3, #0
 8001996:	e00d      	b.n	80019b4 <Auth_TakePendingSetCookie+0x40>
    strncpy(out_sid, g_resp_setcookie_sid, out_len);
 8001998:	887b      	ldrh	r3, [r7, #2]
 800199a:	461a      	mov	r2, r3
 800199c:	4908      	ldr	r1, [pc, #32]	@ (80019c0 <Auth_TakePendingSetCookie+0x4c>)
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f020 fb90 	bl	80220c4 <strncpy>
    out_sid[32] = '\0';
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3320      	adds	r3, #32
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]
    g_resp_setcookie_pending = false;
 80019ac:	4b03      	ldr	r3, [pc, #12]	@ (80019bc <Auth_TakePendingSetCookie+0x48>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]
    return true;
 80019b2:	2301      	movs	r3, #1
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	200004dd 	.word	0x200004dd
 80019c0:	200004bc 	.word	0x200004bc

080019c4 <Auth_RevokeCurrentSession>:

void Auth_RevokeCurrentSession(void) {
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
    if (!g_req_cookie_sid_present) return;
 80019ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001a04 <Auth_RevokeCurrentSession+0x40>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	f083 0301 	eor.w	r3, r3, #1
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d111      	bne.n	80019fc <Auth_RevokeCurrentSession+0x38>
    int idx = session_find_by_sid(g_req_cookie_sid);
 80019d8:	480b      	ldr	r0, [pc, #44]	@ (8001a08 <Auth_RevokeCurrentSession+0x44>)
 80019da:	f7ff ff01 	bl	80017e0 <session_find_by_sid>
 80019de:	6078      	str	r0, [r7, #4]
    if (idx >= 0) g_sessions[idx].in_use = false;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	db0b      	blt.n	80019fe <Auth_RevokeCurrentSession+0x3a>
 80019e6:	4909      	ldr	r1, [pc, #36]	@ (8001a0c <Auth_RevokeCurrentSession+0x48>)
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	4613      	mov	r3, r2
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	4413      	add	r3, r2
 80019f0:	011b      	lsls	r3, r3, #4
 80019f2:	440b      	add	r3, r1
 80019f4:	332c      	adds	r3, #44	@ 0x2c
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]
 80019fa:	e000      	b.n	80019fe <Auth_RevokeCurrentSession+0x3a>
    if (!g_req_cookie_sid_present) return;
 80019fc:	bf00      	nop
}
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	200004b9 	.word	0x200004b9
 8001a08:	20000498 	.word	0x20000498
 8001a0c:	20000310 	.word	0x20000310

08001a10 <Auth_IsCurrentRequestAuthorized>:

bool Auth_IsCurrentRequestAuthorized(uint32_t now_ms) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
    if (!g_req_cookie_sid_present) return false;
 8001a18:	4b1a      	ldr	r3, [pc, #104]	@ (8001a84 <Auth_IsCurrentRequestAuthorized+0x74>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	f083 0301 	eor.w	r3, r3, #1
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <Auth_IsCurrentRequestAuthorized+0x1a>
 8001a26:	2300      	movs	r3, #0
 8001a28:	e027      	b.n	8001a7a <Auth_IsCurrentRequestAuthorized+0x6a>
    int idx = session_find_by_sid(g_req_cookie_sid);
 8001a2a:	4817      	ldr	r0, [pc, #92]	@ (8001a88 <Auth_IsCurrentRequestAuthorized+0x78>)
 8001a2c:	f7ff fed8 	bl	80017e0 <session_find_by_sid>
 8001a30:	60f8      	str	r0, [r7, #12]
    if (idx < 0) return false;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	da01      	bge.n	8001a3c <Auth_IsCurrentRequestAuthorized+0x2c>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	e01e      	b.n	8001a7a <Auth_IsCurrentRequestAuthorized+0x6a>
    SessionEntry* e = &g_sessions[idx];
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	4413      	add	r3, r2
 8001a44:	011b      	lsls	r3, r3, #4
 8001a46:	4a11      	ldr	r2, [pc, #68]	@ (8001a8c <Auth_IsCurrentRequestAuthorized+0x7c>)
 8001a48:	4413      	add	r3, r2
 8001a4a:	60bb      	str	r3, [r7, #8]
    if (!e->in_use) return false;
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001a52:	f083 0301 	eor.w	r3, r3, #1
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <Auth_IsCurrentRequestAuthorized+0x50>
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	e00c      	b.n	8001a7a <Auth_IsCurrentRequestAuthorized+0x6a>
    if ((int32_t)(e->deadline_ms - now_ms) > 0) return true;
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	dd01      	ble.n	8001a70 <Auth_IsCurrentRequestAuthorized+0x60>
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e004      	b.n	8001a7a <Auth_IsCurrentRequestAuthorized+0x6a>
    e->in_use = false; /* expired */
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    return false;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	200004b9 	.word	0x200004b9
 8001a88:	20000498 	.word	0x20000498
 8001a8c:	20000310 	.word	0x20000310

08001a90 <crc32_calc>:
#define BKP_WORDS     (sizeof(credentials_t)/4)  // сколько слов займём

static credentials_t creds;

// CRC32 для контроля
static uint32_t crc32_calc(const void *data, size_t len) {
 8001a90:	b480      	push	{r7}
 8001a92:	b087      	sub	sp, #28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
    uint32_t crc = 0xFFFFFFFF;
 8001a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9e:	617b      	str	r3, [r7, #20]
    const uint8_t *p = data;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	613b      	str	r3, [r7, #16]
    while (len--) {
 8001aa4:	e01a      	b.n	8001adc <crc32_calc+0x4c>
        crc ^= *p++;
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1c5a      	adds	r2, r3, #1
 8001aaa:	613a      	str	r2, [r7, #16]
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	4053      	eors	r3, r2
 8001ab4:	617b      	str	r3, [r7, #20]
        for (int i = 0; i < 8; i++) {
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	e00c      	b.n	8001ad6 <crc32_calc+0x46>
            crc = (crc >> 1) ^ (0xEDB88320 & (-(crc & 1)));
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	085a      	lsrs	r2, r3, #1
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	4259      	negs	r1, r3
 8001ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8001af4 <crc32_calc+0x64>)
 8001aca:	400b      	ands	r3, r1
 8001acc:	4053      	eors	r3, r2
 8001ace:	617b      	str	r3, [r7, #20]
        for (int i = 0; i < 8; i++) {
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2b07      	cmp	r3, #7
 8001ada:	ddef      	ble.n	8001abc <crc32_calc+0x2c>
    while (len--) {
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	1e5a      	subs	r2, r3, #1
 8001ae0:	603a      	str	r2, [r7, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1df      	bne.n	8001aa6 <crc32_calc+0x16>
        }
    }
    return ~crc;
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	43db      	mvns	r3, r3
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	371c      	adds	r7, #28
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr
 8001af4:	edb88320 	.word	0xedb88320

08001af8 <backup_write>:

static void backup_write(const credentials_t *c) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
    const uint32_t *src = (const uint32_t*)c;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = 0; i < BKP_WORDS; i++) {
 8001b04:	2300      	movs	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	e00c      	b.n	8001b24 <backup_write+0x2c>
        HAL_RTCEx_BKUPWrite(&hrtc, BKP_BASE + i, src[i]);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	4413      	add	r3, r2
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	461a      	mov	r2, r3
 8001b16:	68f9      	ldr	r1, [r7, #12]
 8001b18:	4806      	ldr	r0, [pc, #24]	@ (8001b34 <backup_write+0x3c>)
 8001b1a:	f009 f834 	bl	800ab86 <HAL_RTCEx_BKUPWrite>
    for (uint32_t i = 0; i < BKP_WORDS; i++) {
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	3301      	adds	r3, #1
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2b08      	cmp	r3, #8
 8001b28:	d9ef      	bls.n	8001b0a <backup_write+0x12>
    }
}
 8001b2a:	bf00      	nop
 8001b2c:	bf00      	nop
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20002b84 	.word	0x20002b84

08001b38 <backup_read>:

static void backup_read(credentials_t *c) {
 8001b38:	b590      	push	{r4, r7, lr}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
    uint32_t *dst = (uint32_t*)c;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = 0; i < BKP_WORDS; i++) {
 8001b44:	2300      	movs	r3, #0
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	e00c      	b.n	8001b64 <backup_read+0x2c>
        dst[i] = HAL_RTCEx_BKUPRead(&hrtc, BKP_BASE + i);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	18d4      	adds	r4, r2, r3
 8001b52:	68f9      	ldr	r1, [r7, #12]
 8001b54:	4807      	ldr	r0, [pc, #28]	@ (8001b74 <backup_read+0x3c>)
 8001b56:	f009 f82f 	bl	800abb8 <HAL_RTCEx_BKUPRead>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	6023      	str	r3, [r4, #0]
    for (uint32_t i = 0; i < BKP_WORDS; i++) {
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	3301      	adds	r3, #1
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2b08      	cmp	r3, #8
 8001b68:	d9ef      	bls.n	8001b4a <backup_read+0x12>
    }
}
 8001b6a:	bf00      	nop
 8001b6c:	bf00      	nop
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd90      	pop	{r4, r7, pc}
 8001b74:	20002b84 	.word	0x20002b84

08001b78 <Creds_Init>:

// публичные функции
void Creds_Init(void) {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
    backup_read(&creds);
 8001b7e:	4814      	ldr	r0, [pc, #80]	@ (8001bd0 <Creds_Init+0x58>)
 8001b80:	f7ff ffda 	bl	8001b38 <backup_read>

    uint32_t crc = crc32_calc(&creds, sizeof(credentials_t) - sizeof(uint32_t));
 8001b84:	2120      	movs	r1, #32
 8001b86:	4812      	ldr	r0, [pc, #72]	@ (8001bd0 <Creds_Init+0x58>)
 8001b88:	f7ff ff82 	bl	8001a90 <crc32_calc>
 8001b8c:	6078      	str	r0, [r7, #4]
    if (crc != creds.crc) {
 8001b8e:	4b10      	ldr	r3, [pc, #64]	@ (8001bd0 <Creds_Init+0x58>)
 8001b90:	6a1b      	ldr	r3, [r3, #32]
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d017      	beq.n	8001bc8 <Creds_Init+0x50>
        // дефолтные значения
        strcpy(creds.username, "admin");
 8001b98:	4b0d      	ldr	r3, [pc, #52]	@ (8001bd0 <Creds_Init+0x58>)
 8001b9a:	4a0e      	ldr	r2, [pc, #56]	@ (8001bd4 <Creds_Init+0x5c>)
 8001b9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ba0:	6018      	str	r0, [r3, #0]
 8001ba2:	3304      	adds	r3, #4
 8001ba4:	8019      	strh	r1, [r3, #0]
        strcpy(creds.password, "admin");
 8001ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd8 <Creds_Init+0x60>)
 8001ba8:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd4 <Creds_Init+0x5c>)
 8001baa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bae:	6018      	str	r0, [r3, #0]
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	8019      	strh	r1, [r3, #0]
        creds.crc = crc32_calc(&creds, sizeof(credentials_t) - sizeof(uint32_t));
 8001bb4:	2120      	movs	r1, #32
 8001bb6:	4806      	ldr	r0, [pc, #24]	@ (8001bd0 <Creds_Init+0x58>)
 8001bb8:	f7ff ff6a 	bl	8001a90 <crc32_calc>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	4a04      	ldr	r2, [pc, #16]	@ (8001bd0 <Creds_Init+0x58>)
 8001bc0:	6213      	str	r3, [r2, #32]
        backup_write(&creds);
 8001bc2:	4803      	ldr	r0, [pc, #12]	@ (8001bd0 <Creds_Init+0x58>)
 8001bc4:	f7ff ff98 	bl	8001af8 <backup_write>
    }
}
 8001bc8:	bf00      	nop
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	200004e0 	.word	0x200004e0
 8001bd4:	08024afc 	.word	0x08024afc
 8001bd8:	200004f0 	.word	0x200004f0

08001bdc <Creds_CheckLogin>:

bool Creds_CheckLogin(const char *user, const char *pass) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
    return (strncmp(user, creds.username, MAX_CRED_LEN) == 0 &&
 8001be6:	2210      	movs	r2, #16
 8001be8:	490c      	ldr	r1, [pc, #48]	@ (8001c1c <Creds_CheckLogin+0x40>)
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f020 fa58 	bl	80220a0 <strncmp>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d109      	bne.n	8001c0a <Creds_CheckLogin+0x2e>
            strncmp(pass, creds.password, MAX_CRED_LEN) == 0);
 8001bf6:	2210      	movs	r2, #16
 8001bf8:	4909      	ldr	r1, [pc, #36]	@ (8001c20 <Creds_CheckLogin+0x44>)
 8001bfa:	6838      	ldr	r0, [r7, #0]
 8001bfc:	f020 fa50 	bl	80220a0 <strncmp>
 8001c00:	4603      	mov	r3, r0
    return (strncmp(user, creds.username, MAX_CRED_LEN) == 0 &&
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <Creds_CheckLogin+0x2e>
 8001c06:	2301      	movs	r3, #1
 8001c08:	e000      	b.n	8001c0c <Creds_CheckLogin+0x30>
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	b2db      	uxtb	r3, r3
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	200004e0 	.word	0x200004e0
 8001c20:	200004f0 	.word	0x200004f0

08001c24 <HAL_ADC_ConvCpltCallback>:
#define ADC_BUFFER_SIZE   (3 * ADC_SAMPLES)
uint32_t adc_buffer[ADC_BUFFER_SIZE];
volatile uint8_t dma_ready = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
    dma_ready = 1;
 8001c2c:	4b03      	ldr	r3, [pc, #12]	@ (8001c3c <HAL_ADC_ConvCpltCallback+0x18>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	701a      	strb	r2, [r3, #0]
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr
 8001c3c:	20002a84 	.word	0x20002a84

08001c40 <NET_CGI_Handler>:
const tCGI NET_CGI = {"/set_network.cgi", NET_CGI_Handler};
const tCGI LOGIN_CGI = {"/login.cgi", LOGIN_CGI_Handler};
tCGI CGI_TAB[6];

const char* NET_CGI_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
 8001c4c:	603b      	str	r3, [r7, #0]
    // Reset DHCP flag; it's set only when parameter is present
    new_dhcp_enabled = 0;
 8001c4e:	4b42      	ldr	r3, [pc, #264]	@ (8001d58 <NET_CGI_Handler+0x118>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	701a      	strb	r2, [r3, #0]
    for (int i=0; i<iNumParams; i++) {
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	e071      	b.n	8001d3e <NET_CGI_Handler+0xfe>
        // Сетевые
        if (strcmp(pcParam[i], "ip") == 0 && pcValue[i][0] != '\0') new_ip.addr = ipaddr_addr(pcValue[i]);
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	493d      	ldr	r1, [pc, #244]	@ (8001d5c <NET_CGI_Handler+0x11c>)
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7fe faae 	bl	80001c8 <strcmp>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d113      	bne.n	8001c9a <NET_CGI_Handler+0x5a>
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	4413      	add	r3, r2
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00b      	beq.n	8001c9a <NET_CGI_Handler+0x5a>
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	4413      	add	r3, r2
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f01e f8ef 	bl	801fe70 <ipaddr_addr>
 8001c92:	4603      	mov	r3, r0
 8001c94:	4a32      	ldr	r2, [pc, #200]	@ (8001d60 <NET_CGI_Handler+0x120>)
 8001c96:	6013      	str	r3, [r2, #0]
 8001c98:	e04e      	b.n	8001d38 <NET_CGI_Handler+0xf8>
        else if (strcmp(pcParam[i], "mask") == 0 && pcValue[i][0] != '\0') new_mask.addr = ipaddr_addr(pcValue[i]);
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	492f      	ldr	r1, [pc, #188]	@ (8001d64 <NET_CGI_Handler+0x124>)
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe fa8e 	bl	80001c8 <strcmp>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d113      	bne.n	8001cda <NET_CGI_Handler+0x9a>
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	4413      	add	r3, r2
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d00b      	beq.n	8001cda <NET_CGI_Handler+0x9a>
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	4413      	add	r3, r2
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f01e f8cf 	bl	801fe70 <ipaddr_addr>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	4a24      	ldr	r2, [pc, #144]	@ (8001d68 <NET_CGI_Handler+0x128>)
 8001cd6:	6013      	str	r3, [r2, #0]
 8001cd8:	e02e      	b.n	8001d38 <NET_CGI_Handler+0xf8>
        else if (strcmp(pcParam[i], "gateway") == 0 && pcValue[i][0] != '\0') new_gw.addr = ipaddr_addr(pcValue[i]);
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4921      	ldr	r1, [pc, #132]	@ (8001d6c <NET_CGI_Handler+0x12c>)
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7fe fa6e 	bl	80001c8 <strcmp>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d113      	bne.n	8001d1a <NET_CGI_Handler+0xda>
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00b      	beq.n	8001d1a <NET_CGI_Handler+0xda>
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	4413      	add	r3, r2
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f01e f8af 	bl	801fe70 <ipaddr_addr>
 8001d12:	4603      	mov	r3, r0
 8001d14:	4a16      	ldr	r2, [pc, #88]	@ (8001d70 <NET_CGI_Handler+0x130>)
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	e00e      	b.n	8001d38 <NET_CGI_Handler+0xf8>
        else if (strcmp(pcParam[i], "dhcp") == 0) new_dhcp_enabled = 1;
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4913      	ldr	r1, [pc, #76]	@ (8001d74 <NET_CGI_Handler+0x134>)
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fa4e 	bl	80001c8 <strcmp>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d102      	bne.n	8001d38 <NET_CGI_Handler+0xf8>
 8001d32:	4b09      	ldr	r3, [pc, #36]	@ (8001d58 <NET_CGI_Handler+0x118>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	701a      	strb	r2, [r3, #0]
    for (int i=0; i<iNumParams; i++) {
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	617b      	str	r3, [r7, #20]
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	db89      	blt.n	8001c5a <NET_CGI_Handler+0x1a>
    }

    apply_network_settings = 1;
 8001d46:	4b0c      	ldr	r3, [pc, #48]	@ (8001d78 <NET_CGI_Handler+0x138>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	701a      	strb	r2, [r3, #0]

    return "/settings.html";  // редирект обратно
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d7c <NET_CGI_Handler+0x13c>)
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3718      	adds	r7, #24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20002c00 	.word	0x20002c00
 8001d5c:	08024b24 	.word	0x08024b24
 8001d60:	20002bf4 	.word	0x20002bf4
 8001d64:	08024b28 	.word	0x08024b28
 8001d68:	20002bf8 	.word	0x20002bf8
 8001d6c:	08024b30 	.word	0x08024b30
 8001d70:	20002bfc 	.word	0x20002bfc
 8001d74:	08024b38 	.word	0x08024b38
 8001d78:	20002c01 	.word	0x20002c01
 8001d7c:	08024b40 	.word	0x08024b40

08001d80 <DATE_CGI_Handler>:

uint8_t new_year=0, new_month=0, new_day=0;
uint8_t apply_date_settings = 0;

const char* DATE_CGI_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08a      	sub	sp, #40	@ 0x28
 8001d84:	af02      	add	r7, sp, #8
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
 8001d8c:	603b      	str	r3, [r7, #0]
    for(int i=0; i<iNumParams; i++)
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61fb      	str	r3, [r7, #28]
 8001d92:	e042      	b.n	8001e1a <DATE_CGI_Handler+0x9a>
    {
        if(strcmp(pcParam[i],"date")==0 && pcValue[i][0]!='\0')
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4923      	ldr	r1, [pc, #140]	@ (8001e2c <DATE_CGI_Handler+0xac>)
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7fe fa11 	bl	80001c8 <strcmp>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d133      	bne.n	8001e14 <DATE_CGI_Handler+0x94>
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	4413      	add	r3, r2
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d02b      	beq.n	8001e14 <DATE_CGI_Handler+0x94>
        {
            int y,m,d;
            if(sscanf(pcValue[i], "%d-%d-%d", &y,&m,&d)==3)
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	6818      	ldr	r0, [r3, #0]
 8001dc6:	f107 0114 	add.w	r1, r7, #20
 8001dca:	f107 0218 	add.w	r2, r7, #24
 8001dce:	f107 0310 	add.w	r3, r7, #16
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	4916      	ldr	r1, [pc, #88]	@ (8001e30 <DATE_CGI_Handler+0xb0>)
 8001dd8:	f01f fffc 	bl	8021dd4 <siscanf>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	d118      	bne.n	8001e14 <DATE_CGI_Handler+0x94>
            {
                new_year  = (uint8_t)(y % 100);
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	4a13      	ldr	r2, [pc, #76]	@ (8001e34 <DATE_CGI_Handler+0xb4>)
 8001de6:	fb82 1203 	smull	r1, r2, r2, r3
 8001dea:	1151      	asrs	r1, r2, #5
 8001dec:	17da      	asrs	r2, r3, #31
 8001dee:	1a8a      	subs	r2, r1, r2
 8001df0:	2164      	movs	r1, #100	@ 0x64
 8001df2:	fb01 f202 	mul.w	r2, r1, r2
 8001df6:	1a9a      	subs	r2, r3, r2
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8001e38 <DATE_CGI_Handler+0xb8>)
 8001dfc:	701a      	strb	r2, [r3, #0]
                new_month = (uint8_t)m;
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	4b0e      	ldr	r3, [pc, #56]	@ (8001e3c <DATE_CGI_Handler+0xbc>)
 8001e04:	701a      	strb	r2, [r3, #0]
                new_day   = (uint8_t)d;
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e40 <DATE_CGI_Handler+0xc0>)
 8001e0c:	701a      	strb	r2, [r3, #0]
                apply_date_settings = 1;
 8001e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e44 <DATE_CGI_Handler+0xc4>)
 8001e10:	2201      	movs	r2, #1
 8001e12:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<iNumParams; i++)
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	3301      	adds	r3, #1
 8001e18:	61fb      	str	r3, [r7, #28]
 8001e1a:	69fa      	ldr	r2, [r7, #28]
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	dbb8      	blt.n	8001d94 <DATE_CGI_Handler+0x14>
            }
        }
    }
    // Возвращаемся на страницу настроек
    return "/settings.html";
 8001e22:	4b09      	ldr	r3, [pc, #36]	@ (8001e48 <DATE_CGI_Handler+0xc8>)
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3720      	adds	r7, #32
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	08024b50 	.word	0x08024b50
 8001e30:	08024b58 	.word	0x08024b58
 8001e34:	51eb851f 	.word	0x51eb851f
 8001e38:	20002c34 	.word	0x20002c34
 8001e3c:	20002c35 	.word	0x20002c35
 8001e40:	20002c36 	.word	0x20002c36
 8001e44:	20002c37 	.word	0x20002c37
 8001e48:	08024b40 	.word	0x08024b40

08001e4c <TIME_CGI_Handler>:

uint8_t new_hours = 0, new_minutes = 0, new_seconds = 0;
uint8_t apply_time_settings = 0;

const char* TIME_CGI_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b092      	sub	sp, #72	@ 0x48
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
 8001e58:	603b      	str	r3, [r7, #0]
    apply_time_settings = 0;
 8001e5a:	4b64      	ldr	r3, [pc, #400]	@ (8001fec <TIME_CGI_Handler+0x1a0>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	701a      	strb	r2, [r3, #0]

    for(int i = 0; i < iNumParams; i++)
 8001e60:	2300      	movs	r3, #0
 8001e62:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e64:	e0b7      	b.n	8001fd6 <TIME_CGI_Handler+0x18a>
    {
        if(strcmp(pcParam[i], "time") == 0 && strlen(pcValue[i]) >= 5)
 8001e66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	495f      	ldr	r1, [pc, #380]	@ (8001ff0 <TIME_CGI_Handler+0x1a4>)
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe f9a8 	bl	80001c8 <strcmp>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f040 80a8 	bne.w	8001fd0 <TIME_CGI_Handler+0x184>
 8001e80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	4413      	add	r3, r2
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe f9a6 	bl	80001dc <strlen>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	f240 809c 	bls.w	8001fd0 <TIME_CGI_Handler+0x184>
        {
            // Декодируем URL-параметр (важно для '%3A' вместо ':')
            char decoded[16] = {0};
 8001e98:	f107 0318 	add.w	r3, r7, #24
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
            url_decode(decoded, pcValue[i]);
 8001ea6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	4413      	add	r3, r2
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	f107 0318 	add.w	r3, r7, #24
 8001eb4:	4611      	mov	r1, r2
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f000 fbf0 	bl	800269c <url_decode>

            // Простой парсинг без sscanf
            char *colon = strchr(decoded, ':');
 8001ebc:	f107 0318 	add.w	r3, r7, #24
 8001ec0:	213a      	movs	r1, #58	@ 0x3a
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f020 f8be 	bl	8022044 <strchr>
 8001ec8:	6338      	str	r0, [r7, #48]	@ 0x30
            if(colon != NULL)
 8001eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d07f      	beq.n	8001fd0 <TIME_CGI_Handler+0x184>
            {
                // Берем первые 2 цифры как часы (пропуская нецифровые)
                char hour_str[3] = {0};
 8001ed0:	f107 0314 	add.w	r3, r7, #20
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	460a      	mov	r2, r1
 8001ed8:	801a      	strh	r2, [r3, #0]
 8001eda:	460a      	mov	r2, r1
 8001edc:	709a      	strb	r2, [r3, #2]
                int hs = 0;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	643b      	str	r3, [r7, #64]	@ 0x40
                for (const char* p = decoded; *p && hs < 2; ++p) {
 8001ee2:	f107 0318 	add.w	r3, r7, #24
 8001ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ee8:	e017      	b.n	8001f1a <TIME_CGI_Handler+0xce>
                    if (*p >= '0' && *p <= '9') hour_str[hs++] = *p;
 8001eea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	2b2f      	cmp	r3, #47	@ 0x2f
 8001ef0:	d90c      	bls.n	8001f0c <TIME_CGI_Handler+0xc0>
 8001ef2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b39      	cmp	r3, #57	@ 0x39
 8001ef8:	d808      	bhi.n	8001f0c <TIME_CGI_Handler+0xc0>
 8001efa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001efc:	1c5a      	adds	r2, r3, #1
 8001efe:	643a      	str	r2, [r7, #64]	@ 0x40
 8001f00:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001f02:	7812      	ldrb	r2, [r2, #0]
 8001f04:	3348      	adds	r3, #72	@ 0x48
 8001f06:	443b      	add	r3, r7
 8001f08:	f803 2c34 	strb.w	r2, [r3, #-52]
                    if (*p == ':') break;
 8001f0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b3a      	cmp	r3, #58	@ 0x3a
 8001f12:	d00a      	beq.n	8001f2a <TIME_CGI_Handler+0xde>
                for (const char* p = decoded; *p && hs < 2; ++p) {
 8001f14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f16:	3301      	adds	r3, #1
 8001f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d004      	beq.n	8001f2c <TIME_CGI_Handler+0xe0>
 8001f22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	dde0      	ble.n	8001eea <TIME_CGI_Handler+0x9e>
 8001f28:	e000      	b.n	8001f2c <TIME_CGI_Handler+0xe0>
                    if (*p == ':') break;
 8001f2a:	bf00      	nop
                }
                hour_str[2] = '\0';
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	75bb      	strb	r3, [r7, #22]

                // Берем 2 цифры после двоеточия как минуты
                char min_str[3] = {0};
 8001f30:	f107 0310 	add.w	r3, r7, #16
 8001f34:	2100      	movs	r1, #0
 8001f36:	460a      	mov	r2, r1
 8001f38:	801a      	strh	r2, [r3, #0]
 8001f3a:	460a      	mov	r2, r1
 8001f3c:	709a      	strb	r2, [r3, #2]
                int ms = 0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	63bb      	str	r3, [r7, #56]	@ 0x38
                for (const char* p = colon + 1; *p && ms < 2; ++p) {
 8001f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f44:	3301      	adds	r3, #1
 8001f46:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f48:	e013      	b.n	8001f72 <TIME_CGI_Handler+0x126>
                    if (*p >= '0' && *p <= '9') min_str[ms++] = *p;
 8001f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001f50:	d90c      	bls.n	8001f6c <TIME_CGI_Handler+0x120>
 8001f52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b39      	cmp	r3, #57	@ 0x39
 8001f58:	d808      	bhi.n	8001f6c <TIME_CGI_Handler+0x120>
 8001f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f5c:	1c5a      	adds	r2, r3, #1
 8001f5e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001f60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f62:	7812      	ldrb	r2, [r2, #0]
 8001f64:	3348      	adds	r3, #72	@ 0x48
 8001f66:	443b      	add	r3, r7
 8001f68:	f803 2c38 	strb.w	r2, [r3, #-56]
                for (const char* p = colon + 1; *p && ms < 2; ++p) {
 8001f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f6e:	3301      	adds	r3, #1
 8001f70:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d002      	beq.n	8001f80 <TIME_CGI_Handler+0x134>
 8001f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	dde4      	ble.n	8001f4a <TIME_CGI_Handler+0xfe>
                }
                min_str[2] = '\0';
 8001f80:	2300      	movs	r3, #0
 8001f82:	74bb      	strb	r3, [r7, #18]

                int h = atoi(hour_str);
 8001f84:	f107 0314 	add.w	r3, r7, #20
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f01f f88f 	bl	80210ac <atoi>
 8001f8e:	62f8      	str	r0, [r7, #44]	@ 0x2c
                int mi = atoi(min_str);
 8001f90:	f107 0310 	add.w	r3, r7, #16
 8001f94:	4618      	mov	r0, r3
 8001f96:	f01f f889 	bl	80210ac <atoi>
 8001f9a:	62b8      	str	r0, [r7, #40]	@ 0x28

                if(h >= 0 && h < 24 && mi >= 0 && mi < 60)
 8001f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	db16      	blt.n	8001fd0 <TIME_CGI_Handler+0x184>
 8001fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fa4:	2b17      	cmp	r3, #23
 8001fa6:	dc13      	bgt.n	8001fd0 <TIME_CGI_Handler+0x184>
 8001fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	db10      	blt.n	8001fd0 <TIME_CGI_Handler+0x184>
 8001fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fb0:	2b3b      	cmp	r3, #59	@ 0x3b
 8001fb2:	dc0d      	bgt.n	8001fd0 <TIME_CGI_Handler+0x184>
                {
                    new_hours = (uint8_t)h;
 8001fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff4 <TIME_CGI_Handler+0x1a8>)
 8001fba:	701a      	strb	r2, [r3, #0]
                    new_minutes = (uint8_t)mi;
 8001fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff8 <TIME_CGI_Handler+0x1ac>)
 8001fc2:	701a      	strb	r2, [r3, #0]
                    new_seconds = 0;
 8001fc4:	4b0d      	ldr	r3, [pc, #52]	@ (8001ffc <TIME_CGI_Handler+0x1b0>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	701a      	strb	r2, [r3, #0]
                    apply_time_settings = 1;
 8001fca:	4b08      	ldr	r3, [pc, #32]	@ (8001fec <TIME_CGI_Handler+0x1a0>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < iNumParams; i++)
 8001fd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8001fd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	f6ff af43 	blt.w	8001e66 <TIME_CGI_Handler+0x1a>
                }
            }
        }
    }
    return "/settings.html";
 8001fe0:	4b07      	ldr	r3, [pc, #28]	@ (8002000 <TIME_CGI_Handler+0x1b4>)
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3748      	adds	r7, #72	@ 0x48
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20002c3b 	.word	0x20002c3b
 8001ff0:	08024b74 	.word	0x08024b74
 8001ff4:	20002c38 	.word	0x20002c38
 8001ff8:	20002c39 	.word	0x20002c39
 8001ffc:	20002c3a 	.word	0x20002c3a
 8002000:	08024b40 	.word	0x08024b40

08002004 <SNMP_CGI_Handler>:
char snmp_trap[32] = "public";
uint8_t apply_snmp_settings = 0;

// CGI-хэндлер для SNMP
const char* SNMP_CGI_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
 8002010:	603b      	str	r3, [r7, #0]
    for(int i=0; i<iNumParams; i++)
 8002012:	2300      	movs	r3, #0
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	e067      	b.n	80020e8 <SNMP_CGI_Handler+0xe4>
    {
        if(strcmp(pcParam[i],"snmp-read")==0 && pcValue[i][0]!='\0')
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	4413      	add	r3, r2
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4937      	ldr	r1, [pc, #220]	@ (8002100 <SNMP_CGI_Handler+0xfc>)
 8002024:	4618      	mov	r0, r3
 8002026:	f7fe f8cf 	bl	80001c8 <strcmp>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d115      	bne.n	800205c <SNMP_CGI_Handler+0x58>
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	4413      	add	r3, r2
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00d      	beq.n	800205c <SNMP_CGI_Handler+0x58>
        {
            strncpy(snmp_read, pcValue[i], sizeof(snmp_read)-1);
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	4413      	add	r3, r2
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	221f      	movs	r2, #31
 800204c:	4619      	mov	r1, r3
 800204e:	482d      	ldr	r0, [pc, #180]	@ (8002104 <SNMP_CGI_Handler+0x100>)
 8002050:	f020 f838 	bl	80220c4 <strncpy>
            snmp_read[sizeof(snmp_read)-1] = 0;
 8002054:	4b2b      	ldr	r3, [pc, #172]	@ (8002104 <SNMP_CGI_Handler+0x100>)
 8002056:	2200      	movs	r2, #0
 8002058:	77da      	strb	r2, [r3, #31]
 800205a:	e042      	b.n	80020e2 <SNMP_CGI_Handler+0xde>
        }
        else if(strcmp(pcParam[i],"snmp-write")==0 && pcValue[i][0]!='\0')
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	4413      	add	r3, r2
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4928      	ldr	r1, [pc, #160]	@ (8002108 <SNMP_CGI_Handler+0x104>)
 8002068:	4618      	mov	r0, r3
 800206a:	f7fe f8ad 	bl	80001c8 <strcmp>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d115      	bne.n	80020a0 <SNMP_CGI_Handler+0x9c>
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	4413      	add	r3, r2
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d00d      	beq.n	80020a0 <SNMP_CGI_Handler+0x9c>
        {
            strncpy(snmp_write, pcValue[i], sizeof(snmp_write)-1);
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	4413      	add	r3, r2
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	221f      	movs	r2, #31
 8002090:	4619      	mov	r1, r3
 8002092:	481e      	ldr	r0, [pc, #120]	@ (800210c <SNMP_CGI_Handler+0x108>)
 8002094:	f020 f816 	bl	80220c4 <strncpy>
            snmp_write[sizeof(snmp_write)-1] = 0;
 8002098:	4b1c      	ldr	r3, [pc, #112]	@ (800210c <SNMP_CGI_Handler+0x108>)
 800209a:	2200      	movs	r2, #0
 800209c:	77da      	strb	r2, [r3, #31]
 800209e:	e020      	b.n	80020e2 <SNMP_CGI_Handler+0xde>
        }
        else if(strcmp(pcParam[i],"snmp-trap")==0 && pcValue[i][0]!='\0')
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	4413      	add	r3, r2
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4919      	ldr	r1, [pc, #100]	@ (8002110 <SNMP_CGI_Handler+0x10c>)
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7fe f88b 	bl	80001c8 <strcmp>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d114      	bne.n	80020e2 <SNMP_CGI_Handler+0xde>
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	4413      	add	r3, r2
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00c      	beq.n	80020e2 <SNMP_CGI_Handler+0xde>
        {
            strncpy(snmp_trap, pcValue[i], sizeof(snmp_trap)-1);
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	4413      	add	r3, r2
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	221f      	movs	r2, #31
 80020d4:	4619      	mov	r1, r3
 80020d6:	480f      	ldr	r0, [pc, #60]	@ (8002114 <SNMP_CGI_Handler+0x110>)
 80020d8:	f01f fff4 	bl	80220c4 <strncpy>
            snmp_trap[sizeof(snmp_trap)-1] = 0;
 80020dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002114 <SNMP_CGI_Handler+0x110>)
 80020de:	2200      	movs	r2, #0
 80020e0:	77da      	strb	r2, [r3, #31]
    for(int i=0; i<iNumParams; i++)
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	3301      	adds	r3, #1
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	db93      	blt.n	8002018 <SNMP_CGI_Handler+0x14>
        }
    }
    apply_snmp_settings = 1; // ставим флаг применения в main()
 80020f0:	4b09      	ldr	r3, [pc, #36]	@ (8002118 <SNMP_CGI_Handler+0x114>)
 80020f2:	2201      	movs	r2, #1
 80020f4:	701a      	strb	r2, [r3, #0]
    return "/settings.html";  // редирект обратно
 80020f6:	4b09      	ldr	r3, [pc, #36]	@ (800211c <SNMP_CGI_Handler+0x118>)
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	08024b8c 	.word	0x08024b8c
 8002104:	20000014 	.word	0x20000014
 8002108:	08024b98 	.word	0x08024b98
 800210c:	20000034 	.word	0x20000034
 8002110:	08024ba4 	.word	0x08024ba4
 8002114:	20000054 	.word	0x20000054
 8002118:	20002c3c 	.word	0x20002c3c
 800211c:	08024b40 	.word	0x08024b40

08002120 <Flash_GetSector>:

FW_Update_Context fw_ctx;
static bool fw_request_active = false;   // текущий POST = fw_update?
// --- Helpers for Flash OTA ---
static uint32_t Flash_GetSector(uint32_t Address)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
    if (Address < 0x08004000U) return FLASH_SECTOR_0;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a11      	ldr	r2, [pc, #68]	@ (8002170 <Flash_GetSector+0x50>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d201      	bcs.n	8002134 <Flash_GetSector+0x14>
 8002130:	2300      	movs	r3, #0
 8002132:	e018      	b.n	8002166 <Flash_GetSector+0x46>
    if (Address < 0x08008000U) return FLASH_SECTOR_1;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a0f      	ldr	r2, [pc, #60]	@ (8002174 <Flash_GetSector+0x54>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d201      	bcs.n	8002140 <Flash_GetSector+0x20>
 800213c:	2301      	movs	r3, #1
 800213e:	e012      	b.n	8002166 <Flash_GetSector+0x46>
    if (Address < 0x0800C000U) return FLASH_SECTOR_2;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a0d      	ldr	r2, [pc, #52]	@ (8002178 <Flash_GetSector+0x58>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d201      	bcs.n	800214c <Flash_GetSector+0x2c>
 8002148:	2302      	movs	r3, #2
 800214a:	e00c      	b.n	8002166 <Flash_GetSector+0x46>
    if (Address < 0x08010000U) return FLASH_SECTOR_3;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a0b      	ldr	r2, [pc, #44]	@ (800217c <Flash_GetSector+0x5c>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d801      	bhi.n	8002158 <Flash_GetSector+0x38>
 8002154:	2303      	movs	r3, #3
 8002156:	e006      	b.n	8002166 <Flash_GetSector+0x46>
    if (Address < 0x08020000U) return FLASH_SECTOR_4;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a09      	ldr	r2, [pc, #36]	@ (8002180 <Flash_GetSector+0x60>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d801      	bhi.n	8002164 <Flash_GetSector+0x44>
 8002160:	2304      	movs	r3, #4
 8002162:	e000      	b.n	8002166 <Flash_GetSector+0x46>
    return FLASH_SECTOR_5; // up to 0x0803FFFF for 256KB devices
 8002164:	2305      	movs	r3, #5
}
 8002166:	4618      	mov	r0, r3
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr
 8002170:	08004000 	.word	0x08004000
 8002174:	08008000 	.word	0x08008000
 8002178:	0800c000 	.word	0x0800c000
 800217c:	0800ffff 	.word	0x0800ffff
 8002180:	0801ffff 	.word	0x0801ffff

08002184 <Flash_IsBlank>:

static bool Flash_IsBlank(uint32_t addr, uint32_t bytes_to_check)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
    for (uint32_t off = 0; off < bytes_to_check; off += 4) {
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	e00d      	b.n	80021b0 <Flash_IsBlank+0x2c>
        uint32_t v = *(volatile uint32_t *)(addr + off);
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	4413      	add	r3, r2
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	60bb      	str	r3, [r7, #8]
        if (v != 0xFFFFFFFFU) return false;
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a4:	d001      	beq.n	80021aa <Flash_IsBlank+0x26>
 80021a6:	2300      	movs	r3, #0
 80021a8:	e007      	b.n	80021ba <Flash_IsBlank+0x36>
    for (uint32_t off = 0; off < bytes_to_check; off += 4) {
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	3304      	adds	r3, #4
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d3ed      	bcc.n	8002194 <Flash_IsBlank+0x10>
    }
    return true;
 80021b8:	2301      	movs	r3, #1
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr

080021c4 <FW_ResetContext>:

static void FW_ResetContext(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
    fw_ctx.active = false;
 80021c8:	4b18      	ldr	r3, [pc, #96]	@ (800222c <FW_ResetContext+0x68>)
 80021ca:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80021ce:	2200      	movs	r2, #0
 80021d0:	721a      	strb	r2, [r3, #8]
    fw_ctx.error = false;
 80021d2:	4b16      	ldr	r3, [pc, #88]	@ (800222c <FW_ResetContext+0x68>)
 80021d4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80021d8:	2200      	movs	r2, #0
 80021da:	725a      	strb	r2, [r3, #9]
    fw_ctx.buffer_len = 0;
 80021dc:	4b13      	ldr	r3, [pc, #76]	@ (800222c <FW_ResetContext+0x68>)
 80021de:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80021e2:	461a      	mov	r2, r3
 80021e4:	2300      	movs	r3, #0
 80021e6:	6013      	str	r3, [r2, #0]
    fw_ctx.total_len = 0;
 80021e8:	4b10      	ldr	r3, [pc, #64]	@ (800222c <FW_ResetContext+0x68>)
 80021ea:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80021ee:	461a      	mov	r2, r3
 80021f0:	2300      	movs	r3, #0
 80021f2:	6053      	str	r3, [r2, #4]
    fw_ctx.write_addr = FLASH_UPDATE_ADDR;
 80021f4:	4b0d      	ldr	r3, [pc, #52]	@ (800222c <FW_ResetContext+0x68>)
 80021f6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80021fa:	461a      	mov	r2, r3
 80021fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002230 <FW_ResetContext+0x6c>)
 80021fe:	60d3      	str	r3, [r2, #12]
    fw_ctx.word_buf_len = 0;
 8002200:	4b0a      	ldr	r3, [pc, #40]	@ (800222c <FW_ResetContext+0x68>)
 8002202:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002206:	2200      	movs	r2, #0
 8002208:	751a      	strb	r2, [r3, #20]
    fw_ctx.crc = 0xFFFFFFFFU;
 800220a:	4b08      	ldr	r3, [pc, #32]	@ (800222c <FW_ResetContext+0x68>)
 800220c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002210:	461a      	mov	r2, r3
 8002212:	f04f 33ff 	mov.w	r3, #4294967295
 8002216:	6193      	str	r3, [r2, #24]
    fw_ctx.erased = false;
 8002218:	4b04      	ldr	r3, [pc, #16]	@ (800222c <FW_ResetContext+0x68>)
 800221a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800221e:	2200      	movs	r2, #0
 8002220:	771a      	strb	r2, [r3, #28]
}
 8002222:	bf00      	nop
 8002224:	46bd      	mov	sp, r7
 8002226:	bc80      	pop	{r7}
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	20002c40 	.word	0x20002c40
 8002230:	08020000 	.word	0x08020000

08002234 <FW_CrcUpdate>:

static inline void FW_CrcUpdate(const uint8_t *data, uint32_t len)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
    for (uint32_t i = 0; i < len; i++) {
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	e02b      	b.n	800229c <FW_CrcUpdate+0x68>
        fw_ctx.crc ^= data[i];
 8002244:	4b1a      	ldr	r3, [pc, #104]	@ (80022b0 <FW_CrcUpdate+0x7c>)
 8002246:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	440a      	add	r2, r1
 8002252:	7812      	ldrb	r2, [r2, #0]
 8002254:	4053      	eors	r3, r2
 8002256:	4a16      	ldr	r2, [pc, #88]	@ (80022b0 <FW_CrcUpdate+0x7c>)
 8002258:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800225c:	6193      	str	r3, [r2, #24]
        for (uint8_t j = 0; j < 8; j++) {
 800225e:	2300      	movs	r3, #0
 8002260:	72fb      	strb	r3, [r7, #11]
 8002262:	e015      	b.n	8002290 <FW_CrcUpdate+0x5c>
            fw_ctx.crc = (fw_ctx.crc >> 1) ^ (0xEDB88320U & (~(fw_ctx.crc & 1U) + 1U));
 8002264:	4b12      	ldr	r3, [pc, #72]	@ (80022b0 <FW_CrcUpdate+0x7c>)
 8002266:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	085a      	lsrs	r2, r3, #1
 800226e:	4b10      	ldr	r3, [pc, #64]	@ (80022b0 <FW_CrcUpdate+0x7c>)
 8002270:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	4259      	negs	r1, r3
 800227c:	4b0d      	ldr	r3, [pc, #52]	@ (80022b4 <FW_CrcUpdate+0x80>)
 800227e:	400b      	ands	r3, r1
 8002280:	4053      	eors	r3, r2
 8002282:	4a0b      	ldr	r2, [pc, #44]	@ (80022b0 <FW_CrcUpdate+0x7c>)
 8002284:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8002288:	6193      	str	r3, [r2, #24]
        for (uint8_t j = 0; j < 8; j++) {
 800228a:	7afb      	ldrb	r3, [r7, #11]
 800228c:	3301      	adds	r3, #1
 800228e:	72fb      	strb	r3, [r7, #11]
 8002290:	7afb      	ldrb	r3, [r7, #11]
 8002292:	2b07      	cmp	r3, #7
 8002294:	d9e6      	bls.n	8002264 <FW_CrcUpdate+0x30>
    for (uint32_t i = 0; i < len; i++) {
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	3301      	adds	r3, #1
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d3cf      	bcc.n	8002244 <FW_CrcUpdate+0x10>
        }
    }
}
 80022a4:	bf00      	nop
 80022a6:	bf00      	nop
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr
 80022b0:	20002c40 	.word	0x20002c40
 80022b4:	edb88320 	.word	0xedb88320

080022b8 <FW_EnsureErasedForAddress>:

static HAL_StatusTypeDef FW_EnsureErasedForAddress(uint32_t address)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08a      	sub	sp, #40	@ 0x28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
    if (fw_ctx.erased) return HAL_OK;
 80022c0:	4b23      	ldr	r3, [pc, #140]	@ (8002350 <FW_EnsureErasedForAddress+0x98>)
 80022c2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80022c6:	7f1b      	ldrb	r3, [r3, #28]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <FW_EnsureErasedForAddress+0x18>
 80022cc:	2300      	movs	r3, #0
 80022ce:	e03a      	b.n	8002346 <FW_EnsureErasedForAddress+0x8e>
    // Проверка: область должна быть пустой, иначе это часть прошивки — отменяем OTA
    if (!Flash_IsBlank(FLASH_UPDATE_ADDR, 1024U)) { // проверим первые 1KB
 80022d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80022d4:	481f      	ldr	r0, [pc, #124]	@ (8002354 <FW_EnsureErasedForAddress+0x9c>)
 80022d6:	f7ff ff55 	bl	8002184 <Flash_IsBlank>
 80022da:	4603      	mov	r3, r0
 80022dc:	f083 0301 	eor.w	r3, r3, #1
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d006      	beq.n	80022f4 <FW_EnsureErasedForAddress+0x3c>
        fw_ctx.error = true;
 80022e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002350 <FW_EnsureErasedForAddress+0x98>)
 80022e8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80022ec:	2201      	movs	r2, #1
 80022ee:	725a      	strb	r2, [r3, #9]
        return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e028      	b.n	8002346 <FW_EnsureErasedForAddress+0x8e>
    }

    FLASH_EraseInitTypeDef erase;
    uint32_t pageError = 0;
 80022f4:	2300      	movs	r3, #0
 80022f6:	60fb      	str	r3, [r7, #12]
    erase.TypeErase = FLASH_TYPEERASE_SECTORS;
 80022f8:	2300      	movs	r3, #0
 80022fa:	613b      	str	r3, [r7, #16]
    erase.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80022fc:	2302      	movs	r3, #2
 80022fe:	623b      	str	r3, [r7, #32]
    erase.Sector = Flash_GetSector(address);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7ff ff0d 	bl	8002120 <Flash_GetSector>
 8002306:	4603      	mov	r3, r0
 8002308:	61bb      	str	r3, [r7, #24]
    erase.NbSectors = 1; // стираем только сектор слота OTA
 800230a:	2301      	movs	r3, #1
 800230c:	61fb      	str	r3, [r7, #28]
    HAL_StatusTypeDef st = HAL_FLASHEx_Erase(&erase, &pageError);
 800230e:	f107 020c 	add.w	r2, r7, #12
 8002312:	f107 0310 	add.w	r3, r7, #16
 8002316:	4611      	mov	r1, r2
 8002318:	4618      	mov	r0, r3
 800231a:	f006 fc43 	bl	8008ba4 <HAL_FLASHEx_Erase>
 800231e:	4603      	mov	r3, r0
 8002320:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (st == HAL_OK) fw_ctx.erased = true;
 8002324:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002328:	2b00      	cmp	r3, #0
 800232a:	d105      	bne.n	8002338 <FW_EnsureErasedForAddress+0x80>
 800232c:	4b08      	ldr	r3, [pc, #32]	@ (8002350 <FW_EnsureErasedForAddress+0x98>)
 800232e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002332:	2201      	movs	r2, #1
 8002334:	771a      	strb	r2, [r3, #28]
 8002336:	e004      	b.n	8002342 <FW_EnsureErasedForAddress+0x8a>
    else fw_ctx.error = true;
 8002338:	4b05      	ldr	r3, [pc, #20]	@ (8002350 <FW_EnsureErasedForAddress+0x98>)
 800233a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800233e:	2201      	movs	r2, #1
 8002340:	725a      	strb	r2, [r3, #9]
    return st;
 8002342:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002346:	4618      	mov	r0, r3
 8002348:	3728      	adds	r7, #40	@ 0x28
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20002c40 	.word	0x20002c40
 8002354:	08020000 	.word	0x08020000

08002358 <FW_FlashWriteStream>:

static HAL_StatusTypeDef FW_FlashWriteStream(const uint8_t *data, uint32_t len)
{
 8002358:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800235c:	b086      	sub	sp, #24
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
 8002362:	6039      	str	r1, [r7, #0]
    // Обеспечиваем стирание перед первой записью
    if (!fw_ctx.erased) {
 8002364:	4b64      	ldr	r3, [pc, #400]	@ (80024f8 <FW_FlashWriteStream+0x1a0>)
 8002366:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800236a:	7f1b      	ldrb	r3, [r3, #28]
 800236c:	f083 0301 	eor.w	r3, r3, #1
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00d      	beq.n	8002392 <FW_FlashWriteStream+0x3a>
        HAL_StatusTypeDef est = FW_EnsureErasedForAddress(fw_ctx.write_addr);
 8002376:	4b60      	ldr	r3, [pc, #384]	@ (80024f8 <FW_FlashWriteStream+0x1a0>)
 8002378:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff ff9a 	bl	80022b8 <FW_EnsureErasedForAddress>
 8002384:	4603      	mov	r3, r0
 8002386:	74fb      	strb	r3, [r7, #19]
        if (est != HAL_OK) return est;
 8002388:	7cfb      	ldrb	r3, [r7, #19]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <FW_FlashWriteStream+0x3a>
 800238e:	7cfb      	ldrb	r3, [r7, #19]
 8002390:	e0ac      	b.n	80024ec <FW_FlashWriteStream+0x194>
    }

    // Обновляем CRC по потоку
    FW_CrcUpdate(data, len);
 8002392:	6839      	ldr	r1, [r7, #0]
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7ff ff4d 	bl	8002234 <FW_CrcUpdate>

    uint32_t idx = 0;
 800239a:	2300      	movs	r3, #0
 800239c:	617b      	str	r3, [r7, #20]
    // Дополним незавершённое слово, если было
    if (fw_ctx.word_buf_len > 0) {
 800239e:	4b56      	ldr	r3, [pc, #344]	@ (80024f8 <FW_FlashWriteStream+0x1a0>)
 80023a0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80023a4:	7d1b      	ldrb	r3, [r3, #20]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d07e      	beq.n	80024a8 <FW_FlashWriteStream+0x150>
        while (fw_ctx.word_buf_len < 4 && idx < len) {
 80023aa:	e016      	b.n	80023da <FW_FlashWriteStream+0x82>
            fw_ctx.word_buf[fw_ctx.word_buf_len++] = data[idx++];
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	1c5a      	adds	r2, r3, #1
 80023b0:	617a      	str	r2, [r7, #20]
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	441a      	add	r2, r3
 80023b6:	4b50      	ldr	r3, [pc, #320]	@ (80024f8 <FW_FlashWriteStream+0x1a0>)
 80023b8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80023bc:	7d1b      	ldrb	r3, [r3, #20]
 80023be:	1c59      	adds	r1, r3, #1
 80023c0:	b2c8      	uxtb	r0, r1
 80023c2:	494d      	ldr	r1, [pc, #308]	@ (80024f8 <FW_FlashWriteStream+0x1a0>)
 80023c4:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 80023c8:	7508      	strb	r0, [r1, #20]
 80023ca:	4619      	mov	r1, r3
 80023cc:	7812      	ldrb	r2, [r2, #0]
 80023ce:	4b4a      	ldr	r3, [pc, #296]	@ (80024f8 <FW_FlashWriteStream+0x1a0>)
 80023d0:	440b      	add	r3, r1
 80023d2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80023d6:	3310      	adds	r3, #16
 80023d8:	701a      	strb	r2, [r3, #0]
        while (fw_ctx.word_buf_len < 4 && idx < len) {
 80023da:	4b47      	ldr	r3, [pc, #284]	@ (80024f8 <FW_FlashWriteStream+0x1a0>)
 80023dc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80023e0:	7d1b      	ldrb	r3, [r3, #20]
 80023e2:	2b03      	cmp	r3, #3
 80023e4:	d803      	bhi.n	80023ee <FW_FlashWriteStream+0x96>
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d3de      	bcc.n	80023ac <FW_FlashWriteStream+0x54>
        }
        if (fw_ctx.word_buf_len == 4) {
 80023ee:	4b42      	ldr	r3, [pc, #264]	@ (80024f8 <FW_FlashWriteStream+0x1a0>)
 80023f0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80023f4:	7d1b      	ldrb	r3, [r3, #20]
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d156      	bne.n	80024a8 <FW_FlashWriteStream+0x150>
            uint32_t word;
            memcpy(&word, fw_ctx.word_buf, 4);
 80023fa:	4b3f      	ldr	r3, [pc, #252]	@ (80024f8 <FW_FlashWriteStream+0x1a0>)
 80023fc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	60fb      	str	r3, [r7, #12]
            if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, fw_ctx.write_addr, word) != HAL_OK) return HAL_ERROR;
 8002404:	4b3c      	ldr	r3, [pc, #240]	@ (80024f8 <FW_FlashWriteStream+0x1a0>)
 8002406:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800240a:	68d9      	ldr	r1, [r3, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	4698      	mov	r8, r3
 8002412:	4691      	mov	r9, r2
 8002414:	4642      	mov	r2, r8
 8002416:	464b      	mov	r3, r9
 8002418:	2002      	movs	r0, #2
 800241a:	f006 fa11 	bl	8008840 <HAL_FLASH_Program>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <FW_FlashWriteStream+0xd0>
 8002424:	2301      	movs	r3, #1
 8002426:	e061      	b.n	80024ec <FW_FlashWriteStream+0x194>
            fw_ctx.write_addr += 4;
 8002428:	4b33      	ldr	r3, [pc, #204]	@ (80024f8 <FW_FlashWriteStream+0x1a0>)
 800242a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	3304      	adds	r3, #4
 8002432:	4a31      	ldr	r2, [pc, #196]	@ (80024f8 <FW_FlashWriteStream+0x1a0>)
 8002434:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8002438:	60d3      	str	r3, [r2, #12]
            fw_ctx.word_buf_len = 0;
 800243a:	4b2f      	ldr	r3, [pc, #188]	@ (80024f8 <FW_FlashWriteStream+0x1a0>)
 800243c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002440:	2200      	movs	r2, #0
 8002442:	751a      	strb	r2, [r3, #20]
        }
    }

    // Пишем целыми словами напрямую из входного буфера
    while ((idx + 4) <= len) {
 8002444:	e030      	b.n	80024a8 <FW_FlashWriteStream+0x150>
        uint32_t word;
        memcpy(&word, &data[idx], 4);
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	4413      	add	r3, r2
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	60bb      	str	r3, [r7, #8]
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, fw_ctx.write_addr, word) != HAL_OK) return HAL_ERROR;
 8002450:	4b29      	ldr	r3, [pc, #164]	@ (80024f8 <FW_FlashWriteStream+0x1a0>)
 8002452:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002456:	68d9      	ldr	r1, [r3, #12]
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	2200      	movs	r2, #0
 800245c:	461c      	mov	r4, r3
 800245e:	4615      	mov	r5, r2
 8002460:	4622      	mov	r2, r4
 8002462:	462b      	mov	r3, r5
 8002464:	2002      	movs	r0, #2
 8002466:	f006 f9eb 	bl	8008840 <HAL_FLASH_Program>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <FW_FlashWriteStream+0x11c>
 8002470:	2301      	movs	r3, #1
 8002472:	e03b      	b.n	80024ec <FW_FlashWriteStream+0x194>
        fw_ctx.write_addr += 4;
 8002474:	4b20      	ldr	r3, [pc, #128]	@ (80024f8 <FW_FlashWriteStream+0x1a0>)
 8002476:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	3304      	adds	r3, #4
 800247e:	4a1e      	ldr	r2, [pc, #120]	@ (80024f8 <FW_FlashWriteStream+0x1a0>)
 8002480:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8002484:	60d3      	str	r3, [r2, #12]
        idx += 4;
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	3304      	adds	r3, #4
 800248a:	617b      	str	r3, [r7, #20]
        if (fw_ctx.write_addr >= FLASH_UPDATE_END) { fw_ctx.error = true; return HAL_ERROR; }
 800248c:	4b1a      	ldr	r3, [pc, #104]	@ (80024f8 <FW_FlashWriteStream+0x1a0>)
 800248e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	4a19      	ldr	r2, [pc, #100]	@ (80024fc <FW_FlashWriteStream+0x1a4>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d906      	bls.n	80024a8 <FW_FlashWriteStream+0x150>
 800249a:	4b17      	ldr	r3, [pc, #92]	@ (80024f8 <FW_FlashWriteStream+0x1a0>)
 800249c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80024a0:	2201      	movs	r2, #1
 80024a2:	725a      	strb	r2, [r3, #9]
 80024a4:	2301      	movs	r3, #1
 80024a6:	e021      	b.n	80024ec <FW_FlashWriteStream+0x194>
    while ((idx + 4) <= len) {
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	3304      	adds	r3, #4
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d2c9      	bcs.n	8002446 <FW_FlashWriteStream+0xee>
    }

    // Остаток < 4 байт сохраняем в буфер до завершения
    while (idx < len) {
 80024b2:	e016      	b.n	80024e2 <FW_FlashWriteStream+0x18a>
        fw_ctx.word_buf[fw_ctx.word_buf_len++] = data[idx++];
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	617a      	str	r2, [r7, #20]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	441a      	add	r2, r3
 80024be:	4b0e      	ldr	r3, [pc, #56]	@ (80024f8 <FW_FlashWriteStream+0x1a0>)
 80024c0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80024c4:	7d1b      	ldrb	r3, [r3, #20]
 80024c6:	1c59      	adds	r1, r3, #1
 80024c8:	b2c8      	uxtb	r0, r1
 80024ca:	490b      	ldr	r1, [pc, #44]	@ (80024f8 <FW_FlashWriteStream+0x1a0>)
 80024cc:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 80024d0:	7508      	strb	r0, [r1, #20]
 80024d2:	4619      	mov	r1, r3
 80024d4:	7812      	ldrb	r2, [r2, #0]
 80024d6:	4b08      	ldr	r3, [pc, #32]	@ (80024f8 <FW_FlashWriteStream+0x1a0>)
 80024d8:	440b      	add	r3, r1
 80024da:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80024de:	3310      	adds	r3, #16
 80024e0:	701a      	strb	r2, [r3, #0]
    while (idx < len) {
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d3e4      	bcc.n	80024b4 <FW_FlashWriteStream+0x15c>
    }
    return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3718      	adds	r7, #24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80024f6:	bf00      	nop
 80024f8:	20002c40 	.word	0x20002c40
 80024fc:	0803ffff 	.word	0x0803ffff

08002500 <FW_Update_CGI_Handler>:
    return ~crc;
}

// --- CGI ---
const char* FW_Update_CGI_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
 800250c:	603b      	str	r3, [r7, #0]
    return "/update.html";
 800250e:	4b03      	ldr	r3, [pc, #12]	@ (800251c <FW_Update_CGI_Handler+0x1c>)
}
 8002510:	4618      	mov	r0, r3
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	bc80      	pop	{r7}
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	08024bc0 	.word	0x08024bc0

08002520 <LOGIN_CGI_Handler>:

const tCGI FW_UPDATE_CGI = {"/fw_update.cgi", FW_Update_CGI_Handler};

// GET-логин через CGI-параметры user/pass
const char* LOGIN_CGI_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b096      	sub	sp, #88	@ 0x58
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
 800252c:	603b      	str	r3, [r7, #0]
    char user[32] = {0};
 800252e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002532:	2220      	movs	r2, #32
 8002534:	2100      	movs	r1, #0
 8002536:	4618      	mov	r0, r3
 8002538:	f01f fd7c 	bl	8022034 <memset>
    char pass[32] = {0};
 800253c:	f107 0310 	add.w	r3, r7, #16
 8002540:	2220      	movs	r2, #32
 8002542:	2100      	movs	r1, #0
 8002544:	4618      	mov	r0, r3
 8002546:	f01f fd75 	bl	8022034 <memset>
    for (int i = 0; i < iNumParams; i++) {
 800254a:	2300      	movs	r3, #0
 800254c:	657b      	str	r3, [r7, #84]	@ 0x54
 800254e:	e04f      	b.n	80025f0 <LOGIN_CGI_Handler+0xd0>
        if (strcmp(pcParam[i], "user") == 0 && pcValue[i] && pcValue[i][0]) {
 8002550:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	4413      	add	r3, r2
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4949      	ldr	r1, [pc, #292]	@ (8002680 <LOGIN_CGI_Handler+0x160>)
 800255c:	4618      	mov	r0, r3
 800255e:	f7fd fe33 	bl	80001c8 <strcmp>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d11a      	bne.n	800259e <LOGIN_CGI_Handler+0x7e>
 8002568:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	4413      	add	r3, r2
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d013      	beq.n	800259e <LOGIN_CGI_Handler+0x7e>
 8002576:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	4413      	add	r3, r2
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00b      	beq.n	800259e <LOGIN_CGI_Handler+0x7e>
            strncpy(user, pcValue[i], sizeof(user) - 1);
 8002586:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	4413      	add	r3, r2
 800258e:	6819      	ldr	r1, [r3, #0]
 8002590:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002594:	221f      	movs	r2, #31
 8002596:	4618      	mov	r0, r3
 8002598:	f01f fd94 	bl	80220c4 <strncpy>
 800259c:	e025      	b.n	80025ea <LOGIN_CGI_Handler+0xca>
        } else if (strcmp(pcParam[i], "pass") == 0 && pcValue[i] && pcValue[i][0]) {
 800259e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	4413      	add	r3, r2
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4936      	ldr	r1, [pc, #216]	@ (8002684 <LOGIN_CGI_Handler+0x164>)
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7fd fe0c 	bl	80001c8 <strcmp>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d119      	bne.n	80025ea <LOGIN_CGI_Handler+0xca>
 80025b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	4413      	add	r3, r2
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d012      	beq.n	80025ea <LOGIN_CGI_Handler+0xca>
 80025c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	4413      	add	r3, r2
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00a      	beq.n	80025ea <LOGIN_CGI_Handler+0xca>
            strncpy(pass, pcValue[i], sizeof(pass) - 1);
 80025d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	4413      	add	r3, r2
 80025dc:	6819      	ldr	r1, [r3, #0]
 80025de:	f107 0310 	add.w	r3, r7, #16
 80025e2:	221f      	movs	r2, #31
 80025e4:	4618      	mov	r0, r3
 80025e6:	f01f fd6d 	bl	80220c4 <strncpy>
    for (int i = 0; i < iNumParams; i++) {
 80025ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025ec:	3301      	adds	r3, #1
 80025ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80025f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	dbab      	blt.n	8002550 <LOGIN_CGI_Handler+0x30>
        }
    }
    url_decode(user, user);
 80025f8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80025fc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002600:	4611      	mov	r1, r2
 8002602:	4618      	mov	r0, r3
 8002604:	f000 f84a 	bl	800269c <url_decode>
    url_decode(pass, pass);
 8002608:	f107 0210 	add.w	r2, r7, #16
 800260c:	f107 0310 	add.w	r3, r7, #16
 8002610:	4611      	mov	r1, r2
 8002612:	4618      	mov	r0, r3
 8002614:	f000 f842 	bl	800269c <url_decode>
    extern volatile uint8_t g_is_authenticated;
    extern volatile uint32_t g_auth_deadline_ms;
    extern uint32_t g_auth_ttl_ms;
    g_is_authenticated = (user[0] && pass[0] && Creds_CheckLogin(user, pass)) ? 1 : 0;
 8002618:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00f      	beq.n	8002640 <LOGIN_CGI_Handler+0x120>
 8002620:	7c3b      	ldrb	r3, [r7, #16]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00c      	beq.n	8002640 <LOGIN_CGI_Handler+0x120>
 8002626:	f107 0210 	add.w	r2, r7, #16
 800262a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800262e:	4611      	mov	r1, r2
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff fad3 	bl	8001bdc <Creds_CheckLogin>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <LOGIN_CGI_Handler+0x120>
 800263c:	2301      	movs	r3, #1
 800263e:	e000      	b.n	8002642 <LOGIN_CGI_Handler+0x122>
 8002640:	2300      	movs	r3, #0
 8002642:	b2da      	uxtb	r2, r3
 8002644:	4b10      	ldr	r3, [pc, #64]	@ (8002688 <LOGIN_CGI_Handler+0x168>)
 8002646:	701a      	strb	r2, [r3, #0]
    if (g_is_authenticated) {
 8002648:	4b0f      	ldr	r3, [pc, #60]	@ (8002688 <LOGIN_CGI_Handler+0x168>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d010      	beq.n	8002674 <LOGIN_CGI_Handler+0x154>
        uint32_t now = HAL_GetTick();
 8002652:	f003 ff79 	bl	8006548 <HAL_GetTick>
 8002656:	6538      	str	r0, [r7, #80]	@ 0x50
        g_auth_deadline_ms = now + g_auth_ttl_ms; /* legacy */
 8002658:	4b0c      	ldr	r3, [pc, #48]	@ (800268c <LOGIN_CGI_Handler+0x16c>)
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800265e:	4413      	add	r3, r2
 8002660:	4a0b      	ldr	r2, [pc, #44]	@ (8002690 <LOGIN_CGI_Handler+0x170>)
 8002662:	6013      	str	r3, [r2, #0]
        /* создаём cookie-сессию; заголовок Set-Cookie вернётся при следующем fs_open */
        (void)Auth_CreateSessionForCurrentRequest(now, g_auth_ttl_ms);
 8002664:	4b09      	ldr	r3, [pc, #36]	@ (800268c <LOGIN_CGI_Handler+0x16c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4619      	mov	r1, r3
 800266a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800266c:	f7ff f8ee 	bl	800184c <Auth_CreateSessionForCurrentRequest>
        return "/index.html";
 8002670:	4b08      	ldr	r3, [pc, #32]	@ (8002694 <LOGIN_CGI_Handler+0x174>)
 8002672:	e000      	b.n	8002676 <LOGIN_CGI_Handler+0x156>
    }
    return "/login_failed.html";
 8002674:	4b08      	ldr	r3, [pc, #32]	@ (8002698 <LOGIN_CGI_Handler+0x178>)
}
 8002676:	4618      	mov	r0, r3
 8002678:	3758      	adds	r7, #88	@ 0x58
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	08024be0 	.word	0x08024be0
 8002684:	08024be8 	.word	0x08024be8
 8002688:	20002bec 	.word	0x20002bec
 800268c:	20000010 	.word	0x20000010
 8002690:	20002bf0 	.word	0x20002bf0
 8002694:	08024bf0 	.word	0x08024bf0
 8002698:	08024bfc 	.word	0x08024bfc

0800269c <url_decode>:

void url_decode(char *dst, const char *src)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
    char a, b;
    while (*src)
 80026a6:	e06a      	b.n	800277e <url_decode+0xe2>
    {
        if ((*src == '%') &&
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b25      	cmp	r3, #37	@ 0x25
 80026ae:	d151      	bne.n	8002754 <url_decode+0xb8>
            ((a = src[1]) && (b = src[2])) &&
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	3301      	adds	r3, #1
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	73fb      	strb	r3, [r7, #15]
        if ((*src == '%') &&
 80026b8:	7bfb      	ldrb	r3, [r7, #15]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d04a      	beq.n	8002754 <url_decode+0xb8>
            ((a = src[1]) && (b = src[2])) &&
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	3302      	adds	r3, #2
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	73bb      	strb	r3, [r7, #14]
 80026c6:	7bbb      	ldrb	r3, [r7, #14]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d043      	beq.n	8002754 <url_decode+0xb8>
            (isxdigit(a) && isxdigit(b)))
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
 80026ce:	3301      	adds	r3, #1
 80026d0:	4a31      	ldr	r2, [pc, #196]	@ (8002798 <url_decode+0xfc>)
 80026d2:	4413      	add	r3, r2
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	f003 0344 	and.w	r3, r3, #68	@ 0x44
            ((a = src[1]) && (b = src[2])) &&
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d03a      	beq.n	8002754 <url_decode+0xb8>
            (isxdigit(a) && isxdigit(b)))
 80026de:	7bbb      	ldrb	r3, [r7, #14]
 80026e0:	3301      	adds	r3, #1
 80026e2:	4a2d      	ldr	r2, [pc, #180]	@ (8002798 <url_decode+0xfc>)
 80026e4:	4413      	add	r3, r2
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d031      	beq.n	8002754 <url_decode+0xb8>
        {
            a = (a >= 'a') ? a - 'a' + 10 : (a >= 'A') ? a - 'A' + 10 : a - '0';
 80026f0:	7bfb      	ldrb	r3, [r7, #15]
 80026f2:	2b60      	cmp	r3, #96	@ 0x60
 80026f4:	d903      	bls.n	80026fe <url_decode+0x62>
 80026f6:	7bfb      	ldrb	r3, [r7, #15]
 80026f8:	3b57      	subs	r3, #87	@ 0x57
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	e009      	b.n	8002712 <url_decode+0x76>
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
 8002700:	2b40      	cmp	r3, #64	@ 0x40
 8002702:	d903      	bls.n	800270c <url_decode+0x70>
 8002704:	7bfb      	ldrb	r3, [r7, #15]
 8002706:	3b37      	subs	r3, #55	@ 0x37
 8002708:	b2db      	uxtb	r3, r3
 800270a:	e002      	b.n	8002712 <url_decode+0x76>
 800270c:	7bfb      	ldrb	r3, [r7, #15]
 800270e:	3b30      	subs	r3, #48	@ 0x30
 8002710:	b2db      	uxtb	r3, r3
 8002712:	73fb      	strb	r3, [r7, #15]
            b = (b >= 'a') ? b - 'a' + 10 : (b >= 'A') ? b - 'A' + 10 : b - '0';
 8002714:	7bbb      	ldrb	r3, [r7, #14]
 8002716:	2b60      	cmp	r3, #96	@ 0x60
 8002718:	d903      	bls.n	8002722 <url_decode+0x86>
 800271a:	7bbb      	ldrb	r3, [r7, #14]
 800271c:	3b57      	subs	r3, #87	@ 0x57
 800271e:	b2db      	uxtb	r3, r3
 8002720:	e009      	b.n	8002736 <url_decode+0x9a>
 8002722:	7bbb      	ldrb	r3, [r7, #14]
 8002724:	2b40      	cmp	r3, #64	@ 0x40
 8002726:	d903      	bls.n	8002730 <url_decode+0x94>
 8002728:	7bbb      	ldrb	r3, [r7, #14]
 800272a:	3b37      	subs	r3, #55	@ 0x37
 800272c:	b2db      	uxtb	r3, r3
 800272e:	e002      	b.n	8002736 <url_decode+0x9a>
 8002730:	7bbb      	ldrb	r3, [r7, #14]
 8002732:	3b30      	subs	r3, #48	@ 0x30
 8002734:	b2db      	uxtb	r3, r3
 8002736:	73bb      	strb	r3, [r7, #14]
            *dst++ = (char)(16 * a + b);
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	b2d9      	uxtb	r1, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	1c5a      	adds	r2, r3, #1
 8002742:	607a      	str	r2, [r7, #4]
 8002744:	7bba      	ldrb	r2, [r7, #14]
 8002746:	440a      	add	r2, r1
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	701a      	strb	r2, [r3, #0]
            src += 3;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	3303      	adds	r3, #3
 8002750:	603b      	str	r3, [r7, #0]
 8002752:	e014      	b.n	800277e <url_decode+0xe2>
        }
        else if (*src == '+')
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b2b      	cmp	r3, #43	@ 0x2b
 800275a:	d108      	bne.n	800276e <url_decode+0xd2>
        {
            *dst++ = ' ';
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	607a      	str	r2, [r7, #4]
 8002762:	2220      	movs	r2, #32
 8002764:	701a      	strb	r2, [r3, #0]
            src++;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	3301      	adds	r3, #1
 800276a:	603b      	str	r3, [r7, #0]
 800276c:	e007      	b.n	800277e <url_decode+0xe2>
        }
        else
        {
            *dst++ = *src++;
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	1c53      	adds	r3, r2, #1
 8002772:	603b      	str	r3, [r7, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	1c59      	adds	r1, r3, #1
 8002778:	6079      	str	r1, [r7, #4]
 800277a:	7812      	ldrb	r2, [r2, #0]
 800277c:	701a      	strb	r2, [r3, #0]
    while (*src)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d190      	bne.n	80026a8 <url_decode+0xc>
        }
    }
    *dst = '\0';
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	701a      	strb	r2, [r3, #0]
}
 800278c:	bf00      	nop
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	08030eec 	.word	0x08030eec

0800279c <httpd_post_begin>:
                       u16_t content_len,
                       int total_data_len,
                       char *post_data,
                       u16_t post_data_len,
                       u8_t *connection_status)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
 80027a8:	807b      	strh	r3, [r7, #2]
    // Сброс признаков по умолчанию
    fw_request_active = false;
 80027aa:	4b1c      	ldr	r3, [pc, #112]	@ (800281c <httpd_post_begin+0x80>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	701a      	strb	r2, [r3, #0]

    if(strcmp(uri, "/fw_update.cgi") == 0) {
 80027b0:	491b      	ldr	r1, [pc, #108]	@ (8002820 <httpd_post_begin+0x84>)
 80027b2:	68b8      	ldr	r0, [r7, #8]
 80027b4:	f7fd fd08 	bl	80001c8 <strcmp>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d128      	bne.n	8002810 <httpd_post_begin+0x74>
        fw_request_active = true;
 80027be:	4b17      	ldr	r3, [pc, #92]	@ (800281c <httpd_post_begin+0x80>)
 80027c0:	2201      	movs	r2, #1
 80027c2:	701a      	strb	r2, [r3, #0]
        FW_ResetContext();
 80027c4:	f7ff fcfe 	bl	80021c4 <FW_ResetContext>
        // Если слот OTA потенциально пересекается с текущей прошивкой (не пустой) — не начинаем запись
        if (!Flash_IsBlank(FLASH_UPDATE_ADDR, 1024U)) {
 80027c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80027cc:	4815      	ldr	r0, [pc, #84]	@ (8002824 <httpd_post_begin+0x88>)
 80027ce:	f7ff fcd9 	bl	8002184 <Flash_IsBlank>
 80027d2:	4603      	mov	r3, r0
 80027d4:	f083 0301 	eor.w	r3, r3, #1
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00e      	beq.n	80027fc <httpd_post_begin+0x60>
            fw_ctx.error = true;
 80027de:	4b12      	ldr	r3, [pc, #72]	@ (8002828 <httpd_post_begin+0x8c>)
 80027e0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80027e4:	2201      	movs	r2, #1
 80027e6:	725a      	strb	r2, [r3, #9]
            fw_ctx.active = false;
 80027e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002828 <httpd_post_begin+0x8c>)
 80027ea:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80027ee:	2200      	movs	r2, #0
 80027f0:	721a      	strb	r2, [r3, #8]
            *connection_status = 0; // не буферизуем лишние данные
 80027f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f4:	2200      	movs	r2, #0
 80027f6:	701a      	strb	r2, [r3, #0]
            return ERR_OK;
 80027f8:	2300      	movs	r3, #0
 80027fa:	e00a      	b.n	8002812 <httpd_post_begin+0x76>
        }
        fw_ctx.active = true;
 80027fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002828 <httpd_post_begin+0x8c>)
 80027fe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002802:	2201      	movs	r2, #1
 8002804:	721a      	strb	r2, [r3, #8]
        *connection_status = 1; // продолжаем принимать
 8002806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002808:	2201      	movs	r2, #1
 800280a:	701a      	strb	r2, [r3, #0]
        HAL_FLASH_Unlock();
 800280c:	f006 f86c 	bl	80088e8 <HAL_FLASH_Unlock>
    }
    return ERR_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	20004c60 	.word	0x20004c60
 8002820:	08024bd0 	.word	0x08024bd0
 8002824:	08020000 	.word	0x08020000
 8002828:	20002c40 	.word	0x20002c40

0800282c <httpd_post_receive_data>:



err_t httpd_post_receive_data(void *connection, struct pbuf *p)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
    if (p == NULL) return ERR_OK;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <httpd_post_receive_data+0x14>
 800283c:	2300      	movs	r3, #0
 800283e:	e030      	b.n	80028a2 <httpd_post_receive_data+0x76>

    if (fw_ctx.active) {
 8002840:	4b1a      	ldr	r3, [pc, #104]	@ (80028ac <httpd_post_receive_data+0x80>)
 8002842:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002846:	7a1b      	ldrb	r3, [r3, #8]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d029      	beq.n	80028a0 <httpd_post_receive_data+0x74>
        struct pbuf *q = p;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	60fb      	str	r3, [r7, #12]
        while(q) {
 8002850:	e023      	b.n	800289a <httpd_post_receive_data+0x6e>
            if (FW_FlashWriteStream((const uint8_t*)q->payload, q->len) != HAL_OK) {
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	895b      	ldrh	r3, [r3, #10]
 800285a:	4619      	mov	r1, r3
 800285c:	4610      	mov	r0, r2
 800285e:	f7ff fd7b 	bl	8002358 <FW_FlashWriteStream>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00a      	beq.n	800287e <httpd_post_receive_data+0x52>
                fw_ctx.error = true;
 8002868:	4b10      	ldr	r3, [pc, #64]	@ (80028ac <httpd_post_receive_data+0x80>)
 800286a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800286e:	2201      	movs	r2, #1
 8002870:	725a      	strb	r2, [r3, #9]
                fw_ctx.active = false;
 8002872:	4b0e      	ldr	r3, [pc, #56]	@ (80028ac <httpd_post_receive_data+0x80>)
 8002874:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002878:	2200      	movs	r2, #0
 800287a:	721a      	strb	r2, [r3, #8]
                break;
 800287c:	e010      	b.n	80028a0 <httpd_post_receive_data+0x74>
            }
            fw_ctx.total_len += q->len;
 800287e:	4b0b      	ldr	r3, [pc, #44]	@ (80028ac <httpd_post_receive_data+0x80>)
 8002880:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	8952      	ldrh	r2, [r2, #10]
 800288a:	4413      	add	r3, r2
 800288c:	4a07      	ldr	r2, [pc, #28]	@ (80028ac <httpd_post_receive_data+0x80>)
 800288e:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8002892:	6053      	str	r3, [r2, #4]
            q = q->next;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	60fb      	str	r3, [r7, #12]
        while(q) {
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1d8      	bne.n	8002852 <httpd_post_receive_data+0x26>
        }
    }
    return ERR_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20002c40 	.word	0x20002c40

080028b0 <httpd_post_finished>:

void httpd_post_finished(void *connection, char *response_uri, u16_t response_uri_len)
{
 80028b0:	b5b0      	push	{r4, r5, r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	4613      	mov	r3, r2
 80028bc:	80fb      	strh	r3, [r7, #6]
    // Если это был fw_update — завершим запись и отдадим соответствующую страницу
    if (fw_request_active) {
 80028be:	4b40      	ldr	r3, [pc, #256]	@ (80029c0 <httpd_post_finished+0x110>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d078      	beq.n	80029b8 <httpd_post_finished+0x108>
        // Завершаем запись: дописываем неполное слово, если нужно
        if (fw_ctx.active && !fw_ctx.error) {
 80028c6:	4b3f      	ldr	r3, [pc, #252]	@ (80029c4 <httpd_post_finished+0x114>)
 80028c8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80028cc:	7a1b      	ldrb	r3, [r3, #8]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d04b      	beq.n	800296a <httpd_post_finished+0xba>
 80028d2:	4b3c      	ldr	r3, [pc, #240]	@ (80029c4 <httpd_post_finished+0x114>)
 80028d4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80028d8:	7a5b      	ldrb	r3, [r3, #9]
 80028da:	f083 0301 	eor.w	r3, r3, #1
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d042      	beq.n	800296a <httpd_post_finished+0xba>
            if (fw_ctx.word_buf_len > 0) {
 80028e4:	4b37      	ldr	r3, [pc, #220]	@ (80029c4 <httpd_post_finished+0x114>)
 80028e6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80028ea:	7d1b      	ldrb	r3, [r3, #20]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d03c      	beq.n	800296a <httpd_post_finished+0xba>
                while (fw_ctx.word_buf_len < 4) fw_ctx.word_buf[fw_ctx.word_buf_len++] = 0xFF;
 80028f0:	e011      	b.n	8002916 <httpd_post_finished+0x66>
 80028f2:	4b34      	ldr	r3, [pc, #208]	@ (80029c4 <httpd_post_finished+0x114>)
 80028f4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80028f8:	7d1b      	ldrb	r3, [r3, #20]
 80028fa:	1c5a      	adds	r2, r3, #1
 80028fc:	b2d1      	uxtb	r1, r2
 80028fe:	4a31      	ldr	r2, [pc, #196]	@ (80029c4 <httpd_post_finished+0x114>)
 8002900:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8002904:	7511      	strb	r1, [r2, #20]
 8002906:	461a      	mov	r2, r3
 8002908:	4b2e      	ldr	r3, [pc, #184]	@ (80029c4 <httpd_post_finished+0x114>)
 800290a:	4413      	add	r3, r2
 800290c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002910:	3310      	adds	r3, #16
 8002912:	22ff      	movs	r2, #255	@ 0xff
 8002914:	701a      	strb	r2, [r3, #0]
 8002916:	4b2b      	ldr	r3, [pc, #172]	@ (80029c4 <httpd_post_finished+0x114>)
 8002918:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800291c:	7d1b      	ldrb	r3, [r3, #20]
 800291e:	2b03      	cmp	r3, #3
 8002920:	d9e7      	bls.n	80028f2 <httpd_post_finished+0x42>
                uint32_t word;
                memcpy(&word, fw_ctx.word_buf, 4);
 8002922:	4b28      	ldr	r3, [pc, #160]	@ (80029c4 <httpd_post_finished+0x114>)
 8002924:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	617b      	str	r3, [r7, #20]
                if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, fw_ctx.write_addr, word) != HAL_OK) {
 800292c:	4b25      	ldr	r3, [pc, #148]	@ (80029c4 <httpd_post_finished+0x114>)
 800292e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002932:	68d9      	ldr	r1, [r3, #12]
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	2200      	movs	r2, #0
 8002938:	461c      	mov	r4, r3
 800293a:	4615      	mov	r5, r2
 800293c:	4622      	mov	r2, r4
 800293e:	462b      	mov	r3, r5
 8002940:	2002      	movs	r0, #2
 8002942:	f005 ff7d 	bl	8008840 <HAL_FLASH_Program>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d005      	beq.n	8002958 <httpd_post_finished+0xa8>
                    fw_ctx.error = true;
 800294c:	4b1d      	ldr	r3, [pc, #116]	@ (80029c4 <httpd_post_finished+0x114>)
 800294e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002952:	2201      	movs	r2, #1
 8002954:	725a      	strb	r2, [r3, #9]
 8002956:	e008      	b.n	800296a <httpd_post_finished+0xba>
                } else {
                    fw_ctx.write_addr += 4;
 8002958:	4b1a      	ldr	r3, [pc, #104]	@ (80029c4 <httpd_post_finished+0x114>)
 800295a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	3304      	adds	r3, #4
 8002962:	4a18      	ldr	r2, [pc, #96]	@ (80029c4 <httpd_post_finished+0x114>)
 8002964:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8002968:	60d3      	str	r3, [r2, #12]
                }
            }
        }
        HAL_FLASH_Lock();
 800296a:	f005 ffdf 	bl	800892c <HAL_FLASH_Lock>
        fw_ctx.active = false;
 800296e:	4b15      	ldr	r3, [pc, #84]	@ (80029c4 <httpd_post_finished+0x114>)
 8002970:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002974:	2200      	movs	r2, #0
 8002976:	721a      	strb	r2, [r3, #8]
        if (response_uri && response_uri_len) {
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d01b      	beq.n	80029b6 <httpd_post_finished+0x106>
 800297e:	88fb      	ldrh	r3, [r7, #6]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d018      	beq.n	80029b6 <httpd_post_finished+0x106>
            if (fw_ctx.error || fw_ctx.total_len == 0) {
 8002984:	4b0f      	ldr	r3, [pc, #60]	@ (80029c4 <httpd_post_finished+0x114>)
 8002986:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800298a:	7a5b      	ldrb	r3, [r3, #9]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d105      	bne.n	800299c <httpd_post_finished+0xec>
 8002990:	4b0c      	ldr	r3, [pc, #48]	@ (80029c4 <httpd_post_finished+0x114>)
 8002992:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d106      	bne.n	80029aa <httpd_post_finished+0xfa>
                strncpy(response_uri, "/update.html", response_uri_len);
 800299c:	88fb      	ldrh	r3, [r7, #6]
 800299e:	461a      	mov	r2, r3
 80029a0:	4909      	ldr	r1, [pc, #36]	@ (80029c8 <httpd_post_finished+0x118>)
 80029a2:	68b8      	ldr	r0, [r7, #8]
 80029a4:	f01f fb8e 	bl	80220c4 <strncpy>
            } else {
                strncpy(response_uri, "/update_complete.html", response_uri_len);
            }
        }
        return;
 80029a8:	e005      	b.n	80029b6 <httpd_post_finished+0x106>
                strncpy(response_uri, "/update_complete.html", response_uri_len);
 80029aa:	88fb      	ldrh	r3, [r7, #6]
 80029ac:	461a      	mov	r2, r3
 80029ae:	4907      	ldr	r1, [pc, #28]	@ (80029cc <httpd_post_finished+0x11c>)
 80029b0:	68b8      	ldr	r0, [r7, #8]
 80029b2:	f01f fb87 	bl	80220c4 <strncpy>
        return;
 80029b6:	bf00      	nop
    }
}
 80029b8:	3718      	adds	r7, #24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bdb0      	pop	{r4, r5, r7, pc}
 80029be:	bf00      	nop
 80029c0:	20004c60 	.word	0x20004c60
 80029c4:	20002c40 	.word	0x20002c40
 80029c8:	08024bc0 	.word	0x08024bc0
 80029cc:	08024c10 	.word	0x08024c10

080029d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029d0:	b590      	push	{r4, r7, lr}
 80029d2:	b0af      	sub	sp, #188	@ 0xbc
 80029d4:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029d6:	f003 fd53 	bl	8006480 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029da:	f000 f9cd 	bl	8002d78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029de:	f000 fbab 	bl	8003138 <MX_GPIO_Init>
  MX_DMA_Init();
 80029e2:	f000 fb89 	bl	80030f8 <MX_DMA_Init>
  MX_I2C1_Init();
 80029e6:	f000 fa99 	bl	8002f1c <MX_I2C1_Init>
  MX_LWIP_Init();
 80029ea:	f008 fc33 	bl	800b254 <MX_LWIP_Init>
  MX_ADC1_Init();
 80029ee:	f000 fa23 	bl	8002e38 <MX_ADC1_Init>
  MX_TIM3_Init();
 80029f2:	f000 fb35 	bl	8003060 <MX_TIM3_Init>
  MX_RTC_Init();
 80029f6:	f000 fabf 	bl	8002f78 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  // Инициализация логина/пароля (admin/admin по умолчанию)
  Creds_Init();
 80029fa:	f7ff f8bd 	bl	8001b78 <Creds_Init>
  Settings_Init();
 80029fe:	f000 fce7 	bl	80033d0 <Settings_Init>

  ip4_addr_t bk_ip, bk_mask, bk_gw;
  uint8_t bk_dhcp;
  char bk_snmp_read[32], bk_snmp_write[32], bk_snmp_trap[32];

  Settings_Load_From_Backup(&bk_ip, &bk_mask, &bk_gw, &bk_dhcp,
 8002a02:	f107 0493 	add.w	r4, r7, #147	@ 0x93
 8002a06:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 8002a0a:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8002a0e:	f107 009c 	add.w	r0, r7, #156	@ 0x9c
 8002a12:	2320      	movs	r3, #32
 8002a14:	9305      	str	r3, [sp, #20]
 8002a16:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002a1a:	9304      	str	r3, [sp, #16]
 8002a1c:	2320      	movs	r3, #32
 8002a1e:	9303      	str	r3, [sp, #12]
 8002a20:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002a24:	9302      	str	r3, [sp, #8]
 8002a26:	2320      	movs	r3, #32
 8002a28:	9301      	str	r3, [sp, #4]
 8002a2a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	4623      	mov	r3, r4
 8002a32:	f000 fd35 	bl	80034a0 <Settings_Load_From_Backup>
                            bk_snmp_read, sizeof(bk_snmp_read),
                            bk_snmp_write, sizeof(bk_snmp_write),
                            bk_snmp_trap, sizeof(bk_snmp_trap));

  // Apply saved network settings on boot if present
  if (bk_dhcp || bk_ip.addr != 0) {
 8002a36:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d103      	bne.n	8002a46 <main+0x76>
 8002a3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d016      	beq.n	8002a74 <main+0xa4>
      netif_set_down(&gnetif);
 8002a46:	48ab      	ldr	r0, [pc, #684]	@ (8002cf4 <main+0x324>)
 8002a48:	f012 fd46 	bl	80154d8 <netif_set_down>
      if (bk_dhcp) {
 8002a4c:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <main+0x8c>
          dhcp_start(&gnetif);
 8002a54:	48a7      	ldr	r0, [pc, #668]	@ (8002cf4 <main+0x324>)
 8002a56:	f01a f883 	bl	801cb60 <dhcp_start>
 8002a5a:	e008      	b.n	8002a6e <main+0x9e>
      } else {
          netif_set_addr(&gnetif, &bk_ip, &bk_mask, &bk_gw);
 8002a5c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002a60:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8002a64:	f107 019c 	add.w	r1, r7, #156	@ 0x9c
 8002a68:	48a2      	ldr	r0, [pc, #648]	@ (8002cf4 <main+0x324>)
 8002a6a:	f012 fc4d 	bl	8015308 <netif_set_addr>
      }
      netif_set_up(&gnetif);
 8002a6e:	48a1      	ldr	r0, [pc, #644]	@ (8002cf4 <main+0x324>)
 8002a70:	f012 fce2 	bl	8015438 <netif_set_up>
  }

  /* Инициализируем SNMP community из backup */
  if (bk_snmp_read[0])  strncpy(snmp_read,  bk_snmp_read,  sizeof(snmp_read)-1);
 8002a74:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d006      	beq.n	8002a8a <main+0xba>
 8002a7c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002a80:	221f      	movs	r2, #31
 8002a82:	4619      	mov	r1, r3
 8002a84:	489c      	ldr	r0, [pc, #624]	@ (8002cf8 <main+0x328>)
 8002a86:	f01f fb1d 	bl	80220c4 <strncpy>
  if (bk_snmp_write[0]) strncpy(snmp_write, bk_snmp_write, sizeof(snmp_write)-1);
 8002a8a:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d006      	beq.n	8002aa0 <main+0xd0>
 8002a92:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002a96:	221f      	movs	r2, #31
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4898      	ldr	r0, [pc, #608]	@ (8002cfc <main+0x32c>)
 8002a9c:	f01f fb12 	bl	80220c4 <strncpy>
  if (bk_snmp_trap[0])  strncpy(snmp_trap,  bk_snmp_trap,  sizeof(snmp_trap)-1);
 8002aa0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d006      	beq.n	8002ab6 <main+0xe6>
 8002aa8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002aac:	221f      	movs	r2, #31
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4893      	ldr	r0, [pc, #588]	@ (8002d00 <main+0x330>)
 8002ab2:	f01f fb07 	bl	80220c4 <strncpy>
  /* Применяем к SNMP-агенту на старте */
  snmp_community[0] = snmp_read;
 8002ab6:	4b93      	ldr	r3, [pc, #588]	@ (8002d04 <main+0x334>)
 8002ab8:	4a8f      	ldr	r2, [pc, #572]	@ (8002cf8 <main+0x328>)
 8002aba:	601a      	str	r2, [r3, #0]
  snmp_community_write[0] = snmp_write;
 8002abc:	4b92      	ldr	r3, [pc, #584]	@ (8002d08 <main+0x338>)
 8002abe:	4a8f      	ldr	r2, [pc, #572]	@ (8002cfc <main+0x32c>)
 8002ac0:	601a      	str	r2, [r3, #0]
  snmp_set_community_trap(snmp_trap);
 8002ac2:	488f      	ldr	r0, [pc, #572]	@ (8002d00 <main+0x330>)
 8002ac4:	f00e fc7a 	bl	80113bc <snmp_set_community_trap>


  httpd_init();
 8002ac8:	f00a fec6 	bl	800d858 <httpd_init>

  httpd_ssi_init_custom();
 8002acc:	f009 faca 	bl	800c064 <httpd_ssi_init_custom>

  Auth_Init();
 8002ad0:	f7fe fd98 	bl	8001604 <Auth_Init>

  // Регистрация CGI

  CGI_TAB[0] = NET_CGI;
 8002ad4:	4b8d      	ldr	r3, [pc, #564]	@ (8002d0c <main+0x33c>)
 8002ad6:	4a8e      	ldr	r2, [pc, #568]	@ (8002d10 <main+0x340>)
 8002ad8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002adc:	e883 0003 	stmia.w	r3, {r0, r1}
  CGI_TAB[1] = DATE_CGI;
 8002ae0:	4b8a      	ldr	r3, [pc, #552]	@ (8002d0c <main+0x33c>)
 8002ae2:	4a8c      	ldr	r2, [pc, #560]	@ (8002d14 <main+0x344>)
 8002ae4:	3308      	adds	r3, #8
 8002ae6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002aea:	e883 0003 	stmia.w	r3, {r0, r1}
  CGI_TAB[2] = TIME_CGI;
 8002aee:	4b87      	ldr	r3, [pc, #540]	@ (8002d0c <main+0x33c>)
 8002af0:	4a89      	ldr	r2, [pc, #548]	@ (8002d18 <main+0x348>)
 8002af2:	3310      	adds	r3, #16
 8002af4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002af8:	e883 0003 	stmia.w	r3, {r0, r1}
  CGI_TAB[3] = SNMP_CGI;
 8002afc:	4b83      	ldr	r3, [pc, #524]	@ (8002d0c <main+0x33c>)
 8002afe:	4a87      	ldr	r2, [pc, #540]	@ (8002d1c <main+0x34c>)
 8002b00:	3318      	adds	r3, #24
 8002b02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b06:	e883 0003 	stmia.w	r3, {r0, r1}
  CGI_TAB[4] = FW_UPDATE_CGI;
 8002b0a:	4b80      	ldr	r3, [pc, #512]	@ (8002d0c <main+0x33c>)
 8002b0c:	4a84      	ldr	r2, [pc, #528]	@ (8002d20 <main+0x350>)
 8002b0e:	3320      	adds	r3, #32
 8002b10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b14:	e883 0003 	stmia.w	r3, {r0, r1}
  CGI_TAB[5] = LOGIN_CGI;
 8002b18:	4b7c      	ldr	r3, [pc, #496]	@ (8002d0c <main+0x33c>)
 8002b1a:	4a82      	ldr	r2, [pc, #520]	@ (8002d24 <main+0x354>)
 8002b1c:	3328      	adds	r3, #40	@ 0x28
 8002b1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b22:	e883 0003 	stmia.w	r3, {r0, r1}
  http_set_cgi_handlers(CGI_TAB, 6); // количество зарегистрированных CGI
 8002b26:	2106      	movs	r1, #6
 8002b28:	4878      	ldr	r0, [pc, #480]	@ (8002d0c <main+0x33c>)
 8002b2a:	f00a ff23 	bl	800d974 <http_set_cgi_handlers>
  snmp_init();
 8002b2e:	f010 fe6d 	bl	801380c <snmp_init>

  snmp_set_mibs(mib_array, snmp_num_mibs);
 8002b32:	2302      	movs	r3, #2
 8002b34:	4619      	mov	r1, r3
 8002b36:	487c      	ldr	r0, [pc, #496]	@ (8002d28 <main+0x358>)
 8002b38:	f00b fcb0 	bl	800e49c <snmp_set_mibs>


  ssd1306_Init();
 8002b3c:	f003 f91c 	bl	8005d78 <ssd1306_Init>

  ssd1306_UpdateScreen();
 8002b40:	f003 f99c 	bl	8005e7c <ssd1306_UpdateScreen>

  ssd1306_Fill(Black);
 8002b44:	2000      	movs	r0, #0
 8002b46:	f003 f981 	bl	8005e4c <ssd1306_Fill>

  Buttons_Init();
 8002b4a:	f001 f973 	bl	8003e34 <Buttons_Init>


  HAL_ADC_Start_DMA(&hadc1, adc_buffer, ADC_BUFFER_SIZE);
 8002b4e:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8002b52:	4976      	ldr	r1, [pc, #472]	@ (8002d2c <main+0x35c>)
 8002b54:	4876      	ldr	r0, [pc, #472]	@ (8002d30 <main+0x360>)
 8002b56:	f003 fd69 	bl	800662c <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start(&htim3);
 8002b5a:	4876      	ldr	r0, [pc, #472]	@ (8002d34 <main+0x364>)
 8002b5c:	f008 f892 	bl	800ac84 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 8002b60:	f008 fc9e 	bl	800b4a0 <MX_LWIP_Process>

      if (dma_ready) {
 8002b64:	4b74      	ldr	r3, [pc, #464]	@ (8002d38 <main+0x368>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d007      	beq.n	8002b7e <main+0x1ae>
          SignalProcessor_Update(adc_buffer, ADC_SAMPLES);
 8002b6e:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8002b72:	486e      	ldr	r0, [pc, #440]	@ (8002d2c <main+0x35c>)
 8002b74:	f000 fd44 	bl	8003600 <SignalProcessor_Update>
          dma_ready = 0;
 8002b78:	4b6f      	ldr	r3, [pc, #444]	@ (8002d38 <main+0x368>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	701a      	strb	r2, [r3, #0]
      }
	    Buttons_Process();
 8002b7e:	f001 faab 	bl	80040d8 <Buttons_Process>

	    OLED_Settings_TimeoutCheck();
 8002b82:	f002 fff3 	bl	8005b6c <OLED_Settings_TimeoutCheck>

	    OLED_UpdateDisplay();
 8002b86:	f003 f81b 	bl	8005bc0 <OLED_UpdateDisplay>

	    if (apply_network_settings) {
 8002b8a:	4b6c      	ldr	r3, [pc, #432]	@ (8002d3c <main+0x36c>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d029      	beq.n	8002be6 <main+0x216>
	        apply_network_settings = 0;
 8002b92:	4b6a      	ldr	r3, [pc, #424]	@ (8002d3c <main+0x36c>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	701a      	strb	r2, [r3, #0]

	        netif_set_down(&gnetif);
 8002b98:	4856      	ldr	r0, [pc, #344]	@ (8002cf4 <main+0x324>)
 8002b9a:	f012 fc9d 	bl	80154d8 <netif_set_down>
	        dhcp_stop(&gnetif);
 8002b9e:	4855      	ldr	r0, [pc, #340]	@ (8002cf4 <main+0x324>)
 8002ba0:	f01a fc8e 	bl	801d4c0 <dhcp_stop>

	        if (new_dhcp_enabled) {
 8002ba4:	4b66      	ldr	r3, [pc, #408]	@ (8002d40 <main+0x370>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <main+0x1e4>
	            dhcp_start(&gnetif);
 8002bac:	4851      	ldr	r0, [pc, #324]	@ (8002cf4 <main+0x324>)
 8002bae:	f019 ffd7 	bl	801cb60 <dhcp_start>
 8002bb2:	e005      	b.n	8002bc0 <main+0x1f0>
	        } else {
	            netif_set_addr(&gnetif, &new_ip, &new_mask, &new_gw);
 8002bb4:	4b63      	ldr	r3, [pc, #396]	@ (8002d44 <main+0x374>)
 8002bb6:	4a64      	ldr	r2, [pc, #400]	@ (8002d48 <main+0x378>)
 8002bb8:	4964      	ldr	r1, [pc, #400]	@ (8002d4c <main+0x37c>)
 8002bba:	484e      	ldr	r0, [pc, #312]	@ (8002cf4 <main+0x324>)
 8002bbc:	f012 fba4 	bl	8015308 <netif_set_addr>
	        }
	        netif_set_up(&gnetif);
 8002bc0:	484c      	ldr	r0, [pc, #304]	@ (8002cf4 <main+0x324>)
 8002bc2:	f012 fc39 	bl	8015438 <netif_set_up>

	        Settings_Save_To_Backup(new_ip, new_mask, new_gw, new_dhcp_enabled,
 8002bc6:	4b5e      	ldr	r3, [pc, #376]	@ (8002d40 <main+0x370>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	4a5e      	ldr	r2, [pc, #376]	@ (8002d44 <main+0x374>)
 8002bcc:	495e      	ldr	r1, [pc, #376]	@ (8002d48 <main+0x378>)
 8002bce:	485f      	ldr	r0, [pc, #380]	@ (8002d4c <main+0x37c>)
 8002bd0:	4c4b      	ldr	r4, [pc, #300]	@ (8002d00 <main+0x330>)
 8002bd2:	9402      	str	r4, [sp, #8]
 8002bd4:	4c49      	ldr	r4, [pc, #292]	@ (8002cfc <main+0x32c>)
 8002bd6:	9401      	str	r4, [sp, #4]
 8002bd8:	4c47      	ldr	r4, [pc, #284]	@ (8002cf8 <main+0x328>)
 8002bda:	9400      	str	r4, [sp, #0]
 8002bdc:	6812      	ldr	r2, [r2, #0]
 8002bde:	6809      	ldr	r1, [r1, #0]
 8002be0:	6800      	ldr	r0, [r0, #0]
 8002be2:	f000 fc0f 	bl	8003404 <Settings_Save_To_Backup>
	                                snmp_read, snmp_write, snmp_trap);
	    }


	    	// Дата
	    if(apply_date_settings)
 8002be6:	4b5a      	ldr	r3, [pc, #360]	@ (8002d50 <main+0x380>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d024      	beq.n	8002c38 <main+0x268>
	    {
	        apply_date_settings = 0;
 8002bee:	4b58      	ldr	r3, [pc, #352]	@ (8002d50 <main+0x380>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	701a      	strb	r2, [r3, #0]

	        RTC_DateTypeDef sDate = {0};
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	        sDate.Year  = new_year;
 8002bf8:	4b56      	ldr	r3, [pc, #344]	@ (8002d54 <main+0x384>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	        sDate.Month = new_month;
 8002c00:	4b55      	ldr	r3, [pc, #340]	@ (8002d58 <main+0x388>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	        sDate.Date  = new_day;
 8002c08:	4b54      	ldr	r3, [pc, #336]	@ (8002d5c <main+0x38c>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	        sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8002c10:	2302      	movs	r3, #2
 8002c12:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

        if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) == HAL_OK)
 8002c16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4850      	ldr	r0, [pc, #320]	@ (8002d60 <main+0x390>)
 8002c20:	f007 fe2a 	bl	800a878 <HAL_RTC_SetDate>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d106      	bne.n	8002c38 <main+0x268>
        {
            /* После установки даты читаем время (разблокировка shadow) */
            RTC_TimeTypeDef t;
            HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8002c2a:	f107 0320 	add.w	r3, r7, #32
 8002c2e:	2200      	movs	r2, #0
 8002c30:	4619      	mov	r1, r3
 8002c32:	484b      	ldr	r0, [pc, #300]	@ (8002d60 <main+0x390>)
 8002c34:	f007 fdce 	bl	800a7d4 <HAL_RTC_GetTime>
        }
	    }


	    	// Обработка ВРЕМЕНИ
	    if(apply_time_settings)
 8002c38:	4b4a      	ldr	r3, [pc, #296]	@ (8002d64 <main+0x394>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d026      	beq.n	8002c8e <main+0x2be>
	    {
	        apply_time_settings = 0;
 8002c40:	4b48      	ldr	r3, [pc, #288]	@ (8002d64 <main+0x394>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	701a      	strb	r2, [r3, #0]

	        RTC_TimeTypeDef sTime = {0};
 8002c46:	f107 0314 	add.w	r3, r7, #20
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	605a      	str	r2, [r3, #4]
 8002c50:	609a      	str	r2, [r3, #8]
	        sTime.Hours   = new_hours;
 8002c52:	4b45      	ldr	r3, [pc, #276]	@ (8002d68 <main+0x398>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	753b      	strb	r3, [r7, #20]
	        sTime.Minutes = new_minutes;
 8002c58:	4b44      	ldr	r3, [pc, #272]	@ (8002d6c <main+0x39c>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	757b      	strb	r3, [r7, #21]
	        sTime.Seconds = new_seconds;
 8002c5e:	4b44      	ldr	r3, [pc, #272]	@ (8002d70 <main+0x3a0>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	75bb      	strb	r3, [r7, #22]
	        sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002c64:	2300      	movs	r3, #0
 8002c66:	61bb      	str	r3, [r7, #24]
	        sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	61fb      	str	r3, [r7, #28]

        if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) == HAL_OK)
 8002c6c:	f107 0314 	add.w	r3, r7, #20
 8002c70:	2200      	movs	r2, #0
 8002c72:	4619      	mov	r1, r3
 8002c74:	483a      	ldr	r0, [pc, #232]	@ (8002d60 <main+0x390>)
 8002c76:	f007 fd13 	bl	800a6a0 <HAL_RTC_SetTime>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d106      	bne.n	8002c8e <main+0x2be>
        {
            /* Согласно HAL, после SetTime нужно прочитать дату, чтобы разблокировать shadow
               регистры и реально применить время */
            RTC_DateTypeDef d;
            HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN);
 8002c80:	f107 0310 	add.w	r3, r7, #16
 8002c84:	2200      	movs	r2, #0
 8002c86:	4619      	mov	r1, r3
 8002c88:	4835      	ldr	r0, [pc, #212]	@ (8002d60 <main+0x390>)
 8002c8a:	f007 fe79 	bl	800a980 <HAL_RTC_GetDate>
        }
	    }


	        // Проверка применения SNMP
	    	if (apply_snmp_settings) {
 8002c8e:	4b39      	ldr	r3, [pc, #228]	@ (8002d74 <main+0x3a4>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f43f af64 	beq.w	8002b60 <main+0x190>
	    	    apply_snmp_settings = 0;
 8002c98:	4b36      	ldr	r3, [pc, #216]	@ (8002d74 <main+0x3a4>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	701a      	strb	r2, [r3, #0]
            snmp_community[0] = snmp_read;
 8002c9e:	4b19      	ldr	r3, [pc, #100]	@ (8002d04 <main+0x334>)
 8002ca0:	4a15      	ldr	r2, [pc, #84]	@ (8002cf8 <main+0x328>)
 8002ca2:	601a      	str	r2, [r3, #0]
            snmp_community_write[0] = snmp_write;
 8002ca4:	4b18      	ldr	r3, [pc, #96]	@ (8002d08 <main+0x338>)
 8002ca6:	4a15      	ldr	r2, [pc, #84]	@ (8002cfc <main+0x32c>)
 8002ca8:	601a      	str	r2, [r3, #0]
            snmp_set_community_trap(snmp_trap);
 8002caa:	4815      	ldr	r0, [pc, #84]	@ (8002d00 <main+0x330>)
 8002cac:	f00e fb86 	bl	80113bc <snmp_set_community_trap>

            // Preserve current network settings: reload them from backup and rewrite with new SNMP
            ip4_addr_t saved_ip, saved_mask, saved_gw;
            uint8_t saved_dhcp;
            Settings_Load_From_Backup(&saved_ip, &saved_mask, &saved_gw, &saved_dhcp,
 8002cb0:	1cfb      	adds	r3, r7, #3
 8002cb2:	1d3a      	adds	r2, r7, #4
 8002cb4:	f107 0108 	add.w	r1, r7, #8
 8002cb8:	f107 000c 	add.w	r0, r7, #12
 8002cbc:	2400      	movs	r4, #0
 8002cbe:	9405      	str	r4, [sp, #20]
 8002cc0:	2400      	movs	r4, #0
 8002cc2:	9404      	str	r4, [sp, #16]
 8002cc4:	2400      	movs	r4, #0
 8002cc6:	9403      	str	r4, [sp, #12]
 8002cc8:	2400      	movs	r4, #0
 8002cca:	9402      	str	r4, [sp, #8]
 8002ccc:	2400      	movs	r4, #0
 8002cce:	9401      	str	r4, [sp, #4]
 8002cd0:	2400      	movs	r4, #0
 8002cd2:	9400      	str	r4, [sp, #0]
 8002cd4:	f000 fbe4 	bl	80034a0 <Settings_Load_From_Backup>
                                      NULL, 0, NULL, 0, NULL, 0);
            Settings_Save_To_Backup(saved_ip, saved_mask, saved_gw, saved_dhcp,
 8002cd8:	78fb      	ldrb	r3, [r7, #3]
 8002cda:	4a09      	ldr	r2, [pc, #36]	@ (8002d00 <main+0x330>)
 8002cdc:	9202      	str	r2, [sp, #8]
 8002cde:	4a07      	ldr	r2, [pc, #28]	@ (8002cfc <main+0x32c>)
 8002ce0:	9201      	str	r2, [sp, #4]
 8002ce2:	4a05      	ldr	r2, [pc, #20]	@ (8002cf8 <main+0x328>)
 8002ce4:	9200      	str	r2, [sp, #0]
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	68b9      	ldr	r1, [r7, #8]
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 fb8a 	bl	8003404 <Settings_Save_To_Backup>
	  MX_LWIP_Process();
 8002cf0:	e736      	b.n	8002b60 <main+0x190>
 8002cf2:	bf00      	nop
 8002cf4:	20005124 	.word	0x20005124
 8002cf8:	20000014 	.word	0x20000014
 8002cfc:	20000034 	.word	0x20000034
 8002d00:	20000054 	.word	0x20000054
 8002d04:	20000110 	.word	0x20000110
 8002d08:	20000114 	.word	0x20000114
 8002d0c:	20002c04 	.word	0x20002c04
 8002d10:	080279ac 	.word	0x080279ac
 8002d14:	080279bc 	.word	0x080279bc
 8002d18:	080279c4 	.word	0x080279c4
 8002d1c:	080279cc 	.word	0x080279cc
 8002d20:	080279d4 	.word	0x080279d4
 8002d24:	080279b4 	.word	0x080279b4
 8002d28:	20000008 	.word	0x20000008
 8002d2c:	20000504 	.word	0x20000504
 8002d30:	20002a88 	.word	0x20002a88
 8002d34:	20002ba4 	.word	0x20002ba4
 8002d38:	20002a84 	.word	0x20002a84
 8002d3c:	20002c01 	.word	0x20002c01
 8002d40:	20002c00 	.word	0x20002c00
 8002d44:	20002bfc 	.word	0x20002bfc
 8002d48:	20002bf8 	.word	0x20002bf8
 8002d4c:	20002bf4 	.word	0x20002bf4
 8002d50:	20002c37 	.word	0x20002c37
 8002d54:	20002c34 	.word	0x20002c34
 8002d58:	20002c35 	.word	0x20002c35
 8002d5c:	20002c36 	.word	0x20002c36
 8002d60:	20002b84 	.word	0x20002b84
 8002d64:	20002c3b 	.word	0x20002c3b
 8002d68:	20002c38 	.word	0x20002c38
 8002d6c:	20002c39 	.word	0x20002c39
 8002d70:	20002c3a 	.word	0x20002c3a
 8002d74:	20002c3c 	.word	0x20002c3c

08002d78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b096      	sub	sp, #88	@ 0x58
 8002d7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d82:	2230      	movs	r2, #48	@ 0x30
 8002d84:	2100      	movs	r1, #0
 8002d86:	4618      	mov	r0, r3
 8002d88:	f01f f954 	bl	8022034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d8c:	f107 0314 	add.w	r3, r7, #20
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	605a      	str	r2, [r3, #4]
 8002d96:	609a      	str	r2, [r3, #8]
 8002d98:	60da      	str	r2, [r3, #12]
 8002d9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d9c:	463b      	mov	r3, r7
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	605a      	str	r2, [r3, #4]
 8002da4:	609a      	str	r2, [r3, #8]
 8002da6:	60da      	str	r2, [r3, #12]
 8002da8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002daa:	2309      	movs	r3, #9
 8002dac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002dae:	2301      	movs	r3, #1
 8002db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002db2:	2301      	movs	r3, #1
 8002db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002db6:	2302      	movs	r3, #2
 8002db8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002dba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002dbe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLM = 20;
 8002dc0:	2314      	movs	r3, #20
 8002dc2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002dc4:	23c0      	movs	r3, #192	@ 0xc0
 8002dc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002dc8:	2302      	movs	r3, #2
 8002dca:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002dcc:	2304      	movs	r3, #4
 8002dce:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002dd0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f006 fea3 	bl	8009b20 <HAL_RCC_OscConfig>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8002de0:	f000 fa28 	bl	8003234 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002de4:	230f      	movs	r3, #15
 8002de6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002de8:	2302      	movs	r3, #2
 8002dea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dec:	2300      	movs	r3, #0
 8002dee:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002df0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002df4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002df6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dfa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002dfc:	f107 0314 	add.w	r3, r7, #20
 8002e00:	2103      	movs	r1, #3
 8002e02:	4618      	mov	r0, r3
 8002e04:	f007 f8e0 	bl	8009fc8 <HAL_RCC_ClockConfig>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002e0e:	f000 fa11 	bl	8003234 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002e12:	2304      	movs	r3, #4
 8002e14:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002e16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e1a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e1c:	463b      	mov	r3, r7
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f007 fab0 	bl	800a384 <HAL_RCCEx_PeriphCLKConfig>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002e2a:	f000 fa03 	bl	8003234 <Error_Handler>
  }
}
 8002e2e:	bf00      	nop
 8002e30:	3758      	adds	r7, #88	@ 0x58
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002e3e:	463b      	mov	r3, r7
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	605a      	str	r2, [r3, #4]
 8002e46:	609a      	str	r2, [r3, #8]
 8002e48:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002e4a:	4b32      	ldr	r3, [pc, #200]	@ (8002f14 <MX_ADC1_Init+0xdc>)
 8002e4c:	4a32      	ldr	r2, [pc, #200]	@ (8002f18 <MX_ADC1_Init+0xe0>)
 8002e4e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002e50:	4b30      	ldr	r3, [pc, #192]	@ (8002f14 <MX_ADC1_Init+0xdc>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002e56:	4b2f      	ldr	r3, [pc, #188]	@ (8002f14 <MX_ADC1_Init+0xdc>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002e5c:	4b2d      	ldr	r3, [pc, #180]	@ (8002f14 <MX_ADC1_Init+0xdc>)
 8002e5e:	2201      	movs	r2, #1
 8002e60:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002e62:	4b2c      	ldr	r3, [pc, #176]	@ (8002f14 <MX_ADC1_Init+0xdc>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002e68:	4b2a      	ldr	r3, [pc, #168]	@ (8002f14 <MX_ADC1_Init+0xdc>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002e70:	4b28      	ldr	r3, [pc, #160]	@ (8002f14 <MX_ADC1_Init+0xdc>)
 8002e72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002e78:	4b26      	ldr	r3, [pc, #152]	@ (8002f14 <MX_ADC1_Init+0xdc>)
 8002e7a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002e7e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e80:	4b24      	ldr	r3, [pc, #144]	@ (8002f14 <MX_ADC1_Init+0xdc>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8002e86:	4b23      	ldr	r3, [pc, #140]	@ (8002f14 <MX_ADC1_Init+0xdc>)
 8002e88:	2203      	movs	r2, #3
 8002e8a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002e8c:	4b21      	ldr	r3, [pc, #132]	@ (8002f14 <MX_ADC1_Init+0xdc>)
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002e94:	4b1f      	ldr	r3, [pc, #124]	@ (8002f14 <MX_ADC1_Init+0xdc>)
 8002e96:	2201      	movs	r2, #1
 8002e98:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002e9a:	481e      	ldr	r0, [pc, #120]	@ (8002f14 <MX_ADC1_Init+0xdc>)
 8002e9c:	f003 fb82 	bl	80065a4 <HAL_ADC_Init>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8002ea6:	f000 f9c5 	bl	8003234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002eaa:	2305      	movs	r3, #5
 8002eac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002eb6:	463b      	mov	r3, r7
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4816      	ldr	r0, [pc, #88]	@ (8002f14 <MX_ADC1_Init+0xdc>)
 8002ebc:	f003 fca6 	bl	800680c <HAL_ADC_ConfigChannel>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8002ec6:	f000 f9b5 	bl	8003234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002eca:	2306      	movs	r3, #6
 8002ecc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002ece:	2302      	movs	r3, #2
 8002ed0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ed6:	463b      	mov	r3, r7
 8002ed8:	4619      	mov	r1, r3
 8002eda:	480e      	ldr	r0, [pc, #56]	@ (8002f14 <MX_ADC1_Init+0xdc>)
 8002edc:	f003 fc96 	bl	800680c <HAL_ADC_ConfigChannel>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002ee6:	f000 f9a5 	bl	8003234 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002eea:	230a      	movs	r3, #10
 8002eec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ef6:	463b      	mov	r3, r7
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4806      	ldr	r0, [pc, #24]	@ (8002f14 <MX_ADC1_Init+0xdc>)
 8002efc:	f003 fc86 	bl	800680c <HAL_ADC_ConfigChannel>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8002f06:	f000 f995 	bl	8003234 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002f0a:	bf00      	nop
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	20002a88 	.word	0x20002a88
 8002f18:	40012000 	.word	0x40012000

08002f1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f20:	4b12      	ldr	r3, [pc, #72]	@ (8002f6c <MX_I2C1_Init+0x50>)
 8002f22:	4a13      	ldr	r2, [pc, #76]	@ (8002f70 <MX_I2C1_Init+0x54>)
 8002f24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002f26:	4b11      	ldr	r3, [pc, #68]	@ (8002f6c <MX_I2C1_Init+0x50>)
 8002f28:	4a12      	ldr	r2, [pc, #72]	@ (8002f74 <MX_I2C1_Init+0x58>)
 8002f2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8002f6c <MX_I2C1_Init+0x50>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002f32:	4b0e      	ldr	r3, [pc, #56]	@ (8002f6c <MX_I2C1_Init+0x50>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f38:	4b0c      	ldr	r3, [pc, #48]	@ (8002f6c <MX_I2C1_Init+0x50>)
 8002f3a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002f3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f40:	4b0a      	ldr	r3, [pc, #40]	@ (8002f6c <MX_I2C1_Init+0x50>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002f46:	4b09      	ldr	r3, [pc, #36]	@ (8002f6c <MX_I2C1_Init+0x50>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f4c:	4b07      	ldr	r3, [pc, #28]	@ (8002f6c <MX_I2C1_Init+0x50>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f52:	4b06      	ldr	r3, [pc, #24]	@ (8002f6c <MX_I2C1_Init+0x50>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f58:	4804      	ldr	r0, [pc, #16]	@ (8002f6c <MX_I2C1_Init+0x50>)
 8002f5a:	f006 f919 	bl	8009190 <HAL_I2C_Init>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002f64:	f000 f966 	bl	8003234 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002f68:	bf00      	nop
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	20002b30 	.word	0x20002b30
 8002f70:	40005400 	.word	0x40005400
 8002f74:	000186a0 	.word	0x000186a0

08002f78 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef sTime = {0};
 8002f7e:	f107 030c 	add.w	r3, r7, #12
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	605a      	str	r2, [r3, #4]
 8002f88:	609a      	str	r2, [r3, #8]
    RTC_DateTypeDef sDate = {0};
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60bb      	str	r3, [r7, #8]

    __HAL_RCC_PWR_CLK_ENABLE();
 8002f8e:	2300      	movs	r3, #0
 8002f90:	607b      	str	r3, [r7, #4]
 8002f92:	4b2f      	ldr	r3, [pc, #188]	@ (8003050 <MX_RTC_Init+0xd8>)
 8002f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f96:	4a2e      	ldr	r2, [pc, #184]	@ (8003050 <MX_RTC_Init+0xd8>)
 8002f98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f9e:	4b2c      	ldr	r3, [pc, #176]	@ (8003050 <MX_RTC_Init+0xd8>)
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fa6:	607b      	str	r3, [r7, #4]
 8002fa8:	687b      	ldr	r3, [r7, #4]
    HAL_PWR_EnableBkUpAccess(); // 🔹 доступ к backup-домену
 8002faa:	f006 fd9d 	bl	8009ae8 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_RTC_ENABLE();     // 🔹 включаем тактирование RTC, если ещё не включено
 8002fae:	4b29      	ldr	r3, [pc, #164]	@ (8003054 <MX_RTC_Init+0xdc>)
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	601a      	str	r2, [r3, #0]

    hrtc.Instance = RTC;
 8002fb4:	4b28      	ldr	r3, [pc, #160]	@ (8003058 <MX_RTC_Init+0xe0>)
 8002fb6:	4a29      	ldr	r2, [pc, #164]	@ (800305c <MX_RTC_Init+0xe4>)
 8002fb8:	601a      	str	r2, [r3, #0]
    hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002fba:	4b27      	ldr	r3, [pc, #156]	@ (8003058 <MX_RTC_Init+0xe0>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	605a      	str	r2, [r3, #4]
    hrtc.Init.AsynchPrediv = 127;
 8002fc0:	4b25      	ldr	r3, [pc, #148]	@ (8003058 <MX_RTC_Init+0xe0>)
 8002fc2:	227f      	movs	r2, #127	@ 0x7f
 8002fc4:	609a      	str	r2, [r3, #8]
    hrtc.Init.SynchPrediv = 255;
 8002fc6:	4b24      	ldr	r3, [pc, #144]	@ (8003058 <MX_RTC_Init+0xe0>)
 8002fc8:	22ff      	movs	r2, #255	@ 0xff
 8002fca:	60da      	str	r2, [r3, #12]
    hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002fcc:	4b22      	ldr	r3, [pc, #136]	@ (8003058 <MX_RTC_Init+0xe0>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	611a      	str	r2, [r3, #16]
    hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002fd2:	4b21      	ldr	r3, [pc, #132]	@ (8003058 <MX_RTC_Init+0xe0>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	615a      	str	r2, [r3, #20]
    hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002fd8:	4b1f      	ldr	r3, [pc, #124]	@ (8003058 <MX_RTC_Init+0xe0>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	619a      	str	r2, [r3, #24]

    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002fde:	481e      	ldr	r0, [pc, #120]	@ (8003058 <MX_RTC_Init+0xe0>)
 8002fe0:	f007 fac6 	bl	800a570 <HAL_RTC_Init>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <MX_RTC_Init+0x76>
    {
        Error_Handler();
 8002fea:	f000 f923 	bl	8003234 <Error_Handler>
    }

    /* Проверяем, был ли RTC уже инициализирован.
       Ранее использовался DR0, но он занят модулем credentials.
       Используем DR19: если там 0, считаем, что RTC не инициализирован. */
    if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR19) == 0x00000000U)
 8002fee:	2113      	movs	r1, #19
 8002ff0:	4819      	ldr	r0, [pc, #100]	@ (8003058 <MX_RTC_Init+0xe0>)
 8002ff2:	f007 fde1 	bl	800abb8 <HAL_RTCEx_BKUPRead>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d125      	bne.n	8003048 <MX_RTC_Init+0xd0>
    {
        // --- Первый запуск ---
        sTime.Hours = 0;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	733b      	strb	r3, [r7, #12]
        sTime.Minutes = 0;
 8003000:	2300      	movs	r3, #0
 8003002:	737b      	strb	r3, [r7, #13]
        sTime.Seconds = 0;
 8003004:	2300      	movs	r3, #0
 8003006:	73bb      	strb	r3, [r7, #14]
        sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003008:	2300      	movs	r3, #0
 800300a:	613b      	str	r3, [r7, #16]
        sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800300c:	2300      	movs	r3, #0
 800300e:	617b      	str	r3, [r7, #20]
        HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8003010:	f107 030c 	add.w	r3, r7, #12
 8003014:	2200      	movs	r2, #0
 8003016:	4619      	mov	r1, r3
 8003018:	480f      	ldr	r0, [pc, #60]	@ (8003058 <MX_RTC_Init+0xe0>)
 800301a:	f007 fb41 	bl	800a6a0 <HAL_RTC_SetTime>

        sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800301e:	2301      	movs	r3, #1
 8003020:	723b      	strb	r3, [r7, #8]
        sDate.Month = RTC_MONTH_JANUARY;
 8003022:	2301      	movs	r3, #1
 8003024:	727b      	strb	r3, [r7, #9]
        sDate.Date = 1;
 8003026:	2301      	movs	r3, #1
 8003028:	72bb      	strb	r3, [r7, #10]
        sDate.Year = 25;
 800302a:	2319      	movs	r3, #25
 800302c:	72fb      	strb	r3, [r7, #11]
        HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800302e:	f107 0308 	add.w	r3, r7, #8
 8003032:	2200      	movs	r2, #0
 8003034:	4619      	mov	r1, r3
 8003036:	4808      	ldr	r0, [pc, #32]	@ (8003058 <MX_RTC_Init+0xe0>)
 8003038:	f007 fc1e 	bl	800a878 <HAL_RTC_SetDate>

        HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR19, 0x32F2); // 💾 флаг инициализации RTC
 800303c:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 8003040:	2113      	movs	r1, #19
 8003042:	4805      	ldr	r0, [pc, #20]	@ (8003058 <MX_RTC_Init+0xe0>)
 8003044:	f007 fd9f 	bl	800ab86 <HAL_RTCEx_BKUPWrite>
    }
    else
    {
        // --- RTC уже настроен, ничего не трогаем ---
    }
}
 8003048:	bf00      	nop
 800304a:	3718      	adds	r7, #24
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40023800 	.word	0x40023800
 8003054:	42470e3c 	.word	0x42470e3c
 8003058:	20002b84 	.word	0x20002b84
 800305c:	40002800 	.word	0x40002800

08003060 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003066:	f107 0308 	add.w	r3, r7, #8
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	605a      	str	r2, [r3, #4]
 8003070:	609a      	str	r2, [r3, #8]
 8003072:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003074:	463b      	mov	r3, r7
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800307c:	4b1c      	ldr	r3, [pc, #112]	@ (80030f0 <MX_TIM3_Init+0x90>)
 800307e:	4a1d      	ldr	r2, [pc, #116]	@ (80030f4 <MX_TIM3_Init+0x94>)
 8003080:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 59;
 8003082:	4b1b      	ldr	r3, [pc, #108]	@ (80030f0 <MX_TIM3_Init+0x90>)
 8003084:	223b      	movs	r2, #59	@ 0x3b
 8003086:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003088:	4b19      	ldr	r3, [pc, #100]	@ (80030f0 <MX_TIM3_Init+0x90>)
 800308a:	2200      	movs	r2, #0
 800308c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800308e:	4b18      	ldr	r3, [pc, #96]	@ (80030f0 <MX_TIM3_Init+0x90>)
 8003090:	2263      	movs	r2, #99	@ 0x63
 8003092:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003094:	4b16      	ldr	r3, [pc, #88]	@ (80030f0 <MX_TIM3_Init+0x90>)
 8003096:	2200      	movs	r2, #0
 8003098:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800309a:	4b15      	ldr	r3, [pc, #84]	@ (80030f0 <MX_TIM3_Init+0x90>)
 800309c:	2280      	movs	r2, #128	@ 0x80
 800309e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80030a0:	4813      	ldr	r0, [pc, #76]	@ (80030f0 <MX_TIM3_Init+0x90>)
 80030a2:	f007 fda0 	bl	800abe6 <HAL_TIM_Base_Init>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80030ac:	f000 f8c2 	bl	8003234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80030b6:	f107 0308 	add.w	r3, r7, #8
 80030ba:	4619      	mov	r1, r3
 80030bc:	480c      	ldr	r0, [pc, #48]	@ (80030f0 <MX_TIM3_Init+0x90>)
 80030be:	f007 fe47 	bl	800ad50 <HAL_TIM_ConfigClockSource>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80030c8:	f000 f8b4 	bl	8003234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80030cc:	2320      	movs	r3, #32
 80030ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030d0:	2300      	movs	r3, #0
 80030d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80030d4:	463b      	mov	r3, r7
 80030d6:	4619      	mov	r1, r3
 80030d8:	4805      	ldr	r0, [pc, #20]	@ (80030f0 <MX_TIM3_Init+0x90>)
 80030da:	f008 f841 	bl	800b160 <HAL_TIMEx_MasterConfigSynchronization>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80030e4:	f000 f8a6 	bl	8003234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80030e8:	bf00      	nop
 80030ea:	3718      	adds	r7, #24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	20002ba4 	.word	0x20002ba4
 80030f4:	40000400 	.word	0x40000400

080030f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80030fe:	2300      	movs	r3, #0
 8003100:	607b      	str	r3, [r7, #4]
 8003102:	4b0c      	ldr	r3, [pc, #48]	@ (8003134 <MX_DMA_Init+0x3c>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003106:	4a0b      	ldr	r2, [pc, #44]	@ (8003134 <MX_DMA_Init+0x3c>)
 8003108:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800310c:	6313      	str	r3, [r2, #48]	@ 0x30
 800310e:	4b09      	ldr	r3, [pc, #36]	@ (8003134 <MX_DMA_Init+0x3c>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003112:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003116:	607b      	str	r3, [r7, #4]
 8003118:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800311a:	2200      	movs	r2, #0
 800311c:	2100      	movs	r1, #0
 800311e:	2038      	movs	r0, #56	@ 0x38
 8003120:	f003 fef3 	bl	8006f0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003124:	2038      	movs	r0, #56	@ 0x38
 8003126:	f003 ff0c 	bl	8006f42 <HAL_NVIC_EnableIRQ>

}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40023800 	.word	0x40023800

08003138 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b08a      	sub	sp, #40	@ 0x28
 800313c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800313e:	f107 0314 	add.w	r3, r7, #20
 8003142:	2200      	movs	r2, #0
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	605a      	str	r2, [r3, #4]
 8003148:	609a      	str	r2, [r3, #8]
 800314a:	60da      	str	r2, [r3, #12]
 800314c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800314e:	2300      	movs	r3, #0
 8003150:	613b      	str	r3, [r7, #16]
 8003152:	4b36      	ldr	r3, [pc, #216]	@ (800322c <MX_GPIO_Init+0xf4>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003156:	4a35      	ldr	r2, [pc, #212]	@ (800322c <MX_GPIO_Init+0xf4>)
 8003158:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800315c:	6313      	str	r3, [r2, #48]	@ 0x30
 800315e:	4b33      	ldr	r3, [pc, #204]	@ (800322c <MX_GPIO_Init+0xf4>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003166:	613b      	str	r3, [r7, #16]
 8003168:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800316a:	2300      	movs	r3, #0
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	4b2f      	ldr	r3, [pc, #188]	@ (800322c <MX_GPIO_Init+0xf4>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003172:	4a2e      	ldr	r2, [pc, #184]	@ (800322c <MX_GPIO_Init+0xf4>)
 8003174:	f043 0304 	orr.w	r3, r3, #4
 8003178:	6313      	str	r3, [r2, #48]	@ 0x30
 800317a:	4b2c      	ldr	r3, [pc, #176]	@ (800322c <MX_GPIO_Init+0xf4>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800317e:	f003 0304 	and.w	r3, r3, #4
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003186:	2300      	movs	r3, #0
 8003188:	60bb      	str	r3, [r7, #8]
 800318a:	4b28      	ldr	r3, [pc, #160]	@ (800322c <MX_GPIO_Init+0xf4>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318e:	4a27      	ldr	r2, [pc, #156]	@ (800322c <MX_GPIO_Init+0xf4>)
 8003190:	f043 0301 	orr.w	r3, r3, #1
 8003194:	6313      	str	r3, [r2, #48]	@ 0x30
 8003196:	4b25      	ldr	r3, [pc, #148]	@ (800322c <MX_GPIO_Init+0xf4>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	60bb      	str	r3, [r7, #8]
 80031a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031a2:	2300      	movs	r3, #0
 80031a4:	607b      	str	r3, [r7, #4]
 80031a6:	4b21      	ldr	r3, [pc, #132]	@ (800322c <MX_GPIO_Init+0xf4>)
 80031a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031aa:	4a20      	ldr	r2, [pc, #128]	@ (800322c <MX_GPIO_Init+0xf4>)
 80031ac:	f043 0302 	orr.w	r3, r3, #2
 80031b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80031b2:	4b1e      	ldr	r3, [pc, #120]	@ (800322c <MX_GPIO_Init+0xf4>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	607b      	str	r3, [r7, #4]
 80031bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80031be:	2300      	movs	r3, #0
 80031c0:	603b      	str	r3, [r7, #0]
 80031c2:	4b1a      	ldr	r3, [pc, #104]	@ (800322c <MX_GPIO_Init+0xf4>)
 80031c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c6:	4a19      	ldr	r2, [pc, #100]	@ (800322c <MX_GPIO_Init+0xf4>)
 80031c8:	f043 0308 	orr.w	r3, r3, #8
 80031cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80031ce:	4b17      	ldr	r3, [pc, #92]	@ (800322c <MX_GPIO_Init+0xf4>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d2:	f003 0308 	and.w	r3, r3, #8
 80031d6:	603b      	str	r3, [r7, #0]
 80031d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80031da:	230e      	movs	r3, #14
 80031dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80031de:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80031e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031e4:	2301      	movs	r3, #1
 80031e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031e8:	f107 0314 	add.w	r3, r7, #20
 80031ec:	4619      	mov	r1, r3
 80031ee:	4810      	ldr	r0, [pc, #64]	@ (8003230 <MX_GPIO_Init+0xf8>)
 80031f0:	f005 fe00 	bl	8008df4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80031f4:	2200      	movs	r2, #0
 80031f6:	2105      	movs	r1, #5
 80031f8:	2007      	movs	r0, #7
 80031fa:	f003 fe86 	bl	8006f0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80031fe:	2007      	movs	r0, #7
 8003200:	f003 fe9f 	bl	8006f42 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8003204:	2200      	movs	r2, #0
 8003206:	2105      	movs	r1, #5
 8003208:	2008      	movs	r0, #8
 800320a:	f003 fe7e 	bl	8006f0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800320e:	2008      	movs	r0, #8
 8003210:	f003 fe97 	bl	8006f42 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8003214:	2200      	movs	r2, #0
 8003216:	2105      	movs	r1, #5
 8003218:	2009      	movs	r0, #9
 800321a:	f003 fe76 	bl	8006f0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800321e:	2009      	movs	r0, #9
 8003220:	f003 fe8f 	bl	8006f42 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003224:	bf00      	nop
 8003226:	3728      	adds	r7, #40	@ 0x28
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	40023800 	.word	0x40023800
 8003230:	40020c00 	.word	0x40020c00

08003234 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003238:	b672      	cpsid	i
}
 800323a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800323c:	bf00      	nop
 800323e:	e7fd      	b.n	800323c <Error_Handler+0x8>

08003240 <bk_write_u32>:

#define BKP_MAGIC_REG         RTC_BKP_DR19
#define BKP_MAGIC_VALUE       0xBEEFCAFE

/* --- Вспомогательные функции --- */
static void bk_write_u32(uint32_t reg, uint32_t value) {
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
    HAL_RTCEx_BKUPWrite(&hrtc, reg, value);
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	4803      	ldr	r0, [pc, #12]	@ (800325c <bk_write_u32+0x1c>)
 8003250:	f007 fc99 	bl	800ab86 <HAL_RTCEx_BKUPWrite>
}
 8003254:	bf00      	nop
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	20002b84 	.word	0x20002b84

08003260 <bk_read_u32>:

static uint32_t bk_read_u32(uint32_t reg) {
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
    return HAL_RTCEx_BKUPRead(&hrtc, reg);
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	4804      	ldr	r0, [pc, #16]	@ (800327c <bk_read_u32+0x1c>)
 800326c:	f007 fca4 	bl	800abb8 <HAL_RTCEx_BKUPRead>
 8003270:	4603      	mov	r3, r0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	20002b84 	.word	0x20002b84

08003280 <bk_write_string>:

static void bk_write_string(uint32_t start_reg, const char *s, int reg_count) {
 8003280:	b580      	push	{r7, lr}
 8003282:	b08c      	sub	sp, #48	@ 0x30
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
    int max_len = reg_count * 4 - 1; // оставляем 1 байт под '\0'
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	3b01      	subs	r3, #1
 8003292:	61fb      	str	r3, [r7, #28]
    int str_len = s ? strlen(s) : 0;
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d004      	beq.n	80032a4 <bk_write_string+0x24>
 800329a:	68b8      	ldr	r0, [r7, #8]
 800329c:	f7fc ff9e 	bl	80001dc <strlen>
 80032a0:	4603      	mov	r3, r0
 80032a2:	e000      	b.n	80032a6 <bk_write_string+0x26>
 80032a4:	2300      	movs	r3, #0
 80032a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (str_len > max_len) str_len = max_len;
 80032a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	dd01      	ble.n	80032b4 <bk_write_string+0x34>
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (int i = 0; i < reg_count; i++) {
 80032b4:	2300      	movs	r3, #0
 80032b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032b8:	e02d      	b.n	8003316 <bk_write_string+0x96>
        uint32_t word = 0;
 80032ba:	2300      	movs	r3, #0
 80032bc:	627b      	str	r3, [r7, #36]	@ 0x24
        for (int b = 0; b < 4; b++) {
 80032be:	2300      	movs	r3, #0
 80032c0:	623b      	str	r3, [r7, #32]
 80032c2:	e01a      	b.n	80032fa <bk_write_string+0x7a>
            int idx = i * 4 + b;
 80032c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	6a3a      	ldr	r2, [r7, #32]
 80032ca:	4413      	add	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
            uint8_t ch = (idx < str_len) ? (uint8_t)s[idx] : 0;
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032d2:	429a      	cmp	r2, r3
 80032d4:	da04      	bge.n	80032e0 <bk_write_string+0x60>
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	4413      	add	r3, r2
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	e000      	b.n	80032e2 <bk_write_string+0x62>
 80032e0:	2300      	movs	r3, #0
 80032e2:	75fb      	strb	r3, [r7, #23]
            word |= ((uint32_t)ch) << (8 * b);
 80032e4:	7dfa      	ldrb	r2, [r7, #23]
 80032e6:	6a3b      	ldr	r3, [r7, #32]
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032f0:	4313      	orrs	r3, r2
 80032f2:	627b      	str	r3, [r7, #36]	@ 0x24
        for (int b = 0; b < 4; b++) {
 80032f4:	6a3b      	ldr	r3, [r7, #32]
 80032f6:	3301      	adds	r3, #1
 80032f8:	623b      	str	r3, [r7, #32]
 80032fa:	6a3b      	ldr	r3, [r7, #32]
 80032fc:	2b03      	cmp	r3, #3
 80032fe:	dde1      	ble.n	80032c4 <bk_write_string+0x44>
        }
        HAL_RTCEx_BKUPWrite(&hrtc, start_reg + i, word);
 8003300:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4413      	add	r3, r2
 8003306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003308:	4619      	mov	r1, r3
 800330a:	4807      	ldr	r0, [pc, #28]	@ (8003328 <bk_write_string+0xa8>)
 800330c:	f007 fc3b 	bl	800ab86 <HAL_RTCEx_BKUPWrite>
    for (int i = 0; i < reg_count; i++) {
 8003310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003312:	3301      	adds	r3, #1
 8003314:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003316:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	429a      	cmp	r2, r3
 800331c:	dbcd      	blt.n	80032ba <bk_write_string+0x3a>
    }
}
 800331e:	bf00      	nop
 8003320:	bf00      	nop
 8003322:	3730      	adds	r7, #48	@ 0x30
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	20002b84 	.word	0x20002b84

0800332c <bk_read_string>:

static void bk_read_string(uint32_t start_reg, char *out, int reg_count) {
 800332c:	b580      	push	{r7, lr}
 800332e:	b08a      	sub	sp, #40	@ 0x28
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
    int pos = 0;
 8003338:	2300      	movs	r3, #0
 800333a:	627b      	str	r3, [r7, #36]	@ 0x24
    int max_len = reg_count * 4 - 1; // оставляем место для '\0'
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	3b01      	subs	r3, #1
 8003342:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < reg_count; i++) {
 8003344:	2300      	movs	r3, #0
 8003346:	623b      	str	r3, [r7, #32]
 8003348:	e034      	b.n	80033b4 <bk_read_string+0x88>
        uint32_t word = HAL_RTCEx_BKUPRead(&hrtc, start_reg + i);
 800334a:	6a3a      	ldr	r2, [r7, #32]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	4413      	add	r3, r2
 8003350:	4619      	mov	r1, r3
 8003352:	481e      	ldr	r0, [pc, #120]	@ (80033cc <bk_read_string+0xa0>)
 8003354:	f007 fc30 	bl	800abb8 <HAL_RTCEx_BKUPRead>
 8003358:	6178      	str	r0, [r7, #20]
        for (int b = 0; b < 4; b++) {
 800335a:	2300      	movs	r3, #0
 800335c:	61fb      	str	r3, [r7, #28]
 800335e:	e023      	b.n	80033a8 <bk_read_string+0x7c>
            if (pos >= max_len) { out[pos] = 0; return; }
 8003360:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	429a      	cmp	r2, r3
 8003366:	db05      	blt.n	8003374 <bk_read_string+0x48>
 8003368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	4413      	add	r3, r2
 800336e:	2200      	movs	r2, #0
 8003370:	701a      	strb	r2, [r3, #0]
 8003372:	e028      	b.n	80033c6 <bk_read_string+0x9a>
            uint8_t ch = (word >> (8 * b)) & 0xFF;
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	fa22 f303 	lsr.w	r3, r2, r3
 800337e:	74fb      	strb	r3, [r7, #19]
            if (ch == 0) { out[pos] = 0; return; }
 8003380:	7cfb      	ldrb	r3, [r7, #19]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d105      	bne.n	8003392 <bk_read_string+0x66>
 8003386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	4413      	add	r3, r2
 800338c:	2200      	movs	r2, #0
 800338e:	701a      	strb	r2, [r3, #0]
 8003390:	e019      	b.n	80033c6 <bk_read_string+0x9a>
            out[pos++] = ch;
 8003392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003394:	1c5a      	adds	r2, r3, #1
 8003396:	627a      	str	r2, [r7, #36]	@ 0x24
 8003398:	461a      	mov	r2, r3
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	4413      	add	r3, r2
 800339e:	7cfa      	ldrb	r2, [r7, #19]
 80033a0:	701a      	strb	r2, [r3, #0]
        for (int b = 0; b < 4; b++) {
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	3301      	adds	r3, #1
 80033a6:	61fb      	str	r3, [r7, #28]
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	2b03      	cmp	r3, #3
 80033ac:	ddd8      	ble.n	8003360 <bk_read_string+0x34>
    for (int i = 0; i < reg_count; i++) {
 80033ae:	6a3b      	ldr	r3, [r7, #32]
 80033b0:	3301      	adds	r3, #1
 80033b2:	623b      	str	r3, [r7, #32]
 80033b4:	6a3a      	ldr	r2, [r7, #32]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	dbc6      	blt.n	800334a <bk_read_string+0x1e>
        }
    }
    out[pos] = 0;
 80033bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	4413      	add	r3, r2
 80033c2:	2200      	movs	r2, #0
 80033c4:	701a      	strb	r2, [r3, #0]
}
 80033c6:	3728      	adds	r7, #40	@ 0x28
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	20002b84 	.word	0x20002b84

080033d0 <Settings_Init>:

/* --- Инициализация backup-доступа --- */
void Settings_Init(void) {
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
    __HAL_RCC_PWR_CLK_ENABLE();
 80033d6:	2300      	movs	r3, #0
 80033d8:	607b      	str	r3, [r7, #4]
 80033da:	4b09      	ldr	r3, [pc, #36]	@ (8003400 <Settings_Init+0x30>)
 80033dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033de:	4a08      	ldr	r2, [pc, #32]	@ (8003400 <Settings_Init+0x30>)
 80033e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80033e6:	4b06      	ldr	r3, [pc, #24]	@ (8003400 <Settings_Init+0x30>)
 80033e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ee:	607b      	str	r3, [r7, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]
    HAL_PWR_EnableBkUpAccess();
 80033f2:	f006 fb79 	bl	8009ae8 <HAL_PWR_EnableBkUpAccess>
}
 80033f6:	bf00      	nop
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	40023800 	.word	0x40023800

08003404 <Settings_Save_To_Backup>:

/* --- Сохранение всех настроек в backup --- */
void Settings_Save_To_Backup(ip4_addr_t ip, ip4_addr_t mask, ip4_addr_t gw, uint8_t dhcp,
                             const char *snmp_read, const char *snmp_write, const char *snmp_trap)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
 8003410:	70fb      	strb	r3, [r7, #3]
    bk_write_u32(BKP_IP_REG0, ip.addr);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	4619      	mov	r1, r3
 8003416:	2009      	movs	r0, #9
 8003418:	f7ff ff12 	bl	8003240 <bk_write_u32>
    bk_write_u32(BKP_MASK_REG1, mask.addr);
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	4619      	mov	r1, r3
 8003420:	200a      	movs	r0, #10
 8003422:	f7ff ff0d 	bl	8003240 <bk_write_u32>
    bk_write_u32(BKP_GW_REG2, gw.addr);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4619      	mov	r1, r3
 800342a:	200b      	movs	r0, #11
 800342c:	f7ff ff08 	bl	8003240 <bk_write_u32>
    bk_write_u32(BKP_DHCP_REG3, dhcp ? 1 : 0);
 8003430:	78fb      	ldrb	r3, [r7, #3]
 8003432:	2b00      	cmp	r3, #0
 8003434:	bf14      	ite	ne
 8003436:	2301      	movne	r3, #1
 8003438:	2300      	moveq	r3, #0
 800343a:	b2db      	uxtb	r3, r3
 800343c:	4619      	mov	r1, r3
 800343e:	200c      	movs	r0, #12
 8003440:	f7ff fefe 	bl	8003240 <bk_write_u32>

    /* Сохраняем только первые 8 символов каждого community (2 регистра по 4 байта) */
    bk_write_string(BKP_SNMP_READ_BASE,  snmp_read  ? snmp_read  : "", 2);
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <Settings_Save_To_Backup+0x4a>
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	e000      	b.n	8003450 <Settings_Save_To_Backup+0x4c>
 800344e:	4b12      	ldr	r3, [pc, #72]	@ (8003498 <Settings_Save_To_Backup+0x94>)
 8003450:	2202      	movs	r2, #2
 8003452:	4619      	mov	r1, r3
 8003454:	200d      	movs	r0, #13
 8003456:	f7ff ff13 	bl	8003280 <bk_write_string>
    bk_write_string(BKP_SNMP_WRITE_BASE, snmp_write ? snmp_write : "", 2);
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <Settings_Save_To_Backup+0x60>
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	e000      	b.n	8003466 <Settings_Save_To_Backup+0x62>
 8003464:	4b0c      	ldr	r3, [pc, #48]	@ (8003498 <Settings_Save_To_Backup+0x94>)
 8003466:	2202      	movs	r2, #2
 8003468:	4619      	mov	r1, r3
 800346a:	200f      	movs	r0, #15
 800346c:	f7ff ff08 	bl	8003280 <bk_write_string>
    bk_write_string(BKP_SNMP_TRAP_BASE,  snmp_trap  ? snmp_trap  : "", 2);
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <Settings_Save_To_Backup+0x76>
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	e000      	b.n	800347c <Settings_Save_To_Backup+0x78>
 800347a:	4b07      	ldr	r3, [pc, #28]	@ (8003498 <Settings_Save_To_Backup+0x94>)
 800347c:	2202      	movs	r2, #2
 800347e:	4619      	mov	r1, r3
 8003480:	2011      	movs	r0, #17
 8003482:	f7ff fefd 	bl	8003280 <bk_write_string>

    bk_write_u32(BKP_MAGIC_REG, BKP_MAGIC_VALUE); // Обязательно ставим magic
 8003486:	4905      	ldr	r1, [pc, #20]	@ (800349c <Settings_Save_To_Backup+0x98>)
 8003488:	2013      	movs	r0, #19
 800348a:	f7ff fed9 	bl	8003240 <bk_write_u32>
}
 800348e:	bf00      	nop
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	08024c28 	.word	0x08024c28
 800349c:	beefcafe 	.word	0xbeefcafe

080034a0 <Settings_Load_From_Backup>:
/* --- Загрузка всех настроек из backup --- */
void Settings_Load_From_Backup(ip4_addr_t *ip, ip4_addr_t *mask, ip4_addr_t *gw, uint8_t *dhcp,
                              char *snmp_read, int snmp_read_size,
                              char *snmp_write, int snmp_write_size,
                              char *snmp_trap, int snmp_trap_size)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
 80034ac:	603b      	str	r3, [r7, #0]
    if (bk_read_u32(BKP_MAGIC_REG) != BKP_MAGIC_VALUE) {
 80034ae:	2013      	movs	r0, #19
 80034b0:	f7ff fed6 	bl	8003260 <bk_read_u32>
 80034b4:	4603      	mov	r3, r0
 80034b6:	4a51      	ldr	r2, [pc, #324]	@ (80035fc <Settings_Load_From_Backup+0x15c>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d02a      	beq.n	8003512 <Settings_Load_From_Backup+0x72>
        // backup пустой или некорректный
        if (ip) ip->addr = 0;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d002      	beq.n	80034c8 <Settings_Load_From_Backup+0x28>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
        if (mask) mask->addr = 0;
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d002      	beq.n	80034d4 <Settings_Load_From_Backup+0x34>
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]
        if (gw) gw->addr = 0;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d002      	beq.n	80034e0 <Settings_Load_From_Backup+0x40>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]
        if (dhcp) *dhcp = 0;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d002      	beq.n	80034ec <Settings_Load_From_Backup+0x4c>
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	2200      	movs	r2, #0
 80034ea:	701a      	strb	r2, [r3, #0]
        if (snmp_read)  snmp_read[0]  = 0;
 80034ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d002      	beq.n	80034f8 <Settings_Load_From_Backup+0x58>
 80034f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034f4:	2200      	movs	r2, #0
 80034f6:	701a      	strb	r2, [r3, #0]
        if (snmp_write) snmp_write[0] = 0;
 80034f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d002      	beq.n	8003504 <Settings_Load_From_Backup+0x64>
 80034fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003500:	2200      	movs	r2, #0
 8003502:	701a      	strb	r2, [r3, #0]
        if (snmp_trap)  snmp_trap[0]  = 0;
 8003504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003506:	2b00      	cmp	r3, #0
 8003508:	d074      	beq.n	80035f4 <Settings_Load_From_Backup+0x154>
 800350a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800350c:	2200      	movs	r2, #0
 800350e:	701a      	strb	r2, [r3, #0]
 8003510:	e071      	b.n	80035f6 <Settings_Load_From_Backup+0x156>
        return;
    }

    if (ip)    ip->addr   = bk_read_u32(BKP_IP_REG0);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d005      	beq.n	8003524 <Settings_Load_From_Backup+0x84>
 8003518:	2009      	movs	r0, #9
 800351a:	f7ff fea1 	bl	8003260 <bk_read_u32>
 800351e:	4602      	mov	r2, r0
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	601a      	str	r2, [r3, #0]
    if (mask)  mask->addr = bk_read_u32(BKP_MASK_REG1);
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d005      	beq.n	8003536 <Settings_Load_From_Backup+0x96>
 800352a:	200a      	movs	r0, #10
 800352c:	f7ff fe98 	bl	8003260 <bk_read_u32>
 8003530:	4602      	mov	r2, r0
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	601a      	str	r2, [r3, #0]
    if (gw)    gw->addr   = bk_read_u32(BKP_GW_REG2);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d005      	beq.n	8003548 <Settings_Load_From_Backup+0xa8>
 800353c:	200b      	movs	r0, #11
 800353e:	f7ff fe8f 	bl	8003260 <bk_read_u32>
 8003542:	4602      	mov	r2, r0
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	601a      	str	r2, [r3, #0]
    if (dhcp)  *dhcp      = (uint8_t)(bk_read_u32(BKP_DHCP_REG3) & 0xFF);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d006      	beq.n	800355c <Settings_Load_From_Backup+0xbc>
 800354e:	200c      	movs	r0, #12
 8003550:	f7ff fe86 	bl	8003260 <bk_read_u32>
 8003554:	4603      	mov	r3, r0
 8003556:	b2da      	uxtb	r2, r3
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	701a      	strb	r2, [r3, #0]

    char tmp[9]; /* читаем до 8 символов */

    bk_read_string(BKP_SNMP_READ_BASE, tmp, 2);
 800355c:	f107 0314 	add.w	r3, r7, #20
 8003560:	2202      	movs	r2, #2
 8003562:	4619      	mov	r1, r3
 8003564:	200d      	movs	r0, #13
 8003566:	f7ff fee1 	bl	800332c <bk_read_string>
    if (snmp_read) { strncpy(snmp_read, tmp, snmp_read_size-1); snmp_read[snmp_read_size-1]=0; }
 800356a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00e      	beq.n	800358e <Settings_Load_From_Backup+0xee>
 8003570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003572:	3b01      	subs	r3, #1
 8003574:	461a      	mov	r2, r3
 8003576:	f107 0314 	add.w	r3, r7, #20
 800357a:	4619      	mov	r1, r3
 800357c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800357e:	f01e fda1 	bl	80220c4 <strncpy>
 8003582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003584:	3b01      	subs	r3, #1
 8003586:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003588:	4413      	add	r3, r2
 800358a:	2200      	movs	r2, #0
 800358c:	701a      	strb	r2, [r3, #0]

    bk_read_string(BKP_SNMP_WRITE_BASE, tmp, 2);
 800358e:	f107 0314 	add.w	r3, r7, #20
 8003592:	2202      	movs	r2, #2
 8003594:	4619      	mov	r1, r3
 8003596:	200f      	movs	r0, #15
 8003598:	f7ff fec8 	bl	800332c <bk_read_string>
    if (snmp_write) { strncpy(snmp_write, tmp, snmp_write_size-1); snmp_write[snmp_write_size-1]=0; }
 800359c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00e      	beq.n	80035c0 <Settings_Load_From_Backup+0x120>
 80035a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035a4:	3b01      	subs	r3, #1
 80035a6:	461a      	mov	r2, r3
 80035a8:	f107 0314 	add.w	r3, r7, #20
 80035ac:	4619      	mov	r1, r3
 80035ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035b0:	f01e fd88 	bl	80220c4 <strncpy>
 80035b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035b6:	3b01      	subs	r3, #1
 80035b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035ba:	4413      	add	r3, r2
 80035bc:	2200      	movs	r2, #0
 80035be:	701a      	strb	r2, [r3, #0]

    bk_read_string(BKP_SNMP_TRAP_BASE, tmp, 2);
 80035c0:	f107 0314 	add.w	r3, r7, #20
 80035c4:	2202      	movs	r2, #2
 80035c6:	4619      	mov	r1, r3
 80035c8:	2011      	movs	r0, #17
 80035ca:	f7ff feaf 	bl	800332c <bk_read_string>
    if (snmp_trap) { strncpy(snmp_trap, tmp, snmp_trap_size-1); snmp_trap[snmp_trap_size-1]=0; }
 80035ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d010      	beq.n	80035f6 <Settings_Load_From_Backup+0x156>
 80035d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035d6:	3b01      	subs	r3, #1
 80035d8:	461a      	mov	r2, r3
 80035da:	f107 0314 	add.w	r3, r7, #20
 80035de:	4619      	mov	r1, r3
 80035e0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80035e2:	f01e fd6f 	bl	80220c4 <strncpy>
 80035e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035e8:	3b01      	subs	r3, #1
 80035ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80035ec:	4413      	add	r3, r2
 80035ee:	2200      	movs	r2, #0
 80035f0:	701a      	strb	r2, [r3, #0]
 80035f2:	e000      	b.n	80035f6 <Settings_Load_From_Backup+0x156>
        return;
 80035f4:	bf00      	nop
}
 80035f6:	3720      	adds	r7, #32
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	beefcafe 	.word	0xbeefcafe

08003600 <SignalProcessor_Update>:
float voltage2 = 0.0f;
float current  = 0.0f;
float selected_voltage = 0.0f;

void SignalProcessor_Update(uint32_t *adc_buf, size_t samples)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b090      	sub	sp, #64	@ 0x40
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
    double sum_v1 = 0.0;
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	f04f 0300 	mov.w	r3, #0
 8003612:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double sum_v2 = 0.0;
 8003616:	f04f 0200 	mov.w	r2, #0
 800361a:	f04f 0300 	mov.w	r3, #0
 800361e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    double sum_i  = 0.0;
 8003622:	f04f 0200 	mov.w	r2, #0
 8003626:	f04f 0300 	mov.w	r3, #0
 800362a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    for (size_t n = 0; n < samples; n++) {
 800362e:	2300      	movs	r3, #0
 8003630:	627b      	str	r3, [r7, #36]	@ 0x24
 8003632:	e095      	b.n	8003760 <SignalProcessor_Update+0x160>
        // Буфер имеет вид [ch1, ch2, ch3, ch1, ch2, ch3, ...]
        uint32_t raw1 = adc_buf[n * 3 + 0];
 8003634:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003636:	4613      	mov	r3, r2
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	4413      	add	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	461a      	mov	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4413      	add	r3, r2
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	623b      	str	r3, [r7, #32]
        uint32_t raw2 = adc_buf[n * 3 + 1];
 8003648:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800364a:	4613      	mov	r3, r2
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	4413      	add	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	3304      	adds	r3, #4
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	4413      	add	r3, r2
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	61fb      	str	r3, [r7, #28]
        uint32_t raw3 = adc_buf[n * 3 + 2];
 800365c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800365e:	4613      	mov	r3, r2
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	4413      	add	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	3308      	adds	r3, #8
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	4413      	add	r3, r2
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	61bb      	str	r3, [r7, #24]

        // Переводим в напряжение на пине (0…3.3 В)
        float v1 = (raw1 * VREF / ADC_RESOLUTION) - VREF_HALF;
 8003670:	6a38      	ldr	r0, [r7, #32]
 8003672:	f7fd fb55 	bl	8000d20 <__aeabi_ui2f>
 8003676:	4603      	mov	r3, r0
 8003678:	4999      	ldr	r1, [pc, #612]	@ (80038e0 <SignalProcessor_Update+0x2e0>)
 800367a:	4618      	mov	r0, r3
 800367c:	f7fd fba8 	bl	8000dd0 <__aeabi_fmul>
 8003680:	4603      	mov	r3, r0
 8003682:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8003686:	4618      	mov	r0, r3
 8003688:	f7fd fc56 	bl	8000f38 <__aeabi_fdiv>
 800368c:	4603      	mov	r3, r0
 800368e:	4995      	ldr	r1, [pc, #596]	@ (80038e4 <SignalProcessor_Update+0x2e4>)
 8003690:	4618      	mov	r0, r3
 8003692:	f7fd fa93 	bl	8000bbc <__aeabi_fsub>
 8003696:	4603      	mov	r3, r0
 8003698:	617b      	str	r3, [r7, #20]
        float v2 = (raw2 * VREF / ADC_RESOLUTION) - VREF_HALF;
 800369a:	69f8      	ldr	r0, [r7, #28]
 800369c:	f7fd fb40 	bl	8000d20 <__aeabi_ui2f>
 80036a0:	4603      	mov	r3, r0
 80036a2:	498f      	ldr	r1, [pc, #572]	@ (80038e0 <SignalProcessor_Update+0x2e0>)
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7fd fb93 	bl	8000dd0 <__aeabi_fmul>
 80036aa:	4603      	mov	r3, r0
 80036ac:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7fd fc41 	bl	8000f38 <__aeabi_fdiv>
 80036b6:	4603      	mov	r3, r0
 80036b8:	498a      	ldr	r1, [pc, #552]	@ (80038e4 <SignalProcessor_Update+0x2e4>)
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fd fa7e 	bl	8000bbc <__aeabi_fsub>
 80036c0:	4603      	mov	r3, r0
 80036c2:	613b      	str	r3, [r7, #16]
        float i  = (raw3 * VREF / ADC_RESOLUTION) - VREF_HALF;
 80036c4:	69b8      	ldr	r0, [r7, #24]
 80036c6:	f7fd fb2b 	bl	8000d20 <__aeabi_ui2f>
 80036ca:	4603      	mov	r3, r0
 80036cc:	4984      	ldr	r1, [pc, #528]	@ (80038e0 <SignalProcessor_Update+0x2e0>)
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7fd fb7e 	bl	8000dd0 <__aeabi_fmul>
 80036d4:	4603      	mov	r3, r0
 80036d6:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 80036da:	4618      	mov	r0, r3
 80036dc:	f7fd fc2c 	bl	8000f38 <__aeabi_fdiv>
 80036e0:	4603      	mov	r3, r0
 80036e2:	4980      	ldr	r1, [pc, #512]	@ (80038e4 <SignalProcessor_Update+0x2e4>)
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7fd fa69 	bl	8000bbc <__aeabi_fsub>
 80036ea:	4603      	mov	r3, r0
 80036ec:	60fb      	str	r3, [r7, #12]

        // Суммируем квадраты
        sum_v1 += (double)(v1 * v1);
 80036ee:	6979      	ldr	r1, [r7, #20]
 80036f0:	6978      	ldr	r0, [r7, #20]
 80036f2:	f7fd fb6d 	bl	8000dd0 <__aeabi_fmul>
 80036f6:	4603      	mov	r3, r0
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7fc fedb 	bl	80004b4 <__aeabi_f2d>
 80036fe:	4602      	mov	r2, r0
 8003700:	460b      	mov	r3, r1
 8003702:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8003706:	f7fc fd77 	bl	80001f8 <__adddf3>
 800370a:	4602      	mov	r2, r0
 800370c:	460b      	mov	r3, r1
 800370e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
        sum_v2 += (double)(v2 * v2);
 8003712:	6939      	ldr	r1, [r7, #16]
 8003714:	6938      	ldr	r0, [r7, #16]
 8003716:	f7fd fb5b 	bl	8000dd0 <__aeabi_fmul>
 800371a:	4603      	mov	r3, r0
 800371c:	4618      	mov	r0, r3
 800371e:	f7fc fec9 	bl	80004b4 <__aeabi_f2d>
 8003722:	4602      	mov	r2, r0
 8003724:	460b      	mov	r3, r1
 8003726:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800372a:	f7fc fd65 	bl	80001f8 <__adddf3>
 800372e:	4602      	mov	r2, r0
 8003730:	460b      	mov	r3, r1
 8003732:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
        sum_i  += (double)(i  * i);
 8003736:	68f9      	ldr	r1, [r7, #12]
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f7fd fb49 	bl	8000dd0 <__aeabi_fmul>
 800373e:	4603      	mov	r3, r0
 8003740:	4618      	mov	r0, r3
 8003742:	f7fc feb7 	bl	80004b4 <__aeabi_f2d>
 8003746:	4602      	mov	r2, r0
 8003748:	460b      	mov	r3, r1
 800374a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800374e:	f7fc fd53 	bl	80001f8 <__adddf3>
 8003752:	4602      	mov	r2, r0
 8003754:	460b      	mov	r3, r1
 8003756:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    for (size_t n = 0; n < samples; n++) {
 800375a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375c:	3301      	adds	r3, #1
 800375e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003760:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	429a      	cmp	r2, r3
 8003766:	f4ff af65 	bcc.w	8003634 <SignalProcessor_Update+0x34>
    }

    // RMS
    voltage1 = (sqrtf(sum_v1 / samples)*244.4);
 800376a:	6838      	ldr	r0, [r7, #0]
 800376c:	f7fc fe80 	bl	8000470 <__aeabi_ui2d>
 8003770:	4602      	mov	r2, r0
 8003772:	460b      	mov	r3, r1
 8003774:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8003778:	f7fd f81e 	bl	80007b8 <__aeabi_ddiv>
 800377c:	4602      	mov	r2, r0
 800377e:	460b      	mov	r3, r1
 8003780:	4610      	mov	r0, r2
 8003782:	4619      	mov	r1, r3
 8003784:	f7fd f9c6 	bl	8000b14 <__aeabi_d2f>
 8003788:	4603      	mov	r3, r0
 800378a:	4618      	mov	r0, r3
 800378c:	f021 f90e 	bl	80249ac <sqrtf>
 8003790:	4603      	mov	r3, r0
 8003792:	4618      	mov	r0, r3
 8003794:	f7fc fe8e 	bl	80004b4 <__aeabi_f2d>
 8003798:	a34b      	add	r3, pc, #300	@ (adr r3, 80038c8 <SignalProcessor_Update+0x2c8>)
 800379a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379e:	f7fc fee1 	bl	8000564 <__aeabi_dmul>
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	4610      	mov	r0, r2
 80037a8:	4619      	mov	r1, r3
 80037aa:	f7fd f9b3 	bl	8000b14 <__aeabi_d2f>
 80037ae:	4603      	mov	r3, r0
 80037b0:	4a4d      	ldr	r2, [pc, #308]	@ (80038e8 <SignalProcessor_Update+0x2e8>)
 80037b2:	6013      	str	r3, [r2, #0]
    if (voltage1 < 10.0f) {
 80037b4:	4b4c      	ldr	r3, [pc, #304]	@ (80038e8 <SignalProcessor_Update+0x2e8>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	494c      	ldr	r1, [pc, #304]	@ (80038ec <SignalProcessor_Update+0x2ec>)
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7fd fca6 	bl	800110c <__aeabi_fcmplt>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <SignalProcessor_Update+0x1ce>
        voltage1 = 0.0f;
 80037c6:	4b48      	ldr	r3, [pc, #288]	@ (80038e8 <SignalProcessor_Update+0x2e8>)
 80037c8:	f04f 0200 	mov.w	r2, #0
 80037cc:	601a      	str	r2, [r3, #0]
    }
    voltage2 = (sqrtf(sum_v2 / samples)*245.9);
 80037ce:	6838      	ldr	r0, [r7, #0]
 80037d0:	f7fc fe4e 	bl	8000470 <__aeabi_ui2d>
 80037d4:	4602      	mov	r2, r0
 80037d6:	460b      	mov	r3, r1
 80037d8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80037dc:	f7fc ffec 	bl	80007b8 <__aeabi_ddiv>
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	4610      	mov	r0, r2
 80037e6:	4619      	mov	r1, r3
 80037e8:	f7fd f994 	bl	8000b14 <__aeabi_d2f>
 80037ec:	4603      	mov	r3, r0
 80037ee:	4618      	mov	r0, r3
 80037f0:	f021 f8dc 	bl	80249ac <sqrtf>
 80037f4:	4603      	mov	r3, r0
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fc fe5c 	bl	80004b4 <__aeabi_f2d>
 80037fc:	a334      	add	r3, pc, #208	@ (adr r3, 80038d0 <SignalProcessor_Update+0x2d0>)
 80037fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003802:	f7fc feaf 	bl	8000564 <__aeabi_dmul>
 8003806:	4602      	mov	r2, r0
 8003808:	460b      	mov	r3, r1
 800380a:	4610      	mov	r0, r2
 800380c:	4619      	mov	r1, r3
 800380e:	f7fd f981 	bl	8000b14 <__aeabi_d2f>
 8003812:	4603      	mov	r3, r0
 8003814:	4a36      	ldr	r2, [pc, #216]	@ (80038f0 <SignalProcessor_Update+0x2f0>)
 8003816:	6013      	str	r3, [r2, #0]
    if (voltage2 < 10.0f) {
 8003818:	4b35      	ldr	r3, [pc, #212]	@ (80038f0 <SignalProcessor_Update+0x2f0>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4933      	ldr	r1, [pc, #204]	@ (80038ec <SignalProcessor_Update+0x2ec>)
 800381e:	4618      	mov	r0, r3
 8003820:	f7fd fc74 	bl	800110c <__aeabi_fcmplt>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <SignalProcessor_Update+0x232>
        voltage2 = 0.0f;
 800382a:	4b31      	ldr	r3, [pc, #196]	@ (80038f0 <SignalProcessor_Update+0x2f0>)
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	601a      	str	r2, [r3, #0]
    }
	current  = (sqrtf(sum_i  / samples)*4.8);
 8003832:	6838      	ldr	r0, [r7, #0]
 8003834:	f7fc fe1c 	bl	8000470 <__aeabi_ui2d>
 8003838:	4602      	mov	r2, r0
 800383a:	460b      	mov	r3, r1
 800383c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003840:	f7fc ffba 	bl	80007b8 <__aeabi_ddiv>
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	4610      	mov	r0, r2
 800384a:	4619      	mov	r1, r3
 800384c:	f7fd f962 	bl	8000b14 <__aeabi_d2f>
 8003850:	4603      	mov	r3, r0
 8003852:	4618      	mov	r0, r3
 8003854:	f021 f8aa 	bl	80249ac <sqrtf>
 8003858:	4603      	mov	r3, r0
 800385a:	4618      	mov	r0, r3
 800385c:	f7fc fe2a 	bl	80004b4 <__aeabi_f2d>
 8003860:	a31d      	add	r3, pc, #116	@ (adr r3, 80038d8 <SignalProcessor_Update+0x2d8>)
 8003862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003866:	f7fc fe7d 	bl	8000564 <__aeabi_dmul>
 800386a:	4602      	mov	r2, r0
 800386c:	460b      	mov	r3, r1
 800386e:	4610      	mov	r0, r2
 8003870:	4619      	mov	r1, r3
 8003872:	f7fd f94f 	bl	8000b14 <__aeabi_d2f>
 8003876:	4603      	mov	r3, r0
 8003878:	4a1e      	ldr	r2, [pc, #120]	@ (80038f4 <SignalProcessor_Update+0x2f4>)
 800387a:	6013      	str	r3, [r2, #0]
    if (current < 0.10f) {
 800387c:	4b1d      	ldr	r3, [pc, #116]	@ (80038f4 <SignalProcessor_Update+0x2f4>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	491d      	ldr	r1, [pc, #116]	@ (80038f8 <SignalProcessor_Update+0x2f8>)
 8003882:	4618      	mov	r0, r3
 8003884:	f7fd fc42 	bl	800110c <__aeabi_fcmplt>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <SignalProcessor_Update+0x296>
        current = 0.0f;
 800388e:	4b19      	ldr	r3, [pc, #100]	@ (80038f4 <SignalProcessor_Update+0x2f4>)
 8003890:	f04f 0200 	mov.w	r2, #0
 8003894:	601a      	str	r2, [r3, #0]
    }

    // Выбор активного напряжения
    if (voltage1 > 50.0f) {
 8003896:	4b14      	ldr	r3, [pc, #80]	@ (80038e8 <SignalProcessor_Update+0x2e8>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4918      	ldr	r1, [pc, #96]	@ (80038fc <SignalProcessor_Update+0x2fc>)
 800389c:	4618      	mov	r0, r3
 800389e:	f7fd fc53 	bl	8001148 <__aeabi_fcmpgt>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d004      	beq.n	80038b2 <SignalProcessor_Update+0x2b2>
        selected_voltage = voltage1;
 80038a8:	4b0f      	ldr	r3, [pc, #60]	@ (80038e8 <SignalProcessor_Update+0x2e8>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a14      	ldr	r2, [pc, #80]	@ (8003900 <SignalProcessor_Update+0x300>)
 80038ae:	6013      	str	r3, [r2, #0]
    } else {
        selected_voltage = voltage2;
    }
}
 80038b0:	e003      	b.n	80038ba <SignalProcessor_Update+0x2ba>
        selected_voltage = voltage2;
 80038b2:	4b0f      	ldr	r3, [pc, #60]	@ (80038f0 <SignalProcessor_Update+0x2f0>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a12      	ldr	r2, [pc, #72]	@ (8003900 <SignalProcessor_Update+0x300>)
 80038b8:	6013      	str	r3, [r2, #0]
}
 80038ba:	bf00      	nop
 80038bc:	3740      	adds	r7, #64	@ 0x40
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	f3af 8000 	nop.w
 80038c8:	cccccccd 	.word	0xcccccccd
 80038cc:	406e8ccc 	.word	0x406e8ccc
 80038d0:	cccccccd 	.word	0xcccccccd
 80038d4:	406ebccc 	.word	0x406ebccc
 80038d8:	33333333 	.word	0x33333333
 80038dc:	40133333 	.word	0x40133333
 80038e0:	40533333 	.word	0x40533333
 80038e4:	3fd33333 	.word	0x3fd33333
 80038e8:	20004c64 	.word	0x20004c64
 80038ec:	41200000 	.word	0x41200000
 80038f0:	20004c68 	.word	0x20004c68
 80038f4:	20004c6c 	.word	0x20004c6c
 80038f8:	3dcccccd 	.word	0x3dcccccd
 80038fc:	42480000 	.word	0x42480000
 8003900:	20004c70 	.word	0x20004c70

08003904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800390a:	2300      	movs	r3, #0
 800390c:	607b      	str	r3, [r7, #4]
 800390e:	4b0f      	ldr	r3, [pc, #60]	@ (800394c <HAL_MspInit+0x48>)
 8003910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003912:	4a0e      	ldr	r2, [pc, #56]	@ (800394c <HAL_MspInit+0x48>)
 8003914:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003918:	6453      	str	r3, [r2, #68]	@ 0x44
 800391a:	4b0c      	ldr	r3, [pc, #48]	@ (800394c <HAL_MspInit+0x48>)
 800391c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800391e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003922:	607b      	str	r3, [r7, #4]
 8003924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003926:	2300      	movs	r3, #0
 8003928:	603b      	str	r3, [r7, #0]
 800392a:	4b08      	ldr	r3, [pc, #32]	@ (800394c <HAL_MspInit+0x48>)
 800392c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392e:	4a07      	ldr	r2, [pc, #28]	@ (800394c <HAL_MspInit+0x48>)
 8003930:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003934:	6413      	str	r3, [r2, #64]	@ 0x40
 8003936:	4b05      	ldr	r3, [pc, #20]	@ (800394c <HAL_MspInit+0x48>)
 8003938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800393e:	603b      	str	r3, [r7, #0]
 8003940:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003942:	bf00      	nop
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	bc80      	pop	{r7}
 800394a:	4770      	bx	lr
 800394c:	40023800 	.word	0x40023800

08003950 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b08a      	sub	sp, #40	@ 0x28
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003958:	f107 0314 	add.w	r3, r7, #20
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	605a      	str	r2, [r3, #4]
 8003962:	609a      	str	r2, [r3, #8]
 8003964:	60da      	str	r2, [r3, #12]
 8003966:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a3c      	ldr	r2, [pc, #240]	@ (8003a60 <HAL_ADC_MspInit+0x110>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d172      	bne.n	8003a58 <HAL_ADC_MspInit+0x108>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003972:	2300      	movs	r3, #0
 8003974:	613b      	str	r3, [r7, #16]
 8003976:	4b3b      	ldr	r3, [pc, #236]	@ (8003a64 <HAL_ADC_MspInit+0x114>)
 8003978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800397a:	4a3a      	ldr	r2, [pc, #232]	@ (8003a64 <HAL_ADC_MspInit+0x114>)
 800397c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003980:	6453      	str	r3, [r2, #68]	@ 0x44
 8003982:	4b38      	ldr	r3, [pc, #224]	@ (8003a64 <HAL_ADC_MspInit+0x114>)
 8003984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800398a:	613b      	str	r3, [r7, #16]
 800398c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	4b34      	ldr	r3, [pc, #208]	@ (8003a64 <HAL_ADC_MspInit+0x114>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003996:	4a33      	ldr	r2, [pc, #204]	@ (8003a64 <HAL_ADC_MspInit+0x114>)
 8003998:	f043 0304 	orr.w	r3, r3, #4
 800399c:	6313      	str	r3, [r2, #48]	@ 0x30
 800399e:	4b31      	ldr	r3, [pc, #196]	@ (8003a64 <HAL_ADC_MspInit+0x114>)
 80039a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a2:	f003 0304 	and.w	r3, r3, #4
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039aa:	2300      	movs	r3, #0
 80039ac:	60bb      	str	r3, [r7, #8]
 80039ae:	4b2d      	ldr	r3, [pc, #180]	@ (8003a64 <HAL_ADC_MspInit+0x114>)
 80039b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b2:	4a2c      	ldr	r2, [pc, #176]	@ (8003a64 <HAL_ADC_MspInit+0x114>)
 80039b4:	f043 0301 	orr.w	r3, r3, #1
 80039b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80039ba:	4b2a      	ldr	r3, [pc, #168]	@ (8003a64 <HAL_ADC_MspInit+0x114>)
 80039bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	60bb      	str	r3, [r7, #8]
 80039c4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80039c6:	2301      	movs	r3, #1
 80039c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039ca:	2303      	movs	r3, #3
 80039cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ce:	2300      	movs	r3, #0
 80039d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039d2:	f107 0314 	add.w	r3, r7, #20
 80039d6:	4619      	mov	r1, r3
 80039d8:	4823      	ldr	r0, [pc, #140]	@ (8003a68 <HAL_ADC_MspInit+0x118>)
 80039da:	f005 fa0b 	bl	8008df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80039de:	2360      	movs	r3, #96	@ 0x60
 80039e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039e2:	2303      	movs	r3, #3
 80039e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e6:	2300      	movs	r3, #0
 80039e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ea:	f107 0314 	add.w	r3, r7, #20
 80039ee:	4619      	mov	r1, r3
 80039f0:	481e      	ldr	r0, [pc, #120]	@ (8003a6c <HAL_ADC_MspInit+0x11c>)
 80039f2:	f005 f9ff 	bl	8008df4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80039f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003a70 <HAL_ADC_MspInit+0x120>)
 80039f8:	4a1e      	ldr	r2, [pc, #120]	@ (8003a74 <HAL_ADC_MspInit+0x124>)
 80039fa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80039fc:	4b1c      	ldr	r3, [pc, #112]	@ (8003a70 <HAL_ADC_MspInit+0x120>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a02:	4b1b      	ldr	r3, [pc, #108]	@ (8003a70 <HAL_ADC_MspInit+0x120>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a08:	4b19      	ldr	r3, [pc, #100]	@ (8003a70 <HAL_ADC_MspInit+0x120>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003a0e:	4b18      	ldr	r3, [pc, #96]	@ (8003a70 <HAL_ADC_MspInit+0x120>)
 8003a10:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a14:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003a16:	4b16      	ldr	r3, [pc, #88]	@ (8003a70 <HAL_ADC_MspInit+0x120>)
 8003a18:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003a1c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003a1e:	4b14      	ldr	r3, [pc, #80]	@ (8003a70 <HAL_ADC_MspInit+0x120>)
 8003a20:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003a24:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003a26:	4b12      	ldr	r3, [pc, #72]	@ (8003a70 <HAL_ADC_MspInit+0x120>)
 8003a28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a2c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8003a2e:	4b10      	ldr	r3, [pc, #64]	@ (8003a70 <HAL_ADC_MspInit+0x120>)
 8003a30:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003a34:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a36:	4b0e      	ldr	r3, [pc, #56]	@ (8003a70 <HAL_ADC_MspInit+0x120>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003a3c:	480c      	ldr	r0, [pc, #48]	@ (8003a70 <HAL_ADC_MspInit+0x120>)
 8003a3e:	f003 fa9b 	bl	8006f78 <HAL_DMA_Init>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8003a48:	f7ff fbf4 	bl	8003234 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a08      	ldr	r2, [pc, #32]	@ (8003a70 <HAL_ADC_MspInit+0x120>)
 8003a50:	639a      	str	r2, [r3, #56]	@ 0x38
 8003a52:	4a07      	ldr	r2, [pc, #28]	@ (8003a70 <HAL_ADC_MspInit+0x120>)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003a58:	bf00      	nop
 8003a5a:	3728      	adds	r7, #40	@ 0x28
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40012000 	.word	0x40012000
 8003a64:	40023800 	.word	0x40023800
 8003a68:	40020800 	.word	0x40020800
 8003a6c:	40020000 	.word	0x40020000
 8003a70:	20002ad0 	.word	0x20002ad0
 8003a74:	40026410 	.word	0x40026410

08003a78 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b08a      	sub	sp, #40	@ 0x28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a80:	f107 0314 	add.w	r3, r7, #20
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]
 8003a88:	605a      	str	r2, [r3, #4]
 8003a8a:	609a      	str	r2, [r3, #8]
 8003a8c:	60da      	str	r2, [r3, #12]
 8003a8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a19      	ldr	r2, [pc, #100]	@ (8003afc <HAL_I2C_MspInit+0x84>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d12b      	bne.n	8003af2 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	613b      	str	r3, [r7, #16]
 8003a9e:	4b18      	ldr	r3, [pc, #96]	@ (8003b00 <HAL_I2C_MspInit+0x88>)
 8003aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa2:	4a17      	ldr	r2, [pc, #92]	@ (8003b00 <HAL_I2C_MspInit+0x88>)
 8003aa4:	f043 0302 	orr.w	r3, r3, #2
 8003aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003aaa:	4b15      	ldr	r3, [pc, #84]	@ (8003b00 <HAL_I2C_MspInit+0x88>)
 8003aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	613b      	str	r3, [r7, #16]
 8003ab4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003ab6:	23c0      	movs	r3, #192	@ 0xc0
 8003ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003aba:	2312      	movs	r3, #18
 8003abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003ac6:	2304      	movs	r3, #4
 8003ac8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003aca:	f107 0314 	add.w	r3, r7, #20
 8003ace:	4619      	mov	r1, r3
 8003ad0:	480c      	ldr	r0, [pc, #48]	@ (8003b04 <HAL_I2C_MspInit+0x8c>)
 8003ad2:	f005 f98f 	bl	8008df4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60fb      	str	r3, [r7, #12]
 8003ada:	4b09      	ldr	r3, [pc, #36]	@ (8003b00 <HAL_I2C_MspInit+0x88>)
 8003adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ade:	4a08      	ldr	r2, [pc, #32]	@ (8003b00 <HAL_I2C_MspInit+0x88>)
 8003ae0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003ae4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ae6:	4b06      	ldr	r3, [pc, #24]	@ (8003b00 <HAL_I2C_MspInit+0x88>)
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003af2:	bf00      	nop
 8003af4:	3728      	adds	r7, #40	@ 0x28
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40005400 	.word	0x40005400
 8003b00:	40023800 	.word	0x40023800
 8003b04:	40020400 	.word	0x40020400

08003b08 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a05      	ldr	r2, [pc, #20]	@ (8003b2c <HAL_RTC_MspInit+0x24>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d102      	bne.n	8003b20 <HAL_RTC_MspInit+0x18>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003b1a:	4b05      	ldr	r3, [pc, #20]	@ (8003b30 <HAL_RTC_MspInit+0x28>)
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bc80      	pop	{r7}
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	40002800 	.word	0x40002800
 8003b30:	42470e3c 	.word	0x42470e3c

08003b34 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a0a      	ldr	r2, [pc, #40]	@ (8003b6c <HAL_TIM_Base_MspInit+0x38>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d10d      	bne.n	8003b62 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b46:	2300      	movs	r3, #0
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	4b09      	ldr	r3, [pc, #36]	@ (8003b70 <HAL_TIM_Base_MspInit+0x3c>)
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4e:	4a08      	ldr	r2, [pc, #32]	@ (8003b70 <HAL_TIM_Base_MspInit+0x3c>)
 8003b50:	f043 0302 	orr.w	r3, r3, #2
 8003b54:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b56:	4b06      	ldr	r3, [pc, #24]	@ (8003b70 <HAL_TIM_Base_MspInit+0x3c>)
 8003b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8003b62:	bf00      	nop
 8003b64:	3714      	adds	r7, #20
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr
 8003b6c:	40000400 	.word	0x40000400
 8003b70:	40023800 	.word	0x40023800

08003b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003b78:	bf00      	nop
 8003b7a:	e7fd      	b.n	8003b78 <NMI_Handler+0x4>

08003b7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b80:	bf00      	nop
 8003b82:	e7fd      	b.n	8003b80 <HardFault_Handler+0x4>

08003b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b88:	bf00      	nop
 8003b8a:	e7fd      	b.n	8003b88 <MemManage_Handler+0x4>

08003b8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b90:	bf00      	nop
 8003b92:	e7fd      	b.n	8003b90 <BusFault_Handler+0x4>

08003b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b98:	bf00      	nop
 8003b9a:	e7fd      	b.n	8003b98 <UsageFault_Handler+0x4>

08003b9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ba0:	bf00      	nop
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bc80      	pop	{r7}
 8003ba6:	4770      	bx	lr

08003ba8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bac:	bf00      	nop
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bc80      	pop	{r7}
 8003bb2:	4770      	bx	lr

08003bb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bb8:	bf00      	nop
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bc80      	pop	{r7}
 8003bbe:	4770      	bx	lr

08003bc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bc4:	f002 fcae 	bl	8006524 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bc8:	bf00      	nop
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003bd0:	2002      	movs	r0, #2
 8003bd2:	f005 fac5 	bl	8009160 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003bd6:	bf00      	nop
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003bde:	2004      	movs	r0, #4
 8003be0:	f005 fabe 	bl	8009160 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003be4:	bf00      	nop
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003bec:	2008      	movs	r0, #8
 8003bee:	f005 fab7 	bl	8009160 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003bf2:	bf00      	nop
 8003bf4:	bd80      	pop	{r7, pc}
	...

08003bf8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003bfc:	4802      	ldr	r0, [pc, #8]	@ (8003c08 <DMA2_Stream0_IRQHandler+0x10>)
 8003bfe:	f003 fac1 	bl	8007184 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003c02:	bf00      	nop
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	20002ad0 	.word	0x20002ad0

08003c0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  return 1;
 8003c10:	2301      	movs	r3, #1
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bc80      	pop	{r7}
 8003c18:	4770      	bx	lr
	...

08003c1c <_kill>:

int _kill(int pid, int sig)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003c26:	4b05      	ldr	r3, [pc, #20]	@ (8003c3c <_kill+0x20>)
 8003c28:	2216      	movs	r2, #22
 8003c2a:	601a      	str	r2, [r3, #0]
  return -1;
 8003c2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bc80      	pop	{r7}
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	2000c2fc 	.word	0x2000c2fc

08003c40 <_exit>:

void _exit (int status)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003c48:	f04f 31ff 	mov.w	r1, #4294967295
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7ff ffe5 	bl	8003c1c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c52:	bf00      	nop
 8003c54:	e7fd      	b.n	8003c52 <_exit+0x12>

08003c56 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b086      	sub	sp, #24
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	60f8      	str	r0, [r7, #12]
 8003c5e:	60b9      	str	r1, [r7, #8]
 8003c60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c62:	2300      	movs	r3, #0
 8003c64:	617b      	str	r3, [r7, #20]
 8003c66:	e00a      	b.n	8003c7e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c68:	f3af 8000 	nop.w
 8003c6c:	4601      	mov	r1, r0
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	1c5a      	adds	r2, r3, #1
 8003c72:	60ba      	str	r2, [r7, #8]
 8003c74:	b2ca      	uxtb	r2, r1
 8003c76:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	617b      	str	r3, [r7, #20]
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	dbf0      	blt.n	8003c68 <_read+0x12>
  }

  return len;
 8003c86:	687b      	ldr	r3, [r7, #4]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3718      	adds	r7, #24
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	e009      	b.n	8003cb6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	60ba      	str	r2, [r7, #8]
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	617b      	str	r3, [r7, #20]
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	dbf1      	blt.n	8003ca2 <_write+0x12>
  }
  return len;
 8003cbe:	687b      	ldr	r3, [r7, #4]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3718      	adds	r7, #24
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <_close>:

int _close(int file)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003cd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bc80      	pop	{r7}
 8003cdc:	4770      	bx	lr

08003cde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
 8003ce6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003cee:	605a      	str	r2, [r3, #4]
  return 0;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bc80      	pop	{r7}
 8003cfa:	4770      	bx	lr

08003cfc <_isatty>:

int _isatty(int file)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003d04:	2301      	movs	r3, #1
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bc80      	pop	{r7}
 8003d0e:	4770      	bx	lr

08003d10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3714      	adds	r7, #20
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bc80      	pop	{r7}
 8003d26:	4770      	bx	lr

08003d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b087      	sub	sp, #28
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d30:	4a14      	ldr	r2, [pc, #80]	@ (8003d84 <_sbrk+0x5c>)
 8003d32:	4b15      	ldr	r3, [pc, #84]	@ (8003d88 <_sbrk+0x60>)
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d3c:	4b13      	ldr	r3, [pc, #76]	@ (8003d8c <_sbrk+0x64>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d102      	bne.n	8003d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d44:	4b11      	ldr	r3, [pc, #68]	@ (8003d8c <_sbrk+0x64>)
 8003d46:	4a12      	ldr	r2, [pc, #72]	@ (8003d90 <_sbrk+0x68>)
 8003d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d4a:	4b10      	ldr	r3, [pc, #64]	@ (8003d8c <_sbrk+0x64>)
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4413      	add	r3, r2
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d205      	bcs.n	8003d64 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8003d58:	4b0e      	ldr	r3, [pc, #56]	@ (8003d94 <_sbrk+0x6c>)
 8003d5a:	220c      	movs	r2, #12
 8003d5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d62:	e009      	b.n	8003d78 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d64:	4b09      	ldr	r3, [pc, #36]	@ (8003d8c <_sbrk+0x64>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d6a:	4b08      	ldr	r3, [pc, #32]	@ (8003d8c <_sbrk+0x64>)
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4413      	add	r3, r2
 8003d72:	4a06      	ldr	r2, [pc, #24]	@ (8003d8c <_sbrk+0x64>)
 8003d74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d76:	68fb      	ldr	r3, [r7, #12]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	371c      	adds	r7, #28
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bc80      	pop	{r7}
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	2001c000 	.word	0x2001c000
 8003d88:	00004000 	.word	0x00004000
 8003d8c:	20004c74 	.word	0x20004c74
 8003d90:	2000c310 	.word	0x2000c310
 8003d94:	2000c2fc 	.word	0x2000c2fc

08003d98 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d9c:	bf00      	nop
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bc80      	pop	{r7}
 8003da2:	4770      	bx	lr

08003da4 <pin_to_index>:
} ButtonInfo_t;

static volatile ButtonInfo_t buttons[BTN_COUNT];

static int pin_to_index(uint16_t gpio_pin)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	4603      	mov	r3, r0
 8003dac:	80fb      	strh	r3, [r7, #6]
    switch (gpio_pin) {
 8003dae:	88fb      	ldrh	r3, [r7, #6]
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	d006      	beq.n	8003dc2 <pin_to_index+0x1e>
 8003db4:	2b08      	cmp	r3, #8
 8003db6:	dc0a      	bgt.n	8003dce <pin_to_index+0x2a>
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d006      	beq.n	8003dca <pin_to_index+0x26>
 8003dbc:	2b04      	cmp	r3, #4
 8003dbe:	d002      	beq.n	8003dc6 <pin_to_index+0x22>
 8003dc0:	e005      	b.n	8003dce <pin_to_index+0x2a>
    case GPIO_PIN_3: return BTN_A;  // Изменено
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	e005      	b.n	8003dd2 <pin_to_index+0x2e>
    case GPIO_PIN_2: return BTN_B;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e003      	b.n	8003dd2 <pin_to_index+0x2e>
    case GPIO_PIN_1: return BTN_C;  // Изменено
 8003dca:	2302      	movs	r3, #2
 8003dcc:	e001      	b.n	8003dd2 <pin_to_index+0x2e>
    default: return -1;
 8003dce:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bc80      	pop	{r7}
 8003dda:	4770      	bx	lr

08003ddc <Buttons_GetState>:

ButtonState_t Buttons_GetState(ButtonId_t id)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	4603      	mov	r3, r0
 8003de4:	71fb      	strb	r3, [r7, #7]
    uint16_t pin;
    switch (id) {
 8003de6:	79fb      	ldrb	r3, [r7, #7]
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d00c      	beq.n	8003e06 <Buttons_GetState+0x2a>
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	dc0d      	bgt.n	8003e0c <Buttons_GetState+0x30>
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d002      	beq.n	8003dfa <Buttons_GetState+0x1e>
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d003      	beq.n	8003e00 <Buttons_GetState+0x24>
 8003df8:	e008      	b.n	8003e0c <Buttons_GetState+0x30>
    case BTN_A: pin = BTN_A_PIN; break;  // Теперь это правая кнопка
 8003dfa:	2308      	movs	r3, #8
 8003dfc:	81fb      	strh	r3, [r7, #14]
 8003dfe:	e007      	b.n	8003e10 <Buttons_GetState+0x34>
    case BTN_B: pin = BTN_B_PIN; break;  // Средняя
 8003e00:	2304      	movs	r3, #4
 8003e02:	81fb      	strh	r3, [r7, #14]
 8003e04:	e004      	b.n	8003e10 <Buttons_GetState+0x34>
    case BTN_C: pin = BTN_C_PIN; break;  // Теперь это левая кнопка
 8003e06:	2302      	movs	r3, #2
 8003e08:	81fb      	strh	r3, [r7, #14]
 8003e0a:	e001      	b.n	8003e10 <Buttons_GetState+0x34>
    default: return BUTTON_RELEASED;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	e00a      	b.n	8003e26 <Buttons_GetState+0x4a>
    }
    return (HAL_GPIO_ReadPin(BTN_GPIO_PORT, pin) == GPIO_PIN_SET) ?
 8003e10:	89fb      	ldrh	r3, [r7, #14]
 8003e12:	4619      	mov	r1, r3
 8003e14:	4806      	ldr	r0, [pc, #24]	@ (8003e30 <Buttons_GetState+0x54>)
 8003e16:	f005 f98b 	bl	8009130 <HAL_GPIO_ReadPin>
 8003e1a:	4603      	mov	r3, r0
            BUTTON_PRESSED : BUTTON_RELEASED;
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	bf0c      	ite	eq
 8003e20:	2301      	moveq	r3, #1
 8003e22:	2300      	movne	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	40020c00 	.word	0x40020c00

08003e34 <Buttons_Init>:

void Buttons_SetDebounceMs(uint32_t ms) { debounce_ms = ms; }
void Buttons_SetLongPressMs(uint32_t ms) { longpress_ms = ms; }

void Buttons_Init(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
    for (int i = 0; i < BTN_COUNT; ++i) {
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	607b      	str	r3, [r7, #4]
 8003e3e:	e03d      	b.n	8003ebc <Buttons_Init+0x88>
        buttons[i].last_tick = 0;
 8003e40:	4923      	ldr	r1, [pc, #140]	@ (8003ed0 <Buttons_Init+0x9c>)
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	4613      	mov	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4413      	add	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	440b      	add	r3, r1
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]
        buttons[i].press_start = 0;
 8003e52:	491f      	ldr	r1, [pc, #124]	@ (8003ed0 <Buttons_Init+0x9c>)
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	4613      	mov	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4413      	add	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	440b      	add	r3, r1
 8003e60:	3304      	adds	r3, #4
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]
        buttons[i].state = BUTTON_RELEASED;
 8003e66:	491a      	ldr	r1, [pc, #104]	@ (8003ed0 <Buttons_Init+0x9c>)
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4413      	add	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	440b      	add	r3, r1
 8003e74:	3308      	adds	r3, #8
 8003e76:	2200      	movs	r2, #0
 8003e78:	701a      	strb	r2, [r3, #0]
        buttons[i].callback = NULL;
 8003e7a:	4915      	ldr	r1, [pc, #84]	@ (8003ed0 <Buttons_Init+0x9c>)
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4413      	add	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	440b      	add	r3, r1
 8003e88:	330c      	adds	r3, #12
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	601a      	str	r2, [r3, #0]
        buttons[i].long30_reported = 0;
 8003e8e:	4910      	ldr	r1, [pc, #64]	@ (8003ed0 <Buttons_Init+0x9c>)
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	4613      	mov	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4413      	add	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	440b      	add	r3, r1
 8003e9c:	3310      	adds	r3, #16
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	701a      	strb	r2, [r3, #0]
        buttons[i].long60_reported = 0;
 8003ea2:	490b      	ldr	r1, [pc, #44]	@ (8003ed0 <Buttons_Init+0x9c>)
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	440b      	add	r3, r1
 8003eb0:	3311      	adds	r3, #17
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < BTN_COUNT; ++i) {
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	607b      	str	r3, [r7, #4]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	ddbe      	ble.n	8003e40 <Buttons_Init+0xc>
    }
}
 8003ec2:	bf00      	nop
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bc80      	pop	{r7}
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	20004c78 	.word	0x20004c78

08003ed4 <Buttons_EXTI_Handle>:
        buttons[id].callback = callback;
    }
}

void Buttons_EXTI_Handle(uint16_t GPIO_Pin)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	4603      	mov	r3, r0
 8003edc:	80fb      	strh	r3, [r7, #6]
    int idx = pin_to_index(GPIO_Pin);
 8003ede:	88fb      	ldrh	r3, [r7, #6]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7ff ff5f 	bl	8003da4 <pin_to_index>
 8003ee6:	6178      	str	r0, [r7, #20]
    if (idx < 0) return;
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f2c0 809f 	blt.w	800402e <Buttons_EXTI_Handle+0x15a>

    uint32_t now = HAL_GetTick();
 8003ef0:	f002 fb2a 	bl	8006548 <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

    if ((now - buttons[idx].last_tick) < debounce_ms) return;
 8003ef6:	4951      	ldr	r1, [pc, #324]	@ (800403c <Buttons_EXTI_Handle+0x168>)
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	4613      	mov	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4413      	add	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	440b      	add	r3, r1
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	1ad2      	subs	r2, r2, r3
 8003f0a:	4b4d      	ldr	r3, [pc, #308]	@ (8004040 <Buttons_EXTI_Handle+0x16c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	f0c0 808f 	bcc.w	8004032 <Buttons_EXTI_Handle+0x15e>
    buttons[idx].last_tick = now;
 8003f14:	4949      	ldr	r1, [pc, #292]	@ (800403c <Buttons_EXTI_Handle+0x168>)
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	440b      	add	r3, r1
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	601a      	str	r2, [r3, #0]

    ButtonState_t cur = Buttons_GetState((ButtonId_t)idx);
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff ff56 	bl	8003ddc <Buttons_GetState>
 8003f30:	4603      	mov	r3, r0
 8003f32:	73fb      	strb	r3, [r7, #15]

    if (cur != buttons[idx].state) {
 8003f34:	4941      	ldr	r1, [pc, #260]	@ (800403c <Buttons_EXTI_Handle+0x168>)
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4413      	add	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	440b      	add	r3, r1
 8003f42:	3308      	adds	r3, #8
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	7bfa      	ldrb	r2, [r7, #15]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d072      	beq.n	8004034 <Buttons_EXTI_Handle+0x160>
        buttons[idx].state = cur;
 8003f4e:	493b      	ldr	r1, [pc, #236]	@ (800403c <Buttons_EXTI_Handle+0x168>)
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	4613      	mov	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	440b      	add	r3, r1
 8003f5c:	3308      	adds	r3, #8
 8003f5e:	7bfa      	ldrb	r2, [r7, #15]
 8003f60:	701a      	strb	r2, [r3, #0]

        if (cur == BUTTON_PRESSED) {
 8003f62:	7bfb      	ldrb	r3, [r7, #15]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d11e      	bne.n	8003fa6 <Buttons_EXTI_Handle+0xd2>
            buttons[idx].press_start = now;
 8003f68:	4934      	ldr	r1, [pc, #208]	@ (800403c <Buttons_EXTI_Handle+0x168>)
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4413      	add	r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	440b      	add	r3, r1
 8003f76:	3304      	adds	r3, #4
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	601a      	str	r2, [r3, #0]
            buttons[idx].long30_reported = 0;
 8003f7c:	492f      	ldr	r1, [pc, #188]	@ (800403c <Buttons_EXTI_Handle+0x168>)
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	4613      	mov	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	440b      	add	r3, r1
 8003f8a:	3310      	adds	r3, #16
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	701a      	strb	r2, [r3, #0]
            buttons[idx].long60_reported = 0;
 8003f90:	492a      	ldr	r1, [pc, #168]	@ (800403c <Buttons_EXTI_Handle+0x168>)
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	4613      	mov	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4413      	add	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	440b      	add	r3, r1
 8003f9e:	3311      	adds	r3, #17
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	701a      	strb	r2, [r3, #0]
 8003fa4:	e046      	b.n	8004034 <Buttons_EXTI_Handle+0x160>
        } else {
            /* Отпускание */
            uint32_t dur = now - buttons[idx].press_start;
 8003fa6:	4925      	ldr	r1, [pc, #148]	@ (800403c <Buttons_EXTI_Handle+0x168>)
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	4613      	mov	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4413      	add	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	440b      	add	r3, r1
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	60bb      	str	r3, [r7, #8]
            if (buttons[idx].callback) {
 8003fbe:	491f      	ldr	r1, [pc, #124]	@ (800403c <Buttons_EXTI_Handle+0x168>)
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4413      	add	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	440b      	add	r3, r1
 8003fcc:	330c      	adds	r3, #12
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d02f      	beq.n	8004034 <Buttons_EXTI_Handle+0x160>
                if (dur >= longpress_ms && dur < LONG30_MS) {
 8003fd4:	4b1b      	ldr	r3, [pc, #108]	@ (8004044 <Buttons_EXTI_Handle+0x170>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d313      	bcc.n	8004006 <Buttons_EXTI_Handle+0x132>
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	f247 522f 	movw	r2, #29999	@ 0x752f
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d80e      	bhi.n	8004006 <Buttons_EXTI_Handle+0x132>
                    buttons[idx].callback((ButtonId_t)idx, BTN_EVENT_LONG);
 8003fe8:	4914      	ldr	r1, [pc, #80]	@ (800403c <Buttons_EXTI_Handle+0x168>)
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	4613      	mov	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4413      	add	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	330c      	adds	r3, #12
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	b2d2      	uxtb	r2, r2
 8003ffe:	2101      	movs	r1, #1
 8004000:	4610      	mov	r0, r2
 8004002:	4798      	blx	r3
 8004004:	e016      	b.n	8004034 <Buttons_EXTI_Handle+0x160>
                } else if (dur < longpress_ms) {
 8004006:	4b0f      	ldr	r3, [pc, #60]	@ (8004044 <Buttons_EXTI_Handle+0x170>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	429a      	cmp	r2, r3
 800400e:	d211      	bcs.n	8004034 <Buttons_EXTI_Handle+0x160>
                    buttons[idx].callback((ButtonId_t)idx, BTN_EVENT_SHORT);
 8004010:	490a      	ldr	r1, [pc, #40]	@ (800403c <Buttons_EXTI_Handle+0x168>)
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	4613      	mov	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	440b      	add	r3, r1
 800401e:	330c      	adds	r3, #12
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	b2d2      	uxtb	r2, r2
 8004026:	2100      	movs	r1, #0
 8004028:	4610      	mov	r0, r2
 800402a:	4798      	blx	r3
 800402c:	e002      	b.n	8004034 <Buttons_EXTI_Handle+0x160>
    if (idx < 0) return;
 800402e:	bf00      	nop
 8004030:	e000      	b.n	8004034 <Buttons_EXTI_Handle+0x160>
    if ((now - buttons[idx].last_tick) < debounce_ms) return;
 8004032:	bf00      	nop
                }
                /* Если удержали >30 или >60 — событие уже сработало в Task */
            }
        }
    }
}
 8004034:	3718      	adds	r7, #24
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	20004c78 	.word	0x20004c78
 8004040:	20000078 	.word	0x20000078
 8004044:	2000007c 	.word	0x2000007c

08004048 <HAL_GPIO_EXTI_Callback>:
    }
}

/* вызывать из stm32f2xx_it.c */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	4603      	mov	r3, r0
 8004050:	80fb      	strh	r3, [r7, #6]
    Buttons_EXTI_Handle(GPIO_Pin);
 8004052:	88fb      	ldrh	r3, [r7, #6]
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff ff3d 	bl	8003ed4 <Buttons_EXTI_Handle>
}
 800405a:	bf00      	nop
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
	...

08004064 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004068:	f3bf 8f4f 	dsb	sy
}
 800406c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800406e:	4b06      	ldr	r3, [pc, #24]	@ (8004088 <__NVIC_SystemReset+0x24>)
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004076:	4904      	ldr	r1, [pc, #16]	@ (8004088 <__NVIC_SystemReset+0x24>)
 8004078:	4b04      	ldr	r3, [pc, #16]	@ (800408c <__NVIC_SystemReset+0x28>)
 800407a:	4313      	orrs	r3, r2
 800407c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800407e:	f3bf 8f4f 	dsb	sy
}
 8004082:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004084:	bf00      	nop
 8004086:	e7fd      	b.n	8004084 <__NVIC_SystemReset+0x20>
 8004088:	e000ed00 	.word	0xe000ed00
 800408c:	05fa0004 	.word	0x05fa0004

08004090 <OLED_ShowCurrentPage>:


// Добавим глобальную переменную для текущей страницы
int current_page = 0; // 0 = AB page, 1 = NETINFO page

void OLED_ShowCurrentPage(void) {
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 8004094:	2000      	movs	r0, #0
 8004096:	f001 fed9 	bl	8005e4c <ssd1306_Fill>

    switch (current_page) {
 800409a:	4b0d      	ldr	r3, [pc, #52]	@ (80040d0 <OLED_ShowCurrentPage+0x40>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d002      	beq.n	80040a8 <OLED_ShowCurrentPage+0x18>
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d003      	beq.n	80040ae <OLED_ShowCurrentPage+0x1e>
 80040a6:	e008      	b.n	80040ba <OLED_ShowCurrentPage+0x2a>
        case 0:
            OLED_DrawABPage();
 80040a8:	f000 fa8a 	bl	80045c0 <OLED_DrawABPage>
            break;
 80040ac:	e00b      	b.n	80040c6 <OLED_ShowCurrentPage+0x36>
        case 1:
            OLED_DrawNetInfo(&gnetif, 0, 0);
 80040ae:	2200      	movs	r2, #0
 80040b0:	2100      	movs	r1, #0
 80040b2:	4808      	ldr	r0, [pc, #32]	@ (80040d4 <OLED_ShowCurrentPage+0x44>)
 80040b4:	f000 fc7a 	bl	80049ac <OLED_DrawNetInfo>
            break;
 80040b8:	e005      	b.n	80040c6 <OLED_ShowCurrentPage+0x36>
        default:
            current_page = 0;
 80040ba:	4b05      	ldr	r3, [pc, #20]	@ (80040d0 <OLED_ShowCurrentPage+0x40>)
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]
            OLED_DrawABPage();
 80040c0:	f000 fa7e 	bl	80045c0 <OLED_DrawABPage>
            break;
 80040c4:	bf00      	nop
    }

    ssd1306_UpdateScreen();
 80040c6:	f001 fed9 	bl	8005e7c <ssd1306_UpdateScreen>
}
 80040ca:	bf00      	nop
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	20004cc0 	.word	0x20004cc0
 80040d4:	20005124 	.word	0x20005124

080040d8 <Buttons_Process>:

void Buttons_Process(void) {
 80040d8:	b580      	push	{r7, lr}
 80040da:	b088      	sub	sp, #32
 80040dc:	af00      	add	r7, sp, #0
    static uint32_t btn1_last_action = 0;
    static uint32_t btn3_last_action = 0;
    static uint8_t btn1_held = 0;
    static uint8_t btn3_held = 0;

    uint32_t now = HAL_GetTick();
 80040de:	f002 fa33 	bl	8006548 <HAL_GetTick>
 80040e2:	6138      	str	r0, [r7, #16]

    // ---- Если меню Settings активно ----
    if (settings_active) {
 80040e4:	4b95      	ldr	r3, [pc, #596]	@ (800433c <Buttons_Process+0x264>)
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 80c5 	beq.w	8004278 <Buttons_Process+0x1a0>
        int any_pressed = 0;
 80040ee:	2300      	movs	r3, #0
 80040f0:	61fb      	str	r3, [r7, #28]

        // Обработка кнопки 3 (ПРАВАЯ кнопка - ВВЕРХ)
        if (HAL_GPIO_ReadPin(BTN_PORT, BTN3_PIN) == GPIO_PIN_RESET) {
 80040f2:	2108      	movs	r1, #8
 80040f4:	4892      	ldr	r0, [pc, #584]	@ (8004340 <Buttons_Process+0x268>)
 80040f6:	f005 f81b 	bl	8009130 <HAL_GPIO_ReadPin>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d13c      	bne.n	800417a <Buttons_Process+0xa2>
            if (!btn3_held) {
 8004100:	4b90      	ldr	r3, [pc, #576]	@ (8004344 <Buttons_Process+0x26c>)
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10a      	bne.n	800411e <Buttons_Process+0x46>
                // Первое нажатие
                btn3_held = 1;
 8004108:	4b8e      	ldr	r3, [pc, #568]	@ (8004344 <Buttons_Process+0x26c>)
 800410a:	2201      	movs	r2, #1
 800410c:	701a      	strb	r2, [r3, #0]
                btn3_last_action = now;
 800410e:	4a8e      	ldr	r2, [pc, #568]	@ (8004348 <Buttons_Process+0x270>)
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	6013      	str	r3, [r2, #0]
                OLED_Settings_MoveUp();
 8004114:	f001 fb92 	bl	800583c <OLED_Settings_MoveUp>
                any_pressed = 1;
 8004118:	2301      	movs	r3, #1
 800411a:	61fb      	str	r3, [r7, #28]
 800411c:	e030      	b.n	8004180 <Buttons_Process+0xa8>
            } else {
                // Удержание - быстрое изменение с ускорением
                uint32_t hold_time = now - btn3_last_action;
 800411e:	4b8a      	ldr	r3, [pc, #552]	@ (8004348 <Buttons_Process+0x270>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	607b      	str	r3, [r7, #4]
                uint32_t delay_ms;

                if (hold_time > 5000) {
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800412e:	4293      	cmp	r3, r2
 8004130:	d902      	bls.n	8004138 <Buttons_Process+0x60>
                    delay_ms = 20;
 8004132:	2314      	movs	r3, #20
 8004134:	61bb      	str	r3, [r7, #24]
 8004136:	e011      	b.n	800415c <Buttons_Process+0x84>
                } else if (hold_time > 3000) {
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800413e:	4293      	cmp	r3, r2
 8004140:	d902      	bls.n	8004148 <Buttons_Process+0x70>
                    delay_ms = 50;
 8004142:	2332      	movs	r3, #50	@ 0x32
 8004144:	61bb      	str	r3, [r7, #24]
 8004146:	e009      	b.n	800415c <Buttons_Process+0x84>
                } else if (hold_time > 1000) {
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800414e:	d902      	bls.n	8004156 <Buttons_Process+0x7e>
                    delay_ms = 100;
 8004150:	2364      	movs	r3, #100	@ 0x64
 8004152:	61bb      	str	r3, [r7, #24]
 8004154:	e002      	b.n	800415c <Buttons_Process+0x84>
                } else {
                    delay_ms = 300;
 8004156:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800415a:	61bb      	str	r3, [r7, #24]
                }

                if (now - btn3_last_action > delay_ms) {
 800415c:	4b7a      	ldr	r3, [pc, #488]	@ (8004348 <Buttons_Process+0x270>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	429a      	cmp	r2, r3
 8004168:	d20a      	bcs.n	8004180 <Buttons_Process+0xa8>
                    OLED_Settings_MoveUp();
 800416a:	f001 fb67 	bl	800583c <OLED_Settings_MoveUp>
                    btn3_last_action = now;
 800416e:	4a76      	ldr	r2, [pc, #472]	@ (8004348 <Buttons_Process+0x270>)
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	6013      	str	r3, [r2, #0]
                    any_pressed = 1;
 8004174:	2301      	movs	r3, #1
 8004176:	61fb      	str	r3, [r7, #28]
 8004178:	e002      	b.n	8004180 <Buttons_Process+0xa8>
                }
            }
        } else {
            btn3_held = 0;
 800417a:	4b72      	ldr	r3, [pc, #456]	@ (8004344 <Buttons_Process+0x26c>)
 800417c:	2200      	movs	r2, #0
 800417e:	701a      	strb	r2, [r3, #0]
        }

        // Обработка кнопки 1 (ЛЕВАЯ кнопка - ВНИЗ)
        if (HAL_GPIO_ReadPin(BTN_PORT, BTN1_PIN) == GPIO_PIN_RESET) {
 8004180:	2102      	movs	r1, #2
 8004182:	486f      	ldr	r0, [pc, #444]	@ (8004340 <Buttons_Process+0x268>)
 8004184:	f004 ffd4 	bl	8009130 <HAL_GPIO_ReadPin>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d13c      	bne.n	8004208 <Buttons_Process+0x130>
            if (!btn1_held) {
 800418e:	4b6f      	ldr	r3, [pc, #444]	@ (800434c <Buttons_Process+0x274>)
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10a      	bne.n	80041ac <Buttons_Process+0xd4>
                // Первое нажатие
                btn1_held = 1;
 8004196:	4b6d      	ldr	r3, [pc, #436]	@ (800434c <Buttons_Process+0x274>)
 8004198:	2201      	movs	r2, #1
 800419a:	701a      	strb	r2, [r3, #0]
                btn1_last_action = now;
 800419c:	4a6c      	ldr	r2, [pc, #432]	@ (8004350 <Buttons_Process+0x278>)
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	6013      	str	r3, [r2, #0]
                OLED_Settings_MoveDown();
 80041a2:	f001 fb81 	bl	80058a8 <OLED_Settings_MoveDown>
                any_pressed = 1;
 80041a6:	2301      	movs	r3, #1
 80041a8:	61fb      	str	r3, [r7, #28]
 80041aa:	e030      	b.n	800420e <Buttons_Process+0x136>
            } else {
                // Удержание - быстрое изменение с ускорением
                uint32_t hold_time = now - btn1_last_action;
 80041ac:	4b68      	ldr	r3, [pc, #416]	@ (8004350 <Buttons_Process+0x278>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	603b      	str	r3, [r7, #0]
                uint32_t delay_ms;

                if (hold_time > 5000) {
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041bc:	4293      	cmp	r3, r2
 80041be:	d902      	bls.n	80041c6 <Buttons_Process+0xee>
                    delay_ms = 20;
 80041c0:	2314      	movs	r3, #20
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	e011      	b.n	80041ea <Buttons_Process+0x112>
                } else if (hold_time > 3000) {
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d902      	bls.n	80041d6 <Buttons_Process+0xfe>
                    delay_ms = 50;
 80041d0:	2332      	movs	r3, #50	@ 0x32
 80041d2:	617b      	str	r3, [r7, #20]
 80041d4:	e009      	b.n	80041ea <Buttons_Process+0x112>
                } else if (hold_time > 1000) {
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80041dc:	d902      	bls.n	80041e4 <Buttons_Process+0x10c>
                    delay_ms = 100;
 80041de:	2364      	movs	r3, #100	@ 0x64
 80041e0:	617b      	str	r3, [r7, #20]
 80041e2:	e002      	b.n	80041ea <Buttons_Process+0x112>
                } else {
                    delay_ms = 300;
 80041e4:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80041e8:	617b      	str	r3, [r7, #20]
                }

                if (now - btn1_last_action > delay_ms) {
 80041ea:	4b59      	ldr	r3, [pc, #356]	@ (8004350 <Buttons_Process+0x278>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d20a      	bcs.n	800420e <Buttons_Process+0x136>
                    OLED_Settings_MoveDown();
 80041f8:	f001 fb56 	bl	80058a8 <OLED_Settings_MoveDown>
                    btn1_last_action = now;
 80041fc:	4a54      	ldr	r2, [pc, #336]	@ (8004350 <Buttons_Process+0x278>)
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	6013      	str	r3, [r2, #0]
                    any_pressed = 1;
 8004202:	2301      	movs	r3, #1
 8004204:	61fb      	str	r3, [r7, #28]
 8004206:	e002      	b.n	800420e <Buttons_Process+0x136>
                }
            }
        } else {
            btn1_held = 0;
 8004208:	4b50      	ldr	r3, [pc, #320]	@ (800434c <Buttons_Process+0x274>)
 800420a:	2200      	movs	r2, #0
 800420c:	701a      	strb	r2, [r3, #0]
        }

        // Обработка кнопки 2 (Выбор)
        if (HAL_GPIO_ReadPin(BTN_PORT, BTN2_PIN) == GPIO_PIN_RESET) {
 800420e:	2104      	movs	r1, #4
 8004210:	484b      	ldr	r0, [pc, #300]	@ (8004340 <Buttons_Process+0x268>)
 8004212:	f004 ff8d 	bl	8009130 <HAL_GPIO_ReadPin>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d118      	bne.n	800424e <Buttons_Process+0x176>
            HAL_Delay(50);
 800421c:	2032      	movs	r0, #50	@ 0x32
 800421e:	f002 f99d 	bl	800655c <HAL_Delay>
            if (HAL_GPIO_ReadPin(BTN_PORT, BTN2_PIN) == GPIO_PIN_RESET) {
 8004222:	2104      	movs	r1, #4
 8004224:	4846      	ldr	r0, [pc, #280]	@ (8004340 <Buttons_Process+0x268>)
 8004226:	f004 ff83 	bl	8009130 <HAL_GPIO_ReadPin>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10e      	bne.n	800424e <Buttons_Process+0x176>
                OLED_Settings_Select();
 8004230:	f001 fb72 	bl	8005918 <OLED_Settings_Select>
                // Ждем отпускания кнопки
                while (HAL_GPIO_ReadPin(BTN_PORT, BTN2_PIN) == GPIO_PIN_RESET) {
 8004234:	e002      	b.n	800423c <Buttons_Process+0x164>
                    HAL_Delay(10);
 8004236:	200a      	movs	r0, #10
 8004238:	f002 f990 	bl	800655c <HAL_Delay>
                while (HAL_GPIO_ReadPin(BTN_PORT, BTN2_PIN) == GPIO_PIN_RESET) {
 800423c:	2104      	movs	r1, #4
 800423e:	4840      	ldr	r0, [pc, #256]	@ (8004340 <Buttons_Process+0x268>)
 8004240:	f004 ff76 	bl	8009130 <HAL_GPIO_ReadPin>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0f5      	beq.n	8004236 <Buttons_Process+0x15e>
                }
                any_pressed = 1;
 800424a:	2301      	movs	r3, #1
 800424c:	61fb      	str	r3, [r7, #28]
            }
        }

        // Обновляем таймер последней активности
        if (any_pressed) settings_last_activity = now;
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d002      	beq.n	800425a <Buttons_Process+0x182>
 8004254:	4a3f      	ldr	r2, [pc, #252]	@ (8004354 <Buttons_Process+0x27c>)
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	6013      	str	r3, [r2, #0]

        // Если прошло 10 секунд без действий → выход из настроек
        if ((now - settings_last_activity) >= 10000) {
 800425a:	4b3e      	ldr	r3, [pc, #248]	@ (8004354 <Buttons_Process+0x27c>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	f242 720f 	movw	r2, #9999	@ 0x270f
 8004266:	4293      	cmp	r3, r2
 8004268:	f240 80c9 	bls.w	80043fe <Buttons_Process+0x326>
            settings_active = 0;
 800426c:	4b33      	ldr	r3, [pc, #204]	@ (800433c <Buttons_Process+0x264>)
 800426e:	2200      	movs	r2, #0
 8004270:	701a      	strb	r2, [r3, #0]
            OLED_DrawABPage();
 8004272:	f000 f9a5 	bl	80045c0 <OLED_DrawABPage>
        }

        return;
 8004276:	e0c2      	b.n	80043fe <Buttons_Process+0x326>
    }

    // ---- Режим обычного переключения страниц ----
    if (HAL_GPIO_ReadPin(BTN_PORT, BTN3_PIN) == GPIO_PIN_RESET) {  // Правая кнопка = предыдущая страница
 8004278:	2108      	movs	r1, #8
 800427a:	4831      	ldr	r0, [pc, #196]	@ (8004340 <Buttons_Process+0x268>)
 800427c:	f004 ff58 	bl	8009130 <HAL_GPIO_ReadPin>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d11f      	bne.n	80042c6 <Buttons_Process+0x1ee>
        HAL_Delay(200);
 8004286:	20c8      	movs	r0, #200	@ 0xc8
 8004288:	f002 f968 	bl	800655c <HAL_Delay>
        if (HAL_GPIO_ReadPin(BTN_PORT, BTN3_PIN) == GPIO_PIN_RESET) {
 800428c:	2108      	movs	r1, #8
 800428e:	482c      	ldr	r0, [pc, #176]	@ (8004340 <Buttons_Process+0x268>)
 8004290:	f004 ff4e 	bl	8009130 <HAL_GPIO_ReadPin>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d115      	bne.n	80042c6 <Buttons_Process+0x1ee>
            current_page--;
 800429a:	4b2f      	ldr	r3, [pc, #188]	@ (8004358 <Buttons_Process+0x280>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	3b01      	subs	r3, #1
 80042a0:	4a2d      	ldr	r2, [pc, #180]	@ (8004358 <Buttons_Process+0x280>)
 80042a2:	6013      	str	r3, [r2, #0]
            if (current_page < 0) current_page = 1;
 80042a4:	4b2c      	ldr	r3, [pc, #176]	@ (8004358 <Buttons_Process+0x280>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	da02      	bge.n	80042b2 <Buttons_Process+0x1da>
 80042ac:	4b2a      	ldr	r3, [pc, #168]	@ (8004358 <Buttons_Process+0x280>)
 80042ae:	2201      	movs	r2, #1
 80042b0:	601a      	str	r2, [r3, #0]
            OLED_ShowCurrentPage();
 80042b2:	f7ff feed 	bl	8004090 <OLED_ShowCurrentPage>
            while (HAL_GPIO_ReadPin(BTN_PORT, BTN3_PIN) == GPIO_PIN_RESET);
 80042b6:	bf00      	nop
 80042b8:	2108      	movs	r1, #8
 80042ba:	4821      	ldr	r0, [pc, #132]	@ (8004340 <Buttons_Process+0x268>)
 80042bc:	f004 ff38 	bl	8009130 <HAL_GPIO_ReadPin>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d0f8      	beq.n	80042b8 <Buttons_Process+0x1e0>
        }
    }

    if (HAL_GPIO_ReadPin(BTN_PORT, BTN1_PIN) == GPIO_PIN_RESET) {  // Левая кнопка = следующая страница
 80042c6:	2102      	movs	r1, #2
 80042c8:	481d      	ldr	r0, [pc, #116]	@ (8004340 <Buttons_Process+0x268>)
 80042ca:	f004 ff31 	bl	8009130 <HAL_GPIO_ReadPin>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d11f      	bne.n	8004314 <Buttons_Process+0x23c>
        HAL_Delay(200);
 80042d4:	20c8      	movs	r0, #200	@ 0xc8
 80042d6:	f002 f941 	bl	800655c <HAL_Delay>
        if (HAL_GPIO_ReadPin(BTN_PORT, BTN1_PIN) == GPIO_PIN_RESET) {
 80042da:	2102      	movs	r1, #2
 80042dc:	4818      	ldr	r0, [pc, #96]	@ (8004340 <Buttons_Process+0x268>)
 80042de:	f004 ff27 	bl	8009130 <HAL_GPIO_ReadPin>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d115      	bne.n	8004314 <Buttons_Process+0x23c>
            current_page++;
 80042e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004358 <Buttons_Process+0x280>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	3301      	adds	r3, #1
 80042ee:	4a1a      	ldr	r2, [pc, #104]	@ (8004358 <Buttons_Process+0x280>)
 80042f0:	6013      	str	r3, [r2, #0]
            if (current_page > 1) current_page = 0;
 80042f2:	4b19      	ldr	r3, [pc, #100]	@ (8004358 <Buttons_Process+0x280>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	dd02      	ble.n	8004300 <Buttons_Process+0x228>
 80042fa:	4b17      	ldr	r3, [pc, #92]	@ (8004358 <Buttons_Process+0x280>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	601a      	str	r2, [r3, #0]
            OLED_ShowCurrentPage();
 8004300:	f7ff fec6 	bl	8004090 <OLED_ShowCurrentPage>
            while (HAL_GPIO_ReadPin(BTN_PORT, BTN1_PIN) == GPIO_PIN_RESET);
 8004304:	bf00      	nop
 8004306:	2102      	movs	r1, #2
 8004308:	480d      	ldr	r0, [pc, #52]	@ (8004340 <Buttons_Process+0x268>)
 800430a:	f004 ff11 	bl	8009130 <HAL_GPIO_ReadPin>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d0f8      	beq.n	8004306 <Buttons_Process+0x22e>
        }
    }

    // ---- Кнопка 2 (Settings / RESET) ----
    if (HAL_GPIO_ReadPin(BTN_PORT, BTN2_PIN) == GPIO_PIN_RESET) {
 8004314:	2104      	movs	r1, #4
 8004316:	480a      	ldr	r0, [pc, #40]	@ (8004340 <Buttons_Process+0x268>)
 8004318:	f004 ff0a 	bl	8009130 <HAL_GPIO_ReadPin>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d146      	bne.n	80043b0 <Buttons_Process+0x2d8>
        if (!btn2_held) {
 8004322:	4b0e      	ldr	r3, [pc, #56]	@ (800435c <Buttons_Process+0x284>)
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d11c      	bne.n	8004364 <Buttons_Process+0x28c>
            btn2_held = 1;
 800432a:	4b0c      	ldr	r3, [pc, #48]	@ (800435c <Buttons_Process+0x284>)
 800432c:	2201      	movs	r2, #1
 800432e:	701a      	strb	r2, [r3, #0]
            btn2_press_time = HAL_GetTick();
 8004330:	f002 f90a 	bl	8006548 <HAL_GetTick>
 8004334:	4603      	mov	r3, r0
 8004336:	4a0a      	ldr	r2, [pc, #40]	@ (8004360 <Buttons_Process+0x288>)
 8004338:	6013      	str	r3, [r2, #0]
 800433a:	e061      	b.n	8004400 <Buttons_Process+0x328>
 800433c:	20004cb4 	.word	0x20004cb4
 8004340:	40020c00 	.word	0x40020c00
 8004344:	20004cc4 	.word	0x20004cc4
 8004348:	20004cc8 	.word	0x20004cc8
 800434c:	20004ccc 	.word	0x20004ccc
 8004350:	20004cd0 	.word	0x20004cd0
 8004354:	20004cd4 	.word	0x20004cd4
 8004358:	20004cc0 	.word	0x20004cc0
 800435c:	20004cbc 	.word	0x20004cbc
 8004360:	20004cb8 	.word	0x20004cb8
        } else {
            uint32_t held_time = (HAL_GetTick() - btn2_press_time) / 1000;
 8004364:	f002 f8f0 	bl	8006548 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	4b27      	ldr	r3, [pc, #156]	@ (8004408 <Buttons_Process+0x330>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	4a26      	ldr	r2, [pc, #152]	@ (800440c <Buttons_Process+0x334>)
 8004372:	fba2 2303 	umull	r2, r3, r2, r3
 8004376:	099b      	lsrs	r3, r3, #6
 8004378:	60bb      	str	r3, [r7, #8]

            if (held_time >= 60) {
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	2b3b      	cmp	r3, #59	@ 0x3b
 800437e:	d912      	bls.n	80043a6 <Buttons_Process+0x2ce>
                // HARD RESET через IWDG
                IWDG->KR = 0x5555;
 8004380:	4b23      	ldr	r3, [pc, #140]	@ (8004410 <Buttons_Process+0x338>)
 8004382:	f245 5255 	movw	r2, #21845	@ 0x5555
 8004386:	601a      	str	r2, [r3, #0]
                IWDG->PR = 0;
 8004388:	4b21      	ldr	r3, [pc, #132]	@ (8004410 <Buttons_Process+0x338>)
 800438a:	2200      	movs	r2, #0
 800438c:	605a      	str	r2, [r3, #4]
                IWDG->RLR = 10;
 800438e:	4b20      	ldr	r3, [pc, #128]	@ (8004410 <Buttons_Process+0x338>)
 8004390:	220a      	movs	r2, #10
 8004392:	609a      	str	r2, [r3, #8]
                IWDG->KR = 0xAAAA;
 8004394:	4b1e      	ldr	r3, [pc, #120]	@ (8004410 <Buttons_Process+0x338>)
 8004396:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800439a:	601a      	str	r2, [r3, #0]
                IWDG->KR = 0xCCCC;
 800439c:	4b1c      	ldr	r3, [pc, #112]	@ (8004410 <Buttons_Process+0x338>)
 800439e:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	e02c      	b.n	8004400 <Buttons_Process+0x328>
            } else if (held_time >= 30) {
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	2b1d      	cmp	r3, #29
 80043aa:	d929      	bls.n	8004400 <Buttons_Process+0x328>
                // SOFT RESET
                NVIC_SystemReset();
 80043ac:	f7ff fe5a 	bl	8004064 <__NVIC_SystemReset>
            }
        }
    } else {
        if (btn2_held) {
 80043b0:	4b18      	ldr	r3, [pc, #96]	@ (8004414 <Buttons_Process+0x33c>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d01e      	beq.n	80043f6 <Buttons_Process+0x31e>
            uint32_t press_time = (HAL_GetTick() - btn2_press_time);
 80043b8:	f002 f8c6 	bl	8006548 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	4b12      	ldr	r3, [pc, #72]	@ (8004408 <Buttons_Process+0x330>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	60fb      	str	r3, [r7, #12]
            if (press_time < 1000) {
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80043cc:	d213      	bcs.n	80043f6 <Buttons_Process+0x31e>
                // Короткое нажатие → открыть/закрыть Settings
                if (!settings_active) {
 80043ce:	4b12      	ldr	r3, [pc, #72]	@ (8004418 <Buttons_Process+0x340>)
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10a      	bne.n	80043ec <Buttons_Process+0x314>
                    settings_active = 1;
 80043d6:	4b10      	ldr	r3, [pc, #64]	@ (8004418 <Buttons_Process+0x340>)
 80043d8:	2201      	movs	r2, #1
 80043da:	701a      	strb	r2, [r3, #0]
                    OLED_Settings_Init();
 80043dc:	f000 fbd2 	bl	8004b84 <OLED_Settings_Init>
                    settings_last_activity = HAL_GetTick();
 80043e0:	f002 f8b2 	bl	8006548 <HAL_GetTick>
 80043e4:	4603      	mov	r3, r0
 80043e6:	4a0d      	ldr	r2, [pc, #52]	@ (800441c <Buttons_Process+0x344>)
 80043e8:	6013      	str	r3, [r2, #0]
 80043ea:	e004      	b.n	80043f6 <Buttons_Process+0x31e>
                } else {
                    settings_active = 0;
 80043ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004418 <Buttons_Process+0x340>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	701a      	strb	r2, [r3, #0]
                    OLED_DrawABPage();
 80043f2:	f000 f8e5 	bl	80045c0 <OLED_DrawABPage>
                }
            }
        }
        btn2_held = 0;
 80043f6:	4b07      	ldr	r3, [pc, #28]	@ (8004414 <Buttons_Process+0x33c>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	701a      	strb	r2, [r3, #0]
 80043fc:	e000      	b.n	8004400 <Buttons_Process+0x328>
        return;
 80043fe:	bf00      	nop
    }
}
 8004400:	3720      	adds	r7, #32
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	20004cb8 	.word	0x20004cb8
 800440c:	10624dd3 	.word	0x10624dd3
 8004410:	40003000 	.word	0x40003000
 8004414:	20004cbc 	.word	0x20004cbc
 8004418:	20004cb4 	.word	0x20004cb4
 800441c:	20004cd4 	.word	0x20004cd4

08004420 <draw_cross>:
extern float current;

/* --- Вспомогательные функции --- */

/* Рисует крест поверх круга */
static void draw_cross(int cx, int cy, int r) {
 8004420:	b590      	push	{r4, r7, lr}
 8004422:	b089      	sub	sp, #36	@ 0x24
 8004424:	af02      	add	r7, sp, #8
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
    int d = (int)(r * 0.65f);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f7fc fc7b 	bl	8000d28 <__aeabi_i2f>
 8004432:	4603      	mov	r3, r0
 8004434:	4923      	ldr	r1, [pc, #140]	@ (80044c4 <draw_cross+0xa4>)
 8004436:	4618      	mov	r0, r3
 8004438:	f7fc fcca 	bl	8000dd0 <__aeabi_fmul>
 800443c:	4603      	mov	r3, r0
 800443e:	4618      	mov	r0, r3
 8004440:	f7fc fea2 	bl	8001188 <__aeabi_f2iz>
 8004444:	4603      	mov	r3, r0
 8004446:	617b      	str	r3, [r7, #20]
    ssd1306_Line(cx - d, cy - d, cx + d, cy + d, White);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	b2da      	uxtb	r2, r3
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	b2db      	uxtb	r3, r3
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	b2d8      	uxtb	r0, r3
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	b2da      	uxtb	r2, r3
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	b2db      	uxtb	r3, r3
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	b2d9      	uxtb	r1, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	b2da      	uxtb	r2, r3
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	b2db      	uxtb	r3, r3
 8004468:	4413      	add	r3, r2
 800446a:	b2dc      	uxtb	r4, r3
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	b2da      	uxtb	r2, r3
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	b2db      	uxtb	r3, r3
 8004474:	4413      	add	r3, r2
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2201      	movs	r2, #1
 800447a:	9200      	str	r2, [sp, #0]
 800447c:	4622      	mov	r2, r4
 800447e:	f001 fe45 	bl	800610c <ssd1306_Line>
    ssd1306_Line(cx - d, cy + d, cx + d, cy - d, White);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	b2da      	uxtb	r2, r3
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	b2db      	uxtb	r3, r3
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	b2d8      	uxtb	r0, r3
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	b2da      	uxtb	r2, r3
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	b2db      	uxtb	r3, r3
 8004496:	4413      	add	r3, r2
 8004498:	b2d9      	uxtb	r1, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	b2da      	uxtb	r2, r3
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	4413      	add	r3, r2
 80044a4:	b2dc      	uxtb	r4, r3
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2201      	movs	r2, #1
 80044b4:	9200      	str	r2, [sp, #0]
 80044b6:	4622      	mov	r2, r4
 80044b8:	f001 fe28 	bl	800610c <ssd1306_Line>
}
 80044bc:	bf00      	nop
 80044be:	371c      	adds	r7, #28
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd90      	pop	{r4, r7, pc}
 80044c4:	3f266666 	.word	0x3f266666

080044c8 <draw_centered_char>:

/* Центрированный символ */
static void draw_centered_char(int cx, int cy, char ch, const SSD1306_Font_t *font) {
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b08c      	sub	sp, #48	@ 0x30
 80044cc:	af02      	add	r7, sp, #8
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	603b      	str	r3, [r7, #0]
 80044d4:	4613      	mov	r3, r2
 80044d6:	71fb      	strb	r3, [r7, #7]
    char s[2] = { ch, '\0' };
 80044d8:	79fb      	ldrb	r3, [r7, #7]
 80044da:	753b      	strb	r3, [r7, #20]
 80044dc:	2300      	movs	r3, #0
 80044de:	757b      	strb	r3, [r7, #21]
    int fw = font->width;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	61fb      	str	r3, [r7, #28]
    int fh = font->height;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	785b      	ldrb	r3, [r3, #1]
 80044ea:	61bb      	str	r3, [r7, #24]
    int x = cx - fw / 2;
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	0fda      	lsrs	r2, r3, #31
 80044f0:	4413      	add	r3, r2
 80044f2:	105b      	asrs	r3, r3, #1
 80044f4:	425b      	negs	r3, r3
 80044f6:	461a      	mov	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4413      	add	r3, r2
 80044fc:	627b      	str	r3, [r7, #36]	@ 0x24
    int y = cy - fh / 2;
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	0fda      	lsrs	r2, r3, #31
 8004502:	4413      	add	r3, r2
 8004504:	105b      	asrs	r3, r3, #1
 8004506:	425b      	negs	r3, r3
 8004508:	461a      	mov	r2, r3
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	4413      	add	r3, r2
 800450e:	623b      	str	r3, [r7, #32]
    if (x < 0) x = 0;
 8004510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004512:	2b00      	cmp	r3, #0
 8004514:	da01      	bge.n	800451a <draw_centered_char+0x52>
 8004516:	2300      	movs	r3, #0
 8004518:	627b      	str	r3, [r7, #36]	@ 0x24
    if (y < 0) y = 0;
 800451a:	6a3b      	ldr	r3, [r7, #32]
 800451c:	2b00      	cmp	r3, #0
 800451e:	da01      	bge.n	8004524 <draw_centered_char+0x5c>
 8004520:	2300      	movs	r3, #0
 8004522:	623b      	str	r3, [r7, #32]
    ssd1306_SetCursor((uint8_t)x, (uint8_t)y);
 8004524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004526:	b2db      	uxtb	r3, r3
 8004528:	6a3a      	ldr	r2, [r7, #32]
 800452a:	b2d2      	uxtb	r2, r2
 800452c:	4611      	mov	r1, r2
 800452e:	4618      	mov	r0, r3
 8004530:	f001 fdd4 	bl	80060dc <ssd1306_SetCursor>
    ssd1306_WriteString(s, *font, White);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	f107 0014 	add.w	r0, r7, #20
 800453a:	2201      	movs	r2, #1
 800453c:	9200      	str	r2, [sp, #0]
 800453e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004540:	f001 fda6 	bl	8006090 <ssd1306_WriteString>
}
 8004544:	bf00      	nop
 8004546:	3728      	adds	r7, #40	@ 0x28
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <draw_input_circle>:

/* Кружок с буквой. Если нет входа — крест. Если активный — двойной круг */
static void draw_input_circle(int cx, int cy, char label, uint8_t hasInput, uint8_t isActive) {
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	4611      	mov	r1, r2
 8004558:	461a      	mov	r2, r3
 800455a:	460b      	mov	r3, r1
 800455c:	71fb      	strb	r3, [r7, #7]
 800455e:	4613      	mov	r3, r2
 8004560:	71bb      	strb	r3, [r7, #6]
    const int r = 12;
 8004562:	230c      	movs	r3, #12
 8004564:	617b      	str	r3, [r7, #20]
    ssd1306_DrawCircle((uint8_t)cx, (uint8_t)cy, (uint8_t)r, White);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	b2d8      	uxtb	r0, r3
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	b2d9      	uxtb	r1, r3
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	b2da      	uxtb	r2, r3
 8004572:	2301      	movs	r3, #1
 8004574:	f001 fe36 	bl	80061e4 <ssd1306_DrawCircle>

    // буква всегда рисуется
    draw_centered_char(cx, cy, label, &Font_11x18);
 8004578:	79fa      	ldrb	r2, [r7, #7]
 800457a:	4b10      	ldr	r3, [pc, #64]	@ (80045bc <draw_input_circle+0x70>)
 800457c:	68b9      	ldr	r1, [r7, #8]
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f7ff ffa2 	bl	80044c8 <draw_centered_char>

    if (!hasInput) {
 8004584:	79bb      	ldrb	r3, [r7, #6]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d105      	bne.n	8004596 <draw_input_circle+0x4a>
        draw_cross(cx, cy, r);
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	68b9      	ldr	r1, [r7, #8]
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f7ff ff46 	bl	8004420 <draw_cross>
    } else if (isActive) {
        ssd1306_DrawCircle((uint8_t)cx, (uint8_t)cy, (uint8_t)(r + 3), White);
    }
}
 8004594:	e00e      	b.n	80045b4 <draw_input_circle+0x68>
    } else if (isActive) {
 8004596:	f897 3020 	ldrb.w	r3, [r7, #32]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00a      	beq.n	80045b4 <draw_input_circle+0x68>
        ssd1306_DrawCircle((uint8_t)cx, (uint8_t)cy, (uint8_t)(r + 3), White);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	b2d8      	uxtb	r0, r3
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	b2d9      	uxtb	r1, r3
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	3303      	adds	r3, #3
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	2301      	movs	r3, #1
 80045b0:	f001 fe18 	bl	80061e4 <ssd1306_DrawCircle>
}
 80045b4:	bf00      	nop
 80045b6:	3718      	adds	r7, #24
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	08028fb8 	.word	0x08028fb8

080045c0 <OLED_DrawABPage>:

/* --- Главная функция --- */
void OLED_DrawABPage(void) {
 80045c0:	b590      	push	{r4, r7, lr}
 80045c2:	b0a5      	sub	sp, #148	@ 0x94
 80045c4:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 80045c6:	2000      	movs	r0, #0
 80045c8:	f001 fc40 	bl	8005e4c <ssd1306_Fill>

    const int SW = SSD1306_ROTATED_WIDTH;   // 64
 80045cc:	2340      	movs	r3, #64	@ 0x40
 80045ce:	677b      	str	r3, [r7, #116]	@ 0x74
    const int SH = SSD1306_ROTATED_HEIGHT;  // 128
 80045d0:	2380      	movs	r3, #128	@ 0x80
 80045d2:	673b      	str	r3, [r7, #112]	@ 0x70

    // Заголовок сверху - БОЛЬШИМИ БУКВАМИ ДЛЯ ТЕСТА
    const char title[] = "BONCH-ATS";
 80045d4:	4a72      	ldr	r2, [pc, #456]	@ (80047a0 <OLED_DrawABPage+0x1e0>)
 80045d6:	f107 0320 	add.w	r3, r7, #32
 80045da:	ca07      	ldmia	r2, {r0, r1, r2}
 80045dc:	c303      	stmia	r3!, {r0, r1}
 80045de:	801a      	strh	r2, [r3, #0]
    const SSD1306_Font_t *title_font = &Font_7x10;
 80045e0:	4b70      	ldr	r3, [pc, #448]	@ (80047a4 <OLED_DrawABPage+0x1e4>)
 80045e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    int title_x = (SW / 2) - ((int)strlen(title) * title_font->width / 2);
 80045e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045e6:	0fda      	lsrs	r2, r3, #31
 80045e8:	4413      	add	r3, r2
 80045ea:	105b      	asrs	r3, r3, #1
 80045ec:	4619      	mov	r1, r3
 80045ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	461a      	mov	r2, r3
 80045f4:	4613      	mov	r3, r2
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	4413      	add	r3, r2
 80045fa:	0fda      	lsrs	r2, r3, #31
 80045fc:	4413      	add	r3, r2
 80045fe:	105b      	asrs	r3, r3, #1
 8004600:	425b      	negs	r3, r3
 8004602:	440b      	add	r3, r1
 8004604:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (title_x < 0) title_x = 0;
 8004608:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800460c:	2b00      	cmp	r3, #0
 800460e:	da02      	bge.n	8004616 <OLED_DrawABPage+0x56>
 8004610:	2300      	movs	r3, #0
 8004612:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    ssd1306_SetCursor(title_x, 2);
 8004616:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2102      	movs	r1, #2
 800461e:	4618      	mov	r0, r3
 8004620:	f001 fd5c 	bl	80060dc <ssd1306_SetCursor>
    ssd1306_WriteString((char*)title, *title_font, White);
 8004624:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004626:	f107 0020 	add.w	r0, r7, #32
 800462a:	2201      	movs	r2, #1
 800462c:	9200      	str	r2, [sp, #0]
 800462e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004630:	f001 fd2e 	bl	8006090 <ssd1306_WriteString>
    int title_bottom = 2 + title_font->height;
 8004634:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004636:	785b      	ldrb	r3, [r3, #1]
 8004638:	3302      	adds	r3, #2
 800463a:	66bb      	str	r3, [r7, #104]	@ 0x68

    // Нижний блок (U/I/P)
    const SSD1306_Font_t *fval = &Font_7x10;
 800463c:	4b59      	ldr	r3, [pc, #356]	@ (80047a4 <OLED_DrawABPage+0x1e4>)
 800463e:	667b      	str	r3, [r7, #100]	@ 0x64
    const int fh = fval->height;   // ~10
 8004640:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004642:	785b      	ldrb	r3, [r3, #1]
 8004644:	663b      	str	r3, [r7, #96]	@ 0x60
    const int vpad = 4;
 8004646:	2304      	movs	r3, #4
 8004648:	65fb      	str	r3, [r7, #92]	@ 0x5c
    const int box_x = 2;
 800464a:	2302      	movs	r3, #2
 800464c:	65bb      	str	r3, [r7, #88]	@ 0x58
    const int lines = 3;
 800464e:	2303      	movs	r3, #3
 8004650:	657b      	str	r3, [r7, #84]	@ 0x54
    const int box_h = (fh * lines) + (vpad * (lines + 1));
 8004652:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004654:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004656:	fb03 f202 	mul.w	r2, r3, r2
 800465a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800465c:	3301      	adds	r3, #1
 800465e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8004660:	fb01 f303 	mul.w	r3, r1, r3
 8004664:	4413      	add	r3, r2
 8004666:	653b      	str	r3, [r7, #80]	@ 0x50
    const int box_w = SW - 4;
 8004668:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800466a:	3b04      	subs	r3, #4
 800466c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    const int box_y = SH - box_h - 4;
 800466e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004670:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	3b04      	subs	r3, #4
 8004676:	64bb      	str	r3, [r7, #72]	@ 0x48
    int data_top = box_y;
 8004678:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800467a:	647b      	str	r3, [r7, #68]	@ 0x44

    // Параметры входов
    uint8_t hasA = (voltage1 > ABPAGE_VOLTAGE_THRESHOLD);
 800467c:	4b4a      	ldr	r3, [pc, #296]	@ (80047a8 <OLED_DrawABPage+0x1e8>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2201      	movs	r2, #1
 8004682:	4614      	mov	r4, r2
 8004684:	4949      	ldr	r1, [pc, #292]	@ (80047ac <OLED_DrawABPage+0x1ec>)
 8004686:	4618      	mov	r0, r3
 8004688:	f7fc fd5e 	bl	8001148 <__aeabi_fcmpgt>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <OLED_DrawABPage+0xd6>
 8004692:	2300      	movs	r3, #0
 8004694:	461c      	mov	r4, r3
 8004696:	b2e3      	uxtb	r3, r4
 8004698:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    uint8_t hasB = (voltage2 > ABPAGE_VOLTAGE_THRESHOLD);
 800469c:	4b44      	ldr	r3, [pc, #272]	@ (80047b0 <OLED_DrawABPage+0x1f0>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2201      	movs	r2, #1
 80046a2:	4614      	mov	r4, r2
 80046a4:	4941      	ldr	r1, [pc, #260]	@ (80047ac <OLED_DrawABPage+0x1ec>)
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7fc fd4e 	bl	8001148 <__aeabi_fcmpgt>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <OLED_DrawABPage+0xf6>
 80046b2:	2300      	movs	r3, #0
 80046b4:	461c      	mov	r4, r3
 80046b6:	b2e3      	uxtb	r3, r4
 80046b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
    uint8_t activeA = 0, activeB = 0;
 80046bc:	2300      	movs	r3, #0
 80046be:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 80046c2:	2300      	movs	r3, #0
 80046c4:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
    if (hasA && hasB) activeA = 1;     // A приоритет
 80046c8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d007      	beq.n	80046e0 <OLED_DrawABPage+0x120>
 80046d0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d003      	beq.n	80046e0 <OLED_DrawABPage+0x120>
 80046d8:	2301      	movs	r3, #1
 80046da:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 80046de:	e00e      	b.n	80046fe <OLED_DrawABPage+0x13e>
    else if (hasA) activeA = 1;
 80046e0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d003      	beq.n	80046f0 <OLED_DrawABPage+0x130>
 80046e8:	2301      	movs	r3, #1
 80046ea:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 80046ee:	e006      	b.n	80046fe <OLED_DrawABPage+0x13e>
    else if (hasB) activeB = 1;
 80046f0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d002      	beq.n	80046fe <OLED_DrawABPage+0x13e>
 80046f8:	2301      	movs	r3, #1
 80046fa:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82

    // Кружки A и B — по центру между заголовком и блоком данных
    // ЯВНО СДВИГАЕМ ВНИЗ НА 10 ПИКСЕЛЕЙ ДЛЯ ТЕСТА
    int center_y = title_bottom + 10 + ((data_top - title_bottom - 10) / 2);
 80046fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004700:	f103 020a 	add.w	r2, r3, #10
 8004704:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004706:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004708:	1acb      	subs	r3, r1, r3
 800470a:	3b0a      	subs	r3, #10
 800470c:	0fd9      	lsrs	r1, r3, #31
 800470e:	440b      	add	r3, r1
 8004710:	105b      	asrs	r3, r3, #1
 8004712:	4413      	add	r3, r2
 8004714:	63fb      	str	r3, [r7, #60]	@ 0x3c

    const int ax = SW / 4;
 8004716:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004718:	2b00      	cmp	r3, #0
 800471a:	da00      	bge.n	800471e <OLED_DrawABPage+0x15e>
 800471c:	3303      	adds	r3, #3
 800471e:	109b      	asrs	r3, r3, #2
 8004720:	63bb      	str	r3, [r7, #56]	@ 0x38
    const int bx = (SW * 3) / 4;
 8004722:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004724:	4613      	mov	r3, r2
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	4413      	add	r3, r2
 800472a:	2b00      	cmp	r3, #0
 800472c:	da00      	bge.n	8004730 <OLED_DrawABPage+0x170>
 800472e:	3303      	adds	r3, #3
 8004730:	109b      	asrs	r3, r3, #2
 8004732:	637b      	str	r3, [r7, #52]	@ 0x34

    draw_input_circle(ax, center_y, 'A', hasA, activeA);
 8004734:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8004738:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	4613      	mov	r3, r2
 8004740:	2241      	movs	r2, #65	@ 0x41
 8004742:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004744:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004746:	f7ff ff01 	bl	800454c <draw_input_circle>
    draw_input_circle(bx, center_y, 'B', hasB, activeB);
 800474a:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 800474e:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	4613      	mov	r3, r2
 8004756:	2242      	movs	r2, #66	@ 0x42
 8004758:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800475a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800475c:	f7ff fef6 	bl	800454c <draw_input_circle>

    // Рисуем нижний блок
    ssd1306_DrawRectangle(box_x, box_y, box_x + box_w, box_y + box_h, White);
 8004760:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004762:	b2d8      	uxtb	r0, r3
 8004764:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004766:	b2d9      	uxtb	r1, r3
 8004768:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800476a:	b2da      	uxtb	r2, r3
 800476c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800476e:	b2db      	uxtb	r3, r3
 8004770:	4413      	add	r3, r2
 8004772:	b2dc      	uxtb	r4, r3
 8004774:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004776:	b2da      	uxtb	r2, r3
 8004778:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800477a:	b2db      	uxtb	r3, r3
 800477c:	4413      	add	r3, r2
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2201      	movs	r2, #1
 8004782:	9200      	str	r2, [sp, #0]
 8004784:	4622      	mov	r2, r4
 8004786:	f001 fdb4 	bl	80062f2 <ssd1306_DrawRectangle>

    // Значения
    float u_work = 0.0f;
 800478a:	f04f 0300 	mov.w	r3, #0
 800478e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (activeA) u_work = voltage1;
 8004790:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00d      	beq.n	80047b4 <OLED_DrawABPage+0x1f4>
 8004798:	4b03      	ldr	r3, [pc, #12]	@ (80047a8 <OLED_DrawABPage+0x1e8>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800479e:	e010      	b.n	80047c2 <OLED_DrawABPage+0x202>
 80047a0:	08024c48 	.word	0x08024c48
 80047a4:	08028fac 	.word	0x08028fac
 80047a8:	20004c64 	.word	0x20004c64
 80047ac:	41a00000 	.word	0x41a00000
 80047b0:	20004c68 	.word	0x20004c68
    else if (activeB) u_work = voltage2;
 80047b4:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d002      	beq.n	80047c2 <OLED_DrawABPage+0x202>
 80047bc:	4b48      	ldr	r3, [pc, #288]	@ (80048e0 <OLED_DrawABPage+0x320>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	67fb      	str	r3, [r7, #124]	@ 0x7c

    // Округление мощности до целых - ТЕПЕРЬ ТОЧНО БЕЗ ДРОБНОЙ ЧАСТИ
    int power_int = (int)(current * u_work);
 80047c2:	4b48      	ldr	r3, [pc, #288]	@ (80048e4 <OLED_DrawABPage+0x324>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7fc fb01 	bl	8000dd0 <__aeabi_fmul>
 80047ce:	4603      	mov	r3, r0
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7fc fcd9 	bl	8001188 <__aeabi_f2iz>
 80047d6:	4603      	mov	r3, r0
 80047d8:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (current * u_work - power_int >= 0.5) power_int++; // Правильное округление
 80047da:	4b42      	ldr	r3, [pc, #264]	@ (80048e4 <OLED_DrawABPage+0x324>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7fc faf5 	bl	8000dd0 <__aeabi_fmul>
 80047e6:	4603      	mov	r3, r0
 80047e8:	461c      	mov	r4, r3
 80047ea:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80047ec:	f7fc fa9c 	bl	8000d28 <__aeabi_i2f>
 80047f0:	4603      	mov	r3, r0
 80047f2:	4619      	mov	r1, r3
 80047f4:	4620      	mov	r0, r4
 80047f6:	f7fc f9e1 	bl	8000bbc <__aeabi_fsub>
 80047fa:	4603      	mov	r3, r0
 80047fc:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004800:	4618      	mov	r0, r3
 8004802:	f7fc fc97 	bl	8001134 <__aeabi_fcmpge>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d002      	beq.n	8004812 <OLED_DrawABPage+0x252>
 800480c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800480e:	3301      	adds	r3, #1
 8004810:	67bb      	str	r3, [r7, #120]	@ 0x78

    char buf[32];
    int text_x = box_x + 4;
 8004812:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004814:	3304      	adds	r3, #4
 8004816:	633b      	str	r3, [r7, #48]	@ 0x30
    int y = box_y + vpad;
 8004818:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800481a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800481c:	4413      	add	r3, r2
 800481e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // ИЗМЕНИЛ ФОРМАТ ДЛЯ ТЕСТА - БОЛЬШИЕ БУКВЫ
    snprintf(buf, sizeof(buf), "U=%.1fV", u_work);
 8004820:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8004822:	f7fb fe47 	bl	80004b4 <__aeabi_f2d>
 8004826:	4602      	mov	r2, r0
 8004828:	460b      	mov	r3, r1
 800482a:	4638      	mov	r0, r7
 800482c:	e9cd 2300 	strd	r2, r3, [sp]
 8004830:	4a2d      	ldr	r2, [pc, #180]	@ (80048e8 <OLED_DrawABPage+0x328>)
 8004832:	2120      	movs	r1, #32
 8004834:	f01d fa98 	bl	8021d68 <sniprintf>
    ssd1306_SetCursor(text_x, y);
 8004838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800483a:	b2db      	uxtb	r3, r3
 800483c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800483e:	b2d2      	uxtb	r2, r2
 8004840:	4611      	mov	r1, r2
 8004842:	4618      	mov	r0, r3
 8004844:	f001 fc4a 	bl	80060dc <ssd1306_SetCursor>
    ssd1306_WriteString(buf, *fval, White);
 8004848:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800484a:	4638      	mov	r0, r7
 800484c:	2201      	movs	r2, #1
 800484e:	9200      	str	r2, [sp, #0]
 8004850:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004852:	f001 fc1d 	bl	8006090 <ssd1306_WriteString>

    y += fh + vpad;
 8004856:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004858:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800485a:	4413      	add	r3, r2
 800485c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800485e:	4413      	add	r3, r2
 8004860:	62fb      	str	r3, [r7, #44]	@ 0x2c
    snprintf(buf, sizeof(buf), "I=%.1f A", current);
 8004862:	4b20      	ldr	r3, [pc, #128]	@ (80048e4 <OLED_DrawABPage+0x324>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4618      	mov	r0, r3
 8004868:	f7fb fe24 	bl	80004b4 <__aeabi_f2d>
 800486c:	4602      	mov	r2, r0
 800486e:	460b      	mov	r3, r1
 8004870:	4638      	mov	r0, r7
 8004872:	e9cd 2300 	strd	r2, r3, [sp]
 8004876:	4a1d      	ldr	r2, [pc, #116]	@ (80048ec <OLED_DrawABPage+0x32c>)
 8004878:	2120      	movs	r1, #32
 800487a:	f01d fa75 	bl	8021d68 <sniprintf>
    ssd1306_SetCursor(text_x, y);
 800487e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004880:	b2db      	uxtb	r3, r3
 8004882:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004884:	b2d2      	uxtb	r2, r2
 8004886:	4611      	mov	r1, r2
 8004888:	4618      	mov	r0, r3
 800488a:	f001 fc27 	bl	80060dc <ssd1306_SetCursor>
    ssd1306_WriteString(buf, *fval, White);
 800488e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004890:	4638      	mov	r0, r7
 8004892:	2201      	movs	r2, #1
 8004894:	9200      	str	r2, [sp, #0]
 8004896:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004898:	f001 fbfa 	bl	8006090 <ssd1306_WriteString>

    y += fh + vpad;
 800489c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800489e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048a0:	4413      	add	r3, r2
 80048a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048a4:	4413      	add	r3, r2
 80048a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // ЯВНОЕ ИЗМЕНЕНИЕ - ЦЕЛОЕ ЧИСЛО БЕЗ ТОЧКИ
    snprintf(buf, sizeof(buf), "P=%d W", power_int);
 80048a8:	4638      	mov	r0, r7
 80048aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80048ac:	4a10      	ldr	r2, [pc, #64]	@ (80048f0 <OLED_DrawABPage+0x330>)
 80048ae:	2120      	movs	r1, #32
 80048b0:	f01d fa5a 	bl	8021d68 <sniprintf>
    ssd1306_SetCursor(text_x, y);
 80048b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	4611      	mov	r1, r2
 80048be:	4618      	mov	r0, r3
 80048c0:	f001 fc0c 	bl	80060dc <ssd1306_SetCursor>
    ssd1306_WriteString(buf, *fval, White);
 80048c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048c6:	4638      	mov	r0, r7
 80048c8:	2201      	movs	r2, #1
 80048ca:	9200      	str	r2, [sp, #0]
 80048cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048ce:	f001 fbdf 	bl	8006090 <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 80048d2:	f001 fad3 	bl	8005e7c <ssd1306_UpdateScreen>
}
 80048d6:	bf00      	nop
 80048d8:	378c      	adds	r7, #140	@ 0x8c
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd90      	pop	{r4, r7, pc}
 80048de:	bf00      	nop
 80048e0:	20004c68 	.word	0x20004c68
 80048e4:	20004c6c 	.word	0x20004c6c
 80048e8:	08024c2c 	.word	0x08024c2c
 80048ec:	08024c34 	.word	0x08024c34
 80048f0:	08024c40 	.word	0x08024c40

080048f4 <OLED_DrawIP_Split>:
 *
 * @param x   позиция курсора X
 * @param y   позиция курсора Y
 * @param addr указатель на ip4_addr_t
 */
void OLED_DrawIP_Split(uint8_t x, uint8_t y, const ip4_addr_t *addr) {
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b08a      	sub	sp, #40	@ 0x28
 80048f8:	af02      	add	r7, sp, #8
 80048fa:	4603      	mov	r3, r0
 80048fc:	603a      	str	r2, [r7, #0]
 80048fe:	71fb      	strb	r3, [r7, #7]
 8004900:	460b      	mov	r3, r1
 8004902:	71bb      	strb	r3, [r7, #6]
    char line[20];

    if (!addr) return;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d045      	beq.n	8004996 <OLED_DrawIP_Split+0xa2>

    uint8_t o1 = ip4_addr1_16(addr);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	77fb      	strb	r3, [r7, #31]
    uint8_t o2 = ip4_addr2_16(addr);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	3301      	adds	r3, #1
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	77bb      	strb	r3, [r7, #30]
    uint8_t o3 = ip4_addr3_16(addr);
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	3302      	adds	r3, #2
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	777b      	strb	r3, [r7, #29]
    uint8_t o4 = ip4_addr4_16(addr);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	3303      	adds	r3, #3
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	773b      	strb	r3, [r7, #28]

    // Вторая строка: первые два октета
    snprintf(line, sizeof(line), "%u.%u.", o1, o2);
 8004928:	7ffa      	ldrb	r2, [r7, #31]
 800492a:	7fbb      	ldrb	r3, [r7, #30]
 800492c:	f107 0008 	add.w	r0, r7, #8
 8004930:	9300      	str	r3, [sp, #0]
 8004932:	4613      	mov	r3, r2
 8004934:	4a1a      	ldr	r2, [pc, #104]	@ (80049a0 <OLED_DrawIP_Split+0xac>)
 8004936:	2114      	movs	r1, #20
 8004938:	f01d fa16 	bl	8021d68 <sniprintf>
    ssd1306_SetCursor(x, y);
 800493c:	79ba      	ldrb	r2, [r7, #6]
 800493e:	79fb      	ldrb	r3, [r7, #7]
 8004940:	4611      	mov	r1, r2
 8004942:	4618      	mov	r0, r3
 8004944:	f001 fbca 	bl	80060dc <ssd1306_SetCursor>
    ssd1306_WriteString(line, Font_7x10, White);
 8004948:	4b16      	ldr	r3, [pc, #88]	@ (80049a4 <OLED_DrawIP_Split+0xb0>)
 800494a:	f107 0008 	add.w	r0, r7, #8
 800494e:	2201      	movs	r2, #1
 8004950:	9200      	str	r2, [sp, #0]
 8004952:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004954:	f001 fb9c 	bl	8006090 <ssd1306_WriteString>

    // Третья строка: последние два октета
    snprintf(line, sizeof(line), "%u.%u", o3, o4);
 8004958:	7f7a      	ldrb	r2, [r7, #29]
 800495a:	7f3b      	ldrb	r3, [r7, #28]
 800495c:	f107 0008 	add.w	r0, r7, #8
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	4613      	mov	r3, r2
 8004964:	4a10      	ldr	r2, [pc, #64]	@ (80049a8 <OLED_DrawIP_Split+0xb4>)
 8004966:	2114      	movs	r1, #20
 8004968:	f01d f9fe 	bl	8021d68 <sniprintf>
    ssd1306_SetCursor(x, y + Font_7x10.height + 2);
 800496c:	4b0d      	ldr	r3, [pc, #52]	@ (80049a4 <OLED_DrawIP_Split+0xb0>)
 800496e:	785a      	ldrb	r2, [r3, #1]
 8004970:	79bb      	ldrb	r3, [r7, #6]
 8004972:	4413      	add	r3, r2
 8004974:	b2db      	uxtb	r3, r3
 8004976:	3302      	adds	r3, #2
 8004978:	b2da      	uxtb	r2, r3
 800497a:	79fb      	ldrb	r3, [r7, #7]
 800497c:	4611      	mov	r1, r2
 800497e:	4618      	mov	r0, r3
 8004980:	f001 fbac 	bl	80060dc <ssd1306_SetCursor>
    ssd1306_WriteString(line, Font_7x10, White);
 8004984:	4b07      	ldr	r3, [pc, #28]	@ (80049a4 <OLED_DrawIP_Split+0xb0>)
 8004986:	f107 0008 	add.w	r0, r7, #8
 800498a:	2201      	movs	r2, #1
 800498c:	9200      	str	r2, [sp, #0]
 800498e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004990:	f001 fb7e 	bl	8006090 <ssd1306_WriteString>
 8004994:	e000      	b.n	8004998 <OLED_DrawIP_Split+0xa4>
    if (!addr) return;
 8004996:	bf00      	nop
}
 8004998:	3720      	adds	r7, #32
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	08024c54 	.word	0x08024c54
 80049a4:	08028fac 	.word	0x08028fac
 80049a8:	08024c5c 	.word	0x08024c5c

080049ac <OLED_DrawNetInfo>:
 *
 * @param netif  структура сетевого интерфейса LwIP
 * @param startX начальная позиция X
 * @param startY начальная позиция Y
 */
void OLED_DrawNetInfo(struct netif *netif, uint8_t startX, uint8_t startY) {
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b096      	sub	sp, #88	@ 0x58
 80049b0:	af02      	add	r7, sp, #8
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	460b      	mov	r3, r1
 80049b6:	70fb      	strb	r3, [r7, #3]
 80049b8:	4613      	mov	r3, r2
 80049ba:	70bb      	strb	r3, [r7, #2]
	char buffer[64];
	uint8_t lineY = startY;
 80049bc:	78bb      	ldrb	r3, [r7, #2]
 80049be:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    ssd1306_Fill(Black);
 80049c2:	2000      	movs	r0, #0
 80049c4:	f001 fa42 	bl	8005e4c <ssd1306_Fill>

    ssd1306_SetCursor(startX, startY);
 80049c8:	78ba      	ldrb	r2, [r7, #2]
 80049ca:	78fb      	ldrb	r3, [r7, #3]
 80049cc:	4611      	mov	r1, r2
 80049ce:	4618      	mov	r0, r3
 80049d0:	f001 fb84 	bl	80060dc <ssd1306_SetCursor>
    ssd1306_WriteString("NETINF", Font_7x10, White);
 80049d4:	4b5b      	ldr	r3, [pc, #364]	@ (8004b44 <OLED_DrawNetInfo+0x198>)
 80049d6:	2201      	movs	r2, #1
 80049d8:	9200      	str	r2, [sp, #0]
 80049da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049dc:	485a      	ldr	r0, [pc, #360]	@ (8004b48 <OLED_DrawNetInfo+0x19c>)
 80049de:	f001 fb57 	bl	8006090 <ssd1306_WriteString>

    // Полоса под заголовком
    ssd1306_DrawRectangle(0, startY + Font_7x10.height + 1, SSD1306_ROTATED_WIDTH-1, startY + Font_7x10.height + 2, White);
 80049e2:	4b58      	ldr	r3, [pc, #352]	@ (8004b44 <OLED_DrawNetInfo+0x198>)
 80049e4:	785a      	ldrb	r2, [r3, #1]
 80049e6:	78bb      	ldrb	r3, [r7, #2]
 80049e8:	4413      	add	r3, r2
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	3301      	adds	r3, #1
 80049ee:	b2d9      	uxtb	r1, r3
 80049f0:	4b54      	ldr	r3, [pc, #336]	@ (8004b44 <OLED_DrawNetInfo+0x198>)
 80049f2:	785a      	ldrb	r2, [r3, #1]
 80049f4:	78bb      	ldrb	r3, [r7, #2]
 80049f6:	4413      	add	r3, r2
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	3302      	adds	r3, #2
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2201      	movs	r2, #1
 8004a00:	9200      	str	r2, [sp, #0]
 8004a02:	223f      	movs	r2, #63	@ 0x3f
 8004a04:	2000      	movs	r0, #0
 8004a06:	f001 fc74 	bl	80062f2 <ssd1306_DrawRectangle>

    // IP
    lineY = startY + Font_7x10.height + 6;
 8004a0a:	4b4e      	ldr	r3, [pc, #312]	@ (8004b44 <OLED_DrawNetInfo+0x198>)
 8004a0c:	785a      	ldrb	r2, [r3, #1]
 8004a0e:	78bb      	ldrb	r3, [r7, #2]
 8004a10:	4413      	add	r3, r2
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	3306      	adds	r3, #6
 8004a16:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    ssd1306_SetCursor(startX, lineY);
 8004a1a:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8004a1e:	78fb      	ldrb	r3, [r7, #3]
 8004a20:	4611      	mov	r1, r2
 8004a22:	4618      	mov	r0, r3
 8004a24:	f001 fb5a 	bl	80060dc <ssd1306_SetCursor>
    ssd1306_WriteString("IP:", Font_7x10, White);
 8004a28:	4b46      	ldr	r3, [pc, #280]	@ (8004b44 <OLED_DrawNetInfo+0x198>)
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	9200      	str	r2, [sp, #0]
 8004a2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a30:	4846      	ldr	r0, [pc, #280]	@ (8004b4c <OLED_DrawNetInfo+0x1a0>)
 8004a32:	f001 fb2d 	bl	8006090 <ssd1306_WriteString>
    OLED_DrawIP_Split(startX , lineY + Font_7x10.height + 2, netif_ip4_addr(netif));
 8004a36:	4b43      	ldr	r3, [pc, #268]	@ (8004b44 <OLED_DrawNetInfo+0x198>)
 8004a38:	785a      	ldrb	r2, [r3, #1]
 8004a3a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004a3e:	4413      	add	r3, r2
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	3302      	adds	r3, #2
 8004a44:	b2d9      	uxtb	r1, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	1d1a      	adds	r2, r3, #4
 8004a4a:	78fb      	ldrb	r3, [r7, #3]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7ff ff51 	bl	80048f4 <OLED_DrawIP_Split>

    // линия-разделитель
    lineY += 3*(Font_7x10.height + 1);
 8004a52:	4b3c      	ldr	r3, [pc, #240]	@ (8004b44 <OLED_DrawNetInfo+0x198>)
 8004a54:	785b      	ldrb	r3, [r3, #1]
 8004a56:	3301      	adds	r3, #1
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	0052      	lsls	r2, r2, #1
 8004a5e:	4413      	add	r3, r2
 8004a60:	b2da      	uxtb	r2, r3
 8004a62:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004a66:	4413      	add	r3, r2
 8004a68:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    ssd1306_DrawRectangle(0, lineY, SSD1306_ROTATED_WIDTH-1, lineY, White);
 8004a6c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004a70:	f897 104f 	ldrb.w	r1, [r7, #79]	@ 0x4f
 8004a74:	2201      	movs	r2, #1
 8004a76:	9200      	str	r2, [sp, #0]
 8004a78:	223f      	movs	r2, #63	@ 0x3f
 8004a7a:	2000      	movs	r0, #0
 8004a7c:	f001 fc39 	bl	80062f2 <ssd1306_DrawRectangle>

    // MASK
    lineY += 4;
 8004a80:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004a84:	3304      	adds	r3, #4
 8004a86:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    ssd1306_SetCursor(startX, lineY);
 8004a8a:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8004a8e:	78fb      	ldrb	r3, [r7, #3]
 8004a90:	4611      	mov	r1, r2
 8004a92:	4618      	mov	r0, r3
 8004a94:	f001 fb22 	bl	80060dc <ssd1306_SetCursor>
    ssd1306_WriteString("MASK:", Font_7x10, White);
 8004a98:	4b2a      	ldr	r3, [pc, #168]	@ (8004b44 <OLED_DrawNetInfo+0x198>)
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	9200      	str	r2, [sp, #0]
 8004a9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004aa0:	482b      	ldr	r0, [pc, #172]	@ (8004b50 <OLED_DrawNetInfo+0x1a4>)
 8004aa2:	f001 faf5 	bl	8006090 <ssd1306_WriteString>
    OLED_DrawIP_Split(startX, lineY + Font_7x10.height + 2, netif_ip4_netmask(netif));
 8004aa6:	4b27      	ldr	r3, [pc, #156]	@ (8004b44 <OLED_DrawNetInfo+0x198>)
 8004aa8:	785a      	ldrb	r2, [r3, #1]
 8004aaa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004aae:	4413      	add	r3, r2
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	3302      	adds	r3, #2
 8004ab4:	b2d9      	uxtb	r1, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f103 0208 	add.w	r2, r3, #8
 8004abc:	78fb      	ldrb	r3, [r7, #3]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7ff ff18 	bl	80048f4 <OLED_DrawIP_Split>

    // линия-разделитель
    lineY += 3*(Font_7x10.height + 1);
 8004ac4:	4b1f      	ldr	r3, [pc, #124]	@ (8004b44 <OLED_DrawNetInfo+0x198>)
 8004ac6:	785b      	ldrb	r3, [r3, #1]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	461a      	mov	r2, r3
 8004ace:	0052      	lsls	r2, r2, #1
 8004ad0:	4413      	add	r3, r2
 8004ad2:	b2da      	uxtb	r2, r3
 8004ad4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004ad8:	4413      	add	r3, r2
 8004ada:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    ssd1306_DrawRectangle(0, lineY, SSD1306_ROTATED_WIDTH-1, lineY, White);
 8004ade:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004ae2:	f897 104f 	ldrb.w	r1, [r7, #79]	@ 0x4f
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	9200      	str	r2, [sp, #0]
 8004aea:	223f      	movs	r2, #63	@ 0x3f
 8004aec:	2000      	movs	r0, #0
 8004aee:	f001 fc00 	bl	80062f2 <ssd1306_DrawRectangle>

    // GW
    lineY += 4;
 8004af2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004af6:	3304      	adds	r3, #4
 8004af8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    ssd1306_SetCursor(startX, lineY);
 8004afc:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8004b00:	78fb      	ldrb	r3, [r7, #3]
 8004b02:	4611      	mov	r1, r2
 8004b04:	4618      	mov	r0, r3
 8004b06:	f001 fae9 	bl	80060dc <ssd1306_SetCursor>
    ssd1306_WriteString("GW:", Font_7x10, White);
 8004b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8004b44 <OLED_DrawNetInfo+0x198>)
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	9200      	str	r2, [sp, #0]
 8004b10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b12:	4810      	ldr	r0, [pc, #64]	@ (8004b54 <OLED_DrawNetInfo+0x1a8>)
 8004b14:	f001 fabc 	bl	8006090 <ssd1306_WriteString>
    OLED_DrawIP_Split(startX, lineY + Font_7x10.height + 2, netif_ip4_gw(netif));
 8004b18:	4b0a      	ldr	r3, [pc, #40]	@ (8004b44 <OLED_DrawNetInfo+0x198>)
 8004b1a:	785a      	ldrb	r2, [r3, #1]
 8004b1c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004b20:	4413      	add	r3, r2
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	3302      	adds	r3, #2
 8004b26:	b2d9      	uxtb	r1, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f103 020c 	add.w	r2, r3, #12
 8004b2e:	78fb      	ldrb	r3, [r7, #3]
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7ff fedf 	bl	80048f4 <OLED_DrawIP_Split>
    // отправить буфер на дисплей
    ssd1306_UpdateScreen();
 8004b36:	f001 f9a1 	bl	8005e7c <ssd1306_UpdateScreen>
}
 8004b3a:	bf00      	nop
 8004b3c:	3750      	adds	r7, #80	@ 0x50
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	08028fac 	.word	0x08028fac
 8004b48:	08024c64 	.word	0x08024c64
 8004b4c:	08024c6c 	.word	0x08024c6c
 8004b50:	08024c70 	.word	0x08024c70
 8004b54:	08024c78 	.word	0x08024c78

08004b58 <__NVIC_SystemReset>:
{
 8004b58:	b480      	push	{r7}
 8004b5a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004b5c:	f3bf 8f4f 	dsb	sy
}
 8004b60:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004b62:	4b06      	ldr	r3, [pc, #24]	@ (8004b7c <__NVIC_SystemReset+0x24>)
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004b6a:	4904      	ldr	r1, [pc, #16]	@ (8004b7c <__NVIC_SystemReset+0x24>)
 8004b6c:	4b04      	ldr	r3, [pc, #16]	@ (8004b80 <__NVIC_SystemReset+0x28>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004b72:	f3bf 8f4f 	dsb	sy
}
 8004b76:	bf00      	nop
    __NOP();
 8004b78:	bf00      	nop
 8004b7a:	e7fd      	b.n	8004b78 <__NVIC_SystemReset+0x20>
 8004b7c:	e000ed00 	.word	0xe000ed00
 8004b80:	05fa0004 	.word	0x05fa0004

08004b84 <OLED_Settings_Init>:
static void DHCP_Apply(void);
static bool OLED_Confirm(const char *msg);

// Инициализация меню
void OLED_Settings_Init(void)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
    selected_index = 0;
 8004b88:	4b0a      	ldr	r3, [pc, #40]	@ (8004bb4 <OLED_Settings_Init+0x30>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	601a      	str	r2, [r3, #0]
    editing_active = false;
 8004b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8004bb8 <OLED_Settings_Init+0x34>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	701a      	strb	r2, [r3, #0]
    confirm_active = false;
 8004b94:	4b09      	ldr	r3, [pc, #36]	@ (8004bbc <OLED_Settings_Init+0x38>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	701a      	strb	r2, [r3, #0]
    settings_active = true;
 8004b9a:	4b09      	ldr	r3, [pc, #36]	@ (8004bc0 <OLED_Settings_Init+0x3c>)
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	701a      	strb	r2, [r3, #0]
    last_activity_time = HAL_GetTick();
 8004ba0:	f001 fcd2 	bl	8006548 <HAL_GetTick>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	4a07      	ldr	r2, [pc, #28]	@ (8004bc4 <OLED_Settings_Init+0x40>)
 8004ba8:	6013      	str	r3, [r2, #0]
    OLED_Settings_Draw();
 8004baa:	f000 fc75 	bl	8005498 <OLED_Settings_Draw>
}
 8004bae:	bf00      	nop
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	20004cd8 	.word	0x20004cd8
 8004bb8:	20004ce0 	.word	0x20004ce0
 8004bbc:	20004ce9 	.word	0x20004ce9
 8004bc0:	20004cb4 	.word	0x20004cb4
 8004bc4:	20004ce4 	.word	0x20004ce4

08004bc8 <OLED_Draw_Confirm>:

// --- Отображение меню подтверждения ---
static void OLED_Draw_Confirm(void)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b08c      	sub	sp, #48	@ 0x30
 8004bcc:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 8004bce:	2000      	movs	r0, #0
 8004bd0:	f001 f93c 	bl	8005e4c <ssd1306_Fill>
    const int SW = SSD1306_ROTATED_WIDTH;
 8004bd4:	2340      	movs	r3, #64	@ 0x40
 8004bd6:	627b      	str	r3, [r7, #36]	@ 0x24

    // Заголовок
    ssd1306_SetCursor(0, 2);
 8004bd8:	2102      	movs	r1, #2
 8004bda:	2000      	movs	r0, #0
 8004bdc:	f001 fa7e 	bl	80060dc <ssd1306_SetCursor>
    ssd1306_WriteString("Confirm", *menu_font, White);
 8004be0:	4b52      	ldr	r3, [pc, #328]	@ (8004d2c <OLED_Draw_Confirm+0x164>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2201      	movs	r2, #1
 8004be6:	9200      	str	r2, [sp, #0]
 8004be8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bea:	4851      	ldr	r0, [pc, #324]	@ (8004d30 <OLED_Draw_Confirm+0x168>)
 8004bec:	f001 fa50 	bl	8006090 <ssd1306_WriteString>

    ssd1306_SetCursor(0, 12);
 8004bf0:	210c      	movs	r1, #12
 8004bf2:	2000      	movs	r0, #0
 8004bf4:	f001 fa72 	bl	80060dc <ssd1306_SetCursor>
    ssd1306_WriteString("settings", *menu_font, White);
 8004bf8:	4b4c      	ldr	r3, [pc, #304]	@ (8004d2c <OLED_Draw_Confirm+0x164>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	9200      	str	r2, [sp, #0]
 8004c00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c02:	484c      	ldr	r0, [pc, #304]	@ (8004d34 <OLED_Draw_Confirm+0x16c>)
 8004c04:	f001 fa44 	bl	8006090 <ssd1306_WriteString>

    // IP адрес в две строки
    ssd1306_SetCursor(0, 22);
 8004c08:	2116      	movs	r1, #22
 8004c0a:	2000      	movs	r0, #0
 8004c0c:	f001 fa66 	bl	80060dc <ssd1306_SetCursor>
    ssd1306_WriteString("IP:", *menu_font, White);
 8004c10:	4b46      	ldr	r3, [pc, #280]	@ (8004d2c <OLED_Draw_Confirm+0x164>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2201      	movs	r2, #1
 8004c16:	9200      	str	r2, [sp, #0]
 8004c18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c1a:	4847      	ldr	r0, [pc, #284]	@ (8004d38 <OLED_Draw_Confirm+0x170>)
 8004c1c:	f001 fa38 	bl	8006090 <ssd1306_WriteString>

    // Первая строка IP: 192.168.
    char ip_str1[16];
    snprintf(ip_str1, sizeof(ip_str1), "%d.%d.", last_ip[0], last_ip[1]);
 8004c20:	4b46      	ldr	r3, [pc, #280]	@ (8004d3c <OLED_Draw_Confirm+0x174>)
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	461a      	mov	r2, r3
 8004c26:	4b45      	ldr	r3, [pc, #276]	@ (8004d3c <OLED_Draw_Confirm+0x174>)
 8004c28:	785b      	ldrb	r3, [r3, #1]
 8004c2a:	f107 0014 	add.w	r0, r7, #20
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	4613      	mov	r3, r2
 8004c32:	4a43      	ldr	r2, [pc, #268]	@ (8004d40 <OLED_Draw_Confirm+0x178>)
 8004c34:	2110      	movs	r1, #16
 8004c36:	f01d f897 	bl	8021d68 <sniprintf>
    ssd1306_SetCursor(10, 32);
 8004c3a:	2120      	movs	r1, #32
 8004c3c:	200a      	movs	r0, #10
 8004c3e:	f001 fa4d 	bl	80060dc <ssd1306_SetCursor>
    ssd1306_WriteString(ip_str1, *menu_font, White);
 8004c42:	4b3a      	ldr	r3, [pc, #232]	@ (8004d2c <OLED_Draw_Confirm+0x164>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f107 0014 	add.w	r0, r7, #20
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	9200      	str	r2, [sp, #0]
 8004c4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c50:	f001 fa1e 	bl	8006090 <ssd1306_WriteString>

    // Вторая строка: 1.178
    char ip_str2[16];
    snprintf(ip_str2, sizeof(ip_str2), "%d.%d", last_ip[2], last_ip[3]);
 8004c54:	4b39      	ldr	r3, [pc, #228]	@ (8004d3c <OLED_Draw_Confirm+0x174>)
 8004c56:	789b      	ldrb	r3, [r3, #2]
 8004c58:	461a      	mov	r2, r3
 8004c5a:	4b38      	ldr	r3, [pc, #224]	@ (8004d3c <OLED_Draw_Confirm+0x174>)
 8004c5c:	78db      	ldrb	r3, [r3, #3]
 8004c5e:	1d38      	adds	r0, r7, #4
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	4613      	mov	r3, r2
 8004c64:	4a37      	ldr	r2, [pc, #220]	@ (8004d44 <OLED_Draw_Confirm+0x17c>)
 8004c66:	2110      	movs	r1, #16
 8004c68:	f01d f87e 	bl	8021d68 <sniprintf>
    ssd1306_SetCursor(10, 42);
 8004c6c:	212a      	movs	r1, #42	@ 0x2a
 8004c6e:	200a      	movs	r0, #10
 8004c70:	f001 fa34 	bl	80060dc <ssd1306_SetCursor>
    ssd1306_WriteString(ip_str2, *menu_font, White);
 8004c74:	4b2d      	ldr	r3, [pc, #180]	@ (8004d2c <OLED_Draw_Confirm+0x164>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	1d38      	adds	r0, r7, #4
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	9200      	str	r2, [sp, #0]
 8004c7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c80:	f001 fa06 	bl	8006090 <ssd1306_WriteString>

    // Опции Yes/No
    if(confirm_selection == 0) {
 8004c84:	4b30      	ldr	r3, [pc, #192]	@ (8004d48 <OLED_Draw_Confirm+0x180>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d124      	bne.n	8004cd6 <OLED_Draw_Confirm+0x10e>
        // Yes выделено (слева)
        ssd1306_FillRect(0, 55, 25, menu_font->height + 2, White);
 8004c8c:	4b27      	ldr	r3, [pc, #156]	@ (8004d2c <OLED_Draw_Confirm+0x164>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	785b      	ldrb	r3, [r3, #1]
 8004c92:	3302      	adds	r3, #2
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2201      	movs	r2, #1
 8004c98:	9200      	str	r2, [sp, #0]
 8004c9a:	2219      	movs	r2, #25
 8004c9c:	2137      	movs	r1, #55	@ 0x37
 8004c9e:	2000      	movs	r0, #0
 8004ca0:	f001 fb90 	bl	80063c4 <ssd1306_FillRect>
        ssd1306_SetCursor(2, 57);
 8004ca4:	2139      	movs	r1, #57	@ 0x39
 8004ca6:	2002      	movs	r0, #2
 8004ca8:	f001 fa18 	bl	80060dc <ssd1306_SetCursor>
        ssd1306_WriteString("Yes", *menu_font, Black);
 8004cac:	4b1f      	ldr	r3, [pc, #124]	@ (8004d2c <OLED_Draw_Confirm+0x164>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	9200      	str	r2, [sp, #0]
 8004cb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004cb6:	4825      	ldr	r0, [pc, #148]	@ (8004d4c <OLED_Draw_Confirm+0x184>)
 8004cb8:	f001 f9ea 	bl	8006090 <ssd1306_WriteString>

        ssd1306_SetCursor(30, 57);
 8004cbc:	2139      	movs	r1, #57	@ 0x39
 8004cbe:	201e      	movs	r0, #30
 8004cc0:	f001 fa0c 	bl	80060dc <ssd1306_SetCursor>
        ssd1306_WriteString("No", *menu_font, White);
 8004cc4:	4b19      	ldr	r3, [pc, #100]	@ (8004d2c <OLED_Draw_Confirm+0x164>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	9200      	str	r2, [sp, #0]
 8004ccc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004cce:	4820      	ldr	r0, [pc, #128]	@ (8004d50 <OLED_Draw_Confirm+0x188>)
 8004cd0:	f001 f9de 	bl	8006090 <ssd1306_WriteString>
 8004cd4:	e023      	b.n	8004d1e <OLED_Draw_Confirm+0x156>
    } else {
        // No выделено (справа)
        ssd1306_SetCursor(0, 57);
 8004cd6:	2139      	movs	r1, #57	@ 0x39
 8004cd8:	2000      	movs	r0, #0
 8004cda:	f001 f9ff 	bl	80060dc <ssd1306_SetCursor>
        ssd1306_WriteString("Yes", *menu_font, White);
 8004cde:	4b13      	ldr	r3, [pc, #76]	@ (8004d2c <OLED_Draw_Confirm+0x164>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	9200      	str	r2, [sp, #0]
 8004ce6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ce8:	4818      	ldr	r0, [pc, #96]	@ (8004d4c <OLED_Draw_Confirm+0x184>)
 8004cea:	f001 f9d1 	bl	8006090 <ssd1306_WriteString>

        ssd1306_FillRect(30, 55, 25, menu_font->height + 2, White);
 8004cee:	4b0f      	ldr	r3, [pc, #60]	@ (8004d2c <OLED_Draw_Confirm+0x164>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	785b      	ldrb	r3, [r3, #1]
 8004cf4:	3302      	adds	r3, #2
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	9200      	str	r2, [sp, #0]
 8004cfc:	2219      	movs	r2, #25
 8004cfe:	2137      	movs	r1, #55	@ 0x37
 8004d00:	201e      	movs	r0, #30
 8004d02:	f001 fb5f 	bl	80063c4 <ssd1306_FillRect>
        ssd1306_SetCursor(32, 57);
 8004d06:	2139      	movs	r1, #57	@ 0x39
 8004d08:	2020      	movs	r0, #32
 8004d0a:	f001 f9e7 	bl	80060dc <ssd1306_SetCursor>
        ssd1306_WriteString("No", *menu_font, Black);
 8004d0e:	4b07      	ldr	r3, [pc, #28]	@ (8004d2c <OLED_Draw_Confirm+0x164>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2200      	movs	r2, #0
 8004d14:	9200      	str	r2, [sp, #0]
 8004d16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d18:	480d      	ldr	r0, [pc, #52]	@ (8004d50 <OLED_Draw_Confirm+0x188>)
 8004d1a:	f001 f9b9 	bl	8006090 <ssd1306_WriteString>
    }

    ssd1306_UpdateScreen();
 8004d1e:	f001 f8ad 	bl	8005e7c <ssd1306_UpdateScreen>
}
 8004d22:	bf00      	nop
 8004d24:	3728      	adds	r7, #40	@ 0x28
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	200000a8 	.word	0x200000a8
 8004d30:	08024cb4 	.word	0x08024cb4
 8004d34:	08024cbc 	.word	0x08024cbc
 8004d38:	08024cc8 	.word	0x08024cc8
 8004d3c:	20000080 	.word	0x20000080
 8004d40:	08024ccc 	.word	0x08024ccc
 8004d44:	08024cd4 	.word	0x08024cd4
 8004d48:	20004cec 	.word	0x20004cec
 8004d4c:	08024cdc 	.word	0x08024cdc
 8004d50:	08024ce0 	.word	0x08024ce0

08004d54 <Apply_Network_Settings>:

// --- Применение сетевых настроек в LwIP ---
void Apply_Network_Settings(void)
{
 8004d54:	b590      	push	{r4, r7, lr}
 8004d56:	b089      	sub	sp, #36	@ 0x24
 8004d58:	af04      	add	r7, sp, #16
    ip_addr_t ip_addr, netmask, gw;

    IP4_ADDR(&ip_addr, last_ip[0], last_ip[1], last_ip[2], last_ip[3]);
 8004d5a:	4baa      	ldr	r3, [pc, #680]	@ (8005004 <Apply_Network_Settings+0x2b0>)
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	061a      	lsls	r2, r3, #24
 8004d60:	4ba8      	ldr	r3, [pc, #672]	@ (8005004 <Apply_Network_Settings+0x2b0>)
 8004d62:	785b      	ldrb	r3, [r3, #1]
 8004d64:	041b      	lsls	r3, r3, #16
 8004d66:	431a      	orrs	r2, r3
 8004d68:	4ba6      	ldr	r3, [pc, #664]	@ (8005004 <Apply_Network_Settings+0x2b0>)
 8004d6a:	789b      	ldrb	r3, [r3, #2]
 8004d6c:	021b      	lsls	r3, r3, #8
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	4aa4      	ldr	r2, [pc, #656]	@ (8005004 <Apply_Network_Settings+0x2b0>)
 8004d72:	78d2      	ldrb	r2, [r2, #3]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	061a      	lsls	r2, r3, #24
 8004d78:	4ba2      	ldr	r3, [pc, #648]	@ (8005004 <Apply_Network_Settings+0x2b0>)
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	0619      	lsls	r1, r3, #24
 8004d7e:	4ba1      	ldr	r3, [pc, #644]	@ (8005004 <Apply_Network_Settings+0x2b0>)
 8004d80:	785b      	ldrb	r3, [r3, #1]
 8004d82:	041b      	lsls	r3, r3, #16
 8004d84:	4319      	orrs	r1, r3
 8004d86:	4b9f      	ldr	r3, [pc, #636]	@ (8005004 <Apply_Network_Settings+0x2b0>)
 8004d88:	789b      	ldrb	r3, [r3, #2]
 8004d8a:	021b      	lsls	r3, r3, #8
 8004d8c:	430b      	orrs	r3, r1
 8004d8e:	499d      	ldr	r1, [pc, #628]	@ (8005004 <Apply_Network_Settings+0x2b0>)
 8004d90:	78c9      	ldrb	r1, [r1, #3]
 8004d92:	430b      	orrs	r3, r1
 8004d94:	021b      	lsls	r3, r3, #8
 8004d96:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	4b99      	ldr	r3, [pc, #612]	@ (8005004 <Apply_Network_Settings+0x2b0>)
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	0619      	lsls	r1, r3, #24
 8004da2:	4b98      	ldr	r3, [pc, #608]	@ (8005004 <Apply_Network_Settings+0x2b0>)
 8004da4:	785b      	ldrb	r3, [r3, #1]
 8004da6:	041b      	lsls	r3, r3, #16
 8004da8:	4319      	orrs	r1, r3
 8004daa:	4b96      	ldr	r3, [pc, #600]	@ (8005004 <Apply_Network_Settings+0x2b0>)
 8004dac:	789b      	ldrb	r3, [r3, #2]
 8004dae:	021b      	lsls	r3, r3, #8
 8004db0:	430b      	orrs	r3, r1
 8004db2:	4994      	ldr	r1, [pc, #592]	@ (8005004 <Apply_Network_Settings+0x2b0>)
 8004db4:	78c9      	ldrb	r1, [r1, #3]
 8004db6:	430b      	orrs	r3, r1
 8004db8:	0a1b      	lsrs	r3, r3, #8
 8004dba:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	4b90      	ldr	r3, [pc, #576]	@ (8005004 <Apply_Network_Settings+0x2b0>)
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	0619      	lsls	r1, r3, #24
 8004dc6:	4b8f      	ldr	r3, [pc, #572]	@ (8005004 <Apply_Network_Settings+0x2b0>)
 8004dc8:	785b      	ldrb	r3, [r3, #1]
 8004dca:	041b      	lsls	r3, r3, #16
 8004dcc:	4319      	orrs	r1, r3
 8004dce:	4b8d      	ldr	r3, [pc, #564]	@ (8005004 <Apply_Network_Settings+0x2b0>)
 8004dd0:	789b      	ldrb	r3, [r3, #2]
 8004dd2:	021b      	lsls	r3, r3, #8
 8004dd4:	430b      	orrs	r3, r1
 8004dd6:	498b      	ldr	r1, [pc, #556]	@ (8005004 <Apply_Network_Settings+0x2b0>)
 8004dd8:	78c9      	ldrb	r1, [r1, #3]
 8004dda:	430b      	orrs	r3, r1
 8004ddc:	0e1b      	lsrs	r3, r3, #24
 8004dde:	4313      	orrs	r3, r2
 8004de0:	60fb      	str	r3, [r7, #12]
    IP4_ADDR(&netmask, last_mask[0], last_mask[1], last_mask[2], last_mask[3]);
 8004de2:	4b89      	ldr	r3, [pc, #548]	@ (8005008 <Apply_Network_Settings+0x2b4>)
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	061a      	lsls	r2, r3, #24
 8004de8:	4b87      	ldr	r3, [pc, #540]	@ (8005008 <Apply_Network_Settings+0x2b4>)
 8004dea:	785b      	ldrb	r3, [r3, #1]
 8004dec:	041b      	lsls	r3, r3, #16
 8004dee:	431a      	orrs	r2, r3
 8004df0:	4b85      	ldr	r3, [pc, #532]	@ (8005008 <Apply_Network_Settings+0x2b4>)
 8004df2:	789b      	ldrb	r3, [r3, #2]
 8004df4:	021b      	lsls	r3, r3, #8
 8004df6:	4313      	orrs	r3, r2
 8004df8:	4a83      	ldr	r2, [pc, #524]	@ (8005008 <Apply_Network_Settings+0x2b4>)
 8004dfa:	78d2      	ldrb	r2, [r2, #3]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	061a      	lsls	r2, r3, #24
 8004e00:	4b81      	ldr	r3, [pc, #516]	@ (8005008 <Apply_Network_Settings+0x2b4>)
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	0619      	lsls	r1, r3, #24
 8004e06:	4b80      	ldr	r3, [pc, #512]	@ (8005008 <Apply_Network_Settings+0x2b4>)
 8004e08:	785b      	ldrb	r3, [r3, #1]
 8004e0a:	041b      	lsls	r3, r3, #16
 8004e0c:	4319      	orrs	r1, r3
 8004e0e:	4b7e      	ldr	r3, [pc, #504]	@ (8005008 <Apply_Network_Settings+0x2b4>)
 8004e10:	789b      	ldrb	r3, [r3, #2]
 8004e12:	021b      	lsls	r3, r3, #8
 8004e14:	430b      	orrs	r3, r1
 8004e16:	497c      	ldr	r1, [pc, #496]	@ (8005008 <Apply_Network_Settings+0x2b4>)
 8004e18:	78c9      	ldrb	r1, [r1, #3]
 8004e1a:	430b      	orrs	r3, r1
 8004e1c:	021b      	lsls	r3, r3, #8
 8004e1e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004e22:	431a      	orrs	r2, r3
 8004e24:	4b78      	ldr	r3, [pc, #480]	@ (8005008 <Apply_Network_Settings+0x2b4>)
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	0619      	lsls	r1, r3, #24
 8004e2a:	4b77      	ldr	r3, [pc, #476]	@ (8005008 <Apply_Network_Settings+0x2b4>)
 8004e2c:	785b      	ldrb	r3, [r3, #1]
 8004e2e:	041b      	lsls	r3, r3, #16
 8004e30:	4319      	orrs	r1, r3
 8004e32:	4b75      	ldr	r3, [pc, #468]	@ (8005008 <Apply_Network_Settings+0x2b4>)
 8004e34:	789b      	ldrb	r3, [r3, #2]
 8004e36:	021b      	lsls	r3, r3, #8
 8004e38:	430b      	orrs	r3, r1
 8004e3a:	4973      	ldr	r1, [pc, #460]	@ (8005008 <Apply_Network_Settings+0x2b4>)
 8004e3c:	78c9      	ldrb	r1, [r1, #3]
 8004e3e:	430b      	orrs	r3, r1
 8004e40:	0a1b      	lsrs	r3, r3, #8
 8004e42:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004e46:	431a      	orrs	r2, r3
 8004e48:	4b6f      	ldr	r3, [pc, #444]	@ (8005008 <Apply_Network_Settings+0x2b4>)
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	0619      	lsls	r1, r3, #24
 8004e4e:	4b6e      	ldr	r3, [pc, #440]	@ (8005008 <Apply_Network_Settings+0x2b4>)
 8004e50:	785b      	ldrb	r3, [r3, #1]
 8004e52:	041b      	lsls	r3, r3, #16
 8004e54:	4319      	orrs	r1, r3
 8004e56:	4b6c      	ldr	r3, [pc, #432]	@ (8005008 <Apply_Network_Settings+0x2b4>)
 8004e58:	789b      	ldrb	r3, [r3, #2]
 8004e5a:	021b      	lsls	r3, r3, #8
 8004e5c:	430b      	orrs	r3, r1
 8004e5e:	496a      	ldr	r1, [pc, #424]	@ (8005008 <Apply_Network_Settings+0x2b4>)
 8004e60:	78c9      	ldrb	r1, [r1, #3]
 8004e62:	430b      	orrs	r3, r1
 8004e64:	0e1b      	lsrs	r3, r3, #24
 8004e66:	4313      	orrs	r3, r2
 8004e68:	60bb      	str	r3, [r7, #8]
    IP4_ADDR(&gw, last_gw[0], last_gw[1], last_gw[2], last_gw[3]);
 8004e6a:	4b68      	ldr	r3, [pc, #416]	@ (800500c <Apply_Network_Settings+0x2b8>)
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	061a      	lsls	r2, r3, #24
 8004e70:	4b66      	ldr	r3, [pc, #408]	@ (800500c <Apply_Network_Settings+0x2b8>)
 8004e72:	785b      	ldrb	r3, [r3, #1]
 8004e74:	041b      	lsls	r3, r3, #16
 8004e76:	431a      	orrs	r2, r3
 8004e78:	4b64      	ldr	r3, [pc, #400]	@ (800500c <Apply_Network_Settings+0x2b8>)
 8004e7a:	789b      	ldrb	r3, [r3, #2]
 8004e7c:	021b      	lsls	r3, r3, #8
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	4a62      	ldr	r2, [pc, #392]	@ (800500c <Apply_Network_Settings+0x2b8>)
 8004e82:	78d2      	ldrb	r2, [r2, #3]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	061a      	lsls	r2, r3, #24
 8004e88:	4b60      	ldr	r3, [pc, #384]	@ (800500c <Apply_Network_Settings+0x2b8>)
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	0619      	lsls	r1, r3, #24
 8004e8e:	4b5f      	ldr	r3, [pc, #380]	@ (800500c <Apply_Network_Settings+0x2b8>)
 8004e90:	785b      	ldrb	r3, [r3, #1]
 8004e92:	041b      	lsls	r3, r3, #16
 8004e94:	4319      	orrs	r1, r3
 8004e96:	4b5d      	ldr	r3, [pc, #372]	@ (800500c <Apply_Network_Settings+0x2b8>)
 8004e98:	789b      	ldrb	r3, [r3, #2]
 8004e9a:	021b      	lsls	r3, r3, #8
 8004e9c:	430b      	orrs	r3, r1
 8004e9e:	495b      	ldr	r1, [pc, #364]	@ (800500c <Apply_Network_Settings+0x2b8>)
 8004ea0:	78c9      	ldrb	r1, [r1, #3]
 8004ea2:	430b      	orrs	r3, r1
 8004ea4:	021b      	lsls	r3, r3, #8
 8004ea6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	4b57      	ldr	r3, [pc, #348]	@ (800500c <Apply_Network_Settings+0x2b8>)
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	0619      	lsls	r1, r3, #24
 8004eb2:	4b56      	ldr	r3, [pc, #344]	@ (800500c <Apply_Network_Settings+0x2b8>)
 8004eb4:	785b      	ldrb	r3, [r3, #1]
 8004eb6:	041b      	lsls	r3, r3, #16
 8004eb8:	4319      	orrs	r1, r3
 8004eba:	4b54      	ldr	r3, [pc, #336]	@ (800500c <Apply_Network_Settings+0x2b8>)
 8004ebc:	789b      	ldrb	r3, [r3, #2]
 8004ebe:	021b      	lsls	r3, r3, #8
 8004ec0:	430b      	orrs	r3, r1
 8004ec2:	4952      	ldr	r1, [pc, #328]	@ (800500c <Apply_Network_Settings+0x2b8>)
 8004ec4:	78c9      	ldrb	r1, [r1, #3]
 8004ec6:	430b      	orrs	r3, r1
 8004ec8:	0a1b      	lsrs	r3, r3, #8
 8004eca:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	4b4e      	ldr	r3, [pc, #312]	@ (800500c <Apply_Network_Settings+0x2b8>)
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	0619      	lsls	r1, r3, #24
 8004ed6:	4b4d      	ldr	r3, [pc, #308]	@ (800500c <Apply_Network_Settings+0x2b8>)
 8004ed8:	785b      	ldrb	r3, [r3, #1]
 8004eda:	041b      	lsls	r3, r3, #16
 8004edc:	4319      	orrs	r1, r3
 8004ede:	4b4b      	ldr	r3, [pc, #300]	@ (800500c <Apply_Network_Settings+0x2b8>)
 8004ee0:	789b      	ldrb	r3, [r3, #2]
 8004ee2:	021b      	lsls	r3, r3, #8
 8004ee4:	430b      	orrs	r3, r1
 8004ee6:	4949      	ldr	r1, [pc, #292]	@ (800500c <Apply_Network_Settings+0x2b8>)
 8004ee8:	78c9      	ldrb	r1, [r1, #3]
 8004eea:	430b      	orrs	r3, r1
 8004eec:	0e1b      	lsrs	r3, r3, #24
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	607b      	str	r3, [r7, #4]

    netif_set_addr(&gnetif, &ip_addr, &netmask, &gw);
 8004ef2:	1d3b      	adds	r3, r7, #4
 8004ef4:	f107 0208 	add.w	r2, r7, #8
 8004ef8:	f107 010c 	add.w	r1, r7, #12
 8004efc:	4844      	ldr	r0, [pc, #272]	@ (8005010 <Apply_Network_Settings+0x2bc>)
 8004efe:	f010 fa03 	bl	8015308 <netif_set_addr>

    printf("Network settings applied:\n");
 8004f02:	4844      	ldr	r0, [pc, #272]	@ (8005014 <Apply_Network_Settings+0x2c0>)
 8004f04:	f01c ff28 	bl	8021d58 <puts>
    printf("IP: %d.%d.%d.%d\n", last_ip[0], last_ip[1], last_ip[2], last_ip[3]);
 8004f08:	4b3e      	ldr	r3, [pc, #248]	@ (8005004 <Apply_Network_Settings+0x2b0>)
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	4b3d      	ldr	r3, [pc, #244]	@ (8005004 <Apply_Network_Settings+0x2b0>)
 8004f10:	785b      	ldrb	r3, [r3, #1]
 8004f12:	461a      	mov	r2, r3
 8004f14:	4b3b      	ldr	r3, [pc, #236]	@ (8005004 <Apply_Network_Settings+0x2b0>)
 8004f16:	789b      	ldrb	r3, [r3, #2]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	4b3a      	ldr	r3, [pc, #232]	@ (8005004 <Apply_Network_Settings+0x2b0>)
 8004f1c:	78db      	ldrb	r3, [r3, #3]
 8004f1e:	9300      	str	r3, [sp, #0]
 8004f20:	4603      	mov	r3, r0
 8004f22:	483d      	ldr	r0, [pc, #244]	@ (8005018 <Apply_Network_Settings+0x2c4>)
 8004f24:	f01c feb0 	bl	8021c88 <iprintf>
    printf("Mask: %d.%d.%d.%d\n", last_mask[0], last_mask[1], last_mask[2], last_mask[3]);
 8004f28:	4b37      	ldr	r3, [pc, #220]	@ (8005008 <Apply_Network_Settings+0x2b4>)
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	4b36      	ldr	r3, [pc, #216]	@ (8005008 <Apply_Network_Settings+0x2b4>)
 8004f30:	785b      	ldrb	r3, [r3, #1]
 8004f32:	461a      	mov	r2, r3
 8004f34:	4b34      	ldr	r3, [pc, #208]	@ (8005008 <Apply_Network_Settings+0x2b4>)
 8004f36:	789b      	ldrb	r3, [r3, #2]
 8004f38:	4618      	mov	r0, r3
 8004f3a:	4b33      	ldr	r3, [pc, #204]	@ (8005008 <Apply_Network_Settings+0x2b4>)
 8004f3c:	78db      	ldrb	r3, [r3, #3]
 8004f3e:	9300      	str	r3, [sp, #0]
 8004f40:	4603      	mov	r3, r0
 8004f42:	4836      	ldr	r0, [pc, #216]	@ (800501c <Apply_Network_Settings+0x2c8>)
 8004f44:	f01c fea0 	bl	8021c88 <iprintf>
    printf("GW: %d.%d.%d.%d\n", last_gw[0], last_gw[1], last_gw[2], last_gw[3]);
 8004f48:	4b30      	ldr	r3, [pc, #192]	@ (800500c <Apply_Network_Settings+0x2b8>)
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	4b2f      	ldr	r3, [pc, #188]	@ (800500c <Apply_Network_Settings+0x2b8>)
 8004f50:	785b      	ldrb	r3, [r3, #1]
 8004f52:	461a      	mov	r2, r3
 8004f54:	4b2d      	ldr	r3, [pc, #180]	@ (800500c <Apply_Network_Settings+0x2b8>)
 8004f56:	789b      	ldrb	r3, [r3, #2]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	4b2c      	ldr	r3, [pc, #176]	@ (800500c <Apply_Network_Settings+0x2b8>)
 8004f5c:	78db      	ldrb	r3, [r3, #3]
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	4603      	mov	r3, r0
 8004f62:	482f      	ldr	r0, [pc, #188]	@ (8005020 <Apply_Network_Settings+0x2cc>)
 8004f64:	f01c fe90 	bl	8021c88 <iprintf>

    /* --- сохраняем в backup-регистры --- */
    IP4_ADDR(&new_ip, last_ip[0], last_ip[1], last_ip[2], last_ip[3]);
 8004f68:	4b26      	ldr	r3, [pc, #152]	@ (8005004 <Apply_Network_Settings+0x2b0>)
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	061a      	lsls	r2, r3, #24
 8004f6e:	4b25      	ldr	r3, [pc, #148]	@ (8005004 <Apply_Network_Settings+0x2b0>)
 8004f70:	785b      	ldrb	r3, [r3, #1]
 8004f72:	041b      	lsls	r3, r3, #16
 8004f74:	431a      	orrs	r2, r3
 8004f76:	4b23      	ldr	r3, [pc, #140]	@ (8005004 <Apply_Network_Settings+0x2b0>)
 8004f78:	789b      	ldrb	r3, [r3, #2]
 8004f7a:	021b      	lsls	r3, r3, #8
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	4a21      	ldr	r2, [pc, #132]	@ (8005004 <Apply_Network_Settings+0x2b0>)
 8004f80:	78d2      	ldrb	r2, [r2, #3]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	061a      	lsls	r2, r3, #24
 8004f86:	4b1f      	ldr	r3, [pc, #124]	@ (8005004 <Apply_Network_Settings+0x2b0>)
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	0619      	lsls	r1, r3, #24
 8004f8c:	4b1d      	ldr	r3, [pc, #116]	@ (8005004 <Apply_Network_Settings+0x2b0>)
 8004f8e:	785b      	ldrb	r3, [r3, #1]
 8004f90:	041b      	lsls	r3, r3, #16
 8004f92:	4319      	orrs	r1, r3
 8004f94:	4b1b      	ldr	r3, [pc, #108]	@ (8005004 <Apply_Network_Settings+0x2b0>)
 8004f96:	789b      	ldrb	r3, [r3, #2]
 8004f98:	021b      	lsls	r3, r3, #8
 8004f9a:	430b      	orrs	r3, r1
 8004f9c:	4919      	ldr	r1, [pc, #100]	@ (8005004 <Apply_Network_Settings+0x2b0>)
 8004f9e:	78c9      	ldrb	r1, [r1, #3]
 8004fa0:	430b      	orrs	r3, r1
 8004fa2:	021b      	lsls	r3, r3, #8
 8004fa4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004fa8:	431a      	orrs	r2, r3
 8004faa:	4b16      	ldr	r3, [pc, #88]	@ (8005004 <Apply_Network_Settings+0x2b0>)
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	0619      	lsls	r1, r3, #24
 8004fb0:	4b14      	ldr	r3, [pc, #80]	@ (8005004 <Apply_Network_Settings+0x2b0>)
 8004fb2:	785b      	ldrb	r3, [r3, #1]
 8004fb4:	041b      	lsls	r3, r3, #16
 8004fb6:	4319      	orrs	r1, r3
 8004fb8:	4b12      	ldr	r3, [pc, #72]	@ (8005004 <Apply_Network_Settings+0x2b0>)
 8004fba:	789b      	ldrb	r3, [r3, #2]
 8004fbc:	021b      	lsls	r3, r3, #8
 8004fbe:	430b      	orrs	r3, r1
 8004fc0:	4910      	ldr	r1, [pc, #64]	@ (8005004 <Apply_Network_Settings+0x2b0>)
 8004fc2:	78c9      	ldrb	r1, [r1, #3]
 8004fc4:	430b      	orrs	r3, r1
 8004fc6:	0a1b      	lsrs	r3, r3, #8
 8004fc8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	4b0d      	ldr	r3, [pc, #52]	@ (8005004 <Apply_Network_Settings+0x2b0>)
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	0619      	lsls	r1, r3, #24
 8004fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8005004 <Apply_Network_Settings+0x2b0>)
 8004fd6:	785b      	ldrb	r3, [r3, #1]
 8004fd8:	041b      	lsls	r3, r3, #16
 8004fda:	4319      	orrs	r1, r3
 8004fdc:	4b09      	ldr	r3, [pc, #36]	@ (8005004 <Apply_Network_Settings+0x2b0>)
 8004fde:	789b      	ldrb	r3, [r3, #2]
 8004fe0:	021b      	lsls	r3, r3, #8
 8004fe2:	430b      	orrs	r3, r1
 8004fe4:	4907      	ldr	r1, [pc, #28]	@ (8005004 <Apply_Network_Settings+0x2b0>)
 8004fe6:	78c9      	ldrb	r1, [r1, #3]
 8004fe8:	430b      	orrs	r3, r1
 8004fea:	0e1b      	lsrs	r3, r3, #24
 8004fec:	4313      	orrs	r3, r2
 8004fee:	4a0d      	ldr	r2, [pc, #52]	@ (8005024 <Apply_Network_Settings+0x2d0>)
 8004ff0:	6013      	str	r3, [r2, #0]
    IP4_ADDR(&new_mask, last_mask[0], last_mask[1], last_mask[2], last_mask[3]);
 8004ff2:	4b05      	ldr	r3, [pc, #20]	@ (8005008 <Apply_Network_Settings+0x2b4>)
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	061a      	lsls	r2, r3, #24
 8004ff8:	4b03      	ldr	r3, [pc, #12]	@ (8005008 <Apply_Network_Settings+0x2b4>)
 8004ffa:	785b      	ldrb	r3, [r3, #1]
 8004ffc:	041b      	lsls	r3, r3, #16
 8004ffe:	431a      	orrs	r2, r3
 8005000:	e012      	b.n	8005028 <Apply_Network_Settings+0x2d4>
 8005002:	bf00      	nop
 8005004:	20000080 	.word	0x20000080
 8005008:	20000084 	.word	0x20000084
 800500c:	20000088 	.word	0x20000088
 8005010:	20005124 	.word	0x20005124
 8005014:	08024ce4 	.word	0x08024ce4
 8005018:	08024d00 	.word	0x08024d00
 800501c:	08024d14 	.word	0x08024d14
 8005020:	08024d28 	.word	0x08024d28
 8005024:	20002bf4 	.word	0x20002bf4
 8005028:	4b51      	ldr	r3, [pc, #324]	@ (8005170 <Apply_Network_Settings+0x41c>)
 800502a:	789b      	ldrb	r3, [r3, #2]
 800502c:	021b      	lsls	r3, r3, #8
 800502e:	4313      	orrs	r3, r2
 8005030:	4a4f      	ldr	r2, [pc, #316]	@ (8005170 <Apply_Network_Settings+0x41c>)
 8005032:	78d2      	ldrb	r2, [r2, #3]
 8005034:	4313      	orrs	r3, r2
 8005036:	061a      	lsls	r2, r3, #24
 8005038:	4b4d      	ldr	r3, [pc, #308]	@ (8005170 <Apply_Network_Settings+0x41c>)
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	0619      	lsls	r1, r3, #24
 800503e:	4b4c      	ldr	r3, [pc, #304]	@ (8005170 <Apply_Network_Settings+0x41c>)
 8005040:	785b      	ldrb	r3, [r3, #1]
 8005042:	041b      	lsls	r3, r3, #16
 8005044:	4319      	orrs	r1, r3
 8005046:	4b4a      	ldr	r3, [pc, #296]	@ (8005170 <Apply_Network_Settings+0x41c>)
 8005048:	789b      	ldrb	r3, [r3, #2]
 800504a:	021b      	lsls	r3, r3, #8
 800504c:	430b      	orrs	r3, r1
 800504e:	4948      	ldr	r1, [pc, #288]	@ (8005170 <Apply_Network_Settings+0x41c>)
 8005050:	78c9      	ldrb	r1, [r1, #3]
 8005052:	430b      	orrs	r3, r1
 8005054:	021b      	lsls	r3, r3, #8
 8005056:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800505a:	431a      	orrs	r2, r3
 800505c:	4b44      	ldr	r3, [pc, #272]	@ (8005170 <Apply_Network_Settings+0x41c>)
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	0619      	lsls	r1, r3, #24
 8005062:	4b43      	ldr	r3, [pc, #268]	@ (8005170 <Apply_Network_Settings+0x41c>)
 8005064:	785b      	ldrb	r3, [r3, #1]
 8005066:	041b      	lsls	r3, r3, #16
 8005068:	4319      	orrs	r1, r3
 800506a:	4b41      	ldr	r3, [pc, #260]	@ (8005170 <Apply_Network_Settings+0x41c>)
 800506c:	789b      	ldrb	r3, [r3, #2]
 800506e:	021b      	lsls	r3, r3, #8
 8005070:	430b      	orrs	r3, r1
 8005072:	493f      	ldr	r1, [pc, #252]	@ (8005170 <Apply_Network_Settings+0x41c>)
 8005074:	78c9      	ldrb	r1, [r1, #3]
 8005076:	430b      	orrs	r3, r1
 8005078:	0a1b      	lsrs	r3, r3, #8
 800507a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800507e:	431a      	orrs	r2, r3
 8005080:	4b3b      	ldr	r3, [pc, #236]	@ (8005170 <Apply_Network_Settings+0x41c>)
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	0619      	lsls	r1, r3, #24
 8005086:	4b3a      	ldr	r3, [pc, #232]	@ (8005170 <Apply_Network_Settings+0x41c>)
 8005088:	785b      	ldrb	r3, [r3, #1]
 800508a:	041b      	lsls	r3, r3, #16
 800508c:	4319      	orrs	r1, r3
 800508e:	4b38      	ldr	r3, [pc, #224]	@ (8005170 <Apply_Network_Settings+0x41c>)
 8005090:	789b      	ldrb	r3, [r3, #2]
 8005092:	021b      	lsls	r3, r3, #8
 8005094:	430b      	orrs	r3, r1
 8005096:	4936      	ldr	r1, [pc, #216]	@ (8005170 <Apply_Network_Settings+0x41c>)
 8005098:	78c9      	ldrb	r1, [r1, #3]
 800509a:	430b      	orrs	r3, r1
 800509c:	0e1b      	lsrs	r3, r3, #24
 800509e:	4313      	orrs	r3, r2
 80050a0:	4a34      	ldr	r2, [pc, #208]	@ (8005174 <Apply_Network_Settings+0x420>)
 80050a2:	6013      	str	r3, [r2, #0]
    IP4_ADDR(&new_gw, last_gw[0], last_gw[1], last_gw[2], last_gw[3]);
 80050a4:	4b34      	ldr	r3, [pc, #208]	@ (8005178 <Apply_Network_Settings+0x424>)
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	061a      	lsls	r2, r3, #24
 80050aa:	4b33      	ldr	r3, [pc, #204]	@ (8005178 <Apply_Network_Settings+0x424>)
 80050ac:	785b      	ldrb	r3, [r3, #1]
 80050ae:	041b      	lsls	r3, r3, #16
 80050b0:	431a      	orrs	r2, r3
 80050b2:	4b31      	ldr	r3, [pc, #196]	@ (8005178 <Apply_Network_Settings+0x424>)
 80050b4:	789b      	ldrb	r3, [r3, #2]
 80050b6:	021b      	lsls	r3, r3, #8
 80050b8:	4313      	orrs	r3, r2
 80050ba:	4a2f      	ldr	r2, [pc, #188]	@ (8005178 <Apply_Network_Settings+0x424>)
 80050bc:	78d2      	ldrb	r2, [r2, #3]
 80050be:	4313      	orrs	r3, r2
 80050c0:	061a      	lsls	r2, r3, #24
 80050c2:	4b2d      	ldr	r3, [pc, #180]	@ (8005178 <Apply_Network_Settings+0x424>)
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	0619      	lsls	r1, r3, #24
 80050c8:	4b2b      	ldr	r3, [pc, #172]	@ (8005178 <Apply_Network_Settings+0x424>)
 80050ca:	785b      	ldrb	r3, [r3, #1]
 80050cc:	041b      	lsls	r3, r3, #16
 80050ce:	4319      	orrs	r1, r3
 80050d0:	4b29      	ldr	r3, [pc, #164]	@ (8005178 <Apply_Network_Settings+0x424>)
 80050d2:	789b      	ldrb	r3, [r3, #2]
 80050d4:	021b      	lsls	r3, r3, #8
 80050d6:	430b      	orrs	r3, r1
 80050d8:	4927      	ldr	r1, [pc, #156]	@ (8005178 <Apply_Network_Settings+0x424>)
 80050da:	78c9      	ldrb	r1, [r1, #3]
 80050dc:	430b      	orrs	r3, r1
 80050de:	021b      	lsls	r3, r3, #8
 80050e0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80050e4:	431a      	orrs	r2, r3
 80050e6:	4b24      	ldr	r3, [pc, #144]	@ (8005178 <Apply_Network_Settings+0x424>)
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	0619      	lsls	r1, r3, #24
 80050ec:	4b22      	ldr	r3, [pc, #136]	@ (8005178 <Apply_Network_Settings+0x424>)
 80050ee:	785b      	ldrb	r3, [r3, #1]
 80050f0:	041b      	lsls	r3, r3, #16
 80050f2:	4319      	orrs	r1, r3
 80050f4:	4b20      	ldr	r3, [pc, #128]	@ (8005178 <Apply_Network_Settings+0x424>)
 80050f6:	789b      	ldrb	r3, [r3, #2]
 80050f8:	021b      	lsls	r3, r3, #8
 80050fa:	430b      	orrs	r3, r1
 80050fc:	491e      	ldr	r1, [pc, #120]	@ (8005178 <Apply_Network_Settings+0x424>)
 80050fe:	78c9      	ldrb	r1, [r1, #3]
 8005100:	430b      	orrs	r3, r1
 8005102:	0a1b      	lsrs	r3, r3, #8
 8005104:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005108:	431a      	orrs	r2, r3
 800510a:	4b1b      	ldr	r3, [pc, #108]	@ (8005178 <Apply_Network_Settings+0x424>)
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	0619      	lsls	r1, r3, #24
 8005110:	4b19      	ldr	r3, [pc, #100]	@ (8005178 <Apply_Network_Settings+0x424>)
 8005112:	785b      	ldrb	r3, [r3, #1]
 8005114:	041b      	lsls	r3, r3, #16
 8005116:	4319      	orrs	r1, r3
 8005118:	4b17      	ldr	r3, [pc, #92]	@ (8005178 <Apply_Network_Settings+0x424>)
 800511a:	789b      	ldrb	r3, [r3, #2]
 800511c:	021b      	lsls	r3, r3, #8
 800511e:	430b      	orrs	r3, r1
 8005120:	4915      	ldr	r1, [pc, #84]	@ (8005178 <Apply_Network_Settings+0x424>)
 8005122:	78c9      	ldrb	r1, [r1, #3]
 8005124:	430b      	orrs	r3, r1
 8005126:	0e1b      	lsrs	r3, r3, #24
 8005128:	4313      	orrs	r3, r2
 800512a:	4a14      	ldr	r2, [pc, #80]	@ (800517c <Apply_Network_Settings+0x428>)
 800512c:	6013      	str	r3, [r2, #0]
    new_dhcp_enabled = dhcp_on ? 1 : 0;
 800512e:	4b14      	ldr	r3, [pc, #80]	@ (8005180 <Apply_Network_Settings+0x42c>)
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	bf14      	ite	ne
 8005136:	2301      	movne	r3, #1
 8005138:	2300      	moveq	r3, #0
 800513a:	b2db      	uxtb	r3, r3
 800513c:	461a      	mov	r2, r3
 800513e:	4b11      	ldr	r3, [pc, #68]	@ (8005184 <Apply_Network_Settings+0x430>)
 8005140:	701a      	strb	r2, [r3, #0]
    apply_network_settings = 1;  // чтобы main тоже увидел изменение
 8005142:	4b11      	ldr	r3, [pc, #68]	@ (8005188 <Apply_Network_Settings+0x434>)
 8005144:	2201      	movs	r2, #1
 8005146:	701a      	strb	r2, [r3, #0]

    /* Сохраняем в backup (используем текущие SNMP community из main) */
    extern char snmp_read[32], snmp_write[32], snmp_trap[32];
    Settings_Save_To_Backup(new_ip, new_mask, new_gw, new_dhcp_enabled,
 8005148:	4b0e      	ldr	r3, [pc, #56]	@ (8005184 <Apply_Network_Settings+0x430>)
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	4a0b      	ldr	r2, [pc, #44]	@ (800517c <Apply_Network_Settings+0x428>)
 800514e:	4909      	ldr	r1, [pc, #36]	@ (8005174 <Apply_Network_Settings+0x420>)
 8005150:	480e      	ldr	r0, [pc, #56]	@ (800518c <Apply_Network_Settings+0x438>)
 8005152:	4c0f      	ldr	r4, [pc, #60]	@ (8005190 <Apply_Network_Settings+0x43c>)
 8005154:	9402      	str	r4, [sp, #8]
 8005156:	4c0f      	ldr	r4, [pc, #60]	@ (8005194 <Apply_Network_Settings+0x440>)
 8005158:	9401      	str	r4, [sp, #4]
 800515a:	4c0f      	ldr	r4, [pc, #60]	@ (8005198 <Apply_Network_Settings+0x444>)
 800515c:	9400      	str	r4, [sp, #0]
 800515e:	6812      	ldr	r2, [r2, #0]
 8005160:	6809      	ldr	r1, [r1, #0]
 8005162:	6800      	ldr	r0, [r0, #0]
 8005164:	f7fe f94e 	bl	8003404 <Settings_Save_To_Backup>
                            snmp_read, snmp_write, snmp_trap);
}
 8005168:	bf00      	nop
 800516a:	3714      	adds	r7, #20
 800516c:	46bd      	mov	sp, r7
 800516e:	bd90      	pop	{r4, r7, pc}
 8005170:	20000084 	.word	0x20000084
 8005174:	20002bf8 	.word	0x20002bf8
 8005178:	20000088 	.word	0x20000088
 800517c:	20002bfc 	.word	0x20002bfc
 8005180:	200000c4 	.word	0x200000c4
 8005184:	20002c00 	.word	0x20002c00
 8005188:	20002c01 	.word	0x20002c01
 800518c:	20002bf4 	.word	0x20002bf4
 8005190:	20000054 	.word	0x20000054
 8005194:	20000034 	.word	0x20000034
 8005198:	20000014 	.word	0x20000014

0800519c <DHCP_Apply>:


// --- Применение DHCP ---
static void DHCP_Apply()
{
 800519c:	b590      	push	{r4, r7, lr}
 800519e:	b085      	sub	sp, #20
 80051a0:	af04      	add	r7, sp, #16
    if (dhcp_on)
 80051a2:	4b81      	ldr	r3, [pc, #516]	@ (80053a8 <DHCP_Apply+0x20c>)
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d006      	beq.n	80051b8 <DHCP_Apply+0x1c>
    {
        dhcp_start(&gnetif);
 80051aa:	4880      	ldr	r0, [pc, #512]	@ (80053ac <DHCP_Apply+0x210>)
 80051ac:	f017 fcd8 	bl	801cb60 <dhcp_start>
        printf("DHCP enabled\n");
 80051b0:	487f      	ldr	r0, [pc, #508]	@ (80053b0 <DHCP_Apply+0x214>)
 80051b2:	f01c fdd1 	bl	8021d58 <puts>
 80051b6:	e007      	b.n	80051c8 <DHCP_Apply+0x2c>
    }
    else
    {
        dhcp_stop(&gnetif);
 80051b8:	487c      	ldr	r0, [pc, #496]	@ (80053ac <DHCP_Apply+0x210>)
 80051ba:	f018 f981 	bl	801d4c0 <dhcp_stop>
        Apply_Network_Settings();
 80051be:	f7ff fdc9 	bl	8004d54 <Apply_Network_Settings>
        printf("DHCP disabled, static IP applied\n");
 80051c2:	487c      	ldr	r0, [pc, #496]	@ (80053b4 <DHCP_Apply+0x218>)
 80051c4:	f01c fdc8 	bl	8021d58 <puts>
    }

    /* --- сохраняем флаг DHCP в backup --- */
    IP4_ADDR(&new_ip, last_ip[0], last_ip[1], last_ip[2], last_ip[3]);
 80051c8:	4b7b      	ldr	r3, [pc, #492]	@ (80053b8 <DHCP_Apply+0x21c>)
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	061a      	lsls	r2, r3, #24
 80051ce:	4b7a      	ldr	r3, [pc, #488]	@ (80053b8 <DHCP_Apply+0x21c>)
 80051d0:	785b      	ldrb	r3, [r3, #1]
 80051d2:	041b      	lsls	r3, r3, #16
 80051d4:	431a      	orrs	r2, r3
 80051d6:	4b78      	ldr	r3, [pc, #480]	@ (80053b8 <DHCP_Apply+0x21c>)
 80051d8:	789b      	ldrb	r3, [r3, #2]
 80051da:	021b      	lsls	r3, r3, #8
 80051dc:	4313      	orrs	r3, r2
 80051de:	4a76      	ldr	r2, [pc, #472]	@ (80053b8 <DHCP_Apply+0x21c>)
 80051e0:	78d2      	ldrb	r2, [r2, #3]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	061a      	lsls	r2, r3, #24
 80051e6:	4b74      	ldr	r3, [pc, #464]	@ (80053b8 <DHCP_Apply+0x21c>)
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	0619      	lsls	r1, r3, #24
 80051ec:	4b72      	ldr	r3, [pc, #456]	@ (80053b8 <DHCP_Apply+0x21c>)
 80051ee:	785b      	ldrb	r3, [r3, #1]
 80051f0:	041b      	lsls	r3, r3, #16
 80051f2:	4319      	orrs	r1, r3
 80051f4:	4b70      	ldr	r3, [pc, #448]	@ (80053b8 <DHCP_Apply+0x21c>)
 80051f6:	789b      	ldrb	r3, [r3, #2]
 80051f8:	021b      	lsls	r3, r3, #8
 80051fa:	430b      	orrs	r3, r1
 80051fc:	496e      	ldr	r1, [pc, #440]	@ (80053b8 <DHCP_Apply+0x21c>)
 80051fe:	78c9      	ldrb	r1, [r1, #3]
 8005200:	430b      	orrs	r3, r1
 8005202:	021b      	lsls	r3, r3, #8
 8005204:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005208:	431a      	orrs	r2, r3
 800520a:	4b6b      	ldr	r3, [pc, #428]	@ (80053b8 <DHCP_Apply+0x21c>)
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	0619      	lsls	r1, r3, #24
 8005210:	4b69      	ldr	r3, [pc, #420]	@ (80053b8 <DHCP_Apply+0x21c>)
 8005212:	785b      	ldrb	r3, [r3, #1]
 8005214:	041b      	lsls	r3, r3, #16
 8005216:	4319      	orrs	r1, r3
 8005218:	4b67      	ldr	r3, [pc, #412]	@ (80053b8 <DHCP_Apply+0x21c>)
 800521a:	789b      	ldrb	r3, [r3, #2]
 800521c:	021b      	lsls	r3, r3, #8
 800521e:	430b      	orrs	r3, r1
 8005220:	4965      	ldr	r1, [pc, #404]	@ (80053b8 <DHCP_Apply+0x21c>)
 8005222:	78c9      	ldrb	r1, [r1, #3]
 8005224:	430b      	orrs	r3, r1
 8005226:	0a1b      	lsrs	r3, r3, #8
 8005228:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800522c:	431a      	orrs	r2, r3
 800522e:	4b62      	ldr	r3, [pc, #392]	@ (80053b8 <DHCP_Apply+0x21c>)
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	0619      	lsls	r1, r3, #24
 8005234:	4b60      	ldr	r3, [pc, #384]	@ (80053b8 <DHCP_Apply+0x21c>)
 8005236:	785b      	ldrb	r3, [r3, #1]
 8005238:	041b      	lsls	r3, r3, #16
 800523a:	4319      	orrs	r1, r3
 800523c:	4b5e      	ldr	r3, [pc, #376]	@ (80053b8 <DHCP_Apply+0x21c>)
 800523e:	789b      	ldrb	r3, [r3, #2]
 8005240:	021b      	lsls	r3, r3, #8
 8005242:	430b      	orrs	r3, r1
 8005244:	495c      	ldr	r1, [pc, #368]	@ (80053b8 <DHCP_Apply+0x21c>)
 8005246:	78c9      	ldrb	r1, [r1, #3]
 8005248:	430b      	orrs	r3, r1
 800524a:	0e1b      	lsrs	r3, r3, #24
 800524c:	4313      	orrs	r3, r2
 800524e:	4a5b      	ldr	r2, [pc, #364]	@ (80053bc <DHCP_Apply+0x220>)
 8005250:	6013      	str	r3, [r2, #0]
    IP4_ADDR(&new_mask, last_mask[0], last_mask[1], last_mask[2], last_mask[3]);
 8005252:	4b5b      	ldr	r3, [pc, #364]	@ (80053c0 <DHCP_Apply+0x224>)
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	061a      	lsls	r2, r3, #24
 8005258:	4b59      	ldr	r3, [pc, #356]	@ (80053c0 <DHCP_Apply+0x224>)
 800525a:	785b      	ldrb	r3, [r3, #1]
 800525c:	041b      	lsls	r3, r3, #16
 800525e:	431a      	orrs	r2, r3
 8005260:	4b57      	ldr	r3, [pc, #348]	@ (80053c0 <DHCP_Apply+0x224>)
 8005262:	789b      	ldrb	r3, [r3, #2]
 8005264:	021b      	lsls	r3, r3, #8
 8005266:	4313      	orrs	r3, r2
 8005268:	4a55      	ldr	r2, [pc, #340]	@ (80053c0 <DHCP_Apply+0x224>)
 800526a:	78d2      	ldrb	r2, [r2, #3]
 800526c:	4313      	orrs	r3, r2
 800526e:	061a      	lsls	r2, r3, #24
 8005270:	4b53      	ldr	r3, [pc, #332]	@ (80053c0 <DHCP_Apply+0x224>)
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	0619      	lsls	r1, r3, #24
 8005276:	4b52      	ldr	r3, [pc, #328]	@ (80053c0 <DHCP_Apply+0x224>)
 8005278:	785b      	ldrb	r3, [r3, #1]
 800527a:	041b      	lsls	r3, r3, #16
 800527c:	4319      	orrs	r1, r3
 800527e:	4b50      	ldr	r3, [pc, #320]	@ (80053c0 <DHCP_Apply+0x224>)
 8005280:	789b      	ldrb	r3, [r3, #2]
 8005282:	021b      	lsls	r3, r3, #8
 8005284:	430b      	orrs	r3, r1
 8005286:	494e      	ldr	r1, [pc, #312]	@ (80053c0 <DHCP_Apply+0x224>)
 8005288:	78c9      	ldrb	r1, [r1, #3]
 800528a:	430b      	orrs	r3, r1
 800528c:	021b      	lsls	r3, r3, #8
 800528e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005292:	431a      	orrs	r2, r3
 8005294:	4b4a      	ldr	r3, [pc, #296]	@ (80053c0 <DHCP_Apply+0x224>)
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	0619      	lsls	r1, r3, #24
 800529a:	4b49      	ldr	r3, [pc, #292]	@ (80053c0 <DHCP_Apply+0x224>)
 800529c:	785b      	ldrb	r3, [r3, #1]
 800529e:	041b      	lsls	r3, r3, #16
 80052a0:	4319      	orrs	r1, r3
 80052a2:	4b47      	ldr	r3, [pc, #284]	@ (80053c0 <DHCP_Apply+0x224>)
 80052a4:	789b      	ldrb	r3, [r3, #2]
 80052a6:	021b      	lsls	r3, r3, #8
 80052a8:	430b      	orrs	r3, r1
 80052aa:	4945      	ldr	r1, [pc, #276]	@ (80053c0 <DHCP_Apply+0x224>)
 80052ac:	78c9      	ldrb	r1, [r1, #3]
 80052ae:	430b      	orrs	r3, r1
 80052b0:	0a1b      	lsrs	r3, r3, #8
 80052b2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80052b6:	431a      	orrs	r2, r3
 80052b8:	4b41      	ldr	r3, [pc, #260]	@ (80053c0 <DHCP_Apply+0x224>)
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	0619      	lsls	r1, r3, #24
 80052be:	4b40      	ldr	r3, [pc, #256]	@ (80053c0 <DHCP_Apply+0x224>)
 80052c0:	785b      	ldrb	r3, [r3, #1]
 80052c2:	041b      	lsls	r3, r3, #16
 80052c4:	4319      	orrs	r1, r3
 80052c6:	4b3e      	ldr	r3, [pc, #248]	@ (80053c0 <DHCP_Apply+0x224>)
 80052c8:	789b      	ldrb	r3, [r3, #2]
 80052ca:	021b      	lsls	r3, r3, #8
 80052cc:	430b      	orrs	r3, r1
 80052ce:	493c      	ldr	r1, [pc, #240]	@ (80053c0 <DHCP_Apply+0x224>)
 80052d0:	78c9      	ldrb	r1, [r1, #3]
 80052d2:	430b      	orrs	r3, r1
 80052d4:	0e1b      	lsrs	r3, r3, #24
 80052d6:	4313      	orrs	r3, r2
 80052d8:	4a3a      	ldr	r2, [pc, #232]	@ (80053c4 <DHCP_Apply+0x228>)
 80052da:	6013      	str	r3, [r2, #0]
    IP4_ADDR(&new_gw, last_gw[0], last_gw[1], last_gw[2], last_gw[3]);
 80052dc:	4b3a      	ldr	r3, [pc, #232]	@ (80053c8 <DHCP_Apply+0x22c>)
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	061a      	lsls	r2, r3, #24
 80052e2:	4b39      	ldr	r3, [pc, #228]	@ (80053c8 <DHCP_Apply+0x22c>)
 80052e4:	785b      	ldrb	r3, [r3, #1]
 80052e6:	041b      	lsls	r3, r3, #16
 80052e8:	431a      	orrs	r2, r3
 80052ea:	4b37      	ldr	r3, [pc, #220]	@ (80053c8 <DHCP_Apply+0x22c>)
 80052ec:	789b      	ldrb	r3, [r3, #2]
 80052ee:	021b      	lsls	r3, r3, #8
 80052f0:	4313      	orrs	r3, r2
 80052f2:	4a35      	ldr	r2, [pc, #212]	@ (80053c8 <DHCP_Apply+0x22c>)
 80052f4:	78d2      	ldrb	r2, [r2, #3]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	061a      	lsls	r2, r3, #24
 80052fa:	4b33      	ldr	r3, [pc, #204]	@ (80053c8 <DHCP_Apply+0x22c>)
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	0619      	lsls	r1, r3, #24
 8005300:	4b31      	ldr	r3, [pc, #196]	@ (80053c8 <DHCP_Apply+0x22c>)
 8005302:	785b      	ldrb	r3, [r3, #1]
 8005304:	041b      	lsls	r3, r3, #16
 8005306:	4319      	orrs	r1, r3
 8005308:	4b2f      	ldr	r3, [pc, #188]	@ (80053c8 <DHCP_Apply+0x22c>)
 800530a:	789b      	ldrb	r3, [r3, #2]
 800530c:	021b      	lsls	r3, r3, #8
 800530e:	430b      	orrs	r3, r1
 8005310:	492d      	ldr	r1, [pc, #180]	@ (80053c8 <DHCP_Apply+0x22c>)
 8005312:	78c9      	ldrb	r1, [r1, #3]
 8005314:	430b      	orrs	r3, r1
 8005316:	021b      	lsls	r3, r3, #8
 8005318:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800531c:	431a      	orrs	r2, r3
 800531e:	4b2a      	ldr	r3, [pc, #168]	@ (80053c8 <DHCP_Apply+0x22c>)
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	0619      	lsls	r1, r3, #24
 8005324:	4b28      	ldr	r3, [pc, #160]	@ (80053c8 <DHCP_Apply+0x22c>)
 8005326:	785b      	ldrb	r3, [r3, #1]
 8005328:	041b      	lsls	r3, r3, #16
 800532a:	4319      	orrs	r1, r3
 800532c:	4b26      	ldr	r3, [pc, #152]	@ (80053c8 <DHCP_Apply+0x22c>)
 800532e:	789b      	ldrb	r3, [r3, #2]
 8005330:	021b      	lsls	r3, r3, #8
 8005332:	430b      	orrs	r3, r1
 8005334:	4924      	ldr	r1, [pc, #144]	@ (80053c8 <DHCP_Apply+0x22c>)
 8005336:	78c9      	ldrb	r1, [r1, #3]
 8005338:	430b      	orrs	r3, r1
 800533a:	0a1b      	lsrs	r3, r3, #8
 800533c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005340:	431a      	orrs	r2, r3
 8005342:	4b21      	ldr	r3, [pc, #132]	@ (80053c8 <DHCP_Apply+0x22c>)
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	0619      	lsls	r1, r3, #24
 8005348:	4b1f      	ldr	r3, [pc, #124]	@ (80053c8 <DHCP_Apply+0x22c>)
 800534a:	785b      	ldrb	r3, [r3, #1]
 800534c:	041b      	lsls	r3, r3, #16
 800534e:	4319      	orrs	r1, r3
 8005350:	4b1d      	ldr	r3, [pc, #116]	@ (80053c8 <DHCP_Apply+0x22c>)
 8005352:	789b      	ldrb	r3, [r3, #2]
 8005354:	021b      	lsls	r3, r3, #8
 8005356:	430b      	orrs	r3, r1
 8005358:	491b      	ldr	r1, [pc, #108]	@ (80053c8 <DHCP_Apply+0x22c>)
 800535a:	78c9      	ldrb	r1, [r1, #3]
 800535c:	430b      	orrs	r3, r1
 800535e:	0e1b      	lsrs	r3, r3, #24
 8005360:	4313      	orrs	r3, r2
 8005362:	4a1a      	ldr	r2, [pc, #104]	@ (80053cc <DHCP_Apply+0x230>)
 8005364:	6013      	str	r3, [r2, #0]
    new_dhcp_enabled = dhcp_on ? 1 : 0;
 8005366:	4b10      	ldr	r3, [pc, #64]	@ (80053a8 <DHCP_Apply+0x20c>)
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	bf14      	ite	ne
 800536e:	2301      	movne	r3, #1
 8005370:	2300      	moveq	r3, #0
 8005372:	b2db      	uxtb	r3, r3
 8005374:	461a      	mov	r2, r3
 8005376:	4b16      	ldr	r3, [pc, #88]	@ (80053d0 <DHCP_Apply+0x234>)
 8005378:	701a      	strb	r2, [r3, #0]
    apply_network_settings = 1;
 800537a:	4b16      	ldr	r3, [pc, #88]	@ (80053d4 <DHCP_Apply+0x238>)
 800537c:	2201      	movs	r2, #1
 800537e:	701a      	strb	r2, [r3, #0]

    extern char snmp_read[32], snmp_write[32], snmp_trap[32];
    Settings_Save_To_Backup(new_ip, new_mask, new_gw, new_dhcp_enabled,
 8005380:	4b13      	ldr	r3, [pc, #76]	@ (80053d0 <DHCP_Apply+0x234>)
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	4a11      	ldr	r2, [pc, #68]	@ (80053cc <DHCP_Apply+0x230>)
 8005386:	490f      	ldr	r1, [pc, #60]	@ (80053c4 <DHCP_Apply+0x228>)
 8005388:	480c      	ldr	r0, [pc, #48]	@ (80053bc <DHCP_Apply+0x220>)
 800538a:	4c13      	ldr	r4, [pc, #76]	@ (80053d8 <DHCP_Apply+0x23c>)
 800538c:	9402      	str	r4, [sp, #8]
 800538e:	4c13      	ldr	r4, [pc, #76]	@ (80053dc <DHCP_Apply+0x240>)
 8005390:	9401      	str	r4, [sp, #4]
 8005392:	4c13      	ldr	r4, [pc, #76]	@ (80053e0 <DHCP_Apply+0x244>)
 8005394:	9400      	str	r4, [sp, #0]
 8005396:	6812      	ldr	r2, [r2, #0]
 8005398:	6809      	ldr	r1, [r1, #0]
 800539a:	6800      	ldr	r0, [r0, #0]
 800539c:	f7fe f832 	bl	8003404 <Settings_Save_To_Backup>
                            snmp_read, snmp_write, snmp_trap);
}
 80053a0:	bf00      	nop
 80053a2:	3704      	adds	r7, #4
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd90      	pop	{r4, r7, pc}
 80053a8:	200000c4 	.word	0x200000c4
 80053ac:	20005124 	.word	0x20005124
 80053b0:	08024d3c 	.word	0x08024d3c
 80053b4:	08024d4c 	.word	0x08024d4c
 80053b8:	20000080 	.word	0x20000080
 80053bc:	20002bf4 	.word	0x20002bf4
 80053c0:	20000084 	.word	0x20000084
 80053c4:	20002bf8 	.word	0x20002bf8
 80053c8:	20000088 	.word	0x20000088
 80053cc:	20002bfc 	.word	0x20002bfc
 80053d0:	20002c00 	.word	0x20002c00
 80053d4:	20002c01 	.word	0x20002c01
 80053d8:	20000054 	.word	0x20000054
 80053dc:	20000034 	.word	0x20000034
 80053e0:	20000014 	.word	0x20000014

080053e4 <OLED_Confirm>:


// --- Подтверждение действий ---
static bool OLED_Confirm(const char *msg)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af02      	add	r7, sp, #8
 80053ea:	6078      	str	r0, [r7, #4]
    ssd1306_Fill(Black);
 80053ec:	2000      	movs	r0, #0
 80053ee:	f000 fd2d 	bl	8005e4c <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 80053f2:	2100      	movs	r1, #0
 80053f4:	2000      	movs	r0, #0
 80053f6:	f000 fe71 	bl	80060dc <ssd1306_SetCursor>
    ssd1306_WriteString((char*)msg, *menu_font, White);
 80053fa:	4b23      	ldr	r3, [pc, #140]	@ (8005488 <OLED_Confirm+0xa4>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2201      	movs	r2, #1
 8005400:	9200      	str	r2, [sp, #0]
 8005402:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 fe43 	bl	8006090 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 16);
 800540a:	2110      	movs	r1, #16
 800540c:	2000      	movs	r0, #0
 800540e:	f000 fe65 	bl	80060dc <ssd1306_SetCursor>
    ssd1306_WriteString("Middle=OK", *menu_font, White);
 8005412:	4b1d      	ldr	r3, [pc, #116]	@ (8005488 <OLED_Confirm+0xa4>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2201      	movs	r2, #1
 8005418:	9200      	str	r2, [sp, #0]
 800541a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800541c:	481b      	ldr	r0, [pc, #108]	@ (800548c <OLED_Confirm+0xa8>)
 800541e:	f000 fe37 	bl	8006090 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 26);
 8005422:	211a      	movs	r1, #26
 8005424:	2000      	movs	r0, #0
 8005426:	f000 fe59 	bl	80060dc <ssd1306_SetCursor>
    ssd1306_WriteString("Left/Right=Cancel", *menu_font, White);
 800542a:	4b17      	ldr	r3, [pc, #92]	@ (8005488 <OLED_Confirm+0xa4>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2201      	movs	r2, #1
 8005430:	9200      	str	r2, [sp, #0]
 8005432:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005434:	4816      	ldr	r0, [pc, #88]	@ (8005490 <OLED_Confirm+0xac>)
 8005436:	f000 fe2b 	bl	8006090 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 800543a:	f000 fd1f 	bl	8005e7c <ssd1306_UpdateScreen>

    // Ждём нажатия
    while(1)
    {
        update_activity_time();
 800543e:	f000 f9a7 	bl	8005790 <update_activity_time>

        if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == GPIO_PIN_RESET)
 8005442:	2104      	movs	r1, #4
 8005444:	4813      	ldr	r0, [pc, #76]	@ (8005494 <OLED_Confirm+0xb0>)
 8005446:	f003 fe73 	bl	8009130 <HAL_GPIO_ReadPin>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <OLED_Confirm+0x70>
            return true;
 8005450:	2301      	movs	r3, #1
 8005452:	e015      	b.n	8005480 <OLED_Confirm+0x9c>
        if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1) == GPIO_PIN_RESET)
 8005454:	2102      	movs	r1, #2
 8005456:	480f      	ldr	r0, [pc, #60]	@ (8005494 <OLED_Confirm+0xb0>)
 8005458:	f003 fe6a 	bl	8009130 <HAL_GPIO_ReadPin>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <OLED_Confirm+0x82>
            return false;
 8005462:	2300      	movs	r3, #0
 8005464:	e00c      	b.n	8005480 <OLED_Confirm+0x9c>
        if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3) == GPIO_PIN_RESET)
 8005466:	2108      	movs	r1, #8
 8005468:	480a      	ldr	r0, [pc, #40]	@ (8005494 <OLED_Confirm+0xb0>)
 800546a:	f003 fe61 	bl	8009130 <HAL_GPIO_ReadPin>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <OLED_Confirm+0x94>
            return false;
 8005474:	2300      	movs	r3, #0
 8005476:	e003      	b.n	8005480 <OLED_Confirm+0x9c>

        // Добавляем небольшую задержку для уменьшения нагрузки на CPU
        HAL_Delay(50);
 8005478:	2032      	movs	r0, #50	@ 0x32
 800547a:	f001 f86f 	bl	800655c <HAL_Delay>
        update_activity_time();
 800547e:	e7de      	b.n	800543e <OLED_Confirm+0x5a>
    }
}
 8005480:	4618      	mov	r0, r3
 8005482:	3708      	adds	r7, #8
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	200000a8 	.word	0x200000a8
 800548c:	08024d70 	.word	0x08024d70
 8005490:	08024d7c 	.word	0x08024d7c
 8005494:	40020c00 	.word	0x40020c00

08005498 <OLED_Settings_Draw>:

// Рисуем меню
void OLED_Settings_Draw(void)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b08a      	sub	sp, #40	@ 0x28
 800549c:	af02      	add	r7, sp, #8
    if(confirm_active) {
 800549e:	4b40      	ldr	r3, [pc, #256]	@ (80055a0 <OLED_Settings_Draw+0x108>)
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d002      	beq.n	80054ac <OLED_Settings_Draw+0x14>
        OLED_Draw_Confirm();
 80054a6:	f7ff fb8f 	bl	8004bc8 <OLED_Draw_Confirm>
 80054aa:	e075      	b.n	8005598 <OLED_Settings_Draw+0x100>
        return;
    }

    ssd1306_Fill(Black);
 80054ac:	2000      	movs	r0, #0
 80054ae:	f000 fccd 	bl	8005e4c <ssd1306_Fill>
    const int SW = SSD1306_ROTATED_WIDTH;
 80054b2:	2340      	movs	r3, #64	@ 0x40
 80054b4:	613b      	str	r3, [r7, #16]

    // Заголовок
    const char title[] = "Settings";
 80054b6:	4a3b      	ldr	r2, [pc, #236]	@ (80055a4 <OLED_Settings_Draw+0x10c>)
 80054b8:	1d3b      	adds	r3, r7, #4
 80054ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80054bc:	c303      	stmia	r3!, {r0, r1}
 80054be:	701a      	strb	r2, [r3, #0]
    int title_x = (SW / 2) - ((int)strlen(title) * menu_font->width / 2);
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	0fda      	lsrs	r2, r3, #31
 80054c4:	4413      	add	r3, r2
 80054c6:	105b      	asrs	r3, r3, #1
 80054c8:	461a      	mov	r2, r3
 80054ca:	4b37      	ldr	r3, [pc, #220]	@ (80055a8 <OLED_Settings_Draw+0x110>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	61fb      	str	r3, [r7, #28]
    if(title_x < 0) title_x = 0;
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	da01      	bge.n	80054e0 <OLED_Settings_Draw+0x48>
 80054dc:	2300      	movs	r3, #0
 80054de:	61fb      	str	r3, [r7, #28]
    ssd1306_SetCursor(title_x, 2);
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2102      	movs	r1, #2
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 fdf8 	bl	80060dc <ssd1306_SetCursor>
    ssd1306_WriteString((char*)title, *menu_font, White);
 80054ec:	4b2e      	ldr	r3, [pc, #184]	@ (80055a8 <OLED_Settings_Draw+0x110>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	1d38      	adds	r0, r7, #4
 80054f2:	2201      	movs	r2, #1
 80054f4:	9200      	str	r2, [sp, #0]
 80054f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054f8:	f000 fdca 	bl	8006090 <ssd1306_WriteString>

    // Список пунктов
    int y = 16;
 80054fc:	2310      	movs	r3, #16
 80054fe:	61bb      	str	r3, [r7, #24]
    for(int i = 0; i < MENU_ITEMS_COUNT; i++)
 8005500:	2300      	movs	r3, #0
 8005502:	617b      	str	r3, [r7, #20]
 8005504:	e043      	b.n	800558e <OLED_Settings_Draw+0xf6>
    {
        if(i == selected_index)
 8005506:	4b29      	ldr	r3, [pc, #164]	@ (80055ac <OLED_Settings_Draw+0x114>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	429a      	cmp	r2, r3
 800550e:	d121      	bne.n	8005554 <OLED_Settings_Draw+0xbc>
        {
            ssd1306_FillRect(0, y - 1, SW, menu_font->height + 2, White);
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	b2db      	uxtb	r3, r3
 8005514:	3b01      	subs	r3, #1
 8005516:	b2d9      	uxtb	r1, r3
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	b2da      	uxtb	r2, r3
 800551c:	4b22      	ldr	r3, [pc, #136]	@ (80055a8 <OLED_Settings_Draw+0x110>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	785b      	ldrb	r3, [r3, #1]
 8005522:	3302      	adds	r3, #2
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2001      	movs	r0, #1
 8005528:	9000      	str	r0, [sp, #0]
 800552a:	2000      	movs	r0, #0
 800552c:	f000 ff4a 	bl	80063c4 <ssd1306_FillRect>
            ssd1306_SetCursor(2, y);
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	b2db      	uxtb	r3, r3
 8005534:	4619      	mov	r1, r3
 8005536:	2002      	movs	r0, #2
 8005538:	f000 fdd0 	bl	80060dc <ssd1306_SetCursor>
            ssd1306_WriteString((char*)menu_items[i], *menu_font, Black);
 800553c:	4a1c      	ldr	r2, [pc, #112]	@ (80055b0 <OLED_Settings_Draw+0x118>)
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005544:	4b18      	ldr	r3, [pc, #96]	@ (80055a8 <OLED_Settings_Draw+0x110>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2200      	movs	r2, #0
 800554a:	9200      	str	r2, [sp, #0]
 800554c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800554e:	f000 fd9f 	bl	8006090 <ssd1306_WriteString>
 8005552:	e010      	b.n	8005576 <OLED_Settings_Draw+0xde>
        }
        else
        {
            ssd1306_SetCursor(2, y);
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	b2db      	uxtb	r3, r3
 8005558:	4619      	mov	r1, r3
 800555a:	2002      	movs	r0, #2
 800555c:	f000 fdbe 	bl	80060dc <ssd1306_SetCursor>
            ssd1306_WriteString((char*)menu_items[i], *menu_font, White);
 8005560:	4a13      	ldr	r2, [pc, #76]	@ (80055b0 <OLED_Settings_Draw+0x118>)
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005568:	4b0f      	ldr	r3, [pc, #60]	@ (80055a8 <OLED_Settings_Draw+0x110>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2201      	movs	r2, #1
 800556e:	9200      	str	r2, [sp, #0]
 8005570:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005572:	f000 fd8d 	bl	8006090 <ssd1306_WriteString>
        }
        y += menu_font->height + vpad;
 8005576:	4b0c      	ldr	r3, [pc, #48]	@ (80055a8 <OLED_Settings_Draw+0x110>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	785b      	ldrb	r3, [r3, #1]
 800557c:	461a      	mov	r2, r3
 800557e:	2303      	movs	r3, #3
 8005580:	4413      	add	r3, r2
 8005582:	69ba      	ldr	r2, [r7, #24]
 8005584:	4413      	add	r3, r2
 8005586:	61bb      	str	r3, [r7, #24]
    for(int i = 0; i < MENU_ITEMS_COUNT; i++)
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	3301      	adds	r3, #1
 800558c:	617b      	str	r3, [r7, #20]
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	2b06      	cmp	r3, #6
 8005592:	d9b8      	bls.n	8005506 <OLED_Settings_Draw+0x6e>
    }

    ssd1306_UpdateScreen();
 8005594:	f000 fc72 	bl	8005e7c <ssd1306_UpdateScreen>
}
 8005598:	3720      	adds	r7, #32
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	20004ce9 	.word	0x20004ce9
 80055a4:	08024d90 	.word	0x08024d90
 80055a8:	200000a8 	.word	0x200000a8
 80055ac:	20004cd8 	.word	0x20004cd8
 80055b0:	2000008c 	.word	0x2000008c

080055b4 <OLED_Draw_Edit>:

// --- Отображение IP/Mask/GW при редактировании ---
static void OLED_Draw_Edit()
{
 80055b4:	b590      	push	{r4, r7, lr}
 80055b6:	b08d      	sub	sp, #52	@ 0x34
 80055b8:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 80055ba:	2000      	movs	r0, #0
 80055bc:	f000 fc46 	bl	8005e4c <ssd1306_Fill>
    const int SW = SSD1306_ROTATED_WIDTH;
 80055c0:	2340      	movs	r3, #64	@ 0x40
 80055c2:	617b      	str	r3, [r7, #20]
    const int SH = SSD1306_ROTATED_HEIGHT;
 80055c4:	2380      	movs	r3, #128	@ 0x80
 80055c6:	613b      	str	r3, [r7, #16]

    // Заголовок по центру
    int title_x = (SW / 2) - ((int)strlen(edit_title) * menu_font->width / 2);
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	0fda      	lsrs	r2, r3, #31
 80055cc:	4413      	add	r3, r2
 80055ce:	105b      	asrs	r3, r3, #1
 80055d0:	461c      	mov	r4, r3
 80055d2:	4866      	ldr	r0, [pc, #408]	@ (800576c <OLED_Draw_Edit+0x1b8>)
 80055d4:	f7fa fe02 	bl	80001dc <strlen>
 80055d8:	4603      	mov	r3, r0
 80055da:	461a      	mov	r2, r3
 80055dc:	4b64      	ldr	r3, [pc, #400]	@ (8005770 <OLED_Draw_Edit+0x1bc>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	fb02 f303 	mul.w	r3, r2, r3
 80055e6:	0fda      	lsrs	r2, r3, #31
 80055e8:	4413      	add	r3, r2
 80055ea:	105b      	asrs	r3, r3, #1
 80055ec:	425b      	negs	r3, r3
 80055ee:	4423      	add	r3, r4
 80055f0:	627b      	str	r3, [r7, #36]	@ 0x24
    if(title_x < 0) title_x = 0;
 80055f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	da01      	bge.n	80055fc <OLED_Draw_Edit+0x48>
 80055f8:	2300      	movs	r3, #0
 80055fa:	627b      	str	r3, [r7, #36]	@ 0x24
    ssd1306_SetCursor(title_x, 2);
 80055fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	2102      	movs	r1, #2
 8005602:	4618      	mov	r0, r3
 8005604:	f000 fd6a 	bl	80060dc <ssd1306_SetCursor>
    ssd1306_WriteString(edit_title, *menu_font, White);
 8005608:	4b59      	ldr	r3, [pc, #356]	@ (8005770 <OLED_Draw_Edit+0x1bc>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2201      	movs	r2, #1
 800560e:	9200      	str	r2, [sp, #0]
 8005610:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005612:	4856      	ldr	r0, [pc, #344]	@ (800576c <OLED_Draw_Edit+0x1b8>)
 8005614:	f000 fd3c 	bl	8006090 <ssd1306_WriteString>

    // Отображение IP адреса в столбик по центру
    int start_y = 15;
 8005618:	230f      	movs	r3, #15
 800561a:	623b      	str	r3, [r7, #32]
    int part_spacing = edit_font->height + 2;
 800561c:	4b55      	ldr	r3, [pc, #340]	@ (8005774 <OLED_Draw_Edit+0x1c0>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	785b      	ldrb	r3, [r3, #1]
 8005622:	3302      	adds	r3, #2
 8005624:	60fb      	str	r3, [r7, #12]

    for(int i = 0; i < 4; i++)
 8005626:	2300      	movs	r3, #0
 8005628:	61fb      	str	r3, [r7, #28]
 800562a:	e066      	b.n	80056fa <OLED_Draw_Edit+0x146>
    {
        char part_str[4];
        snprintf(part_str, sizeof(part_str), "%d", edit_parts[i]);
 800562c:	4a52      	ldr	r2, [pc, #328]	@ (8005778 <OLED_Draw_Edit+0x1c4>)
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	4413      	add	r3, r2
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	1d38      	adds	r0, r7, #4
 8005636:	4a51      	ldr	r2, [pc, #324]	@ (800577c <OLED_Draw_Edit+0x1c8>)
 8005638:	2104      	movs	r1, #4
 800563a:	f01c fb95 	bl	8021d68 <sniprintf>

        // Центрирование по горизонтали
        int part_width = strlen(part_str) * edit_font->width;
 800563e:	1d3b      	adds	r3, r7, #4
 8005640:	4618      	mov	r0, r3
 8005642:	f7fa fdcb 	bl	80001dc <strlen>
 8005646:	4602      	mov	r2, r0
 8005648:	4b4a      	ldr	r3, [pc, #296]	@ (8005774 <OLED_Draw_Edit+0x1c0>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	fb02 f303 	mul.w	r3, r2, r3
 8005652:	60bb      	str	r3, [r7, #8]
        int part_x = (SW / 2) - (part_width / 2);
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	0fda      	lsrs	r2, r3, #31
 8005658:	4413      	add	r3, r2
 800565a:	105b      	asrs	r3, r3, #1
 800565c:	4619      	mov	r1, r3
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	0fda      	lsrs	r2, r3, #31
 8005662:	4413      	add	r3, r2
 8005664:	105b      	asrs	r3, r3, #1
 8005666:	425b      	negs	r3, r3
 8005668:	440b      	add	r3, r1
 800566a:	61bb      	str	r3, [r7, #24]
        if(part_x < 0) part_x = 0;
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	2b00      	cmp	r3, #0
 8005670:	da01      	bge.n	8005676 <OLED_Draw_Edit+0xc2>
 8005672:	2300      	movs	r3, #0
 8005674:	61bb      	str	r3, [r7, #24]

        // Подсветка текущей части
        if(i == edit_digit)
 8005676:	4b42      	ldr	r3, [pc, #264]	@ (8005780 <OLED_Draw_Edit+0x1cc>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	69fa      	ldr	r2, [r7, #28]
 800567c:	429a      	cmp	r2, r3
 800567e:	d125      	bne.n	80056cc <OLED_Draw_Edit+0x118>
        {
            ssd1306_FillRect(part_x - 2, start_y - 1, part_width + 4, edit_font->height + 2, White);
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	b2db      	uxtb	r3, r3
 8005684:	3b02      	subs	r3, #2
 8005686:	b2d8      	uxtb	r0, r3
 8005688:	6a3b      	ldr	r3, [r7, #32]
 800568a:	b2db      	uxtb	r3, r3
 800568c:	3b01      	subs	r3, #1
 800568e:	b2d9      	uxtb	r1, r3
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	b2db      	uxtb	r3, r3
 8005694:	3304      	adds	r3, #4
 8005696:	b2da      	uxtb	r2, r3
 8005698:	4b36      	ldr	r3, [pc, #216]	@ (8005774 <OLED_Draw_Edit+0x1c0>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	785b      	ldrb	r3, [r3, #1]
 800569e:	3302      	adds	r3, #2
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2401      	movs	r4, #1
 80056a4:	9400      	str	r4, [sp, #0]
 80056a6:	f000 fe8d 	bl	80063c4 <ssd1306_FillRect>
            ssd1306_SetCursor(part_x, start_y);
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	6a3a      	ldr	r2, [r7, #32]
 80056b0:	b2d2      	uxtb	r2, r2
 80056b2:	4611      	mov	r1, r2
 80056b4:	4618      	mov	r0, r3
 80056b6:	f000 fd11 	bl	80060dc <ssd1306_SetCursor>
            ssd1306_WriteString(part_str, *edit_font, Black);
 80056ba:	4b2e      	ldr	r3, [pc, #184]	@ (8005774 <OLED_Draw_Edit+0x1c0>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	1d38      	adds	r0, r7, #4
 80056c0:	2200      	movs	r2, #0
 80056c2:	9200      	str	r2, [sp, #0]
 80056c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056c6:	f000 fce3 	bl	8006090 <ssd1306_WriteString>
 80056ca:	e00f      	b.n	80056ec <OLED_Draw_Edit+0x138>
        }
        else
        {
            ssd1306_SetCursor(part_x, start_y);
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	6a3a      	ldr	r2, [r7, #32]
 80056d2:	b2d2      	uxtb	r2, r2
 80056d4:	4611      	mov	r1, r2
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 fd00 	bl	80060dc <ssd1306_SetCursor>
            ssd1306_WriteString(part_str, *edit_font, White);
 80056dc:	4b25      	ldr	r3, [pc, #148]	@ (8005774 <OLED_Draw_Edit+0x1c0>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	1d38      	adds	r0, r7, #4
 80056e2:	2201      	movs	r2, #1
 80056e4:	9200      	str	r2, [sp, #0]
 80056e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056e8:	f000 fcd2 	bl	8006090 <ssd1306_WriteString>
        }

        start_y += part_spacing;
 80056ec:	6a3a      	ldr	r2, [r7, #32]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	4413      	add	r3, r2
 80056f2:	623b      	str	r3, [r7, #32]
    for(int i = 0; i < 4; i++)
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	3301      	adds	r3, #1
 80056f8:	61fb      	str	r3, [r7, #28]
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	2b03      	cmp	r3, #3
 80056fe:	dd95      	ble.n	800562c <OLED_Draw_Edit+0x78>
    }

    // Инструкция внизу
    ssd1306_SetCursor(0, SH - 30);
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	b2db      	uxtb	r3, r3
 8005704:	3b1e      	subs	r3, #30
 8005706:	b2db      	uxtb	r3, r3
 8005708:	4619      	mov	r1, r3
 800570a:	2000      	movs	r0, #0
 800570c:	f000 fce6 	bl	80060dc <ssd1306_SetCursor>
    ssd1306_WriteString("Up/Dn:", *menu_font, White);
 8005710:	4b17      	ldr	r3, [pc, #92]	@ (8005770 <OLED_Draw_Edit+0x1bc>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2201      	movs	r2, #1
 8005716:	9200      	str	r2, [sp, #0]
 8005718:	cb0e      	ldmia	r3, {r1, r2, r3}
 800571a:	481a      	ldr	r0, [pc, #104]	@ (8005784 <OLED_Draw_Edit+0x1d0>)
 800571c:	f000 fcb8 	bl	8006090 <ssd1306_WriteString>
    ssd1306_SetCursor(0, SH - 20);
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	b2db      	uxtb	r3, r3
 8005724:	3b14      	subs	r3, #20
 8005726:	b2db      	uxtb	r3, r3
 8005728:	4619      	mov	r1, r3
 800572a:	2000      	movs	r0, #0
 800572c:	f000 fcd6 	bl	80060dc <ssd1306_SetCursor>
    ssd1306_WriteString("Change", *menu_font, White);
 8005730:	4b0f      	ldr	r3, [pc, #60]	@ (8005770 <OLED_Draw_Edit+0x1bc>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2201      	movs	r2, #1
 8005736:	9200      	str	r2, [sp, #0]
 8005738:	cb0e      	ldmia	r3, {r1, r2, r3}
 800573a:	4813      	ldr	r0, [pc, #76]	@ (8005788 <OLED_Draw_Edit+0x1d4>)
 800573c:	f000 fca8 	bl	8006090 <ssd1306_WriteString>
    ssd1306_SetCursor(0, SH - 10);
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	b2db      	uxtb	r3, r3
 8005744:	3b0a      	subs	r3, #10
 8005746:	b2db      	uxtb	r3, r3
 8005748:	4619      	mov	r1, r3
 800574a:	2000      	movs	r0, #0
 800574c:	f000 fcc6 	bl	80060dc <ssd1306_SetCursor>
    ssd1306_WriteString("Mid: Next", *menu_font, White);
 8005750:	4b07      	ldr	r3, [pc, #28]	@ (8005770 <OLED_Draw_Edit+0x1bc>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2201      	movs	r2, #1
 8005756:	9200      	str	r2, [sp, #0]
 8005758:	cb0e      	ldmia	r3, {r1, r2, r3}
 800575a:	480c      	ldr	r0, [pc, #48]	@ (800578c <OLED_Draw_Edit+0x1d8>)
 800575c:	f000 fc98 	bl	8006090 <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 8005760:	f000 fb8c 	bl	8005e7c <ssd1306_UpdateScreen>
}
 8005764:	bf00      	nop
 8005766:	372c      	adds	r7, #44	@ 0x2c
 8005768:	46bd      	mov	sp, r7
 800576a:	bd90      	pop	{r4, r7, pc}
 800576c:	200000b4 	.word	0x200000b4
 8005770:	200000a8 	.word	0x200000a8
 8005774:	200000ac 	.word	0x200000ac
 8005778:	200000b0 	.word	0x200000b0
 800577c:	08024d9c 	.word	0x08024d9c
 8005780:	20004cdc 	.word	0x20004cdc
 8005784:	08024da0 	.word	0x08024da0
 8005788:	08024da8 	.word	0x08024da8
 800578c:	08024db0 	.word	0x08024db0

08005790 <update_activity_time>:

// Обновление времени активности
static void update_activity_time(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0
    last_activity_time = HAL_GetTick();
 8005794:	f000 fed8 	bl	8006548 <HAL_GetTick>
 8005798:	4603      	mov	r3, r0
 800579a:	4a02      	ldr	r2, [pc, #8]	@ (80057a4 <update_activity_time+0x14>)
 800579c:	6013      	str	r3, [r2, #0]
}
 800579e:	bf00      	nop
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	20004ce4 	.word	0x20004ce4

080057a8 <change_edit_value>:

// Изменение значения с учетом удержания
static void change_edit_value(int delta)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
    uint32_t now = HAL_GetTick();
 80057b0:	f000 feca 	bl	8006548 <HAL_GetTick>
 80057b4:	60f8      	str	r0, [r7, #12]
    static uint32_t last_change_time = 0;
    static uint32_t change_delay = 300;

    if(!button_held)
 80057b6:	4b1c      	ldr	r3, [pc, #112]	@ (8005828 <change_edit_value+0x80>)
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10e      	bne.n	80057dc <change_edit_value+0x34>
    {
        edit_parts[edit_digit] += delta;
 80057be:	4b1b      	ldr	r3, [pc, #108]	@ (800582c <change_edit_value+0x84>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a1b      	ldr	r2, [pc, #108]	@ (8005830 <change_edit_value+0x88>)
 80057c4:	5cd1      	ldrb	r1, [r2, r3]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	b2da      	uxtb	r2, r3
 80057ca:	4b18      	ldr	r3, [pc, #96]	@ (800582c <change_edit_value+0x84>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	440a      	add	r2, r1
 80057d0:	b2d1      	uxtb	r1, r2
 80057d2:	4a17      	ldr	r2, [pc, #92]	@ (8005830 <change_edit_value+0x88>)
 80057d4:	54d1      	strb	r1, [r2, r3]
        if(edit_parts[edit_digit] > 255) edit_parts[edit_digit] = 255;
        if(edit_parts[edit_digit] < 0) edit_parts[edit_digit] = 0;
        OLED_Draw_Edit();
 80057d6:	f7ff feed 	bl	80055b4 <OLED_Draw_Edit>
        return;
 80057da:	e021      	b.n	8005820 <change_edit_value+0x78>
    }

    if(now - last_change_time > change_delay)
 80057dc:	4b15      	ldr	r3, [pc, #84]	@ (8005834 <change_edit_value+0x8c>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	1ad2      	subs	r2, r2, r3
 80057e4:	4b14      	ldr	r3, [pc, #80]	@ (8005838 <change_edit_value+0x90>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d919      	bls.n	8005820 <change_edit_value+0x78>
    {
        edit_parts[edit_digit] += delta;
 80057ec:	4b0f      	ldr	r3, [pc, #60]	@ (800582c <change_edit_value+0x84>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a0f      	ldr	r2, [pc, #60]	@ (8005830 <change_edit_value+0x88>)
 80057f2:	5cd1      	ldrb	r1, [r2, r3]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	b2da      	uxtb	r2, r3
 80057f8:	4b0c      	ldr	r3, [pc, #48]	@ (800582c <change_edit_value+0x84>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	440a      	add	r2, r1
 80057fe:	b2d1      	uxtb	r1, r2
 8005800:	4a0b      	ldr	r2, [pc, #44]	@ (8005830 <change_edit_value+0x88>)
 8005802:	54d1      	strb	r1, [r2, r3]
        if(edit_parts[edit_digit] > 255) edit_parts[edit_digit] = 255;
        if(edit_parts[edit_digit] < 0) edit_parts[edit_digit] = 0;

        if(change_delay > 50) change_delay -= 10;
 8005804:	4b0c      	ldr	r3, [pc, #48]	@ (8005838 <change_edit_value+0x90>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2b32      	cmp	r3, #50	@ 0x32
 800580a:	d904      	bls.n	8005816 <change_edit_value+0x6e>
 800580c:	4b0a      	ldr	r3, [pc, #40]	@ (8005838 <change_edit_value+0x90>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	3b0a      	subs	r3, #10
 8005812:	4a09      	ldr	r2, [pc, #36]	@ (8005838 <change_edit_value+0x90>)
 8005814:	6013      	str	r3, [r2, #0]

        last_change_time = now;
 8005816:	4a07      	ldr	r2, [pc, #28]	@ (8005834 <change_edit_value+0x8c>)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6013      	str	r3, [r2, #0]
        OLED_Draw_Edit();
 800581c:	f7ff feca 	bl	80055b4 <OLED_Draw_Edit>
    }
}
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	20004ce8 	.word	0x20004ce8
 800582c:	20004cdc 	.word	0x20004cdc
 8005830:	200000b0 	.word	0x200000b0
 8005834:	20004cf0 	.word	0x20004cf0
 8005838:	200000c8 	.word	0x200000c8

0800583c <OLED_Settings_MoveUp>:

// --- Навигация меню ---
void OLED_Settings_MoveUp(void)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	af00      	add	r7, sp, #0
    if(!settings_active) return;
 8005840:	4b14      	ldr	r3, [pc, #80]	@ (8005894 <OLED_Settings_MoveUp+0x58>)
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d023      	beq.n	8005890 <OLED_Settings_MoveUp+0x54>

    update_activity_time();
 8005848:	f7ff ffa2 	bl	8005790 <update_activity_time>

    if(confirm_active) {
 800584c:	4b12      	ldr	r3, [pc, #72]	@ (8005898 <OLED_Settings_MoveUp+0x5c>)
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d005      	beq.n	8005860 <OLED_Settings_MoveUp+0x24>
        confirm_selection = 0; // Yes (слева)
 8005854:	4b11      	ldr	r3, [pc, #68]	@ (800589c <OLED_Settings_MoveUp+0x60>)
 8005856:	2200      	movs	r2, #0
 8005858:	601a      	str	r2, [r3, #0]
        OLED_Draw_Confirm();
 800585a:	f7ff f9b5 	bl	8004bc8 <OLED_Draw_Confirm>
        return;
 800585e:	e018      	b.n	8005892 <OLED_Settings_MoveUp+0x56>
    }

    if(editing_active)
 8005860:	4b0f      	ldr	r3, [pc, #60]	@ (80058a0 <OLED_Settings_MoveUp+0x64>)
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d003      	beq.n	8005870 <OLED_Settings_MoveUp+0x34>
    {
        change_edit_value(1);
 8005868:	2001      	movs	r0, #1
 800586a:	f7ff ff9d 	bl	80057a8 <change_edit_value>
        return;
 800586e:	e010      	b.n	8005892 <OLED_Settings_MoveUp+0x56>
    }

    if(selected_index > 0)
 8005870:	4b0c      	ldr	r3, [pc, #48]	@ (80058a4 <OLED_Settings_MoveUp+0x68>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	dd05      	ble.n	8005884 <OLED_Settings_MoveUp+0x48>
        selected_index--;
 8005878:	4b0a      	ldr	r3, [pc, #40]	@ (80058a4 <OLED_Settings_MoveUp+0x68>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	3b01      	subs	r3, #1
 800587e:	4a09      	ldr	r2, [pc, #36]	@ (80058a4 <OLED_Settings_MoveUp+0x68>)
 8005880:	6013      	str	r3, [r2, #0]
 8005882:	e002      	b.n	800588a <OLED_Settings_MoveUp+0x4e>
    else
        selected_index = MENU_ITEMS_COUNT - 1;
 8005884:	4b07      	ldr	r3, [pc, #28]	@ (80058a4 <OLED_Settings_MoveUp+0x68>)
 8005886:	2206      	movs	r2, #6
 8005888:	601a      	str	r2, [r3, #0]

    OLED_Settings_Draw();
 800588a:	f7ff fe05 	bl	8005498 <OLED_Settings_Draw>
 800588e:	e000      	b.n	8005892 <OLED_Settings_MoveUp+0x56>
    if(!settings_active) return;
 8005890:	bf00      	nop
}
 8005892:	bd80      	pop	{r7, pc}
 8005894:	20004cb4 	.word	0x20004cb4
 8005898:	20004ce9 	.word	0x20004ce9
 800589c:	20004cec 	.word	0x20004cec
 80058a0:	20004ce0 	.word	0x20004ce0
 80058a4:	20004cd8 	.word	0x20004cd8

080058a8 <OLED_Settings_MoveDown>:

void OLED_Settings_MoveDown(void)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	af00      	add	r7, sp, #0
    if(!settings_active) return;
 80058ac:	4b15      	ldr	r3, [pc, #84]	@ (8005904 <OLED_Settings_MoveDown+0x5c>)
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d024      	beq.n	80058fe <OLED_Settings_MoveDown+0x56>

    update_activity_time();
 80058b4:	f7ff ff6c 	bl	8005790 <update_activity_time>

    if(confirm_active) {
 80058b8:	4b13      	ldr	r3, [pc, #76]	@ (8005908 <OLED_Settings_MoveDown+0x60>)
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d005      	beq.n	80058cc <OLED_Settings_MoveDown+0x24>
        confirm_selection = 1; // No (справа)
 80058c0:	4b12      	ldr	r3, [pc, #72]	@ (800590c <OLED_Settings_MoveDown+0x64>)
 80058c2:	2201      	movs	r2, #1
 80058c4:	601a      	str	r2, [r3, #0]
        OLED_Draw_Confirm();
 80058c6:	f7ff f97f 	bl	8004bc8 <OLED_Draw_Confirm>
        return;
 80058ca:	e019      	b.n	8005900 <OLED_Settings_MoveDown+0x58>
    }

    if(editing_active)
 80058cc:	4b10      	ldr	r3, [pc, #64]	@ (8005910 <OLED_Settings_MoveDown+0x68>)
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d004      	beq.n	80058de <OLED_Settings_MoveDown+0x36>
    {
        change_edit_value(-1);
 80058d4:	f04f 30ff 	mov.w	r0, #4294967295
 80058d8:	f7ff ff66 	bl	80057a8 <change_edit_value>
        return;
 80058dc:	e010      	b.n	8005900 <OLED_Settings_MoveDown+0x58>
    }

    if(selected_index < MENU_ITEMS_COUNT - 1)
 80058de:	4b0d      	ldr	r3, [pc, #52]	@ (8005914 <OLED_Settings_MoveDown+0x6c>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2b05      	cmp	r3, #5
 80058e4:	d805      	bhi.n	80058f2 <OLED_Settings_MoveDown+0x4a>
        selected_index++;
 80058e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005914 <OLED_Settings_MoveDown+0x6c>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	3301      	adds	r3, #1
 80058ec:	4a09      	ldr	r2, [pc, #36]	@ (8005914 <OLED_Settings_MoveDown+0x6c>)
 80058ee:	6013      	str	r3, [r2, #0]
 80058f0:	e002      	b.n	80058f8 <OLED_Settings_MoveDown+0x50>
    else
        selected_index = 0;
 80058f2:	4b08      	ldr	r3, [pc, #32]	@ (8005914 <OLED_Settings_MoveDown+0x6c>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	601a      	str	r2, [r3, #0]

    OLED_Settings_Draw();
 80058f8:	f7ff fdce 	bl	8005498 <OLED_Settings_Draw>
 80058fc:	e000      	b.n	8005900 <OLED_Settings_MoveDown+0x58>
    if(!settings_active) return;
 80058fe:	bf00      	nop
}
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	20004cb4 	.word	0x20004cb4
 8005908:	20004ce9 	.word	0x20004ce9
 800590c:	20004cec 	.word	0x20004cec
 8005910:	20004ce0 	.word	0x20004ce0
 8005914:	20004cd8 	.word	0x20004cd8

08005918 <OLED_Settings_Select>:
// --- Выбор пункта меню ---
void OLED_Settings_Select(void)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	af00      	add	r7, sp, #0
    if(!settings_active) return;
 800591c:	4b77      	ldr	r3, [pc, #476]	@ (8005afc <OLED_Settings_Select+0x1e4>)
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	f000 80e8 	beq.w	8005af6 <OLED_Settings_Select+0x1de>

    update_activity_time();
 8005926:	f7ff ff33 	bl	8005790 <update_activity_time>

    if(confirm_active) {
 800592a:	4b75      	ldr	r3, [pc, #468]	@ (8005b00 <OLED_Settings_Select+0x1e8>)
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00b      	beq.n	800594a <OLED_Settings_Select+0x32>
        if(confirm_selection == 0) {
 8005932:	4b74      	ldr	r3, [pc, #464]	@ (8005b04 <OLED_Settings_Select+0x1ec>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <OLED_Settings_Select+0x26>
            // Yes - применяем настройки
            Apply_Network_Settings();
 800593a:	f7ff fa0b 	bl	8004d54 <Apply_Network_Settings>
        }
        confirm_active = false;
 800593e:	4b70      	ldr	r3, [pc, #448]	@ (8005b00 <OLED_Settings_Select+0x1e8>)
 8005940:	2200      	movs	r2, #0
 8005942:	701a      	strb	r2, [r3, #0]
        OLED_Settings_Draw();
 8005944:	f7ff fda8 	bl	8005498 <OLED_Settings_Draw>
        return;
 8005948:	e0d6      	b.n	8005af8 <OLED_Settings_Select+0x1e0>
    }

    if(editing_active)
 800594a:	4b6f      	ldr	r3, [pc, #444]	@ (8005b08 <OLED_Settings_Select+0x1f0>)
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d031      	beq.n	80059b6 <OLED_Settings_Select+0x9e>
    {
        edit_digit++;
 8005952:	4b6e      	ldr	r3, [pc, #440]	@ (8005b0c <OLED_Settings_Select+0x1f4>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	3301      	adds	r3, #1
 8005958:	4a6c      	ldr	r2, [pc, #432]	@ (8005b0c <OLED_Settings_Select+0x1f4>)
 800595a:	6013      	str	r3, [r2, #0]
        if(edit_digit > 3)
 800595c:	4b6b      	ldr	r3, [pc, #428]	@ (8005b0c <OLED_Settings_Select+0x1f4>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2b03      	cmp	r3, #3
 8005962:	dd25      	ble.n	80059b0 <OLED_Settings_Select+0x98>
        {
            editing_active = false;
 8005964:	4b68      	ldr	r3, [pc, #416]	@ (8005b08 <OLED_Settings_Select+0x1f0>)
 8005966:	2200      	movs	r2, #0
 8005968:	701a      	strb	r2, [r3, #0]

            // Сохраняем изменения и показываем подтверждение
            switch(selected_index)
 800596a:	4b69      	ldr	r3, [pc, #420]	@ (8005b10 <OLED_Settings_Select+0x1f8>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2b02      	cmp	r3, #2
 8005970:	d010      	beq.n	8005994 <OLED_Settings_Select+0x7c>
 8005972:	2b02      	cmp	r3, #2
 8005974:	dc13      	bgt.n	800599e <OLED_Settings_Select+0x86>
 8005976:	2b00      	cmp	r3, #0
 8005978:	d002      	beq.n	8005980 <OLED_Settings_Select+0x68>
 800597a:	2b01      	cmp	r3, #1
 800597c:	d005      	beq.n	800598a <OLED_Settings_Select+0x72>
 800597e:	e00e      	b.n	800599e <OLED_Settings_Select+0x86>
            {
                case 0:
                    memcpy(last_ip, edit_parts, 4);
 8005980:	4b64      	ldr	r3, [pc, #400]	@ (8005b14 <OLED_Settings_Select+0x1fc>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a64      	ldr	r2, [pc, #400]	@ (8005b18 <OLED_Settings_Select+0x200>)
 8005986:	6013      	str	r3, [r2, #0]
                    break;
 8005988:	e009      	b.n	800599e <OLED_Settings_Select+0x86>
                case 1:
                    memcpy(last_mask, edit_parts, 4);
 800598a:	4b62      	ldr	r3, [pc, #392]	@ (8005b14 <OLED_Settings_Select+0x1fc>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a63      	ldr	r2, [pc, #396]	@ (8005b1c <OLED_Settings_Select+0x204>)
 8005990:	6013      	str	r3, [r2, #0]
                    break;
 8005992:	e004      	b.n	800599e <OLED_Settings_Select+0x86>
                case 2:
                    memcpy(last_gw, edit_parts, 4);
 8005994:	4b5f      	ldr	r3, [pc, #380]	@ (8005b14 <OLED_Settings_Select+0x1fc>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a61      	ldr	r2, [pc, #388]	@ (8005b20 <OLED_Settings_Select+0x208>)
 800599a:	6013      	str	r3, [r2, #0]
                    break;
 800599c:	bf00      	nop
            }

            confirm_active = true;
 800599e:	4b58      	ldr	r3, [pc, #352]	@ (8005b00 <OLED_Settings_Select+0x1e8>)
 80059a0:	2201      	movs	r2, #1
 80059a2:	701a      	strb	r2, [r3, #0]
            confirm_selection = 0;
 80059a4:	4b57      	ldr	r3, [pc, #348]	@ (8005b04 <OLED_Settings_Select+0x1ec>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	601a      	str	r2, [r3, #0]
            OLED_Draw_Confirm();
 80059aa:	f7ff f90d 	bl	8004bc8 <OLED_Draw_Confirm>
        }
        else
            OLED_Draw_Edit();
        return;
 80059ae:	e0a3      	b.n	8005af8 <OLED_Settings_Select+0x1e0>
            OLED_Draw_Edit();
 80059b0:	f7ff fe00 	bl	80055b4 <OLED_Draw_Edit>
        return;
 80059b4:	e0a0      	b.n	8005af8 <OLED_Settings_Select+0x1e0>
    }

    switch(selected_index)
 80059b6:	4b56      	ldr	r3, [pc, #344]	@ (8005b10 <OLED_Settings_Select+0x1f8>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2b06      	cmp	r3, #6
 80059bc:	f200 809c 	bhi.w	8005af8 <OLED_Settings_Select+0x1e0>
 80059c0:	a201      	add	r2, pc, #4	@ (adr r2, 80059c8 <OLED_Settings_Select+0xb0>)
 80059c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c6:	bf00      	nop
 80059c8:	080059e5 	.word	0x080059e5
 80059cc:	08005a13 	.word	0x08005a13
 80059d0:	08005a37 	.word	0x08005a37
 80059d4:	08005a65 	.word	0x08005a65
 80059d8:	08005a83 	.word	0x08005a83
 80059dc:	08005a99 	.word	0x08005a99
 80059e0:	08005af9 	.word	0x08005af9
    {
        case 0: // IP
            editing_active = true;
 80059e4:	4b48      	ldr	r3, [pc, #288]	@ (8005b08 <OLED_Settings_Select+0x1f0>)
 80059e6:	2201      	movs	r2, #1
 80059e8:	701a      	strb	r2, [r3, #0]
            edit_digit = 0;
 80059ea:	4b48      	ldr	r3, [pc, #288]	@ (8005b0c <OLED_Settings_Select+0x1f4>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	601a      	str	r2, [r3, #0]
            strcpy(edit_title, "Set IP");
 80059f0:	4b4c      	ldr	r3, [pc, #304]	@ (8005b24 <OLED_Settings_Select+0x20c>)
 80059f2:	4a4d      	ldr	r2, [pc, #308]	@ (8005b28 <OLED_Settings_Select+0x210>)
 80059f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80059f8:	6018      	str	r0, [r3, #0]
 80059fa:	3304      	adds	r3, #4
 80059fc:	8019      	strh	r1, [r3, #0]
 80059fe:	3302      	adds	r3, #2
 8005a00:	0c0a      	lsrs	r2, r1, #16
 8005a02:	701a      	strb	r2, [r3, #0]
            memcpy(edit_parts, last_ip, 4);
 8005a04:	4b44      	ldr	r3, [pc, #272]	@ (8005b18 <OLED_Settings_Select+0x200>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a42      	ldr	r2, [pc, #264]	@ (8005b14 <OLED_Settings_Select+0x1fc>)
 8005a0a:	6013      	str	r3, [r2, #0]
            OLED_Draw_Edit();  // ПЕРЕХОДИМ В РЕЖИМ РЕДАКТИРОВАНИЯ
 8005a0c:	f7ff fdd2 	bl	80055b4 <OLED_Draw_Edit>
            break;
 8005a10:	e072      	b.n	8005af8 <OLED_Settings_Select+0x1e0>

        case 1: // Mask
            editing_active = true;
 8005a12:	4b3d      	ldr	r3, [pc, #244]	@ (8005b08 <OLED_Settings_Select+0x1f0>)
 8005a14:	2201      	movs	r2, #1
 8005a16:	701a      	strb	r2, [r3, #0]
            edit_digit = 0;
 8005a18:	4b3c      	ldr	r3, [pc, #240]	@ (8005b0c <OLED_Settings_Select+0x1f4>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	601a      	str	r2, [r3, #0]
            strcpy(edit_title, "Set Mask");
 8005a1e:	4b41      	ldr	r3, [pc, #260]	@ (8005b24 <OLED_Settings_Select+0x20c>)
 8005a20:	4a42      	ldr	r2, [pc, #264]	@ (8005b2c <OLED_Settings_Select+0x214>)
 8005a22:	ca07      	ldmia	r2, {r0, r1, r2}
 8005a24:	c303      	stmia	r3!, {r0, r1}
 8005a26:	701a      	strb	r2, [r3, #0]
            memcpy(edit_parts, last_mask, 4);
 8005a28:	4b3c      	ldr	r3, [pc, #240]	@ (8005b1c <OLED_Settings_Select+0x204>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a39      	ldr	r2, [pc, #228]	@ (8005b14 <OLED_Settings_Select+0x1fc>)
 8005a2e:	6013      	str	r3, [r2, #0]
            OLED_Draw_Edit();  // ПЕРЕХОДИМ В РЕЖИМ РЕДАКТИРОВАНИЯ
 8005a30:	f7ff fdc0 	bl	80055b4 <OLED_Draw_Edit>
            break;
 8005a34:	e060      	b.n	8005af8 <OLED_Settings_Select+0x1e0>

        case 2: // Gateway
            editing_active = true;
 8005a36:	4b34      	ldr	r3, [pc, #208]	@ (8005b08 <OLED_Settings_Select+0x1f0>)
 8005a38:	2201      	movs	r2, #1
 8005a3a:	701a      	strb	r2, [r3, #0]
            edit_digit = 0;
 8005a3c:	4b33      	ldr	r3, [pc, #204]	@ (8005b0c <OLED_Settings_Select+0x1f4>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	601a      	str	r2, [r3, #0]
            strcpy(edit_title, "Set GW");
 8005a42:	4b38      	ldr	r3, [pc, #224]	@ (8005b24 <OLED_Settings_Select+0x20c>)
 8005a44:	4a3a      	ldr	r2, [pc, #232]	@ (8005b30 <OLED_Settings_Select+0x218>)
 8005a46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005a4a:	6018      	str	r0, [r3, #0]
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	8019      	strh	r1, [r3, #0]
 8005a50:	3302      	adds	r3, #2
 8005a52:	0c0a      	lsrs	r2, r1, #16
 8005a54:	701a      	strb	r2, [r3, #0]
            memcpy(edit_parts, last_gw, 4);
 8005a56:	4b32      	ldr	r3, [pc, #200]	@ (8005b20 <OLED_Settings_Select+0x208>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a2e      	ldr	r2, [pc, #184]	@ (8005b14 <OLED_Settings_Select+0x1fc>)
 8005a5c:	6013      	str	r3, [r2, #0]
            OLED_Draw_Edit();  // ПЕРЕХОДИМ В РЕЖИМ РЕДАКТИРОВАНИЯ
 8005a5e:	f7ff fda9 	bl	80055b4 <OLED_Draw_Edit>
            break;
 8005a62:	e049      	b.n	8005af8 <OLED_Settings_Select+0x1e0>

        case 3: // DHCP
            dhcp_on = !dhcp_on;
 8005a64:	4b33      	ldr	r3, [pc, #204]	@ (8005b34 <OLED_Settings_Select+0x21c>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	bf0c      	ite	eq
 8005a6c:	2301      	moveq	r3, #1
 8005a6e:	2300      	movne	r3, #0
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	461a      	mov	r2, r3
 8005a74:	4b2f      	ldr	r3, [pc, #188]	@ (8005b34 <OLED_Settings_Select+0x21c>)
 8005a76:	701a      	strb	r2, [r3, #0]
            DHCP_Apply();
 8005a78:	f7ff fb90 	bl	800519c <DHCP_Apply>
            OLED_Settings_Draw();
 8005a7c:	f7ff fd0c 	bl	8005498 <OLED_Settings_Draw>
            break;
 8005a80:	e03a      	b.n	8005af8 <OLED_Settings_Select+0x1e0>

        case 4: // Reboot
            if(OLED_Confirm("Will Reboot!"))
 8005a82:	482d      	ldr	r0, [pc, #180]	@ (8005b38 <OLED_Settings_Select+0x220>)
 8005a84:	f7ff fcae 	bl	80053e4 <OLED_Confirm>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <OLED_Settings_Select+0x17a>
                NVIC_SystemReset();
 8005a8e:	f7ff f863 	bl	8004b58 <__NVIC_SystemReset>
            else
                OLED_Settings_Draw();
 8005a92:	f7ff fd01 	bl	8005498 <OLED_Settings_Draw>
            break;
 8005a96:	e02f      	b.n	8005af8 <OLED_Settings_Select+0x1e0>

        case 5: // Reset
            if(OLED_Confirm("Factory Reset!"))
 8005a98:	4828      	ldr	r0, [pc, #160]	@ (8005b3c <OLED_Settings_Select+0x224>)
 8005a9a:	f7ff fca3 	bl	80053e4 <OLED_Confirm>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d025      	beq.n	8005af0 <OLED_Settings_Select+0x1d8>
            {
                last_ip[0] = 192; last_ip[1] = 168; last_ip[2] = 1; last_ip[3] = 178;
 8005aa4:	4b1c      	ldr	r3, [pc, #112]	@ (8005b18 <OLED_Settings_Select+0x200>)
 8005aa6:	22c0      	movs	r2, #192	@ 0xc0
 8005aa8:	701a      	strb	r2, [r3, #0]
 8005aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8005b18 <OLED_Settings_Select+0x200>)
 8005aac:	22a8      	movs	r2, #168	@ 0xa8
 8005aae:	705a      	strb	r2, [r3, #1]
 8005ab0:	4b19      	ldr	r3, [pc, #100]	@ (8005b18 <OLED_Settings_Select+0x200>)
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	709a      	strb	r2, [r3, #2]
 8005ab6:	4b18      	ldr	r3, [pc, #96]	@ (8005b18 <OLED_Settings_Select+0x200>)
 8005ab8:	22b2      	movs	r2, #178	@ 0xb2
 8005aba:	70da      	strb	r2, [r3, #3]
                last_mask[0] = 255; last_mask[1] = 255; last_mask[2] = 255; last_mask[3] = 0;
 8005abc:	4b17      	ldr	r3, [pc, #92]	@ (8005b1c <OLED_Settings_Select+0x204>)
 8005abe:	22ff      	movs	r2, #255	@ 0xff
 8005ac0:	701a      	strb	r2, [r3, #0]
 8005ac2:	4b16      	ldr	r3, [pc, #88]	@ (8005b1c <OLED_Settings_Select+0x204>)
 8005ac4:	22ff      	movs	r2, #255	@ 0xff
 8005ac6:	705a      	strb	r2, [r3, #1]
 8005ac8:	4b14      	ldr	r3, [pc, #80]	@ (8005b1c <OLED_Settings_Select+0x204>)
 8005aca:	22ff      	movs	r2, #255	@ 0xff
 8005acc:	709a      	strb	r2, [r3, #2]
 8005ace:	4b13      	ldr	r3, [pc, #76]	@ (8005b1c <OLED_Settings_Select+0x204>)
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	70da      	strb	r2, [r3, #3]
                last_gw[0] = 192; last_gw[1] = 168; last_gw[2] = 1; last_gw[3] = 1;
 8005ad4:	4b12      	ldr	r3, [pc, #72]	@ (8005b20 <OLED_Settings_Select+0x208>)
 8005ad6:	22c0      	movs	r2, #192	@ 0xc0
 8005ad8:	701a      	strb	r2, [r3, #0]
 8005ada:	4b11      	ldr	r3, [pc, #68]	@ (8005b20 <OLED_Settings_Select+0x208>)
 8005adc:	22a8      	movs	r2, #168	@ 0xa8
 8005ade:	705a      	strb	r2, [r3, #1]
 8005ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8005b20 <OLED_Settings_Select+0x208>)
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	709a      	strb	r2, [r3, #2]
 8005ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8005b20 <OLED_Settings_Select+0x208>)
 8005ae8:	2201      	movs	r2, #1
 8005aea:	70da      	strb	r2, [r3, #3]
                Apply_Network_Settings();
 8005aec:	f7ff f932 	bl	8004d54 <Apply_Network_Settings>
            }
            OLED_Settings_Draw();
 8005af0:	f7ff fcd2 	bl	8005498 <OLED_Settings_Draw>
            break;
 8005af4:	e000      	b.n	8005af8 <OLED_Settings_Select+0x1e0>
    if(!settings_active) return;
 8005af6:	bf00      	nop

        case 6: // Set rotation
            // TODO: вывод 0° / 180° и поворот
            break;
    }
}
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	20004cb4 	.word	0x20004cb4
 8005b00:	20004ce9 	.word	0x20004ce9
 8005b04:	20004cec 	.word	0x20004cec
 8005b08:	20004ce0 	.word	0x20004ce0
 8005b0c:	20004cdc 	.word	0x20004cdc
 8005b10:	20004cd8 	.word	0x20004cd8
 8005b14:	200000b0 	.word	0x200000b0
 8005b18:	20000080 	.word	0x20000080
 8005b1c:	20000084 	.word	0x20000084
 8005b20:	20000088 	.word	0x20000088
 8005b24:	200000b4 	.word	0x200000b4
 8005b28:	08024dbc 	.word	0x08024dbc
 8005b2c:	08024dc4 	.word	0x08024dc4
 8005b30:	08024dd0 	.word	0x08024dd0
 8005b34:	200000c4 	.word	0x200000c4
 8005b38:	08024dd8 	.word	0x08024dd8
 8005b3c:	08024de8 	.word	0x08024de8

08005b40 <OLED_Settings_Exit>:

// Выход из меню настроек
void OLED_Settings_Exit(void)
{
 8005b40:	b480      	push	{r7}
 8005b42:	af00      	add	r7, sp, #0
    settings_active = false;
 8005b44:	4b06      	ldr	r3, [pc, #24]	@ (8005b60 <OLED_Settings_Exit+0x20>)
 8005b46:	2200      	movs	r2, #0
 8005b48:	701a      	strb	r2, [r3, #0]
    editing_active = false;
 8005b4a:	4b06      	ldr	r3, [pc, #24]	@ (8005b64 <OLED_Settings_Exit+0x24>)
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	701a      	strb	r2, [r3, #0]
    confirm_active = false;
 8005b50:	4b05      	ldr	r3, [pc, #20]	@ (8005b68 <OLED_Settings_Exit+0x28>)
 8005b52:	2200      	movs	r2, #0
 8005b54:	701a      	strb	r2, [r3, #0]
}
 8005b56:	bf00      	nop
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bc80      	pop	{r7}
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	20004cb4 	.word	0x20004cb4
 8005b64:	20004ce0 	.word	0x20004ce0
 8005b68:	20004ce9 	.word	0x20004ce9

08005b6c <OLED_Settings_TimeoutCheck>:

// Проверка таймаута бездействия
void OLED_Settings_TimeoutCheck(void)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
    if (!settings_active) return;
 8005b72:	4b0f      	ldr	r3, [pc, #60]	@ (8005bb0 <OLED_Settings_TimeoutCheck+0x44>)
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d015      	beq.n	8005ba6 <OLED_Settings_TimeoutCheck+0x3a>

    uint32_t now = HAL_GetTick();
 8005b7a:	f000 fce5 	bl	8006548 <HAL_GetTick>
 8005b7e:	6078      	str	r0, [r7, #4]

    // Таймаут работает ТОЛЬКО если мы не в режиме редактирования и не в подтверждении
    if (!editing_active && !confirm_active && (now - last_activity_time) >= 10000)
 8005b80:	4b0c      	ldr	r3, [pc, #48]	@ (8005bb4 <OLED_Settings_TimeoutCheck+0x48>)
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10f      	bne.n	8005ba8 <OLED_Settings_TimeoutCheck+0x3c>
 8005b88:	4b0b      	ldr	r3, [pc, #44]	@ (8005bb8 <OLED_Settings_TimeoutCheck+0x4c>)
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10b      	bne.n	8005ba8 <OLED_Settings_TimeoutCheck+0x3c>
 8005b90:	4b0a      	ldr	r3, [pc, #40]	@ (8005bbc <OLED_Settings_TimeoutCheck+0x50>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	f242 720f 	movw	r2, #9999	@ 0x270f
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d903      	bls.n	8005ba8 <OLED_Settings_TimeoutCheck+0x3c>
    {
        OLED_Settings_Exit();
 8005ba0:	f7ff ffce 	bl	8005b40 <OLED_Settings_Exit>
 8005ba4:	e000      	b.n	8005ba8 <OLED_Settings_TimeoutCheck+0x3c>
    if (!settings_active) return;
 8005ba6:	bf00      	nop
    }
}
 8005ba8:	3708      	adds	r7, #8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	20004cb4 	.word	0x20004cb4
 8005bb4:	20004ce0 	.word	0x20004ce0
 8005bb8:	20004ce9 	.word	0x20004ce9
 8005bbc:	20004ce4 	.word	0x20004ce4

08005bc0 <OLED_UpdateDisplay>:
    button_held = held;
    if(!held) button_press_time = 0;
}

void OLED_UpdateDisplay(void)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
    static uint32_t last_display_update = 0;
    uint32_t now = HAL_GetTick();
 8005bc6:	f000 fcbf 	bl	8006548 <HAL_GetTick>
 8005bca:	6078      	str	r0, [r7, #4]

    if (now - last_display_update < 500) {
 8005bcc:	4b12      	ldr	r3, [pc, #72]	@ (8005c18 <OLED_UpdateDisplay+0x58>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005bd8:	d31a      	bcc.n	8005c10 <OLED_UpdateDisplay+0x50>
        return;
    }
    last_display_update = now;
 8005bda:	4a0f      	ldr	r2, [pc, #60]	@ (8005c18 <OLED_UpdateDisplay+0x58>)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6013      	str	r3, [r2, #0]

    if (settings_active) {
 8005be0:	4b0e      	ldr	r3, [pc, #56]	@ (8005c1c <OLED_UpdateDisplay+0x5c>)
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d010      	beq.n	8005c0a <OLED_UpdateDisplay+0x4a>
        if (confirm_active) {
 8005be8:	4b0d      	ldr	r3, [pc, #52]	@ (8005c20 <OLED_UpdateDisplay+0x60>)
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d002      	beq.n	8005bf6 <OLED_UpdateDisplay+0x36>
            OLED_Draw_Confirm();
 8005bf0:	f7fe ffea 	bl	8004bc8 <OLED_Draw_Confirm>
 8005bf4:	e00d      	b.n	8005c12 <OLED_UpdateDisplay+0x52>
        }
        else if (editing_active) {
 8005bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8005c24 <OLED_UpdateDisplay+0x64>)
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d002      	beq.n	8005c04 <OLED_UpdateDisplay+0x44>
            OLED_Draw_Edit();
 8005bfe:	f7ff fcd9 	bl	80055b4 <OLED_Draw_Edit>
 8005c02:	e006      	b.n	8005c12 <OLED_UpdateDisplay+0x52>
        }
        else {
            OLED_Settings_Draw();
 8005c04:	f7ff fc48 	bl	8005498 <OLED_Settings_Draw>
 8005c08:	e003      	b.n	8005c12 <OLED_UpdateDisplay+0x52>
        }
    }
    else {
        OLED_ShowCurrentPage();
 8005c0a:	f7fe fa41 	bl	8004090 <OLED_ShowCurrentPage>
 8005c0e:	e000      	b.n	8005c12 <OLED_UpdateDisplay+0x52>
        return;
 8005c10:	bf00      	nop
    }
}
 8005c12:	3708      	adds	r7, #8
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	20004cf4 	.word	0x20004cf4
 8005c1c:	20004cb4 	.word	0x20004cb4
 8005c20:	20004ce9 	.word	0x20004ce9
 8005c24:	20004ce0 	.word	0x20004ce0

08005c28 <custom_get_value>:
static const u32_t custom_base_oid[] = { 1,3,6,1,4,1,62283,1 };



/* Колбэки для чтения переменных */
static s16_t custom_get_value(struct snmp_node_instance* instance, void* value) {
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  *(u32_t*)value = voltage1;
 8005c32:	4b06      	ldr	r3, [pc, #24]	@ (8005c4c <custom_get_value+0x24>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7fb facc 	bl	80011d4 <__aeabi_f2uiz>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	601a      	str	r2, [r3, #0]
  return sizeof(u32_t);
 8005c42:	2304      	movs	r3, #4
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3708      	adds	r7, #8
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	20004c64 	.word	0x20004c64

08005c50 <custom_get_var1>:

static s16_t custom_get_var1(struct snmp_node_instance* instance, void* value) {
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  *(u32_t*)value = voltage2;
 8005c5a:	4b06      	ldr	r3, [pc, #24]	@ (8005c74 <custom_get_var1+0x24>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7fb fab8 	bl	80011d4 <__aeabi_f2uiz>
 8005c64:	4602      	mov	r2, r0
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	601a      	str	r2, [r3, #0]
  return sizeof(u32_t);
 8005c6a:	2304      	movs	r3, #4
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3708      	adds	r7, #8
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	20004c68 	.word	0x20004c68

08005c78 <custom_get_var2>:

static s16_t custom_get_var2(struct snmp_node_instance* instance, void* value) {
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  *(u32_t*)value = current;
 8005c82:	4b06      	ldr	r3, [pc, #24]	@ (8005c9c <custom_get_var2+0x24>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fb faa4 	bl	80011d4 <__aeabi_f2uiz>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	601a      	str	r2, [r3, #0]
  return sizeof(u32_t);
 8005c92:	2304      	movs	r3, #4
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3708      	adds	r7, #8
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	20004c6c 	.word	0x20004c6c

08005ca0 <custom_get_var3>:

static s16_t custom_get_var3(struct snmp_node_instance* instance, void* value) {
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  *(u32_t*)value = 123;
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	227b      	movs	r2, #123	@ 0x7b
 8005cae:	601a      	str	r2, [r3, #0]
  return sizeof(u32_t);
 8005cb0:	2304      	movs	r3, #4
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bc80      	pop	{r7}
 8005cba:	4770      	bx	lr

08005cbc <custom_get_var4>:

static s16_t custom_get_var4(struct snmp_node_instance* instance, void* value) {
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  *(u32_t*)value = 228;
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	22e4      	movs	r2, #228	@ 0xe4
 8005cca:	601a      	str	r2, [r3, #0]
  return sizeof(u32_t);
 8005ccc:	2304      	movs	r3, #4
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bc80      	pop	{r7}
 8005cd6:	4770      	bx	lr

08005cd8 <ssd1306_map_logical_to_physical>:
/* Map logical (lx,ly) -> physical (px,py) for 90° clockwise rotation:
 * px = physical_x = W - 1 - ly
 * py = physical_y = lx
 */
// Поворот 90° против часовой стрелки
static inline void ssd1306_map_logical_to_physical(uint8_t lx, uint8_t ly, uint8_t *px, uint8_t *py) {
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60ba      	str	r2, [r7, #8]
 8005ce0:	607b      	str	r3, [r7, #4]
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	73fb      	strb	r3, [r7, #15]
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	73bb      	strb	r3, [r7, #14]
    *px = ly;
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	7bba      	ldrb	r2, [r7, #14]
 8005cee:	701a      	strb	r2, [r3, #0]
    *py = (uint8_t)(SSD1306_HEIGHT - 1 - lx);
 8005cf0:	7bfb      	ldrb	r3, [r7, #15]
 8005cf2:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8005cf6:	b2da      	uxtb	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	701a      	strb	r2, [r3, #0]
}
 8005cfc:	bf00      	nop
 8005cfe:	3714      	adds	r7, #20
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bc80      	pop	{r7}
 8005d04:	4770      	bx	lr

08005d06 <ssd1306_Reset>:


#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8005d06:	b480      	push	{r7}
 8005d08:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8005d0a:	bf00      	nop
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bc80      	pop	{r7}
 8005d10:	4770      	bx	lr
	...

08005d14 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af04      	add	r7, sp, #16
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8005d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d22:	9302      	str	r3, [sp, #8]
 8005d24:	2301      	movs	r3, #1
 8005d26:	9301      	str	r3, [sp, #4]
 8005d28:	1dfb      	adds	r3, r7, #7
 8005d2a:	9300      	str	r3, [sp, #0]
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	2200      	movs	r2, #0
 8005d30:	2178      	movs	r1, #120	@ 0x78
 8005d32:	4803      	ldr	r0, [pc, #12]	@ (8005d40 <ssd1306_WriteCommand+0x2c>)
 8005d34:	f003 fb70 	bl	8009418 <HAL_I2C_Mem_Write>
}
 8005d38:	bf00      	nop
 8005d3a:	3708      	adds	r7, #8
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	20002b30 	.word	0x20002b30

08005d44 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af04      	add	r7, sp, #16
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	f04f 32ff 	mov.w	r2, #4294967295
 8005d56:	9202      	str	r2, [sp, #8]
 8005d58:	9301      	str	r3, [sp, #4]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	9300      	str	r3, [sp, #0]
 8005d5e:	2301      	movs	r3, #1
 8005d60:	2240      	movs	r2, #64	@ 0x40
 8005d62:	2178      	movs	r1, #120	@ 0x78
 8005d64:	4803      	ldr	r0, [pc, #12]	@ (8005d74 <ssd1306_WriteData+0x30>)
 8005d66:	f003 fb57 	bl	8009418 <HAL_I2C_Mem_Write>
}
 8005d6a:	bf00      	nop
 8005d6c:	3708      	adds	r7, #8
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	20002b30 	.word	0x20002b30

08005d78 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8005d7c:	f7ff ffc3 	bl	8005d06 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8005d80:	2064      	movs	r0, #100	@ 0x64
 8005d82:	f000 fbeb 	bl	800655c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8005d86:	2000      	movs	r0, #0
 8005d88:	f000 fafe 	bl	8006388 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8005d8c:	2020      	movs	r0, #32
 8005d8e:	f7ff ffc1 	bl	8005d14 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8005d92:	2000      	movs	r0, #0
 8005d94:	f7ff ffbe 	bl	8005d14 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8005d98:	20b0      	movs	r0, #176	@ 0xb0
 8005d9a:	f7ff ffbb 	bl	8005d14 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8005d9e:	20c8      	movs	r0, #200	@ 0xc8
 8005da0:	f7ff ffb8 	bl	8005d14 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8005da4:	2000      	movs	r0, #0
 8005da6:	f7ff ffb5 	bl	8005d14 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8005daa:	2010      	movs	r0, #16
 8005dac:	f7ff ffb2 	bl	8005d14 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8005db0:	2040      	movs	r0, #64	@ 0x40
 8005db2:	f7ff ffaf 	bl	8005d14 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8005db6:	20ff      	movs	r0, #255	@ 0xff
 8005db8:	f000 fad2 	bl	8006360 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8005dbc:	20a1      	movs	r0, #161	@ 0xa1
 8005dbe:	f7ff ffa9 	bl	8005d14 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8005dc2:	20a6      	movs	r0, #166	@ 0xa6
 8005dc4:	f7ff ffa6 	bl	8005d14 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8005dc8:	20a8      	movs	r0, #168	@ 0xa8
 8005dca:	f7ff ffa3 	bl	8005d14 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8005dce:	203f      	movs	r0, #63	@ 0x3f
 8005dd0:	f7ff ffa0 	bl	8005d14 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8005dd4:	20a4      	movs	r0, #164	@ 0xa4
 8005dd6:	f7ff ff9d 	bl	8005d14 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8005dda:	20d3      	movs	r0, #211	@ 0xd3
 8005ddc:	f7ff ff9a 	bl	8005d14 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8005de0:	2000      	movs	r0, #0
 8005de2:	f7ff ff97 	bl	8005d14 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8005de6:	20d5      	movs	r0, #213	@ 0xd5
 8005de8:	f7ff ff94 	bl	8005d14 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8005dec:	20f0      	movs	r0, #240	@ 0xf0
 8005dee:	f7ff ff91 	bl	8005d14 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8005df2:	20d9      	movs	r0, #217	@ 0xd9
 8005df4:	f7ff ff8e 	bl	8005d14 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8005df8:	2022      	movs	r0, #34	@ 0x22
 8005dfa:	f7ff ff8b 	bl	8005d14 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8005dfe:	20da      	movs	r0, #218	@ 0xda
 8005e00:	f7ff ff88 	bl	8005d14 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8005e04:	2012      	movs	r0, #18
 8005e06:	f7ff ff85 	bl	8005d14 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8005e0a:	20db      	movs	r0, #219	@ 0xdb
 8005e0c:	f7ff ff82 	bl	8005d14 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8005e10:	2020      	movs	r0, #32
 8005e12:	f7ff ff7f 	bl	8005d14 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8005e16:	208d      	movs	r0, #141	@ 0x8d
 8005e18:	f7ff ff7c 	bl	8005d14 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8005e1c:	2014      	movs	r0, #20
 8005e1e:	f7ff ff79 	bl	8005d14 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8005e22:	2001      	movs	r0, #1
 8005e24:	f000 fab0 	bl	8006388 <ssd1306_SetDisplayOn>

    // Clear screen (logical)
    ssd1306_Fill(Black);
 8005e28:	2000      	movs	r0, #0
 8005e2a:	f000 f80f 	bl	8005e4c <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8005e2e:	f000 f825 	bl	8005e7c <ssd1306_UpdateScreen>

    // Set default values for screen object (logical coords)
    SSD1306.CurrentX = 0;
 8005e32:	4b05      	ldr	r3, [pc, #20]	@ (8005e48 <ssd1306_Init+0xd0>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8005e38:	4b03      	ldr	r3, [pc, #12]	@ (8005e48 <ssd1306_Init+0xd0>)
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8005e3e:	4b02      	ldr	r3, [pc, #8]	@ (8005e48 <ssd1306_Init+0xd0>)
 8005e40:	2201      	movs	r2, #1
 8005e42:	711a      	strb	r2, [r3, #4]
}
 8005e44:	bf00      	nop
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	200050f8 	.word	0x200050f8

08005e4c <ssd1306_Fill>:

/* Fill the whole screen with the given color (physical buffer fill) */
void ssd1306_Fill(SSD1306_COLOR color) {
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	4603      	mov	r3, r0
 8005e54:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8005e56:	79fb      	ldrb	r3, [r7, #7]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d101      	bne.n	8005e60 <ssd1306_Fill+0x14>
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	e000      	b.n	8005e62 <ssd1306_Fill+0x16>
 8005e60:	23ff      	movs	r3, #255	@ 0xff
 8005e62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005e66:	4619      	mov	r1, r3
 8005e68:	4803      	ldr	r0, [pc, #12]	@ (8005e78 <ssd1306_Fill+0x2c>)
 8005e6a:	f01c f8e3 	bl	8022034 <memset>
}
 8005e6e:	bf00      	nop
 8005e70:	3708      	adds	r7, #8
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	20004cf8 	.word	0x20004cf8

08005e7c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen (physical pages) */
void ssd1306_UpdateScreen(void) {
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
    // depends on the screen height (physical):
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8005e82:	2300      	movs	r3, #0
 8005e84:	71fb      	strb	r3, [r7, #7]
 8005e86:	e016      	b.n	8005eb6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8005e88:	79fb      	ldrb	r3, [r7, #7]
 8005e8a:	3b50      	subs	r3, #80	@ 0x50
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7ff ff40 	bl	8005d14 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8005e94:	2000      	movs	r0, #0
 8005e96:	f7ff ff3d 	bl	8005d14 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8005e9a:	2010      	movs	r0, #16
 8005e9c:	f7ff ff3a 	bl	8005d14 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 8005ea0:	79fb      	ldrb	r3, [r7, #7]
 8005ea2:	01db      	lsls	r3, r3, #7
 8005ea4:	4a08      	ldr	r2, [pc, #32]	@ (8005ec8 <ssd1306_UpdateScreen+0x4c>)
 8005ea6:	4413      	add	r3, r2
 8005ea8:	2180      	movs	r1, #128	@ 0x80
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7ff ff4a 	bl	8005d44 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8005eb0:	79fb      	ldrb	r3, [r7, #7]
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	71fb      	strb	r3, [r7, #7]
 8005eb6:	79fb      	ldrb	r3, [r7, #7]
 8005eb8:	2b07      	cmp	r3, #7
 8005eba:	d9e5      	bls.n	8005e88 <ssd1306_UpdateScreen+0xc>
    }
}
 8005ebc:	bf00      	nop
 8005ebe:	bf00      	nop
 8005ec0:	3708      	adds	r7, #8
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	20004cf8 	.word	0x20004cf8

08005ecc <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer (logical coords)
 * X => X Logical Coordinate (0..SSD1306_ROTATED_WIDTH-1)
 * Y => Y Logical Coordinate (0..SSD1306_ROTATED_HEIGHT-1)
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	71fb      	strb	r3, [r7, #7]
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	71bb      	strb	r3, [r7, #6]
 8005eda:	4613      	mov	r3, r2
 8005edc:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_ROTATED_WIDTH || y >= SSD1306_ROTATED_HEIGHT) {
 8005ede:	79fb      	ldrb	r3, [r7, #7]
 8005ee0:	2b3f      	cmp	r3, #63	@ 0x3f
 8005ee2:	d83c      	bhi.n	8005f5e <ssd1306_DrawPixel+0x92>
 8005ee4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	db38      	blt.n	8005f5e <ssd1306_DrawPixel+0x92>
        // Don't write outside the logical buffer
        return;
    }

    uint8_t px, py;
    ssd1306_map_logical_to_physical(x, y, &px, &py);
 8005eec:	f107 0309 	add.w	r3, r7, #9
 8005ef0:	f107 020a 	add.w	r2, r7, #10
 8005ef4:	79b9      	ldrb	r1, [r7, #6]
 8005ef6:	79f8      	ldrb	r0, [r7, #7]
 8005ef8:	f7ff feee 	bl	8005cd8 <ssd1306_map_logical_to_physical>

    uint32_t index = (uint32_t)px + ((uint32_t)(py / 8) * SSD1306_WIDTH);
 8005efc:	7abb      	ldrb	r3, [r7, #10]
 8005efe:	461a      	mov	r2, r3
 8005f00:	7a7b      	ldrb	r3, [r7, #9]
 8005f02:	08db      	lsrs	r3, r3, #3
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	01db      	lsls	r3, r3, #7
 8005f08:	4413      	add	r3, r2
 8005f0a:	60fb      	str	r3, [r7, #12]
    uint8_t mask = (uint8_t)(1 << (py % 8));
 8005f0c:	7a7b      	ldrb	r3, [r7, #9]
 8005f0e:	f003 0307 	and.w	r3, r3, #7
 8005f12:	2201      	movs	r2, #1
 8005f14:	fa02 f303 	lsl.w	r3, r2, r3
 8005f18:	72fb      	strb	r3, [r7, #11]

    if (color == White) {
 8005f1a:	797b      	ldrb	r3, [r7, #5]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d10c      	bne.n	8005f3a <ssd1306_DrawPixel+0x6e>
        SSD1306_Buffer[index] |= mask;
 8005f20:	4a11      	ldr	r2, [pc, #68]	@ (8005f68 <ssd1306_DrawPixel+0x9c>)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	4413      	add	r3, r2
 8005f26:	781a      	ldrb	r2, [r3, #0]
 8005f28:	7afb      	ldrb	r3, [r7, #11]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	b2d9      	uxtb	r1, r3
 8005f2e:	4a0e      	ldr	r2, [pc, #56]	@ (8005f68 <ssd1306_DrawPixel+0x9c>)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	4413      	add	r3, r2
 8005f34:	460a      	mov	r2, r1
 8005f36:	701a      	strb	r2, [r3, #0]
 8005f38:	e012      	b.n	8005f60 <ssd1306_DrawPixel+0x94>
    } else {
        SSD1306_Buffer[index] &= ~mask;
 8005f3a:	4a0b      	ldr	r2, [pc, #44]	@ (8005f68 <ssd1306_DrawPixel+0x9c>)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	4413      	add	r3, r2
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	b25a      	sxtb	r2, r3
 8005f44:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005f48:	43db      	mvns	r3, r3
 8005f4a:	b25b      	sxtb	r3, r3
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	b25b      	sxtb	r3, r3
 8005f50:	b2d9      	uxtb	r1, r3
 8005f52:	4a05      	ldr	r2, [pc, #20]	@ (8005f68 <ssd1306_DrawPixel+0x9c>)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	4413      	add	r3, r2
 8005f58:	460a      	mov	r2, r1
 8005f5a:	701a      	strb	r2, [r3, #0]
 8005f5c:	e000      	b.n	8005f60 <ssd1306_DrawPixel+0x94>
        return;
 8005f5e:	bf00      	nop
    }
}
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	20004cf8 	.word	0x20004cf8

08005f6c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer (logical coords)
 * ch       => char to write
 * Font     => Font to use
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8005f6c:	b590      	push	{r4, r7, lr}
 8005f6e:	b089      	sub	sp, #36	@ 0x24
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	4604      	mov	r4, r0
 8005f74:	4638      	mov	r0, r7
 8005f76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8005f7a:	4623      	mov	r3, r4
 8005f7c:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 8005f7e:	7bfb      	ldrb	r3, [r7, #15]
 8005f80:	2b1f      	cmp	r3, #31
 8005f82:	d902      	bls.n	8005f8a <ssd1306_WriteChar+0x1e>
 8005f84:	7bfb      	ldrb	r3, [r7, #15]
 8005f86:	2b7e      	cmp	r3, #126	@ 0x7e
 8005f88:	d901      	bls.n	8005f8e <ssd1306_WriteChar+0x22>
        return 0;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	e079      	b.n	8006082 <ssd1306_WriteChar+0x116>

    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d005      	beq.n	8005fa0 <ssd1306_WriteChar+0x34>
 8005f94:	68ba      	ldr	r2, [r7, #8]
 8005f96:	7bfb      	ldrb	r3, [r7, #15]
 8005f98:	3b20      	subs	r3, #32
 8005f9a:	4413      	add	r3, r2
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	e000      	b.n	8005fa2 <ssd1306_WriteChar+0x36>
 8005fa0:	783b      	ldrb	r3, [r7, #0]
 8005fa2:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line (logical)
    if (SSD1306_ROTATED_WIDTH < (SSD1306.CurrentX + char_width) ||
 8005fa4:	4b39      	ldr	r3, [pc, #228]	@ (800608c <ssd1306_WriteChar+0x120>)
 8005fa6:	881b      	ldrh	r3, [r3, #0]
 8005fa8:	461a      	mov	r2, r3
 8005faa:	7dfb      	ldrb	r3, [r7, #23]
 8005fac:	4413      	add	r3, r2
 8005fae:	2b40      	cmp	r3, #64	@ 0x40
 8005fb0:	dc06      	bgt.n	8005fc0 <ssd1306_WriteChar+0x54>
        SSD1306_ROTATED_HEIGHT < (SSD1306.CurrentY + Font.height))
 8005fb2:	4b36      	ldr	r3, [pc, #216]	@ (800608c <ssd1306_WriteChar+0x120>)
 8005fb4:	885b      	ldrh	r3, [r3, #2]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	787b      	ldrb	r3, [r7, #1]
 8005fba:	4413      	add	r3, r2
    if (SSD1306_ROTATED_WIDTH < (SSD1306.CurrentX + char_width) ||
 8005fbc:	2b80      	cmp	r3, #128	@ 0x80
 8005fbe:	dd01      	ble.n	8005fc4 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	e05e      	b.n	8006082 <ssd1306_WriteChar+0x116>
    }

    // Use the font to write (font expected to be in conventional orientation;
    // since DrawPixel maps logical->physical, characters will be rotated accordingly)
    for(i = 0; i < Font.height; i++) {
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	61fb      	str	r3, [r7, #28]
 8005fc8:	e04d      	b.n	8006066 <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	7bfb      	ldrb	r3, [r7, #15]
 8005fce:	3b20      	subs	r3, #32
 8005fd0:	7879      	ldrb	r1, [r7, #1]
 8005fd2:	fb01 f303 	mul.w	r3, r1, r3
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	440b      	add	r3, r1
 8005fdc:	005b      	lsls	r3, r3, #1
 8005fde:	4413      	add	r3, r2
 8005fe0:	881b      	ldrh	r3, [r3, #0]
 8005fe2:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	61bb      	str	r3, [r7, #24]
 8005fe8:	e036      	b.n	8006058 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d013      	beq.n	8006022 <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8005ffa:	4b24      	ldr	r3, [pc, #144]	@ (800608c <ssd1306_WriteChar+0x120>)
 8005ffc:	881b      	ldrh	r3, [r3, #0]
 8005ffe:	b2da      	uxtb	r2, r3
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	b2db      	uxtb	r3, r3
 8006004:	4413      	add	r3, r2
 8006006:	b2d8      	uxtb	r0, r3
 8006008:	4b20      	ldr	r3, [pc, #128]	@ (800608c <ssd1306_WriteChar+0x120>)
 800600a:	885b      	ldrh	r3, [r3, #2]
 800600c:	b2da      	uxtb	r2, r3
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	b2db      	uxtb	r3, r3
 8006012:	4413      	add	r3, r2
 8006014:	b2db      	uxtb	r3, r3
 8006016:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800601a:	4619      	mov	r1, r3
 800601c:	f7ff ff56 	bl	8005ecc <ssd1306_DrawPixel>
 8006020:	e017      	b.n	8006052 <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8006022:	4b1a      	ldr	r3, [pc, #104]	@ (800608c <ssd1306_WriteChar+0x120>)
 8006024:	881b      	ldrh	r3, [r3, #0]
 8006026:	b2da      	uxtb	r2, r3
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	b2db      	uxtb	r3, r3
 800602c:	4413      	add	r3, r2
 800602e:	b2d8      	uxtb	r0, r3
 8006030:	4b16      	ldr	r3, [pc, #88]	@ (800608c <ssd1306_WriteChar+0x120>)
 8006032:	885b      	ldrh	r3, [r3, #2]
 8006034:	b2da      	uxtb	r2, r3
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	b2db      	uxtb	r3, r3
 800603a:	4413      	add	r3, r2
 800603c:	b2d9      	uxtb	r1, r3
 800603e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8006042:	2b00      	cmp	r3, #0
 8006044:	bf0c      	ite	eq
 8006046:	2301      	moveq	r3, #1
 8006048:	2300      	movne	r3, #0
 800604a:	b2db      	uxtb	r3, r3
 800604c:	461a      	mov	r2, r3
 800604e:	f7ff ff3d 	bl	8005ecc <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	3301      	adds	r3, #1
 8006056:	61bb      	str	r3, [r7, #24]
 8006058:	7dfb      	ldrb	r3, [r7, #23]
 800605a:	69ba      	ldr	r2, [r7, #24]
 800605c:	429a      	cmp	r2, r3
 800605e:	d3c4      	bcc.n	8005fea <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	3301      	adds	r3, #1
 8006064:	61fb      	str	r3, [r7, #28]
 8006066:	787b      	ldrb	r3, [r7, #1]
 8006068:	461a      	mov	r2, r3
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	4293      	cmp	r3, r2
 800606e:	d3ac      	bcc.n	8005fca <ssd1306_WriteChar+0x5e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8006070:	4b06      	ldr	r3, [pc, #24]	@ (800608c <ssd1306_WriteChar+0x120>)
 8006072:	881a      	ldrh	r2, [r3, #0]
 8006074:	7dfb      	ldrb	r3, [r7, #23]
 8006076:	b29b      	uxth	r3, r3
 8006078:	4413      	add	r3, r2
 800607a:	b29a      	uxth	r2, r3
 800607c:	4b03      	ldr	r3, [pc, #12]	@ (800608c <ssd1306_WriteChar+0x120>)
 800607e:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8006080:	7bfb      	ldrb	r3, [r7, #15]
}
 8006082:	4618      	mov	r0, r3
 8006084:	3724      	adds	r7, #36	@ 0x24
 8006086:	46bd      	mov	sp, r7
 8006088:	bd90      	pop	{r4, r7, pc}
 800608a:	bf00      	nop
 800608c:	200050f8 	.word	0x200050f8

08006090 <ssd1306_WriteString>:

/* Write full string to screenbuffer (logical) */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8006090:	b580      	push	{r7, lr}
 8006092:	b086      	sub	sp, #24
 8006094:	af02      	add	r7, sp, #8
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	4638      	mov	r0, r7
 800609a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 800609e:	e013      	b.n	80060c8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	7818      	ldrb	r0, [r3, #0]
 80060a4:	7e3b      	ldrb	r3, [r7, #24]
 80060a6:	9300      	str	r3, [sp, #0]
 80060a8:	463b      	mov	r3, r7
 80060aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80060ac:	f7ff ff5e 	bl	8005f6c <ssd1306_WriteChar>
 80060b0:	4603      	mov	r3, r0
 80060b2:	461a      	mov	r2, r3
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d002      	beq.n	80060c2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	e008      	b.n	80060d4 <ssd1306_WriteString+0x44>
        }
        str++;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	3301      	adds	r3, #1
 80060c6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d1e7      	bne.n	80060a0 <ssd1306_WriteString+0x10>
    }

    // Everything ok
    return *str;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	781b      	ldrb	r3, [r3, #0]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3710      	adds	r7, #16
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <ssd1306_SetCursor>:

/* Position the cursor (logical) */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	4603      	mov	r3, r0
 80060e4:	460a      	mov	r2, r1
 80060e6:	71fb      	strb	r3, [r7, #7]
 80060e8:	4613      	mov	r3, r2
 80060ea:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80060ec:	79fb      	ldrb	r3, [r7, #7]
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	4b05      	ldr	r3, [pc, #20]	@ (8006108 <ssd1306_SetCursor+0x2c>)
 80060f2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80060f4:	79bb      	ldrb	r3, [r7, #6]
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	4b03      	ldr	r3, [pc, #12]	@ (8006108 <ssd1306_SetCursor+0x2c>)
 80060fa:	805a      	strh	r2, [r3, #2]
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	bc80      	pop	{r7}
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	200050f8 	.word	0x200050f8

0800610c <ssd1306_Line>:

/* Draw line by Bresenham's algorithm (logical coords) */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800610c:	b590      	push	{r4, r7, lr}
 800610e:	b089      	sub	sp, #36	@ 0x24
 8006110:	af00      	add	r7, sp, #0
 8006112:	4604      	mov	r4, r0
 8006114:	4608      	mov	r0, r1
 8006116:	4611      	mov	r1, r2
 8006118:	461a      	mov	r2, r3
 800611a:	4623      	mov	r3, r4
 800611c:	71fb      	strb	r3, [r7, #7]
 800611e:	4603      	mov	r3, r0
 8006120:	71bb      	strb	r3, [r7, #6]
 8006122:	460b      	mov	r3, r1
 8006124:	717b      	strb	r3, [r7, #5]
 8006126:	4613      	mov	r3, r2
 8006128:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs((int32_t)x2 - (int32_t)x1);
 800612a:	797a      	ldrb	r2, [r7, #5]
 800612c:	79fb      	ldrb	r3, [r7, #7]
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	2b00      	cmp	r3, #0
 8006132:	bfb8      	it	lt
 8006134:	425b      	neglt	r3, r3
 8006136:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs((int32_t)y2 - (int32_t)y1);
 8006138:	793a      	ldrb	r2, [r7, #4]
 800613a:	79bb      	ldrb	r3, [r7, #6]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	2b00      	cmp	r3, #0
 8006140:	bfb8      	it	lt
 8006142:	425b      	neglt	r3, r3
 8006144:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8006146:	79fa      	ldrb	r2, [r7, #7]
 8006148:	797b      	ldrb	r3, [r7, #5]
 800614a:	429a      	cmp	r2, r3
 800614c:	d201      	bcs.n	8006152 <ssd1306_Line+0x46>
 800614e:	2301      	movs	r3, #1
 8006150:	e001      	b.n	8006156 <ssd1306_Line+0x4a>
 8006152:	f04f 33ff 	mov.w	r3, #4294967295
 8006156:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8006158:	79ba      	ldrb	r2, [r7, #6]
 800615a:	793b      	ldrb	r3, [r7, #4]
 800615c:	429a      	cmp	r2, r3
 800615e:	d201      	bcs.n	8006164 <ssd1306_Line+0x58>
 8006160:	2301      	movs	r3, #1
 8006162:	e001      	b.n	8006168 <ssd1306_Line+0x5c>
 8006164:	f04f 33ff 	mov.w	r3, #4294967295
 8006168:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 800616a:	69ba      	ldr	r2, [r7, #24]
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	61fb      	str	r3, [r7, #28]
    int32_t error2;

    ssd1306_DrawPixel(x2, y2, color);
 8006172:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8006176:	7939      	ldrb	r1, [r7, #4]
 8006178:	797b      	ldrb	r3, [r7, #5]
 800617a:	4618      	mov	r0, r3
 800617c:	f7ff fea6 	bl	8005ecc <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8006180:	e024      	b.n	80061cc <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8006182:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8006186:	79b9      	ldrb	r1, [r7, #6]
 8006188:	79fb      	ldrb	r3, [r7, #7]
 800618a:	4618      	mov	r0, r3
 800618c:	f7ff fe9e 	bl	8005ecc <ssd1306_DrawPixel>
        error2 = error * 2;
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	005b      	lsls	r3, r3, #1
 8006194:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	425b      	negs	r3, r3
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	429a      	cmp	r2, r3
 800619e:	dd08      	ble.n	80061b2 <ssd1306_Line+0xa6>
            error -= deltaY;
 80061a0:	69fa      	ldr	r2, [r7, #28]
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	b2da      	uxtb	r2, r3
 80061ac:	79fb      	ldrb	r3, [r7, #7]
 80061ae:	4413      	add	r3, r2
 80061b0:	71fb      	strb	r3, [r7, #7]
        }

        if(error2 < deltaX) {
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	da08      	bge.n	80061cc <ssd1306_Line+0xc0>
            error += deltaX;
 80061ba:	69fa      	ldr	r2, [r7, #28]
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	4413      	add	r3, r2
 80061c0:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	b2da      	uxtb	r2, r3
 80061c6:	79bb      	ldrb	r3, [r7, #6]
 80061c8:	4413      	add	r3, r2
 80061ca:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 80061cc:	79fa      	ldrb	r2, [r7, #7]
 80061ce:	797b      	ldrb	r3, [r7, #5]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d1d6      	bne.n	8006182 <ssd1306_Line+0x76>
 80061d4:	79ba      	ldrb	r2, [r7, #6]
 80061d6:	793b      	ldrb	r3, [r7, #4]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d1d2      	bne.n	8006182 <ssd1306_Line+0x76>
        }
    }
    return;
 80061dc:	bf00      	nop
}
 80061de:	3724      	adds	r7, #36	@ 0x24
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd90      	pop	{r4, r7, pc}

080061e4 <ssd1306_DrawCircle>:
    ssd1306_Line(x,y,xp2,yp2,color);
    return;
}

/* Draw circle by Bresenham's algorithm (logical) */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 80061e4:	b590      	push	{r4, r7, lr}
 80061e6:	b087      	sub	sp, #28
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	4604      	mov	r4, r0
 80061ec:	4608      	mov	r0, r1
 80061ee:	4611      	mov	r1, r2
 80061f0:	461a      	mov	r2, r3
 80061f2:	4623      	mov	r3, r4
 80061f4:	71fb      	strb	r3, [r7, #7]
 80061f6:	4603      	mov	r3, r0
 80061f8:	71bb      	strb	r3, [r7, #6]
 80061fa:	460b      	mov	r3, r1
 80061fc:	717b      	strb	r3, [r7, #5]
 80061fe:	4613      	mov	r3, r2
 8006200:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8006202:	797b      	ldrb	r3, [r7, #5]
 8006204:	425b      	negs	r3, r3
 8006206:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8006208:	2300      	movs	r3, #0
 800620a:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 800620c:	797b      	ldrb	r3, [r7, #5]
 800620e:	f1c3 0301 	rsb	r3, r3, #1
 8006212:	005b      	lsls	r3, r3, #1
 8006214:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_ROTATED_WIDTH || par_y >= SSD1306_ROTATED_HEIGHT) {
 8006216:	79fb      	ldrb	r3, [r7, #7]
 8006218:	2b3f      	cmp	r3, #63	@ 0x3f
 800621a:	d866      	bhi.n	80062ea <ssd1306_DrawCircle+0x106>
 800621c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006220:	2b00      	cmp	r3, #0
 8006222:	db62      	blt.n	80062ea <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	b2db      	uxtb	r3, r3
 8006228:	79fa      	ldrb	r2, [r7, #7]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	b2d8      	uxtb	r0, r3
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	b2da      	uxtb	r2, r3
 8006232:	79bb      	ldrb	r3, [r7, #6]
 8006234:	4413      	add	r3, r2
 8006236:	b2db      	uxtb	r3, r3
 8006238:	793a      	ldrb	r2, [r7, #4]
 800623a:	4619      	mov	r1, r3
 800623c:	f7ff fe46 	bl	8005ecc <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	b2da      	uxtb	r2, r3
 8006244:	79fb      	ldrb	r3, [r7, #7]
 8006246:	4413      	add	r3, r2
 8006248:	b2d8      	uxtb	r0, r3
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	b2da      	uxtb	r2, r3
 800624e:	79bb      	ldrb	r3, [r7, #6]
 8006250:	4413      	add	r3, r2
 8006252:	b2db      	uxtb	r3, r3
 8006254:	793a      	ldrb	r2, [r7, #4]
 8006256:	4619      	mov	r1, r3
 8006258:	f7ff fe38 	bl	8005ecc <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	b2da      	uxtb	r2, r3
 8006260:	79fb      	ldrb	r3, [r7, #7]
 8006262:	4413      	add	r3, r2
 8006264:	b2d8      	uxtb	r0, r3
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	b2db      	uxtb	r3, r3
 800626a:	79ba      	ldrb	r2, [r7, #6]
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	b2db      	uxtb	r3, r3
 8006270:	793a      	ldrb	r2, [r7, #4]
 8006272:	4619      	mov	r1, r3
 8006274:	f7ff fe2a 	bl	8005ecc <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	b2db      	uxtb	r3, r3
 800627c:	79fa      	ldrb	r2, [r7, #7]
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	b2d8      	uxtb	r0, r3
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	b2db      	uxtb	r3, r3
 8006286:	79ba      	ldrb	r2, [r7, #6]
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	b2db      	uxtb	r3, r3
 800628c:	793a      	ldrb	r2, [r7, #4]
 800628e:	4619      	mov	r1, r3
 8006290:	f7ff fe1c 	bl	8005ecc <ssd1306_DrawPixel>
        e2 = err;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	429a      	cmp	r2, r3
 800629e:	dc13      	bgt.n	80062c8 <ssd1306_DrawCircle+0xe4>
            y++;
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	3301      	adds	r3, #1
 80062a4:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	005b      	lsls	r3, r3, #1
 80062aa:	3301      	adds	r3, #1
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	4413      	add	r3, r2
 80062b0:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	425b      	negs	r3, r3
 80062b6:	693a      	ldr	r2, [r7, #16]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d105      	bne.n	80062c8 <ssd1306_DrawCircle+0xe4>
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	dc01      	bgt.n	80062c8 <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 80062c4:	2300      	movs	r3, #0
 80062c6:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	dd08      	ble.n	80062e2 <ssd1306_DrawCircle+0xfe>
            x++;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	3301      	adds	r3, #1
 80062d4:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	005b      	lsls	r3, r3, #1
 80062da:	3301      	adds	r3, #1
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	4413      	add	r3, r2
 80062e0:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	dd9d      	ble.n	8006224 <ssd1306_DrawCircle+0x40>

    return;
 80062e8:	e000      	b.n	80062ec <ssd1306_DrawCircle+0x108>
        return;
 80062ea:	bf00      	nop
}
 80062ec:	371c      	adds	r7, #28
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd90      	pop	{r4, r7, pc}

080062f2 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle (logical) */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80062f2:	b590      	push	{r4, r7, lr}
 80062f4:	b085      	sub	sp, #20
 80062f6:	af02      	add	r7, sp, #8
 80062f8:	4604      	mov	r4, r0
 80062fa:	4608      	mov	r0, r1
 80062fc:	4611      	mov	r1, r2
 80062fe:	461a      	mov	r2, r3
 8006300:	4623      	mov	r3, r4
 8006302:	71fb      	strb	r3, [r7, #7]
 8006304:	4603      	mov	r3, r0
 8006306:	71bb      	strb	r3, [r7, #6]
 8006308:	460b      	mov	r3, r1
 800630a:	717b      	strb	r3, [r7, #5]
 800630c:	4613      	mov	r3, r2
 800630e:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8006310:	79bc      	ldrb	r4, [r7, #6]
 8006312:	797a      	ldrb	r2, [r7, #5]
 8006314:	79b9      	ldrb	r1, [r7, #6]
 8006316:	79f8      	ldrb	r0, [r7, #7]
 8006318:	7e3b      	ldrb	r3, [r7, #24]
 800631a:	9300      	str	r3, [sp, #0]
 800631c:	4623      	mov	r3, r4
 800631e:	f7ff fef5 	bl	800610c <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8006322:	793c      	ldrb	r4, [r7, #4]
 8006324:	797a      	ldrb	r2, [r7, #5]
 8006326:	79b9      	ldrb	r1, [r7, #6]
 8006328:	7978      	ldrb	r0, [r7, #5]
 800632a:	7e3b      	ldrb	r3, [r7, #24]
 800632c:	9300      	str	r3, [sp, #0]
 800632e:	4623      	mov	r3, r4
 8006330:	f7ff feec 	bl	800610c <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8006334:	793c      	ldrb	r4, [r7, #4]
 8006336:	79fa      	ldrb	r2, [r7, #7]
 8006338:	7939      	ldrb	r1, [r7, #4]
 800633a:	7978      	ldrb	r0, [r7, #5]
 800633c:	7e3b      	ldrb	r3, [r7, #24]
 800633e:	9300      	str	r3, [sp, #0]
 8006340:	4623      	mov	r3, r4
 8006342:	f7ff fee3 	bl	800610c <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8006346:	79bc      	ldrb	r4, [r7, #6]
 8006348:	79fa      	ldrb	r2, [r7, #7]
 800634a:	7939      	ldrb	r1, [r7, #4]
 800634c:	79f8      	ldrb	r0, [r7, #7]
 800634e:	7e3b      	ldrb	r3, [r7, #24]
 8006350:	9300      	str	r3, [sp, #0]
 8006352:	4623      	mov	r3, r4
 8006354:	f7ff feda 	bl	800610c <ssd1306_Line>

    return;
 8006358:	bf00      	nop
}
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	bd90      	pop	{r4, r7, pc}

08006360 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	4603      	mov	r3, r0
 8006368:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800636a:	2381      	movs	r3, #129	@ 0x81
 800636c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800636e:	7bfb      	ldrb	r3, [r7, #15]
 8006370:	4618      	mov	r0, r3
 8006372:	f7ff fccf 	bl	8005d14 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8006376:	79fb      	ldrb	r3, [r7, #7]
 8006378:	4618      	mov	r0, r3
 800637a:	f7ff fccb 	bl	8005d14 <ssd1306_WriteCommand>
}
 800637e:	bf00      	nop
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
	...

08006388 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	4603      	mov	r3, r0
 8006390:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8006392:	79fb      	ldrb	r3, [r7, #7]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d005      	beq.n	80063a4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8006398:	23af      	movs	r3, #175	@ 0xaf
 800639a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800639c:	4b08      	ldr	r3, [pc, #32]	@ (80063c0 <ssd1306_SetDisplayOn+0x38>)
 800639e:	2201      	movs	r2, #1
 80063a0:	715a      	strb	r2, [r3, #5]
 80063a2:	e004      	b.n	80063ae <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80063a4:	23ae      	movs	r3, #174	@ 0xae
 80063a6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80063a8:	4b05      	ldr	r3, [pc, #20]	@ (80063c0 <ssd1306_SetDisplayOn+0x38>)
 80063aa:	2200      	movs	r2, #0
 80063ac:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80063ae:	7bfb      	ldrb	r3, [r7, #15]
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7ff fcaf 	bl	8005d14 <ssd1306_WriteCommand>
}
 80063b6:	bf00      	nop
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	200050f8 	.word	0x200050f8

080063c4 <ssd1306_FillRect>:

uint8_t ssd1306_GetDisplayOn() {
    return SSD1306.DisplayOn;
}

void ssd1306_FillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 80063c4:	b590      	push	{r4, r7, lr}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	4604      	mov	r4, r0
 80063cc:	4608      	mov	r0, r1
 80063ce:	4611      	mov	r1, r2
 80063d0:	461a      	mov	r2, r3
 80063d2:	4623      	mov	r3, r4
 80063d4:	71fb      	strb	r3, [r7, #7]
 80063d6:	4603      	mov	r3, r0
 80063d8:	71bb      	strb	r3, [r7, #6]
 80063da:	460b      	mov	r3, r1
 80063dc:	717b      	strb	r3, [r7, #5]
 80063de:	4613      	mov	r3, r2
 80063e0:	713b      	strb	r3, [r7, #4]
    for (uint8_t i = y; i < y + h; i++) {
 80063e2:	79bb      	ldrb	r3, [r7, #6]
 80063e4:	73fb      	strb	r3, [r7, #15]
 80063e6:	e015      	b.n	8006414 <ssd1306_FillRect+0x50>
        for (uint8_t j = x; j < x + w; j++) {
 80063e8:	79fb      	ldrb	r3, [r7, #7]
 80063ea:	73bb      	strb	r3, [r7, #14]
 80063ec:	e009      	b.n	8006402 <ssd1306_FillRect+0x3e>
            ssd1306_DrawPixel(j, i, color);
 80063ee:	f897 2020 	ldrb.w	r2, [r7, #32]
 80063f2:	7bf9      	ldrb	r1, [r7, #15]
 80063f4:	7bbb      	ldrb	r3, [r7, #14]
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7ff fd68 	bl	8005ecc <ssd1306_DrawPixel>
        for (uint8_t j = x; j < x + w; j++) {
 80063fc:	7bbb      	ldrb	r3, [r7, #14]
 80063fe:	3301      	adds	r3, #1
 8006400:	73bb      	strb	r3, [r7, #14]
 8006402:	7bba      	ldrb	r2, [r7, #14]
 8006404:	79f9      	ldrb	r1, [r7, #7]
 8006406:	797b      	ldrb	r3, [r7, #5]
 8006408:	440b      	add	r3, r1
 800640a:	429a      	cmp	r2, r3
 800640c:	dbef      	blt.n	80063ee <ssd1306_FillRect+0x2a>
    for (uint8_t i = y; i < y + h; i++) {
 800640e:	7bfb      	ldrb	r3, [r7, #15]
 8006410:	3301      	adds	r3, #1
 8006412:	73fb      	strb	r3, [r7, #15]
 8006414:	7bfa      	ldrb	r2, [r7, #15]
 8006416:	79b9      	ldrb	r1, [r7, #6]
 8006418:	793b      	ldrb	r3, [r7, #4]
 800641a:	440b      	add	r3, r1
 800641c:	429a      	cmp	r2, r3
 800641e:	dbe3      	blt.n	80063e8 <ssd1306_FillRect+0x24>
        }
    }
}
 8006420:	bf00      	nop
 8006422:	bf00      	nop
 8006424:	3714      	adds	r7, #20
 8006426:	46bd      	mov	sp, r7
 8006428:	bd90      	pop	{r4, r7, pc}
	...

0800642c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800642c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006464 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8006430:	f7fd fcb2 	bl	8003d98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006434:	480c      	ldr	r0, [pc, #48]	@ (8006468 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006436:	490d      	ldr	r1, [pc, #52]	@ (800646c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006438:	4a0d      	ldr	r2, [pc, #52]	@ (8006470 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800643a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800643c:	e002      	b.n	8006444 <LoopCopyDataInit>

0800643e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800643e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006442:	3304      	adds	r3, #4

08006444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006448:	d3f9      	bcc.n	800643e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800644a:	4a0a      	ldr	r2, [pc, #40]	@ (8006474 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800644c:	4c0a      	ldr	r4, [pc, #40]	@ (8006478 <LoopFillZerobss+0x22>)
  movs r3, #0
 800644e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006450:	e001      	b.n	8006456 <LoopFillZerobss>

08006452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006454:	3204      	adds	r2, #4

08006456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006458:	d3fb      	bcc.n	8006452 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800645a:	f01b fedb 	bl	8022214 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800645e:	f7fc fab7 	bl	80029d0 <main>
  bx  lr
 8006462:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006464:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8006468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800646c:	200002f4 	.word	0x200002f4
  ldr r2, =_sidata
 8006470:	08031108 	.word	0x08031108
  ldr r2, =_sbss
 8006474:	200002f4 	.word	0x200002f4
  ldr r4, =_ebss
 8006478:	2000c30c 	.word	0x2000c30c

0800647c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800647c:	e7fe      	b.n	800647c <ADC_IRQHandler>
	...

08006480 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006484:	4b0e      	ldr	r3, [pc, #56]	@ (80064c0 <HAL_Init+0x40>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a0d      	ldr	r2, [pc, #52]	@ (80064c0 <HAL_Init+0x40>)
 800648a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800648e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8006490:	4b0b      	ldr	r3, [pc, #44]	@ (80064c0 <HAL_Init+0x40>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a0a      	ldr	r2, [pc, #40]	@ (80064c0 <HAL_Init+0x40>)
 8006496:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800649a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800649c:	4b08      	ldr	r3, [pc, #32]	@ (80064c0 <HAL_Init+0x40>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a07      	ldr	r2, [pc, #28]	@ (80064c0 <HAL_Init+0x40>)
 80064a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80064a8:	2003      	movs	r0, #3
 80064aa:	f000 fd23 	bl	8006ef4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80064ae:	200f      	movs	r0, #15
 80064b0:	f000 f808 	bl	80064c4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80064b4:	f7fd fa26 	bl	8003904 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	40023c00 	.word	0x40023c00

080064c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80064cc:	4b12      	ldr	r3, [pc, #72]	@ (8006518 <HAL_InitTick+0x54>)
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	4b12      	ldr	r3, [pc, #72]	@ (800651c <HAL_InitTick+0x58>)
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	4619      	mov	r1, r3
 80064d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80064da:	fbb3 f3f1 	udiv	r3, r3, r1
 80064de:	fbb2 f3f3 	udiv	r3, r2, r3
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 fd3b 	bl	8006f5e <HAL_SYSTICK_Config>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d001      	beq.n	80064f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e00e      	b.n	8006510 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2b0f      	cmp	r3, #15
 80064f6:	d80a      	bhi.n	800650e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80064f8:	2200      	movs	r2, #0
 80064fa:	6879      	ldr	r1, [r7, #4]
 80064fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006500:	f000 fd03 	bl	8006f0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006504:	4a06      	ldr	r2, [pc, #24]	@ (8006520 <HAL_InitTick+0x5c>)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800650a:	2300      	movs	r3, #0
 800650c:	e000      	b.n	8006510 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
}
 8006510:	4618      	mov	r0, r3
 8006512:	3708      	adds	r7, #8
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}
 8006518:	20000074 	.word	0x20000074
 800651c:	200000d0 	.word	0x200000d0
 8006520:	200000cc 	.word	0x200000cc

08006524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006524:	b480      	push	{r7}
 8006526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006528:	4b05      	ldr	r3, [pc, #20]	@ (8006540 <HAL_IncTick+0x1c>)
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	461a      	mov	r2, r3
 800652e:	4b05      	ldr	r3, [pc, #20]	@ (8006544 <HAL_IncTick+0x20>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4413      	add	r3, r2
 8006534:	4a03      	ldr	r2, [pc, #12]	@ (8006544 <HAL_IncTick+0x20>)
 8006536:	6013      	str	r3, [r2, #0]
}
 8006538:	bf00      	nop
 800653a:	46bd      	mov	sp, r7
 800653c:	bc80      	pop	{r7}
 800653e:	4770      	bx	lr
 8006540:	200000d0 	.word	0x200000d0
 8006544:	20005100 	.word	0x20005100

08006548 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006548:	b480      	push	{r7}
 800654a:	af00      	add	r7, sp, #0
  return uwTick;
 800654c:	4b02      	ldr	r3, [pc, #8]	@ (8006558 <HAL_GetTick+0x10>)
 800654e:	681b      	ldr	r3, [r3, #0]
}
 8006550:	4618      	mov	r0, r3
 8006552:	46bd      	mov	sp, r7
 8006554:	bc80      	pop	{r7}
 8006556:	4770      	bx	lr
 8006558:	20005100 	.word	0x20005100

0800655c <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006564:	f7ff fff0 	bl	8006548 <HAL_GetTick>
 8006568:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006574:	d005      	beq.n	8006582 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006576:	4b0a      	ldr	r3, [pc, #40]	@ (80065a0 <HAL_Delay+0x44>)
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	461a      	mov	r2, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	4413      	add	r3, r2
 8006580:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006582:	bf00      	nop
 8006584:	f7ff ffe0 	bl	8006548 <HAL_GetTick>
 8006588:	4602      	mov	r2, r0
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	429a      	cmp	r2, r3
 8006592:	d8f7      	bhi.n	8006584 <HAL_Delay+0x28>
  {
  }
}
 8006594:	bf00      	nop
 8006596:	bf00      	nop
 8006598:	3710      	adds	r7, #16
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	200000d0 	.word	0x200000d0

080065a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80065ac:	2300      	movs	r3, #0
 80065ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d101      	bne.n	80065ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e033      	b.n	8006622 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d109      	bne.n	80065d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7fd f9c4 	bl	8003950 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065da:	f003 0310 	and.w	r3, r3, #16
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d118      	bne.n	8006614 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80065ea:	f023 0302 	bic.w	r3, r3, #2
 80065ee:	f043 0202 	orr.w	r2, r3, #2
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 fa28 	bl	8006a4c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006606:	f023 0303 	bic.w	r3, r3, #3
 800660a:	f043 0201 	orr.w	r2, r3, #1
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	641a      	str	r2, [r3, #64]	@ 0x40
 8006612:	e001      	b.n	8006618 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006620:	7bfb      	ldrb	r3, [r7, #15]
}
 8006622:	4618      	mov	r0, r3
 8006624:	3710      	adds	r7, #16
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
	...

0800662c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006638:	2300      	movs	r3, #0
 800663a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006642:	2b01      	cmp	r3, #1
 8006644:	d101      	bne.n	800664a <HAL_ADC_Start_DMA+0x1e>
 8006646:	2302      	movs	r3, #2
 8006648:	e0bc      	b.n	80067c4 <HAL_ADC_Start_DMA+0x198>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f003 0301 	and.w	r3, r3, #1
 800665c:	2b01      	cmp	r3, #1
 800665e:	d018      	beq.n	8006692 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	689a      	ldr	r2, [r3, #8]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f042 0201 	orr.w	r2, r2, #1
 800666e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006670:	4b56      	ldr	r3, [pc, #344]	@ (80067cc <HAL_ADC_Start_DMA+0x1a0>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a56      	ldr	r2, [pc, #344]	@ (80067d0 <HAL_ADC_Start_DMA+0x1a4>)
 8006676:	fba2 2303 	umull	r2, r3, r2, r3
 800667a:	0c9a      	lsrs	r2, r3, #18
 800667c:	4613      	mov	r3, r2
 800667e:	005b      	lsls	r3, r3, #1
 8006680:	4413      	add	r3, r2
 8006682:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8006684:	e002      	b.n	800668c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	3b01      	subs	r3, #1
 800668a:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1f9      	bne.n	8006686 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f003 0301 	and.w	r3, r3, #1
 800669c:	2b01      	cmp	r3, #1
 800669e:	f040 8084 	bne.w	80067aa <HAL_ADC_Start_DMA+0x17e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80066aa:	f023 0301 	bic.w	r3, r3, #1
 80066ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d007      	beq.n	80066d4 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80066cc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80066dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066e0:	d106      	bne.n	80066f0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066e6:	f023 0206 	bic.w	r2, r3, #6
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	645a      	str	r2, [r3, #68]	@ 0x44
 80066ee:	e002      	b.n	80066f6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2200      	movs	r2, #0
 80066f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006702:	4a34      	ldr	r2, [pc, #208]	@ (80067d4 <HAL_ADC_Start_DMA+0x1a8>)
 8006704:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800670a:	4a33      	ldr	r2, [pc, #204]	@ (80067d8 <HAL_ADC_Start_DMA+0x1ac>)
 800670c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006712:	4a32      	ldr	r2, [pc, #200]	@ (80067dc <HAL_ADC_Start_DMA+0x1b0>)
 8006714:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800671e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	685a      	ldr	r2, [r3, #4]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800672e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	689a      	ldr	r2, [r3, #8]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800673e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	334c      	adds	r3, #76	@ 0x4c
 800674a:	4619      	mov	r1, r3
 800674c:	68ba      	ldr	r2, [r7, #8]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f000 fcc0 	bl	80070d4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8006754:	4b22      	ldr	r3, [pc, #136]	@ (80067e0 <HAL_ADC_Start_DMA+0x1b4>)
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	f003 031f 	and.w	r3, r3, #31
 800675c:	2b00      	cmp	r3, #0
 800675e:	d10f      	bne.n	8006780 <HAL_ADC_Start_DMA+0x154>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d129      	bne.n	80067c2 <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	689a      	ldr	r2, [r3, #8]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800677c:	609a      	str	r2, [r3, #8]
 800677e:	e020      	b.n	80067c2 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a17      	ldr	r2, [pc, #92]	@ (80067e4 <HAL_ADC_Start_DMA+0x1b8>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d11b      	bne.n	80067c2 <HAL_ADC_Start_DMA+0x196>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d114      	bne.n	80067c2 <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	689a      	ldr	r2, [r3, #8]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80067a6:	609a      	str	r2, [r3, #8]
 80067a8:	e00b      	b.n	80067c2 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ae:	f043 0210 	orr.w	r2, r3, #16
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067ba:	f043 0201 	orr.w	r2, r3, #1
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3718      	adds	r7, #24
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	20000074 	.word	0x20000074
 80067d0:	431bde83 	.word	0x431bde83
 80067d4:	08006c59 	.word	0x08006c59
 80067d8:	08006d13 	.word	0x08006d13
 80067dc:	08006d2f 	.word	0x08006d2f
 80067e0:	40012300 	.word	0x40012300
 80067e4:	40012000 	.word	0x40012000

080067e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bc80      	pop	{r7}
 80067f8:	4770      	bx	lr

080067fa <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80067fa:	b480      	push	{r7}
 80067fc:	b083      	sub	sp, #12
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006802:	bf00      	nop
 8006804:	370c      	adds	r7, #12
 8006806:	46bd      	mov	sp, r7
 8006808:	bc80      	pop	{r7}
 800680a:	4770      	bx	lr

0800680c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006816:	2300      	movs	r3, #0
 8006818:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006820:	2b01      	cmp	r3, #1
 8006822:	d101      	bne.n	8006828 <HAL_ADC_ConfigChannel+0x1c>
 8006824:	2302      	movs	r3, #2
 8006826:	e103      	b.n	8006a30 <HAL_ADC_ConfigChannel+0x224>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b09      	cmp	r3, #9
 8006836:	d925      	bls.n	8006884 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68d9      	ldr	r1, [r3, #12]
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	b29b      	uxth	r3, r3
 8006844:	461a      	mov	r2, r3
 8006846:	4613      	mov	r3, r2
 8006848:	005b      	lsls	r3, r3, #1
 800684a:	4413      	add	r3, r2
 800684c:	3b1e      	subs	r3, #30
 800684e:	2207      	movs	r2, #7
 8006850:	fa02 f303 	lsl.w	r3, r2, r3
 8006854:	43da      	mvns	r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	400a      	ands	r2, r1
 800685c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68d9      	ldr	r1, [r3, #12]
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	689a      	ldr	r2, [r3, #8]
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	b29b      	uxth	r3, r3
 800686e:	4618      	mov	r0, r3
 8006870:	4603      	mov	r3, r0
 8006872:	005b      	lsls	r3, r3, #1
 8006874:	4403      	add	r3, r0
 8006876:	3b1e      	subs	r3, #30
 8006878:	409a      	lsls	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	430a      	orrs	r2, r1
 8006880:	60da      	str	r2, [r3, #12]
 8006882:	e022      	b.n	80068ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	6919      	ldr	r1, [r3, #16]
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	b29b      	uxth	r3, r3
 8006890:	461a      	mov	r2, r3
 8006892:	4613      	mov	r3, r2
 8006894:	005b      	lsls	r3, r3, #1
 8006896:	4413      	add	r3, r2
 8006898:	2207      	movs	r2, #7
 800689a:	fa02 f303 	lsl.w	r3, r2, r3
 800689e:	43da      	mvns	r2, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	400a      	ands	r2, r1
 80068a6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	6919      	ldr	r1, [r3, #16]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	689a      	ldr	r2, [r3, #8]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	4618      	mov	r0, r3
 80068ba:	4603      	mov	r3, r0
 80068bc:	005b      	lsls	r3, r3, #1
 80068be:	4403      	add	r3, r0
 80068c0:	409a      	lsls	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	430a      	orrs	r2, r1
 80068c8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	2b06      	cmp	r3, #6
 80068d0:	d824      	bhi.n	800691c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	685a      	ldr	r2, [r3, #4]
 80068dc:	4613      	mov	r3, r2
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	4413      	add	r3, r2
 80068e2:	3b05      	subs	r3, #5
 80068e4:	221f      	movs	r2, #31
 80068e6:	fa02 f303 	lsl.w	r3, r2, r3
 80068ea:	43da      	mvns	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	400a      	ands	r2, r1
 80068f2:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	b29b      	uxth	r3, r3
 8006900:	4618      	mov	r0, r3
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	685a      	ldr	r2, [r3, #4]
 8006906:	4613      	mov	r3, r2
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	4413      	add	r3, r2
 800690c:	3b05      	subs	r3, #5
 800690e:	fa00 f203 	lsl.w	r2, r0, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	430a      	orrs	r2, r1
 8006918:	635a      	str	r2, [r3, #52]	@ 0x34
 800691a:	e04c      	b.n	80069b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	2b0c      	cmp	r3, #12
 8006922:	d824      	bhi.n	800696e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	685a      	ldr	r2, [r3, #4]
 800692e:	4613      	mov	r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4413      	add	r3, r2
 8006934:	3b23      	subs	r3, #35	@ 0x23
 8006936:	221f      	movs	r2, #31
 8006938:	fa02 f303 	lsl.w	r3, r2, r3
 800693c:	43da      	mvns	r2, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	400a      	ands	r2, r1
 8006944:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	b29b      	uxth	r3, r3
 8006952:	4618      	mov	r0, r3
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	4613      	mov	r3, r2
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	4413      	add	r3, r2
 800695e:	3b23      	subs	r3, #35	@ 0x23
 8006960:	fa00 f203 	lsl.w	r2, r0, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	430a      	orrs	r2, r1
 800696a:	631a      	str	r2, [r3, #48]	@ 0x30
 800696c:	e023      	b.n	80069b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	685a      	ldr	r2, [r3, #4]
 8006978:	4613      	mov	r3, r2
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4413      	add	r3, r2
 800697e:	3b41      	subs	r3, #65	@ 0x41
 8006980:	221f      	movs	r2, #31
 8006982:	fa02 f303 	lsl.w	r3, r2, r3
 8006986:	43da      	mvns	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	400a      	ands	r2, r1
 800698e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	b29b      	uxth	r3, r3
 800699c:	4618      	mov	r0, r3
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	685a      	ldr	r2, [r3, #4]
 80069a2:	4613      	mov	r3, r2
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	4413      	add	r3, r2
 80069a8:	3b41      	subs	r3, #65	@ 0x41
 80069aa:	fa00 f203 	lsl.w	r2, r0, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	430a      	orrs	r2, r1
 80069b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a20      	ldr	r2, [pc, #128]	@ (8006a3c <HAL_ADC_ConfigChannel+0x230>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d109      	bne.n	80069d4 <HAL_ADC_ConfigChannel+0x1c8>
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2b12      	cmp	r3, #18
 80069c6:	d105      	bne.n	80069d4 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80069c8:	4b1d      	ldr	r3, [pc, #116]	@ (8006a40 <HAL_ADC_ConfigChannel+0x234>)
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	4a1c      	ldr	r2, [pc, #112]	@ (8006a40 <HAL_ADC_ConfigChannel+0x234>)
 80069ce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80069d2:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a18      	ldr	r2, [pc, #96]	@ (8006a3c <HAL_ADC_ConfigChannel+0x230>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d123      	bne.n	8006a26 <HAL_ADC_ConfigChannel+0x21a>
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2b10      	cmp	r3, #16
 80069e4:	d003      	beq.n	80069ee <HAL_ADC_ConfigChannel+0x1e2>
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2b11      	cmp	r3, #17
 80069ec:	d11b      	bne.n	8006a26 <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80069ee:	4b14      	ldr	r3, [pc, #80]	@ (8006a40 <HAL_ADC_ConfigChannel+0x234>)
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	4a13      	ldr	r2, [pc, #76]	@ (8006a40 <HAL_ADC_ConfigChannel+0x234>)
 80069f4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80069f8:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2b10      	cmp	r3, #16
 8006a00:	d111      	bne.n	8006a26 <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006a02:	4b10      	ldr	r3, [pc, #64]	@ (8006a44 <HAL_ADC_ConfigChannel+0x238>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a10      	ldr	r2, [pc, #64]	@ (8006a48 <HAL_ADC_ConfigChannel+0x23c>)
 8006a08:	fba2 2303 	umull	r2, r3, r2, r3
 8006a0c:	0c9a      	lsrs	r2, r3, #18
 8006a0e:	4613      	mov	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4413      	add	r3, r2
 8006a14:	005b      	lsls	r3, r3, #1
 8006a16:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8006a18:	e002      	b.n	8006a20 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1f9      	bne.n	8006a1a <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3714      	adds	r7, #20
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bc80      	pop	{r7}
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	40012000 	.word	0x40012000
 8006a40:	40012300 	.word	0x40012300
 8006a44:	20000074 	.word	0x20000074
 8006a48:	431bde83 	.word	0x431bde83

08006a4c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8006a54:	4b7e      	ldr	r3, [pc, #504]	@ (8006c50 <ADC_Init+0x204>)
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	4a7d      	ldr	r2, [pc, #500]	@ (8006c50 <ADC_Init+0x204>)
 8006a5a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8006a5e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8006a60:	4b7b      	ldr	r3, [pc, #492]	@ (8006c50 <ADC_Init+0x204>)
 8006a62:	685a      	ldr	r2, [r3, #4]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	4979      	ldr	r1, [pc, #484]	@ (8006c50 <ADC_Init+0x204>)
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	685a      	ldr	r2, [r3, #4]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006a7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	6859      	ldr	r1, [r3, #4]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	021a      	lsls	r2, r3, #8
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	430a      	orrs	r2, r1
 8006a90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	685a      	ldr	r2, [r3, #4]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8006aa0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	6859      	ldr	r1, [r3, #4]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	689a      	ldr	r2, [r3, #8]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	430a      	orrs	r2, r1
 8006ab2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	689a      	ldr	r2, [r3, #8]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ac2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	6899      	ldr	r1, [r3, #8]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	68da      	ldr	r2, [r3, #12]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ada:	4a5e      	ldr	r2, [pc, #376]	@ (8006c54 <ADC_Init+0x208>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d022      	beq.n	8006b26 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	689a      	ldr	r2, [r3, #8]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006aee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	6899      	ldr	r1, [r3, #8]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	430a      	orrs	r2, r1
 8006b00:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	689a      	ldr	r2, [r3, #8]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006b10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	6899      	ldr	r1, [r3, #8]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	430a      	orrs	r2, r1
 8006b22:	609a      	str	r2, [r3, #8]
 8006b24:	e00f      	b.n	8006b46 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	689a      	ldr	r2, [r3, #8]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006b34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	689a      	ldr	r2, [r3, #8]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006b44:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	689a      	ldr	r2, [r3, #8]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f022 0202 	bic.w	r2, r2, #2
 8006b54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	6899      	ldr	r1, [r3, #8]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	7e1b      	ldrb	r3, [r3, #24]
 8006b60:	005a      	lsls	r2, r3, #1
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	430a      	orrs	r2, r1
 8006b68:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d027      	beq.n	8006bc4 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	685a      	ldr	r2, [r3, #4]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b82:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	685a      	ldr	r2, [r3, #4]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8006b92:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8006b9e:	60ba      	str	r2, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ba0:	68ba      	ldr	r2, [r7, #8]
 8006ba2:	fa92 f2a2 	rbit	r2, r2
 8006ba6:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	fab2 f282 	clz	r2, r2
 8006bae:	b2d2      	uxtb	r2, r2
 8006bb0:	fa03 f102 	lsl.w	r1, r3, r2
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	685a      	ldr	r2, [r3, #4]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	430a      	orrs	r2, r1
 8006bc0:	605a      	str	r2, [r3, #4]
 8006bc2:	e007      	b.n	8006bd4 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	685a      	ldr	r2, [r3, #4]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006bd2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8006be2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	69db      	ldr	r3, [r3, #28]
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	051a      	lsls	r2, r3, #20
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	430a      	orrs	r2, r1
 8006bf8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	689a      	ldr	r2, [r3, #8]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006c08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	6899      	ldr	r1, [r3, #8]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006c16:	025a      	lsls	r2, r3, #9
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	430a      	orrs	r2, r1
 8006c1e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	689a      	ldr	r2, [r3, #8]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	6899      	ldr	r1, [r3, #8]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	029a      	lsls	r2, r3, #10
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	430a      	orrs	r2, r1
 8006c42:	609a      	str	r2, [r3, #8]
}
 8006c44:	bf00      	nop
 8006c46:	3714      	adds	r7, #20
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bc80      	pop	{r7}
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop
 8006c50:	40012300 	.word	0x40012300
 8006c54:	0f000001 	.word	0x0f000001

08006c58 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c64:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c6a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d13c      	bne.n	8006cec <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c76:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d12b      	bne.n	8006ce4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d127      	bne.n	8006ce4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c9a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d006      	beq.n	8006cb0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d119      	bne.n	8006ce4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	685a      	ldr	r2, [r3, #4]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f022 0220 	bic.w	r2, r2, #32
 8006cbe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cc4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d105      	bne.n	8006ce4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cdc:	f043 0201 	orr.w	r2, r3, #1
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f7fa ff9d 	bl	8001c24 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006cea:	e00e      	b.n	8006d0a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cf0:	f003 0310 	and.w	r3, r3, #16
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d003      	beq.n	8006d00 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f7ff fd7e 	bl	80067fa <HAL_ADC_ErrorCallback>
}
 8006cfe:	e004      	b.n	8006d0a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	4798      	blx	r3
}
 8006d0a:	bf00      	nop
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b084      	sub	sp, #16
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d1e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f7ff fd61 	bl	80067e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006d26:	bf00      	nop
 8006d28:	3710      	adds	r7, #16
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b084      	sub	sp, #16
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d3a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2240      	movs	r2, #64	@ 0x40
 8006d40:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d46:	f043 0204 	orr.w	r2, r3, #4
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f7ff fd53 	bl	80067fa <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006d54:	bf00      	nop
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <__NVIC_SetPriorityGrouping>:
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f003 0307 	and.w	r3, r3, #7
 8006d6a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8006da0 <__NVIC_SetPriorityGrouping+0x44>)
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006d72:	68ba      	ldr	r2, [r7, #8]
 8006d74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006d78:	4013      	ands	r3, r2
 8006d7a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006d84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006d88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006d8e:	4a04      	ldr	r2, [pc, #16]	@ (8006da0 <__NVIC_SetPriorityGrouping+0x44>)
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	60d3      	str	r3, [r2, #12]
}
 8006d94:	bf00      	nop
 8006d96:	3714      	adds	r7, #20
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bc80      	pop	{r7}
 8006d9c:	4770      	bx	lr
 8006d9e:	bf00      	nop
 8006da0:	e000ed00 	.word	0xe000ed00

08006da4 <__NVIC_GetPriorityGrouping>:
{
 8006da4:	b480      	push	{r7}
 8006da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006da8:	4b04      	ldr	r3, [pc, #16]	@ (8006dbc <__NVIC_GetPriorityGrouping+0x18>)
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	0a1b      	lsrs	r3, r3, #8
 8006dae:	f003 0307 	and.w	r3, r3, #7
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bc80      	pop	{r7}
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop
 8006dbc:	e000ed00 	.word	0xe000ed00

08006dc0 <__NVIC_EnableIRQ>:
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	db0b      	blt.n	8006dea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006dd2:	79fb      	ldrb	r3, [r7, #7]
 8006dd4:	f003 021f 	and.w	r2, r3, #31
 8006dd8:	4906      	ldr	r1, [pc, #24]	@ (8006df4 <__NVIC_EnableIRQ+0x34>)
 8006dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dde:	095b      	lsrs	r3, r3, #5
 8006de0:	2001      	movs	r0, #1
 8006de2:	fa00 f202 	lsl.w	r2, r0, r2
 8006de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006dea:	bf00      	nop
 8006dec:	370c      	adds	r7, #12
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bc80      	pop	{r7}
 8006df2:	4770      	bx	lr
 8006df4:	e000e100 	.word	0xe000e100

08006df8 <__NVIC_SetPriority>:
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	4603      	mov	r3, r0
 8006e00:	6039      	str	r1, [r7, #0]
 8006e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	db0a      	blt.n	8006e22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	b2da      	uxtb	r2, r3
 8006e10:	490c      	ldr	r1, [pc, #48]	@ (8006e44 <__NVIC_SetPriority+0x4c>)
 8006e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e16:	0112      	lsls	r2, r2, #4
 8006e18:	b2d2      	uxtb	r2, r2
 8006e1a:	440b      	add	r3, r1
 8006e1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006e20:	e00a      	b.n	8006e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	b2da      	uxtb	r2, r3
 8006e26:	4908      	ldr	r1, [pc, #32]	@ (8006e48 <__NVIC_SetPriority+0x50>)
 8006e28:	79fb      	ldrb	r3, [r7, #7]
 8006e2a:	f003 030f 	and.w	r3, r3, #15
 8006e2e:	3b04      	subs	r3, #4
 8006e30:	0112      	lsls	r2, r2, #4
 8006e32:	b2d2      	uxtb	r2, r2
 8006e34:	440b      	add	r3, r1
 8006e36:	761a      	strb	r2, [r3, #24]
}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bc80      	pop	{r7}
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	e000e100 	.word	0xe000e100
 8006e48:	e000ed00 	.word	0xe000ed00

08006e4c <NVIC_EncodePriority>:
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b089      	sub	sp, #36	@ 0x24
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f003 0307 	and.w	r3, r3, #7
 8006e5e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	f1c3 0307 	rsb	r3, r3, #7
 8006e66:	2b04      	cmp	r3, #4
 8006e68:	bf28      	it	cs
 8006e6a:	2304      	movcs	r3, #4
 8006e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	3304      	adds	r3, #4
 8006e72:	2b06      	cmp	r3, #6
 8006e74:	d902      	bls.n	8006e7c <NVIC_EncodePriority+0x30>
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	3b03      	subs	r3, #3
 8006e7a:	e000      	b.n	8006e7e <NVIC_EncodePriority+0x32>
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e80:	f04f 32ff 	mov.w	r2, #4294967295
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	fa02 f303 	lsl.w	r3, r2, r3
 8006e8a:	43da      	mvns	r2, r3
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	401a      	ands	r2, r3
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006e94:	f04f 31ff 	mov.w	r1, #4294967295
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e9e:	43d9      	mvns	r1, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ea4:	4313      	orrs	r3, r2
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3724      	adds	r7, #36	@ 0x24
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bc80      	pop	{r7}
 8006eae:	4770      	bx	lr

08006eb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ec0:	d301      	bcc.n	8006ec6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e00f      	b.n	8006ee6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006ec6:	4a0a      	ldr	r2, [pc, #40]	@ (8006ef0 <SysTick_Config+0x40>)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006ece:	210f      	movs	r1, #15
 8006ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ed4:	f7ff ff90 	bl	8006df8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006ed8:	4b05      	ldr	r3, [pc, #20]	@ (8006ef0 <SysTick_Config+0x40>)
 8006eda:	2200      	movs	r2, #0
 8006edc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006ede:	4b04      	ldr	r3, [pc, #16]	@ (8006ef0 <SysTick_Config+0x40>)
 8006ee0:	2207      	movs	r2, #7
 8006ee2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3708      	adds	r7, #8
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	e000e010 	.word	0xe000e010

08006ef4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f7ff ff2d 	bl	8006d5c <__NVIC_SetPriorityGrouping>
}
 8006f02:	bf00      	nop
 8006f04:	3708      	adds	r7, #8
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b086      	sub	sp, #24
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	4603      	mov	r3, r0
 8006f12:	60b9      	str	r1, [r7, #8]
 8006f14:	607a      	str	r2, [r7, #4]
 8006f16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006f1c:	f7ff ff42 	bl	8006da4 <__NVIC_GetPriorityGrouping>
 8006f20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	68b9      	ldr	r1, [r7, #8]
 8006f26:	6978      	ldr	r0, [r7, #20]
 8006f28:	f7ff ff90 	bl	8006e4c <NVIC_EncodePriority>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f32:	4611      	mov	r1, r2
 8006f34:	4618      	mov	r0, r3
 8006f36:	f7ff ff5f 	bl	8006df8 <__NVIC_SetPriority>
}
 8006f3a:	bf00      	nop
 8006f3c:	3718      	adds	r7, #24
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b082      	sub	sp, #8
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	4603      	mov	r3, r0
 8006f4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7ff ff35 	bl	8006dc0 <__NVIC_EnableIRQ>
}
 8006f56:	bf00      	nop
 8006f58:	3708      	adds	r7, #8
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b082      	sub	sp, #8
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f7ff ffa2 	bl	8006eb0 <SysTick_Config>
 8006f6c:	4603      	mov	r3, r0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3708      	adds	r7, #8
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
	...

08006f78 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b086      	sub	sp, #24
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006f80:	2300      	movs	r3, #0
 8006f82:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006f84:	f7ff fae0 	bl	8006548 <HAL_GetTick>
 8006f88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d101      	bne.n	8006f94 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e099      	b.n	80070c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2202      	movs	r2, #2
 8006f98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f022 0201 	bic.w	r2, r2, #1
 8006fb2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006fb4:	e00f      	b.n	8006fd6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006fb6:	f7ff fac7 	bl	8006548 <HAL_GetTick>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	2b05      	cmp	r3, #5
 8006fc2:	d908      	bls.n	8006fd6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2220      	movs	r2, #32
 8006fc8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2203      	movs	r2, #3
 8006fce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e078      	b.n	80070c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1e8      	bne.n	8006fb6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006fec:	697a      	ldr	r2, [r7, #20]
 8006fee:	4b38      	ldr	r3, [pc, #224]	@ (80070d0 <HAL_DMA_Init+0x158>)
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	685a      	ldr	r2, [r3, #4]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007002:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800700e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	699b      	ldr	r3, [r3, #24]
 8007014:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800701a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a1b      	ldr	r3, [r3, #32]
 8007020:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007022:	697a      	ldr	r2, [r7, #20]
 8007024:	4313      	orrs	r3, r2
 8007026:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800702c:	2b04      	cmp	r3, #4
 800702e:	d107      	bne.n	8007040 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007038:	4313      	orrs	r3, r2
 800703a:	697a      	ldr	r2, [r7, #20]
 800703c:	4313      	orrs	r3, r2
 800703e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	697a      	ldr	r2, [r7, #20]
 8007046:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	f023 0307 	bic.w	r3, r3, #7
 8007056:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800705c:	697a      	ldr	r2, [r7, #20]
 800705e:	4313      	orrs	r3, r2
 8007060:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007066:	2b04      	cmp	r3, #4
 8007068:	d117      	bne.n	800709a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	4313      	orrs	r3, r2
 8007072:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00e      	beq.n	800709a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 fa6d 	bl	800755c <DMA_CheckFifoParam>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d008      	beq.n	800709a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2240      	movs	r2, #64	@ 0x40
 800708c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8007096:	2301      	movs	r3, #1
 8007098:	e016      	b.n	80070c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fa26 	bl	80074f4 <DMA_CalcBaseAndBitshift>
 80070a8:	4603      	mov	r3, r0
 80070aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070b0:	223f      	movs	r2, #63	@ 0x3f
 80070b2:	409a      	lsls	r2, r3
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2201      	movs	r2, #1
 80070c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3718      	adds	r7, #24
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	f010803f 	.word	0xf010803f

080070d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b086      	sub	sp, #24
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]
 80070e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070e2:	2300      	movs	r3, #0
 80070e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d101      	bne.n	80070fa <HAL_DMA_Start_IT+0x26>
 80070f6:	2302      	movs	r3, #2
 80070f8:	e040      	b.n	800717c <HAL_DMA_Start_IT+0xa8>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2b01      	cmp	r3, #1
 800710c:	d12f      	bne.n	800716e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2202      	movs	r2, #2
 8007112:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2200      	movs	r2, #0
 800711a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	68b9      	ldr	r1, [r7, #8]
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f000 f9b8 	bl	8007498 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800712c:	223f      	movs	r2, #63	@ 0x3f
 800712e:	409a      	lsls	r2, r3
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f042 0216 	orr.w	r2, r2, #22
 8007142:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007148:	2b00      	cmp	r3, #0
 800714a:	d007      	beq.n	800715c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f042 0208 	orr.w	r2, r2, #8
 800715a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f042 0201 	orr.w	r2, r2, #1
 800716a:	601a      	str	r2, [r3, #0]
 800716c:	e005      	b.n	800717a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007176:	2302      	movs	r3, #2
 8007178:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800717a:	7dfb      	ldrb	r3, [r7, #23]
}
 800717c:	4618      	mov	r0, r3
 800717e:	3718      	adds	r7, #24
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b086      	sub	sp, #24
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800718c:	2300      	movs	r3, #0
 800718e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007190:	4b8e      	ldr	r3, [pc, #568]	@ (80073cc <HAL_DMA_IRQHandler+0x248>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a8e      	ldr	r2, [pc, #568]	@ (80073d0 <HAL_DMA_IRQHandler+0x24c>)
 8007196:	fba2 2303 	umull	r2, r3, r2, r3
 800719a:	0a9b      	lsrs	r3, r3, #10
 800719c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071ae:	2208      	movs	r2, #8
 80071b0:	409a      	lsls	r2, r3
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	4013      	ands	r3, r2
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d01a      	beq.n	80071f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0304 	and.w	r3, r3, #4
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d013      	beq.n	80071f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f022 0204 	bic.w	r2, r2, #4
 80071d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071dc:	2208      	movs	r2, #8
 80071de:	409a      	lsls	r2, r3
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071e8:	f043 0201 	orr.w	r2, r3, #1
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071f4:	2201      	movs	r2, #1
 80071f6:	409a      	lsls	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	4013      	ands	r3, r2
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d012      	beq.n	8007226 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	695b      	ldr	r3, [r3, #20]
 8007206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00b      	beq.n	8007226 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007212:	2201      	movs	r2, #1
 8007214:	409a      	lsls	r2, r3
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800721e:	f043 0202 	orr.w	r2, r3, #2
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800722a:	2204      	movs	r2, #4
 800722c:	409a      	lsls	r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	4013      	ands	r3, r2
 8007232:	2b00      	cmp	r3, #0
 8007234:	d012      	beq.n	800725c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 0302 	and.w	r3, r3, #2
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00b      	beq.n	800725c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007248:	2204      	movs	r2, #4
 800724a:	409a      	lsls	r2, r3
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007254:	f043 0204 	orr.w	r2, r3, #4
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007260:	2210      	movs	r2, #16
 8007262:	409a      	lsls	r2, r3
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	4013      	ands	r3, r2
 8007268:	2b00      	cmp	r3, #0
 800726a:	d043      	beq.n	80072f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 0308 	and.w	r3, r3, #8
 8007276:	2b00      	cmp	r3, #0
 8007278:	d03c      	beq.n	80072f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800727e:	2210      	movs	r2, #16
 8007280:	409a      	lsls	r2, r3
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d018      	beq.n	80072c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d108      	bne.n	80072b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d024      	beq.n	80072f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	4798      	blx	r3
 80072b2:	e01f      	b.n	80072f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d01b      	beq.n	80072f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	4798      	blx	r3
 80072c4:	e016      	b.n	80072f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d107      	bne.n	80072e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f022 0208 	bic.w	r2, r2, #8
 80072e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d003      	beq.n	80072f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072f8:	2220      	movs	r2, #32
 80072fa:	409a      	lsls	r2, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	4013      	ands	r3, r2
 8007300:	2b00      	cmp	r3, #0
 8007302:	f000 808f 	beq.w	8007424 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 0310 	and.w	r3, r3, #16
 8007310:	2b00      	cmp	r3, #0
 8007312:	f000 8087 	beq.w	8007424 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800731a:	2220      	movs	r2, #32
 800731c:	409a      	lsls	r2, r3
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007328:	b2db      	uxtb	r3, r3
 800732a:	2b05      	cmp	r3, #5
 800732c:	d136      	bne.n	800739c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f022 0216 	bic.w	r2, r2, #22
 800733c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	695a      	ldr	r2, [r3, #20]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800734c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007352:	2b00      	cmp	r3, #0
 8007354:	d103      	bne.n	800735e <HAL_DMA_IRQHandler+0x1da>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800735a:	2b00      	cmp	r3, #0
 800735c:	d007      	beq.n	800736e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f022 0208 	bic.w	r2, r2, #8
 800736c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007372:	223f      	movs	r2, #63	@ 0x3f
 8007374:	409a      	lsls	r2, r3
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2201      	movs	r2, #1
 800737e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800738e:	2b00      	cmp	r3, #0
 8007390:	d07e      	beq.n	8007490 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	4798      	blx	r3
        }
        return;
 800739a:	e079      	b.n	8007490 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d01d      	beq.n	80073e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d10d      	bne.n	80073d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d031      	beq.n	8007424 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	4798      	blx	r3
 80073c8:	e02c      	b.n	8007424 <HAL_DMA_IRQHandler+0x2a0>
 80073ca:	bf00      	nop
 80073cc:	20000074 	.word	0x20000074
 80073d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d023      	beq.n	8007424 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	4798      	blx	r3
 80073e4:	e01e      	b.n	8007424 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d10f      	bne.n	8007414 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f022 0210 	bic.w	r2, r2, #16
 8007402:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007418:	2b00      	cmp	r3, #0
 800741a:	d003      	beq.n	8007424 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007428:	2b00      	cmp	r3, #0
 800742a:	d032      	beq.n	8007492 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007430:	f003 0301 	and.w	r3, r3, #1
 8007434:	2b00      	cmp	r3, #0
 8007436:	d022      	beq.n	800747e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2205      	movs	r2, #5
 800743c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f022 0201 	bic.w	r2, r2, #1
 800744e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	3301      	adds	r3, #1
 8007454:	60bb      	str	r3, [r7, #8]
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	429a      	cmp	r2, r3
 800745a:	d307      	bcc.n	800746c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 0301 	and.w	r3, r3, #1
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1f2      	bne.n	8007450 <HAL_DMA_IRQHandler+0x2cc>
 800746a:	e000      	b.n	800746e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800746c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2201      	movs	r2, #1
 8007472:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007482:	2b00      	cmp	r3, #0
 8007484:	d005      	beq.n	8007492 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	4798      	blx	r3
 800748e:	e000      	b.n	8007492 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007490:	bf00      	nop
    }
  }
}
 8007492:	3718      	adds	r7, #24
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
 80074a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80074b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	683a      	ldr	r2, [r7, #0]
 80074bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	2b40      	cmp	r3, #64	@ 0x40
 80074c4:	d108      	bne.n	80074d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68ba      	ldr	r2, [r7, #8]
 80074d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80074d6:	e007      	b.n	80074e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	68ba      	ldr	r2, [r7, #8]
 80074de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	60da      	str	r2, [r3, #12]
}
 80074e8:	bf00      	nop
 80074ea:	3714      	adds	r7, #20
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bc80      	pop	{r7}
 80074f0:	4770      	bx	lr
	...

080074f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	b2db      	uxtb	r3, r3
 8007502:	3b10      	subs	r3, #16
 8007504:	4a13      	ldr	r2, [pc, #76]	@ (8007554 <DMA_CalcBaseAndBitshift+0x60>)
 8007506:	fba2 2303 	umull	r2, r3, r2, r3
 800750a:	091b      	lsrs	r3, r3, #4
 800750c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800750e:	4a12      	ldr	r2, [pc, #72]	@ (8007558 <DMA_CalcBaseAndBitshift+0x64>)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	4413      	add	r3, r2
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	461a      	mov	r2, r3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2b03      	cmp	r3, #3
 8007520:	d909      	bls.n	8007536 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800752a:	f023 0303 	bic.w	r3, r3, #3
 800752e:	1d1a      	adds	r2, r3, #4
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	659a      	str	r2, [r3, #88]	@ 0x58
 8007534:	e007      	b.n	8007546 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800753e:	f023 0303 	bic.w	r3, r3, #3
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800754a:	4618      	mov	r0, r3
 800754c:	3714      	adds	r7, #20
 800754e:	46bd      	mov	sp, r7
 8007550:	bc80      	pop	{r7}
 8007552:	4770      	bx	lr
 8007554:	aaaaaaab 	.word	0xaaaaaaab
 8007558:	08028fc4 	.word	0x08028fc4

0800755c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800755c:	b480      	push	{r7}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007564:	2300      	movs	r3, #0
 8007566:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800756c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d11f      	bne.n	80075b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	2b03      	cmp	r3, #3
 800757a:	d856      	bhi.n	800762a <DMA_CheckFifoParam+0xce>
 800757c:	a201      	add	r2, pc, #4	@ (adr r2, 8007584 <DMA_CheckFifoParam+0x28>)
 800757e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007582:	bf00      	nop
 8007584:	08007595 	.word	0x08007595
 8007588:	080075a7 	.word	0x080075a7
 800758c:	08007595 	.word	0x08007595
 8007590:	0800762b 	.word	0x0800762b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007598:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800759c:	2b00      	cmp	r3, #0
 800759e:	d046      	beq.n	800762e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075a4:	e043      	b.n	800762e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075aa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80075ae:	d140      	bne.n	8007632 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075b4:	e03d      	b.n	8007632 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	699b      	ldr	r3, [r3, #24]
 80075ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075be:	d121      	bne.n	8007604 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	2b03      	cmp	r3, #3
 80075c4:	d837      	bhi.n	8007636 <DMA_CheckFifoParam+0xda>
 80075c6:	a201      	add	r2, pc, #4	@ (adr r2, 80075cc <DMA_CheckFifoParam+0x70>)
 80075c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075cc:	080075dd 	.word	0x080075dd
 80075d0:	080075e3 	.word	0x080075e3
 80075d4:	080075dd 	.word	0x080075dd
 80075d8:	080075f5 	.word	0x080075f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	73fb      	strb	r3, [r7, #15]
      break;
 80075e0:	e030      	b.n	8007644 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d025      	beq.n	800763a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075f2:	e022      	b.n	800763a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80075fc:	d11f      	bne.n	800763e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007602:	e01c      	b.n	800763e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	2b02      	cmp	r3, #2
 8007608:	d903      	bls.n	8007612 <DMA_CheckFifoParam+0xb6>
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	2b03      	cmp	r3, #3
 800760e:	d003      	beq.n	8007618 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007610:	e018      	b.n	8007644 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	73fb      	strb	r3, [r7, #15]
      break;
 8007616:	e015      	b.n	8007644 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800761c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00e      	beq.n	8007642 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	73fb      	strb	r3, [r7, #15]
      break;
 8007628:	e00b      	b.n	8007642 <DMA_CheckFifoParam+0xe6>
      break;
 800762a:	bf00      	nop
 800762c:	e00a      	b.n	8007644 <DMA_CheckFifoParam+0xe8>
      break;
 800762e:	bf00      	nop
 8007630:	e008      	b.n	8007644 <DMA_CheckFifoParam+0xe8>
      break;
 8007632:	bf00      	nop
 8007634:	e006      	b.n	8007644 <DMA_CheckFifoParam+0xe8>
      break;
 8007636:	bf00      	nop
 8007638:	e004      	b.n	8007644 <DMA_CheckFifoParam+0xe8>
      break;
 800763a:	bf00      	nop
 800763c:	e002      	b.n	8007644 <DMA_CheckFifoParam+0xe8>
      break;   
 800763e:	bf00      	nop
 8007640:	e000      	b.n	8007644 <DMA_CheckFifoParam+0xe8>
      break;
 8007642:	bf00      	nop
    }
  } 
  
  return status; 
 8007644:	7bfb      	ldrb	r3, [r7, #15]
}
 8007646:	4618      	mov	r0, r3
 8007648:	3714      	adds	r7, #20
 800764a:	46bd      	mov	sp, r7
 800764c:	bc80      	pop	{r7}
 800764e:	4770      	bx	lr

08007650 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b088      	sub	sp, #32
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8007658:	2300      	movs	r3, #0
 800765a:	61fb      	str	r3, [r7, #28]
 800765c:	2300      	movs	r3, #0
 800765e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8007660:	4ba3      	ldr	r3, [pc, #652]	@ (80078f0 <HAL_ETH_Init+0x2a0>)
 8007662:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8007664:	2300      	movs	r3, #0
 8007666:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8007668:	2300      	movs	r3, #0
 800766a:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d101      	bne.n	8007676 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	e173      	b.n	800795e <HAL_ETH_Init+0x30e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800767c:	b2db      	uxtb	r3, r3
 800767e:	2b00      	cmp	r3, #0
 8007680:	d106      	bne.n	8007690 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f003 ff14 	bl	800b4b8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007690:	2300      	movs	r3, #0
 8007692:	60bb      	str	r3, [r7, #8]
 8007694:	4b97      	ldr	r3, [pc, #604]	@ (80078f4 <HAL_ETH_Init+0x2a4>)
 8007696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007698:	4a96      	ldr	r2, [pc, #600]	@ (80078f4 <HAL_ETH_Init+0x2a4>)
 800769a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800769e:	6453      	str	r3, [r2, #68]	@ 0x44
 80076a0:	4b94      	ldr	r3, [pc, #592]	@ (80078f4 <HAL_ETH_Init+0x2a4>)
 80076a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80076a8:	60bb      	str	r3, [r7, #8]
 80076aa:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80076ac:	4b92      	ldr	r3, [pc, #584]	@ (80078f8 <HAL_ETH_Init+0x2a8>)
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	4a91      	ldr	r2, [pc, #580]	@ (80078f8 <HAL_ETH_Init+0x2a8>)
 80076b2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80076b6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80076b8:	4b8f      	ldr	r3, [pc, #572]	@ (80078f8 <HAL_ETH_Init+0x2a8>)
 80076ba:	685a      	ldr	r2, [r3, #4]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6a1b      	ldr	r3, [r3, #32]
 80076c0:	498d      	ldr	r1, [pc, #564]	@ (80078f8 <HAL_ETH_Init+0x2a8>)
 80076c2:	4313      	orrs	r3, r2
 80076c4:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	6812      	ldr	r2, [r2, #0]
 80076d4:	f043 0301 	orr.w	r3, r3, #1
 80076d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80076dc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80076de:	f7fe ff33 	bl	8006548 <HAL_GetTick>
 80076e2:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80076e4:	e011      	b.n	800770a <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 80076e6:	f7fe ff2f 	bl	8006548 <HAL_GetTick>
 80076ea:	4602      	mov	r2, r0
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	1ad3      	subs	r3, r2, r3
 80076f0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80076f4:	d909      	bls.n	800770a <HAL_ETH_Init+0xba>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2203      	movs	r2, #3
 80076fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8007706:	2303      	movs	r3, #3
 8007708:	e129      	b.n	800795e <HAL_ETH_Init+0x30e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f003 0301 	and.w	r3, r3, #1
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1e4      	bne.n	80076e6 <HAL_ETH_Init+0x96>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	691b      	ldr	r3, [r3, #16]
 8007722:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	f023 031c 	bic.w	r3, r3, #28
 800772a:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800772c:	f002 fdfe 	bl	800a32c <HAL_RCC_GetHCLKFreq>
 8007730:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	4a71      	ldr	r2, [pc, #452]	@ (80078fc <HAL_ETH_Init+0x2ac>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d908      	bls.n	800774c <HAL_ETH_Init+0xfc>
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	4a70      	ldr	r2, [pc, #448]	@ (8007900 <HAL_ETH_Init+0x2b0>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d804      	bhi.n	800774c <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	f043 0308 	orr.w	r3, r3, #8
 8007748:	61fb      	str	r3, [r7, #28]
 800774a:	e01a      	b.n	8007782 <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800774c:	69bb      	ldr	r3, [r7, #24]
 800774e:	4a6c      	ldr	r2, [pc, #432]	@ (8007900 <HAL_ETH_Init+0x2b0>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d908      	bls.n	8007766 <HAL_ETH_Init+0x116>
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	4a66      	ldr	r2, [pc, #408]	@ (80078f0 <HAL_ETH_Init+0x2a0>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d204      	bcs.n	8007766 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	f043 030c 	orr.w	r3, r3, #12
 8007762:	61fb      	str	r3, [r7, #28]
 8007764:	e00d      	b.n	8007782 <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	4a61      	ldr	r2, [pc, #388]	@ (80078f0 <HAL_ETH_Init+0x2a0>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d303      	bcc.n	8007776 <HAL_ETH_Init+0x126>
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	4a64      	ldr	r2, [pc, #400]	@ (8007904 <HAL_ETH_Init+0x2b4>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d904      	bls.n	8007780 <HAL_ETH_Init+0x130>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else /* ((hclk >= 100000000)&&(hclk < 120000000)) */
  {
    /* CSR Clock Range between 100-120 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	f043 0304 	orr.w	r3, r3, #4
 800777c:	61fb      	str	r3, [r7, #28]
 800777e:	e000      	b.n	8007782 <HAL_ETH_Init+0x132>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8007780:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	69fa      	ldr	r2, [r7, #28]
 8007788:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800778a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800778e:	2100      	movs	r1, #0
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 fb8e 	bl	8007eb2 <HAL_ETH_WritePHYRegister>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00b      	beq.n	80077b4 <HAL_ETH_Init+0x164>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80077a0:	6939      	ldr	r1, [r7, #16]
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fd44 	bl	8008230 <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	e0d4      	b.n	800795e <HAL_ETH_Init+0x30e>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80077b4:	20ff      	movs	r0, #255	@ 0xff
 80077b6:	f7fe fed1 	bl	800655c <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	f000 80a2 	beq.w	8007908 <HAL_ETH_Init+0x2b8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80077c4:	f7fe fec0 	bl	8006548 <HAL_GetTick>
 80077c8:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80077ca:	f107 030c 	add.w	r3, r7, #12
 80077ce:	461a      	mov	r2, r3
 80077d0:	2101      	movs	r1, #1
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fb05 	bl	8007de2 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 80077d8:	f7fe feb6 	bl	8006548 <HAL_GetTick>
 80077dc:	4602      	mov	r2, r0
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	1ad3      	subs	r3, r2, r3
 80077e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d90f      	bls.n	800780a <HAL_ETH_Init+0x1ba>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80077ee:	6939      	ldr	r1, [r7, #16]
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fd1d 	bl	8008230 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2201      	movs	r2, #1
 80077fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        return HAL_TIMEOUT;
 8007806:	2303      	movs	r3, #3
 8007808:	e0a9      	b.n	800795e <HAL_ETH_Init+0x30e>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f003 0304 	and.w	r3, r3, #4
 8007810:	2b00      	cmp	r3, #0
 8007812:	d0da      	beq.n	80077ca <HAL_ETH_Init+0x17a>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8007814:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007818:	2100      	movs	r1, #0
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 fb49 	bl	8007eb2 <HAL_ETH_WritePHYRegister>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00b      	beq.n	800783e <HAL_ETH_Init+0x1ee>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800782a:	6939      	ldr	r1, [r7, #16]
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 fcff 	bl	8008230 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2201      	movs	r2, #1
 8007836:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	e08f      	b.n	800795e <HAL_ETH_Init+0x30e>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 800783e:	f7fe fe83 	bl	8006548 <HAL_GetTick>
 8007842:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8007844:	f107 030c 	add.w	r3, r7, #12
 8007848:	461a      	mov	r2, r3
 800784a:	2101      	movs	r1, #1
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 fac8 	bl	8007de2 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8007852:	f7fe fe79 	bl	8006548 <HAL_GetTick>
 8007856:	4602      	mov	r2, r0
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	1ad3      	subs	r3, r2, r3
 800785c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007860:	4293      	cmp	r3, r2
 8007862:	d90f      	bls.n	8007884 <HAL_ETH_Init+0x234>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8007868:	6939      	ldr	r1, [r7, #16]
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 fce0 	bl	8008230 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        return HAL_TIMEOUT;
 8007880:	2303      	movs	r3, #3
 8007882:	e06c      	b.n	800795e <HAL_ETH_Init+0x30e>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f003 0320 	and.w	r3, r3, #32
 800788a:	2b00      	cmp	r3, #0
 800788c:	d0da      	beq.n	8007844 <HAL_ETH_Init+0x1f4>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800788e:	f107 030c 	add.w	r3, r7, #12
 8007892:	461a      	mov	r2, r3
 8007894:	2110      	movs	r1, #16
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 faa3 	bl	8007de2 <HAL_ETH_ReadPHYRegister>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00b      	beq.n	80078ba <HAL_ETH_Init+0x26a>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80078a6:	6939      	ldr	r1, [r7, #16]
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 fcc1 	bl	8008230 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2201      	movs	r2, #1
 80078b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e051      	b.n	800795e <HAL_ETH_Init+0x30e>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f003 0304 	and.w	r3, r3, #4
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d004      	beq.n	80078ce <HAL_ETH_Init+0x27e>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80078ca:	60da      	str	r2, [r3, #12]
 80078cc:	e002      	b.n	80078d4 <HAL_ETH_Init+0x284>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f003 0302 	and.w	r3, r3, #2
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d003      	beq.n	80078e6 <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	609a      	str	r2, [r3, #8]
 80078e4:	e032      	b.n	800794c <HAL_ETH_Init+0x2fc>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80078ec:	609a      	str	r2, [r3, #8]
 80078ee:	e02d      	b.n	800794c <HAL_ETH_Init+0x2fc>
 80078f0:	03938700 	.word	0x03938700
 80078f4:	40023800 	.word	0x40023800
 80078f8:	40013800 	.word	0x40013800
 80078fc:	01312cff 	.word	0x01312cff
 8007900:	02160ebf 	.word	0x02160ebf
 8007904:	05f5e0ff 	.word	0x05f5e0ff
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	08db      	lsrs	r3, r3, #3
 800790e:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	085b      	lsrs	r3, r3, #1
 8007916:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8007918:	4313      	orrs	r3, r2
 800791a:	b29b      	uxth	r3, r3
 800791c:	461a      	mov	r2, r3
 800791e:	2100      	movs	r1, #0
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 fac6 	bl	8007eb2 <HAL_ETH_WritePHYRegister>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00b      	beq.n	8007944 <HAL_ETH_Init+0x2f4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8007930:	6939      	ldr	r1, [r7, #16]
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 fc7c 	bl	8008230 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	e00c      	b.n	800795e <HAL_ETH_Init+0x30e>
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8007944:	f640 70ff 	movw	r0, #4095	@ 0xfff
 8007948:	f7fe fe08 	bl	800655c <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800794c:	6939      	ldr	r1, [r7, #16]
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 fc6e 	bl	8008230 <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return HAL_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3720      	adds	r7, #32
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop

08007968 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8007968:	b480      	push	{r7}
 800796a:	b087      	sub	sp, #28
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	607a      	str	r2, [r7, #4]
 8007974:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8007976:	2300      	movs	r3, #0
 8007978:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007980:	2b01      	cmp	r3, #1
 8007982:	d101      	bne.n	8007988 <HAL_ETH_DMATxDescListInit+0x20>
 8007984:	2302      	movs	r3, #2
 8007986:	e051      	b.n	8007a2c <HAL_ETH_DMATxDescListInit+0xc4>
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2202      	movs	r2, #2
 8007994:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0U; i < TxBuffCount; i++)
 800799e:	2300      	movs	r3, #0
 80079a0:	617b      	str	r3, [r7, #20]
 80079a2:	e030      	b.n	8007a06 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	015b      	lsls	r3, r3, #5
 80079a8:	68ba      	ldr	r2, [r7, #8]
 80079aa:	4413      	add	r3, r2
 80079ac:	613b      	str	r3, [r7, #16]

    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80079b4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80079bc:	fb02 f303 	mul.w	r3, r2, r3
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	4413      	add	r3, r2
 80079c4:	461a      	mov	r2, r3
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	609a      	str	r2, [r3, #8]

    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	69db      	ldr	r3, [r3, #28]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d105      	bne.n	80079de <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	601a      	str	r2, [r3, #0]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (TxBuffCount - 1))
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	3b01      	subs	r3, #1
 80079e2:	697a      	ldr	r2, [r7, #20]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d208      	bcs.n	80079fa <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1);
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	3301      	adds	r3, #1
 80079ec:	015b      	lsls	r3, r3, #5
 80079ee:	68ba      	ldr	r2, [r7, #8]
 80079f0:	4413      	add	r3, r2
 80079f2:	461a      	mov	r2, r3
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	60da      	str	r2, [r3, #12]
 80079f8:	e002      	b.n	8007a00 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;
 80079fa:	68ba      	ldr	r2, [r7, #8]
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < TxBuffCount; i++)
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	3301      	adds	r3, #1
 8007a04:	617b      	str	r3, [r7, #20]
 8007a06:	697a      	ldr	r2, [r7, #20]
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d3ca      	bcc.n	80079a4 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }

  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007a18:	6113      	str	r3, [r2, #16]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	371c      	adds	r7, #28
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bc80      	pop	{r7}
 8007a34:	4770      	bx	lr

08007a36 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8007a36:	b480      	push	{r7}
 8007a38:	b087      	sub	sp, #28
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	60f8      	str	r0, [r7, #12]
 8007a3e:	60b9      	str	r1, [r7, #8]
 8007a40:	607a      	str	r2, [r7, #4]
 8007a42:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8007a44:	2300      	movs	r3, #0
 8007a46:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d101      	bne.n	8007a56 <HAL_ETH_DMARxDescListInit+0x20>
 8007a52:	2302      	movs	r3, #2
 8007a54:	e055      	b.n	8007b02 <HAL_ETH_DMARxDescListInit+0xcc>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2202      	movs	r2, #2
 8007a62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	68ba      	ldr	r2, [r7, #8]
 8007a6a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Fill each DMARxDesc descriptor with the right values */
  for (i = 0U; i < RxBuffCount; i++)
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	617b      	str	r3, [r7, #20]
 8007a70:	e034      	b.n	8007adc <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab + i;
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	015b      	lsls	r3, r3, #5
 8007a76:	68ba      	ldr	r2, [r7, #8]
 8007a78:	4413      	add	r3, r2
 8007a7a:	613b      	str	r3, [r7, #16]

    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007a82:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8007a8a:	605a      	str	r2, [r3, #4]

    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8007a92:	fb02 f303 	mul.w	r3, r2, r3
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	4413      	add	r3, r2
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	609a      	str	r2, [r3, #8]

    if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	699b      	ldr	r3, [r3, #24]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d105      	bne.n	8007ab4 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	605a      	str	r2, [r3, #4]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (RxBuffCount - 1U))
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	697a      	ldr	r2, [r7, #20]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d208      	bcs.n	8007ad0 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	015b      	lsls	r3, r3, #5
 8007ac4:	68ba      	ldr	r2, [r7, #8]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	461a      	mov	r2, r3
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	60da      	str	r2, [r3, #12]
 8007ace:	e002      	b.n	8007ad6 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab);
 8007ad0:	68ba      	ldr	r2, [r7, #8]
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < RxBuffCount; i++)
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	3301      	adds	r3, #1
 8007ada:	617b      	str	r3, [r7, #20]
 8007adc:	697a      	ldr	r2, [r7, #20]
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d3c6      	bcc.n	8007a72 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }

  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007aee:	60d3      	str	r3, [r2, #12]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2201      	movs	r2, #1
 8007af4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	371c      	adds	r7, #28
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bc80      	pop	{r7}
 8007b0a:	4770      	bx	lr

08007b0c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b087      	sub	sp, #28
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8007b16:	2300      	movs	r3, #0
 8007b18:	617b      	str	r3, [r7, #20]
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	60fb      	str	r3, [r7, #12]
 8007b1e:	2300      	movs	r3, #0
 8007b20:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(heth);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d101      	bne.n	8007b30 <HAL_ETH_TransmitFrame+0x24>
 8007b2c:	2302      	movs	r3, #2
 8007b2e:	e0cc      	b.n	8007cca <HAL_ETH_TransmitFrame+0x1be>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2202      	movs	r2, #2
 8007b3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  if (FrameLength == 0U)
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d109      	bne.n	8007b5a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    return  HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	e0b7      	b.n	8007cca <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if (((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	da09      	bge.n	8007b78 <HAL_ETH_TransmitFrame+0x6c>
  {
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2212      	movs	r2, #18
 8007b68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    return HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	e0a8      	b.n	8007cca <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d915      	bls.n	8007bae <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength / ETH_TX_BUF_SIZE;
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	4a53      	ldr	r2, [pc, #332]	@ (8007cd4 <HAL_ETH_TransmitFrame+0x1c8>)
 8007b86:	fba2 2303 	umull	r2, r3, r2, r3
 8007b8a:	0a9b      	lsrs	r3, r3, #10
 8007b8c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE)
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	4b50      	ldr	r3, [pc, #320]	@ (8007cd4 <HAL_ETH_TransmitFrame+0x1c8>)
 8007b92:	fba3 1302 	umull	r1, r3, r3, r2
 8007b96:	0a9b      	lsrs	r3, r3, #10
 8007b98:	f240 51f4 	movw	r1, #1524	@ 0x5f4
 8007b9c:	fb01 f303 	mul.w	r3, r1, r3
 8007ba0:	1ad3      	subs	r3, r2, r3
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d005      	beq.n	8007bb2 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	3301      	adds	r3, #1
 8007baa:	617b      	str	r3, [r7, #20]
 8007bac:	e001      	b.n	8007bb2 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else
  {
    bufcount = 1U;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d11c      	bne.n	8007bf2 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc2:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
 8007bc6:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bcc:	683a      	ldr	r2, [r7, #0]
 8007bce:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8007bd2:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bde:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007be2:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	461a      	mov	r2, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007bf0:	e04b      	b.n	8007c8a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i = 0U; i < bufcount; i++)
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	613b      	str	r3, [r7, #16]
 8007bf6:	e044      	b.n	8007c82 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c02:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8007c06:	601a      	str	r2, [r3, #0]

      if (i == 0U)
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d107      	bne.n	8007c1e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c18:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8007c1c:	601a      	str	r2, [r3, #0]
      }

      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c22:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8007c26:	605a      	str	r2, [r3, #4]

      if (i == (bufcount - 1U))
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	693a      	ldr	r2, [r7, #16]
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d116      	bne.n	8007c60 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c3c:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8007c40:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount - 1U) * ETH_TX_BUF_SIZE;
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	4a24      	ldr	r2, [pc, #144]	@ (8007cd8 <HAL_ETH_TransmitFrame+0x1cc>)
 8007c46:	fb03 f202 	mul.w	r2, r3, r2
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8007c52:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c58:	68fa      	ldr	r2, [r7, #12]
 8007c5a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8007c5e:	605a      	str	r2, [r3, #4]
      }

      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c6a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007c6e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c74:	68db      	ldr	r3, [r3, #12]
 8007c76:	461a      	mov	r2, r3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	62da      	str	r2, [r3, #44]	@ 0x2c
    for (i = 0U; i < bufcount; i++)
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	3301      	adds	r3, #1
 8007c80:	613b      	str	r3, [r7, #16]
 8007c82:	693a      	ldr	r2, [r7, #16]
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d3b6      	bcc.n	8007bf8 <HAL_ETH_TransmitFrame+0xec>
    }
  }

  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c92:	695b      	ldr	r3, [r3, #20]
 8007c94:	f003 0304 	and.w	r3, r3, #4
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00d      	beq.n	8007cb8 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	2304      	movs	r3, #4
 8007ca8:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	6053      	str	r3, [r2, #4]
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	371c      	adds	r7, #28
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bc80      	pop	{r7}
 8007cd2:	4770      	bx	lr
 8007cd4:	ac02b00b 	.word	0xac02b00b
 8007cd8:	fffffa0c 	.word	0xfffffa0c

08007cdc <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b085      	sub	sp, #20
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d101      	bne.n	8007cf6 <HAL_ETH_GetReceivedFrame+0x1a>
 8007cf2:	2302      	movs	r3, #2
 8007cf4:	e070      	b.n	8007dd8 <HAL_ETH_GetReceivedFrame+0xfc>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2202      	movs	r2, #2
 8007d02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	db5a      	blt.n	8007dc6 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if (((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET))
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d030      	beq.n	8007d80 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d22:	1c5a      	adds	r2, r3, #1
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d103      	bne.n	8007d38 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	0c1b      	lsrs	r3, r3, #16
 8007d48:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007d4c:	3b04      	subs	r3, #4
 8007d4e:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	68fa      	ldr	r2, [r7, #12]
 8007d54:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d5a:	689a      	ldr	r2, [r3, #8]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	641a      	str	r2, [r3, #64]	@ 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)((heth->RxDesc)->Buffer2NextDescAddr);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d64:	68db      	ldr	r3, [r3, #12]
 8007d66:	461a      	mov	r2, r3
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      /* Return function status */
      return HAL_OK;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	e02b      	b.n	8007dd8 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d010      	beq.n	8007db0 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	631a      	str	r2, [r3, #48]	@ 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	635a      	str	r2, [r3, #52]	@ 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	461a      	mov	r2, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	629a      	str	r2, [r3, #40]	@ 0x28
 8007dae:	e00a      	b.n	8007dc6 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007db4:	1c5a      	adds	r2, r3, #1
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3714      	adds	r7, #20
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bc80      	pop	{r7}
 8007de0:	4770      	bx	lr

08007de2 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param  RegValue PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8007de2:	b580      	push	{r7, lr}
 8007de4:	b086      	sub	sp, #24
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	60f8      	str	r0, [r7, #12]
 8007dea:	460b      	mov	r3, r1
 8007dec:	607a      	str	r2, [r7, #4]
 8007dee:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8007df0:	2300      	movs	r3, #0
 8007df2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8007df4:	2300      	movs	r3, #0
 8007df6:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	2b82      	cmp	r3, #130	@ 0x82
 8007e02:	d101      	bne.n	8007e08 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8007e04:	2302      	movs	r3, #2
 8007e06:	e050      	b.n	8007eaa <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2282      	movs	r2, #130	@ 0x82
 8007e0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	f003 031c 	and.w	r3, r3, #28
 8007e1e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	8a1b      	ldrh	r3, [r3, #16]
 8007e24:	02db      	lsls	r3, r3, #11
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	697a      	ldr	r2, [r7, #20]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8007e2e:	897b      	ldrh	r3, [r7, #10]
 8007e30:	019b      	lsls	r3, r3, #6
 8007e32:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8007e36:	697a      	ldr	r2, [r7, #20]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	f023 0302 	bic.w	r3, r3, #2
 8007e42:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	f043 0301 	orr.w	r3, r3, #1
 8007e4a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	697a      	ldr	r2, [r7, #20]
 8007e52:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007e54:	f7fe fb78 	bl	8006548 <HAL_GetTick>
 8007e58:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8007e5a:	e015      	b.n	8007e88 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8007e5c:	f7fe fb74 	bl	8006548 <HAL_GetTick>
 8007e60:	4602      	mov	r2, r0
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	1ad3      	subs	r3, r2, r3
 8007e66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e6a:	d309      	bcc.n	8007e80 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      return HAL_TIMEOUT;
 8007e7c:	2303      	movs	r3, #3
 8007e7e:	e014      	b.n	8007eaa <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	f003 0301 	and.w	r3, r3, #1
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d1e4      	bne.n	8007e5c <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	695b      	ldr	r3, [r3, #20]
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return HAL_OK;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3718      	adds	r7, #24
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b086      	sub	sp, #24
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	60f8      	str	r0, [r7, #12]
 8007eba:	460b      	mov	r3, r1
 8007ebc:	607a      	str	r2, [r7, #4]
 8007ebe:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	2b42      	cmp	r3, #66	@ 0x42
 8007ed2:	d101      	bne.n	8007ed8 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8007ed4:	2302      	movs	r3, #2
 8007ed6:	e04e      	b.n	8007f76 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2242      	movs	r2, #66	@ 0x42
 8007edc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	691b      	ldr	r3, [r3, #16]
 8007ee6:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	f003 031c 	and.w	r3, r3, #28
 8007eee:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	8a1b      	ldrh	r3, [r3, #16]
 8007ef4:	02db      	lsls	r3, r3, #11
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	697a      	ldr	r2, [r7, #20]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8007efe:	897b      	ldrh	r3, [r7, #10]
 8007f00:	019b      	lsls	r3, r3, #6
 8007f02:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8007f06:	697a      	ldr	r2, [r7, #20]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	f043 0302 	orr.w	r3, r3, #2
 8007f12:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	f043 0301 	orr.w	r3, r3, #1
 8007f1a:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	697a      	ldr	r2, [r7, #20]
 8007f2c:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007f2e:	f7fe fb0b 	bl	8006548 <HAL_GetTick>
 8007f32:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8007f34:	e015      	b.n	8007f62 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8007f36:	f7fe fb07 	bl	8006548 <HAL_GetTick>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	1ad3      	subs	r3, r2, r3
 8007f40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f44:	d309      	bcc.n	8007f5a <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      return HAL_TIMEOUT;
 8007f56:	2303      	movs	r3, #3
 8007f58:	e00d      	b.n	8007f76 <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	691b      	ldr	r3, [r3, #16]
 8007f60:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	f003 0301 	and.w	r3, r3, #1
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d1e4      	bne.n	8007f36 <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return HAL_OK;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3718      	adds	r7, #24
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <HAL_ETH_Start>:
 * @param  heth pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8007f7e:	b580      	push	{r7, lr}
 8007f80:	b082      	sub	sp, #8
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d101      	bne.n	8007f94 <HAL_ETH_Start+0x16>
 8007f90:	2302      	movs	r3, #2
 8007f92:	e01f      	b.n	8007fd4 <HAL_ETH_Start+0x56>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2202      	movs	r2, #2
 8007fa0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 fb3f 	bl	8008628 <ETH_MACTransmissionEnable>

  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 fb76 	bl	800869c <ETH_MACReceptionEnable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 fc01 	bl	80087b8 <ETH_FlushTransmitFIFO>

  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 fbaa 	bl	8008710 <ETH_DMATransmissionEnable>

  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 fbd1 	bl	8008764 <ETH_DMAReceptionEnable>

  /* Set the ETH state to READY*/
  heth->State = HAL_ETH_STATE_READY;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3708      	adds	r7, #8
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d101      	bne.n	8007ff2 <HAL_ETH_Stop+0x16>
 8007fee:	2302      	movs	r3, #2
 8007ff0:	e01f      	b.n	8008032 <HAL_ETH_Stop+0x56>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2202      	movs	r2, #2
 8007ffe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 fb99 	bl	800873a <ETH_DMATransmissionDisable>

  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 fbc0 	bl	800878e <ETH_DMAReceptionDisable>

  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 fb61 	bl	80086d6 <ETH_MACReceptionDisable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 fbcf 	bl	80087b8 <ETH_FlushTransmitFIFO>

  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 fb21 	bl	8008662 <ETH_MACTransmissionDisable>

  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3708      	adds	r7, #8
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
	...

0800803c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8008046:	2300      	movs	r3, #0
 8008048:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008050:	2b01      	cmp	r3, #1
 8008052:	d101      	bne.n	8008058 <HAL_ETH_ConfigMAC+0x1c>
 8008054:	2302      	movs	r3, #2
 8008056:	e0e4      	b.n	8008222 <HAL_ETH_ConfigMAC+0x1e6>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2202      	movs	r2, #2
 8008064:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

  if (macconf != NULL)
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	2b00      	cmp	r3, #0
 800806c:	f000 80b1 	beq.w	80081d2 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));

    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8008078:	68fa      	ldr	r2, [r7, #12]
 800807a:	4b6c      	ldr	r3, [pc, #432]	@ (800822c <HAL_ETH_ConfigMAC+0x1f0>)
 800807c:	4013      	ands	r3, r2
 800807e:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	681a      	ldr	r2, [r3, #0]
                          macconf->Jabber |
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8008088:	431a      	orrs	r2, r3
                          macconf->InterFrameGap |
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	689b      	ldr	r3, [r3, #8]
                          macconf->Jabber |
 800808e:	431a      	orrs	r2, r3
                          macconf->CarrierSense |
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	68db      	ldr	r3, [r3, #12]
                          macconf->InterFrameGap |
 8008094:	431a      	orrs	r2, r3
                          (heth->Init).Speed |
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	689b      	ldr	r3, [r3, #8]
                          macconf->CarrierSense |
 800809a:	431a      	orrs	r2, r3
                          macconf->ReceiveOwn |
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	691b      	ldr	r3, [r3, #16]
                          (heth->Init).Speed |
 80080a0:	431a      	orrs	r2, r3
                          macconf->LoopbackMode |
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	695b      	ldr	r3, [r3, #20]
                          macconf->ReceiveOwn |
 80080a6:	431a      	orrs	r2, r3
                          (heth->Init).DuplexMode |
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	68db      	ldr	r3, [r3, #12]
                          macconf->LoopbackMode |
 80080ac:	431a      	orrs	r2, r3
                          macconf->ChecksumOffload |
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	699b      	ldr	r3, [r3, #24]
                          (heth->Init).DuplexMode |
 80080b2:	431a      	orrs	r2, r3
                          macconf->RetryTransmission |
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	69db      	ldr	r3, [r3, #28]
                          macconf->ChecksumOffload |
 80080b8:	431a      	orrs	r2, r3
                          macconf->AutomaticPadCRCStrip |
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	6a1b      	ldr	r3, [r3, #32]
                          macconf->RetryTransmission |
 80080be:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          macconf->AutomaticPadCRCStrip |
 80080c4:	431a      	orrs	r2, r3
                          macconf->DeferralCheck);
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          macconf->BackOffLimit |
 80080ca:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 80080cc:	68fa      	ldr	r2, [r7, #12]
 80080ce:	4313      	orrs	r3, r2
 80080d0:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80080e2:	2001      	movs	r0, #1
 80080e4:	f7fe fa3a 	bl	800655c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	68fa      	ldr	r2, [r7, #12]
 80080ee:	601a      	str	r2, [r3, #0]

    /*----------------------- ETHERNET MACFFR Configuration --------------------*/
    /* Write to ETHERNET MACFFR */
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
                                          macconf->SourceAddrFilter |
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 80080f8:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                                          macconf->SourceAddrFilter |
 80080fe:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception |
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                          macconf->PassControlFrames |
 8008104:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                          macconf->BroadcastFramesReception |
 800810a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                                          macconf->DestinationAddrFilter |
 8008110:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                                          macconf->PromiscuousMode |
 8008116:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8008122:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8008124:	605a      	str	r2, [r3, #4]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFFR;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800812e:	2001      	movs	r0, #1
 8008130:	f7fe fa14 	bl	800655c <HAL_Delay>
    (heth->Instance)->MACFFR = tmpreg1;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	605a      	str	r2, [r3, #4]

    /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
    /* Write to ETHERNET MACHTHR */
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	683a      	ldr	r2, [r7, #0]
 8008142:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008144:	609a      	str	r2, [r3, #8]

    /* Write to ETHERNET MACHTLR */
    (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	683a      	ldr	r2, [r7, #0]
 800814c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800814e:	60da      	str	r2, [r3, #12]
    /*----------------------- ETHERNET MACFCR Configuration --------------------*/

    /* Get the ETHERNET MACFCR value */
    tmpreg1 = (heth->Instance)->MACFCR;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	699b      	ldr	r3, [r3, #24]
 8008156:	60fb      	str	r3, [r7, #12]
    /* Clear xx bits */
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8008158:	68fa      	ldr	r2, [r7, #12]
 800815a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800815e:	4013      	ands	r3, r2
 8008160:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008166:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800816c:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                          macconf->ZeroQuantaPause |
 8008172:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect |
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                          macconf->PauseLowThreshold |
 8008178:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
                          macconf->UnicastPauseFrameDetect |
 800817e:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl);
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                          macconf->ReceiveFlowControl |
 8008184:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	4313      	orrs	r3, r2
 800818a:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACFCR */
    (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68fa      	ldr	r2, [r7, #12]
 8008192:	619a      	str	r2, [r3, #24]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFCR;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	699b      	ldr	r3, [r3, #24]
 800819a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800819c:	2001      	movs	r0, #1
 800819e:	f7fe f9dd 	bl	800655c <HAL_Delay>
    (heth->Instance)->MACFCR = tmpreg1;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	68fa      	ldr	r2, [r7, #12]
 80081a8:	619a      	str	r2, [r3, #24]

    /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
                                             macconf->VLANTagIdentifier);
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	430a      	orrs	r2, r1
 80081b8:	61da      	str	r2, [r3, #28]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	69db      	ldr	r3, [r3, #28]
 80081c0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80081c2:	2001      	movs	r0, #1
 80081c4:	f7fe f9ca 	bl	800655c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	61da      	str	r2, [r3, #28]
 80081d0:	e01e      	b.n	8008210 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	60fb      	str	r3, [r7, #12]

    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80081e0:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	689a      	ldr	r2, [r3, #8]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	68fa      	ldr	r2, [r7, #12]
 80081f8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8008202:	2001      	movs	r0, #1
 8008204:	f7fe f9aa 	bl	800655c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	68fa      	ldr	r2, [r7, #12]
 800820e:	601a      	str	r2, [r3, #0]
  }

  /* Set the ETH state to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	3710      	adds	r7, #16
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	ff20810f 	.word	0xff20810f

08008230 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b0b0      	sub	sp, #192	@ 0xc0
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800823a:	2300      	movs	r3, #0
 800823c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d007      	beq.n	8008256 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800824c:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8008254:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8008256:	2300      	movs	r3, #0
 8008258:	64bb      	str	r3, [r7, #72]	@ 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800825a:	2300      	movs	r3, #0
 800825c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800825e:	2300      	movs	r3, #0
 8008260:	653b      	str	r3, [r7, #80]	@ 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8008262:	2300      	movs	r3, #0
 8008264:	657b      	str	r3, [r7, #84]	@ 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8008266:	2300      	movs	r3, #0
 8008268:	65bb      	str	r3, [r7, #88]	@ 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800826a:	2300      	movs	r3, #0
 800826c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	69db      	ldr	r3, [r3, #28]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d103      	bne.n	800827e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8008276:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800827a:	663b      	str	r3, [r7, #96]	@ 0x60
 800827c:	e001      	b.n	8008282 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800827e:	2300      	movs	r3, #0
 8008280:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8008282:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008286:	667b      	str	r3, [r7, #100]	@ 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8008288:	2300      	movs	r3, #0
 800828a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800828c:	2300      	movs	r3, #0
 800828e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8008290:	2300      	movs	r3, #0
 8008292:	673b      	str	r3, [r7, #112]	@ 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8008294:	2300      	movs	r3, #0
 8008296:	677b      	str	r3, [r7, #116]	@ 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8008298:	2300      	movs	r3, #0
 800829a:	67bb      	str	r3, [r7, #120]	@ 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800829c:	2340      	movs	r3, #64	@ 0x40
 800829e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80082a0:	2300      	movs	r3, #0
 80082a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80082a6:	2300      	movs	r3, #0
 80082a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80082ac:	2300      	movs	r3, #0
 80082ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80082b2:	2300      	movs	r3, #0
 80082b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80082b8:	2300      	movs	r3, #0
 80082ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  macinit.HashTableHigh = 0x0U;
 80082be:	2300      	movs	r3, #0
 80082c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  macinit.HashTableLow = 0x0U;
 80082c4:	2300      	movs	r3, #0
 80082c6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  macinit.PauseTime = 0x0U;
 80082ca:	2300      	movs	r3, #0
 80082cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80082d0:	2380      	movs	r3, #128	@ 0x80
 80082d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80082d6:	2300      	movs	r3, #0
 80082d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80082dc:	2300      	movs	r3, #0
 80082de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80082e2:	2300      	movs	r3, #0
 80082e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80082e8:	2300      	movs	r3, #0
 80082ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80082ee:	2300      	movs	r3, #0
 80082f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80082f4:	2300      	movs	r3, #0
 80082f6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8008304:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8008308:	4baa      	ldr	r3, [pc, #680]	@ (80085b4 <ETH_MACDMAConfig+0x384>)
 800830a:	4013      	ands	r3, r2
 800830c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8008310:	6cba      	ldr	r2, [r7, #72]	@ 0x48
                        macinit.Jabber |
 8008312:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8008314:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 8008316:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
                        macinit.Jabber |
 8008318:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 800831a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
                        macinit.InterFrameGap |
 800831c:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 8008322:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 8008324:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
                        (heth->Init).Speed |
 8008326:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 8008328:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
                        macinit.ReceiveOwn |
 800832a:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 8008330:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 8008332:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
                        (heth->Init).DuplexMode |
 8008334:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 8008336:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
                        macinit.ChecksumOffload |
 8008338:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 800833a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
                        macinit.RetryTransmission |
 800833c:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 800833e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
                        macinit.AutomaticPadCRCStrip |
 8008340:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 8008342:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
                        macinit.BackOffLimit |
 8008344:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8008346:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800834a:	4313      	orrs	r3, r2
 800834c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8008358:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008364:	2001      	movs	r0, #1
 8008366:	f7fe f8f9 	bl	800655c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8008372:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8008374:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
                                        macinit.SourceAddrFilter |
 8008376:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8008378:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800837a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
                                        macinit.SourceAddrFilter |
 800837c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 800837e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
                                        macinit.PassControlFrames |
 8008382:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8008384:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
                                        macinit.BroadcastFramesReception |
 8008388:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800838a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
                                        macinit.DestinationAddrFilter |
 800838e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8008390:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
                                        macinit.PromiscuousMode |
 8008394:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8008398:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80083a0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 80083a2:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80083ae:	2001      	movs	r0, #1
 80083b0:	f7fe f8d4 	bl	800655c <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80083bc:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80083c6:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80083d0:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	699b      	ldr	r3, [r3, #24]
 80083d8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80083dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80083e0:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80083e4:	4013      	ands	r3, r2
 80083e6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 80083ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80083ee:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80083f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 80083f4:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80083f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                        macinit.ZeroQuantaPause |
 80083fa:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 80083fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
                        macinit.PauseLowThreshold |
 8008400:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8008402:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
                        macinit.UnicastPauseFrameDetect |
 8008406:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 8008408:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
                        macinit.ReceiveFlowControl |
 800840c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 800840e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8008412:	4313      	orrs	r3, r2
 8008414:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8008420:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	699b      	ldr	r3, [r3, #24]
 8008428:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800842c:	2001      	movs	r0, #1
 800842e:	f7fe f895 	bl	800655c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800843a:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 800843c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
                                           macinit.VLANTagIdentifier);
 8008440:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	430a      	orrs	r2, r1
 800844a:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	69db      	ldr	r3, [r3, #28]
 8008452:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008456:	2001      	movs	r0, #1
 8008458:	f7fe f880 	bl	800655c <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8008464:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8008466:	2300      	movs	r3, #0
 8008468:	60bb      	str	r3, [r7, #8]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800846a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800846e:	60fb      	str	r3, [r7, #12]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8008470:	2300      	movs	r3, #0
 8008472:	613b      	str	r3, [r7, #16]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 8008474:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008478:	617b      	str	r3, [r7, #20]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800847a:	2300      	movs	r3, #0
 800847c:	61bb      	str	r3, [r7, #24]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800847e:	2300      	movs	r3, #0
 8008480:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8008482:	2300      	movs	r3, #0
 8008484:	623b      	str	r3, [r7, #32]
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8008486:	2300      	movs	r3, #0
 8008488:	627b      	str	r3, [r7, #36]	@ 0x24
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800848a:	2304      	movs	r3, #4
 800848c:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800848e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008492:	62fb      	str	r3, [r7, #44]	@ 0x2c
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8008494:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008498:	633b      	str	r3, [r7, #48]	@ 0x30
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800849a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800849e:	637b      	str	r3, [r7, #52]	@ 0x34
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80084a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80084a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80084a6:	2380      	movs	r3, #128	@ 0x80
 80084a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 80084aa:	2300      	movs	r3, #0
 80084ac:	643b      	str	r3, [r7, #64]	@ 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80084ae:	2300      	movs	r3, #0
 80084b0:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80084ba:	699b      	ldr	r3, [r3, #24]
 80084bc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80084c0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80084c4:	4b3c      	ldr	r3, [pc, #240]	@ (80085b8 <ETH_MACDMAConfig+0x388>)
 80084c6:	4013      	ands	r3, r2
 80084c8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 80084cc:	68ba      	ldr	r2, [r7, #8]
                        dmainit.ReceiveStoreForward |
 80084ce:	68fb      	ldr	r3, [r7, #12]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 80084d0:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 80084d2:	693b      	ldr	r3, [r7, #16]
                        dmainit.ReceiveStoreForward |
 80084d4:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 80084d6:	697b      	ldr	r3, [r7, #20]
                        dmainit.FlushReceivedFrame |
 80084d8:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 80084da:	69bb      	ldr	r3, [r7, #24]
                        dmainit.TransmitStoreForward |
 80084dc:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 80084de:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitThresholdControl |
 80084e0:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 80084e2:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.ForwardErrorFrames |
 80084e4:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 80084e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                        dmainit.ForwardUndersizedGoodFrames |
 80084e8:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 80084ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
                        dmainit.ReceiveThresholdControl |
 80084ec:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 80084ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80084f2:	4313      	orrs	r3, r2
 80084f4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008500:	461a      	mov	r2, r3
 8008502:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008506:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008510:	699b      	ldr	r3, [r3, #24]
 8008512:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008516:	2001      	movs	r0, #1
 8008518:	f7fe f820 	bl	800655c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008524:	461a      	mov	r2, r3
 8008526:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800852a:	6193      	str	r3, [r2, #24]
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 800852c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
                                        dmainit.FixedBurst |
 800852e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8008530:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8008532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
                                        dmainit.FixedBurst |
 8008534:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 8008536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8008538:	431a      	orrs	r2, r3
                                        dmainit.EnhancedDescriptorFormat |
 800853a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
                                        dmainit.TxDMABurstLength |
 800853c:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 800853e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008540:	009b      	lsls	r3, r3, #2
                                        dmainit.EnhancedDescriptorFormat |
 8008542:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 8008544:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 8008546:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	6812      	ldr	r2, [r2, #0]
 800854c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008550:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008554:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008564:	2001      	movs	r0, #1
 8008566:	f7fd fff9 	bl	800655c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008572:	461a      	mov	r2, r3
 8008574:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008578:	6013      	str	r3, [r2, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	699b      	ldr	r3, [r3, #24]
 800857e:	2b01      	cmp	r3, #1
 8008580:	d10d      	bne.n	800859e <ETH_MACDMAConfig+0x36e>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800858a:	69db      	ldr	r3, [r3, #28]
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	6812      	ldr	r2, [r2, #0]
 8008590:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008594:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008598:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800859c:	61d3      	str	r3, [r2, #28]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	695b      	ldr	r3, [r3, #20]
 80085a2:	461a      	mov	r2, r3
 80085a4:	2100      	movs	r1, #0
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 f808 	bl	80085bc <ETH_MACAddressConfig>
}
 80085ac:	bf00      	nop
 80085ae:	37c0      	adds	r7, #192	@ 0xc0
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	ff20810f 	.word	0xff20810f
 80085b8:	f8de3f23 	.word	0xf8de3f23

080085bc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80085bc:	b480      	push	{r7}
 80085be:	b087      	sub	sp, #28
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	3305      	adds	r3, #5
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	021b      	lsls	r3, r3, #8
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	3204      	adds	r2, #4
 80085d4:	7812      	ldrb	r2, [r2, #0]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80085da:	68ba      	ldr	r2, [r7, #8]
 80085dc:	4b10      	ldr	r3, [pc, #64]	@ (8008620 <ETH_MACAddressConfig+0x64>)
 80085de:	4413      	add	r3, r2
 80085e0:	461a      	mov	r2, r3
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	3303      	adds	r3, #3
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	061a      	lsls	r2, r3, #24
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	3302      	adds	r3, #2
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	041b      	lsls	r3, r3, #16
 80085f6:	431a      	orrs	r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	3301      	adds	r3, #1
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	021b      	lsls	r3, r3, #8
 8008600:	4313      	orrs	r3, r2
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	7812      	ldrb	r2, [r2, #0]
 8008606:	4313      	orrs	r3, r2
 8008608:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800860a:	68ba      	ldr	r2, [r7, #8]
 800860c:	4b05      	ldr	r3, [pc, #20]	@ (8008624 <ETH_MACAddressConfig+0x68>)
 800860e:	4413      	add	r3, r2
 8008610:	461a      	mov	r2, r3
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	6013      	str	r3, [r2, #0]
}
 8008616:	bf00      	nop
 8008618:	371c      	adds	r7, #28
 800861a:	46bd      	mov	sp, r7
 800861c:	bc80      	pop	{r7}
 800861e:	4770      	bx	lr
 8008620:	40028040 	.word	0x40028040
 8008624:	40028044 	.word	0x40028044

08008628 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8008630:	2300      	movs	r3, #0
 8008632:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f042 0208 	orr.w	r2, r2, #8
 8008642:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800864c:	2001      	movs	r0, #1
 800864e:	f000 f8d9 	bl	8008804 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	68fa      	ldr	r2, [r7, #12]
 8008658:	601a      	str	r2, [r3, #0]
}
 800865a:	bf00      	nop
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b084      	sub	sp, #16
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800866a:	2300      	movs	r3, #0
 800866c:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f022 0208 	bic.w	r2, r2, #8
 800867c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8008686:	2001      	movs	r0, #1
 8008688:	f000 f8bc 	bl	8008804 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	68fa      	ldr	r2, [r7, #12]
 8008692:	601a      	str	r2, [r3, #0]
}
 8008694:	bf00      	nop
 8008696:	3710      	adds	r7, #16
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80086a4:	2300      	movs	r3, #0
 80086a6:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f042 0204 	orr.w	r2, r2, #4
 80086b6:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80086c0:	2001      	movs	r0, #1
 80086c2:	f000 f89f 	bl	8008804 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	68fa      	ldr	r2, [r7, #12]
 80086cc:	601a      	str	r2, [r3, #0]
}
 80086ce:	bf00      	nop
 80086d0:	3710      	adds	r7, #16
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}

080086d6 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b084      	sub	sp, #16
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80086de:	2300      	movs	r3, #0
 80086e0:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f022 0204 	bic.w	r2, r2, #4
 80086f0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80086fa:	2001      	movs	r0, #1
 80086fc:	f000 f882 	bl	8008804 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	68fa      	ldr	r2, [r7, #12]
 8008706:	601a      	str	r2, [r3, #0]
}
 8008708:	bf00      	nop
 800870a:	3710      	adds	r7, #16
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008720:	699b      	ldr	r3, [r3, #24]
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	6812      	ldr	r2, [r2, #0]
 8008726:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800872a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800872e:	6193      	str	r3, [r2, #24]
}
 8008730:	bf00      	nop
 8008732:	370c      	adds	r7, #12
 8008734:	46bd      	mov	sp, r7
 8008736:	bc80      	pop	{r7}
 8008738:	4770      	bx	lr

0800873a <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{
 800873a:	b480      	push	{r7}
 800873c:	b083      	sub	sp, #12
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800874a:	699b      	ldr	r3, [r3, #24]
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	6812      	ldr	r2, [r2, #0]
 8008750:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008754:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008758:	6193      	str	r3, [r2, #24]
}
 800875a:	bf00      	nop
 800875c:	370c      	adds	r7, #12
 800875e:	46bd      	mov	sp, r7
 8008760:	bc80      	pop	{r7}
 8008762:	4770      	bx	lr

08008764 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008774:	699b      	ldr	r3, [r3, #24]
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	6812      	ldr	r2, [r2, #0]
 800877a:	f043 0302 	orr.w	r3, r3, #2
 800877e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008782:	6193      	str	r3, [r2, #24]
}
 8008784:	bf00      	nop
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	bc80      	pop	{r7}
 800878c:	4770      	bx	lr

0800878e <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{
 800878e:	b480      	push	{r7}
 8008790:	b083      	sub	sp, #12
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800879e:	699b      	ldr	r3, [r3, #24]
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	6812      	ldr	r2, [r2, #0]
 80087a4:	f023 0302 	bic.w	r3, r3, #2
 80087a8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80087ac:	6193      	str	r3, [r2, #24]
}
 80087ae:	bf00      	nop
 80087b0:	370c      	adds	r7, #12
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bc80      	pop	{r7}
 80087b6:	4770      	bx	lr

080087b8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80087c0:	2300      	movs	r3, #0
 80087c2:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80087cc:	699b      	ldr	r3, [r3, #24]
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	6812      	ldr	r2, [r2, #0]
 80087d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80087d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80087da:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80087e4:	699b      	ldr	r3, [r3, #24]
 80087e6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80087e8:	2001      	movs	r0, #1
 80087ea:	f000 f80b 	bl	8008804 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80087f8:	6193      	str	r3, [r2, #24]
}
 80087fa:	bf00      	nop
 80087fc:	3710      	adds	r7, #16
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
	...

08008804 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8008804:	b480      	push	{r7}
 8008806:	b085      	sub	sp, #20
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800880c:	4b0a      	ldr	r3, [pc, #40]	@ (8008838 <ETH_Delay+0x34>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a0a      	ldr	r2, [pc, #40]	@ (800883c <ETH_Delay+0x38>)
 8008812:	fba2 2303 	umull	r2, r3, r2, r3
 8008816:	0a5b      	lsrs	r3, r3, #9
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	fb02 f303 	mul.w	r3, r2, r3
 800881e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008820:	bf00      	nop
  }
  while (Delay --);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	1e5a      	subs	r2, r3, #1
 8008826:	60fa      	str	r2, [r7, #12]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d1f9      	bne.n	8008820 <ETH_Delay+0x1c>
}
 800882c:	bf00      	nop
 800882e:	bf00      	nop
 8008830:	3714      	adds	r7, #20
 8008832:	46bd      	mov	sp, r7
 8008834:	bc80      	pop	{r7}
 8008836:	4770      	bx	lr
 8008838:	20000074 	.word	0x20000074
 800883c:	10624dd3 	.word	0x10624dd3

08008840 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b086      	sub	sp, #24
 8008844:	af00      	add	r7, sp, #0
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800884e:	2301      	movs	r3, #1
 8008850:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008852:	4b23      	ldr	r3, [pc, #140]	@ (80088e0 <HAL_FLASH_Program+0xa0>)
 8008854:	7e1b      	ldrb	r3, [r3, #24]
 8008856:	2b01      	cmp	r3, #1
 8008858:	d101      	bne.n	800885e <HAL_FLASH_Program+0x1e>
 800885a:	2302      	movs	r3, #2
 800885c:	e03b      	b.n	80088d6 <HAL_FLASH_Program+0x96>
 800885e:	4b20      	ldr	r3, [pc, #128]	@ (80088e0 <HAL_FLASH_Program+0xa0>)
 8008860:	2201      	movs	r2, #1
 8008862:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008864:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8008868:	f000 f870 	bl	800894c <FLASH_WaitForLastOperation>
 800886c:	4603      	mov	r3, r0
 800886e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8008870:	7dfb      	ldrb	r3, [r7, #23]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d12b      	bne.n	80088ce <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d105      	bne.n	8008888 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800887c:	783b      	ldrb	r3, [r7, #0]
 800887e:	4619      	mov	r1, r3
 8008880:	68b8      	ldr	r0, [r7, #8]
 8008882:	f000 f919 	bl	8008ab8 <FLASH_Program_Byte>
 8008886:	e016      	b.n	80088b6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2b01      	cmp	r3, #1
 800888c:	d105      	bne.n	800889a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800888e:	883b      	ldrh	r3, [r7, #0]
 8008890:	4619      	mov	r1, r3
 8008892:	68b8      	ldr	r0, [r7, #8]
 8008894:	f000 f8ee 	bl	8008a74 <FLASH_Program_HalfWord>
 8008898:	e00d      	b.n	80088b6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2b02      	cmp	r3, #2
 800889e:	d105      	bne.n	80088ac <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	4619      	mov	r1, r3
 80088a4:	68b8      	ldr	r0, [r7, #8]
 80088a6:	f000 f8c3 	bl	8008a30 <FLASH_Program_Word>
 80088aa:	e004      	b.n	80088b6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80088ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088b0:	68b8      	ldr	r0, [r7, #8]
 80088b2:	f000 f88b 	bl	80089cc <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80088b6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80088ba:	f000 f847 	bl	800894c <FLASH_WaitForLastOperation>
 80088be:	4603      	mov	r3, r0
 80088c0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80088c2:	4b08      	ldr	r3, [pc, #32]	@ (80088e4 <HAL_FLASH_Program+0xa4>)
 80088c4:	691b      	ldr	r3, [r3, #16]
 80088c6:	4a07      	ldr	r2, [pc, #28]	@ (80088e4 <HAL_FLASH_Program+0xa4>)
 80088c8:	f023 0301 	bic.w	r3, r3, #1
 80088cc:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80088ce:	4b04      	ldr	r3, [pc, #16]	@ (80088e0 <HAL_FLASH_Program+0xa0>)
 80088d0:	2200      	movs	r2, #0
 80088d2:	761a      	strb	r2, [r3, #24]
  
  return status;
 80088d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3718      	adds	r7, #24
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	20005104 	.word	0x20005104
 80088e4:	40023c00 	.word	0x40023c00

080088e8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80088ee:	2300      	movs	r3, #0
 80088f0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80088f2:	4b0b      	ldr	r3, [pc, #44]	@ (8008920 <HAL_FLASH_Unlock+0x38>)
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	da0b      	bge.n	8008912 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80088fa:	4b09      	ldr	r3, [pc, #36]	@ (8008920 <HAL_FLASH_Unlock+0x38>)
 80088fc:	4a09      	ldr	r2, [pc, #36]	@ (8008924 <HAL_FLASH_Unlock+0x3c>)
 80088fe:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8008900:	4b07      	ldr	r3, [pc, #28]	@ (8008920 <HAL_FLASH_Unlock+0x38>)
 8008902:	4a09      	ldr	r2, [pc, #36]	@ (8008928 <HAL_FLASH_Unlock+0x40>)
 8008904:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8008906:	4b06      	ldr	r3, [pc, #24]	@ (8008920 <HAL_FLASH_Unlock+0x38>)
 8008908:	691b      	ldr	r3, [r3, #16]
 800890a:	2b00      	cmp	r3, #0
 800890c:	da01      	bge.n	8008912 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800890e:	2301      	movs	r3, #1
 8008910:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8008912:	79fb      	ldrb	r3, [r7, #7]
}
 8008914:	4618      	mov	r0, r3
 8008916:	370c      	adds	r7, #12
 8008918:	46bd      	mov	sp, r7
 800891a:	bc80      	pop	{r7}
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop
 8008920:	40023c00 	.word	0x40023c00
 8008924:	45670123 	.word	0x45670123
 8008928:	cdef89ab 	.word	0xcdef89ab

0800892c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800892c:	b480      	push	{r7}
 800892e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8008930:	4b05      	ldr	r3, [pc, #20]	@ (8008948 <HAL_FLASH_Lock+0x1c>)
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	4a04      	ldr	r2, [pc, #16]	@ (8008948 <HAL_FLASH_Lock+0x1c>)
 8008936:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800893a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	46bd      	mov	sp, r7
 8008942:	bc80      	pop	{r7}
 8008944:	4770      	bx	lr
 8008946:	bf00      	nop
 8008948:	40023c00 	.word	0x40023c00

0800894c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008954:	2300      	movs	r3, #0
 8008956:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008958:	4b1a      	ldr	r3, [pc, #104]	@ (80089c4 <FLASH_WaitForLastOperation+0x78>)
 800895a:	2200      	movs	r2, #0
 800895c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800895e:	f7fd fdf3 	bl	8006548 <HAL_GetTick>
 8008962:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8008964:	e010      	b.n	8008988 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800896c:	d00c      	beq.n	8008988 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d007      	beq.n	8008984 <FLASH_WaitForLastOperation+0x38>
 8008974:	f7fd fde8 	bl	8006548 <HAL_GetTick>
 8008978:	4602      	mov	r2, r0
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	1ad3      	subs	r3, r2, r3
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	429a      	cmp	r2, r3
 8008982:	d201      	bcs.n	8008988 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8008984:	2303      	movs	r3, #3
 8008986:	e019      	b.n	80089bc <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8008988:	4b0f      	ldr	r3, [pc, #60]	@ (80089c8 <FLASH_WaitForLastOperation+0x7c>)
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008990:	2b00      	cmp	r3, #0
 8008992:	d1e8      	bne.n	8008966 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8008994:	4b0c      	ldr	r3, [pc, #48]	@ (80089c8 <FLASH_WaitForLastOperation+0x7c>)
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	f003 0301 	and.w	r3, r3, #1
 800899c:	2b00      	cmp	r3, #0
 800899e:	d002      	beq.n	80089a6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80089a0:	4b09      	ldr	r3, [pc, #36]	@ (80089c8 <FLASH_WaitForLastOperation+0x7c>)
 80089a2:	2201      	movs	r2, #1
 80089a4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80089a6:	4b08      	ldr	r3, [pc, #32]	@ (80089c8 <FLASH_WaitForLastOperation+0x7c>)
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d003      	beq.n	80089ba <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80089b2:	f000 f8a1 	bl	8008af8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	e000      	b.n	80089bc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80089ba:	2300      	movs	r3, #0
  
}  
 80089bc:	4618      	mov	r0, r3
 80089be:	3710      	adds	r7, #16
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	20005104 	.word	0x20005104
 80089c8:	40023c00 	.word	0x40023c00

080089cc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b085      	sub	sp, #20
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80089d8:	4b14      	ldr	r3, [pc, #80]	@ (8008a2c <FLASH_Program_DoubleWord+0x60>)
 80089da:	691b      	ldr	r3, [r3, #16]
 80089dc:	4a13      	ldr	r2, [pc, #76]	@ (8008a2c <FLASH_Program_DoubleWord+0x60>)
 80089de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80089e4:	4b11      	ldr	r3, [pc, #68]	@ (8008a2c <FLASH_Program_DoubleWord+0x60>)
 80089e6:	691b      	ldr	r3, [r3, #16]
 80089e8:	4a10      	ldr	r2, [pc, #64]	@ (8008a2c <FLASH_Program_DoubleWord+0x60>)
 80089ea:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80089ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80089f0:	4b0e      	ldr	r3, [pc, #56]	@ (8008a2c <FLASH_Program_DoubleWord+0x60>)
 80089f2:	691b      	ldr	r3, [r3, #16]
 80089f4:	4a0d      	ldr	r2, [pc, #52]	@ (8008a2c <FLASH_Program_DoubleWord+0x60>)
 80089f6:	f043 0301 	orr.w	r3, r3, #1
 80089fa:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	683a      	ldr	r2, [r7, #0]
 8008a00:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8008a02:	f3bf 8f6f 	isb	sy
}
 8008a06:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8008a08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a0c:	f04f 0200 	mov.w	r2, #0
 8008a10:	f04f 0300 	mov.w	r3, #0
 8008a14:	000a      	movs	r2, r1
 8008a16:	2300      	movs	r3, #0
 8008a18:	68f9      	ldr	r1, [r7, #12]
 8008a1a:	3104      	adds	r1, #4
 8008a1c:	4613      	mov	r3, r2
 8008a1e:	600b      	str	r3, [r1, #0]
}
 8008a20:	bf00      	nop
 8008a22:	3714      	adds	r7, #20
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bc80      	pop	{r7}
 8008a28:	4770      	bx	lr
 8008a2a:	bf00      	nop
 8008a2c:	40023c00 	.word	0x40023c00

08008a30 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8008a70 <FLASH_Program_Word+0x40>)
 8008a3c:	691b      	ldr	r3, [r3, #16]
 8008a3e:	4a0c      	ldr	r2, [pc, #48]	@ (8008a70 <FLASH_Program_Word+0x40>)
 8008a40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a44:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8008a46:	4b0a      	ldr	r3, [pc, #40]	@ (8008a70 <FLASH_Program_Word+0x40>)
 8008a48:	691b      	ldr	r3, [r3, #16]
 8008a4a:	4a09      	ldr	r2, [pc, #36]	@ (8008a70 <FLASH_Program_Word+0x40>)
 8008a4c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008a50:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8008a52:	4b07      	ldr	r3, [pc, #28]	@ (8008a70 <FLASH_Program_Word+0x40>)
 8008a54:	691b      	ldr	r3, [r3, #16]
 8008a56:	4a06      	ldr	r2, [pc, #24]	@ (8008a70 <FLASH_Program_Word+0x40>)
 8008a58:	f043 0301 	orr.w	r3, r3, #1
 8008a5c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	683a      	ldr	r2, [r7, #0]
 8008a62:	601a      	str	r2, [r3, #0]
}
 8008a64:	bf00      	nop
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bc80      	pop	{r7}
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	40023c00 	.word	0x40023c00

08008a74 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008a80:	4b0c      	ldr	r3, [pc, #48]	@ (8008ab4 <FLASH_Program_HalfWord+0x40>)
 8008a82:	691b      	ldr	r3, [r3, #16]
 8008a84:	4a0b      	ldr	r2, [pc, #44]	@ (8008ab4 <FLASH_Program_HalfWord+0x40>)
 8008a86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8008a8c:	4b09      	ldr	r3, [pc, #36]	@ (8008ab4 <FLASH_Program_HalfWord+0x40>)
 8008a8e:	691b      	ldr	r3, [r3, #16]
 8008a90:	4a08      	ldr	r2, [pc, #32]	@ (8008ab4 <FLASH_Program_HalfWord+0x40>)
 8008a92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8008a98:	4b06      	ldr	r3, [pc, #24]	@ (8008ab4 <FLASH_Program_HalfWord+0x40>)
 8008a9a:	691b      	ldr	r3, [r3, #16]
 8008a9c:	4a05      	ldr	r2, [pc, #20]	@ (8008ab4 <FLASH_Program_HalfWord+0x40>)
 8008a9e:	f043 0301 	orr.w	r3, r3, #1
 8008aa2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	887a      	ldrh	r2, [r7, #2]
 8008aa8:	801a      	strh	r2, [r3, #0]
}
 8008aaa:	bf00      	nop
 8008aac:	370c      	adds	r7, #12
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bc80      	pop	{r7}
 8008ab2:	4770      	bx	lr
 8008ab4:	40023c00 	.word	0x40023c00

08008ab8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b083      	sub	sp, #12
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8008af4 <FLASH_Program_Byte+0x3c>)
 8008ac6:	691b      	ldr	r3, [r3, #16]
 8008ac8:	4a0a      	ldr	r2, [pc, #40]	@ (8008af4 <FLASH_Program_Byte+0x3c>)
 8008aca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ace:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8008ad0:	4b08      	ldr	r3, [pc, #32]	@ (8008af4 <FLASH_Program_Byte+0x3c>)
 8008ad2:	4a08      	ldr	r2, [pc, #32]	@ (8008af4 <FLASH_Program_Byte+0x3c>)
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8008ad8:	4b06      	ldr	r3, [pc, #24]	@ (8008af4 <FLASH_Program_Byte+0x3c>)
 8008ada:	691b      	ldr	r3, [r3, #16]
 8008adc:	4a05      	ldr	r2, [pc, #20]	@ (8008af4 <FLASH_Program_Byte+0x3c>)
 8008ade:	f043 0301 	orr.w	r3, r3, #1
 8008ae2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	78fa      	ldrb	r2, [r7, #3]
 8008ae8:	701a      	strb	r2, [r3, #0]
}
 8008aea:	bf00      	nop
 8008aec:	370c      	adds	r7, #12
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bc80      	pop	{r7}
 8008af2:	4770      	bx	lr
 8008af4:	40023c00 	.word	0x40023c00

08008af8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8008af8:	b480      	push	{r7}
 8008afa:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8008afc:	4b27      	ldr	r3, [pc, #156]	@ (8008b9c <FLASH_SetErrorCode+0xa4>)
 8008afe:	68db      	ldr	r3, [r3, #12]
 8008b00:	f003 0310 	and.w	r3, r3, #16
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d008      	beq.n	8008b1a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8008b08:	4b25      	ldr	r3, [pc, #148]	@ (8008ba0 <FLASH_SetErrorCode+0xa8>)
 8008b0a:	69db      	ldr	r3, [r3, #28]
 8008b0c:	f043 0308 	orr.w	r3, r3, #8
 8008b10:	4a23      	ldr	r2, [pc, #140]	@ (8008ba0 <FLASH_SetErrorCode+0xa8>)
 8008b12:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8008b14:	4b21      	ldr	r3, [pc, #132]	@ (8008b9c <FLASH_SetErrorCode+0xa4>)
 8008b16:	2210      	movs	r2, #16
 8008b18:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8008b1a:	4b20      	ldr	r3, [pc, #128]	@ (8008b9c <FLASH_SetErrorCode+0xa4>)
 8008b1c:	68db      	ldr	r3, [r3, #12]
 8008b1e:	f003 0320 	and.w	r3, r3, #32
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d008      	beq.n	8008b38 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8008b26:	4b1e      	ldr	r3, [pc, #120]	@ (8008ba0 <FLASH_SetErrorCode+0xa8>)
 8008b28:	69db      	ldr	r3, [r3, #28]
 8008b2a:	f043 0304 	orr.w	r3, r3, #4
 8008b2e:	4a1c      	ldr	r2, [pc, #112]	@ (8008ba0 <FLASH_SetErrorCode+0xa8>)
 8008b30:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8008b32:	4b1a      	ldr	r3, [pc, #104]	@ (8008b9c <FLASH_SetErrorCode+0xa4>)
 8008b34:	2220      	movs	r2, #32
 8008b36:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8008b38:	4b18      	ldr	r3, [pc, #96]	@ (8008b9c <FLASH_SetErrorCode+0xa4>)
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d008      	beq.n	8008b56 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8008b44:	4b16      	ldr	r3, [pc, #88]	@ (8008ba0 <FLASH_SetErrorCode+0xa8>)
 8008b46:	69db      	ldr	r3, [r3, #28]
 8008b48:	f043 0302 	orr.w	r3, r3, #2
 8008b4c:	4a14      	ldr	r2, [pc, #80]	@ (8008ba0 <FLASH_SetErrorCode+0xa8>)
 8008b4e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8008b50:	4b12      	ldr	r3, [pc, #72]	@ (8008b9c <FLASH_SetErrorCode+0xa4>)
 8008b52:	2240      	movs	r2, #64	@ 0x40
 8008b54:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8008b56:	4b11      	ldr	r3, [pc, #68]	@ (8008b9c <FLASH_SetErrorCode+0xa4>)
 8008b58:	68db      	ldr	r3, [r3, #12]
 8008b5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d008      	beq.n	8008b74 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8008b62:	4b0f      	ldr	r3, [pc, #60]	@ (8008ba0 <FLASH_SetErrorCode+0xa8>)
 8008b64:	69db      	ldr	r3, [r3, #28]
 8008b66:	f043 0301 	orr.w	r3, r3, #1
 8008b6a:	4a0d      	ldr	r2, [pc, #52]	@ (8008ba0 <FLASH_SetErrorCode+0xa8>)
 8008b6c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8008b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8008b9c <FLASH_SetErrorCode+0xa4>)
 8008b70:	2280      	movs	r2, #128	@ 0x80
 8008b72:	60da      	str	r2, [r3, #12]
  }
    
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8008b74:	4b09      	ldr	r3, [pc, #36]	@ (8008b9c <FLASH_SetErrorCode+0xa4>)
 8008b76:	68db      	ldr	r3, [r3, #12]
 8008b78:	f003 0302 	and.w	r3, r3, #2
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d008      	beq.n	8008b92 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8008b80:	4b07      	ldr	r3, [pc, #28]	@ (8008ba0 <FLASH_SetErrorCode+0xa8>)
 8008b82:	69db      	ldr	r3, [r3, #28]
 8008b84:	f043 0310 	orr.w	r3, r3, #16
 8008b88:	4a05      	ldr	r2, [pc, #20]	@ (8008ba0 <FLASH_SetErrorCode+0xa8>)
 8008b8a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8008b8c:	4b03      	ldr	r3, [pc, #12]	@ (8008b9c <FLASH_SetErrorCode+0xa4>)
 8008b8e:	2202      	movs	r2, #2
 8008b90:	60da      	str	r2, [r3, #12]
  }
}
 8008b92:	bf00      	nop
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bc80      	pop	{r7}
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop
 8008b9c:	40023c00 	.word	0x40023c00
 8008ba0:	20005104 	.word	0x20005104

08008ba4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008bb6:	4b31      	ldr	r3, [pc, #196]	@ (8008c7c <HAL_FLASHEx_Erase+0xd8>)
 8008bb8:	7e1b      	ldrb	r3, [r3, #24]
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	d101      	bne.n	8008bc2 <HAL_FLASHEx_Erase+0x1e>
 8008bbe:	2302      	movs	r3, #2
 8008bc0:	e058      	b.n	8008c74 <HAL_FLASHEx_Erase+0xd0>
 8008bc2:	4b2e      	ldr	r3, [pc, #184]	@ (8008c7c <HAL_FLASHEx_Erase+0xd8>)
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008bc8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8008bcc:	f7ff febe 	bl	800894c <FLASH_WaitForLastOperation>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8008bd4:	7bfb      	ldrb	r3, [r7, #15]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d148      	bne.n	8008c6c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8008be0:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d115      	bne.n	8008c16 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	691b      	ldr	r3, [r3, #16]
 8008bee:	b2da      	uxtb	r2, r3
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	4610      	mov	r0, r2
 8008bf8:	f000 f8da 	bl	8008db0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008bfc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8008c00:	f7ff fea4 	bl	800894c <FLASH_WaitForLastOperation>
 8008c04:	4603      	mov	r3, r0
 8008c06:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8008c08:	4b1d      	ldr	r3, [pc, #116]	@ (8008c80 <HAL_FLASHEx_Erase+0xdc>)
 8008c0a:	691b      	ldr	r3, [r3, #16]
 8008c0c:	4a1c      	ldr	r2, [pc, #112]	@ (8008c80 <HAL_FLASHEx_Erase+0xdc>)
 8008c0e:	f023 0304 	bic.w	r3, r3, #4
 8008c12:	6113      	str	r3, [r2, #16]
 8008c14:	e028      	b.n	8008c68 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	60bb      	str	r3, [r7, #8]
 8008c1c:	e01c      	b.n	8008c58 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	691b      	ldr	r3, [r3, #16]
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	4619      	mov	r1, r3
 8008c26:	68b8      	ldr	r0, [r7, #8]
 8008c28:	f000 f82c 	bl	8008c84 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008c2c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8008c30:	f7ff fe8c 	bl	800894c <FLASH_WaitForLastOperation>
 8008c34:	4603      	mov	r3, r0
 8008c36:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8008c38:	4b11      	ldr	r3, [pc, #68]	@ (8008c80 <HAL_FLASHEx_Erase+0xdc>)
 8008c3a:	691b      	ldr	r3, [r3, #16]
 8008c3c:	4a10      	ldr	r2, [pc, #64]	@ (8008c80 <HAL_FLASHEx_Erase+0xdc>)
 8008c3e:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8008c42:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8008c44:	7bfb      	ldrb	r3, [r7, #15]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d003      	beq.n	8008c52 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	68ba      	ldr	r2, [r7, #8]
 8008c4e:	601a      	str	r2, [r3, #0]
          break;
 8008c50:	e00a      	b.n	8008c68 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	3301      	adds	r3, #1
 8008c56:	60bb      	str	r3, [r7, #8]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	68da      	ldr	r2, [r3, #12]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	4413      	add	r3, r2
 8008c62:	68ba      	ldr	r2, [r7, #8]
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d3da      	bcc.n	8008c1e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8008c68:	f000 f85e 	bl	8008d28 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008c6c:	4b03      	ldr	r3, [pc, #12]	@ (8008c7c <HAL_FLASHEx_Erase+0xd8>)
 8008c6e:	2200      	movs	r2, #0
 8008c70:	761a      	strb	r2, [r3, #24]

  return status;
 8008c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3710      	adds	r7, #16
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}
 8008c7c:	20005104 	.word	0x20005104
 8008c80:	40023c00 	.word	0x40023c00

08008c84 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b087      	sub	sp, #28
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8008c90:	2300      	movs	r3, #0
 8008c92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8008c94:	78fb      	ldrb	r3, [r7, #3]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d102      	bne.n	8008ca0 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	617b      	str	r3, [r7, #20]
 8008c9e:	e010      	b.n	8008cc2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8008ca0:	78fb      	ldrb	r3, [r7, #3]
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d103      	bne.n	8008cae <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8008ca6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008caa:	617b      	str	r3, [r7, #20]
 8008cac:	e009      	b.n	8008cc2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8008cae:	78fb      	ldrb	r3, [r7, #3]
 8008cb0:	2b02      	cmp	r3, #2
 8008cb2:	d103      	bne.n	8008cbc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8008cb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008cb8:	617b      	str	r3, [r7, #20]
 8008cba:	e002      	b.n	8008cc2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8008cbc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8008cc0:	617b      	str	r3, [r7, #20]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008cc2:	4b18      	ldr	r3, [pc, #96]	@ (8008d24 <FLASH_Erase_Sector+0xa0>)
 8008cc4:	691b      	ldr	r3, [r3, #16]
 8008cc6:	4a17      	ldr	r2, [pc, #92]	@ (8008d24 <FLASH_Erase_Sector+0xa0>)
 8008cc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ccc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8008cce:	4b15      	ldr	r3, [pc, #84]	@ (8008d24 <FLASH_Erase_Sector+0xa0>)
 8008cd0:	691a      	ldr	r2, [r3, #16]
 8008cd2:	4914      	ldr	r1, [pc, #80]	@ (8008d24 <FLASH_Erase_Sector+0xa0>)
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8008cda:	4b12      	ldr	r3, [pc, #72]	@ (8008d24 <FLASH_Erase_Sector+0xa0>)
 8008cdc:	691b      	ldr	r3, [r3, #16]
 8008cde:	4a11      	ldr	r2, [pc, #68]	@ (8008d24 <FLASH_Erase_Sector+0xa0>)
 8008ce0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008ce4:	6113      	str	r3, [r2, #16]
 8008ce6:	23f8      	movs	r3, #248	@ 0xf8
 8008ce8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	fa93 f3a3 	rbit	r3, r3
 8008cf0:	60fb      	str	r3, [r7, #12]
  return result;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
  FLASH->CR |= FLASH_CR_SER | (Sector << POSITION_VAL(FLASH_CR_SNB));
 8008cf4:	fab3 f383 	clz	r3, r3
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	4093      	lsls	r3, r2
 8008d00:	f043 0202 	orr.w	r2, r3, #2
 8008d04:	4b07      	ldr	r3, [pc, #28]	@ (8008d24 <FLASH_Erase_Sector+0xa0>)
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	4906      	ldr	r1, [pc, #24]	@ (8008d24 <FLASH_Erase_Sector+0xa0>)
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8008d0e:	4b05      	ldr	r3, [pc, #20]	@ (8008d24 <FLASH_Erase_Sector+0xa0>)
 8008d10:	691b      	ldr	r3, [r3, #16]
 8008d12:	4a04      	ldr	r2, [pc, #16]	@ (8008d24 <FLASH_Erase_Sector+0xa0>)
 8008d14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d18:	6113      	str	r3, [r2, #16]
}
 8008d1a:	bf00      	nop
 8008d1c:	371c      	adds	r7, #28
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bc80      	pop	{r7}
 8008d22:	4770      	bx	lr
 8008d24:	40023c00 	.word	0x40023c00

08008d28 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8008d2c:	4b1f      	ldr	r3, [pc, #124]	@ (8008dac <FLASH_FlushCaches+0x84>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d017      	beq.n	8008d68 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8008d38:	4b1c      	ldr	r3, [pc, #112]	@ (8008dac <FLASH_FlushCaches+0x84>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a1b      	ldr	r2, [pc, #108]	@ (8008dac <FLASH_FlushCaches+0x84>)
 8008d3e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008d42:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8008d44:	4b19      	ldr	r3, [pc, #100]	@ (8008dac <FLASH_FlushCaches+0x84>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a18      	ldr	r2, [pc, #96]	@ (8008dac <FLASH_FlushCaches+0x84>)
 8008d4a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008d4e:	6013      	str	r3, [r2, #0]
 8008d50:	4b16      	ldr	r3, [pc, #88]	@ (8008dac <FLASH_FlushCaches+0x84>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a15      	ldr	r2, [pc, #84]	@ (8008dac <FLASH_FlushCaches+0x84>)
 8008d56:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008d5a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008d5c:	4b13      	ldr	r3, [pc, #76]	@ (8008dac <FLASH_FlushCaches+0x84>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a12      	ldr	r2, [pc, #72]	@ (8008dac <FLASH_FlushCaches+0x84>)
 8008d62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008d66:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8008d68:	4b10      	ldr	r3, [pc, #64]	@ (8008dac <FLASH_FlushCaches+0x84>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d017      	beq.n	8008da4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8008d74:	4b0d      	ldr	r3, [pc, #52]	@ (8008dac <FLASH_FlushCaches+0x84>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a0c      	ldr	r2, [pc, #48]	@ (8008dac <FLASH_FlushCaches+0x84>)
 8008d7a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008d7e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8008d80:	4b0a      	ldr	r3, [pc, #40]	@ (8008dac <FLASH_FlushCaches+0x84>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a09      	ldr	r2, [pc, #36]	@ (8008dac <FLASH_FlushCaches+0x84>)
 8008d86:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008d8a:	6013      	str	r3, [r2, #0]
 8008d8c:	4b07      	ldr	r3, [pc, #28]	@ (8008dac <FLASH_FlushCaches+0x84>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a06      	ldr	r2, [pc, #24]	@ (8008dac <FLASH_FlushCaches+0x84>)
 8008d92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008d96:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8008d98:	4b04      	ldr	r3, [pc, #16]	@ (8008dac <FLASH_FlushCaches+0x84>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a03      	ldr	r2, [pc, #12]	@ (8008dac <FLASH_FlushCaches+0x84>)
 8008d9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008da2:	6013      	str	r3, [r2, #0]
  }
}
 8008da4:	bf00      	nop
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bc80      	pop	{r7}
 8008daa:	4770      	bx	lr
 8008dac:	40023c00 	.word	0x40023c00

08008db0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{ 
 8008db0:	b480      	push	{r7}
 8008db2:	b083      	sub	sp, #12
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	4603      	mov	r3, r0
 8008db8:	6039      	str	r1, [r7, #0]
 8008dba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8008df0 <FLASH_MassErase+0x40>)
 8008dbe:	691b      	ldr	r3, [r3, #16]
 8008dc0:	4a0b      	ldr	r2, [pc, #44]	@ (8008df0 <FLASH_MassErase+0x40>)
 8008dc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008dc6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8008dc8:	4b09      	ldr	r3, [pc, #36]	@ (8008df0 <FLASH_MassErase+0x40>)
 8008dca:	691b      	ldr	r3, [r3, #16]
 8008dcc:	4a08      	ldr	r2, [pc, #32]	@ (8008df0 <FLASH_MassErase+0x40>)
 8008dce:	f043 0304 	orr.w	r3, r3, #4
 8008dd2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8008dd4:	4b06      	ldr	r3, [pc, #24]	@ (8008df0 <FLASH_MassErase+0x40>)
 8008dd6:	691a      	ldr	r2, [r3, #16]
 8008dd8:	79fb      	ldrb	r3, [r7, #7]
 8008dda:	021b      	lsls	r3, r3, #8
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	4a04      	ldr	r2, [pc, #16]	@ (8008df0 <FLASH_MassErase+0x40>)
 8008de0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008de4:	6113      	str	r3, [r2, #16]
}
 8008de6:	bf00      	nop
 8008de8:	370c      	adds	r7, #12
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bc80      	pop	{r7}
 8008dee:	4770      	bx	lr
 8008df0:	40023c00 	.word	0x40023c00

08008df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b087      	sub	sp, #28
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008e02:	e16f      	b.n	80090e4 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	2101      	movs	r1, #1
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8008e10:	4013      	ands	r3, r2
 8008e12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	f000 8161 	beq.w	80090de <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	f003 0303 	and.w	r3, r3, #3
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d005      	beq.n	8008e34 <HAL_GPIO_Init+0x40>
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	f003 0303 	and.w	r3, r3, #3
 8008e30:	2b02      	cmp	r3, #2
 8008e32:	d130      	bne.n	8008e96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	005b      	lsls	r3, r3, #1
 8008e3e:	2203      	movs	r2, #3
 8008e40:	fa02 f303 	lsl.w	r3, r2, r3
 8008e44:	43db      	mvns	r3, r3
 8008e46:	693a      	ldr	r2, [r7, #16]
 8008e48:	4013      	ands	r3, r2
 8008e4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	68da      	ldr	r2, [r3, #12]
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	005b      	lsls	r3, r3, #1
 8008e54:	fa02 f303 	lsl.w	r3, r2, r3
 8008e58:	693a      	ldr	r2, [r7, #16]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	693a      	ldr	r2, [r7, #16]
 8008e62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e72:	43db      	mvns	r3, r3
 8008e74:	693a      	ldr	r2, [r7, #16]
 8008e76:	4013      	ands	r3, r2
 8008e78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	091b      	lsrs	r3, r3, #4
 8008e80:	f003 0201 	and.w	r2, r3, #1
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	fa02 f303 	lsl.w	r3, r2, r3
 8008e8a:	693a      	ldr	r2, [r7, #16]
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	693a      	ldr	r2, [r7, #16]
 8008e94:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	f003 0303 	and.w	r3, r3, #3
 8008e9e:	2b03      	cmp	r3, #3
 8008ea0:	d017      	beq.n	8008ed2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	68db      	ldr	r3, [r3, #12]
 8008ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	005b      	lsls	r3, r3, #1
 8008eac:	2203      	movs	r2, #3
 8008eae:	fa02 f303 	lsl.w	r3, r2, r3
 8008eb2:	43db      	mvns	r3, r3
 8008eb4:	693a      	ldr	r2, [r7, #16]
 8008eb6:	4013      	ands	r3, r2
 8008eb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	689a      	ldr	r2, [r3, #8]
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	005b      	lsls	r3, r3, #1
 8008ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec6:	693a      	ldr	r2, [r7, #16]
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	693a      	ldr	r2, [r7, #16]
 8008ed0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	f003 0303 	and.w	r3, r3, #3
 8008eda:	2b02      	cmp	r3, #2
 8008edc:	d123      	bne.n	8008f26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	08da      	lsrs	r2, r3, #3
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	3208      	adds	r2, #8
 8008ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	f003 0307 	and.w	r3, r3, #7
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	220f      	movs	r2, #15
 8008ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8008efa:	43db      	mvns	r3, r3
 8008efc:	693a      	ldr	r2, [r7, #16]
 8008efe:	4013      	ands	r3, r2
 8008f00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	691a      	ldr	r2, [r3, #16]
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	f003 0307 	and.w	r3, r3, #7
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f12:	693a      	ldr	r2, [r7, #16]
 8008f14:	4313      	orrs	r3, r2
 8008f16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	08da      	lsrs	r2, r3, #3
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	3208      	adds	r2, #8
 8008f20:	6939      	ldr	r1, [r7, #16]
 8008f22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	005b      	lsls	r3, r3, #1
 8008f30:	2203      	movs	r2, #3
 8008f32:	fa02 f303 	lsl.w	r3, r2, r3
 8008f36:	43db      	mvns	r3, r3
 8008f38:	693a      	ldr	r2, [r7, #16]
 8008f3a:	4013      	ands	r3, r2
 8008f3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	f003 0203 	and.w	r2, r3, #3
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	005b      	lsls	r3, r3, #1
 8008f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f4e:	693a      	ldr	r2, [r7, #16]
 8008f50:	4313      	orrs	r3, r2
 8008f52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	693a      	ldr	r2, [r7, #16]
 8008f58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	f000 80bb 	beq.w	80090de <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008f68:	2300      	movs	r3, #0
 8008f6a:	60bb      	str	r3, [r7, #8]
 8008f6c:	4b64      	ldr	r3, [pc, #400]	@ (8009100 <HAL_GPIO_Init+0x30c>)
 8008f6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f70:	4a63      	ldr	r2, [pc, #396]	@ (8009100 <HAL_GPIO_Init+0x30c>)
 8008f72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008f76:	6453      	str	r3, [r2, #68]	@ 0x44
 8008f78:	4b61      	ldr	r3, [pc, #388]	@ (8009100 <HAL_GPIO_Init+0x30c>)
 8008f7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008f80:	60bb      	str	r3, [r7, #8]
 8008f82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008f84:	4a5f      	ldr	r2, [pc, #380]	@ (8009104 <HAL_GPIO_Init+0x310>)
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	089b      	lsrs	r3, r3, #2
 8008f8a:	3302      	adds	r3, #2
 8008f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	f003 0303 	and.w	r3, r3, #3
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	220f      	movs	r2, #15
 8008f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008fa0:	43db      	mvns	r3, r3
 8008fa2:	693a      	ldr	r2, [r7, #16]
 8008fa4:	4013      	ands	r3, r2
 8008fa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	4a57      	ldr	r2, [pc, #348]	@ (8009108 <HAL_GPIO_Init+0x314>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d031      	beq.n	8009014 <HAL_GPIO_Init+0x220>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	4a56      	ldr	r2, [pc, #344]	@ (800910c <HAL_GPIO_Init+0x318>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d02b      	beq.n	8009010 <HAL_GPIO_Init+0x21c>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	4a55      	ldr	r2, [pc, #340]	@ (8009110 <HAL_GPIO_Init+0x31c>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d025      	beq.n	800900c <HAL_GPIO_Init+0x218>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	4a54      	ldr	r2, [pc, #336]	@ (8009114 <HAL_GPIO_Init+0x320>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d01f      	beq.n	8009008 <HAL_GPIO_Init+0x214>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	4a53      	ldr	r2, [pc, #332]	@ (8009118 <HAL_GPIO_Init+0x324>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d019      	beq.n	8009004 <HAL_GPIO_Init+0x210>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4a52      	ldr	r2, [pc, #328]	@ (800911c <HAL_GPIO_Init+0x328>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d013      	beq.n	8009000 <HAL_GPIO_Init+0x20c>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	4a51      	ldr	r2, [pc, #324]	@ (8009120 <HAL_GPIO_Init+0x32c>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d00d      	beq.n	8008ffc <HAL_GPIO_Init+0x208>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	4a50      	ldr	r2, [pc, #320]	@ (8009124 <HAL_GPIO_Init+0x330>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d007      	beq.n	8008ff8 <HAL_GPIO_Init+0x204>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	4a4f      	ldr	r2, [pc, #316]	@ (8009128 <HAL_GPIO_Init+0x334>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d101      	bne.n	8008ff4 <HAL_GPIO_Init+0x200>
 8008ff0:	2308      	movs	r3, #8
 8008ff2:	e010      	b.n	8009016 <HAL_GPIO_Init+0x222>
 8008ff4:	2309      	movs	r3, #9
 8008ff6:	e00e      	b.n	8009016 <HAL_GPIO_Init+0x222>
 8008ff8:	2307      	movs	r3, #7
 8008ffa:	e00c      	b.n	8009016 <HAL_GPIO_Init+0x222>
 8008ffc:	2306      	movs	r3, #6
 8008ffe:	e00a      	b.n	8009016 <HAL_GPIO_Init+0x222>
 8009000:	2305      	movs	r3, #5
 8009002:	e008      	b.n	8009016 <HAL_GPIO_Init+0x222>
 8009004:	2304      	movs	r3, #4
 8009006:	e006      	b.n	8009016 <HAL_GPIO_Init+0x222>
 8009008:	2303      	movs	r3, #3
 800900a:	e004      	b.n	8009016 <HAL_GPIO_Init+0x222>
 800900c:	2302      	movs	r3, #2
 800900e:	e002      	b.n	8009016 <HAL_GPIO_Init+0x222>
 8009010:	2301      	movs	r3, #1
 8009012:	e000      	b.n	8009016 <HAL_GPIO_Init+0x222>
 8009014:	2300      	movs	r3, #0
 8009016:	697a      	ldr	r2, [r7, #20]
 8009018:	f002 0203 	and.w	r2, r2, #3
 800901c:	0092      	lsls	r2, r2, #2
 800901e:	4093      	lsls	r3, r2
 8009020:	461a      	mov	r2, r3
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	4313      	orrs	r3, r2
 8009026:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8009028:	4936      	ldr	r1, [pc, #216]	@ (8009104 <HAL_GPIO_Init+0x310>)
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	089b      	lsrs	r3, r3, #2
 800902e:	3302      	adds	r3, #2
 8009030:	693a      	ldr	r2, [r7, #16]
 8009032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009036:	4b3d      	ldr	r3, [pc, #244]	@ (800912c <HAL_GPIO_Init+0x338>)
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	43db      	mvns	r3, r3
 8009040:	693a      	ldr	r2, [r7, #16]
 8009042:	4013      	ands	r3, r2
 8009044:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800904e:	2b00      	cmp	r3, #0
 8009050:	d003      	beq.n	800905a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8009052:	693a      	ldr	r2, [r7, #16]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	4313      	orrs	r3, r2
 8009058:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800905a:	4a34      	ldr	r2, [pc, #208]	@ (800912c <HAL_GPIO_Init+0x338>)
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009060:	4b32      	ldr	r3, [pc, #200]	@ (800912c <HAL_GPIO_Init+0x338>)
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	43db      	mvns	r3, r3
 800906a:	693a      	ldr	r2, [r7, #16]
 800906c:	4013      	ands	r3, r2
 800906e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009078:	2b00      	cmp	r3, #0
 800907a:	d003      	beq.n	8009084 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800907c:	693a      	ldr	r2, [r7, #16]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	4313      	orrs	r3, r2
 8009082:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8009084:	4a29      	ldr	r2, [pc, #164]	@ (800912c <HAL_GPIO_Init+0x338>)
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800908a:	4b28      	ldr	r3, [pc, #160]	@ (800912c <HAL_GPIO_Init+0x338>)
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	43db      	mvns	r3, r3
 8009094:	693a      	ldr	r2, [r7, #16]
 8009096:	4013      	ands	r3, r2
 8009098:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d003      	beq.n	80090ae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80090a6:	693a      	ldr	r2, [r7, #16]
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	4313      	orrs	r3, r2
 80090ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80090ae:	4a1f      	ldr	r2, [pc, #124]	@ (800912c <HAL_GPIO_Init+0x338>)
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80090b4:	4b1d      	ldr	r3, [pc, #116]	@ (800912c <HAL_GPIO_Init+0x338>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	43db      	mvns	r3, r3
 80090be:	693a      	ldr	r2, [r7, #16]
 80090c0:	4013      	ands	r3, r2
 80090c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d003      	beq.n	80090d8 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 80090d0:	693a      	ldr	r2, [r7, #16]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	4313      	orrs	r3, r2
 80090d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80090d8:	4a14      	ldr	r2, [pc, #80]	@ (800912c <HAL_GPIO_Init+0x338>)
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	3301      	adds	r3, #1
 80090e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	fa22 f303 	lsr.w	r3, r2, r3
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	f47f ae88 	bne.w	8008e04 <HAL_GPIO_Init+0x10>
  }
}
 80090f4:	bf00      	nop
 80090f6:	bf00      	nop
 80090f8:	371c      	adds	r7, #28
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bc80      	pop	{r7}
 80090fe:	4770      	bx	lr
 8009100:	40023800 	.word	0x40023800
 8009104:	40013800 	.word	0x40013800
 8009108:	40020000 	.word	0x40020000
 800910c:	40020400 	.word	0x40020400
 8009110:	40020800 	.word	0x40020800
 8009114:	40020c00 	.word	0x40020c00
 8009118:	40021000 	.word	0x40021000
 800911c:	40021400 	.word	0x40021400
 8009120:	40021800 	.word	0x40021800
 8009124:	40021c00 	.word	0x40021c00
 8009128:	40022000 	.word	0x40022000
 800912c:	40013c00 	.word	0x40013c00

08009130 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009130:	b480      	push	{r7}
 8009132:	b085      	sub	sp, #20
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	460b      	mov	r3, r1
 800913a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	691a      	ldr	r2, [r3, #16]
 8009140:	887b      	ldrh	r3, [r7, #2]
 8009142:	4013      	ands	r3, r2
 8009144:	2b00      	cmp	r3, #0
 8009146:	d002      	beq.n	800914e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009148:	2301      	movs	r3, #1
 800914a:	73fb      	strb	r3, [r7, #15]
 800914c:	e001      	b.n	8009152 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800914e:	2300      	movs	r3, #0
 8009150:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009152:	7bfb      	ldrb	r3, [r7, #15]
}
 8009154:	4618      	mov	r0, r3
 8009156:	3714      	adds	r7, #20
 8009158:	46bd      	mov	sp, r7
 800915a:	bc80      	pop	{r7}
 800915c:	4770      	bx	lr
	...

08009160 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b082      	sub	sp, #8
 8009164:	af00      	add	r7, sp, #0
 8009166:	4603      	mov	r3, r0
 8009168:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800916a:	4b08      	ldr	r3, [pc, #32]	@ (800918c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800916c:	695a      	ldr	r2, [r3, #20]
 800916e:	88fb      	ldrh	r3, [r7, #6]
 8009170:	4013      	ands	r3, r2
 8009172:	2b00      	cmp	r3, #0
 8009174:	d006      	beq.n	8009184 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009176:	4a05      	ldr	r2, [pc, #20]	@ (800918c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009178:	88fb      	ldrh	r3, [r7, #6]
 800917a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800917c:	88fb      	ldrh	r3, [r7, #6]
 800917e:	4618      	mov	r0, r3
 8009180:	f7fa ff62 	bl	8004048 <HAL_GPIO_EXTI_Callback>
  }
}
 8009184:	bf00      	nop
 8009186:	3708      	adds	r7, #8
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}
 800918c:	40013c00 	.word	0x40013c00

08009190 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d101      	bne.n	80091a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800919e:	2301      	movs	r3, #1
 80091a0:	e12b      	b.n	80093fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d106      	bne.n	80091bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2200      	movs	r2, #0
 80091b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f7fa fc5e 	bl	8003a78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2224      	movs	r2, #36	@ 0x24
 80091c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f022 0201 	bic.w	r2, r2, #1
 80091d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80091e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80091f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80091f4:	f001 f8a4 	bl	800a340 <HAL_RCC_GetPCLK1Freq>
 80091f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	4a81      	ldr	r2, [pc, #516]	@ (8009404 <HAL_I2C_Init+0x274>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d807      	bhi.n	8009214 <HAL_I2C_Init+0x84>
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	4a80      	ldr	r2, [pc, #512]	@ (8009408 <HAL_I2C_Init+0x278>)
 8009208:	4293      	cmp	r3, r2
 800920a:	bf94      	ite	ls
 800920c:	2301      	movls	r3, #1
 800920e:	2300      	movhi	r3, #0
 8009210:	b2db      	uxtb	r3, r3
 8009212:	e006      	b.n	8009222 <HAL_I2C_Init+0x92>
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	4a7d      	ldr	r2, [pc, #500]	@ (800940c <HAL_I2C_Init+0x27c>)
 8009218:	4293      	cmp	r3, r2
 800921a:	bf94      	ite	ls
 800921c:	2301      	movls	r3, #1
 800921e:	2300      	movhi	r3, #0
 8009220:	b2db      	uxtb	r3, r3
 8009222:	2b00      	cmp	r3, #0
 8009224:	d001      	beq.n	800922a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009226:	2301      	movs	r3, #1
 8009228:	e0e7      	b.n	80093fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	4a78      	ldr	r2, [pc, #480]	@ (8009410 <HAL_I2C_Init+0x280>)
 800922e:	fba2 2303 	umull	r2, r3, r2, r3
 8009232:	0c9b      	lsrs	r3, r3, #18
 8009234:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	68ba      	ldr	r2, [r7, #8]
 8009246:	430a      	orrs	r2, r1
 8009248:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	6a1b      	ldr	r3, [r3, #32]
 8009250:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	4a6a      	ldr	r2, [pc, #424]	@ (8009404 <HAL_I2C_Init+0x274>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d802      	bhi.n	8009264 <HAL_I2C_Init+0xd4>
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	3301      	adds	r3, #1
 8009262:	e009      	b.n	8009278 <HAL_I2C_Init+0xe8>
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800926a:	fb02 f303 	mul.w	r3, r2, r3
 800926e:	4a69      	ldr	r2, [pc, #420]	@ (8009414 <HAL_I2C_Init+0x284>)
 8009270:	fba2 2303 	umull	r2, r3, r2, r3
 8009274:	099b      	lsrs	r3, r3, #6
 8009276:	3301      	adds	r3, #1
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	6812      	ldr	r2, [r2, #0]
 800927c:	430b      	orrs	r3, r1
 800927e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	69db      	ldr	r3, [r3, #28]
 8009286:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800928a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	495c      	ldr	r1, [pc, #368]	@ (8009404 <HAL_I2C_Init+0x274>)
 8009294:	428b      	cmp	r3, r1
 8009296:	d819      	bhi.n	80092cc <HAL_I2C_Init+0x13c>
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	1e59      	subs	r1, r3, #1
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	005b      	lsls	r3, r3, #1
 80092a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80092a6:	1c59      	adds	r1, r3, #1
 80092a8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80092ac:	400b      	ands	r3, r1
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d00a      	beq.n	80092c8 <HAL_I2C_Init+0x138>
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	1e59      	subs	r1, r3, #1
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	005b      	lsls	r3, r3, #1
 80092bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80092c0:	3301      	adds	r3, #1
 80092c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092c6:	e051      	b.n	800936c <HAL_I2C_Init+0x1dc>
 80092c8:	2304      	movs	r3, #4
 80092ca:	e04f      	b.n	800936c <HAL_I2C_Init+0x1dc>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	689b      	ldr	r3, [r3, #8]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d111      	bne.n	80092f8 <HAL_I2C_Init+0x168>
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	1e58      	subs	r0, r3, #1
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6859      	ldr	r1, [r3, #4]
 80092dc:	460b      	mov	r3, r1
 80092de:	005b      	lsls	r3, r3, #1
 80092e0:	440b      	add	r3, r1
 80092e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80092e6:	3301      	adds	r3, #1
 80092e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	bf0c      	ite	eq
 80092f0:	2301      	moveq	r3, #1
 80092f2:	2300      	movne	r3, #0
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	e012      	b.n	800931e <HAL_I2C_Init+0x18e>
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	1e58      	subs	r0, r3, #1
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6859      	ldr	r1, [r3, #4]
 8009300:	460b      	mov	r3, r1
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	440b      	add	r3, r1
 8009306:	0099      	lsls	r1, r3, #2
 8009308:	440b      	add	r3, r1
 800930a:	fbb0 f3f3 	udiv	r3, r0, r3
 800930e:	3301      	adds	r3, #1
 8009310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009314:	2b00      	cmp	r3, #0
 8009316:	bf0c      	ite	eq
 8009318:	2301      	moveq	r3, #1
 800931a:	2300      	movne	r3, #0
 800931c:	b2db      	uxtb	r3, r3
 800931e:	2b00      	cmp	r3, #0
 8009320:	d001      	beq.n	8009326 <HAL_I2C_Init+0x196>
 8009322:	2301      	movs	r3, #1
 8009324:	e022      	b.n	800936c <HAL_I2C_Init+0x1dc>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d10e      	bne.n	800934c <HAL_I2C_Init+0x1bc>
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	1e58      	subs	r0, r3, #1
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6859      	ldr	r1, [r3, #4]
 8009336:	460b      	mov	r3, r1
 8009338:	005b      	lsls	r3, r3, #1
 800933a:	440b      	add	r3, r1
 800933c:	fbb0 f3f3 	udiv	r3, r0, r3
 8009340:	3301      	adds	r3, #1
 8009342:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009346:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800934a:	e00f      	b.n	800936c <HAL_I2C_Init+0x1dc>
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	1e58      	subs	r0, r3, #1
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6859      	ldr	r1, [r3, #4]
 8009354:	460b      	mov	r3, r1
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	440b      	add	r3, r1
 800935a:	0099      	lsls	r1, r3, #2
 800935c:	440b      	add	r3, r1
 800935e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009362:	3301      	adds	r3, #1
 8009364:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009368:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800936c:	6879      	ldr	r1, [r7, #4]
 800936e:	6809      	ldr	r1, [r1, #0]
 8009370:	4313      	orrs	r3, r2
 8009372:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	69da      	ldr	r2, [r3, #28]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6a1b      	ldr	r3, [r3, #32]
 8009386:	431a      	orrs	r2, r3
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	430a      	orrs	r2, r1
 800938e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800939a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	6911      	ldr	r1, [r2, #16]
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	68d2      	ldr	r2, [r2, #12]
 80093a6:	4311      	orrs	r1, r2
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	6812      	ldr	r2, [r2, #0]
 80093ac:	430b      	orrs	r3, r1
 80093ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	68db      	ldr	r3, [r3, #12]
 80093b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	695a      	ldr	r2, [r3, #20]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	699b      	ldr	r3, [r3, #24]
 80093c2:	431a      	orrs	r2, r3
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	430a      	orrs	r2, r1
 80093ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f042 0201 	orr.w	r2, r2, #1
 80093da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2220      	movs	r2, #32
 80093e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2200      	movs	r2, #0
 80093ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2200      	movs	r2, #0
 80093f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80093f8:	2300      	movs	r3, #0
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3710      	adds	r7, #16
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop
 8009404:	000186a0 	.word	0x000186a0
 8009408:	001e847f 	.word	0x001e847f
 800940c:	003d08ff 	.word	0x003d08ff
 8009410:	431bde83 	.word	0x431bde83
 8009414:	10624dd3 	.word	0x10624dd3

08009418 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b088      	sub	sp, #32
 800941c:	af02      	add	r7, sp, #8
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	4608      	mov	r0, r1
 8009422:	4611      	mov	r1, r2
 8009424:	461a      	mov	r2, r3
 8009426:	4603      	mov	r3, r0
 8009428:	817b      	strh	r3, [r7, #10]
 800942a:	460b      	mov	r3, r1
 800942c:	813b      	strh	r3, [r7, #8]
 800942e:	4613      	mov	r3, r2
 8009430:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009432:	f7fd f889 	bl	8006548 <HAL_GetTick>
 8009436:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800943e:	b2db      	uxtb	r3, r3
 8009440:	2b20      	cmp	r3, #32
 8009442:	f040 80d9 	bne.w	80095f8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	9300      	str	r3, [sp, #0]
 800944a:	2319      	movs	r3, #25
 800944c:	2201      	movs	r2, #1
 800944e:	496d      	ldr	r1, [pc, #436]	@ (8009604 <HAL_I2C_Mem_Write+0x1ec>)
 8009450:	68f8      	ldr	r0, [r7, #12]
 8009452:	f000 f971 	bl	8009738 <I2C_WaitOnFlagUntilTimeout>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	d001      	beq.n	8009460 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800945c:	2302      	movs	r3, #2
 800945e:	e0cc      	b.n	80095fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009466:	2b01      	cmp	r3, #1
 8009468:	d101      	bne.n	800946e <HAL_I2C_Mem_Write+0x56>
 800946a:	2302      	movs	r3, #2
 800946c:	e0c5      	b.n	80095fa <HAL_I2C_Mem_Write+0x1e2>
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2201      	movs	r2, #1
 8009472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f003 0301 	and.w	r3, r3, #1
 8009480:	2b01      	cmp	r3, #1
 8009482:	d007      	beq.n	8009494 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f042 0201 	orr.w	r2, r2, #1
 8009492:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80094a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2221      	movs	r2, #33	@ 0x21
 80094a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2240      	movs	r2, #64	@ 0x40
 80094b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2200      	movs	r2, #0
 80094b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	6a3a      	ldr	r2, [r7, #32]
 80094be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80094c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094ca:	b29a      	uxth	r2, r3
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	4a4d      	ldr	r2, [pc, #308]	@ (8009608 <HAL_I2C_Mem_Write+0x1f0>)
 80094d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80094d6:	88f8      	ldrh	r0, [r7, #6]
 80094d8:	893a      	ldrh	r2, [r7, #8]
 80094da:	8979      	ldrh	r1, [r7, #10]
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	9301      	str	r3, [sp, #4]
 80094e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094e2:	9300      	str	r3, [sp, #0]
 80094e4:	4603      	mov	r3, r0
 80094e6:	68f8      	ldr	r0, [r7, #12]
 80094e8:	f000 f890 	bl	800960c <I2C_RequestMemoryWrite>
 80094ec:	4603      	mov	r3, r0
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d052      	beq.n	8009598 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80094f2:	2301      	movs	r3, #1
 80094f4:	e081      	b.n	80095fa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80094f6:	697a      	ldr	r2, [r7, #20]
 80094f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80094fa:	68f8      	ldr	r0, [r7, #12]
 80094fc:	f000 fa36 	bl	800996c <I2C_WaitOnTXEFlagUntilTimeout>
 8009500:	4603      	mov	r3, r0
 8009502:	2b00      	cmp	r3, #0
 8009504:	d00d      	beq.n	8009522 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800950a:	2b04      	cmp	r3, #4
 800950c:	d107      	bne.n	800951e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800951c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800951e:	2301      	movs	r3, #1
 8009520:	e06b      	b.n	80095fa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009526:	781a      	ldrb	r2, [r3, #0]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009532:	1c5a      	adds	r2, r3, #1
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800953c:	3b01      	subs	r3, #1
 800953e:	b29a      	uxth	r2, r3
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009548:	b29b      	uxth	r3, r3
 800954a:	3b01      	subs	r3, #1
 800954c:	b29a      	uxth	r2, r3
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	695b      	ldr	r3, [r3, #20]
 8009558:	f003 0304 	and.w	r3, r3, #4
 800955c:	2b04      	cmp	r3, #4
 800955e:	d11b      	bne.n	8009598 <HAL_I2C_Mem_Write+0x180>
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009564:	2b00      	cmp	r3, #0
 8009566:	d017      	beq.n	8009598 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800956c:	781a      	ldrb	r2, [r3, #0]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009578:	1c5a      	adds	r2, r3, #1
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009582:	3b01      	subs	r3, #1
 8009584:	b29a      	uxth	r2, r3
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800958e:	b29b      	uxth	r3, r3
 8009590:	3b01      	subs	r3, #1
 8009592:	b29a      	uxth	r2, r3
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800959c:	2b00      	cmp	r3, #0
 800959e:	d1aa      	bne.n	80094f6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80095a0:	697a      	ldr	r2, [r7, #20]
 80095a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80095a4:	68f8      	ldr	r0, [r7, #12]
 80095a6:	f000 fa29 	bl	80099fc <I2C_WaitOnBTFFlagUntilTimeout>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d00d      	beq.n	80095cc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095b4:	2b04      	cmp	r3, #4
 80095b6:	d107      	bne.n	80095c8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80095c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80095c8:	2301      	movs	r3, #1
 80095ca:	e016      	b.n	80095fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80095da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2220      	movs	r2, #32
 80095e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2200      	movs	r2, #0
 80095e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2200      	movs	r2, #0
 80095f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80095f4:	2300      	movs	r3, #0
 80095f6:	e000      	b.n	80095fa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80095f8:	2302      	movs	r3, #2
  }
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3718      	adds	r7, #24
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
 8009602:	bf00      	nop
 8009604:	00100002 	.word	0x00100002
 8009608:	ffff0000 	.word	0xffff0000

0800960c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b088      	sub	sp, #32
 8009610:	af02      	add	r7, sp, #8
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	4608      	mov	r0, r1
 8009616:	4611      	mov	r1, r2
 8009618:	461a      	mov	r2, r3
 800961a:	4603      	mov	r3, r0
 800961c:	817b      	strh	r3, [r7, #10]
 800961e:	460b      	mov	r3, r1
 8009620:	813b      	strh	r3, [r7, #8]
 8009622:	4613      	mov	r3, r2
 8009624:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	681a      	ldr	r2, [r3, #0]
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009634:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009638:	9300      	str	r3, [sp, #0]
 800963a:	6a3b      	ldr	r3, [r7, #32]
 800963c:	2200      	movs	r2, #0
 800963e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009642:	68f8      	ldr	r0, [r7, #12]
 8009644:	f000 f878 	bl	8009738 <I2C_WaitOnFlagUntilTimeout>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d00d      	beq.n	800966a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009658:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800965c:	d103      	bne.n	8009666 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009664:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009666:	2303      	movs	r3, #3
 8009668:	e05f      	b.n	800972a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800966a:	897b      	ldrh	r3, [r7, #10]
 800966c:	b2db      	uxtb	r3, r3
 800966e:	461a      	mov	r2, r3
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009678:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800967a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800967c:	6a3a      	ldr	r2, [r7, #32]
 800967e:	492d      	ldr	r1, [pc, #180]	@ (8009734 <I2C_RequestMemoryWrite+0x128>)
 8009680:	68f8      	ldr	r0, [r7, #12]
 8009682:	f000 f8d3 	bl	800982c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009686:	4603      	mov	r3, r0
 8009688:	2b00      	cmp	r3, #0
 800968a:	d001      	beq.n	8009690 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800968c:	2301      	movs	r3, #1
 800968e:	e04c      	b.n	800972a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009690:	2300      	movs	r3, #0
 8009692:	617b      	str	r3, [r7, #20]
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	695b      	ldr	r3, [r3, #20]
 800969a:	617b      	str	r3, [r7, #20]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	699b      	ldr	r3, [r3, #24]
 80096a2:	617b      	str	r3, [r7, #20]
 80096a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80096a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096a8:	6a39      	ldr	r1, [r7, #32]
 80096aa:	68f8      	ldr	r0, [r7, #12]
 80096ac:	f000 f95e 	bl	800996c <I2C_WaitOnTXEFlagUntilTimeout>
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d00d      	beq.n	80096d2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096ba:	2b04      	cmp	r3, #4
 80096bc:	d107      	bne.n	80096ce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	681a      	ldr	r2, [r3, #0]
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80096cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80096ce:	2301      	movs	r3, #1
 80096d0:	e02b      	b.n	800972a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80096d2:	88fb      	ldrh	r3, [r7, #6]
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d105      	bne.n	80096e4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80096d8:	893b      	ldrh	r3, [r7, #8]
 80096da:	b2da      	uxtb	r2, r3
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	611a      	str	r2, [r3, #16]
 80096e2:	e021      	b.n	8009728 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80096e4:	893b      	ldrh	r3, [r7, #8]
 80096e6:	0a1b      	lsrs	r3, r3, #8
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	b2da      	uxtb	r2, r3
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80096f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096f4:	6a39      	ldr	r1, [r7, #32]
 80096f6:	68f8      	ldr	r0, [r7, #12]
 80096f8:	f000 f938 	bl	800996c <I2C_WaitOnTXEFlagUntilTimeout>
 80096fc:	4603      	mov	r3, r0
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d00d      	beq.n	800971e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009706:	2b04      	cmp	r3, #4
 8009708:	d107      	bne.n	800971a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009718:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800971a:	2301      	movs	r3, #1
 800971c:	e005      	b.n	800972a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800971e:	893b      	ldrh	r3, [r7, #8]
 8009720:	b2da      	uxtb	r2, r3
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009728:	2300      	movs	r3, #0
}
 800972a:	4618      	mov	r0, r3
 800972c:	3718      	adds	r7, #24
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	00010002 	.word	0x00010002

08009738 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b084      	sub	sp, #16
 800973c:	af00      	add	r7, sp, #0
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	60b9      	str	r1, [r7, #8]
 8009742:	603b      	str	r3, [r7, #0]
 8009744:	4613      	mov	r3, r2
 8009746:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009748:	e048      	b.n	80097dc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009750:	d044      	beq.n	80097dc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009752:	f7fc fef9 	bl	8006548 <HAL_GetTick>
 8009756:	4602      	mov	r2, r0
 8009758:	69bb      	ldr	r3, [r7, #24]
 800975a:	1ad3      	subs	r3, r2, r3
 800975c:	683a      	ldr	r2, [r7, #0]
 800975e:	429a      	cmp	r2, r3
 8009760:	d302      	bcc.n	8009768 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d139      	bne.n	80097dc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	0c1b      	lsrs	r3, r3, #16
 800976c:	b2db      	uxtb	r3, r3
 800976e:	2b01      	cmp	r3, #1
 8009770:	d10d      	bne.n	800978e <I2C_WaitOnFlagUntilTimeout+0x56>
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	695b      	ldr	r3, [r3, #20]
 8009778:	43da      	mvns	r2, r3
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	4013      	ands	r3, r2
 800977e:	b29b      	uxth	r3, r3
 8009780:	2b00      	cmp	r3, #0
 8009782:	bf0c      	ite	eq
 8009784:	2301      	moveq	r3, #1
 8009786:	2300      	movne	r3, #0
 8009788:	b2db      	uxtb	r3, r3
 800978a:	461a      	mov	r2, r3
 800978c:	e00c      	b.n	80097a8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	699b      	ldr	r3, [r3, #24]
 8009794:	43da      	mvns	r2, r3
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	4013      	ands	r3, r2
 800979a:	b29b      	uxth	r3, r3
 800979c:	2b00      	cmp	r3, #0
 800979e:	bf0c      	ite	eq
 80097a0:	2301      	moveq	r3, #1
 80097a2:	2300      	movne	r3, #0
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	461a      	mov	r2, r3
 80097a8:	79fb      	ldrb	r3, [r7, #7]
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d116      	bne.n	80097dc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2200      	movs	r2, #0
 80097b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2220      	movs	r2, #32
 80097b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2200      	movs	r2, #0
 80097c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097c8:	f043 0220 	orr.w	r2, r3, #32
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2200      	movs	r2, #0
 80097d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80097d8:	2301      	movs	r3, #1
 80097da:	e023      	b.n	8009824 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	0c1b      	lsrs	r3, r3, #16
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d10d      	bne.n	8009802 <I2C_WaitOnFlagUntilTimeout+0xca>
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	695b      	ldr	r3, [r3, #20]
 80097ec:	43da      	mvns	r2, r3
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	4013      	ands	r3, r2
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	bf0c      	ite	eq
 80097f8:	2301      	moveq	r3, #1
 80097fa:	2300      	movne	r3, #0
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	461a      	mov	r2, r3
 8009800:	e00c      	b.n	800981c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	699b      	ldr	r3, [r3, #24]
 8009808:	43da      	mvns	r2, r3
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	4013      	ands	r3, r2
 800980e:	b29b      	uxth	r3, r3
 8009810:	2b00      	cmp	r3, #0
 8009812:	bf0c      	ite	eq
 8009814:	2301      	moveq	r3, #1
 8009816:	2300      	movne	r3, #0
 8009818:	b2db      	uxtb	r3, r3
 800981a:	461a      	mov	r2, r3
 800981c:	79fb      	ldrb	r3, [r7, #7]
 800981e:	429a      	cmp	r2, r3
 8009820:	d093      	beq.n	800974a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	3710      	adds	r7, #16
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	60b9      	str	r1, [r7, #8]
 8009836:	607a      	str	r2, [r7, #4]
 8009838:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800983a:	e071      	b.n	8009920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	695b      	ldr	r3, [r3, #20]
 8009842:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009846:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800984a:	d123      	bne.n	8009894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800985a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009864:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2200      	movs	r2, #0
 800986a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2220      	movs	r2, #32
 8009870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2200      	movs	r2, #0
 8009878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009880:	f043 0204 	orr.w	r2, r3, #4
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2200      	movs	r2, #0
 800988c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009890:	2301      	movs	r3, #1
 8009892:	e067      	b.n	8009964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800989a:	d041      	beq.n	8009920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800989c:	f7fc fe54 	bl	8006548 <HAL_GetTick>
 80098a0:	4602      	mov	r2, r0
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	1ad3      	subs	r3, r2, r3
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d302      	bcc.n	80098b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d136      	bne.n	8009920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	0c1b      	lsrs	r3, r3, #16
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d10c      	bne.n	80098d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	695b      	ldr	r3, [r3, #20]
 80098c2:	43da      	mvns	r2, r3
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	4013      	ands	r3, r2
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	bf14      	ite	ne
 80098ce:	2301      	movne	r3, #1
 80098d0:	2300      	moveq	r3, #0
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	e00b      	b.n	80098ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	699b      	ldr	r3, [r3, #24]
 80098dc:	43da      	mvns	r2, r3
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	4013      	ands	r3, r2
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	bf14      	ite	ne
 80098e8:	2301      	movne	r3, #1
 80098ea:	2300      	moveq	r3, #0
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d016      	beq.n	8009920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2200      	movs	r2, #0
 80098f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2220      	movs	r2, #32
 80098fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2200      	movs	r2, #0
 8009904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800990c:	f043 0220 	orr.w	r2, r3, #32
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2200      	movs	r2, #0
 8009918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800991c:	2301      	movs	r3, #1
 800991e:	e021      	b.n	8009964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	0c1b      	lsrs	r3, r3, #16
 8009924:	b2db      	uxtb	r3, r3
 8009926:	2b01      	cmp	r3, #1
 8009928:	d10c      	bne.n	8009944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	695b      	ldr	r3, [r3, #20]
 8009930:	43da      	mvns	r2, r3
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	4013      	ands	r3, r2
 8009936:	b29b      	uxth	r3, r3
 8009938:	2b00      	cmp	r3, #0
 800993a:	bf14      	ite	ne
 800993c:	2301      	movne	r3, #1
 800993e:	2300      	moveq	r3, #0
 8009940:	b2db      	uxtb	r3, r3
 8009942:	e00b      	b.n	800995c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	699b      	ldr	r3, [r3, #24]
 800994a:	43da      	mvns	r2, r3
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	4013      	ands	r3, r2
 8009950:	b29b      	uxth	r3, r3
 8009952:	2b00      	cmp	r3, #0
 8009954:	bf14      	ite	ne
 8009956:	2301      	movne	r3, #1
 8009958:	2300      	moveq	r3, #0
 800995a:	b2db      	uxtb	r3, r3
 800995c:	2b00      	cmp	r3, #0
 800995e:	f47f af6d 	bne.w	800983c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009962:	2300      	movs	r3, #0
}
 8009964:	4618      	mov	r0, r3
 8009966:	3710      	adds	r7, #16
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	60f8      	str	r0, [r7, #12]
 8009974:	60b9      	str	r1, [r7, #8]
 8009976:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009978:	e034      	b.n	80099e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800997a:	68f8      	ldr	r0, [r7, #12]
 800997c:	f000 f886 	bl	8009a8c <I2C_IsAcknowledgeFailed>
 8009980:	4603      	mov	r3, r0
 8009982:	2b00      	cmp	r3, #0
 8009984:	d001      	beq.n	800998a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009986:	2301      	movs	r3, #1
 8009988:	e034      	b.n	80099f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009990:	d028      	beq.n	80099e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009992:	f7fc fdd9 	bl	8006548 <HAL_GetTick>
 8009996:	4602      	mov	r2, r0
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	1ad3      	subs	r3, r2, r3
 800999c:	68ba      	ldr	r2, [r7, #8]
 800999e:	429a      	cmp	r2, r3
 80099a0:	d302      	bcc.n	80099a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d11d      	bne.n	80099e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	695b      	ldr	r3, [r3, #20]
 80099ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099b2:	2b80      	cmp	r3, #128	@ 0x80
 80099b4:	d016      	beq.n	80099e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2200      	movs	r2, #0
 80099ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2220      	movs	r2, #32
 80099c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2200      	movs	r2, #0
 80099c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099d0:	f043 0220 	orr.w	r2, r3, #32
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2200      	movs	r2, #0
 80099dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80099e0:	2301      	movs	r3, #1
 80099e2:	e007      	b.n	80099f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	695b      	ldr	r3, [r3, #20]
 80099ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099ee:	2b80      	cmp	r3, #128	@ 0x80
 80099f0:	d1c3      	bne.n	800997a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80099f2:	2300      	movs	r3, #0
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3710      	adds	r7, #16
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b084      	sub	sp, #16
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	60f8      	str	r0, [r7, #12]
 8009a04:	60b9      	str	r1, [r7, #8]
 8009a06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009a08:	e034      	b.n	8009a74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009a0a:	68f8      	ldr	r0, [r7, #12]
 8009a0c:	f000 f83e 	bl	8009a8c <I2C_IsAcknowledgeFailed>
 8009a10:	4603      	mov	r3, r0
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d001      	beq.n	8009a1a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009a16:	2301      	movs	r3, #1
 8009a18:	e034      	b.n	8009a84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a20:	d028      	beq.n	8009a74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a22:	f7fc fd91 	bl	8006548 <HAL_GetTick>
 8009a26:	4602      	mov	r2, r0
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	1ad3      	subs	r3, r2, r3
 8009a2c:	68ba      	ldr	r2, [r7, #8]
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d302      	bcc.n	8009a38 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d11d      	bne.n	8009a74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	695b      	ldr	r3, [r3, #20]
 8009a3e:	f003 0304 	and.w	r3, r3, #4
 8009a42:	2b04      	cmp	r3, #4
 8009a44:	d016      	beq.n	8009a74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2220      	movs	r2, #32
 8009a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2200      	movs	r2, #0
 8009a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a60:	f043 0220 	orr.w	r2, r3, #32
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009a70:	2301      	movs	r3, #1
 8009a72:	e007      	b.n	8009a84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	695b      	ldr	r3, [r3, #20]
 8009a7a:	f003 0304 	and.w	r3, r3, #4
 8009a7e:	2b04      	cmp	r3, #4
 8009a80:	d1c3      	bne.n	8009a0a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009a82:	2300      	movs	r3, #0
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3710      	adds	r7, #16
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b083      	sub	sp, #12
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	695b      	ldr	r3, [r3, #20]
 8009a9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009aa2:	d11b      	bne.n	8009adc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009aac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2220      	movs	r2, #32
 8009ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ac8:	f043 0204 	orr.w	r2, r3, #4
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	e000      	b.n	8009ade <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009adc:	2300      	movs	r3, #0
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	370c      	adds	r7, #12
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bc80      	pop	{r7}
 8009ae6:	4770      	bx	lr

08009ae8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009af2:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	fa93 f3a3 	rbit	r3, r3
 8009afa:	603b      	str	r3, [r7, #0]
  return result;
 8009afc:	683b      	ldr	r3, [r7, #0]
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8009afe:	fab3 f383 	clz	r3, r3
 8009b02:	b2db      	uxtb	r3, r3
 8009b04:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8009b08:	f503 3360 	add.w	r3, r3, #229376	@ 0x38000
 8009b0c:	009b      	lsls	r3, r3, #2
 8009b0e:	461a      	mov	r2, r3
 8009b10:	2301      	movs	r3, #1
 8009b12:	6013      	str	r3, [r2, #0]
}
 8009b14:	bf00      	nop
 8009b16:	370c      	adds	r7, #12
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bc80      	pop	{r7}
 8009b1c:	4770      	bx	lr
	...

08009b20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b08a      	sub	sp, #40	@ 0x28
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d101      	bne.n	8009b32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	e23b      	b.n	8009faa <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f003 0301 	and.w	r3, r3, #1
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d050      	beq.n	8009be0 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009b3e:	4b9e      	ldr	r3, [pc, #632]	@ (8009db8 <HAL_RCC_OscConfig+0x298>)
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	f003 030c 	and.w	r3, r3, #12
 8009b46:	2b04      	cmp	r3, #4
 8009b48:	d00c      	beq.n	8009b64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009b4a:	4b9b      	ldr	r3, [pc, #620]	@ (8009db8 <HAL_RCC_OscConfig+0x298>)
 8009b4c:	689b      	ldr	r3, [r3, #8]
 8009b4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009b52:	2b08      	cmp	r3, #8
 8009b54:	d112      	bne.n	8009b7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009b56:	4b98      	ldr	r3, [pc, #608]	@ (8009db8 <HAL_RCC_OscConfig+0x298>)
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009b5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009b62:	d10b      	bne.n	8009b7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b64:	4b94      	ldr	r3, [pc, #592]	@ (8009db8 <HAL_RCC_OscConfig+0x298>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d036      	beq.n	8009bde <HAL_RCC_OscConfig+0xbe>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d132      	bne.n	8009bde <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	e216      	b.n	8009faa <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	685a      	ldr	r2, [r3, #4]
 8009b80:	4b8e      	ldr	r3, [pc, #568]	@ (8009dbc <HAL_RCC_OscConfig+0x29c>)
 8009b82:	b2d2      	uxtb	r2, r2
 8009b84:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d013      	beq.n	8009bb6 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b8e:	f7fc fcdb 	bl	8006548 <HAL_GetTick>
 8009b92:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b94:	e008      	b.n	8009ba8 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009b96:	f7fc fcd7 	bl	8006548 <HAL_GetTick>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	6a3b      	ldr	r3, [r7, #32]
 8009b9e:	1ad3      	subs	r3, r2, r3
 8009ba0:	2b64      	cmp	r3, #100	@ 0x64
 8009ba2:	d901      	bls.n	8009ba8 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8009ba4:	2303      	movs	r3, #3
 8009ba6:	e200      	b.n	8009faa <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009ba8:	4b83      	ldr	r3, [pc, #524]	@ (8009db8 <HAL_RCC_OscConfig+0x298>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d0f0      	beq.n	8009b96 <HAL_RCC_OscConfig+0x76>
 8009bb4:	e014      	b.n	8009be0 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009bb6:	f7fc fcc7 	bl	8006548 <HAL_GetTick>
 8009bba:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009bbc:	e008      	b.n	8009bd0 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009bbe:	f7fc fcc3 	bl	8006548 <HAL_GetTick>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	6a3b      	ldr	r3, [r7, #32]
 8009bc6:	1ad3      	subs	r3, r2, r3
 8009bc8:	2b64      	cmp	r3, #100	@ 0x64
 8009bca:	d901      	bls.n	8009bd0 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8009bcc:	2303      	movs	r3, #3
 8009bce:	e1ec      	b.n	8009faa <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009bd0:	4b79      	ldr	r3, [pc, #484]	@ (8009db8 <HAL_RCC_OscConfig+0x298>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d1f0      	bne.n	8009bbe <HAL_RCC_OscConfig+0x9e>
 8009bdc:	e000      	b.n	8009be0 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009bde:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f003 0302 	and.w	r3, r3, #2
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d077      	beq.n	8009cdc <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009bec:	4b72      	ldr	r3, [pc, #456]	@ (8009db8 <HAL_RCC_OscConfig+0x298>)
 8009bee:	689b      	ldr	r3, [r3, #8]
 8009bf0:	f003 030c 	and.w	r3, r3, #12
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d00b      	beq.n	8009c10 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009bf8:	4b6f      	ldr	r3, [pc, #444]	@ (8009db8 <HAL_RCC_OscConfig+0x298>)
 8009bfa:	689b      	ldr	r3, [r3, #8]
 8009bfc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009c00:	2b08      	cmp	r3, #8
 8009c02:	d126      	bne.n	8009c52 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009c04:	4b6c      	ldr	r3, [pc, #432]	@ (8009db8 <HAL_RCC_OscConfig+0x298>)
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d120      	bne.n	8009c52 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009c10:	4b69      	ldr	r3, [pc, #420]	@ (8009db8 <HAL_RCC_OscConfig+0x298>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f003 0302 	and.w	r3, r3, #2
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d005      	beq.n	8009c28 <HAL_RCC_OscConfig+0x108>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	68db      	ldr	r3, [r3, #12]
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	d001      	beq.n	8009c28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009c24:	2301      	movs	r3, #1
 8009c26:	e1c0      	b.n	8009faa <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c28:	4b63      	ldr	r3, [pc, #396]	@ (8009db8 <HAL_RCC_OscConfig+0x298>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	691b      	ldr	r3, [r3, #16]
 8009c34:	21f8      	movs	r1, #248	@ 0xf8
 8009c36:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c38:	68f9      	ldr	r1, [r7, #12]
 8009c3a:	fa91 f1a1 	rbit	r1, r1
 8009c3e:	6139      	str	r1, [r7, #16]
  return result;
 8009c40:	6939      	ldr	r1, [r7, #16]
 8009c42:	fab1 f181 	clz	r1, r1
 8009c46:	b2c9      	uxtb	r1, r1
 8009c48:	408b      	lsls	r3, r1
 8009c4a:	495b      	ldr	r1, [pc, #364]	@ (8009db8 <HAL_RCC_OscConfig+0x298>)
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009c50:	e044      	b.n	8009cdc <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	68db      	ldr	r3, [r3, #12]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d02a      	beq.n	8009cb0 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009c5a:	4b59      	ldr	r3, [pc, #356]	@ (8009dc0 <HAL_RCC_OscConfig+0x2a0>)
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c60:	f7fc fc72 	bl	8006548 <HAL_GetTick>
 8009c64:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c66:	e008      	b.n	8009c7a <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009c68:	f7fc fc6e 	bl	8006548 <HAL_GetTick>
 8009c6c:	4602      	mov	r2, r0
 8009c6e:	6a3b      	ldr	r3, [r7, #32]
 8009c70:	1ad3      	subs	r3, r2, r3
 8009c72:	2b02      	cmp	r3, #2
 8009c74:	d901      	bls.n	8009c7a <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8009c76:	2303      	movs	r3, #3
 8009c78:	e197      	b.n	8009faa <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c7a:	4b4f      	ldr	r3, [pc, #316]	@ (8009db8 <HAL_RCC_OscConfig+0x298>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f003 0302 	and.w	r3, r3, #2
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d0f0      	beq.n	8009c68 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c86:	4b4c      	ldr	r3, [pc, #304]	@ (8009db8 <HAL_RCC_OscConfig+0x298>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	691b      	ldr	r3, [r3, #16]
 8009c92:	21f8      	movs	r1, #248	@ 0xf8
 8009c94:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c96:	6979      	ldr	r1, [r7, #20]
 8009c98:	fa91 f1a1 	rbit	r1, r1
 8009c9c:	61b9      	str	r1, [r7, #24]
  return result;
 8009c9e:	69b9      	ldr	r1, [r7, #24]
 8009ca0:	fab1 f181 	clz	r1, r1
 8009ca4:	b2c9      	uxtb	r1, r1
 8009ca6:	408b      	lsls	r3, r1
 8009ca8:	4943      	ldr	r1, [pc, #268]	@ (8009db8 <HAL_RCC_OscConfig+0x298>)
 8009caa:	4313      	orrs	r3, r2
 8009cac:	600b      	str	r3, [r1, #0]
 8009cae:	e015      	b.n	8009cdc <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009cb0:	4b43      	ldr	r3, [pc, #268]	@ (8009dc0 <HAL_RCC_OscConfig+0x2a0>)
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009cb6:	f7fc fc47 	bl	8006548 <HAL_GetTick>
 8009cba:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009cbc:	e008      	b.n	8009cd0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009cbe:	f7fc fc43 	bl	8006548 <HAL_GetTick>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	6a3b      	ldr	r3, [r7, #32]
 8009cc6:	1ad3      	subs	r3, r2, r3
 8009cc8:	2b02      	cmp	r3, #2
 8009cca:	d901      	bls.n	8009cd0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8009ccc:	2303      	movs	r3, #3
 8009cce:	e16c      	b.n	8009faa <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009cd0:	4b39      	ldr	r3, [pc, #228]	@ (8009db8 <HAL_RCC_OscConfig+0x298>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f003 0302 	and.w	r3, r3, #2
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d1f0      	bne.n	8009cbe <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f003 0308 	and.w	r3, r3, #8
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d030      	beq.n	8009d4a <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	695b      	ldr	r3, [r3, #20]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d016      	beq.n	8009d1e <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009cf0:	4b34      	ldr	r3, [pc, #208]	@ (8009dc4 <HAL_RCC_OscConfig+0x2a4>)
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009cf6:	f7fc fc27 	bl	8006548 <HAL_GetTick>
 8009cfa:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009cfc:	e008      	b.n	8009d10 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009cfe:	f7fc fc23 	bl	8006548 <HAL_GetTick>
 8009d02:	4602      	mov	r2, r0
 8009d04:	6a3b      	ldr	r3, [r7, #32]
 8009d06:	1ad3      	subs	r3, r2, r3
 8009d08:	2b02      	cmp	r3, #2
 8009d0a:	d901      	bls.n	8009d10 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8009d0c:	2303      	movs	r3, #3
 8009d0e:	e14c      	b.n	8009faa <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009d10:	4b29      	ldr	r3, [pc, #164]	@ (8009db8 <HAL_RCC_OscConfig+0x298>)
 8009d12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d14:	f003 0302 	and.w	r3, r3, #2
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d0f0      	beq.n	8009cfe <HAL_RCC_OscConfig+0x1de>
 8009d1c:	e015      	b.n	8009d4a <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009d1e:	4b29      	ldr	r3, [pc, #164]	@ (8009dc4 <HAL_RCC_OscConfig+0x2a4>)
 8009d20:	2200      	movs	r2, #0
 8009d22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009d24:	f7fc fc10 	bl	8006548 <HAL_GetTick>
 8009d28:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009d2a:	e008      	b.n	8009d3e <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009d2c:	f7fc fc0c 	bl	8006548 <HAL_GetTick>
 8009d30:	4602      	mov	r2, r0
 8009d32:	6a3b      	ldr	r3, [r7, #32]
 8009d34:	1ad3      	subs	r3, r2, r3
 8009d36:	2b02      	cmp	r3, #2
 8009d38:	d901      	bls.n	8009d3e <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8009d3a:	2303      	movs	r3, #3
 8009d3c:	e135      	b.n	8009faa <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009d3e:	4b1e      	ldr	r3, [pc, #120]	@ (8009db8 <HAL_RCC_OscConfig+0x298>)
 8009d40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d42:	f003 0302 	and.w	r3, r3, #2
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d1f0      	bne.n	8009d2c <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f003 0304 	and.w	r3, r3, #4
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	f000 8087 	beq.w	8009e66 <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009d5e:	4b16      	ldr	r3, [pc, #88]	@ (8009db8 <HAL_RCC_OscConfig+0x298>)
 8009d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d110      	bne.n	8009d8c <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	60bb      	str	r3, [r7, #8]
 8009d6e:	4b12      	ldr	r3, [pc, #72]	@ (8009db8 <HAL_RCC_OscConfig+0x298>)
 8009d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d72:	4a11      	ldr	r2, [pc, #68]	@ (8009db8 <HAL_RCC_OscConfig+0x298>)
 8009d74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d78:	6413      	str	r3, [r2, #64]	@ 0x40
 8009d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8009db8 <HAL_RCC_OscConfig+0x298>)
 8009d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009d82:	60bb      	str	r3, [r7, #8]
 8009d84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009d86:	2301      	movs	r3, #1
 8009d88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8009dc8 <HAL_RCC_OscConfig+0x2a8>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a0d      	ldr	r2, [pc, #52]	@ (8009dc8 <HAL_RCC_OscConfig+0x2a8>)
 8009d92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009d96:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d98:	4b0b      	ldr	r3, [pc, #44]	@ (8009dc8 <HAL_RCC_OscConfig+0x2a8>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d122      	bne.n	8009dea <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009da4:	4b08      	ldr	r3, [pc, #32]	@ (8009dc8 <HAL_RCC_OscConfig+0x2a8>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4a07      	ldr	r2, [pc, #28]	@ (8009dc8 <HAL_RCC_OscConfig+0x2a8>)
 8009daa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009dae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009db0:	f7fc fbca 	bl	8006548 <HAL_GetTick>
 8009db4:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009db6:	e012      	b.n	8009dde <HAL_RCC_OscConfig+0x2be>
 8009db8:	40023800 	.word	0x40023800
 8009dbc:	40023802 	.word	0x40023802
 8009dc0:	42470000 	.word	0x42470000
 8009dc4:	42470e80 	.word	0x42470e80
 8009dc8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009dcc:	f7fc fbbc 	bl	8006548 <HAL_GetTick>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	6a3b      	ldr	r3, [r7, #32]
 8009dd4:	1ad3      	subs	r3, r2, r3
 8009dd6:	2b02      	cmp	r3, #2
 8009dd8:	d901      	bls.n	8009dde <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8009dda:	2303      	movs	r3, #3
 8009ddc:	e0e5      	b.n	8009faa <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009dde:	4b75      	ldr	r3, [pc, #468]	@ (8009fb4 <HAL_RCC_OscConfig+0x494>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d0f0      	beq.n	8009dcc <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	689a      	ldr	r2, [r3, #8]
 8009dee:	4b72      	ldr	r3, [pc, #456]	@ (8009fb8 <HAL_RCC_OscConfig+0x498>)
 8009df0:	b2d2      	uxtb	r2, r2
 8009df2:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	689b      	ldr	r3, [r3, #8]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d015      	beq.n	8009e28 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009dfc:	f7fc fba4 	bl	8006548 <HAL_GetTick>
 8009e00:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009e02:	e00a      	b.n	8009e1a <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009e04:	f7fc fba0 	bl	8006548 <HAL_GetTick>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	6a3b      	ldr	r3, [r7, #32]
 8009e0c:	1ad3      	subs	r3, r2, r3
 8009e0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d901      	bls.n	8009e1a <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8009e16:	2303      	movs	r3, #3
 8009e18:	e0c7      	b.n	8009faa <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009e1a:	4b68      	ldr	r3, [pc, #416]	@ (8009fbc <HAL_RCC_OscConfig+0x49c>)
 8009e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e1e:	f003 0302 	and.w	r3, r3, #2
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d0ee      	beq.n	8009e04 <HAL_RCC_OscConfig+0x2e4>
 8009e26:	e014      	b.n	8009e52 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009e28:	f7fc fb8e 	bl	8006548 <HAL_GetTick>
 8009e2c:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009e2e:	e00a      	b.n	8009e46 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009e30:	f7fc fb8a 	bl	8006548 <HAL_GetTick>
 8009e34:	4602      	mov	r2, r0
 8009e36:	6a3b      	ldr	r3, [r7, #32]
 8009e38:	1ad3      	subs	r3, r2, r3
 8009e3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d901      	bls.n	8009e46 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8009e42:	2303      	movs	r3, #3
 8009e44:	e0b1      	b.n	8009faa <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009e46:	4b5d      	ldr	r3, [pc, #372]	@ (8009fbc <HAL_RCC_OscConfig+0x49c>)
 8009e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e4a:	f003 0302 	and.w	r3, r3, #2
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d1ee      	bne.n	8009e30 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009e52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d105      	bne.n	8009e66 <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009e5a:	4b58      	ldr	r3, [pc, #352]	@ (8009fbc <HAL_RCC_OscConfig+0x49c>)
 8009e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e5e:	4a57      	ldr	r2, [pc, #348]	@ (8009fbc <HAL_RCC_OscConfig+0x49c>)
 8009e60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009e64:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	699b      	ldr	r3, [r3, #24]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	f000 809c 	beq.w	8009fa8 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009e70:	4b52      	ldr	r3, [pc, #328]	@ (8009fbc <HAL_RCC_OscConfig+0x49c>)
 8009e72:	689b      	ldr	r3, [r3, #8]
 8009e74:	f003 030c 	and.w	r3, r3, #12
 8009e78:	2b08      	cmp	r3, #8
 8009e7a:	d061      	beq.n	8009f40 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	699b      	ldr	r3, [r3, #24]
 8009e80:	2b02      	cmp	r3, #2
 8009e82:	d146      	bne.n	8009f12 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e84:	4b4e      	ldr	r3, [pc, #312]	@ (8009fc0 <HAL_RCC_OscConfig+0x4a0>)
 8009e86:	2200      	movs	r2, #0
 8009e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e8a:	f7fc fb5d 	bl	8006548 <HAL_GetTick>
 8009e8e:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e90:	e008      	b.n	8009ea4 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e92:	f7fc fb59 	bl	8006548 <HAL_GetTick>
 8009e96:	4602      	mov	r2, r0
 8009e98:	6a3b      	ldr	r3, [r7, #32]
 8009e9a:	1ad3      	subs	r3, r2, r3
 8009e9c:	2b64      	cmp	r3, #100	@ 0x64
 8009e9e:	d901      	bls.n	8009ea4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8009ea0:	2303      	movs	r3, #3
 8009ea2:	e082      	b.n	8009faa <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ea4:	4b45      	ldr	r3, [pc, #276]	@ (8009fbc <HAL_RCC_OscConfig+0x49c>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d1f0      	bne.n	8009e92 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009eb0:	4b42      	ldr	r3, [pc, #264]	@ (8009fbc <HAL_RCC_OscConfig+0x49c>)
 8009eb2:	685a      	ldr	r2, [r3, #4]
 8009eb4:	4b43      	ldr	r3, [pc, #268]	@ (8009fc4 <HAL_RCC_OscConfig+0x4a4>)
 8009eb6:	4013      	ands	r3, r2
 8009eb8:	687a      	ldr	r2, [r7, #4]
 8009eba:	69d1      	ldr	r1, [r2, #28]
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	6a12      	ldr	r2, [r2, #32]
 8009ec0:	4311      	orrs	r1, r2
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009ec6:	0192      	lsls	r2, r2, #6
 8009ec8:	4311      	orrs	r1, r2
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009ece:	0612      	lsls	r2, r2, #24
 8009ed0:	4311      	orrs	r1, r2
 8009ed2:	687a      	ldr	r2, [r7, #4]
 8009ed4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8009ed6:	0852      	lsrs	r2, r2, #1
 8009ed8:	3a01      	subs	r2, #1
 8009eda:	0412      	lsls	r2, r2, #16
 8009edc:	430a      	orrs	r2, r1
 8009ede:	4937      	ldr	r1, [pc, #220]	@ (8009fbc <HAL_RCC_OscConfig+0x49c>)
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009ee4:	4b36      	ldr	r3, [pc, #216]	@ (8009fc0 <HAL_RCC_OscConfig+0x4a0>)
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009eea:	f7fc fb2d 	bl	8006548 <HAL_GetTick>
 8009eee:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009ef0:	e008      	b.n	8009f04 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009ef2:	f7fc fb29 	bl	8006548 <HAL_GetTick>
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	6a3b      	ldr	r3, [r7, #32]
 8009efa:	1ad3      	subs	r3, r2, r3
 8009efc:	2b64      	cmp	r3, #100	@ 0x64
 8009efe:	d901      	bls.n	8009f04 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8009f00:	2303      	movs	r3, #3
 8009f02:	e052      	b.n	8009faa <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009f04:	4b2d      	ldr	r3, [pc, #180]	@ (8009fbc <HAL_RCC_OscConfig+0x49c>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d0f0      	beq.n	8009ef2 <HAL_RCC_OscConfig+0x3d2>
 8009f10:	e04a      	b.n	8009fa8 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f12:	4b2b      	ldr	r3, [pc, #172]	@ (8009fc0 <HAL_RCC_OscConfig+0x4a0>)
 8009f14:	2200      	movs	r2, #0
 8009f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f18:	f7fc fb16 	bl	8006548 <HAL_GetTick>
 8009f1c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009f1e:	e008      	b.n	8009f32 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009f20:	f7fc fb12 	bl	8006548 <HAL_GetTick>
 8009f24:	4602      	mov	r2, r0
 8009f26:	6a3b      	ldr	r3, [r7, #32]
 8009f28:	1ad3      	subs	r3, r2, r3
 8009f2a:	2b64      	cmp	r3, #100	@ 0x64
 8009f2c:	d901      	bls.n	8009f32 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8009f2e:	2303      	movs	r3, #3
 8009f30:	e03b      	b.n	8009faa <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009f32:	4b22      	ldr	r3, [pc, #136]	@ (8009fbc <HAL_RCC_OscConfig+0x49c>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d1f0      	bne.n	8009f20 <HAL_RCC_OscConfig+0x400>
 8009f3e:	e033      	b.n	8009fa8 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	699b      	ldr	r3, [r3, #24]
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d101      	bne.n	8009f4c <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	e02e      	b.n	8009faa <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8009f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8009fbc <HAL_RCC_OscConfig+0x49c>)
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f52:	69fb      	ldr	r3, [r7, #28]
 8009f54:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	69db      	ldr	r3, [r3, #28]
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d121      	bne.n	8009fa4 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009f60:	69fb      	ldr	r3, [r7, #28]
 8009f62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d11a      	bne.n	8009fa4 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009f6e:	69fa      	ldr	r2, [r7, #28]
 8009f70:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009f74:	4013      	ands	r3, r2
 8009f76:	687a      	ldr	r2, [r7, #4]
 8009f78:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009f7a:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d111      	bne.n	8009fa4 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009f80:	69fb      	ldr	r3, [r7, #28]
 8009f82:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f8a:	085b      	lsrs	r3, r3, #1
 8009f8c:	3b01      	subs	r3, #1
 8009f8e:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d107      	bne.n	8009fa4 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009f94:	69fb      	ldr	r3, [r7, #28]
 8009f96:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f9e:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d001      	beq.n	8009fa8 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	e000      	b.n	8009faa <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 8009fa8:	2300      	movs	r3, #0
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3728      	adds	r7, #40	@ 0x28
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
 8009fb2:	bf00      	nop
 8009fb4:	40007000 	.word	0x40007000
 8009fb8:	40023870 	.word	0x40023870
 8009fbc:	40023800 	.word	0x40023800
 8009fc0:	42470060 	.word	0x42470060
 8009fc4:	f0bc8000 	.word	0xf0bc8000

08009fc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b086      	sub	sp, #24
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d101      	bne.n	8009fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	e0d2      	b.n	800a182 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009fdc:	4b6b      	ldr	r3, [pc, #428]	@ (800a18c <HAL_RCC_ClockConfig+0x1c4>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f003 030f 	and.w	r3, r3, #15
 8009fe4:	683a      	ldr	r2, [r7, #0]
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d90c      	bls.n	800a004 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009fea:	4b68      	ldr	r3, [pc, #416]	@ (800a18c <HAL_RCC_ClockConfig+0x1c4>)
 8009fec:	683a      	ldr	r2, [r7, #0]
 8009fee:	b2d2      	uxtb	r2, r2
 8009ff0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ff2:	4b66      	ldr	r3, [pc, #408]	@ (800a18c <HAL_RCC_ClockConfig+0x1c4>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f003 030f 	and.w	r3, r3, #15
 8009ffa:	683a      	ldr	r2, [r7, #0]
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d001      	beq.n	800a004 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a000:	2301      	movs	r3, #1
 800a002:	e0be      	b.n	800a182 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f003 0302 	and.w	r3, r3, #2
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d020      	beq.n	800a052 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f003 0304 	and.w	r3, r3, #4
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d005      	beq.n	800a028 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a01c:	4b5c      	ldr	r3, [pc, #368]	@ (800a190 <HAL_RCC_ClockConfig+0x1c8>)
 800a01e:	689b      	ldr	r3, [r3, #8]
 800a020:	4a5b      	ldr	r2, [pc, #364]	@ (800a190 <HAL_RCC_ClockConfig+0x1c8>)
 800a022:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a026:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f003 0308 	and.w	r3, r3, #8
 800a030:	2b00      	cmp	r3, #0
 800a032:	d005      	beq.n	800a040 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 800a034:	4b56      	ldr	r3, [pc, #344]	@ (800a190 <HAL_RCC_ClockConfig+0x1c8>)
 800a036:	689b      	ldr	r3, [r3, #8]
 800a038:	4a55      	ldr	r2, [pc, #340]	@ (800a190 <HAL_RCC_ClockConfig+0x1c8>)
 800a03a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a03e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a040:	4b53      	ldr	r3, [pc, #332]	@ (800a190 <HAL_RCC_ClockConfig+0x1c8>)
 800a042:	689b      	ldr	r3, [r3, #8]
 800a044:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	689b      	ldr	r3, [r3, #8]
 800a04c:	4950      	ldr	r1, [pc, #320]	@ (800a190 <HAL_RCC_ClockConfig+0x1c8>)
 800a04e:	4313      	orrs	r3, r2
 800a050:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f003 0301 	and.w	r3, r3, #1
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d040      	beq.n	800a0e0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	2b01      	cmp	r3, #1
 800a064:	d107      	bne.n	800a076 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a066:	4b4a      	ldr	r3, [pc, #296]	@ (800a190 <HAL_RCC_ClockConfig+0x1c8>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d115      	bne.n	800a09e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800a072:	2301      	movs	r3, #1
 800a074:	e085      	b.n	800a182 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	2b02      	cmp	r3, #2
 800a07c:	d107      	bne.n	800a08e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a07e:	4b44      	ldr	r3, [pc, #272]	@ (800a190 <HAL_RCC_ClockConfig+0x1c8>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a086:	2b00      	cmp	r3, #0
 800a088:	d109      	bne.n	800a09e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800a08a:	2301      	movs	r3, #1
 800a08c:	e079      	b.n	800a182 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a08e:	4b40      	ldr	r3, [pc, #256]	@ (800a190 <HAL_RCC_ClockConfig+0x1c8>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f003 0302 	and.w	r3, r3, #2
 800a096:	2b00      	cmp	r3, #0
 800a098:	d101      	bne.n	800a09e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800a09a:	2301      	movs	r3, #1
 800a09c:	e071      	b.n	800a182 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a09e:	4b3c      	ldr	r3, [pc, #240]	@ (800a190 <HAL_RCC_ClockConfig+0x1c8>)
 800a0a0:	689b      	ldr	r3, [r3, #8]
 800a0a2:	f023 0203 	bic.w	r2, r3, #3
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	685b      	ldr	r3, [r3, #4]
 800a0aa:	4939      	ldr	r1, [pc, #228]	@ (800a190 <HAL_RCC_ClockConfig+0x1c8>)
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a0b0:	f7fc fa4a 	bl	8006548 <HAL_GetTick>
 800a0b4:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a0b6:	e00a      	b.n	800a0ce <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a0b8:	f7fc fa46 	bl	8006548 <HAL_GetTick>
 800a0bc:	4602      	mov	r2, r0
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	1ad3      	subs	r3, r2, r3
 800a0c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d901      	bls.n	800a0ce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800a0ca:	2303      	movs	r3, #3
 800a0cc:	e059      	b.n	800a182 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a0ce:	4b30      	ldr	r3, [pc, #192]	@ (800a190 <HAL_RCC_ClockConfig+0x1c8>)
 800a0d0:	689b      	ldr	r3, [r3, #8]
 800a0d2:	f003 020c 	and.w	r2, r3, #12
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	009b      	lsls	r3, r3, #2
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d1eb      	bne.n	800a0b8 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a0e0:	4b2a      	ldr	r3, [pc, #168]	@ (800a18c <HAL_RCC_ClockConfig+0x1c4>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f003 030f 	and.w	r3, r3, #15
 800a0e8:	683a      	ldr	r2, [r7, #0]
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d20c      	bcs.n	800a108 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a0ee:	4b27      	ldr	r3, [pc, #156]	@ (800a18c <HAL_RCC_ClockConfig+0x1c4>)
 800a0f0:	683a      	ldr	r2, [r7, #0]
 800a0f2:	b2d2      	uxtb	r2, r2
 800a0f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0f6:	4b25      	ldr	r3, [pc, #148]	@ (800a18c <HAL_RCC_ClockConfig+0x1c4>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f003 030f 	and.w	r3, r3, #15
 800a0fe:	683a      	ldr	r2, [r7, #0]
 800a100:	429a      	cmp	r2, r3
 800a102:	d001      	beq.n	800a108 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 800a104:	2301      	movs	r3, #1
 800a106:	e03c      	b.n	800a182 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f003 0304 	and.w	r3, r3, #4
 800a110:	2b00      	cmp	r3, #0
 800a112:	d008      	beq.n	800a126 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a114:	4b1e      	ldr	r3, [pc, #120]	@ (800a190 <HAL_RCC_ClockConfig+0x1c8>)
 800a116:	689b      	ldr	r3, [r3, #8]
 800a118:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	68db      	ldr	r3, [r3, #12]
 800a120:	491b      	ldr	r1, [pc, #108]	@ (800a190 <HAL_RCC_ClockConfig+0x1c8>)
 800a122:	4313      	orrs	r3, r2
 800a124:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f003 0308 	and.w	r3, r3, #8
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d009      	beq.n	800a146 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a132:	4b17      	ldr	r3, [pc, #92]	@ (800a190 <HAL_RCC_ClockConfig+0x1c8>)
 800a134:	689b      	ldr	r3, [r3, #8]
 800a136:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	691b      	ldr	r3, [r3, #16]
 800a13e:	00db      	lsls	r3, r3, #3
 800a140:	4913      	ldr	r1, [pc, #76]	@ (800a190 <HAL_RCC_ClockConfig+0x1c8>)
 800a142:	4313      	orrs	r3, r2
 800a144:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800a146:	f000 f82b 	bl	800a1a0 <HAL_RCC_GetSysClockFreq>
 800a14a:	4601      	mov	r1, r0
 800a14c:	4b10      	ldr	r3, [pc, #64]	@ (800a190 <HAL_RCC_ClockConfig+0x1c8>)
 800a14e:	689b      	ldr	r3, [r3, #8]
 800a150:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a154:	22f0      	movs	r2, #240	@ 0xf0
 800a156:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a158:	68fa      	ldr	r2, [r7, #12]
 800a15a:	fa92 f2a2 	rbit	r2, r2
 800a15e:	613a      	str	r2, [r7, #16]
  return result;
 800a160:	693a      	ldr	r2, [r7, #16]
 800a162:	fab2 f282 	clz	r2, r2
 800a166:	b2d2      	uxtb	r2, r2
 800a168:	40d3      	lsrs	r3, r2
 800a16a:	4a0a      	ldr	r2, [pc, #40]	@ (800a194 <HAL_RCC_ClockConfig+0x1cc>)
 800a16c:	5cd3      	ldrb	r3, [r2, r3]
 800a16e:	fa21 f303 	lsr.w	r3, r1, r3
 800a172:	4a09      	ldr	r2, [pc, #36]	@ (800a198 <HAL_RCC_ClockConfig+0x1d0>)
 800a174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a176:	4b09      	ldr	r3, [pc, #36]	@ (800a19c <HAL_RCC_ClockConfig+0x1d4>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7fc f9a2 	bl	80064c4 <HAL_InitTick>

  return HAL_OK;
 800a180:	2300      	movs	r3, #0
}
 800a182:	4618      	mov	r0, r3
 800a184:	3718      	adds	r7, #24
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	40023c00 	.word	0x40023c00
 800a190:	40023800 	.word	0x40023800
 800a194:	080279dc 	.word	0x080279dc
 800a198:	20000074 	.word	0x20000074
 800a19c:	200000cc 	.word	0x200000cc

0800a1a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a1a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a1a4:	b090      	sub	sp, #64	@ 0x40
 800a1a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a1b8:	4b59      	ldr	r3, [pc, #356]	@ (800a320 <HAL_RCC_GetSysClockFreq+0x180>)
 800a1ba:	689b      	ldr	r3, [r3, #8]
 800a1bc:	f003 030c 	and.w	r3, r3, #12
 800a1c0:	2b08      	cmp	r3, #8
 800a1c2:	d00d      	beq.n	800a1e0 <HAL_RCC_GetSysClockFreq+0x40>
 800a1c4:	2b08      	cmp	r3, #8
 800a1c6:	f200 80a2 	bhi.w	800a30e <HAL_RCC_GetSysClockFreq+0x16e>
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d002      	beq.n	800a1d4 <HAL_RCC_GetSysClockFreq+0x34>
 800a1ce:	2b04      	cmp	r3, #4
 800a1d0:	d003      	beq.n	800a1da <HAL_RCC_GetSysClockFreq+0x3a>
 800a1d2:	e09c      	b.n	800a30e <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a1d4:	4b53      	ldr	r3, [pc, #332]	@ (800a324 <HAL_RCC_GetSysClockFreq+0x184>)
 800a1d6:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800a1d8:	e09c      	b.n	800a314 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a1da:	4b53      	ldr	r3, [pc, #332]	@ (800a328 <HAL_RCC_GetSysClockFreq+0x188>)
 800a1dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a1de:	e099      	b.n	800a314 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a1e0:	4b4f      	ldr	r3, [pc, #316]	@ (800a320 <HAL_RCC_GetSysClockFreq+0x180>)
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a1e8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a1ea:	4b4d      	ldr	r3, [pc, #308]	@ (800a320 <HAL_RCC_GetSysClockFreq+0x180>)
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d027      	beq.n	800a246 <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a1f6:	4b4a      	ldr	r3, [pc, #296]	@ (800a320 <HAL_RCC_GetSysClockFreq+0x180>)
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	099b      	lsrs	r3, r3, #6
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	623b      	str	r3, [r7, #32]
 800a200:	627a      	str	r2, [r7, #36]	@ 0x24
 800a202:	6a3b      	ldr	r3, [r7, #32]
 800a204:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a208:	2100      	movs	r1, #0
 800a20a:	4b47      	ldr	r3, [pc, #284]	@ (800a328 <HAL_RCC_GetSysClockFreq+0x188>)
 800a20c:	fb03 f201 	mul.w	r2, r3, r1
 800a210:	2300      	movs	r3, #0
 800a212:	fb00 f303 	mul.w	r3, r0, r3
 800a216:	4413      	add	r3, r2
 800a218:	4a43      	ldr	r2, [pc, #268]	@ (800a328 <HAL_RCC_GetSysClockFreq+0x188>)
 800a21a:	fba0 2102 	umull	r2, r1, r0, r2
 800a21e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800a220:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a222:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a224:	4413      	add	r3, r2
 800a226:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a22a:	2200      	movs	r2, #0
 800a22c:	61bb      	str	r3, [r7, #24]
 800a22e:	61fa      	str	r2, [r7, #28]
 800a230:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a234:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800a238:	f7f6 ffec 	bl	8001214 <__aeabi_uldivmod>
 800a23c:	4602      	mov	r2, r0
 800a23e:	460b      	mov	r3, r1
 800a240:	4613      	mov	r3, r2
 800a242:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a244:	e055      	b.n	800a2f2 <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a246:	4b36      	ldr	r3, [pc, #216]	@ (800a320 <HAL_RCC_GetSysClockFreq+0x180>)
 800a248:	685b      	ldr	r3, [r3, #4]
 800a24a:	099b      	lsrs	r3, r3, #6
 800a24c:	2200      	movs	r2, #0
 800a24e:	613b      	str	r3, [r7, #16]
 800a250:	617a      	str	r2, [r7, #20]
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a258:	f04f 0b00 	mov.w	fp, #0
 800a25c:	4652      	mov	r2, sl
 800a25e:	465b      	mov	r3, fp
 800a260:	f04f 0000 	mov.w	r0, #0
 800a264:	f04f 0100 	mov.w	r1, #0
 800a268:	0159      	lsls	r1, r3, #5
 800a26a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a26e:	0150      	lsls	r0, r2, #5
 800a270:	4602      	mov	r2, r0
 800a272:	460b      	mov	r3, r1
 800a274:	ebb2 080a 	subs.w	r8, r2, sl
 800a278:	eb63 090b 	sbc.w	r9, r3, fp
 800a27c:	f04f 0200 	mov.w	r2, #0
 800a280:	f04f 0300 	mov.w	r3, #0
 800a284:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a288:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a28c:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a290:	ebb2 0408 	subs.w	r4, r2, r8
 800a294:	eb63 0509 	sbc.w	r5, r3, r9
 800a298:	f04f 0200 	mov.w	r2, #0
 800a29c:	f04f 0300 	mov.w	r3, #0
 800a2a0:	00eb      	lsls	r3, r5, #3
 800a2a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a2a6:	00e2      	lsls	r2, r4, #3
 800a2a8:	4614      	mov	r4, r2
 800a2aa:	461d      	mov	r5, r3
 800a2ac:	eb14 030a 	adds.w	r3, r4, sl
 800a2b0:	603b      	str	r3, [r7, #0]
 800a2b2:	eb45 030b 	adc.w	r3, r5, fp
 800a2b6:	607b      	str	r3, [r7, #4]
 800a2b8:	f04f 0200 	mov.w	r2, #0
 800a2bc:	f04f 0300 	mov.w	r3, #0
 800a2c0:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a2c4:	4629      	mov	r1, r5
 800a2c6:	028b      	lsls	r3, r1, #10
 800a2c8:	4620      	mov	r0, r4
 800a2ca:	4629      	mov	r1, r5
 800a2cc:	4604      	mov	r4, r0
 800a2ce:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800a2d2:	4601      	mov	r1, r0
 800a2d4:	028a      	lsls	r2, r1, #10
 800a2d6:	4610      	mov	r0, r2
 800a2d8:	4619      	mov	r1, r3
 800a2da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2dc:	2200      	movs	r2, #0
 800a2de:	60bb      	str	r3, [r7, #8]
 800a2e0:	60fa      	str	r2, [r7, #12]
 800a2e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a2e6:	f7f6 ff95 	bl	8001214 <__aeabi_uldivmod>
 800a2ea:	4602      	mov	r2, r0
 800a2ec:	460b      	mov	r3, r1
 800a2ee:	4613      	mov	r3, r2
 800a2f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a2f2:	4b0b      	ldr	r3, [pc, #44]	@ (800a320 <HAL_RCC_GetSysClockFreq+0x180>)
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	0c1b      	lsrs	r3, r3, #16
 800a2f8:	f003 0303 	and.w	r3, r3, #3
 800a2fc:	3301      	adds	r3, #1
 800a2fe:	005b      	lsls	r3, r3, #1
 800a300:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800a302:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a306:	fbb2 f3f3 	udiv	r3, r2, r3
 800a30a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a30c:	e002      	b.n	800a314 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a30e:	4b05      	ldr	r3, [pc, #20]	@ (800a324 <HAL_RCC_GetSysClockFreq+0x184>)
 800a310:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a312:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800a316:	4618      	mov	r0, r3
 800a318:	3740      	adds	r7, #64	@ 0x40
 800a31a:	46bd      	mov	sp, r7
 800a31c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a320:	40023800 	.word	0x40023800
 800a324:	00f42400 	.word	0x00f42400
 800a328:	017d7840 	.word	0x017d7840

0800a32c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a32c:	b480      	push	{r7}
 800a32e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a330:	4b02      	ldr	r3, [pc, #8]	@ (800a33c <HAL_RCC_GetHCLKFreq+0x10>)
 800a332:	681b      	ldr	r3, [r3, #0]
}
 800a334:	4618      	mov	r0, r3
 800a336:	46bd      	mov	sp, r7
 800a338:	bc80      	pop	{r7}
 800a33a:	4770      	bx	lr
 800a33c:	20000074 	.word	0x20000074

0800a340 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800a346:	f7ff fff1 	bl	800a32c <HAL_RCC_GetHCLKFreq>
 800a34a:	4601      	mov	r1, r0
 800a34c:	4b0b      	ldr	r3, [pc, #44]	@ (800a37c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800a34e:	689b      	ldr	r3, [r3, #8]
 800a350:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800a354:	f44f 52e0 	mov.w	r2, #7168	@ 0x1c00
 800a358:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a35a:	687a      	ldr	r2, [r7, #4]
 800a35c:	fa92 f2a2 	rbit	r2, r2
 800a360:	603a      	str	r2, [r7, #0]
  return result;
 800a362:	683a      	ldr	r2, [r7, #0]
 800a364:	fab2 f282 	clz	r2, r2
 800a368:	b2d2      	uxtb	r2, r2
 800a36a:	40d3      	lsrs	r3, r2
 800a36c:	4a04      	ldr	r2, [pc, #16]	@ (800a380 <HAL_RCC_GetPCLK1Freq+0x40>)
 800a36e:	5cd3      	ldrb	r3, [r2, r3]
 800a370:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a374:	4618      	mov	r0, r3
 800a376:	3708      	adds	r7, #8
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}
 800a37c:	40023800 	.word	0x40023800
 800a380:	080279ec 	.word	0x080279ec

0800a384 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *              
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b08a      	sub	sp, #40	@ 0x28
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a38c:	2300      	movs	r3, #0
 800a38e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 800a390:	2300      	movs	r3, #0
 800a392:	623b      	str	r3, [r7, #32]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f003 0301 	and.w	r3, r3, #1
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d103      	bne.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x24>
     (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 800a3a4:	2b08      	cmp	r3, #8
 800a3a6:	d14c      	bne.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a3a8:	4b6d      	ldr	r3, [pc, #436]	@ (800a560 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a3ae:	f7fc f8cb 	bl	8006548 <HAL_GetTick>
 800a3b2:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a3b4:	e008      	b.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a3b6:	f7fc f8c7 	bl	8006548 <HAL_GetTick>
 800a3ba:	4602      	mov	r2, r0
 800a3bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3be:	1ad3      	subs	r3, r2, r3
 800a3c0:	2b02      	cmp	r3, #2
 800a3c2:	d901      	bls.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a3c4:	2303      	movs	r3, #3
 800a3c6:	e0c7      	b.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a3c8:	4b66      	ldr	r3, [pc, #408]	@ (800a564 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d1f0      	bne.n	800a3b6 <HAL_RCCEx_PeriphCLKConfig+0x32>
      } 
    }
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 800a3dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a3de:	697a      	ldr	r2, [r7, #20]
 800a3e0:	fa92 f2a2 	rbit	r2, r2
 800a3e4:	613a      	str	r2, [r7, #16]
  return result;
 800a3e6:	693a      	ldr	r2, [r7, #16]
 800a3e8:	fab2 f282 	clz	r2, r2
 800a3ec:	b2d2      	uxtb	r2, r2
 800a3ee:	fa03 f202 	lsl.w	r2, r3, r2
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	689b      	ldr	r3, [r3, #8]
 800a3f6:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 800a3fa:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a3fc:	69f9      	ldr	r1, [r7, #28]
 800a3fe:	fa91 f1a1 	rbit	r1, r1
 800a402:	61b9      	str	r1, [r7, #24]
  return result;
 800a404:	69b9      	ldr	r1, [r7, #24]
 800a406:	fab1 f181 	clz	r1, r1
 800a40a:	b2c9      	uxtb	r1, r1
 800a40c:	408b      	lsls	r3, r1
 800a40e:	4955      	ldr	r1, [pc, #340]	@ (800a564 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a410:	4313      	orrs	r3, r2
 800a412:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a416:	4b52      	ldr	r3, [pc, #328]	@ (800a560 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800a418:	2201      	movs	r2, #1
 800a41a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a41c:	f7fc f894 	bl	8006548 <HAL_GetTick>
 800a420:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a422:	e008      	b.n	800a436 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a424:	f7fc f890 	bl	8006548 <HAL_GetTick>
 800a428:	4602      	mov	r2, r0
 800a42a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a42c:	1ad3      	subs	r3, r2, r3
 800a42e:	2b02      	cmp	r3, #2
 800a430:	d901      	bls.n	800a436 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a432:	2303      	movs	r3, #3
 800a434:	e090      	b.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a436:	4b4b      	ldr	r3, [pc, #300]	@ (800a564 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d0f0      	beq.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
  }
  /*--------------------------------------------------------------------------*/
  
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f003 0304 	and.w	r3, r3, #4
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	f000 8083 	beq.w	800a556 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a450:	2300      	movs	r3, #0
 800a452:	60fb      	str	r3, [r7, #12]
 800a454:	4b43      	ldr	r3, [pc, #268]	@ (800a564 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a458:	4a42      	ldr	r2, [pc, #264]	@ (800a564 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a45a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a45e:	6413      	str	r3, [r2, #64]	@ 0x40
 800a460:	4b40      	ldr	r3, [pc, #256]	@ (800a564 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a464:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a468:	60fb      	str	r3, [r7, #12]
 800a46a:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a46c:	4b3e      	ldr	r3, [pc, #248]	@ (800a568 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	4a3d      	ldr	r2, [pc, #244]	@ (800a568 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800a472:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a476:	6013      	str	r3, [r2, #0]
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800a478:	f7fc f866 	bl	8006548 <HAL_GetTick>
 800a47c:	6278      	str	r0, [r7, #36]	@ 0x24
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a47e:	e008      	b.n	800a492 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a480:	f7fc f862 	bl	8006548 <HAL_GetTick>
 800a484:	4602      	mov	r2, r0
 800a486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a488:	1ad3      	subs	r3, r2, r3
 800a48a:	2b02      	cmp	r3, #2
 800a48c:	d901      	bls.n	800a492 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a48e:	2303      	movs	r3, #3
 800a490:	e062      	b.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a492:	4b35      	ldr	r3, [pc, #212]	@ (800a568 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d0f0      	beq.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a49e:	4b31      	ldr	r3, [pc, #196]	@ (800a564 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a4a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a4a6:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a4a8:	6a3b      	ldr	r3, [r7, #32]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d02f      	beq.n	800a50e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	68db      	ldr	r3, [r3, #12]
 800a4b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a4b6:	6a3a      	ldr	r2, [r7, #32]
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d028      	beq.n	800a50e <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a4bc:	4b29      	ldr	r3, [pc, #164]	@ (800a564 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a4be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a4c4:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a4c6:	4b29      	ldr	r3, [pc, #164]	@ (800a56c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800a4c8:	2201      	movs	r2, #1
 800a4ca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a4cc:	4b27      	ldr	r3, [pc, #156]	@ (800a56c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a4d2:	4a24      	ldr	r2, [pc, #144]	@ (800a564 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a4d4:	6a3b      	ldr	r3, [r7, #32]
 800a4d6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a4d8:	4b22      	ldr	r3, [pc, #136]	@ (800a564 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a4da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4dc:	f003 0301 	and.w	r3, r3, #1
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d114      	bne.n	800a50e <HAL_RCCEx_PeriphCLKConfig+0x18a>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a4e4:	f7fc f830 	bl	8006548 <HAL_GetTick>
 800a4e8:	6278      	str	r0, [r7, #36]	@ 0x24
        
        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a4ea:	e00a      	b.n	800a502 <HAL_RCCEx_PeriphCLKConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a4ec:	f7fc f82c 	bl	8006548 <HAL_GetTick>
 800a4f0:	4602      	mov	r2, r0
 800a4f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4f4:	1ad3      	subs	r3, r2, r3
 800a4f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d901      	bls.n	800a502 <HAL_RCCEx_PeriphCLKConfig+0x17e>
          {
            return HAL_TIMEOUT;
 800a4fe:	2303      	movs	r3, #3
 800a500:	e02a      	b.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a502:	4b18      	ldr	r3, [pc, #96]	@ (800a564 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a506:	f003 0302 	and.w	r3, r3, #2
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d0ee      	beq.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x168>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	68db      	ldr	r3, [r3, #12]
 800a512:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a516:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a51a:	d10d      	bne.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800a51c:	4b11      	ldr	r3, [pc, #68]	@ (800a564 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a51e:	689b      	ldr	r3, [r3, #8]
 800a520:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	68db      	ldr	r3, [r3, #12]
 800a528:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a52c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a530:	490c      	ldr	r1, [pc, #48]	@ (800a564 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a532:	4313      	orrs	r3, r2
 800a534:	608b      	str	r3, [r1, #8]
 800a536:	e005      	b.n	800a544 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800a538:	4b0a      	ldr	r3, [pc, #40]	@ (800a564 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a53a:	689b      	ldr	r3, [r3, #8]
 800a53c:	4a09      	ldr	r2, [pc, #36]	@ (800a564 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a53e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800a542:	6093      	str	r3, [r2, #8]
 800a544:	4b07      	ldr	r3, [pc, #28]	@ (800a564 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a546:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	68db      	ldr	r3, [r3, #12]
 800a54c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a550:	4904      	ldr	r1, [pc, #16]	@ (800a564 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a552:	4313      	orrs	r3, r2
 800a554:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  return HAL_OK;
 800a556:	2300      	movs	r3, #0
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3728      	adds	r7, #40	@ 0x28
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	42470068 	.word	0x42470068
 800a564:	40023800 	.word	0x40023800
 800a568:	40007000 	.word	0x40007000
 800a56c:	42470e40 	.word	0x42470e40

0800a570 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b084      	sub	sp, #16
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a578:	2301      	movs	r3, #1
 800a57a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d101      	bne.n	800a586 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800a582:	2301      	movs	r3, #1
 800a584:	e085      	b.n	800a692 <HAL_RTC_Init+0x122>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	7f5b      	ldrb	r3, [r3, #29]
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d105      	bne.n	800a59c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2200      	movs	r2, #0
 800a594:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f7f9 fab6 	bl	8003b08 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2202      	movs	r2, #2
 800a5a0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	68db      	ldr	r3, [r3, #12]
 800a5a8:	f003 0310 	and.w	r3, r3, #16
 800a5ac:	2b10      	cmp	r3, #16
 800a5ae:	d055      	beq.n	800a65c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	22ca      	movs	r2, #202	@ 0xca
 800a5b6:	625a      	str	r2, [r3, #36]	@ 0x24
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	2253      	movs	r2, #83	@ 0x53
 800a5be:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f000 fa51 	bl	800aa68 <RTC_EnterInitMode>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800a5ca:	7bfb      	ldrb	r3, [r7, #15]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d12c      	bne.n	800a62a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	6812      	ldr	r2, [r2, #0]
 800a5da:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a5de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a5e2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	6899      	ldr	r1, [r3, #8]
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	685a      	ldr	r2, [r3, #4]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	691b      	ldr	r3, [r3, #16]
 800a5f2:	431a      	orrs	r2, r3
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	695b      	ldr	r3, [r3, #20]
 800a5f8:	431a      	orrs	r2, r3
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	430a      	orrs	r2, r1
 800a600:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	687a      	ldr	r2, [r7, #4]
 800a608:	68d2      	ldr	r2, [r2, #12]
 800a60a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	6919      	ldr	r1, [r3, #16]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	689b      	ldr	r3, [r3, #8]
 800a616:	041a      	lsls	r2, r3, #16
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	430a      	orrs	r2, r1
 800a61e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f000 fa58 	bl	800aad6 <RTC_ExitInitMode>
 800a626:	4603      	mov	r3, r0
 800a628:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a62a:	7bfb      	ldrb	r3, [r7, #15]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d110      	bne.n	800a652 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800a63e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	699a      	ldr	r2, [r3, #24]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	430a      	orrs	r2, r1
 800a650:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	22ff      	movs	r2, #255	@ 0xff
 800a658:	625a      	str	r2, [r3, #36]	@ 0x24
 800a65a:	e001      	b.n	800a660 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800a65c:	2300      	movs	r3, #0
 800a65e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800a660:	7bfb      	ldrb	r3, [r7, #15]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d102      	bne.n	800a66c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2201      	movs	r2, #1
 800a66a:	775a      	strb	r2, [r3, #29]
  }
  /* USER CODE BEGIN RTC_Init 0 */
  __HAL_RCC_PWR_CLK_ENABLE();
 800a66c:	2300      	movs	r3, #0
 800a66e:	60bb      	str	r3, [r7, #8]
 800a670:	4b0a      	ldr	r3, [pc, #40]	@ (800a69c <HAL_RTC_Init+0x12c>)
 800a672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a674:	4a09      	ldr	r2, [pc, #36]	@ (800a69c <HAL_RTC_Init+0x12c>)
 800a676:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a67a:	6413      	str	r3, [r2, #64]	@ 0x40
 800a67c:	4b07      	ldr	r3, [pc, #28]	@ (800a69c <HAL_RTC_Init+0x12c>)
 800a67e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a684:	60bb      	str	r3, [r7, #8]
 800a686:	68bb      	ldr	r3, [r7, #8]
  HAL_PWR_EnableBkUpAccess(); // Разрешаем доступ к backup-домену
 800a688:	f7ff fa2e 	bl	8009ae8 <HAL_PWR_EnableBkUpAccess>

  // Проверяем, инициализирован ли уже RTC (если нет — включаем его)
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == RESET) {
 800a68c:	4b03      	ldr	r3, [pc, #12]	@ (800a69c <HAL_RTC_Init+0x12c>)
 800a68e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
  }

  // Важно: не вызывать Reset backup domain здесь!
  /* USER CODE END RTC_Init 0 */

  return status;
 800a690:	7bfb      	ldrb	r3, [r7, #15]
}
 800a692:	4618      	mov	r0, r3
 800a694:	3710      	adds	r7, #16
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}
 800a69a:	bf00      	nop
 800a69c:	40023800 	.word	0x40023800

0800a6a0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a6a0:	b590      	push	{r4, r7, lr}
 800a6a2:	b087      	sub	sp, #28
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	60b9      	str	r1, [r7, #8]
 800a6aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	7f1b      	ldrb	r3, [r3, #28]
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	d101      	bne.n	800a6bc <HAL_RTC_SetTime+0x1c>
 800a6b8:	2302      	movs	r3, #2
 800a6ba:	e087      	b.n	800a7cc <HAL_RTC_SetTime+0x12c>
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	2201      	movs	r2, #1
 800a6c0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2202      	movs	r2, #2
 800a6c6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d126      	bne.n	800a71c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	689b      	ldr	r3, [r3, #8]
 800a6d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d102      	bne.n	800a6e2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	781b      	ldrb	r3, [r3, #0]
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f000 fa13 	bl	800ab12 <RTC_ByteToBcd2>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	785b      	ldrb	r3, [r3, #1]
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f000 fa0c 	bl	800ab12 <RTC_ByteToBcd2>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a6fe:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	789b      	ldrb	r3, [r3, #2]
 800a704:	4618      	mov	r0, r3
 800a706:	f000 fa04 	bl	800ab12 <RTC_ByteToBcd2>
 800a70a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a70c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	78db      	ldrb	r3, [r3, #3]
 800a714:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a716:	4313      	orrs	r3, r2
 800a718:	617b      	str	r3, [r7, #20]
 800a71a:	e018      	b.n	800a74e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	689b      	ldr	r3, [r3, #8]
 800a722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a726:	2b00      	cmp	r3, #0
 800a728:	d102      	bne.n	800a730 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	2200      	movs	r2, #0
 800a72e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	781b      	ldrb	r3, [r3, #0]
 800a734:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	785b      	ldrb	r3, [r3, #1]
 800a73a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a73c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800a73e:	68ba      	ldr	r2, [r7, #8]
 800a740:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800a742:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	78db      	ldrb	r3, [r3, #3]
 800a748:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a74a:	4313      	orrs	r3, r2
 800a74c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	22ca      	movs	r2, #202	@ 0xca
 800a754:	625a      	str	r2, [r3, #36]	@ 0x24
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	2253      	movs	r2, #83	@ 0x53
 800a75c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a75e:	68f8      	ldr	r0, [r7, #12]
 800a760:	f000 f982 	bl	800aa68 <RTC_EnterInitMode>
 800a764:	4603      	mov	r3, r0
 800a766:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800a768:	7cfb      	ldrb	r3, [r7, #19]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d120      	bne.n	800a7b0 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681a      	ldr	r2, [r3, #0]
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800a778:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800a77c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	689a      	ldr	r2, [r3, #8]
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800a78c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	6899      	ldr	r1, [r3, #8]
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	685a      	ldr	r2, [r3, #4]
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	689b      	ldr	r3, [r3, #8]
 800a79c:	431a      	orrs	r2, r3
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	430a      	orrs	r2, r1
 800a7a4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a7a6:	68f8      	ldr	r0, [r7, #12]
 800a7a8:	f000 f995 	bl	800aad6 <RTC_ExitInitMode>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800a7b0:	7cfb      	ldrb	r3, [r7, #19]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d102      	bne.n	800a7bc <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	22ff      	movs	r2, #255	@ 0xff
 800a7c2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	771a      	strb	r2, [r3, #28]

  return status;
 800a7ca:	7cfb      	ldrb	r3, [r7, #19]
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	371c      	adds	r7, #28
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd90      	pop	{r4, r7, pc}

0800a7d4 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b086      	sub	sp, #24
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800a7ee:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800a7f2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	0c1b      	lsrs	r3, r3, #16
 800a7f8:	b2db      	uxtb	r3, r3
 800a7fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a7fe:	b2da      	uxtb	r2, r3
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	0a1b      	lsrs	r3, r3, #8
 800a808:	b2db      	uxtb	r3, r3
 800a80a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a80e:	b2da      	uxtb	r2, r3
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	b2db      	uxtb	r3, r3
 800a818:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a81c:	b2da      	uxtb	r2, r3
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	0d9b      	lsrs	r3, r3, #22
 800a826:	b2db      	uxtb	r3, r3
 800a828:	f003 0301 	and.w	r3, r3, #1
 800a82c:	b2da      	uxtb	r2, r3
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d11a      	bne.n	800a86e <HAL_RTC_GetTime+0x9a>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	781b      	ldrb	r3, [r3, #0]
 800a83c:	4618      	mov	r0, r3
 800a83e:	f000 f985 	bl	800ab4c <RTC_Bcd2ToByte>
 800a842:	4603      	mov	r3, r0
 800a844:	461a      	mov	r2, r3
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	785b      	ldrb	r3, [r3, #1]
 800a84e:	4618      	mov	r0, r3
 800a850:	f000 f97c 	bl	800ab4c <RTC_Bcd2ToByte>
 800a854:	4603      	mov	r3, r0
 800a856:	461a      	mov	r2, r3
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	789b      	ldrb	r3, [r3, #2]
 800a860:	4618      	mov	r0, r3
 800a862:	f000 f973 	bl	800ab4c <RTC_Bcd2ToByte>
 800a866:	4603      	mov	r3, r0
 800a868:	461a      	mov	r2, r3
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800a86e:	2300      	movs	r3, #0
}
 800a870:	4618      	mov	r0, r3
 800a872:	3718      	adds	r7, #24
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a878:	b590      	push	{r4, r7, lr}
 800a87a:	b087      	sub	sp, #28
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	60f8      	str	r0, [r7, #12]
 800a880:	60b9      	str	r1, [r7, #8]
 800a882:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a884:	2300      	movs	r3, #0
 800a886:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	7f1b      	ldrb	r3, [r3, #28]
 800a88c:	2b01      	cmp	r3, #1
 800a88e:	d101      	bne.n	800a894 <HAL_RTC_SetDate+0x1c>
 800a890:	2302      	movs	r3, #2
 800a892:	e071      	b.n	800a978 <HAL_RTC_SetDate+0x100>
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2201      	movs	r2, #1
 800a898:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	2202      	movs	r2, #2
 800a89e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d10e      	bne.n	800a8c4 <HAL_RTC_SetDate+0x4c>
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	785b      	ldrb	r3, [r3, #1]
 800a8aa:	f003 0310 	and.w	r3, r3, #16
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d008      	beq.n	800a8c4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	785b      	ldrb	r3, [r3, #1]
 800a8b6:	f023 0310 	bic.w	r3, r3, #16
 800a8ba:	b2db      	uxtb	r3, r3
 800a8bc:	330a      	adds	r3, #10
 800a8be:	b2da      	uxtb	r2, r3
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d11c      	bne.n	800a904 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	78db      	ldrb	r3, [r3, #3]
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f000 f91f 	bl	800ab12 <RTC_ByteToBcd2>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	785b      	ldrb	r3, [r3, #1]
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f000 f918 	bl	800ab12 <RTC_ByteToBcd2>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a8e6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	789b      	ldrb	r3, [r3, #2]
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f000 f910 	bl	800ab12 <RTC_ByteToBcd2>
 800a8f2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a8f4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	781b      	ldrb	r3, [r3, #0]
 800a8fc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a8fe:	4313      	orrs	r3, r2
 800a900:	617b      	str	r3, [r7, #20]
 800a902:	e00e      	b.n	800a922 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	78db      	ldrb	r3, [r3, #3]
 800a908:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	785b      	ldrb	r3, [r3, #1]
 800a90e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a910:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800a912:	68ba      	ldr	r2, [r7, #8]
 800a914:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a916:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	781b      	ldrb	r3, [r3, #0]
 800a91c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a91e:	4313      	orrs	r3, r2
 800a920:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	22ca      	movs	r2, #202	@ 0xca
 800a928:	625a      	str	r2, [r3, #36]	@ 0x24
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	2253      	movs	r2, #83	@ 0x53
 800a930:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a932:	68f8      	ldr	r0, [r7, #12]
 800a934:	f000 f898 	bl	800aa68 <RTC_EnterInitMode>
 800a938:	4603      	mov	r3, r0
 800a93a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800a93c:	7cfb      	ldrb	r3, [r7, #19]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d10c      	bne.n	800a95c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681a      	ldr	r2, [r3, #0]
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a94c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a950:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a952:	68f8      	ldr	r0, [r7, #12]
 800a954:	f000 f8bf 	bl	800aad6 <RTC_ExitInitMode>
 800a958:	4603      	mov	r3, r0
 800a95a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800a95c:	7cfb      	ldrb	r3, [r7, #19]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d102      	bne.n	800a968 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2201      	movs	r2, #1
 800a966:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	22ff      	movs	r2, #255	@ 0xff
 800a96e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2200      	movs	r2, #0
 800a974:	771a      	strb	r2, [r3, #28]

  return status;
 800a976:	7cfb      	ldrb	r3, [r7, #19]
}
 800a978:	4618      	mov	r0, r3
 800a97a:	371c      	adds	r7, #28
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd90      	pop	{r4, r7, pc}

0800a980 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b086      	sub	sp, #24
 800a984:	af00      	add	r7, sp, #0
 800a986:	60f8      	str	r0, [r7, #12]
 800a988:	60b9      	str	r1, [r7, #8]
 800a98a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a98c:	2300      	movs	r3, #0
 800a98e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	685b      	ldr	r3, [r3, #4]
 800a996:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a99a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a99e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	0c1b      	lsrs	r3, r3, #16
 800a9a4:	b2da      	uxtb	r2, r3
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	0a1b      	lsrs	r3, r3, #8
 800a9ae:	b2db      	uxtb	r3, r3
 800a9b0:	f003 031f 	and.w	r3, r3, #31
 800a9b4:	b2da      	uxtb	r2, r3
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a9c2:	b2da      	uxtb	r2, r3
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	0b5b      	lsrs	r3, r3, #13
 800a9cc:	b2db      	uxtb	r3, r3
 800a9ce:	f003 0307 	and.w	r3, r3, #7
 800a9d2:	b2da      	uxtb	r2, r3
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d11a      	bne.n	800aa14 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	78db      	ldrb	r3, [r3, #3]
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f000 f8b2 	bl	800ab4c <RTC_Bcd2ToByte>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	785b      	ldrb	r3, [r3, #1]
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f000 f8a9 	bl	800ab4c <RTC_Bcd2ToByte>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	789b      	ldrb	r3, [r3, #2]
 800aa06:	4618      	mov	r0, r3
 800aa08:	f000 f8a0 	bl	800ab4c <RTC_Bcd2ToByte>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	461a      	mov	r2, r3
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800aa14:	2300      	movs	r3, #0
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3718      	adds	r7, #24
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}

0800aa1e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800aa1e:	b580      	push	{r7, lr}
 800aa20:	b084      	sub	sp, #16
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800aa26:	2300      	movs	r3, #0
 800aa28:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f643 7257 	movw	r2, #16215	@ 0x3f57
 800aa32:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800aa34:	f7fb fd88 	bl	8006548 <HAL_GetTick>
 800aa38:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800aa3a:	e009      	b.n	800aa50 <HAL_RTC_WaitForSynchro+0x32>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800aa3c:	f7fb fd84 	bl	8006548 <HAL_GetTick>
 800aa40:	4602      	mov	r2, r0
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	1ad3      	subs	r3, r2, r3
 800aa46:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800aa4a:	d901      	bls.n	800aa50 <HAL_RTC_WaitForSynchro+0x32>
    {
      return HAL_TIMEOUT;
 800aa4c:	2303      	movs	r3, #3
 800aa4e:	e007      	b.n	800aa60 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	68db      	ldr	r3, [r3, #12]
 800aa56:	f003 0320 	and.w	r3, r3, #32
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d0ee      	beq.n	800aa3c <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 800aa5e:	2300      	movs	r3, #0
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3710      	adds	r7, #16
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b084      	sub	sp, #16
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800aa70:	2300      	movs	r3, #0
 800aa72:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800aa74:	2300      	movs	r3, #0
 800aa76:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	68db      	ldr	r3, [r3, #12]
 800aa7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d122      	bne.n	800aacc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	68da      	ldr	r2, [r3, #12]
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800aa94:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800aa96:	f7fb fd57 	bl	8006548 <HAL_GetTick>
 800aa9a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800aa9c:	e00c      	b.n	800aab8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800aa9e:	f7fb fd53 	bl	8006548 <HAL_GetTick>
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	1ad3      	subs	r3, r2, r3
 800aaa8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800aaac:	d904      	bls.n	800aab8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2204      	movs	r2, #4
 800aab2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800aab4:	2301      	movs	r3, #1
 800aab6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	68db      	ldr	r3, [r3, #12]
 800aabe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d102      	bne.n	800aacc <RTC_EnterInitMode+0x64>
 800aac6:	7bfb      	ldrb	r3, [r7, #15]
 800aac8:	2b01      	cmp	r3, #1
 800aaca:	d1e8      	bne.n	800aa9e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800aacc:	7bfb      	ldrb	r3, [r7, #15]
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3710      	adds	r7, #16
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}

0800aad6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800aad6:	b580      	push	{r7, lr}
 800aad8:	b084      	sub	sp, #16
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aade:	2300      	movs	r3, #0
 800aae0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	68da      	ldr	r2, [r3, #12]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800aaf0:	60da      	str	r2, [r3, #12]

  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f7ff ff93 	bl	800aa1e <HAL_RTC_WaitForSynchro>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d004      	beq.n	800ab08 <RTC_ExitInitMode+0x32>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2204      	movs	r2, #4
 800ab02:	775a      	strb	r2, [r3, #29]
    status = HAL_ERROR;
 800ab04:	2301      	movs	r3, #1
 800ab06:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ab08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3710      	adds	r7, #16
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}

0800ab12 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800ab12:	b480      	push	{r7}
 800ab14:	b085      	sub	sp, #20
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	4603      	mov	r3, r0
 800ab1a:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800ab20:	e005      	b.n	800ab2e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	3301      	adds	r3, #1
 800ab26:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800ab28:	79fb      	ldrb	r3, [r7, #7]
 800ab2a:	3b0a      	subs	r3, #10
 800ab2c:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800ab2e:	79fb      	ldrb	r3, [r7, #7]
 800ab30:	2b09      	cmp	r3, #9
 800ab32:	d8f6      	bhi.n	800ab22 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	b2db      	uxtb	r3, r3
 800ab38:	011b      	lsls	r3, r3, #4
 800ab3a:	b2da      	uxtb	r2, r3
 800ab3c:	79fb      	ldrb	r3, [r7, #7]
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	b2db      	uxtb	r3, r3
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3714      	adds	r7, #20
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bc80      	pop	{r7}
 800ab4a:	4770      	bx	lr

0800ab4c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b085      	sub	sp, #20
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	4603      	mov	r3, r0
 800ab54:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800ab56:	2300      	movs	r3, #0
 800ab58:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800ab5a:	79fb      	ldrb	r3, [r7, #7]
 800ab5c:	091b      	lsrs	r3, r3, #4
 800ab5e:	b2db      	uxtb	r3, r3
 800ab60:	461a      	mov	r2, r3
 800ab62:	4613      	mov	r3, r2
 800ab64:	009b      	lsls	r3, r3, #2
 800ab66:	4413      	add	r3, r2
 800ab68:	005b      	lsls	r3, r3, #1
 800ab6a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	b2da      	uxtb	r2, r3
 800ab70:	79fb      	ldrb	r3, [r7, #7]
 800ab72:	f003 030f 	and.w	r3, r3, #15
 800ab76:	b2db      	uxtb	r3, r3
 800ab78:	4413      	add	r3, r2
 800ab7a:	b2db      	uxtb	r3, r3
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3714      	adds	r7, #20
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bc80      	pop	{r7}
 800ab84:	4770      	bx	lr

0800ab86 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800ab86:	b480      	push	{r7}
 800ab88:	b087      	sub	sp, #28
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	60f8      	str	r0, [r7, #12]
 800ab8e:	60b9      	str	r1, [r7, #8]
 800ab90:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800ab92:	2300      	movs	r3, #0
 800ab94:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	3350      	adds	r3, #80	@ 0x50
 800ab9c:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	009b      	lsls	r3, r3, #2
 800aba2:	697a      	ldr	r2, [r7, #20]
 800aba4:	4413      	add	r3, r2
 800aba6:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	687a      	ldr	r2, [r7, #4]
 800abac:	601a      	str	r2, [r3, #0]
}
 800abae:	bf00      	nop
 800abb0:	371c      	adds	r7, #28
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bc80      	pop	{r7}
 800abb6:	4770      	bx	lr

0800abb8 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800abb8:	b480      	push	{r7}
 800abba:	b085      	sub	sp, #20
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800abc2:	2300      	movs	r3, #0
 800abc4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	3350      	adds	r3, #80	@ 0x50
 800abcc:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	009b      	lsls	r3, r3, #2
 800abd2:	68fa      	ldr	r2, [r7, #12]
 800abd4:	4413      	add	r3, r2
 800abd6:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3714      	adds	r7, #20
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bc80      	pop	{r7}
 800abe4:	4770      	bx	lr

0800abe6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800abe6:	b580      	push	{r7, lr}
 800abe8:	b082      	sub	sp, #8
 800abea:	af00      	add	r7, sp, #0
 800abec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d101      	bne.n	800abf8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800abf4:	2301      	movs	r3, #1
 800abf6:	e041      	b.n	800ac7c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800abfe:	b2db      	uxtb	r3, r3
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d106      	bne.n	800ac12 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2200      	movs	r2, #0
 800ac08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f7f8 ff91 	bl	8003b34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2202      	movs	r2, #2
 800ac16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681a      	ldr	r2, [r3, #0]
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	3304      	adds	r3, #4
 800ac22:	4619      	mov	r1, r3
 800ac24:	4610      	mov	r0, r2
 800ac26:	f000 f95b 	bl	800aee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2201      	movs	r2, #1
 800ac2e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2201      	movs	r2, #1
 800ac36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2201      	movs	r2, #1
 800ac46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2201      	movs	r2, #1
 800ac56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2201      	movs	r2, #1
 800ac5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2201      	movs	r2, #1
 800ac66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2201      	movs	r2, #1
 800ac76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ac7a:	2300      	movs	r3, #0
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3708      	adds	r7, #8
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}

0800ac84 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b085      	sub	sp, #20
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ac92:	b2db      	uxtb	r3, r3
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	d001      	beq.n	800ac9c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ac98:	2301      	movs	r3, #1
 800ac9a:	e046      	b.n	800ad2a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2202      	movs	r2, #2
 800aca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4a22      	ldr	r2, [pc, #136]	@ (800ad34 <HAL_TIM_Base_Start+0xb0>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d022      	beq.n	800acf4 <HAL_TIM_Base_Start+0x70>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acb6:	d01d      	beq.n	800acf4 <HAL_TIM_Base_Start+0x70>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4a1e      	ldr	r2, [pc, #120]	@ (800ad38 <HAL_TIM_Base_Start+0xb4>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d018      	beq.n	800acf4 <HAL_TIM_Base_Start+0x70>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	4a1d      	ldr	r2, [pc, #116]	@ (800ad3c <HAL_TIM_Base_Start+0xb8>)
 800acc8:	4293      	cmp	r3, r2
 800acca:	d013      	beq.n	800acf4 <HAL_TIM_Base_Start+0x70>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4a1b      	ldr	r2, [pc, #108]	@ (800ad40 <HAL_TIM_Base_Start+0xbc>)
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d00e      	beq.n	800acf4 <HAL_TIM_Base_Start+0x70>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4a1a      	ldr	r2, [pc, #104]	@ (800ad44 <HAL_TIM_Base_Start+0xc0>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d009      	beq.n	800acf4 <HAL_TIM_Base_Start+0x70>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4a18      	ldr	r2, [pc, #96]	@ (800ad48 <HAL_TIM_Base_Start+0xc4>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d004      	beq.n	800acf4 <HAL_TIM_Base_Start+0x70>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	4a17      	ldr	r2, [pc, #92]	@ (800ad4c <HAL_TIM_Base_Start+0xc8>)
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d111      	bne.n	800ad18 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	689b      	ldr	r3, [r3, #8]
 800acfa:	f003 0307 	and.w	r3, r3, #7
 800acfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2b06      	cmp	r3, #6
 800ad04:	d010      	beq.n	800ad28 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	681a      	ldr	r2, [r3, #0]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f042 0201 	orr.w	r2, r2, #1
 800ad14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad16:	e007      	b.n	800ad28 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	681a      	ldr	r2, [r3, #0]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f042 0201 	orr.w	r2, r2, #1
 800ad26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ad28:	2300      	movs	r3, #0
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3714      	adds	r7, #20
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bc80      	pop	{r7}
 800ad32:	4770      	bx	lr
 800ad34:	40010000 	.word	0x40010000
 800ad38:	40000400 	.word	0x40000400
 800ad3c:	40000800 	.word	0x40000800
 800ad40:	40000c00 	.word	0x40000c00
 800ad44:	40010400 	.word	0x40010400
 800ad48:	40014000 	.word	0x40014000
 800ad4c:	40001800 	.word	0x40001800

0800ad50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ad64:	2b01      	cmp	r3, #1
 800ad66:	d101      	bne.n	800ad6c <HAL_TIM_ConfigClockSource+0x1c>
 800ad68:	2302      	movs	r3, #2
 800ad6a:	e0b4      	b.n	800aed6 <HAL_TIM_ConfigClockSource+0x186>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2201      	movs	r2, #1
 800ad70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2202      	movs	r2, #2
 800ad78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	689b      	ldr	r3, [r3, #8]
 800ad82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800ad8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ad92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	68ba      	ldr	r2, [r7, #8]
 800ad9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ada4:	d03e      	beq.n	800ae24 <HAL_TIM_ConfigClockSource+0xd4>
 800ada6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800adaa:	f200 8087 	bhi.w	800aebc <HAL_TIM_ConfigClockSource+0x16c>
 800adae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800adb2:	f000 8086 	beq.w	800aec2 <HAL_TIM_ConfigClockSource+0x172>
 800adb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800adba:	d87f      	bhi.n	800aebc <HAL_TIM_ConfigClockSource+0x16c>
 800adbc:	2b70      	cmp	r3, #112	@ 0x70
 800adbe:	d01a      	beq.n	800adf6 <HAL_TIM_ConfigClockSource+0xa6>
 800adc0:	2b70      	cmp	r3, #112	@ 0x70
 800adc2:	d87b      	bhi.n	800aebc <HAL_TIM_ConfigClockSource+0x16c>
 800adc4:	2b60      	cmp	r3, #96	@ 0x60
 800adc6:	d050      	beq.n	800ae6a <HAL_TIM_ConfigClockSource+0x11a>
 800adc8:	2b60      	cmp	r3, #96	@ 0x60
 800adca:	d877      	bhi.n	800aebc <HAL_TIM_ConfigClockSource+0x16c>
 800adcc:	2b50      	cmp	r3, #80	@ 0x50
 800adce:	d03c      	beq.n	800ae4a <HAL_TIM_ConfigClockSource+0xfa>
 800add0:	2b50      	cmp	r3, #80	@ 0x50
 800add2:	d873      	bhi.n	800aebc <HAL_TIM_ConfigClockSource+0x16c>
 800add4:	2b40      	cmp	r3, #64	@ 0x40
 800add6:	d058      	beq.n	800ae8a <HAL_TIM_ConfigClockSource+0x13a>
 800add8:	2b40      	cmp	r3, #64	@ 0x40
 800adda:	d86f      	bhi.n	800aebc <HAL_TIM_ConfigClockSource+0x16c>
 800addc:	2b30      	cmp	r3, #48	@ 0x30
 800adde:	d064      	beq.n	800aeaa <HAL_TIM_ConfigClockSource+0x15a>
 800ade0:	2b30      	cmp	r3, #48	@ 0x30
 800ade2:	d86b      	bhi.n	800aebc <HAL_TIM_ConfigClockSource+0x16c>
 800ade4:	2b20      	cmp	r3, #32
 800ade6:	d060      	beq.n	800aeaa <HAL_TIM_ConfigClockSource+0x15a>
 800ade8:	2b20      	cmp	r3, #32
 800adea:	d867      	bhi.n	800aebc <HAL_TIM_ConfigClockSource+0x16c>
 800adec:	2b00      	cmp	r3, #0
 800adee:	d05c      	beq.n	800aeaa <HAL_TIM_ConfigClockSource+0x15a>
 800adf0:	2b10      	cmp	r3, #16
 800adf2:	d05a      	beq.n	800aeaa <HAL_TIM_ConfigClockSource+0x15a>
 800adf4:	e062      	b.n	800aebc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ae06:	f000 f98c 	bl	800b122 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	689b      	ldr	r3, [r3, #8]
 800ae10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ae18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	68ba      	ldr	r2, [r7, #8]
 800ae20:	609a      	str	r2, [r3, #8]
      break;
 800ae22:	e04f      	b.n	800aec4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ae34:	f000 f975 	bl	800b122 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	689a      	ldr	r2, [r3, #8]
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ae46:	609a      	str	r2, [r3, #8]
      break;
 800ae48:	e03c      	b.n	800aec4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae56:	461a      	mov	r2, r3
 800ae58:	f000 f8ec 	bl	800b034 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	2150      	movs	r1, #80	@ 0x50
 800ae62:	4618      	mov	r0, r3
 800ae64:	f000 f943 	bl	800b0ee <TIM_ITRx_SetConfig>
      break;
 800ae68:	e02c      	b.n	800aec4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ae76:	461a      	mov	r2, r3
 800ae78:	f000 f90a 	bl	800b090 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	2160      	movs	r1, #96	@ 0x60
 800ae82:	4618      	mov	r0, r3
 800ae84:	f000 f933 	bl	800b0ee <TIM_ITRx_SetConfig>
      break;
 800ae88:	e01c      	b.n	800aec4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae96:	461a      	mov	r2, r3
 800ae98:	f000 f8cc 	bl	800b034 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	2140      	movs	r1, #64	@ 0x40
 800aea2:	4618      	mov	r0, r3
 800aea4:	f000 f923 	bl	800b0ee <TIM_ITRx_SetConfig>
      break;
 800aea8:	e00c      	b.n	800aec4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681a      	ldr	r2, [r3, #0]
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	4619      	mov	r1, r3
 800aeb4:	4610      	mov	r0, r2
 800aeb6:	f000 f91a 	bl	800b0ee <TIM_ITRx_SetConfig>
      break;
 800aeba:	e003      	b.n	800aec4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800aebc:	2301      	movs	r3, #1
 800aebe:	73fb      	strb	r3, [r7, #15]
      break;
 800aec0:	e000      	b.n	800aec4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800aec2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2201      	movs	r2, #1
 800aec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2200      	movs	r2, #0
 800aed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aed4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3710      	adds	r7, #16
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
	...

0800aee0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b085      	sub	sp, #20
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	4a45      	ldr	r2, [pc, #276]	@ (800b008 <TIM_Base_SetConfig+0x128>)
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d013      	beq.n	800af20 <TIM_Base_SetConfig+0x40>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aefe:	d00f      	beq.n	800af20 <TIM_Base_SetConfig+0x40>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	4a42      	ldr	r2, [pc, #264]	@ (800b00c <TIM_Base_SetConfig+0x12c>)
 800af04:	4293      	cmp	r3, r2
 800af06:	d00b      	beq.n	800af20 <TIM_Base_SetConfig+0x40>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	4a41      	ldr	r2, [pc, #260]	@ (800b010 <TIM_Base_SetConfig+0x130>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d007      	beq.n	800af20 <TIM_Base_SetConfig+0x40>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	4a40      	ldr	r2, [pc, #256]	@ (800b014 <TIM_Base_SetConfig+0x134>)
 800af14:	4293      	cmp	r3, r2
 800af16:	d003      	beq.n	800af20 <TIM_Base_SetConfig+0x40>
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	4a3f      	ldr	r2, [pc, #252]	@ (800b018 <TIM_Base_SetConfig+0x138>)
 800af1c:	4293      	cmp	r3, r2
 800af1e:	d108      	bne.n	800af32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	685b      	ldr	r3, [r3, #4]
 800af2c:	68fa      	ldr	r2, [r7, #12]
 800af2e:	4313      	orrs	r3, r2
 800af30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	4a34      	ldr	r2, [pc, #208]	@ (800b008 <TIM_Base_SetConfig+0x128>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d02b      	beq.n	800af92 <TIM_Base_SetConfig+0xb2>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af40:	d027      	beq.n	800af92 <TIM_Base_SetConfig+0xb2>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	4a31      	ldr	r2, [pc, #196]	@ (800b00c <TIM_Base_SetConfig+0x12c>)
 800af46:	4293      	cmp	r3, r2
 800af48:	d023      	beq.n	800af92 <TIM_Base_SetConfig+0xb2>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	4a30      	ldr	r2, [pc, #192]	@ (800b010 <TIM_Base_SetConfig+0x130>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	d01f      	beq.n	800af92 <TIM_Base_SetConfig+0xb2>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	4a2f      	ldr	r2, [pc, #188]	@ (800b014 <TIM_Base_SetConfig+0x134>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d01b      	beq.n	800af92 <TIM_Base_SetConfig+0xb2>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	4a2e      	ldr	r2, [pc, #184]	@ (800b018 <TIM_Base_SetConfig+0x138>)
 800af5e:	4293      	cmp	r3, r2
 800af60:	d017      	beq.n	800af92 <TIM_Base_SetConfig+0xb2>
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	4a2d      	ldr	r2, [pc, #180]	@ (800b01c <TIM_Base_SetConfig+0x13c>)
 800af66:	4293      	cmp	r3, r2
 800af68:	d013      	beq.n	800af92 <TIM_Base_SetConfig+0xb2>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	4a2c      	ldr	r2, [pc, #176]	@ (800b020 <TIM_Base_SetConfig+0x140>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d00f      	beq.n	800af92 <TIM_Base_SetConfig+0xb2>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	4a2b      	ldr	r2, [pc, #172]	@ (800b024 <TIM_Base_SetConfig+0x144>)
 800af76:	4293      	cmp	r3, r2
 800af78:	d00b      	beq.n	800af92 <TIM_Base_SetConfig+0xb2>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	4a2a      	ldr	r2, [pc, #168]	@ (800b028 <TIM_Base_SetConfig+0x148>)
 800af7e:	4293      	cmp	r3, r2
 800af80:	d007      	beq.n	800af92 <TIM_Base_SetConfig+0xb2>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	4a29      	ldr	r2, [pc, #164]	@ (800b02c <TIM_Base_SetConfig+0x14c>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d003      	beq.n	800af92 <TIM_Base_SetConfig+0xb2>
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	4a28      	ldr	r2, [pc, #160]	@ (800b030 <TIM_Base_SetConfig+0x150>)
 800af8e:	4293      	cmp	r3, r2
 800af90:	d108      	bne.n	800afa4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800af98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	68db      	ldr	r3, [r3, #12]
 800af9e:	68fa      	ldr	r2, [r7, #12]
 800afa0:	4313      	orrs	r3, r2
 800afa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	695b      	ldr	r3, [r3, #20]
 800afae:	4313      	orrs	r3, r2
 800afb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	68fa      	ldr	r2, [r7, #12]
 800afb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	689a      	ldr	r2, [r3, #8]
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	681a      	ldr	r2, [r3, #0]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	4a0f      	ldr	r2, [pc, #60]	@ (800b008 <TIM_Base_SetConfig+0x128>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d003      	beq.n	800afd8 <TIM_Base_SetConfig+0xf8>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	4a11      	ldr	r2, [pc, #68]	@ (800b018 <TIM_Base_SetConfig+0x138>)
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d103      	bne.n	800afe0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	691a      	ldr	r2, [r3, #16]
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2201      	movs	r2, #1
 800afe4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	691b      	ldr	r3, [r3, #16]
 800afea:	f003 0301 	and.w	r3, r3, #1
 800afee:	2b01      	cmp	r3, #1
 800aff0:	d105      	bne.n	800affe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	691b      	ldr	r3, [r3, #16]
 800aff6:	f023 0201 	bic.w	r2, r3, #1
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	611a      	str	r2, [r3, #16]
  }
}
 800affe:	bf00      	nop
 800b000:	3714      	adds	r7, #20
 800b002:	46bd      	mov	sp, r7
 800b004:	bc80      	pop	{r7}
 800b006:	4770      	bx	lr
 800b008:	40010000 	.word	0x40010000
 800b00c:	40000400 	.word	0x40000400
 800b010:	40000800 	.word	0x40000800
 800b014:	40000c00 	.word	0x40000c00
 800b018:	40010400 	.word	0x40010400
 800b01c:	40014000 	.word	0x40014000
 800b020:	40014400 	.word	0x40014400
 800b024:	40014800 	.word	0x40014800
 800b028:	40001800 	.word	0x40001800
 800b02c:	40001c00 	.word	0x40001c00
 800b030:	40002000 	.word	0x40002000

0800b034 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b034:	b480      	push	{r7}
 800b036:	b087      	sub	sp, #28
 800b038:	af00      	add	r7, sp, #0
 800b03a:	60f8      	str	r0, [r7, #12]
 800b03c:	60b9      	str	r1, [r7, #8]
 800b03e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	6a1b      	ldr	r3, [r3, #32]
 800b044:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	6a1b      	ldr	r3, [r3, #32]
 800b04a:	f023 0201 	bic.w	r2, r3, #1
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	699b      	ldr	r3, [r3, #24]
 800b056:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b05e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	011b      	lsls	r3, r3, #4
 800b064:	693a      	ldr	r2, [r7, #16]
 800b066:	4313      	orrs	r3, r2
 800b068:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	f023 030a 	bic.w	r3, r3, #10
 800b070:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b072:	697a      	ldr	r2, [r7, #20]
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	4313      	orrs	r3, r2
 800b078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	693a      	ldr	r2, [r7, #16]
 800b07e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	697a      	ldr	r2, [r7, #20]
 800b084:	621a      	str	r2, [r3, #32]
}
 800b086:	bf00      	nop
 800b088:	371c      	adds	r7, #28
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bc80      	pop	{r7}
 800b08e:	4770      	bx	lr

0800b090 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b090:	b480      	push	{r7}
 800b092:	b087      	sub	sp, #28
 800b094:	af00      	add	r7, sp, #0
 800b096:	60f8      	str	r0, [r7, #12]
 800b098:	60b9      	str	r1, [r7, #8]
 800b09a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	6a1b      	ldr	r3, [r3, #32]
 800b0a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	6a1b      	ldr	r3, [r3, #32]
 800b0a6:	f023 0210 	bic.w	r2, r3, #16
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	699b      	ldr	r3, [r3, #24]
 800b0b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b0ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	031b      	lsls	r3, r3, #12
 800b0c0:	693a      	ldr	r2, [r7, #16]
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b0cc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	011b      	lsls	r3, r3, #4
 800b0d2:	697a      	ldr	r2, [r7, #20]
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	693a      	ldr	r2, [r7, #16]
 800b0dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	697a      	ldr	r2, [r7, #20]
 800b0e2:	621a      	str	r2, [r3, #32]
}
 800b0e4:	bf00      	nop
 800b0e6:	371c      	adds	r7, #28
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bc80      	pop	{r7}
 800b0ec:	4770      	bx	lr

0800b0ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b0ee:	b480      	push	{r7}
 800b0f0:	b085      	sub	sp, #20
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	6078      	str	r0, [r7, #4]
 800b0f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	689b      	ldr	r3, [r3, #8]
 800b0fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b104:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b106:	683a      	ldr	r2, [r7, #0]
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	4313      	orrs	r3, r2
 800b10c:	f043 0307 	orr.w	r3, r3, #7
 800b110:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	68fa      	ldr	r2, [r7, #12]
 800b116:	609a      	str	r2, [r3, #8]
}
 800b118:	bf00      	nop
 800b11a:	3714      	adds	r7, #20
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bc80      	pop	{r7}
 800b120:	4770      	bx	lr

0800b122 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b122:	b480      	push	{r7}
 800b124:	b087      	sub	sp, #28
 800b126:	af00      	add	r7, sp, #0
 800b128:	60f8      	str	r0, [r7, #12]
 800b12a:	60b9      	str	r1, [r7, #8]
 800b12c:	607a      	str	r2, [r7, #4]
 800b12e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	689b      	ldr	r3, [r3, #8]
 800b134:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b13c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	021a      	lsls	r2, r3, #8
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	431a      	orrs	r2, r3
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	4313      	orrs	r3, r2
 800b14a:	697a      	ldr	r2, [r7, #20]
 800b14c:	4313      	orrs	r3, r2
 800b14e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	697a      	ldr	r2, [r7, #20]
 800b154:	609a      	str	r2, [r3, #8]
}
 800b156:	bf00      	nop
 800b158:	371c      	adds	r7, #28
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bc80      	pop	{r7}
 800b15e:	4770      	bx	lr

0800b160 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b160:	b480      	push	{r7}
 800b162:	b085      	sub	sp, #20
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
 800b168:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b170:	2b01      	cmp	r3, #1
 800b172:	d101      	bne.n	800b178 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b174:	2302      	movs	r3, #2
 800b176:	e05a      	b.n	800b22e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2201      	movs	r2, #1
 800b17c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2202      	movs	r2, #2
 800b184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	685b      	ldr	r3, [r3, #4]
 800b18e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	689b      	ldr	r3, [r3, #8]
 800b196:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b19e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	68fa      	ldr	r2, [r7, #12]
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	68fa      	ldr	r2, [r7, #12]
 800b1b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	4a20      	ldr	r2, [pc, #128]	@ (800b238 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d022      	beq.n	800b202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1c4:	d01d      	beq.n	800b202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	4a1c      	ldr	r2, [pc, #112]	@ (800b23c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d018      	beq.n	800b202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	4a1a      	ldr	r2, [pc, #104]	@ (800b240 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d013      	beq.n	800b202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	4a19      	ldr	r2, [pc, #100]	@ (800b244 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d00e      	beq.n	800b202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	4a17      	ldr	r2, [pc, #92]	@ (800b248 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d009      	beq.n	800b202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	4a16      	ldr	r2, [pc, #88]	@ (800b24c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d004      	beq.n	800b202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4a14      	ldr	r2, [pc, #80]	@ (800b250 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d10c      	bne.n	800b21c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b208:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	685b      	ldr	r3, [r3, #4]
 800b20e:	68ba      	ldr	r2, [r7, #8]
 800b210:	4313      	orrs	r3, r2
 800b212:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	68ba      	ldr	r2, [r7, #8]
 800b21a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2201      	movs	r2, #1
 800b220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2200      	movs	r2, #0
 800b228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b22c:	2300      	movs	r3, #0
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3714      	adds	r7, #20
 800b232:	46bd      	mov	sp, r7
 800b234:	bc80      	pop	{r7}
 800b236:	4770      	bx	lr
 800b238:	40010000 	.word	0x40010000
 800b23c:	40000400 	.word	0x40000400
 800b240:	40000800 	.word	0x40000800
 800b244:	40000c00 	.word	0x40000c00
 800b248:	40010400 	.word	0x40010400
 800b24c:	40014000 	.word	0x40014000
 800b250:	40001800 	.word	0x40001800

0800b254 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b084      	sub	sp, #16
 800b258:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800b25a:	4b87      	ldr	r3, [pc, #540]	@ (800b478 <MX_LWIP_Init+0x224>)
 800b25c:	22c0      	movs	r2, #192	@ 0xc0
 800b25e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800b260:	4b85      	ldr	r3, [pc, #532]	@ (800b478 <MX_LWIP_Init+0x224>)
 800b262:	22a8      	movs	r2, #168	@ 0xa8
 800b264:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800b266:	4b84      	ldr	r3, [pc, #528]	@ (800b478 <MX_LWIP_Init+0x224>)
 800b268:	2201      	movs	r2, #1
 800b26a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 178;
 800b26c:	4b82      	ldr	r3, [pc, #520]	@ (800b478 <MX_LWIP_Init+0x224>)
 800b26e:	22b2      	movs	r2, #178	@ 0xb2
 800b270:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800b272:	4b82      	ldr	r3, [pc, #520]	@ (800b47c <MX_LWIP_Init+0x228>)
 800b274:	22ff      	movs	r2, #255	@ 0xff
 800b276:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800b278:	4b80      	ldr	r3, [pc, #512]	@ (800b47c <MX_LWIP_Init+0x228>)
 800b27a:	22ff      	movs	r2, #255	@ 0xff
 800b27c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800b27e:	4b7f      	ldr	r3, [pc, #508]	@ (800b47c <MX_LWIP_Init+0x228>)
 800b280:	22ff      	movs	r2, #255	@ 0xff
 800b282:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800b284:	4b7d      	ldr	r3, [pc, #500]	@ (800b47c <MX_LWIP_Init+0x228>)
 800b286:	2200      	movs	r2, #0
 800b288:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800b28a:	4b7d      	ldr	r3, [pc, #500]	@ (800b480 <MX_LWIP_Init+0x22c>)
 800b28c:	22c0      	movs	r2, #192	@ 0xc0
 800b28e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800b290:	4b7b      	ldr	r3, [pc, #492]	@ (800b480 <MX_LWIP_Init+0x22c>)
 800b292:	22a8      	movs	r2, #168	@ 0xa8
 800b294:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800b296:	4b7a      	ldr	r3, [pc, #488]	@ (800b480 <MX_LWIP_Init+0x22c>)
 800b298:	2201      	movs	r2, #1
 800b29a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800b29c:	4b78      	ldr	r3, [pc, #480]	@ (800b480 <MX_LWIP_Init+0x22c>)
 800b29e:	2201      	movs	r2, #1
 800b2a0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 800b2a2:	f009 fb35 	bl	8014910 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800b2a6:	4b74      	ldr	r3, [pc, #464]	@ (800b478 <MX_LWIP_Init+0x224>)
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	061a      	lsls	r2, r3, #24
 800b2ac:	4b72      	ldr	r3, [pc, #456]	@ (800b478 <MX_LWIP_Init+0x224>)
 800b2ae:	785b      	ldrb	r3, [r3, #1]
 800b2b0:	041b      	lsls	r3, r3, #16
 800b2b2:	431a      	orrs	r2, r3
 800b2b4:	4b70      	ldr	r3, [pc, #448]	@ (800b478 <MX_LWIP_Init+0x224>)
 800b2b6:	789b      	ldrb	r3, [r3, #2]
 800b2b8:	021b      	lsls	r3, r3, #8
 800b2ba:	4313      	orrs	r3, r2
 800b2bc:	4a6e      	ldr	r2, [pc, #440]	@ (800b478 <MX_LWIP_Init+0x224>)
 800b2be:	78d2      	ldrb	r2, [r2, #3]
 800b2c0:	4313      	orrs	r3, r2
 800b2c2:	061a      	lsls	r2, r3, #24
 800b2c4:	4b6c      	ldr	r3, [pc, #432]	@ (800b478 <MX_LWIP_Init+0x224>)
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	0619      	lsls	r1, r3, #24
 800b2ca:	4b6b      	ldr	r3, [pc, #428]	@ (800b478 <MX_LWIP_Init+0x224>)
 800b2cc:	785b      	ldrb	r3, [r3, #1]
 800b2ce:	041b      	lsls	r3, r3, #16
 800b2d0:	4319      	orrs	r1, r3
 800b2d2:	4b69      	ldr	r3, [pc, #420]	@ (800b478 <MX_LWIP_Init+0x224>)
 800b2d4:	789b      	ldrb	r3, [r3, #2]
 800b2d6:	021b      	lsls	r3, r3, #8
 800b2d8:	430b      	orrs	r3, r1
 800b2da:	4967      	ldr	r1, [pc, #412]	@ (800b478 <MX_LWIP_Init+0x224>)
 800b2dc:	78c9      	ldrb	r1, [r1, #3]
 800b2de:	430b      	orrs	r3, r1
 800b2e0:	021b      	lsls	r3, r3, #8
 800b2e2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b2e6:	431a      	orrs	r2, r3
 800b2e8:	4b63      	ldr	r3, [pc, #396]	@ (800b478 <MX_LWIP_Init+0x224>)
 800b2ea:	781b      	ldrb	r3, [r3, #0]
 800b2ec:	0619      	lsls	r1, r3, #24
 800b2ee:	4b62      	ldr	r3, [pc, #392]	@ (800b478 <MX_LWIP_Init+0x224>)
 800b2f0:	785b      	ldrb	r3, [r3, #1]
 800b2f2:	041b      	lsls	r3, r3, #16
 800b2f4:	4319      	orrs	r1, r3
 800b2f6:	4b60      	ldr	r3, [pc, #384]	@ (800b478 <MX_LWIP_Init+0x224>)
 800b2f8:	789b      	ldrb	r3, [r3, #2]
 800b2fa:	021b      	lsls	r3, r3, #8
 800b2fc:	430b      	orrs	r3, r1
 800b2fe:	495e      	ldr	r1, [pc, #376]	@ (800b478 <MX_LWIP_Init+0x224>)
 800b300:	78c9      	ldrb	r1, [r1, #3]
 800b302:	430b      	orrs	r3, r1
 800b304:	0a1b      	lsrs	r3, r3, #8
 800b306:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b30a:	431a      	orrs	r2, r3
 800b30c:	4b5a      	ldr	r3, [pc, #360]	@ (800b478 <MX_LWIP_Init+0x224>)
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	0619      	lsls	r1, r3, #24
 800b312:	4b59      	ldr	r3, [pc, #356]	@ (800b478 <MX_LWIP_Init+0x224>)
 800b314:	785b      	ldrb	r3, [r3, #1]
 800b316:	041b      	lsls	r3, r3, #16
 800b318:	4319      	orrs	r1, r3
 800b31a:	4b57      	ldr	r3, [pc, #348]	@ (800b478 <MX_LWIP_Init+0x224>)
 800b31c:	789b      	ldrb	r3, [r3, #2]
 800b31e:	021b      	lsls	r3, r3, #8
 800b320:	430b      	orrs	r3, r1
 800b322:	4955      	ldr	r1, [pc, #340]	@ (800b478 <MX_LWIP_Init+0x224>)
 800b324:	78c9      	ldrb	r1, [r1, #3]
 800b326:	430b      	orrs	r3, r1
 800b328:	0e1b      	lsrs	r3, r3, #24
 800b32a:	4313      	orrs	r3, r2
 800b32c:	4a55      	ldr	r2, [pc, #340]	@ (800b484 <MX_LWIP_Init+0x230>)
 800b32e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800b330:	4b52      	ldr	r3, [pc, #328]	@ (800b47c <MX_LWIP_Init+0x228>)
 800b332:	781b      	ldrb	r3, [r3, #0]
 800b334:	061a      	lsls	r2, r3, #24
 800b336:	4b51      	ldr	r3, [pc, #324]	@ (800b47c <MX_LWIP_Init+0x228>)
 800b338:	785b      	ldrb	r3, [r3, #1]
 800b33a:	041b      	lsls	r3, r3, #16
 800b33c:	431a      	orrs	r2, r3
 800b33e:	4b4f      	ldr	r3, [pc, #316]	@ (800b47c <MX_LWIP_Init+0x228>)
 800b340:	789b      	ldrb	r3, [r3, #2]
 800b342:	021b      	lsls	r3, r3, #8
 800b344:	4313      	orrs	r3, r2
 800b346:	4a4d      	ldr	r2, [pc, #308]	@ (800b47c <MX_LWIP_Init+0x228>)
 800b348:	78d2      	ldrb	r2, [r2, #3]
 800b34a:	4313      	orrs	r3, r2
 800b34c:	061a      	lsls	r2, r3, #24
 800b34e:	4b4b      	ldr	r3, [pc, #300]	@ (800b47c <MX_LWIP_Init+0x228>)
 800b350:	781b      	ldrb	r3, [r3, #0]
 800b352:	0619      	lsls	r1, r3, #24
 800b354:	4b49      	ldr	r3, [pc, #292]	@ (800b47c <MX_LWIP_Init+0x228>)
 800b356:	785b      	ldrb	r3, [r3, #1]
 800b358:	041b      	lsls	r3, r3, #16
 800b35a:	4319      	orrs	r1, r3
 800b35c:	4b47      	ldr	r3, [pc, #284]	@ (800b47c <MX_LWIP_Init+0x228>)
 800b35e:	789b      	ldrb	r3, [r3, #2]
 800b360:	021b      	lsls	r3, r3, #8
 800b362:	430b      	orrs	r3, r1
 800b364:	4945      	ldr	r1, [pc, #276]	@ (800b47c <MX_LWIP_Init+0x228>)
 800b366:	78c9      	ldrb	r1, [r1, #3]
 800b368:	430b      	orrs	r3, r1
 800b36a:	021b      	lsls	r3, r3, #8
 800b36c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b370:	431a      	orrs	r2, r3
 800b372:	4b42      	ldr	r3, [pc, #264]	@ (800b47c <MX_LWIP_Init+0x228>)
 800b374:	781b      	ldrb	r3, [r3, #0]
 800b376:	0619      	lsls	r1, r3, #24
 800b378:	4b40      	ldr	r3, [pc, #256]	@ (800b47c <MX_LWIP_Init+0x228>)
 800b37a:	785b      	ldrb	r3, [r3, #1]
 800b37c:	041b      	lsls	r3, r3, #16
 800b37e:	4319      	orrs	r1, r3
 800b380:	4b3e      	ldr	r3, [pc, #248]	@ (800b47c <MX_LWIP_Init+0x228>)
 800b382:	789b      	ldrb	r3, [r3, #2]
 800b384:	021b      	lsls	r3, r3, #8
 800b386:	430b      	orrs	r3, r1
 800b388:	493c      	ldr	r1, [pc, #240]	@ (800b47c <MX_LWIP_Init+0x228>)
 800b38a:	78c9      	ldrb	r1, [r1, #3]
 800b38c:	430b      	orrs	r3, r1
 800b38e:	0a1b      	lsrs	r3, r3, #8
 800b390:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b394:	431a      	orrs	r2, r3
 800b396:	4b39      	ldr	r3, [pc, #228]	@ (800b47c <MX_LWIP_Init+0x228>)
 800b398:	781b      	ldrb	r3, [r3, #0]
 800b39a:	0619      	lsls	r1, r3, #24
 800b39c:	4b37      	ldr	r3, [pc, #220]	@ (800b47c <MX_LWIP_Init+0x228>)
 800b39e:	785b      	ldrb	r3, [r3, #1]
 800b3a0:	041b      	lsls	r3, r3, #16
 800b3a2:	4319      	orrs	r1, r3
 800b3a4:	4b35      	ldr	r3, [pc, #212]	@ (800b47c <MX_LWIP_Init+0x228>)
 800b3a6:	789b      	ldrb	r3, [r3, #2]
 800b3a8:	021b      	lsls	r3, r3, #8
 800b3aa:	430b      	orrs	r3, r1
 800b3ac:	4933      	ldr	r1, [pc, #204]	@ (800b47c <MX_LWIP_Init+0x228>)
 800b3ae:	78c9      	ldrb	r1, [r1, #3]
 800b3b0:	430b      	orrs	r3, r1
 800b3b2:	0e1b      	lsrs	r3, r3, #24
 800b3b4:	4313      	orrs	r3, r2
 800b3b6:	4a34      	ldr	r2, [pc, #208]	@ (800b488 <MX_LWIP_Init+0x234>)
 800b3b8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800b3ba:	4b31      	ldr	r3, [pc, #196]	@ (800b480 <MX_LWIP_Init+0x22c>)
 800b3bc:	781b      	ldrb	r3, [r3, #0]
 800b3be:	061a      	lsls	r2, r3, #24
 800b3c0:	4b2f      	ldr	r3, [pc, #188]	@ (800b480 <MX_LWIP_Init+0x22c>)
 800b3c2:	785b      	ldrb	r3, [r3, #1]
 800b3c4:	041b      	lsls	r3, r3, #16
 800b3c6:	431a      	orrs	r2, r3
 800b3c8:	4b2d      	ldr	r3, [pc, #180]	@ (800b480 <MX_LWIP_Init+0x22c>)
 800b3ca:	789b      	ldrb	r3, [r3, #2]
 800b3cc:	021b      	lsls	r3, r3, #8
 800b3ce:	4313      	orrs	r3, r2
 800b3d0:	4a2b      	ldr	r2, [pc, #172]	@ (800b480 <MX_LWIP_Init+0x22c>)
 800b3d2:	78d2      	ldrb	r2, [r2, #3]
 800b3d4:	4313      	orrs	r3, r2
 800b3d6:	061a      	lsls	r2, r3, #24
 800b3d8:	4b29      	ldr	r3, [pc, #164]	@ (800b480 <MX_LWIP_Init+0x22c>)
 800b3da:	781b      	ldrb	r3, [r3, #0]
 800b3dc:	0619      	lsls	r1, r3, #24
 800b3de:	4b28      	ldr	r3, [pc, #160]	@ (800b480 <MX_LWIP_Init+0x22c>)
 800b3e0:	785b      	ldrb	r3, [r3, #1]
 800b3e2:	041b      	lsls	r3, r3, #16
 800b3e4:	4319      	orrs	r1, r3
 800b3e6:	4b26      	ldr	r3, [pc, #152]	@ (800b480 <MX_LWIP_Init+0x22c>)
 800b3e8:	789b      	ldrb	r3, [r3, #2]
 800b3ea:	021b      	lsls	r3, r3, #8
 800b3ec:	430b      	orrs	r3, r1
 800b3ee:	4924      	ldr	r1, [pc, #144]	@ (800b480 <MX_LWIP_Init+0x22c>)
 800b3f0:	78c9      	ldrb	r1, [r1, #3]
 800b3f2:	430b      	orrs	r3, r1
 800b3f4:	021b      	lsls	r3, r3, #8
 800b3f6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b3fa:	431a      	orrs	r2, r3
 800b3fc:	4b20      	ldr	r3, [pc, #128]	@ (800b480 <MX_LWIP_Init+0x22c>)
 800b3fe:	781b      	ldrb	r3, [r3, #0]
 800b400:	0619      	lsls	r1, r3, #24
 800b402:	4b1f      	ldr	r3, [pc, #124]	@ (800b480 <MX_LWIP_Init+0x22c>)
 800b404:	785b      	ldrb	r3, [r3, #1]
 800b406:	041b      	lsls	r3, r3, #16
 800b408:	4319      	orrs	r1, r3
 800b40a:	4b1d      	ldr	r3, [pc, #116]	@ (800b480 <MX_LWIP_Init+0x22c>)
 800b40c:	789b      	ldrb	r3, [r3, #2]
 800b40e:	021b      	lsls	r3, r3, #8
 800b410:	430b      	orrs	r3, r1
 800b412:	491b      	ldr	r1, [pc, #108]	@ (800b480 <MX_LWIP_Init+0x22c>)
 800b414:	78c9      	ldrb	r1, [r1, #3]
 800b416:	430b      	orrs	r3, r1
 800b418:	0a1b      	lsrs	r3, r3, #8
 800b41a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b41e:	431a      	orrs	r2, r3
 800b420:	4b17      	ldr	r3, [pc, #92]	@ (800b480 <MX_LWIP_Init+0x22c>)
 800b422:	781b      	ldrb	r3, [r3, #0]
 800b424:	0619      	lsls	r1, r3, #24
 800b426:	4b16      	ldr	r3, [pc, #88]	@ (800b480 <MX_LWIP_Init+0x22c>)
 800b428:	785b      	ldrb	r3, [r3, #1]
 800b42a:	041b      	lsls	r3, r3, #16
 800b42c:	4319      	orrs	r1, r3
 800b42e:	4b14      	ldr	r3, [pc, #80]	@ (800b480 <MX_LWIP_Init+0x22c>)
 800b430:	789b      	ldrb	r3, [r3, #2]
 800b432:	021b      	lsls	r3, r3, #8
 800b434:	430b      	orrs	r3, r1
 800b436:	4912      	ldr	r1, [pc, #72]	@ (800b480 <MX_LWIP_Init+0x22c>)
 800b438:	78c9      	ldrb	r1, [r1, #3]
 800b43a:	430b      	orrs	r3, r1
 800b43c:	0e1b      	lsrs	r3, r3, #24
 800b43e:	4313      	orrs	r3, r2
 800b440:	4a12      	ldr	r2, [pc, #72]	@ (800b48c <MX_LWIP_Init+0x238>)
 800b442:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800b444:	4b12      	ldr	r3, [pc, #72]	@ (800b490 <MX_LWIP_Init+0x23c>)
 800b446:	9302      	str	r3, [sp, #8]
 800b448:	4b12      	ldr	r3, [pc, #72]	@ (800b494 <MX_LWIP_Init+0x240>)
 800b44a:	9301      	str	r3, [sp, #4]
 800b44c:	2300      	movs	r3, #0
 800b44e:	9300      	str	r3, [sp, #0]
 800b450:	4b0e      	ldr	r3, [pc, #56]	@ (800b48c <MX_LWIP_Init+0x238>)
 800b452:	4a0d      	ldr	r2, [pc, #52]	@ (800b488 <MX_LWIP_Init+0x234>)
 800b454:	490b      	ldr	r1, [pc, #44]	@ (800b484 <MX_LWIP_Init+0x230>)
 800b456:	4810      	ldr	r0, [pc, #64]	@ (800b498 <MX_LWIP_Init+0x244>)
 800b458:	f009 fef8 	bl	801524c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800b45c:	480e      	ldr	r0, [pc, #56]	@ (800b498 <MX_LWIP_Init+0x244>)
 800b45e:	f009 ffdd 	bl	801541c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800b462:	480d      	ldr	r0, [pc, #52]	@ (800b498 <MX_LWIP_Init+0x244>)
 800b464:	f009 ffe8 	bl	8015438 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800b468:	490c      	ldr	r1, [pc, #48]	@ (800b49c <MX_LWIP_Init+0x248>)
 800b46a:	480b      	ldr	r0, [pc, #44]	@ (800b498 <MX_LWIP_Init+0x244>)
 800b46c:	f00a f862 	bl	8015534 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800b470:	bf00      	nop
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}
 800b476:	bf00      	nop
 800b478:	2000519c 	.word	0x2000519c
 800b47c:	200051a0 	.word	0x200051a0
 800b480:	200051a4 	.word	0x200051a4
 800b484:	20005190 	.word	0x20005190
 800b488:	20005194 	.word	0x20005194
 800b48c:	20005198 	.word	0x20005198
 800b490:	08020e81 	.word	0x08020e81
 800b494:	0800ba41 	.word	0x0800ba41
 800b498:	20005124 	.word	0x20005124
 800b49c:	0800baad 	.word	0x0800baad

0800b4a0 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800b4a4:	4803      	ldr	r0, [pc, #12]	@ (800b4b4 <MX_LWIP_Process+0x14>)
 800b4a6:	f000 faab 	bl	800ba00 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800b4aa:	f010 fbb7 	bl	801bc1c <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800b4ae:	bf00      	nop
 800b4b0:	bd80      	pop	{r7, pc}
 800b4b2:	bf00      	nop
 800b4b4:	20005124 	.word	0x20005124

0800b4b8 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b08e      	sub	sp, #56	@ 0x38
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b4c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	601a      	str	r2, [r3, #0]
 800b4c8:	605a      	str	r2, [r3, #4]
 800b4ca:	609a      	str	r2, [r3, #8]
 800b4cc:	60da      	str	r2, [r3, #12]
 800b4ce:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	4a46      	ldr	r2, [pc, #280]	@ (800b5f0 <HAL_ETH_MspInit+0x138>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	f040 8085 	bne.w	800b5e6 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800b4dc:	2300      	movs	r3, #0
 800b4de:	623b      	str	r3, [r7, #32]
 800b4e0:	4b44      	ldr	r3, [pc, #272]	@ (800b5f4 <HAL_ETH_MspInit+0x13c>)
 800b4e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4e4:	4a43      	ldr	r2, [pc, #268]	@ (800b5f4 <HAL_ETH_MspInit+0x13c>)
 800b4e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b4ea:	6313      	str	r3, [r2, #48]	@ 0x30
 800b4ec:	4b41      	ldr	r3, [pc, #260]	@ (800b5f4 <HAL_ETH_MspInit+0x13c>)
 800b4ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b4f4:	623b      	str	r3, [r7, #32]
 800b4f6:	6a3b      	ldr	r3, [r7, #32]
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	61fb      	str	r3, [r7, #28]
 800b4fc:	4b3d      	ldr	r3, [pc, #244]	@ (800b5f4 <HAL_ETH_MspInit+0x13c>)
 800b4fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b500:	4a3c      	ldr	r2, [pc, #240]	@ (800b5f4 <HAL_ETH_MspInit+0x13c>)
 800b502:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b506:	6313      	str	r3, [r2, #48]	@ 0x30
 800b508:	4b3a      	ldr	r3, [pc, #232]	@ (800b5f4 <HAL_ETH_MspInit+0x13c>)
 800b50a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b50c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b510:	61fb      	str	r3, [r7, #28]
 800b512:	69fb      	ldr	r3, [r7, #28]
 800b514:	2300      	movs	r3, #0
 800b516:	61bb      	str	r3, [r7, #24]
 800b518:	4b36      	ldr	r3, [pc, #216]	@ (800b5f4 <HAL_ETH_MspInit+0x13c>)
 800b51a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b51c:	4a35      	ldr	r2, [pc, #212]	@ (800b5f4 <HAL_ETH_MspInit+0x13c>)
 800b51e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b522:	6313      	str	r3, [r2, #48]	@ 0x30
 800b524:	4b33      	ldr	r3, [pc, #204]	@ (800b5f4 <HAL_ETH_MspInit+0x13c>)
 800b526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b528:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b52c:	61bb      	str	r3, [r7, #24]
 800b52e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b530:	2300      	movs	r3, #0
 800b532:	617b      	str	r3, [r7, #20]
 800b534:	4b2f      	ldr	r3, [pc, #188]	@ (800b5f4 <HAL_ETH_MspInit+0x13c>)
 800b536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b538:	4a2e      	ldr	r2, [pc, #184]	@ (800b5f4 <HAL_ETH_MspInit+0x13c>)
 800b53a:	f043 0304 	orr.w	r3, r3, #4
 800b53e:	6313      	str	r3, [r2, #48]	@ 0x30
 800b540:	4b2c      	ldr	r3, [pc, #176]	@ (800b5f4 <HAL_ETH_MspInit+0x13c>)
 800b542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b544:	f003 0304 	and.w	r3, r3, #4
 800b548:	617b      	str	r3, [r7, #20]
 800b54a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b54c:	2300      	movs	r3, #0
 800b54e:	613b      	str	r3, [r7, #16]
 800b550:	4b28      	ldr	r3, [pc, #160]	@ (800b5f4 <HAL_ETH_MspInit+0x13c>)
 800b552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b554:	4a27      	ldr	r2, [pc, #156]	@ (800b5f4 <HAL_ETH_MspInit+0x13c>)
 800b556:	f043 0301 	orr.w	r3, r3, #1
 800b55a:	6313      	str	r3, [r2, #48]	@ 0x30
 800b55c:	4b25      	ldr	r3, [pc, #148]	@ (800b5f4 <HAL_ETH_MspInit+0x13c>)
 800b55e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b560:	f003 0301 	and.w	r3, r3, #1
 800b564:	613b      	str	r3, [r7, #16]
 800b566:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b568:	2300      	movs	r3, #0
 800b56a:	60fb      	str	r3, [r7, #12]
 800b56c:	4b21      	ldr	r3, [pc, #132]	@ (800b5f4 <HAL_ETH_MspInit+0x13c>)
 800b56e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b570:	4a20      	ldr	r2, [pc, #128]	@ (800b5f4 <HAL_ETH_MspInit+0x13c>)
 800b572:	f043 0302 	orr.w	r3, r3, #2
 800b576:	6313      	str	r3, [r2, #48]	@ 0x30
 800b578:	4b1e      	ldr	r3, [pc, #120]	@ (800b5f4 <HAL_ETH_MspInit+0x13c>)
 800b57a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b57c:	f003 0302 	and.w	r3, r3, #2
 800b580:	60fb      	str	r3, [r7, #12]
 800b582:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800b584:	2332      	movs	r3, #50	@ 0x32
 800b586:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b588:	2302      	movs	r3, #2
 800b58a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b58c:	2300      	movs	r3, #0
 800b58e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b590:	2303      	movs	r3, #3
 800b592:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b594:	230b      	movs	r3, #11
 800b596:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b598:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b59c:	4619      	mov	r1, r3
 800b59e:	4816      	ldr	r0, [pc, #88]	@ (800b5f8 <HAL_ETH_MspInit+0x140>)
 800b5a0:	f7fd fc28 	bl	8008df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800b5a4:	2386      	movs	r3, #134	@ 0x86
 800b5a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b5a8:	2302      	movs	r3, #2
 800b5aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b5b0:	2303      	movs	r3, #3
 800b5b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b5b4:	230b      	movs	r3, #11
 800b5b6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b5b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b5bc:	4619      	mov	r1, r3
 800b5be:	480f      	ldr	r0, [pc, #60]	@ (800b5fc <HAL_ETH_MspInit+0x144>)
 800b5c0:	f7fd fc18 	bl	8008df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800b5c4:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800b5c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b5ca:	2302      	movs	r3, #2
 800b5cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b5d2:	2303      	movs	r3, #3
 800b5d4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b5d6:	230b      	movs	r3, #11
 800b5d8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b5da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b5de:	4619      	mov	r1, r3
 800b5e0:	4807      	ldr	r0, [pc, #28]	@ (800b600 <HAL_ETH_MspInit+0x148>)
 800b5e2:	f7fd fc07 	bl	8008df4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800b5e6:	bf00      	nop
 800b5e8:	3738      	adds	r7, #56	@ 0x38
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}
 800b5ee:	bf00      	nop
 800b5f0:	40028000 	.word	0x40028000
 800b5f4:	40023800 	.word	0x40023800
 800b5f8:	40020800 	.word	0x40020800
 800b5fc:	40020000 	.word	0x40020000
 800b600:	40020400 	.word	0x40020400

0800b604 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b086      	sub	sp, #24
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800b60c:	2300      	movs	r3, #0
 800b60e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800b610:	4b4d      	ldr	r3, [pc, #308]	@ (800b748 <low_level_init+0x144>)
 800b612:	4a4e      	ldr	r2, [pc, #312]	@ (800b74c <low_level_init+0x148>)
 800b614:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800b616:	4b4c      	ldr	r3, [pc, #304]	@ (800b748 <low_level_init+0x144>)
 800b618:	2201      	movs	r2, #1
 800b61a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800b61c:	4b4a      	ldr	r3, [pc, #296]	@ (800b748 <low_level_init+0x144>)
 800b61e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800b622:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800b624:	4b48      	ldr	r3, [pc, #288]	@ (800b748 <low_level_init+0x144>)
 800b626:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b62a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800b62c:	4b46      	ldr	r3, [pc, #280]	@ (800b748 <low_level_init+0x144>)
 800b62e:	2200      	movs	r2, #0
 800b630:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800b632:	2300      	movs	r3, #0
 800b634:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800b636:	2380      	movs	r3, #128	@ 0x80
 800b638:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800b63a:	23e1      	movs	r3, #225	@ 0xe1
 800b63c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800b63e:	2300      	movs	r3, #0
 800b640:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800b642:	2300      	movs	r3, #0
 800b644:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800b646:	2300      	movs	r3, #0
 800b648:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800b64a:	4a3f      	ldr	r2, [pc, #252]	@ (800b748 <low_level_init+0x144>)
 800b64c:	f107 0308 	add.w	r3, r7, #8
 800b650:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800b652:	4b3d      	ldr	r3, [pc, #244]	@ (800b748 <low_level_init+0x144>)
 800b654:	2200      	movs	r2, #0
 800b656:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800b658:	4b3b      	ldr	r3, [pc, #236]	@ (800b748 <low_level_init+0x144>)
 800b65a:	2200      	movs	r2, #0
 800b65c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800b65e:	4b3a      	ldr	r3, [pc, #232]	@ (800b748 <low_level_init+0x144>)
 800b660:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800b664:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800b666:	4838      	ldr	r0, [pc, #224]	@ (800b748 <low_level_init+0x144>)
 800b668:	f7fb fff2 	bl	8007650 <HAL_ETH_Init>
 800b66c:	4603      	mov	r3, r0
 800b66e:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800b670:	7dfb      	ldrb	r3, [r7, #23]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d108      	bne.n	800b688 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800b67c:	f043 0304 	orr.w	r3, r3, #4
 800b680:	b2da      	uxtb	r2, r3
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800b688:	2304      	movs	r3, #4
 800b68a:	4a31      	ldr	r2, [pc, #196]	@ (800b750 <low_level_init+0x14c>)
 800b68c:	4931      	ldr	r1, [pc, #196]	@ (800b754 <low_level_init+0x150>)
 800b68e:	482e      	ldr	r0, [pc, #184]	@ (800b748 <low_level_init+0x144>)
 800b690:	f7fc f96a 	bl	8007968 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800b694:	2304      	movs	r3, #4
 800b696:	4a30      	ldr	r2, [pc, #192]	@ (800b758 <low_level_init+0x154>)
 800b698:	4930      	ldr	r1, [pc, #192]	@ (800b75c <low_level_init+0x158>)
 800b69a:	482b      	ldr	r0, [pc, #172]	@ (800b748 <low_level_init+0x144>)
 800b69c:	f7fc f9cb 	bl	8007a36 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2206      	movs	r2, #6
 800b6a4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800b6a8:	4b27      	ldr	r3, [pc, #156]	@ (800b748 <low_level_init+0x144>)
 800b6aa:	695b      	ldr	r3, [r3, #20]
 800b6ac:	781a      	ldrb	r2, [r3, #0]
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800b6b4:	4b24      	ldr	r3, [pc, #144]	@ (800b748 <low_level_init+0x144>)
 800b6b6:	695b      	ldr	r3, [r3, #20]
 800b6b8:	785a      	ldrb	r2, [r3, #1]
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800b6c0:	4b21      	ldr	r3, [pc, #132]	@ (800b748 <low_level_init+0x144>)
 800b6c2:	695b      	ldr	r3, [r3, #20]
 800b6c4:	789a      	ldrb	r2, [r3, #2]
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800b6cc:	4b1e      	ldr	r3, [pc, #120]	@ (800b748 <low_level_init+0x144>)
 800b6ce:	695b      	ldr	r3, [r3, #20]
 800b6d0:	78da      	ldrb	r2, [r3, #3]
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800b6d8:	4b1b      	ldr	r3, [pc, #108]	@ (800b748 <low_level_init+0x144>)
 800b6da:	695b      	ldr	r3, [r3, #20]
 800b6dc:	791a      	ldrb	r2, [r3, #4]
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800b6e4:	4b18      	ldr	r3, [pc, #96]	@ (800b748 <low_level_init+0x144>)
 800b6e6:	695b      	ldr	r3, [r3, #20]
 800b6e8:	795a      	ldrb	r2, [r3, #5]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  /* maximum transfer unit */
  netif->mtu = 1500;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800b6f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800b6fe:	f043 030a 	orr.w	r3, r3, #10
 800b702:	b2da      	uxtb	r2, r3
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800b70a:	480f      	ldr	r0, [pc, #60]	@ (800b748 <low_level_init+0x144>)
 800b70c:	f7fc fc37 	bl	8007f7e <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800b710:	f107 0310 	add.w	r3, r7, #16
 800b714:	461a      	mov	r2, r3
 800b716:	211d      	movs	r1, #29
 800b718:	480b      	ldr	r0, [pc, #44]	@ (800b748 <low_level_init+0x144>)
 800b71a:	f7fc fb62 	bl	8007de2 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	f043 030b 	orr.w	r3, r3, #11
 800b724:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	461a      	mov	r2, r3
 800b72a:	211d      	movs	r1, #29
 800b72c:	4806      	ldr	r0, [pc, #24]	@ (800b748 <low_level_init+0x144>)
 800b72e:	f7fc fbc0 	bl	8007eb2 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800b732:	f107 0310 	add.w	r3, r7, #16
 800b736:	461a      	mov	r2, r3
 800b738:	211d      	movs	r1, #29
 800b73a:	4803      	ldr	r0, [pc, #12]	@ (800b748 <low_level_init+0x144>)
 800b73c:	f7fc fb51 	bl	8007de2 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800b740:	bf00      	nop
 800b742:	3718      	adds	r7, #24
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}
 800b748:	20008248 	.word	0x20008248
 800b74c:	40028000 	.word	0x40028000
 800b750:	20006a78 	.word	0x20006a78
 800b754:	20005228 	.word	0x20005228
 800b758:	200052a8 	.word	0x200052a8
 800b75c:	200051a8 	.word	0x200051a8

0800b760 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b08a      	sub	sp, #40	@ 0x28
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800b76a:	4b4b      	ldr	r3, [pc, #300]	@ (800b898 <low_level_output+0x138>)
 800b76c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b76e:	689b      	ldr	r3, [r3, #8]
 800b770:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800b772:	2300      	movs	r3, #0
 800b774:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800b776:	2300      	movs	r3, #0
 800b778:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800b77a:	2300      	movs	r3, #0
 800b77c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800b77e:	2300      	movs	r3, #0
 800b780:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800b782:	4b45      	ldr	r3, [pc, #276]	@ (800b898 <low_level_output+0x138>)
 800b784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b786:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800b788:	2300      	movs	r3, #0
 800b78a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	623b      	str	r3, [r7, #32]
 800b790:	e05a      	b.n	800b848 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800b792:	69bb      	ldr	r3, [r7, #24]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	2b00      	cmp	r3, #0
 800b798:	da03      	bge.n	800b7a2 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800b79a:	23f8      	movs	r3, #248	@ 0xf8
 800b79c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
 800b7a0:	e05c      	b.n	800b85c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800b7a2:	6a3b      	ldr	r3, [r7, #32]
 800b7a4:	895b      	ldrh	r3, [r3, #10]
 800b7a6:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800b7ac:	e02f      	b.n	800b80e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800b7ae:	69fa      	ldr	r2, [r7, #28]
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	18d0      	adds	r0, r2, r3
 800b7b4:	6a3b      	ldr	r3, [r7, #32]
 800b7b6:	685a      	ldr	r2, [r3, #4]
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	18d1      	adds	r1, r2, r3
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	f5c3 63be 	rsb	r3, r3, #1520	@ 0x5f0
 800b7c2:	3304      	adds	r3, #4
 800b7c4:	461a      	mov	r2, r3
 800b7c6:	f016 fd5a 	bl	802227e <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800b7ca:	69bb      	ldr	r3, [r7, #24]
 800b7cc:	68db      	ldr	r3, [r3, #12]
 800b7ce:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800b7d0:	69bb      	ldr	r3, [r7, #24]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	da03      	bge.n	800b7e0 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800b7d8:	23f8      	movs	r3, #248	@ 0xf8
 800b7da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
 800b7de:	e03d      	b.n	800b85c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800b7e0:	69bb      	ldr	r3, [r7, #24]
 800b7e2:	689b      	ldr	r3, [r3, #8]
 800b7e4:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800b7e6:	693a      	ldr	r2, [r7, #16]
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	4413      	add	r3, r2
 800b7ec:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 800b7f0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800b7f2:	68ba      	ldr	r2, [r7, #8]
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	1ad3      	subs	r3, r2, r3
 800b7f8:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 800b7fc:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800b7fe:	697a      	ldr	r2, [r7, #20]
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	1ad3      	subs	r3, r2, r3
 800b804:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 800b808:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800b80a:	2300      	movs	r3, #0
 800b80c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800b80e:	68fa      	ldr	r2, [r7, #12]
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	4413      	add	r3, r2
 800b814:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800b818:	4293      	cmp	r3, r2
 800b81a:	d8c8      	bhi.n	800b7ae <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800b81c:	69fa      	ldr	r2, [r7, #28]
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	18d0      	adds	r0, r2, r3
 800b822:	6a3b      	ldr	r3, [r7, #32]
 800b824:	685a      	ldr	r2, [r3, #4]
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	4413      	add	r3, r2
 800b82a:	68fa      	ldr	r2, [r7, #12]
 800b82c:	4619      	mov	r1, r3
 800b82e:	f016 fd26 	bl	802227e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800b832:	693a      	ldr	r2, [r7, #16]
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	4413      	add	r3, r2
 800b838:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800b83a:	697a      	ldr	r2, [r7, #20]
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	4413      	add	r3, r2
 800b840:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800b842:	6a3b      	ldr	r3, [r7, #32]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	623b      	str	r3, [r7, #32]
 800b848:	6a3b      	ldr	r3, [r7, #32]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d1a1      	bne.n	800b792 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800b84e:	6979      	ldr	r1, [r7, #20]
 800b850:	4811      	ldr	r0, [pc, #68]	@ (800b898 <low_level_output+0x138>)
 800b852:	f7fc f95b 	bl	8007b0c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800b856:	2300      	movs	r3, #0
 800b858:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800b85c:	4b0e      	ldr	r3, [pc, #56]	@ (800b898 <low_level_output+0x138>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b864:	695b      	ldr	r3, [r3, #20]
 800b866:	f003 0320 	and.w	r3, r3, #32
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d00d      	beq.n	800b88a <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800b86e:	4b0a      	ldr	r3, [pc, #40]	@ (800b898 <low_level_output+0x138>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b876:	461a      	mov	r2, r3
 800b878:	2320      	movs	r3, #32
 800b87a:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800b87c:	4b06      	ldr	r3, [pc, #24]	@ (800b898 <low_level_output+0x138>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b884:	461a      	mov	r2, r3
 800b886:	2300      	movs	r3, #0
 800b888:	6053      	str	r3, [r2, #4]
  }
  return errval;
 800b88a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800b88e:	4618      	mov	r0, r3
 800b890:	3728      	adds	r7, #40	@ 0x28
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}
 800b896:	bf00      	nop
 800b898:	20008248 	.word	0x20008248

0800b89c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b08c      	sub	sp, #48	@ 0x30
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct pbuf *q = NULL;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint16_t len = 0;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 800b8c0:	484e      	ldr	r0, [pc, #312]	@ (800b9fc <low_level_input+0x160>)
 800b8c2:	f7fc fa0b 	bl	8007cdc <HAL_ETH_GetReceivedFrame>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d001      	beq.n	800b8d0 <low_level_input+0x34>

    return NULL;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	e090      	b.n	800b9f2 <low_level_input+0x156>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800b8d0:	4b4a      	ldr	r3, [pc, #296]	@ (800b9fc <low_level_input+0x160>)
 800b8d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8d4:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800b8d6:	4b49      	ldr	r3, [pc, #292]	@ (800b9fc <low_level_input+0x160>)
 800b8d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8da:	627b      	str	r3, [r7, #36]	@ 0x24

  if (len > 0)
 800b8dc:	89fb      	ldrh	r3, [r7, #14]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d006      	beq.n	800b8f0 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800b8e2:	89fb      	ldrh	r3, [r7, #14]
 800b8e4:	2203      	movs	r2, #3
 800b8e6:	4619      	mov	r1, r3
 800b8e8:	2004      	movs	r0, #4
 800b8ea:	f009 fe63 	bl	80155b4 <pbuf_alloc>
 800b8ee:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  if (p != NULL)
 800b8f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d04b      	beq.n	800b98e <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800b8f6:	4b41      	ldr	r3, [pc, #260]	@ (800b9fc <low_level_input+0x160>)
 800b8f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8fa:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800b900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b902:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b904:	e040      	b.n	800b988 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 800b906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b908:	895b      	ldrh	r3, [r3, #10]
 800b90a:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800b90c:	2300      	movs	r3, #0
 800b90e:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800b910:	e021      	b.n	800b956 <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800b912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b914:	685a      	ldr	r2, [r3, #4]
 800b916:	69bb      	ldr	r3, [r7, #24]
 800b918:	18d0      	adds	r0, r2, r3
 800b91a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b91c:	69fb      	ldr	r3, [r7, #28]
 800b91e:	18d1      	adds	r1, r2, r3
 800b920:	69fb      	ldr	r3, [r7, #28]
 800b922:	f5c3 63be 	rsb	r3, r3, #1520	@ 0x5f0
 800b926:	3304      	adds	r3, #4
 800b928:	461a      	mov	r2, r3
 800b92a:	f016 fca8 	bl	802227e <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800b92e:	6a3b      	ldr	r3, [r7, #32]
 800b930:	68db      	ldr	r3, [r3, #12]
 800b932:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800b934:	6a3b      	ldr	r3, [r7, #32]
 800b936:	689b      	ldr	r3, [r3, #8]
 800b938:	627b      	str	r3, [r7, #36]	@ 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800b93a:	69fa      	ldr	r2, [r7, #28]
 800b93c:	697b      	ldr	r3, [r7, #20]
 800b93e:	4413      	add	r3, r2
 800b940:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 800b944:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800b946:	69ba      	ldr	r2, [r7, #24]
 800b948:	69fb      	ldr	r3, [r7, #28]
 800b94a:	1ad3      	subs	r3, r2, r3
 800b94c:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 800b950:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800b952:	2300      	movs	r3, #0
 800b954:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800b956:	697a      	ldr	r2, [r7, #20]
 800b958:	69fb      	ldr	r3, [r7, #28]
 800b95a:	4413      	add	r3, r2
 800b95c:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800b960:	4293      	cmp	r3, r2
 800b962:	d8d6      	bhi.n	800b912 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800b964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b966:	685a      	ldr	r2, [r3, #4]
 800b968:	69bb      	ldr	r3, [r7, #24]
 800b96a:	18d0      	adds	r0, r2, r3
 800b96c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b96e:	69fb      	ldr	r3, [r7, #28]
 800b970:	4413      	add	r3, r2
 800b972:	697a      	ldr	r2, [r7, #20]
 800b974:	4619      	mov	r1, r3
 800b976:	f016 fc82 	bl	802227e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800b97a:	69fa      	ldr	r2, [r7, #28]
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	4413      	add	r3, r2
 800b980:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800b982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d1bb      	bne.n	800b906 <low_level_input+0x6a>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800b98e:	4b1b      	ldr	r3, [pc, #108]	@ (800b9fc <low_level_input+0x160>)
 800b990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b992:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800b994:	2300      	movs	r3, #0
 800b996:	613b      	str	r3, [r7, #16]
 800b998:	e00b      	b.n	800b9b2 <low_level_input+0x116>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800b99a:	6a3b      	ldr	r3, [r7, #32]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b9a2:	6a3b      	ldr	r3, [r7, #32]
 800b9a4:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800b9a6:	6a3b      	ldr	r3, [r7, #32]
 800b9a8:	68db      	ldr	r3, [r3, #12]
 800b9aa:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	3301      	adds	r3, #1
 800b9b0:	613b      	str	r3, [r7, #16]
 800b9b2:	4b12      	ldr	r3, [pc, #72]	@ (800b9fc <low_level_input+0x160>)
 800b9b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9b6:	693a      	ldr	r2, [r7, #16]
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d3ee      	bcc.n	800b99a <low_level_input+0xfe>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800b9bc:	4b0f      	ldr	r3, [pc, #60]	@ (800b9fc <low_level_input+0x160>)
 800b9be:	2200      	movs	r2, #0
 800b9c0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800b9c2:	4b0e      	ldr	r3, [pc, #56]	@ (800b9fc <low_level_input+0x160>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b9ca:	695b      	ldr	r3, [r3, #20]
 800b9cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d00d      	beq.n	800b9f0 <low_level_input+0x154>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800b9d4:	4b09      	ldr	r3, [pc, #36]	@ (800b9fc <low_level_input+0x160>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b9dc:	461a      	mov	r2, r3
 800b9de:	2380      	movs	r3, #128	@ 0x80
 800b9e0:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800b9e2:	4b06      	ldr	r3, [pc, #24]	@ (800b9fc <low_level_input+0x160>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	6093      	str	r3, [r2, #8]
  }
  return p;
 800b9f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	3730      	adds	r7, #48	@ 0x30
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}
 800b9fa:	bf00      	nop
 800b9fc:	20008248 	.word	0x20008248

0800ba00 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b084      	sub	sp, #16
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f7ff ff47 	bl	800b89c <low_level_input>
 800ba0e:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d010      	beq.n	800ba38 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	691b      	ldr	r3, [r3, #16]
 800ba1a:	6879      	ldr	r1, [r7, #4]
 800ba1c:	68f8      	ldr	r0, [r7, #12]
 800ba1e:	4798      	blx	r3
 800ba20:	4603      	mov	r3, r0
 800ba22:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 800ba24:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d006      	beq.n	800ba3a <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800ba2c:	68f8      	ldr	r0, [r7, #12]
 800ba2e:	f00a f939 	bl	8015ca4 <pbuf_free>
    p = NULL;
 800ba32:	2300      	movs	r3, #0
 800ba34:	60fb      	str	r3, [r7, #12]
 800ba36:	e000      	b.n	800ba3a <ethernetif_input+0x3a>
  if (p == NULL) return;
 800ba38:	bf00      	nop
  }
}
 800ba3a:	3710      	adds	r7, #16
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}

0800ba40 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b082      	sub	sp, #8
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d106      	bne.n	800ba5c <ethernetif_init+0x1c>
 800ba4e:	4b0e      	ldr	r3, [pc, #56]	@ (800ba88 <ethernetif_init+0x48>)
 800ba50:	f240 220a 	movw	r2, #522	@ 0x20a
 800ba54:	490d      	ldr	r1, [pc, #52]	@ (800ba8c <ethernetif_init+0x4c>)
 800ba56:	480e      	ldr	r0, [pc, #56]	@ (800ba90 <ethernetif_init+0x50>)
 800ba58:	f016 f916 	bl	8021c88 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2273      	movs	r2, #115	@ 0x73
 800ba60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->name[1] = IFNAME1;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2274      	movs	r2, #116	@ 0x74
 800ba68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	4a09      	ldr	r2, [pc, #36]	@ (800ba94 <ethernetif_init+0x54>)
 800ba70:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	4a08      	ldr	r2, [pc, #32]	@ (800ba98 <ethernetif_init+0x58>)
 800ba76:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f7ff fdc3 	bl	800b604 <low_level_init>

  return ERR_OK;
 800ba7e:	2300      	movs	r3, #0
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	3708      	adds	r7, #8
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}
 800ba88:	08024df8 	.word	0x08024df8
 800ba8c:	08024e14 	.word	0x08024e14
 800ba90:	08024e24 	.word	0x08024e24
 800ba94:	0801ebd9 	.word	0x0801ebd9
 800ba98:	0800b761 	.word	0x0800b761

0800ba9c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800baa0:	f7fa fd52 	bl	8006548 <HAL_GetTick>
 800baa4:	4603      	mov	r3, r0
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	bd80      	pop	{r7, pc}
	...

0800baac <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b084      	sub	sp, #16
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800bab4:	2300      	movs	r3, #0
 800bab6:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800bab8:	2300      	movs	r3, #0
 800baba:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800bac2:	089b      	lsrs	r3, r3, #2
 800bac4:	f003 0301 	and.w	r3, r3, #1
 800bac8:	b2db      	uxtb	r3, r3
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d066      	beq.n	800bb9c <ethernetif_update_config+0xf0>
  {
	  /* Жёсткий перезапуск PHY при появлении линка для LAN8742 */
	      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_RESET);
 800bace:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800bad2:	2100      	movs	r1, #0
 800bad4:	4836      	ldr	r0, [pc, #216]	@ (800bbb0 <ethernetif_update_config+0x104>)
 800bad6:	f7fc f9ec 	bl	8007eb2 <HAL_ETH_WritePHYRegister>
	      HAL_Delay(2);
 800bada:	2002      	movs	r0, #2
 800badc:	f7fa fd3e 	bl	800655c <HAL_Delay>
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800bae0:	4b33      	ldr	r3, [pc, #204]	@ (800bbb0 <ethernetif_update_config+0x104>)
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d03f      	beq.n	800bb68 <ethernetif_update_config+0xbc>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800bae8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800baec:	2100      	movs	r1, #0
 800baee:	4830      	ldr	r0, [pc, #192]	@ (800bbb0 <ethernetif_update_config+0x104>)
 800baf0:	f7fc f9df 	bl	8007eb2 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800baf4:	f7fa fd28 	bl	8006548 <HAL_GetTick>
 800baf8:	4603      	mov	r3, r0
 800bafa:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800bafc:	f107 0308 	add.w	r3, r7, #8
 800bb00:	461a      	mov	r2, r3
 800bb02:	2101      	movs	r1, #1
 800bb04:	482a      	ldr	r0, [pc, #168]	@ (800bbb0 <ethernetif_update_config+0x104>)
 800bb06:	f7fc f96c 	bl	8007de2 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800bb0a:	f7fa fd1d 	bl	8006548 <HAL_GetTick>
 800bb0e:	4602      	mov	r2, r0
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	1ad3      	subs	r3, r2, r3
 800bb14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bb18:	d828      	bhi.n	800bb6c <ethernetif_update_config+0xc0>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800bb1a:	68bb      	ldr	r3, [r7, #8]
 800bb1c:	f003 0320 	and.w	r3, r3, #32
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d0eb      	beq.n	800bafc <ethernetif_update_config+0x50>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800bb24:	f107 0308 	add.w	r3, r7, #8
 800bb28:	461a      	mov	r2, r3
 800bb2a:	2110      	movs	r1, #16
 800bb2c:	4820      	ldr	r0, [pc, #128]	@ (800bbb0 <ethernetif_update_config+0x104>)
 800bb2e:	f7fc f958 	bl	8007de2 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	f003 0304 	and.w	r3, r3, #4
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d004      	beq.n	800bb46 <ethernetif_update_config+0x9a>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800bb3c:	4b1c      	ldr	r3, [pc, #112]	@ (800bbb0 <ethernetif_update_config+0x104>)
 800bb3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bb42:	60da      	str	r2, [r3, #12]
 800bb44:	e002      	b.n	800bb4c <ethernetif_update_config+0xa0>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800bb46:	4b1a      	ldr	r3, [pc, #104]	@ (800bbb0 <ethernetif_update_config+0x104>)
 800bb48:	2200      	movs	r2, #0
 800bb4a:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	f003 0302 	and.w	r3, r3, #2
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d003      	beq.n	800bb5e <ethernetif_update_config+0xb2>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800bb56:	4b16      	ldr	r3, [pc, #88]	@ (800bbb0 <ethernetif_update_config+0x104>)
 800bb58:	2200      	movs	r2, #0
 800bb5a:	609a      	str	r2, [r3, #8]
 800bb5c:	e016      	b.n	800bb8c <ethernetif_update_config+0xe0>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800bb5e:	4b14      	ldr	r3, [pc, #80]	@ (800bbb0 <ethernetif_update_config+0x104>)
 800bb60:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800bb64:	609a      	str	r2, [r3, #8]
 800bb66:	e011      	b.n	800bb8c <ethernetif_update_config+0xe0>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800bb68:	bf00      	nop
 800bb6a:	e000      	b.n	800bb6e <ethernetif_update_config+0xc2>
          goto error;
 800bb6c:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800bb6e:	4b10      	ldr	r3, [pc, #64]	@ (800bbb0 <ethernetif_update_config+0x104>)
 800bb70:	68db      	ldr	r3, [r3, #12]
 800bb72:	08db      	lsrs	r3, r3, #3
 800bb74:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800bb76:	4b0e      	ldr	r3, [pc, #56]	@ (800bbb0 <ethernetif_update_config+0x104>)
 800bb78:	689b      	ldr	r3, [r3, #8]
 800bb7a:	085b      	lsrs	r3, r3, #1
 800bb7c:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800bb7e:	4313      	orrs	r3, r2
 800bb80:	b29b      	uxth	r3, r3
 800bb82:	461a      	mov	r2, r3
 800bb84:	2100      	movs	r1, #0
 800bb86:	480a      	ldr	r0, [pc, #40]	@ (800bbb0 <ethernetif_update_config+0x104>)
 800bb88:	f7fc f993 	bl	8007eb2 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800bb8c:	2100      	movs	r1, #0
 800bb8e:	4808      	ldr	r0, [pc, #32]	@ (800bbb0 <ethernetif_update_config+0x104>)
 800bb90:	f7fc fa54 	bl	800803c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800bb94:	4806      	ldr	r0, [pc, #24]	@ (800bbb0 <ethernetif_update_config+0x104>)
 800bb96:	f7fc f9f2 	bl	8007f7e <HAL_ETH_Start>
 800bb9a:	e002      	b.n	800bba2 <ethernetif_update_config+0xf6>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800bb9c:	4804      	ldr	r0, [pc, #16]	@ (800bbb0 <ethernetif_update_config+0x104>)
 800bb9e:	f7fc fa1d 	bl	8007fdc <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f000 f806 	bl	800bbb4 <ethernetif_notify_conn_changed>
}
 800bba8:	bf00      	nop
 800bbaa:	3710      	adds	r7, #16
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}
 800bbb0:	20008248 	.word	0x20008248

0800bbb4 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b083      	sub	sp, #12
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800bbbc:	bf00      	nop
 800bbbe:	370c      	adds	r7, #12
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bc80      	pop	{r7}
 800bbc4:	4770      	bx	lr
	...

0800bbc8 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b084      	sub	sp, #16
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d002      	beq.n	800bbde <fs_open+0x16>
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d102      	bne.n	800bbe4 <fs_open+0x1c>
     return ERR_ARG;
 800bbde:	f06f 030f 	mvn.w	r3, #15
 800bbe2:	e037      	b.n	800bc54 <fs_open+0x8c>
  }

#if LWIP_HTTPD_CUSTOM_FILES
  if (fs_open_custom(file, name)) {
 800bbe4:	6839      	ldr	r1, [r7, #0]
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f000 f858 	bl	800bc9c <fs_open_custom>
 800bbec:	4603      	mov	r3, r0
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d004      	beq.n	800bbfc <fs_open+0x34>
    file->is_custom_file = 1;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2201      	movs	r2, #1
 800bbf6:	745a      	strb	r2, [r3, #17]
    return ERR_OK;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	e02b      	b.n	800bc54 <fs_open+0x8c>
  }
  file->is_custom_file = 0;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	745a      	strb	r2, [r3, #17]
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800bc02:	4b16      	ldr	r3, [pc, #88]	@ (800bc5c <fs_open+0x94>)
 800bc04:	60fb      	str	r3, [r7, #12]
 800bc06:	e020      	b.n	800bc4a <fs_open+0x82>
    if (!strcmp(name, (const char *)f->name)) {
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	685b      	ldr	r3, [r3, #4]
 800bc0c:	4619      	mov	r1, r3
 800bc0e:	6838      	ldr	r0, [r7, #0]
 800bc10:	f7f4 fada 	bl	80001c8 <strcmp>
 800bc14:	4603      	mov	r3, r0
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d114      	bne.n	800bc44 <fs_open+0x7c>
      file->data = (const char *)f->data;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	689a      	ldr	r2, [r3, #8]
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	68da      	ldr	r2, [r3, #12]
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	68da      	ldr	r2, [r3, #12]
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2200      	movs	r2, #0
 800bc36:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	7c1a      	ldrb	r2, [r3, #16]
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800bc40:	2300      	movs	r3, #0
 800bc42:	e007      	b.n	800bc54 <fs_open+0x8c>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	60fb      	str	r3, [r7, #12]
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d1db      	bne.n	800bc08 <fs_open+0x40>
    }
  }
  /* file not found */
  return ERR_VAL;
 800bc50:	f06f 0305 	mvn.w	r3, #5
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3710      	adds	r7, #16
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}
 800bc5c:	0802fc9c 	.word	0x0802fc9c

0800bc60 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b082      	sub	sp, #8
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
#if LWIP_HTTPD_CUSTOM_FILES
  if (file->is_custom_file) {
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	7c5b      	ldrb	r3, [r3, #17]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d002      	beq.n	800bc76 <fs_close+0x16>
    fs_close_custom(file);
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f000 f913 	bl	800be9c <fs_close_custom>
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800bc76:	bf00      	nop
 800bc78:	3708      	adds	r7, #8
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}

0800bc7e <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800bc7e:	b480      	push	{r7}
 800bc80:	b083      	sub	sp, #12
 800bc82:	af00      	add	r7, sp, #0
 800bc84:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	685a      	ldr	r2, [r3, #4]
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	689b      	ldr	r3, [r3, #8]
 800bc8e:	1ad3      	subs	r3, r2, r3
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	370c      	adds	r7, #12
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bc80      	pop	{r7}
 800bc98:	4770      	bx	lr
	...

0800bc9c <fs_open_custom>:
extern uint32_t g_auth_ttl_ms;

static char g_setcookie_hdr[256];

int fs_open_custom(struct fs_file *file, const char *name)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b094      	sub	sp, #80	@ 0x50
 800bca0:	af02      	add	r7, sp, #8
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	6039      	str	r1, [r7, #0]
  if (file == NULL || name == NULL) return 0;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d002      	beq.n	800bcb2 <fs_open_custom+0x16>
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d101      	bne.n	800bcb6 <fs_open_custom+0x1a>
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	e0d0      	b.n	800be58 <fs_open_custom+0x1bc>

  /* If login just created a session, send Set-Cookie once and redirect to index */
  char sid[33];
  if (Auth_TakePendingSetCookie(sid, sizeof(sid))) {
 800bcb6:	f107 0308 	add.w	r3, r7, #8
 800bcba:	2121      	movs	r1, #33	@ 0x21
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f7f5 fe59 	bl	8001974 <Auth_TakePendingSetCookie>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d027      	beq.n	800bd18 <fs_open_custom+0x7c>
    unsigned long max_age = (unsigned long)(g_auth_ttl_ms / 1000U);
 800bcc8:	4b65      	ldr	r3, [pc, #404]	@ (800be60 <fs_open_custom+0x1c4>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	4a65      	ldr	r2, [pc, #404]	@ (800be64 <fs_open_custom+0x1c8>)
 800bcce:	fba2 2303 	umull	r2, r3, r2, r3
 800bcd2:	099b      	lsrs	r3, r3, #6
 800bcd4:	633b      	str	r3, [r7, #48]	@ 0x30
    int n = snprintf(g_setcookie_hdr, sizeof(g_setcookie_hdr),
 800bcd6:	f107 0208 	add.w	r2, r7, #8
 800bcda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcdc:	9300      	str	r3, [sp, #0]
 800bcde:	4613      	mov	r3, r2
 800bce0:	4a61      	ldr	r2, [pc, #388]	@ (800be68 <fs_open_custom+0x1cc>)
 800bce2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bce6:	4861      	ldr	r0, [pc, #388]	@ (800be6c <fs_open_custom+0x1d0>)
 800bce8:	f016 f83e 	bl	8021d68 <sniprintf>
 800bcec:	62f8      	str	r0, [r7, #44]	@ 0x2c
                     "HTTP/1.1 302 Found\r\nSet-Cookie: SID=%s; Path=/; HttpOnly; Max-Age=%lu\r\nLocation: /index.html\r\n\r\n",
                     sid, max_age);
    (void)n;
    file->data = g_setcookie_hdr;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	4a5e      	ldr	r2, [pc, #376]	@ (800be6c <fs_open_custom+0x1d0>)
 800bcf2:	601a      	str	r2, [r3, #0]
    file->len = strlen(file->data);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f7f4 fa6f 	bl	80001dc <strlen>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	461a      	mov	r2, r3
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	605a      	str	r2, [r3, #4]
    file->index = file->len;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	685a      	ldr	r2, [r3, #4]
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	609a      	str	r2, [r3, #8]
    file->flags = FS_FILE_FLAGS_HEADER_INCLUDED;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2201      	movs	r2, #1
 800bd12:	741a      	strb	r2, [r3, #16]
    return 1;
 800bd14:	2301      	movs	r3, #1
 800bd16:	e09f      	b.n	800be58 <fs_open_custom+0x1bc>
  }

  /* Разрешаем страницы логина и ошибки всегда */
  if (!strcmp(name, "/login.html") || !strcmp(name, "/login_failed.html")) {
 800bd18:	4955      	ldr	r1, [pc, #340]	@ (800be70 <fs_open_custom+0x1d4>)
 800bd1a:	6838      	ldr	r0, [r7, #0]
 800bd1c:	f7f4 fa54 	bl	80001c8 <strcmp>
 800bd20:	4603      	mov	r3, r0
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d006      	beq.n	800bd34 <fs_open_custom+0x98>
 800bd26:	4953      	ldr	r1, [pc, #332]	@ (800be74 <fs_open_custom+0x1d8>)
 800bd28:	6838      	ldr	r0, [r7, #0]
 800bd2a:	f7f4 fa4d 	bl	80001c8 <strcmp>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d101      	bne.n	800bd38 <fs_open_custom+0x9c>
    return 0; /* обычная отдача */
 800bd34:	2300      	movs	r3, #0
 800bd36:	e08f      	b.n	800be58 <fs_open_custom+0x1bc>
  }

  /* /login.cgi обрабатывается через CGI handler в main.c */
  if (!strncmp(name, "/login.cgi", 10)) {
 800bd38:	220a      	movs	r2, #10
 800bd3a:	494f      	ldr	r1, [pc, #316]	@ (800be78 <fs_open_custom+0x1dc>)
 800bd3c:	6838      	ldr	r0, [r7, #0]
 800bd3e:	f016 f9af 	bl	80220a0 <strncmp>
 800bd42:	4603      	mov	r3, r0
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d101      	bne.n	800bd4c <fs_open_custom+0xb0>
    return 0; /* для GET-логина параметры парсит CGI */
 800bd48:	2300      	movs	r3, #0
 800bd4a:	e085      	b.n	800be58 <fs_open_custom+0x1bc>
  }

  /* Logout */
  if (!strncmp(name, "/logout.cgi", 11)) {
 800bd4c:	220b      	movs	r2, #11
 800bd4e:	494b      	ldr	r1, [pc, #300]	@ (800be7c <fs_open_custom+0x1e0>)
 800bd50:	6838      	ldr	r0, [r7, #0]
 800bd52:	f016 f9a5 	bl	80220a0 <strncmp>
 800bd56:	4603      	mov	r3, r0
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d119      	bne.n	800bd90 <fs_open_custom+0xf4>
    g_is_authenticated = 0;
 800bd5c:	4b48      	ldr	r3, [pc, #288]	@ (800be80 <fs_open_custom+0x1e4>)
 800bd5e:	2200      	movs	r2, #0
 800bd60:	701a      	strb	r2, [r3, #0]
    Auth_RevokeCurrentSession();
 800bd62:	f7f5 fe2f 	bl	80019c4 <Auth_RevokeCurrentSession>
    file->data = (const char*)"HTTP/1.1 302 Found\r\nLocation: /login.html\r\n\r\n";
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	4a46      	ldr	r2, [pc, #280]	@ (800be84 <fs_open_custom+0x1e8>)
 800bd6a:	601a      	str	r2, [r3, #0]
    file->len = strlen(file->data);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	4618      	mov	r0, r3
 800bd72:	f7f4 fa33 	bl	80001dc <strlen>
 800bd76:	4603      	mov	r3, r0
 800bd78:	461a      	mov	r2, r3
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	605a      	str	r2, [r3, #4]
    file->index = file->len;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	685a      	ldr	r2, [r3, #4]
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	609a      	str	r2, [r3, #8]
    file->flags = FS_FILE_FLAGS_HEADER_INCLUDED;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2201      	movs	r2, #1
 800bd8a:	741a      	strb	r2, [r3, #16]
    return 1;
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	e063      	b.n	800be58 <fs_open_custom+0x1bc>
  }

  /* Для остальных HTML-страниц — пропускаем, если авторизован (и не истёк TTL); иначе редирект на login */
  const char *path = (name && name[0]) ? name : "/";
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d005      	beq.n	800bda2 <fs_open_custom+0x106>
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	781b      	ldrb	r3, [r3, #0]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d001      	beq.n	800bda2 <fs_open_custom+0x106>
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	e000      	b.n	800bda4 <fs_open_custom+0x108>
 800bda2:	4b39      	ldr	r3, [pc, #228]	@ (800be88 <fs_open_custom+0x1ec>)
 800bda4:	647b      	str	r3, [r7, #68]	@ 0x44
  int is_root = !strcmp(path, "/");
 800bda6:	4938      	ldr	r1, [pc, #224]	@ (800be88 <fs_open_custom+0x1ec>)
 800bda8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800bdaa:	f7f4 fa0d 	bl	80001c8 <strcmp>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	bf0c      	ite	eq
 800bdb4:	2301      	moveq	r3, #1
 800bdb6:	2300      	movne	r3, #0
 800bdb8:	b2db      	uxtb	r3, r3
 800bdba:	643b      	str	r3, [r7, #64]	@ 0x40
  int is_index_variation = (!strcmp(path, "/index.html") || !strcmp(path, "index.html"));
 800bdbc:	4933      	ldr	r1, [pc, #204]	@ (800be8c <fs_open_custom+0x1f0>)
 800bdbe:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800bdc0:	f7f4 fa02 	bl	80001c8 <strcmp>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d006      	beq.n	800bdd8 <fs_open_custom+0x13c>
 800bdca:	4931      	ldr	r1, [pc, #196]	@ (800be90 <fs_open_custom+0x1f4>)
 800bdcc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800bdce:	f7f4 f9fb 	bl	80001c8 <strcmp>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d101      	bne.n	800bddc <fs_open_custom+0x140>
 800bdd8:	2301      	movs	r3, #1
 800bdda:	e000      	b.n	800bdde <fs_open_custom+0x142>
 800bddc:	2300      	movs	r3, #0
 800bdde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  int is_html = (strstr(path, ".html") != NULL) || (strstr(path, ".shtml") != NULL);
 800bde0:	492c      	ldr	r1, [pc, #176]	@ (800be94 <fs_open_custom+0x1f8>)
 800bde2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800bde4:	f016 f981 	bl	80220ea <strstr>
 800bde8:	4603      	mov	r3, r0
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d106      	bne.n	800bdfc <fs_open_custom+0x160>
 800bdee:	492a      	ldr	r1, [pc, #168]	@ (800be98 <fs_open_custom+0x1fc>)
 800bdf0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800bdf2:	f016 f97a 	bl	80220ea <strstr>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d001      	beq.n	800be00 <fs_open_custom+0x164>
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	e000      	b.n	800be02 <fs_open_custom+0x166>
 800be00:	2300      	movs	r3, #0
 800be02:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (is_root || is_index_variation || is_html) {
 800be04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be06:	2b00      	cmp	r3, #0
 800be08:	d105      	bne.n	800be16 <fs_open_custom+0x17a>
 800be0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d102      	bne.n	800be16 <fs_open_custom+0x17a>
 800be10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be12:	2b00      	cmp	r3, #0
 800be14:	d01f      	beq.n	800be56 <fs_open_custom+0x1ba>
    uint32_t now = HAL_GetTick();
 800be16:	f7fa fb97 	bl	8006548 <HAL_GetTick>
 800be1a:	6378      	str	r0, [r7, #52]	@ 0x34
    if (Auth_IsCurrentRequestAuthorized(now)) {
 800be1c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800be1e:	f7f5 fdf7 	bl	8001a10 <Auth_IsCurrentRequestAuthorized>
 800be22:	4603      	mov	r3, r0
 800be24:	2b00      	cmp	r3, #0
 800be26:	d001      	beq.n	800be2c <fs_open_custom+0x190>
      return 0; /* отдать страницу обычно */
 800be28:	2300      	movs	r3, #0
 800be2a:	e015      	b.n	800be58 <fs_open_custom+0x1bc>
    } else {
      file->data = (const char*)"HTTP/1.1 302 Found\r\nLocation: /login.html\r\n\r\n";
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	4a15      	ldr	r2, [pc, #84]	@ (800be84 <fs_open_custom+0x1e8>)
 800be30:	601a      	str	r2, [r3, #0]
      file->len = strlen(file->data);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	4618      	mov	r0, r3
 800be38:	f7f4 f9d0 	bl	80001dc <strlen>
 800be3c:	4603      	mov	r3, r0
 800be3e:	461a      	mov	r2, r3
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	605a      	str	r2, [r3, #4]
      file->index = file->len;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	685a      	ldr	r2, [r3, #4]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	609a      	str	r2, [r3, #8]
      file->flags = FS_FILE_FLAGS_HEADER_INCLUDED;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2201      	movs	r2, #1
 800be50:	741a      	strb	r2, [r3, #16]
      return 1;
 800be52:	2301      	movs	r3, #1
 800be54:	e000      	b.n	800be58 <fs_open_custom+0x1bc>
    }
  }
  return 0;
 800be56:	2300      	movs	r3, #0
}
 800be58:	4618      	mov	r0, r3
 800be5a:	3748      	adds	r7, #72	@ 0x48
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}
 800be60:	20000010 	.word	0x20000010
 800be64:	10624dd3 	.word	0x10624dd3
 800be68:	08024e4c 	.word	0x08024e4c
 800be6c:	20008290 	.word	0x20008290
 800be70:	08024eb0 	.word	0x08024eb0
 800be74:	08024ebc 	.word	0x08024ebc
 800be78:	08024ed0 	.word	0x08024ed0
 800be7c:	08024edc 	.word	0x08024edc
 800be80:	20002bec 	.word	0x20002bec
 800be84:	08024ee8 	.word	0x08024ee8
 800be88:	08024f18 	.word	0x08024f18
 800be8c:	08024f1c 	.word	0x08024f1c
 800be90:	08024f28 	.word	0x08024f28
 800be94:	08024f34 	.word	0x08024f34
 800be98:	08024f3c 	.word	0x08024f3c

0800be9c <fs_close_custom>:

void fs_close_custom(struct fs_file *file)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b083      	sub	sp, #12
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(file);
}
 800bea4:	bf00      	nop
 800bea6:	370c      	adds	r7, #12
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bc80      	pop	{r7}
 800beac:	4770      	bx	lr
	...

0800beb0 <ssi_handler>:
#include "clock/clock.h"

const char *ssi_tags[] = { "voltage1", "voltage2", "current", "spower", "netip", "netmask", "netgw", "datetime" };

u16_t ssi_handler(int iIndex, char *pcInsert, int iInsertLen)
{
 800beb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800beb2:	b091      	sub	sp, #68	@ 0x44
 800beb4:	af06      	add	r7, sp, #24
 800beb6:	60f8      	str	r0, [r7, #12]
 800beb8:	60b9      	str	r1, [r7, #8]
 800beba:	607a      	str	r2, [r7, #4]
    int len = 0;
 800bebc:	2300      	movs	r3, #0
 800bebe:	627b      	str	r3, [r7, #36]	@ 0x24
    RTC_TimeTypeDef sTime;
    RTC_DateTypeDef sDate;

    switch (iIndex)
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	2b07      	cmp	r3, #7
 800bec4:	f200 80a8 	bhi.w	800c018 <ssi_handler+0x168>
 800bec8:	a201      	add	r2, pc, #4	@ (adr r2, 800bed0 <ssi_handler+0x20>)
 800beca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bece:	bf00      	nop
 800bed0:	0800bef1 	.word	0x0800bef1
 800bed4:	0800bf13 	.word	0x0800bf13
 800bed8:	0800bf35 	.word	0x0800bf35
 800bedc:	0800bf57 	.word	0x0800bf57
 800bee0:	0800bf87 	.word	0x0800bf87
 800bee4:	0800bf9f 	.word	0x0800bf9f
 800bee8:	0800bfb7 	.word	0x0800bfb7
 800beec:	0800bfcf 	.word	0x0800bfcf
    {
        case 0:
            len = snprintf(pcInsert, iInsertLen, "%.2f", voltage1);
 800bef0:	687c      	ldr	r4, [r7, #4]
 800bef2:	4b50      	ldr	r3, [pc, #320]	@ (800c034 <ssi_handler+0x184>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	4618      	mov	r0, r3
 800bef8:	f7f4 fadc 	bl	80004b4 <__aeabi_f2d>
 800befc:	4602      	mov	r2, r0
 800befe:	460b      	mov	r3, r1
 800bf00:	e9cd 2300 	strd	r2, r3, [sp]
 800bf04:	4a4c      	ldr	r2, [pc, #304]	@ (800c038 <ssi_handler+0x188>)
 800bf06:	4621      	mov	r1, r4
 800bf08:	68b8      	ldr	r0, [r7, #8]
 800bf0a:	f015 ff2d 	bl	8021d68 <sniprintf>
 800bf0e:	6278      	str	r0, [r7, #36]	@ 0x24
            break;
 800bf10:	e089      	b.n	800c026 <ssi_handler+0x176>
        case 1:
            len = snprintf(pcInsert, iInsertLen, "%.2f", voltage2);
 800bf12:	687c      	ldr	r4, [r7, #4]
 800bf14:	4b49      	ldr	r3, [pc, #292]	@ (800c03c <ssi_handler+0x18c>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f7f4 facb 	bl	80004b4 <__aeabi_f2d>
 800bf1e:	4602      	mov	r2, r0
 800bf20:	460b      	mov	r3, r1
 800bf22:	e9cd 2300 	strd	r2, r3, [sp]
 800bf26:	4a44      	ldr	r2, [pc, #272]	@ (800c038 <ssi_handler+0x188>)
 800bf28:	4621      	mov	r1, r4
 800bf2a:	68b8      	ldr	r0, [r7, #8]
 800bf2c:	f015 ff1c 	bl	8021d68 <sniprintf>
 800bf30:	6278      	str	r0, [r7, #36]	@ 0x24
            break;
 800bf32:	e078      	b.n	800c026 <ssi_handler+0x176>
        case 2:
            len = snprintf(pcInsert, iInsertLen, "%.2f", current);
 800bf34:	687c      	ldr	r4, [r7, #4]
 800bf36:	4b42      	ldr	r3, [pc, #264]	@ (800c040 <ssi_handler+0x190>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f7f4 faba 	bl	80004b4 <__aeabi_f2d>
 800bf40:	4602      	mov	r2, r0
 800bf42:	460b      	mov	r3, r1
 800bf44:	e9cd 2300 	strd	r2, r3, [sp]
 800bf48:	4a3b      	ldr	r2, [pc, #236]	@ (800c038 <ssi_handler+0x188>)
 800bf4a:	4621      	mov	r1, r4
 800bf4c:	68b8      	ldr	r0, [r7, #8]
 800bf4e:	f015 ff0b 	bl	8021d68 <sniprintf>
 800bf52:	6278      	str	r0, [r7, #36]	@ 0x24
            break;
 800bf54:	e067      	b.n	800c026 <ssi_handler+0x176>
        case 3:
            len = snprintf(pcInsert, iInsertLen, "%.2f", selected_voltage * current);
 800bf56:	687c      	ldr	r4, [r7, #4]
 800bf58:	4b3a      	ldr	r3, [pc, #232]	@ (800c044 <ssi_handler+0x194>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	4a38      	ldr	r2, [pc, #224]	@ (800c040 <ssi_handler+0x190>)
 800bf5e:	6812      	ldr	r2, [r2, #0]
 800bf60:	4611      	mov	r1, r2
 800bf62:	4618      	mov	r0, r3
 800bf64:	f7f4 ff34 	bl	8000dd0 <__aeabi_fmul>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f7f4 faa2 	bl	80004b4 <__aeabi_f2d>
 800bf70:	4602      	mov	r2, r0
 800bf72:	460b      	mov	r3, r1
 800bf74:	e9cd 2300 	strd	r2, r3, [sp]
 800bf78:	4a2f      	ldr	r2, [pc, #188]	@ (800c038 <ssi_handler+0x188>)
 800bf7a:	4621      	mov	r1, r4
 800bf7c:	68b8      	ldr	r0, [r7, #8]
 800bf7e:	f015 fef3 	bl	8021d68 <sniprintf>
 800bf82:	6278      	str	r0, [r7, #36]	@ 0x24
            break;
 800bf84:	e04f      	b.n	800c026 <ssi_handler+0x176>
        case 4:
            len = snprintf(pcInsert, iInsertLen, "%s", ipaddr_ntoa(&gnetif.ip_addr));
 800bf86:	687c      	ldr	r4, [r7, #4]
 800bf88:	482f      	ldr	r0, [pc, #188]	@ (800c048 <ssi_handler+0x198>)
 800bf8a:	f014 f8c7 	bl	802011c <ip4addr_ntoa>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	4a2e      	ldr	r2, [pc, #184]	@ (800c04c <ssi_handler+0x19c>)
 800bf92:	4621      	mov	r1, r4
 800bf94:	68b8      	ldr	r0, [r7, #8]
 800bf96:	f015 fee7 	bl	8021d68 <sniprintf>
 800bf9a:	6278      	str	r0, [r7, #36]	@ 0x24
            break;
 800bf9c:	e043      	b.n	800c026 <ssi_handler+0x176>
        case 5:
            len = snprintf(pcInsert, iInsertLen, "%s", ipaddr_ntoa(&gnetif.netmask));
 800bf9e:	687c      	ldr	r4, [r7, #4]
 800bfa0:	482b      	ldr	r0, [pc, #172]	@ (800c050 <ssi_handler+0x1a0>)
 800bfa2:	f014 f8bb 	bl	802011c <ip4addr_ntoa>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	4a28      	ldr	r2, [pc, #160]	@ (800c04c <ssi_handler+0x19c>)
 800bfaa:	4621      	mov	r1, r4
 800bfac:	68b8      	ldr	r0, [r7, #8]
 800bfae:	f015 fedb 	bl	8021d68 <sniprintf>
 800bfb2:	6278      	str	r0, [r7, #36]	@ 0x24
            break;
 800bfb4:	e037      	b.n	800c026 <ssi_handler+0x176>
        case 6:
            len = snprintf(pcInsert, iInsertLen, "%s", ipaddr_ntoa(&gnetif.gw));
 800bfb6:	687c      	ldr	r4, [r7, #4]
 800bfb8:	4826      	ldr	r0, [pc, #152]	@ (800c054 <ssi_handler+0x1a4>)
 800bfba:	f014 f8af 	bl	802011c <ip4addr_ntoa>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	4a22      	ldr	r2, [pc, #136]	@ (800c04c <ssi_handler+0x19c>)
 800bfc2:	4621      	mov	r1, r4
 800bfc4:	68b8      	ldr	r0, [r7, #8]
 800bfc6:	f015 fecf 	bl	8021d68 <sniprintf>
 800bfca:	6278      	str	r0, [r7, #36]	@ 0x24
            break;
 800bfcc:	e02b      	b.n	800c026 <ssi_handler+0x176>
        case 7:
            // Получаем текущие дату и время
            HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800bfce:	f107 0318 	add.w	r3, r7, #24
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	4619      	mov	r1, r3
 800bfd6:	4820      	ldr	r0, [pc, #128]	@ (800c058 <ssi_handler+0x1a8>)
 800bfd8:	f7fe fbfc 	bl	800a7d4 <HAL_RTC_GetTime>
            HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800bfdc:	f107 0314 	add.w	r3, r7, #20
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	4619      	mov	r1, r3
 800bfe4:	481c      	ldr	r0, [pc, #112]	@ (800c058 <ssi_handler+0x1a8>)
 800bfe6:	f7fe fccb 	bl	800a980 <HAL_RTC_GetDate>
            len = snprintf(pcInsert, iInsertLen, "%02d.%02d.%04d %02d:%02d:%02d",
 800bfea:	6879      	ldr	r1, [r7, #4]
                           sDate.Date, sDate.Month, 2000 + sDate.Year,
 800bfec:	7dbb      	ldrb	r3, [r7, #22]
            len = snprintf(pcInsert, iInsertLen, "%02d.%02d.%04d %02d:%02d:%02d",
 800bfee:	461e      	mov	r6, r3
                           sDate.Date, sDate.Month, 2000 + sDate.Year,
 800bff0:	7d7b      	ldrb	r3, [r7, #21]
            len = snprintf(pcInsert, iInsertLen, "%02d.%02d.%04d %02d:%02d:%02d",
 800bff2:	461a      	mov	r2, r3
                           sDate.Date, sDate.Month, 2000 + sDate.Year,
 800bff4:	7dfb      	ldrb	r3, [r7, #23]
            len = snprintf(pcInsert, iInsertLen, "%02d.%02d.%04d %02d:%02d:%02d",
 800bff6:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
                           sTime.Hours, sTime.Minutes, sTime.Seconds);
 800bffa:	7e38      	ldrb	r0, [r7, #24]
 800bffc:	7e7c      	ldrb	r4, [r7, #25]
 800bffe:	7ebd      	ldrb	r5, [r7, #26]
            len = snprintf(pcInsert, iInsertLen, "%02d.%02d.%04d %02d:%02d:%02d",
 800c000:	9504      	str	r5, [sp, #16]
 800c002:	9403      	str	r4, [sp, #12]
 800c004:	9002      	str	r0, [sp, #8]
 800c006:	9301      	str	r3, [sp, #4]
 800c008:	9200      	str	r2, [sp, #0]
 800c00a:	4633      	mov	r3, r6
 800c00c:	4a13      	ldr	r2, [pc, #76]	@ (800c05c <ssi_handler+0x1ac>)
 800c00e:	68b8      	ldr	r0, [r7, #8]
 800c010:	f015 feaa 	bl	8021d68 <sniprintf>
 800c014:	6278      	str	r0, [r7, #36]	@ 0x24
            break;
 800c016:	e006      	b.n	800c026 <ssi_handler+0x176>
        default:
            len = snprintf(pcInsert, iInsertLen, "---");
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	4a11      	ldr	r2, [pc, #68]	@ (800c060 <ssi_handler+0x1b0>)
 800c01c:	4619      	mov	r1, r3
 800c01e:	68b8      	ldr	r0, [r7, #8]
 800c020:	f015 fea2 	bl	8021d68 <sniprintf>
 800c024:	6278      	str	r0, [r7, #36]	@ 0x24
    }
    return (u16_t)len;
 800c026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c028:	b29b      	uxth	r3, r3
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	372c      	adds	r7, #44	@ 0x2c
 800c02e:	46bd      	mov	sp, r7
 800c030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c032:	bf00      	nop
 800c034:	20004c64 	.word	0x20004c64
 800c038:	08024fb0 	.word	0x08024fb0
 800c03c:	20004c68 	.word	0x20004c68
 800c040:	20004c6c 	.word	0x20004c6c
 800c044:	20004c70 	.word	0x20004c70
 800c048:	20005128 	.word	0x20005128
 800c04c:	08024fb8 	.word	0x08024fb8
 800c050:	2000512c 	.word	0x2000512c
 800c054:	20005130 	.word	0x20005130
 800c058:	20002b84 	.word	0x20002b84
 800c05c:	08024fbc 	.word	0x08024fbc
 800c060:	08024fdc 	.word	0x08024fdc

0800c064 <httpd_ssi_init_custom>:

void httpd_ssi_init_custom(void)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	af00      	add	r7, sp, #0
    http_set_ssi_handler(ssi_handler, ssi_tags, sizeof(ssi_tags) / sizeof(char*));
 800c068:	2208      	movs	r2, #8
 800c06a:	4903      	ldr	r1, [pc, #12]	@ (800c078 <httpd_ssi_init_custom+0x14>)
 800c06c:	4803      	ldr	r0, [pc, #12]	@ (800c07c <httpd_ssi_init_custom+0x18>)
 800c06e:	f001 fc3f 	bl	800d8f0 <http_set_ssi_handler>
}
 800c072:	bf00      	nop
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop
 800c078:	200000d4 	.word	0x200000d4
 800c07c:	0800beb1 	.word	0x0800beb1

0800c080 <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state*
http_ssi_state_alloc(void)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b082      	sub	sp, #8
 800c084:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 800c086:	20dc      	movs	r0, #220	@ 0xdc
 800c088:	f008 feb0 	bl	8014dec <mem_malloc>
 800c08c:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d004      	beq.n	800c09e <http_ssi_state_alloc+0x1e>
    memset(ret, 0, sizeof(struct http_ssi_state));
 800c094:	22dc      	movs	r2, #220	@ 0xdc
 800c096:	2100      	movs	r1, #0
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f015 ffcb 	bl	8022034 <memset>
  }
  return ret;
 800c09e:	687b      	ldr	r3, [r7, #4]
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3708      	adds	r7, #8
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b082      	sub	sp, #8
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d002      	beq.n	800c0bc <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f008 fd1e 	bl	8014af8 <mem_free>
  }
}
 800c0bc:	bf00      	nop
 800c0be:	3708      	adds	r7, #8
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state* hs)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b082      	sub	sp, #8
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800c0cc:	22b4      	movs	r2, #180	@ 0xb4
 800c0ce:	2100      	movs	r1, #0
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f015 ffaf 	bl	8022034 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800c0d6:	bf00      	nop
 800c0d8:	3708      	adds	r7, #8
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}

0800c0de <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state*
http_state_alloc(void)
{
 800c0de:	b580      	push	{r7, lr}
 800c0e0:	b082      	sub	sp, #8
 800c0e2:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800c0e4:	20b4      	movs	r0, #180	@ 0xb4
 800c0e6:	f008 fe81 	bl	8014dec <mem_malloc>
 800c0ea:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d002      	beq.n	800c0f8 <http_state_alloc+0x1a>
    http_state_init(ret);
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f7ff ffe6 	bl	800c0c4 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800c0f8:	687b      	ldr	r3, [r7, #4]
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	3708      	adds	r7, #8
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}

0800c102 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800c102:	b580      	push	{r7, lr}
 800c104:	b082      	sub	sp, #8
 800c106:	af00      	add	r7, sp, #0
 800c108:	6078      	str	r0, [r7, #4]
  if(hs->handle) {
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	695b      	ldr	r3, [r3, #20]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d007      	beq.n	800c122 <http_state_eof+0x20>
    u32_t needed = LWIP_MAX(1, (ms_needed/100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
      ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	695b      	ldr	r3, [r3, #20]
 800c116:	4618      	mov	r0, r3
 800c118:	f7ff fda2 	bl	800bc60 <fs_close>
    hs->handle = NULL;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2200      	movs	r2, #0
 800c120:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c126:	2b00      	cmp	r3, #0
 800c128:	d007      	beq.n	800c13a <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c12e:	4618      	mov	r0, r3
 800c130:	f7ff ffba 	bl	800c0a8 <http_ssi_state_free>
    hs->ssi = NULL;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2200      	movs	r2, #0
 800c138:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	6a1b      	ldr	r3, [r3, #32]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d007      	beq.n	800c152 <http_state_eof+0x50>
    pbuf_free(hs->req);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6a1b      	ldr	r3, [r3, #32]
 800c146:	4618      	mov	r0, r3
 800c148:	f009 fdac 	bl	8015ca4 <pbuf_free>
    hs->req = NULL;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2200      	movs	r2, #0
 800c150:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800c152:	bf00      	nop
 800c154:	3708      	adds	r7, #8
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}

0800c15a <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800c15a:	b580      	push	{r7, lr}
 800c15c:	b082      	sub	sp, #8
 800c15e:	af00      	add	r7, sp, #0
 800c160:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d005      	beq.n	800c174 <http_state_free+0x1a>
    http_state_eof(hs);
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f7ff ffca 	bl	800c102 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f008 fcc2 	bl	8014af8 <mem_free>
  }
}
 800c174:	bf00      	nop
 800c176:	3708      	adds	r7, #8
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}

0800c17c <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct tcp_pcb *pcb, const void* ptr, u16_t *length, u8_t apiflags)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b086      	sub	sp, #24
 800c180:	af00      	add	r7, sp, #0
 800c182:	60f8      	str	r0, [r7, #12]
 800c184:	60b9      	str	r1, [r7, #8]
 800c186:	607a      	str	r2, [r7, #4]
 800c188:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d106      	bne.n	800c19e <http_write+0x22>
 800c190:	4b2c      	ldr	r3, [pc, #176]	@ (800c244 <http_write+0xc8>)
 800c192:	f240 2252 	movw	r2, #594	@ 0x252
 800c196:	492c      	ldr	r1, [pc, #176]	@ (800c248 <http_write+0xcc>)
 800c198:	482c      	ldr	r0, [pc, #176]	@ (800c24c <http_write+0xd0>)
 800c19a:	f015 fd75 	bl	8021c88 <iprintf>
  len = *length;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	881b      	ldrh	r3, [r3, #0]
 800c1a2:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800c1a4:	8afb      	ldrh	r3, [r7, #22]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d101      	bne.n	800c1ae <http_write+0x32>
    return ERR_OK;
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	e045      	b.n	800c23a <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = tcp_sndbuf(pcb);
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c1b4:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800c1b6:	8aba      	ldrh	r2, [r7, #20]
 800c1b8:	8afb      	ldrh	r3, [r7, #22]
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	d201      	bcs.n	800c1c2 <http_write+0x46>
    len = max_len;
 800c1be:	8abb      	ldrh	r3, [r7, #20]
 800c1c0:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c1c6:	005b      	lsls	r3, r3, #1
 800c1c8:	82bb      	strh	r3, [r7, #20]
  if(len > max_len) {
 800c1ca:	8afa      	ldrh	r2, [r7, #22]
 800c1cc:	8abb      	ldrh	r3, [r7, #20]
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	d901      	bls.n	800c1d6 <http_write+0x5a>
    len = max_len;
 800c1d2:	8abb      	ldrh	r3, [r7, #20]
 800c1d4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying go send %d bytes\n", len));
    err = tcp_write(pcb, ptr, len, apiflags);
 800c1d6:	78fb      	ldrb	r3, [r7, #3]
 800c1d8:	8afa      	ldrh	r2, [r7, #22]
 800c1da:	68b9      	ldr	r1, [r7, #8]
 800c1dc:	68f8      	ldr	r0, [r7, #12]
 800c1de:	f00e fa35 	bl	801a64c <tcp_write>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800c1e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c1ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1ee:	d10f      	bne.n	800c210 <http_write+0x94>
      if ((tcp_sndbuf(pcb) == 0) ||
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d004      	beq.n	800c204 <http_write+0x88>
        (tcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
      if ((tcp_sndbuf(pcb) == 0) ||
 800c200:	2b03      	cmp	r3, #3
 800c202:	d902      	bls.n	800c20a <http_write+0x8e>
          /* no need to try smaller sizes */
          len = 1;
 800c204:	2301      	movs	r3, #1
 800c206:	82fb      	strh	r3, [r7, #22]
 800c208:	e002      	b.n	800c210 <http_write+0x94>
      } else {
        len /= 2;
 800c20a:	8afb      	ldrh	r3, [r7, #22]
 800c20c:	085b      	lsrs	r3, r3, #1
 800c20e:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, 
        ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800c210:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c214:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c218:	d102      	bne.n	800c220 <http_write+0xa4>
 800c21a:	8afb      	ldrh	r3, [r7, #22]
 800c21c:	2b01      	cmp	r3, #1
 800c21e:	d8da      	bhi.n	800c1d6 <http_write+0x5a>

  if (err == ERR_OK) {
 800c220:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d103      	bne.n	800c230 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	8afa      	ldrh	r2, [r7, #22]
 800c22c:	801a      	strh	r2, [r3, #0]
 800c22e:	e002      	b.n	800c236 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2200      	movs	r2, #0
 800c234:	801a      	strh	r2, [r3, #0]
      when all data has been enqueued but the connection stays open for the next
      request */
   tcp_nagle_enable(pcb);
#endif

  return err;
 800c236:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	3718      	adds	r7, #24
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}
 800c242:	bf00      	nop
 800c244:	0802502c 	.word	0x0802502c
 800c248:	08025064 	.word	0x08025064
 800c24c:	08025074 	.word	0x08025074

0800c250 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct tcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b086      	sub	sp, #24
 800c254:	af00      	add	r7, sp, #0
 800c256:	60f8      	str	r0, [r7, #12]
 800c258:	60b9      	str	r1, [r7, #8]
 800c25a:	4613      	mov	r3, r2
 800c25c:	71fb      	strb	r3, [r7, #7]
  err_t err;
  LWIP_DEBUGF(HTTPD_DEBUG, ("Closing connection %p\n", (void*)pcb));

#if LWIP_HTTPD_SUPPORT_POST
  if (hs != NULL) {
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d00c      	beq.n	800c27e <http_close_or_abort_conn+0x2e>
    if ((hs->post_content_len_left != 0)
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d007      	beq.n	800c27e <http_close_or_abort_conn+0x2e>
#if LWIP_HTTPD_POST_MANUAL_WND
       || ((hs->no_auto_wnd != 0) && (hs->unrecved_bytes != 0))
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
       ) {
      /* make sure the post code knows that the connection is closed */
      http_uri_buf[0] = 0;
 800c26e:	4b1f      	ldr	r3, [pc, #124]	@ (800c2ec <http_close_or_abort_conn+0x9c>)
 800c270:	2200      	movs	r2, #0
 800c272:	701a      	strb	r2, [r3, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 800c274:	223f      	movs	r2, #63	@ 0x3f
 800c276:	491d      	ldr	r1, [pc, #116]	@ (800c2ec <http_close_or_abort_conn+0x9c>)
 800c278:	68b8      	ldr	r0, [r7, #8]
 800c27a:	f7f6 fb19 	bl	80028b0 <httpd_post_finished>
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  tcp_arg(pcb, NULL);
 800c27e:	2100      	movs	r1, #0
 800c280:	68f8      	ldr	r0, [r7, #12]
 800c282:	f00b fb1d 	bl	80178c0 <tcp_arg>
  tcp_recv(pcb, NULL);
 800c286:	2100      	movs	r1, #0
 800c288:	68f8      	ldr	r0, [r7, #12]
 800c28a:	f00b fb29 	bl	80178e0 <tcp_recv>
  tcp_err(pcb, NULL);
 800c28e:	2100      	movs	r1, #0
 800c290:	68f8      	ldr	r0, [r7, #12]
 800c292:	f00b fb67 	bl	8017964 <tcp_err>
  tcp_poll(pcb, NULL, 0);
 800c296:	2200      	movs	r2, #0
 800c298:	2100      	movs	r1, #0
 800c29a:	68f8      	ldr	r0, [r7, #12]
 800c29c:	f00b fb9a 	bl	80179d4 <tcp_poll>
  tcp_sent(pcb, NULL);
 800c2a0:	2100      	movs	r1, #0
 800c2a2:	68f8      	ldr	r0, [r7, #12]
 800c2a4:	f00b fb3e 	bl	8017924 <tcp_sent>
  if (hs != NULL) {
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d002      	beq.n	800c2b4 <http_close_or_abort_conn+0x64>
    http_state_free(hs);
 800c2ae:	68b8      	ldr	r0, [r7, #8]
 800c2b0:	f7ff ff53 	bl	800c15a <http_state_free>
  }

  if (abort_conn) {
 800c2b4:	79fb      	ldrb	r3, [r7, #7]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d004      	beq.n	800c2c4 <http_close_or_abort_conn+0x74>
    tcp_abort(pcb);
 800c2ba:	68f8      	ldr	r0, [r7, #12]
 800c2bc:	f00a fb3c 	bl	8016938 <tcp_abort>
    return ERR_OK;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	e00f      	b.n	800c2e4 <http_close_or_abort_conn+0x94>
  }
  err = tcp_close(pcb);
 800c2c4:	68f8      	ldr	r0, [r7, #12]
 800c2c6:	f00a fa6d 	bl	80167a4 <tcp_close>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800c2ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d004      	beq.n	800c2e0 <http_close_or_abort_conn+0x90>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void*)pcb));
    /* error closing, try again later in poll */
    tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800c2d6:	2204      	movs	r2, #4
 800c2d8:	4905      	ldr	r1, [pc, #20]	@ (800c2f0 <http_close_or_abort_conn+0xa0>)
 800c2da:	68f8      	ldr	r0, [r7, #12]
 800c2dc:	f00b fb7a 	bl	80179d4 <tcp_poll>
  }
  return err;
 800c2e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3718      	adds	r7, #24
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}
 800c2ec:	20008790 	.word	0x20008790
 800c2f0:	0800d617 	.word	0x0800d617

0800c2f4 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct tcp_pcb *pcb, struct http_state *hs)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b082      	sub	sp, #8
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
 800c2fc:	6039      	str	r1, [r7, #0]
   return http_close_or_abort_conn(pcb, hs, 0);
 800c2fe:	2200      	movs	r2, #0
 800c300:	6839      	ldr	r1, [r7, #0]
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f7ff ffa4 	bl	800c250 <http_close_or_abort_conn>
 800c308:	4603      	mov	r3, r0
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3708      	adds	r7, #8
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}

0800c312 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct tcp_pcb *pcb, struct http_state *hs)
{
 800c312:	b580      	push	{r7, lr}
 800c314:	b082      	sub	sp, #8
 800c316:	af00      	add	r7, sp, #0
 800c318:	6078      	str	r0, [r7, #4]
 800c31a:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    tcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800c31c:	6839      	ldr	r1, [r7, #0]
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f7ff ffe8 	bl	800c2f4 <http_close_conn>
  }
}
 800c324:	bf00      	nop
 800c326:	3708      	adds	r7, #8
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b086      	sub	sp, #24
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if(!params || (params[0] == '\0')) {
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d003      	beq.n	800c344 <extract_uri_parameters+0x18>
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	781b      	ldrb	r3, [r3, #0]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d101      	bne.n	800c348 <extract_uri_parameters+0x1c>
      return(0);
 800c344:	2300      	movs	r3, #0
 800c346:	e04b      	b.n	800c3e0 <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for(loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800c34c:	2300      	movs	r3, #0
 800c34e:	613b      	str	r3, [r7, #16]
 800c350:	e03f      	b.n	800c3d2 <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	693a      	ldr	r2, [r7, #16]
 800c356:	320c      	adds	r2, #12
 800c358:	6979      	ldr	r1, [r7, #20]
 800c35a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 800c362:	2126      	movs	r1, #38	@ 0x26
 800c364:	6978      	ldr	r0, [r7, #20]
 800c366:	f015 fe6d 	bl	8022044 <strchr>
 800c36a:	6178      	str	r0, [r7, #20]
    if(pair) {
 800c36c:	697b      	ldr	r3, [r7, #20]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d006      	beq.n	800c380 <extract_uri_parameters+0x54>
      *pair = '\0';
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	2200      	movs	r2, #0
 800c376:	701a      	strb	r2, [r3, #0]
      pair++;
 800c378:	697b      	ldr	r3, [r7, #20]
 800c37a:	3301      	adds	r3, #1
 800c37c:	617b      	str	r3, [r7, #20]
 800c37e:	e00c      	b.n	800c39a <extract_uri_parameters+0x6e>
    } else {
       /* We didn't find a new parameter so find the end of the URI and
        * replace the space with a '\0' */
        pair = strchr(equals, ' ');
 800c380:	2120      	movs	r1, #32
 800c382:	68f8      	ldr	r0, [r7, #12]
 800c384:	f015 fe5e 	bl	8022044 <strchr>
 800c388:	6178      	str	r0, [r7, #20]
        if(pair) {
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d002      	beq.n	800c396 <extract_uri_parameters+0x6a>
            *pair = '\0';
 800c390:	697b      	ldr	r3, [r7, #20]
 800c392:	2200      	movs	r2, #0
 800c394:	701a      	strb	r2, [r3, #0]
        }

        /* Revert to NULL so that we exit the loop as expected. */
        pair = NULL;
 800c396:	2300      	movs	r3, #0
 800c398:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 800c39a:	213d      	movs	r1, #61	@ 0x3d
 800c39c:	68f8      	ldr	r0, [r7, #12]
 800c39e:	f015 fe51 	bl	8022044 <strchr>
 800c3a2:	60f8      	str	r0, [r7, #12]
    if(equals) {
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d00a      	beq.n	800c3c0 <extract_uri_parameters+0x94>
      *equals = '\0';
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	1c59      	adds	r1, r3, #1
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	693a      	ldr	r2, [r7, #16]
 800c3b8:	321c      	adds	r2, #28
 800c3ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c3be:	e005      	b.n	800c3cc <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	693a      	ldr	r2, [r7, #16]
 800c3c4:	321c      	adds	r2, #28
 800c3c6:	2100      	movs	r1, #0
 800c3c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	3301      	adds	r3, #1
 800c3d0:	613b      	str	r3, [r7, #16]
 800c3d2:	693b      	ldr	r3, [r7, #16]
 800c3d4:	2b0f      	cmp	r3, #15
 800c3d6:	dc02      	bgt.n	800c3de <extract_uri_parameters+0xb2>
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d1b9      	bne.n	800c352 <extract_uri_parameters+0x26>
    }
  }

  return loop;
 800c3de:	693b      	ldr	r3, [r7, #16]
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3718      	adds	r7, #24
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}

0800c3e8 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b086      	sub	sp, #24
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d106      	bne.n	800c404 <get_tag_insert+0x1c>
 800c3f6:	4b51      	ldr	r3, [pc, #324]	@ (800c53c <get_tag_insert+0x154>)
 800c3f8:	f240 323d 	movw	r2, #829	@ 0x33d
 800c3fc:	4950      	ldr	r1, [pc, #320]	@ (800c540 <get_tag_insert+0x158>)
 800c3fe:	4851      	ldr	r0, [pc, #324]	@ (800c544 <get_tag_insert+0x15c>)
 800c400:	f015 fc42 	bl	8021c88 <iprintf>
  ssi = hs->ssi;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c408:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800c40a:	693b      	ldr	r3, [r7, #16]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d106      	bne.n	800c41e <get_tag_insert+0x36>
 800c410:	4b4a      	ldr	r3, [pc, #296]	@ (800c53c <get_tag_insert+0x154>)
 800c412:	f240 323f 	movw	r2, #831	@ 0x33f
 800c416:	494c      	ldr	r1, [pc, #304]	@ (800c548 <get_tag_insert+0x160>)
 800c418:	484a      	ldr	r0, [pc, #296]	@ (800c544 <get_tag_insert+0x15c>)
 800c41a:	f015 fc35 	bl	8021c88 <iprintf>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if(g_pfnSSIHandler
 800c41e:	4b4b      	ldr	r3, [pc, #300]	@ (800c54c <get_tag_insert+0x164>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d02e      	beq.n	800c484 <get_tag_insert+0x9c>
#if !LWIP_HTTPD_SSI_RAW
     && g_ppcTags && g_iNumTags
 800c426:	4b4a      	ldr	r3, [pc, #296]	@ (800c550 <get_tag_insert+0x168>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d02a      	beq.n	800c484 <get_tag_insert+0x9c>
 800c42e:	4b49      	ldr	r3, [pc, #292]	@ (800c554 <get_tag_insert+0x16c>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d026      	beq.n	800c484 <get_tag_insert+0x9c>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for(tag = 0; tag < g_iNumTags; tag++) {
 800c436:	2300      	movs	r3, #0
 800c438:	617b      	str	r3, [r7, #20]
 800c43a:	e01e      	b.n	800c47a <get_tag_insert+0x92>
      if(strcmp(ssi->tag_name, g_ppcTags[tag]) == 0)
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	f103 0011 	add.w	r0, r3, #17
 800c442:	4b43      	ldr	r3, [pc, #268]	@ (800c550 <get_tag_insert+0x168>)
 800c444:	681a      	ldr	r2, [r3, #0]
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	009b      	lsls	r3, r3, #2
 800c44a:	4413      	add	r3, r2
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	4619      	mov	r1, r3
 800c450:	f7f3 feba 	bl	80001c8 <strcmp>
 800c454:	4603      	mov	r3, r0
 800c456:	2b00      	cmp	r3, #0
 800c458:	d10c      	bne.n	800c474 <get_tag_insert+0x8c>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = g_pfnSSIHandler(tag, ssi->tag_insert,
 800c45a:	4b3c      	ldr	r3, [pc, #240]	@ (800c54c <get_tag_insert+0x164>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	693a      	ldr	r2, [r7, #16]
 800c460:	f102 011a 	add.w	r1, r2, #26
 800c464:	22c0      	movs	r2, #192	@ 0xc0
 800c466:	6978      	ldr	r0, [r7, #20]
 800c468:	4798      	blx	r3
 800c46a:	4603      	mov	r3, r0
 800c46c:	461a      	mov	r2, r3
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	81da      	strh	r2, [r3, #14]
           );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 800c472:	e060      	b.n	800c536 <get_tag_insert+0x14e>
    for(tag = 0; tag < g_iNumTags; tag++) {
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	3301      	adds	r3, #1
 800c478:	617b      	str	r3, [r7, #20]
 800c47a:	4b36      	ldr	r3, [pc, #216]	@ (800c554 <get_tag_insert+0x16c>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	697a      	ldr	r2, [r7, #20]
 800c480:	429a      	cmp	r2, r3
 800c482:	dbdb      	blt.n	800c43c <get_tag_insert+0x54>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 800c484:	693b      	ldr	r3, [r7, #16]
 800c486:	3311      	adds	r3, #17
 800c488:	4618      	mov	r0, r3
 800c48a:	f7f3 fea7 	bl	80001dc <strlen>
 800c48e:	4603      	mov	r3, r0
 800c490:	2ba6      	cmp	r3, #166	@ 0xa6
 800c492:	d818      	bhi.n	800c4c6 <get_tag_insert+0xde>
 800c494:	693b      	ldr	r3, [r7, #16]
 800c496:	3311      	adds	r3, #17
 800c498:	4618      	mov	r0, r3
 800c49a:	f7f3 fe9f 	bl	80001dc <strlen>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	2b09      	cmp	r3, #9
 800c4a2:	d810      	bhi.n	800c4c6 <get_tag_insert+0xde>
 800c4a4:	693b      	ldr	r3, [r7, #16]
 800c4a6:	3311      	adds	r3, #17
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	f7f3 fe97 	bl	80001dc <strlen>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	2ba6      	cmp	r3, #166	@ 0xa6
 800c4b2:	d806      	bhi.n	800c4c2 <get_tag_insert+0xda>
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	3311      	adds	r3, #17
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f7f3 fe8f 	bl	80001dc <strlen>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	e002      	b.n	800c4c8 <get_tag_insert+0xe0>
 800c4c2:	23a7      	movs	r3, #167	@ 0xa7
 800c4c4:	e000      	b.n	800c4c8 <get_tag_insert+0xe0>
 800c4c6:	2309      	movs	r3, #9
 800c4c8:	60fb      	str	r3, [r7, #12]
    LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 800c4ca:	693b      	ldr	r3, [r7, #16]
 800c4cc:	331a      	adds	r3, #26
 800c4ce:	2212      	movs	r2, #18
 800c4d0:	4921      	ldr	r1, [pc, #132]	@ (800c558 <get_tag_insert+0x170>)
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f015 fed3 	bl	802227e <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	f103 002c 	add.w	r0, r3, #44	@ 0x2c
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	3311      	adds	r3, #17
 800c4e2:	68fa      	ldr	r2, [r7, #12]
 800c4e4:	4619      	mov	r1, r3
 800c4e6:	f015 feca 	bl	802227e <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	3312      	adds	r3, #18
 800c4ee:	3318      	adds	r3, #24
 800c4f0:	693a      	ldr	r2, [r7, #16]
 800c4f2:	4413      	add	r3, r2
 800c4f4:	3302      	adds	r3, #2
 800c4f6:	2207      	movs	r2, #7
 800c4f8:	4918      	ldr	r1, [pc, #96]	@ (800c55c <get_tag_insert+0x174>)
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f015 febf 	bl	802227e <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	3319      	adds	r3, #25
 800c504:	693a      	ldr	r2, [r7, #16]
 800c506:	4413      	add	r3, r2
 800c508:	2200      	movs	r2, #0
 800c50a:	769a      	strb	r2, [r3, #26]

  len = strlen(ssi->tag_insert);
 800c50c:	693b      	ldr	r3, [r7, #16]
 800c50e:	331a      	adds	r3, #26
 800c510:	4618      	mov	r0, r3
 800c512:	f7f3 fe63 	bl	80001dc <strlen>
 800c516:	60f8      	str	r0, [r7, #12]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c51e:	d306      	bcc.n	800c52e <get_tag_insert+0x146>
 800c520:	4b06      	ldr	r3, [pc, #24]	@ (800c53c <get_tag_insert+0x154>)
 800c522:	f44f 725e 	mov.w	r2, #888	@ 0x378
 800c526:	490e      	ldr	r1, [pc, #56]	@ (800c560 <get_tag_insert+0x178>)
 800c528:	4806      	ldr	r0, [pc, #24]	@ (800c544 <get_tag_insert+0x15c>)
 800c52a:	f015 fbad 	bl	8021c88 <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	b29a      	uxth	r2, r3
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	81da      	strh	r2, [r3, #14]
}
 800c536:	3718      	adds	r7, #24
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}
 800c53c:	0802502c 	.word	0x0802502c
 800c540:	0802509c 	.word	0x0802509c
 800c544:	08025074 	.word	0x08025074
 800c548:	080250a8 	.word	0x080250a8
 800c54c:	200087d0 	.word	0x200087d0
 800c550:	200087d8 	.word	0x200087d8
 800c554:	200087d4 	.word	0x200087d4
 800c558:	080250b4 	.word	0x080250b4
 800c55c:	080250c8 	.word	0x080250c8
 800c560:	080250d0 	.word	0x080250d0

0800c564 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct tcp_pcb *pcb, struct http_state *hs)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b084      	sub	sp, #16
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
 800c56c:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	695b      	ldr	r3, [r3, #20]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d105      	bne.n	800c582 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800c576:	6839      	ldr	r1, [r7, #0]
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f7ff feca 	bl	800c312 <http_eof>
    return 0;
 800c57e:	2300      	movs	r3, #0
 800c580:	e016      	b.n	800c5b0 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	695b      	ldr	r3, [r3, #20]
 800c586:	4618      	mov	r0, r3
 800c588:	f7ff fb79 	bl	800bc7e <fs_bytes_left>
 800c58c:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	2b00      	cmp	r3, #0
 800c592:	dc05      	bgt.n	800c5a0 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800c594:	6839      	ldr	r1, [r7, #0]
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f7ff febb 	bl	800c312 <http_eof>
    return 0;
 800c59c:	2300      	movs	r3, #0
 800c59e:	e007      	b.n	800c5b0 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800c5a0:	4b05      	ldr	r3, [pc, #20]	@ (800c5b8 <http_check_eof+0x54>)
 800c5a2:	f240 42c5 	movw	r2, #1221	@ 0x4c5
 800c5a6:	4905      	ldr	r1, [pc, #20]	@ (800c5bc <http_check_eof+0x58>)
 800c5a8:	4805      	ldr	r0, [pc, #20]	@ (800c5c0 <http_check_eof+0x5c>)
 800c5aa:	f015 fb6d 	bl	8021c88 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800c5ae:	2301      	movs	r3, #1
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3710      	adds	r7, #16
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}
 800c5b8:	0802502c 	.word	0x0802502c
 800c5bc:	080250e0 	.word	0x080250e0
 800c5c0:	08025074 	.word	0x08025074

0800c5c4 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct tcp_pcb *pcb, struct http_state *hs)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b084      	sub	sp, #16
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
 800c5cc:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5d6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c5da:	4293      	cmp	r3, r2
 800c5dc:	d803      	bhi.n	800c5e6 <http_send_data_nonssi+0x22>
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5e2:	b29b      	uxth	r3, r3
 800c5e4:	e001      	b.n	800c5ea <http_send_data_nonssi+0x26>
 800c5e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c5ea:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	6999      	ldr	r1, [r3, #24]
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	bf14      	ite	ne
 800c5f8:	2301      	movne	r3, #1
 800c5fa:	2300      	moveq	r3, #0
 800c5fc:	b2db      	uxtb	r3, r3
 800c5fe:	f107 020c 	add.w	r2, r7, #12
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f7ff fdba 	bl	800c17c <http_write>
 800c608:	4603      	mov	r3, r0
 800c60a:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800c60c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d10d      	bne.n	800c630 <http_send_data_nonssi+0x6c>
    data_to_send = 1;
 800c614:	2301      	movs	r3, #1
 800c616:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	699b      	ldr	r3, [r3, #24]
 800c61c:	89ba      	ldrh	r2, [r7, #12]
 800c61e:	441a      	add	r2, r3
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c628:	89ba      	ldrh	r2, [r7, #12]
 800c62a:	1a9a      	subs	r2, r3, r2
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  return data_to_send;
 800c630:	7bfb      	ldrb	r3, [r7, #15]
}
 800c632:	4618      	mov	r0, r3
 800c634:	3710      	adds	r7, #16
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}
	...

0800c63c <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct tcp_pcb *pcb, struct http_state *hs)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b086      	sub	sp, #24
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
 800c644:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 800c646:	2300      	movs	r3, #0
 800c648:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 800c64a:	2300      	movs	r3, #0
 800c64c:	75bb      	strb	r3, [r7, #22]

  struct http_ssi_state *ssi = hs->ssi;
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c652:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d106      	bne.n	800c668 <http_send_data_ssi+0x2c>
 800c65a:	4b8e      	ldr	r3, [pc, #568]	@ (800c894 <http_send_data_ssi+0x258>)
 800c65c:	f240 42f2 	movw	r2, #1266	@ 0x4f2
 800c660:	498d      	ldr	r1, [pc, #564]	@ (800c898 <http_send_data_ssi+0x25c>)
 800c662:	488e      	ldr	r0, [pc, #568]	@ (800c89c <http_send_data_ssi+0x260>)
 800c664:	f015 fb10 	bl	8021c88 <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = tcp_sndbuf(pcb);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c66e:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if(ssi->parsed > hs->file) {
 800c670:	693b      	ldr	r3, [r7, #16]
 800c672:	681a      	ldr	r2, [r3, #0]
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	699b      	ldr	r3, [r3, #24]
 800c678:	429a      	cmp	r2, r3
 800c67a:	f240 824d 	bls.w	800cb18 <http_send_data_ssi+0x4dc>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800c67e:	693b      	ldr	r3, [r7, #16]
 800c680:	681a      	ldr	r2, [r3, #0]
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	699b      	ldr	r3, [r3, #24]
 800c686:	1ad3      	subs	r3, r2, r3
 800c688:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c68c:	4293      	cmp	r3, r2
 800c68e:	dc06      	bgt.n	800c69e <http_send_data_ssi+0x62>
 800c690:	693b      	ldr	r3, [r7, #16]
 800c692:	681a      	ldr	r2, [r3, #0]
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	699b      	ldr	r3, [r3, #24]
 800c698:	1ad3      	subs	r3, r2, r3
 800c69a:	b29b      	uxth	r3, r3
 800c69c:	e001      	b.n	800c6a2 <http_send_data_ssi+0x66>
 800c69e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c6a2:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	6999      	ldr	r1, [r3, #24]
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	bf14      	ite	ne
 800c6b0:	2301      	movne	r3, #1
 800c6b2:	2300      	moveq	r3, #0
 800c6b4:	b2db      	uxtb	r3, r3
 800c6b6:	f107 020e 	add.w	r2, r7, #14
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	f7ff fd5e 	bl	800c17c <http_write>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800c6c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d10d      	bne.n	800c6e8 <http_send_data_ssi+0xac>
      data_to_send = 1;
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	699b      	ldr	r3, [r3, #24]
 800c6d4:	89fa      	ldrh	r2, [r7, #14]
 800c6d6:	441a      	add	r2, r3
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6e0:	89fa      	ldrh	r2, [r7, #14]
 800c6e2:	1a9a      	subs	r2, r3, r2
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* If the send buffer is full, return now. */
    if(tcp_sndbuf(pcb) == 0) {
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	f040 8212 	bne.w	800cb18 <http_send_data_ssi+0x4dc>
      return data_to_send;
 800c6f4:	7dbb      	ldrb	r3, [r7, #22]
 800c6f6:	e25b      	b.n	800cbb0 <http_send_data_ssi+0x574>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while((ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 800c6f8:	89fb      	ldrh	r3, [r7, #14]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d101      	bne.n	800c702 <http_send_data_ssi+0xc6>
      return data_to_send;
 800c6fe:	7dbb      	ldrb	r3, [r7, #22]
 800c700:	e256      	b.n	800cbb0 <http_send_data_ssi+0x574>
    }
    switch(ssi->tag_state) {
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	f893 30db 	ldrb.w	r3, [r3, #219]	@ 0xdb
 800c708:	2b04      	cmp	r3, #4
 800c70a:	f200 8200 	bhi.w	800cb0e <http_send_data_ssi+0x4d2>
 800c70e:	a201      	add	r2, pc, #4	@ (adr r2, 800c714 <http_send_data_ssi+0xd8>)
 800c710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c714:	0800c729 	.word	0x0800c729
 800c718:	0800c75b 	.word	0x0800c75b
 800c71c:	0800c7b3 	.word	0x0800c7b3
 800c720:	0800c8ef 	.word	0x0800c8ef
 800c724:	0800ca29 	.word	0x0800ca29
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        if(*ssi->parsed == g_pcTagLeadIn[0]) {
 800c728:	693b      	ldr	r3, [r7, #16]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	781a      	ldrb	r2, [r3, #0]
 800c72e:	4b5c      	ldr	r3, [pc, #368]	@ (800c8a0 <http_send_data_ssi+0x264>)
 800c730:	781b      	ldrb	r3, [r3, #0]
 800c732:	429a      	cmp	r2, r3
 800c734:	d106      	bne.n	800c744 <http_send_data_ssi+0x108>
          /* We found what could be the lead-in for a new tag so change
           * state appropriately. */
          ssi->tag_state = TAG_LEADIN;
 800c736:	693b      	ldr	r3, [r7, #16]
 800c738:	2201      	movs	r2, #1
 800c73a:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
          ssi->tag_index = 1;
 800c73e:	693b      	ldr	r3, [r7, #16]
 800c740:	2201      	movs	r2, #1
 800c742:	819a      	strh	r2, [r3, #12]
          ssi->tag_started = ssi->parsed;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	689b      	ldr	r3, [r3, #8]
 800c748:	1e5a      	subs	r2, r3, #1
 800c74a:	693b      	ldr	r3, [r7, #16]
 800c74c:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 800c74e:	693b      	ldr	r3, [r7, #16]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	1c5a      	adds	r2, r3, #1
 800c754:	693b      	ldr	r3, [r7, #16]
 800c756:	601a      	str	r2, [r3, #0]
        break;
 800c758:	e1de      	b.n	800cb18 <http_send_data_ssi+0x4dc>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if(ssi->tag_index == LEN_TAG_LEAD_IN) {
 800c75a:	693b      	ldr	r3, [r7, #16]
 800c75c:	899b      	ldrh	r3, [r3, #12]
 800c75e:	2b05      	cmp	r3, #5
 800c760:	d107      	bne.n	800c772 <http_send_data_ssi+0x136>
          ssi->tag_index = 0;
 800c762:	693b      	ldr	r3, [r7, #16]
 800c764:	2200      	movs	r2, #0
 800c766:	819a      	strh	r2, [r3, #12]
          ssi->tag_state = TAG_FOUND;
 800c768:	693b      	ldr	r3, [r7, #16]
 800c76a:	2202      	movs	r2, #2
 800c76c:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
          ssi->parsed++;
        }
        break;
 800c770:	e1d2      	b.n	800cb18 <http_send_data_ssi+0x4dc>
          if(*ssi->parsed == g_pcTagLeadIn[ssi->tag_index]) {
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	781a      	ldrb	r2, [r3, #0]
 800c778:	4949      	ldr	r1, [pc, #292]	@ (800c8a0 <http_send_data_ssi+0x264>)
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	899b      	ldrh	r3, [r3, #12]
 800c77e:	440b      	add	r3, r1
 800c780:	781b      	ldrb	r3, [r3, #0]
 800c782:	429a      	cmp	r2, r3
 800c784:	d106      	bne.n	800c794 <http_send_data_ssi+0x158>
            ssi->tag_index++;
 800c786:	693b      	ldr	r3, [r7, #16]
 800c788:	899b      	ldrh	r3, [r3, #12]
 800c78a:	3301      	adds	r3, #1
 800c78c:	b29a      	uxth	r2, r3
 800c78e:	693b      	ldr	r3, [r7, #16]
 800c790:	819a      	strh	r2, [r3, #12]
 800c792:	e003      	b.n	800c79c <http_send_data_ssi+0x160>
            ssi->tag_state = TAG_NONE;
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	2200      	movs	r2, #0
 800c798:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
          ssi->parse_left--;
 800c79c:	693b      	ldr	r3, [r7, #16]
 800c79e:	689b      	ldr	r3, [r3, #8]
 800c7a0:	1e5a      	subs	r2, r3, #1
 800c7a2:	693b      	ldr	r3, [r7, #16]
 800c7a4:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800c7a6:	693b      	ldr	r3, [r7, #16]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	1c5a      	adds	r2, r3, #1
 800c7ac:	693b      	ldr	r3, [r7, #16]
 800c7ae:	601a      	str	r2, [r3, #0]
        break;
 800c7b0:	e1b2      	b.n	800cb18 <http_send_data_ssi+0x4dc>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800c7b2:	693b      	ldr	r3, [r7, #16]
 800c7b4:	899b      	ldrh	r3, [r3, #12]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d11e      	bne.n	800c7f8 <http_send_data_ssi+0x1bc>
 800c7ba:	693b      	ldr	r3, [r7, #16]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	781b      	ldrb	r3, [r3, #0]
 800c7c0:	2b20      	cmp	r3, #32
 800c7c2:	d00e      	beq.n	800c7e2 <http_send_data_ssi+0x1a6>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800c7c4:	693b      	ldr	r3, [r7, #16]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	781b      	ldrb	r3, [r3, #0]
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800c7ca:	2b09      	cmp	r3, #9
 800c7cc:	d009      	beq.n	800c7e2 <http_send_data_ssi+0x1a6>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800c7ce:	693b      	ldr	r3, [r7, #16]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	2b0a      	cmp	r3, #10
 800c7d6:	d004      	beq.n	800c7e2 <http_send_data_ssi+0x1a6>
           (*ssi->parsed == '\r'))) {
 800c7d8:	693b      	ldr	r3, [r7, #16]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	781b      	ldrb	r3, [r3, #0]
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800c7de:	2b0d      	cmp	r3, #13
 800c7e0:	d10a      	bne.n	800c7f8 <http_send_data_ssi+0x1bc>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800c7e2:	693b      	ldr	r3, [r7, #16]
 800c7e4:	689b      	ldr	r3, [r3, #8]
 800c7e6:	1e5a      	subs	r2, r3, #1
 800c7e8:	693b      	ldr	r3, [r7, #16]
 800c7ea:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800c7ec:	693b      	ldr	r3, [r7, #16]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	1c5a      	adds	r2, r3, #1
 800c7f2:	693b      	ldr	r3, [r7, #16]
 800c7f4:	601a      	str	r2, [r3, #0]
          break;
 800c7f6:	e18f      	b.n	800cb18 <http_send_data_ssi+0x4dc>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if((*ssi->parsed == g_pcTagLeadOut[0]) ||
 800c7f8:	693b      	ldr	r3, [r7, #16]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	781a      	ldrb	r2, [r3, #0]
 800c7fe:	4b29      	ldr	r3, [pc, #164]	@ (800c8a4 <http_send_data_ssi+0x268>)
 800c800:	781b      	ldrb	r3, [r3, #0]
 800c802:	429a      	cmp	r2, r3
 800c804:	d013      	beq.n	800c82e <http_send_data_ssi+0x1f2>
           (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	781b      	ldrb	r3, [r3, #0]
        if((*ssi->parsed == g_pcTagLeadOut[0]) ||
 800c80c:	2b20      	cmp	r3, #32
 800c80e:	d00e      	beq.n	800c82e <http_send_data_ssi+0x1f2>
           (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800c810:	693b      	ldr	r3, [r7, #16]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	781b      	ldrb	r3, [r3, #0]
 800c816:	2b09      	cmp	r3, #9
 800c818:	d009      	beq.n	800c82e <http_send_data_ssi+0x1f2>
           (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800c81a:	693b      	ldr	r3, [r7, #16]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	781b      	ldrb	r3, [r3, #0]
           (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800c820:	2b0a      	cmp	r3, #10
 800c822:	d004      	beq.n	800c82e <http_send_data_ssi+0x1f2>
           (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	781b      	ldrb	r3, [r3, #0]
 800c82a:	2b0d      	cmp	r3, #13
 800c82c:	d13e      	bne.n	800c8ac <http_send_data_ssi+0x270>

          if(ssi->tag_index == 0) {
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	899b      	ldrh	r3, [r3, #12]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d104      	bne.n	800c840 <http_send_data_ssi+0x204>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 800c836:	693b      	ldr	r3, [r7, #16]
 800c838:	2200      	movs	r2, #0
 800c83a:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
          if(ssi->tag_index == 0) {
 800c83e:	e04b      	b.n	800c8d8 <http_send_data_ssi+0x29c>
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 800c840:	693b      	ldr	r3, [r7, #16]
 800c842:	2203      	movs	r2, #3
 800c844:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 800c848:	693b      	ldr	r3, [r7, #16]
 800c84a:	899b      	ldrh	r3, [r3, #12]
 800c84c:	2bff      	cmp	r3, #255	@ 0xff
 800c84e:	d906      	bls.n	800c85e <http_send_data_ssi+0x222>
 800c850:	4b10      	ldr	r3, [pc, #64]	@ (800c894 <http_send_data_ssi+0x258>)
 800c852:	f240 525d 	movw	r2, #1373	@ 0x55d
 800c856:	4914      	ldr	r1, [pc, #80]	@ (800c8a8 <http_send_data_ssi+0x26c>)
 800c858:	4810      	ldr	r0, [pc, #64]	@ (800c89c <http_send_data_ssi+0x260>)
 800c85a:	f015 fa15 	bl	8021c88 <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 800c85e:	693b      	ldr	r3, [r7, #16]
 800c860:	899b      	ldrh	r3, [r3, #12]
 800c862:	b2da      	uxtb	r2, r3
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	741a      	strb	r2, [r3, #16]
            ssi->tag_name[ssi->tag_index] = '\0';
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	899b      	ldrh	r3, [r3, #12]
 800c86c:	461a      	mov	r2, r3
 800c86e:	693b      	ldr	r3, [r7, #16]
 800c870:	4413      	add	r3, r2
 800c872:	2200      	movs	r2, #0
 800c874:	745a      	strb	r2, [r3, #17]
            if(*ssi->parsed == g_pcTagLeadOut[0]) {
 800c876:	693b      	ldr	r3, [r7, #16]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	781a      	ldrb	r2, [r3, #0]
 800c87c:	4b09      	ldr	r3, [pc, #36]	@ (800c8a4 <http_send_data_ssi+0x268>)
 800c87e:	781b      	ldrb	r3, [r3, #0]
 800c880:	429a      	cmp	r2, r3
 800c882:	d103      	bne.n	800c88c <http_send_data_ssi+0x250>
              ssi->tag_index = 1;
 800c884:	693b      	ldr	r3, [r7, #16]
 800c886:	2201      	movs	r2, #1
 800c888:	819a      	strh	r2, [r3, #12]
          if(ssi->tag_index == 0) {
 800c88a:	e025      	b.n	800c8d8 <http_send_data_ssi+0x29c>
            } else {
              ssi->tag_index = 0;
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	2200      	movs	r2, #0
 800c890:	819a      	strh	r2, [r3, #12]
          if(ssi->tag_index == 0) {
 800c892:	e021      	b.n	800c8d8 <http_send_data_ssi+0x29c>
 800c894:	0802502c 	.word	0x0802502c
 800c898:	080250a8 	.word	0x080250a8
 800c89c:	08025074 	.word	0x08025074
 800c8a0:	08025020 	.word	0x08025020
 800c8a4:	08025028 	.word	0x08025028
 800c8a8:	08025118 	.word	0x08025118
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if(ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 800c8ac:	693b      	ldr	r3, [r7, #16]
 800c8ae:	899b      	ldrh	r3, [r3, #12]
 800c8b0:	2b07      	cmp	r3, #7
 800c8b2:	d80d      	bhi.n	800c8d0 <http_send_data_ssi+0x294>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 800c8b4:	693b      	ldr	r3, [r7, #16]
 800c8b6:	681a      	ldr	r2, [r3, #0]
 800c8b8:	693b      	ldr	r3, [r7, #16]
 800c8ba:	899b      	ldrh	r3, [r3, #12]
 800c8bc:	1c59      	adds	r1, r3, #1
 800c8be:	b288      	uxth	r0, r1
 800c8c0:	6939      	ldr	r1, [r7, #16]
 800c8c2:	8188      	strh	r0, [r1, #12]
 800c8c4:	4619      	mov	r1, r3
 800c8c6:	7812      	ldrb	r2, [r2, #0]
 800c8c8:	693b      	ldr	r3, [r7, #16]
 800c8ca:	440b      	add	r3, r1
 800c8cc:	745a      	strb	r2, [r3, #17]
 800c8ce:	e003      	b.n	800c8d8 <http_send_data_ssi+0x29c>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 800c8d0:	693b      	ldr	r3, [r7, #16]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	689b      	ldr	r3, [r3, #8]
 800c8dc:	1e5a      	subs	r2, r3, #1
 800c8de:	693b      	ldr	r3, [r7, #16]
 800c8e0:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 800c8e2:	693b      	ldr	r3, [r7, #16]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	1c5a      	adds	r2, r3, #1
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	601a      	str	r2, [r3, #0]

        break;
 800c8ec:	e114      	b.n	800cb18 <http_send_data_ssi+0x4dc>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800c8ee:	693b      	ldr	r3, [r7, #16]
 800c8f0:	899b      	ldrh	r3, [r3, #12]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d11e      	bne.n	800c934 <http_send_data_ssi+0x2f8>
 800c8f6:	693b      	ldr	r3, [r7, #16]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	781b      	ldrb	r3, [r3, #0]
 800c8fc:	2b20      	cmp	r3, #32
 800c8fe:	d00e      	beq.n	800c91e <http_send_data_ssi+0x2e2>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800c900:	693b      	ldr	r3, [r7, #16]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	781b      	ldrb	r3, [r3, #0]
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800c906:	2b09      	cmp	r3, #9
 800c908:	d009      	beq.n	800c91e <http_send_data_ssi+0x2e2>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	781b      	ldrb	r3, [r3, #0]
 800c910:	2b0a      	cmp	r3, #10
 800c912:	d004      	beq.n	800c91e <http_send_data_ssi+0x2e2>
           (*ssi->parsed == '\r'))) {
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	781b      	ldrb	r3, [r3, #0]
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800c91a:	2b0d      	cmp	r3, #13
 800c91c:	d10a      	bne.n	800c934 <http_send_data_ssi+0x2f8>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	689b      	ldr	r3, [r3, #8]
 800c922:	1e5a      	subs	r2, r3, #1
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	1c5a      	adds	r2, r3, #1
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	601a      	str	r2, [r3, #0]
          break;
 800c932:	e0f1      	b.n	800cb18 <http_send_data_ssi+0x4dc>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if(*ssi->parsed == g_pcTagLeadOut[ssi->tag_index]) {
 800c934:	693b      	ldr	r3, [r7, #16]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	781a      	ldrb	r2, [r3, #0]
 800c93a:	4989      	ldr	r1, [pc, #548]	@ (800cb60 <http_send_data_ssi+0x524>)
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	899b      	ldrh	r3, [r3, #12]
 800c940:	440b      	add	r3, r1
 800c942:	781b      	ldrb	r3, [r3, #0]
 800c944:	429a      	cmp	r2, r3
 800c946:	d160      	bne.n	800ca0a <http_send_data_ssi+0x3ce>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800c948:	693b      	ldr	r3, [r7, #16]
 800c94a:	689b      	ldr	r3, [r3, #8]
 800c94c:	1e5a      	subs	r2, r3, #1
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	1c5a      	adds	r2, r3, #1
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	601a      	str	r2, [r3, #0]

          if(ssi->tag_index == (LEN_TAG_LEAD_OUT - 1)) {
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	899b      	ldrh	r3, [r3, #12]
 800c960:	2b02      	cmp	r3, #2
 800c962:	d14b      	bne.n	800c9fc <http_send_data_ssi+0x3c0>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 800c964:	6838      	ldr	r0, [r7, #0]
 800c966:	f7ff fd3f 	bl	800c3e8 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	2200      	movs	r2, #0
 800c96e:	819a      	strh	r2, [r3, #12]
            ssi->tag_state = TAG_SENDING;
 800c970:	693b      	ldr	r3, [r7, #16]
 800c972:	2204      	movs	r2, #4
 800c974:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
            ssi->tag_end = ssi->parsed;
 800c978:	693b      	ldr	r3, [r7, #16]
 800c97a:	681a      	ldr	r2, [r3, #0]
 800c97c:	693b      	ldr	r3, [r7, #16]
 800c97e:	605a      	str	r2, [r3, #4]
            ssi->parsed = ssi->tag_started;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 800c980:	693b      	ldr	r3, [r7, #16]
 800c982:	685a      	ldr	r2, [r3, #4]
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	699b      	ldr	r3, [r3, #24]
 800c988:	429a      	cmp	r2, r3
 800c98a:	f240 80c2 	bls.w	800cb12 <http_send_data_ssi+0x4d6>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	685a      	ldr	r2, [r3, #4]
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	699b      	ldr	r3, [r3, #24]
 800c996:	1ad3      	subs	r3, r2, r3
 800c998:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c99c:	4293      	cmp	r3, r2
 800c99e:	dc06      	bgt.n	800c9ae <http_send_data_ssi+0x372>
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	685a      	ldr	r2, [r3, #4]
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	699b      	ldr	r3, [r3, #24]
 800c9a8:	1ad3      	subs	r3, r2, r3
 800c9aa:	b29b      	uxth	r3, r3
 800c9ac:	e001      	b.n	800c9b2 <http_send_data_ssi+0x376>
 800c9ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c9b2:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	6999      	ldr	r1, [r3, #24]
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	bf14      	ite	ne
 800c9c0:	2301      	movne	r3, #1
 800c9c2:	2300      	moveq	r3, #0
 800c9c4:	b2db      	uxtb	r3, r3
 800c9c6:	f107 020e 	add.w	r2, r7, #14
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f7ff fbd6 	bl	800c17c <http_write>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 800c9d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	f040 809a 	bne.w	800cb12 <http_send_data_ssi+0x4d6>
                data_to_send = 1;
 800c9de:	2301      	movs	r3, #1
 800c9e0:	75bb      	strb	r3, [r7, #22]
                if(ssi->tag_started <= hs->file) {
                  /* pretend to have sent the tag, too */
                  len += ssi->tag_end - ssi->tag_started;
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	699b      	ldr	r3, [r3, #24]
 800c9e6:	89fa      	ldrh	r2, [r7, #14]
 800c9e8:	441a      	add	r2, r3
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9f2:	89fa      	ldrh	r2, [r7, #14]
 800c9f4:	1a9a      	subs	r2, r3, r2
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	625a      	str	r2, [r3, #36]	@ 0x24
           * back to idle state. */
          ssi->parse_left--;
          ssi->parsed++;
          ssi->tag_state = TAG_NONE;
        }
        break;
 800c9fa:	e08a      	b.n	800cb12 <http_send_data_ssi+0x4d6>
            ssi->tag_index++;
 800c9fc:	693b      	ldr	r3, [r7, #16]
 800c9fe:	899b      	ldrh	r3, [r3, #12]
 800ca00:	3301      	adds	r3, #1
 800ca02:	b29a      	uxth	r2, r3
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	819a      	strh	r2, [r3, #12]
        break;
 800ca08:	e083      	b.n	800cb12 <http_send_data_ssi+0x4d6>
          ssi->parse_left--;
 800ca0a:	693b      	ldr	r3, [r7, #16]
 800ca0c:	689b      	ldr	r3, [r3, #8]
 800ca0e:	1e5a      	subs	r2, r3, #1
 800ca10:	693b      	ldr	r3, [r7, #16]
 800ca12:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800ca14:	693b      	ldr	r3, [r7, #16]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	1c5a      	adds	r2, r3, #1
 800ca1a:	693b      	ldr	r3, [r7, #16]
 800ca1c:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 800ca1e:	693b      	ldr	r3, [r7, #16]
 800ca20:	2200      	movs	r2, #0
 800ca22:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
        break;
 800ca26:	e074      	b.n	800cb12 <http_send_data_ssi+0x4d6>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if(ssi->tag_end > hs->file) {
 800ca28:	693b      	ldr	r3, [r7, #16]
 800ca2a:	685a      	ldr	r2, [r3, #4]
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	699b      	ldr	r3, [r3, #24]
 800ca30:	429a      	cmp	r2, r3
 800ca32:	d93b      	bls.n	800caac <http_send_data_ssi+0x470>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 800ca34:	693b      	ldr	r3, [r7, #16]
 800ca36:	685a      	ldr	r2, [r3, #4]
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	699b      	ldr	r3, [r3, #24]
 800ca3c:	1ad3      	subs	r3, r2, r3
 800ca3e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ca42:	4293      	cmp	r3, r2
 800ca44:	dc06      	bgt.n	800ca54 <http_send_data_ssi+0x418>
 800ca46:	693b      	ldr	r3, [r7, #16]
 800ca48:	685a      	ldr	r2, [r3, #4]
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	699b      	ldr	r3, [r3, #24]
 800ca4e:	1ad3      	subs	r3, r2, r3
 800ca50:	b29b      	uxth	r3, r3
 800ca52:	e001      	b.n	800ca58 <http_send_data_ssi+0x41c>
 800ca54:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ca58:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 800ca5a:	89fb      	ldrh	r3, [r7, #14]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d010      	beq.n	800ca82 <http_send_data_ssi+0x446>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	6999      	ldr	r1, [r3, #24]
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	bf14      	ite	ne
 800ca6c:	2301      	movne	r3, #1
 800ca6e:	2300      	moveq	r3, #0
 800ca70:	b2db      	uxtb	r3, r3
 800ca72:	f107 020e 	add.w	r2, r7, #14
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f7ff fb80 	bl	800c17c <http_write>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	75fb      	strb	r3, [r7, #23]
 800ca80:	e001      	b.n	800ca86 <http_send_data_ssi+0x44a>
          } else {
            err = ERR_OK;
 800ca82:	2300      	movs	r3, #0
 800ca84:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 800ca86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d144      	bne.n	800cb18 <http_send_data_ssi+0x4dc>
            data_to_send = 1;
 800ca8e:	2301      	movs	r3, #1
 800ca90:	75bb      	strb	r3, [r7, #22]
            if(ssi->tag_started <= hs->file) {
              /* pretend to have sent the tag, too */
              len += ssi->tag_end - ssi->tag_started;
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	699b      	ldr	r3, [r3, #24]
 800ca96:	89fa      	ldrh	r2, [r7, #14]
 800ca98:	441a      	add	r2, r3
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800caa2:	89fa      	ldrh	r2, [r7, #14]
 800caa4:	1a9a      	subs	r2, r3, r2
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	625a      	str	r2, [r3, #36]	@ 0x24
 800caaa:	e035      	b.n	800cb18 <http_send_data_ssi+0x4dc>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if(ssi->tag_index < ssi->tag_insert_len) {
 800caac:	693b      	ldr	r3, [r7, #16]
 800caae:	899a      	ldrh	r2, [r3, #12]
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	89db      	ldrh	r3, [r3, #14]
 800cab4:	429a      	cmp	r2, r3
 800cab6:	d222      	bcs.n	800cafe <http_send_data_ssi+0x4c2>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 800cab8:	693b      	ldr	r3, [r7, #16]
 800caba:	89da      	ldrh	r2, [r3, #14]
 800cabc:	693b      	ldr	r3, [r7, #16]
 800cabe:	899b      	ldrh	r3, [r3, #12]
 800cac0:	1ad3      	subs	r3, r2, r3
 800cac2:	b29b      	uxth	r3, r3
 800cac4:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 800cac6:	693b      	ldr	r3, [r7, #16]
 800cac8:	899b      	ldrh	r3, [r3, #12]
 800caca:	3318      	adds	r3, #24
 800cacc:	693a      	ldr	r2, [r7, #16]
 800cace:	4413      	add	r3, r2
 800cad0:	1c99      	adds	r1, r3, #2
 800cad2:	f107 020e 	add.w	r2, r7, #14
 800cad6:	2301      	movs	r3, #1
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f7ff fb4f 	bl	800c17c <http_write>
 800cade:	4603      	mov	r3, r0
 800cae0:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 800cae2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d115      	bne.n	800cb16 <http_send_data_ssi+0x4da>
              data_to_send = 1;
 800caea:	2301      	movs	r3, #1
 800caec:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 800caee:	693b      	ldr	r3, [r7, #16]
 800caf0:	899a      	ldrh	r2, [r3, #12]
 800caf2:	89fb      	ldrh	r3, [r7, #14]
 800caf4:	4413      	add	r3, r2
 800caf6:	b29a      	uxth	r2, r3
 800caf8:	693b      	ldr	r3, [r7, #16]
 800cafa:	819a      	strh	r2, [r3, #12]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 800cafc:	e00b      	b.n	800cb16 <http_send_data_ssi+0x4da>
              ssi->tag_index = 0;
 800cafe:	693b      	ldr	r3, [r7, #16]
 800cb00:	2200      	movs	r2, #0
 800cb02:	819a      	strh	r2, [r3, #12]
              ssi->tag_state = TAG_NONE;
 800cb04:	693b      	ldr	r3, [r7, #16]
 800cb06:	2200      	movs	r2, #0
 800cb08:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
          break;
 800cb0c:	e003      	b.n	800cb16 <http_send_data_ssi+0x4da>
        default:
          break;
 800cb0e:	bf00      	nop
 800cb10:	e002      	b.n	800cb18 <http_send_data_ssi+0x4dc>
        break;
 800cb12:	bf00      	nop
 800cb14:	e000      	b.n	800cb18 <http_send_data_ssi+0x4dc>
          break;
 800cb16:	bf00      	nop
  while((ssi->parse_left) && (err == ERR_OK)) {
 800cb18:	693b      	ldr	r3, [r7, #16]
 800cb1a:	689b      	ldr	r3, [r3, #8]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d004      	beq.n	800cb2a <http_send_data_ssi+0x4ee>
 800cb20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	f43f ade7 	beq.w	800c6f8 <http_send_data_ssi+0xbc>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 800cb2a:	693b      	ldr	r3, [r7, #16]
 800cb2c:	f893 30db 	ldrb.w	r3, [r3, #219]	@ 0xdb
 800cb30:	2b04      	cmp	r3, #4
 800cb32:	d03c      	beq.n	800cbae <http_send_data_ssi+0x572>
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	681a      	ldr	r2, [r3, #0]
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	699b      	ldr	r3, [r3, #24]
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	d936      	bls.n	800cbae <http_send_data_ssi+0x572>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800cb40:	693b      	ldr	r3, [r7, #16]
 800cb42:	681a      	ldr	r2, [r3, #0]
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	699b      	ldr	r3, [r3, #24]
 800cb48:	1ad3      	subs	r3, r2, r3
 800cb4a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800cb4e:	4293      	cmp	r3, r2
 800cb50:	dc08      	bgt.n	800cb64 <http_send_data_ssi+0x528>
 800cb52:	693b      	ldr	r3, [r7, #16]
 800cb54:	681a      	ldr	r2, [r3, #0]
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	699b      	ldr	r3, [r3, #24]
 800cb5a:	1ad3      	subs	r3, r2, r3
 800cb5c:	b29b      	uxth	r3, r3
 800cb5e:	e003      	b.n	800cb68 <http_send_data_ssi+0x52c>
 800cb60:	08025028 	.word	0x08025028
 800cb64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cb68:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	6999      	ldr	r1, [r3, #24]
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	bf14      	ite	ne
 800cb76:	2301      	movne	r3, #1
 800cb78:	2300      	moveq	r3, #0
 800cb7a:	b2db      	uxtb	r3, r3
 800cb7c:	f107 020e 	add.w	r2, r7, #14
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	f7ff fafb 	bl	800c17c <http_write>
 800cb86:	4603      	mov	r3, r0
 800cb88:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800cb8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d10d      	bne.n	800cbae <http_send_data_ssi+0x572>
      data_to_send = 1;
 800cb92:	2301      	movs	r3, #1
 800cb94:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	699b      	ldr	r3, [r3, #24]
 800cb9a:	89fa      	ldrh	r2, [r7, #14]
 800cb9c:	441a      	add	r2, r3
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cba6:	89fa      	ldrh	r2, [r7, #14]
 800cba8:	1a9a      	subs	r2, r3, r2
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	625a      	str	r2, [r3, #36]	@ 0x24
    }
  }
  return data_to_send;
 800cbae:	7dbb      	ldrb	r3, [r7, #22]
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3718      	adds	r7, #24
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}

0800cbb8 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct tcp_pcb *pcb, struct http_state *hs)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b084      	sub	sp, #16
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
 800cbc0:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d101      	bne.n	800cbd0 <http_send+0x18>
    return 0;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	e030      	b.n	800cc32 <http_send+0x7a>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d108      	bne.n	800cbea <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800cbd8:	6839      	ldr	r1, [r7, #0]
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	f7ff fcc2 	bl	800c564 <http_check_eof>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d101      	bne.n	800cbea <http_send+0x32>
      return 0;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	e023      	b.n	800cc32 <http_send+0x7a>
    }
  }

#if LWIP_HTTPD_SSI
  if(hs->ssi) {
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d006      	beq.n	800cc00 <http_send+0x48>
    data_to_send = http_send_data_ssi(pcb, hs);
 800cbf2:	6839      	ldr	r1, [r7, #0]
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f7ff fd21 	bl	800c63c <http_send_data_ssi>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	73fb      	strb	r3, [r7, #15]
 800cbfe:	e005      	b.n	800cc0c <http_send+0x54>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800cc00:	6839      	ldr	r1, [r7, #0]
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	f7ff fcde 	bl	800c5c4 <http_send_data_nonssi>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	73fb      	strb	r3, [r7, #15]
  }

  if((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d10d      	bne.n	800cc30 <http_send+0x78>
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	695b      	ldr	r3, [r3, #20]
 800cc18:	4618      	mov	r0, r3
 800cc1a:	f7ff f830 	bl	800bc7e <fs_bytes_left>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	dc05      	bgt.n	800cc30 <http_send+0x78>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800cc24:	6839      	ldr	r1, [r7, #0]
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f7ff fb73 	bl	800c312 <http_eof>
    return 0;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	e000      	b.n	800cc32 <http_send+0x7a>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800cc30:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3710      	adds	r7, #16
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}
	...

0800cc3c <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b084      	sub	sp, #16
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
 800cc44:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	4a1c      	ldr	r2, [pc, #112]	@ (800ccbc <http_get_404_file+0x80>)
 800cc4a:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800cc4c:	687a      	ldr	r2, [r7, #4]
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	4619      	mov	r1, r3
 800cc54:	4610      	mov	r0, r2
 800cc56:	f7fe ffb7 	bl	800bbc8 <fs_open>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800cc5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d024      	beq.n	800ccb0 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	4a15      	ldr	r2, [pc, #84]	@ (800ccc0 <http_get_404_file+0x84>)
 800cc6a:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800cc6c:	687a      	ldr	r2, [r7, #4]
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	4619      	mov	r1, r3
 800cc74:	4610      	mov	r0, r2
 800cc76:	f7fe ffa7 	bl	800bbc8 <fs_open>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800cc7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d014      	beq.n	800ccb0 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	4a0e      	ldr	r2, [pc, #56]	@ (800ccc4 <http_get_404_file+0x88>)
 800cc8a:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800cc8c:	687a      	ldr	r2, [r7, #4]
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	4619      	mov	r1, r3
 800cc94:	4610      	mov	r0, r2
 800cc96:	f7fe ff97 	bl	800bbc8 <fs_open>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800cc9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d004      	beq.n	800ccb0 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	2200      	movs	r2, #0
 800ccaa:	601a      	str	r2, [r3, #0]
        return NULL;
 800ccac:	2300      	movs	r3, #0
 800ccae:	e000      	b.n	800ccb2 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800ccb0:	687b      	ldr	r3, [r7, #4]
}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	3710      	adds	r7, #16
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}
 800ccba:	bf00      	nop
 800ccbc:	08025130 	.word	0x08025130
 800ccc0:	0802513c 	.word	0x0802513c
 800ccc4:	08025148 	.word	0x08025148

0800ccc8 <http_handle_post_finished>:

#if LWIP_HTTPD_SUPPORT_POST
static err_t
http_handle_post_finished(struct http_state *hs)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b082      	sub	sp, #8
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
  }
  hs->post_finished = 1;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
  /* application error or POST finished */
  /* NULL-terminate the buffer */
  http_uri_buf[0] = 0;
 800ccd0:	4b08      	ldr	r3, [pc, #32]	@ (800ccf4 <http_handle_post_finished+0x2c>)
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	701a      	strb	r2, [r3, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 800ccd6:	223f      	movs	r2, #63	@ 0x3f
 800ccd8:	4906      	ldr	r1, [pc, #24]	@ (800ccf4 <http_handle_post_finished+0x2c>)
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	f7f5 fde8 	bl	80028b0 <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 800cce0:	2200      	movs	r2, #0
 800cce2:	4904      	ldr	r1, [pc, #16]	@ (800ccf4 <http_handle_post_finished+0x2c>)
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f000 fa6b 	bl	800d1c0 <http_find_file>
 800ccea:	4603      	mov	r3, r0
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	3708      	adds	r7, #8
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}
 800ccf4:	20008790 	.word	0x20008790

0800ccf8 <http_post_rxpbuf>:
 * @return ERR_OK if passed successfully, another err_t if the response file
 *         hasn't been found (after POST finished)
 */
static err_t
http_post_rxpbuf(struct http_state *hs, struct pbuf *p)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b084      	sub	sp, #16
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	6039      	str	r1, [r7, #0]
  err_t err;

  if (p != NULL) {
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d014      	beq.n	800cd32 <http_post_rxpbuf+0x3a>
    /* adjust remaining Content-Length */
    if (hs->post_content_len_left < p->tot_len) {
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800cd0e:	683a      	ldr	r2, [r7, #0]
 800cd10:	8912      	ldrh	r2, [r2, #8]
 800cd12:	4293      	cmp	r3, r2
 800cd14:	d204      	bcs.n	800cd20 <http_post_rxpbuf+0x28>
      hs->post_content_len_left = 0;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2200      	movs	r2, #0
 800cd1a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 800cd1e:	e008      	b.n	800cd32 <http_post_rxpbuf+0x3a>
    } else {
      hs->post_content_len_left -= p->tot_len;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800cd26:	683a      	ldr	r2, [r7, #0]
 800cd28:	8912      	ldrh	r2, [r2, #8]
 800cd2a:	1a9a      	subs	r2, r3, r2
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  /* prevent connection being closed if httpd_post_data_recved() is called nested */
  hs->unrecved_bytes++;
#endif
  err = httpd_post_receive_data(hs, p);
 800cd32:	6839      	ldr	r1, [r7, #0]
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f7f5 fd79 	bl	800282c <httpd_post_receive_data>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	73fb      	strb	r3, [r7, #15]
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  hs->unrecved_bytes--;
#endif
  if (err != ERR_OK) {
 800cd3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d003      	beq.n	800cd4e <http_post_rxpbuf+0x56>
    /* Ignore remaining content in case of application error */
    hs->post_content_len_left = 0;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2200      	movs	r2, #0
 800cd4a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  }
  if (hs->post_content_len_left == 0) {
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d104      	bne.n	800cd62 <http_post_rxpbuf+0x6a>
    if (hs->unrecved_bytes != 0) {
       return ERR_OK;
    }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
    /* application error or POST finished */
    return http_handle_post_finished(hs);
 800cd58:	6878      	ldr	r0, [r7, #4]
 800cd5a:	f7ff ffb5 	bl	800ccc8 <http_handle_post_finished>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	e000      	b.n	800cd64 <http_post_rxpbuf+0x6c>
  }

  return ERR_OK;
 800cd62:	2300      	movs	r3, #0
}
 800cd64:	4618      	mov	r0, r3
 800cd66:	3710      	adds	r7, #16
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bd80      	pop	{r7, pc}

0800cd6c <http_post_request>:
 *         another err_t: Error parsing POST or denied by the application
 */
static err_t
http_post_request(struct pbuf *inp, struct http_state *hs,
                  char *data, u16_t data_len, char *uri, char *uri_end)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b092      	sub	sp, #72	@ 0x48
 800cd70:	af04      	add	r7, sp, #16
 800cd72:	60f8      	str	r0, [r7, #12]
 800cd74:	60b9      	str	r1, [r7, #8]
 800cd76:	607a      	str	r2, [r7, #4]
 800cd78:	807b      	strh	r3, [r7, #2]
  err_t err;
  /* search for end-of-header (first double-CRLF) */
  char* crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 800cd7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd7c:	1c58      	adds	r0, r3, #1
 800cd7e:	887a      	ldrh	r2, [r7, #2]
 800cd80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd82:	1c59      	adds	r1, r3, #1
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	1acb      	subs	r3, r1, r3
 800cd88:	1ad3      	subs	r3, r2, r3
 800cd8a:	461a      	mov	r2, r3
 800cd8c:	4967      	ldr	r1, [pc, #412]	@ (800cf2c <http_post_request+0x1c0>)
 800cd8e:	f007 fd56 	bl	801483e <lwip_strnstr>
 800cd92:	62b8      	str	r0, [r7, #40]	@ 0x28

  if (crlfcrlf != NULL) {
 800cd94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	f000 80c1 	beq.w	800cf1e <http_post_request+0x1b2>
    /* search for "Content-Length: " */
#define HTTP_HDR_CONTENT_LEN                "Content-Length: "
#define HTTP_HDR_CONTENT_LEN_LEN            16
#define HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN  10
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 800cd9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd9e:	1c58      	adds	r0, r3, #1
 800cda0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cda2:	3301      	adds	r3, #1
 800cda4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cda6:	1ad3      	subs	r3, r2, r3
 800cda8:	461a      	mov	r2, r3
 800cdaa:	4961      	ldr	r1, [pc, #388]	@ (800cf30 <http_post_request+0x1c4>)
 800cdac:	f007 fd47 	bl	801483e <lwip_strnstr>
 800cdb0:	6278      	str	r0, [r7, #36]	@ 0x24
    if (scontent_len != NULL) {
 800cdb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	f000 80af 	beq.w	800cf18 <http_post_request+0x1ac>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 800cdba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdbc:	3310      	adds	r3, #16
 800cdbe:	220a      	movs	r2, #10
 800cdc0:	495c      	ldr	r1, [pc, #368]	@ (800cf34 <http_post_request+0x1c8>)
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	f007 fd3b 	bl	801483e <lwip_strnstr>
 800cdc8:	6238      	str	r0, [r7, #32]
      if (scontent_len_end != NULL) {
 800cdca:	6a3b      	ldr	r3, [r7, #32]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	f000 80a3 	beq.w	800cf18 <http_post_request+0x1ac>
        int content_len;
        char *content_len_num = scontent_len + HTTP_HDR_CONTENT_LEN_LEN;
 800cdd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdd4:	3310      	adds	r3, #16
 800cdd6:	61fb      	str	r3, [r7, #28]
        content_len = atoi(content_len_num);
 800cdd8:	69f8      	ldr	r0, [r7, #28]
 800cdda:	f014 f967 	bl	80210ac <atoi>
 800cdde:	6378      	str	r0, [r7, #52]	@ 0x34
        if (content_len == 0) {
 800cde0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d10b      	bne.n	800cdfe <http_post_request+0x92>
          /* if atoi returns 0 on error, fix this */
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 800cde6:	69fb      	ldr	r3, [r7, #28]
 800cde8:	781b      	ldrb	r3, [r3, #0]
 800cdea:	2b30      	cmp	r3, #48	@ 0x30
 800cdec:	d104      	bne.n	800cdf8 <http_post_request+0x8c>
 800cdee:	69fb      	ldr	r3, [r7, #28]
 800cdf0:	3301      	adds	r3, #1
 800cdf2:	781b      	ldrb	r3, [r3, #0]
 800cdf4:	2b0d      	cmp	r3, #13
 800cdf6:	d002      	beq.n	800cdfe <http_post_request+0x92>
            content_len = -1;
 800cdf8:	f04f 33ff 	mov.w	r3, #4294967295
 800cdfc:	637b      	str	r3, [r7, #52]	@ 0x34
          }
        }
        if (content_len >= 0) {
 800cdfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	f2c0 8086 	blt.w	800cf12 <http_post_request+0x1a6>
          /* adjust length of HTTP header passed to application */
          const char *hdr_start_after_uri = uri_end + 1;
 800ce06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce08:	3301      	adds	r3, #1
 800ce0a:	61bb      	str	r3, [r7, #24]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 800ce0c:	887a      	ldrh	r2, [r7, #2]
 800ce0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce10:	1d19      	adds	r1, r3, #4
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	1acb      	subs	r3, r1, r3
 800ce16:	429a      	cmp	r2, r3
 800ce18:	db05      	blt.n	800ce26 <http_post_request+0xba>
 800ce1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce1c:	1d1a      	adds	r2, r3, #4
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	1ad3      	subs	r3, r2, r3
 800ce22:	b29b      	uxth	r3, r3
 800ce24:	e000      	b.n	800ce28 <http_post_request+0xbc>
 800ce26:	887b      	ldrh	r3, [r7, #2]
 800ce28:	82fb      	strh	r3, [r7, #22]
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 800ce2a:	887a      	ldrh	r2, [r7, #2]
 800ce2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce2e:	1d19      	adds	r1, r3, #4
 800ce30:	69bb      	ldr	r3, [r7, #24]
 800ce32:	1acb      	subs	r3, r1, r3
 800ce34:	429a      	cmp	r2, r3
 800ce36:	db05      	blt.n	800ce44 <http_post_request+0xd8>
 800ce38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce3a:	1d1a      	adds	r2, r3, #4
 800ce3c:	69bb      	ldr	r3, [r7, #24]
 800ce3e:	1ad3      	subs	r3, r2, r3
 800ce40:	b29b      	uxth	r3, r3
 800ce42:	e000      	b.n	800ce46 <http_post_request+0xda>
 800ce44:	887b      	ldrh	r3, [r7, #2]
 800ce46:	82bb      	strh	r3, [r7, #20]
          u8_t post_auto_wnd = 1;
 800ce48:	2301      	movs	r3, #1
 800ce4a:	74bb      	strb	r3, [r7, #18]
          http_uri_buf[0] = 0;
 800ce4c:	4b3a      	ldr	r3, [pc, #232]	@ (800cf38 <http_post_request+0x1cc>)
 800ce4e:	2200      	movs	r2, #0
 800ce50:	701a      	strb	r2, [r3, #0]
          /* trim http header */
          *crlfcrlf = 0;
 800ce52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce54:	2200      	movs	r2, #0
 800ce56:	701a      	strb	r2, [r3, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 800ce58:	8aba      	ldrh	r2, [r7, #20]
 800ce5a:	f107 0312 	add.w	r3, r7, #18
 800ce5e:	9303      	str	r3, [sp, #12]
 800ce60:	233f      	movs	r3, #63	@ 0x3f
 800ce62:	9302      	str	r3, [sp, #8]
 800ce64:	4b34      	ldr	r3, [pc, #208]	@ (800cf38 <http_post_request+0x1cc>)
 800ce66:	9301      	str	r3, [sp, #4]
 800ce68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce6a:	9300      	str	r3, [sp, #0]
 800ce6c:	4613      	mov	r3, r2
 800ce6e:	69ba      	ldr	r2, [r7, #24]
 800ce70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ce72:	68b8      	ldr	r0, [r7, #8]
 800ce74:	f7f5 fc92 	bl	800279c <httpd_post_begin>
 800ce78:	4603      	mov	r3, r0
 800ce7a:	74fb      	strb	r3, [r7, #19]
            http_uri_buf, LWIP_HTTPD_URI_BUF_LEN, &post_auto_wnd);
          if (err == ERR_OK) {
 800ce7c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d13f      	bne.n	800cf04 <http_post_request+0x198>
            /* try to pass in data of the first pbuf(s) */
            struct pbuf *q = inp;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	633b      	str	r3, [r7, #48]	@ 0x30
            u16_t start_offset = hdr_len;
 800ce88:	8afb      	ldrh	r3, [r7, #22]
 800ce8a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
#if LWIP_HTTPD_POST_MANUAL_WND
            hs->no_auto_wnd = !post_auto_wnd;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
            /* set the Content-Length to be received for this POST */
            hs->post_content_len_left = (u32_t)content_len;
 800ce8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ce8e:	68bb      	ldr	r3, [r7, #8]
 800ce90:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

            /* get to the pbuf where the body starts */
            while((q != NULL) && (q->len <= start_offset)) {
 800ce94:	e007      	b.n	800cea6 <http_post_request+0x13a>
              start_offset -= q->len;
 800ce96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce98:	895b      	ldrh	r3, [r3, #10]
 800ce9a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ce9c:	1ad3      	subs	r3, r2, r3
 800ce9e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
              q = q->next;
 800cea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	633b      	str	r3, [r7, #48]	@ 0x30
            while((q != NULL) && (q->len <= start_offset)) {
 800cea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d004      	beq.n	800ceb6 <http_post_request+0x14a>
 800ceac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceae:	895b      	ldrh	r3, [r3, #10]
 800ceb0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	d2ef      	bcs.n	800ce96 <http_post_request+0x12a>
            }
            if (q != NULL) {
 800ceb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d010      	beq.n	800cede <http_post_request+0x172>
              /* hide the remaining HTTP header */
              pbuf_header(q, -(s16_t)start_offset);
 800cebc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cebe:	425b      	negs	r3, r3
 800cec0:	b29b      	uxth	r3, r3
 800cec2:	b21b      	sxth	r3, r3
 800cec4:	4619      	mov	r1, r3
 800cec6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cec8:	f008 fec8 	bl	8015c5c <pbuf_header>
              if (!post_auto_wnd) {
                /* already tcp_recved() this data... */
                hs->unrecved_bytes = q->tot_len;
              }
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
              pbuf_ref(q);
 800cecc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cece:	f008 ff93 	bl	8015df8 <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 800ced2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ced4:	68b8      	ldr	r0, [r7, #8]
 800ced6:	f7ff ff0f 	bl	800ccf8 <http_post_rxpbuf>
 800ceda:	4603      	mov	r3, r0
 800cedc:	e021      	b.n	800cf22 <http_post_request+0x1b6>
            } else if (hs->post_content_len_left == 0) {
 800cede:	68bb      	ldr	r3, [r7, #8]
 800cee0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d10b      	bne.n	800cf00 <http_post_request+0x194>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 800cee8:	2202      	movs	r2, #2
 800ceea:	2100      	movs	r1, #0
 800ceec:	2004      	movs	r0, #4
 800ceee:	f008 fb61 	bl	80155b4 <pbuf_alloc>
 800cef2:	6338      	str	r0, [r7, #48]	@ 0x30
              return http_post_rxpbuf(hs, q);
 800cef4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cef6:	68b8      	ldr	r0, [r7, #8]
 800cef8:	f7ff fefe 	bl	800ccf8 <http_post_rxpbuf>
 800cefc:	4603      	mov	r3, r0
 800cefe:	e010      	b.n	800cf22 <http_post_request+0x1b6>
            } else {
              return ERR_OK;
 800cf00:	2300      	movs	r3, #0
 800cf02:	e00e      	b.n	800cf22 <http_post_request+0x1b6>
            }
          } else {
            /* return file passed from application */
            return http_find_file(hs, http_uri_buf, 0);
 800cf04:	2200      	movs	r2, #0
 800cf06:	490c      	ldr	r1, [pc, #48]	@ (800cf38 <http_post_request+0x1cc>)
 800cf08:	68b8      	ldr	r0, [r7, #8]
 800cf0a:	f000 f959 	bl	800d1c0 <http_find_file>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	e007      	b.n	800cf22 <http_post_request+0x1b6>
          }
        } else {
          LWIP_DEBUGF(HTTPD_DEBUG, ("POST received invalid Content-Length: %s\n",
            content_len_num));
          return ERR_ARG;
 800cf12:	f06f 030f 	mvn.w	r3, #15
 800cf16:	e004      	b.n	800cf22 <http_post_request+0x1b6>
    }
    /* If we come here, headers are fully received (double-crlf), but Content-Length
       was not included. Since this is currently the only supported method, we have
       to fail in this case! */
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error when parsing Content-Length\n"));
    return ERR_ARG;
 800cf18:	f06f 030f 	mvn.w	r3, #15
 800cf1c:	e001      	b.n	800cf22 <http_post_request+0x1b6>
  }
  /* if we come here, the POST is incomplete */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  return ERR_INPROGRESS;
 800cf1e:	f06f 0304 	mvn.w	r3, #4
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  return ERR_ARG;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3738      	adds	r7, #56	@ 0x38
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}
 800cf2a:	bf00      	nop
 800cf2c:	08025154 	.word	0x08025154
 800cf30:	0802515c 	.word	0x0802515c
 800cf34:	08025170 	.word	0x08025170
 800cf38:	20008790 	.word	0x20008790

0800cf3c <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct tcp_pcb *pcb)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b092      	sub	sp, #72	@ 0x48
 800cf40:	af02      	add	r7, sp, #8
 800cf42:	60f8      	str	r0, [r7, #12]
 800cf44:	60b9      	str	r1, [r7, #8]
 800cf46:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	627b      	str	r3, [r7, #36]	@ 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800cf4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d106      	bne.n	800cf60 <http_parse_request+0x24>
 800cf52:	4b91      	ldr	r3, [pc, #580]	@ (800d198 <http_parse_request+0x25c>)
 800cf54:	f44f 62f8 	mov.w	r2, #1984	@ 0x7c0
 800cf58:	4990      	ldr	r1, [pc, #576]	@ (800d19c <http_parse_request+0x260>)
 800cf5a:	4891      	ldr	r0, [pc, #580]	@ (800d1a0 <http_parse_request+0x264>)
 800cf5c:	f014 fe94 	bl	8021c88 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d106      	bne.n	800cf74 <http_parse_request+0x38>
 800cf66:	4b8c      	ldr	r3, [pc, #560]	@ (800d198 <http_parse_request+0x25c>)
 800cf68:	f240 72c1 	movw	r2, #1985	@ 0x7c1
 800cf6c:	498d      	ldr	r1, [pc, #564]	@ (800d1a4 <http_parse_request+0x268>)
 800cf6e:	488c      	ldr	r0, [pc, #560]	@ (800d1a0 <http_parse_request+0x264>)
 800cf70:	f014 fe8a 	bl	8021c88 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	695b      	ldr	r3, [r3, #20]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d103      	bne.n	800cf84 <http_parse_request+0x48>
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	699b      	ldr	r3, [r3, #24]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d002      	beq.n	800cf8a <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800cf84:	f06f 0307 	mvn.w	r3, #7
 800cf88:	e102      	b.n	800d190 <http_parse_request+0x254>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	6a1b      	ldr	r3, [r3, #32]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d103      	bne.n	800cf9a <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800cf92:	68bb      	ldr	r3, [r7, #8]
 800cf94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf96:	621a      	str	r2, [r3, #32]
 800cf98:	e005      	b.n	800cfa6 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800cf9a:	68bb      	ldr	r3, [r7, #8]
 800cf9c:	6a1b      	ldr	r3, [r3, #32]
 800cf9e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f008 ff4b 	bl	8015e3c <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800cfa6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cfa8:	f008 ff26 	bl	8015df8 <pbuf_ref>

  if (hs->req->next != NULL) {
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	6a1b      	ldr	r3, [r3, #32]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d012      	beq.n	800cfdc <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	6a1b      	ldr	r3, [r3, #32]
 800cfba:	891b      	ldrh	r3, [r3, #8]
 800cfbc:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800cfc0:	4293      	cmp	r3, r2
 800cfc2:	bf28      	it	cs
 800cfc4:	4613      	movcs	r3, r2
 800cfc6:	877b      	strh	r3, [r7, #58]	@ 0x3a
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800cfc8:	68bb      	ldr	r3, [r7, #8]
 800cfca:	6a18      	ldr	r0, [r3, #32]
 800cfcc:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800cfce:	2300      	movs	r3, #0
 800cfd0:	4975      	ldr	r1, [pc, #468]	@ (800d1a8 <http_parse_request+0x26c>)
 800cfd2:	f009 f865 	bl	80160a0 <pbuf_copy_partial>
    data = httpd_req_buf;
 800cfd6:	4b74      	ldr	r3, [pc, #464]	@ (800d1a8 <http_parse_request+0x26c>)
 800cfd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cfda:	e005      	b.n	800cfe8 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800cfdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfde:	685b      	ldr	r3, [r3, #4]
 800cfe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    data_len = p->len;
 800cfe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfe4:	895b      	ldrh	r3, [r3, #10]
 800cfe6:	877b      	strh	r3, [r7, #58]	@ 0x3a
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800cfe8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800cfea:	2b06      	cmp	r3, #6
 800cfec:	f240 80b6 	bls.w	800d15c <http_parse_request+0x220>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800cff0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800cff2:	461a      	mov	r2, r3
 800cff4:	496d      	ldr	r1, [pc, #436]	@ (800d1ac <http_parse_request+0x270>)
 800cff6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800cff8:	f007 fc21 	bl	801483e <lwip_strnstr>
 800cffc:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800cffe:	6a3b      	ldr	r3, [r7, #32]
 800d000:	2b00      	cmp	r3, #0
 800d002:	f000 80ab 	beq.w	800d15c <http_parse_request+0x220>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
 800d006:	2300      	movs	r3, #0
 800d008:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800d00a:	2300      	movs	r3, #0
 800d00c:	633b      	str	r3, [r7, #48]	@ 0x30
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800d00e:	2204      	movs	r2, #4
 800d010:	4967      	ldr	r1, [pc, #412]	@ (800d1b0 <http_parse_request+0x274>)
 800d012:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d014:	f015 f844 	bl	80220a0 <strncmp>
 800d018:	4603      	mov	r3, r0
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d103      	bne.n	800d026 <http_parse_request+0xea>
        sp1 = data + 3;
 800d01e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d020:	3303      	adds	r3, #3
 800d022:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d024:	e014      	b.n	800d050 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received GET request\"\n"));
#if LWIP_HTTPD_SUPPORT_POST
      } else if (!strncmp(data, "POST ", 5)) {
 800d026:	2205      	movs	r2, #5
 800d028:	4962      	ldr	r1, [pc, #392]	@ (800d1b4 <http_parse_request+0x278>)
 800d02a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d02c:	f015 f838 	bl	80220a0 <strncmp>
 800d030:	4603      	mov	r3, r0
 800d032:	2b00      	cmp	r3, #0
 800d034:	d105      	bne.n	800d042 <http_parse_request+0x106>
        /* store request type */
        is_post = 1;
 800d036:	2301      	movs	r3, #1
 800d038:	637b      	str	r3, [r7, #52]	@ 0x34
        sp1 = data + 4;
 800d03a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d03c:	3304      	adds	r3, #4
 800d03e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d040:	e006      	b.n	800d050 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received POST request\n"));
#endif /* LWIP_HTTPD_SUPPORT_POST */
      } else {
        /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
        data[4] = 0;
 800d042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d044:	3304      	adds	r3, #4
 800d046:	2200      	movs	r2, #0
 800d048:	701a      	strb	r2, [r3, #0]
        /* unsupported method! */
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
          data));
        return http_find_error_file(hs, 501);
 800d04a:	f06f 030f 	mvn.w	r3, #15
 800d04e:	e09f      	b.n	800d190 <http_parse_request+0x254>
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 +1) - data));
 800d050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d052:	1c5a      	adds	r2, r3, #1
 800d054:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d056:	1ad3      	subs	r3, r2, r3
 800d058:	b29b      	uxth	r3, r3
 800d05a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d05c:	1ad3      	subs	r3, r2, r3
 800d05e:	83fb      	strh	r3, [r7, #30]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800d060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d062:	3301      	adds	r3, #1
 800d064:	8bfa      	ldrh	r2, [r7, #30]
 800d066:	4954      	ldr	r1, [pc, #336]	@ (800d1b8 <http_parse_request+0x27c>)
 800d068:	4618      	mov	r0, r3
 800d06a:	f007 fbe8 	bl	801483e <lwip_strnstr>
 800d06e:	62b8      	str	r0, [r7, #40]	@ 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800d070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d072:	2b00      	cmp	r3, #0
 800d074:	d10c      	bne.n	800d090 <http_parse_request+0x154>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800d076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d078:	3301      	adds	r3, #1
 800d07a:	8bfa      	ldrh	r2, [r7, #30]
 800d07c:	494b      	ldr	r1, [pc, #300]	@ (800d1ac <http_parse_request+0x270>)
 800d07e:	4618      	mov	r0, r3
 800d080:	f007 fbdd 	bl	801483e <lwip_strnstr>
 800d084:	62b8      	str	r0, [r7, #40]	@ 0x28
        is_09 = 1;
 800d086:	2301      	movs	r3, #1
 800d088:	633b      	str	r3, [r7, #48]	@ 0x30
#if LWIP_HTTPD_SUPPORT_POST
        if (is_post) {
 800d08a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d178      	bne.n	800d182 <http_parse_request+0x246>
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800d090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d092:	3301      	adds	r3, #1
 800d094:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d096:	1ad3      	subs	r3, r2, r3
 800d098:	83bb      	strh	r3, [r7, #28]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800d09a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d05d      	beq.n	800d15c <http_parse_request+0x220>
 800d0a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d0a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0a4:	429a      	cmp	r2, r3
 800d0a6:	d959      	bls.n	800d15c <http_parse_request+0x220>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800d0a8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d0aa:	461a      	mov	r2, r3
 800d0ac:	4943      	ldr	r1, [pc, #268]	@ (800d1bc <http_parse_request+0x280>)
 800d0ae:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d0b0:	f007 fbc5 	bl	801483e <lwip_strnstr>
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d050      	beq.n	800d15c <http_parse_request+0x220>
          char *uri = sp1 + 1;
 800d0ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0bc:	3301      	adds	r3, #1
 800d0be:	61bb      	str	r3, [r7, #24]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800d0c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800d0c6:	8bbb      	ldrh	r3, [r7, #28]
 800d0c8:	69ba      	ldr	r2, [r7, #24]
 800d0ca:	4413      	add	r3, r2
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	701a      	strb	r2, [r3, #0]
          LWIP_DEBUGF(HTTPD_DEBUG, ("Received \"%s\" request for URI: \"%s\"\n",
                      data, uri));
          /* Track request (IP + Cookie) for per-session auth */
          extern void Auth_SetCurrentRemoteIp(const ip_addr_t* ip);
          extern void Auth_BeginRequestWithCookieHeader(const char* headers, uint16_t headers_len);
          Auth_SetCurrentRemoteIp(&pcb->remote_ip);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	3304      	adds	r3, #4
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f7f4 fab1 	bl	800163c <Auth_SetCurrentRemoteIp>
          /* Headers are in 'data' up to CRLFCRLF */
          Auth_BeginRequestWithCookieHeader(data, (u16_t)(lwip_strnstr(data, CRLF CRLF, data_len) - data + 4));
 800d0da:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d0dc:	461a      	mov	r2, r3
 800d0de:	4937      	ldr	r1, [pc, #220]	@ (800d1bc <http_parse_request+0x280>)
 800d0e0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d0e2:	f007 fbac 	bl	801483e <lwip_strnstr>
 800d0e6:	4602      	mov	r2, r0
 800d0e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0ea:	1ad3      	subs	r3, r2, r3
 800d0ec:	b29b      	uxth	r3, r3
 800d0ee:	3304      	adds	r3, #4
 800d0f0:	b29b      	uxth	r3, r3
 800d0f2:	4619      	mov	r1, r3
 800d0f4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d0f6:	f7f4 fabd 	bl	8001674 <Auth_BeginRequestWithCookieHeader>
#if LWIP_HTTPD_SUPPORT_POST
          if (is_post) {
 800d0fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d026      	beq.n	800d14e <http_parse_request+0x212>
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
            struct pbuf *q = hs->req;
 800d100:	68bb      	ldr	r3, [r7, #8]
 800d102:	6a1b      	ldr	r3, [r3, #32]
 800d104:	617b      	str	r3, [r7, #20]
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            struct pbuf *q = inp;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            err = http_post_request(q, hs, data, data_len, uri, sp2);
 800d106:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d10a:	9301      	str	r3, [sp, #4]
 800d10c:	69bb      	ldr	r3, [r7, #24]
 800d10e:	9300      	str	r3, [sp, #0]
 800d110:	4613      	mov	r3, r2
 800d112:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d114:	68b9      	ldr	r1, [r7, #8]
 800d116:	6978      	ldr	r0, [r7, #20]
 800d118:	f7ff fe28 	bl	800cd6c <http_post_request>
 800d11c:	4603      	mov	r3, r0
 800d11e:	74fb      	strb	r3, [r7, #19]
            if (err != ERR_OK) {
 800d120:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d00a      	beq.n	800d13e <http_parse_request+0x202>
              /* restore header for next try */
              *sp1 = ' ';
 800d128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d12a:	2220      	movs	r2, #32
 800d12c:	701a      	strb	r2, [r3, #0]
              *sp2 = ' ';
 800d12e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d130:	2220      	movs	r2, #32
 800d132:	701a      	strb	r2, [r3, #0]
              uri[uri_len] = ' ';
 800d134:	8bbb      	ldrh	r3, [r7, #28]
 800d136:	69ba      	ldr	r2, [r7, #24]
 800d138:	4413      	add	r3, r2
 800d13a:	2220      	movs	r2, #32
 800d13c:	701a      	strb	r2, [r3, #0]
            }
            if (err == ERR_ARG) {
 800d13e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d142:	f113 0f10 	cmn.w	r3, #16
 800d146:	d01e      	beq.n	800d186 <http_parse_request+0x24a>
              goto badrequest;
            }
            return err;
 800d148:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d14c:	e020      	b.n	800d190 <http_parse_request+0x254>
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800d14e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d150:	69b9      	ldr	r1, [r7, #24]
 800d152:	68b8      	ldr	r0, [r7, #8]
 800d154:	f000 f834 	bl	800d1c0 <http_find_file>
 800d158:	4603      	mov	r3, r0
 800d15a:	e019      	b.n	800d190 <http_parse_request+0x254>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800d15c:	68bb      	ldr	r3, [r7, #8]
 800d15e:	6a1b      	ldr	r3, [r3, #32]
 800d160:	4618      	mov	r0, r3
 800d162:	f008 fe33 	bl	8015dcc <pbuf_clen>
 800d166:	4603      	mov	r3, r0
 800d168:	823b      	strh	r3, [r7, #16]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	6a1b      	ldr	r3, [r3, #32]
 800d16e:	891b      	ldrh	r3, [r3, #8]
 800d170:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d174:	d209      	bcs.n	800d18a <http_parse_request+0x24e>
 800d176:	8a3b      	ldrh	r3, [r7, #16]
 800d178:	2b05      	cmp	r3, #5
 800d17a:	d806      	bhi.n	800d18a <http_parse_request+0x24e>
    (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800d17c:	f06f 0304 	mvn.w	r3, #4
 800d180:	e006      	b.n	800d190 <http_parse_request+0x254>
          goto badrequest;
 800d182:	bf00      	nop
 800d184:	e002      	b.n	800d18c <http_parse_request+0x250>
              goto badrequest;
 800d186:	bf00      	nop
 800d188:	e000      	b.n	800d18c <http_parse_request+0x250>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
 800d18a:	bf00      	nop
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800d18c:	f06f 030f 	mvn.w	r3, #15
  }
}
 800d190:	4618      	mov	r0, r3
 800d192:	3740      	adds	r7, #64	@ 0x40
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}
 800d198:	0802502c 	.word	0x0802502c
 800d19c:	08025174 	.word	0x08025174
 800d1a0:	08025074 	.word	0x08025074
 800d1a4:	0802509c 	.word	0x0802509c
 800d1a8:	20008390 	.word	0x20008390
 800d1ac:	08025170 	.word	0x08025170
 800d1b0:	08025180 	.word	0x08025180
 800d1b4:	08025188 	.word	0x08025188
 800d1b8:	08025190 	.word	0x08025190
 800d1bc:	08025154 	.word	0x08025154

0800d1c0 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800d1c0:	b590      	push	{r4, r7, lr}
 800d1c2:	b097      	sub	sp, #92	@ 0x5c
 800d1c4:	af02      	add	r7, sp, #8
 800d1c6:	60f8      	str	r0, [r7, #12]
 800d1c8:	60b9      	str	r1, [r7, #8]
 800d1ca:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  char *params = NULL;
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	647b      	str	r3, [r7, #68]	@ 0x44
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f7f2 fffd 	bl	80001dc <strlen>
 800d1e2:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 800d1e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d06c      	beq.n	800d2c4 <http_find_file+0x104>
 800d1ea:	68ba      	ldr	r2, [r7, #8]
 800d1ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1ee:	3b01      	subs	r3, #1
 800d1f0:	4413      	add	r3, r2
 800d1f2:	781b      	ldrb	r3, [r3, #0]
 800d1f4:	2b2f      	cmp	r3, #47	@ 0x2f
 800d1f6:	d165      	bne.n	800d2c4 <http_find_file+0x104>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800d1f8:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 800d1fa:	4a97      	ldr	r2, [pc, #604]	@ (800d458 <http_find_file+0x298>)
 800d1fc:	4293      	cmp	r3, r2
 800d1fe:	d102      	bne.n	800d206 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800d200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d202:	2b01      	cmp	r3, #1
 800d204:	d15e      	bne.n	800d2c4 <http_find_file+0x104>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800d206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d208:	3b01      	subs	r3, #1
 800d20a:	2b3f      	cmp	r3, #63	@ 0x3f
 800d20c:	bf28      	it	cs
 800d20e:	233f      	movcs	r3, #63	@ 0x3f
 800d210:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (copy_len > 0) {
 800d212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d214:	2b00      	cmp	r3, #0
 800d216:	d00a      	beq.n	800d22e <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800d218:	68bb      	ldr	r3, [r7, #8]
 800d21a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d21c:	4619      	mov	r1, r3
 800d21e:	488e      	ldr	r0, [pc, #568]	@ (800d458 <http_find_file+0x298>)
 800d220:	f015 f82d 	bl	802227e <memcpy>
      http_uri_buf[copy_len] = 0;
 800d224:	4a8c      	ldr	r2, [pc, #560]	@ (800d458 <http_find_file+0x298>)
 800d226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d228:	4413      	add	r3, r2
 800d22a:	2200      	movs	r2, #0
 800d22c:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800d22e:	2300      	movs	r3, #0
 800d230:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d232:	e044      	b.n	800d2be <http_find_file+0xfe>
      const char* file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800d234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d236:	2b00      	cmp	r3, #0
 800d238:	d022      	beq.n	800d280 <http_find_file+0xc0>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800d23a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d23c:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 800d240:	627b      	str	r3, [r7, #36]	@ 0x24
        if (len_left > 0) {
 800d242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d244:	2b00      	cmp	r3, #0
 800d246:	d018      	beq.n	800d27a <http_find_file+0xba>
          size_t name_len = strlen(g_psDefaultFilenames[loop].name);
 800d248:	4a84      	ldr	r2, [pc, #528]	@ (800d45c <http_find_file+0x29c>)
 800d24a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d24c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d250:	4618      	mov	r0, r3
 800d252:	f7f2 ffc3 	bl	80001dc <strlen>
 800d256:	6238      	str	r0, [r7, #32]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800d258:	6a3a      	ldr	r2, [r7, #32]
 800d25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d25c:	4293      	cmp	r3, r2
 800d25e:	bf28      	it	cs
 800d260:	4613      	movcs	r3, r2
 800d262:	61fb      	str	r3, [r7, #28]
          MEMCPY(&http_uri_buf[copy_len], g_psDefaultFilenames[loop].name, name_copy_len);
 800d264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d266:	4a7c      	ldr	r2, [pc, #496]	@ (800d458 <http_find_file+0x298>)
 800d268:	1898      	adds	r0, r3, r2
 800d26a:	4a7c      	ldr	r2, [pc, #496]	@ (800d45c <http_find_file+0x29c>)
 800d26c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d26e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d272:	69fa      	ldr	r2, [r7, #28]
 800d274:	4619      	mov	r1, r3
 800d276:	f015 f802 	bl	802227e <memcpy>
        }
        file_name = http_uri_buf;
 800d27a:	4b77      	ldr	r3, [pc, #476]	@ (800d458 <http_find_file+0x298>)
 800d27c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d27e:	e004      	b.n	800d28a <http_find_file+0xca>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = g_psDefaultFilenames[loop].name;
 800d280:	4a76      	ldr	r2, [pc, #472]	@ (800d45c <http_find_file+0x29c>)
 800d282:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d284:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d288:	63bb      	str	r3, [r7, #56]	@ 0x38
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d28e:	4618      	mov	r0, r3
 800d290:	f7fe fc9a 	bl	800bbc8 <fs_open>
 800d294:	4603      	mov	r3, r0
 800d296:	76fb      	strb	r3, [r7, #27]
      if(err == ERR_OK) {
 800d298:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d10b      	bne.n	800d2b8 <http_find_file+0xf8>
        uri = file_name;
 800d2a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2a2:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	64bb      	str	r3, [r7, #72]	@ 0x48
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = g_psDefaultFilenames[loop].shtml;
 800d2a8:	4a6c      	ldr	r2, [pc, #432]	@ (800d45c <http_find_file+0x29c>)
 800d2aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2ac:	00db      	lsls	r3, r3, #3
 800d2ae:	4413      	add	r3, r2
 800d2b0:	791b      	ldrb	r3, [r3, #4]
 800d2b2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* LWIP_HTTPD_SSI */
        break;
 800d2b6:	e005      	b.n	800d2c4 <http_find_file+0x104>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800d2b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2ba:	3301      	adds	r3, #1
 800d2bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d2be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2c0:	2b04      	cmp	r3, #4
 800d2c2:	d9b7      	bls.n	800d234 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800d2c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	f040 80ab 	bne.w	800d422 <http_find_file+0x262>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	213f      	movs	r1, #63	@ 0x3f
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f014 feb7 	bl	8022044 <strchr>
 800d2d6:	6478      	str	r0, [r7, #68]	@ 0x44
    if (params != NULL) {
 800d2d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d005      	beq.n	800d2ea <http_find_file+0x12a>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800d2de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	701a      	strb	r2, [r3, #0]
      params++;
 800d2e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d2e6:	3301      	adds	r3, #1
 800d2e8:	647b      	str	r3, [r7, #68]	@ 0x44
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 800d2ea:	4b5d      	ldr	r3, [pc, #372]	@ (800d460 <http_find_file+0x2a0>)
 800d2ec:	f04f 32ff 	mov.w	r2, #4294967295
 800d2f0:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (g_iNumCGIs && g_pCGIs) {
 800d2f2:	4b5c      	ldr	r3, [pc, #368]	@ (800d464 <http_find_file+0x2a4>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d034      	beq.n	800d364 <http_find_file+0x1a4>
 800d2fa:	4b5b      	ldr	r3, [pc, #364]	@ (800d468 <http_find_file+0x2a8>)
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d030      	beq.n	800d364 <http_find_file+0x1a4>
      for (i = 0; i < g_iNumCGIs; i++) {
 800d302:	2300      	movs	r3, #0
 800d304:	643b      	str	r3, [r7, #64]	@ 0x40
 800d306:	e028      	b.n	800d35a <http_find_file+0x19a>
        if (strcmp(uri, g_pCGIs[i].pcCGIName) == 0) {
 800d308:	68b8      	ldr	r0, [r7, #8]
 800d30a:	4b57      	ldr	r3, [pc, #348]	@ (800d468 <http_find_file+0x2a8>)
 800d30c:	681a      	ldr	r2, [r3, #0]
 800d30e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d310:	00db      	lsls	r3, r3, #3
 800d312:	4413      	add	r3, r2
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	4619      	mov	r1, r3
 800d318:	f7f2 ff56 	bl	80001c8 <strcmp>
 800d31c:	4603      	mov	r3, r0
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d118      	bne.n	800d354 <http_find_file+0x194>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
           http_cgi_paramcount = extract_uri_parameters(hs, params);
 800d322:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d324:	68f8      	ldr	r0, [r7, #12]
 800d326:	f7ff f801 	bl	800c32c <extract_uri_parameters>
 800d32a:	4603      	mov	r3, r0
 800d32c:	4a4c      	ldr	r2, [pc, #304]	@ (800d460 <http_find_file+0x2a0>)
 800d32e:	6013      	str	r3, [r2, #0]
           uri = g_pCGIs[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800d330:	4b4d      	ldr	r3, [pc, #308]	@ (800d468 <http_find_file+0x2a8>)
 800d332:	681a      	ldr	r2, [r3, #0]
 800d334:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d336:	00db      	lsls	r3, r3, #3
 800d338:	4413      	add	r3, r2
 800d33a:	685c      	ldr	r4, [r3, #4]
 800d33c:	4b48      	ldr	r3, [pc, #288]	@ (800d460 <http_find_file+0x2a0>)
 800d33e:	6819      	ldr	r1, [r3, #0]
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	f103 0230 	add.w	r2, r3, #48	@ 0x30
                                          hs->param_vals);
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	3370      	adds	r3, #112	@ 0x70
           uri = g_pCGIs[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800d34a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800d34c:	47a0      	blx	r4
 800d34e:	4603      	mov	r3, r0
 800d350:	60bb      	str	r3, [r7, #8]
           break;
 800d352:	e007      	b.n	800d364 <http_find_file+0x1a4>
      for (i = 0; i < g_iNumCGIs; i++) {
 800d354:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d356:	3301      	adds	r3, #1
 800d358:	643b      	str	r3, [r7, #64]	@ 0x40
 800d35a:	4b42      	ldr	r3, [pc, #264]	@ (800d464 <http_find_file+0x2a4>)
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d360:	429a      	cmp	r2, r3
 800d362:	dbd1      	blt.n	800d308 <http_find_file+0x148>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	68ba      	ldr	r2, [r7, #8]
 800d368:	4611      	mov	r1, r2
 800d36a:	4618      	mov	r0, r3
 800d36c:	f7fe fc2c 	bl	800bbc8 <fs_open>
 800d370:	4603      	mov	r3, r0
 800d372:	76fb      	strb	r3, [r7, #27]
    if (err == ERR_OK) {
 800d374:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d102      	bne.n	800d382 <http_find_file+0x1c2>
       file = &hs->file_handle;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d380:	e006      	b.n	800d390 <http_find_file+0x1d0>
    } else {
      file = http_get_404_file(hs, &uri);
 800d382:	f107 0308 	add.w	r3, r7, #8
 800d386:	4619      	mov	r1, r3
 800d388:	68f8      	ldr	r0, [r7, #12]
 800d38a:	f7ff fc57 	bl	800cc3c <http_get_404_file>
 800d38e:	64b8      	str	r0, [r7, #72]	@ 0x48
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 800d390:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d392:	2b00      	cmp	r3, #0
 800d394:	d045      	beq.n	800d422 <http_find_file+0x262>
      /* See if we have been asked for an shtml file and, if so,
         enable tag checking. */
      const char* ext = NULL, *sub;
 800d396:	2300      	movs	r3, #0
 800d398:	637b      	str	r3, [r7, #52]	@ 0x34
      char* param = (char*)strstr(uri, "?");
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	213f      	movs	r1, #63	@ 0x3f
 800d39e:	4618      	mov	r0, r3
 800d3a0:	f014 fe50 	bl	8022044 <strchr>
 800d3a4:	6178      	str	r0, [r7, #20]
      if (param != NULL) {
 800d3a6:	697b      	ldr	r3, [r7, #20]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d002      	beq.n	800d3b2 <http_find_file+0x1f2>
         /* separate uri from parameters for now, set back later */
         *param = 0;
 800d3ac:	697b      	ldr	r3, [r7, #20]
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	701a      	strb	r2, [r3, #0]
      }
      sub = uri;
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	633b      	str	r3, [r7, #48]	@ 0x30
      ext = uri;
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	637b      	str	r3, [r7, #52]	@ 0x34
      for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, "."))
 800d3ba:	212e      	movs	r1, #46	@ 0x2e
 800d3bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d3be:	f014 fe41 	bl	8022044 <strchr>
 800d3c2:	6338      	str	r0, [r7, #48]	@ 0x30
 800d3c4:	e009      	b.n	800d3da <http_find_file+0x21a>
      {
         ext = sub;
 800d3c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3c8:	637b      	str	r3, [r7, #52]	@ 0x34
         sub++;
 800d3ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3cc:	3301      	adds	r3, #1
 800d3ce:	633b      	str	r3, [r7, #48]	@ 0x30
      for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, "."))
 800d3d0:	212e      	movs	r1, #46	@ 0x2e
 800d3d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d3d4:	f014 fe36 	bl	8022044 <strchr>
 800d3d8:	6338      	str	r0, [r7, #48]	@ 0x30
 800d3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d1f2      	bne.n	800d3c6 <http_find_file+0x206>
      }
      tag_check = 0;
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d3ea:	e011      	b.n	800d410 <http_find_file+0x250>
        if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 800d3ec:	4a1f      	ldr	r2, [pc, #124]	@ (800d46c <http_find_file+0x2ac>)
 800d3ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d3f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3f4:	4619      	mov	r1, r3
 800d3f6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d3f8:	f007 fa57 	bl	80148aa <lwip_stricmp>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d103      	bne.n	800d40a <http_find_file+0x24a>
          tag_check = 1;
 800d402:	2301      	movs	r3, #1
 800d404:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
          break;
 800d408:	e005      	b.n	800d416 <http_find_file+0x256>
      for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800d40a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d40c:	3301      	adds	r3, #1
 800d40e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d410:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d412:	2b03      	cmp	r3, #3
 800d414:	d9ea      	bls.n	800d3ec <http_find_file+0x22c>
        }
      }
      if (param != NULL) {
 800d416:	697b      	ldr	r3, [r7, #20]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d002      	beq.n	800d422 <http_find_file+0x262>
         *param = '?';
 800d41c:	697b      	ldr	r3, [r7, #20]
 800d41e:	223f      	movs	r2, #63	@ 0x3f
 800d420:	701a      	strb	r2, [r3, #0]
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800d422:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d424:	2b00      	cmp	r3, #0
 800d426:	d106      	bne.n	800d436 <http_find_file+0x276>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800d428:	f107 0308 	add.w	r3, r7, #8
 800d42c:	4619      	mov	r1, r3
 800d42e:	68f8      	ldr	r0, [r7, #12]
 800d430:	f7ff fc04 	bl	800cc3c <http_get_404_file>
 800d434:	64b8      	str	r0, [r7, #72]	@ 0x48
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800d436:	68ba      	ldr	r2, [r7, #8]
 800d438:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d43a:	9301      	str	r3, [sp, #4]
 800d43c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d440:	9300      	str	r3, [sp, #0]
 800d442:	4613      	mov	r3, r2
 800d444:	687a      	ldr	r2, [r7, #4]
 800d446:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800d448:	68f8      	ldr	r0, [r7, #12]
 800d44a:	f000 f811 	bl	800d470 <http_init_file>
 800d44e:	4603      	mov	r3, r0
}
 800d450:	4618      	mov	r0, r3
 800d452:	3754      	adds	r7, #84	@ 0x54
 800d454:	46bd      	mov	sp, r7
 800d456:	bd90      	pop	{r4, r7, pc}
 800d458:	20008790 	.word	0x20008790
 800d45c:	0802fcc0 	.word	0x0802fcc0
 800d460:	200087e4 	.word	0x200087e4
 800d464:	200087e0 	.word	0x200087e0
 800d468:	200087dc 	.word	0x200087dc
 800d46c:	0802fcb0 	.word	0x0802fcb0

0800d470 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char* params)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b088      	sub	sp, #32
 800d474:	af00      	add	r7, sp, #0
 800d476:	60f8      	str	r0, [r7, #12]
 800d478:	60b9      	str	r1, [r7, #8]
 800d47a:	607a      	str	r2, [r7, #4]
 800d47c:	603b      	str	r3, [r7, #0]
  if (file != NULL) {
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d07e      	beq.n	800d582 <http_init_file+0x112>
    /* file opened, initialise struct http_state */
#if LWIP_HTTPD_SSI
    if (tag_check) {
 800d484:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d01c      	beq.n	800d4c6 <http_init_file+0x56>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 800d48c:	f7fe fdf8 	bl	800c080 <http_ssi_state_alloc>
 800d490:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 800d492:	69fb      	ldr	r3, [r7, #28]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d016      	beq.n	800d4c6 <http_init_file+0x56>
        ssi->tag_index = 0;
 800d498:	69fb      	ldr	r3, [r7, #28]
 800d49a:	2200      	movs	r2, #0
 800d49c:	819a      	strh	r2, [r3, #12]
        ssi->tag_state = TAG_NONE;
 800d49e:	69fb      	ldr	r3, [r7, #28]
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
        ssi->parsed = file->data;
 800d4a6:	68bb      	ldr	r3, [r7, #8]
 800d4a8:	681a      	ldr	r2, [r3, #0]
 800d4aa:	69fb      	ldr	r3, [r7, #28]
 800d4ac:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 800d4ae:	68bb      	ldr	r3, [r7, #8]
 800d4b0:	685b      	ldr	r3, [r3, #4]
 800d4b2:	461a      	mov	r2, r3
 800d4b4:	69fb      	ldr	r3, [r7, #28]
 800d4b6:	609a      	str	r2, [r3, #8]
        ssi->tag_end = file->data;
 800d4b8:	68bb      	ldr	r3, [r7, #8]
 800d4ba:	681a      	ldr	r2, [r3, #0]
 800d4bc:	69fb      	ldr	r3, [r7, #28]
 800d4be:	605a      	str	r2, [r3, #4]
        hs->ssi = ssi;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	69fa      	ldr	r2, [r7, #28]
 800d4c4:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	68ba      	ldr	r2, [r7, #8]
 800d4ca:	615a      	str	r2, [r3, #20]
    hs->file = file->data;
 800d4cc:	68bb      	ldr	r3, [r7, #8]
 800d4ce:	681a      	ldr	r2, [r3, #0]
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	685b      	ldr	r3, [r3, #4]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	da06      	bge.n	800d4ea <http_init_file+0x7a>
 800d4dc:	4b32      	ldr	r3, [pc, #200]	@ (800d5a8 <http_init_file+0x138>)
 800d4de:	f640 1217 	movw	r2, #2327	@ 0x917
 800d4e2:	4932      	ldr	r1, [pc, #200]	@ (800d5ac <http_init_file+0x13c>)
 800d4e4:	4832      	ldr	r0, [pc, #200]	@ (800d5b0 <http_init_file+0x140>)
 800d4e6:	f014 fbcf 	bl	8021c88 <iprintf>
#if LWIP_HTTPD_CUSTOM_FILES
    if (file->is_custom_file && (file->data == NULL)) {
 800d4ea:	68bb      	ldr	r3, [r7, #8]
 800d4ec:	7c5b      	ldrb	r3, [r3, #17]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d007      	beq.n	800d502 <http_init_file+0x92>
 800d4f2:	68bb      	ldr	r3, [r7, #8]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d103      	bne.n	800d502 <http_init_file+0x92>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	625a      	str	r2, [r3, #36]	@ 0x24
 800d500:	e004      	b.n	800d50c <http_init_file+0x9c>
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = file->len;
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	685b      	ldr	r3, [r3, #4]
 800d506:	461a      	mov	r2, r3
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    hs->retries = 0;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	2200      	movs	r2, #0
 800d510:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	695b      	ldr	r3, [r3, #20]
 800d518:	7c1b      	ldrb	r3, [r3, #16]
 800d51a:	f003 0301 	and.w	r3, r3, #1
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d106      	bne.n	800d530 <http_init_file+0xc0>
 800d522:	4b21      	ldr	r3, [pc, #132]	@ (800d5a8 <http_init_file+0x138>)
 800d524:	f640 1226 	movw	r2, #2342	@ 0x926
 800d528:	4922      	ldr	r1, [pc, #136]	@ (800d5b4 <http_init_file+0x144>)
 800d52a:	4821      	ldr	r0, [pc, #132]	@ (800d5b0 <http_init_file+0x140>)
 800d52c:	f014 fbac 	bl	8021c88 <iprintf>
       (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d032      	beq.n	800d59c <http_init_file+0x12c>
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	695b      	ldr	r3, [r3, #20]
 800d53a:	7c1b      	ldrb	r3, [r3, #16]
 800d53c:	f003 0301 	and.w	r3, r3, #1
 800d540:	2b00      	cmp	r3, #0
 800d542:	d02b      	beq.n	800d59c <http_init_file+0x12c>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	6998      	ldr	r0, [r3, #24]
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d54c:	461a      	mov	r2, r3
 800d54e:	491a      	ldr	r1, [pc, #104]	@ (800d5b8 <http_init_file+0x148>)
 800d550:	f007 f975 	bl	801483e <lwip_strnstr>
 800d554:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 800d556:	69bb      	ldr	r3, [r7, #24]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d01f      	beq.n	800d59c <http_init_file+0x12c>
        size_t diff = file_start + 4 - hs->file;
 800d55c:	69bb      	ldr	r3, [r7, #24]
 800d55e:	1d1a      	adds	r2, r3, #4
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	699b      	ldr	r3, [r3, #24]
 800d564:	1ad3      	subs	r3, r2, r3
 800d566:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	699a      	ldr	r2, [r3, #24]
 800d56c:	697b      	ldr	r3, [r7, #20]
 800d56e:	441a      	add	r2, r3
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	1ad2      	subs	r2, r2, r3
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	625a      	str	r2, [r3, #36]	@ 0x24
 800d580:	e00c      	b.n	800d59c <http_init_file+0x12c>
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
  } else {
    hs->handle = NULL;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	2200      	movs	r2, #0
 800d586:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	2200      	movs	r2, #0
 800d58c:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	2200      	movs	r2, #0
 800d592:	625a      	str	r2, [r3, #36]	@ 0x24
    hs->retries = 0;
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	2200      	movs	r2, #0
 800d598:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
         hs->keepalive = 0;
       }
     }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800d59c:	2300      	movs	r3, #0
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3720      	adds	r7, #32
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}
 800d5a6:	bf00      	nop
 800d5a8:	0802502c 	.word	0x0802502c
 800d5ac:	08025194 	.word	0x08025194
 800d5b0:	08025074 	.word	0x08025074
 800d5b4:	080251b4 	.word	0x080251b4
 800d5b8:	08025154 	.word	0x08025154

0800d5bc <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b084      	sub	sp, #16
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
 800d5c4:	460b      	mov	r3, r1
 800d5c6:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d002      	beq.n	800d5d8 <http_err+0x1c>
    http_state_free(hs);
 800d5d2:	68f8      	ldr	r0, [r7, #12]
 800d5d4:	f7fe fdc1 	bl	800c15a <http_state_free>
  }
}
 800d5d8:	bf00      	nop
 800d5da:	3710      	adds	r7, #16
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}

0800d5e0 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b086      	sub	sp, #24
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	60f8      	str	r0, [r7, #12]
 800d5e8:	60b9      	str	r1, [r7, #8]
 800d5ea:	4613      	mov	r3, r2
 800d5ec:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void*)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800d5f2:	697b      	ldr	r3, [r7, #20]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d101      	bne.n	800d5fc <http_sent+0x1c>
    return ERR_OK;
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	e008      	b.n	800d60e <http_sent+0x2e>
  }

  hs->retries = 0;
 800d5fc:	697b      	ldr	r3, [r7, #20]
 800d5fe:	2200      	movs	r2, #0
 800d600:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  http_send(pcb, hs);
 800d604:	6979      	ldr	r1, [r7, #20]
 800d606:	68b8      	ldr	r0, [r7, #8]
 800d608:	f7ff fad6 	bl	800cbb8 <http_send>

  return ERR_OK;
 800d60c:	2300      	movs	r3, #0
}
 800d60e:	4618      	mov	r0, r3
 800d610:	3718      	adds	r7, #24
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}

0800d616 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct tcp_pcb *pcb)
{
 800d616:	b580      	push	{r7, lr}
 800d618:	b084      	sub	sp, #16
 800d61a:	af00      	add	r7, sp, #0
 800d61c:	6078      	str	r0, [r7, #4]
 800d61e:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
    (void*)pcb, (void*)hs, tcp_debug_state_str(pcb->state)));

  if (hs == NULL) {
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d107      	bne.n	800d63a <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800d62a:	2100      	movs	r1, #0
 800d62c:	6838      	ldr	r0, [r7, #0]
 800d62e:	f7fe fe61 	bl	800c2f4 <http_close_conn>
 800d632:	4603      	mov	r3, r0
 800d634:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
       tcp_abort(pcb);
       return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800d636:	2300      	movs	r3, #0
 800d638:	e024      	b.n	800d684 <http_poll+0x6e>
  } else {
    hs->retries++;
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d640:	3301      	adds	r3, #1
 800d642:	b2da      	uxtb	r2, r3
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d650:	2b04      	cmp	r3, #4
 800d652:	d105      	bne.n	800d660 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800d654:	68f9      	ldr	r1, [r7, #12]
 800d656:	6838      	ldr	r0, [r7, #0]
 800d658:	f7fe fe4c 	bl	800c2f4 <http_close_conn>
      return ERR_OK;
 800d65c:	2300      	movs	r3, #0
 800d65e:	e011      	b.n	800d684 <http_poll+0x6e>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if(hs && (hs->handle)) {
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d00d      	beq.n	800d682 <http_poll+0x6c>
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	695b      	ldr	r3, [r3, #20]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d009      	beq.n	800d682 <http_poll+0x6c>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if(http_send(pcb, hs)) {
 800d66e:	68f9      	ldr	r1, [r7, #12]
 800d670:	6838      	ldr	r0, [r7, #0]
 800d672:	f7ff faa1 	bl	800cbb8 <http_send>
 800d676:	4603      	mov	r3, r0
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d002      	beq.n	800d682 <http_poll+0x6c>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        tcp_output(pcb);
 800d67c:	6838      	ldr	r0, [r7, #0]
 800d67e:	f00d fcbb 	bl	801aff8 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800d682:	2300      	movs	r3, #0
}
 800d684:	4618      	mov	r0, r3
 800d686:	3710      	adds	r7, #16
 800d688:	46bd      	mov	sp, r7
 800d68a:	bd80      	pop	{r7, pc}

0800d68c <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b086      	sub	sp, #24
 800d690:	af00      	add	r7, sp, #0
 800d692:	60f8      	str	r0, [r7, #12]
 800d694:	60b9      	str	r1, [r7, #8]
 800d696:	607a      	str	r2, [r7, #4]
 800d698:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void*)pcb,
    (void*)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800d69e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d105      	bne.n	800d6b2 <http_recv+0x26>
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d002      	beq.n	800d6b2 <http_recv+0x26>
 800d6ac:	697b      	ldr	r3, [r7, #20]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d111      	bne.n	800d6d6 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d008      	beq.n	800d6ca <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      tcp_recved(pcb, p->tot_len);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	891b      	ldrh	r3, [r3, #8]
 800d6bc:	4619      	mov	r1, r3
 800d6be:	68b8      	ldr	r0, [r7, #8]
 800d6c0:	f009 fae0 	bl	8016c84 <tcp_recved>
      pbuf_free(p);
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f008 faed 	bl	8015ca4 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800d6ca:	6979      	ldr	r1, [r7, #20]
 800d6cc:	68b8      	ldr	r0, [r7, #8]
 800d6ce:	f7fe fe11 	bl	800c2f4 <http_close_conn>
    return ERR_OK;
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	e072      	b.n	800d7bc <http_recv+0x130>
     hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    tcp_recved(pcb, p->tot_len);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	891b      	ldrh	r3, [r3, #8]
 800d6da:	4619      	mov	r1, r3
 800d6dc:	68b8      	ldr	r0, [r7, #8]
 800d6de:	f009 fad1 	bl	8016c84 <tcp_recved>
  }

#if LWIP_HTTPD_SUPPORT_POST
  if (hs->post_content_len_left > 0) {
 800d6e2:	697b      	ldr	r3, [r7, #20]
 800d6e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d012      	beq.n	800d712 <http_recv+0x86>
    /* reset idle counter when POST data is received */
    hs->retries = 0;
 800d6ec:	697b      	ldr	r3, [r7, #20]
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    /* this is data for a POST, pass the complete pbuf to the application */
    http_post_rxpbuf(hs, p);
 800d6f4:	6879      	ldr	r1, [r7, #4]
 800d6f6:	6978      	ldr	r0, [r7, #20]
 800d6f8:	f7ff fafe 	bl	800ccf8 <http_post_rxpbuf>
    /* pbuf is passed to the application, don't free it! */
    if (hs->post_content_len_left == 0) {
 800d6fc:	697b      	ldr	r3, [r7, #20]
 800d6fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d702:	2b00      	cmp	r3, #0
 800d704:	d103      	bne.n	800d70e <http_recv+0x82>
      /* all data received, send response or close connection */
      http_send(pcb, hs);
 800d706:	6979      	ldr	r1, [r7, #20]
 800d708:	68b8      	ldr	r0, [r7, #8]
 800d70a:	f7ff fa55 	bl	800cbb8 <http_send>
    }
    return ERR_OK;
 800d70e:	2300      	movs	r3, #0
 800d710:	e054      	b.n	800d7bc <http_recv+0x130>
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800d712:	697b      	ldr	r3, [r7, #20]
 800d714:	695b      	ldr	r3, [r3, #20]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d14c      	bne.n	800d7b4 <http_recv+0x128>
      err_t parsed = http_parse_request(p, hs, pcb);
 800d71a:	68ba      	ldr	r2, [r7, #8]
 800d71c:	6979      	ldr	r1, [r7, #20]
 800d71e:	6878      	ldr	r0, [r7, #4]
 800d720:	f7ff fc0c 	bl	800cf3c <http_parse_request>
 800d724:	4603      	mov	r3, r0
 800d726:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800d728:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d015      	beq.n	800d75c <http_recv+0xd0>
 800d730:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d734:	f113 0f05 	cmn.w	r3, #5
 800d738:	d010      	beq.n	800d75c <http_recv+0xd0>
 800d73a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d73e:	f113 0f10 	cmn.w	r3, #16
 800d742:	d00b      	beq.n	800d75c <http_recv+0xd0>
 800d744:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d748:	f113 0f08 	cmn.w	r3, #8
 800d74c:	d006      	beq.n	800d75c <http_recv+0xd0>
 800d74e:	4b1d      	ldr	r3, [pc, #116]	@ (800d7c4 <http_recv+0x138>)
 800d750:	f640 12fc 	movw	r2, #2556	@ 0x9fc
 800d754:	491c      	ldr	r1, [pc, #112]	@ (800d7c8 <http_recv+0x13c>)
 800d756:	481d      	ldr	r0, [pc, #116]	@ (800d7cc <http_recv+0x140>)
 800d758:	f014 fa96 	bl	8021c88 <iprintf>
        || parsed == ERR_INPROGRESS ||parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800d75c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d760:	f113 0f05 	cmn.w	r3, #5
 800d764:	d00b      	beq.n	800d77e <http_recv+0xf2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	6a1b      	ldr	r3, [r3, #32]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d007      	beq.n	800d77e <http_recv+0xf2>
          pbuf_free(hs->req);
 800d76e:	697b      	ldr	r3, [r7, #20]
 800d770:	6a1b      	ldr	r3, [r3, #32]
 800d772:	4618      	mov	r0, r3
 800d774:	f008 fa96 	bl	8015ca4 <pbuf_free>
          hs->req = NULL;
 800d778:	697b      	ldr	r3, [r7, #20]
 800d77a:	2200      	movs	r2, #0
 800d77c:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800d77e:	6878      	ldr	r0, [r7, #4]
 800d780:	f008 fa90 	bl	8015ca4 <pbuf_free>
      if (parsed == ERR_OK) {
 800d784:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d109      	bne.n	800d7a0 <http_recv+0x114>
#if LWIP_HTTPD_SUPPORT_POST
       if (hs->post_content_len_left == 0)
 800d78c:	697b      	ldr	r3, [r7, #20]
 800d78e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d792:	2b00      	cmp	r3, #0
 800d794:	d111      	bne.n	800d7ba <http_recv+0x12e>
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void*)hs->file, hs->left));
          http_send(pcb, hs);
 800d796:	6979      	ldr	r1, [r7, #20]
 800d798:	68b8      	ldr	r0, [r7, #8]
 800d79a:	f7ff fa0d 	bl	800cbb8 <http_send>
 800d79e:	e00c      	b.n	800d7ba <http_recv+0x12e>
        }
      } else if (parsed == ERR_ARG) {
 800d7a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d7a4:	f113 0f10 	cmn.w	r3, #16
 800d7a8:	d107      	bne.n	800d7ba <http_recv+0x12e>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800d7aa:	6979      	ldr	r1, [r7, #20]
 800d7ac:	68b8      	ldr	r0, [r7, #8]
 800d7ae:	f7fe fda1 	bl	800c2f4 <http_close_conn>
 800d7b2:	e002      	b.n	800d7ba <http_recv+0x12e>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	f008 fa75 	bl	8015ca4 <pbuf_free>
    }
  }
  return ERR_OK;
 800d7ba:	2300      	movs	r3, #0
}
 800d7bc:	4618      	mov	r0, r3
 800d7be:	3718      	adds	r7, #24
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	bd80      	pop	{r7, pc}
 800d7c4:	0802502c 	.word	0x0802502c
 800d7c8:	080251e0 	.word	0x080251e0
 800d7cc:	08025074 	.word	0x08025074

0800d7d0 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b086      	sub	sp, #24
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	60f8      	str	r0, [r7, #12]
 800d7d8:	60b9      	str	r1, [r7, #8]
 800d7da:	4613      	mov	r3, r2
 800d7dc:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void*)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800d7de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d102      	bne.n	800d7ec <http_accept+0x1c>
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d102      	bne.n	800d7f2 <http_accept+0x22>
    return ERR_VAL;
 800d7ec:	f06f 0305 	mvn.w	r3, #5
 800d7f0:	e025      	b.n	800d83e <http_accept+0x6e>
  }

  /* Set priority */
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 800d7f2:	2101      	movs	r1, #1
 800d7f4:	68b8      	ldr	r0, [r7, #8]
 800d7f6:	f009 fea1 	bl	801753c <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800d7fa:	f7fe fc70 	bl	800c0de <http_state_alloc>
 800d7fe:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800d800:	697b      	ldr	r3, [r7, #20]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d102      	bne.n	800d80c <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800d806:	f04f 33ff 	mov.w	r3, #4294967295
 800d80a:	e018      	b.n	800d83e <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800d80c:	697b      	ldr	r3, [r7, #20]
 800d80e:	68ba      	ldr	r2, [r7, #8]
 800d810:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  tcp_arg(pcb, hs);
 800d812:	6979      	ldr	r1, [r7, #20]
 800d814:	68b8      	ldr	r0, [r7, #8]
 800d816:	f00a f853 	bl	80178c0 <tcp_arg>

  /* Set up the various callback functions */
  tcp_recv(pcb, http_recv);
 800d81a:	490b      	ldr	r1, [pc, #44]	@ (800d848 <http_accept+0x78>)
 800d81c:	68b8      	ldr	r0, [r7, #8]
 800d81e:	f00a f85f 	bl	80178e0 <tcp_recv>
  tcp_err(pcb, http_err);
 800d822:	490a      	ldr	r1, [pc, #40]	@ (800d84c <http_accept+0x7c>)
 800d824:	68b8      	ldr	r0, [r7, #8]
 800d826:	f00a f89d 	bl	8017964 <tcp_err>
  tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800d82a:	2204      	movs	r2, #4
 800d82c:	4908      	ldr	r1, [pc, #32]	@ (800d850 <http_accept+0x80>)
 800d82e:	68b8      	ldr	r0, [r7, #8]
 800d830:	f00a f8d0 	bl	80179d4 <tcp_poll>
  tcp_sent(pcb, http_sent);
 800d834:	4907      	ldr	r1, [pc, #28]	@ (800d854 <http_accept+0x84>)
 800d836:	68b8      	ldr	r0, [r7, #8]
 800d838:	f00a f874 	bl	8017924 <tcp_sent>

  return ERR_OK;
 800d83c:	2300      	movs	r3, #0
}
 800d83e:	4618      	mov	r0, r3
 800d840:	3718      	adds	r7, #24
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}
 800d846:	bf00      	nop
 800d848:	0800d68d 	.word	0x0800d68d
 800d84c:	0800d5bd 	.word	0x0800d5bd
 800d850:	0800d617 	.word	0x0800d617
 800d854:	0800d5e1 	.word	0x0800d5e1

0800d858 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b082      	sub	sp, #8
 800d85c:	af00      	add	r7, sp, #0
  LWIP_MEMPOOL_INIT(HTTPD_SSI_STATE);
#endif
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  pcb = tcp_new_ip_type(IPADDR_TYPE_ANY);
 800d85e:	202e      	movs	r0, #46	@ 0x2e
 800d860:	f00a f820 	bl	80178a4 <tcp_new_ip_type>
 800d864:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d106      	bne.n	800d87a <httpd_init+0x22>
 800d86c:	4b19      	ldr	r3, [pc, #100]	@ (800d8d4 <httpd_init+0x7c>)
 800d86e:	f640 2258 	movw	r2, #2648	@ 0xa58
 800d872:	4919      	ldr	r1, [pc, #100]	@ (800d8d8 <httpd_init+0x80>)
 800d874:	4819      	ldr	r0, [pc, #100]	@ (800d8dc <httpd_init+0x84>)
 800d876:	f014 fa07 	bl	8021c88 <iprintf>
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 800d87a:	2101      	movs	r1, #1
 800d87c:	6878      	ldr	r0, [r7, #4]
 800d87e:	f009 fe5d 	bl	801753c <tcp_setprio>
  /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
  err = tcp_bind(pcb, IP_ANY_TYPE, HTTPD_SERVER_PORT);
 800d882:	2250      	movs	r2, #80	@ 0x50
 800d884:	4916      	ldr	r1, [pc, #88]	@ (800d8e0 <httpd_init+0x88>)
 800d886:	6878      	ldr	r0, [r7, #4]
 800d888:	f009 f862 	bl	8016950 <tcp_bind>
 800d88c:	4603      	mov	r3, r0
 800d88e:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800d890:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d006      	beq.n	800d8a6 <httpd_init+0x4e>
 800d898:	4b0e      	ldr	r3, [pc, #56]	@ (800d8d4 <httpd_init+0x7c>)
 800d89a:	f640 225d 	movw	r2, #2653	@ 0xa5d
 800d89e:	4911      	ldr	r1, [pc, #68]	@ (800d8e4 <httpd_init+0x8c>)
 800d8a0:	480e      	ldr	r0, [pc, #56]	@ (800d8dc <httpd_init+0x84>)
 800d8a2:	f014 f9f1 	bl	8021c88 <iprintf>
  pcb = tcp_listen(pcb);
 800d8a6:	21ff      	movs	r1, #255	@ 0xff
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f009 f8f3 	bl	8016a94 <tcp_listen_with_backlog>
 800d8ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d106      	bne.n	800d8c4 <httpd_init+0x6c>
 800d8b6:	4b07      	ldr	r3, [pc, #28]	@ (800d8d4 <httpd_init+0x7c>)
 800d8b8:	f640 225f 	movw	r2, #2655	@ 0xa5f
 800d8bc:	490a      	ldr	r1, [pc, #40]	@ (800d8e8 <httpd_init+0x90>)
 800d8be:	4807      	ldr	r0, [pc, #28]	@ (800d8dc <httpd_init+0x84>)
 800d8c0:	f014 f9e2 	bl	8021c88 <iprintf>
  tcp_accept(pcb, http_accept);
 800d8c4:	4909      	ldr	r1, [pc, #36]	@ (800d8ec <httpd_init+0x94>)
 800d8c6:	6878      	ldr	r0, [r7, #4]
 800d8c8:	f00a f86e 	bl	80179a8 <tcp_accept>
}
 800d8cc:	bf00      	nop
 800d8ce:	3708      	adds	r7, #8
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}
 800d8d4:	0802502c 	.word	0x0802502c
 800d8d8:	0802520c 	.word	0x0802520c
 800d8dc:	08025074 	.word	0x08025074
 800d8e0:	08030cf4 	.word	0x08030cf4
 800d8e4:	08025228 	.word	0x08025228
 800d8e8:	08025244 	.word	0x08025244
 800d8ec:	0800d7d1 	.word	0x0800d7d1

0800d8f0 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b084      	sub	sp, #16
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	60f8      	str	r0, [r7, #12]
 800d8f8:	60b9      	str	r1, [r7, #8]
 800d8fa:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d106      	bne.n	800d910 <http_set_ssi_handler+0x20>
 800d902:	4b14      	ldr	r3, [pc, #80]	@ (800d954 <http_set_ssi_handler+0x64>)
 800d904:	f44f 6227 	mov.w	r2, #2672	@ 0xa70
 800d908:	4913      	ldr	r1, [pc, #76]	@ (800d958 <http_set_ssi_handler+0x68>)
 800d90a:	4814      	ldr	r0, [pc, #80]	@ (800d95c <http_set_ssi_handler+0x6c>)
 800d90c:	f014 f9bc 	bl	8021c88 <iprintf>
  g_pfnSSIHandler = ssi_handler;
 800d910:	4a13      	ldr	r2, [pc, #76]	@ (800d960 <http_set_ssi_handler+0x70>)
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d106      	bne.n	800d92a <http_set_ssi_handler+0x3a>
 800d91c:	4b0d      	ldr	r3, [pc, #52]	@ (800d954 <http_set_ssi_handler+0x64>)
 800d91e:	f640 2277 	movw	r2, #2679	@ 0xa77
 800d922:	4910      	ldr	r1, [pc, #64]	@ (800d964 <http_set_ssi_handler+0x74>)
 800d924:	480d      	ldr	r0, [pc, #52]	@ (800d95c <http_set_ssi_handler+0x6c>)
 800d926:	f014 f9af 	bl	8021c88 <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	dc06      	bgt.n	800d93e <http_set_ssi_handler+0x4e>
 800d930:	4b08      	ldr	r3, [pc, #32]	@ (800d954 <http_set_ssi_handler+0x64>)
 800d932:	f640 2278 	movw	r2, #2680	@ 0xa78
 800d936:	490c      	ldr	r1, [pc, #48]	@ (800d968 <http_set_ssi_handler+0x78>)
 800d938:	4808      	ldr	r0, [pc, #32]	@ (800d95c <http_set_ssi_handler+0x6c>)
 800d93a:	f014 f9a5 	bl	8021c88 <iprintf>

  g_ppcTags = tags;
 800d93e:	4a0b      	ldr	r2, [pc, #44]	@ (800d96c <http_set_ssi_handler+0x7c>)
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	6013      	str	r3, [r2, #0]
  g_iNumTags = num_tags;
 800d944:	4a0a      	ldr	r2, [pc, #40]	@ (800d970 <http_set_ssi_handler+0x80>)
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 800d94a:	bf00      	nop
 800d94c:	3710      	adds	r7, #16
 800d94e:	46bd      	mov	sp, r7
 800d950:	bd80      	pop	{r7, pc}
 800d952:	bf00      	nop
 800d954:	0802502c 	.word	0x0802502c
 800d958:	08025264 	.word	0x08025264
 800d95c:	08025074 	.word	0x08025074
 800d960:	200087d0 	.word	0x200087d0
 800d964:	0802527c 	.word	0x0802527c
 800d968:	0802528c 	.word	0x0802528c
 800d96c:	200087d8 	.word	0x200087d8
 800d970:	200087d4 	.word	0x200087d4

0800d974 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b082      	sub	sp, #8
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
 800d97c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d106      	bne.n	800d992 <http_set_cgi_handlers+0x1e>
 800d984:	4b0d      	ldr	r3, [pc, #52]	@ (800d9bc <http_set_cgi_handlers+0x48>)
 800d986:	f640 228a 	movw	r2, #2698	@ 0xa8a
 800d98a:	490d      	ldr	r1, [pc, #52]	@ (800d9c0 <http_set_cgi_handlers+0x4c>)
 800d98c:	480d      	ldr	r0, [pc, #52]	@ (800d9c4 <http_set_cgi_handlers+0x50>)
 800d98e:	f014 f97b 	bl	8021c88 <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	2b00      	cmp	r3, #0
 800d996:	dc06      	bgt.n	800d9a6 <http_set_cgi_handlers+0x32>
 800d998:	4b08      	ldr	r3, [pc, #32]	@ (800d9bc <http_set_cgi_handlers+0x48>)
 800d99a:	f640 228b 	movw	r2, #2699	@ 0xa8b
 800d99e:	490a      	ldr	r1, [pc, #40]	@ (800d9c8 <http_set_cgi_handlers+0x54>)
 800d9a0:	4808      	ldr	r0, [pc, #32]	@ (800d9c4 <http_set_cgi_handlers+0x50>)
 800d9a2:	f014 f971 	bl	8021c88 <iprintf>

  g_pCGIs = cgis;
 800d9a6:	4a09      	ldr	r2, [pc, #36]	@ (800d9cc <http_set_cgi_handlers+0x58>)
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6013      	str	r3, [r2, #0]
  g_iNumCGIs = num_handlers;
 800d9ac:	4a08      	ldr	r2, [pc, #32]	@ (800d9d0 <http_set_cgi_handlers+0x5c>)
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	6013      	str	r3, [r2, #0]
}
 800d9b2:	bf00      	nop
 800d9b4:	3708      	adds	r7, #8
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bd80      	pop	{r7, pc}
 800d9ba:	bf00      	nop
 800d9bc:	0802502c 	.word	0x0802502c
 800d9c0:	080252a4 	.word	0x080252a4
 800d9c4:	08025074 	.word	0x08025074
 800d9c8:	080252b4 	.word	0x080252b4
 800d9cc:	200087dc 	.word	0x200087dc
 800d9d0:	200087e0 	.word	0x200087e0

0800d9d4 <snmp_ans1_enc_tlv>:
 * @param tlv TLV to encode
 * @return ERR_OK if successful, ERR_ARG if we can't (or won't) encode
 */
err_t
snmp_ans1_enc_tlv(struct snmp_pbuf_stream* pbuf_stream, struct snmp_asn1_tlv* tlv)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b084      	sub	sp, #16
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
 800d9dc:	6039      	str	r1, [r7, #0]
  u8_t data;
  u8_t length_bytes_required;

  /* write type */
  if ((tlv->type & SNMP_ASN1_DATATYPE_MASK) == SNMP_ASN1_DATATYPE_EXTENDED) {
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	781b      	ldrb	r3, [r3, #0]
 800d9e2:	f003 031f 	and.w	r3, r3, #31
 800d9e6:	2b1f      	cmp	r3, #31
 800d9e8:	d102      	bne.n	800d9f0 <snmp_ans1_enc_tlv+0x1c>
    /* extended format is not used by SNMP so we do not accept those values */
    return ERR_ARG;
 800d9ea:	f06f 030f 	mvn.w	r3, #15
 800d9ee:	e078      	b.n	800dae2 <snmp_ans1_enc_tlv+0x10e>
  }
  if (tlv->type_len != 0) {
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	785b      	ldrb	r3, [r3, #1]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d002      	beq.n	800d9fe <snmp_ans1_enc_tlv+0x2a>
    /* any other value as auto is not accepted for type (we always use one byte because extended syntax is prohibited) */
    return ERR_ARG;
 800d9f8:	f06f 030f 	mvn.w	r3, #15
 800d9fc:	e071      	b.n	800dae2 <snmp_ans1_enc_tlv+0x10e>
  }

  PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, tlv->type));
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	781b      	ldrb	r3, [r3, #0]
 800da02:	4619      	mov	r1, r3
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f005 fdca 	bl	801359e <snmp_pbuf_stream_write>
 800da0a:	4603      	mov	r3, r0
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d002      	beq.n	800da16 <snmp_ans1_enc_tlv+0x42>
 800da10:	f06f 0301 	mvn.w	r3, #1
 800da14:	e065      	b.n	800dae2 <snmp_ans1_enc_tlv+0x10e>
  tlv->type_len = 1;
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	2201      	movs	r2, #1
 800da1a:	705a      	strb	r2, [r3, #1]

  /* write length */
  if (tlv->value_len <= 127) {
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	889b      	ldrh	r3, [r3, #4]
 800da20:	2b7f      	cmp	r3, #127	@ 0x7f
 800da22:	d802      	bhi.n	800da2a <snmp_ans1_enc_tlv+0x56>
    length_bytes_required = 1;
 800da24:	2301      	movs	r3, #1
 800da26:	73bb      	strb	r3, [r7, #14]
 800da28:	e008      	b.n	800da3c <snmp_ans1_enc_tlv+0x68>
  } else if (tlv->value_len <= 255) {
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	889b      	ldrh	r3, [r3, #4]
 800da2e:	2bff      	cmp	r3, #255	@ 0xff
 800da30:	d802      	bhi.n	800da38 <snmp_ans1_enc_tlv+0x64>
    length_bytes_required = 2;
 800da32:	2302      	movs	r3, #2
 800da34:	73bb      	strb	r3, [r7, #14]
 800da36:	e001      	b.n	800da3c <snmp_ans1_enc_tlv+0x68>
  } else  {
    length_bytes_required = 3;
 800da38:	2303      	movs	r3, #3
 800da3a:	73bb      	strb	r3, [r7, #14]
  }

  /* check for forced min length */
  if (tlv->length_len > 0) {
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	789b      	ldrb	r3, [r3, #2]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d00b      	beq.n	800da5c <snmp_ans1_enc_tlv+0x88>
    if (tlv->length_len < length_bytes_required) {
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	789b      	ldrb	r3, [r3, #2]
 800da48:	7bba      	ldrb	r2, [r7, #14]
 800da4a:	429a      	cmp	r2, r3
 800da4c:	d902      	bls.n	800da54 <snmp_ans1_enc_tlv+0x80>
      /* unable to code requested length in requested number of bytes */
      return ERR_ARG;
 800da4e:	f06f 030f 	mvn.w	r3, #15
 800da52:	e046      	b.n	800dae2 <snmp_ans1_enc_tlv+0x10e>
    }

    length_bytes_required = tlv->length_len;
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	789b      	ldrb	r3, [r3, #2]
 800da58:	73bb      	strb	r3, [r7, #14]
 800da5a:	e002      	b.n	800da62 <snmp_ans1_enc_tlv+0x8e>
  } else {
    tlv->length_len = length_bytes_required;
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	7bba      	ldrb	r2, [r7, #14]
 800da60:	709a      	strb	r2, [r3, #2]
  }

  if (length_bytes_required > 1) {
 800da62:	7bbb      	ldrb	r3, [r7, #14]
 800da64:	2b01      	cmp	r3, #1
 800da66:	d92d      	bls.n	800dac4 <snmp_ans1_enc_tlv+0xf0>
    /* multi byte representation required */
    length_bytes_required--;
 800da68:	7bbb      	ldrb	r3, [r7, #14]
 800da6a:	3b01      	subs	r3, #1
 800da6c:	73bb      	strb	r3, [r7, #14]
    data = 0x80 | length_bytes_required; /* extended length definition, 1 length byte follows */
 800da6e:	7bbb      	ldrb	r3, [r7, #14]
 800da70:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800da74:	73fb      	strb	r3, [r7, #15]

    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, data));
 800da76:	7bfb      	ldrb	r3, [r7, #15]
 800da78:	4619      	mov	r1, r3
 800da7a:	6878      	ldr	r0, [r7, #4]
 800da7c:	f005 fd8f 	bl	801359e <snmp_pbuf_stream_write>
 800da80:	4603      	mov	r3, r0
 800da82:	2b00      	cmp	r3, #0
 800da84:	d01b      	beq.n	800dabe <snmp_ans1_enc_tlv+0xea>
 800da86:	f06f 0301 	mvn.w	r3, #1
 800da8a:	e02a      	b.n	800dae2 <snmp_ans1_enc_tlv+0x10e>

    while (length_bytes_required > 1) {
      if (length_bytes_required == 2) {
 800da8c:	7bbb      	ldrb	r3, [r7, #14]
 800da8e:	2b02      	cmp	r3, #2
 800da90:	d105      	bne.n	800da9e <snmp_ans1_enc_tlv+0xca>
        /* append high byte */
        data = (u8_t)(tlv->value_len >> 8);
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	889b      	ldrh	r3, [r3, #4]
 800da96:	0a1b      	lsrs	r3, r3, #8
 800da98:	b29b      	uxth	r3, r3
 800da9a:	73fb      	strb	r3, [r7, #15]
 800da9c:	e001      	b.n	800daa2 <snmp_ans1_enc_tlv+0xce>
      } else {
        /* append leading 0x00 */
        data = 0x00;
 800da9e:	2300      	movs	r3, #0
 800daa0:	73fb      	strb	r3, [r7, #15]
      }

      PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, data));
 800daa2:	7bfb      	ldrb	r3, [r7, #15]
 800daa4:	4619      	mov	r1, r3
 800daa6:	6878      	ldr	r0, [r7, #4]
 800daa8:	f005 fd79 	bl	801359e <snmp_pbuf_stream_write>
 800daac:	4603      	mov	r3, r0
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d002      	beq.n	800dab8 <snmp_ans1_enc_tlv+0xe4>
 800dab2:	f06f 0301 	mvn.w	r3, #1
 800dab6:	e014      	b.n	800dae2 <snmp_ans1_enc_tlv+0x10e>
      length_bytes_required--;
 800dab8:	7bbb      	ldrb	r3, [r7, #14]
 800daba:	3b01      	subs	r3, #1
 800dabc:	73bb      	strb	r3, [r7, #14]
    while (length_bytes_required > 1) {
 800dabe:	7bbb      	ldrb	r3, [r7, #14]
 800dac0:	2b01      	cmp	r3, #1
 800dac2:	d8e3      	bhi.n	800da8c <snmp_ans1_enc_tlv+0xb8>
    }
  }

  /* append low byte */
  data = (u8_t)(tlv->value_len & 0xFF);
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	889b      	ldrh	r3, [r3, #4]
 800dac8:	73fb      	strb	r3, [r7, #15]
  PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, data));
 800daca:	7bfb      	ldrb	r3, [r7, #15]
 800dacc:	4619      	mov	r1, r3
 800dace:	6878      	ldr	r0, [r7, #4]
 800dad0:	f005 fd65 	bl	801359e <snmp_pbuf_stream_write>
 800dad4:	4603      	mov	r3, r0
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d002      	beq.n	800dae0 <snmp_ans1_enc_tlv+0x10c>
 800dada:	f06f 0301 	mvn.w	r3, #1
 800dade:	e000      	b.n	800dae2 <snmp_ans1_enc_tlv+0x10e>

  return ERR_OK;
 800dae0:	2300      	movs	r3, #0
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	3710      	adds	r7, #16
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}

0800daea <snmp_asn1_enc_raw>:
 * @param raw points raw data
 * @return ERR_OK if successful, ERR_ARG if we can't (or won't) encode
 */
err_t
snmp_asn1_enc_raw(struct snmp_pbuf_stream* pbuf_stream, const u8_t *raw, u16_t raw_len)
{
 800daea:	b580      	push	{r7, lr}
 800daec:	b084      	sub	sp, #16
 800daee:	af00      	add	r7, sp, #0
 800daf0:	60f8      	str	r0, [r7, #12]
 800daf2:	60b9      	str	r1, [r7, #8]
 800daf4:	4613      	mov	r3, r2
 800daf6:	80fb      	strh	r3, [r7, #6]
  PBUF_OP_EXEC(snmp_pbuf_stream_writebuf(pbuf_stream, raw, raw_len));
 800daf8:	88fb      	ldrh	r3, [r7, #6]
 800dafa:	461a      	mov	r2, r3
 800dafc:	68b9      	ldr	r1, [r7, #8]
 800dafe:	68f8      	ldr	r0, [r7, #12]
 800db00:	f005 fd5e 	bl	80135c0 <snmp_pbuf_stream_writebuf>
 800db04:	4603      	mov	r3, r0
 800db06:	2b00      	cmp	r3, #0
 800db08:	d002      	beq.n	800db10 <snmp_asn1_enc_raw+0x26>
 800db0a:	f06f 0301 	mvn.w	r3, #1
 800db0e:	e000      	b.n	800db12 <snmp_asn1_enc_raw+0x28>

  return ERR_OK;
 800db10:	2300      	movs	r3, #0
}
 800db12:	4618      	mov	r0, r3
 800db14:	3710      	adds	r7, #16
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}

0800db1a <snmp_asn1_enc_u32t>:
 *
 * @see snmp_asn1_enc_u32t_cnt()
 */
err_t
snmp_asn1_enc_u32t(struct snmp_pbuf_stream* pbuf_stream, u16_t octets_needed, u32_t value)
{
 800db1a:	b580      	push	{r7, lr}
 800db1c:	b084      	sub	sp, #16
 800db1e:	af00      	add	r7, sp, #0
 800db20:	60f8      	str	r0, [r7, #12]
 800db22:	460b      	mov	r3, r1
 800db24:	607a      	str	r2, [r7, #4]
 800db26:	817b      	strh	r3, [r7, #10]
  if (octets_needed > 5) {
 800db28:	897b      	ldrh	r3, [r7, #10]
 800db2a:	2b05      	cmp	r3, #5
 800db2c:	d902      	bls.n	800db34 <snmp_asn1_enc_u32t+0x1a>
    return ERR_ARG;
 800db2e:	f06f 030f 	mvn.w	r3, #15
 800db32:	e033      	b.n	800db9c <snmp_asn1_enc_u32t+0x82>
  }
  if (octets_needed == 5) {
 800db34:	897b      	ldrh	r3, [r7, #10]
 800db36:	2b05      	cmp	r3, #5
 800db38:	d120      	bne.n	800db7c <snmp_asn1_enc_u32t+0x62>
    /* not enough bits in 'value' add leading 0x00 */
    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, 0x00));
 800db3a:	2100      	movs	r1, #0
 800db3c:	68f8      	ldr	r0, [r7, #12]
 800db3e:	f005 fd2e 	bl	801359e <snmp_pbuf_stream_write>
 800db42:	4603      	mov	r3, r0
 800db44:	2b00      	cmp	r3, #0
 800db46:	d002      	beq.n	800db4e <snmp_asn1_enc_u32t+0x34>
 800db48:	f06f 0301 	mvn.w	r3, #1
 800db4c:	e026      	b.n	800db9c <snmp_asn1_enc_u32t+0x82>
    octets_needed--;
 800db4e:	897b      	ldrh	r3, [r7, #10]
 800db50:	3b01      	subs	r3, #1
 800db52:	817b      	strh	r3, [r7, #10]
  }

  while (octets_needed > 1) {
 800db54:	e012      	b.n	800db7c <snmp_asn1_enc_u32t+0x62>
    octets_needed--;
 800db56:	897b      	ldrh	r3, [r7, #10]
 800db58:	3b01      	subs	r3, #1
 800db5a:	817b      	strh	r3, [r7, #10]
    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)(value >> (octets_needed << 3))));
 800db5c:	897b      	ldrh	r3, [r7, #10]
 800db5e:	00db      	lsls	r3, r3, #3
 800db60:	687a      	ldr	r2, [r7, #4]
 800db62:	fa22 f303 	lsr.w	r3, r2, r3
 800db66:	b2db      	uxtb	r3, r3
 800db68:	4619      	mov	r1, r3
 800db6a:	68f8      	ldr	r0, [r7, #12]
 800db6c:	f005 fd17 	bl	801359e <snmp_pbuf_stream_write>
 800db70:	4603      	mov	r3, r0
 800db72:	2b00      	cmp	r3, #0
 800db74:	d002      	beq.n	800db7c <snmp_asn1_enc_u32t+0x62>
 800db76:	f06f 0301 	mvn.w	r3, #1
 800db7a:	e00f      	b.n	800db9c <snmp_asn1_enc_u32t+0x82>
  while (octets_needed > 1) {
 800db7c:	897b      	ldrh	r3, [r7, #10]
 800db7e:	2b01      	cmp	r3, #1
 800db80:	d8e9      	bhi.n	800db56 <snmp_asn1_enc_u32t+0x3c>
  }

  /* (only) one least significant octet */
  PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)value));
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	b2db      	uxtb	r3, r3
 800db86:	4619      	mov	r1, r3
 800db88:	68f8      	ldr	r0, [r7, #12]
 800db8a:	f005 fd08 	bl	801359e <snmp_pbuf_stream_write>
 800db8e:	4603      	mov	r3, r0
 800db90:	2b00      	cmp	r3, #0
 800db92:	d002      	beq.n	800db9a <snmp_asn1_enc_u32t+0x80>
 800db94:	f06f 0301 	mvn.w	r3, #1
 800db98:	e000      	b.n	800db9c <snmp_asn1_enc_u32t+0x82>

  return ERR_OK;
 800db9a:	2300      	movs	r3, #0
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	3710      	adds	r7, #16
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}

0800dba4 <snmp_asn1_enc_u64t>:
 *
 * @see snmp_asn1_enc_u64t_cnt()
 */
err_t
snmp_asn1_enc_u64t(struct snmp_pbuf_stream* pbuf_stream, u16_t octets_needed, const u32_t* value)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b084      	sub	sp, #16
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	60f8      	str	r0, [r7, #12]
 800dbac:	460b      	mov	r3, r1
 800dbae:	607a      	str	r2, [r7, #4]
 800dbb0:	817b      	strh	r3, [r7, #10]
  if (octets_needed > 9) {
 800dbb2:	897b      	ldrh	r3, [r7, #10]
 800dbb4:	2b09      	cmp	r3, #9
 800dbb6:	d902      	bls.n	800dbbe <snmp_asn1_enc_u64t+0x1a>
    return ERR_ARG;
 800dbb8:	f06f 030f 	mvn.w	r3, #15
 800dbbc:	e051      	b.n	800dc62 <snmp_asn1_enc_u64t+0xbe>
  }
  if (octets_needed == 9) {
 800dbbe:	897b      	ldrh	r3, [r7, #10]
 800dbc0:	2b09      	cmp	r3, #9
 800dbc2:	d122      	bne.n	800dc0a <snmp_asn1_enc_u64t+0x66>
    /* not enough bits in 'value' add leading 0x00 */
    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, 0x00));
 800dbc4:	2100      	movs	r1, #0
 800dbc6:	68f8      	ldr	r0, [r7, #12]
 800dbc8:	f005 fce9 	bl	801359e <snmp_pbuf_stream_write>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d002      	beq.n	800dbd8 <snmp_asn1_enc_u64t+0x34>
 800dbd2:	f06f 0301 	mvn.w	r3, #1
 800dbd6:	e044      	b.n	800dc62 <snmp_asn1_enc_u64t+0xbe>
    octets_needed--;
 800dbd8:	897b      	ldrh	r3, [r7, #10]
 800dbda:	3b01      	subs	r3, #1
 800dbdc:	817b      	strh	r3, [r7, #10]
  }

  while (octets_needed > 4) {
 800dbde:	e014      	b.n	800dc0a <snmp_asn1_enc_u64t+0x66>
    octets_needed--;
 800dbe0:	897b      	ldrh	r3, [r7, #10]
 800dbe2:	3b01      	subs	r3, #1
 800dbe4:	817b      	strh	r3, [r7, #10]
    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)(*value >> ((octets_needed-4) << 3))));
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681a      	ldr	r2, [r3, #0]
 800dbea:	897b      	ldrh	r3, [r7, #10]
 800dbec:	3b04      	subs	r3, #4
 800dbee:	00db      	lsls	r3, r3, #3
 800dbf0:	fa22 f303 	lsr.w	r3, r2, r3
 800dbf4:	b2db      	uxtb	r3, r3
 800dbf6:	4619      	mov	r1, r3
 800dbf8:	68f8      	ldr	r0, [r7, #12]
 800dbfa:	f005 fcd0 	bl	801359e <snmp_pbuf_stream_write>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d002      	beq.n	800dc0a <snmp_asn1_enc_u64t+0x66>
 800dc04:	f06f 0301 	mvn.w	r3, #1
 800dc08:	e02b      	b.n	800dc62 <snmp_asn1_enc_u64t+0xbe>
  while (octets_needed > 4) {
 800dc0a:	897b      	ldrh	r3, [r7, #10]
 800dc0c:	2b04      	cmp	r3, #4
 800dc0e:	d8e7      	bhi.n	800dbe0 <snmp_asn1_enc_u64t+0x3c>
  }

  /* skip to low u32 */
  value++;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	3304      	adds	r3, #4
 800dc14:	607b      	str	r3, [r7, #4]

  while (octets_needed > 1) {
 800dc16:	e013      	b.n	800dc40 <snmp_asn1_enc_u64t+0x9c>
    octets_needed--;
 800dc18:	897b      	ldrh	r3, [r7, #10]
 800dc1a:	3b01      	subs	r3, #1
 800dc1c:	817b      	strh	r3, [r7, #10]
    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)(*value >> (octets_needed << 3))));
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681a      	ldr	r2, [r3, #0]
 800dc22:	897b      	ldrh	r3, [r7, #10]
 800dc24:	00db      	lsls	r3, r3, #3
 800dc26:	fa22 f303 	lsr.w	r3, r2, r3
 800dc2a:	b2db      	uxtb	r3, r3
 800dc2c:	4619      	mov	r1, r3
 800dc2e:	68f8      	ldr	r0, [r7, #12]
 800dc30:	f005 fcb5 	bl	801359e <snmp_pbuf_stream_write>
 800dc34:	4603      	mov	r3, r0
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d002      	beq.n	800dc40 <snmp_asn1_enc_u64t+0x9c>
 800dc3a:	f06f 0301 	mvn.w	r3, #1
 800dc3e:	e010      	b.n	800dc62 <snmp_asn1_enc_u64t+0xbe>
  while (octets_needed > 1) {
 800dc40:	897b      	ldrh	r3, [r7, #10]
 800dc42:	2b01      	cmp	r3, #1
 800dc44:	d8e8      	bhi.n	800dc18 <snmp_asn1_enc_u64t+0x74>
  }

  /* always write at least one octet (also in case of value == 0) */
  PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)(*value)));
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	b2db      	uxtb	r3, r3
 800dc4c:	4619      	mov	r1, r3
 800dc4e:	68f8      	ldr	r0, [r7, #12]
 800dc50:	f005 fca5 	bl	801359e <snmp_pbuf_stream_write>
 800dc54:	4603      	mov	r3, r0
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d002      	beq.n	800dc60 <snmp_asn1_enc_u64t+0xbc>
 800dc5a:	f06f 0301 	mvn.w	r3, #1
 800dc5e:	e000      	b.n	800dc62 <snmp_asn1_enc_u64t+0xbe>

  return ERR_OK;
 800dc60:	2300      	movs	r3, #0
}
 800dc62:	4618      	mov	r0, r3
 800dc64:	3710      	adds	r7, #16
 800dc66:	46bd      	mov	sp, r7
 800dc68:	bd80      	pop	{r7, pc}

0800dc6a <snmp_asn1_enc_s32t>:
 *
 * @see snmp_asn1_enc_s32t_cnt()
 */
err_t
snmp_asn1_enc_s32t(struct snmp_pbuf_stream* pbuf_stream, u16_t octets_needed, s32_t value)
{
 800dc6a:	b580      	push	{r7, lr}
 800dc6c:	b084      	sub	sp, #16
 800dc6e:	af00      	add	r7, sp, #0
 800dc70:	60f8      	str	r0, [r7, #12]
 800dc72:	460b      	mov	r3, r1
 800dc74:	607a      	str	r2, [r7, #4]
 800dc76:	817b      	strh	r3, [r7, #10]
  while (octets_needed > 1) {
 800dc78:	e012      	b.n	800dca0 <snmp_asn1_enc_s32t+0x36>
    octets_needed--;
 800dc7a:	897b      	ldrh	r3, [r7, #10]
 800dc7c:	3b01      	subs	r3, #1
 800dc7e:	817b      	strh	r3, [r7, #10]

    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)(value >> (octets_needed << 3))));
 800dc80:	897b      	ldrh	r3, [r7, #10]
 800dc82:	00db      	lsls	r3, r3, #3
 800dc84:	687a      	ldr	r2, [r7, #4]
 800dc86:	fa42 f303 	asr.w	r3, r2, r3
 800dc8a:	b2db      	uxtb	r3, r3
 800dc8c:	4619      	mov	r1, r3
 800dc8e:	68f8      	ldr	r0, [r7, #12]
 800dc90:	f005 fc85 	bl	801359e <snmp_pbuf_stream_write>
 800dc94:	4603      	mov	r3, r0
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d002      	beq.n	800dca0 <snmp_asn1_enc_s32t+0x36>
 800dc9a:	f06f 0301 	mvn.w	r3, #1
 800dc9e:	e00f      	b.n	800dcc0 <snmp_asn1_enc_s32t+0x56>
  while (octets_needed > 1) {
 800dca0:	897b      	ldrh	r3, [r7, #10]
 800dca2:	2b01      	cmp	r3, #1
 800dca4:	d8e9      	bhi.n	800dc7a <snmp_asn1_enc_s32t+0x10>
  }

  /* (only) one least significant octet */
  PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)value));
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	b2db      	uxtb	r3, r3
 800dcaa:	4619      	mov	r1, r3
 800dcac:	68f8      	ldr	r0, [r7, #12]
 800dcae:	f005 fc76 	bl	801359e <snmp_pbuf_stream_write>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d002      	beq.n	800dcbe <snmp_asn1_enc_s32t+0x54>
 800dcb8:	f06f 0301 	mvn.w	r3, #1
 800dcbc:	e000      	b.n	800dcc0 <snmp_asn1_enc_s32t+0x56>

  return ERR_OK;
 800dcbe:	2300      	movs	r3, #0
}
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	3710      	adds	r7, #16
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}

0800dcc8 <snmp_asn1_enc_oid>:
 * @param oid_len object identifier array length
 * @return ERR_OK if successful, ERR_ARG if we can't (or won't) encode
 */
err_t
snmp_asn1_enc_oid(struct snmp_pbuf_stream* pbuf_stream, const u32_t *oid, u16_t oid_len)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b088      	sub	sp, #32
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	60f8      	str	r0, [r7, #12]
 800dcd0:	60b9      	str	r1, [r7, #8]
 800dcd2:	4613      	mov	r3, r2
 800dcd4:	80fb      	strh	r3, [r7, #6]
  if (oid_len > 1) {
 800dcd6:	88fb      	ldrh	r3, [r7, #6]
 800dcd8:	2b01      	cmp	r3, #1
 800dcda:	d91e      	bls.n	800dd1a <snmp_asn1_enc_oid+0x52>
    /* write compressed first two sub id's */
    u32_t compressed_byte = ((oid[0] * 40) + oid[1]);
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	681a      	ldr	r2, [r3, #0]
 800dce0:	4613      	mov	r3, r2
 800dce2:	009b      	lsls	r3, r3, #2
 800dce4:	4413      	add	r3, r2
 800dce6:	00db      	lsls	r3, r3, #3
 800dce8:	461a      	mov	r2, r3
 800dcea:	68bb      	ldr	r3, [r7, #8]
 800dcec:	3304      	adds	r3, #4
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	4413      	add	r3, r2
 800dcf2:	61bb      	str	r3, [r7, #24]
    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)compressed_byte));
 800dcf4:	69bb      	ldr	r3, [r7, #24]
 800dcf6:	b2db      	uxtb	r3, r3
 800dcf8:	4619      	mov	r1, r3
 800dcfa:	68f8      	ldr	r0, [r7, #12]
 800dcfc:	f005 fc4f 	bl	801359e <snmp_pbuf_stream_write>
 800dd00:	4603      	mov	r3, r0
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d002      	beq.n	800dd0c <snmp_asn1_enc_oid+0x44>
 800dd06:	f06f 0301 	mvn.w	r3, #1
 800dd0a:	e04b      	b.n	800dda4 <snmp_asn1_enc_oid+0xdc>
    oid_len -= 2;
 800dd0c:	88fb      	ldrh	r3, [r7, #6]
 800dd0e:	3b02      	subs	r3, #2
 800dd10:	80fb      	strh	r3, [r7, #6]
    oid += 2;
 800dd12:	68bb      	ldr	r3, [r7, #8]
 800dd14:	3308      	adds	r3, #8
 800dd16:	60bb      	str	r3, [r7, #8]
    /* @bug:  allow empty varbinds for symmetry (we must decode them for getnext), allow partial compression?? */
    /* ident_len <= 1, at least we need zeroDotZero (0.0) (ident_len == 2) */
    return ERR_ARG;
  }

  while (oid_len > 0) {
 800dd18:	e040      	b.n	800dd9c <snmp_asn1_enc_oid+0xd4>
    return ERR_ARG;
 800dd1a:	f06f 030f 	mvn.w	r3, #15
 800dd1e:	e041      	b.n	800dda4 <snmp_asn1_enc_oid+0xdc>
    u32_t sub_id;
    u8_t shift, tail;

    oid_len--;
 800dd20:	88fb      	ldrh	r3, [r7, #6]
 800dd22:	3b01      	subs	r3, #1
 800dd24:	80fb      	strh	r3, [r7, #6]
    sub_id = *oid;
 800dd26:	68bb      	ldr	r3, [r7, #8]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	617b      	str	r3, [r7, #20]
    tail = 0;
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	77bb      	strb	r3, [r7, #30]
    shift = 28;
 800dd30:	231c      	movs	r3, #28
 800dd32:	77fb      	strb	r3, [r7, #31]
    while (shift > 0) {
 800dd34:	e01d      	b.n	800dd72 <snmp_asn1_enc_oid+0xaa>
      u8_t code;

      code = (u8_t)(sub_id >> shift);
 800dd36:	7ffb      	ldrb	r3, [r7, #31]
 800dd38:	697a      	ldr	r2, [r7, #20]
 800dd3a:	fa22 f303 	lsr.w	r3, r2, r3
 800dd3e:	74fb      	strb	r3, [r7, #19]
      if ((code != 0) || (tail != 0)) {
 800dd40:	7cfb      	ldrb	r3, [r7, #19]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d102      	bne.n	800dd4c <snmp_asn1_enc_oid+0x84>
 800dd46:	7fbb      	ldrb	r3, [r7, #30]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d00f      	beq.n	800dd6c <snmp_asn1_enc_oid+0xa4>
        tail = 1;
 800dd4c:	2301      	movs	r3, #1
 800dd4e:	77bb      	strb	r3, [r7, #30]
        PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, code | 0x80));
 800dd50:	7cfb      	ldrb	r3, [r7, #19]
 800dd52:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800dd56:	b2db      	uxtb	r3, r3
 800dd58:	4619      	mov	r1, r3
 800dd5a:	68f8      	ldr	r0, [r7, #12]
 800dd5c:	f005 fc1f 	bl	801359e <snmp_pbuf_stream_write>
 800dd60:	4603      	mov	r3, r0
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d002      	beq.n	800dd6c <snmp_asn1_enc_oid+0xa4>
 800dd66:	f06f 0301 	mvn.w	r3, #1
 800dd6a:	e01b      	b.n	800dda4 <snmp_asn1_enc_oid+0xdc>
      }
      shift -= 7;
 800dd6c:	7ffb      	ldrb	r3, [r7, #31]
 800dd6e:	3b07      	subs	r3, #7
 800dd70:	77fb      	strb	r3, [r7, #31]
    while (shift > 0) {
 800dd72:	7ffb      	ldrb	r3, [r7, #31]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d1de      	bne.n	800dd36 <snmp_asn1_enc_oid+0x6e>
    }
    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)sub_id & 0x7F));
 800dd78:	697b      	ldr	r3, [r7, #20]
 800dd7a:	b2db      	uxtb	r3, r3
 800dd7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dd80:	b2db      	uxtb	r3, r3
 800dd82:	4619      	mov	r1, r3
 800dd84:	68f8      	ldr	r0, [r7, #12]
 800dd86:	f005 fc0a 	bl	801359e <snmp_pbuf_stream_write>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d002      	beq.n	800dd96 <snmp_asn1_enc_oid+0xce>
 800dd90:	f06f 0301 	mvn.w	r3, #1
 800dd94:	e006      	b.n	800dda4 <snmp_asn1_enc_oid+0xdc>

    /* proceed to next sub-identifier */
    oid++;
 800dd96:	68bb      	ldr	r3, [r7, #8]
 800dd98:	3304      	adds	r3, #4
 800dd9a:	60bb      	str	r3, [r7, #8]
  while (oid_len > 0) {
 800dd9c:	88fb      	ldrh	r3, [r7, #6]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d1be      	bne.n	800dd20 <snmp_asn1_enc_oid+0x58>
  }
  return ERR_OK;
 800dda2:	2300      	movs	r3, #0
}
 800dda4:	4618      	mov	r0, r3
 800dda6:	3720      	adds	r7, #32
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bd80      	pop	{r7, pc}

0800ddac <snmp_asn1_enc_length_cnt>:
 * @param length parameter length
 * @param octets_needed points to the return value
 */
void
snmp_asn1_enc_length_cnt(u16_t length, u8_t *octets_needed)
{
 800ddac:	b480      	push	{r7}
 800ddae:	b083      	sub	sp, #12
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	6039      	str	r1, [r7, #0]
 800ddb6:	80fb      	strh	r3, [r7, #6]
  if (length < 0x80U) {
 800ddb8:	88fb      	ldrh	r3, [r7, #6]
 800ddba:	2b7f      	cmp	r3, #127	@ 0x7f
 800ddbc:	d803      	bhi.n	800ddc6 <snmp_asn1_enc_length_cnt+0x1a>
    *octets_needed = 1;
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	2201      	movs	r2, #1
 800ddc2:	701a      	strb	r2, [r3, #0]
  } else if (length < 0x100U) {
    *octets_needed = 2;
  } else {
    *octets_needed = 3;
  }
}
 800ddc4:	e009      	b.n	800ddda <snmp_asn1_enc_length_cnt+0x2e>
  } else if (length < 0x100U) {
 800ddc6:	88fb      	ldrh	r3, [r7, #6]
 800ddc8:	2bff      	cmp	r3, #255	@ 0xff
 800ddca:	d803      	bhi.n	800ddd4 <snmp_asn1_enc_length_cnt+0x28>
    *octets_needed = 2;
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	2202      	movs	r2, #2
 800ddd0:	701a      	strb	r2, [r3, #0]
}
 800ddd2:	e002      	b.n	800ddda <snmp_asn1_enc_length_cnt+0x2e>
    *octets_needed = 3;
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	2203      	movs	r2, #3
 800ddd8:	701a      	strb	r2, [r3, #0]
}
 800ddda:	bf00      	nop
 800dddc:	370c      	adds	r7, #12
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bc80      	pop	{r7}
 800dde2:	4770      	bx	lr

0800dde4 <snmp_asn1_enc_u32t_cnt>:
 * as 0x00,0xFF,0xFF. Note the leading sign octet. A positive value
 * of 0xFFFFFFFF is preceded with 0x00 and the length is 5 octets!!
 */
void
snmp_asn1_enc_u32t_cnt(u32_t value, u16_t *octets_needed)
{
 800dde4:	b480      	push	{r7}
 800dde6:	b083      	sub	sp, #12
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
 800ddec:	6039      	str	r1, [r7, #0]
  if (value < 0x80UL) {
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2b7f      	cmp	r3, #127	@ 0x7f
 800ddf2:	d803      	bhi.n	800ddfc <snmp_asn1_enc_u32t_cnt+0x18>
    *octets_needed = 1;
 800ddf4:	683b      	ldr	r3, [r7, #0]
 800ddf6:	2201      	movs	r2, #1
 800ddf8:	801a      	strh	r2, [r3, #0]
  } else if (value < 0x80000000UL) {
    *octets_needed = 4;
  } else {
    *octets_needed = 5;
  }
}
 800ddfa:	e019      	b.n	800de30 <snmp_asn1_enc_u32t_cnt+0x4c>
  } else if (value < 0x8000UL) {
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800de02:	d203      	bcs.n	800de0c <snmp_asn1_enc_u32t_cnt+0x28>
    *octets_needed = 2;
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	2202      	movs	r2, #2
 800de08:	801a      	strh	r2, [r3, #0]
}
 800de0a:	e011      	b.n	800de30 <snmp_asn1_enc_u32t_cnt+0x4c>
  } else if (value < 0x800000UL) {
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800de12:	d203      	bcs.n	800de1c <snmp_asn1_enc_u32t_cnt+0x38>
    *octets_needed = 3;
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	2203      	movs	r2, #3
 800de18:	801a      	strh	r2, [r3, #0]
}
 800de1a:	e009      	b.n	800de30 <snmp_asn1_enc_u32t_cnt+0x4c>
  } else if (value < 0x80000000UL) {
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	db03      	blt.n	800de2a <snmp_asn1_enc_u32t_cnt+0x46>
    *octets_needed = 4;
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	2204      	movs	r2, #4
 800de26:	801a      	strh	r2, [r3, #0]
}
 800de28:	e002      	b.n	800de30 <snmp_asn1_enc_u32t_cnt+0x4c>
    *octets_needed = 5;
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	2205      	movs	r2, #5
 800de2e:	801a      	strh	r2, [r3, #0]
}
 800de30:	bf00      	nop
 800de32:	370c      	adds	r7, #12
 800de34:	46bd      	mov	sp, r7
 800de36:	bc80      	pop	{r7}
 800de38:	4770      	bx	lr

0800de3a <snmp_asn1_enc_u64t_cnt>:
 * as 0x00,0xFF,0xFF. Note the leading sign octet. A positive value
 * of 0xFFFFFFFF is preceded with 0x00 and the length is 5 octets!!
 */
void
snmp_asn1_enc_u64t_cnt(const u32_t *value, u16_t *octets_needed)
{
 800de3a:	b580      	push	{r7, lr}
 800de3c:	b082      	sub	sp, #8
 800de3e:	af00      	add	r7, sp, #0
 800de40:	6078      	str	r0, [r7, #4]
 800de42:	6039      	str	r1, [r7, #0]
  /* check if high u32 is 0 */
  if (*value == 0x00) {
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d109      	bne.n	800de60 <snmp_asn1_enc_u64t_cnt+0x26>
    /* only low u32 is important */
    value++;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	3304      	adds	r3, #4
 800de50:	607b      	str	r3, [r7, #4]
    snmp_asn1_enc_u32t_cnt(*value, octets_needed);
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	6839      	ldr	r1, [r7, #0]
 800de58:	4618      	mov	r0, r3
 800de5a:	f7ff ffc3 	bl	800dde4 <snmp_asn1_enc_u32t_cnt>
  } else {
    /* low u32 does not matter for length determination */
    snmp_asn1_enc_u32t_cnt(*value, octets_needed);
    *octets_needed = *octets_needed + 4; /* add the 4 bytes of low u32 */
  }
}
 800de5e:	e00b      	b.n	800de78 <snmp_asn1_enc_u64t_cnt+0x3e>
    snmp_asn1_enc_u32t_cnt(*value, octets_needed);
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	6839      	ldr	r1, [r7, #0]
 800de66:	4618      	mov	r0, r3
 800de68:	f7ff ffbc 	bl	800dde4 <snmp_asn1_enc_u32t_cnt>
    *octets_needed = *octets_needed + 4; /* add the 4 bytes of low u32 */
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	881b      	ldrh	r3, [r3, #0]
 800de70:	3304      	adds	r3, #4
 800de72:	b29a      	uxth	r2, r3
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	801a      	strh	r2, [r3, #0]
}
 800de78:	bf00      	nop
 800de7a:	3708      	adds	r7, #8
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bd80      	pop	{r7, pc}

0800de80 <snmp_asn1_enc_s32t_cnt>:
 *
 * @note ASN coded integers are _always_ signed.
 */
void
snmp_asn1_enc_s32t_cnt(s32_t value, u16_t *octets_needed)
{
 800de80:	b480      	push	{r7}
 800de82:	b083      	sub	sp, #12
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
 800de88:	6039      	str	r1, [r7, #0]
  if (value < 0) {
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	da02      	bge.n	800de96 <snmp_asn1_enc_s32t_cnt+0x16>
    value = ~value;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	43db      	mvns	r3, r3
 800de94:	607b      	str	r3, [r7, #4]
  }
  if (value < 0x80L) {
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	2b7f      	cmp	r3, #127	@ 0x7f
 800de9a:	dc03      	bgt.n	800dea4 <snmp_asn1_enc_s32t_cnt+0x24>
    *octets_needed = 1;
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	2201      	movs	r2, #1
 800dea0:	801a      	strh	r2, [r3, #0]
  } else if (value < 0x800000L) {
    *octets_needed = 3;
  } else {
    *octets_needed = 4;
  }
}
 800dea2:	e012      	b.n	800deca <snmp_asn1_enc_s32t_cnt+0x4a>
  } else if (value < 0x8000L) {
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800deaa:	da03      	bge.n	800deb4 <snmp_asn1_enc_s32t_cnt+0x34>
    *octets_needed = 2;
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	2202      	movs	r2, #2
 800deb0:	801a      	strh	r2, [r3, #0]
}
 800deb2:	e00a      	b.n	800deca <snmp_asn1_enc_s32t_cnt+0x4a>
  } else if (value < 0x800000L) {
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800deba:	da03      	bge.n	800dec4 <snmp_asn1_enc_s32t_cnt+0x44>
    *octets_needed = 3;
 800debc:	683b      	ldr	r3, [r7, #0]
 800debe:	2203      	movs	r2, #3
 800dec0:	801a      	strh	r2, [r3, #0]
}
 800dec2:	e002      	b.n	800deca <snmp_asn1_enc_s32t_cnt+0x4a>
    *octets_needed = 4;
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	2204      	movs	r2, #4
 800dec8:	801a      	strh	r2, [r3, #0]
}
 800deca:	bf00      	nop
 800decc:	370c      	adds	r7, #12
 800dece:	46bd      	mov	sp, r7
 800ded0:	bc80      	pop	{r7}
 800ded2:	4770      	bx	lr

0800ded4 <snmp_asn1_enc_oid_cnt>:
 * @param oid_len object identifier array length
 * @param octets_needed points to the return value
 */
void
snmp_asn1_enc_oid_cnt(const u32_t *oid, u16_t oid_len, u16_t *octets_needed)
{
 800ded4:	b480      	push	{r7}
 800ded6:	b087      	sub	sp, #28
 800ded8:	af00      	add	r7, sp, #0
 800deda:	60f8      	str	r0, [r7, #12]
 800dedc:	460b      	mov	r3, r1
 800dede:	607a      	str	r2, [r7, #4]
 800dee0:	817b      	strh	r3, [r7, #10]
  u32_t sub_id;

  *octets_needed = 0;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	2200      	movs	r2, #0
 800dee6:	801a      	strh	r2, [r3, #0]
  if (oid_len > 1) {
 800dee8:	897b      	ldrh	r3, [r7, #10]
 800deea:	2b01      	cmp	r3, #1
 800deec:	d92b      	bls.n	800df46 <snmp_asn1_enc_oid_cnt+0x72>
    /* compressed prefix in one octet */
    (*octets_needed)++;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	881b      	ldrh	r3, [r3, #0]
 800def2:	3301      	adds	r3, #1
 800def4:	b29a      	uxth	r2, r3
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	801a      	strh	r2, [r3, #0]
    oid_len -= 2;
 800defa:	897b      	ldrh	r3, [r7, #10]
 800defc:	3b02      	subs	r3, #2
 800defe:	817b      	strh	r3, [r7, #10]
    oid += 2;
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	3308      	adds	r3, #8
 800df04:	60fb      	str	r3, [r7, #12]
  }
  while (oid_len > 0) {
 800df06:	e01e      	b.n	800df46 <snmp_asn1_enc_oid_cnt+0x72>
    oid_len--;
 800df08:	897b      	ldrh	r3, [r7, #10]
 800df0a:	3b01      	subs	r3, #1
 800df0c:	817b      	strh	r3, [r7, #10]
    sub_id = *oid;
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	617b      	str	r3, [r7, #20]

    sub_id >>= 7;
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	09db      	lsrs	r3, r3, #7
 800df18:	617b      	str	r3, [r7, #20]
    (*octets_needed)++;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	881b      	ldrh	r3, [r3, #0]
 800df1e:	3301      	adds	r3, #1
 800df20:	b29a      	uxth	r2, r3
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	801a      	strh	r2, [r3, #0]
    while (sub_id > 0) {
 800df26:	e008      	b.n	800df3a <snmp_asn1_enc_oid_cnt+0x66>
      sub_id >>= 7;
 800df28:	697b      	ldr	r3, [r7, #20]
 800df2a:	09db      	lsrs	r3, r3, #7
 800df2c:	617b      	str	r3, [r7, #20]
      (*octets_needed)++;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	881b      	ldrh	r3, [r3, #0]
 800df32:	3301      	adds	r3, #1
 800df34:	b29a      	uxth	r2, r3
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	801a      	strh	r2, [r3, #0]
    while (sub_id > 0) {
 800df3a:	697b      	ldr	r3, [r7, #20]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d1f3      	bne.n	800df28 <snmp_asn1_enc_oid_cnt+0x54>
    }
    oid++;
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	3304      	adds	r3, #4
 800df44:	60fb      	str	r3, [r7, #12]
  while (oid_len > 0) {
 800df46:	897b      	ldrh	r3, [r7, #10]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d1dd      	bne.n	800df08 <snmp_asn1_enc_oid_cnt+0x34>
  }
}
 800df4c:	bf00      	nop
 800df4e:	bf00      	nop
 800df50:	371c      	adds	r7, #28
 800df52:	46bd      	mov	sp, r7
 800df54:	bc80      	pop	{r7}
 800df56:	4770      	bx	lr

0800df58 <snmp_asn1_dec_tlv>:
 * @param tlv returns decoded TLV
 * @return ERR_OK if successful, ERR_VAL if we can't decode
 */
err_t
snmp_asn1_dec_tlv(struct snmp_pbuf_stream* pbuf_stream, struct snmp_asn1_tlv* tlv)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b084      	sub	sp, #16
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
 800df60:	6039      	str	r1, [r7, #0]
  u8_t data;

  /* decode type first */
  PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800df62:	f107 030e 	add.w	r3, r7, #14
 800df66:	4619      	mov	r1, r3
 800df68:	6878      	ldr	r0, [r7, #4]
 800df6a:	f005 faed 	bl	8013548 <snmp_pbuf_stream_read>
 800df6e:	4603      	mov	r3, r0
 800df70:	2b00      	cmp	r3, #0
 800df72:	d002      	beq.n	800df7a <snmp_asn1_dec_tlv+0x22>
 800df74:	f06f 0301 	mvn.w	r3, #1
 800df78:	e069      	b.n	800e04e <snmp_asn1_dec_tlv+0xf6>
  tlv->type = data;
 800df7a:	7bba      	ldrb	r2, [r7, #14]
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	701a      	strb	r2, [r3, #0]

  if ((tlv->type & SNMP_ASN1_DATATYPE_MASK) == SNMP_ASN1_DATATYPE_EXTENDED) {
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	781b      	ldrb	r3, [r3, #0]
 800df84:	f003 031f 	and.w	r3, r3, #31
 800df88:	2b1f      	cmp	r3, #31
 800df8a:	d102      	bne.n	800df92 <snmp_asn1_dec_tlv+0x3a>
    /* extended format is not used by SNMP so we do not accept those values */
    return ERR_VAL;
 800df8c:	f06f 0305 	mvn.w	r3, #5
 800df90:	e05d      	b.n	800e04e <snmp_asn1_dec_tlv+0xf6>
  }
  tlv->type_len = 1;
 800df92:	683b      	ldr	r3, [r7, #0]
 800df94:	2201      	movs	r2, #1
 800df96:	705a      	strb	r2, [r3, #1]

  /* now, decode length */
  PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800df98:	f107 030e 	add.w	r3, r7, #14
 800df9c:	4619      	mov	r1, r3
 800df9e:	6878      	ldr	r0, [r7, #4]
 800dfa0:	f005 fad2 	bl	8013548 <snmp_pbuf_stream_read>
 800dfa4:	4603      	mov	r3, r0
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d002      	beq.n	800dfb0 <snmp_asn1_dec_tlv+0x58>
 800dfaa:	f06f 0301 	mvn.w	r3, #1
 800dfae:	e04e      	b.n	800e04e <snmp_asn1_dec_tlv+0xf6>

  if (data < 0x80) { /* short form */
 800dfb0:	7bbb      	ldrb	r3, [r7, #14]
 800dfb2:	b25b      	sxtb	r3, r3
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	db07      	blt.n	800dfc8 <snmp_asn1_dec_tlv+0x70>
    tlv->length_len = 1;
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	2201      	movs	r2, #1
 800dfbc:	709a      	strb	r2, [r3, #2]
    tlv->value_len  = data;
 800dfbe:	7bbb      	ldrb	r3, [r7, #14]
 800dfc0:	461a      	mov	r2, r3
 800dfc2:	683b      	ldr	r3, [r7, #0]
 800dfc4:	809a      	strh	r2, [r3, #4]
 800dfc6:	e041      	b.n	800e04c <snmp_asn1_dec_tlv+0xf4>
  } else if (data > 0x80) { /* long form */
 800dfc8:	7bbb      	ldrb	r3, [r7, #14]
 800dfca:	2b80      	cmp	r3, #128	@ 0x80
 800dfcc:	d93b      	bls.n	800e046 <snmp_asn1_dec_tlv+0xee>
    u8_t length_bytes = data - 0x80;
 800dfce:	7bbb      	ldrb	r3, [r7, #14]
 800dfd0:	3b80      	subs	r3, #128	@ 0x80
 800dfd2:	73fb      	strb	r3, [r7, #15]
    tlv->length_len = length_bytes + 1; /* this byte + defined number of length bytes following */
 800dfd4:	7bfb      	ldrb	r3, [r7, #15]
 800dfd6:	3301      	adds	r3, #1
 800dfd8:	b2da      	uxtb	r2, r3
 800dfda:	683b      	ldr	r3, [r7, #0]
 800dfdc:	709a      	strb	r2, [r3, #2]
    tlv->value_len = 0;
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	809a      	strh	r2, [r3, #4]

    while (length_bytes > 0) {
 800dfe4:	e02b      	b.n	800e03e <snmp_asn1_dec_tlv+0xe6>
      /* we only support up to u16.maxvalue-1 (2 bytes) but have to accept leading zero bytes */
      if (tlv->value_len > 0xFF) {
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	889b      	ldrh	r3, [r3, #4]
 800dfea:	2bff      	cmp	r3, #255	@ 0xff
 800dfec:	d902      	bls.n	800dff4 <snmp_asn1_dec_tlv+0x9c>
        return ERR_VAL;
 800dfee:	f06f 0305 	mvn.w	r3, #5
 800dff2:	e02c      	b.n	800e04e <snmp_asn1_dec_tlv+0xf6>
      }
      PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800dff4:	f107 030e 	add.w	r3, r7, #14
 800dff8:	4619      	mov	r1, r3
 800dffa:	6878      	ldr	r0, [r7, #4]
 800dffc:	f005 faa4 	bl	8013548 <snmp_pbuf_stream_read>
 800e000:	4603      	mov	r3, r0
 800e002:	2b00      	cmp	r3, #0
 800e004:	d002      	beq.n	800e00c <snmp_asn1_dec_tlv+0xb4>
 800e006:	f06f 0301 	mvn.w	r3, #1
 800e00a:	e020      	b.n	800e04e <snmp_asn1_dec_tlv+0xf6>
      tlv->value_len <<= 8;
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	889b      	ldrh	r3, [r3, #4]
 800e010:	021b      	lsls	r3, r3, #8
 800e012:	b29a      	uxth	r2, r3
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	809a      	strh	r2, [r3, #4]
      tlv->value_len |= data;
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	889b      	ldrh	r3, [r3, #4]
 800e01c:	7bba      	ldrb	r2, [r7, #14]
 800e01e:	4313      	orrs	r3, r2
 800e020:	b29a      	uxth	r2, r3
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	809a      	strh	r2, [r3, #4]

      /* take care for special value used for indefinite length */
      if (tlv->value_len == 0xFFFF) {
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	889b      	ldrh	r3, [r3, #4]
 800e02a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e02e:	4293      	cmp	r3, r2
 800e030:	d102      	bne.n	800e038 <snmp_asn1_dec_tlv+0xe0>
        return ERR_VAL;
 800e032:	f06f 0305 	mvn.w	r3, #5
 800e036:	e00a      	b.n	800e04e <snmp_asn1_dec_tlv+0xf6>
      }

      length_bytes--;
 800e038:	7bfb      	ldrb	r3, [r7, #15]
 800e03a:	3b01      	subs	r3, #1
 800e03c:	73fb      	strb	r3, [r7, #15]
    while (length_bytes > 0) {
 800e03e:	7bfb      	ldrb	r3, [r7, #15]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d1d0      	bne.n	800dfe6 <snmp_asn1_dec_tlv+0x8e>
 800e044:	e002      	b.n	800e04c <snmp_asn1_dec_tlv+0xf4>
    }
  } else { /* data == 0x80 indefinite length form */
    /* (not allowed for SNMP; RFC 1157, 3.2.2) */
    return ERR_VAL;
 800e046:	f06f 0305 	mvn.w	r3, #5
 800e04a:	e000      	b.n	800e04e <snmp_asn1_dec_tlv+0xf6>
  }

  return ERR_OK;
 800e04c:	2300      	movs	r3, #0
}
 800e04e:	4618      	mov	r0, r3
 800e050:	3710      	adds	r7, #16
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}

0800e056 <snmp_asn1_dec_u32t>:
 * as 0x00,0xFF,0xFF. Note the leading sign octet. A positive value
 * of 0xFFFFFFFF is preceded with 0x00 and the length is 5 octets!!
 */
err_t
snmp_asn1_dec_u32t(struct snmp_pbuf_stream *pbuf_stream, u16_t len, u32_t *value)
{
 800e056:	b580      	push	{r7, lr}
 800e058:	b086      	sub	sp, #24
 800e05a:	af00      	add	r7, sp, #0
 800e05c:	60f8      	str	r0, [r7, #12]
 800e05e:	460b      	mov	r3, r1
 800e060:	607a      	str	r2, [r7, #4]
 800e062:	817b      	strh	r3, [r7, #10]
  u8_t data;

  if ((len > 0) && (len <= 5)) {
 800e064:	897b      	ldrh	r3, [r7, #10]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d042      	beq.n	800e0f0 <snmp_asn1_dec_u32t+0x9a>
 800e06a:	897b      	ldrh	r3, [r7, #10]
 800e06c:	2b05      	cmp	r3, #5
 800e06e:	d83f      	bhi.n	800e0f0 <snmp_asn1_dec_u32t+0x9a>
    PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800e070:	f107 0317 	add.w	r3, r7, #23
 800e074:	4619      	mov	r1, r3
 800e076:	68f8      	ldr	r0, [r7, #12]
 800e078:	f005 fa66 	bl	8013548 <snmp_pbuf_stream_read>
 800e07c:	4603      	mov	r3, r0
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d002      	beq.n	800e088 <snmp_asn1_dec_u32t+0x32>
 800e082:	f06f 0301 	mvn.w	r3, #1
 800e086:	e035      	b.n	800e0f4 <snmp_asn1_dec_u32t+0x9e>

    /* expecting sign bit to be zero, only unsigned please! */
    if (((len == 5) && (data == 0x00)) || ((len < 5) && ((data & 0x80) == 0))) {
 800e088:	897b      	ldrh	r3, [r7, #10]
 800e08a:	2b05      	cmp	r3, #5
 800e08c:	d102      	bne.n	800e094 <snmp_asn1_dec_u32t+0x3e>
 800e08e:	7dfb      	ldrb	r3, [r7, #23]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d006      	beq.n	800e0a2 <snmp_asn1_dec_u32t+0x4c>
 800e094:	897b      	ldrh	r3, [r7, #10]
 800e096:	2b04      	cmp	r3, #4
 800e098:	d82a      	bhi.n	800e0f0 <snmp_asn1_dec_u32t+0x9a>
 800e09a:	7dfb      	ldrb	r3, [r7, #23]
 800e09c:	b25b      	sxtb	r3, r3
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	db26      	blt.n	800e0f0 <snmp_asn1_dec_u32t+0x9a>
      *value = data;
 800e0a2:	7dfb      	ldrb	r3, [r7, #23]
 800e0a4:	461a      	mov	r2, r3
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	601a      	str	r2, [r3, #0]
      len--;
 800e0aa:	897b      	ldrh	r3, [r7, #10]
 800e0ac:	3b01      	subs	r3, #1
 800e0ae:	817b      	strh	r3, [r7, #10]

      while (len > 0) {
 800e0b0:	e019      	b.n	800e0e6 <snmp_asn1_dec_u32t+0x90>
        PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800e0b2:	f107 0317 	add.w	r3, r7, #23
 800e0b6:	4619      	mov	r1, r3
 800e0b8:	68f8      	ldr	r0, [r7, #12]
 800e0ba:	f005 fa45 	bl	8013548 <snmp_pbuf_stream_read>
 800e0be:	4603      	mov	r3, r0
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d002      	beq.n	800e0ca <snmp_asn1_dec_u32t+0x74>
 800e0c4:	f06f 0301 	mvn.w	r3, #1
 800e0c8:	e014      	b.n	800e0f4 <snmp_asn1_dec_u32t+0x9e>
        len--;
 800e0ca:	897b      	ldrh	r3, [r7, #10]
 800e0cc:	3b01      	subs	r3, #1
 800e0ce:	817b      	strh	r3, [r7, #10]

        *value <<= 8;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	021a      	lsls	r2, r3, #8
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	601a      	str	r2, [r3, #0]
        *value |= data;
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	7dfa      	ldrb	r2, [r7, #23]
 800e0e0:	431a      	orrs	r2, r3
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	601a      	str	r2, [r3, #0]
      while (len > 0) {
 800e0e6:	897b      	ldrh	r3, [r7, #10]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d1e2      	bne.n	800e0b2 <snmp_asn1_dec_u32t+0x5c>
      }

      return ERR_OK;
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	e001      	b.n	800e0f4 <snmp_asn1_dec_u32t+0x9e>
    }
  }

  return ERR_VAL;
 800e0f0:	f06f 0305 	mvn.w	r3, #5
}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3718      	adds	r7, #24
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}

0800e0fc <snmp_asn1_dec_u64t>:
 * as 0x00,0xFF,0xFF. Note the leading sign octet. A positive value
 * of 0xFFFFFFFF is preceded with 0x00 and the length is 5 octets!!
 */
err_t
snmp_asn1_dec_u64t(struct snmp_pbuf_stream *pbuf_stream, u16_t len, u32_t *value)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b086      	sub	sp, #24
 800e100:	af00      	add	r7, sp, #0
 800e102:	60f8      	str	r0, [r7, #12]
 800e104:	460b      	mov	r3, r1
 800e106:	607a      	str	r2, [r7, #4]
 800e108:	817b      	strh	r3, [r7, #10]
  u8_t data;

  if (len <= 4) {
 800e10a:	897b      	ldrh	r3, [r7, #10]
 800e10c:	2b04      	cmp	r3, #4
 800e10e:	d805      	bhi.n	800e11c <snmp_asn1_dec_u64t+0x20>
    /* high u32 is 0 */
    *value = 0;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2200      	movs	r2, #0
 800e114:	601a      	str	r2, [r3, #0]
    /* directly skip to low u32 */
    value++;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	3304      	adds	r3, #4
 800e11a:	607b      	str	r3, [r7, #4]
  }

  if ((len > 0) && (len <= 9)) {
 800e11c:	897b      	ldrh	r3, [r7, #10]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d04c      	beq.n	800e1bc <snmp_asn1_dec_u64t+0xc0>
 800e122:	897b      	ldrh	r3, [r7, #10]
 800e124:	2b09      	cmp	r3, #9
 800e126:	d849      	bhi.n	800e1bc <snmp_asn1_dec_u64t+0xc0>
    PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800e128:	f107 0317 	add.w	r3, r7, #23
 800e12c:	4619      	mov	r1, r3
 800e12e:	68f8      	ldr	r0, [r7, #12]
 800e130:	f005 fa0a 	bl	8013548 <snmp_pbuf_stream_read>
 800e134:	4603      	mov	r3, r0
 800e136:	2b00      	cmp	r3, #0
 800e138:	d002      	beq.n	800e140 <snmp_asn1_dec_u64t+0x44>
 800e13a:	f06f 0301 	mvn.w	r3, #1
 800e13e:	e03f      	b.n	800e1c0 <snmp_asn1_dec_u64t+0xc4>

    /* expecting sign bit to be zero, only unsigned please! */
    if (((len == 9) && (data == 0x00)) || ((len < 9) && ((data & 0x80) == 0))) {
 800e140:	897b      	ldrh	r3, [r7, #10]
 800e142:	2b09      	cmp	r3, #9
 800e144:	d102      	bne.n	800e14c <snmp_asn1_dec_u64t+0x50>
 800e146:	7dfb      	ldrb	r3, [r7, #23]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d006      	beq.n	800e15a <snmp_asn1_dec_u64t+0x5e>
 800e14c:	897b      	ldrh	r3, [r7, #10]
 800e14e:	2b08      	cmp	r3, #8
 800e150:	d834      	bhi.n	800e1bc <snmp_asn1_dec_u64t+0xc0>
 800e152:	7dfb      	ldrb	r3, [r7, #23]
 800e154:	b25b      	sxtb	r3, r3
 800e156:	2b00      	cmp	r3, #0
 800e158:	db30      	blt.n	800e1bc <snmp_asn1_dec_u64t+0xc0>
      *value = data;
 800e15a:	7dfb      	ldrb	r3, [r7, #23]
 800e15c:	461a      	mov	r2, r3
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	601a      	str	r2, [r3, #0]
      len--;
 800e162:	897b      	ldrh	r3, [r7, #10]
 800e164:	3b01      	subs	r3, #1
 800e166:	817b      	strh	r3, [r7, #10]

      while (len > 0) {
 800e168:	e023      	b.n	800e1b2 <snmp_asn1_dec_u64t+0xb6>
        PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800e16a:	f107 0317 	add.w	r3, r7, #23
 800e16e:	4619      	mov	r1, r3
 800e170:	68f8      	ldr	r0, [r7, #12]
 800e172:	f005 f9e9 	bl	8013548 <snmp_pbuf_stream_read>
 800e176:	4603      	mov	r3, r0
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d002      	beq.n	800e182 <snmp_asn1_dec_u64t+0x86>
 800e17c:	f06f 0301 	mvn.w	r3, #1
 800e180:	e01e      	b.n	800e1c0 <snmp_asn1_dec_u64t+0xc4>

        if (len == 4) {
 800e182:	897b      	ldrh	r3, [r7, #10]
 800e184:	2b04      	cmp	r3, #4
 800e186:	d106      	bne.n	800e196 <snmp_asn1_dec_u64t+0x9a>
          /* skip to low u32 */
          value++;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	3304      	adds	r3, #4
 800e18c:	607b      	str	r3, [r7, #4]
          *value = 0;
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	2200      	movs	r2, #0
 800e192:	601a      	str	r2, [r3, #0]
 800e194:	e004      	b.n	800e1a0 <snmp_asn1_dec_u64t+0xa4>
        } else {
          *value <<= 8;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	021a      	lsls	r2, r3, #8
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	601a      	str	r2, [r3, #0]
        }

        *value |= data;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	7dfa      	ldrb	r2, [r7, #23]
 800e1a6:	431a      	orrs	r2, r3
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	601a      	str	r2, [r3, #0]
        len--;
 800e1ac:	897b      	ldrh	r3, [r7, #10]
 800e1ae:	3b01      	subs	r3, #1
 800e1b0:	817b      	strh	r3, [r7, #10]
      while (len > 0) {
 800e1b2:	897b      	ldrh	r3, [r7, #10]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d1d8      	bne.n	800e16a <snmp_asn1_dec_u64t+0x6e>
      }

      return ERR_OK;
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	e001      	b.n	800e1c0 <snmp_asn1_dec_u64t+0xc4>
    }
  }

  return ERR_VAL;
 800e1bc:	f06f 0305 	mvn.w	r3, #5
}
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	3718      	adds	r7, #24
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	bd80      	pop	{r7, pc}

0800e1c8 <snmp_asn1_dec_s32t>:
 *
 * @note ASN coded integers are _always_ signed!
 */
err_t
snmp_asn1_dec_s32t(struct snmp_pbuf_stream *pbuf_stream, u16_t len, s32_t *value)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b088      	sub	sp, #32
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	60f8      	str	r0, [r7, #12]
 800e1d0:	460b      	mov	r3, r1
 800e1d2:	607a      	str	r2, [r7, #4]
 800e1d4:	817b      	strh	r3, [r7, #10]
#if BYTE_ORDER == LITTLE_ENDIAN
  u8_t *lsb_ptr = (u8_t*)value;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	61bb      	str	r3, [r7, #24]
  u8_t *lsb_ptr = (u8_t*)value + sizeof(s32_t) - 1;
#endif
  u8_t sign;
  u8_t data;

  if ((len > 0) && (len < 5)) {
 800e1da:	897b      	ldrh	r3, [r7, #10]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d05e      	beq.n	800e29e <snmp_asn1_dec_s32t+0xd6>
 800e1e0:	897b      	ldrh	r3, [r7, #10]
 800e1e2:	2b04      	cmp	r3, #4
 800e1e4:	d85b      	bhi.n	800e29e <snmp_asn1_dec_s32t+0xd6>
    PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800e1e6:	f107 0317 	add.w	r3, r7, #23
 800e1ea:	4619      	mov	r1, r3
 800e1ec:	68f8      	ldr	r0, [r7, #12]
 800e1ee:	f005 f9ab 	bl	8013548 <snmp_pbuf_stream_read>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d002      	beq.n	800e1fe <snmp_asn1_dec_s32t+0x36>
 800e1f8:	f06f 0301 	mvn.w	r3, #1
 800e1fc:	e051      	b.n	800e2a2 <snmp_asn1_dec_s32t+0xda>
    len--;
 800e1fe:	897b      	ldrh	r3, [r7, #10]
 800e200:	3b01      	subs	r3, #1
 800e202:	817b      	strh	r3, [r7, #10]

    if (data & 0x80) {
 800e204:	7dfb      	ldrb	r3, [r7, #23]
 800e206:	b25b      	sxtb	r3, r3
 800e208:	2b00      	cmp	r3, #0
 800e20a:	da0d      	bge.n	800e228 <snmp_asn1_dec_s32t+0x60>
      /* negative, start from -1 */
      *value = -1;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	f04f 32ff 	mov.w	r2, #4294967295
 800e212:	601a      	str	r2, [r3, #0]
      sign = 1;
 800e214:	2301      	movs	r3, #1
 800e216:	77fb      	strb	r3, [r7, #31]
      *lsb_ptr &= data;
 800e218:	69bb      	ldr	r3, [r7, #24]
 800e21a:	781a      	ldrb	r2, [r3, #0]
 800e21c:	7dfb      	ldrb	r3, [r7, #23]
 800e21e:	4013      	ands	r3, r2
 800e220:	b2da      	uxtb	r2, r3
 800e222:	69bb      	ldr	r3, [r7, #24]
 800e224:	701a      	strb	r2, [r3, #0]
 800e226:	e035      	b.n	800e294 <snmp_asn1_dec_s32t+0xcc>
    } else {
      /* positive, start from 0 */
      *value = 0;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2200      	movs	r2, #0
 800e22c:	601a      	str	r2, [r3, #0]
      sign = 0;
 800e22e:	2300      	movs	r3, #0
 800e230:	77fb      	strb	r3, [r7, #31]
      *lsb_ptr |= data;
 800e232:	69bb      	ldr	r3, [r7, #24]
 800e234:	781a      	ldrb	r2, [r3, #0]
 800e236:	7dfb      	ldrb	r3, [r7, #23]
 800e238:	4313      	orrs	r3, r2
 800e23a:	b2da      	uxtb	r2, r3
 800e23c:	69bb      	ldr	r3, [r7, #24]
 800e23e:	701a      	strb	r2, [r3, #0]
    }

    /* OR/AND octets with value */
    while (len > 0) {
 800e240:	e028      	b.n	800e294 <snmp_asn1_dec_s32t+0xcc>
      PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800e242:	f107 0317 	add.w	r3, r7, #23
 800e246:	4619      	mov	r1, r3
 800e248:	68f8      	ldr	r0, [r7, #12]
 800e24a:	f005 f97d 	bl	8013548 <snmp_pbuf_stream_read>
 800e24e:	4603      	mov	r3, r0
 800e250:	2b00      	cmp	r3, #0
 800e252:	d002      	beq.n	800e25a <snmp_asn1_dec_s32t+0x92>
 800e254:	f06f 0301 	mvn.w	r3, #1
 800e258:	e023      	b.n	800e2a2 <snmp_asn1_dec_s32t+0xda>
      len--;
 800e25a:	897b      	ldrh	r3, [r7, #10]
 800e25c:	3b01      	subs	r3, #1
 800e25e:	817b      	strh	r3, [r7, #10]

#if BYTE_ORDER == LITTLE_ENDIAN
      *value <<= 8;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	021a      	lsls	r2, r3, #8
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	601a      	str	r2, [r3, #0]
#endif
#if BYTE_ORDER == BIG_ENDIAN
      *value >>= 8;
#endif

      if (sign) {
 800e26a:	7ffb      	ldrb	r3, [r7, #31]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d00a      	beq.n	800e286 <snmp_asn1_dec_s32t+0xbe>
        *lsb_ptr |= 255;
 800e270:	69bb      	ldr	r3, [r7, #24]
 800e272:	22ff      	movs	r2, #255	@ 0xff
 800e274:	701a      	strb	r2, [r3, #0]
        *lsb_ptr &= data;
 800e276:	69bb      	ldr	r3, [r7, #24]
 800e278:	781a      	ldrb	r2, [r3, #0]
 800e27a:	7dfb      	ldrb	r3, [r7, #23]
 800e27c:	4013      	ands	r3, r2
 800e27e:	b2da      	uxtb	r2, r3
 800e280:	69bb      	ldr	r3, [r7, #24]
 800e282:	701a      	strb	r2, [r3, #0]
 800e284:	e006      	b.n	800e294 <snmp_asn1_dec_s32t+0xcc>
      } else {
        *lsb_ptr |= data;
 800e286:	69bb      	ldr	r3, [r7, #24]
 800e288:	781a      	ldrb	r2, [r3, #0]
 800e28a:	7dfb      	ldrb	r3, [r7, #23]
 800e28c:	4313      	orrs	r3, r2
 800e28e:	b2da      	uxtb	r2, r3
 800e290:	69bb      	ldr	r3, [r7, #24]
 800e292:	701a      	strb	r2, [r3, #0]
    while (len > 0) {
 800e294:	897b      	ldrh	r3, [r7, #10]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d1d3      	bne.n	800e242 <snmp_asn1_dec_s32t+0x7a>
      }
    }

    return ERR_OK;
 800e29a:	2300      	movs	r3, #0
 800e29c:	e001      	b.n	800e2a2 <snmp_asn1_dec_s32t+0xda>
  }

  return ERR_VAL;
 800e29e:	f06f 0305 	mvn.w	r3, #5
}
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	3720      	adds	r7, #32
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd80      	pop	{r7, pc}

0800e2aa <snmp_asn1_dec_oid>:
 * @param oid_max_len size of oid buffer
 * @return ERR_OK if successful, ERR_ARG if we can't (or won't) decode
 */
err_t
snmp_asn1_dec_oid(struct snmp_pbuf_stream *pbuf_stream, u16_t len, u32_t* oid, u8_t* oid_len, u8_t oid_max_len)
{
 800e2aa:	b580      	push	{r7, lr}
 800e2ac:	b088      	sub	sp, #32
 800e2ae:	af00      	add	r7, sp, #0
 800e2b0:	60f8      	str	r0, [r7, #12]
 800e2b2:	607a      	str	r2, [r7, #4]
 800e2b4:	603b      	str	r3, [r7, #0]
 800e2b6:	460b      	mov	r3, r1
 800e2b8:	817b      	strh	r3, [r7, #10]
  u32_t *oid_ptr;
  u8_t data;

  *oid_len = 0;
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	2200      	movs	r2, #0
 800e2be:	701a      	strb	r2, [r3, #0]
  oid_ptr = oid;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	61fb      	str	r3, [r7, #28]
  if (len > 0) {
 800e2c4:	897b      	ldrh	r3, [r7, #10]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d05a      	beq.n	800e380 <snmp_asn1_dec_oid+0xd6>
    if (oid_max_len < 2) {
 800e2ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e2ce:	2b01      	cmp	r3, #1
 800e2d0:	d802      	bhi.n	800e2d8 <snmp_asn1_dec_oid+0x2e>
      return ERR_MEM;
 800e2d2:	f04f 33ff 	mov.w	r3, #4294967295
 800e2d6:	e0b2      	b.n	800e43e <snmp_asn1_dec_oid+0x194>
    }

    PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800e2d8:	f107 0317 	add.w	r3, r7, #23
 800e2dc:	4619      	mov	r1, r3
 800e2de:	68f8      	ldr	r0, [r7, #12]
 800e2e0:	f005 f932 	bl	8013548 <snmp_pbuf_stream_read>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d002      	beq.n	800e2f0 <snmp_asn1_dec_oid+0x46>
 800e2ea:	f06f 0301 	mvn.w	r3, #1
 800e2ee:	e0a6      	b.n	800e43e <snmp_asn1_dec_oid+0x194>
    len--;
 800e2f0:	897b      	ldrh	r3, [r7, #10]
 800e2f2:	3b01      	subs	r3, #1
 800e2f4:	817b      	strh	r3, [r7, #10]

    /* first compressed octet */
    if (data == 0x2B) {
 800e2f6:	7dfb      	ldrb	r3, [r7, #23]
 800e2f8:	2b2b      	cmp	r3, #43	@ 0x2b
 800e2fa:	d10c      	bne.n	800e316 <snmp_asn1_dec_oid+0x6c>
      /* (most) common case 1.3 (iso.org) */
      *oid_ptr = 1;
 800e2fc:	69fb      	ldr	r3, [r7, #28]
 800e2fe:	2201      	movs	r2, #1
 800e300:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 800e302:	69fb      	ldr	r3, [r7, #28]
 800e304:	3304      	adds	r3, #4
 800e306:	61fb      	str	r3, [r7, #28]
      *oid_ptr = 3;
 800e308:	69fb      	ldr	r3, [r7, #28]
 800e30a:	2203      	movs	r2, #3
 800e30c:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 800e30e:	69fb      	ldr	r3, [r7, #28]
 800e310:	3304      	adds	r3, #4
 800e312:	61fb      	str	r3, [r7, #28]
 800e314:	e030      	b.n	800e378 <snmp_asn1_dec_oid+0xce>
    } else if (data < 40) {
 800e316:	7dfb      	ldrb	r3, [r7, #23]
 800e318:	2b27      	cmp	r3, #39	@ 0x27
 800e31a:	d80d      	bhi.n	800e338 <snmp_asn1_dec_oid+0x8e>
      *oid_ptr = 0;
 800e31c:	69fb      	ldr	r3, [r7, #28]
 800e31e:	2200      	movs	r2, #0
 800e320:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 800e322:	69fb      	ldr	r3, [r7, #28]
 800e324:	3304      	adds	r3, #4
 800e326:	61fb      	str	r3, [r7, #28]
      *oid_ptr = data;
 800e328:	7dfb      	ldrb	r3, [r7, #23]
 800e32a:	461a      	mov	r2, r3
 800e32c:	69fb      	ldr	r3, [r7, #28]
 800e32e:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 800e330:	69fb      	ldr	r3, [r7, #28]
 800e332:	3304      	adds	r3, #4
 800e334:	61fb      	str	r3, [r7, #28]
 800e336:	e01f      	b.n	800e378 <snmp_asn1_dec_oid+0xce>
    } else if (data < 80) {
 800e338:	7dfb      	ldrb	r3, [r7, #23]
 800e33a:	2b4f      	cmp	r3, #79	@ 0x4f
 800e33c:	d80e      	bhi.n	800e35c <snmp_asn1_dec_oid+0xb2>
      *oid_ptr = 1;
 800e33e:	69fb      	ldr	r3, [r7, #28]
 800e340:	2201      	movs	r2, #1
 800e342:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 800e344:	69fb      	ldr	r3, [r7, #28]
 800e346:	3304      	adds	r3, #4
 800e348:	61fb      	str	r3, [r7, #28]
      *oid_ptr = data - 40;
 800e34a:	7dfb      	ldrb	r3, [r7, #23]
 800e34c:	3b28      	subs	r3, #40	@ 0x28
 800e34e:	461a      	mov	r2, r3
 800e350:	69fb      	ldr	r3, [r7, #28]
 800e352:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 800e354:	69fb      	ldr	r3, [r7, #28]
 800e356:	3304      	adds	r3, #4
 800e358:	61fb      	str	r3, [r7, #28]
 800e35a:	e00d      	b.n	800e378 <snmp_asn1_dec_oid+0xce>
    } else {
      *oid_ptr = 2;
 800e35c:	69fb      	ldr	r3, [r7, #28]
 800e35e:	2202      	movs	r2, #2
 800e360:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 800e362:	69fb      	ldr	r3, [r7, #28]
 800e364:	3304      	adds	r3, #4
 800e366:	61fb      	str	r3, [r7, #28]
      *oid_ptr = data - 80;
 800e368:	7dfb      	ldrb	r3, [r7, #23]
 800e36a:	3b50      	subs	r3, #80	@ 0x50
 800e36c:	461a      	mov	r2, r3
 800e36e:	69fb      	ldr	r3, [r7, #28]
 800e370:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 800e372:	69fb      	ldr	r3, [r7, #28]
 800e374:	3304      	adds	r3, #4
 800e376:	61fb      	str	r3, [r7, #28]
    }
    *oid_len = 2;
 800e378:	683b      	ldr	r3, [r7, #0]
 800e37a:	2202      	movs	r2, #2
 800e37c:	701a      	strb	r2, [r3, #0]
  } else {
    /* accepting zero length identifiers e.g. for getnext operation. uncommon but valid */
    return ERR_OK;
  }

  while ((len > 0) && (*oid_len < oid_max_len)) {
 800e37e:	e04e      	b.n	800e41e <snmp_asn1_dec_oid+0x174>
    return ERR_OK;
 800e380:	2300      	movs	r3, #0
 800e382:	e05c      	b.n	800e43e <snmp_asn1_dec_oid+0x194>
    PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800e384:	f107 0317 	add.w	r3, r7, #23
 800e388:	4619      	mov	r1, r3
 800e38a:	68f8      	ldr	r0, [r7, #12]
 800e38c:	f005 f8dc 	bl	8013548 <snmp_pbuf_stream_read>
 800e390:	4603      	mov	r3, r0
 800e392:	2b00      	cmp	r3, #0
 800e394:	d002      	beq.n	800e39c <snmp_asn1_dec_oid+0xf2>
 800e396:	f06f 0301 	mvn.w	r3, #1
 800e39a:	e050      	b.n	800e43e <snmp_asn1_dec_oid+0x194>
    len--;
 800e39c:	897b      	ldrh	r3, [r7, #10]
 800e39e:	3b01      	subs	r3, #1
 800e3a0:	817b      	strh	r3, [r7, #10]

    if ((data & 0x80) == 0x00) {
 800e3a2:	7dfb      	ldrb	r3, [r7, #23]
 800e3a4:	b25b      	sxtb	r3, r3
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	db04      	blt.n	800e3b4 <snmp_asn1_dec_oid+0x10a>
      /* sub-identifier uses single octet */
      *oid_ptr = data;
 800e3aa:	7dfb      	ldrb	r3, [r7, #23]
 800e3ac:	461a      	mov	r2, r3
 800e3ae:	69fb      	ldr	r3, [r7, #28]
 800e3b0:	601a      	str	r2, [r3, #0]
 800e3b2:	e02b      	b.n	800e40c <snmp_asn1_dec_oid+0x162>
    } else {
      /* sub-identifier uses multiple octets */
      u32_t sub_id = (data & ~0x80);
 800e3b4:	7dfb      	ldrb	r3, [r7, #23]
 800e3b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e3ba:	61bb      	str	r3, [r7, #24]
      while ((len > 0) && ((data & 0x80) != 0)) {
 800e3bc:	e015      	b.n	800e3ea <snmp_asn1_dec_oid+0x140>
        PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800e3be:	f107 0317 	add.w	r3, r7, #23
 800e3c2:	4619      	mov	r1, r3
 800e3c4:	68f8      	ldr	r0, [r7, #12]
 800e3c6:	f005 f8bf 	bl	8013548 <snmp_pbuf_stream_read>
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d002      	beq.n	800e3d6 <snmp_asn1_dec_oid+0x12c>
 800e3d0:	f06f 0301 	mvn.w	r3, #1
 800e3d4:	e033      	b.n	800e43e <snmp_asn1_dec_oid+0x194>
        len--;
 800e3d6:	897b      	ldrh	r3, [r7, #10]
 800e3d8:	3b01      	subs	r3, #1
 800e3da:	817b      	strh	r3, [r7, #10]

        sub_id = (sub_id << 7) + (data & ~0x80);
 800e3dc:	69bb      	ldr	r3, [r7, #24]
 800e3de:	01da      	lsls	r2, r3, #7
 800e3e0:	7dfb      	ldrb	r3, [r7, #23]
 800e3e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e3e6:	4413      	add	r3, r2
 800e3e8:	61bb      	str	r3, [r7, #24]
      while ((len > 0) && ((data & 0x80) != 0)) {
 800e3ea:	897b      	ldrh	r3, [r7, #10]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d003      	beq.n	800e3f8 <snmp_asn1_dec_oid+0x14e>
 800e3f0:	7dfb      	ldrb	r3, [r7, #23]
 800e3f2:	b25b      	sxtb	r3, r3
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	dbe2      	blt.n	800e3be <snmp_asn1_dec_oid+0x114>
      }

      if ((data & 0x80) != 0) {
 800e3f8:	7dfb      	ldrb	r3, [r7, #23]
 800e3fa:	b25b      	sxtb	r3, r3
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	da02      	bge.n	800e406 <snmp_asn1_dec_oid+0x15c>
        /* "more bytes following" bit still set at end of len */
        return ERR_VAL;
 800e400:	f06f 0305 	mvn.w	r3, #5
 800e404:	e01b      	b.n	800e43e <snmp_asn1_dec_oid+0x194>
      }
      *oid_ptr = sub_id;
 800e406:	69fb      	ldr	r3, [r7, #28]
 800e408:	69ba      	ldr	r2, [r7, #24]
 800e40a:	601a      	str	r2, [r3, #0]
    }
    oid_ptr++;
 800e40c:	69fb      	ldr	r3, [r7, #28]
 800e40e:	3304      	adds	r3, #4
 800e410:	61fb      	str	r3, [r7, #28]
    (*oid_len)++;
 800e412:	683b      	ldr	r3, [r7, #0]
 800e414:	781b      	ldrb	r3, [r3, #0]
 800e416:	3301      	adds	r3, #1
 800e418:	b2da      	uxtb	r2, r3
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	701a      	strb	r2, [r3, #0]
  while ((len > 0) && (*oid_len < oid_max_len)) {
 800e41e:	897b      	ldrh	r3, [r7, #10]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d005      	beq.n	800e430 <snmp_asn1_dec_oid+0x186>
 800e424:	683b      	ldr	r3, [r7, #0]
 800e426:	781b      	ldrb	r3, [r3, #0]
 800e428:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800e42c:	429a      	cmp	r2, r3
 800e42e:	d8a9      	bhi.n	800e384 <snmp_asn1_dec_oid+0xda>
  }

  if (len > 0) {
 800e430:	897b      	ldrh	r3, [r7, #10]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d002      	beq.n	800e43c <snmp_asn1_dec_oid+0x192>
    /* OID to long to fit in our buffer */
    return ERR_MEM;
 800e436:	f04f 33ff 	mov.w	r3, #4294967295
 800e43a:	e000      	b.n	800e43e <snmp_asn1_dec_oid+0x194>
  }

  return ERR_OK;
 800e43c:	2300      	movs	r3, #0
}
 800e43e:	4618      	mov	r0, r3
 800e440:	3720      	adds	r7, #32
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}

0800e446 <snmp_asn1_dec_raw>:
 * @param buf_max_len buffer size
 * @return ERR_OK if successful, ERR_ARG if we can't (or won't) decode
 */
err_t
snmp_asn1_dec_raw(struct snmp_pbuf_stream *pbuf_stream, u16_t len, u8_t *buf, u16_t* buf_len, u16_t buf_max_len)
{
 800e446:	b580      	push	{r7, lr}
 800e448:	b084      	sub	sp, #16
 800e44a:	af00      	add	r7, sp, #0
 800e44c:	60f8      	str	r0, [r7, #12]
 800e44e:	607a      	str	r2, [r7, #4]
 800e450:	603b      	str	r3, [r7, #0]
 800e452:	460b      	mov	r3, r1
 800e454:	817b      	strh	r3, [r7, #10]
  if (len > buf_max_len) {
 800e456:	897a      	ldrh	r2, [r7, #10]
 800e458:	8b3b      	ldrh	r3, [r7, #24]
 800e45a:	429a      	cmp	r2, r3
 800e45c:	d902      	bls.n	800e464 <snmp_asn1_dec_raw+0x1e>
    /* not enough dst space */
    return ERR_MEM;
 800e45e:	f04f 33ff 	mov.w	r3, #4294967295
 800e462:	e017      	b.n	800e494 <snmp_asn1_dec_raw+0x4e>
  }
  *buf_len = len;
 800e464:	683b      	ldr	r3, [r7, #0]
 800e466:	897a      	ldrh	r2, [r7, #10]
 800e468:	801a      	strh	r2, [r3, #0]

  while (len > 0) {
 800e46a:	e00f      	b.n	800e48c <snmp_asn1_dec_raw+0x46>
    PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, buf));
 800e46c:	6879      	ldr	r1, [r7, #4]
 800e46e:	68f8      	ldr	r0, [r7, #12]
 800e470:	f005 f86a 	bl	8013548 <snmp_pbuf_stream_read>
 800e474:	4603      	mov	r3, r0
 800e476:	2b00      	cmp	r3, #0
 800e478:	d002      	beq.n	800e480 <snmp_asn1_dec_raw+0x3a>
 800e47a:	f06f 0301 	mvn.w	r3, #1
 800e47e:	e009      	b.n	800e494 <snmp_asn1_dec_raw+0x4e>
    buf++;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	3301      	adds	r3, #1
 800e484:	607b      	str	r3, [r7, #4]
    len--;
 800e486:	897b      	ldrh	r3, [r7, #10]
 800e488:	3b01      	subs	r3, #1
 800e48a:	817b      	strh	r3, [r7, #10]
  while (len > 0) {
 800e48c:	897b      	ldrh	r3, [r7, #10]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d1ec      	bne.n	800e46c <snmp_asn1_dec_raw+0x26>
  }

  return ERR_OK;
 800e492:	2300      	movs	r3, #0
}
 800e494:	4618      	mov	r0, r3
 800e496:	3710      	adds	r7, #16
 800e498:	46bd      	mov	sp, r7
 800e49a:	bd80      	pop	{r7, pc}

0800e49c <snmp_set_mibs>:
 * };
 * snmp_set_mibs(my_snmp_mibs, LWIP_ARRAYSIZE(my_snmp_mibs));
 */
void
snmp_set_mibs(const struct snmp_mib **mibs, u8_t num_mibs)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b082      	sub	sp, #8
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
 800e4a4:	460b      	mov	r3, r1
 800e4a6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("mibs pointer must be != NULL", (mibs != NULL));
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d105      	bne.n	800e4ba <snmp_set_mibs+0x1e>
 800e4ae:	4b0c      	ldr	r3, [pc, #48]	@ (800e4e0 <snmp_set_mibs+0x44>)
 800e4b0:	22de      	movs	r2, #222	@ 0xde
 800e4b2:	490c      	ldr	r1, [pc, #48]	@ (800e4e4 <snmp_set_mibs+0x48>)
 800e4b4:	480c      	ldr	r0, [pc, #48]	@ (800e4e8 <snmp_set_mibs+0x4c>)
 800e4b6:	f013 fbe7 	bl	8021c88 <iprintf>
  LWIP_ASSERT("num_mibs pointer must be != 0", (num_mibs != 0));
 800e4ba:	78fb      	ldrb	r3, [r7, #3]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d105      	bne.n	800e4cc <snmp_set_mibs+0x30>
 800e4c0:	4b07      	ldr	r3, [pc, #28]	@ (800e4e0 <snmp_set_mibs+0x44>)
 800e4c2:	22df      	movs	r2, #223	@ 0xdf
 800e4c4:	4909      	ldr	r1, [pc, #36]	@ (800e4ec <snmp_set_mibs+0x50>)
 800e4c6:	4808      	ldr	r0, [pc, #32]	@ (800e4e8 <snmp_set_mibs+0x4c>)
 800e4c8:	f013 fbde 	bl	8021c88 <iprintf>
  snmp_mibs     = mibs;
 800e4cc:	4a08      	ldr	r2, [pc, #32]	@ (800e4f0 <snmp_set_mibs+0x54>)
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	6013      	str	r3, [r2, #0]
  snmp_num_mibs = num_mibs;
 800e4d2:	4a08      	ldr	r2, [pc, #32]	@ (800e4f4 <snmp_set_mibs+0x58>)
 800e4d4:	78fb      	ldrb	r3, [r7, #3]
 800e4d6:	7013      	strb	r3, [r2, #0]
}
 800e4d8:	bf00      	nop
 800e4da:	3708      	adds	r7, #8
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd80      	pop	{r7, pc}
 800e4e0:	080252d0 	.word	0x080252d0
 800e4e4:	0802530c 	.word	0x0802530c
 800e4e8:	0802532c 	.word	0x0802532c
 800e4ec:	08025354 	.word	0x08025354
 800e4f0:	200000fc 	.word	0x200000fc
 800e4f4:	200000f8 	.word	0x200000f8

0800e4f8 <snmp_get_device_enterprise_oid>:
/**
 * @ingroup snmp_core
 * Get 'device enterprise oid' 
 */
const struct snmp_obj_id* snmp_get_device_enterprise_oid(void)
{
 800e4f8:	b480      	push	{r7}
 800e4fa:	af00      	add	r7, sp, #0
  return snmp_device_enterprise_oid;
 800e4fc:	4b02      	ldr	r3, [pc, #8]	@ (800e508 <snmp_get_device_enterprise_oid+0x10>)
 800e4fe:	681b      	ldr	r3, [r3, #0]
}
 800e500:	4618      	mov	r0, r3
 800e502:	46bd      	mov	sp, r7
 800e504:	bc80      	pop	{r7}
 800e506:	4770      	bx	lr
 800e508:	200000f4 	.word	0x200000f4

0800e50c <snmp_oid_to_ip4>:
 * @param oid points to u32_t ident[4] input
 * @param ip points to output struct
 */
u8_t
snmp_oid_to_ip4(const u32_t *oid, ip4_addr_t *ip)
{
 800e50c:	b480      	push	{r7}
 800e50e:	b083      	sub	sp, #12
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
 800e514:	6039      	str	r1, [r7, #0]
  if ((oid[0] > 0xFF) ||
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	2bff      	cmp	r3, #255	@ 0xff
 800e51c:	d80e      	bhi.n	800e53c <snmp_oid_to_ip4+0x30>
      (oid[1] > 0xFF) ||
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	3304      	adds	r3, #4
 800e522:	681b      	ldr	r3, [r3, #0]
  if ((oid[0] > 0xFF) ||
 800e524:	2bff      	cmp	r3, #255	@ 0xff
 800e526:	d809      	bhi.n	800e53c <snmp_oid_to_ip4+0x30>
      (oid[2] > 0xFF) ||
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	3308      	adds	r3, #8
 800e52c:	681b      	ldr	r3, [r3, #0]
      (oid[1] > 0xFF) ||
 800e52e:	2bff      	cmp	r3, #255	@ 0xff
 800e530:	d804      	bhi.n	800e53c <snmp_oid_to_ip4+0x30>
      (oid[3] > 0xFF)) {
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	330c      	adds	r3, #12
 800e536:	681b      	ldr	r3, [r3, #0]
      (oid[2] > 0xFF) ||
 800e538:	2bff      	cmp	r3, #255	@ 0xff
 800e53a:	d905      	bls.n	800e548 <snmp_oid_to_ip4+0x3c>
    ip4_addr_copy(*ip, *IP4_ADDR_ANY4);
 800e53c:	4b36      	ldr	r3, [pc, #216]	@ (800e618 <snmp_oid_to_ip4+0x10c>)
 800e53e:	681a      	ldr	r2, [r3, #0]
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	601a      	str	r2, [r3, #0]
    return 0;
 800e544:	2300      	movs	r3, #0
 800e546:	e061      	b.n	800e60c <snmp_oid_to_ip4+0x100>
  }

  IP4_ADDR(ip, oid[0], oid[1], oid[2], oid[3]);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	061a      	lsls	r2, r3, #24
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	3304      	adds	r3, #4
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	041b      	lsls	r3, r3, #16
 800e556:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e55a:	431a      	orrs	r2, r3
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	3308      	adds	r3, #8
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	021b      	lsls	r3, r3, #8
 800e564:	b29b      	uxth	r3, r3
 800e566:	431a      	orrs	r2, r3
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	330c      	adds	r3, #12
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	b2db      	uxtb	r3, r3
 800e570:	4313      	orrs	r3, r2
 800e572:	061a      	lsls	r2, r3, #24
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	0619      	lsls	r1, r3, #24
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	3304      	adds	r3, #4
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	041b      	lsls	r3, r3, #16
 800e582:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e586:	4319      	orrs	r1, r3
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	3308      	adds	r3, #8
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	021b      	lsls	r3, r3, #8
 800e590:	b29b      	uxth	r3, r3
 800e592:	4319      	orrs	r1, r3
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	330c      	adds	r3, #12
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	b2db      	uxtb	r3, r3
 800e59c:	430b      	orrs	r3, r1
 800e59e:	021b      	lsls	r3, r3, #8
 800e5a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e5a4:	431a      	orrs	r2, r3
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	0619      	lsls	r1, r3, #24
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	3304      	adds	r3, #4
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	041b      	lsls	r3, r3, #16
 800e5b4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e5b8:	4319      	orrs	r1, r3
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	3308      	adds	r3, #8
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	021b      	lsls	r3, r3, #8
 800e5c2:	b29b      	uxth	r3, r3
 800e5c4:	4319      	orrs	r1, r3
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	330c      	adds	r3, #12
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	b2db      	uxtb	r3, r3
 800e5ce:	430b      	orrs	r3, r1
 800e5d0:	0a1b      	lsrs	r3, r3, #8
 800e5d2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e5d6:	431a      	orrs	r2, r3
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	0619      	lsls	r1, r3, #24
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	3304      	adds	r3, #4
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	041b      	lsls	r3, r3, #16
 800e5e6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e5ea:	4319      	orrs	r1, r3
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	3308      	adds	r3, #8
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	021b      	lsls	r3, r3, #8
 800e5f4:	b29b      	uxth	r3, r3
 800e5f6:	4319      	orrs	r1, r3
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	330c      	adds	r3, #12
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	b2db      	uxtb	r3, r3
 800e600:	430b      	orrs	r3, r1
 800e602:	0e1b      	lsrs	r3, r3, #24
 800e604:	431a      	orrs	r2, r3
 800e606:	683b      	ldr	r3, [r7, #0]
 800e608:	601a      	str	r2, [r3, #0]
  return 1;
 800e60a:	2301      	movs	r3, #1
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	370c      	adds	r7, #12
 800e610:	46bd      	mov	sp, r7
 800e612:	bc80      	pop	{r7}
 800e614:	4770      	bx	lr
 800e616:	bf00      	nop
 800e618:	08030cf4 	.word	0x08030cf4

0800e61c <snmp_ip4_to_oid>:
 * @param ip points to input struct
 * @param oid points to u32_t ident[4] output
 */
void
snmp_ip4_to_oid(const ip4_addr_t *ip, u32_t *oid)
{
 800e61c:	b480      	push	{r7}
 800e61e:	b083      	sub	sp, #12
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
 800e624:	6039      	str	r1, [r7, #0]
  oid[0] = ip4_addr1(ip);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	781b      	ldrb	r3, [r3, #0]
 800e62a:	461a      	mov	r2, r3
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	601a      	str	r2, [r3, #0]
  oid[1] = ip4_addr2(ip);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	3301      	adds	r3, #1
 800e634:	781a      	ldrb	r2, [r3, #0]
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	3304      	adds	r3, #4
 800e63a:	601a      	str	r2, [r3, #0]
  oid[2] = ip4_addr3(ip);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	3302      	adds	r3, #2
 800e640:	781a      	ldrb	r2, [r3, #0]
 800e642:	683b      	ldr	r3, [r7, #0]
 800e644:	3308      	adds	r3, #8
 800e646:	601a      	str	r2, [r3, #0]
  oid[3] = ip4_addr4(ip);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	3303      	adds	r3, #3
 800e64c:	781a      	ldrb	r2, [r3, #0]
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	330c      	adds	r3, #12
 800e652:	601a      	str	r2, [r3, #0]
}
 800e654:	bf00      	nop
 800e656:	370c      	adds	r7, #12
 800e658:	46bd      	mov	sp, r7
 800e65a:	bc80      	pop	{r7}
 800e65c:	4770      	bx	lr

0800e65e <snmp_ip_port_to_oid>:
 * @param oid OID
 * @return OID length
 */
u8_t
snmp_ip_port_to_oid(const ip_addr_t *ip, u16_t port, u32_t *oid)
{
 800e65e:	b580      	push	{r7, lr}
 800e660:	b086      	sub	sp, #24
 800e662:	af00      	add	r7, sp, #0
 800e664:	60f8      	str	r0, [r7, #12]
 800e666:	460b      	mov	r3, r1
 800e668:	607a      	str	r2, [r7, #4]
 800e66a:	817b      	strh	r3, [r7, #10]
  u8_t idx;

  idx = snmp_ip_to_oid(ip, oid);
 800e66c:	6879      	ldr	r1, [r7, #4]
 800e66e:	68f8      	ldr	r0, [r7, #12]
 800e670:	f000 f810 	bl	800e694 <snmp_ip_to_oid>
 800e674:	4603      	mov	r3, r0
 800e676:	75fb      	strb	r3, [r7, #23]
  oid[idx] = port;
 800e678:	7dfb      	ldrb	r3, [r7, #23]
 800e67a:	009b      	lsls	r3, r3, #2
 800e67c:	687a      	ldr	r2, [r7, #4]
 800e67e:	4413      	add	r3, r2
 800e680:	897a      	ldrh	r2, [r7, #10]
 800e682:	601a      	str	r2, [r3, #0]
  idx++;
 800e684:	7dfb      	ldrb	r3, [r7, #23]
 800e686:	3301      	adds	r3, #1
 800e688:	75fb      	strb	r3, [r7, #23]

  return idx;
 800e68a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e68c:	4618      	mov	r0, r3
 800e68e:	3718      	adds	r7, #24
 800e690:	46bd      	mov	sp, r7
 800e692:	bd80      	pop	{r7, pc}

0800e694 <snmp_ip_to_oid>:
 * @param oid OID
 * @return OID length
 */
u8_t
snmp_ip_to_oid(const ip_addr_t *ip, u32_t *oid)
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b082      	sub	sp, #8
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
 800e69c:	6039      	str	r1, [r7, #0]
#else /* LWIP_IPV6 */
    return 0;
#endif /* LWIP_IPV6 */
  } else {
#if LWIP_IPV4
    oid[0] = 1; /* ipv4 */
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	2201      	movs	r2, #1
 800e6a2:	601a      	str	r2, [r3, #0]
    oid[1] = 4; /* 4 InetAddressIPv4 OIDs follow */
 800e6a4:	683b      	ldr	r3, [r7, #0]
 800e6a6:	3304      	adds	r3, #4
 800e6a8:	2204      	movs	r2, #4
 800e6aa:	601a      	str	r2, [r3, #0]
    snmp_ip4_to_oid(ip_2_ip4(ip), &oid[2]);
 800e6ac:	683b      	ldr	r3, [r7, #0]
 800e6ae:	3308      	adds	r3, #8
 800e6b0:	4619      	mov	r1, r3
 800e6b2:	6878      	ldr	r0, [r7, #4]
 800e6b4:	f7ff ffb2 	bl	800e61c <snmp_ip4_to_oid>
    return 6;
 800e6b8:	2306      	movs	r3, #6
#else /* LWIP_IPV4 */
    return 0;
#endif /* LWIP_IPV4 */
  }
}
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	3708      	adds	r7, #8
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	bd80      	pop	{r7, pc}

0800e6c2 <snmp_oid_to_ip>:
 * @param ip IP address
 * @return Parsed OID length
 */
u8_t
snmp_oid_to_ip(const u32_t *oid, u8_t oid_len, ip_addr_t *ip)
{
 800e6c2:	b580      	push	{r7, lr}
 800e6c4:	b084      	sub	sp, #16
 800e6c6:	af00      	add	r7, sp, #0
 800e6c8:	60f8      	str	r0, [r7, #12]
 800e6ca:	460b      	mov	r3, r1
 800e6cc:	607a      	str	r2, [r7, #4]
 800e6ce:	72fb      	strb	r3, [r7, #11]
  /* InetAddressType */
  if (oid_len < 1) {
 800e6d0:	7afb      	ldrb	r3, [r7, #11]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d101      	bne.n	800e6da <snmp_oid_to_ip+0x18>
    return 0;
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	e03a      	b.n	800e750 <snmp_oid_to_ip+0x8e>
  }

  if (oid[0] == 0) { /* any */
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d112      	bne.n	800e708 <snmp_oid_to_ip+0x46>
    /* 1x InetAddressType, 1x OID len */
    if (oid_len < 2) {
 800e6e2:	7afb      	ldrb	r3, [r7, #11]
 800e6e4:	2b01      	cmp	r3, #1
 800e6e6:	d801      	bhi.n	800e6ec <snmp_oid_to_ip+0x2a>
      return 0;
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	e031      	b.n	800e750 <snmp_oid_to_ip+0x8e>
    }
    if (oid[1] != 0) {
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	3304      	adds	r3, #4
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d001      	beq.n	800e6fa <snmp_oid_to_ip+0x38>
      return 0;
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	e02a      	b.n	800e750 <snmp_oid_to_ip+0x8e>
    }

    memset(ip, 0, sizeof(*ip));
 800e6fa:	2204      	movs	r2, #4
 800e6fc:	2100      	movs	r1, #0
 800e6fe:	6878      	ldr	r0, [r7, #4]
 800e700:	f013 fc98 	bl	8022034 <memset>
    IP_SET_TYPE(ip, IPADDR_TYPE_ANY);

    return 2;
 800e704:	2302      	movs	r3, #2
 800e706:	e023      	b.n	800e750 <snmp_oid_to_ip+0x8e>
  } else if (oid[0] == 1) { /* ipv4 */
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	2b01      	cmp	r3, #1
 800e70e:	d118      	bne.n	800e742 <snmp_oid_to_ip+0x80>
#if LWIP_IPV4
    /* 1x InetAddressType, 1x OID len, 4x InetAddressIPv4 */
    if (oid_len < 6) {
 800e710:	7afb      	ldrb	r3, [r7, #11]
 800e712:	2b05      	cmp	r3, #5
 800e714:	d801      	bhi.n	800e71a <snmp_oid_to_ip+0x58>
      return 0;
 800e716:	2300      	movs	r3, #0
 800e718:	e01a      	b.n	800e750 <snmp_oid_to_ip+0x8e>
    }

    /* 4x ipv4 OID */
    if (oid[1] != 4) {
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	3304      	adds	r3, #4
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	2b04      	cmp	r3, #4
 800e722:	d001      	beq.n	800e728 <snmp_oid_to_ip+0x66>
      return 0;
 800e724:	2300      	movs	r3, #0
 800e726:	e013      	b.n	800e750 <snmp_oid_to_ip+0x8e>
    }

    IP_SET_TYPE(ip, IPADDR_TYPE_V4);
    if (!snmp_oid_to_ip4(&oid[2], ip_2_ip4(ip))) {
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	3308      	adds	r3, #8
 800e72c:	6879      	ldr	r1, [r7, #4]
 800e72e:	4618      	mov	r0, r3
 800e730:	f7ff feec 	bl	800e50c <snmp_oid_to_ip4>
 800e734:	4603      	mov	r3, r0
 800e736:	2b00      	cmp	r3, #0
 800e738:	d101      	bne.n	800e73e <snmp_oid_to_ip+0x7c>
      return 0;
 800e73a:	2300      	movs	r3, #0
 800e73c:	e008      	b.n	800e750 <snmp_oid_to_ip+0x8e>
    }

    return 6;
 800e73e:	2306      	movs	r3, #6
 800e740:	e006      	b.n	800e750 <snmp_oid_to_ip+0x8e>
#else /* LWIP_IPV4 */
    return 0;
#endif /* LWIP_IPV4 */
  } else if (oid[0] == 2) { /* ipv6 */
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	2b02      	cmp	r3, #2
 800e748:	d101      	bne.n	800e74e <snmp_oid_to_ip+0x8c>
      return 0;
    }

    return 18;
#else /* LWIP_IPV6 */
    return 0;
 800e74a:	2300      	movs	r3, #0
 800e74c:	e000      	b.n	800e750 <snmp_oid_to_ip+0x8e>
#endif /* LWIP_IPV6 */
  } else { /* unsupported InetAddressType */
    return 0;
 800e74e:	2300      	movs	r3, #0
  }
}
 800e750:	4618      	mov	r0, r3
 800e752:	3710      	adds	r7, #16
 800e754:	46bd      	mov	sp, r7
 800e756:	bd80      	pop	{r7, pc}

0800e758 <snmp_oid_to_ip_port>:
 * @param port Port
 * @return Parsed OID length
 */
u8_t
snmp_oid_to_ip_port(const u32_t *oid, u8_t oid_len, ip_addr_t *ip, u16_t *port)
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b086      	sub	sp, #24
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	60f8      	str	r0, [r7, #12]
 800e760:	607a      	str	r2, [r7, #4]
 800e762:	603b      	str	r3, [r7, #0]
 800e764:	460b      	mov	r3, r1
 800e766:	72fb      	strb	r3, [r7, #11]
  u8_t idx = 0;
 800e768:	2300      	movs	r3, #0
 800e76a:	75fb      	strb	r3, [r7, #23]

  /* InetAddressType + InetAddress */
  idx += snmp_oid_to_ip(&oid[idx], oid_len-idx, ip);
 800e76c:	7dfb      	ldrb	r3, [r7, #23]
 800e76e:	009b      	lsls	r3, r3, #2
 800e770:	68fa      	ldr	r2, [r7, #12]
 800e772:	18d0      	adds	r0, r2, r3
 800e774:	7afa      	ldrb	r2, [r7, #11]
 800e776:	7dfb      	ldrb	r3, [r7, #23]
 800e778:	1ad3      	subs	r3, r2, r3
 800e77a:	b2db      	uxtb	r3, r3
 800e77c:	687a      	ldr	r2, [r7, #4]
 800e77e:	4619      	mov	r1, r3
 800e780:	f7ff ff9f 	bl	800e6c2 <snmp_oid_to_ip>
 800e784:	4603      	mov	r3, r0
 800e786:	461a      	mov	r2, r3
 800e788:	7dfb      	ldrb	r3, [r7, #23]
 800e78a:	4413      	add	r3, r2
 800e78c:	75fb      	strb	r3, [r7, #23]
  if (idx == 0) {
 800e78e:	7dfb      	ldrb	r3, [r7, #23]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d101      	bne.n	800e798 <snmp_oid_to_ip_port+0x40>
    return 0;
 800e794:	2300      	movs	r3, #0
 800e796:	e01b      	b.n	800e7d0 <snmp_oid_to_ip_port+0x78>
  }

  /* InetPortNumber */
  if (oid_len < (idx+1)) {
 800e798:	7dfa      	ldrb	r2, [r7, #23]
 800e79a:	7afb      	ldrb	r3, [r7, #11]
 800e79c:	429a      	cmp	r2, r3
 800e79e:	d301      	bcc.n	800e7a4 <snmp_oid_to_ip_port+0x4c>
    return 0;
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	e015      	b.n	800e7d0 <snmp_oid_to_ip_port+0x78>
  }
  if (oid[idx] > 0xffff) {
 800e7a4:	7dfb      	ldrb	r3, [r7, #23]
 800e7a6:	009b      	lsls	r3, r3, #2
 800e7a8:	68fa      	ldr	r2, [r7, #12]
 800e7aa:	4413      	add	r3, r2
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e7b2:	d301      	bcc.n	800e7b8 <snmp_oid_to_ip_port+0x60>
    return 0;
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	e00b      	b.n	800e7d0 <snmp_oid_to_ip_port+0x78>
  }
  *port = (u16_t)oid[idx];
 800e7b8:	7dfb      	ldrb	r3, [r7, #23]
 800e7ba:	009b      	lsls	r3, r3, #2
 800e7bc:	68fa      	ldr	r2, [r7, #12]
 800e7be:	4413      	add	r3, r2
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	b29a      	uxth	r2, r3
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	801a      	strh	r2, [r3, #0]
  idx++;
 800e7c8:	7dfb      	ldrb	r3, [r7, #23]
 800e7ca:	3301      	adds	r3, #1
 800e7cc:	75fb      	strb	r3, [r7, #23]

  return idx;
 800e7ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	3718      	adds	r7, #24
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}

0800e7d8 <snmp_oid_assign>:
 * @param oid OID
 * @param oid_len OID length
 */
void
snmp_oid_assign(struct snmp_obj_id* target, const u32_t *oid, u8_t oid_len)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b084      	sub	sp, #16
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	60f8      	str	r0, [r7, #12]
 800e7e0:	60b9      	str	r1, [r7, #8]
 800e7e2:	4613      	mov	r3, r2
 800e7e4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("oid_len <= LWIP_SNMP_OBJ_ID_LEN", oid_len <= SNMP_MAX_OBJ_ID_LEN);
 800e7e6:	79fb      	ldrb	r3, [r7, #7]
 800e7e8:	2b32      	cmp	r3, #50	@ 0x32
 800e7ea:	d906      	bls.n	800e7fa <snmp_oid_assign+0x22>
 800e7ec:	4b0c      	ldr	r3, [pc, #48]	@ (800e820 <snmp_oid_assign+0x48>)
 800e7ee:	f240 2213 	movw	r2, #531	@ 0x213
 800e7f2:	490c      	ldr	r1, [pc, #48]	@ (800e824 <snmp_oid_assign+0x4c>)
 800e7f4:	480c      	ldr	r0, [pc, #48]	@ (800e828 <snmp_oid_assign+0x50>)
 800e7f6:	f013 fa47 	bl	8021c88 <iprintf>

  target->len = oid_len;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	79fa      	ldrb	r2, [r7, #7]
 800e7fe:	701a      	strb	r2, [r3, #0]

  if (oid_len > 0) {
 800e800:	79fb      	ldrb	r3, [r7, #7]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d007      	beq.n	800e816 <snmp_oid_assign+0x3e>
    MEMCPY(target->id, oid, oid_len * sizeof(u32_t));
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	1d18      	adds	r0, r3, #4
 800e80a:	79fb      	ldrb	r3, [r7, #7]
 800e80c:	009b      	lsls	r3, r3, #2
 800e80e:	461a      	mov	r2, r3
 800e810:	68b9      	ldr	r1, [r7, #8]
 800e812:	f013 fd34 	bl	802227e <memcpy>
  }
}
 800e816:	bf00      	nop
 800e818:	3710      	adds	r7, #16
 800e81a:	46bd      	mov	sp, r7
 800e81c:	bd80      	pop	{r7, pc}
 800e81e:	bf00      	nop
 800e820:	080252d0 	.word	0x080252d0
 800e824:	08025374 	.word	0x08025374
 800e828:	0802532c 	.word	0x0802532c

0800e82c <snmp_oid_append>:
 * @param oid OID
 * @param oid_len OID length
 */
void
snmp_oid_append(struct snmp_obj_id* target, const u32_t *oid, u8_t oid_len)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b084      	sub	sp, #16
 800e830:	af00      	add	r7, sp, #0
 800e832:	60f8      	str	r0, [r7, #12]
 800e834:	60b9      	str	r1, [r7, #8]
 800e836:	4613      	mov	r3, r2
 800e838:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("offset + oid_len <= LWIP_SNMP_OBJ_ID_LEN", (target->len + oid_len) <= SNMP_MAX_OBJ_ID_LEN);
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	781b      	ldrb	r3, [r3, #0]
 800e83e:	461a      	mov	r2, r3
 800e840:	79fb      	ldrb	r3, [r7, #7]
 800e842:	4413      	add	r3, r2
 800e844:	2b32      	cmp	r3, #50	@ 0x32
 800e846:	dd06      	ble.n	800e856 <snmp_oid_append+0x2a>
 800e848:	4b10      	ldr	r3, [pc, #64]	@ (800e88c <snmp_oid_append+0x60>)
 800e84a:	f240 224b 	movw	r2, #587	@ 0x24b
 800e84e:	4910      	ldr	r1, [pc, #64]	@ (800e890 <snmp_oid_append+0x64>)
 800e850:	4810      	ldr	r0, [pc, #64]	@ (800e894 <snmp_oid_append+0x68>)
 800e852:	f013 fa19 	bl	8021c88 <iprintf>

  if (oid_len > 0) {
 800e856:	79fb      	ldrb	r3, [r7, #7]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d012      	beq.n	800e882 <snmp_oid_append+0x56>
    MEMCPY(&target->id[target->len], oid, oid_len * sizeof(u32_t));
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	781b      	ldrb	r3, [r3, #0]
 800e860:	009b      	lsls	r3, r3, #2
 800e862:	68fa      	ldr	r2, [r7, #12]
 800e864:	4413      	add	r3, r2
 800e866:	1d18      	adds	r0, r3, #4
 800e868:	79fb      	ldrb	r3, [r7, #7]
 800e86a:	009b      	lsls	r3, r3, #2
 800e86c:	461a      	mov	r2, r3
 800e86e:	68b9      	ldr	r1, [r7, #8]
 800e870:	f013 fd05 	bl	802227e <memcpy>
    target->len += oid_len;
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	781a      	ldrb	r2, [r3, #0]
 800e878:	79fb      	ldrb	r3, [r7, #7]
 800e87a:	4413      	add	r3, r2
 800e87c:	b2da      	uxtb	r2, r3
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	701a      	strb	r2, [r3, #0]
  }
}
 800e882:	bf00      	nop
 800e884:	3710      	adds	r7, #16
 800e886:	46bd      	mov	sp, r7
 800e888:	bd80      	pop	{r7, pc}
 800e88a:	bf00      	nop
 800e88c:	080252d0 	.word	0x080252d0
 800e890:	080253c4 	.word	0x080253c4
 800e894:	0802532c 	.word	0x0802532c

0800e898 <snmp_oid_compare>:
 * @param oid2_len OID 2 length
 * @return -1: OID1&lt;OID2  1: OID1 &gt;OID2 0: equal
 */
s8_t
snmp_oid_compare(const u32_t *oid1, u8_t oid1_len, const u32_t *oid2, u8_t oid2_len)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b086      	sub	sp, #24
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	60f8      	str	r0, [r7, #12]
 800e8a0:	607a      	str	r2, [r7, #4]
 800e8a2:	461a      	mov	r2, r3
 800e8a4:	460b      	mov	r3, r1
 800e8a6:	72fb      	strb	r3, [r7, #11]
 800e8a8:	4613      	mov	r3, r2
 800e8aa:	72bb      	strb	r3, [r7, #10]
  u8_t level = 0;
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	75fb      	strb	r3, [r7, #23]
  LWIP_ASSERT("'oid1' param must not be NULL or 'oid1_len' param be 0!", (oid1 != NULL) || (oid1_len == 0));
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d109      	bne.n	800e8ca <snmp_oid_compare+0x32>
 800e8b6:	7afb      	ldrb	r3, [r7, #11]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d006      	beq.n	800e8ca <snmp_oid_compare+0x32>
 800e8bc:	4b24      	ldr	r3, [pc, #144]	@ (800e950 <snmp_oid_compare+0xb8>)
 800e8be:	f240 225f 	movw	r2, #607	@ 0x25f
 800e8c2:	4924      	ldr	r1, [pc, #144]	@ (800e954 <snmp_oid_compare+0xbc>)
 800e8c4:	4824      	ldr	r0, [pc, #144]	@ (800e958 <snmp_oid_compare+0xc0>)
 800e8c6:	f013 f9df 	bl	8021c88 <iprintf>
  LWIP_ASSERT("'oid2' param must not be NULL or 'oid2_len' param be 0!", (oid2 != NULL) || (oid2_len == 0));
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d124      	bne.n	800e91a <snmp_oid_compare+0x82>
 800e8d0:	7abb      	ldrb	r3, [r7, #10]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d021      	beq.n	800e91a <snmp_oid_compare+0x82>
 800e8d6:	4b1e      	ldr	r3, [pc, #120]	@ (800e950 <snmp_oid_compare+0xb8>)
 800e8d8:	f44f 7218 	mov.w	r2, #608	@ 0x260
 800e8dc:	491f      	ldr	r1, [pc, #124]	@ (800e95c <snmp_oid_compare+0xc4>)
 800e8de:	481e      	ldr	r0, [pc, #120]	@ (800e958 <snmp_oid_compare+0xc0>)
 800e8e0:	f013 f9d2 	bl	8021c88 <iprintf>

  while ((level < oid1_len) && (level < oid2_len)) {
 800e8e4:	e019      	b.n	800e91a <snmp_oid_compare+0x82>
    if (*oid1 < *oid2) {
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	681a      	ldr	r2, [r3, #0]
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	429a      	cmp	r2, r3
 800e8f0:	d202      	bcs.n	800e8f8 <snmp_oid_compare+0x60>
      return -1;
 800e8f2:	f04f 33ff 	mov.w	r3, #4294967295
 800e8f6:	e026      	b.n	800e946 <snmp_oid_compare+0xae>
    }
    if (*oid1 > *oid2) {
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	681a      	ldr	r2, [r3, #0]
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	429a      	cmp	r2, r3
 800e902:	d901      	bls.n	800e908 <snmp_oid_compare+0x70>
      return 1;
 800e904:	2301      	movs	r3, #1
 800e906:	e01e      	b.n	800e946 <snmp_oid_compare+0xae>
    }

    level++;
 800e908:	7dfb      	ldrb	r3, [r7, #23]
 800e90a:	3301      	adds	r3, #1
 800e90c:	75fb      	strb	r3, [r7, #23]
    oid1++;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	3304      	adds	r3, #4
 800e912:	60fb      	str	r3, [r7, #12]
    oid2++;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	3304      	adds	r3, #4
 800e918:	607b      	str	r3, [r7, #4]
  while ((level < oid1_len) && (level < oid2_len)) {
 800e91a:	7dfa      	ldrb	r2, [r7, #23]
 800e91c:	7afb      	ldrb	r3, [r7, #11]
 800e91e:	429a      	cmp	r2, r3
 800e920:	d203      	bcs.n	800e92a <snmp_oid_compare+0x92>
 800e922:	7dfa      	ldrb	r2, [r7, #23]
 800e924:	7abb      	ldrb	r3, [r7, #10]
 800e926:	429a      	cmp	r2, r3
 800e928:	d3dd      	bcc.n	800e8e6 <snmp_oid_compare+0x4e>
  }

  /* common part of both OID's is equal, compare length */
  if (oid1_len < oid2_len) {
 800e92a:	7afa      	ldrb	r2, [r7, #11]
 800e92c:	7abb      	ldrb	r3, [r7, #10]
 800e92e:	429a      	cmp	r2, r3
 800e930:	d202      	bcs.n	800e938 <snmp_oid_compare+0xa0>
    return -1;
 800e932:	f04f 33ff 	mov.w	r3, #4294967295
 800e936:	e006      	b.n	800e946 <snmp_oid_compare+0xae>
  }
  if (oid1_len > oid2_len) {
 800e938:	7afa      	ldrb	r2, [r7, #11]
 800e93a:	7abb      	ldrb	r3, [r7, #10]
 800e93c:	429a      	cmp	r2, r3
 800e93e:	d901      	bls.n	800e944 <snmp_oid_compare+0xac>
    return 1;
 800e940:	2301      	movs	r3, #1
 800e942:	e000      	b.n	800e946 <snmp_oid_compare+0xae>
  }

  /* they are equal */
  return 0;
 800e944:	2300      	movs	r3, #0
}
 800e946:	4618      	mov	r0, r3
 800e948:	3718      	adds	r7, #24
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}
 800e94e:	bf00      	nop
 800e950:	080252d0 	.word	0x080252d0
 800e954:	080253f0 	.word	0x080253f0
 800e958:	0802532c 	.word	0x0802532c
 800e95c:	08025428 	.word	0x08025428

0800e960 <netif_to_num>:
 * @param netif netif
 * @return index
 */
u8_t
netif_to_num(const struct netif *netif)
{
 800e960:	b580      	push	{r7, lr}
 800e962:	b084      	sub	sp, #16
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
  u8_t result = 0;
 800e968:	2300      	movs	r3, #0
 800e96a:	73fb      	strb	r3, [r7, #15]
  struct netif *netif_iterator = netif_list;
 800e96c:	4b0f      	ldr	r3, [pc, #60]	@ (800e9ac <netif_to_num+0x4c>)
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	60bb      	str	r3, [r7, #8]

  while (netif_iterator != NULL) {
 800e972:	e00b      	b.n	800e98c <netif_to_num+0x2c>
    result++;
 800e974:	7bfb      	ldrb	r3, [r7, #15]
 800e976:	3301      	adds	r3, #1
 800e978:	73fb      	strb	r3, [r7, #15]

    if (netif_iterator == netif) {
 800e97a:	68ba      	ldr	r2, [r7, #8]
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	429a      	cmp	r2, r3
 800e980:	d101      	bne.n	800e986 <netif_to_num+0x26>
      return result;
 800e982:	7bfb      	ldrb	r3, [r7, #15]
 800e984:	e00d      	b.n	800e9a2 <netif_to_num+0x42>
    }

    netif_iterator = netif_iterator->next;
 800e986:	68bb      	ldr	r3, [r7, #8]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	60bb      	str	r3, [r7, #8]
  while (netif_iterator != NULL) {
 800e98c:	68bb      	ldr	r3, [r7, #8]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d1f0      	bne.n	800e974 <netif_to_num+0x14>
  }

  LWIP_ASSERT("netif not found in netif_list", 0);
 800e992:	4b07      	ldr	r3, [pc, #28]	@ (800e9b0 <netif_to_num+0x50>)
 800e994:	f240 229f 	movw	r2, #671	@ 0x29f
 800e998:	4906      	ldr	r1, [pc, #24]	@ (800e9b4 <netif_to_num+0x54>)
 800e99a:	4807      	ldr	r0, [pc, #28]	@ (800e9b8 <netif_to_num+0x58>)
 800e99c:	f013 f974 	bl	8021c88 <iprintf>
  return 0;
 800e9a0:	2300      	movs	r3, #0
}
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	3710      	adds	r7, #16
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	bd80      	pop	{r7, pc}
 800e9aa:	bf00      	nop
 800e9ac:	2000be7c 	.word	0x2000be7c
 800e9b0:	080252d0 	.word	0x080252d0
 800e9b4:	08025460 	.word	0x08025460
 800e9b8:	0802532c 	.word	0x0802532c

0800e9bc <snmp_get_mib_from_oid>:

static const struct snmp_mib*
snmp_get_mib_from_oid(const u32_t *oid, u8_t oid_len)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b086      	sub	sp, #24
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
 800e9c4:	460b      	mov	r3, r1
 800e9c6:	70fb      	strb	r3, [r7, #3]
  const u32_t* list_oid;
  const u32_t* searched_oid;
  u8_t i, l;

  u8_t max_match_len = 0;
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	737b      	strb	r3, [r7, #13]
  const struct snmp_mib* matched_mib = NULL;
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	60bb      	str	r3, [r7, #8]

  LWIP_ASSERT("'oid' param must not be NULL!", (oid != NULL));
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d106      	bne.n	800e9e4 <snmp_get_mib_from_oid+0x28>
 800e9d6:	4b44      	ldr	r3, [pc, #272]	@ (800eae8 <snmp_get_mib_from_oid+0x12c>)
 800e9d8:	f240 22ad 	movw	r2, #685	@ 0x2ad
 800e9dc:	4943      	ldr	r1, [pc, #268]	@ (800eaec <snmp_get_mib_from_oid+0x130>)
 800e9de:	4844      	ldr	r0, [pc, #272]	@ (800eaf0 <snmp_get_mib_from_oid+0x134>)
 800e9e0:	f013 f952 	bl	8021c88 <iprintf>

  if (oid_len == 0) {
 800e9e4:	78fb      	ldrb	r3, [r7, #3]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d101      	bne.n	800e9ee <snmp_get_mib_from_oid+0x32>
    return NULL;
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	e077      	b.n	800eade <snmp_get_mib_from_oid+0x122>
  }

  for (i = 0; i < snmp_num_mibs; i++) {
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	73fb      	strb	r3, [r7, #15]
 800e9f2:	e06e      	b.n	800ead2 <snmp_get_mib_from_oid+0x116>
    LWIP_ASSERT("MIB array not initialized correctly", (snmp_mibs[i] != NULL));
 800e9f4:	4b3f      	ldr	r3, [pc, #252]	@ (800eaf4 <snmp_get_mib_from_oid+0x138>)
 800e9f6:	681a      	ldr	r2, [r3, #0]
 800e9f8:	7bfb      	ldrb	r3, [r7, #15]
 800e9fa:	009b      	lsls	r3, r3, #2
 800e9fc:	4413      	add	r3, r2
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d106      	bne.n	800ea12 <snmp_get_mib_from_oid+0x56>
 800ea04:	4b38      	ldr	r3, [pc, #224]	@ (800eae8 <snmp_get_mib_from_oid+0x12c>)
 800ea06:	f44f 722d 	mov.w	r2, #692	@ 0x2b4
 800ea0a:	493b      	ldr	r1, [pc, #236]	@ (800eaf8 <snmp_get_mib_from_oid+0x13c>)
 800ea0c:	4838      	ldr	r0, [pc, #224]	@ (800eaf0 <snmp_get_mib_from_oid+0x134>)
 800ea0e:	f013 f93b 	bl	8021c88 <iprintf>
    LWIP_ASSERT("MIB array not initialized correctly - base OID is NULL", (snmp_mibs[i]->base_oid != NULL));
 800ea12:	4b38      	ldr	r3, [pc, #224]	@ (800eaf4 <snmp_get_mib_from_oid+0x138>)
 800ea14:	681a      	ldr	r2, [r3, #0]
 800ea16:	7bfb      	ldrb	r3, [r7, #15]
 800ea18:	009b      	lsls	r3, r3, #2
 800ea1a:	4413      	add	r3, r2
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d106      	bne.n	800ea32 <snmp_get_mib_from_oid+0x76>
 800ea24:	4b30      	ldr	r3, [pc, #192]	@ (800eae8 <snmp_get_mib_from_oid+0x12c>)
 800ea26:	f240 22b5 	movw	r2, #693	@ 0x2b5
 800ea2a:	4934      	ldr	r1, [pc, #208]	@ (800eafc <snmp_get_mib_from_oid+0x140>)
 800ea2c:	4830      	ldr	r0, [pc, #192]	@ (800eaf0 <snmp_get_mib_from_oid+0x134>)
 800ea2e:	f013 f92b 	bl	8021c88 <iprintf>

    if (oid_len >= snmp_mibs[i]->base_oid_len) {
 800ea32:	4b30      	ldr	r3, [pc, #192]	@ (800eaf4 <snmp_get_mib_from_oid+0x138>)
 800ea34:	681a      	ldr	r2, [r3, #0]
 800ea36:	7bfb      	ldrb	r3, [r7, #15]
 800ea38:	009b      	lsls	r3, r3, #2
 800ea3a:	4413      	add	r3, r2
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	791b      	ldrb	r3, [r3, #4]
 800ea40:	78fa      	ldrb	r2, [r7, #3]
 800ea42:	429a      	cmp	r2, r3
 800ea44:	d342      	bcc.n	800eacc <snmp_get_mib_from_oid+0x110>
      l            = snmp_mibs[i]->base_oid_len;
 800ea46:	4b2b      	ldr	r3, [pc, #172]	@ (800eaf4 <snmp_get_mib_from_oid+0x138>)
 800ea48:	681a      	ldr	r2, [r3, #0]
 800ea4a:	7bfb      	ldrb	r3, [r7, #15]
 800ea4c:	009b      	lsls	r3, r3, #2
 800ea4e:	4413      	add	r3, r2
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	791b      	ldrb	r3, [r3, #4]
 800ea54:	73bb      	strb	r3, [r7, #14]
      list_oid     = snmp_mibs[i]->base_oid;
 800ea56:	4b27      	ldr	r3, [pc, #156]	@ (800eaf4 <snmp_get_mib_from_oid+0x138>)
 800ea58:	681a      	ldr	r2, [r3, #0]
 800ea5a:	7bfb      	ldrb	r3, [r7, #15]
 800ea5c:	009b      	lsls	r3, r3, #2
 800ea5e:	4413      	add	r3, r2
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	617b      	str	r3, [r7, #20]
      searched_oid = oid;
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	613b      	str	r3, [r7, #16]

      while (l > 0) {
 800ea6a:	e00e      	b.n	800ea8a <snmp_get_mib_from_oid+0xce>
        if (*list_oid != *searched_oid) {
 800ea6c:	697b      	ldr	r3, [r7, #20]
 800ea6e:	681a      	ldr	r2, [r3, #0]
 800ea70:	693b      	ldr	r3, [r7, #16]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	429a      	cmp	r2, r3
 800ea76:	d10c      	bne.n	800ea92 <snmp_get_mib_from_oid+0xd6>
          break;
        }

        l--;
 800ea78:	7bbb      	ldrb	r3, [r7, #14]
 800ea7a:	3b01      	subs	r3, #1
 800ea7c:	73bb      	strb	r3, [r7, #14]
        list_oid++;
 800ea7e:	697b      	ldr	r3, [r7, #20]
 800ea80:	3304      	adds	r3, #4
 800ea82:	617b      	str	r3, [r7, #20]
        searched_oid++;
 800ea84:	693b      	ldr	r3, [r7, #16]
 800ea86:	3304      	adds	r3, #4
 800ea88:	613b      	str	r3, [r7, #16]
      while (l > 0) {
 800ea8a:	7bbb      	ldrb	r3, [r7, #14]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d1ed      	bne.n	800ea6c <snmp_get_mib_from_oid+0xb0>
 800ea90:	e000      	b.n	800ea94 <snmp_get_mib_from_oid+0xd8>
          break;
 800ea92:	bf00      	nop
      }

      if ((l == 0) && (snmp_mibs[i]->base_oid_len > max_match_len)) {
 800ea94:	7bbb      	ldrb	r3, [r7, #14]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d118      	bne.n	800eacc <snmp_get_mib_from_oid+0x110>
 800ea9a:	4b16      	ldr	r3, [pc, #88]	@ (800eaf4 <snmp_get_mib_from_oid+0x138>)
 800ea9c:	681a      	ldr	r2, [r3, #0]
 800ea9e:	7bfb      	ldrb	r3, [r7, #15]
 800eaa0:	009b      	lsls	r3, r3, #2
 800eaa2:	4413      	add	r3, r2
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	791b      	ldrb	r3, [r3, #4]
 800eaa8:	7b7a      	ldrb	r2, [r7, #13]
 800eaaa:	429a      	cmp	r2, r3
 800eaac:	d20e      	bcs.n	800eacc <snmp_get_mib_from_oid+0x110>
        max_match_len = snmp_mibs[i]->base_oid_len;
 800eaae:	4b11      	ldr	r3, [pc, #68]	@ (800eaf4 <snmp_get_mib_from_oid+0x138>)
 800eab0:	681a      	ldr	r2, [r3, #0]
 800eab2:	7bfb      	ldrb	r3, [r7, #15]
 800eab4:	009b      	lsls	r3, r3, #2
 800eab6:	4413      	add	r3, r2
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	791b      	ldrb	r3, [r3, #4]
 800eabc:	737b      	strb	r3, [r7, #13]
        matched_mib = snmp_mibs[i];
 800eabe:	4b0d      	ldr	r3, [pc, #52]	@ (800eaf4 <snmp_get_mib_from_oid+0x138>)
 800eac0:	681a      	ldr	r2, [r3, #0]
 800eac2:	7bfb      	ldrb	r3, [r7, #15]
 800eac4:	009b      	lsls	r3, r3, #2
 800eac6:	4413      	add	r3, r2
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < snmp_num_mibs; i++) {
 800eacc:	7bfb      	ldrb	r3, [r7, #15]
 800eace:	3301      	adds	r3, #1
 800ead0:	73fb      	strb	r3, [r7, #15]
 800ead2:	4b0b      	ldr	r3, [pc, #44]	@ (800eb00 <snmp_get_mib_from_oid+0x144>)
 800ead4:	781b      	ldrb	r3, [r3, #0]
 800ead6:	7bfa      	ldrb	r2, [r7, #15]
 800ead8:	429a      	cmp	r2, r3
 800eada:	d38b      	bcc.n	800e9f4 <snmp_get_mib_from_oid+0x38>
      }
    }
  }

  return matched_mib;
 800eadc:	68bb      	ldr	r3, [r7, #8]
}
 800eade:	4618      	mov	r0, r3
 800eae0:	3718      	adds	r7, #24
 800eae2:	46bd      	mov	sp, r7
 800eae4:	bd80      	pop	{r7, pc}
 800eae6:	bf00      	nop
 800eae8:	080252d0 	.word	0x080252d0
 800eaec:	08025480 	.word	0x08025480
 800eaf0:	0802532c 	.word	0x0802532c
 800eaf4:	200000fc 	.word	0x200000fc
 800eaf8:	080254a0 	.word	0x080254a0
 800eafc:	080254c4 	.word	0x080254c4
 800eb00:	200000f8 	.word	0x200000f8

0800eb04 <snmp_get_next_mib>:

static const struct snmp_mib*
snmp_get_next_mib(const u32_t *oid, u8_t oid_len)
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b084      	sub	sp, #16
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
 800eb0c:	460b      	mov	r3, r1
 800eb0e:	70fb      	strb	r3, [r7, #3]
  u8_t i;
  const struct snmp_mib* next_mib = NULL;
 800eb10:	2300      	movs	r3, #0
 800eb12:	60bb      	str	r3, [r7, #8]

  LWIP_ASSERT("'oid' param must not be NULL!", (oid != NULL));
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d106      	bne.n	800eb28 <snmp_get_next_mib+0x24>
 800eb1a:	4b2d      	ldr	r3, [pc, #180]	@ (800ebd0 <snmp_get_next_mib+0xcc>)
 800eb1c:	f240 22d6 	movw	r2, #726	@ 0x2d6
 800eb20:	492c      	ldr	r1, [pc, #176]	@ (800ebd4 <snmp_get_next_mib+0xd0>)
 800eb22:	482d      	ldr	r0, [pc, #180]	@ (800ebd8 <snmp_get_next_mib+0xd4>)
 800eb24:	f013 f8b0 	bl	8021c88 <iprintf>

  if (oid_len == 0) {
 800eb28:	78fb      	ldrb	r3, [r7, #3]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d101      	bne.n	800eb32 <snmp_get_next_mib+0x2e>
    return NULL;
 800eb2e:	2300      	movs	r3, #0
 800eb30:	e04a      	b.n	800ebc8 <snmp_get_next_mib+0xc4>
  }

  for (i = 0; i < snmp_num_mibs; i++) {
 800eb32:	2300      	movs	r3, #0
 800eb34:	73fb      	strb	r3, [r7, #15]
 800eb36:	e041      	b.n	800ebbc <snmp_get_next_mib+0xb8>
    if (snmp_mibs[i]->base_oid != NULL) {
 800eb38:	4b28      	ldr	r3, [pc, #160]	@ (800ebdc <snmp_get_next_mib+0xd8>)
 800eb3a:	681a      	ldr	r2, [r3, #0]
 800eb3c:	7bfb      	ldrb	r3, [r7, #15]
 800eb3e:	009b      	lsls	r3, r3, #2
 800eb40:	4413      	add	r3, r2
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d035      	beq.n	800ebb6 <snmp_get_next_mib+0xb2>
      /* check if mib is located behind starting point */
      if (snmp_oid_compare(snmp_mibs[i]->base_oid, snmp_mibs[i]->base_oid_len, oid, oid_len) > 0) {
 800eb4a:	4b24      	ldr	r3, [pc, #144]	@ (800ebdc <snmp_get_next_mib+0xd8>)
 800eb4c:	681a      	ldr	r2, [r3, #0]
 800eb4e:	7bfb      	ldrb	r3, [r7, #15]
 800eb50:	009b      	lsls	r3, r3, #2
 800eb52:	4413      	add	r3, r2
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	6818      	ldr	r0, [r3, #0]
 800eb58:	4b20      	ldr	r3, [pc, #128]	@ (800ebdc <snmp_get_next_mib+0xd8>)
 800eb5a:	681a      	ldr	r2, [r3, #0]
 800eb5c:	7bfb      	ldrb	r3, [r7, #15]
 800eb5e:	009b      	lsls	r3, r3, #2
 800eb60:	4413      	add	r3, r2
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	7919      	ldrb	r1, [r3, #4]
 800eb66:	78fb      	ldrb	r3, [r7, #3]
 800eb68:	687a      	ldr	r2, [r7, #4]
 800eb6a:	f7ff fe95 	bl	800e898 <snmp_oid_compare>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	dd20      	ble.n	800ebb6 <snmp_get_next_mib+0xb2>
        if ((next_mib == NULL) ||
 800eb74:	68bb      	ldr	r3, [r7, #8]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d016      	beq.n	800eba8 <snmp_get_next_mib+0xa4>
            (snmp_oid_compare(snmp_mibs[i]->base_oid, snmp_mibs[i]->base_oid_len,
 800eb7a:	4b18      	ldr	r3, [pc, #96]	@ (800ebdc <snmp_get_next_mib+0xd8>)
 800eb7c:	681a      	ldr	r2, [r3, #0]
 800eb7e:	7bfb      	ldrb	r3, [r7, #15]
 800eb80:	009b      	lsls	r3, r3, #2
 800eb82:	4413      	add	r3, r2
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	6818      	ldr	r0, [r3, #0]
 800eb88:	4b14      	ldr	r3, [pc, #80]	@ (800ebdc <snmp_get_next_mib+0xd8>)
 800eb8a:	681a      	ldr	r2, [r3, #0]
 800eb8c:	7bfb      	ldrb	r3, [r7, #15]
 800eb8e:	009b      	lsls	r3, r3, #2
 800eb90:	4413      	add	r3, r2
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	7919      	ldrb	r1, [r3, #4]
                              next_mib->base_oid, next_mib->base_oid_len) < 0)) {
 800eb96:	68bb      	ldr	r3, [r7, #8]
 800eb98:	681a      	ldr	r2, [r3, #0]
 800eb9a:	68bb      	ldr	r3, [r7, #8]
 800eb9c:	791b      	ldrb	r3, [r3, #4]
            (snmp_oid_compare(snmp_mibs[i]->base_oid, snmp_mibs[i]->base_oid_len,
 800eb9e:	f7ff fe7b 	bl	800e898 <snmp_oid_compare>
 800eba2:	4603      	mov	r3, r0
        if ((next_mib == NULL) ||
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	da06      	bge.n	800ebb6 <snmp_get_next_mib+0xb2>
          next_mib = snmp_mibs[i];
 800eba8:	4b0c      	ldr	r3, [pc, #48]	@ (800ebdc <snmp_get_next_mib+0xd8>)
 800ebaa:	681a      	ldr	r2, [r3, #0]
 800ebac:	7bfb      	ldrb	r3, [r7, #15]
 800ebae:	009b      	lsls	r3, r3, #2
 800ebb0:	4413      	add	r3, r2
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < snmp_num_mibs; i++) {
 800ebb6:	7bfb      	ldrb	r3, [r7, #15]
 800ebb8:	3301      	adds	r3, #1
 800ebba:	73fb      	strb	r3, [r7, #15]
 800ebbc:	4b08      	ldr	r3, [pc, #32]	@ (800ebe0 <snmp_get_next_mib+0xdc>)
 800ebbe:	781b      	ldrb	r3, [r3, #0]
 800ebc0:	7bfa      	ldrb	r2, [r7, #15]
 800ebc2:	429a      	cmp	r2, r3
 800ebc4:	d3b8      	bcc.n	800eb38 <snmp_get_next_mib+0x34>
        }
      }
    }
  }

  return next_mib;
 800ebc6:	68bb      	ldr	r3, [r7, #8]
}
 800ebc8:	4618      	mov	r0, r3
 800ebca:	3710      	adds	r7, #16
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	bd80      	pop	{r7, pc}
 800ebd0:	080252d0 	.word	0x080252d0
 800ebd4:	08025480 	.word	0x08025480
 800ebd8:	0802532c 	.word	0x0802532c
 800ebdc:	200000fc 	.word	0x200000fc
 800ebe0:	200000f8 	.word	0x200000f8

0800ebe4 <snmp_get_mib_between>:

static const struct snmp_mib*
snmp_get_mib_between(const u32_t *oid1, u8_t oid1_len, const u32_t *oid2, u8_t oid2_len)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b086      	sub	sp, #24
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	60f8      	str	r0, [r7, #12]
 800ebec:	607a      	str	r2, [r7, #4]
 800ebee:	461a      	mov	r2, r3
 800ebf0:	460b      	mov	r3, r1
 800ebf2:	72fb      	strb	r3, [r7, #11]
 800ebf4:	4613      	mov	r3, r2
 800ebf6:	72bb      	strb	r3, [r7, #10]
  const struct snmp_mib* next_mib = snmp_get_next_mib(oid1, oid1_len);
 800ebf8:	7afb      	ldrb	r3, [r7, #11]
 800ebfa:	4619      	mov	r1, r3
 800ebfc:	68f8      	ldr	r0, [r7, #12]
 800ebfe:	f7ff ff81 	bl	800eb04 <snmp_get_next_mib>
 800ec02:	6178      	str	r0, [r7, #20]

  LWIP_ASSERT("'oid2' param must not be NULL!", (oid2 != NULL));
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d106      	bne.n	800ec18 <snmp_get_mib_between+0x34>
 800ec0a:	4b13      	ldr	r3, [pc, #76]	@ (800ec58 <snmp_get_mib_between+0x74>)
 800ec0c:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800ec10:	4912      	ldr	r1, [pc, #72]	@ (800ec5c <snmp_get_mib_between+0x78>)
 800ec12:	4813      	ldr	r0, [pc, #76]	@ (800ec60 <snmp_get_mib_between+0x7c>)
 800ec14:	f013 f838 	bl	8021c88 <iprintf>
  LWIP_ASSERT("'oid2_len' param must be greater than 0!", (oid2_len > 0));
 800ec18:	7abb      	ldrb	r3, [r7, #10]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d106      	bne.n	800ec2c <snmp_get_mib_between+0x48>
 800ec1e:	4b0e      	ldr	r3, [pc, #56]	@ (800ec58 <snmp_get_mib_between+0x74>)
 800ec20:	f240 22f2 	movw	r2, #754	@ 0x2f2
 800ec24:	490f      	ldr	r1, [pc, #60]	@ (800ec64 <snmp_get_mib_between+0x80>)
 800ec26:	480e      	ldr	r0, [pc, #56]	@ (800ec60 <snmp_get_mib_between+0x7c>)
 800ec28:	f013 f82e 	bl	8021c88 <iprintf>

  if (next_mib != NULL) {
 800ec2c:	697b      	ldr	r3, [r7, #20]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d00c      	beq.n	800ec4c <snmp_get_mib_between+0x68>
    if (snmp_oid_compare(next_mib->base_oid, next_mib->base_oid_len, oid2, oid2_len) < 0) {
 800ec32:	697b      	ldr	r3, [r7, #20]
 800ec34:	6818      	ldr	r0, [r3, #0]
 800ec36:	697b      	ldr	r3, [r7, #20]
 800ec38:	7919      	ldrb	r1, [r3, #4]
 800ec3a:	7abb      	ldrb	r3, [r7, #10]
 800ec3c:	687a      	ldr	r2, [r7, #4]
 800ec3e:	f7ff fe2b 	bl	800e898 <snmp_oid_compare>
 800ec42:	4603      	mov	r3, r0
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	da01      	bge.n	800ec4c <snmp_get_mib_between+0x68>
      return next_mib;
 800ec48:	697b      	ldr	r3, [r7, #20]
 800ec4a:	e000      	b.n	800ec4e <snmp_get_mib_between+0x6a>
    }
  }

  return NULL;
 800ec4c:	2300      	movs	r3, #0
}
 800ec4e:	4618      	mov	r0, r3
 800ec50:	3718      	adds	r7, #24
 800ec52:	46bd      	mov	sp, r7
 800ec54:	bd80      	pop	{r7, pc}
 800ec56:	bf00      	nop
 800ec58:	080252d0 	.word	0x080252d0
 800ec5c:	080254fc 	.word	0x080254fc
 800ec60:	0802532c 	.word	0x0802532c
 800ec64:	0802551c 	.word	0x0802551c

0800ec68 <snmp_get_node_instance_from_oid>:

u8_t
snmp_get_node_instance_from_oid(const u32_t *oid, u8_t oid_len, struct snmp_node_instance* node_instance)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b08a      	sub	sp, #40	@ 0x28
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	60f8      	str	r0, [r7, #12]
 800ec70:	460b      	mov	r3, r1
 800ec72:	607a      	str	r2, [r7, #4]
 800ec74:	72fb      	strb	r3, [r7, #11]
  u8_t result = SNMP_ERR_NOSUCHOBJECT;
 800ec76:	23f0      	movs	r3, #240	@ 0xf0
 800ec78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  const struct snmp_mib *mib;
  const struct snmp_node *mn = NULL;
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	623b      	str	r3, [r7, #32]

  mib = snmp_get_mib_from_oid(oid, oid_len);
 800ec80:	7afb      	ldrb	r3, [r7, #11]
 800ec82:	4619      	mov	r1, r3
 800ec84:	68f8      	ldr	r0, [r7, #12]
 800ec86:	f7ff fe99 	bl	800e9bc <snmp_get_mib_from_oid>
 800ec8a:	61f8      	str	r0, [r7, #28]
  if (mib != NULL) {
 800ec8c:	69fb      	ldr	r3, [r7, #28]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d02b      	beq.n	800ecea <snmp_get_node_instance_from_oid+0x82>
    u8_t oid_instance_len;

    mn = snmp_mib_tree_resolve_exact(mib, oid, oid_len, &oid_instance_len);
 800ec92:	f107 0317 	add.w	r3, r7, #23
 800ec96:	7afa      	ldrb	r2, [r7, #11]
 800ec98:	68f9      	ldr	r1, [r7, #12]
 800ec9a:	69f8      	ldr	r0, [r7, #28]
 800ec9c:	f000 f981 	bl	800efa2 <snmp_mib_tree_resolve_exact>
 800eca0:	6238      	str	r0, [r7, #32]
    if ((mn != NULL) && (mn->node_type != SNMP_NODE_TREE)) {
 800eca2:	6a3b      	ldr	r3, [r7, #32]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d020      	beq.n	800ecea <snmp_get_node_instance_from_oid+0x82>
 800eca8:	6a3b      	ldr	r3, [r7, #32]
 800ecaa:	781b      	ldrb	r3, [r3, #0]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d01c      	beq.n	800ecea <snmp_get_node_instance_from_oid+0x82>
      /* get instance */
      const struct snmp_leaf_node* leaf_node = (const struct snmp_leaf_node*)(const void*)mn;
 800ecb0:	6a3b      	ldr	r3, [r7, #32]
 800ecb2:	61bb      	str	r3, [r7, #24]

      node_instance->node = mn;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	6a3a      	ldr	r2, [r7, #32]
 800ecb8:	601a      	str	r2, [r3, #0]
      snmp_oid_assign(&node_instance->instance_oid, oid + (oid_len - oid_instance_len), oid_instance_len);
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	1d18      	adds	r0, r3, #4
 800ecbe:	7afb      	ldrb	r3, [r7, #11]
 800ecc0:	7dfa      	ldrb	r2, [r7, #23]
 800ecc2:	1a9b      	subs	r3, r3, r2
 800ecc4:	009b      	lsls	r3, r3, #2
 800ecc6:	68fa      	ldr	r2, [r7, #12]
 800ecc8:	4413      	add	r3, r2
 800ecca:	7dfa      	ldrb	r2, [r7, #23]
 800eccc:	4619      	mov	r1, r3
 800ecce:	f7ff fd83 	bl	800e7d8 <snmp_oid_assign>

      result = leaf_node->get_instance(
 800ecd2:	69bb      	ldr	r3, [r7, #24]
 800ecd4:	689b      	ldr	r3, [r3, #8]
 800ecd6:	7dfa      	ldrb	r2, [r7, #23]
 800ecd8:	7af9      	ldrb	r1, [r7, #11]
 800ecda:	1a8a      	subs	r2, r1, r2
 800ecdc:	b2d1      	uxtb	r1, r2
 800ecde:	687a      	ldr	r2, [r7, #4]
 800ece0:	68f8      	ldr	r0, [r7, #12]
 800ece2:	4798      	blx	r3
 800ece4:	4603      	mov	r3, r0
 800ece6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
#endif
    }
  }

  return result;
 800ecea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ecee:	4618      	mov	r0, r3
 800ecf0:	3728      	adds	r7, #40	@ 0x28
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	bd80      	pop	{r7, pc}

0800ecf6 <snmp_get_next_node_instance_from_oid>:

u8_t
snmp_get_next_node_instance_from_oid(const u32_t *oid, u8_t oid_len, snmp_validate_node_instance_method validate_node_instance_method, void* validate_node_instance_arg, struct snmp_obj_id* node_oid, struct snmp_node_instance* node_instance)
{
 800ecf6:	b580      	push	{r7, lr}
 800ecf8:	b08c      	sub	sp, #48	@ 0x30
 800ecfa:	af00      	add	r7, sp, #0
 800ecfc:	60f8      	str	r0, [r7, #12]
 800ecfe:	607a      	str	r2, [r7, #4]
 800ed00:	603b      	str	r3, [r7, #0]
 800ed02:	460b      	mov	r3, r1
 800ed04:	72fb      	strb	r3, [r7, #11]
  const struct snmp_mib      *mib;
  const struct snmp_node *mn = NULL;
 800ed06:	2300      	movs	r3, #0
 800ed08:	62bb      	str	r3, [r7, #40]	@ 0x28
  const u32_t* start_oid     = NULL;
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	627b      	str	r3, [r7, #36]	@ 0x24
  u8_t         start_oid_len = 0;
 800ed0e:	2300      	movs	r3, #0
 800ed10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* resolve target MIB from passed OID */
  mib = snmp_get_mib_from_oid(oid, oid_len);
 800ed14:	7afb      	ldrb	r3, [r7, #11]
 800ed16:	4619      	mov	r1, r3
 800ed18:	68f8      	ldr	r0, [r7, #12]
 800ed1a:	f7ff fe4f 	bl	800e9bc <snmp_get_mib_from_oid>
 800ed1e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (mib == NULL) {
 800ed20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d111      	bne.n	800ed4a <snmp_get_next_node_instance_from_oid+0x54>
    /* passed OID does not reference any known MIB, start at the next closest MIB */
    mib = snmp_get_next_mib(oid, oid_len);
 800ed26:	7afb      	ldrb	r3, [r7, #11]
 800ed28:	4619      	mov	r1, r3
 800ed2a:	68f8      	ldr	r0, [r7, #12]
 800ed2c:	f7ff feea 	bl	800eb04 <snmp_get_next_mib>
 800ed30:	62f8      	str	r0, [r7, #44]	@ 0x2c

    if (mib != NULL) {
 800ed32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	f000 8123 	beq.w	800ef80 <snmp_get_next_node_instance_from_oid+0x28a>
      start_oid     = mib->base_oid;
 800ed3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	627b      	str	r3, [r7, #36]	@ 0x24
      start_oid_len = mib->base_oid_len;
 800ed40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed42:	791b      	ldrb	r3, [r3, #4]
 800ed44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ed48:	e11a      	b.n	800ef80 <snmp_get_next_node_instance_from_oid+0x28a>
    }
  } else {
    start_oid     = oid;
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	627b      	str	r3, [r7, #36]	@ 0x24
    start_oid_len = oid_len;
 800ed4e:	7afb      	ldrb	r3, [r7, #11]
 800ed50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  }

  /* resolve target node from MIB, skip to next MIB if no suitable node is found in current MIB */
  while ((mib != NULL) && (mn == NULL)) {
 800ed54:	e114      	b.n	800ef80 <snmp_get_next_node_instance_from_oid+0x28a>
    u8_t oid_instance_len;

    /* check if OID directly references a node inside current MIB, in this case we have to ask this node for the next instance */
    mn = snmp_mib_tree_resolve_exact(mib, start_oid, start_oid_len, &oid_instance_len);
 800ed56:	f107 0317 	add.w	r3, r7, #23
 800ed5a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800ed5e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ed60:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ed62:	f000 f91e 	bl	800efa2 <snmp_mib_tree_resolve_exact>
 800ed66:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (mn != NULL) {
 800ed68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d017      	beq.n	800ed9e <snmp_get_next_node_instance_from_oid+0xa8>
      snmp_oid_assign(node_oid, start_oid, start_oid_len - oid_instance_len); /* set oid to node */
 800ed6e:	7dfb      	ldrb	r3, [r7, #23]
 800ed70:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800ed74:	1ad3      	subs	r3, r2, r3
 800ed76:	b2db      	uxtb	r3, r3
 800ed78:	461a      	mov	r2, r3
 800ed7a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ed7c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ed7e:	f7ff fd2b 	bl	800e7d8 <snmp_oid_assign>
      snmp_oid_assign(&node_instance->instance_oid, start_oid + (start_oid_len - oid_instance_len), oid_instance_len); /* set (relative) instance oid */
 800ed82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed84:	1d18      	adds	r0, r3, #4
 800ed86:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ed8a:	7dfa      	ldrb	r2, [r7, #23]
 800ed8c:	1a9b      	subs	r3, r3, r2
 800ed8e:	009b      	lsls	r3, r3, #2
 800ed90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ed92:	4413      	add	r3, r2
 800ed94:	7dfa      	ldrb	r2, [r7, #23]
 800ed96:	4619      	mov	r1, r3
 800ed98:	f7ff fd1e 	bl	800e7d8 <snmp_oid_assign>
 800ed9c:	e00a      	b.n	800edb4 <snmp_get_next_node_instance_from_oid+0xbe>
    } else {
      /* OID does not reference a node, search for the next closest node inside MIB; set instance_oid.len to zero because we want the first instance of this node */
      mn = snmp_mib_tree_resolve_next(mib, start_oid, start_oid_len, node_oid);
 800ed9e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800eda2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eda4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800eda6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eda8:	f000 f94d 	bl	800f046 <snmp_mib_tree_resolve_next>
 800edac:	62b8      	str	r0, [r7, #40]	@ 0x28
      node_instance->instance_oid.len = 0;
 800edae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800edb0:	2200      	movs	r2, #0
 800edb2:	711a      	strb	r2, [r3, #4]
    }

    /* validate the node; if the node has no further instance or the returned instance is invalid, search for the next in MIB and validate again */
    node_instance->node = mn;
 800edb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800edb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800edb8:	601a      	str	r2, [r3, #0]
    while (mn != NULL) {
 800edba:	e073      	b.n	800eea4 <snmp_get_next_node_instance_from_oid+0x1ae>
       u8_t result;

      /* clear fields which may have values from previous loops */
      node_instance->asn1_type        = 0;
 800edbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800edbe:	2200      	movs	r2, #0
 800edc0:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
      node_instance->access           = SNMP_NODE_INSTANCE_NOT_ACCESSIBLE;
 800edc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800edc6:	2200      	movs	r2, #0
 800edc8:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
      node_instance->get_value        = NULL;
 800edcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800edce:	2200      	movs	r2, #0
 800edd0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
      node_instance->set_test         = NULL;
 800edd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800edd6:	2200      	movs	r2, #0
 800edd8:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
      node_instance->set_value        = NULL;
 800eddc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800edde:	2200      	movs	r2, #0
 800ede0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
      node_instance->release_instance = NULL;
 800ede4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ede6:	2200      	movs	r2, #0
 800ede8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
      node_instance->reference.ptr    = NULL;
 800edec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800edee:	2200      	movs	r2, #0
 800edf0:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
      node_instance->reference_len    = 0;
 800edf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800edf6:	2200      	movs	r2, #0
 800edf8:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8

      result = ((const struct snmp_leaf_node*)(const void*)mn)->get_next_instance(
 800edfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edfe:	68db      	ldr	r3, [r3, #12]
        node_oid->id,
 800ee00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ee02:	1d10      	adds	r0, r2, #4
      result = ((const struct snmp_leaf_node*)(const void*)mn)->get_next_instance(
 800ee04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ee06:	7811      	ldrb	r1, [r2, #0]
 800ee08:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ee0a:	4798      	blx	r3
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        node_oid->len,
        node_instance);

      if (result == SNMP_ERR_NOERROR) {
 800ee12:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d11e      	bne.n	800ee58 <snmp_get_next_node_instance_from_oid+0x162>
          LWIP_DEBUGF(SNMP_DEBUG, ("SNMP inconsistent access: node is writable but no set_value function is specified\n"));
        }
#endif

        /* validate node because the node may be not accessible for example (but let the caller decide what is valid */
        if ((validate_node_instance_method == NULL) ||
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d006      	beq.n	800ee2e <snmp_get_next_node_instance_from_oid+0x138>
            (validate_node_instance_method(node_instance, validate_node_instance_arg) == SNMP_ERR_NOERROR)) {
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	6839      	ldr	r1, [r7, #0]
 800ee24:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ee26:	4798      	blx	r3
 800ee28:	4603      	mov	r3, r0
        if ((validate_node_instance_method == NULL) ||
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d109      	bne.n	800ee42 <snmp_get_next_node_instance_from_oid+0x14c>
          /* node_oid "returns" the full result OID (including the instance part) */
          snmp_oid_append(node_oid, node_instance->instance_oid.id, node_instance->instance_oid.len);
 800ee2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee30:	f103 0108 	add.w	r1, r3, #8
 800ee34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee36:	791b      	ldrb	r3, [r3, #4]
 800ee38:	461a      	mov	r2, r3
 800ee3a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ee3c:	f7ff fcf6 	bl	800e82c <snmp_oid_append>
          break;
 800ee40:	e033      	b.n	800eeaa <snmp_get_next_node_instance_from_oid+0x1b4>
        }

        if (node_instance->release_instance != NULL) {
 800ee42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d02b      	beq.n	800eea4 <snmp_get_next_node_instance_from_oid+0x1ae>
          node_instance->release_instance(node_instance);
 800ee4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ee52:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ee54:	4798      	blx	r3
 800ee56:	e025      	b.n	800eea4 <snmp_get_next_node_instance_from_oid+0x1ae>
        the instance itself is not valid, ask for next instance from same node.
        we don't have to change any variables because node_instance->instance_oid is used as input (starting point)
        as well as output (resulting next OID), so we have to simply call get_next_instance method again
        */
      } else {
        if (node_instance->release_instance != NULL) {
 800ee58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d004      	beq.n	800ee6c <snmp_get_next_node_instance_from_oid+0x176>
          node_instance->release_instance(node_instance);
 800ee62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ee68:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ee6a:	4798      	blx	r3
        }

        /* the node has no further instance, skip to next node */
        mn = snmp_mib_tree_resolve_next(mib, node_oid->id, node_oid->len, &node_instance->instance_oid); /* misuse node_instance->instance_oid as tmp buffer */
 800ee6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee6e:	1d19      	adds	r1, r3, #4
 800ee70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee72:	781a      	ldrb	r2, [r3, #0]
 800ee74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee76:	3304      	adds	r3, #4
 800ee78:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ee7a:	f000 f8e4 	bl	800f046 <snmp_mib_tree_resolve_next>
 800ee7e:	62b8      	str	r0, [r7, #40]	@ 0x28
        if (mn != NULL) {
 800ee80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d00e      	beq.n	800eea4 <snmp_get_next_node_instance_from_oid+0x1ae>
          /* prepare for next loop */
          snmp_oid_assign(node_oid, node_instance->instance_oid.id, node_instance->instance_oid.len);
 800ee86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee88:	f103 0108 	add.w	r1, r3, #8
 800ee8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee8e:	791b      	ldrb	r3, [r3, #4]
 800ee90:	461a      	mov	r2, r3
 800ee92:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ee94:	f7ff fca0 	bl	800e7d8 <snmp_oid_assign>
          node_instance->instance_oid.len = 0;
 800ee98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	711a      	strb	r2, [r3, #4]
          node_instance->node = mn;
 800ee9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eea0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eea2:	601a      	str	r2, [r3, #0]
    while (mn != NULL) {
 800eea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d188      	bne.n	800edbc <snmp_get_next_node_instance_from_oid+0xc6>
        }
      }
    }

    if (mn != NULL) {
 800eeaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d022      	beq.n	800eef6 <snmp_get_next_node_instance_from_oid+0x200>
      this is possible because MIB's may be located anywhere in the global tree, that means also in 
      the subtree of another MIB (e.g. if searched OID is .2 and resulting OID is .4, then another
      MIB having .3 as root node may exist)
      */
      const struct snmp_mib *intermediate_mib;
      intermediate_mib = snmp_get_mib_between(start_oid, start_oid_len, node_oid->id, node_oid->len);
 800eeb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eeb2:	1d1a      	adds	r2, r3, #4
 800eeb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eeb6:	781b      	ldrb	r3, [r3, #0]
 800eeb8:	f897 1023 	ldrb.w	r1, [r7, #35]	@ 0x23
 800eebc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800eebe:	f7ff fe91 	bl	800ebe4 <snmp_get_mib_between>
 800eec2:	61b8      	str	r0, [r7, #24]

      if (intermediate_mib != NULL) {
 800eec4:	69bb      	ldr	r3, [r7, #24]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d05a      	beq.n	800ef80 <snmp_get_next_node_instance_from_oid+0x28a>
        /* search for first node inside intermediate mib in next loop */
        if (node_instance->release_instance != NULL) {
 800eeca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d004      	beq.n	800eede <snmp_get_next_node_instance_from_oid+0x1e8>
          node_instance->release_instance(node_instance);
 800eed4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800eeda:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800eedc:	4798      	blx	r3
        }

        mn            = NULL;
 800eede:	2300      	movs	r3, #0
 800eee0:	62bb      	str	r3, [r7, #40]	@ 0x28
        mib           = intermediate_mib;
 800eee2:	69bb      	ldr	r3, [r7, #24]
 800eee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        start_oid     = mib->base_oid;
 800eee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	627b      	str	r3, [r7, #36]	@ 0x24
        start_oid_len = mib->base_oid_len;
 800eeec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eeee:	791b      	ldrb	r3, [r3, #4]
 800eef0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800eef4:	e044      	b.n	800ef80 <snmp_get_next_node_instance_from_oid+0x28a>
      1. search for inner MIB's (whose root is located inside tree of current MIB)
      2. search for surrouding MIB's (where the current MIB is the inner MIB) and continue there if any
      3. take the next closest MIB (not being related to the current MIB)
      */
      const struct snmp_mib *next_mib;
      next_mib = snmp_get_next_mib(start_oid, start_oid_len); /* returns MIB's related to point 1 and 3 */
 800eef6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800eefa:	4619      	mov	r1, r3
 800eefc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800eefe:	f7ff fe01 	bl	800eb04 <snmp_get_next_mib>
 800ef02:	61f8      	str	r0, [r7, #28]

      /* is the found MIB an inner MIB? (point 1) */
      if ((next_mib != NULL) && (next_mib->base_oid_len > mib->base_oid_len) &&
 800ef04:	69fb      	ldr	r3, [r7, #28]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d01c      	beq.n	800ef44 <snmp_get_next_node_instance_from_oid+0x24e>
 800ef0a:	69fb      	ldr	r3, [r7, #28]
 800ef0c:	791a      	ldrb	r2, [r3, #4]
 800ef0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef10:	791b      	ldrb	r3, [r3, #4]
 800ef12:	429a      	cmp	r2, r3
 800ef14:	d916      	bls.n	800ef44 <snmp_get_next_node_instance_from_oid+0x24e>
          (snmp_oid_compare(next_mib->base_oid, mib->base_oid_len, mib->base_oid, mib->base_oid_len) == 0)) {
 800ef16:	69fb      	ldr	r3, [r7, #28]
 800ef18:	6818      	ldr	r0, [r3, #0]
 800ef1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef1c:	7919      	ldrb	r1, [r3, #4]
 800ef1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef20:	681a      	ldr	r2, [r3, #0]
 800ef22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef24:	791b      	ldrb	r3, [r3, #4]
 800ef26:	f7ff fcb7 	bl	800e898 <snmp_oid_compare>
 800ef2a:	4603      	mov	r3, r0
      if ((next_mib != NULL) && (next_mib->base_oid_len > mib->base_oid_len) &&
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d109      	bne.n	800ef44 <snmp_get_next_node_instance_from_oid+0x24e>
        /* yes it is -> continue at inner MIB */
        mib = next_mib;
 800ef30:	69fb      	ldr	r3, [r7, #28]
 800ef32:	62fb      	str	r3, [r7, #44]	@ 0x2c
        start_oid     = mib->base_oid;
 800ef34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	627b      	str	r3, [r7, #36]	@ 0x24
        start_oid_len = mib->base_oid_len;
 800ef3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef3c:	791b      	ldrb	r3, [r3, #4]
 800ef3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ef42:	e01d      	b.n	800ef80 <snmp_get_next_node_instance_from_oid+0x28a>
      } else {
        /* check if there is a surrounding mib where to continue (point 2) (only possible if OID length > 1) */
        if (mib->base_oid_len > 1) {
 800ef44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef46:	791b      	ldrb	r3, [r3, #4]
 800ef48:	2b01      	cmp	r3, #1
 800ef4a:	d919      	bls.n	800ef80 <snmp_get_next_node_instance_from_oid+0x28a>
          mib = snmp_get_mib_from_oid(mib->base_oid, mib->base_oid_len - 1);
 800ef4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef4e:	681a      	ldr	r2, [r3, #0]
 800ef50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef52:	791b      	ldrb	r3, [r3, #4]
 800ef54:	3b01      	subs	r3, #1
 800ef56:	b2db      	uxtb	r3, r3
 800ef58:	4619      	mov	r1, r3
 800ef5a:	4610      	mov	r0, r2
 800ef5c:	f7ff fd2e 	bl	800e9bc <snmp_get_mib_from_oid>
 800ef60:	62f8      	str	r0, [r7, #44]	@ 0x2c

          if (mib == NULL) {
 800ef62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d10b      	bne.n	800ef80 <snmp_get_next_node_instance_from_oid+0x28a>
            /* no surrounding mib, use next mib encountered above (point 3) */
            mib = next_mib;
 800ef68:	69fb      	ldr	r3, [r7, #28]
 800ef6a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (mib != NULL) {
 800ef6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d006      	beq.n	800ef80 <snmp_get_next_node_instance_from_oid+0x28a>
              start_oid     = mib->base_oid;
 800ef72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	627b      	str	r3, [r7, #36]	@ 0x24
              start_oid_len = mib->base_oid_len;
 800ef78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef7a:	791b      	ldrb	r3, [r3, #4]
 800ef7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  while ((mib != NULL) && (mn == NULL)) {
 800ef80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d003      	beq.n	800ef8e <snmp_get_next_node_instance_from_oid+0x298>
 800ef86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	f43f aee4 	beq.w	800ed56 <snmp_get_next_node_instance_from_oid+0x60>
        }
      }
    }
  }

  if (mib == NULL) {
 800ef8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d101      	bne.n	800ef98 <snmp_get_next_node_instance_from_oid+0x2a2>
    /* loop is only left when mib == null (error) or mib_node != NULL (success) */
    return SNMP_ERR_ENDOFMIBVIEW;
 800ef94:	23f2      	movs	r3, #242	@ 0xf2
 800ef96:	e000      	b.n	800ef9a <snmp_get_next_node_instance_from_oid+0x2a4>
  }

  return SNMP_ERR_NOERROR;
 800ef98:	2300      	movs	r3, #0
}
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	3730      	adds	r7, #48	@ 0x30
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	bd80      	pop	{r7, pc}

0800efa2 <snmp_mib_tree_resolve_exact>:
 * Searches tree for the supplied object identifier.
 *
 */
const struct snmp_node *
snmp_mib_tree_resolve_exact(const struct snmp_mib *mib, const u32_t *oid, u8_t oid_len, u8_t* oid_instance_len)
{
 800efa2:	b480      	push	{r7}
 800efa4:	b089      	sub	sp, #36	@ 0x24
 800efa6:	af00      	add	r7, sp, #0
 800efa8:	60f8      	str	r0, [r7, #12]
 800efaa:	60b9      	str	r1, [r7, #8]
 800efac:	603b      	str	r3, [r7, #0]
 800efae:	4613      	mov	r3, r2
 800efb0:	71fb      	strb	r3, [r7, #7]
  const struct snmp_node* const* node = &mib->root_node;
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	3308      	adds	r3, #8
 800efb6:	61fb      	str	r3, [r7, #28]
  u8_t oid_offset = mib->base_oid_len;
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	791b      	ldrb	r3, [r3, #4]
 800efbc:	76fb      	strb	r3, [r7, #27]

  while ((oid_offset < oid_len) && ((*node)->node_type == SNMP_NODE_TREE)) {
 800efbe:	e025      	b.n	800f00c <snmp_mib_tree_resolve_exact+0x6a>
    /* search for matching sub node */
    u32_t subnode_oid = *(oid + oid_offset);
 800efc0:	7efb      	ldrb	r3, [r7, #27]
 800efc2:	009b      	lsls	r3, r3, #2
 800efc4:	68ba      	ldr	r2, [r7, #8]
 800efc6:	4413      	add	r3, r2
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	613b      	str	r3, [r7, #16]

    u32_t i = (*(const struct snmp_tree_node* const*)node)->subnode_count;
 800efcc:	69fb      	ldr	r3, [r7, #28]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	891b      	ldrh	r3, [r3, #8]
 800efd2:	617b      	str	r3, [r7, #20]
    node    = (*(const struct snmp_tree_node* const*)node)->subnodes;
 800efd4:	69fb      	ldr	r3, [r7, #28]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	68db      	ldr	r3, [r3, #12]
 800efda:	61fb      	str	r3, [r7, #28]
    while ((i > 0) && ((*node)->oid != subnode_oid)) {
 800efdc:	e005      	b.n	800efea <snmp_mib_tree_resolve_exact+0x48>
      node++;
 800efde:	69fb      	ldr	r3, [r7, #28]
 800efe0:	3304      	adds	r3, #4
 800efe2:	61fb      	str	r3, [r7, #28]
      i--;
 800efe4:	697b      	ldr	r3, [r7, #20]
 800efe6:	3b01      	subs	r3, #1
 800efe8:	617b      	str	r3, [r7, #20]
    while ((i > 0) && ((*node)->oid != subnode_oid)) {
 800efea:	697b      	ldr	r3, [r7, #20]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d005      	beq.n	800effc <snmp_mib_tree_resolve_exact+0x5a>
 800eff0:	69fb      	ldr	r3, [r7, #28]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	685b      	ldr	r3, [r3, #4]
 800eff6:	693a      	ldr	r2, [r7, #16]
 800eff8:	429a      	cmp	r2, r3
 800effa:	d1f0      	bne.n	800efde <snmp_mib_tree_resolve_exact+0x3c>
    }

    if (i == 0) {
 800effc:	697b      	ldr	r3, [r7, #20]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d101      	bne.n	800f006 <snmp_mib_tree_resolve_exact+0x64>
      /* no matching subnode found */
      return NULL;
 800f002:	2300      	movs	r3, #0
 800f004:	e01a      	b.n	800f03c <snmp_mib_tree_resolve_exact+0x9a>
    }

    oid_offset++;
 800f006:	7efb      	ldrb	r3, [r7, #27]
 800f008:	3301      	adds	r3, #1
 800f00a:	76fb      	strb	r3, [r7, #27]
  while ((oid_offset < oid_len) && ((*node)->node_type == SNMP_NODE_TREE)) {
 800f00c:	7efa      	ldrb	r2, [r7, #27]
 800f00e:	79fb      	ldrb	r3, [r7, #7]
 800f010:	429a      	cmp	r2, r3
 800f012:	d204      	bcs.n	800f01e <snmp_mib_tree_resolve_exact+0x7c>
 800f014:	69fb      	ldr	r3, [r7, #28]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	781b      	ldrb	r3, [r3, #0]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d0d0      	beq.n	800efc0 <snmp_mib_tree_resolve_exact+0x1e>
  }

  if ((*node)->node_type != SNMP_NODE_TREE) {
 800f01e:	69fb      	ldr	r3, [r7, #28]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	781b      	ldrb	r3, [r3, #0]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d008      	beq.n	800f03a <snmp_mib_tree_resolve_exact+0x98>
    /* we found a leaf node */
    *oid_instance_len = oid_len - oid_offset;
 800f028:	79fa      	ldrb	r2, [r7, #7]
 800f02a:	7efb      	ldrb	r3, [r7, #27]
 800f02c:	1ad3      	subs	r3, r2, r3
 800f02e:	b2da      	uxtb	r2, r3
 800f030:	683b      	ldr	r3, [r7, #0]
 800f032:	701a      	strb	r2, [r3, #0]
    return (*node);
 800f034:	69fb      	ldr	r3, [r7, #28]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	e000      	b.n	800f03c <snmp_mib_tree_resolve_exact+0x9a>
  }

  return NULL;
 800f03a:	2300      	movs	r3, #0
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	3724      	adds	r7, #36	@ 0x24
 800f040:	46bd      	mov	sp, r7
 800f042:	bc80      	pop	{r7}
 800f044:	4770      	bx	lr

0800f046 <snmp_mib_tree_resolve_next>:

const struct snmp_node*
snmp_mib_tree_resolve_next(const struct snmp_mib *mib, const u32_t *oid, u8_t oid_len, struct snmp_obj_id* oidret)
{
 800f046:	b580      	push	{r7, lr}
 800f048:	b0be      	sub	sp, #248	@ 0xf8
 800f04a:	af00      	add	r7, sp, #0
 800f04c:	60f8      	str	r0, [r7, #12]
 800f04e:	60b9      	str	r1, [r7, #8]
 800f050:	603b      	str	r3, [r7, #0]
 800f052:	4613      	mov	r3, r2
 800f054:	71fb      	strb	r3, [r7, #7]
  u8_t  oid_offset = mib->base_oid_len;
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	791b      	ldrb	r3, [r3, #4]
 800f05a:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
  const struct snmp_node* const* node;
  const struct snmp_tree_node* node_stack[SNMP_MAX_OBJ_ID_LEN];
  s32_t nsi = 0; /* NodeStackIndex */
 800f05e:	2300      	movs	r3, #0
 800f060:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  u32_t subnode_oid;

  if (mib->root_node->node_type != SNMP_NODE_TREE) {
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	689b      	ldr	r3, [r3, #8]
 800f068:	781b      	ldrb	r3, [r3, #0]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d001      	beq.n	800f072 <snmp_mib_tree_resolve_next+0x2c>
    /* a next operation on a mib with only a leaf node will always return NULL because there is no other node */
    return NULL;
 800f06e:	2300      	movs	r3, #0
 800f070:	e131      	b.n	800f2d6 <snmp_mib_tree_resolve_next+0x290>
  }

  /* first build node stack related to passed oid (as far as possible), then go backwards to determine the next node */
  node_stack[nsi] = (const struct snmp_tree_node*)(const void*)mib->root_node;
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	689a      	ldr	r2, [r3, #8]
 800f076:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f07a:	009b      	lsls	r3, r3, #2
 800f07c:	33f8      	adds	r3, #248	@ 0xf8
 800f07e:	443b      	add	r3, r7
 800f080:	f843 2ce4 	str.w	r2, [r3, #-228]
  while (oid_offset < oid_len) {
 800f084:	e050      	b.n	800f128 <snmp_mib_tree_resolve_next+0xe2>
    /* search for matching sub node */
    u32_t i = node_stack[nsi]->subnode_count;
 800f086:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f08a:	009b      	lsls	r3, r3, #2
 800f08c:	33f8      	adds	r3, #248	@ 0xf8
 800f08e:	443b      	add	r3, r7
 800f090:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 800f094:	891b      	ldrh	r3, [r3, #8]
 800f096:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    node    = node_stack[nsi]->subnodes;
 800f09a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f09e:	009b      	lsls	r3, r3, #2
 800f0a0:	33f8      	adds	r3, #248	@ 0xf8
 800f0a2:	443b      	add	r3, r7
 800f0a4:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 800f0a8:	68db      	ldr	r3, [r3, #12]
 800f0aa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

    subnode_oid = *(oid + oid_offset);
 800f0ae:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 800f0b2:	009b      	lsls	r3, r3, #2
 800f0b4:	68ba      	ldr	r2, [r7, #8]
 800f0b6:	4413      	add	r3, r2
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

    while ((i > 0) && ((*node)->oid != subnode_oid)) {
 800f0be:	e009      	b.n	800f0d4 <snmp_mib_tree_resolve_next+0x8e>
      node++;
 800f0c0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800f0c4:	3304      	adds	r3, #4
 800f0c6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
      i--;
 800f0ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f0ce:	3b01      	subs	r3, #1
 800f0d0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    while ((i > 0) && ((*node)->oid != subnode_oid)) {
 800f0d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d007      	beq.n	800f0ec <snmp_mib_tree_resolve_next+0xa6>
 800f0dc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	685b      	ldr	r3, [r3, #4]
 800f0e4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800f0e8:	429a      	cmp	r2, r3
 800f0ea:	d1e9      	bne.n	800f0c0 <snmp_mib_tree_resolve_next+0x7a>
    }

    if ((i == 0) || ((*node)->node_type != SNMP_NODE_TREE)) {
 800f0ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d01e      	beq.n	800f132 <snmp_mib_tree_resolve_next+0xec>
 800f0f4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	781b      	ldrb	r3, [r3, #0]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d118      	bne.n	800f132 <snmp_mib_tree_resolve_next+0xec>
      /* no (matching) tree-subnode found */
      break;
    }
    nsi++;
 800f100:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f104:	3301      	adds	r3, #1
 800f106:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    node_stack[nsi] = (const struct snmp_tree_node*)(const void*)(*node);
 800f10a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800f10e:	681a      	ldr	r2, [r3, #0]
 800f110:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f114:	009b      	lsls	r3, r3, #2
 800f116:	33f8      	adds	r3, #248	@ 0xf8
 800f118:	443b      	add	r3, r7
 800f11a:	f843 2ce4 	str.w	r2, [r3, #-228]

    oid_offset++;
 800f11e:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 800f122:	3301      	adds	r3, #1
 800f124:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
  while (oid_offset < oid_len) {
 800f128:	f897 20f7 	ldrb.w	r2, [r7, #247]	@ 0xf7
 800f12c:	79fb      	ldrb	r3, [r7, #7]
 800f12e:	429a      	cmp	r2, r3
 800f130:	d3a9      	bcc.n	800f086 <snmp_mib_tree_resolve_next+0x40>
  }


  if (oid_offset >= oid_len) {
 800f132:	f897 20f7 	ldrb.w	r2, [r7, #247]	@ 0xf7
 800f136:	79fb      	ldrb	r3, [r7, #7]
 800f138:	429a      	cmp	r2, r3
 800f13a:	d303      	bcc.n	800f144 <snmp_mib_tree_resolve_next+0xfe>
    /* passed oid references a tree node -> return first useable sub node of it */
    subnode_oid = 0;
 800f13c:	2300      	movs	r3, #0
 800f13e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800f142:	e0c2      	b.n	800f2ca <snmp_mib_tree_resolve_next+0x284>
  } else {
    subnode_oid = *(oid + oid_offset) + 1;
 800f144:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 800f148:	009b      	lsls	r3, r3, #2
 800f14a:	68ba      	ldr	r2, [r7, #8]
 800f14c:	4413      	add	r3, r2
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	3301      	adds	r3, #1
 800f152:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  }

  while (nsi >= 0) {
 800f156:	e0b8      	b.n	800f2ca <snmp_mib_tree_resolve_next+0x284>
    const struct snmp_node* subnode = NULL;
 800f158:	2300      	movs	r3, #0
 800f15a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

    /* find next node on current level */
    s32_t i        = node_stack[nsi]->subnode_count;
 800f15e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f162:	009b      	lsls	r3, r3, #2
 800f164:	33f8      	adds	r3, #248	@ 0xf8
 800f166:	443b      	add	r3, r7
 800f168:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 800f16c:	891b      	ldrh	r3, [r3, #8]
 800f16e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    node           = node_stack[nsi]->subnodes;
 800f172:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f176:	009b      	lsls	r3, r3, #2
 800f178:	33f8      	adds	r3, #248	@ 0xf8
 800f17a:	443b      	add	r3, r7
 800f17c:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 800f180:	68db      	ldr	r3, [r3, #12]
 800f182:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    while (i > 0) {
 800f186:	e031      	b.n	800f1ec <snmp_mib_tree_resolve_next+0x1a6>
      if ((*node)->oid == subnode_oid) {
 800f188:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	685b      	ldr	r3, [r3, #4]
 800f190:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800f194:	429a      	cmp	r2, r3
 800f196:	d105      	bne.n	800f1a4 <snmp_mib_tree_resolve_next+0x15e>
        subnode = *node;
 800f198:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
        break;
 800f1a2:	e027      	b.n	800f1f4 <snmp_mib_tree_resolve_next+0x1ae>
      } else if (((*node)->oid > subnode_oid) && ((subnode == NULL) || ((*node)->oid < subnode->oid))) {
 800f1a4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	685b      	ldr	r3, [r3, #4]
 800f1ac:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800f1b0:	429a      	cmp	r2, r3
 800f1b2:	d211      	bcs.n	800f1d8 <snmp_mib_tree_resolve_next+0x192>
 800f1b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d008      	beq.n	800f1ce <snmp_mib_tree_resolve_next+0x188>
 800f1bc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	685a      	ldr	r2, [r3, #4]
 800f1c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f1c8:	685b      	ldr	r3, [r3, #4]
 800f1ca:	429a      	cmp	r2, r3
 800f1cc:	d204      	bcs.n	800f1d8 <snmp_mib_tree_resolve_next+0x192>
        subnode = *node;
 800f1ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      }

      node++;
 800f1d8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800f1dc:	3304      	adds	r3, #4
 800f1de:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
      i--;
 800f1e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f1e6:	3b01      	subs	r3, #1
 800f1e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    while (i > 0) {
 800f1ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	dcc9      	bgt.n	800f188 <snmp_mib_tree_resolve_next+0x142>
    }

    if (subnode == NULL) {
 800f1f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d110      	bne.n	800f21e <snmp_mib_tree_resolve_next+0x1d8>
      /* no further node found on this level, go one level up and start searching with index of current node*/
      subnode_oid = node_stack[nsi]->node.oid + 1;
 800f1fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f200:	009b      	lsls	r3, r3, #2
 800f202:	33f8      	adds	r3, #248	@ 0xf8
 800f204:	443b      	add	r3, r7
 800f206:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 800f20a:	685b      	ldr	r3, [r3, #4]
 800f20c:	3301      	adds	r3, #1
 800f20e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
      nsi--;
 800f212:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f216:	3b01      	subs	r3, #1
 800f218:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800f21c:	e055      	b.n	800f2ca <snmp_mib_tree_resolve_next+0x284>
    } else {
      if (subnode->node_type == SNMP_NODE_TREE) {
 800f21e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f222:	781b      	ldrb	r3, [r3, #0]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d111      	bne.n	800f24c <snmp_mib_tree_resolve_next+0x206>
        /* next is a tree node, go into it and start searching */
        nsi++;
 800f228:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f22c:	3301      	adds	r3, #1
 800f22e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
        node_stack[nsi] = (const struct snmp_tree_node*)(const void*)subnode;
 800f232:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f236:	009b      	lsls	r3, r3, #2
 800f238:	33f8      	adds	r3, #248	@ 0xf8
 800f23a:	443b      	add	r3, r7
 800f23c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800f240:	f843 2ce4 	str.w	r2, [r3, #-228]
        subnode_oid = 0;
 800f244:	2300      	movs	r3, #0
 800f246:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800f24a:	e03e      	b.n	800f2ca <snmp_mib_tree_resolve_next+0x284>
      } else {
        /* we found a leaf node -> fill oidret and return it */
        snmp_oid_assign(oidret, mib->base_oid, mib->base_oid_len);
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	6819      	ldr	r1, [r3, #0]
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	791b      	ldrb	r3, [r3, #4]
 800f254:	461a      	mov	r2, r3
 800f256:	6838      	ldr	r0, [r7, #0]
 800f258:	f7ff fabe 	bl	800e7d8 <snmp_oid_assign>
        i = 1;
 800f25c:	2301      	movs	r3, #1
 800f25e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        while (i <= nsi) {
 800f262:	e019      	b.n	800f298 <snmp_mib_tree_resolve_next+0x252>
          oidret->id[oidret->len] = node_stack[i]->node.oid;
 800f264:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f268:	009b      	lsls	r3, r3, #2
 800f26a:	33f8      	adds	r3, #248	@ 0xf8
 800f26c:	443b      	add	r3, r7
 800f26e:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 800f272:	683a      	ldr	r2, [r7, #0]
 800f274:	7812      	ldrb	r2, [r2, #0]
 800f276:	4610      	mov	r0, r2
 800f278:	685a      	ldr	r2, [r3, #4]
 800f27a:	6839      	ldr	r1, [r7, #0]
 800f27c:	0083      	lsls	r3, r0, #2
 800f27e:	440b      	add	r3, r1
 800f280:	605a      	str	r2, [r3, #4]
          oidret->len++;
 800f282:	683b      	ldr	r3, [r7, #0]
 800f284:	781b      	ldrb	r3, [r3, #0]
 800f286:	3301      	adds	r3, #1
 800f288:	b2da      	uxtb	r2, r3
 800f28a:	683b      	ldr	r3, [r7, #0]
 800f28c:	701a      	strb	r2, [r3, #0]
          i++;
 800f28e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f292:	3301      	adds	r3, #1
 800f294:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        while (i <= nsi) {
 800f298:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f29c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f2a0:	429a      	cmp	r2, r3
 800f2a2:	dddf      	ble.n	800f264 <snmp_mib_tree_resolve_next+0x21e>
        }

        oidret->id[oidret->len] = subnode->oid;
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	781b      	ldrb	r3, [r3, #0]
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f2ae:	685a      	ldr	r2, [r3, #4]
 800f2b0:	6839      	ldr	r1, [r7, #0]
 800f2b2:	0083      	lsls	r3, r0, #2
 800f2b4:	440b      	add	r3, r1
 800f2b6:	605a      	str	r2, [r3, #4]
        oidret->len++;
 800f2b8:	683b      	ldr	r3, [r7, #0]
 800f2ba:	781b      	ldrb	r3, [r3, #0]
 800f2bc:	3301      	adds	r3, #1
 800f2be:	b2da      	uxtb	r2, r3
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	701a      	strb	r2, [r3, #0]

        return subnode;
 800f2c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f2c8:	e005      	b.n	800f2d6 <snmp_mib_tree_resolve_next+0x290>
  while (nsi >= 0) {
 800f2ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	f6bf af42 	bge.w	800f158 <snmp_mib_tree_resolve_next+0x112>
      }
    }
  }

  return NULL;
 800f2d4:	2300      	movs	r3, #0
}
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	37f8      	adds	r7, #248	@ 0xf8
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	bd80      	pop	{r7, pc}

0800f2de <snmp_next_oid_init>:
/** initialize struct next_oid_state using this function before passing it to next_oid_check */
void
snmp_next_oid_init(struct snmp_next_oid_state *state,
  const u32_t *start_oid, u8_t start_oid_len,
  u32_t *next_oid_buf, u8_t next_oid_max_len)
{
 800f2de:	b480      	push	{r7}
 800f2e0:	b085      	sub	sp, #20
 800f2e2:	af00      	add	r7, sp, #0
 800f2e4:	60f8      	str	r0, [r7, #12]
 800f2e6:	60b9      	str	r1, [r7, #8]
 800f2e8:	603b      	str	r3, [r7, #0]
 800f2ea:	4613      	mov	r3, r2
 800f2ec:	71fb      	strb	r3, [r7, #7]
  state->start_oid        = start_oid;
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	68ba      	ldr	r2, [r7, #8]
 800f2f2:	601a      	str	r2, [r3, #0]
  state->start_oid_len    = start_oid_len;
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	79fa      	ldrb	r2, [r7, #7]
 800f2f8:	711a      	strb	r2, [r3, #4]
  state->next_oid         = next_oid_buf;
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	683a      	ldr	r2, [r7, #0]
 800f2fe:	609a      	str	r2, [r3, #8]
  state->next_oid_len     = 0;
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	2200      	movs	r2, #0
 800f304:	731a      	strb	r2, [r3, #12]
  state->next_oid_max_len = next_oid_max_len;
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	7e3a      	ldrb	r2, [r7, #24]
 800f30a:	735a      	strb	r2, [r3, #13]
  state->status           = SNMP_NEXT_OID_STATUS_NO_MATCH;
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	2201      	movs	r2, #1
 800f310:	739a      	strb	r2, [r3, #14]
}
 800f312:	bf00      	nop
 800f314:	3714      	adds	r7, #20
 800f316:	46bd      	mov	sp, r7
 800f318:	bc80      	pop	{r7}
 800f31a:	4770      	bx	lr

0800f31c <snmp_next_oid_check>:
}

/** checks the passed OID if it is a candidate to be the next one (get_next); returns !=0 if passed oid is currently closest, otherwise 0 */
u8_t
snmp_next_oid_check(struct snmp_next_oid_state *state, const u32_t *oid, const u8_t oid_len, void* reference)
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b084      	sub	sp, #16
 800f320:	af00      	add	r7, sp, #0
 800f322:	60f8      	str	r0, [r7, #12]
 800f324:	60b9      	str	r1, [r7, #8]
 800f326:	603b      	str	r3, [r7, #0]
 800f328:	4613      	mov	r3, r2
 800f32a:	71fb      	strb	r3, [r7, #7]
  /* do not overwrite a fail result */
  if (state->status != SNMP_NEXT_OID_STATUS_BUF_TO_SMALL) {
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	7b9b      	ldrb	r3, [r3, #14]
 800f330:	2b02      	cmp	r3, #2
 800f332:	d034      	beq.n	800f39e <snmp_next_oid_check+0x82>
    /* check passed OID is located behind start offset */
    if (snmp_oid_compare(oid, oid_len, state->start_oid, state->start_oid_len) > 0) {
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	681a      	ldr	r2, [r3, #0]
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	791b      	ldrb	r3, [r3, #4]
 800f33c:	79f9      	ldrb	r1, [r7, #7]
 800f33e:	68b8      	ldr	r0, [r7, #8]
 800f340:	f7ff faaa 	bl	800e898 <snmp_oid_compare>
 800f344:	4603      	mov	r3, r0
 800f346:	2b00      	cmp	r3, #0
 800f348:	dd29      	ble.n	800f39e <snmp_next_oid_check+0x82>
      /* check if new oid is located closer to start oid than current closest oid */
      if ((state->status == SNMP_NEXT_OID_STATUS_NO_MATCH) ||
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	7b9b      	ldrb	r3, [r3, #14]
 800f34e:	2b01      	cmp	r3, #1
 800f350:	d00a      	beq.n	800f368 <snmp_next_oid_check+0x4c>
        (snmp_oid_compare(oid, oid_len, state->next_oid, state->next_oid_len) < 0)) {
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	689a      	ldr	r2, [r3, #8]
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	7b1b      	ldrb	r3, [r3, #12]
 800f35a:	79f9      	ldrb	r1, [r7, #7]
 800f35c:	68b8      	ldr	r0, [r7, #8]
 800f35e:	f7ff fa9b 	bl	800e898 <snmp_oid_compare>
 800f362:	4603      	mov	r3, r0
      if ((state->status == SNMP_NEXT_OID_STATUS_NO_MATCH) ||
 800f364:	2b00      	cmp	r3, #0
 800f366:	da1a      	bge.n	800f39e <snmp_next_oid_check+0x82>
        if (oid_len <= state->next_oid_max_len) {
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	7b5b      	ldrb	r3, [r3, #13]
 800f36c:	79fa      	ldrb	r2, [r7, #7]
 800f36e:	429a      	cmp	r2, r3
 800f370:	d812      	bhi.n	800f398 <snmp_next_oid_check+0x7c>
          MEMCPY(state->next_oid, oid, oid_len * sizeof(u32_t));
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	6898      	ldr	r0, [r3, #8]
 800f376:	79fb      	ldrb	r3, [r7, #7]
 800f378:	009b      	lsls	r3, r3, #2
 800f37a:	461a      	mov	r2, r3
 800f37c:	68b9      	ldr	r1, [r7, #8]
 800f37e:	f012 ff7e 	bl	802227e <memcpy>
          state->next_oid_len = oid_len;
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	79fa      	ldrb	r2, [r7, #7]
 800f386:	731a      	strb	r2, [r3, #12]
          state->status       = SNMP_NEXT_OID_STATUS_SUCCESS;
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	2200      	movs	r2, #0
 800f38c:	739a      	strb	r2, [r3, #14]
          state->reference    = reference;
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	683a      	ldr	r2, [r7, #0]
 800f392:	611a      	str	r2, [r3, #16]
          return 1;
 800f394:	2301      	movs	r3, #1
 800f396:	e003      	b.n	800f3a0 <snmp_next_oid_check+0x84>
        } else {
          state->status = SNMP_NEXT_OID_STATUS_BUF_TO_SMALL;
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	2202      	movs	r2, #2
 800f39c:	739a      	strb	r2, [r3, #14]
        }
      }
    }
  }

  return 0;
 800f39e:	2300      	movs	r3, #0
}
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	3710      	adds	r7, #16
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	bd80      	pop	{r7, pc}

0800f3a8 <snmp_oid_in_range>:

u8_t
snmp_oid_in_range(const u32_t *oid_in, u8_t oid_len, const struct snmp_oid_range *oid_ranges, u8_t oid_ranges_len)
{
 800f3a8:	b480      	push	{r7}
 800f3aa:	b087      	sub	sp, #28
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	60f8      	str	r0, [r7, #12]
 800f3b0:	607a      	str	r2, [r7, #4]
 800f3b2:	461a      	mov	r2, r3
 800f3b4:	460b      	mov	r3, r1
 800f3b6:	72fb      	strb	r3, [r7, #11]
 800f3b8:	4613      	mov	r3, r2
 800f3ba:	72bb      	strb	r3, [r7, #10]
  u8_t i;

  if (oid_len != oid_ranges_len) {
 800f3bc:	7afa      	ldrb	r2, [r7, #11]
 800f3be:	7abb      	ldrb	r3, [r7, #10]
 800f3c0:	429a      	cmp	r2, r3
 800f3c2:	d001      	beq.n	800f3c8 <snmp_oid_in_range+0x20>
    return 0;
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	e024      	b.n	800f412 <snmp_oid_in_range+0x6a>
  }

  for (i = 0; i < oid_ranges_len; i++) {
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	75fb      	strb	r3, [r7, #23]
 800f3cc:	e01c      	b.n	800f408 <snmp_oid_in_range+0x60>
    if ((oid_in[i] < oid_ranges[i].min) || (oid_in[i] > oid_ranges[i].max)) {
 800f3ce:	7dfb      	ldrb	r3, [r7, #23]
 800f3d0:	009b      	lsls	r3, r3, #2
 800f3d2:	68fa      	ldr	r2, [r7, #12]
 800f3d4:	4413      	add	r3, r2
 800f3d6:	681a      	ldr	r2, [r3, #0]
 800f3d8:	7dfb      	ldrb	r3, [r7, #23]
 800f3da:	00db      	lsls	r3, r3, #3
 800f3dc:	6879      	ldr	r1, [r7, #4]
 800f3de:	440b      	add	r3, r1
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	429a      	cmp	r2, r3
 800f3e4:	d30b      	bcc.n	800f3fe <snmp_oid_in_range+0x56>
 800f3e6:	7dfb      	ldrb	r3, [r7, #23]
 800f3e8:	009b      	lsls	r3, r3, #2
 800f3ea:	68fa      	ldr	r2, [r7, #12]
 800f3ec:	4413      	add	r3, r2
 800f3ee:	681a      	ldr	r2, [r3, #0]
 800f3f0:	7dfb      	ldrb	r3, [r7, #23]
 800f3f2:	00db      	lsls	r3, r3, #3
 800f3f4:	6879      	ldr	r1, [r7, #4]
 800f3f6:	440b      	add	r3, r1
 800f3f8:	685b      	ldr	r3, [r3, #4]
 800f3fa:	429a      	cmp	r2, r3
 800f3fc:	d901      	bls.n	800f402 <snmp_oid_in_range+0x5a>
      return 0;
 800f3fe:	2300      	movs	r3, #0
 800f400:	e007      	b.n	800f412 <snmp_oid_in_range+0x6a>
  for (i = 0; i < oid_ranges_len; i++) {
 800f402:	7dfb      	ldrb	r3, [r7, #23]
 800f404:	3301      	adds	r3, #1
 800f406:	75fb      	strb	r3, [r7, #23]
 800f408:	7dfa      	ldrb	r2, [r7, #23]
 800f40a:	7abb      	ldrb	r3, [r7, #10]
 800f40c:	429a      	cmp	r2, r3
 800f40e:	d3de      	bcc.n	800f3ce <snmp_oid_in_range+0x26>
    }
  }

  return 1;
 800f410:	2301      	movs	r3, #1
}
 800f412:	4618      	mov	r0, r3
 800f414:	371c      	adds	r7, #28
 800f416:	46bd      	mov	sp, r7
 800f418:	bc80      	pop	{r7}
 800f41a:	4770      	bx	lr

0800f41c <icmp_get_value>:

/* --- icmp .1.3.6.1.2.1.5 ----------------------------------------------------- */

static s16_t
icmp_get_value(const struct snmp_scalar_array_node_def *node, void *value)
{
 800f41c:	b480      	push	{r7}
 800f41e:	b085      	sub	sp, #20
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
 800f424:	6039      	str	r1, [r7, #0]
  u32_t *uint_ptr = (u32_t*)value;
 800f426:	683b      	ldr	r3, [r7, #0]
 800f428:	60fb      	str	r3, [r7, #12]

  switch (node->oid) {
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	3b01      	subs	r3, #1
 800f430:	2b19      	cmp	r3, #25
 800f432:	f200 80df 	bhi.w	800f5f4 <icmp_get_value+0x1d8>
 800f436:	a201      	add	r2, pc, #4	@ (adr r2, 800f43c <icmp_get_value+0x20>)
 800f438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f43c:	0800f4a5 	.word	0x0800f4a5
 800f440:	0800f4b3 	.word	0x0800f4b3
 800f444:	0800f4c1 	.word	0x0800f4c1
 800f448:	0800f4cf 	.word	0x0800f4cf
 800f44c:	0800f4dd 	.word	0x0800f4dd
 800f450:	0800f4eb 	.word	0x0800f4eb
 800f454:	0800f4f9 	.word	0x0800f4f9
 800f458:	0800f507 	.word	0x0800f507
 800f45c:	0800f515 	.word	0x0800f515
 800f460:	0800f523 	.word	0x0800f523
 800f464:	0800f531 	.word	0x0800f531
 800f468:	0800f53f 	.word	0x0800f53f
 800f46c:	0800f54d 	.word	0x0800f54d
 800f470:	0800f55b 	.word	0x0800f55b
 800f474:	0800f569 	.word	0x0800f569
 800f478:	0800f577 	.word	0x0800f577
 800f47c:	0800f585 	.word	0x0800f585
 800f480:	0800f593 	.word	0x0800f593
 800f484:	0800f59d 	.word	0x0800f59d
 800f488:	0800f5a7 	.word	0x0800f5a7
 800f48c:	0800f5b1 	.word	0x0800f5b1
 800f490:	0800f5bf 	.word	0x0800f5bf
 800f494:	0800f5cd 	.word	0x0800f5cd
 800f498:	0800f5d7 	.word	0x0800f5d7
 800f49c:	0800f5e1 	.word	0x0800f5e1
 800f4a0:	0800f5eb 	.word	0x0800f5eb
  case 1: /* icmpInMsgs */
    *uint_ptr = STATS_GET(mib2.icmpinmsgs);
 800f4a4:	4b57      	ldr	r3, [pc, #348]	@ (800f604 <icmp_get_value+0x1e8>)
 800f4a6:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f4ae:	2304      	movs	r3, #4
 800f4b0:	e0a2      	b.n	800f5f8 <icmp_get_value+0x1dc>
  case 2: /* icmpInErrors */
    *uint_ptr = STATS_GET(mib2.icmpinerrors);
 800f4b2:	4b54      	ldr	r3, [pc, #336]	@ (800f604 <icmp_get_value+0x1e8>)
 800f4b4:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f4bc:	2304      	movs	r3, #4
 800f4be:	e09b      	b.n	800f5f8 <icmp_get_value+0x1dc>
  case 3: /* icmpInDestUnreachs */
    *uint_ptr = STATS_GET(mib2.icmpindestunreachs);
 800f4c0:	4b50      	ldr	r3, [pc, #320]	@ (800f604 <icmp_get_value+0x1e8>)
 800f4c2:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f4ca:	2304      	movs	r3, #4
 800f4cc:	e094      	b.n	800f5f8 <icmp_get_value+0x1dc>
  case 4: /* icmpInTimeExcds */
    *uint_ptr = STATS_GET(mib2.icmpintimeexcds);
 800f4ce:	4b4d      	ldr	r3, [pc, #308]	@ (800f604 <icmp_get_value+0x1e8>)
 800f4d0:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f4d8:	2304      	movs	r3, #4
 800f4da:	e08d      	b.n	800f5f8 <icmp_get_value+0x1dc>
  case 5: /* icmpInParmProbs */
    *uint_ptr = STATS_GET(mib2.icmpinparmprobs);
 800f4dc:	4b49      	ldr	r3, [pc, #292]	@ (800f604 <icmp_get_value+0x1e8>)
 800f4de:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f4e6:	2304      	movs	r3, #4
 800f4e8:	e086      	b.n	800f5f8 <icmp_get_value+0x1dc>
  case 6: /* icmpInSrcQuenchs */
    *uint_ptr = STATS_GET(mib2.icmpinsrcquenchs);
 800f4ea:	4b46      	ldr	r3, [pc, #280]	@ (800f604 <icmp_get_value+0x1e8>)
 800f4ec:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f4f4:	2304      	movs	r3, #4
 800f4f6:	e07f      	b.n	800f5f8 <icmp_get_value+0x1dc>
  case 7: /* icmpInRedirects */
    *uint_ptr = STATS_GET(mib2.icmpinredirects);
 800f4f8:	4b42      	ldr	r3, [pc, #264]	@ (800f604 <icmp_get_value+0x1e8>)
 800f4fa:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f502:	2304      	movs	r3, #4
 800f504:	e078      	b.n	800f5f8 <icmp_get_value+0x1dc>
  case 8: /* icmpInEchos */
    *uint_ptr = STATS_GET(mib2.icmpinechos);
 800f506:	4b3f      	ldr	r3, [pc, #252]	@ (800f604 <icmp_get_value+0x1e8>)
 800f508:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f510:	2304      	movs	r3, #4
 800f512:	e071      	b.n	800f5f8 <icmp_get_value+0x1dc>
  case 9: /* icmpInEchoReps */
    *uint_ptr = STATS_GET(mib2.icmpinechoreps);
 800f514:	4b3b      	ldr	r3, [pc, #236]	@ (800f604 <icmp_get_value+0x1e8>)
 800f516:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f51e:	2304      	movs	r3, #4
 800f520:	e06a      	b.n	800f5f8 <icmp_get_value+0x1dc>
  case 10: /* icmpInTimestamps */
    *uint_ptr = STATS_GET(mib2.icmpintimestamps);
 800f522:	4b38      	ldr	r3, [pc, #224]	@ (800f604 <icmp_get_value+0x1e8>)
 800f524:	f8d3 2170 	ldr.w	r2, [r3, #368]	@ 0x170
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f52c:	2304      	movs	r3, #4
 800f52e:	e063      	b.n	800f5f8 <icmp_get_value+0x1dc>
  case 11: /* icmpInTimestampReps */
    *uint_ptr = STATS_GET(mib2.icmpintimestampreps);
 800f530:	4b34      	ldr	r3, [pc, #208]	@ (800f604 <icmp_get_value+0x1e8>)
 800f532:	f8d3 2174 	ldr.w	r2, [r3, #372]	@ 0x174
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f53a:	2304      	movs	r3, #4
 800f53c:	e05c      	b.n	800f5f8 <icmp_get_value+0x1dc>
  case 12: /* icmpInAddrMasks */
    *uint_ptr = STATS_GET(mib2.icmpinaddrmasks);
 800f53e:	4b31      	ldr	r3, [pc, #196]	@ (800f604 <icmp_get_value+0x1e8>)
 800f540:	f8d3 2178 	ldr.w	r2, [r3, #376]	@ 0x178
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f548:	2304      	movs	r3, #4
 800f54a:	e055      	b.n	800f5f8 <icmp_get_value+0x1dc>
  case 13: /* icmpInAddrMaskReps */
    *uint_ptr = STATS_GET(mib2.icmpinaddrmaskreps);
 800f54c:	4b2d      	ldr	r3, [pc, #180]	@ (800f604 <icmp_get_value+0x1e8>)
 800f54e:	f8d3 217c 	ldr.w	r2, [r3, #380]	@ 0x17c
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f556:	2304      	movs	r3, #4
 800f558:	e04e      	b.n	800f5f8 <icmp_get_value+0x1dc>
  case 14: /* icmpOutMsgs */
    *uint_ptr = STATS_GET(mib2.icmpoutmsgs);
 800f55a:	4b2a      	ldr	r3, [pc, #168]	@ (800f604 <icmp_get_value+0x1e8>)
 800f55c:	f8d3 2180 	ldr.w	r2, [r3, #384]	@ 0x180
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f564:	2304      	movs	r3, #4
 800f566:	e047      	b.n	800f5f8 <icmp_get_value+0x1dc>
  case 15: /* icmpOutErrors */
    *uint_ptr = STATS_GET(mib2.icmpouterrors);
 800f568:	4b26      	ldr	r3, [pc, #152]	@ (800f604 <icmp_get_value+0x1e8>)
 800f56a:	f8d3 2184 	ldr.w	r2, [r3, #388]	@ 0x184
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f572:	2304      	movs	r3, #4
 800f574:	e040      	b.n	800f5f8 <icmp_get_value+0x1dc>
  case 16: /* icmpOutDestUnreachs */
    *uint_ptr = STATS_GET(mib2.icmpoutdestunreachs);
 800f576:	4b23      	ldr	r3, [pc, #140]	@ (800f604 <icmp_get_value+0x1e8>)
 800f578:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f580:	2304      	movs	r3, #4
 800f582:	e039      	b.n	800f5f8 <icmp_get_value+0x1dc>
  case 17: /* icmpOutTimeExcds */
    *uint_ptr = STATS_GET(mib2.icmpouttimeexcds);
 800f584:	4b1f      	ldr	r3, [pc, #124]	@ (800f604 <icmp_get_value+0x1e8>)
 800f586:	f8d3 218c 	ldr.w	r2, [r3, #396]	@ 0x18c
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f58e:	2304      	movs	r3, #4
 800f590:	e032      	b.n	800f5f8 <icmp_get_value+0x1dc>
  case 18: /* icmpOutParmProbs: not supported -> always 0 */
    *uint_ptr = 0;
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	2200      	movs	r2, #0
 800f596:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f598:	2304      	movs	r3, #4
 800f59a:	e02d      	b.n	800f5f8 <icmp_get_value+0x1dc>
  case 19: /* icmpOutSrcQuenchs: not supported -> always 0 */
    *uint_ptr = 0;
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	2200      	movs	r2, #0
 800f5a0:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f5a2:	2304      	movs	r3, #4
 800f5a4:	e028      	b.n	800f5f8 <icmp_get_value+0x1dc>
  case 20: /* icmpOutRedirects: not supported -> always 0 */
    *uint_ptr = 0;
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f5ac:	2304      	movs	r3, #4
 800f5ae:	e023      	b.n	800f5f8 <icmp_get_value+0x1dc>
  case 21: /* icmpOutEchos */
    *uint_ptr = STATS_GET(mib2.icmpoutechos);
 800f5b0:	4b14      	ldr	r3, [pc, #80]	@ (800f604 <icmp_get_value+0x1e8>)
 800f5b2:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f5ba:	2304      	movs	r3, #4
 800f5bc:	e01c      	b.n	800f5f8 <icmp_get_value+0x1dc>
  case 22: /* icmpOutEchoReps */
    *uint_ptr = STATS_GET(mib2.icmpoutechoreps);
 800f5be:	4b11      	ldr	r3, [pc, #68]	@ (800f604 <icmp_get_value+0x1e8>)
 800f5c0:	f8d3 2194 	ldr.w	r2, [r3, #404]	@ 0x194
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f5c8:	2304      	movs	r3, #4
 800f5ca:	e015      	b.n	800f5f8 <icmp_get_value+0x1dc>
  case 23: /* icmpOutTimestamps: not supported -> always 0 */
    *uint_ptr = 0;
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	2200      	movs	r2, #0
 800f5d0:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f5d2:	2304      	movs	r3, #4
 800f5d4:	e010      	b.n	800f5f8 <icmp_get_value+0x1dc>
  case 24: /* icmpOutTimestampReps: not supported -> always 0 */
    *uint_ptr = 0;
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	2200      	movs	r2, #0
 800f5da:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f5dc:	2304      	movs	r3, #4
 800f5de:	e00b      	b.n	800f5f8 <icmp_get_value+0x1dc>
  case 25: /* icmpOutAddrMasks: not supported -> always 0 */
    *uint_ptr = 0;
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f5e6:	2304      	movs	r3, #4
 800f5e8:	e006      	b.n	800f5f8 <icmp_get_value+0x1dc>
  case 26: /* icmpOutAddrMaskReps: not supported -> always 0 */
    *uint_ptr = 0;
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f5f0:	2304      	movs	r3, #4
 800f5f2:	e001      	b.n	800f5f8 <icmp_get_value+0x1dc>
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("icmp_get_value(): unknown id: %"S32_F"\n", node->oid));
    break;
 800f5f4:	bf00      	nop
  }

  return 0;
 800f5f6:	2300      	movs	r3, #0
}
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	3714      	adds	r7, #20
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	bc80      	pop	{r7}
 800f600:	4770      	bx	lr
 800f602:	bf00      	nop
 800f604:	2000be88 	.word	0x2000be88

0800f608 <interfaces_get_value>:

/* --- interfaces .1.3.6.1.2.1.2 ----------------------------------------------------- */

static s16_t
interfaces_get_value(struct snmp_node_instance* instance, void* value)
{
 800f608:	b480      	push	{r7}
 800f60a:	b087      	sub	sp, #28
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
 800f610:	6039      	str	r1, [r7, #0]
  if (instance->node->oid == 1) {
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	685b      	ldr	r3, [r3, #4]
 800f618:	2b01      	cmp	r3, #1
 800f61a:	d115      	bne.n	800f648 <interfaces_get_value+0x40>
    s32_t *sint_ptr = (s32_t*)value;
 800f61c:	683b      	ldr	r3, [r7, #0]
 800f61e:	60fb      	str	r3, [r7, #12]
    s32_t num_netifs = 0;
 800f620:	2300      	movs	r3, #0
 800f622:	617b      	str	r3, [r7, #20]

    struct netif *netif = netif_list;
 800f624:	4b0b      	ldr	r3, [pc, #44]	@ (800f654 <interfaces_get_value+0x4c>)
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	613b      	str	r3, [r7, #16]
    while (netif != NULL) {
 800f62a:	e005      	b.n	800f638 <interfaces_get_value+0x30>
      num_netifs++;
 800f62c:	697b      	ldr	r3, [r7, #20]
 800f62e:	3301      	adds	r3, #1
 800f630:	617b      	str	r3, [r7, #20]
      netif = netif->next;
 800f632:	693b      	ldr	r3, [r7, #16]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	613b      	str	r3, [r7, #16]
    while (netif != NULL) {
 800f638:	693b      	ldr	r3, [r7, #16]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d1f6      	bne.n	800f62c <interfaces_get_value+0x24>
    }

    *sint_ptr = num_netifs;
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	697a      	ldr	r2, [r7, #20]
 800f642:	601a      	str	r2, [r3, #0]
    return sizeof(*sint_ptr);
 800f644:	2304      	movs	r3, #4
 800f646:	e000      	b.n	800f64a <interfaces_get_value+0x42>
  }

  return 0;
 800f648:	2300      	movs	r3, #0
}
 800f64a:	4618      	mov	r0, r3
 800f64c:	371c      	adds	r7, #28
 800f64e:	46bd      	mov	sp, r7
 800f650:	bc80      	pop	{r7}
 800f652:	4770      	bx	lr
 800f654:	2000be7c 	.word	0x2000be7c

0800f658 <interfaces_Table_get_cell_instance>:
static const u8_t iftable_ifAdminStatus_lowerLayerDown = 7;
static const u8_t iftable_ifAdminStatus_down           = 2;

static snmp_err_t
interfaces_Table_get_cell_instance(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, struct snmp_node_instance* cell_instance)
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b086      	sub	sp, #24
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	60f8      	str	r0, [r7, #12]
 800f660:	60b9      	str	r1, [r7, #8]
 800f662:	603b      	str	r3, [r7, #0]
 800f664:	4613      	mov	r3, r2
 800f666:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_UNUSED_ARG(column);

  /* check if incoming OID length and if values are in plausible range */
  if (!snmp_oid_in_range(row_oid, row_oid_len, interfaces_Table_oid_ranges, LWIP_ARRAYSIZE(interfaces_Table_oid_ranges))) {
 800f668:	79f9      	ldrb	r1, [r7, #7]
 800f66a:	2301      	movs	r3, #1
 800f66c:	4a14      	ldr	r2, [pc, #80]	@ (800f6c0 <interfaces_Table_get_cell_instance+0x68>)
 800f66e:	68b8      	ldr	r0, [r7, #8]
 800f670:	f7ff fe9a 	bl	800f3a8 <snmp_oid_in_range>
 800f674:	4603      	mov	r3, r0
 800f676:	2b00      	cmp	r3, #0
 800f678:	d101      	bne.n	800f67e <interfaces_Table_get_cell_instance+0x26>
    return SNMP_ERR_NOSUCHINSTANCE;
 800f67a:	23f1      	movs	r3, #241	@ 0xf1
 800f67c:	e01b      	b.n	800f6b6 <interfaces_Table_get_cell_instance+0x5e>
  }

  /* get netif index from incoming OID */
  ifIndex = row_oid[0];
 800f67e:	68bb      	ldr	r3, [r7, #8]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	613b      	str	r3, [r7, #16]

  /* find netif with index */
  netif = netif_list;
 800f684:	4b0f      	ldr	r3, [pc, #60]	@ (800f6c4 <interfaces_Table_get_cell_instance+0x6c>)
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	617b      	str	r3, [r7, #20]
  while (netif != NULL) {
 800f68a:	e010      	b.n	800f6ae <interfaces_Table_get_cell_instance+0x56>
    if (netif_to_num(netif) == ifIndex) {
 800f68c:	6978      	ldr	r0, [r7, #20]
 800f68e:	f7ff f967 	bl	800e960 <netif_to_num>
 800f692:	4603      	mov	r3, r0
 800f694:	461a      	mov	r2, r3
 800f696:	693b      	ldr	r3, [r7, #16]
 800f698:	4293      	cmp	r3, r2
 800f69a:	d105      	bne.n	800f6a8 <interfaces_Table_get_cell_instance+0x50>
      /* store netif pointer for subsequent operations (get/test/set) */
      cell_instance->reference.ptr = netif;
 800f69c:	683b      	ldr	r3, [r7, #0]
 800f69e:	697a      	ldr	r2, [r7, #20]
 800f6a0:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
      return SNMP_ERR_NOERROR;
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	e006      	b.n	800f6b6 <interfaces_Table_get_cell_instance+0x5e>
    }
    netif = netif->next;
 800f6a8:	697b      	ldr	r3, [r7, #20]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	617b      	str	r3, [r7, #20]
  while (netif != NULL) {
 800f6ae:	697b      	ldr	r3, [r7, #20]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d1eb      	bne.n	800f68c <interfaces_Table_get_cell_instance+0x34>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 800f6b4:	23f1      	movs	r3, #241	@ 0xf1
}
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	3718      	adds	r7, #24
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bd80      	pop	{r7, pc}
 800f6be:	bf00      	nop
 800f6c0:	0802ff10 	.word	0x0802ff10
 800f6c4:	2000be7c 	.word	0x2000be7c

0800f6c8 <interfaces_Table_get_next_cell_instance>:

static snmp_err_t
interfaces_Table_get_next_cell_instance(const u32_t* column, struct snmp_obj_id* row_oid, struct snmp_node_instance* cell_instance)
{
 800f6c8:	b590      	push	{r4, r7, lr}
 800f6ca:	b08f      	sub	sp, #60	@ 0x3c
 800f6cc:	af02      	add	r7, sp, #8
 800f6ce:	60f8      	str	r0, [r7, #12]
 800f6d0:	60b9      	str	r1, [r7, #8]
 800f6d2:	607a      	str	r2, [r7, #4]
  u32_t result_temp[LWIP_ARRAYSIZE(interfaces_Table_oid_ranges)];

  LWIP_UNUSED_ARG(column);

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(interfaces_Table_oid_ranges));
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	1d19      	adds	r1, r3, #4
 800f6d8:	68bb      	ldr	r3, [r7, #8]
 800f6da:	781a      	ldrb	r2, [r3, #0]
 800f6dc:	f107 0314 	add.w	r3, r7, #20
 800f6e0:	f107 0018 	add.w	r0, r7, #24
 800f6e4:	2401      	movs	r4, #1
 800f6e6:	9400      	str	r4, [sp, #0]
 800f6e8:	f7ff fdf9 	bl	800f2de <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  netif = netif_list;
 800f6ec:	4b16      	ldr	r3, [pc, #88]	@ (800f748 <interfaces_Table_get_next_cell_instance+0x80>)
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (netif != NULL) {
 800f6f2:	e00f      	b.n	800f714 <interfaces_Table_get_next_cell_instance+0x4c>
    u32_t test_oid[LWIP_ARRAYSIZE(interfaces_Table_oid_ranges)];
    test_oid[0] = netif_to_num(netif);
 800f6f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f6f6:	f7ff f933 	bl	800e960 <netif_to_num>
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	613b      	str	r3, [r7, #16]

    /* check generated OID: is it a candidate for the next one? */
    snmp_next_oid_check(&state, test_oid, LWIP_ARRAYSIZE(interfaces_Table_oid_ranges), netif);
 800f6fe:	f107 0110 	add.w	r1, r7, #16
 800f702:	f107 0018 	add.w	r0, r7, #24
 800f706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f708:	2201      	movs	r2, #1
 800f70a:	f7ff fe07 	bl	800f31c <snmp_next_oid_check>

    netif = netif->next;
 800f70e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (netif != NULL) {
 800f714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f716:	2b00      	cmp	r3, #0
 800f718:	d1ec      	bne.n	800f6f4 <interfaces_Table_get_next_cell_instance+0x2c>
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 800f71a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d10c      	bne.n	800f73c <interfaces_Table_get_next_cell_instance+0x74>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 800f722:	6a3b      	ldr	r3, [r7, #32]
 800f724:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800f728:	4619      	mov	r1, r3
 800f72a:	68b8      	ldr	r0, [r7, #8]
 800f72c:	f7ff f854 	bl	800e7d8 <snmp_oid_assign>
    /* store netif pointer for subsequent operations (get/test/set) */
    cell_instance->reference.ptr = /* (struct netif*) */state.reference;
 800f730:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    return SNMP_ERR_NOERROR;
 800f738:	2300      	movs	r3, #0
 800f73a:	e000      	b.n	800f73e <interfaces_Table_get_next_cell_instance+0x76>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 800f73c:	23f1      	movs	r3, #241	@ 0xf1
}
 800f73e:	4618      	mov	r0, r3
 800f740:	3734      	adds	r7, #52	@ 0x34
 800f742:	46bd      	mov	sp, r7
 800f744:	bd90      	pop	{r4, r7, pc}
 800f746:	bf00      	nop
 800f748:	2000be7c 	.word	0x2000be7c

0800f74c <interfaces_Table_get_value>:

static s16_t
interfaces_Table_get_value(struct snmp_node_instance* instance, void* value)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b086      	sub	sp, #24
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
 800f754:	6039      	str	r1, [r7, #0]
  struct netif *netif = (struct netif*)instance->reference.ptr;
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800f75c:	613b      	str	r3, [r7, #16]
  u32_t* value_u32 = (u32_t*)value;
 800f75e:	683b      	ldr	r3, [r7, #0]
 800f760:	60fb      	str	r3, [r7, #12]
  s32_t* value_s32 = (s32_t*)value;
 800f762:	683b      	ldr	r3, [r7, #0]
 800f764:	60bb      	str	r3, [r7, #8]
  u16_t value_len;

  switch (SNMP_TABLE_GET_COLUMN_FROM_OID(instance->instance_oid.id))
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	68db      	ldr	r3, [r3, #12]
 800f76a:	3b01      	subs	r3, #1
 800f76c:	2b15      	cmp	r3, #21
 800f76e:	f200 8102 	bhi.w	800f976 <interfaces_Table_get_value+0x22a>
 800f772:	a201      	add	r2, pc, #4	@ (adr r2, 800f778 <interfaces_Table_get_value+0x2c>)
 800f774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f778:	0800f7d1 	.word	0x0800f7d1
 800f77c:	0800f7e5 	.word	0x0800f7e5
 800f780:	0800f7f9 	.word	0x0800f7f9
 800f784:	0800f80b 	.word	0x0800f80b
 800f788:	0800f81b 	.word	0x0800f81b
 800f78c:	0800f829 	.word	0x0800f829
 800f790:	0800f83d 	.word	0x0800f83d
 800f794:	0800f865 	.word	0x0800f865
 800f798:	0800f8a9 	.word	0x0800f8a9
 800f79c:	0800f8b7 	.word	0x0800f8b7
 800f7a0:	0800f8c5 	.word	0x0800f8c5
 800f7a4:	0800f8d3 	.word	0x0800f8d3
 800f7a8:	0800f8e1 	.word	0x0800f8e1
 800f7ac:	0800f8ef 	.word	0x0800f8ef
 800f7b0:	0800f8fd 	.word	0x0800f8fd
 800f7b4:	0800f90b 	.word	0x0800f90b
 800f7b8:	0800f919 	.word	0x0800f919
 800f7bc:	0800f927 	.word	0x0800f927
 800f7c0:	0800f935 	.word	0x0800f935
 800f7c4:	0800f943 	.word	0x0800f943
 800f7c8:	0800f951 	.word	0x0800f951
 800f7cc:	0800f95f 	.word	0x0800f95f
  {
  case 1: /* ifIndex */
    *value_s32 = netif_to_num(netif);
 800f7d0:	6938      	ldr	r0, [r7, #16]
 800f7d2:	f7ff f8c5 	bl	800e960 <netif_to_num>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	461a      	mov	r2, r3
 800f7da:	68bb      	ldr	r3, [r7, #8]
 800f7dc:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_s32);
 800f7de:	2304      	movs	r3, #4
 800f7e0:	82fb      	strh	r3, [r7, #22]
    break;
 800f7e2:	e0ca      	b.n	800f97a <interfaces_Table_get_value+0x22e>
  case 2: /* ifDescr */
    value_len = sizeof(netif->name);
 800f7e4:	2302      	movs	r3, #2
 800f7e6:	82fb      	strh	r3, [r7, #22]
    MEMCPY(value, netif->name, value_len);
 800f7e8:	693b      	ldr	r3, [r7, #16]
 800f7ea:	3334      	adds	r3, #52	@ 0x34
 800f7ec:	8afa      	ldrh	r2, [r7, #22]
 800f7ee:	4619      	mov	r1, r3
 800f7f0:	6838      	ldr	r0, [r7, #0]
 800f7f2:	f012 fd44 	bl	802227e <memcpy>
    break;
 800f7f6:	e0c0      	b.n	800f97a <interfaces_Table_get_value+0x22e>
  case 3: /* ifType */
    *value_s32 = netif->link_type;
 800f7f8:	693b      	ldr	r3, [r7, #16]
 800f7fa:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 800f7fe:	461a      	mov	r2, r3
 800f800:	68bb      	ldr	r3, [r7, #8]
 800f802:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_s32);
 800f804:	2304      	movs	r3, #4
 800f806:	82fb      	strh	r3, [r7, #22]
    break;
 800f808:	e0b7      	b.n	800f97a <interfaces_Table_get_value+0x22e>
  case 4: /* ifMtu */
    *value_s32 = netif->mtu;
 800f80a:	693b      	ldr	r3, [r7, #16]
 800f80c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f80e:	461a      	mov	r2, r3
 800f810:	68bb      	ldr	r3, [r7, #8]
 800f812:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_s32);
 800f814:	2304      	movs	r3, #4
 800f816:	82fb      	strh	r3, [r7, #22]
    break;
 800f818:	e0af      	b.n	800f97a <interfaces_Table_get_value+0x22e>
  case 5: /* ifSpeed */
    *value_u32 = netif->link_speed;
 800f81a:	693b      	ldr	r3, [r7, #16]
 800f81c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800f822:	2304      	movs	r3, #4
 800f824:	82fb      	strh	r3, [r7, #22]
    break;
 800f826:	e0a8      	b.n	800f97a <interfaces_Table_get_value+0x22e>
  case 6: /* ifPhysAddress */
    value_len = sizeof(netif->hwaddr);
 800f828:	2306      	movs	r3, #6
 800f82a:	82fb      	strh	r3, [r7, #22]
    MEMCPY(value, &netif->hwaddr, value_len);
 800f82c:	693b      	ldr	r3, [r7, #16]
 800f82e:	332d      	adds	r3, #45	@ 0x2d
 800f830:	8afa      	ldrh	r2, [r7, #22]
 800f832:	4619      	mov	r1, r3
 800f834:	6838      	ldr	r0, [r7, #0]
 800f836:	f012 fd22 	bl	802227e <memcpy>
    break;
 800f83a:	e09e      	b.n	800f97a <interfaces_Table_get_value+0x22e>
  case 7: /* ifAdminStatus */
    if (netif_is_up(netif)) {
 800f83c:	693b      	ldr	r3, [r7, #16]
 800f83e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800f842:	f003 0301 	and.w	r3, r3, #1
 800f846:	b2db      	uxtb	r3, r3
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d004      	beq.n	800f856 <interfaces_Table_get_value+0x10a>
      *value_s32 = iftable_ifOperStatus_up;
 800f84c:	2301      	movs	r3, #1
 800f84e:	461a      	mov	r2, r3
 800f850:	68bb      	ldr	r3, [r7, #8]
 800f852:	601a      	str	r2, [r3, #0]
 800f854:	e003      	b.n	800f85e <interfaces_Table_get_value+0x112>
    } else {
      *value_s32 = iftable_ifOperStatus_down;
 800f856:	2302      	movs	r3, #2
 800f858:	461a      	mov	r2, r3
 800f85a:	68bb      	ldr	r3, [r7, #8]
 800f85c:	601a      	str	r2, [r3, #0]
    }
    value_len = sizeof(*value_s32);
 800f85e:	2304      	movs	r3, #4
 800f860:	82fb      	strh	r3, [r7, #22]
    break;
 800f862:	e08a      	b.n	800f97a <interfaces_Table_get_value+0x22e>
  case 8: /* ifOperStatus */
    if (netif_is_up(netif)) {
 800f864:	693b      	ldr	r3, [r7, #16]
 800f866:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800f86a:	f003 0301 	and.w	r3, r3, #1
 800f86e:	b2db      	uxtb	r3, r3
 800f870:	2b00      	cmp	r3, #0
 800f872:	d012      	beq.n	800f89a <interfaces_Table_get_value+0x14e>
      if (netif_is_link_up(netif)) {
 800f874:	693b      	ldr	r3, [r7, #16]
 800f876:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800f87a:	089b      	lsrs	r3, r3, #2
 800f87c:	f003 0301 	and.w	r3, r3, #1
 800f880:	b2db      	uxtb	r3, r3
 800f882:	2b00      	cmp	r3, #0
 800f884:	d004      	beq.n	800f890 <interfaces_Table_get_value+0x144>
        *value_s32 = iftable_ifAdminStatus_up;
 800f886:	2301      	movs	r3, #1
 800f888:	461a      	mov	r2, r3
 800f88a:	68bb      	ldr	r3, [r7, #8]
 800f88c:	601a      	str	r2, [r3, #0]
 800f88e:	e008      	b.n	800f8a2 <interfaces_Table_get_value+0x156>
      } else {
        *value_s32 = iftable_ifAdminStatus_lowerLayerDown;
 800f890:	2307      	movs	r3, #7
 800f892:	461a      	mov	r2, r3
 800f894:	68bb      	ldr	r3, [r7, #8]
 800f896:	601a      	str	r2, [r3, #0]
 800f898:	e003      	b.n	800f8a2 <interfaces_Table_get_value+0x156>
      }
    } else {
      *value_s32 = iftable_ifAdminStatus_down;
 800f89a:	2302      	movs	r3, #2
 800f89c:	461a      	mov	r2, r3
 800f89e:	68bb      	ldr	r3, [r7, #8]
 800f8a0:	601a      	str	r2, [r3, #0]
    }
    value_len = sizeof(*value_s32);
 800f8a2:	2304      	movs	r3, #4
 800f8a4:	82fb      	strh	r3, [r7, #22]
    break;
 800f8a6:	e068      	b.n	800f97a <interfaces_Table_get_value+0x22e>
  case 9: /* ifLastChange */
    *value_u32 = netif->ts;
 800f8a8:	693b      	ldr	r3, [r7, #16]
 800f8aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800f8b0:	2304      	movs	r3, #4
 800f8b2:	82fb      	strh	r3, [r7, #22]
    break;
 800f8b4:	e061      	b.n	800f97a <interfaces_Table_get_value+0x22e>
  case 10: /* ifInOctets */
    *value_u32 = netif->mib2_counters.ifinoctets;
 800f8b6:	693b      	ldr	r3, [r7, #16]
 800f8b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800f8be:	2304      	movs	r3, #4
 800f8c0:	82fb      	strh	r3, [r7, #22]
    break;
 800f8c2:	e05a      	b.n	800f97a <interfaces_Table_get_value+0x22e>
  case 11: /* ifInUcastPkts */
    *value_u32 = netif->mib2_counters.ifinucastpkts;
 800f8c4:	693b      	ldr	r3, [r7, #16]
 800f8c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800f8cc:	2304      	movs	r3, #4
 800f8ce:	82fb      	strh	r3, [r7, #22]
    break;
 800f8d0:	e053      	b.n	800f97a <interfaces_Table_get_value+0x22e>
  case 12: /* ifInNUcastPkts */
    *value_u32 = netif->mib2_counters.ifinnucastpkts;
 800f8d2:	693b      	ldr	r3, [r7, #16]
 800f8d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800f8da:	2304      	movs	r3, #4
 800f8dc:	82fb      	strh	r3, [r7, #22]
    break;
 800f8de:	e04c      	b.n	800f97a <interfaces_Table_get_value+0x22e>
  case 13: /* ifInDiscards */
    *value_u32 = netif->mib2_counters.ifindiscards;
 800f8e0:	693b      	ldr	r3, [r7, #16]
 800f8e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800f8e8:	2304      	movs	r3, #4
 800f8ea:	82fb      	strh	r3, [r7, #22]
    break;
 800f8ec:	e045      	b.n	800f97a <interfaces_Table_get_value+0x22e>
  case 14: /* ifInErrors */
    *value_u32 = netif->mib2_counters.ifinerrors;
 800f8ee:	693b      	ldr	r3, [r7, #16]
 800f8f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800f8f6:	2304      	movs	r3, #4
 800f8f8:	82fb      	strh	r3, [r7, #22]
    break;
 800f8fa:	e03e      	b.n	800f97a <interfaces_Table_get_value+0x22e>
  case 15: /* ifInUnkownProtos */
    *value_u32 = netif->mib2_counters.ifinunknownprotos;
 800f8fc:	693b      	ldr	r3, [r7, #16]
 800f8fe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800f904:	2304      	movs	r3, #4
 800f906:	82fb      	strh	r3, [r7, #22]
    break;
 800f908:	e037      	b.n	800f97a <interfaces_Table_get_value+0x22e>
  case 16: /* ifOutOctets */
    *value_u32 = netif->mib2_counters.ifoutoctets;
 800f90a:	693b      	ldr	r3, [r7, #16]
 800f90c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800f912:	2304      	movs	r3, #4
 800f914:	82fb      	strh	r3, [r7, #22]
    break;
 800f916:	e030      	b.n	800f97a <interfaces_Table_get_value+0x22e>
  case 17: /* ifOutUcastPkts */
    *value_u32 = netif->mib2_counters.ifoutucastpkts;
 800f918:	693b      	ldr	r3, [r7, #16]
 800f91a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800f920:	2304      	movs	r3, #4
 800f922:	82fb      	strh	r3, [r7, #22]
    break;
 800f924:	e029      	b.n	800f97a <interfaces_Table_get_value+0x22e>
  case 18: /* ifOutNUcastPkts */
    *value_u32 = netif->mib2_counters.ifoutnucastpkts;
 800f926:	693b      	ldr	r3, [r7, #16]
 800f928:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800f92e:	2304      	movs	r3, #4
 800f930:	82fb      	strh	r3, [r7, #22]
    break;
 800f932:	e022      	b.n	800f97a <interfaces_Table_get_value+0x22e>
  case 19: /* ifOutDiscarts */
    *value_u32 = netif->mib2_counters.ifoutdiscards;
 800f934:	693b      	ldr	r3, [r7, #16]
 800f936:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800f93c:	2304      	movs	r3, #4
 800f93e:	82fb      	strh	r3, [r7, #22]
    break;
 800f940:	e01b      	b.n	800f97a <interfaces_Table_get_value+0x22e>
  case 20: /* ifOutErrors */
    *value_u32 = netif->mib2_counters.ifouterrors;
 800f942:	693b      	ldr	r3, [r7, #16]
 800f944:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800f94a:	2304      	movs	r3, #4
 800f94c:	82fb      	strh	r3, [r7, #22]
    break;
 800f94e:	e014      	b.n	800f97a <interfaces_Table_get_value+0x22e>
  case 21: /* ifOutQLen */
    *value_u32 = iftable_ifOutQLen;
 800f950:	2300      	movs	r3, #0
 800f952:	461a      	mov	r2, r3
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800f958:	2304      	movs	r3, #4
 800f95a:	82fb      	strh	r3, [r7, #22]
    break;
 800f95c:	e00d      	b.n	800f97a <interfaces_Table_get_value+0x22e>
  /** @note returning zeroDotZero (0.0) no media specific MIB support */
  case 22: /* ifSpecific */
    value_len = snmp_zero_dot_zero.len * sizeof(u32_t);
 800f95e:	4b0a      	ldr	r3, [pc, #40]	@ (800f988 <interfaces_Table_get_value+0x23c>)
 800f960:	781b      	ldrb	r3, [r3, #0]
 800f962:	009b      	lsls	r3, r3, #2
 800f964:	82fb      	strh	r3, [r7, #22]
    MEMCPY(value, snmp_zero_dot_zero.id, value_len);
 800f966:	4b08      	ldr	r3, [pc, #32]	@ (800f988 <interfaces_Table_get_value+0x23c>)
 800f968:	685b      	ldr	r3, [r3, #4]
 800f96a:	8afa      	ldrh	r2, [r7, #22]
 800f96c:	4619      	mov	r1, r3
 800f96e:	6838      	ldr	r0, [r7, #0]
 800f970:	f012 fc85 	bl	802227e <memcpy>
    break;
 800f974:	e001      	b.n	800f97a <interfaces_Table_get_value+0x22e>
  default:
    return 0;
 800f976:	2300      	movs	r3, #0
 800f978:	e001      	b.n	800f97e <interfaces_Table_get_value+0x232>
  }

  return value_len;
 800f97a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800f97e:	4618      	mov	r0, r3
 800f980:	3718      	adds	r7, #24
 800f982:	46bd      	mov	sp, r7
 800f984:	bd80      	pop	{r7, pc}
 800f986:	bf00      	nop
 800f988:	0802fdbc 	.word	0x0802fdbc

0800f98c <ip_get_value>:
#if LWIP_IPV4
/* --- ip .1.3.6.1.2.1.4 ----------------------------------------------------- */

static s16_t
ip_get_value(struct snmp_node_instance* instance, void* value)
{
 800f98c:	b480      	push	{r7}
 800f98e:	b085      	sub	sp, #20
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
 800f994:	6039      	str	r1, [r7, #0]
  s32_t* sint_ptr = (s32_t*)value;
 800f996:	683b      	ldr	r3, [r7, #0]
 800f998:	60fb      	str	r3, [r7, #12]
  u32_t* uint_ptr = (u32_t*)value;
 800f99a:	683b      	ldr	r3, [r7, #0]
 800f99c:	60bb      	str	r3, [r7, #8]

  switch (instance->node->oid) {
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	685b      	ldr	r3, [r3, #4]
 800f9a4:	3b01      	subs	r3, #1
 800f9a6:	2b16      	cmp	r3, #22
 800f9a8:	f200 80b6 	bhi.w	800fb18 <ip_get_value+0x18c>
 800f9ac:	a201      	add	r2, pc, #4	@ (adr r2, 800f9b4 <ip_get_value+0x28>)
 800f9ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9b2:	bf00      	nop
 800f9b4:	0800fa11 	.word	0x0800fa11
 800f9b8:	0800fa1b 	.word	0x0800fa1b
 800f9bc:	0800fa25 	.word	0x0800fa25
 800f9c0:	0800fa33 	.word	0x0800fa33
 800f9c4:	0800fa41 	.word	0x0800fa41
 800f9c8:	0800fa4f 	.word	0x0800fa4f
 800f9cc:	0800fa5d 	.word	0x0800fa5d
 800f9d0:	0800fa6b 	.word	0x0800fa6b
 800f9d4:	0800fa79 	.word	0x0800fa79
 800f9d8:	0800fa87 	.word	0x0800fa87
 800f9dc:	0800fa95 	.word	0x0800fa95
 800f9e0:	0800faa3 	.word	0x0800faa3
 800f9e4:	0800fab1 	.word	0x0800fab1
 800f9e8:	0800fabb 	.word	0x0800fabb
 800f9ec:	0800fac9 	.word	0x0800fac9
 800f9f0:	0800fad7 	.word	0x0800fad7
 800f9f4:	0800fae5 	.word	0x0800fae5
 800f9f8:	0800faf3 	.word	0x0800faf3
 800f9fc:	0800fb01 	.word	0x0800fb01
 800fa00:	0800fb19 	.word	0x0800fb19
 800fa04:	0800fb19 	.word	0x0800fb19
 800fa08:	0800fb19 	.word	0x0800fb19
 800fa0c:	0800fb0f 	.word	0x0800fb0f
#if IP_FORWARD
    /* forwarding */
    *sint_ptr = 1;
#else
    /* not-forwarding */
    *sint_ptr = 2;
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	2202      	movs	r2, #2
 800fa14:	601a      	str	r2, [r3, #0]
#endif
    return sizeof(*sint_ptr);
 800fa16:	2304      	movs	r3, #4
 800fa18:	e080      	b.n	800fb1c <ip_get_value+0x190>
  case 2: /* ipDefaultTTL */
    *sint_ptr = IP_DEFAULT_TTL;
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	22ff      	movs	r2, #255	@ 0xff
 800fa1e:	601a      	str	r2, [r3, #0]
    return sizeof(*sint_ptr);
 800fa20:	2304      	movs	r3, #4
 800fa22:	e07b      	b.n	800fb1c <ip_get_value+0x190>
  case 3: /* ipInReceives */
    *uint_ptr = STATS_GET(mib2.ipinreceives);
 800fa24:	4b40      	ldr	r3, [pc, #256]	@ (800fb28 <ip_get_value+0x19c>)
 800fa26:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800fa2a:	68bb      	ldr	r3, [r7, #8]
 800fa2c:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fa2e:	2304      	movs	r3, #4
 800fa30:	e074      	b.n	800fb1c <ip_get_value+0x190>
  case 4: /* ipInHdrErrors */
    *uint_ptr = STATS_GET(mib2.ipinhdrerrors);
 800fa32:	4b3d      	ldr	r3, [pc, #244]	@ (800fb28 <ip_get_value+0x19c>)
 800fa34:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 800fa38:	68bb      	ldr	r3, [r7, #8]
 800fa3a:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fa3c:	2304      	movs	r3, #4
 800fa3e:	e06d      	b.n	800fb1c <ip_get_value+0x190>
  case 5: /* ipInAddrErrors */
    *uint_ptr = STATS_GET(mib2.ipinaddrerrors);
 800fa40:	4b39      	ldr	r3, [pc, #228]	@ (800fb28 <ip_get_value+0x19c>)
 800fa42:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 800fa46:	68bb      	ldr	r3, [r7, #8]
 800fa48:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fa4a:	2304      	movs	r3, #4
 800fa4c:	e066      	b.n	800fb1c <ip_get_value+0x190>
  case 6: /* ipForwDatagrams */
    *uint_ptr = STATS_GET(mib2.ipforwdatagrams);
 800fa4e:	4b36      	ldr	r3, [pc, #216]	@ (800fb28 <ip_get_value+0x19c>)
 800fa50:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800fa54:	68bb      	ldr	r3, [r7, #8]
 800fa56:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fa58:	2304      	movs	r3, #4
 800fa5a:	e05f      	b.n	800fb1c <ip_get_value+0x190>
  case 7: /* ipInUnknownProtos */
    *uint_ptr = STATS_GET(mib2.ipinunknownprotos);
 800fa5c:	4b32      	ldr	r3, [pc, #200]	@ (800fb28 <ip_get_value+0x19c>)
 800fa5e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800fa62:	68bb      	ldr	r3, [r7, #8]
 800fa64:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fa66:	2304      	movs	r3, #4
 800fa68:	e058      	b.n	800fb1c <ip_get_value+0x190>
  case 8: /* ipInDiscards */
    *uint_ptr = STATS_GET(mib2.ipindiscards);
 800fa6a:	4b2f      	ldr	r3, [pc, #188]	@ (800fb28 <ip_get_value+0x19c>)
 800fa6c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 800fa70:	68bb      	ldr	r3, [r7, #8]
 800fa72:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fa74:	2304      	movs	r3, #4
 800fa76:	e051      	b.n	800fb1c <ip_get_value+0x190>
  case 9: /* ipInDelivers */
    *uint_ptr = STATS_GET(mib2.ipindelivers);
 800fa78:	4b2b      	ldr	r3, [pc, #172]	@ (800fb28 <ip_get_value+0x19c>)
 800fa7a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800fa7e:	68bb      	ldr	r3, [r7, #8]
 800fa80:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fa82:	2304      	movs	r3, #4
 800fa84:	e04a      	b.n	800fb1c <ip_get_value+0x190>
  case 10: /* ipOutRequests */
    *uint_ptr = STATS_GET(mib2.ipoutrequests);
 800fa86:	4b28      	ldr	r3, [pc, #160]	@ (800fb28 <ip_get_value+0x19c>)
 800fa88:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 800fa8c:	68bb      	ldr	r3, [r7, #8]
 800fa8e:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fa90:	2304      	movs	r3, #4
 800fa92:	e043      	b.n	800fb1c <ip_get_value+0x190>
  case 11: /* ipOutDiscards */
    *uint_ptr = STATS_GET(mib2.ipoutdiscards);
 800fa94:	4b24      	ldr	r3, [pc, #144]	@ (800fb28 <ip_get_value+0x19c>)
 800fa96:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800fa9a:	68bb      	ldr	r3, [r7, #8]
 800fa9c:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fa9e:	2304      	movs	r3, #4
 800faa0:	e03c      	b.n	800fb1c <ip_get_value+0x190>
  case 12: /* ipOutNoRoutes */
    *uint_ptr = STATS_GET(mib2.ipoutnoroutes);
 800faa2:	4b21      	ldr	r3, [pc, #132]	@ (800fb28 <ip_get_value+0x19c>)
 800faa4:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 800faa8:	68bb      	ldr	r3, [r7, #8]
 800faaa:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800faac:	2304      	movs	r3, #4
 800faae:	e035      	b.n	800fb1c <ip_get_value+0x190>
  case 13: /* ipReasmTimeout */
#if IP_REASSEMBLY
    *sint_ptr = IP_REASS_MAXAGE;
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	2203      	movs	r2, #3
 800fab4:	601a      	str	r2, [r3, #0]
#else
    *sint_ptr = 0;
#endif
    return sizeof(*sint_ptr);
 800fab6:	2304      	movs	r3, #4
 800fab8:	e030      	b.n	800fb1c <ip_get_value+0x190>
  case 14: /* ipReasmReqds */
    *uint_ptr = STATS_GET(mib2.ipreasmreqds);
 800faba:	4b1b      	ldr	r3, [pc, #108]	@ (800fb28 <ip_get_value+0x19c>)
 800fabc:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 800fac0:	68bb      	ldr	r3, [r7, #8]
 800fac2:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fac4:	2304      	movs	r3, #4
 800fac6:	e029      	b.n	800fb1c <ip_get_value+0x190>
  case 15: /* ipReasmOKs */
    *uint_ptr = STATS_GET(mib2.ipreasmoks);
 800fac8:	4b17      	ldr	r3, [pc, #92]	@ (800fb28 <ip_get_value+0x19c>)
 800faca:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 800face:	68bb      	ldr	r3, [r7, #8]
 800fad0:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fad2:	2304      	movs	r3, #4
 800fad4:	e022      	b.n	800fb1c <ip_get_value+0x190>
  case 16: /* ipReasmFails */
    *uint_ptr = STATS_GET(mib2.ipreasmfails);
 800fad6:	4b14      	ldr	r3, [pc, #80]	@ (800fb28 <ip_get_value+0x19c>)
 800fad8:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
 800fadc:	68bb      	ldr	r3, [r7, #8]
 800fade:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fae0:	2304      	movs	r3, #4
 800fae2:	e01b      	b.n	800fb1c <ip_get_value+0x190>
  case 17: /* ipFragOKs */
    *uint_ptr = STATS_GET(mib2.ipfragoks);
 800fae4:	4b10      	ldr	r3, [pc, #64]	@ (800fb28 <ip_get_value+0x19c>)
 800fae6:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 800faea:	68bb      	ldr	r3, [r7, #8]
 800faec:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800faee:	2304      	movs	r3, #4
 800faf0:	e014      	b.n	800fb1c <ip_get_value+0x190>
  case 18: /* ipFragFails */
    *uint_ptr = STATS_GET(mib2.ipfragfails);
 800faf2:	4b0d      	ldr	r3, [pc, #52]	@ (800fb28 <ip_get_value+0x19c>)
 800faf4:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800faf8:	68bb      	ldr	r3, [r7, #8]
 800fafa:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fafc:	2304      	movs	r3, #4
 800fafe:	e00d      	b.n	800fb1c <ip_get_value+0x190>
  case 19: /* ipFragCreates */
    *uint_ptr = STATS_GET(mib2.ipfragcreates);
 800fb00:	4b09      	ldr	r3, [pc, #36]	@ (800fb28 <ip_get_value+0x19c>)
 800fb02:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800fb06:	68bb      	ldr	r3, [r7, #8]
 800fb08:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fb0a:	2304      	movs	r3, #4
 800fb0c:	e006      	b.n	800fb1c <ip_get_value+0x190>
  case 23: /* ipRoutingDiscards: not supported -> always 0 */
    *uint_ptr = 0;
 800fb0e:	68bb      	ldr	r3, [r7, #8]
 800fb10:	2200      	movs	r2, #0
 800fb12:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800fb14:	2304      	movs	r3, #4
 800fb16:	e001      	b.n	800fb1c <ip_get_value+0x190>
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("ip_get_value(): unknown id: %"S32_F"\n", instance->node->oid));
    break;
 800fb18:	bf00      	nop
  }

  return 0;
 800fb1a:	2300      	movs	r3, #0
}
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	3714      	adds	r7, #20
 800fb20:	46bd      	mov	sp, r7
 800fb22:	bc80      	pop	{r7}
 800fb24:	4770      	bx	lr
 800fb26:	bf00      	nop
 800fb28:	2000be88 	.word	0x2000be88

0800fb2c <ip_set_test>:
 * @note we allow set if the value matches the hardwired value,
 *   otherwise return badvalue.
 */
static snmp_err_t
ip_set_test(struct snmp_node_instance* instance, u16_t len, void *value)
{
 800fb2c:	b480      	push	{r7}
 800fb2e:	b087      	sub	sp, #28
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	60f8      	str	r0, [r7, #12]
 800fb34:	460b      	mov	r3, r1
 800fb36:	607a      	str	r2, [r7, #4]
 800fb38:	817b      	strh	r3, [r7, #10]
  snmp_err_t ret = SNMP_ERR_WRONGVALUE;
 800fb3a:	230a      	movs	r3, #10
 800fb3c:	75fb      	strb	r3, [r7, #23]
  s32_t *sint_ptr = (s32_t*)value;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	613b      	str	r3, [r7, #16]

  LWIP_UNUSED_ARG(len);
  switch (instance->node->oid) {
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	685b      	ldr	r3, [r3, #4]
 800fb48:	2b01      	cmp	r3, #1
 800fb4a:	d002      	beq.n	800fb52 <ip_set_test+0x26>
 800fb4c:	2b02      	cmp	r3, #2
 800fb4e:	d007      	beq.n	800fb60 <ip_set_test+0x34>
      ret = SNMP_ERR_NOERROR;
    }
    break;
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("ip_set_test(): unknown id: %"S32_F"\n", instance->node->oid));
    break;
 800fb50:	e010      	b.n	800fb74 <ip_set_test+0x48>
    if (*sint_ptr == 2)
 800fb52:	693b      	ldr	r3, [r7, #16]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	2b02      	cmp	r3, #2
 800fb58:	d109      	bne.n	800fb6e <ip_set_test+0x42>
      ret = SNMP_ERR_NOERROR;
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	75fb      	strb	r3, [r7, #23]
    break;
 800fb5e:	e006      	b.n	800fb6e <ip_set_test+0x42>
    if (*sint_ptr == IP_DEFAULT_TTL) {
 800fb60:	693b      	ldr	r3, [r7, #16]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	2bff      	cmp	r3, #255	@ 0xff
 800fb66:	d104      	bne.n	800fb72 <ip_set_test+0x46>
      ret = SNMP_ERR_NOERROR;
 800fb68:	2300      	movs	r3, #0
 800fb6a:	75fb      	strb	r3, [r7, #23]
    break;
 800fb6c:	e001      	b.n	800fb72 <ip_set_test+0x46>
    break;
 800fb6e:	bf00      	nop
 800fb70:	e000      	b.n	800fb74 <ip_set_test+0x48>
    break;
 800fb72:	bf00      	nop
  }

  return ret;
 800fb74:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb76:	4618      	mov	r0, r3
 800fb78:	371c      	adds	r7, #28
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	bc80      	pop	{r7}
 800fb7e:	4770      	bx	lr

0800fb80 <ip_set_value>:

static snmp_err_t
ip_set_value(struct snmp_node_instance* instance, u16_t len, void *value)
{
 800fb80:	b480      	push	{r7}
 800fb82:	b085      	sub	sp, #20
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	60f8      	str	r0, [r7, #12]
 800fb88:	460b      	mov	r3, r1
 800fb8a:	607a      	str	r2, [r7, #4]
 800fb8c:	817b      	strh	r3, [r7, #10]
  LWIP_UNUSED_ARG(instance);
  LWIP_UNUSED_ARG(len);
  LWIP_UNUSED_ARG(value);
  /* nothing to do here because in set_test we only accept values being the same as our own stored value -> no need to store anything */
  return SNMP_ERR_NOERROR;
 800fb8e:	2300      	movs	r3, #0
}
 800fb90:	4618      	mov	r0, r3
 800fb92:	3714      	adds	r7, #20
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bc80      	pop	{r7}
 800fb98:	4770      	bx	lr
	...

0800fb9c <ip_AddrTable_get_cell_value_core>:
  { 0, 0xff }  /* IP D */
};

static snmp_err_t
ip_AddrTable_get_cell_value_core(struct netif *netif, const u32_t* column, union snmp_variant_value* value, u32_t* value_len)
{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	b084      	sub	sp, #16
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	60f8      	str	r0, [r7, #12]
 800fba4:	60b9      	str	r1, [r7, #8]
 800fba6:	607a      	str	r2, [r7, #4]
 800fba8:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(value_len);

  switch (*column) {
 800fbaa:	68bb      	ldr	r3, [r7, #8]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	3b01      	subs	r3, #1
 800fbb0:	2b04      	cmp	r3, #4
 800fbb2:	d82a      	bhi.n	800fc0a <ip_AddrTable_get_cell_value_core+0x6e>
 800fbb4:	a201      	add	r2, pc, #4	@ (adr r2, 800fbbc <ip_AddrTable_get_cell_value_core+0x20>)
 800fbb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbba:	bf00      	nop
 800fbbc:	0800fbd1 	.word	0x0800fbd1
 800fbc0:	0800fbdd 	.word	0x0800fbdd
 800fbc4:	0800fbed 	.word	0x0800fbed
 800fbc8:	0800fbf9 	.word	0x0800fbf9
 800fbcc:	0800fc01 	.word	0x0800fc01
  case 1: /* ipAdEntAddr */
    value->u32 = netif_ip4_addr(netif)->addr;
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	3304      	adds	r3, #4
 800fbd4:	681a      	ldr	r2, [r3, #0]
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	601a      	str	r2, [r3, #0]
    break;
 800fbda:	e018      	b.n	800fc0e <ip_AddrTable_get_cell_value_core+0x72>
  case 2: /* ipAdEntIfIndex */
    value->u32 = netif_to_num(netif);
 800fbdc:	68f8      	ldr	r0, [r7, #12]
 800fbde:	f7fe febf 	bl	800e960 <netif_to_num>
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	461a      	mov	r2, r3
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	601a      	str	r2, [r3, #0]
    break;
 800fbea:	e010      	b.n	800fc0e <ip_AddrTable_get_cell_value_core+0x72>
  case 3: /* ipAdEntNetMask */
    value->u32 = netif_ip4_netmask(netif)->addr;
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	3308      	adds	r3, #8
 800fbf0:	681a      	ldr	r2, [r3, #0]
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	601a      	str	r2, [r3, #0]
    break;
 800fbf6:	e00a      	b.n	800fc0e <ip_AddrTable_get_cell_value_core+0x72>
  case 4: /* ipAdEntBcastAddr */
    /* lwIP oddity, there's no broadcast
       address in the netif we can rely on */
    value->u32 = IPADDR_BROADCAST & 1;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	2201      	movs	r2, #1
 800fbfc:	601a      	str	r2, [r3, #0]
    break;
 800fbfe:	e006      	b.n	800fc0e <ip_AddrTable_get_cell_value_core+0x72>
#if IP_REASSEMBLY
    /* @todo The theoretical maximum is IP_REASS_MAX_PBUFS * size of the pbufs,
     * but only if receiving one fragmented packet at a time.
     * The current solution is to calculate for 2 simultaneous packets...
     */
    value->u32 = (IP_HLEN + ((IP_REASS_MAX_PBUFS/2) *
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	f640 22fa 	movw	r2, #2810	@ 0xafa
 800fc06:	601a      	str	r2, [r3, #0]
#else
    /** @todo returning MTU would be a bad thing and
        returning a wild guess like '576' isn't good either */
    value->u32 = 0;
#endif
    break;
 800fc08:	e001      	b.n	800fc0e <ip_AddrTable_get_cell_value_core+0x72>
  default:
    return SNMP_ERR_NOSUCHINSTANCE;
 800fc0a:	23f1      	movs	r3, #241	@ 0xf1
 800fc0c:	e000      	b.n	800fc10 <ip_AddrTable_get_cell_value_core+0x74>
  }

  return SNMP_ERR_NOERROR;
 800fc0e:	2300      	movs	r3, #0
}
 800fc10:	4618      	mov	r0, r3
 800fc12:	3710      	adds	r7, #16
 800fc14:	46bd      	mov	sp, r7
 800fc16:	bd80      	pop	{r7, pc}

0800fc18 <ip_AddrTable_get_cell_value>:

static snmp_err_t
ip_AddrTable_get_cell_value(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, union snmp_variant_value* value, u32_t* value_len)
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b086      	sub	sp, #24
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	60f8      	str	r0, [r7, #12]
 800fc20:	60b9      	str	r1, [r7, #8]
 800fc22:	603b      	str	r3, [r7, #0]
 800fc24:	4613      	mov	r3, r2
 800fc26:	71fb      	strb	r3, [r7, #7]
  ip4_addr_t ip;
  struct netif *netif;

  /* check if incoming OID length and if values are in plausible range */
  if (!snmp_oid_in_range(row_oid, row_oid_len, ip_AddrTable_oid_ranges, LWIP_ARRAYSIZE(ip_AddrTable_oid_ranges))) {
 800fc28:	79f9      	ldrb	r1, [r7, #7]
 800fc2a:	2304      	movs	r3, #4
 800fc2c:	4a15      	ldr	r2, [pc, #84]	@ (800fc84 <ip_AddrTable_get_cell_value+0x6c>)
 800fc2e:	68b8      	ldr	r0, [r7, #8]
 800fc30:	f7ff fbba 	bl	800f3a8 <snmp_oid_in_range>
 800fc34:	4603      	mov	r3, r0
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d101      	bne.n	800fc3e <ip_AddrTable_get_cell_value+0x26>
    return SNMP_ERR_NOSUCHINSTANCE;
 800fc3a:	23f1      	movs	r3, #241	@ 0xf1
 800fc3c:	e01e      	b.n	800fc7c <ip_AddrTable_get_cell_value+0x64>
  }

  /* get IP from incoming OID */
  snmp_oid_to_ip4(&row_oid[0], &ip); /* we know it succeeds because of oid_in_range check above */
 800fc3e:	f107 0310 	add.w	r3, r7, #16
 800fc42:	4619      	mov	r1, r3
 800fc44:	68b8      	ldr	r0, [r7, #8]
 800fc46:	f7fe fc61 	bl	800e50c <snmp_oid_to_ip4>

  /* find netif with requested ip */
  netif = netif_list;
 800fc4a:	4b0f      	ldr	r3, [pc, #60]	@ (800fc88 <ip_AddrTable_get_cell_value+0x70>)
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	617b      	str	r3, [r7, #20]
  while (netif != NULL) {
 800fc50:	e010      	b.n	800fc74 <ip_AddrTable_get_cell_value+0x5c>
    if (ip4_addr_cmp(&ip, netif_ip4_addr(netif))) {
 800fc52:	693a      	ldr	r2, [r7, #16]
 800fc54:	697b      	ldr	r3, [r7, #20]
 800fc56:	3304      	adds	r3, #4
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	429a      	cmp	r2, r3
 800fc5c:	d107      	bne.n	800fc6e <ip_AddrTable_get_cell_value+0x56>
      /* fill in object properties */
      return ip_AddrTable_get_cell_value_core(netif, column, value, value_len);
 800fc5e:	6a3b      	ldr	r3, [r7, #32]
 800fc60:	683a      	ldr	r2, [r7, #0]
 800fc62:	68f9      	ldr	r1, [r7, #12]
 800fc64:	6978      	ldr	r0, [r7, #20]
 800fc66:	f7ff ff99 	bl	800fb9c <ip_AddrTable_get_cell_value_core>
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	e006      	b.n	800fc7c <ip_AddrTable_get_cell_value+0x64>
    }

    netif = netif->next;
 800fc6e:	697b      	ldr	r3, [r7, #20]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	617b      	str	r3, [r7, #20]
  while (netif != NULL) {
 800fc74:	697b      	ldr	r3, [r7, #20]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d1eb      	bne.n	800fc52 <ip_AddrTable_get_cell_value+0x3a>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 800fc7a:	23f1      	movs	r3, #241	@ 0xf1
}
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	3718      	adds	r7, #24
 800fc80:	46bd      	mov	sp, r7
 800fc82:	bd80      	pop	{r7, pc}
 800fc84:	0803002c 	.word	0x0803002c
 800fc88:	2000be7c 	.word	0x2000be7c

0800fc8c <ip_AddrTable_get_next_cell_instance_and_value>:

static snmp_err_t
ip_AddrTable_get_next_cell_instance_and_value(const u32_t* column, struct snmp_obj_id* row_oid, union snmp_variant_value* value, u32_t* value_len)
{
 800fc8c:	b590      	push	{r4, r7, lr}
 800fc8e:	b095      	sub	sp, #84	@ 0x54
 800fc90:	af02      	add	r7, sp, #8
 800fc92:	60f8      	str	r0, [r7, #12]
 800fc94:	60b9      	str	r1, [r7, #8]
 800fc96:	607a      	str	r2, [r7, #4]
 800fc98:	603b      	str	r3, [r7, #0]
  struct netif *netif;
  struct snmp_next_oid_state state;
  u32_t result_temp[LWIP_ARRAYSIZE(ip_AddrTable_oid_ranges)];

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(ip_AddrTable_oid_ranges));
 800fc9a:	68bb      	ldr	r3, [r7, #8]
 800fc9c:	1d19      	adds	r1, r3, #4
 800fc9e:	68bb      	ldr	r3, [r7, #8]
 800fca0:	781a      	ldrb	r2, [r3, #0]
 800fca2:	f107 0320 	add.w	r3, r7, #32
 800fca6:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800fcaa:	2404      	movs	r4, #4
 800fcac:	9400      	str	r4, [sp, #0]
 800fcae:	f7ff fb16 	bl	800f2de <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  netif = netif_list;
 800fcb2:	4b19      	ldr	r3, [pc, #100]	@ (800fd18 <ip_AddrTable_get_next_cell_instance_and_value+0x8c>)
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	647b      	str	r3, [r7, #68]	@ 0x44
  while (netif != NULL) {
 800fcb8:	e012      	b.n	800fce0 <ip_AddrTable_get_next_cell_instance_and_value+0x54>
    u32_t test_oid[LWIP_ARRAYSIZE(ip_AddrTable_oid_ranges)];
    snmp_ip4_to_oid(netif_ip4_addr(netif), &test_oid[0]);
 800fcba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fcbc:	3304      	adds	r3, #4
 800fcbe:	f107 0210 	add.w	r2, r7, #16
 800fcc2:	4611      	mov	r1, r2
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	f7fe fca9 	bl	800e61c <snmp_ip4_to_oid>

    /* check generated OID: is it a candidate for the next one? */
    snmp_next_oid_check(&state, test_oid, LWIP_ARRAYSIZE(ip_AddrTable_oid_ranges), netif);
 800fcca:	f107 0110 	add.w	r1, r7, #16
 800fcce:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800fcd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fcd4:	2204      	movs	r2, #4
 800fcd6:	f7ff fb21 	bl	800f31c <snmp_next_oid_check>

    netif = netif->next;
 800fcda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	647b      	str	r3, [r7, #68]	@ 0x44
  while (netif != NULL) {
 800fce0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d1e9      	bne.n	800fcba <ip_AddrTable_get_next_cell_instance_and_value+0x2e>
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 800fce6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d10e      	bne.n	800fd0c <ip_AddrTable_get_next_cell_instance_and_value+0x80>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 800fcee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcf0:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 800fcf4:	4619      	mov	r1, r3
 800fcf6:	68b8      	ldr	r0, [r7, #8]
 800fcf8:	f7fe fd6e 	bl	800e7d8 <snmp_oid_assign>
    /* fill in object properties */
    return ip_AddrTable_get_cell_value_core((struct netif*)state.reference, column, value, value_len);
 800fcfc:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800fcfe:	683b      	ldr	r3, [r7, #0]
 800fd00:	687a      	ldr	r2, [r7, #4]
 800fd02:	68f9      	ldr	r1, [r7, #12]
 800fd04:	f7ff ff4a 	bl	800fb9c <ip_AddrTable_get_cell_value_core>
 800fd08:	4603      	mov	r3, r0
 800fd0a:	e000      	b.n	800fd0e <ip_AddrTable_get_next_cell_instance_and_value+0x82>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 800fd0c:	23f1      	movs	r3, #241	@ 0xf1
}
 800fd0e:	4618      	mov	r0, r3
 800fd10:	374c      	adds	r7, #76	@ 0x4c
 800fd12:	46bd      	mov	sp, r7
 800fd14:	bd90      	pop	{r4, r7, pc}
 800fd16:	bf00      	nop
 800fd18:	2000be7c 	.word	0x2000be7c

0800fd1c <ip_RouteTable_get_cell_value_core>:
  { 0, 0xff }, /* IP D */
};

static snmp_err_t
ip_RouteTable_get_cell_value_core(struct netif *netif, u8_t default_route, const u32_t* column, union snmp_variant_value* value, u32_t* value_len)
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b086      	sub	sp, #24
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	60f8      	str	r0, [r7, #12]
 800fd24:	607a      	str	r2, [r7, #4]
 800fd26:	603b      	str	r3, [r7, #0]
 800fd28:	460b      	mov	r3, r1
 800fd2a:	72fb      	strb	r3, [r7, #11]
  switch (*column) {
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	3b01      	subs	r3, #1
 800fd32:	2b0c      	cmp	r3, #12
 800fd34:	f200 8089 	bhi.w	800fe4a <ip_RouteTable_get_cell_value_core+0x12e>
 800fd38:	a201      	add	r2, pc, #4	@ (adr r2, 800fd40 <ip_RouteTable_get_cell_value_core+0x24>)
 800fd3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd3e:	bf00      	nop
 800fd40:	0800fd75 	.word	0x0800fd75
 800fd44:	0800fd9d 	.word	0x0800fd9d
 800fd48:	0800fdad 	.word	0x0800fdad
 800fd4c:	0800fdc3 	.word	0x0800fdc3
 800fd50:	0800fdc3 	.word	0x0800fdc3
 800fd54:	0800fdc3 	.word	0x0800fdc3
 800fd58:	0800fdcd 	.word	0x0800fdcd
 800fd5c:	0800fdeb 	.word	0x0800fdeb
 800fd60:	0800fe01 	.word	0x0800fe01
 800fd64:	0800fe09 	.word	0x0800fe09
 800fd68:	0800fe11 	.word	0x0800fe11
 800fd6c:	0800fe2d 	.word	0x0800fe2d
 800fd70:	0800fe37 	.word	0x0800fe37
  case 1: /* ipRouteDest */
    if (default_route) {
 800fd74:	7afb      	ldrb	r3, [r7, #11]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d004      	beq.n	800fd84 <ip_RouteTable_get_cell_value_core+0x68>
       /* default rte has 0.0.0.0 dest */
      value->u32 = IP4_ADDR_ANY4->addr;
 800fd7a:	4b37      	ldr	r3, [pc, #220]	@ (800fe58 <ip_RouteTable_get_cell_value_core+0x13c>)
 800fd7c:	681a      	ldr	r2, [r3, #0]
 800fd7e:	683b      	ldr	r3, [r7, #0]
 800fd80:	601a      	str	r2, [r3, #0]
      /* netifs have netaddress dest */
      ip4_addr_t tmp;
      ip4_addr_get_network(&tmp, netif_ip4_addr(netif), netif_ip4_netmask(netif));
      value->u32 = tmp.addr;
    }
    break;
 800fd82:	e064      	b.n	800fe4e <ip_RouteTable_get_cell_value_core+0x132>
      ip4_addr_get_network(&tmp, netif_ip4_addr(netif), netif_ip4_netmask(netif));
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	3304      	adds	r3, #4
 800fd88:	681a      	ldr	r2, [r3, #0]
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	3308      	adds	r3, #8
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	4013      	ands	r3, r2
 800fd92:	617b      	str	r3, [r7, #20]
      value->u32 = tmp.addr;
 800fd94:	697a      	ldr	r2, [r7, #20]
 800fd96:	683b      	ldr	r3, [r7, #0]
 800fd98:	601a      	str	r2, [r3, #0]
    break;
 800fd9a:	e058      	b.n	800fe4e <ip_RouteTable_get_cell_value_core+0x132>
  case 2: /* ipRouteIfIndex */
    value->u32 = netif_to_num(netif);
 800fd9c:	68f8      	ldr	r0, [r7, #12]
 800fd9e:	f7fe fddf 	bl	800e960 <netif_to_num>
 800fda2:	4603      	mov	r3, r0
 800fda4:	461a      	mov	r2, r3
 800fda6:	683b      	ldr	r3, [r7, #0]
 800fda8:	601a      	str	r2, [r3, #0]
    break;
 800fdaa:	e050      	b.n	800fe4e <ip_RouteTable_get_cell_value_core+0x132>
  case 3: /* ipRouteMetric1 */
    if (default_route) {
 800fdac:	7afb      	ldrb	r3, [r7, #11]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d003      	beq.n	800fdba <ip_RouteTable_get_cell_value_core+0x9e>
      value->s32 = 1; /* default */
 800fdb2:	683b      	ldr	r3, [r7, #0]
 800fdb4:	2201      	movs	r2, #1
 800fdb6:	601a      	str	r2, [r3, #0]
    } else {
      value->s32 = 0; /* normal */
    }
    break;
 800fdb8:	e049      	b.n	800fe4e <ip_RouteTable_get_cell_value_core+0x132>
      value->s32 = 0; /* normal */
 800fdba:	683b      	ldr	r3, [r7, #0]
 800fdbc:	2200      	movs	r2, #0
 800fdbe:	601a      	str	r2, [r3, #0]
    break;
 800fdc0:	e045      	b.n	800fe4e <ip_RouteTable_get_cell_value_core+0x132>
  case 4: /* ipRouteMetric2 */
  case 5: /* ipRouteMetric3 */
  case 6: /* ipRouteMetric4 */
    value->s32 = -1; /* none */
 800fdc2:	683b      	ldr	r3, [r7, #0]
 800fdc4:	f04f 32ff 	mov.w	r2, #4294967295
 800fdc8:	601a      	str	r2, [r3, #0]
    break;
 800fdca:	e040      	b.n	800fe4e <ip_RouteTable_get_cell_value_core+0x132>
  case 7: /* ipRouteNextHop */
    if (default_route) {
 800fdcc:	7afb      	ldrb	r3, [r7, #11]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d005      	beq.n	800fdde <ip_RouteTable_get_cell_value_core+0xc2>
      /* default rte: gateway */
      value->u32 = netif_ip4_gw(netif)->addr;
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	330c      	adds	r3, #12
 800fdd6:	681a      	ldr	r2, [r3, #0]
 800fdd8:	683b      	ldr	r3, [r7, #0]
 800fdda:	601a      	str	r2, [r3, #0]
    } else {
      /* other rtes: netif ip_addr  */
      value->u32 = netif_ip4_addr(netif)->addr;
    }
    break;
 800fddc:	e037      	b.n	800fe4e <ip_RouteTable_get_cell_value_core+0x132>
      value->u32 = netif_ip4_addr(netif)->addr;
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	3304      	adds	r3, #4
 800fde2:	681a      	ldr	r2, [r3, #0]
 800fde4:	683b      	ldr	r3, [r7, #0]
 800fde6:	601a      	str	r2, [r3, #0]
    break;
 800fde8:	e031      	b.n	800fe4e <ip_RouteTable_get_cell_value_core+0x132>
  case 8: /* ipRouteType */
    if (default_route) {
 800fdea:	7afb      	ldrb	r3, [r7, #11]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d003      	beq.n	800fdf8 <ip_RouteTable_get_cell_value_core+0xdc>
      /* default rte is indirect */
      value->u32 = 4; /* indirect */
 800fdf0:	683b      	ldr	r3, [r7, #0]
 800fdf2:	2204      	movs	r2, #4
 800fdf4:	601a      	str	r2, [r3, #0]
    } else {
      /* other rtes are direct */
      value->u32 = 3; /* direct */
    }
    break;
 800fdf6:	e02a      	b.n	800fe4e <ip_RouteTable_get_cell_value_core+0x132>
      value->u32 = 3; /* direct */
 800fdf8:	683b      	ldr	r3, [r7, #0]
 800fdfa:	2203      	movs	r2, #3
 800fdfc:	601a      	str	r2, [r3, #0]
    break;
 800fdfe:	e026      	b.n	800fe4e <ip_RouteTable_get_cell_value_core+0x132>
  case 9: /* ipRouteProto */
    /* locally defined routes */
    value->u32 = 2; /* local */
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	2202      	movs	r2, #2
 800fe04:	601a      	str	r2, [r3, #0]
    break;
 800fe06:	e022      	b.n	800fe4e <ip_RouteTable_get_cell_value_core+0x132>
  case 10: /* ipRouteAge */
    /* @todo (sysuptime - timestamp last change) / 100 */
    value->u32 = 0;
 800fe08:	683b      	ldr	r3, [r7, #0]
 800fe0a:	2200      	movs	r2, #0
 800fe0c:	601a      	str	r2, [r3, #0]
    break;
 800fe0e:	e01e      	b.n	800fe4e <ip_RouteTable_get_cell_value_core+0x132>
  case 11: /* ipRouteMask */
    if (default_route) {
 800fe10:	7afb      	ldrb	r3, [r7, #11]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d004      	beq.n	800fe20 <ip_RouteTable_get_cell_value_core+0x104>
      /* default rte use 0.0.0.0 mask */
      value->u32 = IP4_ADDR_ANY4->addr;
 800fe16:	4b10      	ldr	r3, [pc, #64]	@ (800fe58 <ip_RouteTable_get_cell_value_core+0x13c>)
 800fe18:	681a      	ldr	r2, [r3, #0]
 800fe1a:	683b      	ldr	r3, [r7, #0]
 800fe1c:	601a      	str	r2, [r3, #0]
    } else {
      /* other rtes use netmask */
      value->u32 = netif_ip4_netmask(netif)->addr;
    }
    break;
 800fe1e:	e016      	b.n	800fe4e <ip_RouteTable_get_cell_value_core+0x132>
      value->u32 = netif_ip4_netmask(netif)->addr;
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	3308      	adds	r3, #8
 800fe24:	681a      	ldr	r2, [r3, #0]
 800fe26:	683b      	ldr	r3, [r7, #0]
 800fe28:	601a      	str	r2, [r3, #0]
    break;
 800fe2a:	e010      	b.n	800fe4e <ip_RouteTable_get_cell_value_core+0x132>
  case 12: /* ipRouteMetric5 */
    value->s32 = -1; /* none */
 800fe2c:	683b      	ldr	r3, [r7, #0]
 800fe2e:	f04f 32ff 	mov.w	r2, #4294967295
 800fe32:	601a      	str	r2, [r3, #0]
    break;
 800fe34:	e00b      	b.n	800fe4e <ip_RouteTable_get_cell_value_core+0x132>
  case 13: /* ipRouteInfo */
    value->const_ptr = snmp_zero_dot_zero.id;
 800fe36:	4b09      	ldr	r3, [pc, #36]	@ (800fe5c <ip_RouteTable_get_cell_value_core+0x140>)
 800fe38:	685a      	ldr	r2, [r3, #4]
 800fe3a:	683b      	ldr	r3, [r7, #0]
 800fe3c:	601a      	str	r2, [r3, #0]
    *value_len = snmp_zero_dot_zero.len * sizeof(u32_t);
 800fe3e:	4b07      	ldr	r3, [pc, #28]	@ (800fe5c <ip_RouteTable_get_cell_value_core+0x140>)
 800fe40:	781b      	ldrb	r3, [r3, #0]
 800fe42:	009a      	lsls	r2, r3, #2
 800fe44:	6a3b      	ldr	r3, [r7, #32]
 800fe46:	601a      	str	r2, [r3, #0]
    break;
 800fe48:	e001      	b.n	800fe4e <ip_RouteTable_get_cell_value_core+0x132>
  default:
    return SNMP_ERR_NOSUCHINSTANCE;
 800fe4a:	23f1      	movs	r3, #241	@ 0xf1
 800fe4c:	e000      	b.n	800fe50 <ip_RouteTable_get_cell_value_core+0x134>
  }

  return SNMP_ERR_NOERROR;
 800fe4e:	2300      	movs	r3, #0
}
 800fe50:	4618      	mov	r0, r3
 800fe52:	3718      	adds	r7, #24
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bd80      	pop	{r7, pc}
 800fe58:	08030cf4 	.word	0x08030cf4
 800fe5c:	0802fdbc 	.word	0x0802fdbc

0800fe60 <ip_RouteTable_get_cell_value>:

static snmp_err_t
ip_RouteTable_get_cell_value(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, union snmp_variant_value* value, u32_t* value_len)
{
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b08a      	sub	sp, #40	@ 0x28
 800fe64:	af02      	add	r7, sp, #8
 800fe66:	60f8      	str	r0, [r7, #12]
 800fe68:	60b9      	str	r1, [r7, #8]
 800fe6a:	603b      	str	r3, [r7, #0]
 800fe6c:	4613      	mov	r3, r2
 800fe6e:	71fb      	strb	r3, [r7, #7]
  ip4_addr_t test_ip;
  struct netif *netif;

  /* check if incoming OID length and if values are in plausible range */
  if (!snmp_oid_in_range(row_oid, row_oid_len, ip_RouteTable_oid_ranges, LWIP_ARRAYSIZE(ip_RouteTable_oid_ranges))) {
 800fe70:	79f9      	ldrb	r1, [r7, #7]
 800fe72:	2304      	movs	r3, #4
 800fe74:	4a22      	ldr	r2, [pc, #136]	@ (800ff00 <ip_RouteTable_get_cell_value+0xa0>)
 800fe76:	68b8      	ldr	r0, [r7, #8]
 800fe78:	f7ff fa96 	bl	800f3a8 <snmp_oid_in_range>
 800fe7c:	4603      	mov	r3, r0
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d101      	bne.n	800fe86 <ip_RouteTable_get_cell_value+0x26>
    return SNMP_ERR_NOSUCHINSTANCE;
 800fe82:	23f1      	movs	r3, #241	@ 0xf1
 800fe84:	e038      	b.n	800fef8 <ip_RouteTable_get_cell_value+0x98>
  }

  /* get IP and port from incoming OID */
  snmp_oid_to_ip4(&row_oid[0], &test_ip); /* we know it succeeds because of oid_in_range check above */
 800fe86:	f107 0318 	add.w	r3, r7, #24
 800fe8a:	4619      	mov	r1, r3
 800fe8c:	68b8      	ldr	r0, [r7, #8]
 800fe8e:	f7fe fb3d 	bl	800e50c <snmp_oid_to_ip4>

  /* default route is on default netif */
  if (ip4_addr_isany_val(test_ip) && (netif_default != NULL)) {
 800fe92:	69bb      	ldr	r3, [r7, #24]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d10e      	bne.n	800feb6 <ip_RouteTable_get_cell_value+0x56>
 800fe98:	4b1a      	ldr	r3, [pc, #104]	@ (800ff04 <ip_RouteTable_get_cell_value+0xa4>)
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d00a      	beq.n	800feb6 <ip_RouteTable_get_cell_value+0x56>
    /* fill in object properties */
    return ip_RouteTable_get_cell_value_core(netif_default, 1, column, value, value_len);
 800fea0:	4b18      	ldr	r3, [pc, #96]	@ (800ff04 <ip_RouteTable_get_cell_value+0xa4>)
 800fea2:	6818      	ldr	r0, [r3, #0]
 800fea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fea6:	9300      	str	r3, [sp, #0]
 800fea8:	683b      	ldr	r3, [r7, #0]
 800feaa:	68fa      	ldr	r2, [r7, #12]
 800feac:	2101      	movs	r1, #1
 800feae:	f7ff ff35 	bl	800fd1c <ip_RouteTable_get_cell_value_core>
 800feb2:	4603      	mov	r3, r0
 800feb4:	e020      	b.n	800fef8 <ip_RouteTable_get_cell_value+0x98>
  }

  /* find netif with requested route */
  netif = netif_list;
 800feb6:	4b14      	ldr	r3, [pc, #80]	@ (800ff08 <ip_RouteTable_get_cell_value+0xa8>)
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	61fb      	str	r3, [r7, #28]
  while (netif != NULL) {
 800febc:	e018      	b.n	800fef0 <ip_RouteTable_get_cell_value+0x90>
    ip4_addr_t dst;
    ip4_addr_get_network(&dst, netif_ip4_addr(netif), netif_ip4_netmask(netif));
 800febe:	69fb      	ldr	r3, [r7, #28]
 800fec0:	3304      	adds	r3, #4
 800fec2:	681a      	ldr	r2, [r3, #0]
 800fec4:	69fb      	ldr	r3, [r7, #28]
 800fec6:	3308      	adds	r3, #8
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	4013      	ands	r3, r2
 800fecc:	617b      	str	r3, [r7, #20]

    if (ip4_addr_cmp(&dst, &test_ip)) {
 800fece:	697a      	ldr	r2, [r7, #20]
 800fed0:	69bb      	ldr	r3, [r7, #24]
 800fed2:	429a      	cmp	r2, r3
 800fed4:	d109      	bne.n	800feea <ip_RouteTable_get_cell_value+0x8a>
      /* fill in object properties */
      return ip_RouteTable_get_cell_value_core(netif, 0, column, value, value_len);
 800fed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fed8:	9300      	str	r3, [sp, #0]
 800feda:	683b      	ldr	r3, [r7, #0]
 800fedc:	68fa      	ldr	r2, [r7, #12]
 800fede:	2100      	movs	r1, #0
 800fee0:	69f8      	ldr	r0, [r7, #28]
 800fee2:	f7ff ff1b 	bl	800fd1c <ip_RouteTable_get_cell_value_core>
 800fee6:	4603      	mov	r3, r0
 800fee8:	e006      	b.n	800fef8 <ip_RouteTable_get_cell_value+0x98>
    }

    netif = netif->next;
 800feea:	69fb      	ldr	r3, [r7, #28]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	61fb      	str	r3, [r7, #28]
  while (netif != NULL) {
 800fef0:	69fb      	ldr	r3, [r7, #28]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d1e3      	bne.n	800febe <ip_RouteTable_get_cell_value+0x5e>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 800fef6:	23f1      	movs	r3, #241	@ 0xf1
}
 800fef8:	4618      	mov	r0, r3
 800fefa:	3720      	adds	r7, #32
 800fefc:	46bd      	mov	sp, r7
 800fefe:	bd80      	pop	{r7, pc}
 800ff00:	0803004c 	.word	0x0803004c
 800ff04:	2000be80 	.word	0x2000be80
 800ff08:	2000be7c 	.word	0x2000be7c

0800ff0c <ip_RouteTable_get_next_cell_instance_and_value>:

static snmp_err_t
ip_RouteTable_get_next_cell_instance_and_value(const u32_t* column, struct snmp_obj_id* row_oid, union snmp_variant_value* value, u32_t* value_len)
{
 800ff0c:	b590      	push	{r4, r7, lr}
 800ff0e:	b097      	sub	sp, #92	@ 0x5c
 800ff10:	af02      	add	r7, sp, #8
 800ff12:	60f8      	str	r0, [r7, #12]
 800ff14:	60b9      	str	r1, [r7, #8]
 800ff16:	607a      	str	r2, [r7, #4]
 800ff18:	603b      	str	r3, [r7, #0]
  struct snmp_next_oid_state state;
  u32_t result_temp[LWIP_ARRAYSIZE(ip_RouteTable_oid_ranges)];
  u32_t test_oid[LWIP_ARRAYSIZE(ip_RouteTable_oid_ranges)];

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(ip_RouteTable_oid_ranges));
 800ff1a:	68bb      	ldr	r3, [r7, #8]
 800ff1c:	1d19      	adds	r1, r3, #4
 800ff1e:	68bb      	ldr	r3, [r7, #8]
 800ff20:	781a      	ldrb	r2, [r3, #0]
 800ff22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ff26:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800ff2a:	2404      	movs	r4, #4
 800ff2c:	9400      	str	r4, [sp, #0]
 800ff2e:	f7ff f9d6 	bl	800f2de <snmp_next_oid_init>

  /* check default route */
  if (netif_default != NULL) {
 800ff32:	4b30      	ldr	r3, [pc, #192]	@ (800fff4 <ip_RouteTable_get_next_cell_instance_and_value+0xe8>)
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d00e      	beq.n	800ff58 <ip_RouteTable_get_next_cell_instance_and_value+0x4c>
    snmp_ip4_to_oid(IP4_ADDR_ANY4, &test_oid[0]);
 800ff3a:	f107 0318 	add.w	r3, r7, #24
 800ff3e:	4619      	mov	r1, r3
 800ff40:	482d      	ldr	r0, [pc, #180]	@ (800fff8 <ip_RouteTable_get_next_cell_instance_and_value+0xec>)
 800ff42:	f7fe fb6b 	bl	800e61c <snmp_ip4_to_oid>
    snmp_next_oid_check(&state, test_oid, LWIP_ARRAYSIZE(ip_RouteTable_oid_ranges), netif_default);
 800ff46:	4b2b      	ldr	r3, [pc, #172]	@ (800fff4 <ip_RouteTable_get_next_cell_instance_and_value+0xe8>)
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	f107 0118 	add.w	r1, r7, #24
 800ff4e:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800ff52:	2204      	movs	r2, #4
 800ff54:	f7ff f9e2 	bl	800f31c <snmp_next_oid_check>
  }

  /* iterate over all possible OIDs to find the next one */
  netif = netif_list;
 800ff58:	4b28      	ldr	r3, [pc, #160]	@ (800fffc <ip_RouteTable_get_next_cell_instance_and_value+0xf0>)
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while (netif != NULL) {
 800ff5e:	e01d      	b.n	800ff9c <ip_RouteTable_get_next_cell_instance_and_value+0x90>
    ip4_addr_t dst;
    ip4_addr_get_network(&dst, netif_ip4_addr(netif), netif_ip4_netmask(netif));
 800ff60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ff62:	3304      	adds	r3, #4
 800ff64:	681a      	ldr	r2, [r3, #0]
 800ff66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ff68:	3308      	adds	r3, #8
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	4013      	ands	r3, r2
 800ff6e:	617b      	str	r3, [r7, #20]

    /* check generated OID: is it a candidate for the next one? */
    if (!ip4_addr_isany_val(dst)) {
 800ff70:	697b      	ldr	r3, [r7, #20]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d00f      	beq.n	800ff96 <ip_RouteTable_get_next_cell_instance_and_value+0x8a>
      snmp_ip4_to_oid(&dst, &test_oid[0]);
 800ff76:	f107 0218 	add.w	r2, r7, #24
 800ff7a:	f107 0314 	add.w	r3, r7, #20
 800ff7e:	4611      	mov	r1, r2
 800ff80:	4618      	mov	r0, r3
 800ff82:	f7fe fb4b 	bl	800e61c <snmp_ip4_to_oid>
      snmp_next_oid_check(&state, test_oid, LWIP_ARRAYSIZE(ip_RouteTable_oid_ranges), netif);
 800ff86:	f107 0118 	add.w	r1, r7, #24
 800ff8a:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800ff8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ff90:	2204      	movs	r2, #4
 800ff92:	f7ff f9c3 	bl	800f31c <snmp_next_oid_check>
    }

    netif = netif->next;
 800ff96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while (netif != NULL) {
 800ff9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d1de      	bne.n	800ff60 <ip_RouteTable_get_next_cell_instance_and_value+0x54>
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 800ffa2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d11e      	bne.n	800ffe8 <ip_RouteTable_get_next_cell_instance_and_value+0xdc>
    ip4_addr_t dst;
    snmp_oid_to_ip4(&result_temp[0], &dst);
 800ffaa:	f107 0210 	add.w	r2, r7, #16
 800ffae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ffb2:	4611      	mov	r1, r2
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	f7fe faa9 	bl	800e50c <snmp_oid_to_ip4>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 800ffba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ffbc:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 800ffc0:	4619      	mov	r1, r3
 800ffc2:	68b8      	ldr	r0, [r7, #8]
 800ffc4:	f7fe fc08 	bl	800e7d8 <snmp_oid_assign>
    /* fill in object properties */
    return ip_RouteTable_get_cell_value_core((struct netif*)state.reference, ip4_addr_isany_val(dst), column, value, value_len);
 800ffc8:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800ffca:	693b      	ldr	r3, [r7, #16]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	bf0c      	ite	eq
 800ffd0:	2301      	moveq	r3, #1
 800ffd2:	2300      	movne	r3, #0
 800ffd4:	b2db      	uxtb	r3, r3
 800ffd6:	4619      	mov	r1, r3
 800ffd8:	683b      	ldr	r3, [r7, #0]
 800ffda:	9300      	str	r3, [sp, #0]
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	68fa      	ldr	r2, [r7, #12]
 800ffe0:	f7ff fe9c 	bl	800fd1c <ip_RouteTable_get_cell_value_core>
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	e000      	b.n	800ffea <ip_RouteTable_get_next_cell_instance_and_value+0xde>
  } else {
    /* not found */
    return SNMP_ERR_NOSUCHINSTANCE;
 800ffe8:	23f1      	movs	r3, #241	@ 0xf1
  }
}
 800ffea:	4618      	mov	r0, r3
 800ffec:	3754      	adds	r7, #84	@ 0x54
 800ffee:	46bd      	mov	sp, r7
 800fff0:	bd90      	pop	{r4, r7, pc}
 800fff2:	bf00      	nop
 800fff4:	2000be80 	.word	0x2000be80
 800fff8:	08030cf4 	.word	0x08030cf4
 800fffc:	2000be7c 	.word	0x2000be7c

08010000 <ip_NetToMediaTable_get_cell_value_core>:
  { 0, 0xff }  /* IP D    */
};

static snmp_err_t
ip_NetToMediaTable_get_cell_value_core(u8_t arp_table_index, const u32_t* column, union snmp_variant_value* value, u32_t* value_len)
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b088      	sub	sp, #32
 8010004:	af00      	add	r7, sp, #0
 8010006:	60b9      	str	r1, [r7, #8]
 8010008:	607a      	str	r2, [r7, #4]
 801000a:	603b      	str	r3, [r7, #0]
 801000c:	4603      	mov	r3, r0
 801000e:	73fb      	strb	r3, [r7, #15]
  ip4_addr_t *ip;
  struct netif *netif;
  struct eth_addr *ethaddr;

  etharp_get_entry(arp_table_index, &ip, &netif, &ethaddr);
 8010010:	f107 0314 	add.w	r3, r7, #20
 8010014:	f107 0218 	add.w	r2, r7, #24
 8010018:	f107 011c 	add.w	r1, r7, #28
 801001c:	7bf8      	ldrb	r0, [r7, #15]
 801001e:	f00e fc2f 	bl	801e880 <etharp_get_entry>

  /* value */
  switch (*column) {
 8010022:	68bb      	ldr	r3, [r7, #8]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	3b01      	subs	r3, #1
 8010028:	2b03      	cmp	r3, #3
 801002a:	d824      	bhi.n	8010076 <ip_NetToMediaTable_get_cell_value_core+0x76>
 801002c:	a201      	add	r2, pc, #4	@ (adr r2, 8010034 <ip_NetToMediaTable_get_cell_value_core+0x34>)
 801002e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010032:	bf00      	nop
 8010034:	08010045 	.word	0x08010045
 8010038:	08010057 	.word	0x08010057
 801003c:	08010065 	.word	0x08010065
 8010040:	0801006f 	.word	0x0801006f
  case 1: /* atIfIndex / ipNetToMediaIfIndex */
    value->u32 = netif_to_num(netif);
 8010044:	69bb      	ldr	r3, [r7, #24]
 8010046:	4618      	mov	r0, r3
 8010048:	f7fe fc8a 	bl	800e960 <netif_to_num>
 801004c:	4603      	mov	r3, r0
 801004e:	461a      	mov	r2, r3
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	601a      	str	r2, [r3, #0]
    break;
 8010054:	e011      	b.n	801007a <ip_NetToMediaTable_get_cell_value_core+0x7a>
  case 2: /* atPhysAddress / ipNetToMediaPhysAddress */
    value->ptr = ethaddr;
 8010056:	697a      	ldr	r2, [r7, #20]
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	601a      	str	r2, [r3, #0]
    *value_len = sizeof(*ethaddr);
 801005c:	683b      	ldr	r3, [r7, #0]
 801005e:	2206      	movs	r2, #6
 8010060:	601a      	str	r2, [r3, #0]
    break;
 8010062:	e00a      	b.n	801007a <ip_NetToMediaTable_get_cell_value_core+0x7a>
  case 3: /* atNetAddress / ipNetToMediaNetAddress */
    value->u32 = ip->addr;
 8010064:	69fb      	ldr	r3, [r7, #28]
 8010066:	681a      	ldr	r2, [r3, #0]
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	601a      	str	r2, [r3, #0]
    break;
 801006c:	e005      	b.n	801007a <ip_NetToMediaTable_get_cell_value_core+0x7a>
  case 4: /* ipNetToMediaType */
    value->u32 = 3; /* dynamic*/
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	2203      	movs	r2, #3
 8010072:	601a      	str	r2, [r3, #0]
    break;
 8010074:	e001      	b.n	801007a <ip_NetToMediaTable_get_cell_value_core+0x7a>
  default:
    return SNMP_ERR_NOSUCHINSTANCE;
 8010076:	23f1      	movs	r3, #241	@ 0xf1
 8010078:	e000      	b.n	801007c <ip_NetToMediaTable_get_cell_value_core+0x7c>
  }

  return SNMP_ERR_NOERROR;
 801007a:	2300      	movs	r3, #0
}
 801007c:	4618      	mov	r0, r3
 801007e:	3720      	adds	r7, #32
 8010080:	46bd      	mov	sp, r7
 8010082:	bd80      	pop	{r7, pc}

08010084 <ip_NetToMediaTable_get_cell_value>:

static snmp_err_t
ip_NetToMediaTable_get_cell_value(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, union snmp_variant_value* value, u32_t* value_len)
{
 8010084:	b580      	push	{r7, lr}
 8010086:	b08a      	sub	sp, #40	@ 0x28
 8010088:	af00      	add	r7, sp, #0
 801008a:	60f8      	str	r0, [r7, #12]
 801008c:	60b9      	str	r1, [r7, #8]
 801008e:	603b      	str	r3, [r7, #0]
 8010090:	4613      	mov	r3, r2
 8010092:	71fb      	strb	r3, [r7, #7]
  ip4_addr_t ip_in;
  u8_t netif_index;
  u8_t i;

  /* check if incoming OID length and if values are in plausible range */
  if (!snmp_oid_in_range(row_oid, row_oid_len, ip_NetToMediaTable_oid_ranges, LWIP_ARRAYSIZE(ip_NetToMediaTable_oid_ranges))) {
 8010094:	79f9      	ldrb	r1, [r7, #7]
 8010096:	2305      	movs	r3, #5
 8010098:	4a25      	ldr	r2, [pc, #148]	@ (8010130 <ip_NetToMediaTable_get_cell_value+0xac>)
 801009a:	68b8      	ldr	r0, [r7, #8]
 801009c:	f7ff f984 	bl	800f3a8 <snmp_oid_in_range>
 80100a0:	4603      	mov	r3, r0
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d101      	bne.n	80100aa <ip_NetToMediaTable_get_cell_value+0x26>
    return SNMP_ERR_NOSUCHINSTANCE;
 80100a6:	23f1      	movs	r3, #241	@ 0xf1
 80100a8:	e03e      	b.n	8010128 <ip_NetToMediaTable_get_cell_value+0xa4>
  }

  /* get IP from incoming OID */
  netif_index = (u8_t)row_oid[0];
 80100aa:	68bb      	ldr	r3, [r7, #8]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  snmp_oid_to_ip4(&row_oid[1], &ip_in); /* we know it succeeds because of oid_in_range check above */
 80100b2:	68bb      	ldr	r3, [r7, #8]
 80100b4:	3304      	adds	r3, #4
 80100b6:	f107 0220 	add.w	r2, r7, #32
 80100ba:	4611      	mov	r1, r2
 80100bc:	4618      	mov	r0, r3
 80100be:	f7fe fa25 	bl	800e50c <snmp_oid_to_ip4>

  /* find requested entry */
  for (i=0; i<ARP_TABLE_SIZE; i++) {
 80100c2:	2300      	movs	r3, #0
 80100c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80100c8:	e029      	b.n	801011e <ip_NetToMediaTable_get_cell_value+0x9a>
    ip4_addr_t *ip;
    struct netif *netif;
    struct eth_addr *ethaddr;

    if (etharp_get_entry(i, &ip, &netif, &ethaddr)) {
 80100ca:	f107 0314 	add.w	r3, r7, #20
 80100ce:	f107 0218 	add.w	r2, r7, #24
 80100d2:	f107 011c 	add.w	r1, r7, #28
 80100d6:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80100da:	f00e fbd1 	bl	801e880 <etharp_get_entry>
 80100de:	4603      	mov	r3, r0
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d017      	beq.n	8010114 <ip_NetToMediaTable_get_cell_value+0x90>
      if ((netif_index == netif_to_num(netif)) && ip4_addr_cmp(&ip_in, ip)) {
 80100e4:	69bb      	ldr	r3, [r7, #24]
 80100e6:	4618      	mov	r0, r3
 80100e8:	f7fe fc3a 	bl	800e960 <netif_to_num>
 80100ec:	4603      	mov	r3, r0
 80100ee:	461a      	mov	r2, r3
 80100f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80100f4:	4293      	cmp	r3, r2
 80100f6:	d10d      	bne.n	8010114 <ip_NetToMediaTable_get_cell_value+0x90>
 80100f8:	6a3a      	ldr	r2, [r7, #32]
 80100fa:	69fb      	ldr	r3, [r7, #28]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	429a      	cmp	r2, r3
 8010100:	d108      	bne.n	8010114 <ip_NetToMediaTable_get_cell_value+0x90>
        /* fill in object properties */
        return ip_NetToMediaTable_get_cell_value_core(i, column, value, value_len);
 8010102:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8010106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010108:	683a      	ldr	r2, [r7, #0]
 801010a:	68f9      	ldr	r1, [r7, #12]
 801010c:	f7ff ff78 	bl	8010000 <ip_NetToMediaTable_get_cell_value_core>
 8010110:	4603      	mov	r3, r0
 8010112:	e009      	b.n	8010128 <ip_NetToMediaTable_get_cell_value+0xa4>
  for (i=0; i<ARP_TABLE_SIZE; i++) {
 8010114:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010118:	3301      	adds	r3, #1
 801011a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801011e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010122:	2b09      	cmp	r3, #9
 8010124:	d9d1      	bls.n	80100ca <ip_NetToMediaTable_get_cell_value+0x46>
      }
    }
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 8010126:	23f1      	movs	r3, #241	@ 0xf1
}
 8010128:	4618      	mov	r0, r3
 801012a:	3728      	adds	r7, #40	@ 0x28
 801012c:	46bd      	mov	sp, r7
 801012e:	bd80      	pop	{r7, pc}
 8010130:	0803006c 	.word	0x0803006c

08010134 <ip_NetToMediaTable_get_next_cell_instance_and_value>:

static snmp_err_t
ip_NetToMediaTable_get_next_cell_instance_and_value(const u32_t* column, struct snmp_obj_id* row_oid, union snmp_variant_value* value, u32_t* value_len)
{
 8010134:	b590      	push	{r4, r7, lr}
 8010136:	b09b      	sub	sp, #108	@ 0x6c
 8010138:	af02      	add	r7, sp, #8
 801013a:	60f8      	str	r0, [r7, #12]
 801013c:	60b9      	str	r1, [r7, #8]
 801013e:	607a      	str	r2, [r7, #4]
 8010140:	603b      	str	r3, [r7, #0]
  u8_t i;
  struct snmp_next_oid_state state;
  u32_t result_temp[LWIP_ARRAYSIZE(ip_NetToMediaTable_oid_ranges)];

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(ip_NetToMediaTable_oid_ranges));
 8010142:	68bb      	ldr	r3, [r7, #8]
 8010144:	1d19      	adds	r1, r3, #4
 8010146:	68bb      	ldr	r3, [r7, #8]
 8010148:	781a      	ldrb	r2, [r3, #0]
 801014a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801014e:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8010152:	2405      	movs	r4, #5
 8010154:	9400      	str	r4, [sp, #0]
 8010156:	f7ff f8c2 	bl	800f2de <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  for (i=0; i<ARP_TABLE_SIZE; i++) {
 801015a:	2300      	movs	r3, #0
 801015c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010160:	e028      	b.n	80101b4 <ip_NetToMediaTable_get_next_cell_instance_and_value+0x80>
    ip4_addr_t *ip;
    struct netif *netif;
    struct eth_addr *ethaddr;

    if (etharp_get_entry(i, &ip, &netif, &ethaddr)) {
 8010162:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010166:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801016a:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801016e:	f897 005f 	ldrb.w	r0, [r7, #95]	@ 0x5f
 8010172:	f00e fb85 	bl	801e880 <etharp_get_entry>
 8010176:	4603      	mov	r3, r0
 8010178:	2b00      	cmp	r3, #0
 801017a:	d016      	beq.n	80101aa <ip_NetToMediaTable_get_next_cell_instance_and_value+0x76>
      u32_t test_oid[LWIP_ARRAYSIZE(ip_NetToMediaTable_oid_ranges)];

      test_oid[0] = netif_to_num(netif);
 801017c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801017e:	4618      	mov	r0, r3
 8010180:	f7fe fbee 	bl	800e960 <netif_to_num>
 8010184:	4603      	mov	r3, r0
 8010186:	617b      	str	r3, [r7, #20]
      snmp_ip4_to_oid(ip, &test_oid[1]);
 8010188:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801018a:	f107 0314 	add.w	r3, r7, #20
 801018e:	3304      	adds	r3, #4
 8010190:	4619      	mov	r1, r3
 8010192:	4610      	mov	r0, r2
 8010194:	f7fe fa42 	bl	800e61c <snmp_ip4_to_oid>

      /* check generated OID: is it a candidate for the next one? */
      snmp_next_oid_check(&state, test_oid, LWIP_ARRAYSIZE(ip_NetToMediaTable_oid_ranges), LWIP_PTR_NUMERIC_CAST(void*, i));
 8010198:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801019c:	f107 0114 	add.w	r1, r7, #20
 80101a0:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 80101a4:	2205      	movs	r2, #5
 80101a6:	f7ff f8b9 	bl	800f31c <snmp_next_oid_check>
  for (i=0; i<ARP_TABLE_SIZE; i++) {
 80101aa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80101ae:	3301      	adds	r3, #1
 80101b0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80101b4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80101b8:	2b09      	cmp	r3, #9
 80101ba:	d9d2      	bls.n	8010162 <ip_NetToMediaTable_get_next_cell_instance_and_value+0x2e>
    }
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 80101bc:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d10f      	bne.n	80101e4 <ip_NetToMediaTable_get_next_cell_instance_and_value+0xb0>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 80101c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80101c6:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 80101ca:	4619      	mov	r1, r3
 80101cc:	68b8      	ldr	r0, [r7, #8]
 80101ce:	f7fe fb03 	bl	800e7d8 <snmp_oid_assign>
    /* fill in object properties */
    return ip_NetToMediaTable_get_cell_value_core(LWIP_PTR_NUMERIC_CAST(u8_t, state.reference), column, value, value_len);
 80101d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80101d4:	b2d8      	uxtb	r0, r3
 80101d6:	683b      	ldr	r3, [r7, #0]
 80101d8:	687a      	ldr	r2, [r7, #4]
 80101da:	68f9      	ldr	r1, [r7, #12]
 80101dc:	f7ff ff10 	bl	8010000 <ip_NetToMediaTable_get_cell_value_core>
 80101e0:	4603      	mov	r3, r0
 80101e2:	e000      	b.n	80101e6 <ip_NetToMediaTable_get_next_cell_instance_and_value+0xb2>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 80101e4:	23f1      	movs	r3, #241	@ 0xf1
}
 80101e6:	4618      	mov	r0, r3
 80101e8:	3764      	adds	r7, #100	@ 0x64
 80101ea:	46bd      	mov	sp, r7
 80101ec:	bd90      	pop	{r4, r7, pc}
	...

080101f0 <snmp_get_value>:
#define MIB2_AUTH_TRAPS_DISABLED 2

/* --- snmp .1.3.6.1.2.1.11 ----------------------------------------------------- */
static s16_t
snmp_get_value(const struct snmp_scalar_array_node_def *node, void *value)
{
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b084      	sub	sp, #16
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
 80101f8:	6039      	str	r1, [r7, #0]
  u32_t *uint_ptr = (u32_t*)value;
 80101fa:	683b      	ldr	r3, [r7, #0]
 80101fc:	60fb      	str	r3, [r7, #12]
  switch (node->oid) {
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	3b01      	subs	r3, #1
 8010204:	2b1f      	cmp	r3, #31
 8010206:	f200 80df 	bhi.w	80103c8 <snmp_get_value+0x1d8>
 801020a:	a201      	add	r2, pc, #4	@ (adr r2, 8010210 <snmp_get_value+0x20>)
 801020c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010210:	08010291 	.word	0x08010291
 8010214:	0801029b 	.word	0x0801029b
 8010218:	080102a5 	.word	0x080102a5
 801021c:	080102af 	.word	0x080102af
 8010220:	080102b9 	.word	0x080102b9
 8010224:	080102c3 	.word	0x080102c3
 8010228:	080103c9 	.word	0x080103c9
 801022c:	080102cd 	.word	0x080102cd
 8010230:	080102d7 	.word	0x080102d7
 8010234:	080102e1 	.word	0x080102e1
 8010238:	080102eb 	.word	0x080102eb
 801023c:	080102f5 	.word	0x080102f5
 8010240:	080102ff 	.word	0x080102ff
 8010244:	08010309 	.word	0x08010309
 8010248:	08010313 	.word	0x08010313
 801024c:	0801031d 	.word	0x0801031d
 8010250:	08010327 	.word	0x08010327
 8010254:	08010331 	.word	0x08010331
 8010258:	0801033b 	.word	0x0801033b
 801025c:	08010345 	.word	0x08010345
 8010260:	0801034f 	.word	0x0801034f
 8010264:	08010359 	.word	0x08010359
 8010268:	080103c9 	.word	0x080103c9
 801026c:	08010363 	.word	0x08010363
 8010270:	0801036d 	.word	0x0801036d
 8010274:	08010377 	.word	0x08010377
 8010278:	08010381 	.word	0x08010381
 801027c:	0801038b 	.word	0x0801038b
 8010280:	08010395 	.word	0x08010395
 8010284:	0801039f 	.word	0x0801039f
 8010288:	080103b9 	.word	0x080103b9
 801028c:	080103c1 	.word	0x080103c1
  case 1: /* snmpInPkts */
    *uint_ptr = snmp_stats.inpkts;
 8010290:	4b51      	ldr	r3, [pc, #324]	@ (80103d8 <snmp_get_value+0x1e8>)
 8010292:	681a      	ldr	r2, [r3, #0]
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	601a      	str	r2, [r3, #0]
    break;
 8010298:	e098      	b.n	80103cc <snmp_get_value+0x1dc>
  case 2: /* snmpOutPkts */
    *uint_ptr = snmp_stats.outpkts;
 801029a:	4b4f      	ldr	r3, [pc, #316]	@ (80103d8 <snmp_get_value+0x1e8>)
 801029c:	685a      	ldr	r2, [r3, #4]
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	601a      	str	r2, [r3, #0]
    break;
 80102a2:	e093      	b.n	80103cc <snmp_get_value+0x1dc>
  case 3: /* snmpInBadVersions */
    *uint_ptr = snmp_stats.inbadversions;
 80102a4:	4b4c      	ldr	r3, [pc, #304]	@ (80103d8 <snmp_get_value+0x1e8>)
 80102a6:	689a      	ldr	r2, [r3, #8]
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	601a      	str	r2, [r3, #0]
    break;
 80102ac:	e08e      	b.n	80103cc <snmp_get_value+0x1dc>
  case 4: /* snmpInBadCommunityNames */
    *uint_ptr = snmp_stats.inbadcommunitynames;
 80102ae:	4b4a      	ldr	r3, [pc, #296]	@ (80103d8 <snmp_get_value+0x1e8>)
 80102b0:	68da      	ldr	r2, [r3, #12]
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	601a      	str	r2, [r3, #0]
    break;
 80102b6:	e089      	b.n	80103cc <snmp_get_value+0x1dc>
  case 5: /* snmpInBadCommunityUses */
    *uint_ptr = snmp_stats.inbadcommunityuses;
 80102b8:	4b47      	ldr	r3, [pc, #284]	@ (80103d8 <snmp_get_value+0x1e8>)
 80102ba:	691a      	ldr	r2, [r3, #16]
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	601a      	str	r2, [r3, #0]
    break;
 80102c0:	e084      	b.n	80103cc <snmp_get_value+0x1dc>
  case 6: /* snmpInASNParseErrs */
    *uint_ptr = snmp_stats.inasnparseerrs;
 80102c2:	4b45      	ldr	r3, [pc, #276]	@ (80103d8 <snmp_get_value+0x1e8>)
 80102c4:	695a      	ldr	r2, [r3, #20]
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	601a      	str	r2, [r3, #0]
    break;
 80102ca:	e07f      	b.n	80103cc <snmp_get_value+0x1dc>
  case 8: /* snmpInTooBigs */
    *uint_ptr = snmp_stats.intoobigs;
 80102cc:	4b42      	ldr	r3, [pc, #264]	@ (80103d8 <snmp_get_value+0x1e8>)
 80102ce:	699a      	ldr	r2, [r3, #24]
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	601a      	str	r2, [r3, #0]
    break;
 80102d4:	e07a      	b.n	80103cc <snmp_get_value+0x1dc>
  case 9: /* snmpInNoSuchNames */
    *uint_ptr = snmp_stats.innosuchnames;
 80102d6:	4b40      	ldr	r3, [pc, #256]	@ (80103d8 <snmp_get_value+0x1e8>)
 80102d8:	69da      	ldr	r2, [r3, #28]
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	601a      	str	r2, [r3, #0]
    break;
 80102de:	e075      	b.n	80103cc <snmp_get_value+0x1dc>
  case 10: /* snmpInBadValues */
    *uint_ptr = snmp_stats.inbadvalues;
 80102e0:	4b3d      	ldr	r3, [pc, #244]	@ (80103d8 <snmp_get_value+0x1e8>)
 80102e2:	6a1a      	ldr	r2, [r3, #32]
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	601a      	str	r2, [r3, #0]
    break;
 80102e8:	e070      	b.n	80103cc <snmp_get_value+0x1dc>
  case 11: /* snmpInReadOnlys */
    *uint_ptr = snmp_stats.inreadonlys;
 80102ea:	4b3b      	ldr	r3, [pc, #236]	@ (80103d8 <snmp_get_value+0x1e8>)
 80102ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	601a      	str	r2, [r3, #0]
    break;
 80102f2:	e06b      	b.n	80103cc <snmp_get_value+0x1dc>
  case 12: /* snmpInGenErrs */
    *uint_ptr = snmp_stats.ingenerrs;
 80102f4:	4b38      	ldr	r3, [pc, #224]	@ (80103d8 <snmp_get_value+0x1e8>)
 80102f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	601a      	str	r2, [r3, #0]
    break;
 80102fc:	e066      	b.n	80103cc <snmp_get_value+0x1dc>
  case 13: /* snmpInTotalReqVars */
    *uint_ptr = snmp_stats.intotalreqvars;
 80102fe:	4b36      	ldr	r3, [pc, #216]	@ (80103d8 <snmp_get_value+0x1e8>)
 8010300:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	601a      	str	r2, [r3, #0]
    break;
 8010306:	e061      	b.n	80103cc <snmp_get_value+0x1dc>
  case 14: /* snmpInTotalSetVars */
    *uint_ptr = snmp_stats.intotalsetvars;
 8010308:	4b33      	ldr	r3, [pc, #204]	@ (80103d8 <snmp_get_value+0x1e8>)
 801030a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	601a      	str	r2, [r3, #0]
    break;
 8010310:	e05c      	b.n	80103cc <snmp_get_value+0x1dc>
  case 15: /* snmpInGetRequests */
    *uint_ptr = snmp_stats.ingetrequests;
 8010312:	4b31      	ldr	r3, [pc, #196]	@ (80103d8 <snmp_get_value+0x1e8>)
 8010314:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	601a      	str	r2, [r3, #0]
    break;
 801031a:	e057      	b.n	80103cc <snmp_get_value+0x1dc>
  case 16: /* snmpInGetNexts */
    *uint_ptr = snmp_stats.ingetnexts;
 801031c:	4b2e      	ldr	r3, [pc, #184]	@ (80103d8 <snmp_get_value+0x1e8>)
 801031e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	601a      	str	r2, [r3, #0]
    break;
 8010324:	e052      	b.n	80103cc <snmp_get_value+0x1dc>
  case 17: /* snmpInSetRequests */
    *uint_ptr = snmp_stats.insetrequests;
 8010326:	4b2c      	ldr	r3, [pc, #176]	@ (80103d8 <snmp_get_value+0x1e8>)
 8010328:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	601a      	str	r2, [r3, #0]
    break;
 801032e:	e04d      	b.n	80103cc <snmp_get_value+0x1dc>
  case 18: /* snmpInGetResponses */
    *uint_ptr = snmp_stats.ingetresponses;
 8010330:	4b29      	ldr	r3, [pc, #164]	@ (80103d8 <snmp_get_value+0x1e8>)
 8010332:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	601a      	str	r2, [r3, #0]
    break;
 8010338:	e048      	b.n	80103cc <snmp_get_value+0x1dc>
  case 19: /* snmpInTraps */
    *uint_ptr = snmp_stats.intraps;
 801033a:	4b27      	ldr	r3, [pc, #156]	@ (80103d8 <snmp_get_value+0x1e8>)
 801033c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	601a      	str	r2, [r3, #0]
    break;
 8010342:	e043      	b.n	80103cc <snmp_get_value+0x1dc>
  case 20: /* snmpOutTooBigs */
    *uint_ptr = snmp_stats.outtoobigs;
 8010344:	4b24      	ldr	r3, [pc, #144]	@ (80103d8 <snmp_get_value+0x1e8>)
 8010346:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	601a      	str	r2, [r3, #0]
    break;
 801034c:	e03e      	b.n	80103cc <snmp_get_value+0x1dc>
  case 21: /* snmpOutNoSuchNames */
    *uint_ptr = snmp_stats.outnosuchnames;
 801034e:	4b22      	ldr	r3, [pc, #136]	@ (80103d8 <snmp_get_value+0x1e8>)
 8010350:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	601a      	str	r2, [r3, #0]
    break;
 8010356:	e039      	b.n	80103cc <snmp_get_value+0x1dc>
  case 22: /* snmpOutBadValues */
    *uint_ptr = snmp_stats.outbadvalues;
 8010358:	4b1f      	ldr	r3, [pc, #124]	@ (80103d8 <snmp_get_value+0x1e8>)
 801035a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	601a      	str	r2, [r3, #0]
    break;
 8010360:	e034      	b.n	80103cc <snmp_get_value+0x1dc>
  case 24: /* snmpOutGenErrs */
    *uint_ptr = snmp_stats.outgenerrs;
 8010362:	4b1d      	ldr	r3, [pc, #116]	@ (80103d8 <snmp_get_value+0x1e8>)
 8010364:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	601a      	str	r2, [r3, #0]
    break;
 801036a:	e02f      	b.n	80103cc <snmp_get_value+0x1dc>
  case 25: /* snmpOutGetRequests */
    *uint_ptr = snmp_stats.outgetrequests;
 801036c:	4b1a      	ldr	r3, [pc, #104]	@ (80103d8 <snmp_get_value+0x1e8>)
 801036e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	601a      	str	r2, [r3, #0]
    break;
 8010374:	e02a      	b.n	80103cc <snmp_get_value+0x1dc>
  case 26: /* snmpOutGetNexts */
    *uint_ptr = snmp_stats.outgetnexts;
 8010376:	4b18      	ldr	r3, [pc, #96]	@ (80103d8 <snmp_get_value+0x1e8>)
 8010378:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	601a      	str	r2, [r3, #0]
    break;
 801037e:	e025      	b.n	80103cc <snmp_get_value+0x1dc>
  case 27: /* snmpOutSetRequests */
    *uint_ptr = snmp_stats.outsetrequests;
 8010380:	4b15      	ldr	r3, [pc, #84]	@ (80103d8 <snmp_get_value+0x1e8>)
 8010382:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	601a      	str	r2, [r3, #0]
    break;
 8010388:	e020      	b.n	80103cc <snmp_get_value+0x1dc>
  case 28: /* snmpOutGetResponses */
    *uint_ptr = snmp_stats.outgetresponses;
 801038a:	4b13      	ldr	r3, [pc, #76]	@ (80103d8 <snmp_get_value+0x1e8>)
 801038c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	601a      	str	r2, [r3, #0]
    break;
 8010392:	e01b      	b.n	80103cc <snmp_get_value+0x1dc>
  case 29: /* snmpOutTraps */
    *uint_ptr = snmp_stats.outtraps;
 8010394:	4b10      	ldr	r3, [pc, #64]	@ (80103d8 <snmp_get_value+0x1e8>)
 8010396:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	601a      	str	r2, [r3, #0]
    break;
 801039c:	e016      	b.n	80103cc <snmp_get_value+0x1dc>
  case 30: /* snmpEnableAuthenTraps */
    if (snmp_get_auth_traps_enabled() == SNMP_AUTH_TRAPS_DISABLED) {
 801039e:	f003 ff05 	bl	80141ac <snmp_get_auth_traps_enabled>
 80103a2:	4603      	mov	r3, r0
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d103      	bne.n	80103b0 <snmp_get_value+0x1c0>
      *uint_ptr = MIB2_AUTH_TRAPS_DISABLED;
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	2202      	movs	r2, #2
 80103ac:	601a      	str	r2, [r3, #0]
    } else {
      *uint_ptr = MIB2_AUTH_TRAPS_ENABLED;
    }
    break;
 80103ae:	e00d      	b.n	80103cc <snmp_get_value+0x1dc>
      *uint_ptr = MIB2_AUTH_TRAPS_ENABLED;
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	2201      	movs	r2, #1
 80103b4:	601a      	str	r2, [r3, #0]
    break;
 80103b6:	e009      	b.n	80103cc <snmp_get_value+0x1dc>
  case 31: /* snmpSilentDrops */
    *uint_ptr = 0; /* not supported */
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	2200      	movs	r2, #0
 80103bc:	601a      	str	r2, [r3, #0]
    break;
 80103be:	e005      	b.n	80103cc <snmp_get_value+0x1dc>
  case 32: /* snmpProxyDrops */
    *uint_ptr = 0; /* not supported */
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	2200      	movs	r2, #0
 80103c4:	601a      	str	r2, [r3, #0]
    break;
 80103c6:	e001      	b.n	80103cc <snmp_get_value+0x1dc>
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("snmp_get_value(): unknown id: %"S32_F"\n", node->oid));
    return 0;
 80103c8:	2300      	movs	r3, #0
 80103ca:	e000      	b.n	80103ce <snmp_get_value+0x1de>
  }

  return sizeof(*uint_ptr);
 80103cc:	2304      	movs	r3, #4
}
 80103ce:	4618      	mov	r0, r3
 80103d0:	3710      	adds	r7, #16
 80103d2:	46bd      	mov	sp, r7
 80103d4:	bd80      	pop	{r7, pc}
 80103d6:	bf00      	nop
 80103d8:	200087e8 	.word	0x200087e8

080103dc <snmp_set_test>:

static snmp_err_t
snmp_set_test(const struct snmp_scalar_array_node_def *node, u16_t len, void *value)
{
 80103dc:	b480      	push	{r7}
 80103de:	b087      	sub	sp, #28
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	60f8      	str	r0, [r7, #12]
 80103e4:	460b      	mov	r3, r1
 80103e6:	607a      	str	r2, [r7, #4]
 80103e8:	817b      	strh	r3, [r7, #10]
  snmp_err_t ret = SNMP_ERR_WRONGVALUE;
 80103ea:	230a      	movs	r3, #10
 80103ec:	75fb      	strb	r3, [r7, #23]
  LWIP_UNUSED_ARG(len);

  if (node->oid == 30) {
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	2b1e      	cmp	r3, #30
 80103f4:	d10b      	bne.n	801040e <snmp_set_test+0x32>
    /* snmpEnableAuthenTraps */
    s32_t *sint_ptr = (s32_t*)value;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	613b      	str	r3, [r7, #16]

    /* we should have writable non-volatile mem here */
    if ((*sint_ptr == MIB2_AUTH_TRAPS_DISABLED) || (*sint_ptr == MIB2_AUTH_TRAPS_ENABLED)) {
 80103fa:	693b      	ldr	r3, [r7, #16]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	2b02      	cmp	r3, #2
 8010400:	d003      	beq.n	801040a <snmp_set_test+0x2e>
 8010402:	693b      	ldr	r3, [r7, #16]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	2b01      	cmp	r3, #1
 8010408:	d101      	bne.n	801040e <snmp_set_test+0x32>
      ret = SNMP_ERR_NOERROR;
 801040a:	2300      	movs	r3, #0
 801040c:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 801040e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010410:	4618      	mov	r0, r3
 8010412:	371c      	adds	r7, #28
 8010414:	46bd      	mov	sp, r7
 8010416:	bc80      	pop	{r7}
 8010418:	4770      	bx	lr

0801041a <snmp_set_value>:

static snmp_err_t
snmp_set_value(const struct snmp_scalar_array_node_def *node, u16_t len, void *value)
{
 801041a:	b580      	push	{r7, lr}
 801041c:	b086      	sub	sp, #24
 801041e:	af00      	add	r7, sp, #0
 8010420:	60f8      	str	r0, [r7, #12]
 8010422:	460b      	mov	r3, r1
 8010424:	607a      	str	r2, [r7, #4]
 8010426:	817b      	strh	r3, [r7, #10]
  LWIP_UNUSED_ARG(len);

  if (node->oid == 30) {
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	2b1e      	cmp	r3, #30
 801042e:	d10c      	bne.n	801044a <snmp_set_value+0x30>
    /* snmpEnableAuthenTraps */
    s32_t *sint_ptr = (s32_t*)value;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	617b      	str	r3, [r7, #20]
    if (*sint_ptr == MIB2_AUTH_TRAPS_DISABLED) {
 8010434:	697b      	ldr	r3, [r7, #20]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	2b02      	cmp	r3, #2
 801043a:	d103      	bne.n	8010444 <snmp_set_value+0x2a>
      snmp_set_auth_traps_enabled(SNMP_AUTH_TRAPS_DISABLED);
 801043c:	2000      	movs	r0, #0
 801043e:	f003 fea5 	bl	801418c <snmp_set_auth_traps_enabled>
 8010442:	e002      	b.n	801044a <snmp_set_value+0x30>
    } else {
      snmp_set_auth_traps_enabled(SNMP_AUTH_TRAPS_ENABLED);
 8010444:	2001      	movs	r0, #1
 8010446:	f003 fea1 	bl	801418c <snmp_set_auth_traps_enabled>
    }
  }

  return SNMP_ERR_NOERROR;
 801044a:	2300      	movs	r3, #0
}
 801044c:	4618      	mov	r0, r3
 801044e:	3718      	adds	r7, #24
 8010450:	46bd      	mov	sp, r7
 8010452:	bd80      	pop	{r7, pc}

08010454 <system_get_value>:
}


static s16_t
system_get_value(const struct snmp_scalar_array_node_def *node, void *value)
{
 8010454:	b580      	push	{r7, lr}
 8010456:	b086      	sub	sp, #24
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
 801045c:	6039      	str	r1, [r7, #0]
  const u8_t*  var = NULL;
 801045e:	2300      	movs	r3, #0
 8010460:	617b      	str	r3, [r7, #20]
  const s16_t* var_len;
  u16_t result;

  switch (node->oid) {
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	3b01      	subs	r3, #1
 8010468:	2b06      	cmp	r3, #6
 801046a:	d84f      	bhi.n	801050c <system_get_value+0xb8>
 801046c:	a201      	add	r2, pc, #4	@ (adr r2, 8010474 <system_get_value+0x20>)
 801046e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010472:	bf00      	nop
 8010474:	08010491 	.word	0x08010491
 8010478:	0801049f 	.word	0x0801049f
 801047c:	080104c3 	.word	0x080104c3
 8010480:	080104d9 	.word	0x080104d9
 8010484:	080104e7 	.word	0x080104e7
 8010488:	080104f5 	.word	0x080104f5
 801048c:	08010503 	.word	0x08010503
  case 1: /* sysDescr */
    var     = sysdescr;
 8010490:	4b31      	ldr	r3, [pc, #196]	@ (8010558 <system_get_value+0x104>)
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	617b      	str	r3, [r7, #20]
    var_len = (const s16_t*)sysdescr_len;
 8010496:	4b31      	ldr	r3, [pc, #196]	@ (801055c <system_get_value+0x108>)
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	613b      	str	r3, [r7, #16]
    break;
 801049c:	e038      	b.n	8010510 <system_get_value+0xbc>
  case 2: /* sysObjectID */
    {
      const struct snmp_obj_id* dev_enterprise_oid = snmp_get_device_enterprise_oid();
 801049e:	f7fe f82b 	bl	800e4f8 <snmp_get_device_enterprise_oid>
 80104a2:	60b8      	str	r0, [r7, #8]
      MEMCPY(value, dev_enterprise_oid->id, dev_enterprise_oid->len * sizeof(u32_t));
 80104a4:	68bb      	ldr	r3, [r7, #8]
 80104a6:	1d19      	adds	r1, r3, #4
 80104a8:	68bb      	ldr	r3, [r7, #8]
 80104aa:	781b      	ldrb	r3, [r3, #0]
 80104ac:	009b      	lsls	r3, r3, #2
 80104ae:	461a      	mov	r2, r3
 80104b0:	6838      	ldr	r0, [r7, #0]
 80104b2:	f011 fee4 	bl	802227e <memcpy>
      return dev_enterprise_oid->len * sizeof(u32_t);
 80104b6:	68bb      	ldr	r3, [r7, #8]
 80104b8:	781b      	ldrb	r3, [r3, #0]
 80104ba:	009b      	lsls	r3, r3, #2
 80104bc:	b29b      	uxth	r3, r3
 80104be:	b21b      	sxth	r3, r3
 80104c0:	e045      	b.n	801054e <system_get_value+0xfa>
    }
  case 3: /* sysUpTime */
    MIB2_COPY_SYSUPTIME_TO((u32_t*)value);
 80104c2:	f7fb faeb 	bl	800ba9c <sys_now>
 80104c6:	4603      	mov	r3, r0
 80104c8:	4a25      	ldr	r2, [pc, #148]	@ (8010560 <system_get_value+0x10c>)
 80104ca:	fba2 2303 	umull	r2, r3, r2, r3
 80104ce:	08da      	lsrs	r2, r3, #3
 80104d0:	683b      	ldr	r3, [r7, #0]
 80104d2:	601a      	str	r2, [r3, #0]
    return sizeof(u32_t);
 80104d4:	2304      	movs	r3, #4
 80104d6:	e03a      	b.n	801054e <system_get_value+0xfa>
  case 4: /* sysContact */
    var     = syscontact;
 80104d8:	4b22      	ldr	r3, [pc, #136]	@ (8010564 <system_get_value+0x110>)
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	617b      	str	r3, [r7, #20]
    var_len = (const s16_t*)syscontact_len;
 80104de:	4b22      	ldr	r3, [pc, #136]	@ (8010568 <system_get_value+0x114>)
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	613b      	str	r3, [r7, #16]
    break;
 80104e4:	e014      	b.n	8010510 <system_get_value+0xbc>
  case 5: /* sysName */
    var     = sysname;
 80104e6:	4b21      	ldr	r3, [pc, #132]	@ (801056c <system_get_value+0x118>)
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	617b      	str	r3, [r7, #20]
    var_len = (const s16_t*)sysname_len;
 80104ec:	4b20      	ldr	r3, [pc, #128]	@ (8010570 <system_get_value+0x11c>)
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	613b      	str	r3, [r7, #16]
    break;
 80104f2:	e00d      	b.n	8010510 <system_get_value+0xbc>
  case 6: /* sysLocation */
    var     = syslocation;
 80104f4:	4b1f      	ldr	r3, [pc, #124]	@ (8010574 <system_get_value+0x120>)
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	617b      	str	r3, [r7, #20]
    var_len = (const s16_t*)syslocation_len;
 80104fa:	4b1f      	ldr	r3, [pc, #124]	@ (8010578 <system_get_value+0x124>)
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	613b      	str	r3, [r7, #16]
    break;
 8010500:	e006      	b.n	8010510 <system_get_value+0xbc>
  case 7: /* sysServices */
    *(s32_t*)value = SNMP_SYSSERVICES;
 8010502:	683b      	ldr	r3, [r7, #0]
 8010504:	2248      	movs	r2, #72	@ 0x48
 8010506:	601a      	str	r2, [r3, #0]
    return sizeof(s32_t);
 8010508:	2304      	movs	r3, #4
 801050a:	e020      	b.n	801054e <system_get_value+0xfa>
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("system_get_value(): unknown id: %"S32_F"\n", node->oid));
    return 0;
 801050c:	2300      	movs	r3, #0
 801050e:	e01e      	b.n	801054e <system_get_value+0xfa>
  }

  /* handle string values (OID 1,4,5 and 6) */
  LWIP_ASSERT("", (value != NULL));
 8010510:	683b      	ldr	r3, [r7, #0]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d106      	bne.n	8010524 <system_get_value+0xd0>
 8010516:	4b19      	ldr	r3, [pc, #100]	@ (801057c <system_get_value+0x128>)
 8010518:	f240 120f 	movw	r2, #271	@ 0x10f
 801051c:	4918      	ldr	r1, [pc, #96]	@ (8010580 <system_get_value+0x12c>)
 801051e:	4819      	ldr	r0, [pc, #100]	@ (8010584 <system_get_value+0x130>)
 8010520:	f011 fbb2 	bl	8021c88 <iprintf>
  if (var_len == NULL) {
 8010524:	693b      	ldr	r3, [r7, #16]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d105      	bne.n	8010536 <system_get_value+0xe2>
    result = (s16_t)strlen((const char*)var);
 801052a:	6978      	ldr	r0, [r7, #20]
 801052c:	f7ef fe56 	bl	80001dc <strlen>
 8010530:	4603      	mov	r3, r0
 8010532:	81fb      	strh	r3, [r7, #14]
 8010534:	e003      	b.n	801053e <system_get_value+0xea>
  } else {
    result = *var_len;
 8010536:	693b      	ldr	r3, [r7, #16]
 8010538:	f9b3 3000 	ldrsh.w	r3, [r3]
 801053c:	81fb      	strh	r3, [r7, #14]
  }
  MEMCPY(value, var, result);
 801053e:	89fb      	ldrh	r3, [r7, #14]
 8010540:	461a      	mov	r2, r3
 8010542:	6979      	ldr	r1, [r7, #20]
 8010544:	6838      	ldr	r0, [r7, #0]
 8010546:	f011 fe9a 	bl	802227e <memcpy>
  return result;
 801054a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 801054e:	4618      	mov	r0, r3
 8010550:	3718      	adds	r7, #24
 8010552:	46bd      	mov	sp, r7
 8010554:	bd80      	pop	{r7, pc}
 8010556:	bf00      	nop
 8010558:	20000100 	.word	0x20000100
 801055c:	20008854 	.word	0x20008854
 8010560:	cccccccd 	.word	0xcccccccd
 8010564:	20000104 	.word	0x20000104
 8010568:	20008858 	.word	0x20008858
 801056c:	20000108 	.word	0x20000108
 8010570:	20008868 	.word	0x20008868
 8010574:	2000010c 	.word	0x2000010c
 8010578:	20008878 	.word	0x20008878
 801057c:	08025548 	.word	0x08025548
 8010580:	0802558c 	.word	0x0802558c
 8010584:	08025590 	.word	0x08025590

08010588 <system_set_test>:

static snmp_err_t
system_set_test(const struct snmp_scalar_array_node_def *node, u16_t len, void *value)
{
 8010588:	b480      	push	{r7}
 801058a:	b089      	sub	sp, #36	@ 0x24
 801058c:	af00      	add	r7, sp, #0
 801058e:	60f8      	str	r0, [r7, #12]
 8010590:	460b      	mov	r3, r1
 8010592:	607a      	str	r2, [r7, #4]
 8010594:	817b      	strh	r3, [r7, #10]
  snmp_err_t ret = SNMP_ERR_WRONGVALUE;
 8010596:	230a      	movs	r3, #10
 8010598:	77fb      	strb	r3, [r7, #31]
  const u16_t* var_bufsize  = NULL;
 801059a:	2300      	movs	r3, #0
 801059c:	61bb      	str	r3, [r7, #24]
  const u16_t* var_wr_len;

  LWIP_UNUSED_ARG(value);

  switch (node->oid) {
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	2b06      	cmp	r3, #6
 80105a4:	d012      	beq.n	80105cc <system_set_test+0x44>
 80105a6:	2b06      	cmp	r3, #6
 80105a8:	d816      	bhi.n	80105d8 <system_set_test+0x50>
 80105aa:	2b04      	cmp	r3, #4
 80105ac:	d002      	beq.n	80105b4 <system_set_test+0x2c>
 80105ae:	2b05      	cmp	r3, #5
 80105b0:	d006      	beq.n	80105c0 <system_set_test+0x38>
 80105b2:	e011      	b.n	80105d8 <system_set_test+0x50>
  case 4: /* sysContact */
    var_bufsize  = &syscontact_bufsize;
 80105b4:	4b19      	ldr	r3, [pc, #100]	@ (801061c <system_set_test+0x94>)
 80105b6:	61bb      	str	r3, [r7, #24]
    var_wr_len   = syscontact_wr_len;
 80105b8:	4b19      	ldr	r3, [pc, #100]	@ (8010620 <system_set_test+0x98>)
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	617b      	str	r3, [r7, #20]
    break;
 80105be:	e00d      	b.n	80105dc <system_set_test+0x54>
  case 5: /* sysName */
    var_bufsize  = &sysname_bufsize;
 80105c0:	4b18      	ldr	r3, [pc, #96]	@ (8010624 <system_set_test+0x9c>)
 80105c2:	61bb      	str	r3, [r7, #24]
    var_wr_len   = sysname_wr_len;
 80105c4:	4b18      	ldr	r3, [pc, #96]	@ (8010628 <system_set_test+0xa0>)
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	617b      	str	r3, [r7, #20]
    break;
 80105ca:	e007      	b.n	80105dc <system_set_test+0x54>
  case 6: /* sysLocation */
    var_bufsize  = &syslocation_bufsize;
 80105cc:	4b17      	ldr	r3, [pc, #92]	@ (801062c <system_set_test+0xa4>)
 80105ce:	61bb      	str	r3, [r7, #24]
    var_wr_len   = syslocation_wr_len;
 80105d0:	4b17      	ldr	r3, [pc, #92]	@ (8010630 <system_set_test+0xa8>)
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	617b      	str	r3, [r7, #20]
    break;
 80105d6:	e001      	b.n	80105dc <system_set_test+0x54>
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("system_set_test(): unknown id: %"S32_F"\n", node->oid));
    return ret;
 80105d8:	7ffb      	ldrb	r3, [r7, #31]
 80105da:	e019      	b.n	8010610 <system_set_test+0x88>
  }

  /* check if value is writable at all */
  if (*var_bufsize > 0) {
 80105dc:	69bb      	ldr	r3, [r7, #24]
 80105de:	881b      	ldrh	r3, [r3, #0]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d012      	beq.n	801060a <system_set_test+0x82>
    if (var_wr_len == NULL) {
 80105e4:	697b      	ldr	r3, [r7, #20]
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d107      	bne.n	80105fa <system_set_test+0x72>
      /* we have to take the terminating 0 into account */
      if (len < *var_bufsize) {
 80105ea:	69bb      	ldr	r3, [r7, #24]
 80105ec:	881b      	ldrh	r3, [r3, #0]
 80105ee:	897a      	ldrh	r2, [r7, #10]
 80105f0:	429a      	cmp	r2, r3
 80105f2:	d20c      	bcs.n	801060e <system_set_test+0x86>
        ret = SNMP_ERR_NOERROR;
 80105f4:	2300      	movs	r3, #0
 80105f6:	77fb      	strb	r3, [r7, #31]
 80105f8:	e009      	b.n	801060e <system_set_test+0x86>
      }
    } else {
      if (len <= *var_bufsize) {
 80105fa:	69bb      	ldr	r3, [r7, #24]
 80105fc:	881b      	ldrh	r3, [r3, #0]
 80105fe:	897a      	ldrh	r2, [r7, #10]
 8010600:	429a      	cmp	r2, r3
 8010602:	d804      	bhi.n	801060e <system_set_test+0x86>
        ret = SNMP_ERR_NOERROR;
 8010604:	2300      	movs	r3, #0
 8010606:	77fb      	strb	r3, [r7, #31]
 8010608:	e001      	b.n	801060e <system_set_test+0x86>
      }
    }
  } else {
    ret = SNMP_ERR_NOTWRITABLE;
 801060a:	2311      	movs	r3, #17
 801060c:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 801060e:	7ffb      	ldrb	r3, [r7, #31]
}
 8010610:	4618      	mov	r0, r3
 8010612:	3724      	adds	r7, #36	@ 0x24
 8010614:	46bd      	mov	sp, r7
 8010616:	bc80      	pop	{r7}
 8010618:	4770      	bx	lr
 801061a:	bf00      	nop
 801061c:	20008864 	.word	0x20008864
 8010620:	20008860 	.word	0x20008860
 8010624:	20008874 	.word	0x20008874
 8010628:	20008870 	.word	0x20008870
 801062c:	20008884 	.word	0x20008884
 8010630:	20008880 	.word	0x20008880

08010634 <system_set_value>:

static snmp_err_t
system_set_value(const struct snmp_scalar_array_node_def *node, u16_t len, void *value)
{
 8010634:	b580      	push	{r7, lr}
 8010636:	b086      	sub	sp, #24
 8010638:	af00      	add	r7, sp, #0
 801063a:	60f8      	str	r0, [r7, #12]
 801063c:	460b      	mov	r3, r1
 801063e:	607a      	str	r2, [r7, #4]
 8010640:	817b      	strh	r3, [r7, #10]
  u8_t*  var_wr = NULL;
 8010642:	2300      	movs	r3, #0
 8010644:	617b      	str	r3, [r7, #20]
  u16_t* var_wr_len;

  switch (node->oid) {
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	2b06      	cmp	r3, #6
 801064c:	d014      	beq.n	8010678 <system_set_value+0x44>
 801064e:	2b06      	cmp	r3, #6
 8010650:	d819      	bhi.n	8010686 <system_set_value+0x52>
 8010652:	2b04      	cmp	r3, #4
 8010654:	d002      	beq.n	801065c <system_set_value+0x28>
 8010656:	2b05      	cmp	r3, #5
 8010658:	d007      	beq.n	801066a <system_set_value+0x36>
 801065a:	e014      	b.n	8010686 <system_set_value+0x52>
  case 4: /* sysContact */
    var_wr     = syscontact_wr;
 801065c:	4b1b      	ldr	r3, [pc, #108]	@ (80106cc <system_set_value+0x98>)
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	617b      	str	r3, [r7, #20]
    var_wr_len = syscontact_wr_len;
 8010662:	4b1b      	ldr	r3, [pc, #108]	@ (80106d0 <system_set_value+0x9c>)
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	613b      	str	r3, [r7, #16]
    break;
 8010668:	e00f      	b.n	801068a <system_set_value+0x56>
  case 5: /* sysName */
    var_wr     = sysname_wr;
 801066a:	4b1a      	ldr	r3, [pc, #104]	@ (80106d4 <system_set_value+0xa0>)
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	617b      	str	r3, [r7, #20]
    var_wr_len = sysname_wr_len;
 8010670:	4b19      	ldr	r3, [pc, #100]	@ (80106d8 <system_set_value+0xa4>)
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	613b      	str	r3, [r7, #16]
    break;
 8010676:	e008      	b.n	801068a <system_set_value+0x56>
  case 6: /* sysLocation */
    var_wr     = syslocation_wr;
 8010678:	4b18      	ldr	r3, [pc, #96]	@ (80106dc <system_set_value+0xa8>)
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	617b      	str	r3, [r7, #20]
    var_wr_len = syslocation_wr_len;
 801067e:	4b18      	ldr	r3, [pc, #96]	@ (80106e0 <system_set_value+0xac>)
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	613b      	str	r3, [r7, #16]
    break;
 8010684:	e001      	b.n	801068a <system_set_value+0x56>
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("system_set_value(): unknown id: %"S32_F"\n", node->oid));
    return SNMP_ERR_GENERROR;
 8010686:	2305      	movs	r3, #5
 8010688:	e01c      	b.n	80106c4 <system_set_value+0x90>
  }

  /* no need to check size of target buffer, this was already done in set_test method */
  LWIP_ASSERT("", var_wr != NULL);
 801068a:	697b      	ldr	r3, [r7, #20]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d106      	bne.n	801069e <system_set_value+0x6a>
 8010690:	4b14      	ldr	r3, [pc, #80]	@ (80106e4 <system_set_value+0xb0>)
 8010692:	f44f 72b0 	mov.w	r2, #352	@ 0x160
 8010696:	4914      	ldr	r1, [pc, #80]	@ (80106e8 <system_set_value+0xb4>)
 8010698:	4814      	ldr	r0, [pc, #80]	@ (80106ec <system_set_value+0xb8>)
 801069a:	f011 faf5 	bl	8021c88 <iprintf>
  MEMCPY(var_wr, value, len);
 801069e:	897b      	ldrh	r3, [r7, #10]
 80106a0:	461a      	mov	r2, r3
 80106a2:	6879      	ldr	r1, [r7, #4]
 80106a4:	6978      	ldr	r0, [r7, #20]
 80106a6:	f011 fdea 	bl	802227e <memcpy>
  
  if (var_wr_len == NULL) {
 80106aa:	693b      	ldr	r3, [r7, #16]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d105      	bne.n	80106bc <system_set_value+0x88>
    /* add terminating 0 */
    var_wr[len] = 0;
 80106b0:	897b      	ldrh	r3, [r7, #10]
 80106b2:	697a      	ldr	r2, [r7, #20]
 80106b4:	4413      	add	r3, r2
 80106b6:	2200      	movs	r2, #0
 80106b8:	701a      	strb	r2, [r3, #0]
 80106ba:	e002      	b.n	80106c2 <system_set_value+0x8e>
  } else {
    *var_wr_len = len;
 80106bc:	693b      	ldr	r3, [r7, #16]
 80106be:	897a      	ldrh	r2, [r7, #10]
 80106c0:	801a      	strh	r2, [r3, #0]
  }

  return SNMP_ERR_NOERROR;
 80106c2:	2300      	movs	r3, #0
}
 80106c4:	4618      	mov	r0, r3
 80106c6:	3718      	adds	r7, #24
 80106c8:	46bd      	mov	sp, r7
 80106ca:	bd80      	pop	{r7, pc}
 80106cc:	2000885c 	.word	0x2000885c
 80106d0:	20008860 	.word	0x20008860
 80106d4:	2000886c 	.word	0x2000886c
 80106d8:	20008870 	.word	0x20008870
 80106dc:	2000887c 	.word	0x2000887c
 80106e0:	20008880 	.word	0x20008880
 80106e4:	08025548 	.word	0x08025548
 80106e8:	0802558c 	.word	0x0802558c
 80106ec:	08025590 	.word	0x08025590

080106f0 <tcp_get_value>:

/* --- tcp .1.3.6.1.2.1.6 ----------------------------------------------------- */

static s16_t
tcp_get_value(struct snmp_node_instance* instance, void* value)
{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b086      	sub	sp, #24
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
 80106f8:	6039      	str	r1, [r7, #0]
  u32_t *uint_ptr = (u32_t*)value;
 80106fa:	683b      	ldr	r3, [r7, #0]
 80106fc:	60fb      	str	r3, [r7, #12]
  s32_t *sint_ptr = (s32_t*)value;
 80106fe:	683b      	ldr	r3, [r7, #0]
 8010700:	60bb      	str	r3, [r7, #8]

  switch (instance->node->oid) {
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	685b      	ldr	r3, [r3, #4]
 8010708:	3b01      	subs	r3, #1
 801070a:	2b11      	cmp	r3, #17
 801070c:	f200 80a7 	bhi.w	801085e <tcp_get_value+0x16e>
 8010710:	a201      	add	r2, pc, #4	@ (adr r2, 8010718 <tcp_get_value+0x28>)
 8010712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010716:	bf00      	nop
 8010718:	08010761 	.word	0x08010761
 801071c:	0801076b 	.word	0x0801076b
 8010720:	08010777 	.word	0x08010777
 8010724:	08010783 	.word	0x08010783
 8010728:	0801078d 	.word	0x0801078d
 801072c:	0801079b 	.word	0x0801079b
 8010730:	080107a9 	.word	0x080107a9
 8010734:	080107b7 	.word	0x080107b7
 8010738:	080107c5 	.word	0x080107c5
 801073c:	080107fd 	.word	0x080107fd
 8010740:	0801080b 	.word	0x0801080b
 8010744:	08010819 	.word	0x08010819
 8010748:	0801085f 	.word	0x0801085f
 801074c:	08010827 	.word	0x08010827
 8010750:	08010835 	.word	0x08010835
 8010754:	0801085f 	.word	0x0801085f
 8010758:	08010843 	.word	0x08010843
 801075c:	08010851 	.word	0x08010851
  case 1: /* tcpRtoAlgorithm, vanj(4) */
    *sint_ptr = 4;
 8010760:	68bb      	ldr	r3, [r7, #8]
 8010762:	2204      	movs	r2, #4
 8010764:	601a      	str	r2, [r3, #0]
    return sizeof(*sint_ptr);
 8010766:	2304      	movs	r3, #4
 8010768:	e07b      	b.n	8010862 <tcp_get_value+0x172>
  case 2: /* tcpRtoMin */
    /* @todo not the actual value, a guess,
        needs to be calculated */
    *sint_ptr = 1000;
 801076a:	68bb      	ldr	r3, [r7, #8]
 801076c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010770:	601a      	str	r2, [r3, #0]
    return sizeof(*sint_ptr);
 8010772:	2304      	movs	r3, #4
 8010774:	e075      	b.n	8010862 <tcp_get_value+0x172>
  case 3: /* tcpRtoMax */
    /* @todo not the actual value, a guess,
        needs to be calculated */
    *sint_ptr = 60000;
 8010776:	68bb      	ldr	r3, [r7, #8]
 8010778:	f64e 2260 	movw	r2, #60000	@ 0xea60
 801077c:	601a      	str	r2, [r3, #0]
    return sizeof(*sint_ptr);
 801077e:	2304      	movs	r3, #4
 8010780:	e06f      	b.n	8010862 <tcp_get_value+0x172>
  case 4: /* tcpMaxConn */
    *sint_ptr = MEMP_NUM_TCP_PCB;
 8010782:	68bb      	ldr	r3, [r7, #8]
 8010784:	2205      	movs	r2, #5
 8010786:	601a      	str	r2, [r3, #0]
    return sizeof(*sint_ptr);
 8010788:	2304      	movs	r3, #4
 801078a:	e06a      	b.n	8010862 <tcp_get_value+0x172>
  case 5: /* tcpActiveOpens */
    *uint_ptr = STATS_GET(mib2.tcpactiveopens);
 801078c:	4b37      	ldr	r3, [pc, #220]	@ (801086c <tcp_get_value+0x17c>)
 801078e:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 8010796:	2304      	movs	r3, #4
 8010798:	e063      	b.n	8010862 <tcp_get_value+0x172>
  case 6: /* tcpPassiveOpens */
    *uint_ptr = STATS_GET(mib2.tcppassiveopens);
 801079a:	4b34      	ldr	r3, [pc, #208]	@ (801086c <tcp_get_value+0x17c>)
 801079c:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 80107a4:	2304      	movs	r3, #4
 80107a6:	e05c      	b.n	8010862 <tcp_get_value+0x172>
  case 7: /* tcpAttemptFails */
    *uint_ptr = STATS_GET(mib2.tcpattemptfails);
 80107a8:	4b30      	ldr	r3, [pc, #192]	@ (801086c <tcp_get_value+0x17c>)
 80107aa:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 80107b2:	2304      	movs	r3, #4
 80107b4:	e055      	b.n	8010862 <tcp_get_value+0x172>
  case 8: /* tcpEstabResets */
    *uint_ptr = STATS_GET(mib2.tcpestabresets);
 80107b6:	4b2d      	ldr	r3, [pc, #180]	@ (801086c <tcp_get_value+0x17c>)
 80107b8:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 80107c0:	2304      	movs	r3, #4
 80107c2:	e04e      	b.n	8010862 <tcp_get_value+0x172>
  case 9: /* tcpCurrEstab */
    {
      u16_t tcpcurrestab = 0;
 80107c4:	2300      	movs	r3, #0
 80107c6:	82fb      	strh	r3, [r7, #22]
      struct tcp_pcb *pcb = tcp_active_pcbs;
 80107c8:	4b29      	ldr	r3, [pc, #164]	@ (8010870 <tcp_get_value+0x180>)
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	613b      	str	r3, [r7, #16]
      while (pcb != NULL) {
 80107ce:	e00d      	b.n	80107ec <tcp_get_value+0xfc>
        if ((pcb->state == ESTABLISHED) ||
 80107d0:	693b      	ldr	r3, [r7, #16]
 80107d2:	7d1b      	ldrb	r3, [r3, #20]
 80107d4:	2b04      	cmp	r3, #4
 80107d6:	d003      	beq.n	80107e0 <tcp_get_value+0xf0>
            (pcb->state == CLOSE_WAIT)) {
 80107d8:	693b      	ldr	r3, [r7, #16]
 80107da:	7d1b      	ldrb	r3, [r3, #20]
        if ((pcb->state == ESTABLISHED) ||
 80107dc:	2b07      	cmp	r3, #7
 80107de:	d102      	bne.n	80107e6 <tcp_get_value+0xf6>
          tcpcurrestab++;
 80107e0:	8afb      	ldrh	r3, [r7, #22]
 80107e2:	3301      	adds	r3, #1
 80107e4:	82fb      	strh	r3, [r7, #22]
        }
        pcb = pcb->next;
 80107e6:	693b      	ldr	r3, [r7, #16]
 80107e8:	68db      	ldr	r3, [r3, #12]
 80107ea:	613b      	str	r3, [r7, #16]
      while (pcb != NULL) {
 80107ec:	693b      	ldr	r3, [r7, #16]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d1ee      	bne.n	80107d0 <tcp_get_value+0xe0>
      }
      *uint_ptr = tcpcurrestab;
 80107f2:	8afa      	ldrh	r2, [r7, #22]
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	601a      	str	r2, [r3, #0]
    }
    return sizeof(*uint_ptr);
 80107f8:	2304      	movs	r3, #4
 80107fa:	e032      	b.n	8010862 <tcp_get_value+0x172>
  case 10: /* tcpInSegs */
    *uint_ptr = STATS_GET(mib2.tcpinsegs);
 80107fc:	4b1b      	ldr	r3, [pc, #108]	@ (801086c <tcp_get_value+0x17c>)
 80107fe:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 8010806:	2304      	movs	r3, #4
 8010808:	e02b      	b.n	8010862 <tcp_get_value+0x172>
  case 11: /* tcpOutSegs */
    *uint_ptr = STATS_GET(mib2.tcpoutsegs);
 801080a:	4b18      	ldr	r3, [pc, #96]	@ (801086c <tcp_get_value+0x17c>)
 801080c:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 8010814:	2304      	movs	r3, #4
 8010816:	e024      	b.n	8010862 <tcp_get_value+0x172>
  case 12: /* tcpRetransSegs */
    *uint_ptr = STATS_GET(mib2.tcpretranssegs);
 8010818:	4b14      	ldr	r3, [pc, #80]	@ (801086c <tcp_get_value+0x17c>)
 801081a:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 8010822:	2304      	movs	r3, #4
 8010824:	e01d      	b.n	8010862 <tcp_get_value+0x172>
  case 14: /* tcpInErrs */
    *uint_ptr = STATS_GET(mib2.tcpinerrs);
 8010826:	4b11      	ldr	r3, [pc, #68]	@ (801086c <tcp_get_value+0x17c>)
 8010828:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 8010830:	2304      	movs	r3, #4
 8010832:	e016      	b.n	8010862 <tcp_get_value+0x172>
  case 15: /* tcpOutRsts */
    *uint_ptr = STATS_GET(mib2.tcpoutrsts);
 8010834:	4b0d      	ldr	r3, [pc, #52]	@ (801086c <tcp_get_value+0x17c>)
 8010836:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 801083e:	2304      	movs	r3, #4
 8010840:	e00f      	b.n	8010862 <tcp_get_value+0x172>
  case 17: /* tcpHCInSegs */
    memset(value, 0, 2*sizeof(u32_t)); /* not supported */
 8010842:	2208      	movs	r2, #8
 8010844:	2100      	movs	r1, #0
 8010846:	6838      	ldr	r0, [r7, #0]
 8010848:	f011 fbf4 	bl	8022034 <memset>
    return 2*sizeof(u32_t);
 801084c:	2308      	movs	r3, #8
 801084e:	e008      	b.n	8010862 <tcp_get_value+0x172>
  case 18: /* tcpHCOutSegs */
    memset(value, 0, 2*sizeof(u32_t)); /* not supported */
 8010850:	2208      	movs	r2, #8
 8010852:	2100      	movs	r1, #0
 8010854:	6838      	ldr	r0, [r7, #0]
 8010856:	f011 fbed 	bl	8022034 <memset>
    return 2*sizeof(u32_t);
 801085a:	2308      	movs	r3, #8
 801085c:	e001      	b.n	8010862 <tcp_get_value+0x172>
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("tcp_get_value(): unknown id: %"S32_F"\n", instance->node->oid));
    break;
 801085e:	bf00      	nop
  }

  return 0;
 8010860:	2300      	movs	r3, #0
}
 8010862:	4618      	mov	r0, r3
 8010864:	3718      	adds	r7, #24
 8010866:	46bd      	mov	sp, r7
 8010868:	bd80      	pop	{r7, pc}
 801086a:	bf00      	nop
 801086c:	2000be88 	.word	0x2000be88
 8010870:	2000c02c 	.word	0x2000c02c

08010874 <tcp_ConnTable_get_cell_value_core>:
  { 0, 0xffff }  /* Port */
};

static snmp_err_t
tcp_ConnTable_get_cell_value_core(struct tcp_pcb *pcb, const u32_t* column, union snmp_variant_value* value, u32_t* value_len)
{
 8010874:	b580      	push	{r7, lr}
 8010876:	b084      	sub	sp, #16
 8010878:	af00      	add	r7, sp, #0
 801087a:	60f8      	str	r0, [r7, #12]
 801087c:	60b9      	str	r1, [r7, #8]
 801087e:	607a      	str	r2, [r7, #4]
 8010880:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(value_len);

  /* value */
  switch (*column) {
 8010882:	68bb      	ldr	r3, [r7, #8]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	3b01      	subs	r3, #1
 8010888:	2b04      	cmp	r3, #4
 801088a:	d83b      	bhi.n	8010904 <tcp_ConnTable_get_cell_value_core+0x90>
 801088c:	a201      	add	r2, pc, #4	@ (adr r2, 8010894 <tcp_ConnTable_get_cell_value_core+0x20>)
 801088e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010892:	bf00      	nop
 8010894:	080108a9 	.word	0x080108a9
 8010898:	080108b7 	.word	0x080108b7
 801089c:	080108c1 	.word	0x080108c1
 80108a0:	080108cd 	.word	0x080108cd
 80108a4:	080108e9 	.word	0x080108e9
  case 1: /* tcpConnState */
    value->u32 = pcb->state + 1;
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	7d1b      	ldrb	r3, [r3, #20]
 80108ac:	3301      	adds	r3, #1
 80108ae:	461a      	mov	r2, r3
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	601a      	str	r2, [r3, #0]
    break;
 80108b4:	e02e      	b.n	8010914 <tcp_ConnTable_get_cell_value_core+0xa0>
  case 2: /* tcpConnLocalAddress */
    value->u32 = ip_2_ip4(&pcb->local_ip)->addr;
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	681a      	ldr	r2, [r3, #0]
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	601a      	str	r2, [r3, #0]
    break;
 80108be:	e029      	b.n	8010914 <tcp_ConnTable_get_cell_value_core+0xa0>
  case 3: /* tcpConnLocalPort */
    value->u32 = pcb->local_port;
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	8adb      	ldrh	r3, [r3, #22]
 80108c4:	461a      	mov	r2, r3
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	601a      	str	r2, [r3, #0]
    break;
 80108ca:	e023      	b.n	8010914 <tcp_ConnTable_get_cell_value_core+0xa0>
  case 4: /* tcpConnRemAddress */
    if (pcb->state == LISTEN) {
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	7d1b      	ldrb	r3, [r3, #20]
 80108d0:	2b01      	cmp	r3, #1
 80108d2:	d104      	bne.n	80108de <tcp_ConnTable_get_cell_value_core+0x6a>
      value->u32 = IP4_ADDR_ANY4->addr;
 80108d4:	4b12      	ldr	r3, [pc, #72]	@ (8010920 <tcp_ConnTable_get_cell_value_core+0xac>)
 80108d6:	681a      	ldr	r2, [r3, #0]
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	601a      	str	r2, [r3, #0]
    } else {
      value->u32 = ip_2_ip4(&pcb->remote_ip)->addr;
    }
    break;
 80108dc:	e01a      	b.n	8010914 <tcp_ConnTable_get_cell_value_core+0xa0>
      value->u32 = ip_2_ip4(&pcb->remote_ip)->addr;
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	685a      	ldr	r2, [r3, #4]
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	601a      	str	r2, [r3, #0]
    break;
 80108e6:	e015      	b.n	8010914 <tcp_ConnTable_get_cell_value_core+0xa0>
  case 5: /* tcpConnRemPort */
    if (pcb->state == LISTEN) {
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	7d1b      	ldrb	r3, [r3, #20]
 80108ec:	2b01      	cmp	r3, #1
 80108ee:	d103      	bne.n	80108f8 <tcp_ConnTable_get_cell_value_core+0x84>
      value->u32 = 0;
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	2200      	movs	r2, #0
 80108f4:	601a      	str	r2, [r3, #0]
    } else {
      value->u32 = pcb->remote_port;
    }
    break;
 80108f6:	e00d      	b.n	8010914 <tcp_ConnTable_get_cell_value_core+0xa0>
      value->u32 = pcb->remote_port;
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	8b1b      	ldrh	r3, [r3, #24]
 80108fc:	461a      	mov	r2, r3
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	601a      	str	r2, [r3, #0]
    break;
 8010902:	e007      	b.n	8010914 <tcp_ConnTable_get_cell_value_core+0xa0>
  default:
    LWIP_ASSERT("invalid id", 0);
 8010904:	4b07      	ldr	r3, [pc, #28]	@ (8010924 <tcp_ConnTable_get_cell_value_core+0xb0>)
 8010906:	22bc      	movs	r2, #188	@ 0xbc
 8010908:	4907      	ldr	r1, [pc, #28]	@ (8010928 <tcp_ConnTable_get_cell_value_core+0xb4>)
 801090a:	4808      	ldr	r0, [pc, #32]	@ (801092c <tcp_ConnTable_get_cell_value_core+0xb8>)
 801090c:	f011 f9bc 	bl	8021c88 <iprintf>
    return SNMP_ERR_NOSUCHINSTANCE;
 8010910:	23f1      	movs	r3, #241	@ 0xf1
 8010912:	e000      	b.n	8010916 <tcp_ConnTable_get_cell_value_core+0xa2>
  }

  return SNMP_ERR_NOERROR;
 8010914:	2300      	movs	r3, #0
}
 8010916:	4618      	mov	r0, r3
 8010918:	3710      	adds	r7, #16
 801091a:	46bd      	mov	sp, r7
 801091c:	bd80      	pop	{r7, pc}
 801091e:	bf00      	nop
 8010920:	08030cf4 	.word	0x08030cf4
 8010924:	080255b8 	.word	0x080255b8
 8010928:	080255f8 	.word	0x080255f8
 801092c:	08025604 	.word	0x08025604

08010930 <tcp_ConnTable_get_cell_value>:

static snmp_err_t
tcp_ConnTable_get_cell_value(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, union snmp_variant_value* value, u32_t* value_len)
{
 8010930:	b580      	push	{r7, lr}
 8010932:	b08a      	sub	sp, #40	@ 0x28
 8010934:	af00      	add	r7, sp, #0
 8010936:	60f8      	str	r0, [r7, #12]
 8010938:	60b9      	str	r1, [r7, #8]
 801093a:	603b      	str	r3, [r7, #0]
 801093c:	4613      	mov	r3, r2
 801093e:	71fb      	strb	r3, [r7, #7]
  u16_t local_port;
  u16_t remote_port;
  struct tcp_pcb *pcb;

  /* check if incoming OID length and if values are in plausible range */
  if (!snmp_oid_in_range(row_oid, row_oid_len, tcp_ConnTable_oid_ranges, LWIP_ARRAYSIZE(tcp_ConnTable_oid_ranges))) {
 8010940:	79f9      	ldrb	r1, [r7, #7]
 8010942:	230a      	movs	r3, #10
 8010944:	4a37      	ldr	r2, [pc, #220]	@ (8010a24 <tcp_ConnTable_get_cell_value+0xf4>)
 8010946:	68b8      	ldr	r0, [r7, #8]
 8010948:	f7fe fd2e 	bl	800f3a8 <snmp_oid_in_range>
 801094c:	4603      	mov	r3, r0
 801094e:	2b00      	cmp	r3, #0
 8010950:	d101      	bne.n	8010956 <tcp_ConnTable_get_cell_value+0x26>
    return SNMP_ERR_NOSUCHINSTANCE;
 8010952:	23f1      	movs	r3, #241	@ 0xf1
 8010954:	e061      	b.n	8010a1a <tcp_ConnTable_get_cell_value+0xea>
  }

  /* get IPs and ports from incoming OID */
  snmp_oid_to_ip4(&row_oid[0], &local_ip); /* we know it succeeds because of oid_in_range check above */
 8010956:	f107 0318 	add.w	r3, r7, #24
 801095a:	4619      	mov	r1, r3
 801095c:	68b8      	ldr	r0, [r7, #8]
 801095e:	f7fd fdd5 	bl	800e50c <snmp_oid_to_ip4>
  local_port = (u16_t)row_oid[4];
 8010962:	68bb      	ldr	r3, [r7, #8]
 8010964:	3310      	adds	r3, #16
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	83fb      	strh	r3, [r7, #30]
  snmp_oid_to_ip4(&row_oid[5], &remote_ip); /* we know it succeeds because of oid_in_range check above */
 801096a:	68bb      	ldr	r3, [r7, #8]
 801096c:	3314      	adds	r3, #20
 801096e:	f107 0214 	add.w	r2, r7, #20
 8010972:	4611      	mov	r1, r2
 8010974:	4618      	mov	r0, r3
 8010976:	f7fd fdc9 	bl	800e50c <snmp_oid_to_ip4>
  remote_port = (u16_t)row_oid[9];
 801097a:	68bb      	ldr	r3, [r7, #8]
 801097c:	3324      	adds	r3, #36	@ 0x24
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	83bb      	strh	r3, [r7, #28]

  /* find tcp_pcb with requested ips and ports */
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010982:	2300      	movs	r3, #0
 8010984:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010988:	e042      	b.n	8010a10 <tcp_ConnTable_get_cell_value+0xe0>
    pcb = *tcp_pcb_lists[i];
 801098a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801098e:	4a26      	ldr	r2, [pc, #152]	@ (8010a28 <tcp_ConnTable_get_cell_value+0xf8>)
 8010990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	623b      	str	r3, [r7, #32]

    while (pcb != NULL) {
 8010998:	e032      	b.n	8010a00 <tcp_ConnTable_get_cell_value+0xd0>
      /* do local IP and local port match? */
      if (IP_IS_V4_VAL(pcb->local_ip) &&
         ip4_addr_cmp(&local_ip, ip_2_ip4(&pcb->local_ip)) && (local_port == pcb->local_port)) {
 801099a:	69ba      	ldr	r2, [r7, #24]
 801099c:	6a3b      	ldr	r3, [r7, #32]
 801099e:	681b      	ldr	r3, [r3, #0]
      if (IP_IS_V4_VAL(pcb->local_ip) &&
 80109a0:	429a      	cmp	r2, r3
 80109a2:	d12a      	bne.n	80109fa <tcp_ConnTable_get_cell_value+0xca>
         ip4_addr_cmp(&local_ip, ip_2_ip4(&pcb->local_ip)) && (local_port == pcb->local_port)) {
 80109a4:	6a3b      	ldr	r3, [r7, #32]
 80109a6:	8adb      	ldrh	r3, [r3, #22]
 80109a8:	8bfa      	ldrh	r2, [r7, #30]
 80109aa:	429a      	cmp	r2, r3
 80109ac:	d125      	bne.n	80109fa <tcp_ConnTable_get_cell_value+0xca>

        /* PCBs in state LISTEN are not connected and have no remote_ip or remote_port */
        if (pcb->state == LISTEN) {
 80109ae:	6a3b      	ldr	r3, [r7, #32]
 80109b0:	7d1b      	ldrb	r3, [r3, #20]
 80109b2:	2b01      	cmp	r3, #1
 80109b4:	d10f      	bne.n	80109d6 <tcp_ConnTable_get_cell_value+0xa6>
          if (ip4_addr_cmp(&remote_ip, IP4_ADDR_ANY4) && (remote_port == 0)) {
 80109b6:	697a      	ldr	r2, [r7, #20]
 80109b8:	4b1c      	ldr	r3, [pc, #112]	@ (8010a2c <tcp_ConnTable_get_cell_value+0xfc>)
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	429a      	cmp	r2, r3
 80109be:	d11c      	bne.n	80109fa <tcp_ConnTable_get_cell_value+0xca>
 80109c0:	8bbb      	ldrh	r3, [r7, #28]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d119      	bne.n	80109fa <tcp_ConnTable_get_cell_value+0xca>
            /* fill in object properties */
            return tcp_ConnTable_get_cell_value_core(pcb, column, value, value_len);
 80109c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109c8:	683a      	ldr	r2, [r7, #0]
 80109ca:	68f9      	ldr	r1, [r7, #12]
 80109cc:	6a38      	ldr	r0, [r7, #32]
 80109ce:	f7ff ff51 	bl	8010874 <tcp_ConnTable_get_cell_value_core>
 80109d2:	4603      	mov	r3, r0
 80109d4:	e021      	b.n	8010a1a <tcp_ConnTable_get_cell_value+0xea>
          }
        } else {
          if (IP_IS_V4_VAL(pcb->remote_ip) &&
             ip4_addr_cmp(&remote_ip, ip_2_ip4(&pcb->remote_ip)) && (remote_port == pcb->remote_port)) {
 80109d6:	697a      	ldr	r2, [r7, #20]
 80109d8:	6a3b      	ldr	r3, [r7, #32]
 80109da:	685b      	ldr	r3, [r3, #4]
          if (IP_IS_V4_VAL(pcb->remote_ip) &&
 80109dc:	429a      	cmp	r2, r3
 80109de:	d10c      	bne.n	80109fa <tcp_ConnTable_get_cell_value+0xca>
             ip4_addr_cmp(&remote_ip, ip_2_ip4(&pcb->remote_ip)) && (remote_port == pcb->remote_port)) {
 80109e0:	6a3b      	ldr	r3, [r7, #32]
 80109e2:	8b1b      	ldrh	r3, [r3, #24]
 80109e4:	8bba      	ldrh	r2, [r7, #28]
 80109e6:	429a      	cmp	r2, r3
 80109e8:	d107      	bne.n	80109fa <tcp_ConnTable_get_cell_value+0xca>
            /* fill in object properties */
            return tcp_ConnTable_get_cell_value_core(pcb, column, value, value_len);
 80109ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109ec:	683a      	ldr	r2, [r7, #0]
 80109ee:	68f9      	ldr	r1, [r7, #12]
 80109f0:	6a38      	ldr	r0, [r7, #32]
 80109f2:	f7ff ff3f 	bl	8010874 <tcp_ConnTable_get_cell_value_core>
 80109f6:	4603      	mov	r3, r0
 80109f8:	e00f      	b.n	8010a1a <tcp_ConnTable_get_cell_value+0xea>
          }
        }
      }

      pcb = pcb->next;
 80109fa:	6a3b      	ldr	r3, [r7, #32]
 80109fc:	68db      	ldr	r3, [r3, #12]
 80109fe:	623b      	str	r3, [r7, #32]
    while (pcb != NULL) {
 8010a00:	6a3b      	ldr	r3, [r7, #32]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d1c9      	bne.n	801099a <tcp_ConnTable_get_cell_value+0x6a>
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010a06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010a0a:	3301      	adds	r3, #1
 8010a0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010a10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010a14:	2b03      	cmp	r3, #3
 8010a16:	d9b8      	bls.n	801098a <tcp_ConnTable_get_cell_value+0x5a>
    }
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 8010a18:	23f1      	movs	r3, #241	@ 0xf1
}
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	3728      	adds	r7, #40	@ 0x28
 8010a1e:	46bd      	mov	sp, r7
 8010a20:	bd80      	pop	{r7, pc}
 8010a22:	bf00      	nop
 8010a24:	08030668 	.word	0x08030668
 8010a28:	08030cbc 	.word	0x08030cbc
 8010a2c:	08030cf4 	.word	0x08030cf4

08010a30 <tcp_ConnTable_get_next_cell_instance_and_value>:

static snmp_err_t
tcp_ConnTable_get_next_cell_instance_and_value(const u32_t* column, struct snmp_obj_id* row_oid, union snmp_variant_value* value, u32_t* value_len)
{
 8010a30:	b590      	push	{r4, r7, lr}
 8010a32:	b0a3      	sub	sp, #140	@ 0x8c
 8010a34:	af02      	add	r7, sp, #8
 8010a36:	60f8      	str	r0, [r7, #12]
 8010a38:	60b9      	str	r1, [r7, #8]
 8010a3a:	607a      	str	r2, [r7, #4]
 8010a3c:	603b      	str	r3, [r7, #0]
  struct tcp_pcb *pcb;
  struct snmp_next_oid_state state;
  u32_t result_temp[LWIP_ARRAYSIZE(tcp_ConnTable_oid_ranges)];

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(tcp_ConnTable_oid_ranges));
 8010a3e:	68bb      	ldr	r3, [r7, #8]
 8010a40:	1d19      	adds	r1, r3, #4
 8010a42:	68bb      	ldr	r3, [r7, #8]
 8010a44:	781a      	ldrb	r2, [r3, #0]
 8010a46:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8010a4a:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8010a4e:	240a      	movs	r4, #10
 8010a50:	9400      	str	r4, [sp, #0]
 8010a52:	f7fe fc44 	bl	800f2de <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010a56:	2300      	movs	r3, #0
 8010a58:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8010a5c:	e03e      	b.n	8010adc <tcp_ConnTable_get_next_cell_instance_and_value+0xac>
    pcb = *tcp_pcb_lists[i];
 8010a5e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8010a62:	4a2c      	ldr	r2, [pc, #176]	@ (8010b14 <tcp_ConnTable_get_next_cell_instance_and_value+0xe4>)
 8010a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	67bb      	str	r3, [r7, #120]	@ 0x78
    while (pcb != NULL) {
 8010a6c:	e02e      	b.n	8010acc <tcp_ConnTable_get_next_cell_instance_and_value+0x9c>
      u32_t test_oid[LWIP_ARRAYSIZE(tcp_ConnTable_oid_ranges)];

      if (IP_IS_V4_VAL(pcb->local_ip)) {
        snmp_ip4_to_oid(ip_2_ip4(&pcb->local_ip), &test_oid[0]);
 8010a6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010a70:	f107 0214 	add.w	r2, r7, #20
 8010a74:	4611      	mov	r1, r2
 8010a76:	4618      	mov	r0, r3
 8010a78:	f7fd fdd0 	bl	800e61c <snmp_ip4_to_oid>
        test_oid[4] = pcb->local_port;
 8010a7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010a7e:	8adb      	ldrh	r3, [r3, #22]
 8010a80:	627b      	str	r3, [r7, #36]	@ 0x24

        /* PCBs in state LISTEN are not connected and have no remote_ip or remote_port */
        if (pcb->state == LISTEN) {
 8010a82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010a84:	7d1b      	ldrb	r3, [r3, #20]
 8010a86:	2b01      	cmp	r3, #1
 8010a88:	d109      	bne.n	8010a9e <tcp_ConnTable_get_next_cell_instance_and_value+0x6e>
          snmp_ip4_to_oid(IP4_ADDR_ANY4, &test_oid[5]);
 8010a8a:	f107 0314 	add.w	r3, r7, #20
 8010a8e:	3314      	adds	r3, #20
 8010a90:	4619      	mov	r1, r3
 8010a92:	4821      	ldr	r0, [pc, #132]	@ (8010b18 <tcp_ConnTable_get_next_cell_instance_and_value+0xe8>)
 8010a94:	f7fd fdc2 	bl	800e61c <snmp_ip4_to_oid>
          test_oid[9] = 0;
 8010a98:	2300      	movs	r3, #0
 8010a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010a9c:	e00b      	b.n	8010ab6 <tcp_ConnTable_get_next_cell_instance_and_value+0x86>
        } else {
          if (IP_IS_V6_VAL(pcb->remote_ip)) { /* should never happen */
            continue;
          }
          snmp_ip4_to_oid(ip_2_ip4(&pcb->remote_ip), &test_oid[5]);
 8010a9e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010aa0:	1d1a      	adds	r2, r3, #4
 8010aa2:	f107 0314 	add.w	r3, r7, #20
 8010aa6:	3314      	adds	r3, #20
 8010aa8:	4619      	mov	r1, r3
 8010aaa:	4610      	mov	r0, r2
 8010aac:	f7fd fdb6 	bl	800e61c <snmp_ip4_to_oid>
          test_oid[9] = pcb->remote_port;
 8010ab0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010ab2:	8b1b      	ldrh	r3, [r3, #24]
 8010ab4:	63bb      	str	r3, [r7, #56]	@ 0x38
        }

        /* check generated OID: is it a candidate for the next one? */
        snmp_next_oid_check(&state, test_oid, LWIP_ARRAYSIZE(tcp_ConnTable_oid_ranges), pcb);
 8010ab6:	f107 0114 	add.w	r1, r7, #20
 8010aba:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8010abe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010ac0:	220a      	movs	r2, #10
 8010ac2:	f7fe fc2b 	bl	800f31c <snmp_next_oid_check>
      }

      pcb = pcb->next;
 8010ac6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010ac8:	68db      	ldr	r3, [r3, #12]
 8010aca:	67bb      	str	r3, [r7, #120]	@ 0x78
    while (pcb != NULL) {
 8010acc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d1cd      	bne.n	8010a6e <tcp_ConnTable_get_next_cell_instance_and_value+0x3e>
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010ad2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8010ad6:	3301      	adds	r3, #1
 8010ad8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8010adc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8010ae0:	2b03      	cmp	r3, #3
 8010ae2:	d9bc      	bls.n	8010a5e <tcp_ConnTable_get_next_cell_instance_and_value+0x2e>
    }
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 8010ae4:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d10e      	bne.n	8010b0a <tcp_ConnTable_get_next_cell_instance_and_value+0xda>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 8010aec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010aee:	f897 2070 	ldrb.w	r2, [r7, #112]	@ 0x70
 8010af2:	4619      	mov	r1, r3
 8010af4:	68b8      	ldr	r0, [r7, #8]
 8010af6:	f7fd fe6f 	bl	800e7d8 <snmp_oid_assign>
    /* fill in object properties */
    return tcp_ConnTable_get_cell_value_core((struct tcp_pcb*)state.reference, column, value, value_len);
 8010afa:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8010afc:	683b      	ldr	r3, [r7, #0]
 8010afe:	687a      	ldr	r2, [r7, #4]
 8010b00:	68f9      	ldr	r1, [r7, #12]
 8010b02:	f7ff feb7 	bl	8010874 <tcp_ConnTable_get_cell_value_core>
 8010b06:	4603      	mov	r3, r0
 8010b08:	e000      	b.n	8010b0c <tcp_ConnTable_get_next_cell_instance_and_value+0xdc>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 8010b0a:	23f1      	movs	r3, #241	@ 0xf1
}
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	3784      	adds	r7, #132	@ 0x84
 8010b10:	46bd      	mov	sp, r7
 8010b12:	bd90      	pop	{r4, r7, pc}
 8010b14:	08030cbc 	.word	0x08030cbc
 8010b18:	08030cf4 	.word	0x08030cf4

08010b1c <tcp_ConnectionTable_get_cell_value_core>:

/* --- tcpConnectionTable --- */

static snmp_err_t
tcp_ConnectionTable_get_cell_value_core(const u32_t* column, struct tcp_pcb *pcb, union snmp_variant_value* value)
{
 8010b1c:	b480      	push	{r7}
 8010b1e:	b085      	sub	sp, #20
 8010b20:	af00      	add	r7, sp, #0
 8010b22:	60f8      	str	r0, [r7, #12]
 8010b24:	60b9      	str	r1, [r7, #8]
 8010b26:	607a      	str	r2, [r7, #4]
  /* all items except tcpConnectionState and tcpConnectionProcess are declared as not-accessible */
  switch (*column) {
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	2b07      	cmp	r3, #7
 8010b2e:	d002      	beq.n	8010b36 <tcp_ConnectionTable_get_cell_value_core+0x1a>
 8010b30:	2b08      	cmp	r3, #8
 8010b32:	d007      	beq.n	8010b44 <tcp_ConnectionTable_get_cell_value_core+0x28>
 8010b34:	e00a      	b.n	8010b4c <tcp_ConnectionTable_get_cell_value_core+0x30>
  case 7: /* tcpConnectionState */
    value->u32 = pcb->state + 1;
 8010b36:	68bb      	ldr	r3, [r7, #8]
 8010b38:	7d1b      	ldrb	r3, [r3, #20]
 8010b3a:	3301      	adds	r3, #1
 8010b3c:	461a      	mov	r2, r3
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	601a      	str	r2, [r3, #0]
    break;
 8010b42:	e005      	b.n	8010b50 <tcp_ConnectionTable_get_cell_value_core+0x34>
  case 8: /* tcpConnectionProcess */
    value->u32 = 0; /* not supported */
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	2200      	movs	r2, #0
 8010b48:	601a      	str	r2, [r3, #0]
    break;
 8010b4a:	e001      	b.n	8010b50 <tcp_ConnectionTable_get_cell_value_core+0x34>
  default:
    return SNMP_ERR_NOSUCHINSTANCE;
 8010b4c:	23f1      	movs	r3, #241	@ 0xf1
 8010b4e:	e000      	b.n	8010b52 <tcp_ConnectionTable_get_cell_value_core+0x36>
  }

  return SNMP_ERR_NOERROR;
 8010b50:	2300      	movs	r3, #0
}
 8010b52:	4618      	mov	r0, r3
 8010b54:	3714      	adds	r7, #20
 8010b56:	46bd      	mov	sp, r7
 8010b58:	bc80      	pop	{r7}
 8010b5a:	4770      	bx	lr

08010b5c <tcp_ConnectionTable_get_cell_value>:

static snmp_err_t
tcp_ConnectionTable_get_cell_value(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, union snmp_variant_value* value, u32_t* value_len)
{
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b08c      	sub	sp, #48	@ 0x30
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	60f8      	str	r0, [r7, #12]
 8010b64:	60b9      	str	r1, [r7, #8]
 8010b66:	603b      	str	r3, [r7, #0]
 8010b68:	4613      	mov	r3, r2
 8010b6a:	71fb      	strb	r3, [r7, #7]
  ip_addr_t local_ip, remote_ip;
  u16_t local_port, remote_port;
  struct tcp_pcb *pcb;
  u8_t idx = 0;
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  u8_t i;
  struct tcp_pcb ** const tcp_pcb_nonlisten_lists[] = {&tcp_bound_pcbs, &tcp_active_pcbs, &tcp_tw_pcbs};
 8010b72:	4a3e      	ldr	r2, [pc, #248]	@ (8010c6c <tcp_ConnectionTable_get_cell_value+0x110>)
 8010b74:	f107 0310 	add.w	r3, r7, #16
 8010b78:	ca07      	ldmia	r2, {r0, r1, r2}
 8010b7a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  LWIP_UNUSED_ARG(value_len);

  /* tcpConnectionLocalAddressType + tcpConnectionLocalAddress + tcpConnectionLocalPort */
  idx += snmp_oid_to_ip_port(&row_oid[idx], row_oid_len-idx, &local_ip, &local_port);
 8010b7e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8010b82:	009b      	lsls	r3, r3, #2
 8010b84:	68ba      	ldr	r2, [r7, #8]
 8010b86:	18d0      	adds	r0, r2, r3
 8010b88:	79fa      	ldrb	r2, [r7, #7]
 8010b8a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8010b8e:	1ad3      	subs	r3, r2, r3
 8010b90:	b2d9      	uxtb	r1, r3
 8010b92:	f107 031e 	add.w	r3, r7, #30
 8010b96:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8010b9a:	f7fd fddd 	bl	800e758 <snmp_oid_to_ip_port>
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	461a      	mov	r2, r3
 8010ba2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8010ba6:	4413      	add	r3, r2
 8010ba8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  if (idx == 0) {
 8010bac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d101      	bne.n	8010bb8 <tcp_ConnectionTable_get_cell_value+0x5c>
    return SNMP_ERR_NOSUCHINSTANCE;
 8010bb4:	23f1      	movs	r3, #241	@ 0xf1
 8010bb6:	e055      	b.n	8010c64 <tcp_ConnectionTable_get_cell_value+0x108>
  }

  /* tcpConnectionRemAddressType + tcpConnectionRemAddress + tcpConnectionRemPort */
  idx += snmp_oid_to_ip_port(&row_oid[idx], row_oid_len-idx, &remote_ip, &remote_port);
 8010bb8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8010bbc:	009b      	lsls	r3, r3, #2
 8010bbe:	68ba      	ldr	r2, [r7, #8]
 8010bc0:	18d0      	adds	r0, r2, r3
 8010bc2:	79fa      	ldrb	r2, [r7, #7]
 8010bc4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8010bc8:	1ad3      	subs	r3, r2, r3
 8010bca:	b2d9      	uxtb	r1, r3
 8010bcc:	f107 031c 	add.w	r3, r7, #28
 8010bd0:	f107 0220 	add.w	r2, r7, #32
 8010bd4:	f7fd fdc0 	bl	800e758 <snmp_oid_to_ip_port>
 8010bd8:	4603      	mov	r3, r0
 8010bda:	461a      	mov	r2, r3
 8010bdc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8010be0:	4413      	add	r3, r2
 8010be2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  if (idx == 0) {
 8010be6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d101      	bne.n	8010bf2 <tcp_ConnectionTable_get_cell_value+0x96>
    return SNMP_ERR_NOSUCHINSTANCE;
 8010bee:	23f1      	movs	r3, #241	@ 0xf1
 8010bf0:	e038      	b.n	8010c64 <tcp_ConnectionTable_get_cell_value+0x108>
  }

  /* find tcp_pcb with requested ip and port*/
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_nonlisten_lists); i++) {
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010bf8:	e02f      	b.n	8010c5a <tcp_ConnectionTable_get_cell_value+0xfe>
    pcb = *tcp_pcb_nonlisten_lists[i];
 8010bfa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010bfe:	009b      	lsls	r3, r3, #2
 8010c00:	3330      	adds	r3, #48	@ 0x30
 8010c02:	443b      	add	r3, r7
 8010c04:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while (pcb != NULL) {
 8010c0c:	e01d      	b.n	8010c4a <tcp_ConnectionTable_get_cell_value+0xee>
      if (ip_addr_cmp(&local_ip, &pcb->local_ip) &&
 8010c0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	429a      	cmp	r2, r3
 8010c16:	d115      	bne.n	8010c44 <tcp_ConnectionTable_get_cell_value+0xe8>
         (local_port == pcb->local_port) &&
 8010c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c1a:	8ada      	ldrh	r2, [r3, #22]
 8010c1c:	8bfb      	ldrh	r3, [r7, #30]
      if (ip_addr_cmp(&local_ip, &pcb->local_ip) &&
 8010c1e:	429a      	cmp	r2, r3
 8010c20:	d110      	bne.n	8010c44 <tcp_ConnectionTable_get_cell_value+0xe8>
         ip_addr_cmp(&remote_ip, &pcb->remote_ip) &&
 8010c22:	6a3a      	ldr	r2, [r7, #32]
 8010c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c26:	685b      	ldr	r3, [r3, #4]
         (local_port == pcb->local_port) &&
 8010c28:	429a      	cmp	r2, r3
 8010c2a:	d10b      	bne.n	8010c44 <tcp_ConnectionTable_get_cell_value+0xe8>
         (remote_port == pcb->remote_port)) {
 8010c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c2e:	8b1a      	ldrh	r2, [r3, #24]
 8010c30:	8bbb      	ldrh	r3, [r7, #28]
         ip_addr_cmp(&remote_ip, &pcb->remote_ip) &&
 8010c32:	429a      	cmp	r2, r3
 8010c34:	d106      	bne.n	8010c44 <tcp_ConnectionTable_get_cell_value+0xe8>
        /* fill in object properties */
        return tcp_ConnectionTable_get_cell_value_core(column, pcb, value);
 8010c36:	683a      	ldr	r2, [r7, #0]
 8010c38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010c3a:	68f8      	ldr	r0, [r7, #12]
 8010c3c:	f7ff ff6e 	bl	8010b1c <tcp_ConnectionTable_get_cell_value_core>
 8010c40:	4603      	mov	r3, r0
 8010c42:	e00f      	b.n	8010c64 <tcp_ConnectionTable_get_cell_value+0x108>
      }
      pcb = pcb->next;
 8010c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c46:	68db      	ldr	r3, [r3, #12]
 8010c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (pcb != NULL) {
 8010c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d1de      	bne.n	8010c0e <tcp_ConnectionTable_get_cell_value+0xb2>
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_nonlisten_lists); i++) {
 8010c50:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010c54:	3301      	adds	r3, #1
 8010c56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010c5a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010c5e:	2b02      	cmp	r3, #2
 8010c60:	d9cb      	bls.n	8010bfa <tcp_ConnectionTable_get_cell_value+0x9e>
    }
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 8010c62:	23f1      	movs	r3, #241	@ 0xf1
}
 8010c64:	4618      	mov	r0, r3
 8010c66:	3730      	adds	r7, #48	@ 0x30
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	bd80      	pop	{r7, pc}
 8010c6c:	0802562c 	.word	0x0802562c

08010c70 <tcp_ConnectionTable_get_next_cell_instance_and_value>:

static snmp_err_t
tcp_ConnectionTable_get_next_cell_instance_and_value(const u32_t* column, struct snmp_obj_id* row_oid, union snmp_variant_value* value, u32_t* value_len)
{
 8010c70:	b590      	push	{r4, r7, lr}
 8010c72:	b0dd      	sub	sp, #372	@ 0x174
 8010c74:	af02      	add	r7, sp, #8
 8010c76:	f507 74b4 	add.w	r4, r7, #360	@ 0x168
 8010c7a:	f5a4 74ae 	sub.w	r4, r4, #348	@ 0x15c
 8010c7e:	6020      	str	r0, [r4, #0]
 8010c80:	f507 70b4 	add.w	r0, r7, #360	@ 0x168
 8010c84:	f5a0 70b0 	sub.w	r0, r0, #352	@ 0x160
 8010c88:	6001      	str	r1, [r0, #0]
 8010c8a:	f507 71b4 	add.w	r1, r7, #360	@ 0x168
 8010c8e:	f5a1 71b2 	sub.w	r1, r1, #356	@ 0x164
 8010c92:	600a      	str	r2, [r1, #0]
 8010c94:	f507 72b4 	add.w	r2, r7, #360	@ 0x168
 8010c98:	f5a2 72b4 	sub.w	r2, r2, #360	@ 0x168
 8010c9c:	6013      	str	r3, [r2, #0]
  struct snmp_next_oid_state state;
  /* 1x tcpConnectionLocalAddressType + 1x OID len + 16x tcpConnectionLocalAddress  + 1x tcpConnectionLocalPort
   * 1x tcpConnectionRemAddressType   + 1x OID len + 16x tcpConnectionRemAddress    + 1x tcpConnectionRemPort */
  u32_t  result_temp[38];
  u8_t i;
  struct tcp_pcb ** const tcp_pcb_nonlisten_lists[] = {&tcp_bound_pcbs, &tcp_active_pcbs, &tcp_tw_pcbs};
 8010c9e:	4a4c      	ldr	r2, [pc, #304]	@ (8010dd0 <tcp_ConnectionTable_get_next_cell_instance_and_value+0x160>)
 8010ca0:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8010ca4:	ca07      	ldmia	r2, {r0, r1, r2}
 8010ca6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  LWIP_UNUSED_ARG(value_len);

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(result_temp));
 8010caa:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8010cae:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	1d19      	adds	r1, r3, #4
 8010cb6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8010cba:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	781a      	ldrb	r2, [r3, #0]
 8010cc2:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8010cc6:	f507 70a6 	add.w	r0, r7, #332	@ 0x14c
 8010cca:	2426      	movs	r4, #38	@ 0x26
 8010ccc:	9400      	str	r4, [sp, #0]
 8010cce:	f7fe fb06 	bl	800f2de <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_nonlisten_lists); i++) {
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	f887 3163 	strb.w	r3, [r7, #355]	@ 0x163
 8010cd8:	e051      	b.n	8010d7e <tcp_ConnectionTable_get_next_cell_instance_and_value+0x10e>
    pcb = *tcp_pcb_nonlisten_lists[i];
 8010cda:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 8010cde:	009b      	lsls	r3, r3, #2
 8010ce0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8010ce4:	443b      	add	r3, r7
 8010ce6:	f853 3cc0 	ldr.w	r3, [r3, #-192]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164

    while (pcb != NULL) {
 8010cf0:	e03c      	b.n	8010d6c <tcp_ConnectionTable_get_next_cell_instance_and_value+0xfc>
      u8_t idx = 0;
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	f887 3162 	strb.w	r3, [r7, #354]	@ 0x162
      u32_t test_oid[LWIP_ARRAYSIZE(result_temp)];

      /* tcpConnectionLocalAddressType + tcpConnectionLocalAddress + tcpConnectionLocalPort */
      idx += snmp_ip_port_to_oid(&pcb->local_ip, pcb->local_port, &test_oid[idx]);
 8010cf8:	f8d7 0164 	ldr.w	r0, [r7, #356]	@ 0x164
 8010cfc:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8010d00:	8ad9      	ldrh	r1, [r3, #22]
 8010d02:	f897 3162 	ldrb.w	r3, [r7, #354]	@ 0x162
 8010d06:	f107 0210 	add.w	r2, r7, #16
 8010d0a:	009b      	lsls	r3, r3, #2
 8010d0c:	4413      	add	r3, r2
 8010d0e:	461a      	mov	r2, r3
 8010d10:	f7fd fca5 	bl	800e65e <snmp_ip_port_to_oid>
 8010d14:	4603      	mov	r3, r0
 8010d16:	461a      	mov	r2, r3
 8010d18:	f897 3162 	ldrb.w	r3, [r7, #354]	@ 0x162
 8010d1c:	4413      	add	r3, r2
 8010d1e:	f887 3162 	strb.w	r3, [r7, #354]	@ 0x162

      /* tcpConnectionRemAddressType + tcpConnectionRemAddress + tcpConnectionRemPort */
      idx += snmp_ip_port_to_oid(&pcb->remote_ip, pcb->remote_port, &test_oid[idx]);
 8010d22:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8010d26:	1d18      	adds	r0, r3, #4
 8010d28:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8010d2c:	8b19      	ldrh	r1, [r3, #24]
 8010d2e:	f897 3162 	ldrb.w	r3, [r7, #354]	@ 0x162
 8010d32:	f107 0210 	add.w	r2, r7, #16
 8010d36:	009b      	lsls	r3, r3, #2
 8010d38:	4413      	add	r3, r2
 8010d3a:	461a      	mov	r2, r3
 8010d3c:	f7fd fc8f 	bl	800e65e <snmp_ip_port_to_oid>
 8010d40:	4603      	mov	r3, r0
 8010d42:	461a      	mov	r2, r3
 8010d44:	f897 3162 	ldrb.w	r3, [r7, #354]	@ 0x162
 8010d48:	4413      	add	r3, r2
 8010d4a:	f887 3162 	strb.w	r3, [r7, #354]	@ 0x162

      /* check generated OID: is it a candidate for the next one? */
      snmp_next_oid_check(&state, test_oid, idx, pcb);
 8010d4e:	f897 2162 	ldrb.w	r2, [r7, #354]	@ 0x162
 8010d52:	f107 0110 	add.w	r1, r7, #16
 8010d56:	f507 70a6 	add.w	r0, r7, #332	@ 0x14c
 8010d5a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8010d5e:	f7fe fadd 	bl	800f31c <snmp_next_oid_check>

      pcb = pcb->next;
 8010d62:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8010d66:	68db      	ldr	r3, [r3, #12]
 8010d68:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    while (pcb != NULL) {
 8010d6c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d1be      	bne.n	8010cf2 <tcp_ConnectionTable_get_next_cell_instance_and_value+0x82>
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_nonlisten_lists); i++) {
 8010d74:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 8010d78:	3301      	adds	r3, #1
 8010d7a:	f887 3163 	strb.w	r3, [r7, #355]	@ 0x163
 8010d7e:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 8010d82:	2b02      	cmp	r3, #2
 8010d84:	d9a9      	bls.n	8010cda <tcp_ConnectionTable_get_next_cell_instance_and_value+0x6a>
    }
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 8010d86:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d11a      	bne.n	8010dc4 <tcp_ConnectionTable_get_next_cell_instance_and_value+0x154>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 8010d8e:	f8d7 1154 	ldr.w	r1, [r7, #340]	@ 0x154
 8010d92:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8010d96:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8010d9a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8010d9e:	6818      	ldr	r0, [r3, #0]
 8010da0:	f7fd fd1a 	bl	800e7d8 <snmp_oid_assign>
    /* fill in object properties */
    return tcp_ConnectionTable_get_cell_value_core(column, (struct tcp_pcb*)state.reference, value);
 8010da4:	f8d7 115c 	ldr.w	r1, [r7, #348]	@ 0x15c
 8010da8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8010dac:	f5a3 72b2 	sub.w	r2, r3, #356	@ 0x164
 8010db0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8010db4:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8010db8:	6812      	ldr	r2, [r2, #0]
 8010dba:	6818      	ldr	r0, [r3, #0]
 8010dbc:	f7ff feae 	bl	8010b1c <tcp_ConnectionTable_get_cell_value_core>
 8010dc0:	4603      	mov	r3, r0
 8010dc2:	e000      	b.n	8010dc6 <tcp_ConnectionTable_get_next_cell_instance_and_value+0x156>
  } else {
    /* not found */
    return SNMP_ERR_NOSUCHINSTANCE;
 8010dc4:	23f1      	movs	r3, #241	@ 0xf1
  }
}
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	f507 77b6 	add.w	r7, r7, #364	@ 0x16c
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	bd90      	pop	{r4, r7, pc}
 8010dd0:	0802562c 	.word	0x0802562c

08010dd4 <tcp_ListenerTable_get_cell_value_core>:

/* --- tcpListenerTable --- */

static snmp_err_t
tcp_ListenerTable_get_cell_value_core(const u32_t* column, union snmp_variant_value* value)
{
 8010dd4:	b480      	push	{r7}
 8010dd6:	b083      	sub	sp, #12
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	6078      	str	r0, [r7, #4]
 8010ddc:	6039      	str	r1, [r7, #0]
  /* all items except tcpListenerProcess are declared as not-accessible */
  switch (*column) {
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	2b04      	cmp	r3, #4
 8010de4:	d105      	bne.n	8010df2 <tcp_ListenerTable_get_cell_value_core+0x1e>
  case 4: /* tcpListenerProcess */
    value->u32 = 0; /* not supported */
 8010de6:	683b      	ldr	r3, [r7, #0]
 8010de8:	2200      	movs	r2, #0
 8010dea:	601a      	str	r2, [r3, #0]
    break;
 8010dec:	bf00      	nop
  default:
    return SNMP_ERR_NOSUCHINSTANCE;
  }

  return SNMP_ERR_NOERROR;
 8010dee:	2300      	movs	r3, #0
 8010df0:	e000      	b.n	8010df4 <tcp_ListenerTable_get_cell_value_core+0x20>
    return SNMP_ERR_NOSUCHINSTANCE;
 8010df2:	23f1      	movs	r3, #241	@ 0xf1
}
 8010df4:	4618      	mov	r0, r3
 8010df6:	370c      	adds	r7, #12
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	bc80      	pop	{r7}
 8010dfc:	4770      	bx	lr
	...

08010e00 <tcp_ListenerTable_get_cell_value>:

static snmp_err_t
tcp_ListenerTable_get_cell_value(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, union snmp_variant_value* value, u32_t* value_len)
{
 8010e00:	b580      	push	{r7, lr}
 8010e02:	b088      	sub	sp, #32
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	60f8      	str	r0, [r7, #12]
 8010e08:	60b9      	str	r1, [r7, #8]
 8010e0a:	603b      	str	r3, [r7, #0]
 8010e0c:	4613      	mov	r3, r2
 8010e0e:	71fb      	strb	r3, [r7, #7]
  ip_addr_t local_ip;
  u16_t local_port;
  struct tcp_pcb_listen *pcb;
  u8_t idx = 0;
 8010e10:	2300      	movs	r3, #0
 8010e12:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(value_len);

  /* tcpListenerLocalAddressType + tcpListenerLocalAddress + tcpListenerLocalPort */
  idx += snmp_oid_to_ip_port(&row_oid[idx], row_oid_len-idx, &local_ip, &local_port);
 8010e14:	7efb      	ldrb	r3, [r7, #27]
 8010e16:	009b      	lsls	r3, r3, #2
 8010e18:	68ba      	ldr	r2, [r7, #8]
 8010e1a:	18d0      	adds	r0, r2, r3
 8010e1c:	79fa      	ldrb	r2, [r7, #7]
 8010e1e:	7efb      	ldrb	r3, [r7, #27]
 8010e20:	1ad3      	subs	r3, r2, r3
 8010e22:	b2d9      	uxtb	r1, r3
 8010e24:	f107 0312 	add.w	r3, r7, #18
 8010e28:	f107 0214 	add.w	r2, r7, #20
 8010e2c:	f7fd fc94 	bl	800e758 <snmp_oid_to_ip_port>
 8010e30:	4603      	mov	r3, r0
 8010e32:	461a      	mov	r2, r3
 8010e34:	7efb      	ldrb	r3, [r7, #27]
 8010e36:	4413      	add	r3, r2
 8010e38:	76fb      	strb	r3, [r7, #27]
  if (idx == 0) {
 8010e3a:	7efb      	ldrb	r3, [r7, #27]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d101      	bne.n	8010e44 <tcp_ListenerTable_get_cell_value+0x44>
    return SNMP_ERR_NOSUCHINSTANCE;
 8010e40:	23f1      	movs	r3, #241	@ 0xf1
 8010e42:	e01a      	b.n	8010e7a <tcp_ListenerTable_get_cell_value+0x7a>
  }

  /* find tcp_pcb with requested ip and port*/
  pcb = tcp_listen_pcbs.listen_pcbs;
 8010e44:	4b0f      	ldr	r3, [pc, #60]	@ (8010e84 <tcp_ListenerTable_get_cell_value+0x84>)
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
 8010e4a:	e012      	b.n	8010e72 <tcp_ListenerTable_get_cell_value+0x72>
    if (ip_addr_cmp(&local_ip, &pcb->local_ip) &&
 8010e4c:	697a      	ldr	r2, [r7, #20]
 8010e4e:	69fb      	ldr	r3, [r7, #28]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	429a      	cmp	r2, r3
 8010e54:	d10a      	bne.n	8010e6c <tcp_ListenerTable_get_cell_value+0x6c>
       (local_port == pcb->local_port)) {
 8010e56:	69fb      	ldr	r3, [r7, #28]
 8010e58:	8ada      	ldrh	r2, [r3, #22]
 8010e5a:	8a7b      	ldrh	r3, [r7, #18]
    if (ip_addr_cmp(&local_ip, &pcb->local_ip) &&
 8010e5c:	429a      	cmp	r2, r3
 8010e5e:	d105      	bne.n	8010e6c <tcp_ListenerTable_get_cell_value+0x6c>
      /* fill in object properties */
      return tcp_ListenerTable_get_cell_value_core(column, value);
 8010e60:	6839      	ldr	r1, [r7, #0]
 8010e62:	68f8      	ldr	r0, [r7, #12]
 8010e64:	f7ff ffb6 	bl	8010dd4 <tcp_ListenerTable_get_cell_value_core>
 8010e68:	4603      	mov	r3, r0
 8010e6a:	e006      	b.n	8010e7a <tcp_ListenerTable_get_cell_value+0x7a>
    }
    pcb = pcb->next;
 8010e6c:	69fb      	ldr	r3, [r7, #28]
 8010e6e:	68db      	ldr	r3, [r3, #12]
 8010e70:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
 8010e72:	69fb      	ldr	r3, [r7, #28]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d1e9      	bne.n	8010e4c <tcp_ListenerTable_get_cell_value+0x4c>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 8010e78:	23f1      	movs	r3, #241	@ 0xf1
}
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	3720      	adds	r7, #32
 8010e7e:	46bd      	mov	sp, r7
 8010e80:	bd80      	pop	{r7, pc}
 8010e82:	bf00      	nop
 8010e84:	2000c028 	.word	0x2000c028

08010e88 <tcp_ListenerTable_get_next_cell_instance_and_value>:

static snmp_err_t
tcp_ListenerTable_get_next_cell_instance_and_value(const u32_t* column, struct snmp_obj_id* row_oid, union snmp_variant_value* value, u32_t* value_len)
{
 8010e88:	b590      	push	{r4, r7, lr}
 8010e8a:	b0b5      	sub	sp, #212	@ 0xd4
 8010e8c:	af02      	add	r7, sp, #8
 8010e8e:	60f8      	str	r0, [r7, #12]
 8010e90:	60b9      	str	r1, [r7, #8]
 8010e92:	607a      	str	r2, [r7, #4]
 8010e94:	603b      	str	r3, [r7, #0]
  u32_t  result_temp[19];

  LWIP_UNUSED_ARG(value_len);

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(result_temp));
 8010e96:	68bb      	ldr	r3, [r7, #8]
 8010e98:	1d19      	adds	r1, r3, #4
 8010e9a:	68bb      	ldr	r3, [r7, #8]
 8010e9c:	781a      	ldrb	r2, [r3, #0]
 8010e9e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8010ea2:	f107 00ac 	add.w	r0, r7, #172	@ 0xac
 8010ea6:	2413      	movs	r4, #19
 8010ea8:	9400      	str	r4, [sp, #0]
 8010eaa:	f7fe fa18 	bl	800f2de <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  pcb = tcp_listen_pcbs.listen_pcbs;
 8010eae:	4b23      	ldr	r3, [pc, #140]	@ (8010f3c <tcp_ListenerTable_get_next_cell_instance_and_value+0xb4>)
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  while (pcb != NULL) {
 8010eb6:	e025      	b.n	8010f04 <tcp_ListenerTable_get_next_cell_instance_and_value+0x7c>
    u8_t idx = 0;
 8010eb8:	2300      	movs	r3, #0
 8010eba:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    u32_t test_oid[LWIP_ARRAYSIZE(result_temp)];

    /* tcpListenerLocalAddressType + tcpListenerLocalAddress + tcpListenerLocalPort */
    idx += snmp_ip_port_to_oid(&pcb->local_ip, pcb->local_port, &test_oid[idx]);
 8010ebe:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 8010ec2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010ec6:	8ad9      	ldrh	r1, [r3, #22]
 8010ec8:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8010ecc:	f107 0214 	add.w	r2, r7, #20
 8010ed0:	009b      	lsls	r3, r3, #2
 8010ed2:	4413      	add	r3, r2
 8010ed4:	461a      	mov	r2, r3
 8010ed6:	f7fd fbc2 	bl	800e65e <snmp_ip_port_to_oid>
 8010eda:	4603      	mov	r3, r0
 8010edc:	461a      	mov	r2, r3
 8010ede:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8010ee2:	4413      	add	r3, r2
 8010ee4:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    /* check generated OID: is it a candidate for the next one? */
    snmp_next_oid_check(&state, test_oid, idx, NULL);
 8010ee8:	f897 20c3 	ldrb.w	r2, [r7, #195]	@ 0xc3
 8010eec:	f107 0114 	add.w	r1, r7, #20
 8010ef0:	f107 00ac 	add.w	r0, r7, #172	@ 0xac
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	f7fe fa11 	bl	800f31c <snmp_next_oid_check>

    pcb = pcb->next;
 8010efa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010efe:	68db      	ldr	r3, [r3, #12]
 8010f00:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  while (pcb != NULL) {
 8010f04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d1d5      	bne.n	8010eb8 <tcp_ListenerTable_get_next_cell_instance_and_value+0x30>
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 8010f0c:	f897 30ba 	ldrb.w	r3, [r7, #186]	@ 0xba
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d10d      	bne.n	8010f30 <tcp_ListenerTable_get_next_cell_instance_and_value+0xa8>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 8010f14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010f18:	f897 20b8 	ldrb.w	r2, [r7, #184]	@ 0xb8
 8010f1c:	4619      	mov	r1, r3
 8010f1e:	68b8      	ldr	r0, [r7, #8]
 8010f20:	f7fd fc5a 	bl	800e7d8 <snmp_oid_assign>
    /* fill in object properties */
    return tcp_ListenerTable_get_cell_value_core(column, value);
 8010f24:	6879      	ldr	r1, [r7, #4]
 8010f26:	68f8      	ldr	r0, [r7, #12]
 8010f28:	f7ff ff54 	bl	8010dd4 <tcp_ListenerTable_get_cell_value_core>
 8010f2c:	4603      	mov	r3, r0
 8010f2e:	e000      	b.n	8010f32 <tcp_ListenerTable_get_next_cell_instance_and_value+0xaa>
  } else {
    /* not found */
    return SNMP_ERR_NOSUCHINSTANCE;
 8010f30:	23f1      	movs	r3, #241	@ 0xf1
  }
}
 8010f32:	4618      	mov	r0, r3
 8010f34:	37cc      	adds	r7, #204	@ 0xcc
 8010f36:	46bd      	mov	sp, r7
 8010f38:	bd90      	pop	{r4, r7, pc}
 8010f3a:	bf00      	nop
 8010f3c:	2000c028 	.word	0x2000c028

08010f40 <udp_get_value>:

/* --- udp .1.3.6.1.2.1.7 ----------------------------------------------------- */

static s16_t
udp_get_value(struct snmp_node_instance* instance, void* value)
{
 8010f40:	b580      	push	{r7, lr}
 8010f42:	b084      	sub	sp, #16
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	6078      	str	r0, [r7, #4]
 8010f48:	6039      	str	r1, [r7, #0]
  u32_t *uint_ptr = (u32_t*)value;
 8010f4a:	683b      	ldr	r3, [r7, #0]
 8010f4c:	60fb      	str	r3, [r7, #12]

  switch (instance->node->oid) {
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	685b      	ldr	r3, [r3, #4]
 8010f54:	3b01      	subs	r3, #1
 8010f56:	2b08      	cmp	r3, #8
 8010f58:	d83e      	bhi.n	8010fd8 <udp_get_value+0x98>
 8010f5a:	a201      	add	r2, pc, #4	@ (adr r2, 8010f60 <udp_get_value+0x20>)
 8010f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f60:	08010f85 	.word	0x08010f85
 8010f64:	08010f93 	.word	0x08010f93
 8010f68:	08010fa1 	.word	0x08010fa1
 8010f6c:	08010faf 	.word	0x08010faf
 8010f70:	08010fd9 	.word	0x08010fd9
 8010f74:	08010fd9 	.word	0x08010fd9
 8010f78:	08010fd9 	.word	0x08010fd9
 8010f7c:	08010fbd 	.word	0x08010fbd
 8010f80:	08010fcb 	.word	0x08010fcb
  case 1: /* udpInDatagrams */
    *uint_ptr = STATS_GET(mib2.udpindatagrams);
 8010f84:	4b17      	ldr	r3, [pc, #92]	@ (8010fe4 <udp_get_value+0xa4>)
 8010f86:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 8010f8e:	2304      	movs	r3, #4
 8010f90:	e024      	b.n	8010fdc <udp_get_value+0x9c>
  case 2: /* udpNoPorts */
    *uint_ptr = STATS_GET(mib2.udpnoports);
 8010f92:	4b14      	ldr	r3, [pc, #80]	@ (8010fe4 <udp_get_value+0xa4>)
 8010f94:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 8010f9c:	2304      	movs	r3, #4
 8010f9e:	e01d      	b.n	8010fdc <udp_get_value+0x9c>
  case 3: /* udpInErrors */
    *uint_ptr = STATS_GET(mib2.udpinerrors);
 8010fa0:	4b10      	ldr	r3, [pc, #64]	@ (8010fe4 <udp_get_value+0xa4>)
 8010fa2:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 8010faa:	2304      	movs	r3, #4
 8010fac:	e016      	b.n	8010fdc <udp_get_value+0x9c>
  case 4: /* udpOutDatagrams */
    *uint_ptr = STATS_GET(mib2.udpoutdatagrams);
 8010fae:	4b0d      	ldr	r3, [pc, #52]	@ (8010fe4 <udp_get_value+0xa4>)
 8010fb0:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 8010fb8:	2304      	movs	r3, #4
 8010fba:	e00f      	b.n	8010fdc <udp_get_value+0x9c>
  case 8: /* udpHCInDatagrams */
    memset(value, 0, 2*sizeof(u32_t)); /* not supported */
 8010fbc:	2208      	movs	r2, #8
 8010fbe:	2100      	movs	r1, #0
 8010fc0:	6838      	ldr	r0, [r7, #0]
 8010fc2:	f011 f837 	bl	8022034 <memset>
    return 2*sizeof(u32_t);
 8010fc6:	2308      	movs	r3, #8
 8010fc8:	e008      	b.n	8010fdc <udp_get_value+0x9c>
  case 9: /* udpHCOutDatagrams */
    memset(value, 0, 2*sizeof(u32_t)); /* not supported */
 8010fca:	2208      	movs	r2, #8
 8010fcc:	2100      	movs	r1, #0
 8010fce:	6838      	ldr	r0, [r7, #0]
 8010fd0:	f011 f830 	bl	8022034 <memset>
    return 2*sizeof(u32_t);
 8010fd4:	2308      	movs	r3, #8
 8010fd6:	e001      	b.n	8010fdc <udp_get_value+0x9c>
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("udp_get_value(): unknown id: %"S32_F"\n", instance->node->oid));
    break;
 8010fd8:	bf00      	nop
  }

  return 0;
 8010fda:	2300      	movs	r3, #0
}
 8010fdc:	4618      	mov	r0, r3
 8010fde:	3710      	adds	r7, #16
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	bd80      	pop	{r7, pc}
 8010fe4:	2000be88 	.word	0x2000be88

08010fe8 <udp_endpointTable_get_cell_value_core>:

/* --- udpEndpointTable --- */

static snmp_err_t
udp_endpointTable_get_cell_value_core(const u32_t* column, union snmp_variant_value* value)
{
 8010fe8:	b480      	push	{r7}
 8010fea:	b083      	sub	sp, #12
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
 8010ff0:	6039      	str	r1, [r7, #0]
  /* all items except udpEndpointProcess are declared as not-accessible */
  switch (*column) {
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	2b08      	cmp	r3, #8
 8010ff8:	d105      	bne.n	8011006 <udp_endpointTable_get_cell_value_core+0x1e>
  case 8: /* udpEndpointProcess */
    value->u32 = 0; /* not supported */
 8010ffa:	683b      	ldr	r3, [r7, #0]
 8010ffc:	2200      	movs	r2, #0
 8010ffe:	601a      	str	r2, [r3, #0]
    break;
 8011000:	bf00      	nop
  default:
    return SNMP_ERR_NOSUCHINSTANCE;
  }

  return SNMP_ERR_NOERROR;
 8011002:	2300      	movs	r3, #0
 8011004:	e000      	b.n	8011008 <udp_endpointTable_get_cell_value_core+0x20>
    return SNMP_ERR_NOSUCHINSTANCE;
 8011006:	23f1      	movs	r3, #241	@ 0xf1
}
 8011008:	4618      	mov	r0, r3
 801100a:	370c      	adds	r7, #12
 801100c:	46bd      	mov	sp, r7
 801100e:	bc80      	pop	{r7}
 8011010:	4770      	bx	lr
	...

08011014 <udp_endpointTable_get_cell_value>:

static snmp_err_t
udp_endpointTable_get_cell_value(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, union snmp_variant_value* value, u32_t* value_len)
{
 8011014:	b580      	push	{r7, lr}
 8011016:	b08a      	sub	sp, #40	@ 0x28
 8011018:	af00      	add	r7, sp, #0
 801101a:	60f8      	str	r0, [r7, #12]
 801101c:	60b9      	str	r1, [r7, #8]
 801101e:	603b      	str	r3, [r7, #0]
 8011020:	4613      	mov	r3, r2
 8011022:	71fb      	strb	r3, [r7, #7]
  ip_addr_t local_ip, remote_ip;
  u16_t local_port, remote_port;
  struct udp_pcb *pcb;
  u8_t idx = 0;
 8011024:	2300      	movs	r3, #0
 8011026:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  LWIP_UNUSED_ARG(value_len);

  /* udpEndpointLocalAddressType + udpEndpointLocalAddress + udpEndpointLocalPort */
  idx += snmp_oid_to_ip_port(&row_oid[idx], row_oid_len-idx, &local_ip, &local_port);
 801102a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801102e:	009b      	lsls	r3, r3, #2
 8011030:	68ba      	ldr	r2, [r7, #8]
 8011032:	18d0      	adds	r0, r2, r3
 8011034:	79fa      	ldrb	r2, [r7, #7]
 8011036:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801103a:	1ad3      	subs	r3, r2, r3
 801103c:	b2d9      	uxtb	r1, r3
 801103e:	f107 0316 	add.w	r3, r7, #22
 8011042:	f107 021c 	add.w	r2, r7, #28
 8011046:	f7fd fb87 	bl	800e758 <snmp_oid_to_ip_port>
 801104a:	4603      	mov	r3, r0
 801104c:	461a      	mov	r2, r3
 801104e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011052:	4413      	add	r3, r2
 8011054:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (idx == 0) {
 8011058:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801105c:	2b00      	cmp	r3, #0
 801105e:	d101      	bne.n	8011064 <udp_endpointTable_get_cell_value+0x50>
    return SNMP_ERR_NOSUCHINSTANCE;
 8011060:	23f1      	movs	r3, #241	@ 0xf1
 8011062:	e052      	b.n	801110a <udp_endpointTable_get_cell_value+0xf6>
  }

  /* udpEndpointRemoteAddressType + udpEndpointRemoteAddress + udpEndpointRemotePort */
  idx += snmp_oid_to_ip_port(&row_oid[idx], row_oid_len-idx, &remote_ip, &remote_port);
 8011064:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011068:	009b      	lsls	r3, r3, #2
 801106a:	68ba      	ldr	r2, [r7, #8]
 801106c:	18d0      	adds	r0, r2, r3
 801106e:	79fa      	ldrb	r2, [r7, #7]
 8011070:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011074:	1ad3      	subs	r3, r2, r3
 8011076:	b2d9      	uxtb	r1, r3
 8011078:	f107 0314 	add.w	r3, r7, #20
 801107c:	f107 0218 	add.w	r2, r7, #24
 8011080:	f7fd fb6a 	bl	800e758 <snmp_oid_to_ip_port>
 8011084:	4603      	mov	r3, r0
 8011086:	461a      	mov	r2, r3
 8011088:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801108c:	4413      	add	r3, r2
 801108e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (idx == 0) {
 8011092:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011096:	2b00      	cmp	r3, #0
 8011098:	d101      	bne.n	801109e <udp_endpointTable_get_cell_value+0x8a>
    return SNMP_ERR_NOSUCHINSTANCE;
 801109a:	23f1      	movs	r3, #241	@ 0xf1
 801109c:	e035      	b.n	801110a <udp_endpointTable_get_cell_value+0xf6>
  }

  /* udpEndpointInstance */
  if (row_oid_len < (idx+1)) {
 801109e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80110a2:	79fb      	ldrb	r3, [r7, #7]
 80110a4:	429a      	cmp	r2, r3
 80110a6:	d301      	bcc.n	80110ac <udp_endpointTable_get_cell_value+0x98>
    return SNMP_ERR_NOSUCHINSTANCE;
 80110a8:	23f1      	movs	r3, #241	@ 0xf1
 80110aa:	e02e      	b.n	801110a <udp_endpointTable_get_cell_value+0xf6>
  }
  if (row_oid[idx] != 0) {
 80110ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80110b0:	009b      	lsls	r3, r3, #2
 80110b2:	68ba      	ldr	r2, [r7, #8]
 80110b4:	4413      	add	r3, r2
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d001      	beq.n	80110c0 <udp_endpointTable_get_cell_value+0xac>
    return SNMP_ERR_NOSUCHINSTANCE;
 80110bc:	23f1      	movs	r3, #241	@ 0xf1
 80110be:	e024      	b.n	801110a <udp_endpointTable_get_cell_value+0xf6>
  }
  
  /* find udp_pcb with requested ip and port*/
  pcb = udp_pcbs;
 80110c0:	4b14      	ldr	r3, [pc, #80]	@ (8011114 <udp_endpointTable_get_cell_value+0x100>)
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 80110c6:	e01c      	b.n	8011102 <udp_endpointTable_get_cell_value+0xee>
    if (ip_addr_cmp(&local_ip, &pcb->local_ip) &&
 80110c8:	69fa      	ldr	r2, [r7, #28]
 80110ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	429a      	cmp	r2, r3
 80110d0:	d114      	bne.n	80110fc <udp_endpointTable_get_cell_value+0xe8>
       (local_port == pcb->local_port) &&
 80110d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110d4:	8a5a      	ldrh	r2, [r3, #18]
 80110d6:	8afb      	ldrh	r3, [r7, #22]
    if (ip_addr_cmp(&local_ip, &pcb->local_ip) &&
 80110d8:	429a      	cmp	r2, r3
 80110da:	d10f      	bne.n	80110fc <udp_endpointTable_get_cell_value+0xe8>
       ip_addr_cmp(&remote_ip, &pcb->remote_ip) &&
 80110dc:	69ba      	ldr	r2, [r7, #24]
 80110de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110e0:	685b      	ldr	r3, [r3, #4]
       (local_port == pcb->local_port) &&
 80110e2:	429a      	cmp	r2, r3
 80110e4:	d10a      	bne.n	80110fc <udp_endpointTable_get_cell_value+0xe8>
       (remote_port == pcb->remote_port)) {
 80110e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110e8:	8a9a      	ldrh	r2, [r3, #20]
 80110ea:	8abb      	ldrh	r3, [r7, #20]
       ip_addr_cmp(&remote_ip, &pcb->remote_ip) &&
 80110ec:	429a      	cmp	r2, r3
 80110ee:	d105      	bne.n	80110fc <udp_endpointTable_get_cell_value+0xe8>
      /* fill in object properties */
      return udp_endpointTable_get_cell_value_core(column, value);
 80110f0:	6839      	ldr	r1, [r7, #0]
 80110f2:	68f8      	ldr	r0, [r7, #12]
 80110f4:	f7ff ff78 	bl	8010fe8 <udp_endpointTable_get_cell_value_core>
 80110f8:	4603      	mov	r3, r0
 80110fa:	e006      	b.n	801110a <udp_endpointTable_get_cell_value+0xf6>
    }
    pcb = pcb->next;
 80110fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110fe:	68db      	ldr	r3, [r3, #12]
 8011100:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 8011102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011104:	2b00      	cmp	r3, #0
 8011106:	d1df      	bne.n	80110c8 <udp_endpointTable_get_cell_value+0xb4>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 8011108:	23f1      	movs	r3, #241	@ 0xf1
}
 801110a:	4618      	mov	r0, r3
 801110c:	3728      	adds	r7, #40	@ 0x28
 801110e:	46bd      	mov	sp, r7
 8011110:	bd80      	pop	{r7, pc}
 8011112:	bf00      	nop
 8011114:	2000c07c 	.word	0x2000c07c

08011118 <udp_endpointTable_get_next_cell_instance_and_value>:

static snmp_err_t 
udp_endpointTable_get_next_cell_instance_and_value(const u32_t* column, struct snmp_obj_id* row_oid, union snmp_variant_value* value, u32_t* value_len)
{
 8011118:	b590      	push	{r4, r7, lr}
 801111a:	b0dd      	sub	sp, #372	@ 0x174
 801111c:	af02      	add	r7, sp, #8
 801111e:	f507 74b4 	add.w	r4, r7, #360	@ 0x168
 8011122:	f5a4 74ae 	sub.w	r4, r4, #348	@ 0x15c
 8011126:	6020      	str	r0, [r4, #0]
 8011128:	f507 70b4 	add.w	r0, r7, #360	@ 0x168
 801112c:	f5a0 70b0 	sub.w	r0, r0, #352	@ 0x160
 8011130:	6001      	str	r1, [r0, #0]
 8011132:	f507 71b4 	add.w	r1, r7, #360	@ 0x168
 8011136:	f5a1 71b2 	sub.w	r1, r1, #356	@ 0x164
 801113a:	600a      	str	r2, [r1, #0]
 801113c:	f507 72b4 	add.w	r2, r7, #360	@ 0x168
 8011140:	f5a2 72b4 	sub.w	r2, r2, #360	@ 0x168
 8011144:	6013      	str	r3, [r2, #0]
  u32_t  result_temp[39];

  LWIP_UNUSED_ARG(value_len);

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(result_temp));
 8011146:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 801114a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	1d19      	adds	r1, r3, #4
 8011152:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8011156:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	781a      	ldrb	r2, [r3, #0]
 801115e:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8011162:	f507 70a6 	add.w	r0, r7, #332	@ 0x14c
 8011166:	2427      	movs	r4, #39	@ 0x27
 8011168:	9400      	str	r4, [sp, #0]
 801116a:	f7fe f8b8 	bl	800f2de <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  pcb = udp_pcbs;
 801116e:	4b3b      	ldr	r3, [pc, #236]	@ (801125c <udp_endpointTable_get_next_cell_instance_and_value+0x144>)
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  while (pcb != NULL) {
 8011176:	e049      	b.n	801120c <udp_endpointTable_get_next_cell_instance_and_value+0xf4>
    u32_t test_oid[LWIP_ARRAYSIZE(result_temp)];
    u8_t idx = 0;
 8011178:	2300      	movs	r3, #0
 801117a:	f887 3163 	strb.w	r3, [r7, #355]	@ 0x163

    /* udpEndpointLocalAddressType + udpEndpointLocalAddress + udpEndpointLocalPort */
    idx += snmp_ip_port_to_oid(&pcb->local_ip, pcb->local_port, &test_oid[idx]);
 801117e:	f8d7 0164 	ldr.w	r0, [r7, #356]	@ 0x164
 8011182:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8011186:	8a59      	ldrh	r1, [r3, #18]
 8011188:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 801118c:	f107 0214 	add.w	r2, r7, #20
 8011190:	009b      	lsls	r3, r3, #2
 8011192:	4413      	add	r3, r2
 8011194:	461a      	mov	r2, r3
 8011196:	f7fd fa62 	bl	800e65e <snmp_ip_port_to_oid>
 801119a:	4603      	mov	r3, r0
 801119c:	461a      	mov	r2, r3
 801119e:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 80111a2:	4413      	add	r3, r2
 80111a4:	f887 3163 	strb.w	r3, [r7, #355]	@ 0x163

    /* udpEndpointRemoteAddressType + udpEndpointRemoteAddress + udpEndpointRemotePort */
    idx += snmp_ip_port_to_oid(&pcb->remote_ip, pcb->remote_port, &test_oid[idx]);
 80111a8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80111ac:	1d18      	adds	r0, r3, #4
 80111ae:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80111b2:	8a99      	ldrh	r1, [r3, #20]
 80111b4:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 80111b8:	f107 0214 	add.w	r2, r7, #20
 80111bc:	009b      	lsls	r3, r3, #2
 80111be:	4413      	add	r3, r2
 80111c0:	461a      	mov	r2, r3
 80111c2:	f7fd fa4c 	bl	800e65e <snmp_ip_port_to_oid>
 80111c6:	4603      	mov	r3, r0
 80111c8:	461a      	mov	r2, r3
 80111ca:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 80111ce:	4413      	add	r3, r2
 80111d0:	f887 3163 	strb.w	r3, [r7, #355]	@ 0x163

    test_oid[idx] = 0; /* udpEndpointInstance */    
 80111d4:	f897 2163 	ldrb.w	r2, [r7, #355]	@ 0x163
 80111d8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80111dc:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80111e0:	2100      	movs	r1, #0
 80111e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    idx++;
 80111e6:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 80111ea:	3301      	adds	r3, #1
 80111ec:	f887 3163 	strb.w	r3, [r7, #355]	@ 0x163
    
    /* check generated OID: is it a candidate for the next one? */
    snmp_next_oid_check(&state, test_oid, idx, NULL);
 80111f0:	f897 2163 	ldrb.w	r2, [r7, #355]	@ 0x163
 80111f4:	f107 0114 	add.w	r1, r7, #20
 80111f8:	f507 70a6 	add.w	r0, r7, #332	@ 0x14c
 80111fc:	2300      	movs	r3, #0
 80111fe:	f7fe f88d 	bl	800f31c <snmp_next_oid_check>
    
    pcb = pcb->next;
 8011202:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8011206:	68db      	ldr	r3, [r3, #12]
 8011208:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  while (pcb != NULL) {
 801120c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8011210:	2b00      	cmp	r3, #0
 8011212:	d1b1      	bne.n	8011178 <udp_endpointTable_get_next_cell_instance_and_value+0x60>
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 8011214:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
 8011218:	2b00      	cmp	r3, #0
 801121a:	d118      	bne.n	801124e <udp_endpointTable_get_next_cell_instance_and_value+0x136>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 801121c:	f8d7 1154 	ldr.w	r1, [r7, #340]	@ 0x154
 8011220:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8011224:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8011228:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 801122c:	6818      	ldr	r0, [r3, #0]
 801122e:	f7fd fad3 	bl	800e7d8 <snmp_oid_assign>
    /* fill in object properties */
    return udp_endpointTable_get_cell_value_core(column, value);
 8011232:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8011236:	f5a3 72b2 	sub.w	r2, r3, #356	@ 0x164
 801123a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 801123e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8011242:	6811      	ldr	r1, [r2, #0]
 8011244:	6818      	ldr	r0, [r3, #0]
 8011246:	f7ff fecf 	bl	8010fe8 <udp_endpointTable_get_cell_value_core>
 801124a:	4603      	mov	r3, r0
 801124c:	e000      	b.n	8011250 <udp_endpointTable_get_next_cell_instance_and_value+0x138>
  } else {
    /* not found */
    return SNMP_ERR_NOSUCHINSTANCE;
 801124e:	23f1      	movs	r3, #241	@ 0xf1
  }
}
 8011250:	4618      	mov	r0, r3
 8011252:	f507 77b6 	add.w	r7, r7, #364	@ 0x16c
 8011256:	46bd      	mov	sp, r7
 8011258:	bd90      	pop	{r4, r7, pc}
 801125a:	bf00      	nop
 801125c:	2000c07c 	.word	0x2000c07c

08011260 <udp_Table_get_cell_value_core>:
  { 1, 0xffff }  /* Port        */
};

static snmp_err_t 
udp_Table_get_cell_value_core(struct udp_pcb *pcb, const u32_t* column, union snmp_variant_value* value, u32_t* value_len)
{
 8011260:	b480      	push	{r7}
 8011262:	b085      	sub	sp, #20
 8011264:	af00      	add	r7, sp, #0
 8011266:	60f8      	str	r0, [r7, #12]
 8011268:	60b9      	str	r1, [r7, #8]
 801126a:	607a      	str	r2, [r7, #4]
 801126c:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(value_len);

  switch (*column) {
 801126e:	68bb      	ldr	r3, [r7, #8]
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	2b01      	cmp	r3, #1
 8011274:	d002      	beq.n	801127c <udp_Table_get_cell_value_core+0x1c>
 8011276:	2b02      	cmp	r3, #2
 8011278:	d005      	beq.n	8011286 <udp_Table_get_cell_value_core+0x26>
 801127a:	e00a      	b.n	8011292 <udp_Table_get_cell_value_core+0x32>
  case 1: /* udpLocalAddress */
    /* set reference to PCB local IP and return a generic node that copies IP4 addresses */
    value->u32 = ip_2_ip4(&pcb->local_ip)->addr;
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	681a      	ldr	r2, [r3, #0]
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	601a      	str	r2, [r3, #0]
    break;
 8011284:	e007      	b.n	8011296 <udp_Table_get_cell_value_core+0x36>
  case 2: /* udpLocalPort */
    /* set reference to PCB local port and return a generic node that copies u16_t values */
    value->u32 = pcb->local_port;
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	8a5b      	ldrh	r3, [r3, #18]
 801128a:	461a      	mov	r2, r3
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	601a      	str	r2, [r3, #0]
    break;
 8011290:	e001      	b.n	8011296 <udp_Table_get_cell_value_core+0x36>
  default:
    return SNMP_ERR_NOSUCHINSTANCE;
 8011292:	23f1      	movs	r3, #241	@ 0xf1
 8011294:	e000      	b.n	8011298 <udp_Table_get_cell_value_core+0x38>
  }

  return SNMP_ERR_NOERROR;
 8011296:	2300      	movs	r3, #0
}
 8011298:	4618      	mov	r0, r3
 801129a:	3714      	adds	r7, #20
 801129c:	46bd      	mov	sp, r7
 801129e:	bc80      	pop	{r7}
 80112a0:	4770      	bx	lr
	...

080112a4 <udp_Table_get_cell_value>:

static snmp_err_t 
udp_Table_get_cell_value(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, union snmp_variant_value* value, u32_t* value_len)
{
 80112a4:	b580      	push	{r7, lr}
 80112a6:	b088      	sub	sp, #32
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	60f8      	str	r0, [r7, #12]
 80112ac:	60b9      	str	r1, [r7, #8]
 80112ae:	603b      	str	r3, [r7, #0]
 80112b0:	4613      	mov	r3, r2
 80112b2:	71fb      	strb	r3, [r7, #7]
  ip4_addr_t ip;
  u16_t port;
  struct udp_pcb *pcb;

  /* check if incoming OID length and if values are in plausible range */
  if (!snmp_oid_in_range(row_oid, row_oid_len, udp_Table_oid_ranges, LWIP_ARRAYSIZE(udp_Table_oid_ranges))) {
 80112b4:	79f9      	ldrb	r1, [r7, #7]
 80112b6:	2305      	movs	r3, #5
 80112b8:	4a19      	ldr	r2, [pc, #100]	@ (8011320 <udp_Table_get_cell_value+0x7c>)
 80112ba:	68b8      	ldr	r0, [r7, #8]
 80112bc:	f7fe f874 	bl	800f3a8 <snmp_oid_in_range>
 80112c0:	4603      	mov	r3, r0
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d101      	bne.n	80112ca <udp_Table_get_cell_value+0x26>
    return SNMP_ERR_NOSUCHINSTANCE;
 80112c6:	23f1      	movs	r3, #241	@ 0xf1
 80112c8:	e026      	b.n	8011318 <udp_Table_get_cell_value+0x74>
  }

  /* get IP and port from incoming OID */
  snmp_oid_to_ip4(&row_oid[0], &ip); /* we know it succeeds because of oid_in_range check above */
 80112ca:	f107 0314 	add.w	r3, r7, #20
 80112ce:	4619      	mov	r1, r3
 80112d0:	68b8      	ldr	r0, [r7, #8]
 80112d2:	f7fd f91b 	bl	800e50c <snmp_oid_to_ip4>
  port = (u16_t)row_oid[4];
 80112d6:	68bb      	ldr	r3, [r7, #8]
 80112d8:	3310      	adds	r3, #16
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	837b      	strh	r3, [r7, #26]

  /* find udp_pcb with requested ip and port*/
  pcb = udp_pcbs;
 80112de:	4b11      	ldr	r3, [pc, #68]	@ (8011324 <udp_Table_get_cell_value+0x80>)
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
 80112e4:	e014      	b.n	8011310 <udp_Table_get_cell_value+0x6c>
    if (IP_IS_V4_VAL(pcb->local_ip)) {
      if (ip4_addr_cmp(&ip, ip_2_ip4(&pcb->local_ip)) && (port == pcb->local_port)) {
 80112e6:	697a      	ldr	r2, [r7, #20]
 80112e8:	69fb      	ldr	r3, [r7, #28]
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	429a      	cmp	r2, r3
 80112ee:	d10c      	bne.n	801130a <udp_Table_get_cell_value+0x66>
 80112f0:	69fb      	ldr	r3, [r7, #28]
 80112f2:	8a5b      	ldrh	r3, [r3, #18]
 80112f4:	8b7a      	ldrh	r2, [r7, #26]
 80112f6:	429a      	cmp	r2, r3
 80112f8:	d107      	bne.n	801130a <udp_Table_get_cell_value+0x66>
        /* fill in object properties */
        return udp_Table_get_cell_value_core(pcb, column, value, value_len);
 80112fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112fc:	683a      	ldr	r2, [r7, #0]
 80112fe:	68f9      	ldr	r1, [r7, #12]
 8011300:	69f8      	ldr	r0, [r7, #28]
 8011302:	f7ff ffad 	bl	8011260 <udp_Table_get_cell_value_core>
 8011306:	4603      	mov	r3, r0
 8011308:	e006      	b.n	8011318 <udp_Table_get_cell_value+0x74>
      }
    }
    pcb = pcb->next;
 801130a:	69fb      	ldr	r3, [r7, #28]
 801130c:	68db      	ldr	r3, [r3, #12]
 801130e:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
 8011310:	69fb      	ldr	r3, [r7, #28]
 8011312:	2b00      	cmp	r3, #0
 8011314:	d1e7      	bne.n	80112e6 <udp_Table_get_cell_value+0x42>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 8011316:	23f1      	movs	r3, #241	@ 0xf1
}
 8011318:	4618      	mov	r0, r3
 801131a:	3720      	adds	r7, #32
 801131c:	46bd      	mov	sp, r7
 801131e:	bd80      	pop	{r7, pc}
 8011320:	080309b4 	.word	0x080309b4
 8011324:	2000c07c 	.word	0x2000c07c

08011328 <udp_Table_get_next_cell_instance_and_value>:

static snmp_err_t 
udp_Table_get_next_cell_instance_and_value(const u32_t* column, struct snmp_obj_id* row_oid, union snmp_variant_value* value, u32_t* value_len)
{
 8011328:	b590      	push	{r4, r7, lr}
 801132a:	b097      	sub	sp, #92	@ 0x5c
 801132c:	af02      	add	r7, sp, #8
 801132e:	60f8      	str	r0, [r7, #12]
 8011330:	60b9      	str	r1, [r7, #8]
 8011332:	607a      	str	r2, [r7, #4]
 8011334:	603b      	str	r3, [r7, #0]
  struct udp_pcb *pcb;
  struct snmp_next_oid_state state;
  u32_t  result_temp[LWIP_ARRAYSIZE(udp_Table_oid_ranges)];

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(udp_Table_oid_ranges));
 8011336:	68bb      	ldr	r3, [r7, #8]
 8011338:	1d19      	adds	r1, r3, #4
 801133a:	68bb      	ldr	r3, [r7, #8]
 801133c:	781a      	ldrb	r2, [r3, #0]
 801133e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011342:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8011346:	2405      	movs	r4, #5
 8011348:	9400      	str	r4, [sp, #0]
 801134a:	f7fd ffc8 	bl	800f2de <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  pcb = udp_pcbs;
 801134e:	4b1a      	ldr	r3, [pc, #104]	@ (80113b8 <udp_Table_get_next_cell_instance_and_value+0x90>)
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while (pcb != NULL) {
 8011354:	e014      	b.n	8011380 <udp_Table_get_next_cell_instance_and_value+0x58>
    u32_t test_oid[LWIP_ARRAYSIZE(udp_Table_oid_ranges)];

    if (IP_IS_V4_VAL(pcb->local_ip)) {
      snmp_ip4_to_oid(ip_2_ip4(&pcb->local_ip), &test_oid[0]);
 8011356:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011358:	f107 0210 	add.w	r2, r7, #16
 801135c:	4611      	mov	r1, r2
 801135e:	4618      	mov	r0, r3
 8011360:	f7fd f95c 	bl	800e61c <snmp_ip4_to_oid>
      test_oid[4] = pcb->local_port;
 8011364:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011366:	8a5b      	ldrh	r3, [r3, #18]
 8011368:	623b      	str	r3, [r7, #32]

      /* check generated OID: is it a candidate for the next one? */
      snmp_next_oid_check(&state, test_oid, LWIP_ARRAYSIZE(udp_Table_oid_ranges), pcb);
 801136a:	f107 0110 	add.w	r1, r7, #16
 801136e:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8011372:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011374:	2205      	movs	r2, #5
 8011376:	f7fd ffd1 	bl	800f31c <snmp_next_oid_check>
    }
    
    pcb = pcb->next;
 801137a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801137c:	68db      	ldr	r3, [r3, #12]
 801137e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while (pcb != NULL) {
 8011380:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011382:	2b00      	cmp	r3, #0
 8011384:	d1e7      	bne.n	8011356 <udp_Table_get_next_cell_instance_and_value+0x2e>
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 8011386:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 801138a:	2b00      	cmp	r3, #0
 801138c:	d10e      	bne.n	80113ac <udp_Table_get_next_cell_instance_and_value+0x84>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 801138e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011390:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8011394:	4619      	mov	r1, r3
 8011396:	68b8      	ldr	r0, [r7, #8]
 8011398:	f7fd fa1e 	bl	800e7d8 <snmp_oid_assign>
    /* fill in object properties */
    return udp_Table_get_cell_value_core((struct udp_pcb*)state.reference, column, value, value_len);
 801139c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801139e:	683b      	ldr	r3, [r7, #0]
 80113a0:	687a      	ldr	r2, [r7, #4]
 80113a2:	68f9      	ldr	r1, [r7, #12]
 80113a4:	f7ff ff5c 	bl	8011260 <udp_Table_get_cell_value_core>
 80113a8:	4603      	mov	r3, r0
 80113aa:	e000      	b.n	80113ae <udp_Table_get_next_cell_instance_and_value+0x86>
  } else {
    /* not found */
    return SNMP_ERR_NOSUCHINSTANCE;
 80113ac:	23f1      	movs	r3, #241	@ 0xf1
  }
}
 80113ae:	4618      	mov	r0, r3
 80113b0:	3754      	adds	r7, #84	@ 0x54
 80113b2:	46bd      	mov	sp, r7
 80113b4:	bd90      	pop	{r4, r7, pc}
 80113b6:	bf00      	nop
 80113b8:	2000c07c 	.word	0x2000c07c

080113bc <snmp_set_community_trap>:
 *
 * @param community is a pointer to new trap community string
 */
void
snmp_set_community_trap(const char * const community)
{
 80113bc:	b580      	push	{r7, lr}
 80113be:	b082      	sub	sp, #8
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("community string is too long!", strlen(community) <= SNMP_MAX_COMMUNITY_STR_LEN);
 80113c4:	6878      	ldr	r0, [r7, #4]
 80113c6:	f7ee ff09 	bl	80001dc <strlen>
 80113ca:	4603      	mov	r3, r0
 80113cc:	2b08      	cmp	r3, #8
 80113ce:	d905      	bls.n	80113dc <snmp_set_community_trap+0x20>
 80113d0:	4b06      	ldr	r3, [pc, #24]	@ (80113ec <snmp_set_community_trap+0x30>)
 80113d2:	2290      	movs	r2, #144	@ 0x90
 80113d4:	4906      	ldr	r1, [pc, #24]	@ (80113f0 <snmp_set_community_trap+0x34>)
 80113d6:	4807      	ldr	r0, [pc, #28]	@ (80113f4 <snmp_set_community_trap+0x38>)
 80113d8:	f010 fc56 	bl	8021c88 <iprintf>
  snmp_community_trap = community;
 80113dc:	4a06      	ldr	r2, [pc, #24]	@ (80113f8 <snmp_set_community_trap+0x3c>)
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	6013      	str	r3, [r2, #0]
}
 80113e2:	bf00      	nop
 80113e4:	3708      	adds	r7, #8
 80113e6:	46bd      	mov	sp, r7
 80113e8:	bd80      	pop	{r7, pc}
 80113ea:	bf00      	nop
 80113ec:	08025648 	.word	0x08025648
 80113f0:	08025684 	.word	0x08025684
 80113f4:	080256a4 	.word	0x080256a4
 80113f8:	20000118 	.word	0x20000118

080113fc <snmp_receive>:
/* implementation */
/* ----------------------------------------------------------------------- */

void
snmp_receive(void *handle, struct pbuf *p, const ip_addr_t *source_ip, u16_t port)
{
 80113fc:	b590      	push	{r4, r7, lr}
 80113fe:	b0cf      	sub	sp, #316	@ 0x13c
 8011400:	af00      	add	r7, sp, #0
 8011402:	f507 749c 	add.w	r4, r7, #312	@ 0x138
 8011406:	f5a4 7496 	sub.w	r4, r4, #300	@ 0x12c
 801140a:	6020      	str	r0, [r4, #0]
 801140c:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8011410:	f5a0 7098 	sub.w	r0, r0, #304	@ 0x130
 8011414:	6001      	str	r1, [r0, #0]
 8011416:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 801141a:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 801141e:	600a      	str	r2, [r1, #0]
 8011420:	461a      	mov	r2, r3
 8011422:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011426:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 801142a:	801a      	strh	r2, [r3, #0]
  err_t err;
  struct snmp_request request;
   
  memset(&request, 0, sizeof(request));
 801142c:	f107 0314 	add.w	r3, r7, #20
 8011430:	f44f 7290 	mov.w	r2, #288	@ 0x120
 8011434:	2100      	movs	r1, #0
 8011436:	4618      	mov	r0, r3
 8011438:	f010 fdfc 	bl	8022034 <memset>
  request.handle       = handle;
 801143c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011440:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011444:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8011448:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 801144c:	6812      	ldr	r2, [r2, #0]
 801144e:	601a      	str	r2, [r3, #0]
  request.source_ip    = source_ip;
 8011450:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011454:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011458:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 801145c:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8011460:	6812      	ldr	r2, [r2, #0]
 8011462:	605a      	str	r2, [r3, #4]
  request.source_port  = port;
 8011464:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011468:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801146c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8011470:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8011474:	8812      	ldrh	r2, [r2, #0]
 8011476:	811a      	strh	r2, [r3, #8]
  request.inbound_pbuf = p;
 8011478:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801147c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011480:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8011484:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8011488:	6812      	ldr	r2, [r2, #0]
 801148a:	62da      	str	r2, [r3, #44]	@ 0x2c

  snmp_stats.inpkts++;
 801148c:	4b5c      	ldr	r3, [pc, #368]	@ (8011600 <snmp_receive+0x204>)
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	3301      	adds	r3, #1
 8011492:	4a5b      	ldr	r2, [pc, #364]	@ (8011600 <snmp_receive+0x204>)
 8011494:	6013      	str	r3, [r2, #0]

  err = snmp_parse_inbound_frame(&request);
 8011496:	f107 0314 	add.w	r3, r7, #20
 801149a:	4618      	mov	r0, r3
 801149c:	f000 fd62 	bl	8011f64 <snmp_parse_inbound_frame>
 80114a0:	4603      	mov	r3, r0
 80114a2:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
  if (err == ERR_OK) {
 80114a6:	f997 3137 	ldrsb.w	r3, [r7, #311]	@ 0x137
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	f040 80a2 	bne.w	80115f4 <snmp_receive+0x1f8>
    err = snmp_prepare_outbound_frame(&request);
 80114b0:	f107 0314 	add.w	r3, r7, #20
 80114b4:	4618      	mov	r0, r3
 80114b6:	f001 f863 	bl	8012580 <snmp_prepare_outbound_frame>
 80114ba:	4603      	mov	r3, r0
 80114bc:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
    if (err == ERR_OK) {
 80114c0:	f997 3137 	ldrsb.w	r3, [r7, #311]	@ 0x137
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	f040 8086 	bne.w	80115d6 <snmp_receive+0x1da>

      if (request.error_status == SNMP_ERR_NOERROR) {
 80114ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80114ce:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80114d2:	69db      	ldr	r3, [r3, #28]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d13e      	bne.n	8011556 <snmp_receive+0x15a>
        /* only process frame if we do not already have an error to return (e.g. all readonly) */
        if (request.request_type == SNMP_ASN1_CONTEXT_PDU_GET_REQ) {
 80114d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80114dc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80114e0:	7d9b      	ldrb	r3, [r3, #22]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d108      	bne.n	80114f8 <snmp_receive+0xfc>
          err = snmp_process_get_request(&request);
 80114e6:	f107 0314 	add.w	r3, r7, #20
 80114ea:	4618      	mov	r0, r3
 80114ec:	f000 fa4e 	bl	801198c <snmp_process_get_request>
 80114f0:	4603      	mov	r3, r0
 80114f2:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 80114f6:	e02e      	b.n	8011556 <snmp_receive+0x15a>
        } else if (request.request_type == SNMP_ASN1_CONTEXT_PDU_GET_NEXT_REQ) {
 80114f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80114fc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011500:	7d9b      	ldrb	r3, [r3, #22]
 8011502:	2b01      	cmp	r3, #1
 8011504:	d108      	bne.n	8011518 <snmp_receive+0x11c>
          err = snmp_process_getnext_request(&request);
 8011506:	f107 0314 	add.w	r3, r7, #20
 801150a:	4618      	mov	r0, r3
 801150c:	f000 fa83 	bl	8011a16 <snmp_process_getnext_request>
 8011510:	4603      	mov	r3, r0
 8011512:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8011516:	e01e      	b.n	8011556 <snmp_receive+0x15a>
        } else if (request.request_type == SNMP_ASN1_CONTEXT_PDU_GET_BULK_REQ) {
 8011518:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801151c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011520:	7d9b      	ldrb	r3, [r3, #22]
 8011522:	2b05      	cmp	r3, #5
 8011524:	d108      	bne.n	8011538 <snmp_receive+0x13c>
          err = snmp_process_getbulk_request(&request);
 8011526:	f107 0314 	add.w	r3, r7, #20
 801152a:	4618      	mov	r0, r3
 801152c:	f000 fab8 	bl	8011aa0 <snmp_process_getbulk_request>
 8011530:	4603      	mov	r3, r0
 8011532:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8011536:	e00e      	b.n	8011556 <snmp_receive+0x15a>
        } else if (request.request_type == SNMP_ASN1_CONTEXT_PDU_SET_REQ) {
 8011538:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801153c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011540:	7d9b      	ldrb	r3, [r3, #22]
 8011542:	2b03      	cmp	r3, #3
 8011544:	d107      	bne.n	8011556 <snmp_receive+0x15a>
          err = snmp_process_set_request(&request);
 8011546:	f107 0314 	add.w	r3, r7, #20
 801154a:	4618      	mov	r0, r3
 801154c:	f000 fb91 	bl	8011c72 <snmp_process_set_request>
 8011550:	4603      	mov	r3, r0
 8011552:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
        }
      }

      if (err == ERR_OK) {
 8011556:	f997 3137 	ldrsb.w	r3, [r7, #311]	@ 0x137
 801155a:	2b00      	cmp	r3, #0
 801155c:	d13b      	bne.n	80115d6 <snmp_receive+0x1da>
        err = snmp_complete_outbound_frame(&request);
 801155e:	f107 0314 	add.w	r3, r7, #20
 8011562:	4618      	mov	r0, r3
 8011564:	f001 fb9c 	bl	8012ca0 <snmp_complete_outbound_frame>
 8011568:	4603      	mov	r3, r0
 801156a:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
      
        if (err == ERR_OK) {
 801156e:	f997 3137 	ldrsb.w	r3, [r7, #311]	@ 0x137
 8011572:	2b00      	cmp	r3, #0
 8011574:	d12f      	bne.n	80115d6 <snmp_receive+0x1da>
          err = snmp_sendto(request.handle, request.outbound_pbuf, request.source_ip, request.source_port);
 8011576:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801157a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801157e:	6818      	ldr	r0, [r3, #0]
 8011580:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011584:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011588:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 801158a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801158e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8011592:	685a      	ldr	r2, [r3, #4]
 8011594:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011598:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801159c:	891b      	ldrh	r3, [r3, #8]
 801159e:	f002 f8fe 	bl	801379e <snmp_sendto>
 80115a2:	4603      	mov	r3, r0
 80115a4:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137

          if ((request.request_type == SNMP_ASN1_CONTEXT_PDU_SET_REQ) 
 80115a8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80115ac:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80115b0:	7d9b      	ldrb	r3, [r3, #22]
 80115b2:	2b03      	cmp	r3, #3
 80115b4:	d10f      	bne.n	80115d6 <snmp_receive+0x1da>
            && (request.error_status == SNMP_ERR_NOERROR) 
 80115b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80115ba:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80115be:	69db      	ldr	r3, [r3, #28]
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d108      	bne.n	80115d6 <snmp_receive+0x1da>
            && (snmp_write_callback != NULL)) {
 80115c4:	4b0f      	ldr	r3, [pc, #60]	@ (8011604 <snmp_receive+0x208>)
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d004      	beq.n	80115d6 <snmp_receive+0x1da>
            /* raise write notification for all written objects */
            snmp_execute_write_callbacks(&request);
 80115cc:	f107 0314 	add.w	r3, r7, #20
 80115d0:	4618      	mov	r0, r3
 80115d2:	f001 fd47 	bl	8013064 <snmp_execute_write_callbacks>
          }
        }
      }
    }
  
    if (request.outbound_pbuf != NULL) {
 80115d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80115da:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80115de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d007      	beq.n	80115f4 <snmp_receive+0x1f8>
      pbuf_free(request.outbound_pbuf);
 80115e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80115e8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80115ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80115ee:	4618      	mov	r0, r3
 80115f0:	f004 fb58 	bl	8015ca4 <pbuf_free>
    }
  }
}
 80115f4:	bf00      	nop
 80115f6:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 80115fa:	46bd      	mov	sp, r7
 80115fc:	bd90      	pop	{r4, r7, pc}
 80115fe:	bf00      	nop
 8011600:	200087e8 	.word	0x200087e8
 8011604:	20008888 	.word	0x20008888

08011608 <snmp_msg_getnext_validate_node_inst>:

static u8_t
snmp_msg_getnext_validate_node_inst(struct snmp_node_instance* node_instance, void* validate_arg)
{
 8011608:	b480      	push	{r7}
 801160a:	b083      	sub	sp, #12
 801160c:	af00      	add	r7, sp, #0
 801160e:	6078      	str	r0, [r7, #4]
 8011610:	6039      	str	r1, [r7, #0]
  if (((node_instance->access & SNMP_NODE_INSTANCE_ACCESS_READ) != SNMP_NODE_INSTANCE_ACCESS_READ) || (node_instance->get_value == NULL)) {
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	f893 30d1 	ldrb.w	r3, [r3, #209]	@ 0xd1
 8011618:	f003 0301 	and.w	r3, r3, #1
 801161c:	2b00      	cmp	r3, #0
 801161e:	d004      	beq.n	801162a <snmp_msg_getnext_validate_node_inst+0x22>
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8011626:	2b00      	cmp	r3, #0
 8011628:	d101      	bne.n	801162e <snmp_msg_getnext_validate_node_inst+0x26>
    return SNMP_ERR_NOSUCHINSTANCE;
 801162a:	23f1      	movs	r3, #241	@ 0xf1
 801162c:	e00b      	b.n	8011646 <snmp_msg_getnext_validate_node_inst+0x3e>
  }

  if ((node_instance->asn1_type == SNMP_ASN1_TYPE_COUNTER64) && (((struct snmp_request*)validate_arg)->version == SNMP_VERSION_1)) {
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 8011634:	2b46      	cmp	r3, #70	@ 0x46
 8011636:	d105      	bne.n	8011644 <snmp_msg_getnext_validate_node_inst+0x3c>
 8011638:	683b      	ldr	r3, [r7, #0]
 801163a:	7a9b      	ldrb	r3, [r3, #10]
 801163c:	2b00      	cmp	r3, #0
 801163e:	d101      	bne.n	8011644 <snmp_msg_getnext_validate_node_inst+0x3c>
    /* according to RFC 2089 skip Counter64 objects in GetNext requests from v1 clients */
    return SNMP_ERR_NOSUCHINSTANCE;
 8011640:	23f1      	movs	r3, #241	@ 0xf1
 8011642:	e000      	b.n	8011646 <snmp_msg_getnext_validate_node_inst+0x3e>
  }

  return SNMP_ERR_NOERROR;
 8011644:	2300      	movs	r3, #0
}
 8011646:	4618      	mov	r0, r3
 8011648:	370c      	adds	r7, #12
 801164a:	46bd      	mov	sp, r7
 801164c:	bc80      	pop	{r7}
 801164e:	4770      	bx	lr

08011650 <snmp_process_varbind>:

static void 
snmp_process_varbind(struct snmp_request *request, struct snmp_varbind *vb, u8_t get_next)
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b0f6      	sub	sp, #472	@ 0x1d8
 8011654:	af02      	add	r7, sp, #8
 8011656:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 801165a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 801165e:	6018      	str	r0, [r3, #0]
 8011660:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011664:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8011668:	6019      	str	r1, [r3, #0]
 801166a:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 801166e:	f2a3 13c9 	subw	r3, r3, #457	@ 0x1c9
 8011672:	701a      	strb	r2, [r3, #0]
  err_t err;
  struct snmp_node_instance node_instance;
  memset(&node_instance, 0, sizeof(node_instance));
 8011674:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8011678:	22ec      	movs	r2, #236	@ 0xec
 801167a:	2100      	movs	r1, #0
 801167c:	4618      	mov	r0, r3
 801167e:	f010 fcd9 	bl	8022034 <memset>

  if (get_next) {
 8011682:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011686:	f2a3 13c9 	subw	r3, r3, #457	@ 0x1c9
 801168a:	781b      	ldrb	r3, [r3, #0]
 801168c:	2b00      	cmp	r3, #0
 801168e:	d03d      	beq.n	801170c <snmp_process_varbind+0xbc>
    struct snmp_obj_id result_oid;
    request->error_status = snmp_get_next_node_instance_from_oid(vb->oid.id, vb->oid.len, snmp_msg_getnext_validate_node_inst, request,  &result_oid, &node_instance);
 8011690:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011694:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	f103 000c 	add.w	r0, r3, #12
 801169e:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80116a2:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	7a19      	ldrb	r1, [r3, #8]
 80116aa:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80116ae:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80116b2:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 80116b6:	9201      	str	r2, [sp, #4]
 80116b8:	f107 0214 	add.w	r2, r7, #20
 80116bc:	9200      	str	r2, [sp, #0]
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	4aae      	ldr	r2, [pc, #696]	@ (801197c <snmp_process_varbind+0x32c>)
 80116c2:	f7fd fb18 	bl	800ecf6 <snmp_get_next_node_instance_from_oid>
 80116c6:	4603      	mov	r3, r0
 80116c8:	461a      	mov	r2, r3
 80116ca:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80116ce:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	61da      	str	r2, [r3, #28]

    if (request->error_status == SNMP_ERR_NOERROR) {
 80116d6:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80116da:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	69db      	ldr	r3, [r3, #28]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d158      	bne.n	8011798 <snmp_process_varbind+0x148>
      snmp_oid_assign(&vb->oid, result_oid.id, result_oid.len);
 80116e6:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80116ea:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	f103 0008 	add.w	r0, r3, #8
 80116f4:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80116f8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80116fc:	781a      	ldrb	r2, [r3, #0]
 80116fe:	f107 0314 	add.w	r3, r7, #20
 8011702:	3304      	adds	r3, #4
 8011704:	4619      	mov	r1, r3
 8011706:	f7fd f867 	bl	800e7d8 <snmp_oid_assign>
 801170a:	e045      	b.n	8011798 <snmp_process_varbind+0x148>
    }
  } else {
    request->error_status = snmp_get_node_instance_from_oid(vb->oid.id, vb->oid.len, &node_instance);
 801170c:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011710:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	f103 000c 	add.w	r0, r3, #12
 801171a:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 801171e:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	7a1b      	ldrb	r3, [r3, #8]
 8011726:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 801172a:	4619      	mov	r1, r3
 801172c:	f7fd fa9c 	bl	800ec68 <snmp_get_node_instance_from_oid>
 8011730:	4603      	mov	r3, r0
 8011732:	461a      	mov	r2, r3
 8011734:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011738:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	61da      	str	r2, [r3, #28]

    if (request->error_status == SNMP_ERR_NOERROR) {
 8011740:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011744:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	69db      	ldr	r3, [r3, #28]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d123      	bne.n	8011798 <snmp_process_varbind+0x148>
      /* use 'getnext_validate' method for validation to avoid code duplication (some checks have to be executed here) */
      request->error_status = snmp_msg_getnext_validate_node_inst(&node_instance, request);
 8011750:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011754:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011758:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 801175c:	6819      	ldr	r1, [r3, #0]
 801175e:	4610      	mov	r0, r2
 8011760:	f7ff ff52 	bl	8011608 <snmp_msg_getnext_validate_node_inst>
 8011764:	4603      	mov	r3, r0
 8011766:	461a      	mov	r2, r3
 8011768:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 801176c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	61da      	str	r2, [r3, #28]

      if (request->error_status != SNMP_ERR_NOERROR) {
 8011774:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011778:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	69db      	ldr	r3, [r3, #28]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d009      	beq.n	8011798 <snmp_process_varbind+0x148>
        if (node_instance.release_instance != NULL) {
 8011784:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8011788:	2b00      	cmp	r3, #0
 801178a:	d005      	beq.n	8011798 <snmp_process_varbind+0x148>
          node_instance.release_instance(&node_instance);
 801178c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8011790:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 8011794:	4610      	mov	r0, r2
 8011796:	4798      	blx	r3
        }
      }
    }
  }

  if (request->error_status != SNMP_ERR_NOERROR)  {
 8011798:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 801179c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	69db      	ldr	r3, [r3, #28]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d070      	beq.n	801188a <snmp_process_varbind+0x23a>
    if (request->error_status >= SNMP_VARBIND_EXCEPTION_OFFSET) {
 80117a8:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80117ac:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	69db      	ldr	r3, [r3, #28]
 80117b4:	2bef      	cmp	r3, #239	@ 0xef
 80117b6:	dd60      	ble.n	801187a <snmp_process_varbind+0x22a>
      if ((request->version == SNMP_VERSION_2c) || request->version == SNMP_VERSION_3) {
 80117b8:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80117bc:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	7a9b      	ldrb	r3, [r3, #10]
 80117c4:	2b01      	cmp	r3, #1
 80117c6:	d008      	beq.n	80117da <snmp_process_varbind+0x18a>
 80117c8:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80117cc:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	7a9b      	ldrb	r3, [r3, #10]
 80117d4:	2b03      	cmp	r3, #3
 80117d6:	f040 80cc 	bne.w	8011972 <snmp_process_varbind+0x322>
        /* in SNMP v2c a varbind related exception is stored in varbind and not in frame header */
        vb->type = (SNMP_ASN1_CONTENTTYPE_PRIMITIVE | SNMP_ASN1_CLASS_CONTEXT | (request->error_status & SNMP_VARBIND_EXCEPTION_MASK));
 80117da:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80117de:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	69db      	ldr	r3, [r3, #28]
 80117e6:	b25b      	sxtb	r3, r3
 80117e8:	f003 030f 	and.w	r3, r3, #15
 80117ec:	b25b      	sxtb	r3, r3
 80117ee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80117f2:	b25b      	sxtb	r3, r3
 80117f4:	b2da      	uxtb	r2, r3
 80117f6:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80117fa:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
        vb->value_len = 0;
 8011804:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011808:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	2200      	movs	r2, #0
 8011810:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6

        err = snmp_append_outbound_varbind(&(request->outbound_pbuf_stream), vb);
 8011814:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011818:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8011822:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011826:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 801182a:	6819      	ldr	r1, [r3, #0]
 801182c:	4610      	mov	r0, r2
 801182e:	f001 f921 	bl	8012a74 <snmp_append_outbound_varbind>
 8011832:	4603      	mov	r3, r0
 8011834:	f887 31cd 	strb.w	r3, [r7, #461]	@ 0x1cd
        if (err == ERR_OK) {
 8011838:	f997 31cd 	ldrsb.w	r3, [r7, #461]	@ 0x1cd
 801183c:	2b00      	cmp	r3, #0
 801183e:	d107      	bne.n	8011850 <snmp_process_varbind+0x200>
          /* we stored the exception in varbind -> go on */
          request->error_status = SNMP_ERR_NOERROR;
 8011840:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011844:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	2200      	movs	r2, #0
 801184c:	61da      	str	r2, [r3, #28]

    if (node_instance.release_instance != NULL) {
      node_instance.release_instance(&node_instance);
    }
  }
}
 801184e:	e090      	b.n	8011972 <snmp_process_varbind+0x322>
        } else if (err == ERR_BUF) {
 8011850:	f997 31cd 	ldrsb.w	r3, [r7, #461]	@ 0x1cd
 8011854:	f113 0f02 	cmn.w	r3, #2
 8011858:	d107      	bne.n	801186a <snmp_process_varbind+0x21a>
          request->error_status = SNMP_ERR_TOOBIG;
 801185a:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 801185e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	2201      	movs	r2, #1
 8011866:	61da      	str	r2, [r3, #28]
}
 8011868:	e083      	b.n	8011972 <snmp_process_varbind+0x322>
          request->error_status = SNMP_ERR_GENERROR;
 801186a:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 801186e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	2205      	movs	r2, #5
 8011876:	61da      	str	r2, [r3, #28]
}
 8011878:	e07b      	b.n	8011972 <snmp_process_varbind+0x322>
      request->error_status = SNMP_ERR_GENERROR;
 801187a:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 801187e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	2205      	movs	r2, #5
 8011886:	61da      	str	r2, [r3, #28]
}
 8011888:	e073      	b.n	8011972 <snmp_process_varbind+0x322>
    s16_t len = node_instance.get_value(&node_instance, vb->value);
 801188a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 801188e:	f507 72e8 	add.w	r2, r7, #464	@ 0x1d0
 8011892:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8011896:	6812      	ldr	r2, [r2, #0]
 8011898:	f8d2 10d8 	ldr.w	r1, [r2, #216]	@ 0xd8
 801189c:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 80118a0:	4610      	mov	r0, r2
 80118a2:	4798      	blx	r3
 80118a4:	4603      	mov	r3, r0
 80118a6:	f8a7 31ce 	strh.w	r3, [r7, #462]	@ 0x1ce
    vb->type = node_instance.asn1_type;
 80118aa:	f897 21b0 	ldrb.w	r2, [r7, #432]	@ 0x1b0
 80118ae:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80118b2:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
    if(len >= 0) {
 80118bc:	f9b7 31ce 	ldrsh.w	r3, [r7, #462]	@ 0x1ce
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	db45      	blt.n	8011950 <snmp_process_varbind+0x300>
      vb->value_len = (u16_t)len; /* cast is OK because we checked >= 0 above */
 80118c4:	f8b7 21ce 	ldrh.w	r2, [r7, #462]	@ 0x1ce
 80118c8:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80118cc:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
      LWIP_ASSERT("SNMP_MAX_VALUE_SIZE is configured too low", (vb->value_len & ~SNMP_GET_VALUE_RAW_DATA) <= SNMP_MAX_VALUE_SIZE);
 80118d6:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80118da:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 80118e4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80118e8:	2bc8      	cmp	r3, #200	@ 0xc8
 80118ea:	d906      	bls.n	80118fa <snmp_process_varbind+0x2aa>
 80118ec:	4b24      	ldr	r3, [pc, #144]	@ (8011980 <snmp_process_varbind+0x330>)
 80118ee:	f44f 7298 	mov.w	r2, #304	@ 0x130
 80118f2:	4924      	ldr	r1, [pc, #144]	@ (8011984 <snmp_process_varbind+0x334>)
 80118f4:	4824      	ldr	r0, [pc, #144]	@ (8011988 <snmp_process_varbind+0x338>)
 80118f6:	f010 f9c7 	bl	8021c88 <iprintf>
      err = snmp_append_outbound_varbind(&request->outbound_pbuf_stream, vb);
 80118fa:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80118fe:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8011908:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 801190c:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8011910:	6819      	ldr	r1, [r3, #0]
 8011912:	4610      	mov	r0, r2
 8011914:	f001 f8ae 	bl	8012a74 <snmp_append_outbound_varbind>
 8011918:	4603      	mov	r3, r0
 801191a:	f887 31cd 	strb.w	r3, [r7, #461]	@ 0x1cd
      if (err == ERR_BUF) {
 801191e:	f997 31cd 	ldrsb.w	r3, [r7, #461]	@ 0x1cd
 8011922:	f113 0f02 	cmn.w	r3, #2
 8011926:	d107      	bne.n	8011938 <snmp_process_varbind+0x2e8>
        request->error_status = SNMP_ERR_TOOBIG;
 8011928:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 801192c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	2201      	movs	r2, #1
 8011934:	61da      	str	r2, [r3, #28]
 8011936:	e012      	b.n	801195e <snmp_process_varbind+0x30e>
      } else if (err != ERR_OK) {
 8011938:	f997 31cd 	ldrsb.w	r3, [r7, #461]	@ 0x1cd
 801193c:	2b00      	cmp	r3, #0
 801193e:	d00e      	beq.n	801195e <snmp_process_varbind+0x30e>
        request->error_status = SNMP_ERR_GENERROR;
 8011940:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011944:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	2205      	movs	r2, #5
 801194c:	61da      	str	r2, [r3, #28]
 801194e:	e006      	b.n	801195e <snmp_process_varbind+0x30e>
      request->error_status = SNMP_ERR_GENERROR;
 8011950:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8011954:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	2205      	movs	r2, #5
 801195c:	61da      	str	r2, [r3, #28]
    if (node_instance.release_instance != NULL) {
 801195e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8011962:	2b00      	cmp	r3, #0
 8011964:	d005      	beq.n	8011972 <snmp_process_varbind+0x322>
      node_instance.release_instance(&node_instance);
 8011966:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 801196a:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 801196e:	4610      	mov	r0, r2
 8011970:	4798      	blx	r3
}
 8011972:	bf00      	nop
 8011974:	f507 77e8 	add.w	r7, r7, #464	@ 0x1d0
 8011978:	46bd      	mov	sp, r7
 801197a:	bd80      	pop	{r7, pc}
 801197c:	08011609 	.word	0x08011609
 8011980:	08025648 	.word	0x08025648
 8011984:	080256f0 	.word	0x080256f0
 8011988:	080256a4 	.word	0x080256a4

0801198c <snmp_process_get_request>:
 *
 * @param request points to the associated message process state
 */
static err_t
snmp_process_get_request(struct snmp_request *request)
{
 801198c:	b580      	push	{r7, lr}
 801198e:	b0ba      	sub	sp, #232	@ 0xe8
 8011990:	af00      	add	r7, sp, #0
 8011992:	6078      	str	r0, [r7, #4]
  snmp_vb_enumerator_err_t err;
  struct snmp_varbind vb;
  vb.value = request->value_buffer;
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	3358      	adds	r3, #88	@ 0x58
 8011998:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

  LWIP_DEBUGF(SNMP_DEBUG, ("SNMP get request\n"));

  while (request->error_status == SNMP_ERR_NOERROR) {
 801199c:	e030      	b.n	8011a00 <snmp_process_get_request+0x74>
    err = snmp_vb_enumerator_get_next(&request->inbound_varbind_enumerator, &vb);
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	3330      	adds	r3, #48	@ 0x30
 80119a2:	f107 0208 	add.w	r2, r7, #8
 80119a6:	4611      	mov	r1, r2
 80119a8:	4618      	mov	r0, r3
 80119aa:	f001 fba5 	bl	80130f8 <snmp_vb_enumerator_get_next>
 80119ae:	4603      	mov	r3, r0
 80119b0:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
    if (err == SNMP_VB_ENUMERATOR_ERR_OK) {
 80119b4:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d113      	bne.n	80119e4 <snmp_process_get_request+0x58>
      if ((vb.type == SNMP_ASN1_TYPE_NULL) && (vb.value_len == 0)) {
 80119bc:	f897 30dc 	ldrb.w	r3, [r7, #220]	@ 0xdc
 80119c0:	2b05      	cmp	r3, #5
 80119c2:	d10b      	bne.n	80119dc <snmp_process_get_request+0x50>
 80119c4:	f8b7 30de 	ldrh.w	r3, [r7, #222]	@ 0xde
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d107      	bne.n	80119dc <snmp_process_get_request+0x50>
        snmp_process_varbind(request, &vb, 0);
 80119cc:	f107 0308 	add.w	r3, r7, #8
 80119d0:	2200      	movs	r2, #0
 80119d2:	4619      	mov	r1, r3
 80119d4:	6878      	ldr	r0, [r7, #4]
 80119d6:	f7ff fe3b 	bl	8011650 <snmp_process_varbind>
 80119da:	e011      	b.n	8011a00 <snmp_process_get_request+0x74>
      } else {
        request->error_status = SNMP_ERR_GENERROR;
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	2205      	movs	r2, #5
 80119e0:	61da      	str	r2, [r3, #28]
 80119e2:	e00d      	b.n	8011a00 <snmp_process_get_request+0x74>
      }
    } else if (err == SNMP_VB_ENUMERATOR_ERR_EOVB) {
 80119e4:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 80119e8:	2b01      	cmp	r3, #1
 80119ea:	d00e      	beq.n	8011a0a <snmp_process_get_request+0x7e>
      /* no more varbinds in request */
      break;
    } else if (err == SNMP_VB_ENUMERATOR_ERR_ASN1ERROR) {
 80119ec:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 80119f0:	2b02      	cmp	r3, #2
 80119f2:	d102      	bne.n	80119fa <snmp_process_get_request+0x6e>
      /* malformed ASN.1, don't answer */
      return ERR_ARG;
 80119f4:	f06f 030f 	mvn.w	r3, #15
 80119f8:	e009      	b.n	8011a0e <snmp_process_get_request+0x82>
    } else {
      request->error_status = SNMP_ERR_GENERROR;
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	2205      	movs	r2, #5
 80119fe:	61da      	str	r2, [r3, #28]
  while (request->error_status == SNMP_ERR_NOERROR) {
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	69db      	ldr	r3, [r3, #28]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d0ca      	beq.n	801199e <snmp_process_get_request+0x12>
 8011a08:	e000      	b.n	8011a0c <snmp_process_get_request+0x80>
      break;
 8011a0a:	bf00      	nop
    }
  }

  return ERR_OK;
 8011a0c:	2300      	movs	r3, #0
}
 8011a0e:	4618      	mov	r0, r3
 8011a10:	37e8      	adds	r7, #232	@ 0xe8
 8011a12:	46bd      	mov	sp, r7
 8011a14:	bd80      	pop	{r7, pc}

08011a16 <snmp_process_getnext_request>:
 *
 * @param request points to the associated message process state
 */
static err_t
snmp_process_getnext_request(struct snmp_request *request)
{
 8011a16:	b580      	push	{r7, lr}
 8011a18:	b0ba      	sub	sp, #232	@ 0xe8
 8011a1a:	af00      	add	r7, sp, #0
 8011a1c:	6078      	str	r0, [r7, #4]
  snmp_vb_enumerator_err_t err;
  struct snmp_varbind vb;
  vb.value = request->value_buffer;
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	3358      	adds	r3, #88	@ 0x58
 8011a22:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

  LWIP_DEBUGF(SNMP_DEBUG, ("SNMP get-next request\n"));

  while (request->error_status == SNMP_ERR_NOERROR) {
 8011a26:	e030      	b.n	8011a8a <snmp_process_getnext_request+0x74>
    err = snmp_vb_enumerator_get_next(&request->inbound_varbind_enumerator, &vb);
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	3330      	adds	r3, #48	@ 0x30
 8011a2c:	f107 0208 	add.w	r2, r7, #8
 8011a30:	4611      	mov	r1, r2
 8011a32:	4618      	mov	r0, r3
 8011a34:	f001 fb60 	bl	80130f8 <snmp_vb_enumerator_get_next>
 8011a38:	4603      	mov	r3, r0
 8011a3a:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
    if (err == SNMP_VB_ENUMERATOR_ERR_OK) {
 8011a3e:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d113      	bne.n	8011a6e <snmp_process_getnext_request+0x58>
      if ((vb.type == SNMP_ASN1_TYPE_NULL) && (vb.value_len == 0)) {
 8011a46:	f897 30dc 	ldrb.w	r3, [r7, #220]	@ 0xdc
 8011a4a:	2b05      	cmp	r3, #5
 8011a4c:	d10b      	bne.n	8011a66 <snmp_process_getnext_request+0x50>
 8011a4e:	f8b7 30de 	ldrh.w	r3, [r7, #222]	@ 0xde
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d107      	bne.n	8011a66 <snmp_process_getnext_request+0x50>
        snmp_process_varbind(request, &vb, 1);
 8011a56:	f107 0308 	add.w	r3, r7, #8
 8011a5a:	2201      	movs	r2, #1
 8011a5c:	4619      	mov	r1, r3
 8011a5e:	6878      	ldr	r0, [r7, #4]
 8011a60:	f7ff fdf6 	bl	8011650 <snmp_process_varbind>
 8011a64:	e011      	b.n	8011a8a <snmp_process_getnext_request+0x74>
      } else {
        request->error_status = SNMP_ERR_GENERROR;
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	2205      	movs	r2, #5
 8011a6a:	61da      	str	r2, [r3, #28]
 8011a6c:	e00d      	b.n	8011a8a <snmp_process_getnext_request+0x74>
      }
    } else if (err == SNMP_VB_ENUMERATOR_ERR_EOVB) {
 8011a6e:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 8011a72:	2b01      	cmp	r3, #1
 8011a74:	d00e      	beq.n	8011a94 <snmp_process_getnext_request+0x7e>
      /* no more varbinds in request */
      break;
    } else if (err == SNMP_VB_ENUMERATOR_ERR_ASN1ERROR) {
 8011a76:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 8011a7a:	2b02      	cmp	r3, #2
 8011a7c:	d102      	bne.n	8011a84 <snmp_process_getnext_request+0x6e>
      /* malformed ASN.1, don't answer */
      return ERR_ARG;
 8011a7e:	f06f 030f 	mvn.w	r3, #15
 8011a82:	e009      	b.n	8011a98 <snmp_process_getnext_request+0x82>
    } else {
      request->error_status = SNMP_ERR_GENERROR;
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	2205      	movs	r2, #5
 8011a88:	61da      	str	r2, [r3, #28]
  while (request->error_status == SNMP_ERR_NOERROR) {
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	69db      	ldr	r3, [r3, #28]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d0ca      	beq.n	8011a28 <snmp_process_getnext_request+0x12>
 8011a92:	e000      	b.n	8011a96 <snmp_process_getnext_request+0x80>
      break;
 8011a94:	bf00      	nop
    }
  }
  
  return ERR_OK;
 8011a96:	2300      	movs	r3, #0
}
 8011a98:	4618      	mov	r0, r3
 8011a9a:	37e8      	adds	r7, #232	@ 0xe8
 8011a9c:	46bd      	mov	sp, r7
 8011a9e:	bd80      	pop	{r7, pc}

08011aa0 <snmp_process_getbulk_request>:
 *
 * @param request points to the associated message process state
 */
static err_t
snmp_process_getbulk_request(struct snmp_request *request)
{
 8011aa0:	b580      	push	{r7, lr}
 8011aa2:	b0c0      	sub	sp, #256	@ 0x100
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]
  snmp_vb_enumerator_err_t err;
  s32_t non_repeaters     = request->non_repeaters;
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011aac:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  s32_t repetitions;
  u16_t repetition_offset = 0;
 8011ab0:	2300      	movs	r3, #0
 8011ab2:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6
  struct snmp_varbind_enumerator repetition_varbind_enumerator;
  struct snmp_varbind vb;
  vb.value = request->value_buffer;
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	3358      	adds	r3, #88	@ 0x58
 8011aba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

  if (SNMP_LWIP_GETBULK_MAX_REPETITIONS > 0) {
    repetitions = LWIP_MIN(request->max_repetitions, SNMP_LWIP_GETBULK_MAX_REPETITIONS);
  } else {
    repetitions = request->max_repetitions;
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ac2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  }

  LWIP_DEBUGF(SNMP_DEBUG, ("SNMP get-bulk request\n"));

  /* process non repeaters and first repetition */
  while (request->error_status == SNMP_ERR_NOERROR) {
 8011ac6:	e043      	b.n	8011b50 <snmp_process_getbulk_request+0xb0>
    if (non_repeaters == 0) {
 8011ac8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d10d      	bne.n	8011aec <snmp_process_getbulk_request+0x4c>
      repetition_offset = request->outbound_pbuf_stream.offset;
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8011ad6:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6

      if (repetitions == 0) {
 8011ada:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d03b      	beq.n	8011b5a <snmp_process_getbulk_request+0xba>
        /* do not resolve repeaters when repetitions is set to 0 */
        break;
      }
      repetitions--;
 8011ae2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8011ae6:	3b01      	subs	r3, #1
 8011ae8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    }

    err = snmp_vb_enumerator_get_next(&request->inbound_varbind_enumerator, &vb);
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	3330      	adds	r3, #48	@ 0x30
 8011af0:	f107 020c 	add.w	r2, r7, #12
 8011af4:	4611      	mov	r1, r2
 8011af6:	4618      	mov	r0, r3
 8011af8:	f001 fafe 	bl	80130f8 <snmp_vb_enumerator_get_next>
 8011afc:	4603      	mov	r3, r0
 8011afe:	f887 30f4 	strb.w	r3, [r7, #244]	@ 0xf4
    if (err == SNMP_VB_ENUMERATOR_ERR_EOVB) {
 8011b02:	f897 30f4 	ldrb.w	r3, [r7, #244]	@ 0xf4
 8011b06:	2b01      	cmp	r3, #1
 8011b08:	d029      	beq.n	8011b5e <snmp_process_getbulk_request+0xbe>
      /* no more varbinds in request */
      break;
    } else if (err == SNMP_VB_ENUMERATOR_ERR_ASN1ERROR) {
 8011b0a:	f897 30f4 	ldrb.w	r3, [r7, #244]	@ 0xf4
 8011b0e:	2b02      	cmp	r3, #2
 8011b10:	d102      	bne.n	8011b18 <snmp_process_getbulk_request+0x78>
      /* malformed ASN.1, don't answer */
      return ERR_ARG;
 8011b12:	f06f 030f 	mvn.w	r3, #15
 8011b16:	e0a7      	b.n	8011c68 <snmp_process_getbulk_request+0x1c8>
    } else if ((err != SNMP_VB_ENUMERATOR_ERR_OK) || (vb.type != SNMP_ASN1_TYPE_NULL) || (vb.value_len != 0)) {
 8011b18:	f897 30f4 	ldrb.w	r3, [r7, #244]	@ 0xf4
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d107      	bne.n	8011b30 <snmp_process_getbulk_request+0x90>
 8011b20:	f897 30e0 	ldrb.w	r3, [r7, #224]	@ 0xe0
 8011b24:	2b05      	cmp	r3, #5
 8011b26:	d103      	bne.n	8011b30 <snmp_process_getbulk_request+0x90>
 8011b28:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	@ 0xe2
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d003      	beq.n	8011b38 <snmp_process_getbulk_request+0x98>
      request->error_status = SNMP_ERR_GENERROR;
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	2205      	movs	r2, #5
 8011b34:	61da      	str	r2, [r3, #28]
 8011b36:	e00b      	b.n	8011b50 <snmp_process_getbulk_request+0xb0>
    } else {
      snmp_process_varbind(request, &vb, 1);
 8011b38:	f107 030c 	add.w	r3, r7, #12
 8011b3c:	2201      	movs	r2, #1
 8011b3e:	4619      	mov	r1, r3
 8011b40:	6878      	ldr	r0, [r7, #4]
 8011b42:	f7ff fd85 	bl	8011650 <snmp_process_varbind>
      non_repeaters--;
 8011b46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011b4a:	3b01      	subs	r3, #1
 8011b4c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  while (request->error_status == SNMP_ERR_NOERROR) {
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	69db      	ldr	r3, [r3, #28]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d0b7      	beq.n	8011ac8 <snmp_process_getbulk_request+0x28>
 8011b58:	e06d      	b.n	8011c36 <snmp_process_getbulk_request+0x196>
        break;
 8011b5a:	bf00      	nop
 8011b5c:	e06b      	b.n	8011c36 <snmp_process_getbulk_request+0x196>
      break;
 8011b5e:	bf00      	nop
    }
  }

  /* process repetitions > 1 */
  while ((request->error_status == SNMP_ERR_NOERROR) && (repetitions > 0) && (request->outbound_pbuf_stream.offset != repetition_offset)) {
 8011b60:	e069      	b.n	8011c36 <snmp_process_getbulk_request+0x196>

    u8_t all_endofmibview = 1;
 8011b62:	2301      	movs	r3, #1
 8011b64:	f887 30f5 	strb.w	r3, [r7, #245]	@ 0xf5
    
    snmp_vb_enumerator_init(&repetition_varbind_enumerator, request->outbound_pbuf, repetition_offset, request->outbound_pbuf_stream.offset - repetition_offset);
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8011b72:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	@ 0xf6
 8011b76:	1ad3      	subs	r3, r2, r3
 8011b78:	b29b      	uxth	r3, r3
 8011b7a:	f8b7 20f6 	ldrh.w	r2, [r7, #246]	@ 0xf6
 8011b7e:	f107 00e8 	add.w	r0, r7, #232	@ 0xe8
 8011b82:	f001 faa1 	bl	80130c8 <snmp_vb_enumerator_init>
    repetition_offset = request->outbound_pbuf_stream.offset; /* for next loop */
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8011b8c:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6

    while (request->error_status == SNMP_ERR_NOERROR) {
 8011b90:	e03e      	b.n	8011c10 <snmp_process_getbulk_request+0x170>
      vb.value = NULL; /* do NOT decode value (we enumerate outbound buffer here, so all varbinds have values assigned) */
 8011b92:	2300      	movs	r3, #0
 8011b94:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      err = snmp_vb_enumerator_get_next(&repetition_varbind_enumerator, &vb);
 8011b98:	f107 020c 	add.w	r2, r7, #12
 8011b9c:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8011ba0:	4611      	mov	r1, r2
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	f001 faa8 	bl	80130f8 <snmp_vb_enumerator_get_next>
 8011ba8:	4603      	mov	r3, r0
 8011baa:	f887 30f4 	strb.w	r3, [r7, #244]	@ 0xf4
      if (err == SNMP_VB_ENUMERATOR_ERR_OK) {
 8011bae:	f897 30f4 	ldrb.w	r3, [r7, #244]	@ 0xf4
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d11e      	bne.n	8011bf4 <snmp_process_getbulk_request+0x154>
        vb.value = request->value_buffer;
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	3358      	adds	r3, #88	@ 0x58
 8011bba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        snmp_process_varbind(request, &vb, 1);
 8011bbe:	f107 030c 	add.w	r3, r7, #12
 8011bc2:	2201      	movs	r2, #1
 8011bc4:	4619      	mov	r1, r3
 8011bc6:	6878      	ldr	r0, [r7, #4]
 8011bc8:	f7ff fd42 	bl	8011650 <snmp_process_varbind>

        if (request->error_status != SNMP_ERR_NOERROR) {
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	69db      	ldr	r3, [r3, #28]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d007      	beq.n	8011be4 <snmp_process_getbulk_request+0x144>
          /* already set correct error-index (here it cannot be taken from inbound varbind enumerator) */
          request->error_index = request->non_repeaters + repetition_varbind_enumerator.varbind_count;
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011bd8:	f8b7 20f0 	ldrh.w	r2, [r7, #240]	@ 0xf0
 8011bdc:	441a      	add	r2, r3
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	621a      	str	r2, [r3, #32]
 8011be2:	e015      	b.n	8011c10 <snmp_process_getbulk_request+0x170>
        } else if (vb.type != (SNMP_ASN1_CONTENTTYPE_PRIMITIVE | SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTEXT_VARBIND_END_OF_MIB_VIEW)) {
 8011be4:	f897 30e0 	ldrb.w	r3, [r7, #224]	@ 0xe0
 8011be8:	2b82      	cmp	r3, #130	@ 0x82
 8011bea:	d011      	beq.n	8011c10 <snmp_process_getbulk_request+0x170>
          all_endofmibview = 0;
 8011bec:	2300      	movs	r3, #0
 8011bee:	f887 30f5 	strb.w	r3, [r7, #245]	@ 0xf5
 8011bf2:	e00d      	b.n	8011c10 <snmp_process_getbulk_request+0x170>
        }
      } else if (err == SNMP_VB_ENUMERATOR_ERR_EOVB) {
 8011bf4:	f897 30f4 	ldrb.w	r3, [r7, #244]	@ 0xf4
 8011bf8:	2b01      	cmp	r3, #1
 8011bfa:	d00e      	beq.n	8011c1a <snmp_process_getbulk_request+0x17a>
        /* no more varbinds in request */
        break;
      } else {
        LWIP_DEBUGF(SNMP_DEBUG, ("Very strange, we cannot parse the varbind output that we created just before!"));
        request->error_status = SNMP_ERR_GENERROR;
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	2205      	movs	r2, #5
 8011c00:	61da      	str	r2, [r3, #28]
        request->error_index  = request->non_repeaters + repetition_varbind_enumerator.varbind_count;
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c06:	f8b7 20f0 	ldrh.w	r2, [r7, #240]	@ 0xf0
 8011c0a:	441a      	add	r2, r3
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	621a      	str	r2, [r3, #32]
    while (request->error_status == SNMP_ERR_NOERROR) {
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	69db      	ldr	r3, [r3, #28]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d0bc      	beq.n	8011b92 <snmp_process_getbulk_request+0xf2>
 8011c18:	e000      	b.n	8011c1c <snmp_process_getbulk_request+0x17c>
        break;
 8011c1a:	bf00      	nop
      }
    }

    if ((request->error_status == SNMP_ERR_NOERROR) && all_endofmibview) {
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	69db      	ldr	r3, [r3, #28]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d103      	bne.n	8011c2c <snmp_process_getbulk_request+0x18c>
 8011c24:	f897 30f5 	ldrb.w	r3, [r7, #245]	@ 0xf5
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d114      	bne.n	8011c56 <snmp_process_getbulk_request+0x1b6>
      /* stop when all varbinds in a loop return EndOfMibView */
      break;
    }
    
    repetitions--;
 8011c2c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8011c30:	3b01      	subs	r3, #1
 8011c32:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  while ((request->error_status == SNMP_ERR_NOERROR) && (repetitions > 0) && (request->outbound_pbuf_stream.offset != repetition_offset)) {
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	69db      	ldr	r3, [r3, #28]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d10c      	bne.n	8011c58 <snmp_process_getbulk_request+0x1b8>
 8011c3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	dd08      	ble.n	8011c58 <snmp_process_getbulk_request+0x1b8>
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8011c4c:	f8b7 20f6 	ldrh.w	r2, [r7, #246]	@ 0xf6
 8011c50:	429a      	cmp	r2, r3
 8011c52:	d186      	bne.n	8011b62 <snmp_process_getbulk_request+0xc2>
 8011c54:	e000      	b.n	8011c58 <snmp_process_getbulk_request+0x1b8>
      break;
 8011c56:	bf00      	nop
  }

  if (request->error_status == SNMP_ERR_TOOBIG) {
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	69db      	ldr	r3, [r3, #28]
 8011c5c:	2b01      	cmp	r3, #1
 8011c5e:	d102      	bne.n	8011c66 <snmp_process_getbulk_request+0x1c6>
    /* for GetBulk it is ok, if not all requested variables fit into the response -> just return the varbinds added so far */
    request->error_status = SNMP_ERR_NOERROR;
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	2200      	movs	r2, #0
 8011c64:	61da      	str	r2, [r3, #28]
  }

  return ERR_OK;
 8011c66:	2300      	movs	r3, #0
}
 8011c68:	4618      	mov	r0, r3
 8011c6a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8011c6e:	46bd      	mov	sp, r7
 8011c70:	bd80      	pop	{r7, pc}

08011c72 <snmp_process_set_request>:
 *
 * @param request points to the associated message process state
 */
static err_t
snmp_process_set_request(struct snmp_request *request)
{
 8011c72:	b580      	push	{r7, lr}
 8011c74:	b0f6      	sub	sp, #472	@ 0x1d8
 8011c76:	af00      	add	r7, sp, #0
 8011c78:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011c7c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8011c80:	6018      	str	r0, [r3, #0]
  snmp_vb_enumerator_err_t err;
  struct snmp_varbind vb;
  vb.value = request->value_buffer;
 8011c82:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011c86:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	3358      	adds	r3, #88	@ 0x58
 8011c8e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0

  LWIP_DEBUGF(SNMP_DEBUG, ("SNMP set request\n"));

  /* perform set test on all objects */
  while (request->error_status == SNMP_ERR_NOERROR) {
 8011c92:	e0ad      	b.n	8011df0 <snmp_process_set_request+0x17e>
    err = snmp_vb_enumerator_get_next(&request->inbound_varbind_enumerator, &vb);
 8011c94:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011c98:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	3330      	adds	r3, #48	@ 0x30
 8011ca0:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8011ca4:	4611      	mov	r1, r2
 8011ca6:	4618      	mov	r0, r3
 8011ca8:	f001 fa26 	bl	80130f8 <snmp_vb_enumerator_get_next>
 8011cac:	4603      	mov	r3, r0
 8011cae:	f887 31d7 	strb.w	r3, [r7, #471]	@ 0x1d7
    if (err == SNMP_VB_ENUMERATOR_ERR_OK) {
 8011cb2:	f897 31d7 	ldrb.w	r3, [r7, #471]	@ 0x1d7
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d17c      	bne.n	8011db4 <snmp_process_set_request+0x142>
      struct snmp_node_instance node_instance;
      memset(&node_instance, 0, sizeof(node_instance));
 8011cba:	f107 030c 	add.w	r3, r7, #12
 8011cbe:	22ec      	movs	r2, #236	@ 0xec
 8011cc0:	2100      	movs	r1, #0
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	f010 f9b6 	bl	8022034 <memset>
      
      request->error_status = snmp_get_node_instance_from_oid(vb.oid.id, vb.oid.len, &node_instance);
 8011cc8:	f897 1100 	ldrb.w	r1, [r7, #256]	@ 0x100
 8011ccc:	f107 020c 	add.w	r2, r7, #12
 8011cd0:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8011cd4:	330c      	adds	r3, #12
 8011cd6:	4618      	mov	r0, r3
 8011cd8:	f7fc ffc6 	bl	800ec68 <snmp_get_node_instance_from_oid>
 8011cdc:	4603      	mov	r3, r0
 8011cde:	461a      	mov	r2, r3
 8011ce0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011ce4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	61da      	str	r2, [r3, #28]
      if (request->error_status == SNMP_ERR_NOERROR) {
 8011cec:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011cf0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	69db      	ldr	r3, [r3, #28]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d179      	bne.n	8011df0 <snmp_process_set_request+0x17e>
        if (node_instance.asn1_type != vb.type) {
 8011cfc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011d00:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8011d04:	f893 20d0 	ldrb.w	r2, [r3, #208]	@ 0xd0
 8011d08:	f897 31cc 	ldrb.w	r3, [r7, #460]	@ 0x1cc
 8011d0c:	429a      	cmp	r2, r3
 8011d0e:	d007      	beq.n	8011d20 <snmp_process_set_request+0xae>
          request->error_status = SNMP_ERR_WRONGTYPE;
 8011d10:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011d14:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	2207      	movs	r2, #7
 8011d1c:	61da      	str	r2, [r3, #28]
 8011d1e:	e036      	b.n	8011d8e <snmp_process_set_request+0x11c>
        } else if (((node_instance.access & SNMP_NODE_INSTANCE_ACCESS_WRITE) != SNMP_NODE_INSTANCE_ACCESS_WRITE) || (node_instance.set_value == NULL)) {
 8011d20:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011d24:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8011d28:	f893 30d1 	ldrb.w	r3, [r3, #209]	@ 0xd1
 8011d2c:	f003 0302 	and.w	r3, r3, #2
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d007      	beq.n	8011d44 <snmp_process_set_request+0xd2>
 8011d34:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011d38:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8011d3c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d107      	bne.n	8011d54 <snmp_process_set_request+0xe2>
          request->error_status = SNMP_ERR_NOTWRITABLE;
 8011d44:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011d48:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	2211      	movs	r2, #17
 8011d50:	61da      	str	r2, [r3, #28]
 8011d52:	e01c      	b.n	8011d8e <snmp_process_set_request+0x11c>
        } else {
          if (node_instance.set_test != NULL) {
 8011d54:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011d58:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8011d5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d014      	beq.n	8011d8e <snmp_process_set_request+0x11c>
            request->error_status = node_instance.set_test(&node_instance, vb.value_len, vb.value);
 8011d64:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011d68:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8011d6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011d70:	f8b7 11ce 	ldrh.w	r1, [r7, #462]	@ 0x1ce
 8011d74:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8011d78:	f107 000c 	add.w	r0, r7, #12
 8011d7c:	4798      	blx	r3
 8011d7e:	4603      	mov	r3, r0
 8011d80:	461a      	mov	r2, r3
 8011d82:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011d86:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	61da      	str	r2, [r3, #28]
          }
        }

        if (node_instance.release_instance != NULL) {
 8011d8e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011d92:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8011d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d028      	beq.n	8011df0 <snmp_process_set_request+0x17e>
          node_instance.release_instance(&node_instance);
 8011d9e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011da2:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8011da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011daa:	f107 020c 	add.w	r2, r7, #12
 8011dae:	4610      	mov	r0, r2
 8011db0:	4798      	blx	r3
 8011db2:	e01d      	b.n	8011df0 <snmp_process_set_request+0x17e>
        }
      }
    } else if (err == SNMP_VB_ENUMERATOR_ERR_EOVB) {
 8011db4:	f897 31d7 	ldrb.w	r3, [r7, #471]	@ 0x1d7
 8011db8:	2b01      	cmp	r3, #1
 8011dba:	d023      	beq.n	8011e04 <snmp_process_set_request+0x192>
      /* no more varbinds in request */
      break;
    } else if (err == SNMP_VB_ENUMERATOR_ERR_INVALIDLENGTH) {
 8011dbc:	f897 31d7 	ldrb.w	r3, [r7, #471]	@ 0x1d7
 8011dc0:	2b03      	cmp	r3, #3
 8011dc2:	d107      	bne.n	8011dd4 <snmp_process_set_request+0x162>
      request->error_status = SNMP_ERR_WRONGLENGTH;
 8011dc4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011dc8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	2208      	movs	r2, #8
 8011dd0:	61da      	str	r2, [r3, #28]
 8011dd2:	e00d      	b.n	8011df0 <snmp_process_set_request+0x17e>
    } else if (err == SNMP_VB_ENUMERATOR_ERR_ASN1ERROR) {
 8011dd4:	f897 31d7 	ldrb.w	r3, [r7, #471]	@ 0x1d7
 8011dd8:	2b02      	cmp	r3, #2
 8011dda:	d102      	bne.n	8011de2 <snmp_process_set_request+0x170>
      /* malformed ASN.1, don't answer */
      return ERR_ARG;
 8011ddc:	f06f 030f 	mvn.w	r3, #15
 8011de0:	e0bb      	b.n	8011f5a <snmp_process_set_request+0x2e8>
    } else {
      request->error_status = SNMP_ERR_GENERROR;
 8011de2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011de6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	2205      	movs	r2, #5
 8011dee:	61da      	str	r2, [r3, #28]
  while (request->error_status == SNMP_ERR_NOERROR) {
 8011df0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011df4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	69db      	ldr	r3, [r3, #28]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	f43f af49 	beq.w	8011c94 <snmp_process_set_request+0x22>
 8011e02:	e000      	b.n	8011e06 <snmp_process_set_request+0x194>
      break;
 8011e04:	bf00      	nop
    }
  }

  /* perform real set operation on all objects */
  if (request->error_status == SNMP_ERR_NOERROR) {
 8011e06:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011e0a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	69db      	ldr	r3, [r3, #28]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	f040 80a0 	bne.w	8011f58 <snmp_process_set_request+0x2e6>
    snmp_vb_enumerator_init(&request->inbound_varbind_enumerator, request->inbound_pbuf, request->inbound_varbind_offset, request->inbound_varbind_len);
 8011e18:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011e1c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8011e26:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011e2a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8011e32:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011e36:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 8011e3e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011e42:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8011e4a:	f001 f93d 	bl	80130c8 <snmp_vb_enumerator_init>
    while (request->error_status == SNMP_ERR_NOERROR) {
 8011e4e:	e078      	b.n	8011f42 <snmp_process_set_request+0x2d0>
      err = snmp_vb_enumerator_get_next(&request->inbound_varbind_enumerator, &vb);
 8011e50:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011e54:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	3330      	adds	r3, #48	@ 0x30
 8011e5c:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8011e60:	4611      	mov	r1, r2
 8011e62:	4618      	mov	r0, r3
 8011e64:	f001 f948 	bl	80130f8 <snmp_vb_enumerator_get_next>
 8011e68:	4603      	mov	r3, r0
 8011e6a:	f887 31d7 	strb.w	r3, [r7, #471]	@ 0x1d7
      if (err == SNMP_VB_ENUMERATOR_ERR_OK) {
 8011e6e:	f897 31d7 	ldrb.w	r3, [r7, #471]	@ 0x1d7
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d15a      	bne.n	8011f2c <snmp_process_set_request+0x2ba>
        struct snmp_node_instance node_instance;
        memset(&node_instance, 0, sizeof(node_instance));
 8011e76:	f107 030c 	add.w	r3, r7, #12
 8011e7a:	22ec      	movs	r2, #236	@ 0xec
 8011e7c:	2100      	movs	r1, #0
 8011e7e:	4618      	mov	r0, r3
 8011e80:	f010 f8d8 	bl	8022034 <memset>
        request->error_status = snmp_get_node_instance_from_oid(vb.oid.id, vb.oid.len, &node_instance);
 8011e84:	f897 1100 	ldrb.w	r1, [r7, #256]	@ 0x100
 8011e88:	f107 020c 	add.w	r2, r7, #12
 8011e8c:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8011e90:	330c      	adds	r3, #12
 8011e92:	4618      	mov	r0, r3
 8011e94:	f7fc fee8 	bl	800ec68 <snmp_get_node_instance_from_oid>
 8011e98:	4603      	mov	r3, r0
 8011e9a:	461a      	mov	r2, r3
 8011e9c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011ea0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	61da      	str	r2, [r3, #28]
        if (request->error_status == SNMP_ERR_NOERROR) {
 8011ea8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011eac:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	69db      	ldr	r3, [r3, #28]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d144      	bne.n	8011f42 <snmp_process_set_request+0x2d0>
          if (node_instance.set_value(&node_instance, vb.value_len, vb.value) != SNMP_ERR_NOERROR) {
 8011eb8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011ebc:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8011ec0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8011ec4:	f8b7 11ce 	ldrh.w	r1, [r7, #462]	@ 0x1ce
 8011ec8:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8011ecc:	f107 000c 	add.w	r0, r7, #12
 8011ed0:	4798      	blx	r3
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d016      	beq.n	8011f06 <snmp_process_set_request+0x294>
            if (request->inbound_varbind_enumerator.varbind_count == 1) {
 8011ed8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011edc:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011ee4:	2b01      	cmp	r3, #1
 8011ee6:	d107      	bne.n	8011ef8 <snmp_process_set_request+0x286>
              request->error_status = SNMP_ERR_COMMITFAILED;
 8011ee8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011eec:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	220e      	movs	r2, #14
 8011ef4:	61da      	str	r2, [r3, #28]
 8011ef6:	e006      	b.n	8011f06 <snmp_process_set_request+0x294>
            } else {
              /* we cannot undo the set operations done so far */
              request->error_status = SNMP_ERR_UNDOFAILED;
 8011ef8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011efc:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	220f      	movs	r2, #15
 8011f04:	61da      	str	r2, [r3, #28]
            }
          }

          if (node_instance.release_instance != NULL) {
 8011f06:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011f0a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8011f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d015      	beq.n	8011f42 <snmp_process_set_request+0x2d0>
            node_instance.release_instance(&node_instance);
 8011f16:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011f1a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8011f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011f22:	f107 020c 	add.w	r2, r7, #12
 8011f26:	4610      	mov	r0, r2
 8011f28:	4798      	blx	r3
 8011f2a:	e00a      	b.n	8011f42 <snmp_process_set_request+0x2d0>
          }
        }
      } else if (err == SNMP_VB_ENUMERATOR_ERR_EOVB) {
 8011f2c:	f897 31d7 	ldrb.w	r3, [r7, #471]	@ 0x1d7
 8011f30:	2b01      	cmp	r3, #1
 8011f32:	d010      	beq.n	8011f56 <snmp_process_set_request+0x2e4>
        /* no more varbinds in request */
        break;
      } else {
        /* first time enumerating varbinds work but second time not, although nothing should have changed in between ??? */
        request->error_status = SNMP_ERR_GENERROR;
 8011f34:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011f38:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	2205      	movs	r2, #5
 8011f40:	61da      	str	r2, [r3, #28]
    while (request->error_status == SNMP_ERR_NOERROR) {
 8011f42:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8011f46:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	69db      	ldr	r3, [r3, #28]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	f43f af7e 	beq.w	8011e50 <snmp_process_set_request+0x1de>
 8011f54:	e000      	b.n	8011f58 <snmp_process_set_request+0x2e6>
        break;
 8011f56:	bf00      	nop
      }
    }
  }

  return ERR_OK;
 8011f58:	2300      	movs	r3, #0
}
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	f507 77ec 	add.w	r7, r7, #472	@ 0x1d8
 8011f60:	46bd      	mov	sp, r7
 8011f62:	bd80      	pop	{r7, pc}

08011f64 <snmp_parse_inbound_frame>:
 * - ERR_OK SNMP header is sane and accepted
 * - ERR_VAL SNMP header is either malformed or rejected
 */
static err_t
snmp_parse_inbound_frame(struct snmp_request *request)
{
 8011f64:	b590      	push	{r4, r7, lr}
 8011f66:	b08d      	sub	sp, #52	@ 0x34
 8011f68:	af02      	add	r7, sp, #8
 8011f6a:	6078      	str	r0, [r7, #4]
  struct snmp_asn1_tlv tlv;
  s32_t parent_tlv_value_len;
  s32_t s32_value;
  err_t err;

  IF_PARSE_EXEC(snmp_pbuf_stream_init(&pbuf_stream, request->inbound_pbuf, 0, request->inbound_pbuf->tot_len));
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f74:	891b      	ldrh	r3, [r3, #8]
 8011f76:	f107 0018 	add.w	r0, r7, #24
 8011f7a:	2200      	movs	r2, #0
 8011f7c:	f001 faca 	bl	8013514 <snmp_pbuf_stream_init>
 8011f80:	4603      	mov	r3, r0
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d007      	beq.n	8011f96 <snmp_parse_inbound_frame+0x32>
 8011f86:	4b9f      	ldr	r3, [pc, #636]	@ (8012204 <snmp_parse_inbound_frame+0x2a0>)
 8011f88:	695b      	ldr	r3, [r3, #20]
 8011f8a:	3301      	adds	r3, #1
 8011f8c:	4a9d      	ldr	r2, [pc, #628]	@ (8012204 <snmp_parse_inbound_frame+0x2a0>)
 8011f8e:	6153      	str	r3, [r2, #20]
 8011f90:	f06f 030f 	mvn.w	r3, #15
 8011f94:	e2ee      	b.n	8012574 <snmp_parse_inbound_frame+0x610>
  
  /* decode main container consisting of version, community and PDU */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 8011f96:	f107 0210 	add.w	r2, r7, #16
 8011f9a:	f107 0318 	add.w	r3, r7, #24
 8011f9e:	4611      	mov	r1, r2
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	f7fb ffd9 	bl	800df58 <snmp_asn1_dec_tlv>
 8011fa6:	4603      	mov	r3, r0
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d007      	beq.n	8011fbc <snmp_parse_inbound_frame+0x58>
 8011fac:	4b95      	ldr	r3, [pc, #596]	@ (8012204 <snmp_parse_inbound_frame+0x2a0>)
 8011fae:	695b      	ldr	r3, [r3, #20]
 8011fb0:	3301      	adds	r3, #1
 8011fb2:	4a94      	ldr	r2, [pc, #592]	@ (8012204 <snmp_parse_inbound_frame+0x2a0>)
 8011fb4:	6153      	str	r3, [r2, #20]
 8011fb6:	f06f 030f 	mvn.w	r3, #15
 8011fba:	e2db      	b.n	8012574 <snmp_parse_inbound_frame+0x610>
  IF_PARSE_ASSERT((tlv.type == SNMP_ASN1_TYPE_SEQUENCE) && (tlv.value_len == pbuf_stream.length));
 8011fbc:	7c3b      	ldrb	r3, [r7, #16]
 8011fbe:	2b30      	cmp	r3, #48	@ 0x30
 8011fc0:	d103      	bne.n	8011fca <snmp_parse_inbound_frame+0x66>
 8011fc2:	8aba      	ldrh	r2, [r7, #20]
 8011fc4:	8bfb      	ldrh	r3, [r7, #30]
 8011fc6:	429a      	cmp	r2, r3
 8011fc8:	d007      	beq.n	8011fda <snmp_parse_inbound_frame+0x76>
 8011fca:	4b8e      	ldr	r3, [pc, #568]	@ (8012204 <snmp_parse_inbound_frame+0x2a0>)
 8011fcc:	695b      	ldr	r3, [r3, #20]
 8011fce:	3301      	adds	r3, #1
 8011fd0:	4a8c      	ldr	r2, [pc, #560]	@ (8012204 <snmp_parse_inbound_frame+0x2a0>)
 8011fd2:	6153      	str	r3, [r2, #20]
 8011fd4:	f06f 030f 	mvn.w	r3, #15
 8011fd8:	e2cc      	b.n	8012574 <snmp_parse_inbound_frame+0x610>
  parent_tlv_value_len = tlv.value_len;
 8011fda:	8abb      	ldrh	r3, [r7, #20]
 8011fdc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* decode version */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 8011fde:	f107 0210 	add.w	r2, r7, #16
 8011fe2:	f107 0318 	add.w	r3, r7, #24
 8011fe6:	4611      	mov	r1, r2
 8011fe8:	4618      	mov	r0, r3
 8011fea:	f7fb ffb5 	bl	800df58 <snmp_asn1_dec_tlv>
 8011fee:	4603      	mov	r3, r0
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d007      	beq.n	8012004 <snmp_parse_inbound_frame+0xa0>
 8011ff4:	4b83      	ldr	r3, [pc, #524]	@ (8012204 <snmp_parse_inbound_frame+0x2a0>)
 8011ff6:	695b      	ldr	r3, [r3, #20]
 8011ff8:	3301      	adds	r3, #1
 8011ffa:	4a82      	ldr	r2, [pc, #520]	@ (8012204 <snmp_parse_inbound_frame+0x2a0>)
 8011ffc:	6153      	str	r3, [r2, #20]
 8011ffe:	f06f 030f 	mvn.w	r3, #15
 8012002:	e2b7      	b.n	8012574 <snmp_parse_inbound_frame+0x610>
  IF_PARSE_ASSERT(tlv.type == SNMP_ASN1_TYPE_INTEGER);
 8012004:	7c3b      	ldrb	r3, [r7, #16]
 8012006:	2b02      	cmp	r3, #2
 8012008:	d007      	beq.n	801201a <snmp_parse_inbound_frame+0xb6>
 801200a:	4b7e      	ldr	r3, [pc, #504]	@ (8012204 <snmp_parse_inbound_frame+0x2a0>)
 801200c:	695b      	ldr	r3, [r3, #20]
 801200e:	3301      	adds	r3, #1
 8012010:	4a7c      	ldr	r2, [pc, #496]	@ (8012204 <snmp_parse_inbound_frame+0x2a0>)
 8012012:	6153      	str	r3, [r2, #20]
 8012014:	f06f 030f 	mvn.w	r3, #15
 8012018:	e2ac      	b.n	8012574 <snmp_parse_inbound_frame+0x610>
  parent_tlv_value_len -= SNMP_ASN1_TLV_LENGTH(tlv);
 801201a:	7c7b      	ldrb	r3, [r7, #17]
 801201c:	461a      	mov	r2, r3
 801201e:	7cbb      	ldrb	r3, [r7, #18]
 8012020:	4413      	add	r3, r2
 8012022:	8aba      	ldrh	r2, [r7, #20]
 8012024:	4413      	add	r3, r2
 8012026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012028:	1ad3      	subs	r3, r2, r3
 801202a:	627b      	str	r3, [r7, #36]	@ 0x24
  IF_PARSE_ASSERT(parent_tlv_value_len > 0);
 801202c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801202e:	2b00      	cmp	r3, #0
 8012030:	dc07      	bgt.n	8012042 <snmp_parse_inbound_frame+0xde>
 8012032:	4b74      	ldr	r3, [pc, #464]	@ (8012204 <snmp_parse_inbound_frame+0x2a0>)
 8012034:	695b      	ldr	r3, [r3, #20]
 8012036:	3301      	adds	r3, #1
 8012038:	4a72      	ldr	r2, [pc, #456]	@ (8012204 <snmp_parse_inbound_frame+0x2a0>)
 801203a:	6153      	str	r3, [r2, #20]
 801203c:	f06f 030f 	mvn.w	r3, #15
 8012040:	e298      	b.n	8012574 <snmp_parse_inbound_frame+0x610>
  
  IF_PARSE_EXEC(snmp_asn1_dec_s32t(&pbuf_stream, tlv.value_len, &s32_value));
 8012042:	8ab9      	ldrh	r1, [r7, #20]
 8012044:	f107 020c 	add.w	r2, r7, #12
 8012048:	f107 0318 	add.w	r3, r7, #24
 801204c:	4618      	mov	r0, r3
 801204e:	f7fc f8bb 	bl	800e1c8 <snmp_asn1_dec_s32t>
 8012052:	4603      	mov	r3, r0
 8012054:	2b00      	cmp	r3, #0
 8012056:	d007      	beq.n	8012068 <snmp_parse_inbound_frame+0x104>
 8012058:	4b6a      	ldr	r3, [pc, #424]	@ (8012204 <snmp_parse_inbound_frame+0x2a0>)
 801205a:	695b      	ldr	r3, [r3, #20]
 801205c:	3301      	adds	r3, #1
 801205e:	4a69      	ldr	r2, [pc, #420]	@ (8012204 <snmp_parse_inbound_frame+0x2a0>)
 8012060:	6153      	str	r3, [r2, #20]
 8012062:	f06f 030f 	mvn.w	r3, #15
 8012066:	e285      	b.n	8012574 <snmp_parse_inbound_frame+0x610>
  if ((s32_value != SNMP_VERSION_1) &&
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	2b00      	cmp	r3, #0
 801206c:	d00a      	beq.n	8012084 <snmp_parse_inbound_frame+0x120>
      (s32_value != SNMP_VERSION_2c)
 801206e:	68fb      	ldr	r3, [r7, #12]
  if ((s32_value != SNMP_VERSION_1) &&
 8012070:	2b01      	cmp	r3, #1
 8012072:	d007      	beq.n	8012084 <snmp_parse_inbound_frame+0x120>
      && (s32_value != SNMP_VERSION_3)
#endif
     )
  {
    /* unsupported SNMP version */
    snmp_stats.inbadversions++;
 8012074:	4b63      	ldr	r3, [pc, #396]	@ (8012204 <snmp_parse_inbound_frame+0x2a0>)
 8012076:	689b      	ldr	r3, [r3, #8]
 8012078:	3301      	adds	r3, #1
 801207a:	4a62      	ldr	r2, [pc, #392]	@ (8012204 <snmp_parse_inbound_frame+0x2a0>)
 801207c:	6093      	str	r3, [r2, #8]
    return ERR_ARG;
 801207e:	f06f 030f 	mvn.w	r3, #15
 8012082:	e277      	b.n	8012574 <snmp_parse_inbound_frame+0x610>
  }
  request->version = (u8_t)s32_value;
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	b2da      	uxtb	r2, r3
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	729a      	strb	r2, [r3, #10]
    request->context_name_len = (u8_t)u16_value;
  } else
#endif
  {
  /* decode community */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 801208c:	f107 0210 	add.w	r2, r7, #16
 8012090:	f107 0318 	add.w	r3, r7, #24
 8012094:	4611      	mov	r1, r2
 8012096:	4618      	mov	r0, r3
 8012098:	f7fb ff5e 	bl	800df58 <snmp_asn1_dec_tlv>
 801209c:	4603      	mov	r3, r0
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d007      	beq.n	80120b2 <snmp_parse_inbound_frame+0x14e>
 80120a2:	4b58      	ldr	r3, [pc, #352]	@ (8012204 <snmp_parse_inbound_frame+0x2a0>)
 80120a4:	695b      	ldr	r3, [r3, #20]
 80120a6:	3301      	adds	r3, #1
 80120a8:	4a56      	ldr	r2, [pc, #344]	@ (8012204 <snmp_parse_inbound_frame+0x2a0>)
 80120aa:	6153      	str	r3, [r2, #20]
 80120ac:	f06f 030f 	mvn.w	r3, #15
 80120b0:	e260      	b.n	8012574 <snmp_parse_inbound_frame+0x610>
  IF_PARSE_ASSERT(tlv.type == SNMP_ASN1_TYPE_OCTET_STRING);
 80120b2:	7c3b      	ldrb	r3, [r7, #16]
 80120b4:	2b04      	cmp	r3, #4
 80120b6:	d007      	beq.n	80120c8 <snmp_parse_inbound_frame+0x164>
 80120b8:	4b52      	ldr	r3, [pc, #328]	@ (8012204 <snmp_parse_inbound_frame+0x2a0>)
 80120ba:	695b      	ldr	r3, [r3, #20]
 80120bc:	3301      	adds	r3, #1
 80120be:	4a51      	ldr	r2, [pc, #324]	@ (8012204 <snmp_parse_inbound_frame+0x2a0>)
 80120c0:	6153      	str	r3, [r2, #20]
 80120c2:	f06f 030f 	mvn.w	r3, #15
 80120c6:	e255      	b.n	8012574 <snmp_parse_inbound_frame+0x610>
  parent_tlv_value_len -= SNMP_ASN1_TLV_LENGTH(tlv);
 80120c8:	7c7b      	ldrb	r3, [r7, #17]
 80120ca:	461a      	mov	r2, r3
 80120cc:	7cbb      	ldrb	r3, [r7, #18]
 80120ce:	4413      	add	r3, r2
 80120d0:	8aba      	ldrh	r2, [r7, #20]
 80120d2:	4413      	add	r3, r2
 80120d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80120d6:	1ad3      	subs	r3, r2, r3
 80120d8:	627b      	str	r3, [r7, #36]	@ 0x24
  IF_PARSE_ASSERT(parent_tlv_value_len > 0);
 80120da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120dc:	2b00      	cmp	r3, #0
 80120de:	dc07      	bgt.n	80120f0 <snmp_parse_inbound_frame+0x18c>
 80120e0:	4b48      	ldr	r3, [pc, #288]	@ (8012204 <snmp_parse_inbound_frame+0x2a0>)
 80120e2:	695b      	ldr	r3, [r3, #20]
 80120e4:	3301      	adds	r3, #1
 80120e6:	4a47      	ldr	r2, [pc, #284]	@ (8012204 <snmp_parse_inbound_frame+0x2a0>)
 80120e8:	6153      	str	r3, [r2, #20]
 80120ea:	f06f 030f 	mvn.w	r3, #15
 80120ee:	e241      	b.n	8012574 <snmp_parse_inbound_frame+0x610>

  err = snmp_asn1_dec_raw(&pbuf_stream, tlv.value_len, request->community, &request->community_strlen, SNMP_MAX_COMMUNITY_STR_LEN);
 80120f0:	8ab9      	ldrh	r1, [r7, #20]
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	f103 020b 	add.w	r2, r3, #11
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	3314      	adds	r3, #20
 80120fc:	f107 0018 	add.w	r0, r7, #24
 8012100:	2408      	movs	r4, #8
 8012102:	9400      	str	r4, [sp, #0]
 8012104:	f7fc f99f 	bl	800e446 <snmp_asn1_dec_raw>
 8012108:	4603      	mov	r3, r0
 801210a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err == ERR_MEM) {
 801210e:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8012112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012116:	d10b      	bne.n	8012130 <snmp_parse_inbound_frame+0x1cc>
    /* community string does not fit in our buffer -> its too long -> its invalid */
    request->community_strlen = 0;
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	2200      	movs	r2, #0
 801211c:	829a      	strh	r2, [r3, #20]
    snmp_pbuf_stream_seek(&pbuf_stream, tlv.value_len);
 801211e:	8abb      	ldrh	r3, [r7, #20]
 8012120:	461a      	mov	r2, r3
 8012122:	f107 0318 	add.w	r3, r7, #24
 8012126:	4611      	mov	r1, r2
 8012128:	4618      	mov	r0, r3
 801212a:	f001 fae9 	bl	8013700 <snmp_pbuf_stream_seek>
 801212e:	e00b      	b.n	8012148 <snmp_parse_inbound_frame+0x1e4>
  } else {
    IF_PARSE_ASSERT(err == ERR_OK);
 8012130:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8012134:	2b00      	cmp	r3, #0
 8012136:	d007      	beq.n	8012148 <snmp_parse_inbound_frame+0x1e4>
 8012138:	4b32      	ldr	r3, [pc, #200]	@ (8012204 <snmp_parse_inbound_frame+0x2a0>)
 801213a:	695b      	ldr	r3, [r3, #20]
 801213c:	3301      	adds	r3, #1
 801213e:	4a31      	ldr	r2, [pc, #196]	@ (8012204 <snmp_parse_inbound_frame+0x2a0>)
 8012140:	6153      	str	r3, [r2, #20]
 8012142:	f06f 030f 	mvn.w	r3, #15
 8012146:	e215      	b.n	8012574 <snmp_parse_inbound_frame+0x610>
  }
  /* add zero terminator */
  request->community[request->community_strlen] = 0;
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	8a9b      	ldrh	r3, [r3, #20]
 801214c:	461a      	mov	r2, r3
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	4413      	add	r3, r2
 8012152:	2200      	movs	r2, #0
 8012154:	72da      	strb	r2, [r3, #11]
  }

  /* decode PDU type (next container level) */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 8012156:	f107 0210 	add.w	r2, r7, #16
 801215a:	f107 0318 	add.w	r3, r7, #24
 801215e:	4611      	mov	r1, r2
 8012160:	4618      	mov	r0, r3
 8012162:	f7fb fef9 	bl	800df58 <snmp_asn1_dec_tlv>
 8012166:	4603      	mov	r3, r0
 8012168:	2b00      	cmp	r3, #0
 801216a:	d007      	beq.n	801217c <snmp_parse_inbound_frame+0x218>
 801216c:	4b25      	ldr	r3, [pc, #148]	@ (8012204 <snmp_parse_inbound_frame+0x2a0>)
 801216e:	695b      	ldr	r3, [r3, #20]
 8012170:	3301      	adds	r3, #1
 8012172:	4a24      	ldr	r2, [pc, #144]	@ (8012204 <snmp_parse_inbound_frame+0x2a0>)
 8012174:	6153      	str	r3, [r2, #20]
 8012176:	f06f 030f 	mvn.w	r3, #15
 801217a:	e1fb      	b.n	8012574 <snmp_parse_inbound_frame+0x610>
  IF_PARSE_ASSERT(tlv.value_len <= pbuf_stream.length);
 801217c:	8aba      	ldrh	r2, [r7, #20]
 801217e:	8bfb      	ldrh	r3, [r7, #30]
 8012180:	429a      	cmp	r2, r3
 8012182:	d907      	bls.n	8012194 <snmp_parse_inbound_frame+0x230>
 8012184:	4b1f      	ldr	r3, [pc, #124]	@ (8012204 <snmp_parse_inbound_frame+0x2a0>)
 8012186:	695b      	ldr	r3, [r3, #20]
 8012188:	3301      	adds	r3, #1
 801218a:	4a1e      	ldr	r2, [pc, #120]	@ (8012204 <snmp_parse_inbound_frame+0x2a0>)
 801218c:	6153      	str	r3, [r2, #20]
 801218e:	f06f 030f 	mvn.w	r3, #15
 8012192:	e1ef      	b.n	8012574 <snmp_parse_inbound_frame+0x610>
  request->inbound_padding_len = pbuf_stream.length - tlv.value_len;
 8012194:	8bfa      	ldrh	r2, [r7, #30]
 8012196:	8abb      	ldrh	r3, [r7, #20]
 8012198:	1ad3      	subs	r3, r2, r3
 801219a:	b29a      	uxth	r2, r3
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  parent_tlv_value_len = tlv.value_len;
 80121a2:	8abb      	ldrh	r3, [r7, #20]
 80121a4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* validate PDU type */
  switch(tlv.type) {
 80121a6:	7c3b      	ldrb	r3, [r7, #16]
 80121a8:	3ba0      	subs	r3, #160	@ 0xa0
 80121aa:	2b05      	cmp	r3, #5
 80121ac:	d827      	bhi.n	80121fe <snmp_parse_inbound_frame+0x29a>
 80121ae:	a201      	add	r2, pc, #4	@ (adr r2, 80121b4 <snmp_parse_inbound_frame+0x250>)
 80121b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121b4:	080121cd 	.word	0x080121cd
 80121b8:	080121d9 	.word	0x080121d9
 80121bc:	080121ff 	.word	0x080121ff
 80121c0:	080121f3 	.word	0x080121f3
 80121c4:	080121ff 	.word	0x080121ff
 80121c8:	080121e5 	.word	0x080121e5
    case (SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTENTTYPE_CONSTRUCTED | SNMP_ASN1_CONTEXT_PDU_GET_REQ):
      /* GetRequest PDU */
      snmp_stats.ingetrequests++;
 80121cc:	4b0d      	ldr	r3, [pc, #52]	@ (8012204 <snmp_parse_inbound_frame+0x2a0>)
 80121ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80121d0:	3301      	adds	r3, #1
 80121d2:	4a0c      	ldr	r2, [pc, #48]	@ (8012204 <snmp_parse_inbound_frame+0x2a0>)
 80121d4:	6353      	str	r3, [r2, #52]	@ 0x34
      break;
 80121d6:	e018      	b.n	801220a <snmp_parse_inbound_frame+0x2a6>
    case (SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTENTTYPE_CONSTRUCTED | SNMP_ASN1_CONTEXT_PDU_GET_NEXT_REQ):
      /* GetNextRequest PDU */
      snmp_stats.ingetnexts++;
 80121d8:	4b0a      	ldr	r3, [pc, #40]	@ (8012204 <snmp_parse_inbound_frame+0x2a0>)
 80121da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80121dc:	3301      	adds	r3, #1
 80121de:	4a09      	ldr	r2, [pc, #36]	@ (8012204 <snmp_parse_inbound_frame+0x2a0>)
 80121e0:	6393      	str	r3, [r2, #56]	@ 0x38
      break;
 80121e2:	e012      	b.n	801220a <snmp_parse_inbound_frame+0x2a6>
    case (SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTENTTYPE_CONSTRUCTED | SNMP_ASN1_CONTEXT_PDU_GET_BULK_REQ):
      /* GetBulkRequest PDU */
      if (request->version < SNMP_VERSION_2c) {
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	7a9b      	ldrb	r3, [r3, #10]
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d10d      	bne.n	8012208 <snmp_parse_inbound_frame+0x2a4>
        /* RFC2089: invalid, drop packet */
        return ERR_ARG;
 80121ec:	f06f 030f 	mvn.w	r3, #15
 80121f0:	e1c0      	b.n	8012574 <snmp_parse_inbound_frame+0x610>
      }
      break;
    case (SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTENTTYPE_CONSTRUCTED | SNMP_ASN1_CONTEXT_PDU_SET_REQ):
      /* SetRequest PDU */
      snmp_stats.insetrequests++;
 80121f2:	4b04      	ldr	r3, [pc, #16]	@ (8012204 <snmp_parse_inbound_frame+0x2a0>)
 80121f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80121f6:	3301      	adds	r3, #1
 80121f8:	4a02      	ldr	r2, [pc, #8]	@ (8012204 <snmp_parse_inbound_frame+0x2a0>)
 80121fa:	63d3      	str	r3, [r2, #60]	@ 0x3c
      break;
 80121fc:	e005      	b.n	801220a <snmp_parse_inbound_frame+0x2a6>
    default:
      /* unsupported input PDU for this agent (no parse error) */
      LWIP_DEBUGF(SNMP_DEBUG, ("Unknown/Invalid SNMP PDU type received: %d", tlv.type)); \
      return ERR_ARG;
 80121fe:	f06f 030f 	mvn.w	r3, #15
 8012202:	e1b7      	b.n	8012574 <snmp_parse_inbound_frame+0x610>
 8012204:	200087e8 	.word	0x200087e8
      break;
 8012208:	bf00      	nop
      break;
  }
  request->request_type = tlv.type & SNMP_ASN1_DATATYPE_MASK;
 801220a:	7c3b      	ldrb	r3, [r7, #16]
 801220c:	f003 031f 	and.w	r3, r3, #31
 8012210:	b2da      	uxtb	r2, r3
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	759a      	strb	r2, [r3, #22]

  /* validate community (do this after decoding PDU type because we don't want to increase 'inbadcommunitynames' for wrong frame types */
  if (request->community_strlen == 0) {
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	8a9b      	ldrh	r3, [r3, #20]
 801221a:	2b00      	cmp	r3, #0
 801221c:	d109      	bne.n	8012232 <snmp_parse_inbound_frame+0x2ce>
    /* community string was too long or really empty*/
    snmp_stats.inbadcommunitynames++;
 801221e:	4ba2      	ldr	r3, [pc, #648]	@ (80124a8 <snmp_parse_inbound_frame+0x544>)
 8012220:	68db      	ldr	r3, [r3, #12]
 8012222:	3301      	adds	r3, #1
 8012224:	4aa0      	ldr	r2, [pc, #640]	@ (80124a8 <snmp_parse_inbound_frame+0x544>)
 8012226:	60d3      	str	r3, [r2, #12]
    snmp_authfail_trap();
 8012228:	f002 f88a 	bl	8014340 <snmp_authfail_trap>
    return ERR_ARG;
 801222c:	f06f 030f 	mvn.w	r3, #15
 8012230:	e1a0      	b.n	8012574 <snmp_parse_inbound_frame+0x610>
  } else if (request->request_type == SNMP_ASN1_CONTEXT_PDU_SET_REQ) {
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	7d9b      	ldrb	r3, [r3, #22]
 8012236:	2b03      	cmp	r3, #3
 8012238:	d120      	bne.n	801227c <snmp_parse_inbound_frame+0x318>
    if (snmp_community_write[0] == 0) {
 801223a:	4b9c      	ldr	r3, [pc, #624]	@ (80124ac <snmp_parse_inbound_frame+0x548>)
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	781b      	ldrb	r3, [r3, #0]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d106      	bne.n	8012252 <snmp_parse_inbound_frame+0x2ee>
      /* our write community is empty, that means all our objects are readonly */
      request->error_status = SNMP_ERR_NOTWRITABLE;
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	2211      	movs	r2, #17
 8012248:	61da      	str	r2, [r3, #28]
      request->error_index  = 1;
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	2201      	movs	r2, #1
 801224e:	621a      	str	r2, [r3, #32]
 8012250:	e029      	b.n	80122a6 <snmp_parse_inbound_frame+0x342>
    } else if (strncmp(snmp_community_write, (const char*)request->community, SNMP_MAX_COMMUNITY_STR_LEN) != 0) {
 8012252:	4b96      	ldr	r3, [pc, #600]	@ (80124ac <snmp_parse_inbound_frame+0x548>)
 8012254:	6818      	ldr	r0, [r3, #0]
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	330b      	adds	r3, #11
 801225a:	2208      	movs	r2, #8
 801225c:	4619      	mov	r1, r3
 801225e:	f00f ff1f 	bl	80220a0 <strncmp>
 8012262:	4603      	mov	r3, r0
 8012264:	2b00      	cmp	r3, #0
 8012266:	d01e      	beq.n	80122a6 <snmp_parse_inbound_frame+0x342>
      /* community name does not match */
      snmp_stats.inbadcommunitynames++;
 8012268:	4b8f      	ldr	r3, [pc, #572]	@ (80124a8 <snmp_parse_inbound_frame+0x544>)
 801226a:	68db      	ldr	r3, [r3, #12]
 801226c:	3301      	adds	r3, #1
 801226e:	4a8e      	ldr	r2, [pc, #568]	@ (80124a8 <snmp_parse_inbound_frame+0x544>)
 8012270:	60d3      	str	r3, [r2, #12]
      snmp_authfail_trap();
 8012272:	f002 f865 	bl	8014340 <snmp_authfail_trap>
      return ERR_ARG;
 8012276:	f06f 030f 	mvn.w	r3, #15
 801227a:	e17b      	b.n	8012574 <snmp_parse_inbound_frame+0x610>
    }
  } else { 
    if (strncmp(snmp_community, (const char*)request->community, SNMP_MAX_COMMUNITY_STR_LEN) != 0) {
 801227c:	4b8c      	ldr	r3, [pc, #560]	@ (80124b0 <snmp_parse_inbound_frame+0x54c>)
 801227e:	6818      	ldr	r0, [r3, #0]
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	330b      	adds	r3, #11
 8012284:	2208      	movs	r2, #8
 8012286:	4619      	mov	r1, r3
 8012288:	f00f ff0a 	bl	80220a0 <strncmp>
 801228c:	4603      	mov	r3, r0
 801228e:	2b00      	cmp	r3, #0
 8012290:	d009      	beq.n	80122a6 <snmp_parse_inbound_frame+0x342>
      /* community name does not match */
      snmp_stats.inbadcommunitynames++;
 8012292:	4b85      	ldr	r3, [pc, #532]	@ (80124a8 <snmp_parse_inbound_frame+0x544>)
 8012294:	68db      	ldr	r3, [r3, #12]
 8012296:	3301      	adds	r3, #1
 8012298:	4a83      	ldr	r2, [pc, #524]	@ (80124a8 <snmp_parse_inbound_frame+0x544>)
 801229a:	60d3      	str	r3, [r2, #12]
      snmp_authfail_trap();
 801229c:	f002 f850 	bl	8014340 <snmp_authfail_trap>
      return ERR_ARG;
 80122a0:	f06f 030f 	mvn.w	r3, #15
 80122a4:	e166      	b.n	8012574 <snmp_parse_inbound_frame+0x610>
    }
  }
  
  /* decode request ID */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 80122a6:	f107 0210 	add.w	r2, r7, #16
 80122aa:	f107 0318 	add.w	r3, r7, #24
 80122ae:	4611      	mov	r1, r2
 80122b0:	4618      	mov	r0, r3
 80122b2:	f7fb fe51 	bl	800df58 <snmp_asn1_dec_tlv>
 80122b6:	4603      	mov	r3, r0
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d007      	beq.n	80122cc <snmp_parse_inbound_frame+0x368>
 80122bc:	4b7a      	ldr	r3, [pc, #488]	@ (80124a8 <snmp_parse_inbound_frame+0x544>)
 80122be:	695b      	ldr	r3, [r3, #20]
 80122c0:	3301      	adds	r3, #1
 80122c2:	4a79      	ldr	r2, [pc, #484]	@ (80124a8 <snmp_parse_inbound_frame+0x544>)
 80122c4:	6153      	str	r3, [r2, #20]
 80122c6:	f06f 030f 	mvn.w	r3, #15
 80122ca:	e153      	b.n	8012574 <snmp_parse_inbound_frame+0x610>
  IF_PARSE_ASSERT(tlv.type == SNMP_ASN1_TYPE_INTEGER);
 80122cc:	7c3b      	ldrb	r3, [r7, #16]
 80122ce:	2b02      	cmp	r3, #2
 80122d0:	d007      	beq.n	80122e2 <snmp_parse_inbound_frame+0x37e>
 80122d2:	4b75      	ldr	r3, [pc, #468]	@ (80124a8 <snmp_parse_inbound_frame+0x544>)
 80122d4:	695b      	ldr	r3, [r3, #20]
 80122d6:	3301      	adds	r3, #1
 80122d8:	4a73      	ldr	r2, [pc, #460]	@ (80124a8 <snmp_parse_inbound_frame+0x544>)
 80122da:	6153      	str	r3, [r2, #20]
 80122dc:	f06f 030f 	mvn.w	r3, #15
 80122e0:	e148      	b.n	8012574 <snmp_parse_inbound_frame+0x610>
  parent_tlv_value_len -= SNMP_ASN1_TLV_LENGTH(tlv);
 80122e2:	7c7b      	ldrb	r3, [r7, #17]
 80122e4:	461a      	mov	r2, r3
 80122e6:	7cbb      	ldrb	r3, [r7, #18]
 80122e8:	4413      	add	r3, r2
 80122ea:	8aba      	ldrh	r2, [r7, #20]
 80122ec:	4413      	add	r3, r2
 80122ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80122f0:	1ad3      	subs	r3, r2, r3
 80122f2:	627b      	str	r3, [r7, #36]	@ 0x24
  IF_PARSE_ASSERT(parent_tlv_value_len > 0);
 80122f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	dc07      	bgt.n	801230a <snmp_parse_inbound_frame+0x3a6>
 80122fa:	4b6b      	ldr	r3, [pc, #428]	@ (80124a8 <snmp_parse_inbound_frame+0x544>)
 80122fc:	695b      	ldr	r3, [r3, #20]
 80122fe:	3301      	adds	r3, #1
 8012300:	4a69      	ldr	r2, [pc, #420]	@ (80124a8 <snmp_parse_inbound_frame+0x544>)
 8012302:	6153      	str	r3, [r2, #20]
 8012304:	f06f 030f 	mvn.w	r3, #15
 8012308:	e134      	b.n	8012574 <snmp_parse_inbound_frame+0x610>
  
  IF_PARSE_EXEC(snmp_asn1_dec_s32t(&pbuf_stream, tlv.value_len, &request->request_id));
 801230a:	8ab9      	ldrh	r1, [r7, #20]
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	f103 0218 	add.w	r2, r3, #24
 8012312:	f107 0318 	add.w	r3, r7, #24
 8012316:	4618      	mov	r0, r3
 8012318:	f7fb ff56 	bl	800e1c8 <snmp_asn1_dec_s32t>
 801231c:	4603      	mov	r3, r0
 801231e:	2b00      	cmp	r3, #0
 8012320:	d007      	beq.n	8012332 <snmp_parse_inbound_frame+0x3ce>
 8012322:	4b61      	ldr	r3, [pc, #388]	@ (80124a8 <snmp_parse_inbound_frame+0x544>)
 8012324:	695b      	ldr	r3, [r3, #20]
 8012326:	3301      	adds	r3, #1
 8012328:	4a5f      	ldr	r2, [pc, #380]	@ (80124a8 <snmp_parse_inbound_frame+0x544>)
 801232a:	6153      	str	r3, [r2, #20]
 801232c:	f06f 030f 	mvn.w	r3, #15
 8012330:	e120      	b.n	8012574 <snmp_parse_inbound_frame+0x610>

  /* decode error status / non-repeaters */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 8012332:	f107 0210 	add.w	r2, r7, #16
 8012336:	f107 0318 	add.w	r3, r7, #24
 801233a:	4611      	mov	r1, r2
 801233c:	4618      	mov	r0, r3
 801233e:	f7fb fe0b 	bl	800df58 <snmp_asn1_dec_tlv>
 8012342:	4603      	mov	r3, r0
 8012344:	2b00      	cmp	r3, #0
 8012346:	d007      	beq.n	8012358 <snmp_parse_inbound_frame+0x3f4>
 8012348:	4b57      	ldr	r3, [pc, #348]	@ (80124a8 <snmp_parse_inbound_frame+0x544>)
 801234a:	695b      	ldr	r3, [r3, #20]
 801234c:	3301      	adds	r3, #1
 801234e:	4a56      	ldr	r2, [pc, #344]	@ (80124a8 <snmp_parse_inbound_frame+0x544>)
 8012350:	6153      	str	r3, [r2, #20]
 8012352:	f06f 030f 	mvn.w	r3, #15
 8012356:	e10d      	b.n	8012574 <snmp_parse_inbound_frame+0x610>
  IF_PARSE_ASSERT(tlv.type == SNMP_ASN1_TYPE_INTEGER);
 8012358:	7c3b      	ldrb	r3, [r7, #16]
 801235a:	2b02      	cmp	r3, #2
 801235c:	d007      	beq.n	801236e <snmp_parse_inbound_frame+0x40a>
 801235e:	4b52      	ldr	r3, [pc, #328]	@ (80124a8 <snmp_parse_inbound_frame+0x544>)
 8012360:	695b      	ldr	r3, [r3, #20]
 8012362:	3301      	adds	r3, #1
 8012364:	4a50      	ldr	r2, [pc, #320]	@ (80124a8 <snmp_parse_inbound_frame+0x544>)
 8012366:	6153      	str	r3, [r2, #20]
 8012368:	f06f 030f 	mvn.w	r3, #15
 801236c:	e102      	b.n	8012574 <snmp_parse_inbound_frame+0x610>
  parent_tlv_value_len -= SNMP_ASN1_TLV_LENGTH(tlv);
 801236e:	7c7b      	ldrb	r3, [r7, #17]
 8012370:	461a      	mov	r2, r3
 8012372:	7cbb      	ldrb	r3, [r7, #18]
 8012374:	4413      	add	r3, r2
 8012376:	8aba      	ldrh	r2, [r7, #20]
 8012378:	4413      	add	r3, r2
 801237a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801237c:	1ad3      	subs	r3, r2, r3
 801237e:	627b      	str	r3, [r7, #36]	@ 0x24
  IF_PARSE_ASSERT(parent_tlv_value_len > 0);
 8012380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012382:	2b00      	cmp	r3, #0
 8012384:	dc07      	bgt.n	8012396 <snmp_parse_inbound_frame+0x432>
 8012386:	4b48      	ldr	r3, [pc, #288]	@ (80124a8 <snmp_parse_inbound_frame+0x544>)
 8012388:	695b      	ldr	r3, [r3, #20]
 801238a:	3301      	adds	r3, #1
 801238c:	4a46      	ldr	r2, [pc, #280]	@ (80124a8 <snmp_parse_inbound_frame+0x544>)
 801238e:	6153      	str	r3, [r2, #20]
 8012390:	f06f 030f 	mvn.w	r3, #15
 8012394:	e0ee      	b.n	8012574 <snmp_parse_inbound_frame+0x610>

  if (request->request_type == SNMP_ASN1_CONTEXT_PDU_GET_BULK_REQ) {
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	7d9b      	ldrb	r3, [r3, #22]
 801239a:	2b05      	cmp	r3, #5
 801239c:	d11b      	bne.n	80123d6 <snmp_parse_inbound_frame+0x472>
    IF_PARSE_EXEC(snmp_asn1_dec_s32t(&pbuf_stream, tlv.value_len, &request->non_repeaters));
 801239e:	8ab9      	ldrh	r1, [r7, #20]
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 80123a6:	f107 0318 	add.w	r3, r7, #24
 80123aa:	4618      	mov	r0, r3
 80123ac:	f7fb ff0c 	bl	800e1c8 <snmp_asn1_dec_s32t>
 80123b0:	4603      	mov	r3, r0
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d007      	beq.n	80123c6 <snmp_parse_inbound_frame+0x462>
 80123b6:	4b3c      	ldr	r3, [pc, #240]	@ (80124a8 <snmp_parse_inbound_frame+0x544>)
 80123b8:	695b      	ldr	r3, [r3, #20]
 80123ba:	3301      	adds	r3, #1
 80123bc:	4a3a      	ldr	r2, [pc, #232]	@ (80124a8 <snmp_parse_inbound_frame+0x544>)
 80123be:	6153      	str	r3, [r2, #20]
 80123c0:	f06f 030f 	mvn.w	r3, #15
 80123c4:	e0d6      	b.n	8012574 <snmp_parse_inbound_frame+0x610>
    if (request->non_repeaters < 0) {
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	da21      	bge.n	8012412 <snmp_parse_inbound_frame+0x4ae>
      /* RFC 1905, 4.2.3 */
      request->non_repeaters = 0;
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	2200      	movs	r2, #0
 80123d2:	625a      	str	r2, [r3, #36]	@ 0x24
 80123d4:	e01d      	b.n	8012412 <snmp_parse_inbound_frame+0x4ae>
    }
  } else {
    /* only check valid value, don't touch 'request->error_status', maybe a response error status was already set to above; */
    IF_PARSE_EXEC(snmp_asn1_dec_s32t(&pbuf_stream, tlv.value_len, &s32_value));
 80123d6:	8ab9      	ldrh	r1, [r7, #20]
 80123d8:	f107 020c 	add.w	r2, r7, #12
 80123dc:	f107 0318 	add.w	r3, r7, #24
 80123e0:	4618      	mov	r0, r3
 80123e2:	f7fb fef1 	bl	800e1c8 <snmp_asn1_dec_s32t>
 80123e6:	4603      	mov	r3, r0
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d007      	beq.n	80123fc <snmp_parse_inbound_frame+0x498>
 80123ec:	4b2e      	ldr	r3, [pc, #184]	@ (80124a8 <snmp_parse_inbound_frame+0x544>)
 80123ee:	695b      	ldr	r3, [r3, #20]
 80123f0:	3301      	adds	r3, #1
 80123f2:	4a2d      	ldr	r2, [pc, #180]	@ (80124a8 <snmp_parse_inbound_frame+0x544>)
 80123f4:	6153      	str	r3, [r2, #20]
 80123f6:	f06f 030f 	mvn.w	r3, #15
 80123fa:	e0bb      	b.n	8012574 <snmp_parse_inbound_frame+0x610>
    IF_PARSE_ASSERT(s32_value == SNMP_ERR_NOERROR);
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d007      	beq.n	8012412 <snmp_parse_inbound_frame+0x4ae>
 8012402:	4b29      	ldr	r3, [pc, #164]	@ (80124a8 <snmp_parse_inbound_frame+0x544>)
 8012404:	695b      	ldr	r3, [r3, #20]
 8012406:	3301      	adds	r3, #1
 8012408:	4a27      	ldr	r2, [pc, #156]	@ (80124a8 <snmp_parse_inbound_frame+0x544>)
 801240a:	6153      	str	r3, [r2, #20]
 801240c:	f06f 030f 	mvn.w	r3, #15
 8012410:	e0b0      	b.n	8012574 <snmp_parse_inbound_frame+0x610>
  }

  /* decode error index / max-repetitions */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 8012412:	f107 0210 	add.w	r2, r7, #16
 8012416:	f107 0318 	add.w	r3, r7, #24
 801241a:	4611      	mov	r1, r2
 801241c:	4618      	mov	r0, r3
 801241e:	f7fb fd9b 	bl	800df58 <snmp_asn1_dec_tlv>
 8012422:	4603      	mov	r3, r0
 8012424:	2b00      	cmp	r3, #0
 8012426:	d007      	beq.n	8012438 <snmp_parse_inbound_frame+0x4d4>
 8012428:	4b1f      	ldr	r3, [pc, #124]	@ (80124a8 <snmp_parse_inbound_frame+0x544>)
 801242a:	695b      	ldr	r3, [r3, #20]
 801242c:	3301      	adds	r3, #1
 801242e:	4a1e      	ldr	r2, [pc, #120]	@ (80124a8 <snmp_parse_inbound_frame+0x544>)
 8012430:	6153      	str	r3, [r2, #20]
 8012432:	f06f 030f 	mvn.w	r3, #15
 8012436:	e09d      	b.n	8012574 <snmp_parse_inbound_frame+0x610>
  IF_PARSE_ASSERT(tlv.type == SNMP_ASN1_TYPE_INTEGER);
 8012438:	7c3b      	ldrb	r3, [r7, #16]
 801243a:	2b02      	cmp	r3, #2
 801243c:	d007      	beq.n	801244e <snmp_parse_inbound_frame+0x4ea>
 801243e:	4b1a      	ldr	r3, [pc, #104]	@ (80124a8 <snmp_parse_inbound_frame+0x544>)
 8012440:	695b      	ldr	r3, [r3, #20]
 8012442:	3301      	adds	r3, #1
 8012444:	4a18      	ldr	r2, [pc, #96]	@ (80124a8 <snmp_parse_inbound_frame+0x544>)
 8012446:	6153      	str	r3, [r2, #20]
 8012448:	f06f 030f 	mvn.w	r3, #15
 801244c:	e092      	b.n	8012574 <snmp_parse_inbound_frame+0x610>
  parent_tlv_value_len -= SNMP_ASN1_TLV_LENGTH(tlv);
 801244e:	7c7b      	ldrb	r3, [r7, #17]
 8012450:	461a      	mov	r2, r3
 8012452:	7cbb      	ldrb	r3, [r7, #18]
 8012454:	4413      	add	r3, r2
 8012456:	8aba      	ldrh	r2, [r7, #20]
 8012458:	4413      	add	r3, r2
 801245a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801245c:	1ad3      	subs	r3, r2, r3
 801245e:	627b      	str	r3, [r7, #36]	@ 0x24
  IF_PARSE_ASSERT(parent_tlv_value_len > 0);
 8012460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012462:	2b00      	cmp	r3, #0
 8012464:	dc07      	bgt.n	8012476 <snmp_parse_inbound_frame+0x512>
 8012466:	4b10      	ldr	r3, [pc, #64]	@ (80124a8 <snmp_parse_inbound_frame+0x544>)
 8012468:	695b      	ldr	r3, [r3, #20]
 801246a:	3301      	adds	r3, #1
 801246c:	4a0e      	ldr	r2, [pc, #56]	@ (80124a8 <snmp_parse_inbound_frame+0x544>)
 801246e:	6153      	str	r3, [r2, #20]
 8012470:	f06f 030f 	mvn.w	r3, #15
 8012474:	e07e      	b.n	8012574 <snmp_parse_inbound_frame+0x610>

  if (request->request_type == SNMP_ASN1_CONTEXT_PDU_GET_BULK_REQ) {
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	7d9b      	ldrb	r3, [r3, #22]
 801247a:	2b05      	cmp	r3, #5
 801247c:	d122      	bne.n	80124c4 <snmp_parse_inbound_frame+0x560>
    IF_PARSE_EXEC(snmp_asn1_dec_s32t(&pbuf_stream, tlv.value_len, &request->max_repetitions));
 801247e:	8ab9      	ldrh	r1, [r7, #20]
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8012486:	f107 0318 	add.w	r3, r7, #24
 801248a:	4618      	mov	r0, r3
 801248c:	f7fb fe9c 	bl	800e1c8 <snmp_asn1_dec_s32t>
 8012490:	4603      	mov	r3, r0
 8012492:	2b00      	cmp	r3, #0
 8012494:	d00e      	beq.n	80124b4 <snmp_parse_inbound_frame+0x550>
 8012496:	4b04      	ldr	r3, [pc, #16]	@ (80124a8 <snmp_parse_inbound_frame+0x544>)
 8012498:	695b      	ldr	r3, [r3, #20]
 801249a:	3301      	adds	r3, #1
 801249c:	4a02      	ldr	r2, [pc, #8]	@ (80124a8 <snmp_parse_inbound_frame+0x544>)
 801249e:	6153      	str	r3, [r2, #20]
 80124a0:	f06f 030f 	mvn.w	r3, #15
 80124a4:	e066      	b.n	8012574 <snmp_parse_inbound_frame+0x610>
 80124a6:	bf00      	nop
 80124a8:	200087e8 	.word	0x200087e8
 80124ac:	20000114 	.word	0x20000114
 80124b0:	20000110 	.word	0x20000110
    if (request->max_repetitions < 0) {
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	da22      	bge.n	8012502 <snmp_parse_inbound_frame+0x59e>
      /* RFC 1905, 4.2.3 */
      request->max_repetitions = 0;
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	2200      	movs	r2, #0
 80124c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80124c2:	e01e      	b.n	8012502 <snmp_parse_inbound_frame+0x59e>
    }
  } else {
    IF_PARSE_EXEC(snmp_asn1_dec_s32t(&pbuf_stream, tlv.value_len, &request->error_index));
 80124c4:	8ab9      	ldrh	r1, [r7, #20]
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	f103 0220 	add.w	r2, r3, #32
 80124cc:	f107 0318 	add.w	r3, r7, #24
 80124d0:	4618      	mov	r0, r3
 80124d2:	f7fb fe79 	bl	800e1c8 <snmp_asn1_dec_s32t>
 80124d6:	4603      	mov	r3, r0
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d007      	beq.n	80124ec <snmp_parse_inbound_frame+0x588>
 80124dc:	4b27      	ldr	r3, [pc, #156]	@ (801257c <snmp_parse_inbound_frame+0x618>)
 80124de:	695b      	ldr	r3, [r3, #20]
 80124e0:	3301      	adds	r3, #1
 80124e2:	4a26      	ldr	r2, [pc, #152]	@ (801257c <snmp_parse_inbound_frame+0x618>)
 80124e4:	6153      	str	r3, [r2, #20]
 80124e6:	f06f 030f 	mvn.w	r3, #15
 80124ea:	e043      	b.n	8012574 <snmp_parse_inbound_frame+0x610>
    IF_PARSE_ASSERT(s32_value == 0);
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d007      	beq.n	8012502 <snmp_parse_inbound_frame+0x59e>
 80124f2:	4b22      	ldr	r3, [pc, #136]	@ (801257c <snmp_parse_inbound_frame+0x618>)
 80124f4:	695b      	ldr	r3, [r3, #20]
 80124f6:	3301      	adds	r3, #1
 80124f8:	4a20      	ldr	r2, [pc, #128]	@ (801257c <snmp_parse_inbound_frame+0x618>)
 80124fa:	6153      	str	r3, [r2, #20]
 80124fc:	f06f 030f 	mvn.w	r3, #15
 8012500:	e038      	b.n	8012574 <snmp_parse_inbound_frame+0x610>
  }

  /* decode varbind-list type (next container level) */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 8012502:	f107 0210 	add.w	r2, r7, #16
 8012506:	f107 0318 	add.w	r3, r7, #24
 801250a:	4611      	mov	r1, r2
 801250c:	4618      	mov	r0, r3
 801250e:	f7fb fd23 	bl	800df58 <snmp_asn1_dec_tlv>
 8012512:	4603      	mov	r3, r0
 8012514:	2b00      	cmp	r3, #0
 8012516:	d007      	beq.n	8012528 <snmp_parse_inbound_frame+0x5c4>
 8012518:	4b18      	ldr	r3, [pc, #96]	@ (801257c <snmp_parse_inbound_frame+0x618>)
 801251a:	695b      	ldr	r3, [r3, #20]
 801251c:	3301      	adds	r3, #1
 801251e:	4a17      	ldr	r2, [pc, #92]	@ (801257c <snmp_parse_inbound_frame+0x618>)
 8012520:	6153      	str	r3, [r2, #20]
 8012522:	f06f 030f 	mvn.w	r3, #15
 8012526:	e025      	b.n	8012574 <snmp_parse_inbound_frame+0x610>
  IF_PARSE_ASSERT((tlv.type == SNMP_ASN1_TYPE_SEQUENCE) && (tlv.value_len <= pbuf_stream.length));
 8012528:	7c3b      	ldrb	r3, [r7, #16]
 801252a:	2b30      	cmp	r3, #48	@ 0x30
 801252c:	d103      	bne.n	8012536 <snmp_parse_inbound_frame+0x5d2>
 801252e:	8aba      	ldrh	r2, [r7, #20]
 8012530:	8bfb      	ldrh	r3, [r7, #30]
 8012532:	429a      	cmp	r2, r3
 8012534:	d907      	bls.n	8012546 <snmp_parse_inbound_frame+0x5e2>
 8012536:	4b11      	ldr	r3, [pc, #68]	@ (801257c <snmp_parse_inbound_frame+0x618>)
 8012538:	695b      	ldr	r3, [r3, #20]
 801253a:	3301      	adds	r3, #1
 801253c:	4a0f      	ldr	r2, [pc, #60]	@ (801257c <snmp_parse_inbound_frame+0x618>)
 801253e:	6153      	str	r3, [r2, #20]
 8012540:	f06f 030f 	mvn.w	r3, #15
 8012544:	e016      	b.n	8012574 <snmp_parse_inbound_frame+0x610>
  
  request->inbound_varbind_offset = pbuf_stream.offset;
 8012546:	8bba      	ldrh	r2, [r7, #28]
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  request->inbound_varbind_len    = pbuf_stream.length - request->inbound_padding_len;
 801254c:	8bfa      	ldrh	r2, [r7, #30]
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8012554:	1ad3      	subs	r3, r2, r3
 8012556:	b29a      	uxth	r2, r3
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  snmp_vb_enumerator_init(&(request->inbound_varbind_enumerator), request->inbound_pbuf, request->inbound_varbind_offset, request->inbound_varbind_len);
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801256e:	f000 fdab 	bl	80130c8 <snmp_vb_enumerator_init>

  return ERR_OK;
 8012572:	2300      	movs	r3, #0
}
 8012574:	4618      	mov	r0, r3
 8012576:	372c      	adds	r7, #44	@ 0x2c
 8012578:	46bd      	mov	sp, r7
 801257a:	bd90      	pop	{r4, r7, pc}
 801257c:	200087e8 	.word	0x200087e8

08012580 <snmp_prepare_outbound_frame>:

#define OF_BUILD_EXEC(code) BUILD_EXEC(code, ERR_ARG)

static err_t
snmp_prepare_outbound_frame(struct snmp_request *request)
{
 8012580:	b580      	push	{r7, lr}
 8012582:	b086      	sub	sp, #24
 8012584:	af00      	add	r7, sp, #0
 8012586:	6078      	str	r0, [r7, #4]
  struct snmp_asn1_tlv tlv;
  struct snmp_pbuf_stream* pbuf_stream = &(request->outbound_pbuf_stream);
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	3348      	adds	r3, #72	@ 0x48
 801258c:	617b      	str	r3, [r7, #20]

  /* try allocating pbuf(s) for maximum response size */
  request->outbound_pbuf = pbuf_alloc(PBUF_TRANSPORT, 1472, PBUF_RAM);
 801258e:	2200      	movs	r2, #0
 8012590:	f44f 61b8 	mov.w	r1, #1472	@ 0x5c0
 8012594:	2000      	movs	r0, #0
 8012596:	f003 f80d 	bl	80155b4 <pbuf_alloc>
 801259a:	4602      	mov	r2, r0
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	645a      	str	r2, [r3, #68]	@ 0x44
  if (request->outbound_pbuf == NULL) {
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d102      	bne.n	80125ae <snmp_prepare_outbound_frame+0x2e>
    return ERR_MEM;
 80125a8:	f04f 33ff 	mov.w	r3, #4294967295
 80125ac:	e10e      	b.n	80127cc <snmp_prepare_outbound_frame+0x24c>
  }

  snmp_pbuf_stream_init(pbuf_stream, request->outbound_pbuf, 0, request->outbound_pbuf->tot_len);
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80125b6:	891b      	ldrh	r3, [r3, #8]
 80125b8:	2200      	movs	r2, #0
 80125ba:	6978      	ldr	r0, [r7, #20]
 80125bc:	f000 ffaa 	bl	8013514 <snmp_pbuf_stream_init>

  /* 'Message' sequence */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_SEQUENCE, 3, 0);
 80125c0:	2330      	movs	r3, #48	@ 0x30
 80125c2:	733b      	strb	r3, [r7, #12]
 80125c4:	2300      	movs	r3, #0
 80125c6:	737b      	strb	r3, [r7, #13]
 80125c8:	2303      	movs	r3, #3
 80125ca:	73bb      	strb	r3, [r7, #14]
 80125cc:	2300      	movs	r3, #0
 80125ce:	823b      	strh	r3, [r7, #16]
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 80125d0:	f107 030c 	add.w	r3, r7, #12
 80125d4:	4619      	mov	r1, r3
 80125d6:	6978      	ldr	r0, [r7, #20]
 80125d8:	f7fb f9fc 	bl	800d9d4 <snmp_ans1_enc_tlv>
 80125dc:	4603      	mov	r3, r0
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d002      	beq.n	80125e8 <snmp_prepare_outbound_frame+0x68>
 80125e2:	f06f 030f 	mvn.w	r3, #15
 80125e6:	e0f1      	b.n	80127cc <snmp_prepare_outbound_frame+0x24c>

  /* version */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_INTEGER, 0, 0);
 80125e8:	2302      	movs	r3, #2
 80125ea:	733b      	strb	r3, [r7, #12]
 80125ec:	2300      	movs	r3, #0
 80125ee:	737b      	strb	r3, [r7, #13]
 80125f0:	2300      	movs	r3, #0
 80125f2:	73bb      	strb	r3, [r7, #14]
 80125f4:	2300      	movs	r3, #0
 80125f6:	823b      	strh	r3, [r7, #16]
  snmp_asn1_enc_s32t_cnt(request->version, &tlv.value_len);
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	7a9b      	ldrb	r3, [r3, #10]
 80125fc:	461a      	mov	r2, r3
 80125fe:	f107 030c 	add.w	r3, r7, #12
 8012602:	3304      	adds	r3, #4
 8012604:	4619      	mov	r1, r3
 8012606:	4610      	mov	r0, r2
 8012608:	f7fb fc3a 	bl	800de80 <snmp_asn1_enc_s32t_cnt>
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 801260c:	f107 030c 	add.w	r3, r7, #12
 8012610:	4619      	mov	r1, r3
 8012612:	6978      	ldr	r0, [r7, #20]
 8012614:	f7fb f9de 	bl	800d9d4 <snmp_ans1_enc_tlv>
 8012618:	4603      	mov	r3, r0
 801261a:	2b00      	cmp	r3, #0
 801261c:	d002      	beq.n	8012624 <snmp_prepare_outbound_frame+0xa4>
 801261e:	f06f 030f 	mvn.w	r3, #15
 8012622:	e0d3      	b.n	80127cc <snmp_prepare_outbound_frame+0x24c>
  OF_BUILD_EXEC( snmp_asn1_enc_s32t(pbuf_stream, tlv.value_len, request->version) );
 8012624:	8a39      	ldrh	r1, [r7, #16]
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	7a9b      	ldrb	r3, [r3, #10]
 801262a:	461a      	mov	r2, r3
 801262c:	6978      	ldr	r0, [r7, #20]
 801262e:	f7fb fb1c 	bl	800dc6a <snmp_asn1_enc_s32t>
 8012632:	4603      	mov	r3, r0
 8012634:	2b00      	cmp	r3, #0
 8012636:	d002      	beq.n	801263e <snmp_prepare_outbound_frame+0xbe>
 8012638:	f06f 030f 	mvn.w	r3, #15
 801263c:	e0c6      	b.n	80127cc <snmp_prepare_outbound_frame+0x24c>

#if LWIP_SNMP_V3
  if (request->version < SNMP_VERSION_3) {
#endif
  /* community */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_OCTET_STRING, 0, request->community_strlen);
 801263e:	2304      	movs	r3, #4
 8012640:	733b      	strb	r3, [r7, #12]
 8012642:	2300      	movs	r3, #0
 8012644:	737b      	strb	r3, [r7, #13]
 8012646:	2300      	movs	r3, #0
 8012648:	73bb      	strb	r3, [r7, #14]
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	8a9b      	ldrh	r3, [r3, #20]
 801264e:	823b      	strh	r3, [r7, #16]
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 8012650:	f107 030c 	add.w	r3, r7, #12
 8012654:	4619      	mov	r1, r3
 8012656:	6978      	ldr	r0, [r7, #20]
 8012658:	f7fb f9bc 	bl	800d9d4 <snmp_ans1_enc_tlv>
 801265c:	4603      	mov	r3, r0
 801265e:	2b00      	cmp	r3, #0
 8012660:	d002      	beq.n	8012668 <snmp_prepare_outbound_frame+0xe8>
 8012662:	f06f 030f 	mvn.w	r3, #15
 8012666:	e0b1      	b.n	80127cc <snmp_prepare_outbound_frame+0x24c>
  OF_BUILD_EXEC( snmp_asn1_enc_raw(pbuf_stream, request->community, request->community_strlen) );
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	f103 010b 	add.w	r1, r3, #11
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	8a9b      	ldrh	r3, [r3, #20]
 8012672:	461a      	mov	r2, r3
 8012674:	6978      	ldr	r0, [r7, #20]
 8012676:	f7fb fa38 	bl	800daea <snmp_asn1_enc_raw>
 801267a:	4603      	mov	r3, r0
 801267c:	2b00      	cmp	r3, #0
 801267e:	d002      	beq.n	8012686 <snmp_prepare_outbound_frame+0x106>
 8012680:	f06f 030f 	mvn.w	r3, #15
 8012684:	e0a2      	b.n	80127cc <snmp_prepare_outbound_frame+0x24c>
    OF_BUILD_EXEC(snmp_asn1_enc_raw(pbuf_stream, request->context_name, request->context_name_len));
  }
#endif

  /* 'PDU' sequence */
  request->outbound_pdu_offset = pbuf_stream->offset;
 8012686:	697b      	ldr	r3, [r7, #20]
 8012688:	889a      	ldrh	r2, [r3, #4]
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  SNMP_ASN1_SET_TLV_PARAMS(tlv, (SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTENTTYPE_CONSTRUCTED | SNMP_ASN1_CONTEXT_PDU_GET_RESP), 3, 0);
 8012690:	23a2      	movs	r3, #162	@ 0xa2
 8012692:	733b      	strb	r3, [r7, #12]
 8012694:	2300      	movs	r3, #0
 8012696:	737b      	strb	r3, [r7, #13]
 8012698:	2303      	movs	r3, #3
 801269a:	73bb      	strb	r3, [r7, #14]
 801269c:	2300      	movs	r3, #0
 801269e:	823b      	strh	r3, [r7, #16]
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 80126a0:	f107 030c 	add.w	r3, r7, #12
 80126a4:	4619      	mov	r1, r3
 80126a6:	6978      	ldr	r0, [r7, #20]
 80126a8:	f7fb f994 	bl	800d9d4 <snmp_ans1_enc_tlv>
 80126ac:	4603      	mov	r3, r0
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d002      	beq.n	80126b8 <snmp_prepare_outbound_frame+0x138>
 80126b2:	f06f 030f 	mvn.w	r3, #15
 80126b6:	e089      	b.n	80127cc <snmp_prepare_outbound_frame+0x24c>

  /* request ID */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_INTEGER, 0, 0);
 80126b8:	2302      	movs	r3, #2
 80126ba:	733b      	strb	r3, [r7, #12]
 80126bc:	2300      	movs	r3, #0
 80126be:	737b      	strb	r3, [r7, #13]
 80126c0:	2300      	movs	r3, #0
 80126c2:	73bb      	strb	r3, [r7, #14]
 80126c4:	2300      	movs	r3, #0
 80126c6:	823b      	strh	r3, [r7, #16]
  snmp_asn1_enc_s32t_cnt(request->request_id, &tlv.value_len);
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	699a      	ldr	r2, [r3, #24]
 80126cc:	f107 030c 	add.w	r3, r7, #12
 80126d0:	3304      	adds	r3, #4
 80126d2:	4619      	mov	r1, r3
 80126d4:	4610      	mov	r0, r2
 80126d6:	f7fb fbd3 	bl	800de80 <snmp_asn1_enc_s32t_cnt>
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 80126da:	f107 030c 	add.w	r3, r7, #12
 80126de:	4619      	mov	r1, r3
 80126e0:	6978      	ldr	r0, [r7, #20]
 80126e2:	f7fb f977 	bl	800d9d4 <snmp_ans1_enc_tlv>
 80126e6:	4603      	mov	r3, r0
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d002      	beq.n	80126f2 <snmp_prepare_outbound_frame+0x172>
 80126ec:	f06f 030f 	mvn.w	r3, #15
 80126f0:	e06c      	b.n	80127cc <snmp_prepare_outbound_frame+0x24c>
  OF_BUILD_EXEC( snmp_asn1_enc_s32t(pbuf_stream, tlv.value_len, request->request_id) );
 80126f2:	8a39      	ldrh	r1, [r7, #16]
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	699b      	ldr	r3, [r3, #24]
 80126f8:	461a      	mov	r2, r3
 80126fa:	6978      	ldr	r0, [r7, #20]
 80126fc:	f7fb fab5 	bl	800dc6a <snmp_asn1_enc_s32t>
 8012700:	4603      	mov	r3, r0
 8012702:	2b00      	cmp	r3, #0
 8012704:	d002      	beq.n	801270c <snmp_prepare_outbound_frame+0x18c>
 8012706:	f06f 030f 	mvn.w	r3, #15
 801270a:	e05f      	b.n	80127cc <snmp_prepare_outbound_frame+0x24c>

  /* error status */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_INTEGER, 0, 1);
 801270c:	2302      	movs	r3, #2
 801270e:	733b      	strb	r3, [r7, #12]
 8012710:	2300      	movs	r3, #0
 8012712:	737b      	strb	r3, [r7, #13]
 8012714:	2300      	movs	r3, #0
 8012716:	73bb      	strb	r3, [r7, #14]
 8012718:	2301      	movs	r3, #1
 801271a:	823b      	strh	r3, [r7, #16]
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 801271c:	f107 030c 	add.w	r3, r7, #12
 8012720:	4619      	mov	r1, r3
 8012722:	6978      	ldr	r0, [r7, #20]
 8012724:	f7fb f956 	bl	800d9d4 <snmp_ans1_enc_tlv>
 8012728:	4603      	mov	r3, r0
 801272a:	2b00      	cmp	r3, #0
 801272c:	d002      	beq.n	8012734 <snmp_prepare_outbound_frame+0x1b4>
 801272e:	f06f 030f 	mvn.w	r3, #15
 8012732:	e04b      	b.n	80127cc <snmp_prepare_outbound_frame+0x24c>
  request->outbound_error_status_offset = pbuf_stream->offset;
 8012734:	697b      	ldr	r3, [r7, #20]
 8012736:	889a      	ldrh	r2, [r3, #4]
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  OF_BUILD_EXEC( snmp_pbuf_stream_write(pbuf_stream, 0) );
 801273e:	2100      	movs	r1, #0
 8012740:	6978      	ldr	r0, [r7, #20]
 8012742:	f000 ff2c 	bl	801359e <snmp_pbuf_stream_write>
 8012746:	4603      	mov	r3, r0
 8012748:	2b00      	cmp	r3, #0
 801274a:	d002      	beq.n	8012752 <snmp_prepare_outbound_frame+0x1d2>
 801274c:	f06f 030f 	mvn.w	r3, #15
 8012750:	e03c      	b.n	80127cc <snmp_prepare_outbound_frame+0x24c>

  /* error index */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_INTEGER, 0, 1);
 8012752:	2302      	movs	r3, #2
 8012754:	733b      	strb	r3, [r7, #12]
 8012756:	2300      	movs	r3, #0
 8012758:	737b      	strb	r3, [r7, #13]
 801275a:	2300      	movs	r3, #0
 801275c:	73bb      	strb	r3, [r7, #14]
 801275e:	2301      	movs	r3, #1
 8012760:	823b      	strh	r3, [r7, #16]
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 8012762:	f107 030c 	add.w	r3, r7, #12
 8012766:	4619      	mov	r1, r3
 8012768:	6978      	ldr	r0, [r7, #20]
 801276a:	f7fb f933 	bl	800d9d4 <snmp_ans1_enc_tlv>
 801276e:	4603      	mov	r3, r0
 8012770:	2b00      	cmp	r3, #0
 8012772:	d002      	beq.n	801277a <snmp_prepare_outbound_frame+0x1fa>
 8012774:	f06f 030f 	mvn.w	r3, #15
 8012778:	e028      	b.n	80127cc <snmp_prepare_outbound_frame+0x24c>
  request->outbound_error_index_offset = pbuf_stream->offset;
 801277a:	697b      	ldr	r3, [r7, #20]
 801277c:	889a      	ldrh	r2, [r3, #4]
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  OF_BUILD_EXEC( snmp_pbuf_stream_write(pbuf_stream, 0) );
 8012784:	2100      	movs	r1, #0
 8012786:	6978      	ldr	r0, [r7, #20]
 8012788:	f000 ff09 	bl	801359e <snmp_pbuf_stream_write>
 801278c:	4603      	mov	r3, r0
 801278e:	2b00      	cmp	r3, #0
 8012790:	d002      	beq.n	8012798 <snmp_prepare_outbound_frame+0x218>
 8012792:	f06f 030f 	mvn.w	r3, #15
 8012796:	e019      	b.n	80127cc <snmp_prepare_outbound_frame+0x24c>

  /* 'VarBindList' sequence */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_SEQUENCE, 3, 0);
 8012798:	2330      	movs	r3, #48	@ 0x30
 801279a:	733b      	strb	r3, [r7, #12]
 801279c:	2300      	movs	r3, #0
 801279e:	737b      	strb	r3, [r7, #13]
 80127a0:	2303      	movs	r3, #3
 80127a2:	73bb      	strb	r3, [r7, #14]
 80127a4:	2300      	movs	r3, #0
 80127a6:	823b      	strh	r3, [r7, #16]
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 80127a8:	f107 030c 	add.w	r3, r7, #12
 80127ac:	4619      	mov	r1, r3
 80127ae:	6978      	ldr	r0, [r7, #20]
 80127b0:	f7fb f910 	bl	800d9d4 <snmp_ans1_enc_tlv>
 80127b4:	4603      	mov	r3, r0
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d002      	beq.n	80127c0 <snmp_prepare_outbound_frame+0x240>
 80127ba:	f06f 030f 	mvn.w	r3, #15
 80127be:	e005      	b.n	80127cc <snmp_prepare_outbound_frame+0x24c>

  request->outbound_varbind_offset = pbuf_stream->offset;
 80127c0:	697b      	ldr	r3, [r7, #20]
 80127c2:	889a      	ldrh	r2, [r3, #4]
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

  return ERR_OK;
 80127ca:	2300      	movs	r3, #0
}
 80127cc:	4618      	mov	r0, r3
 80127ce:	3718      	adds	r7, #24
 80127d0:	46bd      	mov	sp, r7
 80127d2:	bd80      	pop	{r7, pc}

080127d4 <snmp_varbind_length>:

/** Calculate the length of a varbind list */
err_t
snmp_varbind_length(struct snmp_varbind *varbind, struct snmp_varbind_len *len)
{
 80127d4:	b580      	push	{r7, lr}
 80127d6:	b082      	sub	sp, #8
 80127d8:	af00      	add	r7, sp, #0
 80127da:	6078      	str	r0, [r7, #4]
 80127dc:	6039      	str	r1, [r7, #0]
  /* calculate required lengths */
  snmp_asn1_enc_oid_cnt(varbind->oid.id, varbind->oid.len, &len->oid_value_len);
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	f103 000c 	add.w	r0, r3, #12
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	7a1b      	ldrb	r3, [r3, #8]
 80127e8:	4619      	mov	r1, r3
 80127ea:	683b      	ldr	r3, [r7, #0]
 80127ec:	3306      	adds	r3, #6
 80127ee:	461a      	mov	r2, r3
 80127f0:	f7fb fb70 	bl	800ded4 <snmp_asn1_enc_oid_cnt>
  snmp_asn1_enc_length_cnt(len->oid_value_len, &len->oid_len_len);
 80127f4:	683b      	ldr	r3, [r7, #0]
 80127f6:	88da      	ldrh	r2, [r3, #6]
 80127f8:	683b      	ldr	r3, [r7, #0]
 80127fa:	3304      	adds	r3, #4
 80127fc:	4619      	mov	r1, r3
 80127fe:	4610      	mov	r0, r2
 8012800:	f7fb fad4 	bl	800ddac <snmp_asn1_enc_length_cnt>

  if (varbind->value_len == 0) {
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 801280a:	2b00      	cmp	r3, #0
 801280c:	d103      	bne.n	8012816 <snmp_varbind_length+0x42>
    len->value_value_len = 0;
 801280e:	683b      	ldr	r3, [r7, #0]
 8012810:	2200      	movs	r2, #0
 8012812:	815a      	strh	r2, [r3, #10]
 8012814:	e107      	b.n	8012a26 <snmp_varbind_length+0x252>
  } else if (varbind->value_len & SNMP_GET_VALUE_RAW_DATA) {
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 801281c:	b21b      	sxth	r3, r3
 801281e:	2b00      	cmp	r3, #0
 8012820:	da08      	bge.n	8012834 <snmp_varbind_length+0x60>
    len->value_value_len = varbind->value_len & (~SNMP_GET_VALUE_RAW_DATA);
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 8012828:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801282c:	b29a      	uxth	r2, r3
 801282e:	683b      	ldr	r3, [r7, #0]
 8012830:	815a      	strh	r2, [r3, #10]
 8012832:	e0f8      	b.n	8012a26 <snmp_varbind_length+0x252>
  } else {
    switch (varbind->type) {
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 801283a:	3b02      	subs	r3, #2
 801283c:	2b44      	cmp	r3, #68	@ 0x44
 801283e:	f200 80ef 	bhi.w	8012a20 <snmp_varbind_length+0x24c>
 8012842:	a201      	add	r2, pc, #4	@ (adr r2, 8012848 <snmp_varbind_length+0x74>)
 8012844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012848:	0801295d 	.word	0x0801295d
 801284c:	08012a21 	.word	0x08012a21
 8012850:	080129a9 	.word	0x080129a9
 8012854:	080129b5 	.word	0x080129b5
 8012858:	080129cd 	.word	0x080129cd
 801285c:	08012a21 	.word	0x08012a21
 8012860:	08012a21 	.word	0x08012a21
 8012864:	08012a21 	.word	0x08012a21
 8012868:	08012a21 	.word	0x08012a21
 801286c:	08012a21 	.word	0x08012a21
 8012870:	08012a21 	.word	0x08012a21
 8012874:	08012a21 	.word	0x08012a21
 8012878:	08012a21 	.word	0x08012a21
 801287c:	08012a21 	.word	0x08012a21
 8012880:	08012a21 	.word	0x08012a21
 8012884:	08012a21 	.word	0x08012a21
 8012888:	08012a21 	.word	0x08012a21
 801288c:	08012a21 	.word	0x08012a21
 8012890:	08012a21 	.word	0x08012a21
 8012894:	08012a21 	.word	0x08012a21
 8012898:	08012a21 	.word	0x08012a21
 801289c:	08012a21 	.word	0x08012a21
 80128a0:	08012a21 	.word	0x08012a21
 80128a4:	08012a21 	.word	0x08012a21
 80128a8:	08012a21 	.word	0x08012a21
 80128ac:	08012a21 	.word	0x08012a21
 80128b0:	08012a21 	.word	0x08012a21
 80128b4:	08012a21 	.word	0x08012a21
 80128b8:	08012a21 	.word	0x08012a21
 80128bc:	08012a21 	.word	0x08012a21
 80128c0:	08012a21 	.word	0x08012a21
 80128c4:	08012a21 	.word	0x08012a21
 80128c8:	08012a21 	.word	0x08012a21
 80128cc:	08012a21 	.word	0x08012a21
 80128d0:	08012a21 	.word	0x08012a21
 80128d4:	08012a21 	.word	0x08012a21
 80128d8:	08012a21 	.word	0x08012a21
 80128dc:	08012a21 	.word	0x08012a21
 80128e0:	08012a21 	.word	0x08012a21
 80128e4:	08012a21 	.word	0x08012a21
 80128e8:	08012a21 	.word	0x08012a21
 80128ec:	08012a21 	.word	0x08012a21
 80128f0:	08012a21 	.word	0x08012a21
 80128f4:	08012a21 	.word	0x08012a21
 80128f8:	08012a21 	.word	0x08012a21
 80128fc:	08012a21 	.word	0x08012a21
 8012900:	08012a21 	.word	0x08012a21
 8012904:	08012a21 	.word	0x08012a21
 8012908:	08012a21 	.word	0x08012a21
 801290c:	08012a21 	.word	0x08012a21
 8012910:	08012a21 	.word	0x08012a21
 8012914:	08012a21 	.word	0x08012a21
 8012918:	08012a21 	.word	0x08012a21
 801291c:	08012a21 	.word	0x08012a21
 8012920:	08012a21 	.word	0x08012a21
 8012924:	08012a21 	.word	0x08012a21
 8012928:	08012a21 	.word	0x08012a21
 801292c:	08012a21 	.word	0x08012a21
 8012930:	08012a21 	.word	0x08012a21
 8012934:	08012a21 	.word	0x08012a21
 8012938:	08012a21 	.word	0x08012a21
 801293c:	08012a21 	.word	0x08012a21
 8012940:	080129a9 	.word	0x080129a9
 8012944:	08012983 	.word	0x08012983
 8012948:	08012983 	.word	0x08012983
 801294c:	08012983 	.word	0x08012983
 8012950:	080129a9 	.word	0x080129a9
 8012954:	08012a21 	.word	0x08012a21
 8012958:	080129fd 	.word	0x080129fd
      case SNMP_ASN1_TYPE_INTEGER:
        if (varbind->value_len != sizeof (s32_t)) {
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 8012962:	2b04      	cmp	r3, #4
 8012964:	d002      	beq.n	801296c <snmp_varbind_length+0x198>
          return ERR_VAL;
 8012966:	f06f 0305 	mvn.w	r3, #5
 801296a:	e07f      	b.n	8012a6c <snmp_varbind_length+0x298>
        }
        snmp_asn1_enc_s32t_cnt(*((s32_t*) varbind->value), &len->value_value_len);
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8012972:	681a      	ldr	r2, [r3, #0]
 8012974:	683b      	ldr	r3, [r7, #0]
 8012976:	330a      	adds	r3, #10
 8012978:	4619      	mov	r1, r3
 801297a:	4610      	mov	r0, r2
 801297c:	f7fb fa80 	bl	800de80 <snmp_asn1_enc_s32t_cnt>
        break;
 8012980:	e051      	b.n	8012a26 <snmp_varbind_length+0x252>
      case SNMP_ASN1_TYPE_COUNTER:
      case SNMP_ASN1_TYPE_GAUGE:
      case SNMP_ASN1_TYPE_TIMETICKS:
        if (varbind->value_len != sizeof (u32_t)) {
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 8012988:	2b04      	cmp	r3, #4
 801298a:	d002      	beq.n	8012992 <snmp_varbind_length+0x1be>
          return ERR_VAL;
 801298c:	f06f 0305 	mvn.w	r3, #5
 8012990:	e06c      	b.n	8012a6c <snmp_varbind_length+0x298>
        }
        snmp_asn1_enc_u32t_cnt(*((u32_t*) varbind->value), &len->value_value_len);
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8012998:	681a      	ldr	r2, [r3, #0]
 801299a:	683b      	ldr	r3, [r7, #0]
 801299c:	330a      	adds	r3, #10
 801299e:	4619      	mov	r1, r3
 80129a0:	4610      	mov	r0, r2
 80129a2:	f7fb fa1f 	bl	800dde4 <snmp_asn1_enc_u32t_cnt>
        break;
 80129a6:	e03e      	b.n	8012a26 <snmp_varbind_length+0x252>
      case SNMP_ASN1_TYPE_OCTET_STRING:
      case SNMP_ASN1_TYPE_IPADDR:
      case SNMP_ASN1_TYPE_OPAQUE:
        len->value_value_len = varbind->value_len;
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	f8b3 20d6 	ldrh.w	r2, [r3, #214]	@ 0xd6
 80129ae:	683b      	ldr	r3, [r7, #0]
 80129b0:	815a      	strh	r2, [r3, #10]
        break;
 80129b2:	e038      	b.n	8012a26 <snmp_varbind_length+0x252>
      case SNMP_ASN1_TYPE_NULL:
        if (varbind->value_len != 0) {
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d002      	beq.n	80129c4 <snmp_varbind_length+0x1f0>
          return ERR_VAL;
 80129be:	f06f 0305 	mvn.w	r3, #5
 80129c2:	e053      	b.n	8012a6c <snmp_varbind_length+0x298>
        }
        len->value_value_len = 0;
 80129c4:	683b      	ldr	r3, [r7, #0]
 80129c6:	2200      	movs	r2, #0
 80129c8:	815a      	strh	r2, [r3, #10]
        break;
 80129ca:	e02c      	b.n	8012a26 <snmp_varbind_length+0x252>
      case SNMP_ASN1_TYPE_OBJECT_ID:
        if ((varbind->value_len & 0x03) != 0) {
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 80129d2:	f003 0303 	and.w	r3, r3, #3
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d002      	beq.n	80129e0 <snmp_varbind_length+0x20c>
          return ERR_VAL;
 80129da:	f06f 0305 	mvn.w	r3, #5
 80129de:	e045      	b.n	8012a6c <snmp_varbind_length+0x298>
        }
        snmp_asn1_enc_oid_cnt((u32_t*) varbind->value, varbind->value_len >> 2, &len->value_value_len);
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	f8d3 00d8 	ldr.w	r0, [r3, #216]	@ 0xd8
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 80129ec:	089b      	lsrs	r3, r3, #2
 80129ee:	b299      	uxth	r1, r3
 80129f0:	683b      	ldr	r3, [r7, #0]
 80129f2:	330a      	adds	r3, #10
 80129f4:	461a      	mov	r2, r3
 80129f6:	f7fb fa6d 	bl	800ded4 <snmp_asn1_enc_oid_cnt>
        break;
 80129fa:	e014      	b.n	8012a26 <snmp_varbind_length+0x252>
      case SNMP_ASN1_TYPE_COUNTER64:
        if (varbind->value_len != (2 * sizeof (u32_t))) {
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 8012a02:	2b08      	cmp	r3, #8
 8012a04:	d002      	beq.n	8012a0c <snmp_varbind_length+0x238>
          return ERR_VAL;
 8012a06:	f06f 0305 	mvn.w	r3, #5
 8012a0a:	e02f      	b.n	8012a6c <snmp_varbind_length+0x298>
        }
        snmp_asn1_enc_u64t_cnt((u32_t*) varbind->value, &len->value_value_len);
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8012a12:	683b      	ldr	r3, [r7, #0]
 8012a14:	330a      	adds	r3, #10
 8012a16:	4619      	mov	r1, r3
 8012a18:	4610      	mov	r0, r2
 8012a1a:	f7fb fa0e 	bl	800de3a <snmp_asn1_enc_u64t_cnt>
        break;
 8012a1e:	e002      	b.n	8012a26 <snmp_varbind_length+0x252>
      default:
        /* unsupported type */
        return ERR_VAL;
 8012a20:	f06f 0305 	mvn.w	r3, #5
 8012a24:	e022      	b.n	8012a6c <snmp_varbind_length+0x298>
    }
  }
  snmp_asn1_enc_length_cnt(len->value_value_len, &len->value_len_len);
 8012a26:	683b      	ldr	r3, [r7, #0]
 8012a28:	895a      	ldrh	r2, [r3, #10]
 8012a2a:	683b      	ldr	r3, [r7, #0]
 8012a2c:	3308      	adds	r3, #8
 8012a2e:	4619      	mov	r1, r3
 8012a30:	4610      	mov	r0, r2
 8012a32:	f7fb f9bb 	bl	800ddac <snmp_asn1_enc_length_cnt>

  len->vb_value_len = 1 + len->oid_len_len + len->oid_value_len + 1 + len->value_len_len + len->value_value_len;
 8012a36:	683b      	ldr	r3, [r7, #0]
 8012a38:	791b      	ldrb	r3, [r3, #4]
 8012a3a:	461a      	mov	r2, r3
 8012a3c:	683b      	ldr	r3, [r7, #0]
 8012a3e:	88db      	ldrh	r3, [r3, #6]
 8012a40:	4413      	add	r3, r2
 8012a42:	b29b      	uxth	r3, r3
 8012a44:	683a      	ldr	r2, [r7, #0]
 8012a46:	7a12      	ldrb	r2, [r2, #8]
 8012a48:	4413      	add	r3, r2
 8012a4a:	b29a      	uxth	r2, r3
 8012a4c:	683b      	ldr	r3, [r7, #0]
 8012a4e:	895b      	ldrh	r3, [r3, #10]
 8012a50:	4413      	add	r3, r2
 8012a52:	b29b      	uxth	r3, r3
 8012a54:	3302      	adds	r3, #2
 8012a56:	b29a      	uxth	r2, r3
 8012a58:	683b      	ldr	r3, [r7, #0]
 8012a5a:	805a      	strh	r2, [r3, #2]
  snmp_asn1_enc_length_cnt(len->vb_value_len, &len->vb_len_len);
 8012a5c:	683b      	ldr	r3, [r7, #0]
 8012a5e:	885b      	ldrh	r3, [r3, #2]
 8012a60:	683a      	ldr	r2, [r7, #0]
 8012a62:	4611      	mov	r1, r2
 8012a64:	4618      	mov	r0, r3
 8012a66:	f7fb f9a1 	bl	800ddac <snmp_asn1_enc_length_cnt>

  return ERR_OK;
 8012a6a:	2300      	movs	r3, #0
}
 8012a6c:	4618      	mov	r0, r3
 8012a6e:	3708      	adds	r7, #8
 8012a70:	46bd      	mov	sp, r7
 8012a72:	bd80      	pop	{r7, pc}

08012a74 <snmp_append_outbound_varbind>:

#define OVB_BUILD_EXEC(code) BUILD_EXEC(code, ERR_ARG)

err_t
snmp_append_outbound_varbind(struct snmp_pbuf_stream *pbuf_stream, struct snmp_varbind* varbind)
{
 8012a74:	b580      	push	{r7, lr}
 8012a76:	b088      	sub	sp, #32
 8012a78:	af00      	add	r7, sp, #0
 8012a7a:	6078      	str	r0, [r7, #4]
 8012a7c:	6039      	str	r1, [r7, #0]
  struct snmp_asn1_tlv tlv;
  struct snmp_varbind_len len;
  err_t err;

  err = snmp_varbind_length(varbind, &len);
 8012a7e:	f107 030c 	add.w	r3, r7, #12
 8012a82:	4619      	mov	r1, r3
 8012a84:	6838      	ldr	r0, [r7, #0]
 8012a86:	f7ff fea5 	bl	80127d4 <snmp_varbind_length>
 8012a8a:	4603      	mov	r3, r0
 8012a8c:	77fb      	strb	r3, [r7, #31]

  if (err != ERR_OK) {
 8012a8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d002      	beq.n	8012a9c <snmp_append_outbound_varbind+0x28>
    return err;
 8012a96:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012a9a:	e0f6      	b.n	8012c8a <snmp_append_outbound_varbind+0x216>
  }

  /* check length already before adding first data because in case of GetBulk,
   *  data added so far is returned and therefore no partial data shall be added
   */
  if ((1 + len.vb_len_len + len.vb_value_len) > pbuf_stream->length) {
 8012a9c:	7b3b      	ldrb	r3, [r7, #12]
 8012a9e:	3301      	adds	r3, #1
 8012aa0:	89fa      	ldrh	r2, [r7, #14]
 8012aa2:	4413      	add	r3, r2
 8012aa4:	687a      	ldr	r2, [r7, #4]
 8012aa6:	88d2      	ldrh	r2, [r2, #6]
 8012aa8:	4293      	cmp	r3, r2
 8012aaa:	dd02      	ble.n	8012ab2 <snmp_append_outbound_varbind+0x3e>
    return ERR_BUF;
 8012aac:	f06f 0301 	mvn.w	r3, #1
 8012ab0:	e0eb      	b.n	8012c8a <snmp_append_outbound_varbind+0x216>
  }

  /* 'VarBind' sequence */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_SEQUENCE, len.vb_len_len, len.vb_value_len);
 8012ab2:	2330      	movs	r3, #48	@ 0x30
 8012ab4:	763b      	strb	r3, [r7, #24]
 8012ab6:	2300      	movs	r3, #0
 8012ab8:	767b      	strb	r3, [r7, #25]
 8012aba:	7b3b      	ldrb	r3, [r7, #12]
 8012abc:	76bb      	strb	r3, [r7, #26]
 8012abe:	89fb      	ldrh	r3, [r7, #14]
 8012ac0:	83bb      	strh	r3, [r7, #28]
  OVB_BUILD_EXEC(snmp_ans1_enc_tlv(pbuf_stream, &tlv));
 8012ac2:	f107 0318 	add.w	r3, r7, #24
 8012ac6:	4619      	mov	r1, r3
 8012ac8:	6878      	ldr	r0, [r7, #4]
 8012aca:	f7fa ff83 	bl	800d9d4 <snmp_ans1_enc_tlv>
 8012ace:	4603      	mov	r3, r0
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d002      	beq.n	8012ada <snmp_append_outbound_varbind+0x66>
 8012ad4:	f06f 030f 	mvn.w	r3, #15
 8012ad8:	e0d7      	b.n	8012c8a <snmp_append_outbound_varbind+0x216>

  /* VarBind OID */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_OBJECT_ID, len.oid_len_len, len.oid_value_len);
 8012ada:	2306      	movs	r3, #6
 8012adc:	763b      	strb	r3, [r7, #24]
 8012ade:	2300      	movs	r3, #0
 8012ae0:	767b      	strb	r3, [r7, #25]
 8012ae2:	7c3b      	ldrb	r3, [r7, #16]
 8012ae4:	76bb      	strb	r3, [r7, #26]
 8012ae6:	8a7b      	ldrh	r3, [r7, #18]
 8012ae8:	83bb      	strh	r3, [r7, #28]
  OVB_BUILD_EXEC(snmp_ans1_enc_tlv(pbuf_stream, &tlv));
 8012aea:	f107 0318 	add.w	r3, r7, #24
 8012aee:	4619      	mov	r1, r3
 8012af0:	6878      	ldr	r0, [r7, #4]
 8012af2:	f7fa ff6f 	bl	800d9d4 <snmp_ans1_enc_tlv>
 8012af6:	4603      	mov	r3, r0
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d002      	beq.n	8012b02 <snmp_append_outbound_varbind+0x8e>
 8012afc:	f06f 030f 	mvn.w	r3, #15
 8012b00:	e0c3      	b.n	8012c8a <snmp_append_outbound_varbind+0x216>
  OVB_BUILD_EXEC(snmp_asn1_enc_oid(pbuf_stream, varbind->oid.id, varbind->oid.len));
 8012b02:	683b      	ldr	r3, [r7, #0]
 8012b04:	f103 010c 	add.w	r1, r3, #12
 8012b08:	683b      	ldr	r3, [r7, #0]
 8012b0a:	7a1b      	ldrb	r3, [r3, #8]
 8012b0c:	461a      	mov	r2, r3
 8012b0e:	6878      	ldr	r0, [r7, #4]
 8012b10:	f7fb f8da 	bl	800dcc8 <snmp_asn1_enc_oid>
 8012b14:	4603      	mov	r3, r0
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d002      	beq.n	8012b20 <snmp_append_outbound_varbind+0xac>
 8012b1a:	f06f 030f 	mvn.w	r3, #15
 8012b1e:	e0b4      	b.n	8012c8a <snmp_append_outbound_varbind+0x216>

  /* VarBind value */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, varbind->type, len.value_len_len, len.value_value_len);
 8012b20:	683b      	ldr	r3, [r7, #0]
 8012b22:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8012b26:	763b      	strb	r3, [r7, #24]
 8012b28:	2300      	movs	r3, #0
 8012b2a:	767b      	strb	r3, [r7, #25]
 8012b2c:	7d3b      	ldrb	r3, [r7, #20]
 8012b2e:	76bb      	strb	r3, [r7, #26]
 8012b30:	8afb      	ldrh	r3, [r7, #22]
 8012b32:	83bb      	strh	r3, [r7, #28]
  OVB_BUILD_EXEC(snmp_ans1_enc_tlv(pbuf_stream, &tlv));
 8012b34:	f107 0318 	add.w	r3, r7, #24
 8012b38:	4619      	mov	r1, r3
 8012b3a:	6878      	ldr	r0, [r7, #4]
 8012b3c:	f7fa ff4a 	bl	800d9d4 <snmp_ans1_enc_tlv>
 8012b40:	4603      	mov	r3, r0
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d002      	beq.n	8012b4c <snmp_append_outbound_varbind+0xd8>
 8012b46:	f06f 030f 	mvn.w	r3, #15
 8012b4a:	e09e      	b.n	8012c8a <snmp_append_outbound_varbind+0x216>

  if (len.value_value_len > 0) {
 8012b4c:	8afb      	ldrh	r3, [r7, #22]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	f000 809a 	beq.w	8012c88 <snmp_append_outbound_varbind+0x214>
    if (varbind->value_len & SNMP_GET_VALUE_RAW_DATA) {
 8012b54:	683b      	ldr	r3, [r7, #0]
 8012b56:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 8012b5a:	b21b      	sxth	r3, r3
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	da0e      	bge.n	8012b7e <snmp_append_outbound_varbind+0x10a>
      OVB_BUILD_EXEC(snmp_asn1_enc_raw(pbuf_stream, (u8_t*) varbind->value, len.value_value_len));
 8012b60:	683b      	ldr	r3, [r7, #0]
 8012b62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8012b66:	8afa      	ldrh	r2, [r7, #22]
 8012b68:	4619      	mov	r1, r3
 8012b6a:	6878      	ldr	r0, [r7, #4]
 8012b6c:	f7fa ffbd 	bl	800daea <snmp_asn1_enc_raw>
 8012b70:	4603      	mov	r3, r0
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	f000 8088 	beq.w	8012c88 <snmp_append_outbound_varbind+0x214>
 8012b78:	f06f 030f 	mvn.w	r3, #15
 8012b7c:	e085      	b.n	8012c8a <snmp_append_outbound_varbind+0x216>
    } else {
      switch (varbind->type) {
 8012b7e:	683b      	ldr	r3, [r7, #0]
 8012b80:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8012b84:	2b46      	cmp	r3, #70	@ 0x46
 8012b86:	dc70      	bgt.n	8012c6a <snmp_append_outbound_varbind+0x1f6>
 8012b88:	2b40      	cmp	r3, #64	@ 0x40
 8012b8a:	da08      	bge.n	8012b9e <snmp_append_outbound_varbind+0x12a>
 8012b8c:	2b06      	cmp	r3, #6
 8012b8e:	d04c      	beq.n	8012c2a <snmp_append_outbound_varbind+0x1b6>
 8012b90:	2b06      	cmp	r3, #6
 8012b92:	dc6a      	bgt.n	8012c6a <snmp_append_outbound_varbind+0x1f6>
 8012b94:	2b02      	cmp	r3, #2
 8012b96:	d017      	beq.n	8012bc8 <snmp_append_outbound_varbind+0x154>
 8012b98:	2b04      	cmp	r3, #4
 8012b9a:	d033      	beq.n	8012c04 <snmp_append_outbound_varbind+0x190>
 8012b9c:	e065      	b.n	8012c6a <snmp_append_outbound_varbind+0x1f6>
 8012b9e:	3b40      	subs	r3, #64	@ 0x40
 8012ba0:	2b06      	cmp	r3, #6
 8012ba2:	d862      	bhi.n	8012c6a <snmp_append_outbound_varbind+0x1f6>
 8012ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8012bac <snmp_append_outbound_varbind+0x138>)
 8012ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012baa:	bf00      	nop
 8012bac:	08012c05 	.word	0x08012c05
 8012bb0:	08012be7 	.word	0x08012be7
 8012bb4:	08012be7 	.word	0x08012be7
 8012bb8:	08012be7 	.word	0x08012be7
 8012bbc:	08012c05 	.word	0x08012c05
 8012bc0:	08012c6b 	.word	0x08012c6b
 8012bc4:	08012c4f 	.word	0x08012c4f
        case SNMP_ASN1_TYPE_INTEGER:
          OVB_BUILD_EXEC(snmp_asn1_enc_s32t(pbuf_stream, len.value_value_len, *((s32_t*) varbind->value)));
 8012bc8:	8af9      	ldrh	r1, [r7, #22]
 8012bca:	683b      	ldr	r3, [r7, #0]
 8012bcc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	461a      	mov	r2, r3
 8012bd4:	6878      	ldr	r0, [r7, #4]
 8012bd6:	f7fb f848 	bl	800dc6a <snmp_asn1_enc_s32t>
 8012bda:	4603      	mov	r3, r0
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d04c      	beq.n	8012c7a <snmp_append_outbound_varbind+0x206>
 8012be0:	f06f 030f 	mvn.w	r3, #15
 8012be4:	e051      	b.n	8012c8a <snmp_append_outbound_varbind+0x216>
          break;
        case SNMP_ASN1_TYPE_COUNTER:
        case SNMP_ASN1_TYPE_GAUGE:
        case SNMP_ASN1_TYPE_TIMETICKS:
          OVB_BUILD_EXEC(snmp_asn1_enc_u32t(pbuf_stream, len.value_value_len, *((u32_t*) varbind->value)));
 8012be6:	8af9      	ldrh	r1, [r7, #22]
 8012be8:	683b      	ldr	r3, [r7, #0]
 8012bea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	461a      	mov	r2, r3
 8012bf2:	6878      	ldr	r0, [r7, #4]
 8012bf4:	f7fa ff91 	bl	800db1a <snmp_asn1_enc_u32t>
 8012bf8:	4603      	mov	r3, r0
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d03f      	beq.n	8012c7e <snmp_append_outbound_varbind+0x20a>
 8012bfe:	f06f 030f 	mvn.w	r3, #15
 8012c02:	e042      	b.n	8012c8a <snmp_append_outbound_varbind+0x216>
          break;
        case SNMP_ASN1_TYPE_OCTET_STRING:
        case SNMP_ASN1_TYPE_IPADDR:
        case SNMP_ASN1_TYPE_OPAQUE:
          OVB_BUILD_EXEC(snmp_asn1_enc_raw(pbuf_stream, (u8_t*) varbind->value, len.value_value_len));
 8012c04:	683b      	ldr	r3, [r7, #0]
 8012c06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8012c0a:	8afa      	ldrh	r2, [r7, #22]
 8012c0c:	4619      	mov	r1, r3
 8012c0e:	6878      	ldr	r0, [r7, #4]
 8012c10:	f7fa ff6b 	bl	800daea <snmp_asn1_enc_raw>
 8012c14:	4603      	mov	r3, r0
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d002      	beq.n	8012c20 <snmp_append_outbound_varbind+0x1ac>
 8012c1a:	f06f 030f 	mvn.w	r3, #15
 8012c1e:	e034      	b.n	8012c8a <snmp_append_outbound_varbind+0x216>
          len.value_value_len = varbind->value_len;
 8012c20:	683b      	ldr	r3, [r7, #0]
 8012c22:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 8012c26:	82fb      	strh	r3, [r7, #22]
          break;
 8012c28:	e02e      	b.n	8012c88 <snmp_append_outbound_varbind+0x214>
        case SNMP_ASN1_TYPE_OBJECT_ID:
          OVB_BUILD_EXEC(snmp_asn1_enc_oid(pbuf_stream, (u32_t*) varbind->value, varbind->value_len / sizeof (u32_t)));
 8012c2a:	683b      	ldr	r3, [r7, #0]
 8012c2c:	f8d3 10d8 	ldr.w	r1, [r3, #216]	@ 0xd8
 8012c30:	683b      	ldr	r3, [r7, #0]
 8012c32:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 8012c36:	089b      	lsrs	r3, r3, #2
 8012c38:	b29b      	uxth	r3, r3
 8012c3a:	461a      	mov	r2, r3
 8012c3c:	6878      	ldr	r0, [r7, #4]
 8012c3e:	f7fb f843 	bl	800dcc8 <snmp_asn1_enc_oid>
 8012c42:	4603      	mov	r3, r0
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d01c      	beq.n	8012c82 <snmp_append_outbound_varbind+0x20e>
 8012c48:	f06f 030f 	mvn.w	r3, #15
 8012c4c:	e01d      	b.n	8012c8a <snmp_append_outbound_varbind+0x216>
          break;
        case SNMP_ASN1_TYPE_COUNTER64:
          OVB_BUILD_EXEC(snmp_asn1_enc_u64t(pbuf_stream, len.value_value_len, (u32_t*) varbind->value));
 8012c4e:	8af9      	ldrh	r1, [r7, #22]
 8012c50:	683b      	ldr	r3, [r7, #0]
 8012c52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8012c56:	461a      	mov	r2, r3
 8012c58:	6878      	ldr	r0, [r7, #4]
 8012c5a:	f7fa ffa3 	bl	800dba4 <snmp_asn1_enc_u64t>
 8012c5e:	4603      	mov	r3, r0
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d010      	beq.n	8012c86 <snmp_append_outbound_varbind+0x212>
 8012c64:	f06f 030f 	mvn.w	r3, #15
 8012c68:	e00f      	b.n	8012c8a <snmp_append_outbound_varbind+0x216>
          break;
        default:
          LWIP_ASSERT("Unknown variable type", 0);
 8012c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8012c94 <snmp_append_outbound_varbind+0x220>)
 8012c6c:	f240 521e 	movw	r2, #1310	@ 0x51e
 8012c70:	4909      	ldr	r1, [pc, #36]	@ (8012c98 <snmp_append_outbound_varbind+0x224>)
 8012c72:	480a      	ldr	r0, [pc, #40]	@ (8012c9c <snmp_append_outbound_varbind+0x228>)
 8012c74:	f00f f808 	bl	8021c88 <iprintf>
          break;
 8012c78:	e006      	b.n	8012c88 <snmp_append_outbound_varbind+0x214>
          break;
 8012c7a:	bf00      	nop
 8012c7c:	e004      	b.n	8012c88 <snmp_append_outbound_varbind+0x214>
          break;
 8012c7e:	bf00      	nop
 8012c80:	e002      	b.n	8012c88 <snmp_append_outbound_varbind+0x214>
          break;
 8012c82:	bf00      	nop
 8012c84:	e000      	b.n	8012c88 <snmp_append_outbound_varbind+0x214>
          break;
 8012c86:	bf00      	nop
      }
    }
  }

  return ERR_OK;
 8012c88:	2300      	movs	r3, #0
}
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	3720      	adds	r7, #32
 8012c8e:	46bd      	mov	sp, r7
 8012c90:	bd80      	pop	{r7, pc}
 8012c92:	bf00      	nop
 8012c94:	08025648 	.word	0x08025648
 8012c98:	0802571c 	.word	0x0802571c
 8012c9c:	080256a4 	.word	0x080256a4

08012ca0 <snmp_complete_outbound_frame>:

static err_t
snmp_complete_outbound_frame(struct snmp_request *request)
{
 8012ca0:	b590      	push	{r4, r7, lr}
 8012ca2:	b089      	sub	sp, #36	@ 0x24
 8012ca4:	af00      	add	r7, sp, #0
 8012ca6:	6078      	str	r0, [r7, #4]
  struct snmp_asn1_tlv tlv;
  u16_t frame_size;
  u8_t outbound_padding = 0;
 8012ca8:	2300      	movs	r3, #0
 8012caa:	77fb      	strb	r3, [r7, #31]

  if (request->version == SNMP_VERSION_1) {
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	7a9b      	ldrb	r3, [r3, #10]
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d133      	bne.n	8012d1c <snmp_complete_outbound_frame+0x7c>
    if (request->error_status != SNMP_ERR_NOERROR) {
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	69db      	ldr	r3, [r3, #28]
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d044      	beq.n	8012d46 <snmp_complete_outbound_frame+0xa6>
      /* map v2c error codes to v1 compliant error code (according to RFC 2089) */
      switch (request->error_status) {
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	69db      	ldr	r3, [r3, #28]
 8012cc0:	2b12      	cmp	r3, #18
 8012cc2:	dc18      	bgt.n	8012cf6 <snmp_complete_outbound_frame+0x56>
 8012cc4:	2b06      	cmp	r3, #6
 8012cc6:	db25      	blt.n	8012d14 <snmp_complete_outbound_frame+0x74>
 8012cc8:	461a      	mov	r2, r3
 8012cca:	2301      	movs	r3, #1
 8012ccc:	fa03 f202 	lsl.w	r2, r3, r2
 8012cd0:	4b9c      	ldr	r3, [pc, #624]	@ (8012f44 <snmp_complete_outbound_frame+0x2a4>)
 8012cd2:	4013      	ands	r3, r2
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	bf14      	ite	ne
 8012cd8:	2301      	movne	r3, #1
 8012cda:	2300      	moveq	r3, #0
 8012cdc:	b2db      	uxtb	r3, r3
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d114      	bne.n	8012d0c <snmp_complete_outbound_frame+0x6c>
 8012ce2:	f402 53bc 	and.w	r3, r2, #6016	@ 0x1780
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	bf14      	ite	ne
 8012cea:	2301      	movne	r3, #1
 8012cec:	2300      	moveq	r3, #0
 8012cee:	b2db      	uxtb	r3, r3
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d107      	bne.n	8012d04 <snmp_complete_outbound_frame+0x64>
 8012cf4:	e00e      	b.n	8012d14 <snmp_complete_outbound_frame+0x74>
 8012cf6:	3bf0      	subs	r3, #240	@ 0xf0
 8012cf8:	2b02      	cmp	r3, #2
 8012cfa:	d80b      	bhi.n	8012d14 <snmp_complete_outbound_frame+0x74>
         * (during processing of frame we already stored them in error_status field, 
         * so no need to check all varbinds here for those exceptions as suggested by RFC) */
        case SNMP_ERR_NOSUCHINSTANCE:
        case SNMP_ERR_NOSUCHOBJECT:
        case SNMP_ERR_ENDOFMIBVIEW:
          request->error_status = SNMP_ERR_NOSUCHNAME;
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	2202      	movs	r2, #2
 8012d00:	61da      	str	r2, [r3, #28]
          break;
 8012d02:	e020      	b.n	8012d46 <snmp_complete_outbound_frame+0xa6>
        case SNMP_ERR_WRONGVALUE:
        case SNMP_ERR_WRONGENCODING:
        case SNMP_ERR_WRONGTYPE:
        case SNMP_ERR_WRONGLENGTH:
        case SNMP_ERR_INCONSISTENTVALUE:
          request->error_status = SNMP_ERR_BADVALUE;
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	2203      	movs	r2, #3
 8012d08:	61da      	str	r2, [r3, #28]
          break;
 8012d0a:	e01c      	b.n	8012d46 <snmp_complete_outbound_frame+0xa6>
        case SNMP_ERR_NOACCESS:
        case SNMP_ERR_NOTWRITABLE:
        case SNMP_ERR_NOCREATION:
        case SNMP_ERR_INCONSISTENTNAME:
        case SNMP_ERR_AUTHORIZATIONERROR:
          request->error_status = SNMP_ERR_NOSUCHNAME;
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	2202      	movs	r2, #2
 8012d10:	61da      	str	r2, [r3, #28]
          break;
 8012d12:	e018      	b.n	8012d46 <snmp_complete_outbound_frame+0xa6>
        case SNMP_ERR_RESOURCEUNAVAILABLE:
        case SNMP_ERR_COMMITFAILED:
        case SNMP_ERR_UNDOFAILED:
        default:
          request->error_status = SNMP_ERR_GENERROR;
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	2205      	movs	r2, #5
 8012d18:	61da      	str	r2, [r3, #28]
          break;
 8012d1a:	e014      	b.n	8012d46 <snmp_complete_outbound_frame+0xa6>
       }
    }
  } else {
    if (request->request_type == SNMP_ASN1_CONTEXT_PDU_SET_REQ) {
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	7d9b      	ldrb	r3, [r3, #22]
 8012d20:	2b03      	cmp	r3, #3
 8012d22:	d109      	bne.n	8012d38 <snmp_complete_outbound_frame+0x98>
      /* map error codes to according to RFC 1905 (4.2.5.  The SetRequest-PDU) return 'NotWritable' for unknown OIDs) */
      switch (request->error_status) {
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	69db      	ldr	r3, [r3, #28]
 8012d28:	3bf0      	subs	r3, #240	@ 0xf0
 8012d2a:	2b02      	cmp	r3, #2
 8012d2c:	d803      	bhi.n	8012d36 <snmp_complete_outbound_frame+0x96>
        case SNMP_ERR_NOSUCHINSTANCE:
        case SNMP_ERR_NOSUCHOBJECT:
        case SNMP_ERR_ENDOFMIBVIEW:
          request->error_status = SNMP_ERR_NOTWRITABLE;
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	2211      	movs	r2, #17
 8012d32:	61da      	str	r2, [r3, #28]
          break;
 8012d34:	e000      	b.n	8012d38 <snmp_complete_outbound_frame+0x98>
        default:
          break;
 8012d36:	bf00      	nop
      }
    }

    if (request->error_status >= SNMP_VARBIND_EXCEPTION_OFFSET) {
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	69db      	ldr	r3, [r3, #28]
 8012d3c:	2bef      	cmp	r3, #239	@ 0xef
 8012d3e:	dd02      	ble.n	8012d46 <snmp_complete_outbound_frame+0xa6>
      /* should never occur because v2 frames store exceptions directly inside varbinds and not as frame error_status */
      LWIP_DEBUGF(SNMP_DEBUG, ("snmp_complete_outbound_frame() > Found v2 request with varbind exception code stored as error status!\n"));
      return ERR_ARG;
 8012d40:	f06f 030f 	mvn.w	r3, #15
 8012d44:	e187      	b.n	8013056 <snmp_complete_outbound_frame+0x3b6>
    }
  }

  if ((request->error_status != SNMP_ERR_NOERROR) || (request->request_type == SNMP_ASN1_CONTEXT_PDU_SET_REQ)) {
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	69db      	ldr	r3, [r3, #28]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d103      	bne.n	8012d56 <snmp_complete_outbound_frame+0xb6>
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	7d9b      	ldrb	r3, [r3, #22]
 8012d52:	2b03      	cmp	r3, #3
 8012d54:	d131      	bne.n	8012dba <snmp_complete_outbound_frame+0x11a>
    /* all inbound vars are returned in response without any modification for error responses and successful set requests*/
    struct snmp_pbuf_stream inbound_stream;
    OF_BUILD_EXEC( snmp_pbuf_stream_init(&inbound_stream, request->inbound_pbuf, request->inbound_varbind_offset, request->inbound_varbind_len) );
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8012d62:	f107 000c 	add.w	r0, r7, #12
 8012d66:	f000 fbd5 	bl	8013514 <snmp_pbuf_stream_init>
 8012d6a:	4603      	mov	r3, r0
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d002      	beq.n	8012d76 <snmp_complete_outbound_frame+0xd6>
 8012d70:	f06f 030f 	mvn.w	r3, #15
 8012d74:	e16f      	b.n	8013056 <snmp_complete_outbound_frame+0x3b6>
    OF_BUILD_EXEC( snmp_pbuf_stream_init(&(request->outbound_pbuf_stream), request->outbound_pbuf, request->outbound_varbind_offset, request->outbound_pbuf->tot_len - request->outbound_varbind_offset) );
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	f8b3 4056 	ldrh.w	r4, [r3, #86]	@ 0x56
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012d8a:	891a      	ldrh	r2, [r3, #8]
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8012d92:	1ad3      	subs	r3, r2, r3
 8012d94:	b29b      	uxth	r3, r3
 8012d96:	4622      	mov	r2, r4
 8012d98:	f000 fbbc 	bl	8013514 <snmp_pbuf_stream_init>
 8012d9c:	4603      	mov	r3, r0
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d002      	beq.n	8012da8 <snmp_complete_outbound_frame+0x108>
 8012da2:	f06f 030f 	mvn.w	r3, #15
 8012da6:	e156      	b.n	8013056 <snmp_complete_outbound_frame+0x3b6>
    snmp_pbuf_stream_writeto(&inbound_stream, &(request->outbound_pbuf_stream), 0);
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8012dae:	f107 030c 	add.w	r3, r7, #12
 8012db2:	2200      	movs	r2, #0
 8012db4:	4618      	mov	r0, r3
 8012db6:	f000 fc33 	bl	8013620 <snmp_pbuf_stream_writeto>
  }

  frame_size = request->outbound_pbuf_stream.offset;
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8012dc0:	83bb      	strh	r3, [r7, #28]
    }
  }
#endif

  /* complete missing length in 'Message' sequence ; 'Message' tlv is located at the beginning (offset 0) */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_SEQUENCE, 3, frame_size + outbound_padding - 1 - 3); /* - type - length_len(fixed, see snmp_prepare_outbound_frame()) */
 8012dc2:	2330      	movs	r3, #48	@ 0x30
 8012dc4:	753b      	strb	r3, [r7, #20]
 8012dc6:	2300      	movs	r3, #0
 8012dc8:	757b      	strb	r3, [r7, #21]
 8012dca:	2303      	movs	r3, #3
 8012dcc:	75bb      	strb	r3, [r7, #22]
 8012dce:	7ffb      	ldrb	r3, [r7, #31]
 8012dd0:	b29a      	uxth	r2, r3
 8012dd2:	8bbb      	ldrh	r3, [r7, #28]
 8012dd4:	4413      	add	r3, r2
 8012dd6:	b29b      	uxth	r3, r3
 8012dd8:	3b04      	subs	r3, #4
 8012dda:	b29b      	uxth	r3, r3
 8012ddc:	833b      	strh	r3, [r7, #24]
  OF_BUILD_EXEC( snmp_pbuf_stream_init(&(request->outbound_pbuf_stream), request->outbound_pbuf, 0, request->outbound_pbuf->tot_len) );
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012dec:	891b      	ldrh	r3, [r3, #8]
 8012dee:	2200      	movs	r2, #0
 8012df0:	f000 fb90 	bl	8013514 <snmp_pbuf_stream_init>
 8012df4:	4603      	mov	r3, r0
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d002      	beq.n	8012e00 <snmp_complete_outbound_frame+0x160>
 8012dfa:	f06f 030f 	mvn.w	r3, #15
 8012dfe:	e12a      	b.n	8013056 <snmp_complete_outbound_frame+0x3b6>
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(&(request->outbound_pbuf_stream), &tlv) );
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	3348      	adds	r3, #72	@ 0x48
 8012e04:	f107 0214 	add.w	r2, r7, #20
 8012e08:	4611      	mov	r1, r2
 8012e0a:	4618      	mov	r0, r3
 8012e0c:	f7fa fde2 	bl	800d9d4 <snmp_ans1_enc_tlv>
 8012e10:	4603      	mov	r3, r0
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d002      	beq.n	8012e1c <snmp_complete_outbound_frame+0x17c>
 8012e16:	f06f 030f 	mvn.w	r3, #15
 8012e1a:	e11c      	b.n	8013056 <snmp_complete_outbound_frame+0x3b6>
    OF_BUILD_EXEC(snmp_ans1_enc_tlv(&(request->outbound_pbuf_stream), &tlv));
  }
#endif

  /* complete missing length in 'PDU' sequence */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, (SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTENTTYPE_CONSTRUCTED | SNMP_ASN1_CONTEXT_PDU_GET_RESP), 3,
 8012e1c:	23a2      	movs	r3, #162	@ 0xa2
 8012e1e:	753b      	strb	r3, [r7, #20]
 8012e20:	2300      	movs	r3, #0
 8012e22:	757b      	strb	r3, [r7, #21]
 8012e24:	2303      	movs	r3, #3
 8012e26:	75bb      	strb	r3, [r7, #22]
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012e2e:	8bba      	ldrh	r2, [r7, #28]
 8012e30:	1ad3      	subs	r3, r2, r3
 8012e32:	b29b      	uxth	r3, r3
 8012e34:	3b04      	subs	r3, #4
 8012e36:	b29b      	uxth	r3, r3
 8012e38:	833b      	strh	r3, [r7, #24]
      frame_size - request->outbound_pdu_offset - 1 - 3); /* - type - length_len(fixed, see snmp_prepare_outbound_frame()) */
  OF_BUILD_EXEC( snmp_pbuf_stream_seek_abs(&(request->outbound_pbuf_stream), request->outbound_pdu_offset) );
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012e46:	4619      	mov	r1, r3
 8012e48:	4610      	mov	r0, r2
 8012e4a:	f000 fc80 	bl	801374e <snmp_pbuf_stream_seek_abs>
 8012e4e:	4603      	mov	r3, r0
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d002      	beq.n	8012e5a <snmp_complete_outbound_frame+0x1ba>
 8012e54:	f06f 030f 	mvn.w	r3, #15
 8012e58:	e0fd      	b.n	8013056 <snmp_complete_outbound_frame+0x3b6>
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(&(request->outbound_pbuf_stream), &tlv) );
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	3348      	adds	r3, #72	@ 0x48
 8012e5e:	f107 0214 	add.w	r2, r7, #20
 8012e62:	4611      	mov	r1, r2
 8012e64:	4618      	mov	r0, r3
 8012e66:	f7fa fdb5 	bl	800d9d4 <snmp_ans1_enc_tlv>
 8012e6a:	4603      	mov	r3, r0
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d002      	beq.n	8012e76 <snmp_complete_outbound_frame+0x1d6>
 8012e70:	f06f 030f 	mvn.w	r3, #15
 8012e74:	e0ef      	b.n	8013056 <snmp_complete_outbound_frame+0x3b6>

  /* process and encode final error status */
  if (request->error_status != 0) {
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	69db      	ldr	r3, [r3, #28]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d066      	beq.n	8012f4c <snmp_complete_outbound_frame+0x2ac>
    u16_t len;
    snmp_asn1_enc_s32t_cnt(request->error_status, &len);
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	69db      	ldr	r3, [r3, #28]
 8012e82:	f107 020a 	add.w	r2, r7, #10
 8012e86:	4611      	mov	r1, r2
 8012e88:	4618      	mov	r0, r3
 8012e8a:	f7fa fff9 	bl	800de80 <snmp_asn1_enc_s32t_cnt>
    if (len != 1) {
 8012e8e:	897b      	ldrh	r3, [r7, #10]
 8012e90:	2b01      	cmp	r3, #1
 8012e92:	d002      	beq.n	8012e9a <snmp_complete_outbound_frame+0x1fa>
      /* error, we only reserved one byte for it */
      return ERR_ARG;
 8012e94:	f06f 030f 	mvn.w	r3, #15
 8012e98:	e0dd      	b.n	8013056 <snmp_complete_outbound_frame+0x3b6>
    }
    OF_BUILD_EXEC( snmp_pbuf_stream_seek_abs(&(request->outbound_pbuf_stream), request->outbound_error_status_offset) );
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8012ea6:	4619      	mov	r1, r3
 8012ea8:	4610      	mov	r0, r2
 8012eaa:	f000 fc50 	bl	801374e <snmp_pbuf_stream_seek_abs>
 8012eae:	4603      	mov	r3, r0
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d002      	beq.n	8012eba <snmp_complete_outbound_frame+0x21a>
 8012eb4:	f06f 030f 	mvn.w	r3, #15
 8012eb8:	e0cd      	b.n	8013056 <snmp_complete_outbound_frame+0x3b6>
    OF_BUILD_EXEC( snmp_asn1_enc_s32t(&(request->outbound_pbuf_stream), len, request->error_status) );
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8012ec0:	8979      	ldrh	r1, [r7, #10]
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	69db      	ldr	r3, [r3, #28]
 8012ec6:	461a      	mov	r2, r3
 8012ec8:	f7fa fecf 	bl	800dc6a <snmp_asn1_enc_s32t>
 8012ecc:	4603      	mov	r3, r0
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d002      	beq.n	8012ed8 <snmp_complete_outbound_frame+0x238>
 8012ed2:	f06f 030f 	mvn.w	r3, #15
 8012ed6:	e0be      	b.n	8013056 <snmp_complete_outbound_frame+0x3b6>

    /* for compatibility to v1, log statistics; in v2 (RFC 1907) these statistics are obsoleted */
    switch (request->error_status) {
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	69db      	ldr	r3, [r3, #28]
 8012edc:	2b03      	cmp	r3, #3
 8012ede:	d012      	beq.n	8012f06 <snmp_complete_outbound_frame+0x266>
 8012ee0:	2b03      	cmp	r3, #3
 8012ee2:	dc16      	bgt.n	8012f12 <snmp_complete_outbound_frame+0x272>
 8012ee4:	2b01      	cmp	r3, #1
 8012ee6:	d002      	beq.n	8012eee <snmp_complete_outbound_frame+0x24e>
 8012ee8:	2b02      	cmp	r3, #2
 8012eea:	d006      	beq.n	8012efa <snmp_complete_outbound_frame+0x25a>
 8012eec:	e011      	b.n	8012f12 <snmp_complete_outbound_frame+0x272>
      case SNMP_ERR_TOOBIG:
        snmp_stats.outtoobigs++;
 8012eee:	4b16      	ldr	r3, [pc, #88]	@ (8012f48 <snmp_complete_outbound_frame+0x2a8>)
 8012ef0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012ef2:	3301      	adds	r3, #1
 8012ef4:	4a14      	ldr	r2, [pc, #80]	@ (8012f48 <snmp_complete_outbound_frame+0x2a8>)
 8012ef6:	6493      	str	r3, [r2, #72]	@ 0x48
        break;
 8012ef8:	e011      	b.n	8012f1e <snmp_complete_outbound_frame+0x27e>
      case SNMP_ERR_NOSUCHNAME:
        snmp_stats.outnosuchnames++;
 8012efa:	4b13      	ldr	r3, [pc, #76]	@ (8012f48 <snmp_complete_outbound_frame+0x2a8>)
 8012efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012efe:	3301      	adds	r3, #1
 8012f00:	4a11      	ldr	r2, [pc, #68]	@ (8012f48 <snmp_complete_outbound_frame+0x2a8>)
 8012f02:	64d3      	str	r3, [r2, #76]	@ 0x4c
        break;
 8012f04:	e00b      	b.n	8012f1e <snmp_complete_outbound_frame+0x27e>
      case SNMP_ERR_BADVALUE:
        snmp_stats.outbadvalues++;
 8012f06:	4b10      	ldr	r3, [pc, #64]	@ (8012f48 <snmp_complete_outbound_frame+0x2a8>)
 8012f08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012f0a:	3301      	adds	r3, #1
 8012f0c:	4a0e      	ldr	r2, [pc, #56]	@ (8012f48 <snmp_complete_outbound_frame+0x2a8>)
 8012f0e:	6513      	str	r3, [r2, #80]	@ 0x50
        break;
 8012f10:	e005      	b.n	8012f1e <snmp_complete_outbound_frame+0x27e>
      case SNMP_ERR_GENERROR:
      default:
        snmp_stats.outgenerrs++;
 8012f12:	4b0d      	ldr	r3, [pc, #52]	@ (8012f48 <snmp_complete_outbound_frame+0x2a8>)
 8012f14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012f16:	3301      	adds	r3, #1
 8012f18:	4a0b      	ldr	r2, [pc, #44]	@ (8012f48 <snmp_complete_outbound_frame+0x2a8>)
 8012f1a:	6553      	str	r3, [r2, #84]	@ 0x54
        break;
 8012f1c:	bf00      	nop
    }

    if (request->error_status == SNMP_ERR_TOOBIG) {
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	69db      	ldr	r3, [r3, #28]
 8012f22:	2b01      	cmp	r3, #1
 8012f24:	d103      	bne.n	8012f2e <snmp_complete_outbound_frame+0x28e>
      request->error_index = 0; /* defined by RFC 1157 */
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	2200      	movs	r2, #0
 8012f2a:	621a      	str	r2, [r3, #32]
 8012f2c:	e021      	b.n	8012f72 <snmp_complete_outbound_frame+0x2d2>
    } else if (request->error_index == 0) {
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	6a1b      	ldr	r3, [r3, #32]
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d11d      	bne.n	8012f72 <snmp_complete_outbound_frame+0x2d2>
      /* set index to varbind where error occured (if not already set before, e.g. during GetBulk processing) */
      request->error_index = request->inbound_varbind_enumerator.varbind_count;
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012f3a:	461a      	mov	r2, r3
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	621a      	str	r2, [r3, #32]
 8012f40:	e017      	b.n	8012f72 <snmp_complete_outbound_frame+0x2d2>
 8012f42:	bf00      	nop
 8012f44:	00070840 	.word	0x00070840
 8012f48:	200087e8 	.word	0x200087e8
    }
  } else {
    if (request->request_type == SNMP_ASN1_CONTEXT_PDU_SET_REQ) {
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	7d9b      	ldrb	r3, [r3, #22]
 8012f50:	2b03      	cmp	r3, #3
 8012f52:	d107      	bne.n	8012f64 <snmp_complete_outbound_frame+0x2c4>
      snmp_stats.intotalsetvars += request->inbound_varbind_enumerator.varbind_count;
 8012f54:	4b42      	ldr	r3, [pc, #264]	@ (8013060 <snmp_complete_outbound_frame+0x3c0>)
 8012f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012f58:	687a      	ldr	r2, [r7, #4]
 8012f5a:	8f12      	ldrh	r2, [r2, #56]	@ 0x38
 8012f5c:	4413      	add	r3, r2
 8012f5e:	4a40      	ldr	r2, [pc, #256]	@ (8013060 <snmp_complete_outbound_frame+0x3c0>)
 8012f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8012f62:	e006      	b.n	8012f72 <snmp_complete_outbound_frame+0x2d2>
    } else {
      snmp_stats.intotalreqvars += request->inbound_varbind_enumerator.varbind_count;
 8012f64:	4b3e      	ldr	r3, [pc, #248]	@ (8013060 <snmp_complete_outbound_frame+0x3c0>)
 8012f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f68:	687a      	ldr	r2, [r7, #4]
 8012f6a:	8f12      	ldrh	r2, [r2, #56]	@ 0x38
 8012f6c:	4413      	add	r3, r2
 8012f6e:	4a3c      	ldr	r2, [pc, #240]	@ (8013060 <snmp_complete_outbound_frame+0x3c0>)
 8012f70:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }
  }

  /* encode final error index*/
  if (request->error_index != 0) {
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	6a1b      	ldr	r3, [r3, #32]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d02c      	beq.n	8012fd4 <snmp_complete_outbound_frame+0x334>
    u16_t len;
    snmp_asn1_enc_s32t_cnt(request->error_index, &len);
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	6a1b      	ldr	r3, [r3, #32]
 8012f7e:	f107 0208 	add.w	r2, r7, #8
 8012f82:	4611      	mov	r1, r2
 8012f84:	4618      	mov	r0, r3
 8012f86:	f7fa ff7b 	bl	800de80 <snmp_asn1_enc_s32t_cnt>
    if (len != 1) {
 8012f8a:	893b      	ldrh	r3, [r7, #8]
 8012f8c:	2b01      	cmp	r3, #1
 8012f8e:	d002      	beq.n	8012f96 <snmp_complete_outbound_frame+0x2f6>
      /* error, we only reserved one byte for it */
      return ERR_VAL;
 8012f90:	f06f 0305 	mvn.w	r3, #5
 8012f94:	e05f      	b.n	8013056 <snmp_complete_outbound_frame+0x3b6>
    }
    OF_BUILD_EXEC( snmp_pbuf_stream_seek_abs(&(request->outbound_pbuf_stream), request->outbound_error_index_offset) );
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8012fa2:	4619      	mov	r1, r3
 8012fa4:	4610      	mov	r0, r2
 8012fa6:	f000 fbd2 	bl	801374e <snmp_pbuf_stream_seek_abs>
 8012faa:	4603      	mov	r3, r0
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d002      	beq.n	8012fb6 <snmp_complete_outbound_frame+0x316>
 8012fb0:	f06f 030f 	mvn.w	r3, #15
 8012fb4:	e04f      	b.n	8013056 <snmp_complete_outbound_frame+0x3b6>
    OF_BUILD_EXEC( snmp_asn1_enc_s32t(&(request->outbound_pbuf_stream), len, request->error_index) );
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8012fbc:	8939      	ldrh	r1, [r7, #8]
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	6a1b      	ldr	r3, [r3, #32]
 8012fc2:	461a      	mov	r2, r3
 8012fc4:	f7fa fe51 	bl	800dc6a <snmp_asn1_enc_s32t>
 8012fc8:	4603      	mov	r3, r0
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d002      	beq.n	8012fd4 <snmp_complete_outbound_frame+0x334>
 8012fce:	f06f 030f 	mvn.w	r3, #15
 8012fd2:	e040      	b.n	8013056 <snmp_complete_outbound_frame+0x3b6>
  }

  /* complete missing length in 'VarBindList' sequence ; 'VarBindList' tlv is located directly before varbind offset */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_SEQUENCE, 3, frame_size - request->outbound_varbind_offset);
 8012fd4:	2330      	movs	r3, #48	@ 0x30
 8012fd6:	753b      	strb	r3, [r7, #20]
 8012fd8:	2300      	movs	r3, #0
 8012fda:	757b      	strb	r3, [r7, #21]
 8012fdc:	2303      	movs	r3, #3
 8012fde:	75bb      	strb	r3, [r7, #22]
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8012fe6:	8bba      	ldrh	r2, [r7, #28]
 8012fe8:	1ad3      	subs	r3, r2, r3
 8012fea:	b29b      	uxth	r3, r3
 8012fec:	833b      	strh	r3, [r7, #24]
  OF_BUILD_EXEC( snmp_pbuf_stream_seek_abs(&(request->outbound_pbuf_stream), request->outbound_varbind_offset - 1 - 3) ); /* - type - length_len(fixed, see snmp_prepare_outbound_frame()) */
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8012ffa:	3b04      	subs	r3, #4
 8012ffc:	4619      	mov	r1, r3
 8012ffe:	4610      	mov	r0, r2
 8013000:	f000 fba5 	bl	801374e <snmp_pbuf_stream_seek_abs>
 8013004:	4603      	mov	r3, r0
 8013006:	2b00      	cmp	r3, #0
 8013008:	d002      	beq.n	8013010 <snmp_complete_outbound_frame+0x370>
 801300a:	f06f 030f 	mvn.w	r3, #15
 801300e:	e022      	b.n	8013056 <snmp_complete_outbound_frame+0x3b6>
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(&(request->outbound_pbuf_stream), &tlv) );
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	3348      	adds	r3, #72	@ 0x48
 8013014:	f107 0214 	add.w	r2, r7, #20
 8013018:	4611      	mov	r1, r2
 801301a:	4618      	mov	r0, r3
 801301c:	f7fa fcda 	bl	800d9d4 <snmp_ans1_enc_tlv>
 8013020:	4603      	mov	r3, r0
 8013022:	2b00      	cmp	r3, #0
 8013024:	d002      	beq.n	801302c <snmp_complete_outbound_frame+0x38c>
 8013026:	f06f 030f 	mvn.w	r3, #15
 801302a:	e014      	b.n	8013056 <snmp_complete_outbound_frame+0x3b6>
    OF_BUILD_EXEC(snmp_asn1_enc_raw(&request->outbound_pbuf_stream,
                  request->msg_authentication_parameters, SNMP_V3_MAX_AUTH_PARAM_LENGTH));
  }
#endif

  pbuf_realloc(request->outbound_pbuf, frame_size + outbound_padding);
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8013030:	7ffb      	ldrb	r3, [r7, #31]
 8013032:	b29a      	uxth	r2, r3
 8013034:	8bbb      	ldrh	r3, [r7, #28]
 8013036:	4413      	add	r3, r2
 8013038:	b29b      	uxth	r3, r3
 801303a:	4619      	mov	r1, r3
 801303c:	f002 fcbe 	bl	80159bc <pbuf_realloc>

  snmp_stats.outgetresponses++;
 8013040:	4b07      	ldr	r3, [pc, #28]	@ (8013060 <snmp_complete_outbound_frame+0x3c0>)
 8013042:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013044:	3301      	adds	r3, #1
 8013046:	4a06      	ldr	r2, [pc, #24]	@ (8013060 <snmp_complete_outbound_frame+0x3c0>)
 8013048:	6653      	str	r3, [r2, #100]	@ 0x64
  snmp_stats.outpkts++;
 801304a:	4b05      	ldr	r3, [pc, #20]	@ (8013060 <snmp_complete_outbound_frame+0x3c0>)
 801304c:	685b      	ldr	r3, [r3, #4]
 801304e:	3301      	adds	r3, #1
 8013050:	4a03      	ldr	r2, [pc, #12]	@ (8013060 <snmp_complete_outbound_frame+0x3c0>)
 8013052:	6053      	str	r3, [r2, #4]

  return ERR_OK;
 8013054:	2300      	movs	r3, #0
}
 8013056:	4618      	mov	r0, r3
 8013058:	3724      	adds	r7, #36	@ 0x24
 801305a:	46bd      	mov	sp, r7
 801305c:	bd90      	pop	{r4, r7, pc}
 801305e:	bf00      	nop
 8013060:	200087e8 	.word	0x200087e8

08013064 <snmp_execute_write_callbacks>:

static void 
snmp_execute_write_callbacks(struct snmp_request *request)
{
 8013064:	b590      	push	{r4, r7, lr}
 8013066:	b0bd      	sub	sp, #244	@ 0xf4
 8013068:	af00      	add	r7, sp, #0
 801306a:	6078      	str	r0, [r7, #4]
  struct snmp_varbind_enumerator inbound_varbind_enumerator;
  struct snmp_varbind vb;

  snmp_vb_enumerator_init(&inbound_varbind_enumerator, request->inbound_pbuf, request->inbound_varbind_offset, request->inbound_varbind_len);
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8013078:	f107 00e4 	add.w	r0, r7, #228	@ 0xe4
 801307c:	f000 f824 	bl	80130c8 <snmp_vb_enumerator_init>
  vb.value = NULL; /* do NOT decode value (we enumerate outbound buffer here, so all varbinds have values assigned, which we don't need here) */
 8013080:	2300      	movs	r3, #0
 8013082:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

  while (snmp_vb_enumerator_get_next(&inbound_varbind_enumerator, &vb) == SNMP_VB_ENUMERATOR_ERR_OK) {
 8013086:	e00a      	b.n	801309e <snmp_execute_write_callbacks+0x3a>
    snmp_write_callback(vb.oid.id, vb.oid.len, snmp_write_callback_arg);
 8013088:	4b0d      	ldr	r3, [pc, #52]	@ (80130c0 <snmp_execute_write_callbacks+0x5c>)
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	7c39      	ldrb	r1, [r7, #16]
 801308e:	4a0d      	ldr	r2, [pc, #52]	@ (80130c4 <snmp_execute_write_callbacks+0x60>)
 8013090:	6814      	ldr	r4, [r2, #0]
 8013092:	f107 0208 	add.w	r2, r7, #8
 8013096:	f102 000c 	add.w	r0, r2, #12
 801309a:	4622      	mov	r2, r4
 801309c:	4798      	blx	r3
  while (snmp_vb_enumerator_get_next(&inbound_varbind_enumerator, &vb) == SNMP_VB_ENUMERATOR_ERR_OK) {
 801309e:	f107 0208 	add.w	r2, r7, #8
 80130a2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80130a6:	4611      	mov	r1, r2
 80130a8:	4618      	mov	r0, r3
 80130aa:	f000 f825 	bl	80130f8 <snmp_vb_enumerator_get_next>
 80130ae:	4603      	mov	r3, r0
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d0e9      	beq.n	8013088 <snmp_execute_write_callbacks+0x24>
  }
}
 80130b4:	bf00      	nop
 80130b6:	bf00      	nop
 80130b8:	37f4      	adds	r7, #244	@ 0xf4
 80130ba:	46bd      	mov	sp, r7
 80130bc:	bd90      	pop	{r4, r7, pc}
 80130be:	bf00      	nop
 80130c0:	20008888 	.word	0x20008888
 80130c4:	2000888c 	.word	0x2000888c

080130c8 <snmp_vb_enumerator_init>:
/* VarBind enumerator methods */
/* ----------------------------------------------------------------------- */

void
snmp_vb_enumerator_init(struct snmp_varbind_enumerator* enumerator, struct pbuf* p, u16_t offset, u16_t length)
{
 80130c8:	b580      	push	{r7, lr}
 80130ca:	b084      	sub	sp, #16
 80130cc:	af00      	add	r7, sp, #0
 80130ce:	60f8      	str	r0, [r7, #12]
 80130d0:	60b9      	str	r1, [r7, #8]
 80130d2:	4611      	mov	r1, r2
 80130d4:	461a      	mov	r2, r3
 80130d6:	460b      	mov	r3, r1
 80130d8:	80fb      	strh	r3, [r7, #6]
 80130da:	4613      	mov	r3, r2
 80130dc:	80bb      	strh	r3, [r7, #4]
  snmp_pbuf_stream_init(&(enumerator->pbuf_stream), p, offset, length);
 80130de:	68f8      	ldr	r0, [r7, #12]
 80130e0:	88bb      	ldrh	r3, [r7, #4]
 80130e2:	88fa      	ldrh	r2, [r7, #6]
 80130e4:	68b9      	ldr	r1, [r7, #8]
 80130e6:	f000 fa15 	bl	8013514 <snmp_pbuf_stream_init>
  enumerator->varbind_count = 0;
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	2200      	movs	r2, #0
 80130ee:	811a      	strh	r2, [r3, #8]
}
 80130f0:	bf00      	nop
 80130f2:	3710      	adds	r7, #16
 80130f4:	46bd      	mov	sp, r7
 80130f6:	bd80      	pop	{r7, pc}

080130f8 <snmp_vb_enumerator_get_next>:
#define VB_PARSE_EXEC(code)   PARSE_EXEC(code, SNMP_VB_ENUMERATOR_ERR_ASN1ERROR)
#define VB_PARSE_ASSERT(code) PARSE_ASSERT(code, SNMP_VB_ENUMERATOR_ERR_ASN1ERROR)

snmp_vb_enumerator_err_t
snmp_vb_enumerator_get_next(struct snmp_varbind_enumerator* enumerator, struct snmp_varbind* varbind)
{
 80130f8:	b590      	push	{r4, r7, lr}
 80130fa:	b089      	sub	sp, #36	@ 0x24
 80130fc:	af02      	add	r7, sp, #8
 80130fe:	6078      	str	r0, [r7, #4]
 8013100:	6039      	str	r1, [r7, #0]
  struct snmp_asn1_tlv tlv;
  u16_t  varbind_len;
  err_t  err;
  
  if (enumerator->pbuf_stream.length == 0)
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	88db      	ldrh	r3, [r3, #6]
 8013106:	2b00      	cmp	r3, #0
 8013108:	d101      	bne.n	801310e <snmp_vb_enumerator_get_next+0x16>
  {
    return SNMP_VB_ENUMERATOR_ERR_EOVB;
 801310a:	2301      	movs	r3, #1
 801310c:	e1fc      	b.n	8013508 <snmp_vb_enumerator_get_next+0x410>
  }
  enumerator->varbind_count++;
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	891b      	ldrh	r3, [r3, #8]
 8013112:	3301      	adds	r3, #1
 8013114:	b29a      	uxth	r2, r3
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	811a      	strh	r2, [r3, #8]

  /* decode varbind itself (parent container of a varbind) */
  VB_PARSE_EXEC(snmp_asn1_dec_tlv(&(enumerator->pbuf_stream), &tlv));
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	f107 020c 	add.w	r2, r7, #12
 8013120:	4611      	mov	r1, r2
 8013122:	4618      	mov	r0, r3
 8013124:	f7fa ff18 	bl	800df58 <snmp_asn1_dec_tlv>
 8013128:	4603      	mov	r3, r0
 801312a:	2b00      	cmp	r3, #0
 801312c:	d006      	beq.n	801313c <snmp_vb_enumerator_get_next+0x44>
 801312e:	4bb9      	ldr	r3, [pc, #740]	@ (8013414 <snmp_vb_enumerator_get_next+0x31c>)
 8013130:	695b      	ldr	r3, [r3, #20]
 8013132:	3301      	adds	r3, #1
 8013134:	4ab7      	ldr	r2, [pc, #732]	@ (8013414 <snmp_vb_enumerator_get_next+0x31c>)
 8013136:	6153      	str	r3, [r2, #20]
 8013138:	2302      	movs	r3, #2
 801313a:	e1e5      	b.n	8013508 <snmp_vb_enumerator_get_next+0x410>
  VB_PARSE_ASSERT((tlv.type == SNMP_ASN1_TYPE_SEQUENCE) && (tlv.value_len <= enumerator->pbuf_stream.length));
 801313c:	7b3b      	ldrb	r3, [r7, #12]
 801313e:	2b30      	cmp	r3, #48	@ 0x30
 8013140:	d104      	bne.n	801314c <snmp_vb_enumerator_get_next+0x54>
 8013142:	8a3a      	ldrh	r2, [r7, #16]
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	88db      	ldrh	r3, [r3, #6]
 8013148:	429a      	cmp	r2, r3
 801314a:	d906      	bls.n	801315a <snmp_vb_enumerator_get_next+0x62>
 801314c:	4bb1      	ldr	r3, [pc, #708]	@ (8013414 <snmp_vb_enumerator_get_next+0x31c>)
 801314e:	695b      	ldr	r3, [r3, #20]
 8013150:	3301      	adds	r3, #1
 8013152:	4ab0      	ldr	r2, [pc, #704]	@ (8013414 <snmp_vb_enumerator_get_next+0x31c>)
 8013154:	6153      	str	r3, [r2, #20]
 8013156:	2302      	movs	r3, #2
 8013158:	e1d6      	b.n	8013508 <snmp_vb_enumerator_get_next+0x410>
  varbind_len = tlv.value_len;
 801315a:	8a3b      	ldrh	r3, [r7, #16]
 801315c:	82fb      	strh	r3, [r7, #22]

  /* decode varbind name (object id) */
  VB_PARSE_EXEC(snmp_asn1_dec_tlv(&(enumerator->pbuf_stream), &tlv));
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	f107 020c 	add.w	r2, r7, #12
 8013164:	4611      	mov	r1, r2
 8013166:	4618      	mov	r0, r3
 8013168:	f7fa fef6 	bl	800df58 <snmp_asn1_dec_tlv>
 801316c:	4603      	mov	r3, r0
 801316e:	2b00      	cmp	r3, #0
 8013170:	d006      	beq.n	8013180 <snmp_vb_enumerator_get_next+0x88>
 8013172:	4ba8      	ldr	r3, [pc, #672]	@ (8013414 <snmp_vb_enumerator_get_next+0x31c>)
 8013174:	695b      	ldr	r3, [r3, #20]
 8013176:	3301      	adds	r3, #1
 8013178:	4aa6      	ldr	r2, [pc, #664]	@ (8013414 <snmp_vb_enumerator_get_next+0x31c>)
 801317a:	6153      	str	r3, [r2, #20]
 801317c:	2302      	movs	r3, #2
 801317e:	e1c3      	b.n	8013508 <snmp_vb_enumerator_get_next+0x410>
  VB_PARSE_ASSERT((tlv.type == SNMP_ASN1_TYPE_OBJECT_ID) && (SNMP_ASN1_TLV_LENGTH(tlv) < varbind_len) && (tlv.value_len < enumerator->pbuf_stream.length));
 8013180:	7b3b      	ldrb	r3, [r7, #12]
 8013182:	2b06      	cmp	r3, #6
 8013184:	d10d      	bne.n	80131a2 <snmp_vb_enumerator_get_next+0xaa>
 8013186:	7b7b      	ldrb	r3, [r7, #13]
 8013188:	461a      	mov	r2, r3
 801318a:	7bbb      	ldrb	r3, [r7, #14]
 801318c:	4413      	add	r3, r2
 801318e:	8a3a      	ldrh	r2, [r7, #16]
 8013190:	441a      	add	r2, r3
 8013192:	8afb      	ldrh	r3, [r7, #22]
 8013194:	429a      	cmp	r2, r3
 8013196:	da04      	bge.n	80131a2 <snmp_vb_enumerator_get_next+0xaa>
 8013198:	8a3a      	ldrh	r2, [r7, #16]
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	88db      	ldrh	r3, [r3, #6]
 801319e:	429a      	cmp	r2, r3
 80131a0:	d306      	bcc.n	80131b0 <snmp_vb_enumerator_get_next+0xb8>
 80131a2:	4b9c      	ldr	r3, [pc, #624]	@ (8013414 <snmp_vb_enumerator_get_next+0x31c>)
 80131a4:	695b      	ldr	r3, [r3, #20]
 80131a6:	3301      	adds	r3, #1
 80131a8:	4a9a      	ldr	r2, [pc, #616]	@ (8013414 <snmp_vb_enumerator_get_next+0x31c>)
 80131aa:	6153      	str	r3, [r2, #20]
 80131ac:	2302      	movs	r3, #2
 80131ae:	e1ab      	b.n	8013508 <snmp_vb_enumerator_get_next+0x410>
   
  VB_PARSE_EXEC(snmp_asn1_dec_oid(&(enumerator->pbuf_stream), tlv.value_len, varbind->oid.id, &(varbind->oid.len), SNMP_MAX_OBJ_ID_LEN));
 80131b0:	6878      	ldr	r0, [r7, #4]
 80131b2:	8a39      	ldrh	r1, [r7, #16]
 80131b4:	683b      	ldr	r3, [r7, #0]
 80131b6:	f103 020c 	add.w	r2, r3, #12
 80131ba:	683b      	ldr	r3, [r7, #0]
 80131bc:	3308      	adds	r3, #8
 80131be:	2432      	movs	r4, #50	@ 0x32
 80131c0:	9400      	str	r4, [sp, #0]
 80131c2:	f7fb f872 	bl	800e2aa <snmp_asn1_dec_oid>
 80131c6:	4603      	mov	r3, r0
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d006      	beq.n	80131da <snmp_vb_enumerator_get_next+0xe2>
 80131cc:	4b91      	ldr	r3, [pc, #580]	@ (8013414 <snmp_vb_enumerator_get_next+0x31c>)
 80131ce:	695b      	ldr	r3, [r3, #20]
 80131d0:	3301      	adds	r3, #1
 80131d2:	4a90      	ldr	r2, [pc, #576]	@ (8013414 <snmp_vb_enumerator_get_next+0x31c>)
 80131d4:	6153      	str	r3, [r2, #20]
 80131d6:	2302      	movs	r3, #2
 80131d8:	e196      	b.n	8013508 <snmp_vb_enumerator_get_next+0x410>
  varbind_len -= SNMP_ASN1_TLV_LENGTH(tlv);
 80131da:	7b7b      	ldrb	r3, [r7, #13]
 80131dc:	461a      	mov	r2, r3
 80131de:	7bbb      	ldrb	r3, [r7, #14]
 80131e0:	4413      	add	r3, r2
 80131e2:	b29a      	uxth	r2, r3
 80131e4:	8a3b      	ldrh	r3, [r7, #16]
 80131e6:	4413      	add	r3, r2
 80131e8:	b29b      	uxth	r3, r3
 80131ea:	8afa      	ldrh	r2, [r7, #22]
 80131ec:	1ad3      	subs	r3, r2, r3
 80131ee:	82fb      	strh	r3, [r7, #22]

  /* decode varbind value (object id) */
  VB_PARSE_EXEC(snmp_asn1_dec_tlv(&(enumerator->pbuf_stream), &tlv));
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	f107 020c 	add.w	r2, r7, #12
 80131f6:	4611      	mov	r1, r2
 80131f8:	4618      	mov	r0, r3
 80131fa:	f7fa fead 	bl	800df58 <snmp_asn1_dec_tlv>
 80131fe:	4603      	mov	r3, r0
 8013200:	2b00      	cmp	r3, #0
 8013202:	d006      	beq.n	8013212 <snmp_vb_enumerator_get_next+0x11a>
 8013204:	4b83      	ldr	r3, [pc, #524]	@ (8013414 <snmp_vb_enumerator_get_next+0x31c>)
 8013206:	695b      	ldr	r3, [r3, #20]
 8013208:	3301      	adds	r3, #1
 801320a:	4a82      	ldr	r2, [pc, #520]	@ (8013414 <snmp_vb_enumerator_get_next+0x31c>)
 801320c:	6153      	str	r3, [r2, #20]
 801320e:	2302      	movs	r3, #2
 8013210:	e17a      	b.n	8013508 <snmp_vb_enumerator_get_next+0x410>
  VB_PARSE_ASSERT((SNMP_ASN1_TLV_LENGTH(tlv) == varbind_len) && (tlv.value_len <= enumerator->pbuf_stream.length));
 8013212:	7b7b      	ldrb	r3, [r7, #13]
 8013214:	461a      	mov	r2, r3
 8013216:	7bbb      	ldrb	r3, [r7, #14]
 8013218:	4413      	add	r3, r2
 801321a:	8a3a      	ldrh	r2, [r7, #16]
 801321c:	441a      	add	r2, r3
 801321e:	8afb      	ldrh	r3, [r7, #22]
 8013220:	429a      	cmp	r2, r3
 8013222:	d104      	bne.n	801322e <snmp_vb_enumerator_get_next+0x136>
 8013224:	8a3a      	ldrh	r2, [r7, #16]
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	88db      	ldrh	r3, [r3, #6]
 801322a:	429a      	cmp	r2, r3
 801322c:	d906      	bls.n	801323c <snmp_vb_enumerator_get_next+0x144>
 801322e:	4b79      	ldr	r3, [pc, #484]	@ (8013414 <snmp_vb_enumerator_get_next+0x31c>)
 8013230:	695b      	ldr	r3, [r3, #20]
 8013232:	3301      	adds	r3, #1
 8013234:	4a77      	ldr	r2, [pc, #476]	@ (8013414 <snmp_vb_enumerator_get_next+0x31c>)
 8013236:	6153      	str	r3, [r2, #20]
 8013238:	2302      	movs	r3, #2
 801323a:	e165      	b.n	8013508 <snmp_vb_enumerator_get_next+0x410>
  varbind->type = tlv.type;
 801323c:	7b3a      	ldrb	r2, [r7, #12]
 801323e:	683b      	ldr	r3, [r7, #0]
 8013240:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4

  /* shall the value be decoded ? */
  if (varbind->value != NULL) {
 8013244:	683b      	ldr	r3, [r7, #0]
 8013246:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801324a:	2b00      	cmp	r3, #0
 801324c:	f000 814d 	beq.w	80134ea <snmp_vb_enumerator_get_next+0x3f2>
    switch (varbind->type) {
 8013250:	683b      	ldr	r3, [r7, #0]
 8013252:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8013256:	3b02      	subs	r3, #2
 8013258:	2b44      	cmp	r3, #68	@ 0x44
 801325a:	f200 813f 	bhi.w	80134dc <snmp_vb_enumerator_get_next+0x3e4>
 801325e:	a201      	add	r2, pc, #4	@ (adr r2, 8013264 <snmp_vb_enumerator_get_next+0x16c>)
 8013260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013264:	08013379 	.word	0x08013379
 8013268:	080134dd 	.word	0x080134dd
 801326c:	080133d5 	.word	0x080133d5
 8013270:	08013419 	.word	0x08013419
 8013274:	08013423 	.word	0x08013423
 8013278:	080134dd 	.word	0x080134dd
 801327c:	080134dd 	.word	0x080134dd
 8013280:	080134dd 	.word	0x080134dd
 8013284:	080134dd 	.word	0x080134dd
 8013288:	080134dd 	.word	0x080134dd
 801328c:	080134dd 	.word	0x080134dd
 8013290:	080134dd 	.word	0x080134dd
 8013294:	080134dd 	.word	0x080134dd
 8013298:	080134dd 	.word	0x080134dd
 801329c:	080134dd 	.word	0x080134dd
 80132a0:	080134dd 	.word	0x080134dd
 80132a4:	080134dd 	.word	0x080134dd
 80132a8:	080134dd 	.word	0x080134dd
 80132ac:	080134dd 	.word	0x080134dd
 80132b0:	080134dd 	.word	0x080134dd
 80132b4:	080134dd 	.word	0x080134dd
 80132b8:	080134dd 	.word	0x080134dd
 80132bc:	080134dd 	.word	0x080134dd
 80132c0:	080134dd 	.word	0x080134dd
 80132c4:	080134dd 	.word	0x080134dd
 80132c8:	080134dd 	.word	0x080134dd
 80132cc:	080134dd 	.word	0x080134dd
 80132d0:	080134dd 	.word	0x080134dd
 80132d4:	080134dd 	.word	0x080134dd
 80132d8:	080134dd 	.word	0x080134dd
 80132dc:	080134dd 	.word	0x080134dd
 80132e0:	080134dd 	.word	0x080134dd
 80132e4:	080134dd 	.word	0x080134dd
 80132e8:	080134dd 	.word	0x080134dd
 80132ec:	080134dd 	.word	0x080134dd
 80132f0:	080134dd 	.word	0x080134dd
 80132f4:	080134dd 	.word	0x080134dd
 80132f8:	080134dd 	.word	0x080134dd
 80132fc:	080134dd 	.word	0x080134dd
 8013300:	080134dd 	.word	0x080134dd
 8013304:	080134dd 	.word	0x080134dd
 8013308:	080134dd 	.word	0x080134dd
 801330c:	080134dd 	.word	0x080134dd
 8013310:	080134dd 	.word	0x080134dd
 8013314:	080134dd 	.word	0x080134dd
 8013318:	080134dd 	.word	0x080134dd
 801331c:	080134dd 	.word	0x080134dd
 8013320:	080134dd 	.word	0x080134dd
 8013324:	080134dd 	.word	0x080134dd
 8013328:	080134dd 	.word	0x080134dd
 801332c:	080134dd 	.word	0x080134dd
 8013330:	080134dd 	.word	0x080134dd
 8013334:	080134dd 	.word	0x080134dd
 8013338:	080134dd 	.word	0x080134dd
 801333c:	080134dd 	.word	0x080134dd
 8013340:	080134dd 	.word	0x080134dd
 8013344:	080134dd 	.word	0x080134dd
 8013348:	080134dd 	.word	0x080134dd
 801334c:	080134dd 	.word	0x080134dd
 8013350:	080134dd 	.word	0x080134dd
 8013354:	080134dd 	.word	0x080134dd
 8013358:	080134dd 	.word	0x080134dd
 801335c:	08013471 	.word	0x08013471
 8013360:	080133a7 	.word	0x080133a7
 8013364:	080133a7 	.word	0x080133a7
 8013368:	080133a7 	.word	0x080133a7
 801336c:	080133d5 	.word	0x080133d5
 8013370:	080134dd 	.word	0x080134dd
 8013374:	080134af 	.word	0x080134af
      case SNMP_ASN1_TYPE_INTEGER:
        VB_PARSE_EXEC(snmp_asn1_dec_s32t(&(enumerator->pbuf_stream), tlv.value_len, (s32_t*)varbind->value));
 8013378:	6878      	ldr	r0, [r7, #4]
 801337a:	8a39      	ldrh	r1, [r7, #16]
 801337c:	683b      	ldr	r3, [r7, #0]
 801337e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8013382:	461a      	mov	r2, r3
 8013384:	f7fa ff20 	bl	800e1c8 <snmp_asn1_dec_s32t>
 8013388:	4603      	mov	r3, r0
 801338a:	2b00      	cmp	r3, #0
 801338c:	d006      	beq.n	801339c <snmp_vb_enumerator_get_next+0x2a4>
 801338e:	4b21      	ldr	r3, [pc, #132]	@ (8013414 <snmp_vb_enumerator_get_next+0x31c>)
 8013390:	695b      	ldr	r3, [r3, #20]
 8013392:	3301      	adds	r3, #1
 8013394:	4a1f      	ldr	r2, [pc, #124]	@ (8013414 <snmp_vb_enumerator_get_next+0x31c>)
 8013396:	6153      	str	r3, [r2, #20]
 8013398:	2302      	movs	r3, #2
 801339a:	e0b5      	b.n	8013508 <snmp_vb_enumerator_get_next+0x410>
        varbind->value_len = sizeof(s32_t*);
 801339c:	683b      	ldr	r3, [r7, #0]
 801339e:	2204      	movs	r2, #4
 80133a0:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
        break;
 80133a4:	e0af      	b.n	8013506 <snmp_vb_enumerator_get_next+0x40e>
      case SNMP_ASN1_TYPE_COUNTER:
      case SNMP_ASN1_TYPE_GAUGE:
      case SNMP_ASN1_TYPE_TIMETICKS:
        VB_PARSE_EXEC(snmp_asn1_dec_u32t(&(enumerator->pbuf_stream), tlv.value_len, (u32_t*)varbind->value));
 80133a6:	6878      	ldr	r0, [r7, #4]
 80133a8:	8a39      	ldrh	r1, [r7, #16]
 80133aa:	683b      	ldr	r3, [r7, #0]
 80133ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80133b0:	461a      	mov	r2, r3
 80133b2:	f7fa fe50 	bl	800e056 <snmp_asn1_dec_u32t>
 80133b6:	4603      	mov	r3, r0
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d006      	beq.n	80133ca <snmp_vb_enumerator_get_next+0x2d2>
 80133bc:	4b15      	ldr	r3, [pc, #84]	@ (8013414 <snmp_vb_enumerator_get_next+0x31c>)
 80133be:	695b      	ldr	r3, [r3, #20]
 80133c0:	3301      	adds	r3, #1
 80133c2:	4a14      	ldr	r2, [pc, #80]	@ (8013414 <snmp_vb_enumerator_get_next+0x31c>)
 80133c4:	6153      	str	r3, [r2, #20]
 80133c6:	2302      	movs	r3, #2
 80133c8:	e09e      	b.n	8013508 <snmp_vb_enumerator_get_next+0x410>
        varbind->value_len = sizeof(u32_t*);
 80133ca:	683b      	ldr	r3, [r7, #0]
 80133cc:	2204      	movs	r2, #4
 80133ce:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
        break;
 80133d2:	e098      	b.n	8013506 <snmp_vb_enumerator_get_next+0x40e>
      case SNMP_ASN1_TYPE_OCTET_STRING:
      case SNMP_ASN1_TYPE_OPAQUE:
        err = snmp_asn1_dec_raw(&(enumerator->pbuf_stream), tlv.value_len, (u8_t*)varbind->value, &varbind->value_len, SNMP_MAX_VALUE_SIZE);
 80133d4:	6878      	ldr	r0, [r7, #4]
 80133d6:	8a39      	ldrh	r1, [r7, #16]
 80133d8:	683b      	ldr	r3, [r7, #0]
 80133da:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80133de:	683b      	ldr	r3, [r7, #0]
 80133e0:	33d6      	adds	r3, #214	@ 0xd6
 80133e2:	24c8      	movs	r4, #200	@ 0xc8
 80133e4:	9400      	str	r4, [sp, #0]
 80133e6:	f7fb f82e 	bl	800e446 <snmp_asn1_dec_raw>
 80133ea:	4603      	mov	r3, r0
 80133ec:	757b      	strb	r3, [r7, #21]
        if (err == ERR_MEM) {
 80133ee:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80133f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133f6:	d101      	bne.n	80133fc <snmp_vb_enumerator_get_next+0x304>
          return SNMP_VB_ENUMERATOR_ERR_INVALIDLENGTH;
 80133f8:	2303      	movs	r3, #3
 80133fa:	e085      	b.n	8013508 <snmp_vb_enumerator_get_next+0x410>
        }
        VB_PARSE_ASSERT(err == ERR_OK);
 80133fc:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d07d      	beq.n	8013500 <snmp_vb_enumerator_get_next+0x408>
 8013404:	4b03      	ldr	r3, [pc, #12]	@ (8013414 <snmp_vb_enumerator_get_next+0x31c>)
 8013406:	695b      	ldr	r3, [r3, #20]
 8013408:	3301      	adds	r3, #1
 801340a:	4a02      	ldr	r2, [pc, #8]	@ (8013414 <snmp_vb_enumerator_get_next+0x31c>)
 801340c:	6153      	str	r3, [r2, #20]
 801340e:	2302      	movs	r3, #2
 8013410:	e07a      	b.n	8013508 <snmp_vb_enumerator_get_next+0x410>
 8013412:	bf00      	nop
 8013414:	200087e8 	.word	0x200087e8
        break;
      case SNMP_ASN1_TYPE_NULL:
        varbind->value_len = 0;
 8013418:	683b      	ldr	r3, [r7, #0]
 801341a:	2200      	movs	r2, #0
 801341c:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
        break;
 8013420:	e071      	b.n	8013506 <snmp_vb_enumerator_get_next+0x40e>
      case SNMP_ASN1_TYPE_OBJECT_ID:
        /* misuse tlv.length_len as OID_length transporter */
        err = snmp_asn1_dec_oid(&(enumerator->pbuf_stream), tlv.value_len, (u32_t*)varbind->value, &tlv.length_len, SNMP_MAX_OBJ_ID_LEN);
 8013422:	6878      	ldr	r0, [r7, #4]
 8013424:	8a39      	ldrh	r1, [r7, #16]
 8013426:	683b      	ldr	r3, [r7, #0]
 8013428:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 801342c:	f107 030c 	add.w	r3, r7, #12
 8013430:	3302      	adds	r3, #2
 8013432:	2432      	movs	r4, #50	@ 0x32
 8013434:	9400      	str	r4, [sp, #0]
 8013436:	f7fa ff38 	bl	800e2aa <snmp_asn1_dec_oid>
 801343a:	4603      	mov	r3, r0
 801343c:	757b      	strb	r3, [r7, #21]
        if (err == ERR_MEM) {
 801343e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8013442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013446:	d101      	bne.n	801344c <snmp_vb_enumerator_get_next+0x354>
          return SNMP_VB_ENUMERATOR_ERR_INVALIDLENGTH;
 8013448:	2303      	movs	r3, #3
 801344a:	e05d      	b.n	8013508 <snmp_vb_enumerator_get_next+0x410>
        }
        VB_PARSE_ASSERT(err == ERR_OK);
 801344c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8013450:	2b00      	cmp	r3, #0
 8013452:	d006      	beq.n	8013462 <snmp_vb_enumerator_get_next+0x36a>
 8013454:	4b2e      	ldr	r3, [pc, #184]	@ (8013510 <snmp_vb_enumerator_get_next+0x418>)
 8013456:	695b      	ldr	r3, [r3, #20]
 8013458:	3301      	adds	r3, #1
 801345a:	4a2d      	ldr	r2, [pc, #180]	@ (8013510 <snmp_vb_enumerator_get_next+0x418>)
 801345c:	6153      	str	r3, [r2, #20]
 801345e:	2302      	movs	r3, #2
 8013460:	e052      	b.n	8013508 <snmp_vb_enumerator_get_next+0x410>
        varbind->value_len = tlv.length_len * sizeof(u32_t);
 8013462:	7bbb      	ldrb	r3, [r7, #14]
 8013464:	009b      	lsls	r3, r3, #2
 8013466:	b29a      	uxth	r2, r3
 8013468:	683b      	ldr	r3, [r7, #0]
 801346a:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
        break;
 801346e:	e04a      	b.n	8013506 <snmp_vb_enumerator_get_next+0x40e>
      case SNMP_ASN1_TYPE_IPADDR:
        if (tlv.value_len == 4) {
 8013470:	8a3b      	ldrh	r3, [r7, #16]
 8013472:	2b04      	cmp	r3, #4
 8013474:	d114      	bne.n	80134a0 <snmp_vb_enumerator_get_next+0x3a8>
          /* must be exactly 4 octets! */
          VB_PARSE_EXEC(snmp_asn1_dec_raw(&(enumerator->pbuf_stream), tlv.value_len, (u8_t*)varbind->value, &varbind->value_len, SNMP_MAX_VALUE_SIZE));
 8013476:	6878      	ldr	r0, [r7, #4]
 8013478:	8a39      	ldrh	r1, [r7, #16]
 801347a:	683b      	ldr	r3, [r7, #0]
 801347c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8013480:	683b      	ldr	r3, [r7, #0]
 8013482:	33d6      	adds	r3, #214	@ 0xd6
 8013484:	24c8      	movs	r4, #200	@ 0xc8
 8013486:	9400      	str	r4, [sp, #0]
 8013488:	f7fa ffdd 	bl	800e446 <snmp_asn1_dec_raw>
 801348c:	4603      	mov	r3, r0
 801348e:	2b00      	cmp	r3, #0
 8013490:	d038      	beq.n	8013504 <snmp_vb_enumerator_get_next+0x40c>
 8013492:	4b1f      	ldr	r3, [pc, #124]	@ (8013510 <snmp_vb_enumerator_get_next+0x418>)
 8013494:	695b      	ldr	r3, [r3, #20]
 8013496:	3301      	adds	r3, #1
 8013498:	4a1d      	ldr	r2, [pc, #116]	@ (8013510 <snmp_vb_enumerator_get_next+0x418>)
 801349a:	6153      	str	r3, [r2, #20]
 801349c:	2302      	movs	r3, #2
 801349e:	e033      	b.n	8013508 <snmp_vb_enumerator_get_next+0x410>
        } else {
          VB_PARSE_ASSERT(0);
 80134a0:	4b1b      	ldr	r3, [pc, #108]	@ (8013510 <snmp_vb_enumerator_get_next+0x418>)
 80134a2:	695b      	ldr	r3, [r3, #20]
 80134a4:	3301      	adds	r3, #1
 80134a6:	4a1a      	ldr	r2, [pc, #104]	@ (8013510 <snmp_vb_enumerator_get_next+0x418>)
 80134a8:	6153      	str	r3, [r2, #20]
 80134aa:	2302      	movs	r3, #2
 80134ac:	e02c      	b.n	8013508 <snmp_vb_enumerator_get_next+0x410>
        }
        break;
      case SNMP_ASN1_TYPE_COUNTER64:
        VB_PARSE_EXEC(snmp_asn1_dec_u64t(&(enumerator->pbuf_stream), tlv.value_len, (u32_t*)varbind->value));
 80134ae:	6878      	ldr	r0, [r7, #4]
 80134b0:	8a39      	ldrh	r1, [r7, #16]
 80134b2:	683b      	ldr	r3, [r7, #0]
 80134b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80134b8:	461a      	mov	r2, r3
 80134ba:	f7fa fe1f 	bl	800e0fc <snmp_asn1_dec_u64t>
 80134be:	4603      	mov	r3, r0
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d006      	beq.n	80134d2 <snmp_vb_enumerator_get_next+0x3da>
 80134c4:	4b12      	ldr	r3, [pc, #72]	@ (8013510 <snmp_vb_enumerator_get_next+0x418>)
 80134c6:	695b      	ldr	r3, [r3, #20]
 80134c8:	3301      	adds	r3, #1
 80134ca:	4a11      	ldr	r2, [pc, #68]	@ (8013510 <snmp_vb_enumerator_get_next+0x418>)
 80134cc:	6153      	str	r3, [r2, #20]
 80134ce:	2302      	movs	r3, #2
 80134d0:	e01a      	b.n	8013508 <snmp_vb_enumerator_get_next+0x410>
        varbind->value_len = 2 * sizeof(u32_t*);
 80134d2:	683b      	ldr	r3, [r7, #0]
 80134d4:	2208      	movs	r2, #8
 80134d6:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
        break;
 80134da:	e014      	b.n	8013506 <snmp_vb_enumerator_get_next+0x40e>
      default:
        VB_PARSE_ASSERT(0);
 80134dc:	4b0c      	ldr	r3, [pc, #48]	@ (8013510 <snmp_vb_enumerator_get_next+0x418>)
 80134de:	695b      	ldr	r3, [r3, #20]
 80134e0:	3301      	adds	r3, #1
 80134e2:	4a0b      	ldr	r2, [pc, #44]	@ (8013510 <snmp_vb_enumerator_get_next+0x418>)
 80134e4:	6153      	str	r3, [r2, #20]
 80134e6:	2302      	movs	r3, #2
 80134e8:	e00e      	b.n	8013508 <snmp_vb_enumerator_get_next+0x410>
        break;
    }
  } else {
    snmp_pbuf_stream_seek(&(enumerator->pbuf_stream), tlv.value_len);
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	8a3a      	ldrh	r2, [r7, #16]
 80134ee:	4611      	mov	r1, r2
 80134f0:	4618      	mov	r0, r3
 80134f2:	f000 f905 	bl	8013700 <snmp_pbuf_stream_seek>
    varbind->value_len = tlv.value_len;
 80134f6:	8a3a      	ldrh	r2, [r7, #16]
 80134f8:	683b      	ldr	r3, [r7, #0]
 80134fa:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
 80134fe:	e002      	b.n	8013506 <snmp_vb_enumerator_get_next+0x40e>
        break;
 8013500:	bf00      	nop
 8013502:	e000      	b.n	8013506 <snmp_vb_enumerator_get_next+0x40e>
        break;
 8013504:	bf00      	nop
  }

  return SNMP_VB_ENUMERATOR_ERR_OK;
 8013506:	2300      	movs	r3, #0
}
 8013508:	4618      	mov	r0, r3
 801350a:	371c      	adds	r7, #28
 801350c:	46bd      	mov	sp, r7
 801350e:	bd90      	pop	{r4, r7, pc}
 8013510:	200087e8 	.word	0x200087e8

08013514 <snmp_pbuf_stream_init>:
#include "lwip/def.h"
#include <string.h>

err_t
snmp_pbuf_stream_init(struct snmp_pbuf_stream* pbuf_stream, struct pbuf* p, u16_t offset, u16_t length)
{
 8013514:	b480      	push	{r7}
 8013516:	b085      	sub	sp, #20
 8013518:	af00      	add	r7, sp, #0
 801351a:	60f8      	str	r0, [r7, #12]
 801351c:	60b9      	str	r1, [r7, #8]
 801351e:	4611      	mov	r1, r2
 8013520:	461a      	mov	r2, r3
 8013522:	460b      	mov	r3, r1
 8013524:	80fb      	strh	r3, [r7, #6]
 8013526:	4613      	mov	r3, r2
 8013528:	80bb      	strh	r3, [r7, #4]
  pbuf_stream->offset = offset;
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	88fa      	ldrh	r2, [r7, #6]
 801352e:	809a      	strh	r2, [r3, #4]
  pbuf_stream->length = length;
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	88ba      	ldrh	r2, [r7, #4]
 8013534:	80da      	strh	r2, [r3, #6]
  pbuf_stream->pbuf   = p;
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	68ba      	ldr	r2, [r7, #8]
 801353a:	601a      	str	r2, [r3, #0]

  return ERR_OK;
 801353c:	2300      	movs	r3, #0
}
 801353e:	4618      	mov	r0, r3
 8013540:	3714      	adds	r7, #20
 8013542:	46bd      	mov	sp, r7
 8013544:	bc80      	pop	{r7}
 8013546:	4770      	bx	lr

08013548 <snmp_pbuf_stream_read>:

err_t
snmp_pbuf_stream_read(struct snmp_pbuf_stream* pbuf_stream, u8_t* data)
{
 8013548:	b580      	push	{r7, lr}
 801354a:	b082      	sub	sp, #8
 801354c:	af00      	add	r7, sp, #0
 801354e:	6078      	str	r0, [r7, #4]
 8013550:	6039      	str	r1, [r7, #0]
  if (pbuf_stream->length == 0) {
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	88db      	ldrh	r3, [r3, #6]
 8013556:	2b00      	cmp	r3, #0
 8013558:	d102      	bne.n	8013560 <snmp_pbuf_stream_read+0x18>
    return ERR_BUF;
 801355a:	f06f 0301 	mvn.w	r3, #1
 801355e:	e01a      	b.n	8013596 <snmp_pbuf_stream_read+0x4e>
  }

  if (pbuf_copy_partial(pbuf_stream->pbuf, data, 1, pbuf_stream->offset) == 0) {
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	6818      	ldr	r0, [r3, #0]
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	889b      	ldrh	r3, [r3, #4]
 8013568:	2201      	movs	r2, #1
 801356a:	6839      	ldr	r1, [r7, #0]
 801356c:	f002 fd98 	bl	80160a0 <pbuf_copy_partial>
 8013570:	4603      	mov	r3, r0
 8013572:	2b00      	cmp	r3, #0
 8013574:	d102      	bne.n	801357c <snmp_pbuf_stream_read+0x34>
    return ERR_BUF;
 8013576:	f06f 0301 	mvn.w	r3, #1
 801357a:	e00c      	b.n	8013596 <snmp_pbuf_stream_read+0x4e>
  }

  pbuf_stream->offset++;
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	889b      	ldrh	r3, [r3, #4]
 8013580:	3301      	adds	r3, #1
 8013582:	b29a      	uxth	r2, r3
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	809a      	strh	r2, [r3, #4]
  pbuf_stream->length--;
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	88db      	ldrh	r3, [r3, #6]
 801358c:	3b01      	subs	r3, #1
 801358e:	b29a      	uxth	r2, r3
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	80da      	strh	r2, [r3, #6]

  return ERR_OK;
 8013594:	2300      	movs	r3, #0
}
 8013596:	4618      	mov	r0, r3
 8013598:	3708      	adds	r7, #8
 801359a:	46bd      	mov	sp, r7
 801359c:	bd80      	pop	{r7, pc}

0801359e <snmp_pbuf_stream_write>:

err_t
snmp_pbuf_stream_write(struct snmp_pbuf_stream* pbuf_stream, u8_t data)
{
 801359e:	b580      	push	{r7, lr}
 80135a0:	b082      	sub	sp, #8
 80135a2:	af00      	add	r7, sp, #0
 80135a4:	6078      	str	r0, [r7, #4]
 80135a6:	460b      	mov	r3, r1
 80135a8:	70fb      	strb	r3, [r7, #3]
  return snmp_pbuf_stream_writebuf(pbuf_stream, &data, 1);
 80135aa:	1cfb      	adds	r3, r7, #3
 80135ac:	2201      	movs	r2, #1
 80135ae:	4619      	mov	r1, r3
 80135b0:	6878      	ldr	r0, [r7, #4]
 80135b2:	f000 f805 	bl	80135c0 <snmp_pbuf_stream_writebuf>
 80135b6:	4603      	mov	r3, r0
}
 80135b8:	4618      	mov	r0, r3
 80135ba:	3708      	adds	r7, #8
 80135bc:	46bd      	mov	sp, r7
 80135be:	bd80      	pop	{r7, pc}

080135c0 <snmp_pbuf_stream_writebuf>:

err_t
snmp_pbuf_stream_writebuf(struct snmp_pbuf_stream* pbuf_stream, const void* buf, u16_t buf_len)
{
 80135c0:	b580      	push	{r7, lr}
 80135c2:	b084      	sub	sp, #16
 80135c4:	af00      	add	r7, sp, #0
 80135c6:	60f8      	str	r0, [r7, #12]
 80135c8:	60b9      	str	r1, [r7, #8]
 80135ca:	4613      	mov	r3, r2
 80135cc:	80fb      	strh	r3, [r7, #6]
  if (pbuf_stream->length < buf_len) {
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	88db      	ldrh	r3, [r3, #6]
 80135d2:	88fa      	ldrh	r2, [r7, #6]
 80135d4:	429a      	cmp	r2, r3
 80135d6:	d902      	bls.n	80135de <snmp_pbuf_stream_writebuf+0x1e>
    return ERR_BUF;
 80135d8:	f06f 0301 	mvn.w	r3, #1
 80135dc:	e01c      	b.n	8013618 <snmp_pbuf_stream_writebuf+0x58>
  }

  if (pbuf_take_at(pbuf_stream->pbuf, buf, buf_len, pbuf_stream->offset) != ERR_OK) {
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	6818      	ldr	r0, [r3, #0]
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	889b      	ldrh	r3, [r3, #4]
 80135e6:	88fa      	ldrh	r2, [r7, #6]
 80135e8:	68b9      	ldr	r1, [r7, #8]
 80135ea:	f002 fea1 	bl	8016330 <pbuf_take_at>
 80135ee:	4603      	mov	r3, r0
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d002      	beq.n	80135fa <snmp_pbuf_stream_writebuf+0x3a>
    return ERR_BUF;
 80135f4:	f06f 0301 	mvn.w	r3, #1
 80135f8:	e00e      	b.n	8013618 <snmp_pbuf_stream_writebuf+0x58>
  }

  pbuf_stream->offset += buf_len;
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	889a      	ldrh	r2, [r3, #4]
 80135fe:	88fb      	ldrh	r3, [r7, #6]
 8013600:	4413      	add	r3, r2
 8013602:	b29a      	uxth	r2, r3
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	809a      	strh	r2, [r3, #4]
  pbuf_stream->length -= buf_len;
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	88da      	ldrh	r2, [r3, #6]
 801360c:	88fb      	ldrh	r3, [r7, #6]
 801360e:	1ad3      	subs	r3, r2, r3
 8013610:	b29a      	uxth	r2, r3
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	80da      	strh	r2, [r3, #6]

  return ERR_OK;
 8013616:	2300      	movs	r3, #0
}
 8013618:	4618      	mov	r0, r3
 801361a:	3710      	adds	r7, #16
 801361c:	46bd      	mov	sp, r7
 801361e:	bd80      	pop	{r7, pc}

08013620 <snmp_pbuf_stream_writeto>:

err_t
snmp_pbuf_stream_writeto(struct snmp_pbuf_stream* pbuf_stream, struct snmp_pbuf_stream* target_pbuf_stream, u16_t len)
{
 8013620:	b580      	push	{r7, lr}
 8013622:	b088      	sub	sp, #32
 8013624:	af00      	add	r7, sp, #0
 8013626:	60f8      	str	r0, [r7, #12]
 8013628:	60b9      	str	r1, [r7, #8]
 801362a:	4613      	mov	r3, r2
 801362c:	80fb      	strh	r3, [r7, #6]

  if ((pbuf_stream == NULL) || (target_pbuf_stream == NULL)) {
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	2b00      	cmp	r3, #0
 8013632:	d002      	beq.n	801363a <snmp_pbuf_stream_writeto+0x1a>
 8013634:	68bb      	ldr	r3, [r7, #8]
 8013636:	2b00      	cmp	r3, #0
 8013638:	d102      	bne.n	8013640 <snmp_pbuf_stream_writeto+0x20>
    return ERR_ARG;
 801363a:	f06f 030f 	mvn.w	r3, #15
 801363e:	e05b      	b.n	80136f8 <snmp_pbuf_stream_writeto+0xd8>
  }
  if ((len > pbuf_stream->length) || (len > target_pbuf_stream->length)) {
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	88db      	ldrh	r3, [r3, #6]
 8013644:	88fa      	ldrh	r2, [r7, #6]
 8013646:	429a      	cmp	r2, r3
 8013648:	d804      	bhi.n	8013654 <snmp_pbuf_stream_writeto+0x34>
 801364a:	68bb      	ldr	r3, [r7, #8]
 801364c:	88db      	ldrh	r3, [r3, #6]
 801364e:	88fa      	ldrh	r2, [r7, #6]
 8013650:	429a      	cmp	r2, r3
 8013652:	d902      	bls.n	801365a <snmp_pbuf_stream_writeto+0x3a>
    return ERR_ARG;
 8013654:	f06f 030f 	mvn.w	r3, #15
 8013658:	e04e      	b.n	80136f8 <snmp_pbuf_stream_writeto+0xd8>
  }

  if (len == 0) {
 801365a:	88fb      	ldrh	r3, [r7, #6]
 801365c:	2b00      	cmp	r3, #0
 801365e:	d147      	bne.n	80136f0 <snmp_pbuf_stream_writeto+0xd0>
    len = LWIP_MIN(pbuf_stream->length, target_pbuf_stream->length);
 8013660:	68bb      	ldr	r3, [r7, #8]
 8013662:	88da      	ldrh	r2, [r3, #6]
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	88db      	ldrh	r3, [r3, #6]
 8013668:	4293      	cmp	r3, r2
 801366a:	bf28      	it	cs
 801366c:	4613      	movcs	r3, r2
 801366e:	80fb      	strh	r3, [r7, #6]
  }

  while (len > 0) {
 8013670:	e03e      	b.n	80136f0 <snmp_pbuf_stream_writeto+0xd0>
    u16_t chunk_len;
    err_t err;
    u16_t target_offset;
    struct pbuf* pbuf = pbuf_skip(pbuf_stream->pbuf, pbuf_stream->offset, &target_offset);
 8013672:	68fb      	ldr	r3, [r7, #12]
 8013674:	6818      	ldr	r0, [r3, #0]
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	889b      	ldrh	r3, [r3, #4]
 801367a:	f107 0216 	add.w	r2, r7, #22
 801367e:	4619      	mov	r1, r3
 8013680:	f002 fdb0 	bl	80161e4 <pbuf_skip>
 8013684:	61f8      	str	r0, [r7, #28]

    if ((pbuf == NULL) || (pbuf->len == 0)) {
 8013686:	69fb      	ldr	r3, [r7, #28]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d003      	beq.n	8013694 <snmp_pbuf_stream_writeto+0x74>
 801368c:	69fb      	ldr	r3, [r7, #28]
 801368e:	895b      	ldrh	r3, [r3, #10]
 8013690:	2b00      	cmp	r3, #0
 8013692:	d102      	bne.n	801369a <snmp_pbuf_stream_writeto+0x7a>
      return ERR_BUF;
 8013694:	f06f 0301 	mvn.w	r3, #1
 8013698:	e02e      	b.n	80136f8 <snmp_pbuf_stream_writeto+0xd8>
    }

    chunk_len = LWIP_MIN(len, pbuf->len);
 801369a:	69fb      	ldr	r3, [r7, #28]
 801369c:	895b      	ldrh	r3, [r3, #10]
 801369e:	88fa      	ldrh	r2, [r7, #6]
 80136a0:	4293      	cmp	r3, r2
 80136a2:	bf28      	it	cs
 80136a4:	4613      	movcs	r3, r2
 80136a6:	837b      	strh	r3, [r7, #26]
    err = snmp_pbuf_stream_writebuf(target_pbuf_stream, &((u8_t*)pbuf->payload)[target_offset], chunk_len);
 80136a8:	69fb      	ldr	r3, [r7, #28]
 80136aa:	685b      	ldr	r3, [r3, #4]
 80136ac:	8afa      	ldrh	r2, [r7, #22]
 80136ae:	4413      	add	r3, r2
 80136b0:	8b7a      	ldrh	r2, [r7, #26]
 80136b2:	4619      	mov	r1, r3
 80136b4:	68b8      	ldr	r0, [r7, #8]
 80136b6:	f7ff ff83 	bl	80135c0 <snmp_pbuf_stream_writebuf>
 80136ba:	4603      	mov	r3, r0
 80136bc:	767b      	strb	r3, [r7, #25]
    if (err != ERR_OK) {
 80136be:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d002      	beq.n	80136cc <snmp_pbuf_stream_writeto+0xac>
      return err;
 80136c6:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80136ca:	e015      	b.n	80136f8 <snmp_pbuf_stream_writeto+0xd8>
    }

    pbuf_stream->offset   += chunk_len;
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	889a      	ldrh	r2, [r3, #4]
 80136d0:	8b7b      	ldrh	r3, [r7, #26]
 80136d2:	4413      	add	r3, r2
 80136d4:	b29a      	uxth	r2, r3
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	809a      	strh	r2, [r3, #4]
    pbuf_stream->length   -= chunk_len;
 80136da:	68fb      	ldr	r3, [r7, #12]
 80136dc:	88da      	ldrh	r2, [r3, #6]
 80136de:	8b7b      	ldrh	r3, [r7, #26]
 80136e0:	1ad3      	subs	r3, r2, r3
 80136e2:	b29a      	uxth	r2, r3
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	80da      	strh	r2, [r3, #6]
    len -= chunk_len;
 80136e8:	88fa      	ldrh	r2, [r7, #6]
 80136ea:	8b7b      	ldrh	r3, [r7, #26]
 80136ec:	1ad3      	subs	r3, r2, r3
 80136ee:	80fb      	strh	r3, [r7, #6]
  while (len > 0) {
 80136f0:	88fb      	ldrh	r3, [r7, #6]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d1bd      	bne.n	8013672 <snmp_pbuf_stream_writeto+0x52>
  }

  return ERR_OK;
 80136f6:	2300      	movs	r3, #0
}
 80136f8:	4618      	mov	r0, r3
 80136fa:	3720      	adds	r7, #32
 80136fc:	46bd      	mov	sp, r7
 80136fe:	bd80      	pop	{r7, pc}

08013700 <snmp_pbuf_stream_seek>:

err_t
snmp_pbuf_stream_seek(struct snmp_pbuf_stream* pbuf_stream, s32_t offset)
{
 8013700:	b480      	push	{r7}
 8013702:	b083      	sub	sp, #12
 8013704:	af00      	add	r7, sp, #0
 8013706:	6078      	str	r0, [r7, #4]
 8013708:	6039      	str	r1, [r7, #0]
  if ((offset < 0) || (offset > pbuf_stream->length)) {
 801370a:	683b      	ldr	r3, [r7, #0]
 801370c:	2b00      	cmp	r3, #0
 801370e:	db05      	blt.n	801371c <snmp_pbuf_stream_seek+0x1c>
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	88db      	ldrh	r3, [r3, #6]
 8013714:	461a      	mov	r2, r3
 8013716:	683b      	ldr	r3, [r7, #0]
 8013718:	4293      	cmp	r3, r2
 801371a:	dd02      	ble.n	8013722 <snmp_pbuf_stream_seek+0x22>
    /* we cannot seek backwards or forward behind stream end */
    return ERR_ARG;
 801371c:	f06f 030f 	mvn.w	r3, #15
 8013720:	e010      	b.n	8013744 <snmp_pbuf_stream_seek+0x44>
  }

  pbuf_stream->offset += (u16_t)offset;
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	889a      	ldrh	r2, [r3, #4]
 8013726:	683b      	ldr	r3, [r7, #0]
 8013728:	b29b      	uxth	r3, r3
 801372a:	4413      	add	r3, r2
 801372c:	b29a      	uxth	r2, r3
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	809a      	strh	r2, [r3, #4]
  pbuf_stream->length -= (u16_t)offset;
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	88da      	ldrh	r2, [r3, #6]
 8013736:	683b      	ldr	r3, [r7, #0]
 8013738:	b29b      	uxth	r3, r3
 801373a:	1ad3      	subs	r3, r2, r3
 801373c:	b29a      	uxth	r2, r3
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	80da      	strh	r2, [r3, #6]

  return ERR_OK;
 8013742:	2300      	movs	r3, #0
}
 8013744:	4618      	mov	r0, r3
 8013746:	370c      	adds	r7, #12
 8013748:	46bd      	mov	sp, r7
 801374a:	bc80      	pop	{r7}
 801374c:	4770      	bx	lr

0801374e <snmp_pbuf_stream_seek_abs>:

err_t
snmp_pbuf_stream_seek_abs(struct snmp_pbuf_stream* pbuf_stream, u32_t offset)
{
 801374e:	b580      	push	{r7, lr}
 8013750:	b084      	sub	sp, #16
 8013752:	af00      	add	r7, sp, #0
 8013754:	6078      	str	r0, [r7, #4]
 8013756:	6039      	str	r1, [r7, #0]
  s32_t rel_offset = offset - pbuf_stream->offset;
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	889b      	ldrh	r3, [r3, #4]
 801375c:	461a      	mov	r2, r3
 801375e:	683b      	ldr	r3, [r7, #0]
 8013760:	1a9b      	subs	r3, r3, r2
 8013762:	60fb      	str	r3, [r7, #12]
  return snmp_pbuf_stream_seek(pbuf_stream, rel_offset);
 8013764:	68f9      	ldr	r1, [r7, #12]
 8013766:	6878      	ldr	r0, [r7, #4]
 8013768:	f7ff ffca 	bl	8013700 <snmp_pbuf_stream_seek>
 801376c:	4603      	mov	r3, r0
}
 801376e:	4618      	mov	r0, r3
 8013770:	3710      	adds	r7, #16
 8013772:	46bd      	mov	sp, r7
 8013774:	bd80      	pop	{r7, pc}

08013776 <snmp_recv>:
#include "snmp_msg.h"

/* lwIP UDP receive callback function */
static void
snmp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8013776:	b580      	push	{r7, lr}
 8013778:	b084      	sub	sp, #16
 801377a:	af00      	add	r7, sp, #0
 801377c:	60f8      	str	r0, [r7, #12]
 801377e:	60b9      	str	r1, [r7, #8]
 8013780:	607a      	str	r2, [r7, #4]
 8013782:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(arg);

  snmp_receive(pcb, p, addr, port);
 8013784:	8b3b      	ldrh	r3, [r7, #24]
 8013786:	683a      	ldr	r2, [r7, #0]
 8013788:	6879      	ldr	r1, [r7, #4]
 801378a:	68b8      	ldr	r0, [r7, #8]
 801378c:	f7fd fe36 	bl	80113fc <snmp_receive>

  pbuf_free(p);
 8013790:	6878      	ldr	r0, [r7, #4]
 8013792:	f002 fa87 	bl	8015ca4 <pbuf_free>
}
 8013796:	bf00      	nop
 8013798:	3710      	adds	r7, #16
 801379a:	46bd      	mov	sp, r7
 801379c:	bd80      	pop	{r7, pc}

0801379e <snmp_sendto>:

err_t 
snmp_sendto(void *handle, struct pbuf *p, const ip_addr_t *dst, u16_t port)
{
 801379e:	b580      	push	{r7, lr}
 80137a0:	b084      	sub	sp, #16
 80137a2:	af00      	add	r7, sp, #0
 80137a4:	60f8      	str	r0, [r7, #12]
 80137a6:	60b9      	str	r1, [r7, #8]
 80137a8:	607a      	str	r2, [r7, #4]
 80137aa:	807b      	strh	r3, [r7, #2]
  return udp_sendto((struct udp_pcb*)handle, p, dst, port);
 80137ac:	887b      	ldrh	r3, [r7, #2]
 80137ae:	687a      	ldr	r2, [r7, #4]
 80137b0:	68b9      	ldr	r1, [r7, #8]
 80137b2:	68f8      	ldr	r0, [r7, #12]
 80137b4:	f008 fc38 	bl	801c028 <udp_sendto>
 80137b8:	4603      	mov	r3, r0
}
 80137ba:	4618      	mov	r0, r3
 80137bc:	3710      	adds	r7, #16
 80137be:	46bd      	mov	sp, r7
 80137c0:	bd80      	pop	{r7, pc}

080137c2 <snmp_get_local_ip_for_dst>:

u8_t
snmp_get_local_ip_for_dst(void* handle, const ip_addr_t *dst, ip_addr_t *result)
{
 80137c2:	b580      	push	{r7, lr}
 80137c4:	b088      	sub	sp, #32
 80137c6:	af00      	add	r7, sp, #0
 80137c8:	60f8      	str	r0, [r7, #12]
 80137ca:	60b9      	str	r1, [r7, #8]
 80137cc:	607a      	str	r2, [r7, #4]
  struct udp_pcb* udp_pcb = (struct udp_pcb*)handle;
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	61fb      	str	r3, [r7, #28]
  struct netif *dst_if;
  const ip_addr_t* dst_ip;

  LWIP_UNUSED_ARG(udp_pcb); /* unused in case of IPV4 only configuration */

  ip_route_get_local_ip(&udp_pcb->local_ip, dst, dst_if, dst_ip);
 80137d2:	68b8      	ldr	r0, [r7, #8]
 80137d4:	f00b ffa8 	bl	801f728 <ip4_route>
 80137d8:	61b8      	str	r0, [r7, #24]
 80137da:	69bb      	ldr	r3, [r7, #24]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d002      	beq.n	80137e6 <snmp_get_local_ip_for_dst+0x24>
 80137e0:	69bb      	ldr	r3, [r7, #24]
 80137e2:	3304      	adds	r3, #4
 80137e4:	e000      	b.n	80137e8 <snmp_get_local_ip_for_dst+0x26>
 80137e6:	2300      	movs	r3, #0
 80137e8:	617b      	str	r3, [r7, #20]

  if ((dst_if != NULL) && (dst_ip != NULL)) {
 80137ea:	69bb      	ldr	r3, [r7, #24]
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d008      	beq.n	8013802 <snmp_get_local_ip_for_dst+0x40>
 80137f0:	697b      	ldr	r3, [r7, #20]
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d005      	beq.n	8013802 <snmp_get_local_ip_for_dst+0x40>
    ip_addr_copy(*result, *dst_ip);
 80137f6:	697b      	ldr	r3, [r7, #20]
 80137f8:	681a      	ldr	r2, [r3, #0]
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	601a      	str	r2, [r3, #0]
    return 1;
 80137fe:	2301      	movs	r3, #1
 8013800:	e000      	b.n	8013804 <snmp_get_local_ip_for_dst+0x42>
  } else {
    return 0;
 8013802:	2300      	movs	r3, #0
  }
}
 8013804:	4618      	mov	r0, r3
 8013806:	3720      	adds	r7, #32
 8013808:	46bd      	mov	sp, r7
 801380a:	bd80      	pop	{r7, pc}

0801380c <snmp_init>:
 * Starts SNMP Agent.
 * Allocates UDP pcb and binds it to IP_ANY_TYPE port 161.
 */
void
snmp_init(void)
{
 801380c:	b580      	push	{r7, lr}
 801380e:	b082      	sub	sp, #8
 8013810:	af00      	add	r7, sp, #0
  err_t err;
  
  struct udp_pcb *snmp_pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 8013812:	202e      	movs	r0, #46	@ 0x2e
 8013814:	f008 fe45 	bl	801c4a2 <udp_new_ip_type>
 8013818:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("snmp_raw: no PCB", (snmp_pcb != NULL), return;);
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	2b00      	cmp	r3, #0
 801381e:	d106      	bne.n	801382e <snmp_init+0x22>
 8013820:	4b11      	ldr	r3, [pc, #68]	@ (8013868 <snmp_init+0x5c>)
 8013822:	225b      	movs	r2, #91	@ 0x5b
 8013824:	4911      	ldr	r1, [pc, #68]	@ (801386c <snmp_init+0x60>)
 8013826:	4812      	ldr	r0, [pc, #72]	@ (8013870 <snmp_init+0x64>)
 8013828:	f00e fa2e 	bl	8021c88 <iprintf>
 801382c:	e018      	b.n	8013860 <snmp_init+0x54>

  snmp_traps_handle = snmp_pcb;
 801382e:	4a11      	ldr	r2, [pc, #68]	@ (8013874 <snmp_init+0x68>)
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	6013      	str	r3, [r2, #0]

  udp_recv(snmp_pcb, snmp_recv, (void *)SNMP_IN_PORT);
 8013834:	22a1      	movs	r2, #161	@ 0xa1
 8013836:	4910      	ldr	r1, [pc, #64]	@ (8013878 <snmp_init+0x6c>)
 8013838:	6878      	ldr	r0, [r7, #4]
 801383a:	f008 fdd7 	bl	801c3ec <udp_recv>
  err = udp_bind(snmp_pcb, IP_ANY_TYPE, SNMP_IN_PORT);
 801383e:	22a1      	movs	r2, #161	@ 0xa1
 8013840:	490e      	ldr	r1, [pc, #56]	@ (801387c <snmp_init+0x70>)
 8013842:	6878      	ldr	r0, [r7, #4]
 8013844:	f008 fd0c 	bl	801c260 <udp_bind>
 8013848:	4603      	mov	r3, r0
 801384a:	70fb      	strb	r3, [r7, #3]
  LWIP_ERROR("snmp_raw: Unable to bind PCB", (err == ERR_OK), return;);
 801384c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013850:	2b00      	cmp	r3, #0
 8013852:	d005      	beq.n	8013860 <snmp_init+0x54>
 8013854:	4b04      	ldr	r3, [pc, #16]	@ (8013868 <snmp_init+0x5c>)
 8013856:	2261      	movs	r2, #97	@ 0x61
 8013858:	4909      	ldr	r1, [pc, #36]	@ (8013880 <snmp_init+0x74>)
 801385a:	4805      	ldr	r0, [pc, #20]	@ (8013870 <snmp_init+0x64>)
 801385c:	f00e fa14 	bl	8021c88 <iprintf>
}
 8013860:	3708      	adds	r7, #8
 8013862:	46bd      	mov	sp, r7
 8013864:	bd80      	pop	{r7, pc}
 8013866:	bf00      	nop
 8013868:	08025734 	.word	0x08025734
 801386c:	08025770 	.word	0x08025770
 8013870:	08025784 	.word	0x08025784
 8013874:	20008890 	.word	0x20008890
 8013878:	08013777 	.word	0x08013777
 801387c:	08030cf4 	.word	0x08030cf4
 8013880:	080257ac 	.word	0x080257ac

08013884 <snmp_scalar_get_instance>:
static snmp_err_t  snmp_scalar_array_set_test(struct snmp_node_instance* instance, u16_t value_len, void* value);
static snmp_err_t  snmp_scalar_array_set_value(struct snmp_node_instance* instance, u16_t value_len, void* value);

snmp_err_t 
snmp_scalar_get_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance* instance)
{
 8013884:	b480      	push	{r7}
 8013886:	b087      	sub	sp, #28
 8013888:	af00      	add	r7, sp, #0
 801388a:	60f8      	str	r0, [r7, #12]
 801388c:	460b      	mov	r3, r1
 801388e:	607a      	str	r2, [r7, #4]
 8013890:	72fb      	strb	r3, [r7, #11]
  const struct snmp_scalar_node* scalar_node = (const struct snmp_scalar_node*)(const void*)instance->node;
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(root_oid);
  LWIP_UNUSED_ARG(root_oid_len);

  /* scalar only has one dedicated instance: .0 */
  if ((instance->instance_oid.len != 1) || (instance->instance_oid.id[0] != 0)) {
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	791b      	ldrb	r3, [r3, #4]
 801389c:	2b01      	cmp	r3, #1
 801389e:	d103      	bne.n	80138a8 <snmp_scalar_get_instance+0x24>
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	689b      	ldr	r3, [r3, #8]
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d001      	beq.n	80138ac <snmp_scalar_get_instance+0x28>
    return SNMP_ERR_NOSUCHINSTANCE;
 80138a8:	23f1      	movs	r3, #241	@ 0xf1
 80138aa:	e019      	b.n	80138e0 <snmp_scalar_get_instance+0x5c>
  }

  instance->access    = scalar_node->access;
 80138ac:	697b      	ldr	r3, [r7, #20]
 80138ae:	7c5a      	ldrb	r2, [r3, #17]
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
  instance->asn1_type = scalar_node->asn1_type;
 80138b6:	697b      	ldr	r3, [r7, #20]
 80138b8:	7c1a      	ldrb	r2, [r3, #16]
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
  instance->get_value = scalar_node->get_value;
 80138c0:	697b      	ldr	r3, [r7, #20]
 80138c2:	695a      	ldr	r2, [r3, #20]
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  instance->set_test  = scalar_node->set_test;
 80138ca:	697b      	ldr	r3, [r7, #20]
 80138cc:	699a      	ldr	r2, [r3, #24]
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  instance->set_value = scalar_node->set_value;
 80138d4:	697b      	ldr	r3, [r7, #20]
 80138d6:	69da      	ldr	r2, [r3, #28]
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  return SNMP_ERR_NOERROR;
 80138de:	2300      	movs	r3, #0
}
 80138e0:	4618      	mov	r0, r3
 80138e2:	371c      	adds	r7, #28
 80138e4:	46bd      	mov	sp, r7
 80138e6:	bc80      	pop	{r7}
 80138e8:	4770      	bx	lr

080138ea <snmp_scalar_get_next_instance>:

snmp_err_t 
snmp_scalar_get_next_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance* instance)
{
 80138ea:	b580      	push	{r7, lr}
 80138ec:	b084      	sub	sp, #16
 80138ee:	af00      	add	r7, sp, #0
 80138f0:	60f8      	str	r0, [r7, #12]
 80138f2:	460b      	mov	r3, r1
 80138f4:	607a      	str	r2, [r7, #4]
 80138f6:	72fb      	strb	r3, [r7, #11]
  /* because our only instance is .0 we can only return a next instance if no instance oid is passed */
  if (instance->instance_oid.len == 0) {
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	791b      	ldrb	r3, [r3, #4]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d10d      	bne.n	801391c <snmp_scalar_get_next_instance+0x32>
    instance->instance_oid.len   = 1;
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	2201      	movs	r2, #1
 8013904:	711a      	strb	r2, [r3, #4]
    instance->instance_oid.id[0] = 0;
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	2200      	movs	r2, #0
 801390a:	609a      	str	r2, [r3, #8]

    return snmp_scalar_get_instance(root_oid, root_oid_len, instance);
 801390c:	7afb      	ldrb	r3, [r7, #11]
 801390e:	687a      	ldr	r2, [r7, #4]
 8013910:	4619      	mov	r1, r3
 8013912:	68f8      	ldr	r0, [r7, #12]
 8013914:	f7ff ffb6 	bl	8013884 <snmp_scalar_get_instance>
 8013918:	4603      	mov	r3, r0
 801391a:	e000      	b.n	801391e <snmp_scalar_get_next_instance+0x34>
  }

  return SNMP_ERR_NOSUCHINSTANCE;
 801391c:	23f1      	movs	r3, #241	@ 0xf1
}
 801391e:	4618      	mov	r0, r3
 8013920:	3710      	adds	r7, #16
 8013922:	46bd      	mov	sp, r7
 8013924:	bd80      	pop	{r7, pc}
	...

08013928 <snmp_scalar_array_get_instance>:


snmp_err_t
snmp_scalar_array_get_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance* instance)
{
 8013928:	b480      	push	{r7}
 801392a:	b089      	sub	sp, #36	@ 0x24
 801392c:	af00      	add	r7, sp, #0
 801392e:	60f8      	str	r0, [r7, #12]
 8013930:	460b      	mov	r3, r1
 8013932:	607a      	str	r2, [r7, #4]
 8013934:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(root_oid);
  LWIP_UNUSED_ARG(root_oid_len);

  if ((instance->instance_oid.len == 2) && (instance->instance_oid.id[1] == 0)) {
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	791b      	ldrb	r3, [r3, #4]
 801393a:	2b02      	cmp	r3, #2
 801393c:	d142      	bne.n	80139c4 <snmp_scalar_array_get_instance+0x9c>
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	68db      	ldr	r3, [r3, #12]
 8013942:	2b00      	cmp	r3, #0
 8013944:	d13e      	bne.n	80139c4 <snmp_scalar_array_get_instance+0x9c>
    const struct snmp_scalar_array_node* array_node = (const struct snmp_scalar_array_node*)(const void*)instance->node;
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	617b      	str	r3, [r7, #20]
    const struct snmp_scalar_array_node_def* array_node_def = array_node->array_nodes;
 801394c:	697b      	ldr	r3, [r7, #20]
 801394e:	695b      	ldr	r3, [r3, #20]
 8013950:	61fb      	str	r3, [r7, #28]
    u32_t i = 0;
 8013952:	2300      	movs	r3, #0
 8013954:	61bb      	str	r3, [r7, #24]

    while (i < array_node->array_node_count) {
 8013956:	e00b      	b.n	8013970 <snmp_scalar_array_get_instance+0x48>
      if (array_node_def->oid == instance->instance_oid.id[0]) {
 8013958:	69fb      	ldr	r3, [r7, #28]
 801395a:	681a      	ldr	r2, [r3, #0]
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	689b      	ldr	r3, [r3, #8]
 8013960:	429a      	cmp	r2, r3
 8013962:	d00c      	beq.n	801397e <snmp_scalar_array_get_instance+0x56>
        break;
      }

      array_node_def++;
 8013964:	69fb      	ldr	r3, [r7, #28]
 8013966:	3308      	adds	r3, #8
 8013968:	61fb      	str	r3, [r7, #28]
      i++;
 801396a:	69bb      	ldr	r3, [r7, #24]
 801396c:	3301      	adds	r3, #1
 801396e:	61bb      	str	r3, [r7, #24]
    while (i < array_node->array_node_count) {
 8013970:	697b      	ldr	r3, [r7, #20]
 8013972:	8a1b      	ldrh	r3, [r3, #16]
 8013974:	461a      	mov	r2, r3
 8013976:	69bb      	ldr	r3, [r7, #24]
 8013978:	4293      	cmp	r3, r2
 801397a:	d3ed      	bcc.n	8013958 <snmp_scalar_array_get_instance+0x30>
 801397c:	e000      	b.n	8013980 <snmp_scalar_array_get_instance+0x58>
        break;
 801397e:	bf00      	nop
    }

    if (i < array_node->array_node_count) {
 8013980:	697b      	ldr	r3, [r7, #20]
 8013982:	8a1b      	ldrh	r3, [r3, #16]
 8013984:	461a      	mov	r2, r3
 8013986:	69bb      	ldr	r3, [r7, #24]
 8013988:	4293      	cmp	r3, r2
 801398a:	d21b      	bcs.n	80139c4 <snmp_scalar_array_get_instance+0x9c>
      instance->access              = array_node_def->access;
 801398c:	69fb      	ldr	r3, [r7, #28]
 801398e:	795a      	ldrb	r2, [r3, #5]
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
      instance->asn1_type           = array_node_def->asn1_type;
 8013996:	69fb      	ldr	r3, [r7, #28]
 8013998:	791a      	ldrb	r2, [r3, #4]
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
      instance->get_value           = snmp_scalar_array_get_value;
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	4a0b      	ldr	r2, [pc, #44]	@ (80139d0 <snmp_scalar_array_get_instance+0xa8>)
 80139a4:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
      instance->set_test            = snmp_scalar_array_set_test;
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	4a0a      	ldr	r2, [pc, #40]	@ (80139d4 <snmp_scalar_array_get_instance+0xac>)
 80139ac:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
      instance->set_value           = snmp_scalar_array_set_value;
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	4a09      	ldr	r2, [pc, #36]	@ (80139d8 <snmp_scalar_array_get_instance+0xb0>)
 80139b4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
      instance->reference.const_ptr = array_node_def;
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	69fa      	ldr	r2, [r7, #28]
 80139bc:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4

      return SNMP_ERR_NOERROR;
 80139c0:	2300      	movs	r3, #0
 80139c2:	e000      	b.n	80139c6 <snmp_scalar_array_get_instance+0x9e>
    }
  }

  return SNMP_ERR_NOSUCHINSTANCE;
 80139c4:	23f1      	movs	r3, #241	@ 0xf1
}
 80139c6:	4618      	mov	r0, r3
 80139c8:	3724      	adds	r7, #36	@ 0x24
 80139ca:	46bd      	mov	sp, r7
 80139cc:	bc80      	pop	{r7}
 80139ce:	4770      	bx	lr
 80139d0:	08013b49 	.word	0x08013b49
 80139d4:	08013b75 	.word	0x08013b75
 80139d8:	08013ba7 	.word	0x08013ba7

080139dc <snmp_scalar_array_get_next_instance>:

snmp_err_t
snmp_scalar_array_get_next_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance* instance)
{
 80139dc:	b480      	push	{r7}
 80139de:	b08b      	sub	sp, #44	@ 0x2c
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	60f8      	str	r0, [r7, #12]
 80139e4:	460b      	mov	r3, r1
 80139e6:	607a      	str	r2, [r7, #4]
 80139e8:	72fb      	strb	r3, [r7, #11]
  const struct snmp_scalar_array_node* array_node = (const struct snmp_scalar_array_node*)(const void*)instance->node;
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	613b      	str	r3, [r7, #16]
  const struct snmp_scalar_array_node_def* array_node_def = array_node->array_nodes;
 80139f0:	693b      	ldr	r3, [r7, #16]
 80139f2:	695b      	ldr	r3, [r3, #20]
 80139f4:	627b      	str	r3, [r7, #36]	@ 0x24
  const struct snmp_scalar_array_node_def* result = NULL;
 80139f6:	2300      	movs	r3, #0
 80139f8:	623b      	str	r3, [r7, #32]

  LWIP_UNUSED_ARG(root_oid);
  LWIP_UNUSED_ARG(root_oid_len);

  if ((instance->instance_oid.len == 0) && (array_node->array_node_count > 0)) {
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	791b      	ldrb	r3, [r3, #4]
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d121      	bne.n	8013a46 <snmp_scalar_array_get_next_instance+0x6a>
 8013a02:	693b      	ldr	r3, [r7, #16]
 8013a04:	8a1b      	ldrh	r3, [r3, #16]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d01d      	beq.n	8013a46 <snmp_scalar_array_get_next_instance+0x6a>
    /* return node with lowest OID */
    u16_t i = 0;
 8013a0a:	2300      	movs	r3, #0
 8013a0c:	83fb      	strh	r3, [r7, #30]
    
    result = array_node_def;
 8013a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a10:	623b      	str	r3, [r7, #32]
    array_node_def++;
 8013a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a14:	3308      	adds	r3, #8
 8013a16:	627b      	str	r3, [r7, #36]	@ 0x24

    for (i = 1; i < array_node->array_node_count; i++) {
 8013a18:	2301      	movs	r3, #1
 8013a1a:	83fb      	strh	r3, [r7, #30]
 8013a1c:	e00d      	b.n	8013a3a <snmp_scalar_array_get_next_instance+0x5e>
      if (array_node_def->oid < result->oid) {
 8013a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a20:	681a      	ldr	r2, [r3, #0]
 8013a22:	6a3b      	ldr	r3, [r7, #32]
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	429a      	cmp	r2, r3
 8013a28:	d201      	bcs.n	8013a2e <snmp_scalar_array_get_next_instance+0x52>
        result = array_node_def;
 8013a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a2c:	623b      	str	r3, [r7, #32]
      }
      array_node_def++;
 8013a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a30:	3308      	adds	r3, #8
 8013a32:	627b      	str	r3, [r7, #36]	@ 0x24
    for (i = 1; i < array_node->array_node_count; i++) {
 8013a34:	8bfb      	ldrh	r3, [r7, #30]
 8013a36:	3301      	adds	r3, #1
 8013a38:	83fb      	strh	r3, [r7, #30]
 8013a3a:	693b      	ldr	r3, [r7, #16]
 8013a3c:	8a1b      	ldrh	r3, [r3, #16]
 8013a3e:	8bfa      	ldrh	r2, [r7, #30]
 8013a40:	429a      	cmp	r2, r3
 8013a42:	d3ec      	bcc.n	8013a1e <snmp_scalar_array_get_next_instance+0x42>
  if ((instance->instance_oid.len == 0) && (array_node->array_node_count > 0)) {
 8013a44:	e04b      	b.n	8013ade <snmp_scalar_array_get_next_instance+0x102>
    }
  } else if (instance->instance_oid.len >= 1) {
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	791b      	ldrb	r3, [r3, #4]
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d047      	beq.n	8013ade <snmp_scalar_array_get_next_instance+0x102>
    if (instance->instance_oid.len == 1) {
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	791b      	ldrb	r3, [r3, #4]
 8013a52:	2b01      	cmp	r3, #1
 8013a54:	d116      	bne.n	8013a84 <snmp_scalar_array_get_next_instance+0xa8>
      /* if we have the requested OID we return its instance, otherwise we search for the next available */    
      u16_t i = 0;
 8013a56:	2300      	movs	r3, #0
 8013a58:	83bb      	strh	r3, [r7, #28]
      while (i < array_node->array_node_count) {
 8013a5a:	e00e      	b.n	8013a7a <snmp_scalar_array_get_next_instance+0x9e>
        if (array_node_def->oid == instance->instance_oid.id[0]) {
 8013a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a5e:	681a      	ldr	r2, [r3, #0]
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	689b      	ldr	r3, [r3, #8]
 8013a64:	429a      	cmp	r2, r3
 8013a66:	d102      	bne.n	8013a6e <snmp_scalar_array_get_next_instance+0x92>
          result = array_node_def;
 8013a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a6a:	623b      	str	r3, [r7, #32]
          break;
 8013a6c:	e00a      	b.n	8013a84 <snmp_scalar_array_get_next_instance+0xa8>
        }

        array_node_def++;
 8013a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a70:	3308      	adds	r3, #8
 8013a72:	627b      	str	r3, [r7, #36]	@ 0x24
        i++;
 8013a74:	8bbb      	ldrh	r3, [r7, #28]
 8013a76:	3301      	adds	r3, #1
 8013a78:	83bb      	strh	r3, [r7, #28]
      while (i < array_node->array_node_count) {
 8013a7a:	693b      	ldr	r3, [r7, #16]
 8013a7c:	8a1b      	ldrh	r3, [r3, #16]
 8013a7e:	8bba      	ldrh	r2, [r7, #28]
 8013a80:	429a      	cmp	r2, r3
 8013a82:	d3eb      	bcc.n	8013a5c <snmp_scalar_array_get_next_instance+0x80>
      }
    }
    if (result == NULL) {
 8013a84:	6a3b      	ldr	r3, [r7, #32]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d129      	bne.n	8013ade <snmp_scalar_array_get_next_instance+0x102>
      u32_t oid_dist = 0xFFFFFFFFUL;
 8013a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8013a8e:	61bb      	str	r3, [r7, #24]
      u16_t i        = 0;
 8013a90:	2300      	movs	r3, #0
 8013a92:	82fb      	strh	r3, [r7, #22]
      array_node_def = array_node->array_nodes; /* may be already at the end when if case before was executed without result -> reinitialize to start */
 8013a94:	693b      	ldr	r3, [r7, #16]
 8013a96:	695b      	ldr	r3, [r3, #20]
 8013a98:	627b      	str	r3, [r7, #36]	@ 0x24
      while (i < array_node->array_node_count) {
 8013a9a:	e01b      	b.n	8013ad4 <snmp_scalar_array_get_next_instance+0xf8>
        if ((array_node_def->oid > instance->instance_oid.id[0]) &&
 8013a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a9e:	681a      	ldr	r2, [r3, #0]
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	689b      	ldr	r3, [r3, #8]
 8013aa4:	429a      	cmp	r2, r3
 8013aa6:	d90f      	bls.n	8013ac8 <snmp_scalar_array_get_next_instance+0xec>
            ((u32_t)(array_node_def->oid - instance->instance_oid.id[0]) < oid_dist)) {
 8013aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013aaa:	681a      	ldr	r2, [r3, #0]
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	689b      	ldr	r3, [r3, #8]
 8013ab0:	1ad3      	subs	r3, r2, r3
        if ((array_node_def->oid > instance->instance_oid.id[0]) &&
 8013ab2:	69ba      	ldr	r2, [r7, #24]
 8013ab4:	429a      	cmp	r2, r3
 8013ab6:	d907      	bls.n	8013ac8 <snmp_scalar_array_get_next_instance+0xec>
          result   = array_node_def;
 8013ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013aba:	623b      	str	r3, [r7, #32]
          oid_dist = array_node_def->oid - instance->instance_oid.id[0];
 8013abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013abe:	681a      	ldr	r2, [r3, #0]
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	689b      	ldr	r3, [r3, #8]
 8013ac4:	1ad3      	subs	r3, r2, r3
 8013ac6:	61bb      	str	r3, [r7, #24]
        }

        array_node_def++;
 8013ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013aca:	3308      	adds	r3, #8
 8013acc:	627b      	str	r3, [r7, #36]	@ 0x24
        i++;
 8013ace:	8afb      	ldrh	r3, [r7, #22]
 8013ad0:	3301      	adds	r3, #1
 8013ad2:	82fb      	strh	r3, [r7, #22]
      while (i < array_node->array_node_count) {
 8013ad4:	693b      	ldr	r3, [r7, #16]
 8013ad6:	8a1b      	ldrh	r3, [r3, #16]
 8013ad8:	8afa      	ldrh	r2, [r7, #22]
 8013ada:	429a      	cmp	r2, r3
 8013adc:	d3de      	bcc.n	8013a9c <snmp_scalar_array_get_next_instance+0xc0>
      }
    }
  }

  if (result == NULL) {
 8013ade:	6a3b      	ldr	r3, [r7, #32]
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d101      	bne.n	8013ae8 <snmp_scalar_array_get_next_instance+0x10c>
    /* nothing to return */
    return SNMP_ERR_NOSUCHINSTANCE;
 8013ae4:	23f1      	movs	r3, #241	@ 0xf1
 8013ae6:	e024      	b.n	8013b32 <snmp_scalar_array_get_next_instance+0x156>
  }

  instance->instance_oid.len   = 2;
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	2202      	movs	r2, #2
 8013aec:	711a      	strb	r2, [r3, #4]
  instance->instance_oid.id[0] = result->oid;
 8013aee:	6a3b      	ldr	r3, [r7, #32]
 8013af0:	681a      	ldr	r2, [r3, #0]
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	609a      	str	r2, [r3, #8]
  instance->instance_oid.id[1] = 0;
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	2200      	movs	r2, #0
 8013afa:	60da      	str	r2, [r3, #12]
  
  instance->access              = result->access;
 8013afc:	6a3b      	ldr	r3, [r7, #32]
 8013afe:	795a      	ldrb	r2, [r3, #5]
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
  instance->asn1_type           = result->asn1_type;
 8013b06:	6a3b      	ldr	r3, [r7, #32]
 8013b08:	791a      	ldrb	r2, [r3, #4]
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
  instance->get_value           = snmp_scalar_array_get_value;
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	4a0a      	ldr	r2, [pc, #40]	@ (8013b3c <snmp_scalar_array_get_next_instance+0x160>)
 8013b14:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  instance->set_test            = snmp_scalar_array_set_test;
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	4a09      	ldr	r2, [pc, #36]	@ (8013b40 <snmp_scalar_array_get_next_instance+0x164>)
 8013b1c:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  instance->set_value           = snmp_scalar_array_set_value;
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	4a08      	ldr	r2, [pc, #32]	@ (8013b44 <snmp_scalar_array_get_next_instance+0x168>)
 8013b24:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  instance->reference.const_ptr = result;
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	6a3a      	ldr	r2, [r7, #32]
 8013b2c:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4

  return SNMP_ERR_NOERROR;
 8013b30:	2300      	movs	r3, #0
}
 8013b32:	4618      	mov	r0, r3
 8013b34:	372c      	adds	r7, #44	@ 0x2c
 8013b36:	46bd      	mov	sp, r7
 8013b38:	bc80      	pop	{r7}
 8013b3a:	4770      	bx	lr
 8013b3c:	08013b49 	.word	0x08013b49
 8013b40:	08013b75 	.word	0x08013b75
 8013b44:	08013ba7 	.word	0x08013ba7

08013b48 <snmp_scalar_array_get_value>:

static s16_t
snmp_scalar_array_get_value(struct snmp_node_instance* instance, void* value)
{
 8013b48:	b580      	push	{r7, lr}
 8013b4a:	b084      	sub	sp, #16
 8013b4c:	af00      	add	r7, sp, #0
 8013b4e:	6078      	str	r0, [r7, #4]
 8013b50:	6039      	str	r1, [r7, #0]
  const struct snmp_scalar_array_node* array_node = (const struct snmp_scalar_array_node*)(const void*)instance->node;
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	60fb      	str	r3, [r7, #12]
  const struct snmp_scalar_array_node_def* array_node_def = (const struct snmp_scalar_array_node_def*)instance->reference.const_ptr;
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8013b5e:	60bb      	str	r3, [r7, #8]

  return array_node->get_value(array_node_def, value);
 8013b60:	68fb      	ldr	r3, [r7, #12]
 8013b62:	699b      	ldr	r3, [r3, #24]
 8013b64:	6839      	ldr	r1, [r7, #0]
 8013b66:	68b8      	ldr	r0, [r7, #8]
 8013b68:	4798      	blx	r3
 8013b6a:	4603      	mov	r3, r0
}
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	3710      	adds	r7, #16
 8013b70:	46bd      	mov	sp, r7
 8013b72:	bd80      	pop	{r7, pc}

08013b74 <snmp_scalar_array_set_test>:

static snmp_err_t
snmp_scalar_array_set_test(struct snmp_node_instance* instance, u16_t value_len, void* value)
{
 8013b74:	b580      	push	{r7, lr}
 8013b76:	b086      	sub	sp, #24
 8013b78:	af00      	add	r7, sp, #0
 8013b7a:	60f8      	str	r0, [r7, #12]
 8013b7c:	460b      	mov	r3, r1
 8013b7e:	607a      	str	r2, [r7, #4]
 8013b80:	817b      	strh	r3, [r7, #10]
  const struct snmp_scalar_array_node* array_node = (const struct snmp_scalar_array_node*)(const void*)instance->node;
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	617b      	str	r3, [r7, #20]
  const struct snmp_scalar_array_node_def* array_node_def = (const struct snmp_scalar_array_node_def*)instance->reference.const_ptr;
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8013b8e:	613b      	str	r3, [r7, #16]

  return array_node->set_test(array_node_def, value_len, value);
 8013b90:	697b      	ldr	r3, [r7, #20]
 8013b92:	69db      	ldr	r3, [r3, #28]
 8013b94:	8979      	ldrh	r1, [r7, #10]
 8013b96:	687a      	ldr	r2, [r7, #4]
 8013b98:	6938      	ldr	r0, [r7, #16]
 8013b9a:	4798      	blx	r3
 8013b9c:	4603      	mov	r3, r0
}
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	3718      	adds	r7, #24
 8013ba2:	46bd      	mov	sp, r7
 8013ba4:	bd80      	pop	{r7, pc}

08013ba6 <snmp_scalar_array_set_value>:

static snmp_err_t
snmp_scalar_array_set_value(struct snmp_node_instance* instance, u16_t value_len, void* value)
{
 8013ba6:	b580      	push	{r7, lr}
 8013ba8:	b086      	sub	sp, #24
 8013baa:	af00      	add	r7, sp, #0
 8013bac:	60f8      	str	r0, [r7, #12]
 8013bae:	460b      	mov	r3, r1
 8013bb0:	607a      	str	r2, [r7, #4]
 8013bb2:	817b      	strh	r3, [r7, #10]
  const struct snmp_scalar_array_node* array_node = (const struct snmp_scalar_array_node*)(const void*)instance->node;
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	617b      	str	r3, [r7, #20]
  const struct snmp_scalar_array_node_def* array_node_def = (const struct snmp_scalar_array_node_def*)instance->reference.const_ptr;
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8013bc0:	613b      	str	r3, [r7, #16]

  return array_node->set_value(array_node_def, value_len, value);
 8013bc2:	697b      	ldr	r3, [r7, #20]
 8013bc4:	6a1b      	ldr	r3, [r3, #32]
 8013bc6:	8979      	ldrh	r1, [r7, #10]
 8013bc8:	687a      	ldr	r2, [r7, #4]
 8013bca:	6938      	ldr	r0, [r7, #16]
 8013bcc:	4798      	blx	r3
 8013bce:	4603      	mov	r3, r0
}
 8013bd0:	4618      	mov	r0, r3
 8013bd2:	3718      	adds	r7, #24
 8013bd4:	46bd      	mov	sp, r7
 8013bd6:	bd80      	pop	{r7, pc}

08013bd8 <snmp_table_get_instance>:
#include "lwip/apps/snmp_core.h"
#include "lwip/apps/snmp_table.h"
#include <string.h>

snmp_err_t snmp_table_get_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance* instance)
{
 8013bd8:	b590      	push	{r4, r7, lr}
 8013bda:	b089      	sub	sp, #36	@ 0x24
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	60f8      	str	r0, [r7, #12]
 8013be0:	460b      	mov	r3, r1
 8013be2:	607a      	str	r2, [r7, #4]
 8013be4:	72fb      	strb	r3, [r7, #11]
  snmp_err_t ret = SNMP_ERR_NOSUCHINSTANCE;
 8013be6:	23f1      	movs	r3, #241	@ 0xf1
 8013be8:	77fb      	strb	r3, [r7, #31]
  const struct snmp_table_node* table_node = (const struct snmp_table_node*)(const void*)instance->node;
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	613b      	str	r3, [r7, #16]
  LWIP_UNUSED_ARG(root_oid);
  LWIP_UNUSED_ARG(root_oid_len);

  /* check min. length (fixed row entry definition, column, row instance oid with at least one entry */
  /* fixed row entry always has oid 1 */
  if ((instance->instance_oid.len >= 3) && (instance->instance_oid.id[0] == 1)) {
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	791b      	ldrb	r3, [r3, #4]
 8013bf4:	2b02      	cmp	r3, #2
 8013bf6:	d947      	bls.n	8013c88 <snmp_table_get_instance+0xb0>
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	689b      	ldr	r3, [r3, #8]
 8013bfc:	2b01      	cmp	r3, #1
 8013bfe:	d143      	bne.n	8013c88 <snmp_table_get_instance+0xb0>
    /* search column */
    const struct snmp_table_col_def* col_def = table_node->columns;
 8013c00:	693b      	ldr	r3, [r7, #16]
 8013c02:	695b      	ldr	r3, [r3, #20]
 8013c04:	61bb      	str	r3, [r7, #24]
    u16_t i = table_node->column_count;
 8013c06:	693b      	ldr	r3, [r7, #16]
 8013c08:	8a1b      	ldrh	r3, [r3, #16]
 8013c0a:	82fb      	strh	r3, [r7, #22]
    while (i > 0) {
 8013c0c:	e00b      	b.n	8013c26 <snmp_table_get_instance+0x4e>
      if (col_def->index == instance->instance_oid.id[1]) {
 8013c0e:	69bb      	ldr	r3, [r7, #24]
 8013c10:	681a      	ldr	r2, [r3, #0]
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	68db      	ldr	r3, [r3, #12]
 8013c16:	429a      	cmp	r2, r3
 8013c18:	d009      	beq.n	8013c2e <snmp_table_get_instance+0x56>
        break;
      }
      
      col_def++;
 8013c1a:	69bb      	ldr	r3, [r7, #24]
 8013c1c:	3308      	adds	r3, #8
 8013c1e:	61bb      	str	r3, [r7, #24]
      i--;
 8013c20:	8afb      	ldrh	r3, [r7, #22]
 8013c22:	3b01      	subs	r3, #1
 8013c24:	82fb      	strh	r3, [r7, #22]
    while (i > 0) {
 8013c26:	8afb      	ldrh	r3, [r7, #22]
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d1f0      	bne.n	8013c0e <snmp_table_get_instance+0x36>
 8013c2c:	e000      	b.n	8013c30 <snmp_table_get_instance+0x58>
        break;
 8013c2e:	bf00      	nop
    }

    if (i > 0) {
 8013c30:	8afb      	ldrh	r3, [r7, #22]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d028      	beq.n	8013c88 <snmp_table_get_instance+0xb0>
      /* everything may be overwritten by get_cell_instance_method() in order to implement special handling for single columns/cells */
      instance->asn1_type = col_def->asn1_type;
 8013c36:	69bb      	ldr	r3, [r7, #24]
 8013c38:	791a      	ldrb	r2, [r3, #4]
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
      instance->access    = col_def->access;
 8013c40:	69bb      	ldr	r3, [r7, #24]
 8013c42:	795a      	ldrb	r2, [r3, #5]
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
      instance->get_value = table_node->get_value;
 8013c4a:	693b      	ldr	r3, [r7, #16]
 8013c4c:	6a1a      	ldr	r2, [r3, #32]
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
      instance->set_test  = table_node->set_test;
 8013c54:	693b      	ldr	r3, [r7, #16]
 8013c56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
      instance->set_value = table_node->set_value;
 8013c5e:	693b      	ldr	r3, [r7, #16]
 8013c60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

      ret = table_node->get_cell_instance(
 8013c68:	693b      	ldr	r3, [r7, #16]
 8013c6a:	699c      	ldr	r4, [r3, #24]
        &(instance->instance_oid.id[1]),
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	f103 000c 	add.w	r0, r3, #12
        &(instance->instance_oid.id[2]),
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	f103 0110 	add.w	r1, r3, #16
        instance->instance_oid.len-2,
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	791b      	ldrb	r3, [r3, #4]
      ret = table_node->get_cell_instance(
 8013c7c:	3b02      	subs	r3, #2
 8013c7e:	b2da      	uxtb	r2, r3
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	47a0      	blx	r4
 8013c84:	4603      	mov	r3, r0
 8013c86:	77fb      	strb	r3, [r7, #31]
        instance);
    }
  }

  return ret;
 8013c88:	7ffb      	ldrb	r3, [r7, #31]
}
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	3724      	adds	r7, #36	@ 0x24
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	bd90      	pop	{r4, r7, pc}

08013c92 <snmp_table_get_next_instance>:

snmp_err_t snmp_table_get_next_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance* instance)
{
 8013c92:	b580      	push	{r7, lr}
 8013c94:	b0be      	sub	sp, #248	@ 0xf8
 8013c96:	af00      	add	r7, sp, #0
 8013c98:	60f8      	str	r0, [r7, #12]
 8013c9a:	460b      	mov	r3, r1
 8013c9c:	607a      	str	r2, [r7, #4]
 8013c9e:	72fb      	strb	r3, [r7, #11]
  const struct snmp_table_node* table_node = (const struct snmp_table_node*)(const void*)instance->node;
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  const struct snmp_table_col_def* col_def;
  struct snmp_obj_id row_oid;
  u32_t column = 0;
 8013ca8:	2300      	movs	r3, #0
 8013caa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

  LWIP_UNUSED_ARG(root_oid);
  LWIP_UNUSED_ARG(root_oid_len);

  /* check that first part of id is 0 or 1, referencing fixed row entry */
  if ((instance->instance_oid.len > 0) && (instance->instance_oid.id[0] > 1)) {
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	791b      	ldrb	r3, [r3, #4]
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d005      	beq.n	8013cc2 <snmp_table_get_next_instance+0x30>
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	689b      	ldr	r3, [r3, #8]
 8013cba:	2b01      	cmp	r3, #1
 8013cbc:	d901      	bls.n	8013cc2 <snmp_table_get_next_instance+0x30>
    return SNMP_ERR_NOSUCHINSTANCE;
 8013cbe:	23f1      	movs	r3, #241	@ 0xf1
 8013cc0:	e0b2      	b.n	8013e28 <snmp_table_get_next_instance+0x196>
  }
  if (instance->instance_oid.len > 1) {
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	791b      	ldrb	r3, [r3, #4]
 8013cc6:	2b01      	cmp	r3, #1
 8013cc8:	d903      	bls.n	8013cd2 <snmp_table_get_next_instance+0x40>
    column = instance->instance_oid.id[1];
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	68db      	ldr	r3, [r3, #12]
 8013cce:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  }
  if (instance->instance_oid.len > 2) {
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	791b      	ldrb	r3, [r3, #4]
 8013cd6:	2b02      	cmp	r3, #2
 8013cd8:	d90c      	bls.n	8013cf4 <snmp_table_get_next_instance+0x62>
    snmp_oid_assign(&row_oid, &(instance->instance_oid.id[2]), instance->instance_oid.len - 2);
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	f103 0110 	add.w	r1, r3, #16
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	791b      	ldrb	r3, [r3, #4]
 8013ce4:	3b02      	subs	r3, #2
 8013ce6:	b2da      	uxtb	r2, r3
 8013ce8:	f107 0314 	add.w	r3, r7, #20
 8013cec:	4618      	mov	r0, r3
 8013cee:	f7fa fd73 	bl	800e7d8 <snmp_oid_assign>
 8013cf2:	e001      	b.n	8013cf8 <snmp_table_get_next_instance+0x66>
  } else {
    row_oid.len = 0;
 8013cf4:	2300      	movs	r3, #0
 8013cf6:	753b      	strb	r3, [r7, #20]
  }

  instance->get_value    = table_node->get_value;
 8013cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013cfc:	6a1a      	ldr	r2, [r3, #32]
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  instance->set_test     = table_node->set_test;
 8013d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013d08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  instance->set_value    = table_node->set_value;
 8013d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013d14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /* resolve column and value */
  do {
    u16_t i;
    const struct snmp_table_col_def* next_col_def = NULL;
 8013d1c:	2300      	movs	r3, #0
 8013d1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    col_def = table_node->columns;
 8013d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013d26:	695b      	ldr	r3, [r3, #20]
 8013d28:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

    for (i = 0; i < table_node->column_count; i++) {
 8013d2c:	2300      	movs	r3, #0
 8013d2e:	f8a7 30ee 	strh.w	r3, [r7, #238]	@ 0xee
 8013d32:	e02c      	b.n	8013d8e <snmp_table_get_next_instance+0xfc>
      if (col_def->index == column) {
 8013d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8013d3e:	429a      	cmp	r2, r3
 8013d40:	d104      	bne.n	8013d4c <snmp_table_get_next_instance+0xba>
        next_col_def = col_def;
 8013d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013d46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
        break;
 8013d4a:	e027      	b.n	8013d9c <snmp_table_get_next_instance+0x10a>
      } else if ((col_def->index > column) && ((next_col_def == NULL) || (col_def->index < next_col_def->index))) {
 8013d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8013d56:	429a      	cmp	r2, r3
 8013d58:	d20f      	bcs.n	8013d7a <snmp_table_get_next_instance+0xe8>
 8013d5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d007      	beq.n	8013d72 <snmp_table_get_next_instance+0xe0>
 8013d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013d66:	681a      	ldr	r2, [r3, #0]
 8013d68:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	429a      	cmp	r2, r3
 8013d70:	d203      	bcs.n	8013d7a <snmp_table_get_next_instance+0xe8>
        next_col_def = col_def;
 8013d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013d76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
      }
      col_def++;
 8013d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013d7e:	3308      	adds	r3, #8
 8013d80:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    for (i = 0; i < table_node->column_count; i++) {
 8013d84:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	@ 0xee
 8013d88:	3301      	adds	r3, #1
 8013d8a:	f8a7 30ee 	strh.w	r3, [r7, #238]	@ 0xee
 8013d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013d92:	8a1b      	ldrh	r3, [r3, #16]
 8013d94:	f8b7 20ee 	ldrh.w	r2, [r7, #238]	@ 0xee
 8013d98:	429a      	cmp	r2, r3
 8013d9a:	d3cb      	bcc.n	8013d34 <snmp_table_get_next_instance+0xa2>
    }

    if (next_col_def == NULL) {
 8013d9c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d101      	bne.n	8013da8 <snmp_table_get_next_instance+0x116>
      /* no further column found */
      return SNMP_ERR_NOSUCHINSTANCE;
 8013da4:	23f1      	movs	r3, #241	@ 0xf1
 8013da6:	e03f      	b.n	8013e28 <snmp_table_get_next_instance+0x196>
    }

    instance->asn1_type          = next_col_def->asn1_type;
 8013da8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8013dac:	791a      	ldrb	r2, [r3, #4]
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
    instance->access             = next_col_def->access;
 8013db4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8013db8:	795a      	ldrb	r2, [r3, #5]
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1

    result = table_node->get_next_cell_instance(
 8013dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013dc4:	69db      	ldr	r3, [r3, #28]
 8013dc6:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 8013dca:	f107 0114 	add.w	r1, r7, #20
 8013dce:	687a      	ldr	r2, [r7, #4]
 8013dd0:	4798      	blx	r3
 8013dd2:	4603      	mov	r3, r0
 8013dd4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      &next_col_def->index,
      &row_oid,
      instance);

    if (result == SNMP_ERR_NOERROR) {
 8013dd8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d11a      	bne.n	8013e16 <snmp_table_get_next_instance+0x184>
      col_def = next_col_def;
 8013de0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8013de4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
      break;
 8013de8:	bf00      	nop
    row_oid.len = 0; /* reset row_oid because we switch to next column and start with the first entry there */
    column = next_col_def->index + 1;
  } while (1);

  /* build resulting oid */
  instance->instance_oid.len   = 2;
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	2202      	movs	r2, #2
 8013dee:	711a      	strb	r2, [r3, #4]
  instance->instance_oid.id[0] = 1;
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	2201      	movs	r2, #1
 8013df4:	609a      	str	r2, [r3, #8]
  instance->instance_oid.id[1] = col_def->index;
 8013df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013dfa:	681a      	ldr	r2, [r3, #0]
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	60da      	str	r2, [r3, #12]
  snmp_oid_append(&instance->instance_oid, row_oid.id, row_oid.len);
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	1d18      	adds	r0, r3, #4
 8013e04:	7d3a      	ldrb	r2, [r7, #20]
 8013e06:	f107 0314 	add.w	r3, r7, #20
 8013e0a:	3304      	adds	r3, #4
 8013e0c:	4619      	mov	r1, r3
 8013e0e:	f7fa fd0d 	bl	800e82c <snmp_oid_append>

  return SNMP_ERR_NOERROR;
 8013e12:	2300      	movs	r3, #0
 8013e14:	e008      	b.n	8013e28 <snmp_table_get_next_instance+0x196>
    row_oid.len = 0; /* reset row_oid because we switch to next column and start with the first entry there */
 8013e16:	2300      	movs	r3, #0
 8013e18:	753b      	strb	r3, [r7, #20]
    column = next_col_def->index + 1;
 8013e1a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	3301      	adds	r3, #1
 8013e22:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  do {
 8013e26:	e779      	b.n	8013d1c <snmp_table_get_next_instance+0x8a>
}
 8013e28:	4618      	mov	r0, r3
 8013e2a:	37f8      	adds	r7, #248	@ 0xf8
 8013e2c:	46bd      	mov	sp, r7
 8013e2e:	bd80      	pop	{r7, pc}

08013e30 <snmp_table_simple_get_instance>:


snmp_err_t snmp_table_simple_get_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance* instance)
{
 8013e30:	b5b0      	push	{r4, r5, r7, lr}
 8013e32:	b08a      	sub	sp, #40	@ 0x28
 8013e34:	af02      	add	r7, sp, #8
 8013e36:	60f8      	str	r0, [r7, #12]
 8013e38:	460b      	mov	r3, r1
 8013e3a:	607a      	str	r2, [r7, #4]
 8013e3c:	72fb      	strb	r3, [r7, #11]
  snmp_err_t ret = SNMP_ERR_NOSUCHINSTANCE;
 8013e3e:	23f1      	movs	r3, #241	@ 0xf1
 8013e40:	77fb      	strb	r3, [r7, #31]
  const struct snmp_table_simple_node* table_node = (const struct snmp_table_simple_node*)(const void*)instance->node;
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	613b      	str	r3, [r7, #16]
  LWIP_UNUSED_ARG(root_oid);
  LWIP_UNUSED_ARG(root_oid_len);

  /* check min. length (fixed row entry definition, column, row instance oid with at least one entry */
  /* fixed row entry always has oid 1 */
  if ((instance->instance_oid.len >= 3) && (instance->instance_oid.id[0] == 1)) {
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	791b      	ldrb	r3, [r3, #4]
 8013e4c:	2b02      	cmp	r3, #2
 8013e4e:	d969      	bls.n	8013f24 <snmp_table_simple_get_instance+0xf4>
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	689b      	ldr	r3, [r3, #8]
 8013e54:	2b01      	cmp	r3, #1
 8013e56:	d165      	bne.n	8013f24 <snmp_table_simple_get_instance+0xf4>
    ret = table_node->get_cell_value(
 8013e58:	693b      	ldr	r3, [r7, #16]
 8013e5a:	699c      	ldr	r4, [r3, #24]
      &(instance->instance_oid.id[1]),
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	f103 000c 	add.w	r0, r3, #12
      &(instance->instance_oid.id[2]),
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	f103 0110 	add.w	r1, r3, #16
      instance->instance_oid.len-2,
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	791b      	ldrb	r3, [r3, #4]
    ret = table_node->get_cell_value(
 8013e6c:	3b02      	subs	r3, #2
 8013e6e:	b2da      	uxtb	r2, r3
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	f103 05e4 	add.w	r5, r3, #228	@ 0xe4
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	33e8      	adds	r3, #232	@ 0xe8
 8013e7a:	9300      	str	r3, [sp, #0]
 8013e7c:	462b      	mov	r3, r5
 8013e7e:	47a0      	blx	r4
 8013e80:	4603      	mov	r3, r0
 8013e82:	77fb      	strb	r3, [r7, #31]
      &instance->reference,
      &instance->reference_len);

    if (ret == SNMP_ERR_NOERROR) {
 8013e84:	7ffb      	ldrb	r3, [r7, #31]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d14c      	bne.n	8013f24 <snmp_table_simple_get_instance+0xf4>
      /* search column */
      const struct snmp_table_simple_col_def* col_def = table_node->columns;
 8013e8a:	693b      	ldr	r3, [r7, #16]
 8013e8c:	695b      	ldr	r3, [r3, #20]
 8013e8e:	61bb      	str	r3, [r7, #24]
      u32_t i = table_node->column_count;
 8013e90:	693b      	ldr	r3, [r7, #16]
 8013e92:	8a1b      	ldrh	r3, [r3, #16]
 8013e94:	617b      	str	r3, [r7, #20]
      while (i > 0) {
 8013e96:	e00b      	b.n	8013eb0 <snmp_table_simple_get_instance+0x80>
        if (col_def->index == instance->instance_oid.id[1]) {
 8013e98:	69bb      	ldr	r3, [r7, #24]
 8013e9a:	681a      	ldr	r2, [r3, #0]
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	68db      	ldr	r3, [r3, #12]
 8013ea0:	429a      	cmp	r2, r3
 8013ea2:	d009      	beq.n	8013eb8 <snmp_table_simple_get_instance+0x88>
          break;
        }

        col_def++;
 8013ea4:	69bb      	ldr	r3, [r7, #24]
 8013ea6:	3308      	adds	r3, #8
 8013ea8:	61bb      	str	r3, [r7, #24]
        i--;
 8013eaa:	697b      	ldr	r3, [r7, #20]
 8013eac:	3b01      	subs	r3, #1
 8013eae:	617b      	str	r3, [r7, #20]
      while (i > 0) {
 8013eb0:	697b      	ldr	r3, [r7, #20]
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d1f0      	bne.n	8013e98 <snmp_table_simple_get_instance+0x68>
 8013eb6:	e000      	b.n	8013eba <snmp_table_simple_get_instance+0x8a>
          break;
 8013eb8:	bf00      	nop
      }

      if (i > 0) {
 8013eba:	697b      	ldr	r3, [r7, #20]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d02f      	beq.n	8013f20 <snmp_table_simple_get_instance+0xf0>
        instance->asn1_type = col_def->asn1_type;
 8013ec0:	69bb      	ldr	r3, [r7, #24]
 8013ec2:	791a      	ldrb	r2, [r3, #4]
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
        instance->access    = SNMP_NODE_INSTANCE_READ_ONLY;
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	2201      	movs	r2, #1
 8013ece:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
        instance->set_test  = NULL;
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	2200      	movs	r2, #0
 8013ed6:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        instance->set_value = NULL;
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	2200      	movs	r2, #0
 8013ede:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

        switch (col_def->data_type) {
 8013ee2:	69bb      	ldr	r3, [r7, #24]
 8013ee4:	795b      	ldrb	r3, [r3, #5]
 8013ee6:	2b03      	cmp	r3, #3
 8013ee8:	dc15      	bgt.n	8013f16 <snmp_table_simple_get_instance+0xe6>
 8013eea:	2b02      	cmp	r3, #2
 8013eec:	da0e      	bge.n	8013f0c <snmp_table_simple_get_instance+0xdc>
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d002      	beq.n	8013ef8 <snmp_table_simple_get_instance+0xc8>
 8013ef2:	2b01      	cmp	r3, #1
 8013ef4:	d005      	beq.n	8013f02 <snmp_table_simple_get_instance+0xd2>
 8013ef6:	e00e      	b.n	8013f16 <snmp_table_simple_get_instance+0xe6>
          case SNMP_VARIANT_VALUE_TYPE_U32:
            instance->get_value = snmp_table_extract_value_from_u32ref;
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	4a0d      	ldr	r2, [pc, #52]	@ (8013f30 <snmp_table_simple_get_instance+0x100>)
 8013efc:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
            break;
 8013f00:	e00b      	b.n	8013f1a <snmp_table_simple_get_instance+0xea>
          case SNMP_VARIANT_VALUE_TYPE_S32:
            instance->get_value = snmp_table_extract_value_from_s32ref;
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	4a0b      	ldr	r2, [pc, #44]	@ (8013f34 <snmp_table_simple_get_instance+0x104>)
 8013f06:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
            break;
 8013f0a:	e006      	b.n	8013f1a <snmp_table_simple_get_instance+0xea>
          case SNMP_VARIANT_VALUE_TYPE_PTR: /* fall through */
          case SNMP_VARIANT_VALUE_TYPE_CONST_PTR:
            instance->get_value = snmp_table_extract_value_from_refconstptr;
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8013f38 <snmp_table_simple_get_instance+0x108>)
 8013f10:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
            break;
 8013f14:	e001      	b.n	8013f1a <snmp_table_simple_get_instance+0xea>
          default:
            LWIP_DEBUGF(SNMP_DEBUG, ("snmp_table_simple_get_instance(): unknown column data_type: %d\n", col_def->data_type));
            return SNMP_ERR_GENERROR;
 8013f16:	2305      	movs	r3, #5
 8013f18:	e005      	b.n	8013f26 <snmp_table_simple_get_instance+0xf6>
        }        

        ret = SNMP_ERR_NOERROR;
 8013f1a:	2300      	movs	r3, #0
 8013f1c:	77fb      	strb	r3, [r7, #31]
 8013f1e:	e001      	b.n	8013f24 <snmp_table_simple_get_instance+0xf4>
      } else {
        ret = SNMP_ERR_NOSUCHINSTANCE;
 8013f20:	23f1      	movs	r3, #241	@ 0xf1
 8013f22:	77fb      	strb	r3, [r7, #31]
      }
    } 
  }

  return ret;
 8013f24:	7ffb      	ldrb	r3, [r7, #31]
}
 8013f26:	4618      	mov	r0, r3
 8013f28:	3720      	adds	r7, #32
 8013f2a:	46bd      	mov	sp, r7
 8013f2c:	bdb0      	pop	{r4, r5, r7, pc}
 8013f2e:	bf00      	nop
 8013f30:	08014139 	.word	0x08014139
 8013f34:	08014115 	.word	0x08014115
 8013f38:	0801415d 	.word	0x0801415d

08013f3c <snmp_table_simple_get_next_instance>:

snmp_err_t snmp_table_simple_get_next_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance* instance)
{
 8013f3c:	b590      	push	{r4, r7, lr}
 8013f3e:	b0bf      	sub	sp, #252	@ 0xfc
 8013f40:	af00      	add	r7, sp, #0
 8013f42:	60f8      	str	r0, [r7, #12]
 8013f44:	460b      	mov	r3, r1
 8013f46:	607a      	str	r2, [r7, #4]
 8013f48:	72fb      	strb	r3, [r7, #11]
  const struct snmp_table_simple_node* table_node = (const struct snmp_table_simple_node*)(const void*)instance->node;
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  const struct snmp_table_simple_col_def* col_def;
  struct snmp_obj_id row_oid;
  u32_t column = 0;
 8013f52:	2300      	movs	r3, #0
 8013f54:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

  LWIP_UNUSED_ARG(root_oid);
  LWIP_UNUSED_ARG(root_oid_len);

  /* check that first part of id is 0 or 1, referencing fixed row entry */
  if ((instance->instance_oid.len > 0) && (instance->instance_oid.id[0] > 1)) {
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	791b      	ldrb	r3, [r3, #4]
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d005      	beq.n	8013f6c <snmp_table_simple_get_next_instance+0x30>
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	689b      	ldr	r3, [r3, #8]
 8013f64:	2b01      	cmp	r3, #1
 8013f66:	d901      	bls.n	8013f6c <snmp_table_simple_get_next_instance+0x30>
    return SNMP_ERR_NOSUCHINSTANCE;
 8013f68:	23f1      	movs	r3, #241	@ 0xf1
 8013f6a:	e0c8      	b.n	80140fe <snmp_table_simple_get_next_instance+0x1c2>
  }
  if (instance->instance_oid.len > 1) {
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	791b      	ldrb	r3, [r3, #4]
 8013f70:	2b01      	cmp	r3, #1
 8013f72:	d903      	bls.n	8013f7c <snmp_table_simple_get_next_instance+0x40>
    column = instance->instance_oid.id[1];
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	68db      	ldr	r3, [r3, #12]
 8013f78:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  }
  if (instance->instance_oid.len > 2) {
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	791b      	ldrb	r3, [r3, #4]
 8013f80:	2b02      	cmp	r3, #2
 8013f82:	d90c      	bls.n	8013f9e <snmp_table_simple_get_next_instance+0x62>
    snmp_oid_assign(&row_oid, &(instance->instance_oid.id[2]), instance->instance_oid.len - 2);
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	f103 0110 	add.w	r1, r3, #16
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	791b      	ldrb	r3, [r3, #4]
 8013f8e:	3b02      	subs	r3, #2
 8013f90:	b2da      	uxtb	r2, r3
 8013f92:	f107 0314 	add.w	r3, r7, #20
 8013f96:	4618      	mov	r0, r3
 8013f98:	f7fa fc1e 	bl	800e7d8 <snmp_oid_assign>
 8013f9c:	e001      	b.n	8013fa2 <snmp_table_simple_get_next_instance+0x66>
  } else {
    row_oid.len = 0;
 8013f9e:	2300      	movs	r3, #0
 8013fa0:	753b      	strb	r3, [r7, #20]
  }

  /* resolve column and value */
  do {
    u32_t i;
    const struct snmp_table_simple_col_def* next_col_def = NULL;
 8013fa2:	2300      	movs	r3, #0
 8013fa4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    col_def = table_node->columns;
 8013fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013fac:	695b      	ldr	r3, [r3, #20]
 8013fae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

    for (i = 0; i < table_node->column_count; i++) {
 8013fb2:	2300      	movs	r3, #0
 8013fb4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8013fb8:	e02c      	b.n	8014014 <snmp_table_simple_get_next_instance+0xd8>
      if (col_def->index == column) {
 8013fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8013fc4:	429a      	cmp	r2, r3
 8013fc6:	d104      	bne.n	8013fd2 <snmp_table_simple_get_next_instance+0x96>
        next_col_def = col_def;
 8013fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013fcc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
        break;
 8013fd0:	e028      	b.n	8014024 <snmp_table_simple_get_next_instance+0xe8>
      } else if ((col_def->index > column) && ((next_col_def == NULL) ||
 8013fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8013fdc:	429a      	cmp	r2, r3
 8013fde:	d20f      	bcs.n	8014000 <snmp_table_simple_get_next_instance+0xc4>
 8013fe0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d007      	beq.n	8013ff8 <snmp_table_simple_get_next_instance+0xbc>
                 (col_def->index < next_col_def->index))) {
 8013fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013fec:	681a      	ldr	r2, [r3, #0]
 8013fee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8013ff2:	681b      	ldr	r3, [r3, #0]
      } else if ((col_def->index > column) && ((next_col_def == NULL) ||
 8013ff4:	429a      	cmp	r2, r3
 8013ff6:	d203      	bcs.n	8014000 <snmp_table_simple_get_next_instance+0xc4>
        next_col_def = col_def;
 8013ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8013ffc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
      }
      col_def++;
 8014000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014004:	3308      	adds	r3, #8
 8014006:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    for (i = 0; i < table_node->column_count; i++) {
 801400a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801400e:	3301      	adds	r3, #1
 8014010:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8014014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014018:	8a1b      	ldrh	r3, [r3, #16]
 801401a:	461a      	mov	r2, r3
 801401c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8014020:	4293      	cmp	r3, r2
 8014022:	d3ca      	bcc.n	8013fba <snmp_table_simple_get_next_instance+0x7e>
    }

    if (next_col_def == NULL) {
 8014024:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8014028:	2b00      	cmp	r3, #0
 801402a:	d101      	bne.n	8014030 <snmp_table_simple_get_next_instance+0xf4>
      /* no further column found */
      return SNMP_ERR_NOSUCHINSTANCE;
 801402c:	23f1      	movs	r3, #241	@ 0xf1
 801402e:	e066      	b.n	80140fe <snmp_table_simple_get_next_instance+0x1c2>
    }

    result = table_node->get_next_cell_instance_and_value(
 8014030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014034:	69dc      	ldr	r4, [r3, #28]
 8014036:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	f103 02e4 	add.w	r2, r3, #228	@ 0xe4
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	33e8      	adds	r3, #232	@ 0xe8
 8014044:	f107 0114 	add.w	r1, r7, #20
 8014048:	47a0      	blx	r4
 801404a:	4603      	mov	r3, r0
 801404c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      &next_col_def->index,
      &row_oid,
      &instance->reference,
      &instance->reference_len);

    if (result == SNMP_ERR_NOERROR) {
 8014050:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8014054:	2b00      	cmp	r3, #0
 8014056:	d11c      	bne.n	8014092 <snmp_table_simple_get_next_instance+0x156>
      col_def = next_col_def;
 8014058:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801405c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
      break;
 8014060:	bf00      	nop
    row_oid.len = 0; /* reset row_oid because we switch to next column and start with the first entry there */
    column = next_col_def->index + 1;
  }
  while (1);

  instance->asn1_type = col_def->asn1_type;
 8014062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014066:	791a      	ldrb	r2, [r3, #4]
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
  instance->access    = SNMP_NODE_INSTANCE_READ_ONLY;
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	2201      	movs	r2, #1
 8014072:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
  instance->set_test  = NULL;
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	2200      	movs	r2, #0
 801407a:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  instance->set_value = NULL;
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	2200      	movs	r2, #0
 8014082:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  switch (col_def->data_type) {
 8014086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801408a:	795b      	ldrb	r3, [r3, #5]
 801408c:	2b03      	cmp	r3, #3
 801408e:	dc1f      	bgt.n	80140d0 <snmp_table_simple_get_next_instance+0x194>
 8014090:	e008      	b.n	80140a4 <snmp_table_simple_get_next_instance+0x168>
    row_oid.len = 0; /* reset row_oid because we switch to next column and start with the first entry there */
 8014092:	2300      	movs	r3, #0
 8014094:	753b      	strb	r3, [r7, #20]
    column = next_col_def->index + 1;
 8014096:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801409a:	681b      	ldr	r3, [r3, #0]
 801409c:	3301      	adds	r3, #1
 801409e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  do {
 80140a2:	e77e      	b.n	8013fa2 <snmp_table_simple_get_next_instance+0x66>
  switch (col_def->data_type) {
 80140a4:	2b02      	cmp	r3, #2
 80140a6:	da0e      	bge.n	80140c6 <snmp_table_simple_get_next_instance+0x18a>
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d002      	beq.n	80140b2 <snmp_table_simple_get_next_instance+0x176>
 80140ac:	2b01      	cmp	r3, #1
 80140ae:	d005      	beq.n	80140bc <snmp_table_simple_get_next_instance+0x180>
 80140b0:	e00e      	b.n	80140d0 <snmp_table_simple_get_next_instance+0x194>
    case SNMP_VARIANT_VALUE_TYPE_U32:
      instance->get_value = snmp_table_extract_value_from_u32ref;
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	4a14      	ldr	r2, [pc, #80]	@ (8014108 <snmp_table_simple_get_next_instance+0x1cc>)
 80140b6:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
      break;
 80140ba:	e00b      	b.n	80140d4 <snmp_table_simple_get_next_instance+0x198>
    case SNMP_VARIANT_VALUE_TYPE_S32:
      instance->get_value = snmp_table_extract_value_from_s32ref;
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	4a13      	ldr	r2, [pc, #76]	@ (801410c <snmp_table_simple_get_next_instance+0x1d0>)
 80140c0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
      break;
 80140c4:	e006      	b.n	80140d4 <snmp_table_simple_get_next_instance+0x198>
    case SNMP_VARIANT_VALUE_TYPE_PTR: /* fall through */
    case SNMP_VARIANT_VALUE_TYPE_CONST_PTR:
      instance->get_value = snmp_table_extract_value_from_refconstptr;
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	4a11      	ldr	r2, [pc, #68]	@ (8014110 <snmp_table_simple_get_next_instance+0x1d4>)
 80140ca:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
      break;
 80140ce:	e001      	b.n	80140d4 <snmp_table_simple_get_next_instance+0x198>
    default:
      LWIP_DEBUGF(SNMP_DEBUG, ("snmp_table_simple_get_instance(): unknown column data_type: %d\n", col_def->data_type));
      return SNMP_ERR_GENERROR;
 80140d0:	2305      	movs	r3, #5
 80140d2:	e014      	b.n	80140fe <snmp_table_simple_get_next_instance+0x1c2>
  }

  /* build resulting oid */
  instance->instance_oid.len   = 2;
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	2202      	movs	r2, #2
 80140d8:	711a      	strb	r2, [r3, #4]
  instance->instance_oid.id[0] = 1;
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	2201      	movs	r2, #1
 80140de:	609a      	str	r2, [r3, #8]
  instance->instance_oid.id[1] = col_def->index;
 80140e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80140e4:	681a      	ldr	r2, [r3, #0]
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	60da      	str	r2, [r3, #12]
  snmp_oid_append(&instance->instance_oid, row_oid.id, row_oid.len);
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	1d18      	adds	r0, r3, #4
 80140ee:	7d3a      	ldrb	r2, [r7, #20]
 80140f0:	f107 0314 	add.w	r3, r7, #20
 80140f4:	3304      	adds	r3, #4
 80140f6:	4619      	mov	r1, r3
 80140f8:	f7fa fb98 	bl	800e82c <snmp_oid_append>

  return SNMP_ERR_NOERROR;
 80140fc:	2300      	movs	r3, #0
}
 80140fe:	4618      	mov	r0, r3
 8014100:	37fc      	adds	r7, #252	@ 0xfc
 8014102:	46bd      	mov	sp, r7
 8014104:	bd90      	pop	{r4, r7, pc}
 8014106:	bf00      	nop
 8014108:	08014139 	.word	0x08014139
 801410c:	08014115 	.word	0x08014115
 8014110:	0801415d 	.word	0x0801415d

08014114 <snmp_table_extract_value_from_s32ref>:


s16_t
snmp_table_extract_value_from_s32ref(struct snmp_node_instance* instance, void* value)
{
 8014114:	b480      	push	{r7}
 8014116:	b085      	sub	sp, #20
 8014118:	af00      	add	r7, sp, #0
 801411a:	6078      	str	r0, [r7, #4]
 801411c:	6039      	str	r1, [r7, #0]
  s32_t *dst = (s32_t*)value;
 801411e:	683b      	ldr	r3, [r7, #0]
 8014120:	60fb      	str	r3, [r7, #12]
  *dst = instance->reference.s32;
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8014128:	68fb      	ldr	r3, [r7, #12]
 801412a:	601a      	str	r2, [r3, #0]
  return sizeof(*dst);
 801412c:	2304      	movs	r3, #4
}
 801412e:	4618      	mov	r0, r3
 8014130:	3714      	adds	r7, #20
 8014132:	46bd      	mov	sp, r7
 8014134:	bc80      	pop	{r7}
 8014136:	4770      	bx	lr

08014138 <snmp_table_extract_value_from_u32ref>:

s16_t
snmp_table_extract_value_from_u32ref(struct snmp_node_instance* instance, void* value)
{
 8014138:	b480      	push	{r7}
 801413a:	b085      	sub	sp, #20
 801413c:	af00      	add	r7, sp, #0
 801413e:	6078      	str	r0, [r7, #4]
 8014140:	6039      	str	r1, [r7, #0]
  u32_t *dst = (u32_t*)value;
 8014142:	683b      	ldr	r3, [r7, #0]
 8014144:	60fb      	str	r3, [r7, #12]
  *dst = instance->reference.u32;
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	601a      	str	r2, [r3, #0]
  return sizeof(*dst);
 8014150:	2304      	movs	r3, #4
}
 8014152:	4618      	mov	r0, r3
 8014154:	3714      	adds	r7, #20
 8014156:	46bd      	mov	sp, r7
 8014158:	bc80      	pop	{r7}
 801415a:	4770      	bx	lr

0801415c <snmp_table_extract_value_from_refconstptr>:

s16_t
snmp_table_extract_value_from_refconstptr(struct snmp_node_instance* instance, void* value)
{
 801415c:	b580      	push	{r7, lr}
 801415e:	b082      	sub	sp, #8
 8014160:	af00      	add	r7, sp, #0
 8014162:	6078      	str	r0, [r7, #4]
 8014164:	6039      	str	r1, [r7, #0]
  MEMCPY(value, instance->reference.const_ptr, instance->reference_len);
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8014172:	461a      	mov	r2, r3
 8014174:	6838      	ldr	r0, [r7, #0]
 8014176:	f00e f882 	bl	802227e <memcpy>
  return (u16_t)instance->reference_len;
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8014180:	b21b      	sxth	r3, r3
}
 8014182:	4618      	mov	r0, r3
 8014184:	3708      	adds	r7, #8
 8014186:	46bd      	mov	sp, r7
 8014188:	bd80      	pop	{r7, pc}
	...

0801418c <snmp_set_auth_traps_enabled>:
 * @ingroup snmp_traps
 * Enable/disable authentication traps
 */
void
snmp_set_auth_traps_enabled(u8_t enable)
{
 801418c:	b480      	push	{r7}
 801418e:	b083      	sub	sp, #12
 8014190:	af00      	add	r7, sp, #0
 8014192:	4603      	mov	r3, r0
 8014194:	71fb      	strb	r3, [r7, #7]
  snmp_auth_traps_enabled = enable;
 8014196:	4a04      	ldr	r2, [pc, #16]	@ (80141a8 <snmp_set_auth_traps_enabled+0x1c>)
 8014198:	79fb      	ldrb	r3, [r7, #7]
 801419a:	7013      	strb	r3, [r2, #0]
}
 801419c:	bf00      	nop
 801419e:	370c      	adds	r7, #12
 80141a0:	46bd      	mov	sp, r7
 80141a2:	bc80      	pop	{r7}
 80141a4:	4770      	bx	lr
 80141a6:	bf00      	nop
 80141a8:	2000889c 	.word	0x2000889c

080141ac <snmp_get_auth_traps_enabled>:
 * @ingroup snmp_traps
 * Get authentication traps enabled state
 */
u8_t
snmp_get_auth_traps_enabled(void)
{
 80141ac:	b480      	push	{r7}
 80141ae:	af00      	add	r7, sp, #0
  return snmp_auth_traps_enabled;
 80141b0:	4b02      	ldr	r3, [pc, #8]	@ (80141bc <snmp_get_auth_traps_enabled+0x10>)
 80141b2:	781b      	ldrb	r3, [r3, #0]
}
 80141b4:	4618      	mov	r0, r3
 80141b6:	46bd      	mov	sp, r7
 80141b8:	bc80      	pop	{r7}
 80141ba:	4770      	bx	lr
 80141bc:	2000889c 	.word	0x2000889c

080141c0 <snmp_send_trap>:
 * and .iso.org.dod.internet.private.enterprises.yourenterprise
 * (sysObjectID) for specific traps.
 */
err_t
snmp_send_trap(const struct snmp_obj_id* eoid, s32_t generic_trap, s32_t specific_trap, struct snmp_varbind *varbinds)
{
 80141c0:	b580      	push	{r7, lr}
 80141c2:	b092      	sub	sp, #72	@ 0x48
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	60f8      	str	r0, [r7, #12]
 80141c8:	60b9      	str	r1, [r7, #8]
 80141ca:	607a      	str	r2, [r7, #4]
 80141cc:	603b      	str	r3, [r7, #0]
  struct snmp_msg_trap trap_msg;
  struct snmp_trap_dst *td;
  struct pbuf *p;
  u16_t i, tot_len;
  err_t err = ERR_OK;
 80141ce:	2300      	movs	r3, #0
 80141d0:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41

  trap_msg.snmp_version = 0;
 80141d4:	2300      	movs	r3, #0
 80141d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  for (i = 0, td = &trap_dst[0]; i < SNMP_TRAP_DESTINATIONS; i++, td++) {
 80141d8:	2300      	movs	r3, #0
 80141da:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80141de:	4b4b      	ldr	r3, [pc, #300]	@ (801430c <snmp_send_trap+0x14c>)
 80141e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80141e2:	e088      	b.n	80142f6 <snmp_send_trap+0x136>
    if ((td->enable != 0) && !ip_addr_isany(&td->dip)) {
 80141e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80141e6:	791b      	ldrb	r3, [r3, #4]
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d07c      	beq.n	80142e6 <snmp_send_trap+0x126>
 80141ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d079      	beq.n	80142e6 <snmp_send_trap+0x126>
 80141f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d075      	beq.n	80142e6 <snmp_send_trap+0x126>
      /* lookup current source address for this dst */
      if (snmp_get_local_ip_for_dst(snmp_traps_handle, &td->dip, &trap_msg.sip)) {
 80141fa:	4b45      	ldr	r3, [pc, #276]	@ (8014310 <snmp_send_trap+0x150>)
 80141fc:	6818      	ldr	r0, [r3, #0]
 80141fe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8014200:	f107 0318 	add.w	r3, r7, #24
 8014204:	3304      	adds	r3, #4
 8014206:	461a      	mov	r2, r3
 8014208:	f7ff fadb 	bl	80137c2 <snmp_get_local_ip_for_dst>
 801420c:	4603      	mov	r3, r0
 801420e:	2b00      	cmp	r3, #0
 8014210:	d066      	beq.n	80142e0 <snmp_send_trap+0x120>
        if (eoid == NULL) {
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	2b00      	cmp	r3, #0
 8014216:	d104      	bne.n	8014222 <snmp_send_trap+0x62>
          trap_msg.enterprise = snmp_get_device_enterprise_oid();
 8014218:	f7fa f96e 	bl	800e4f8 <snmp_get_device_enterprise_oid>
 801421c:	4603      	mov	r3, r0
 801421e:	61bb      	str	r3, [r7, #24]
 8014220:	e001      	b.n	8014226 <snmp_send_trap+0x66>
        } else {
          trap_msg.enterprise = eoid;
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	61bb      	str	r3, [r7, #24]
        }

        trap_msg.gen_trap = generic_trap;
 8014226:	68bb      	ldr	r3, [r7, #8]
 8014228:	623b      	str	r3, [r7, #32]
        if (generic_trap == SNMP_GENTRAP_ENTERPRISE_SPECIFIC) {
 801422a:	68bb      	ldr	r3, [r7, #8]
 801422c:	2b06      	cmp	r3, #6
 801422e:	d102      	bne.n	8014236 <snmp_send_trap+0x76>
          trap_msg.spc_trap = specific_trap;
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	627b      	str	r3, [r7, #36]	@ 0x24
 8014234:	e001      	b.n	801423a <snmp_send_trap+0x7a>
        } else {
          trap_msg.spc_trap = 0;
 8014236:	2300      	movs	r3, #0
 8014238:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        MIB2_COPY_SYSUPTIME_TO(&trap_msg.ts);
 801423a:	f7f7 fc2f 	bl	800ba9c <sys_now>
 801423e:	4603      	mov	r3, r0
 8014240:	4a34      	ldr	r2, [pc, #208]	@ (8014314 <snmp_send_trap+0x154>)
 8014242:	fba2 2303 	umull	r2, r3, r2, r3
 8014246:	08db      	lsrs	r3, r3, #3
 8014248:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* pass 0, calculate length fields */
        tot_len = snmp_trap_varbind_sum(&trap_msg, varbinds);
 801424a:	f107 0318 	add.w	r3, r7, #24
 801424e:	6839      	ldr	r1, [r7, #0]
 8014250:	4618      	mov	r0, r3
 8014252:	f000 f883 	bl	801435c <snmp_trap_varbind_sum>
 8014256:	4603      	mov	r3, r0
 8014258:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        tot_len = snmp_trap_header_sum(&trap_msg, tot_len);
 801425a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801425c:	f107 0318 	add.w	r3, r7, #24
 8014260:	4611      	mov	r1, r2
 8014262:	4618      	mov	r0, r3
 8014264:	f000 f8b4 	bl	80143d0 <snmp_trap_header_sum>
 8014268:	4603      	mov	r3, r0
 801426a:	87fb      	strh	r3, [r7, #62]	@ 0x3e

        /* allocate pbuf(s) */
        p = pbuf_alloc(PBUF_TRANSPORT, tot_len, PBUF_RAM);
 801426c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801426e:	2200      	movs	r2, #0
 8014270:	4619      	mov	r1, r3
 8014272:	2000      	movs	r0, #0
 8014274:	f001 f99e 	bl	80155b4 <pbuf_alloc>
 8014278:	63b8      	str	r0, [r7, #56]	@ 0x38
        if (p != NULL) {
 801427a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801427c:	2b00      	cmp	r3, #0
 801427e:	d02b      	beq.n	80142d8 <snmp_send_trap+0x118>
          struct snmp_pbuf_stream pbuf_stream;
          snmp_pbuf_stream_init(&pbuf_stream, p, 0, tot_len);
 8014280:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014282:	f107 0010 	add.w	r0, r7, #16
 8014286:	2200      	movs	r2, #0
 8014288:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801428a:	f7ff f943 	bl	8013514 <snmp_pbuf_stream_init>

          /* pass 1, encode packet ino the pbuf(s) */
          snmp_trap_header_enc(&trap_msg, &pbuf_stream);
 801428e:	f107 0210 	add.w	r2, r7, #16
 8014292:	f107 0318 	add.w	r3, r7, #24
 8014296:	4611      	mov	r1, r2
 8014298:	4618      	mov	r0, r3
 801429a:	f000 f9b5 	bl	8014608 <snmp_trap_header_enc>
          snmp_trap_varbind_enc(&trap_msg, &pbuf_stream, varbinds);
 801429e:	f107 0110 	add.w	r1, r7, #16
 80142a2:	f107 0318 	add.w	r3, r7, #24
 80142a6:	683a      	ldr	r2, [r7, #0]
 80142a8:	4618      	mov	r0, r3
 80142aa:	f000 f985 	bl	80145b8 <snmp_trap_varbind_enc>

          snmp_stats.outtraps++;
 80142ae:	4b1a      	ldr	r3, [pc, #104]	@ (8014318 <snmp_send_trap+0x158>)
 80142b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80142b2:	3301      	adds	r3, #1
 80142b4:	4a18      	ldr	r2, [pc, #96]	@ (8014318 <snmp_send_trap+0x158>)
 80142b6:	6693      	str	r3, [r2, #104]	@ 0x68
          snmp_stats.outpkts++;
 80142b8:	4b17      	ldr	r3, [pc, #92]	@ (8014318 <snmp_send_trap+0x158>)
 80142ba:	685b      	ldr	r3, [r3, #4]
 80142bc:	3301      	adds	r3, #1
 80142be:	4a16      	ldr	r2, [pc, #88]	@ (8014318 <snmp_send_trap+0x158>)
 80142c0:	6053      	str	r3, [r2, #4]

          /** send to the TRAP destination */
          snmp_sendto(snmp_traps_handle, p, &td->dip, SNMP_TRAP_PORT);
 80142c2:	4b13      	ldr	r3, [pc, #76]	@ (8014310 <snmp_send_trap+0x150>)
 80142c4:	6818      	ldr	r0, [r3, #0]
 80142c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80142c8:	23a2      	movs	r3, #162	@ 0xa2
 80142ca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80142cc:	f7ff fa67 	bl	801379e <snmp_sendto>
          pbuf_free(p);
 80142d0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80142d2:	f001 fce7 	bl	8015ca4 <pbuf_free>
 80142d6:	e006      	b.n	80142e6 <snmp_send_trap+0x126>
        } else {
          err = ERR_MEM;
 80142d8:	23ff      	movs	r3, #255	@ 0xff
 80142da:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 80142de:	e002      	b.n	80142e6 <snmp_send_trap+0x126>
        }
      } else {
        /* routing error */
        err = ERR_RTE;
 80142e0:	23fc      	movs	r3, #252	@ 0xfc
 80142e2:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
  for (i = 0, td = &trap_dst[0]; i < SNMP_TRAP_DESTINATIONS; i++, td++) {
 80142e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80142ea:	3301      	adds	r3, #1
 80142ec:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80142f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80142f2:	3308      	adds	r3, #8
 80142f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80142f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	f43f af72 	beq.w	80141e4 <snmp_send_trap+0x24>
      }
    }
  }
  return err;
 8014300:	f997 3041 	ldrsb.w	r3, [r7, #65]	@ 0x41
}
 8014304:	4618      	mov	r0, r3
 8014306:	3748      	adds	r7, #72	@ 0x48
 8014308:	46bd      	mov	sp, r7
 801430a:	bd80      	pop	{r7, pc}
 801430c:	20008894 	.word	0x20008894
 8014310:	20008890 	.word	0x20008890
 8014314:	cccccccd 	.word	0xcccccccd
 8014318:	200087e8 	.word	0x200087e8

0801431c <snmp_send_trap_generic>:
 * @ingroup snmp_traps
 * Send generic SNMP trap
 */
err_t 
snmp_send_trap_generic(s32_t generic_trap)
{
 801431c:	b580      	push	{r7, lr}
 801431e:	b082      	sub	sp, #8
 8014320:	af00      	add	r7, sp, #0
 8014322:	6078      	str	r0, [r7, #4]
  static const struct snmp_obj_id oid = { 7, { 1, 3, 6, 1, 2, 1, 11 } };
  return snmp_send_trap(&oid, generic_trap, 0, NULL);
 8014324:	2300      	movs	r3, #0
 8014326:	2200      	movs	r2, #0
 8014328:	6879      	ldr	r1, [r7, #4]
 801432a:	4804      	ldr	r0, [pc, #16]	@ (801433c <snmp_send_trap_generic+0x20>)
 801432c:	f7ff ff48 	bl	80141c0 <snmp_send_trap>
 8014330:	4603      	mov	r3, r0
}
 8014332:	4618      	mov	r0, r3
 8014334:	3708      	adds	r7, #8
 8014336:	46bd      	mov	sp, r7
 8014338:	bd80      	pop	{r7, pc}
 801433a:	bf00      	nop
 801433c:	08030b24 	.word	0x08030b24

08014340 <snmp_authfail_trap>:
 * @ingroup snmp_traps
 * Send authentication failure trap (used internally by agent) 
 */
void
snmp_authfail_trap(void)
{
 8014340:	b580      	push	{r7, lr}
 8014342:	af00      	add	r7, sp, #0
  if (snmp_auth_traps_enabled != 0) {
 8014344:	4b04      	ldr	r3, [pc, #16]	@ (8014358 <snmp_authfail_trap+0x18>)
 8014346:	781b      	ldrb	r3, [r3, #0]
 8014348:	2b00      	cmp	r3, #0
 801434a:	d002      	beq.n	8014352 <snmp_authfail_trap+0x12>
    snmp_send_trap_generic(SNMP_GENTRAP_AUTH_FAILURE);
 801434c:	2004      	movs	r0, #4
 801434e:	f7ff ffe5 	bl	801431c <snmp_send_trap_generic>
  }
}
 8014352:	bf00      	nop
 8014354:	bd80      	pop	{r7, pc}
 8014356:	bf00      	nop
 8014358:	2000889c 	.word	0x2000889c

0801435c <snmp_trap_varbind_sum>:

static u16_t
snmp_trap_varbind_sum(struct snmp_msg_trap *trap, struct snmp_varbind *varbinds)
{
 801435c:	b580      	push	{r7, lr}
 801435e:	b088      	sub	sp, #32
 8014360:	af00      	add	r7, sp, #0
 8014362:	6078      	str	r0, [r7, #4]
 8014364:	6039      	str	r1, [r7, #0]
  struct snmp_varbind *varbind;
  u16_t tot_len;
  u8_t tot_len_len;

  tot_len = 0;
 8014366:	2300      	movs	r3, #0
 8014368:	837b      	strh	r3, [r7, #26]
  varbind = varbinds;
 801436a:	683b      	ldr	r3, [r7, #0]
 801436c:	61fb      	str	r3, [r7, #28]
  while (varbind != NULL) {
 801436e:	e015      	b.n	801439c <snmp_trap_varbind_sum+0x40>
    struct snmp_varbind_len len;

    if (snmp_varbind_length(varbind, &len) == ERR_OK) {
 8014370:	f107 030c 	add.w	r3, r7, #12
 8014374:	4619      	mov	r1, r3
 8014376:	69f8      	ldr	r0, [r7, #28]
 8014378:	f7fe fa2c 	bl	80127d4 <snmp_varbind_length>
 801437c:	4603      	mov	r3, r0
 801437e:	2b00      	cmp	r3, #0
 8014380:	d109      	bne.n	8014396 <snmp_trap_varbind_sum+0x3a>
      tot_len += 1 + len.vb_len_len + len.vb_value_len;
 8014382:	7b3b      	ldrb	r3, [r7, #12]
 8014384:	461a      	mov	r2, r3
 8014386:	89fb      	ldrh	r3, [r7, #14]
 8014388:	4413      	add	r3, r2
 801438a:	b29a      	uxth	r2, r3
 801438c:	8b7b      	ldrh	r3, [r7, #26]
 801438e:	4413      	add	r3, r2
 8014390:	b29b      	uxth	r3, r3
 8014392:	3301      	adds	r3, #1
 8014394:	837b      	strh	r3, [r7, #26]
    }

    varbind = varbind->next;
 8014396:	69fb      	ldr	r3, [r7, #28]
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	61fb      	str	r3, [r7, #28]
  while (varbind != NULL) {
 801439c:	69fb      	ldr	r3, [r7, #28]
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d1e6      	bne.n	8014370 <snmp_trap_varbind_sum+0x14>
  }

  trap->vbseqlen = tot_len;
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	8b7a      	ldrh	r2, [r7, #26]
 80143a6:	83da      	strh	r2, [r3, #30]
  snmp_asn1_enc_length_cnt(trap->vbseqlen, &tot_len_len);
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	8bdb      	ldrh	r3, [r3, #30]
 80143ac:	f107 0219 	add.w	r2, r7, #25
 80143b0:	4611      	mov	r1, r2
 80143b2:	4618      	mov	r0, r3
 80143b4:	f7f9 fcfa 	bl	800ddac <snmp_asn1_enc_length_cnt>
  tot_len += 1 + tot_len_len;
 80143b8:	7e7b      	ldrb	r3, [r7, #25]
 80143ba:	461a      	mov	r2, r3
 80143bc:	8b7b      	ldrh	r3, [r7, #26]
 80143be:	4413      	add	r3, r2
 80143c0:	b29b      	uxth	r3, r3
 80143c2:	3301      	adds	r3, #1
 80143c4:	837b      	strh	r3, [r7, #26]

  return tot_len;
 80143c6:	8b7b      	ldrh	r3, [r7, #26]
}
 80143c8:	4618      	mov	r0, r3
 80143ca:	3720      	adds	r7, #32
 80143cc:	46bd      	mov	sp, r7
 80143ce:	bd80      	pop	{r7, pc}

080143d0 <snmp_trap_header_sum>:
 * @param vb_len varbind-list length
 * @return the required length for encoding the trap header
 */
static u16_t
snmp_trap_header_sum(struct snmp_msg_trap *trap, u16_t vb_len)
{
 80143d0:	b580      	push	{r7, lr}
 80143d2:	b084      	sub	sp, #16
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	6078      	str	r0, [r7, #4]
 80143d8:	460b      	mov	r3, r1
 80143da:	807b      	strh	r3, [r7, #2]
  u16_t tot_len;
  u16_t len;
  u8_t lenlen;

  tot_len = vb_len;
 80143dc:	887b      	ldrh	r3, [r7, #2]
 80143de:	81fb      	strh	r3, [r7, #14]

  snmp_asn1_enc_u32t_cnt(trap->ts, &len);
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	691b      	ldr	r3, [r3, #16]
 80143e4:	f107 020c 	add.w	r2, r7, #12
 80143e8:	4611      	mov	r1, r2
 80143ea:	4618      	mov	r0, r3
 80143ec:	f7f9 fcfa 	bl	800dde4 <snmp_asn1_enc_u32t_cnt>
  snmp_asn1_enc_length_cnt(len, &lenlen);
 80143f0:	89bb      	ldrh	r3, [r7, #12]
 80143f2:	f107 020b 	add.w	r2, r7, #11
 80143f6:	4611      	mov	r1, r2
 80143f8:	4618      	mov	r0, r3
 80143fa:	f7f9 fcd7 	bl	800ddac <snmp_asn1_enc_length_cnt>
  tot_len += 1 + len + lenlen;
 80143fe:	7afb      	ldrb	r3, [r7, #11]
 8014400:	461a      	mov	r2, r3
 8014402:	89bb      	ldrh	r3, [r7, #12]
 8014404:	4413      	add	r3, r2
 8014406:	b29a      	uxth	r2, r3
 8014408:	89fb      	ldrh	r3, [r7, #14]
 801440a:	4413      	add	r3, r2
 801440c:	b29b      	uxth	r3, r3
 801440e:	3301      	adds	r3, #1
 8014410:	81fb      	strh	r3, [r7, #14]

  snmp_asn1_enc_s32t_cnt(trap->spc_trap, &len);
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	68db      	ldr	r3, [r3, #12]
 8014416:	461a      	mov	r2, r3
 8014418:	f107 030c 	add.w	r3, r7, #12
 801441c:	4619      	mov	r1, r3
 801441e:	4610      	mov	r0, r2
 8014420:	f7f9 fd2e 	bl	800de80 <snmp_asn1_enc_s32t_cnt>
  snmp_asn1_enc_length_cnt(len, &lenlen);
 8014424:	89bb      	ldrh	r3, [r7, #12]
 8014426:	f107 020b 	add.w	r2, r7, #11
 801442a:	4611      	mov	r1, r2
 801442c:	4618      	mov	r0, r3
 801442e:	f7f9 fcbd 	bl	800ddac <snmp_asn1_enc_length_cnt>
  tot_len += 1 + len + lenlen;
 8014432:	7afb      	ldrb	r3, [r7, #11]
 8014434:	461a      	mov	r2, r3
 8014436:	89bb      	ldrh	r3, [r7, #12]
 8014438:	4413      	add	r3, r2
 801443a:	b29a      	uxth	r2, r3
 801443c:	89fb      	ldrh	r3, [r7, #14]
 801443e:	4413      	add	r3, r2
 8014440:	b29b      	uxth	r3, r3
 8014442:	3301      	adds	r3, #1
 8014444:	81fb      	strh	r3, [r7, #14]

  snmp_asn1_enc_s32t_cnt(trap->gen_trap, &len);
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	689b      	ldr	r3, [r3, #8]
 801444a:	461a      	mov	r2, r3
 801444c:	f107 030c 	add.w	r3, r7, #12
 8014450:	4619      	mov	r1, r3
 8014452:	4610      	mov	r0, r2
 8014454:	f7f9 fd14 	bl	800de80 <snmp_asn1_enc_s32t_cnt>
  snmp_asn1_enc_length_cnt(len, &lenlen);
 8014458:	89bb      	ldrh	r3, [r7, #12]
 801445a:	f107 020b 	add.w	r2, r7, #11
 801445e:	4611      	mov	r1, r2
 8014460:	4618      	mov	r0, r3
 8014462:	f7f9 fca3 	bl	800ddac <snmp_asn1_enc_length_cnt>
  tot_len += 1 + len + lenlen;
 8014466:	7afb      	ldrb	r3, [r7, #11]
 8014468:	461a      	mov	r2, r3
 801446a:	89bb      	ldrh	r3, [r7, #12]
 801446c:	4413      	add	r3, r2
 801446e:	b29a      	uxth	r2, r3
 8014470:	89fb      	ldrh	r3, [r7, #14]
 8014472:	4413      	add	r3, r2
 8014474:	b29b      	uxth	r3, r3
 8014476:	3301      	adds	r3, #1
 8014478:	81fb      	strh	r3, [r7, #14]
#if LWIP_IPV6
    len = sizeof(ip_2_ip6(&trap->sip)->addr);
#endif
  } else {
#if LWIP_IPV4
    len = sizeof(ip_2_ip4(&trap->sip)->addr);
 801447a:	2304      	movs	r3, #4
 801447c:	81bb      	strh	r3, [r7, #12]
#endif
  }
  snmp_asn1_enc_length_cnt(len, &lenlen);
 801447e:	89bb      	ldrh	r3, [r7, #12]
 8014480:	f107 020b 	add.w	r2, r7, #11
 8014484:	4611      	mov	r1, r2
 8014486:	4618      	mov	r0, r3
 8014488:	f7f9 fc90 	bl	800ddac <snmp_asn1_enc_length_cnt>
  tot_len += 1 + len + lenlen;
 801448c:	7afb      	ldrb	r3, [r7, #11]
 801448e:	461a      	mov	r2, r3
 8014490:	89bb      	ldrh	r3, [r7, #12]
 8014492:	4413      	add	r3, r2
 8014494:	b29a      	uxth	r2, r3
 8014496:	89fb      	ldrh	r3, [r7, #14]
 8014498:	4413      	add	r3, r2
 801449a:	b29b      	uxth	r3, r3
 801449c:	3301      	adds	r3, #1
 801449e:	81fb      	strh	r3, [r7, #14]

  snmp_asn1_enc_oid_cnt(trap->enterprise->id, trap->enterprise->len, &len);
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	681b      	ldr	r3, [r3, #0]
 80144a4:	1d18      	adds	r0, r3, #4
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	681b      	ldr	r3, [r3, #0]
 80144aa:	781b      	ldrb	r3, [r3, #0]
 80144ac:	4619      	mov	r1, r3
 80144ae:	f107 030c 	add.w	r3, r7, #12
 80144b2:	461a      	mov	r2, r3
 80144b4:	f7f9 fd0e 	bl	800ded4 <snmp_asn1_enc_oid_cnt>
  snmp_asn1_enc_length_cnt(len, &lenlen);
 80144b8:	89bb      	ldrh	r3, [r7, #12]
 80144ba:	f107 020b 	add.w	r2, r7, #11
 80144be:	4611      	mov	r1, r2
 80144c0:	4618      	mov	r0, r3
 80144c2:	f7f9 fc73 	bl	800ddac <snmp_asn1_enc_length_cnt>
  tot_len += 1 + len + lenlen;
 80144c6:	7afb      	ldrb	r3, [r7, #11]
 80144c8:	461a      	mov	r2, r3
 80144ca:	89bb      	ldrh	r3, [r7, #12]
 80144cc:	4413      	add	r3, r2
 80144ce:	b29a      	uxth	r2, r3
 80144d0:	89fb      	ldrh	r3, [r7, #14]
 80144d2:	4413      	add	r3, r2
 80144d4:	b29b      	uxth	r3, r3
 80144d6:	3301      	adds	r3, #1
 80144d8:	81fb      	strh	r3, [r7, #14]

  trap->pdulen = tot_len;
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	89fa      	ldrh	r2, [r7, #14]
 80144de:	831a      	strh	r2, [r3, #24]
  snmp_asn1_enc_length_cnt(trap->pdulen, &lenlen);
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	8b1b      	ldrh	r3, [r3, #24]
 80144e4:	f107 020b 	add.w	r2, r7, #11
 80144e8:	4611      	mov	r1, r2
 80144ea:	4618      	mov	r0, r3
 80144ec:	f7f9 fc5e 	bl	800ddac <snmp_asn1_enc_length_cnt>
  tot_len += 1 + lenlen;
 80144f0:	7afb      	ldrb	r3, [r7, #11]
 80144f2:	461a      	mov	r2, r3
 80144f4:	89fb      	ldrh	r3, [r7, #14]
 80144f6:	4413      	add	r3, r2
 80144f8:	b29b      	uxth	r3, r3
 80144fa:	3301      	adds	r3, #1
 80144fc:	81fb      	strh	r3, [r7, #14]

  trap->comlen = (u16_t)LWIP_MIN(strlen(snmp_community_trap), 0xFFFF);
 80144fe:	4b2d      	ldr	r3, [pc, #180]	@ (80145b4 <snmp_trap_header_sum+0x1e4>)
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	4618      	mov	r0, r3
 8014504:	f7eb fe6a 	bl	80001dc <strlen>
 8014508:	4603      	mov	r3, r0
 801450a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801450e:	4293      	cmp	r3, r2
 8014510:	d807      	bhi.n	8014522 <snmp_trap_header_sum+0x152>
 8014512:	4b28      	ldr	r3, [pc, #160]	@ (80145b4 <snmp_trap_header_sum+0x1e4>)
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	4618      	mov	r0, r3
 8014518:	f7eb fe60 	bl	80001dc <strlen>
 801451c:	4603      	mov	r3, r0
 801451e:	b29a      	uxth	r2, r3
 8014520:	e001      	b.n	8014526 <snmp_trap_header_sum+0x156>
 8014522:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	835a      	strh	r2, [r3, #26]
  snmp_asn1_enc_length_cnt(trap->comlen, &lenlen);
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	8b5b      	ldrh	r3, [r3, #26]
 801452e:	f107 020b 	add.w	r2, r7, #11
 8014532:	4611      	mov	r1, r2
 8014534:	4618      	mov	r0, r3
 8014536:	f7f9 fc39 	bl	800ddac <snmp_asn1_enc_length_cnt>
  tot_len += 1 + lenlen + trap->comlen;
 801453a:	7afb      	ldrb	r3, [r7, #11]
 801453c:	461a      	mov	r2, r3
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	8b5b      	ldrh	r3, [r3, #26]
 8014542:	4413      	add	r3, r2
 8014544:	b29a      	uxth	r2, r3
 8014546:	89fb      	ldrh	r3, [r7, #14]
 8014548:	4413      	add	r3, r2
 801454a:	b29b      	uxth	r3, r3
 801454c:	3301      	adds	r3, #1
 801454e:	81fb      	strh	r3, [r7, #14]

  snmp_asn1_enc_s32t_cnt(trap->snmp_version, &len);
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	695b      	ldr	r3, [r3, #20]
 8014554:	461a      	mov	r2, r3
 8014556:	f107 030c 	add.w	r3, r7, #12
 801455a:	4619      	mov	r1, r3
 801455c:	4610      	mov	r0, r2
 801455e:	f7f9 fc8f 	bl	800de80 <snmp_asn1_enc_s32t_cnt>
  snmp_asn1_enc_length_cnt(len, &lenlen);
 8014562:	89bb      	ldrh	r3, [r7, #12]
 8014564:	f107 020b 	add.w	r2, r7, #11
 8014568:	4611      	mov	r1, r2
 801456a:	4618      	mov	r0, r3
 801456c:	f7f9 fc1e 	bl	800ddac <snmp_asn1_enc_length_cnt>
  tot_len += 1 + len + lenlen;
 8014570:	7afb      	ldrb	r3, [r7, #11]
 8014572:	461a      	mov	r2, r3
 8014574:	89bb      	ldrh	r3, [r7, #12]
 8014576:	4413      	add	r3, r2
 8014578:	b29a      	uxth	r2, r3
 801457a:	89fb      	ldrh	r3, [r7, #14]
 801457c:	4413      	add	r3, r2
 801457e:	b29b      	uxth	r3, r3
 8014580:	3301      	adds	r3, #1
 8014582:	81fb      	strh	r3, [r7, #14]

  trap->seqlen = tot_len;
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	89fa      	ldrh	r2, [r7, #14]
 8014588:	839a      	strh	r2, [r3, #28]
  snmp_asn1_enc_length_cnt(trap->seqlen, &lenlen);
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	8b9b      	ldrh	r3, [r3, #28]
 801458e:	f107 020b 	add.w	r2, r7, #11
 8014592:	4611      	mov	r1, r2
 8014594:	4618      	mov	r0, r3
 8014596:	f7f9 fc09 	bl	800ddac <snmp_asn1_enc_length_cnt>
  tot_len += 1 + lenlen;
 801459a:	7afb      	ldrb	r3, [r7, #11]
 801459c:	461a      	mov	r2, r3
 801459e:	89fb      	ldrh	r3, [r7, #14]
 80145a0:	4413      	add	r3, r2
 80145a2:	b29b      	uxth	r3, r3
 80145a4:	3301      	adds	r3, #1
 80145a6:	81fb      	strh	r3, [r7, #14]

  return tot_len;
 80145a8:	89fb      	ldrh	r3, [r7, #14]
}
 80145aa:	4618      	mov	r0, r3
 80145ac:	3710      	adds	r7, #16
 80145ae:	46bd      	mov	sp, r7
 80145b0:	bd80      	pop	{r7, pc}
 80145b2:	bf00      	nop
 80145b4:	20000118 	.word	0x20000118

080145b8 <snmp_trap_varbind_enc>:

static void
snmp_trap_varbind_enc(struct snmp_msg_trap *trap, struct snmp_pbuf_stream *pbuf_stream, struct snmp_varbind *varbinds)
{
 80145b8:	b580      	push	{r7, lr}
 80145ba:	b088      	sub	sp, #32
 80145bc:	af00      	add	r7, sp, #0
 80145be:	60f8      	str	r0, [r7, #12]
 80145c0:	60b9      	str	r1, [r7, #8]
 80145c2:	607a      	str	r2, [r7, #4]
  struct snmp_asn1_tlv tlv;
  struct snmp_varbind *varbind;

  varbind = varbinds;
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	61fb      	str	r3, [r7, #28]

  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_SEQUENCE, 0, trap->vbseqlen);
 80145c8:	2330      	movs	r3, #48	@ 0x30
 80145ca:	753b      	strb	r3, [r7, #20]
 80145cc:	2300      	movs	r3, #0
 80145ce:	757b      	strb	r3, [r7, #21]
 80145d0:	2300      	movs	r3, #0
 80145d2:	75bb      	strb	r3, [r7, #22]
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	8bdb      	ldrh	r3, [r3, #30]
 80145d8:	833b      	strh	r3, [r7, #24]
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 80145da:	f107 0314 	add.w	r3, r7, #20
 80145de:	4619      	mov	r1, r3
 80145e0:	68b8      	ldr	r0, [r7, #8]
 80145e2:	f7f9 f9f7 	bl	800d9d4 <snmp_ans1_enc_tlv>

  while (varbind != NULL) {
 80145e6:	e006      	b.n	80145f6 <snmp_trap_varbind_enc+0x3e>
    snmp_append_outbound_varbind(pbuf_stream, varbind);
 80145e8:	69f9      	ldr	r1, [r7, #28]
 80145ea:	68b8      	ldr	r0, [r7, #8]
 80145ec:	f7fe fa42 	bl	8012a74 <snmp_append_outbound_varbind>

    varbind = varbind->next;
 80145f0:	69fb      	ldr	r3, [r7, #28]
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	61fb      	str	r3, [r7, #28]
  while (varbind != NULL) {
 80145f6:	69fb      	ldr	r3, [r7, #28]
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d1f5      	bne.n	80145e8 <snmp_trap_varbind_enc+0x30>
  }
}
 80145fc:	bf00      	nop
 80145fe:	bf00      	nop
 8014600:	3720      	adds	r7, #32
 8014602:	46bd      	mov	sp, r7
 8014604:	bd80      	pop	{r7, pc}
	...

08014608 <snmp_trap_header_enc>:
/**
 * Encodes trap header from head to tail.
 */
static void
snmp_trap_header_enc(struct snmp_msg_trap *trap, struct snmp_pbuf_stream *pbuf_stream)
{
 8014608:	b580      	push	{r7, lr}
 801460a:	b084      	sub	sp, #16
 801460c:	af00      	add	r7, sp, #0
 801460e:	6078      	str	r0, [r7, #4]
 8014610:	6039      	str	r1, [r7, #0]
  struct snmp_asn1_tlv tlv;

  /* 'Message' sequence */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_SEQUENCE, 0, trap->seqlen);
 8014612:	2330      	movs	r3, #48	@ 0x30
 8014614:	723b      	strb	r3, [r7, #8]
 8014616:	2300      	movs	r3, #0
 8014618:	727b      	strb	r3, [r7, #9]
 801461a:	2300      	movs	r3, #0
 801461c:	72bb      	strb	r3, [r7, #10]
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	8b9b      	ldrh	r3, [r3, #28]
 8014622:	81bb      	strh	r3, [r7, #12]
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 8014624:	f107 0308 	add.w	r3, r7, #8
 8014628:	4619      	mov	r1, r3
 801462a:	6838      	ldr	r0, [r7, #0]
 801462c:	f7f9 f9d2 	bl	800d9d4 <snmp_ans1_enc_tlv>

  /* version */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_INTEGER, 0, 0);
 8014630:	2302      	movs	r3, #2
 8014632:	723b      	strb	r3, [r7, #8]
 8014634:	2300      	movs	r3, #0
 8014636:	727b      	strb	r3, [r7, #9]
 8014638:	2300      	movs	r3, #0
 801463a:	72bb      	strb	r3, [r7, #10]
 801463c:	2300      	movs	r3, #0
 801463e:	81bb      	strh	r3, [r7, #12]
  snmp_asn1_enc_s32t_cnt(trap->snmp_version, &tlv.value_len);
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	695b      	ldr	r3, [r3, #20]
 8014644:	461a      	mov	r2, r3
 8014646:	f107 0308 	add.w	r3, r7, #8
 801464a:	3304      	adds	r3, #4
 801464c:	4619      	mov	r1, r3
 801464e:	4610      	mov	r0, r2
 8014650:	f7f9 fc16 	bl	800de80 <snmp_asn1_enc_s32t_cnt>
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 8014654:	f107 0308 	add.w	r3, r7, #8
 8014658:	4619      	mov	r1, r3
 801465a:	6838      	ldr	r0, [r7, #0]
 801465c:	f7f9 f9ba 	bl	800d9d4 <snmp_ans1_enc_tlv>
  snmp_asn1_enc_s32t(pbuf_stream, tlv.value_len, trap->snmp_version);
 8014660:	89b9      	ldrh	r1, [r7, #12]
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	695b      	ldr	r3, [r3, #20]
 8014666:	461a      	mov	r2, r3
 8014668:	6838      	ldr	r0, [r7, #0]
 801466a:	f7f9 fafe 	bl	800dc6a <snmp_asn1_enc_s32t>

  /* community */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_OCTET_STRING, 0, trap->comlen);
 801466e:	2304      	movs	r3, #4
 8014670:	723b      	strb	r3, [r7, #8]
 8014672:	2300      	movs	r3, #0
 8014674:	727b      	strb	r3, [r7, #9]
 8014676:	2300      	movs	r3, #0
 8014678:	72bb      	strb	r3, [r7, #10]
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	8b5b      	ldrh	r3, [r3, #26]
 801467e:	81bb      	strh	r3, [r7, #12]
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 8014680:	f107 0308 	add.w	r3, r7, #8
 8014684:	4619      	mov	r1, r3
 8014686:	6838      	ldr	r0, [r7, #0]
 8014688:	f7f9 f9a4 	bl	800d9d4 <snmp_ans1_enc_tlv>
  snmp_asn1_enc_raw(pbuf_stream,  (const u8_t *)snmp_community_trap, trap->comlen);
 801468c:	4b58      	ldr	r3, [pc, #352]	@ (80147f0 <snmp_trap_header_enc+0x1e8>)
 801468e:	6819      	ldr	r1, [r3, #0]
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	8b5b      	ldrh	r3, [r3, #26]
 8014694:	461a      	mov	r2, r3
 8014696:	6838      	ldr	r0, [r7, #0]
 8014698:	f7f9 fa27 	bl	800daea <snmp_asn1_enc_raw>

  /* 'PDU' sequence */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, (SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTENTTYPE_CONSTRUCTED | SNMP_ASN1_CONTEXT_PDU_TRAP), 0, trap->pdulen);
 801469c:	23a4      	movs	r3, #164	@ 0xa4
 801469e:	723b      	strb	r3, [r7, #8]
 80146a0:	2300      	movs	r3, #0
 80146a2:	727b      	strb	r3, [r7, #9]
 80146a4:	2300      	movs	r3, #0
 80146a6:	72bb      	strb	r3, [r7, #10]
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	8b1b      	ldrh	r3, [r3, #24]
 80146ac:	81bb      	strh	r3, [r7, #12]
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 80146ae:	f107 0308 	add.w	r3, r7, #8
 80146b2:	4619      	mov	r1, r3
 80146b4:	6838      	ldr	r0, [r7, #0]
 80146b6:	f7f9 f98d 	bl	800d9d4 <snmp_ans1_enc_tlv>

  /* object ID */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_OBJECT_ID, 0, 0);
 80146ba:	2306      	movs	r3, #6
 80146bc:	723b      	strb	r3, [r7, #8]
 80146be:	2300      	movs	r3, #0
 80146c0:	727b      	strb	r3, [r7, #9]
 80146c2:	2300      	movs	r3, #0
 80146c4:	72bb      	strb	r3, [r7, #10]
 80146c6:	2300      	movs	r3, #0
 80146c8:	81bb      	strh	r3, [r7, #12]
  snmp_asn1_enc_oid_cnt(trap->enterprise->id, trap->enterprise->len, &tlv.value_len);
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	681b      	ldr	r3, [r3, #0]
 80146ce:	1d18      	adds	r0, r3, #4
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	781b      	ldrb	r3, [r3, #0]
 80146d6:	4619      	mov	r1, r3
 80146d8:	f107 0308 	add.w	r3, r7, #8
 80146dc:	3304      	adds	r3, #4
 80146de:	461a      	mov	r2, r3
 80146e0:	f7f9 fbf8 	bl	800ded4 <snmp_asn1_enc_oid_cnt>
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 80146e4:	f107 0308 	add.w	r3, r7, #8
 80146e8:	4619      	mov	r1, r3
 80146ea:	6838      	ldr	r0, [r7, #0]
 80146ec:	f7f9 f972 	bl	800d9d4 <snmp_ans1_enc_tlv>
  snmp_asn1_enc_oid(pbuf_stream, trap->enterprise->id, trap->enterprise->len);
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	1d19      	adds	r1, r3, #4
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	781b      	ldrb	r3, [r3, #0]
 80146fc:	461a      	mov	r2, r3
 80146fe:	6838      	ldr	r0, [r7, #0]
 8014700:	f7f9 fae2 	bl	800dcc8 <snmp_asn1_enc_oid>
    snmp_ans1_enc_tlv(pbuf_stream, &tlv);
    snmp_asn1_enc_raw(pbuf_stream, (const u8_t *)&ip_2_ip6(&trap->sip)->addr, sizeof(ip_2_ip6(&trap->sip)->addr));
#endif
  } else {
#if LWIP_IPV4
    SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_IPADDR, 0, sizeof(ip_2_ip4(&trap->sip)->addr));
 8014704:	2340      	movs	r3, #64	@ 0x40
 8014706:	723b      	strb	r3, [r7, #8]
 8014708:	2300      	movs	r3, #0
 801470a:	727b      	strb	r3, [r7, #9]
 801470c:	2300      	movs	r3, #0
 801470e:	72bb      	strb	r3, [r7, #10]
 8014710:	2304      	movs	r3, #4
 8014712:	81bb      	strh	r3, [r7, #12]
    snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 8014714:	f107 0308 	add.w	r3, r7, #8
 8014718:	4619      	mov	r1, r3
 801471a:	6838      	ldr	r0, [r7, #0]
 801471c:	f7f9 f95a 	bl	800d9d4 <snmp_ans1_enc_tlv>
    snmp_asn1_enc_raw(pbuf_stream, (const u8_t *)&ip_2_ip4(&trap->sip)->addr, sizeof(ip_2_ip4(&trap->sip)->addr));
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	3304      	adds	r3, #4
 8014724:	2204      	movs	r2, #4
 8014726:	4619      	mov	r1, r3
 8014728:	6838      	ldr	r0, [r7, #0]
 801472a:	f7f9 f9de 	bl	800daea <snmp_asn1_enc_raw>
#endif
  }

  /* trap length */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_INTEGER, 0, 0);
 801472e:	2302      	movs	r3, #2
 8014730:	723b      	strb	r3, [r7, #8]
 8014732:	2300      	movs	r3, #0
 8014734:	727b      	strb	r3, [r7, #9]
 8014736:	2300      	movs	r3, #0
 8014738:	72bb      	strb	r3, [r7, #10]
 801473a:	2300      	movs	r3, #0
 801473c:	81bb      	strh	r3, [r7, #12]
  snmp_asn1_enc_s32t_cnt(trap->gen_trap, &tlv.value_len);
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	689b      	ldr	r3, [r3, #8]
 8014742:	461a      	mov	r2, r3
 8014744:	f107 0308 	add.w	r3, r7, #8
 8014748:	3304      	adds	r3, #4
 801474a:	4619      	mov	r1, r3
 801474c:	4610      	mov	r0, r2
 801474e:	f7f9 fb97 	bl	800de80 <snmp_asn1_enc_s32t_cnt>
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 8014752:	f107 0308 	add.w	r3, r7, #8
 8014756:	4619      	mov	r1, r3
 8014758:	6838      	ldr	r0, [r7, #0]
 801475a:	f7f9 f93b 	bl	800d9d4 <snmp_ans1_enc_tlv>
  snmp_asn1_enc_s32t(pbuf_stream, tlv.value_len, trap->gen_trap);
 801475e:	89b9      	ldrh	r1, [r7, #12]
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	689b      	ldr	r3, [r3, #8]
 8014764:	461a      	mov	r2, r3
 8014766:	6838      	ldr	r0, [r7, #0]
 8014768:	f7f9 fa7f 	bl	800dc6a <snmp_asn1_enc_s32t>

  /* specific trap */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_INTEGER, 0, 0);
 801476c:	2302      	movs	r3, #2
 801476e:	723b      	strb	r3, [r7, #8]
 8014770:	2300      	movs	r3, #0
 8014772:	727b      	strb	r3, [r7, #9]
 8014774:	2300      	movs	r3, #0
 8014776:	72bb      	strb	r3, [r7, #10]
 8014778:	2300      	movs	r3, #0
 801477a:	81bb      	strh	r3, [r7, #12]
  snmp_asn1_enc_s32t_cnt(trap->spc_trap, &tlv.value_len);
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	68db      	ldr	r3, [r3, #12]
 8014780:	461a      	mov	r2, r3
 8014782:	f107 0308 	add.w	r3, r7, #8
 8014786:	3304      	adds	r3, #4
 8014788:	4619      	mov	r1, r3
 801478a:	4610      	mov	r0, r2
 801478c:	f7f9 fb78 	bl	800de80 <snmp_asn1_enc_s32t_cnt>
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 8014790:	f107 0308 	add.w	r3, r7, #8
 8014794:	4619      	mov	r1, r3
 8014796:	6838      	ldr	r0, [r7, #0]
 8014798:	f7f9 f91c 	bl	800d9d4 <snmp_ans1_enc_tlv>
  snmp_asn1_enc_s32t(pbuf_stream, tlv.value_len, trap->spc_trap);
 801479c:	89b9      	ldrh	r1, [r7, #12]
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	68db      	ldr	r3, [r3, #12]
 80147a2:	461a      	mov	r2, r3
 80147a4:	6838      	ldr	r0, [r7, #0]
 80147a6:	f7f9 fa60 	bl	800dc6a <snmp_asn1_enc_s32t>

  /* timestamp */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_TIMETICKS, 0, 0);
 80147aa:	2343      	movs	r3, #67	@ 0x43
 80147ac:	723b      	strb	r3, [r7, #8]
 80147ae:	2300      	movs	r3, #0
 80147b0:	727b      	strb	r3, [r7, #9]
 80147b2:	2300      	movs	r3, #0
 80147b4:	72bb      	strb	r3, [r7, #10]
 80147b6:	2300      	movs	r3, #0
 80147b8:	81bb      	strh	r3, [r7, #12]
  snmp_asn1_enc_s32t_cnt(trap->ts, &tlv.value_len);
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	691b      	ldr	r3, [r3, #16]
 80147be:	461a      	mov	r2, r3
 80147c0:	f107 0308 	add.w	r3, r7, #8
 80147c4:	3304      	adds	r3, #4
 80147c6:	4619      	mov	r1, r3
 80147c8:	4610      	mov	r0, r2
 80147ca:	f7f9 fb59 	bl	800de80 <snmp_asn1_enc_s32t_cnt>
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 80147ce:	f107 0308 	add.w	r3, r7, #8
 80147d2:	4619      	mov	r1, r3
 80147d4:	6838      	ldr	r0, [r7, #0]
 80147d6:	f7f9 f8fd 	bl	800d9d4 <snmp_ans1_enc_tlv>
  snmp_asn1_enc_s32t(pbuf_stream, tlv.value_len, trap->ts);
 80147da:	89b9      	ldrh	r1, [r7, #12]
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	691b      	ldr	r3, [r3, #16]
 80147e0:	461a      	mov	r2, r3
 80147e2:	6838      	ldr	r0, [r7, #0]
 80147e4:	f7f9 fa41 	bl	800dc6a <snmp_asn1_enc_s32t>
}
 80147e8:	bf00      	nop
 80147ea:	3710      	adds	r7, #16
 80147ec:	46bd      	mov	sp, r7
 80147ee:	bd80      	pop	{r7, pc}
 80147f0:	20000118 	.word	0x20000118

080147f4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80147f4:	b480      	push	{r7}
 80147f6:	b083      	sub	sp, #12
 80147f8:	af00      	add	r7, sp, #0
 80147fa:	4603      	mov	r3, r0
 80147fc:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 80147fe:	88fb      	ldrh	r3, [r7, #6]
 8014800:	ba5b      	rev16	r3, r3
 8014802:	b29b      	uxth	r3, r3
}
 8014804:	4618      	mov	r0, r3
 8014806:	370c      	adds	r7, #12
 8014808:	46bd      	mov	sp, r7
 801480a:	bc80      	pop	{r7}
 801480c:	4770      	bx	lr

0801480e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 801480e:	b480      	push	{r7}
 8014810:	b083      	sub	sp, #12
 8014812:	af00      	add	r7, sp, #0
 8014814:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	061a      	lsls	r2, r3, #24
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	021b      	lsls	r3, r3, #8
 801481e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014822:	431a      	orrs	r2, r3
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	0a1b      	lsrs	r3, r3, #8
 8014828:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801482c:	431a      	orrs	r2, r3
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	0e1b      	lsrs	r3, r3, #24
 8014832:	4313      	orrs	r3, r2
}
 8014834:	4618      	mov	r0, r3
 8014836:	370c      	adds	r7, #12
 8014838:	46bd      	mov	sp, r7
 801483a:	bc80      	pop	{r7}
 801483c:	4770      	bx	lr

0801483e <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char*
lwip_strnstr(const char* buffer, const char* token, size_t n)
{
 801483e:	b580      	push	{r7, lr}
 8014840:	b086      	sub	sp, #24
 8014842:	af00      	add	r7, sp, #0
 8014844:	60f8      	str	r0, [r7, #12]
 8014846:	60b9      	str	r1, [r7, #8]
 8014848:	607a      	str	r2, [r7, #4]
  const char* p;
  size_t tokenlen = strlen(token);
 801484a:	68b8      	ldr	r0, [r7, #8]
 801484c:	f7eb fcc6 	bl	80001dc <strlen>
 8014850:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8014852:	693b      	ldr	r3, [r7, #16]
 8014854:	2b00      	cmp	r3, #0
 8014856:	d101      	bne.n	801485c <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	e022      	b.n	80148a2 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	617b      	str	r3, [r7, #20]
 8014860:	e012      	b.n	8014888 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8014862:	697b      	ldr	r3, [r7, #20]
 8014864:	781a      	ldrb	r2, [r3, #0]
 8014866:	68bb      	ldr	r3, [r7, #8]
 8014868:	781b      	ldrb	r3, [r3, #0]
 801486a:	429a      	cmp	r2, r3
 801486c:	d109      	bne.n	8014882 <lwip_strnstr+0x44>
 801486e:	693a      	ldr	r2, [r7, #16]
 8014870:	68b9      	ldr	r1, [r7, #8]
 8014872:	6978      	ldr	r0, [r7, #20]
 8014874:	f00d fc14 	bl	80220a0 <strncmp>
 8014878:	4603      	mov	r3, r0
 801487a:	2b00      	cmp	r3, #0
 801487c:	d101      	bne.n	8014882 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 801487e:	697b      	ldr	r3, [r7, #20]
 8014880:	e00f      	b.n	80148a2 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8014882:	697b      	ldr	r3, [r7, #20]
 8014884:	3301      	adds	r3, #1
 8014886:	617b      	str	r3, [r7, #20]
 8014888:	697b      	ldr	r3, [r7, #20]
 801488a:	781b      	ldrb	r3, [r3, #0]
 801488c:	2b00      	cmp	r3, #0
 801488e:	d007      	beq.n	80148a0 <lwip_strnstr+0x62>
 8014890:	697a      	ldr	r2, [r7, #20]
 8014892:	693b      	ldr	r3, [r7, #16]
 8014894:	441a      	add	r2, r3
 8014896:	68f9      	ldr	r1, [r7, #12]
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	440b      	add	r3, r1
 801489c:	429a      	cmp	r2, r3
 801489e:	d9e0      	bls.n	8014862 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 80148a0:	2300      	movs	r3, #0
}
 80148a2:	4618      	mov	r0, r3
 80148a4:	3718      	adds	r7, #24
 80148a6:	46bd      	mov	sp, r7
 80148a8:	bd80      	pop	{r7, pc}

080148aa <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char* str1, const char* str2)
{
 80148aa:	b480      	push	{r7}
 80148ac:	b085      	sub	sp, #20
 80148ae:	af00      	add	r7, sp, #0
 80148b0:	6078      	str	r0, [r7, #4]
 80148b2:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	1c5a      	adds	r2, r3, #1
 80148b8:	607a      	str	r2, [r7, #4]
 80148ba:	781b      	ldrb	r3, [r3, #0]
 80148bc:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 80148be:	683b      	ldr	r3, [r7, #0]
 80148c0:	1c5a      	adds	r2, r3, #1
 80148c2:	603a      	str	r2, [r7, #0]
 80148c4:	781b      	ldrb	r3, [r3, #0]
 80148c6:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 80148c8:	7bfa      	ldrb	r2, [r7, #15]
 80148ca:	7bbb      	ldrb	r3, [r7, #14]
 80148cc:	429a      	cmp	r2, r3
 80148ce:	d016      	beq.n	80148fe <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 80148d0:	7bfb      	ldrb	r3, [r7, #15]
 80148d2:	f043 0320 	orr.w	r3, r3, #32
 80148d6:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 80148d8:	7b7b      	ldrb	r3, [r7, #13]
 80148da:	2b60      	cmp	r3, #96	@ 0x60
 80148dc:	d90c      	bls.n	80148f8 <lwip_stricmp+0x4e>
 80148de:	7b7b      	ldrb	r3, [r7, #13]
 80148e0:	2b7a      	cmp	r3, #122	@ 0x7a
 80148e2:	d809      	bhi.n	80148f8 <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 80148e4:	7bbb      	ldrb	r3, [r7, #14]
 80148e6:	f043 0320 	orr.w	r3, r3, #32
 80148ea:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 80148ec:	7b7a      	ldrb	r2, [r7, #13]
 80148ee:	7b3b      	ldrb	r3, [r7, #12]
 80148f0:	429a      	cmp	r2, r3
 80148f2:	d003      	beq.n	80148fc <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 80148f4:	2301      	movs	r3, #1
 80148f6:	e006      	b.n	8014906 <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 80148f8:	2301      	movs	r3, #1
 80148fa:	e004      	b.n	8014906 <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 80148fc:	bf00      	nop
      }
    }
  } while (c1 != 0);
 80148fe:	7bfb      	ldrb	r3, [r7, #15]
 8014900:	2b00      	cmp	r3, #0
 8014902:	d1d7      	bne.n	80148b4 <lwip_stricmp+0xa>
  return 0;
 8014904:	2300      	movs	r3, #0
}
 8014906:	4618      	mov	r0, r3
 8014908:	3714      	adds	r7, #20
 801490a:	46bd      	mov	sp, r7
 801490c:	bc80      	pop	{r7}
 801490e:	4770      	bx	lr

08014910 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8014910:	b580      	push	{r7, lr}
 8014912:	b082      	sub	sp, #8
 8014914:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8014916:	2300      	movs	r3, #0
 8014918:	607b      	str	r3, [r7, #4]
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 801491a:	f001 fd5b 	bl	80163d4 <stats_init>
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 801491e:	f000 f8a7 	bl	8014a70 <mem_init>
  memp_init();
 8014922:	f000 fba5 	bl	8015070 <memp_init>
  pbuf_init();
  netif_init();
 8014926:	f000 fc8b 	bl	8015240 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801492a:	f007 f9c9 	bl	801bcc0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 801492e:	f001 fd57 	bl	80163e0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8014932:	f007 f8a7 	bl	801ba84 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8014936:	bf00      	nop
 8014938:	3708      	adds	r7, #8
 801493a:	46bd      	mov	sp, r7
 801493c:	bd80      	pop	{r7, pc}
	...

08014940 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8014940:	b580      	push	{r7, lr}
 8014942:	b084      	sub	sp, #16
 8014944:	af00      	add	r7, sp, #0
 8014946:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8014948:	4b40      	ldr	r3, [pc, #256]	@ (8014a4c <plug_holes+0x10c>)
 801494a:	681b      	ldr	r3, [r3, #0]
 801494c:	687a      	ldr	r2, [r7, #4]
 801494e:	429a      	cmp	r2, r3
 8014950:	d206      	bcs.n	8014960 <plug_holes+0x20>
 8014952:	4b3f      	ldr	r3, [pc, #252]	@ (8014a50 <plug_holes+0x110>)
 8014954:	f240 125d 	movw	r2, #349	@ 0x15d
 8014958:	493e      	ldr	r1, [pc, #248]	@ (8014a54 <plug_holes+0x114>)
 801495a:	483f      	ldr	r0, [pc, #252]	@ (8014a58 <plug_holes+0x118>)
 801495c:	f00d f994 	bl	8021c88 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8014960:	4b3e      	ldr	r3, [pc, #248]	@ (8014a5c <plug_holes+0x11c>)
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	687a      	ldr	r2, [r7, #4]
 8014966:	429a      	cmp	r2, r3
 8014968:	d306      	bcc.n	8014978 <plug_holes+0x38>
 801496a:	4b39      	ldr	r3, [pc, #228]	@ (8014a50 <plug_holes+0x110>)
 801496c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8014970:	493b      	ldr	r1, [pc, #236]	@ (8014a60 <plug_holes+0x120>)
 8014972:	4839      	ldr	r0, [pc, #228]	@ (8014a58 <plug_holes+0x118>)
 8014974:	f00d f988 	bl	8021c88 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	791b      	ldrb	r3, [r3, #4]
 801497c:	2b00      	cmp	r3, #0
 801497e:	d006      	beq.n	801498e <plug_holes+0x4e>
 8014980:	4b33      	ldr	r3, [pc, #204]	@ (8014a50 <plug_holes+0x110>)
 8014982:	f240 125f 	movw	r2, #351	@ 0x15f
 8014986:	4937      	ldr	r1, [pc, #220]	@ (8014a64 <plug_holes+0x124>)
 8014988:	4833      	ldr	r0, [pc, #204]	@ (8014a58 <plug_holes+0x118>)
 801498a:	f00d f97d 	bl	8021c88 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	881b      	ldrh	r3, [r3, #0]
 8014992:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8014996:	d906      	bls.n	80149a6 <plug_holes+0x66>
 8014998:	4b2d      	ldr	r3, [pc, #180]	@ (8014a50 <plug_holes+0x110>)
 801499a:	f44f 72b1 	mov.w	r2, #354	@ 0x162
 801499e:	4932      	ldr	r1, [pc, #200]	@ (8014a68 <plug_holes+0x128>)
 80149a0:	482d      	ldr	r0, [pc, #180]	@ (8014a58 <plug_holes+0x118>)
 80149a2:	f00d f971 	bl	8021c88 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 80149a6:	4b29      	ldr	r3, [pc, #164]	@ (8014a4c <plug_holes+0x10c>)
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	687a      	ldr	r2, [r7, #4]
 80149ac:	8812      	ldrh	r2, [r2, #0]
 80149ae:	4413      	add	r3, r2
 80149b0:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80149b2:	687a      	ldr	r2, [r7, #4]
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	429a      	cmp	r2, r3
 80149b8:	d01f      	beq.n	80149fa <plug_holes+0xba>
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	791b      	ldrb	r3, [r3, #4]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d11b      	bne.n	80149fa <plug_holes+0xba>
 80149c2:	4b26      	ldr	r3, [pc, #152]	@ (8014a5c <plug_holes+0x11c>)
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	68fa      	ldr	r2, [r7, #12]
 80149c8:	429a      	cmp	r2, r3
 80149ca:	d016      	beq.n	80149fa <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80149cc:	4b27      	ldr	r3, [pc, #156]	@ (8014a6c <plug_holes+0x12c>)
 80149ce:	681b      	ldr	r3, [r3, #0]
 80149d0:	68fa      	ldr	r2, [r7, #12]
 80149d2:	429a      	cmp	r2, r3
 80149d4:	d102      	bne.n	80149dc <plug_holes+0x9c>
      lfree = mem;
 80149d6:	4a25      	ldr	r2, [pc, #148]	@ (8014a6c <plug_holes+0x12c>)
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	881a      	ldrh	r2, [r3, #0]
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 80149e4:	4b19      	ldr	r3, [pc, #100]	@ (8014a4c <plug_holes+0x10c>)
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	687a      	ldr	r2, [r7, #4]
 80149ea:	1ad1      	subs	r1, r2, r3
 80149ec:	4b17      	ldr	r3, [pc, #92]	@ (8014a4c <plug_holes+0x10c>)
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	68fa      	ldr	r2, [r7, #12]
 80149f2:	8812      	ldrh	r2, [r2, #0]
 80149f4:	4413      	add	r3, r2
 80149f6:	b28a      	uxth	r2, r1
 80149f8:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 80149fa:	4b14      	ldr	r3, [pc, #80]	@ (8014a4c <plug_holes+0x10c>)
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	687a      	ldr	r2, [r7, #4]
 8014a00:	8852      	ldrh	r2, [r2, #2]
 8014a02:	4413      	add	r3, r2
 8014a04:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8014a06:	68ba      	ldr	r2, [r7, #8]
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	429a      	cmp	r2, r3
 8014a0c:	d01a      	beq.n	8014a44 <plug_holes+0x104>
 8014a0e:	68bb      	ldr	r3, [r7, #8]
 8014a10:	791b      	ldrb	r3, [r3, #4]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d116      	bne.n	8014a44 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8014a16:	4b15      	ldr	r3, [pc, #84]	@ (8014a6c <plug_holes+0x12c>)
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	687a      	ldr	r2, [r7, #4]
 8014a1c:	429a      	cmp	r2, r3
 8014a1e:	d102      	bne.n	8014a26 <plug_holes+0xe6>
      lfree = pmem;
 8014a20:	4a12      	ldr	r2, [pc, #72]	@ (8014a6c <plug_holes+0x12c>)
 8014a22:	68bb      	ldr	r3, [r7, #8]
 8014a24:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	881a      	ldrh	r2, [r3, #0]
 8014a2a:	68bb      	ldr	r3, [r7, #8]
 8014a2c:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8014a2e:	4b07      	ldr	r3, [pc, #28]	@ (8014a4c <plug_holes+0x10c>)
 8014a30:	681b      	ldr	r3, [r3, #0]
 8014a32:	68ba      	ldr	r2, [r7, #8]
 8014a34:	1ad1      	subs	r1, r2, r3
 8014a36:	4b05      	ldr	r3, [pc, #20]	@ (8014a4c <plug_holes+0x10c>)
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	687a      	ldr	r2, [r7, #4]
 8014a3c:	8812      	ldrh	r2, [r2, #0]
 8014a3e:	4413      	add	r3, r2
 8014a40:	b28a      	uxth	r2, r1
 8014a42:	805a      	strh	r2, [r3, #2]
  }
}
 8014a44:	bf00      	nop
 8014a46:	3710      	adds	r7, #16
 8014a48:	46bd      	mov	sp, r7
 8014a4a:	bd80      	pop	{r7, pc}
 8014a4c:	20008f0c 	.word	0x20008f0c
 8014a50:	080257cc 	.word	0x080257cc
 8014a54:	080257fc 	.word	0x080257fc
 8014a58:	08025814 	.word	0x08025814
 8014a5c:	20008f10 	.word	0x20008f10
 8014a60:	0802583c 	.word	0x0802583c
 8014a64:	08025858 	.word	0x08025858
 8014a68:	08025874 	.word	0x08025874
 8014a6c:	20008f14 	.word	0x20008f14

08014a70 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8014a70:	b480      	push	{r7}
 8014a72:	b083      	sub	sp, #12
 8014a74:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8014a76:	4b1b      	ldr	r3, [pc, #108]	@ (8014ae4 <mem_init+0x74>)
 8014a78:	3303      	adds	r3, #3
 8014a7a:	f023 0303 	bic.w	r3, r3, #3
 8014a7e:	461a      	mov	r2, r3
 8014a80:	4b19      	ldr	r3, [pc, #100]	@ (8014ae8 <mem_init+0x78>)
 8014a82:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8014a84:	4b18      	ldr	r3, [pc, #96]	@ (8014ae8 <mem_init+0x78>)
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8014a90:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	2200      	movs	r2, #0
 8014a96:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	2200      	movs	r2, #0
 8014a9c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8014a9e:	4b12      	ldr	r3, [pc, #72]	@ (8014ae8 <mem_init+0x78>)
 8014aa0:	681b      	ldr	r3, [r3, #0]
 8014aa2:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 8014aa6:	4a11      	ldr	r2, [pc, #68]	@ (8014aec <mem_init+0x7c>)
 8014aa8:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8014aaa:	4b10      	ldr	r3, [pc, #64]	@ (8014aec <mem_init+0x7c>)
 8014aac:	681b      	ldr	r3, [r3, #0]
 8014aae:	2201      	movs	r2, #1
 8014ab0:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8014ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8014aec <mem_init+0x7c>)
 8014ab4:	681b      	ldr	r3, [r3, #0]
 8014ab6:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8014aba:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8014abc:	4b0b      	ldr	r3, [pc, #44]	@ (8014aec <mem_init+0x7c>)
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8014ac4:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8014ac6:	4b08      	ldr	r3, [pc, #32]	@ (8014ae8 <mem_init+0x78>)
 8014ac8:	681b      	ldr	r3, [r3, #0]
 8014aca:	4a09      	ldr	r2, [pc, #36]	@ (8014af0 <mem_init+0x80>)
 8014acc:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 8014ace:	4b09      	ldr	r3, [pc, #36]	@ (8014af4 <mem_init+0x84>)
 8014ad0:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8014ad4:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8014ad8:	bf00      	nop
 8014ada:	370c      	adds	r7, #12
 8014adc:	46bd      	mov	sp, r7
 8014ade:	bc80      	pop	{r7}
 8014ae0:	4770      	bx	lr
 8014ae2:	bf00      	nop
 8014ae4:	200088b8 	.word	0x200088b8
 8014ae8:	20008f0c 	.word	0x20008f0c
 8014aec:	20008f10 	.word	0x20008f10
 8014af0:	20008f14 	.word	0x20008f14
 8014af4:	2000be88 	.word	0x2000be88

08014af8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8014af8:	b580      	push	{r7, lr}
 8014afa:	b084      	sub	sp, #16
 8014afc:	af00      	add	r7, sp, #0
 8014afe:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d05d      	beq.n	8014bc2 <mem_free+0xca>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	f003 0303 	and.w	r3, r3, #3
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d006      	beq.n	8014b1e <mem_free+0x26>
 8014b10:	4b2e      	ldr	r3, [pc, #184]	@ (8014bcc <mem_free+0xd4>)
 8014b12:	f44f 72d6 	mov.w	r2, #428	@ 0x1ac
 8014b16:	492e      	ldr	r1, [pc, #184]	@ (8014bd0 <mem_free+0xd8>)
 8014b18:	482e      	ldr	r0, [pc, #184]	@ (8014bd4 <mem_free+0xdc>)
 8014b1a:	f00d f8b5 	bl	8021c88 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8014b1e:	4b2e      	ldr	r3, [pc, #184]	@ (8014bd8 <mem_free+0xe0>)
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	687a      	ldr	r2, [r7, #4]
 8014b24:	429a      	cmp	r2, r3
 8014b26:	d304      	bcc.n	8014b32 <mem_free+0x3a>
 8014b28:	4b2c      	ldr	r3, [pc, #176]	@ (8014bdc <mem_free+0xe4>)
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	687a      	ldr	r2, [r7, #4]
 8014b2e:	429a      	cmp	r2, r3
 8014b30:	d306      	bcc.n	8014b40 <mem_free+0x48>
 8014b32:	4b26      	ldr	r3, [pc, #152]	@ (8014bcc <mem_free+0xd4>)
 8014b34:	f44f 72d7 	mov.w	r2, #430	@ 0x1ae
 8014b38:	4929      	ldr	r1, [pc, #164]	@ (8014be0 <mem_free+0xe8>)
 8014b3a:	4826      	ldr	r0, [pc, #152]	@ (8014bd4 <mem_free+0xdc>)
 8014b3c:	f00d f8a4 	bl	8021c88 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8014b40:	4b25      	ldr	r3, [pc, #148]	@ (8014bd8 <mem_free+0xe0>)
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	687a      	ldr	r2, [r7, #4]
 8014b46:	429a      	cmp	r2, r3
 8014b48:	d304      	bcc.n	8014b54 <mem_free+0x5c>
 8014b4a:	4b24      	ldr	r3, [pc, #144]	@ (8014bdc <mem_free+0xe4>)
 8014b4c:	681b      	ldr	r3, [r3, #0]
 8014b4e:	687a      	ldr	r2, [r7, #4]
 8014b50:	429a      	cmp	r2, r3
 8014b52:	d308      	bcc.n	8014b66 <mem_free+0x6e>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
 8014b54:	4b23      	ldr	r3, [pc, #140]	@ (8014be4 <mem_free+0xec>)
 8014b56:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 8014b5a:	3301      	adds	r3, #1
 8014b5c:	b29a      	uxth	r2, r3
 8014b5e:	4b21      	ldr	r3, [pc, #132]	@ (8014be4 <mem_free+0xec>)
 8014b60:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
    SYS_ARCH_UNPROTECT(lev);
    return;
 8014b64:	e02e      	b.n	8014bc4 <mem_free+0xcc>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	3b08      	subs	r3, #8
 8014b6a:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	791b      	ldrb	r3, [r3, #4]
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d106      	bne.n	8014b82 <mem_free+0x8a>
 8014b74:	4b15      	ldr	r3, [pc, #84]	@ (8014bcc <mem_free+0xd4>)
 8014b76:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
 8014b7a:	491b      	ldr	r1, [pc, #108]	@ (8014be8 <mem_free+0xf0>)
 8014b7c:	4815      	ldr	r0, [pc, #84]	@ (8014bd4 <mem_free+0xdc>)
 8014b7e:	f00d f883 	bl	8021c88 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	2200      	movs	r2, #0
 8014b86:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8014b88:	4b18      	ldr	r3, [pc, #96]	@ (8014bec <mem_free+0xf4>)
 8014b8a:	681b      	ldr	r3, [r3, #0]
 8014b8c:	68fa      	ldr	r2, [r7, #12]
 8014b8e:	429a      	cmp	r2, r3
 8014b90:	d202      	bcs.n	8014b98 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8014b92:	4a16      	ldr	r2, [pc, #88]	@ (8014bec <mem_free+0xf4>)
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 8014b98:	4b12      	ldr	r3, [pc, #72]	@ (8014be4 <mem_free+0xec>)
 8014b9a:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 8014b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8014bd8 <mem_free+0xe0>)
 8014ba0:	681b      	ldr	r3, [r3, #0]
 8014ba2:	68f9      	ldr	r1, [r7, #12]
 8014ba4:	1acb      	subs	r3, r1, r3
 8014ba6:	b299      	uxth	r1, r3
 8014ba8:	68fb      	ldr	r3, [r7, #12]
 8014baa:	881b      	ldrh	r3, [r3, #0]
 8014bac:	1acb      	subs	r3, r1, r3
 8014bae:	b29b      	uxth	r3, r3
 8014bb0:	4413      	add	r3, r2
 8014bb2:	b29a      	uxth	r2, r3
 8014bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8014be4 <mem_free+0xec>)
 8014bb6:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8014bba:	68f8      	ldr	r0, [r7, #12]
 8014bbc:	f7ff fec0 	bl	8014940 <plug_holes>
 8014bc0:	e000      	b.n	8014bc4 <mem_free+0xcc>
    return;
 8014bc2:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8014bc4:	3710      	adds	r7, #16
 8014bc6:	46bd      	mov	sp, r7
 8014bc8:	bd80      	pop	{r7, pc}
 8014bca:	bf00      	nop
 8014bcc:	080257cc 	.word	0x080257cc
 8014bd0:	080258a0 	.word	0x080258a0
 8014bd4:	08025814 	.word	0x08025814
 8014bd8:	20008f0c 	.word	0x20008f0c
 8014bdc:	20008f10 	.word	0x20008f10
 8014be0:	080258c4 	.word	0x080258c4
 8014be4:	2000be88 	.word	0x2000be88
 8014be8:	080258dc 	.word	0x080258dc
 8014bec:	20008f14 	.word	0x20008f14

08014bf0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8014bf0:	b580      	push	{r7, lr}
 8014bf2:	b086      	sub	sp, #24
 8014bf4:	af00      	add	r7, sp, #0
 8014bf6:	6078      	str	r0, [r7, #4]
 8014bf8:	460b      	mov	r3, r1
 8014bfa:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8014bfc:	887b      	ldrh	r3, [r7, #2]
 8014bfe:	3303      	adds	r3, #3
 8014c00:	b29b      	uxth	r3, r3
 8014c02:	f023 0303 	bic.w	r3, r3, #3
 8014c06:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 8014c08:	887b      	ldrh	r3, [r7, #2]
 8014c0a:	2b0b      	cmp	r3, #11
 8014c0c:	d801      	bhi.n	8014c12 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8014c0e:	230c      	movs	r3, #12
 8014c10:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8014c12:	887b      	ldrh	r3, [r7, #2]
 8014c14:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8014c18:	d901      	bls.n	8014c1e <mem_trim+0x2e>
    return NULL;
 8014c1a:	2300      	movs	r3, #0
 8014c1c:	e0d1      	b.n	8014dc2 <mem_trim+0x1d2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8014c1e:	4b6b      	ldr	r3, [pc, #428]	@ (8014dcc <mem_trim+0x1dc>)
 8014c20:	681b      	ldr	r3, [r3, #0]
 8014c22:	687a      	ldr	r2, [r7, #4]
 8014c24:	429a      	cmp	r2, r3
 8014c26:	d304      	bcc.n	8014c32 <mem_trim+0x42>
 8014c28:	4b69      	ldr	r3, [pc, #420]	@ (8014dd0 <mem_trim+0x1e0>)
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	687a      	ldr	r2, [r7, #4]
 8014c2e:	429a      	cmp	r2, r3
 8014c30:	d306      	bcc.n	8014c40 <mem_trim+0x50>
 8014c32:	4b68      	ldr	r3, [pc, #416]	@ (8014dd4 <mem_trim+0x1e4>)
 8014c34:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8014c38:	4967      	ldr	r1, [pc, #412]	@ (8014dd8 <mem_trim+0x1e8>)
 8014c3a:	4868      	ldr	r0, [pc, #416]	@ (8014ddc <mem_trim+0x1ec>)
 8014c3c:	f00d f824 	bl	8021c88 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8014c40:	4b62      	ldr	r3, [pc, #392]	@ (8014dcc <mem_trim+0x1dc>)
 8014c42:	681b      	ldr	r3, [r3, #0]
 8014c44:	687a      	ldr	r2, [r7, #4]
 8014c46:	429a      	cmp	r2, r3
 8014c48:	d304      	bcc.n	8014c54 <mem_trim+0x64>
 8014c4a:	4b61      	ldr	r3, [pc, #388]	@ (8014dd0 <mem_trim+0x1e0>)
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	687a      	ldr	r2, [r7, #4]
 8014c50:	429a      	cmp	r2, r3
 8014c52:	d309      	bcc.n	8014c68 <mem_trim+0x78>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
 8014c54:	4b62      	ldr	r3, [pc, #392]	@ (8014de0 <mem_trim+0x1f0>)
 8014c56:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 8014c5a:	3301      	adds	r3, #1
 8014c5c:	b29a      	uxth	r2, r3
 8014c5e:	4b60      	ldr	r3, [pc, #384]	@ (8014de0 <mem_trim+0x1f0>)
 8014c60:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	e0ac      	b.n	8014dc2 <mem_trim+0x1d2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	3b08      	subs	r3, #8
 8014c6c:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8014c6e:	4b57      	ldr	r3, [pc, #348]	@ (8014dcc <mem_trim+0x1dc>)
 8014c70:	681b      	ldr	r3, [r3, #0]
 8014c72:	697a      	ldr	r2, [r7, #20]
 8014c74:	1ad3      	subs	r3, r2, r3
 8014c76:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8014c78:	697b      	ldr	r3, [r7, #20]
 8014c7a:	881a      	ldrh	r2, [r3, #0]
 8014c7c:	8a7b      	ldrh	r3, [r7, #18]
 8014c7e:	1ad3      	subs	r3, r2, r3
 8014c80:	b29b      	uxth	r3, r3
 8014c82:	3b08      	subs	r3, #8
 8014c84:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8014c86:	887a      	ldrh	r2, [r7, #2]
 8014c88:	8a3b      	ldrh	r3, [r7, #16]
 8014c8a:	429a      	cmp	r2, r3
 8014c8c:	d906      	bls.n	8014c9c <mem_trim+0xac>
 8014c8e:	4b51      	ldr	r3, [pc, #324]	@ (8014dd4 <mem_trim+0x1e4>)
 8014c90:	f240 2206 	movw	r2, #518	@ 0x206
 8014c94:	4953      	ldr	r1, [pc, #332]	@ (8014de4 <mem_trim+0x1f4>)
 8014c96:	4851      	ldr	r0, [pc, #324]	@ (8014ddc <mem_trim+0x1ec>)
 8014c98:	f00c fff6 	bl	8021c88 <iprintf>
  if (newsize > size) {
 8014c9c:	887a      	ldrh	r2, [r7, #2]
 8014c9e:	8a3b      	ldrh	r3, [r7, #16]
 8014ca0:	429a      	cmp	r2, r3
 8014ca2:	d901      	bls.n	8014ca8 <mem_trim+0xb8>
    /* not supported */
    return NULL;
 8014ca4:	2300      	movs	r3, #0
 8014ca6:	e08c      	b.n	8014dc2 <mem_trim+0x1d2>
  }
  if (newsize == size) {
 8014ca8:	887a      	ldrh	r2, [r7, #2]
 8014caa:	8a3b      	ldrh	r3, [r7, #16]
 8014cac:	429a      	cmp	r2, r3
 8014cae:	d101      	bne.n	8014cb4 <mem_trim+0xc4>
    /* No change in size, simply return */
    return rmem;
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	e086      	b.n	8014dc2 <mem_trim+0x1d2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8014cb4:	4b45      	ldr	r3, [pc, #276]	@ (8014dcc <mem_trim+0x1dc>)
 8014cb6:	681b      	ldr	r3, [r3, #0]
 8014cb8:	697a      	ldr	r2, [r7, #20]
 8014cba:	8812      	ldrh	r2, [r2, #0]
 8014cbc:	4413      	add	r3, r2
 8014cbe:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	791b      	ldrb	r3, [r3, #4]
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d13d      	bne.n	8014d44 <mem_trim+0x154>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	881b      	ldrh	r3, [r3, #0]
 8014ccc:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8014cce:	8a7a      	ldrh	r2, [r7, #18]
 8014cd0:	887b      	ldrh	r3, [r7, #2]
 8014cd2:	4413      	add	r3, r2
 8014cd4:	b29b      	uxth	r3, r3
 8014cd6:	3308      	adds	r3, #8
 8014cd8:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 8014cda:	4b43      	ldr	r3, [pc, #268]	@ (8014de8 <mem_trim+0x1f8>)
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	68fa      	ldr	r2, [r7, #12]
 8014ce0:	429a      	cmp	r2, r3
 8014ce2:	d105      	bne.n	8014cf0 <mem_trim+0x100>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8014ce4:	4b39      	ldr	r3, [pc, #228]	@ (8014dcc <mem_trim+0x1dc>)
 8014ce6:	681a      	ldr	r2, [r3, #0]
 8014ce8:	897b      	ldrh	r3, [r7, #10]
 8014cea:	4413      	add	r3, r2
 8014cec:	4a3e      	ldr	r2, [pc, #248]	@ (8014de8 <mem_trim+0x1f8>)
 8014cee:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8014cf0:	4b36      	ldr	r3, [pc, #216]	@ (8014dcc <mem_trim+0x1dc>)
 8014cf2:	681a      	ldr	r2, [r3, #0]
 8014cf4:	897b      	ldrh	r3, [r7, #10]
 8014cf6:	4413      	add	r3, r2
 8014cf8:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	2200      	movs	r2, #0
 8014cfe:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	893a      	ldrh	r2, [r7, #8]
 8014d04:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8014d06:	68fb      	ldr	r3, [r7, #12]
 8014d08:	8a7a      	ldrh	r2, [r7, #18]
 8014d0a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8014d0c:	697b      	ldr	r3, [r7, #20]
 8014d0e:	897a      	ldrh	r2, [r7, #10]
 8014d10:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	881b      	ldrh	r3, [r3, #0]
 8014d16:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8014d1a:	d006      	beq.n	8014d2a <mem_trim+0x13a>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8014d1c:	4b2b      	ldr	r3, [pc, #172]	@ (8014dcc <mem_trim+0x1dc>)
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	68fa      	ldr	r2, [r7, #12]
 8014d22:	8812      	ldrh	r2, [r2, #0]
 8014d24:	4413      	add	r3, r2
 8014d26:	897a      	ldrh	r2, [r7, #10]
 8014d28:	805a      	strh	r2, [r3, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 8014d2a:	4b2d      	ldr	r3, [pc, #180]	@ (8014de0 <mem_trim+0x1f0>)
 8014d2c:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 8014d30:	8879      	ldrh	r1, [r7, #2]
 8014d32:	8a3b      	ldrh	r3, [r7, #16]
 8014d34:	1acb      	subs	r3, r1, r3
 8014d36:	b29b      	uxth	r3, r3
 8014d38:	4413      	add	r3, r2
 8014d3a:	b29a      	uxth	r2, r3
 8014d3c:	4b28      	ldr	r3, [pc, #160]	@ (8014de0 <mem_trim+0x1f0>)
 8014d3e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8014d42:	e03d      	b.n	8014dc0 <mem_trim+0x1d0>
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8014d44:	887b      	ldrh	r3, [r7, #2]
 8014d46:	f103 0214 	add.w	r2, r3, #20
 8014d4a:	8a3b      	ldrh	r3, [r7, #16]
 8014d4c:	429a      	cmp	r2, r3
 8014d4e:	d837      	bhi.n	8014dc0 <mem_trim+0x1d0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8014d50:	8a7a      	ldrh	r2, [r7, #18]
 8014d52:	887b      	ldrh	r3, [r7, #2]
 8014d54:	4413      	add	r3, r2
 8014d56:	b29b      	uxth	r3, r3
 8014d58:	3308      	adds	r3, #8
 8014d5a:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8014d5c:	4b1b      	ldr	r3, [pc, #108]	@ (8014dcc <mem_trim+0x1dc>)
 8014d5e:	681a      	ldr	r2, [r3, #0]
 8014d60:	897b      	ldrh	r3, [r7, #10]
 8014d62:	4413      	add	r3, r2
 8014d64:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 8014d66:	4b20      	ldr	r3, [pc, #128]	@ (8014de8 <mem_trim+0x1f8>)
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	68fa      	ldr	r2, [r7, #12]
 8014d6c:	429a      	cmp	r2, r3
 8014d6e:	d202      	bcs.n	8014d76 <mem_trim+0x186>
      lfree = mem2;
 8014d70:	4a1d      	ldr	r2, [pc, #116]	@ (8014de8 <mem_trim+0x1f8>)
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	2200      	movs	r2, #0
 8014d7a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8014d7c:	697b      	ldr	r3, [r7, #20]
 8014d7e:	881a      	ldrh	r2, [r3, #0]
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	8a7a      	ldrh	r2, [r7, #18]
 8014d88:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8014d8a:	697b      	ldr	r3, [r7, #20]
 8014d8c:	897a      	ldrh	r2, [r7, #10]
 8014d8e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8014d90:	68fb      	ldr	r3, [r7, #12]
 8014d92:	881b      	ldrh	r3, [r3, #0]
 8014d94:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8014d98:	d006      	beq.n	8014da8 <mem_trim+0x1b8>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8014d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8014dcc <mem_trim+0x1dc>)
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	68fa      	ldr	r2, [r7, #12]
 8014da0:	8812      	ldrh	r2, [r2, #0]
 8014da2:	4413      	add	r3, r2
 8014da4:	897a      	ldrh	r2, [r7, #10]
 8014da6:	805a      	strh	r2, [r3, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 8014da8:	4b0d      	ldr	r3, [pc, #52]	@ (8014de0 <mem_trim+0x1f0>)
 8014daa:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 8014dae:	8879      	ldrh	r1, [r7, #2]
 8014db0:	8a3b      	ldrh	r3, [r7, #16]
 8014db2:	1acb      	subs	r3, r1, r3
 8014db4:	b29b      	uxth	r3, r3
 8014db6:	4413      	add	r3, r2
 8014db8:	b29a      	uxth	r2, r3
 8014dba:	4b09      	ldr	r3, [pc, #36]	@ (8014de0 <mem_trim+0x1f0>)
 8014dbc:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8014dc0:	687b      	ldr	r3, [r7, #4]
}
 8014dc2:	4618      	mov	r0, r3
 8014dc4:	3718      	adds	r7, #24
 8014dc6:	46bd      	mov	sp, r7
 8014dc8:	bd80      	pop	{r7, pc}
 8014dca:	bf00      	nop
 8014dcc:	20008f0c 	.word	0x20008f0c
 8014dd0:	20008f10 	.word	0x20008f10
 8014dd4:	080257cc 	.word	0x080257cc
 8014dd8:	080258f0 	.word	0x080258f0
 8014ddc:	08025814 	.word	0x08025814
 8014de0:	2000be88 	.word	0x2000be88
 8014de4:	08025908 	.word	0x08025908
 8014de8:	20008f14 	.word	0x20008f14

08014dec <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8014dec:	b580      	push	{r7, lr}
 8014dee:	b088      	sub	sp, #32
 8014df0:	af00      	add	r7, sp, #0
 8014df2:	4603      	mov	r3, r0
 8014df4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8014df6:	88fb      	ldrh	r3, [r7, #6]
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d101      	bne.n	8014e00 <mem_malloc+0x14>
    return NULL;
 8014dfc:	2300      	movs	r3, #0
 8014dfe:	e0eb      	b.n	8014fd8 <mem_malloc+0x1ec>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8014e00:	88fb      	ldrh	r3, [r7, #6]
 8014e02:	3303      	adds	r3, #3
 8014e04:	b29b      	uxth	r3, r3
 8014e06:	f023 0303 	bic.w	r3, r3, #3
 8014e0a:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 8014e0c:	88fb      	ldrh	r3, [r7, #6]
 8014e0e:	2b0b      	cmp	r3, #11
 8014e10:	d801      	bhi.n	8014e16 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8014e12:	230c      	movs	r3, #12
 8014e14:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 8014e16:	88fb      	ldrh	r3, [r7, #6]
 8014e18:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8014e1c:	d901      	bls.n	8014e22 <mem_malloc+0x36>
    return NULL;
 8014e1e:	2300      	movs	r3, #0
 8014e20:	e0da      	b.n	8014fd8 <mem_malloc+0x1ec>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8014e22:	4b6f      	ldr	r3, [pc, #444]	@ (8014fe0 <mem_malloc+0x1f4>)
 8014e24:	681a      	ldr	r2, [r3, #0]
 8014e26:	4b6f      	ldr	r3, [pc, #444]	@ (8014fe4 <mem_malloc+0x1f8>)
 8014e28:	681b      	ldr	r3, [r3, #0]
 8014e2a:	1ad3      	subs	r3, r2, r3
 8014e2c:	83fb      	strh	r3, [r7, #30]
 8014e2e:	e0c3      	b.n	8014fb8 <mem_malloc+0x1cc>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8014e30:	4b6c      	ldr	r3, [pc, #432]	@ (8014fe4 <mem_malloc+0x1f8>)
 8014e32:	681a      	ldr	r2, [r3, #0]
 8014e34:	8bfb      	ldrh	r3, [r7, #30]
 8014e36:	4413      	add	r3, r2
 8014e38:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8014e3a:	697b      	ldr	r3, [r7, #20]
 8014e3c:	791b      	ldrb	r3, [r3, #4]
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	f040 80b4 	bne.w	8014fac <mem_malloc+0x1c0>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8014e44:	697b      	ldr	r3, [r7, #20]
 8014e46:	881b      	ldrh	r3, [r3, #0]
 8014e48:	461a      	mov	r2, r3
 8014e4a:	8bfb      	ldrh	r3, [r7, #30]
 8014e4c:	1ad3      	subs	r3, r2, r3
 8014e4e:	f1a3 0208 	sub.w	r2, r3, #8
 8014e52:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8014e54:	429a      	cmp	r2, r3
 8014e56:	f0c0 80a9 	bcc.w	8014fac <mem_malloc+0x1c0>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8014e5a:	697b      	ldr	r3, [r7, #20]
 8014e5c:	881b      	ldrh	r3, [r3, #0]
 8014e5e:	461a      	mov	r2, r3
 8014e60:	8bfb      	ldrh	r3, [r7, #30]
 8014e62:	1ad3      	subs	r3, r2, r3
 8014e64:	f1a3 0208 	sub.w	r2, r3, #8
 8014e68:	88fb      	ldrh	r3, [r7, #6]
 8014e6a:	3314      	adds	r3, #20
 8014e6c:	429a      	cmp	r2, r3
 8014e6e:	d332      	bcc.n	8014ed6 <mem_malloc+0xea>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8014e70:	8bfa      	ldrh	r2, [r7, #30]
 8014e72:	88fb      	ldrh	r3, [r7, #6]
 8014e74:	4413      	add	r3, r2
 8014e76:	b29b      	uxth	r3, r3
 8014e78:	3308      	adds	r3, #8
 8014e7a:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8014e7c:	4b59      	ldr	r3, [pc, #356]	@ (8014fe4 <mem_malloc+0x1f8>)
 8014e7e:	681a      	ldr	r2, [r3, #0]
 8014e80:	8a7b      	ldrh	r3, [r7, #18]
 8014e82:	4413      	add	r3, r2
 8014e84:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8014e86:	68fb      	ldr	r3, [r7, #12]
 8014e88:	2200      	movs	r2, #0
 8014e8a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8014e8c:	697b      	ldr	r3, [r7, #20]
 8014e8e:	881a      	ldrh	r2, [r3, #0]
 8014e90:	68fb      	ldr	r3, [r7, #12]
 8014e92:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8014e94:	68fb      	ldr	r3, [r7, #12]
 8014e96:	8bfa      	ldrh	r2, [r7, #30]
 8014e98:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8014e9a:	697b      	ldr	r3, [r7, #20]
 8014e9c:	8a7a      	ldrh	r2, [r7, #18]
 8014e9e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8014ea0:	697b      	ldr	r3, [r7, #20]
 8014ea2:	2201      	movs	r2, #1
 8014ea4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8014ea6:	68fb      	ldr	r3, [r7, #12]
 8014ea8:	881b      	ldrh	r3, [r3, #0]
 8014eaa:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8014eae:	d006      	beq.n	8014ebe <mem_malloc+0xd2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8014eb0:	4b4c      	ldr	r3, [pc, #304]	@ (8014fe4 <mem_malloc+0x1f8>)
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	68fa      	ldr	r2, [r7, #12]
 8014eb6:	8812      	ldrh	r2, [r2, #0]
 8014eb8:	4413      	add	r3, r2
 8014eba:	8a7a      	ldrh	r2, [r7, #18]
 8014ebc:	805a      	strh	r2, [r3, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 8014ebe:	4b4a      	ldr	r3, [pc, #296]	@ (8014fe8 <mem_malloc+0x1fc>)
 8014ec0:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 8014ec4:	88fb      	ldrh	r3, [r7, #6]
 8014ec6:	4413      	add	r3, r2
 8014ec8:	b29b      	uxth	r3, r3
 8014eca:	3308      	adds	r3, #8
 8014ecc:	b29a      	uxth	r2, r3
 8014ece:	4b46      	ldr	r3, [pc, #280]	@ (8014fe8 <mem_malloc+0x1fc>)
 8014ed0:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8014ed4:	e013      	b.n	8014efe <mem_malloc+0x112>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8014ed6:	697b      	ldr	r3, [r7, #20]
 8014ed8:	2201      	movs	r2, #1
 8014eda:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
 8014edc:	4b42      	ldr	r3, [pc, #264]	@ (8014fe8 <mem_malloc+0x1fc>)
 8014ede:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 8014ee2:	697b      	ldr	r3, [r7, #20]
 8014ee4:	8819      	ldrh	r1, [r3, #0]
 8014ee6:	4b3f      	ldr	r3, [pc, #252]	@ (8014fe4 <mem_malloc+0x1f8>)
 8014ee8:	681b      	ldr	r3, [r3, #0]
 8014eea:	6978      	ldr	r0, [r7, #20]
 8014eec:	1ac3      	subs	r3, r0, r3
 8014eee:	b29b      	uxth	r3, r3
 8014ef0:	1acb      	subs	r3, r1, r3
 8014ef2:	b29b      	uxth	r3, r3
 8014ef4:	4413      	add	r3, r2
 8014ef6:	b29a      	uxth	r2, r3
 8014ef8:	4b3b      	ldr	r3, [pc, #236]	@ (8014fe8 <mem_malloc+0x1fc>)
 8014efa:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8014efe:	4b38      	ldr	r3, [pc, #224]	@ (8014fe0 <mem_malloc+0x1f4>)
 8014f00:	681b      	ldr	r3, [r3, #0]
 8014f02:	697a      	ldr	r2, [r7, #20]
 8014f04:	429a      	cmp	r2, r3
 8014f06:	d127      	bne.n	8014f58 <mem_malloc+0x16c>
          struct mem *cur = lfree;
 8014f08:	4b35      	ldr	r3, [pc, #212]	@ (8014fe0 <mem_malloc+0x1f4>)
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8014f0e:	e005      	b.n	8014f1c <mem_malloc+0x130>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8014f10:	4b34      	ldr	r3, [pc, #208]	@ (8014fe4 <mem_malloc+0x1f8>)
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	69ba      	ldr	r2, [r7, #24]
 8014f16:	8812      	ldrh	r2, [r2, #0]
 8014f18:	4413      	add	r3, r2
 8014f1a:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 8014f1c:	69bb      	ldr	r3, [r7, #24]
 8014f1e:	791b      	ldrb	r3, [r3, #4]
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d004      	beq.n	8014f2e <mem_malloc+0x142>
 8014f24:	4b31      	ldr	r3, [pc, #196]	@ (8014fec <mem_malloc+0x200>)
 8014f26:	681b      	ldr	r3, [r3, #0]
 8014f28:	69ba      	ldr	r2, [r7, #24]
 8014f2a:	429a      	cmp	r2, r3
 8014f2c:	d1f0      	bne.n	8014f10 <mem_malloc+0x124>
          }
          lfree = cur;
 8014f2e:	4a2c      	ldr	r2, [pc, #176]	@ (8014fe0 <mem_malloc+0x1f4>)
 8014f30:	69bb      	ldr	r3, [r7, #24]
 8014f32:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8014f34:	4b2a      	ldr	r3, [pc, #168]	@ (8014fe0 <mem_malloc+0x1f4>)
 8014f36:	681a      	ldr	r2, [r3, #0]
 8014f38:	4b2c      	ldr	r3, [pc, #176]	@ (8014fec <mem_malloc+0x200>)
 8014f3a:	681b      	ldr	r3, [r3, #0]
 8014f3c:	429a      	cmp	r2, r3
 8014f3e:	d00b      	beq.n	8014f58 <mem_malloc+0x16c>
 8014f40:	4b27      	ldr	r3, [pc, #156]	@ (8014fe0 <mem_malloc+0x1f4>)
 8014f42:	681b      	ldr	r3, [r3, #0]
 8014f44:	791b      	ldrb	r3, [r3, #4]
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d006      	beq.n	8014f58 <mem_malloc+0x16c>
 8014f4a:	4b29      	ldr	r3, [pc, #164]	@ (8014ff0 <mem_malloc+0x204>)
 8014f4c:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8014f50:	4928      	ldr	r1, [pc, #160]	@ (8014ff4 <mem_malloc+0x208>)
 8014f52:	4829      	ldr	r0, [pc, #164]	@ (8014ff8 <mem_malloc+0x20c>)
 8014f54:	f00c fe98 	bl	8021c88 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8014f58:	88fa      	ldrh	r2, [r7, #6]
 8014f5a:	697b      	ldr	r3, [r7, #20]
 8014f5c:	4413      	add	r3, r2
 8014f5e:	3308      	adds	r3, #8
 8014f60:	4a22      	ldr	r2, [pc, #136]	@ (8014fec <mem_malloc+0x200>)
 8014f62:	6812      	ldr	r2, [r2, #0]
 8014f64:	4293      	cmp	r3, r2
 8014f66:	d906      	bls.n	8014f76 <mem_malloc+0x18a>
 8014f68:	4b21      	ldr	r3, [pc, #132]	@ (8014ff0 <mem_malloc+0x204>)
 8014f6a:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8014f6e:	4923      	ldr	r1, [pc, #140]	@ (8014ffc <mem_malloc+0x210>)
 8014f70:	4821      	ldr	r0, [pc, #132]	@ (8014ff8 <mem_malloc+0x20c>)
 8014f72:	f00c fe89 	bl	8021c88 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8014f76:	697b      	ldr	r3, [r7, #20]
 8014f78:	f003 0303 	and.w	r3, r3, #3
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d006      	beq.n	8014f8e <mem_malloc+0x1a2>
 8014f80:	4b1b      	ldr	r3, [pc, #108]	@ (8014ff0 <mem_malloc+0x204>)
 8014f82:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8014f86:	491e      	ldr	r1, [pc, #120]	@ (8015000 <mem_malloc+0x214>)
 8014f88:	481b      	ldr	r0, [pc, #108]	@ (8014ff8 <mem_malloc+0x20c>)
 8014f8a:	f00c fe7d 	bl	8021c88 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8014f8e:	697b      	ldr	r3, [r7, #20]
 8014f90:	f003 0303 	and.w	r3, r3, #3
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	d006      	beq.n	8014fa6 <mem_malloc+0x1ba>
 8014f98:	4b15      	ldr	r3, [pc, #84]	@ (8014ff0 <mem_malloc+0x204>)
 8014f9a:	f240 22d7 	movw	r2, #727	@ 0x2d7
 8014f9e:	4919      	ldr	r1, [pc, #100]	@ (8015004 <mem_malloc+0x218>)
 8014fa0:	4815      	ldr	r0, [pc, #84]	@ (8014ff8 <mem_malloc+0x20c>)
 8014fa2:	f00c fe71 	bl	8021c88 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8014fa6:	697b      	ldr	r3, [r7, #20]
 8014fa8:	3308      	adds	r3, #8
 8014faa:	e015      	b.n	8014fd8 <mem_malloc+0x1ec>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8014fac:	4b0d      	ldr	r3, [pc, #52]	@ (8014fe4 <mem_malloc+0x1f8>)
 8014fae:	681a      	ldr	r2, [r3, #0]
 8014fb0:	8bfb      	ldrh	r3, [r7, #30]
 8014fb2:	4413      	add	r3, r2
 8014fb4:	881b      	ldrh	r3, [r3, #0]
 8014fb6:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8014fb8:	8bfa      	ldrh	r2, [r7, #30]
 8014fba:	88fb      	ldrh	r3, [r7, #6]
 8014fbc:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8014fc0:	429a      	cmp	r2, r3
 8014fc2:	f4ff af35 	bcc.w	8014e30 <mem_malloc+0x44>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
 8014fc6:	4b08      	ldr	r3, [pc, #32]	@ (8014fe8 <mem_malloc+0x1fc>)
 8014fc8:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 8014fcc:	3301      	adds	r3, #1
 8014fce:	b29a      	uxth	r2, r3
 8014fd0:	4b05      	ldr	r3, [pc, #20]	@ (8014fe8 <mem_malloc+0x1fc>)
 8014fd2:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 8014fd6:	2300      	movs	r3, #0
}
 8014fd8:	4618      	mov	r0, r3
 8014fda:	3720      	adds	r7, #32
 8014fdc:	46bd      	mov	sp, r7
 8014fde:	bd80      	pop	{r7, pc}
 8014fe0:	20008f14 	.word	0x20008f14
 8014fe4:	20008f0c 	.word	0x20008f0c
 8014fe8:	2000be88 	.word	0x2000be88
 8014fec:	20008f10 	.word	0x20008f10
 8014ff0:	080257cc 	.word	0x080257cc
 8014ff4:	08025928 	.word	0x08025928
 8014ff8:	08025814 	.word	0x08025814
 8014ffc:	08025944 	.word	0x08025944
 8015000:	08025974 	.word	0x08025974
 8015004:	080259a4 	.word	0x080259a4

08015008 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8015008:	b480      	push	{r7}
 801500a:	b085      	sub	sp, #20
 801500c:	af00      	add	r7, sp, #0
 801500e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	68db      	ldr	r3, [r3, #12]
 8015014:	2200      	movs	r2, #0
 8015016:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	689b      	ldr	r3, [r3, #8]
 801501c:	3303      	adds	r3, #3
 801501e:	f023 0303 	bic.w	r3, r3, #3
 8015022:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8015024:	2300      	movs	r3, #0
 8015026:	60fb      	str	r3, [r7, #12]
 8015028:	e011      	b.n	801504e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	68db      	ldr	r3, [r3, #12]
 801502e:	681a      	ldr	r2, [r3, #0]
 8015030:	68bb      	ldr	r3, [r7, #8]
 8015032:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	68db      	ldr	r3, [r3, #12]
 8015038:	68ba      	ldr	r2, [r7, #8]
 801503a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	889b      	ldrh	r3, [r3, #4]
 8015040:	461a      	mov	r2, r3
 8015042:	68bb      	ldr	r3, [r7, #8]
 8015044:	4413      	add	r3, r2
 8015046:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8015048:	68fb      	ldr	r3, [r7, #12]
 801504a:	3301      	adds	r3, #1
 801504c:	60fb      	str	r3, [r7, #12]
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	88db      	ldrh	r3, [r3, #6]
 8015052:	461a      	mov	r2, r3
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	4293      	cmp	r3, r2
 8015058:	dbe7      	blt.n	801502a <memp_init_pool+0x22>
      + MEMP_SANITY_REGION_AFTER_ALIGNED
#endif
    );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	687a      	ldr	r2, [r7, #4]
 8015060:	88d2      	ldrh	r2, [r2, #6]
 8015062:	805a      	strh	r2, [r3, #2]
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8015064:	bf00      	nop
 8015066:	3714      	adds	r7, #20
 8015068:	46bd      	mov	sp, r7
 801506a:	bc80      	pop	{r7}
 801506c:	4770      	bx	lr
	...

08015070 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8015070:	b580      	push	{r7, lr}
 8015072:	b082      	sub	sp, #8
 8015074:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8015076:	2300      	movs	r3, #0
 8015078:	80fb      	strh	r3, [r7, #6]
 801507a:	e014      	b.n	80150a6 <memp_init+0x36>
    memp_init_pool(memp_pools[i]);
 801507c:	88fb      	ldrh	r3, [r7, #6]
 801507e:	4a0e      	ldr	r2, [pc, #56]	@ (80150b8 <memp_init+0x48>)
 8015080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015084:	4618      	mov	r0, r3
 8015086:	f7ff ffbf 	bl	8015008 <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
 801508a:	88fb      	ldrh	r3, [r7, #6]
 801508c:	4a0a      	ldr	r2, [pc, #40]	@ (80150b8 <memp_init+0x48>)
 801508e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8015092:	88fb      	ldrh	r3, [r7, #6]
 8015094:	6812      	ldr	r2, [r2, #0]
 8015096:	4909      	ldr	r1, [pc, #36]	@ (80150bc <memp_init+0x4c>)
 8015098:	332c      	adds	r3, #44	@ 0x2c
 801509a:	009b      	lsls	r3, r3, #2
 801509c:	440b      	add	r3, r1
 801509e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80150a0:	88fb      	ldrh	r3, [r7, #6]
 80150a2:	3301      	adds	r3, #1
 80150a4:	80fb      	strh	r3, [r7, #6]
 80150a6:	88fb      	ldrh	r3, [r7, #6]
 80150a8:	2b08      	cmp	r3, #8
 80150aa:	d9e7      	bls.n	801507c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80150ac:	bf00      	nop
 80150ae:	bf00      	nop
 80150b0:	3708      	adds	r7, #8
 80150b2:	46bd      	mov	sp, r7
 80150b4:	bd80      	pop	{r7, pc}
 80150b6:	bf00      	nop
 80150b8:	08030c80 	.word	0x08030c80
 80150bc:	2000be88 	.word	0x2000be88

080150c0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 80150c0:	b580      	push	{r7, lr}
 80150c2:	b084      	sub	sp, #16
 80150c4:	af00      	add	r7, sp, #0
 80150c6:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	68db      	ldr	r3, [r3, #12]
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d026      	beq.n	8015124 <do_memp_malloc_pool+0x64>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	68db      	ldr	r3, [r3, #12]
 80150da:	68fa      	ldr	r2, [r7, #12]
 80150dc:	6812      	ldr	r2, [r2, #0]
 80150de:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	f003 0303 	and.w	r3, r3, #3
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d006      	beq.n	80150f8 <do_memp_malloc_pool+0x38>
 80150ea:	4b14      	ldr	r3, [pc, #80]	@ (801513c <do_memp_malloc_pool+0x7c>)
 80150ec:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 80150f0:	4913      	ldr	r1, [pc, #76]	@ (8015140 <do_memp_malloc_pool+0x80>)
 80150f2:	4814      	ldr	r0, [pc, #80]	@ (8015144 <do_memp_malloc_pool+0x84>)
 80150f4:	f00c fdc8 	bl	8021c88 <iprintf>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	889a      	ldrh	r2, [r3, #4]
 80150fe:	3201      	adds	r2, #1
 8015100:	b292      	uxth	r2, r2
 8015102:	809a      	strh	r2, [r3, #4]
    if (desc->stats->used > desc->stats->max) {
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	889a      	ldrh	r2, [r3, #4]
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	88db      	ldrh	r3, [r3, #6]
 8015110:	429a      	cmp	r2, r3
 8015112:	d905      	bls.n	8015120 <do_memp_malloc_pool+0x60>
      desc->stats->max = desc->stats->used;
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	681a      	ldr	r2, [r3, #0]
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	8892      	ldrh	r2, [r2, #4]
 801511e:	80da      	strh	r2, [r3, #6]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	e006      	b.n	8015132 <do_memp_malloc_pool+0x72>
  } else {
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
#if MEMP_STATS
    desc->stats->err++;
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	681b      	ldr	r3, [r3, #0]
 8015128:	881a      	ldrh	r2, [r3, #0]
 801512a:	3201      	adds	r2, #1
 801512c:	b292      	uxth	r2, r2
 801512e:	801a      	strh	r2, [r3, #0]
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 8015130:	2300      	movs	r3, #0
}
 8015132:	4618      	mov	r0, r3
 8015134:	3710      	adds	r7, #16
 8015136:	46bd      	mov	sp, r7
 8015138:	bd80      	pop	{r7, pc}
 801513a:	bf00      	nop
 801513c:	080259c8 	.word	0x080259c8
 8015140:	080259f8 	.word	0x080259f8
 8015144:	08025a1c 	.word	0x08025a1c

08015148 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8015148:	b580      	push	{r7, lr}
 801514a:	b084      	sub	sp, #16
 801514c:	af00      	add	r7, sp, #0
 801514e:	4603      	mov	r3, r0
 8015150:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8015152:	79fb      	ldrb	r3, [r7, #7]
 8015154:	2b08      	cmp	r3, #8
 8015156:	d908      	bls.n	801516a <memp_malloc+0x22>
 8015158:	4b0a      	ldr	r3, [pc, #40]	@ (8015184 <memp_malloc+0x3c>)
 801515a:	f240 1287 	movw	r2, #391	@ 0x187
 801515e:	490a      	ldr	r1, [pc, #40]	@ (8015188 <memp_malloc+0x40>)
 8015160:	480a      	ldr	r0, [pc, #40]	@ (801518c <memp_malloc+0x44>)
 8015162:	f00c fd91 	bl	8021c88 <iprintf>
 8015166:	2300      	movs	r3, #0
 8015168:	e008      	b.n	801517c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801516a:	79fb      	ldrb	r3, [r7, #7]
 801516c:	4a08      	ldr	r2, [pc, #32]	@ (8015190 <memp_malloc+0x48>)
 801516e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015172:	4618      	mov	r0, r3
 8015174:	f7ff ffa4 	bl	80150c0 <do_memp_malloc_pool>
 8015178:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801517a:	68fb      	ldr	r3, [r7, #12]
}
 801517c:	4618      	mov	r0, r3
 801517e:	3710      	adds	r7, #16
 8015180:	46bd      	mov	sp, r7
 8015182:	bd80      	pop	{r7, pc}
 8015184:	080259c8 	.word	0x080259c8
 8015188:	08025a58 	.word	0x08025a58
 801518c:	08025a1c 	.word	0x08025a1c
 8015190:	08030c80 	.word	0x08030c80

08015194 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8015194:	b580      	push	{r7, lr}
 8015196:	b084      	sub	sp, #16
 8015198:	af00      	add	r7, sp, #0
 801519a:	6078      	str	r0, [r7, #4]
 801519c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801519e:	683b      	ldr	r3, [r7, #0]
 80151a0:	f003 0303 	and.w	r3, r3, #3
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d006      	beq.n	80151b6 <do_memp_free_pool+0x22>
 80151a8:	4b0d      	ldr	r3, [pc, #52]	@ (80151e0 <do_memp_free_pool+0x4c>)
 80151aa:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 80151ae:	490d      	ldr	r1, [pc, #52]	@ (80151e4 <do_memp_free_pool+0x50>)
 80151b0:	480d      	ldr	r0, [pc, #52]	@ (80151e8 <do_memp_free_pool+0x54>)
 80151b2:	f00c fd69 	bl	8021c88 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 80151b6:	683b      	ldr	r3, [r7, #0]
 80151b8:	60fb      	str	r3, [r7, #12]
  memp_overflow_check_element_overflow(memp, desc);
  memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	681b      	ldr	r3, [r3, #0]
 80151be:	889a      	ldrh	r2, [r3, #4]
 80151c0:	3a01      	subs	r2, #1
 80151c2:	b292      	uxth	r2, r2
 80151c4:	809a      	strh	r2, [r3, #4]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	68db      	ldr	r3, [r3, #12]
 80151ca:	681a      	ldr	r2, [r3, #0]
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	68db      	ldr	r3, [r3, #12]
 80151d4:	68fa      	ldr	r2, [r7, #12]
 80151d6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80151d8:	bf00      	nop
 80151da:	3710      	adds	r7, #16
 80151dc:	46bd      	mov	sp, r7
 80151de:	bd80      	pop	{r7, pc}
 80151e0:	080259c8 	.word	0x080259c8
 80151e4:	08025a78 	.word	0x08025a78
 80151e8:	08025a1c 	.word	0x08025a1c

080151ec <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80151ec:	b580      	push	{r7, lr}
 80151ee:	b082      	sub	sp, #8
 80151f0:	af00      	add	r7, sp, #0
 80151f2:	4603      	mov	r3, r0
 80151f4:	6039      	str	r1, [r7, #0]
 80151f6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80151f8:	79fb      	ldrb	r3, [r7, #7]
 80151fa:	2b08      	cmp	r3, #8
 80151fc:	d907      	bls.n	801520e <memp_free+0x22>
 80151fe:	4b0c      	ldr	r3, [pc, #48]	@ (8015230 <memp_free+0x44>)
 8015200:	f240 12db 	movw	r2, #475	@ 0x1db
 8015204:	490b      	ldr	r1, [pc, #44]	@ (8015234 <memp_free+0x48>)
 8015206:	480c      	ldr	r0, [pc, #48]	@ (8015238 <memp_free+0x4c>)
 8015208:	f00c fd3e 	bl	8021c88 <iprintf>
 801520c:	e00c      	b.n	8015228 <memp_free+0x3c>

  if (mem == NULL) {
 801520e:	683b      	ldr	r3, [r7, #0]
 8015210:	2b00      	cmp	r3, #0
 8015212:	d008      	beq.n	8015226 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8015214:	79fb      	ldrb	r3, [r7, #7]
 8015216:	4a09      	ldr	r2, [pc, #36]	@ (801523c <memp_free+0x50>)
 8015218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801521c:	6839      	ldr	r1, [r7, #0]
 801521e:	4618      	mov	r0, r3
 8015220:	f7ff ffb8 	bl	8015194 <do_memp_free_pool>
 8015224:	e000      	b.n	8015228 <memp_free+0x3c>
    return;
 8015226:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8015228:	3708      	adds	r7, #8
 801522a:	46bd      	mov	sp, r7
 801522c:	bd80      	pop	{r7, pc}
 801522e:	bf00      	nop
 8015230:	080259c8 	.word	0x080259c8
 8015234:	08025a98 	.word	0x08025a98
 8015238:	08025a1c 	.word	0x08025a1c
 801523c:	08030c80 	.word	0x08030c80

08015240 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8015240:	b480      	push	{r7}
 8015242:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8015244:	bf00      	nop
 8015246:	46bd      	mov	sp, r7
 8015248:	bc80      	pop	{r7}
 801524a:	4770      	bx	lr

0801524c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801524c:	b580      	push	{r7, lr}
 801524e:	b084      	sub	sp, #16
 8015250:	af00      	add	r7, sp, #0
 8015252:	60f8      	str	r0, [r7, #12]
 8015254:	60b9      	str	r1, [r7, #8]
 8015256:	607a      	str	r2, [r7, #4]
 8015258:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 801525a:	69fb      	ldr	r3, [r7, #28]
 801525c:	2b00      	cmp	r3, #0
 801525e:	d105      	bne.n	801526c <netif_add+0x20>
 8015260:	4b24      	ldr	r3, [pc, #144]	@ (80152f4 <netif_add+0xa8>)
 8015262:	22fb      	movs	r2, #251	@ 0xfb
 8015264:	4924      	ldr	r1, [pc, #144]	@ (80152f8 <netif_add+0xac>)
 8015266:	4825      	ldr	r0, [pc, #148]	@ (80152fc <netif_add+0xb0>)
 8015268:	f00c fd0e 	bl	8021c88 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801526c:	68fb      	ldr	r3, [r7, #12]
 801526e:	2200      	movs	r2, #0
 8015270:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8015272:	68fb      	ldr	r3, [r7, #12]
 8015274:	2200      	movs	r2, #0
 8015276:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8015278:	68fb      	ldr	r3, [r7, #12]
 801527a:	2200      	movs	r2, #0
 801527c:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	2200      	movs	r2, #0
 8015282:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	3324      	adds	r3, #36	@ 0x24
 801528a:	2204      	movs	r2, #4
 801528c:	2100      	movs	r1, #0
 801528e:	4618      	mov	r0, r3
 8015290:	f00c fed0 	bl	8022034 <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	2203      	movs	r2, #3
 8015298:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	2200      	movs	r2, #0
 80152a0:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	69ba      	ldr	r2, [r7, #24]
 80152a6:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 80152a8:	4b15      	ldr	r3, [pc, #84]	@ (8015300 <netif_add+0xb4>)
 80152aa:	781b      	ldrb	r3, [r3, #0]
 80152ac:	1c5a      	adds	r2, r3, #1
 80152ae:	b2d1      	uxtb	r1, r2
 80152b0:	4a13      	ldr	r2, [pc, #76]	@ (8015300 <netif_add+0xb4>)
 80152b2:	7011      	strb	r1, [r2, #0]
 80152b4:	68fa      	ldr	r2, [r7, #12]
 80152b6:	f882 3036 	strb.w	r3, [r2, #54]	@ 0x36
  netif->input = input;
 80152ba:	68fb      	ldr	r3, [r7, #12]
 80152bc:	6a3a      	ldr	r2, [r7, #32]
 80152be:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80152c0:	683b      	ldr	r3, [r7, #0]
 80152c2:	687a      	ldr	r2, [r7, #4]
 80152c4:	68b9      	ldr	r1, [r7, #8]
 80152c6:	68f8      	ldr	r0, [r7, #12]
 80152c8:	f000 f81e 	bl	8015308 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80152cc:	69fb      	ldr	r3, [r7, #28]
 80152ce:	68f8      	ldr	r0, [r7, #12]
 80152d0:	4798      	blx	r3
 80152d2:	4603      	mov	r3, r0
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d001      	beq.n	80152dc <netif_add+0x90>
    return NULL;
 80152d8:	2300      	movs	r3, #0
 80152da:	e007      	b.n	80152ec <netif_add+0xa0>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80152dc:	4b09      	ldr	r3, [pc, #36]	@ (8015304 <netif_add+0xb8>)
 80152de:	681a      	ldr	r2, [r3, #0]
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80152e4:	4a07      	ldr	r2, [pc, #28]	@ (8015304 <netif_add+0xb8>)
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 80152ea:	68fb      	ldr	r3, [r7, #12]
}
 80152ec:	4618      	mov	r0, r3
 80152ee:	3710      	adds	r7, #16
 80152f0:	46bd      	mov	sp, r7
 80152f2:	bd80      	pop	{r7, pc}
 80152f4:	08025ab4 	.word	0x08025ab4
 80152f8:	08025ae8 	.word	0x08025ae8
 80152fc:	08025b00 	.word	0x08025b00
 8015300:	2000be84 	.word	0x2000be84
 8015304:	2000be7c 	.word	0x2000be7c

08015308 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8015308:	b580      	push	{r7, lr}
 801530a:	b084      	sub	sp, #16
 801530c:	af00      	add	r7, sp, #0
 801530e:	60f8      	str	r0, [r7, #12]
 8015310:	60b9      	str	r1, [r7, #8]
 8015312:	607a      	str	r2, [r7, #4]
 8015314:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 8015316:	68bb      	ldr	r3, [r7, #8]
 8015318:	2b00      	cmp	r3, #0
 801531a:	d003      	beq.n	8015324 <netif_set_addr+0x1c>
 801531c:	68bb      	ldr	r3, [r7, #8]
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	2b00      	cmp	r3, #0
 8015322:	d10c      	bne.n	801533e <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8015324:	68b9      	ldr	r1, [r7, #8]
 8015326:	68f8      	ldr	r0, [r7, #12]
 8015328:	f000 f81a 	bl	8015360 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 801532c:	6879      	ldr	r1, [r7, #4]
 801532e:	68f8      	ldr	r0, [r7, #12]
 8015330:	f000 f861 	bl	80153f6 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8015334:	6839      	ldr	r1, [r7, #0]
 8015336:	68f8      	ldr	r0, [r7, #12]
 8015338:	f000 f84a 	bl	80153d0 <netif_set_gw>
 801533c:	e00c      	b.n	8015358 <netif_set_addr+0x50>
  } else {
    netif_set_netmask(netif, netmask);
 801533e:	6879      	ldr	r1, [r7, #4]
 8015340:	68f8      	ldr	r0, [r7, #12]
 8015342:	f000 f858 	bl	80153f6 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8015346:	6839      	ldr	r1, [r7, #0]
 8015348:	68f8      	ldr	r0, [r7, #12]
 801534a:	f000 f841 	bl	80153d0 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 801534e:	68b9      	ldr	r1, [r7, #8]
 8015350:	68f8      	ldr	r0, [r7, #12]
 8015352:	f000 f805 	bl	8015360 <netif_set_ipaddr>
  }
}
 8015356:	bf00      	nop
 8015358:	bf00      	nop
 801535a:	3710      	adds	r7, #16
 801535c:	46bd      	mov	sp, r7
 801535e:	bd80      	pop	{r7, pc}

08015360 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015360:	b580      	push	{r7, lr}
 8015362:	b084      	sub	sp, #16
 8015364:	af00      	add	r7, sp, #0
 8015366:	6078      	str	r0, [r7, #4]
 8015368:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 801536a:	683b      	ldr	r3, [r7, #0]
 801536c:	2b00      	cmp	r3, #0
 801536e:	d003      	beq.n	8015378 <netif_set_ipaddr+0x18>
 8015370:	683b      	ldr	r3, [r7, #0]
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	60fb      	str	r3, [r7, #12]
 8015376:	e002      	b.n	801537e <netif_set_ipaddr+0x1e>
 8015378:	4b14      	ldr	r3, [pc, #80]	@ (80153cc <netif_set_ipaddr+0x6c>)
 801537a:	681b      	ldr	r3, [r3, #0]
 801537c:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 801537e:	68fa      	ldr	r2, [r7, #12]
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	3304      	adds	r3, #4
 8015384:	681b      	ldr	r3, [r3, #0]
 8015386:	429a      	cmp	r2, r3
 8015388:	d01c      	beq.n	80153c4 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	3304      	adds	r3, #4
 801538e:	f107 020c 	add.w	r2, r7, #12
 8015392:	4611      	mov	r1, r2
 8015394:	4618      	mov	r0, r3
 8015396:	f002 fc5b 	bl	8017c50 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	3304      	adds	r3, #4
 801539e:	f107 020c 	add.w	r2, r7, #12
 80153a2:	4611      	mov	r1, r2
 80153a4:	4618      	mov	r0, r3
 80153a6:	f007 f889 	bl	801c4bc <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80153aa:	683b      	ldr	r3, [r7, #0]
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d002      	beq.n	80153b6 <netif_set_ipaddr+0x56>
 80153b0:	683b      	ldr	r3, [r7, #0]
 80153b2:	681b      	ldr	r3, [r3, #0]
 80153b4:	e000      	b.n	80153b8 <netif_set_ipaddr+0x58>
 80153b6:	2300      	movs	r3, #0
 80153b8:	687a      	ldr	r2, [r7, #4]
 80153ba:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80153bc:	2101      	movs	r1, #1
 80153be:	6878      	ldr	r0, [r7, #4]
 80153c0:	f000 f868 	bl	8015494 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 80153c4:	bf00      	nop
 80153c6:	3710      	adds	r7, #16
 80153c8:	46bd      	mov	sp, r7
 80153ca:	bd80      	pop	{r7, pc}
 80153cc:	08030cf4 	.word	0x08030cf4

080153d0 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 80153d0:	b480      	push	{r7}
 80153d2:	b083      	sub	sp, #12
 80153d4:	af00      	add	r7, sp, #0
 80153d6:	6078      	str	r0, [r7, #4]
 80153d8:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80153da:	683b      	ldr	r3, [r7, #0]
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d002      	beq.n	80153e6 <netif_set_gw+0x16>
 80153e0:	683b      	ldr	r3, [r7, #0]
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	e000      	b.n	80153e8 <netif_set_gw+0x18>
 80153e6:	2300      	movs	r3, #0
 80153e8:	687a      	ldr	r2, [r7, #4]
 80153ea:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 80153ec:	bf00      	nop
 80153ee:	370c      	adds	r7, #12
 80153f0:	46bd      	mov	sp, r7
 80153f2:	bc80      	pop	{r7}
 80153f4:	4770      	bx	lr

080153f6 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 80153f6:	b480      	push	{r7}
 80153f8:	b083      	sub	sp, #12
 80153fa:	af00      	add	r7, sp, #0
 80153fc:	6078      	str	r0, [r7, #4]
 80153fe:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8015400:	683b      	ldr	r3, [r7, #0]
 8015402:	2b00      	cmp	r3, #0
 8015404:	d002      	beq.n	801540c <netif_set_netmask+0x16>
 8015406:	683b      	ldr	r3, [r7, #0]
 8015408:	681b      	ldr	r3, [r3, #0]
 801540a:	e000      	b.n	801540e <netif_set_netmask+0x18>
 801540c:	2300      	movs	r3, #0
 801540e:	687a      	ldr	r2, [r7, #4]
 8015410:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 8015412:	bf00      	nop
 8015414:	370c      	adds	r7, #12
 8015416:	46bd      	mov	sp, r7
 8015418:	bc80      	pop	{r7}
 801541a:	4770      	bx	lr

0801541c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 801541c:	b480      	push	{r7}
 801541e:	b083      	sub	sp, #12
 8015420:	af00      	add	r7, sp, #0
 8015422:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8015424:	4a03      	ldr	r2, [pc, #12]	@ (8015434 <netif_set_default+0x18>)
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801542a:	bf00      	nop
 801542c:	370c      	adds	r7, #12
 801542e:	46bd      	mov	sp, r7
 8015430:	bc80      	pop	{r7}
 8015432:	4770      	bx	lr
 8015434:	2000be80 	.word	0x2000be80

08015438 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8015438:	b580      	push	{r7, lr}
 801543a:	b082      	sub	sp, #8
 801543c:	af00      	add	r7, sp, #0
 801543e:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8015446:	f003 0301 	and.w	r3, r3, #1
 801544a:	2b00      	cmp	r3, #0
 801544c:	d11c      	bne.n	8015488 <netif_set_up+0x50>
    netif->flags |= NETIF_FLAG_UP;
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8015454:	f043 0301 	orr.w	r3, r3, #1
 8015458:	b2da      	uxtb	r2, r3
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);
 8015460:	f7f6 fb1c 	bl	800ba9c <sys_now>
 8015464:	4603      	mov	r3, r0
 8015466:	4a0a      	ldr	r2, [pc, #40]	@ (8015490 <netif_set_up+0x58>)
 8015468:	fba2 2303 	umull	r2, r3, r2, r3
 801546c:	08da      	lsrs	r2, r3, #3
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	63da      	str	r2, [r3, #60]	@ 0x3c

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8015478:	f003 0304 	and.w	r3, r3, #4
 801547c:	2b00      	cmp	r3, #0
 801547e:	d003      	beq.n	8015488 <netif_set_up+0x50>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8015480:	2103      	movs	r1, #3
 8015482:	6878      	ldr	r0, [r7, #4]
 8015484:	f000 f806 	bl	8015494 <netif_issue_reports>
    }
  }
}
 8015488:	bf00      	nop
 801548a:	3708      	adds	r7, #8
 801548c:	46bd      	mov	sp, r7
 801548e:	bd80      	pop	{r7, pc}
 8015490:	cccccccd 	.word	0xcccccccd

08015494 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 8015494:	b580      	push	{r7, lr}
 8015496:	b082      	sub	sp, #8
 8015498:	af00      	add	r7, sp, #0
 801549a:	6078      	str	r0, [r7, #4]
 801549c:	460b      	mov	r3, r1
 801549e:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80154a0:	78fb      	ldrb	r3, [r7, #3]
 80154a2:	f003 0301 	and.w	r3, r3, #1
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d011      	beq.n	80154ce <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	3304      	adds	r3, #4
 80154ae:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d00c      	beq.n	80154ce <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80154ba:	f003 0308 	and.w	r3, r3, #8
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d005      	beq.n	80154ce <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	3304      	adds	r3, #4
 80154c6:	4619      	mov	r1, r3
 80154c8:	6878      	ldr	r0, [r7, #4]
 80154ca:	f009 fe91 	bl	801f1f0 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 80154ce:	bf00      	nop
 80154d0:	3708      	adds	r7, #8
 80154d2:	46bd      	mov	sp, r7
 80154d4:	bd80      	pop	{r7, pc}
	...

080154d8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80154d8:	b580      	push	{r7, lr}
 80154da:	b082      	sub	sp, #8
 80154dc:	af00      	add	r7, sp, #0
 80154de:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80154e6:	f003 0301 	and.w	r3, r3, #1
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d01b      	beq.n	8015526 <netif_set_down+0x4e>
    netif->flags &= ~NETIF_FLAG_UP;
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80154f4:	f023 0301 	bic.w	r3, r3, #1
 80154f8:	b2da      	uxtb	r2, r3
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);
 8015500:	f7f6 facc 	bl	800ba9c <sys_now>
 8015504:	4603      	mov	r3, r0
 8015506:	4a0a      	ldr	r2, [pc, #40]	@ (8015530 <netif_set_down+0x58>)
 8015508:	fba2 2303 	umull	r2, r3, r2, r3
 801550c:	08da      	lsrs	r2, r3, #3
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	63da      	str	r2, [r3, #60]	@ 0x3c

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8015518:	f003 0308 	and.w	r3, r3, #8
 801551c:	2b00      	cmp	r3, #0
 801551e:	d002      	beq.n	8015526 <netif_set_down+0x4e>
      etharp_cleanup_netif(netif);
 8015520:	6878      	ldr	r0, [r7, #4]
 8015522:	f009 f97b 	bl	801e81c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8015526:	bf00      	nop
 8015528:	3708      	adds	r7, #8
 801552a:	46bd      	mov	sp, r7
 801552c:	bd80      	pop	{r7, pc}
 801552e:	bf00      	nop
 8015530:	cccccccd 	.word	0xcccccccd

08015534 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8015534:	b480      	push	{r7}
 8015536:	b083      	sub	sp, #12
 8015538:	af00      	add	r7, sp, #0
 801553a:	6078      	str	r0, [r7, #4]
 801553c:	6039      	str	r1, [r7, #0]
  if (netif) {
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	2b00      	cmp	r3, #0
 8015542:	d002      	beq.n	801554a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	683a      	ldr	r2, [r7, #0]
 8015548:	61da      	str	r2, [r3, #28]
  }
}
 801554a:	bf00      	nop
 801554c:	370c      	adds	r7, #12
 801554e:	46bd      	mov	sp, r7
 8015550:	bc80      	pop	{r7}
 8015552:	4770      	bx	lr

08015554 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8015554:	b580      	push	{r7, lr}
 8015556:	b082      	sub	sp, #8
 8015558:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801555a:	4b0e      	ldr	r3, [pc, #56]	@ (8015594 <pbuf_free_ooseq+0x40>)
 801555c:	2200      	movs	r2, #0
 801555e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8015560:	4b0d      	ldr	r3, [pc, #52]	@ (8015598 <pbuf_free_ooseq+0x44>)
 8015562:	681b      	ldr	r3, [r3, #0]
 8015564:	607b      	str	r3, [r7, #4]
 8015566:	e00f      	b.n	8015588 <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801556c:	2b00      	cmp	r3, #0
 801556e:	d008      	beq.n	8015582 <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015574:	4618      	mov	r0, r3
 8015576:	f001 ffb4 	bl	80174e2 <tcp_segs_free>
      pcb->ooseq = NULL;
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	2200      	movs	r2, #0
 801557e:	671a      	str	r2, [r3, #112]	@ 0x70
      return;
 8015580:	e005      	b.n	801558e <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	68db      	ldr	r3, [r3, #12]
 8015586:	607b      	str	r3, [r7, #4]
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	2b00      	cmp	r3, #0
 801558c:	d1ec      	bne.n	8015568 <pbuf_free_ooseq+0x14>
    }
  }
}
 801558e:	3708      	adds	r7, #8
 8015590:	46bd      	mov	sp, r7
 8015592:	bd80      	pop	{r7, pc}
 8015594:	2000be85 	.word	0x2000be85
 8015598:	2000c02c 	.word	0x2000c02c

0801559c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 801559c:	b480      	push	{r7}
 801559e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80155a0:	4b03      	ldr	r3, [pc, #12]	@ (80155b0 <pbuf_pool_is_empty+0x14>)
 80155a2:	2201      	movs	r2, #1
 80155a4:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80155a6:	bf00      	nop
 80155a8:	46bd      	mov	sp, r7
 80155aa:	bc80      	pop	{r7}
 80155ac:	4770      	bx	lr
 80155ae:	bf00      	nop
 80155b0:	2000be85 	.word	0x2000be85

080155b4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80155b4:	b580      	push	{r7, lr}
 80155b6:	b088      	sub	sp, #32
 80155b8:	af00      	add	r7, sp, #0
 80155ba:	4603      	mov	r3, r0
 80155bc:	71fb      	strb	r3, [r7, #7]
 80155be:	460b      	mov	r3, r1
 80155c0:	80bb      	strh	r3, [r7, #4]
 80155c2:	4613      	mov	r3, r2
 80155c4:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 80155c6:	79fb      	ldrb	r3, [r7, #7]
 80155c8:	2b04      	cmp	r3, #4
 80155ca:	d81c      	bhi.n	8015606 <pbuf_alloc+0x52>
 80155cc:	a201      	add	r2, pc, #4	@ (adr r2, 80155d4 <pbuf_alloc+0x20>)
 80155ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80155d2:	bf00      	nop
 80155d4:	080155e9 	.word	0x080155e9
 80155d8:	080155ef 	.word	0x080155ef
 80155dc:	080155f5 	.word	0x080155f5
 80155e0:	080155fb 	.word	0x080155fb
 80155e4:	08015601 	.word	0x08015601
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80155e8:	2336      	movs	r3, #54	@ 0x36
 80155ea:	82fb      	strh	r3, [r7, #22]
    break;
 80155ec:	e014      	b.n	8015618 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80155ee:	2322      	movs	r3, #34	@ 0x22
 80155f0:	82fb      	strh	r3, [r7, #22]
    break;
 80155f2:	e011      	b.n	8015618 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80155f4:	230e      	movs	r3, #14
 80155f6:	82fb      	strh	r3, [r7, #22]
    break;
 80155f8:	e00e      	b.n	8015618 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80155fa:	2300      	movs	r3, #0
 80155fc:	82fb      	strh	r3, [r7, #22]
    break;
 80155fe:	e00b      	b.n	8015618 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8015600:	2300      	movs	r3, #0
 8015602:	82fb      	strh	r3, [r7, #22]
    break;
 8015604:	e008      	b.n	8015618 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8015606:	4ba1      	ldr	r3, [pc, #644]	@ (801588c <pbuf_alloc+0x2d8>)
 8015608:	f44f 728b 	mov.w	r2, #278	@ 0x116
 801560c:	49a0      	ldr	r1, [pc, #640]	@ (8015890 <pbuf_alloc+0x2dc>)
 801560e:	48a1      	ldr	r0, [pc, #644]	@ (8015894 <pbuf_alloc+0x2e0>)
 8015610:	f00c fb3a 	bl	8021c88 <iprintf>
    return NULL;
 8015614:	2300      	movs	r3, #0
 8015616:	e15c      	b.n	80158d2 <pbuf_alloc+0x31e>
  }

  switch (type) {
 8015618:	79bb      	ldrb	r3, [r7, #6]
 801561a:	2b03      	cmp	r3, #3
 801561c:	d00d      	beq.n	801563a <pbuf_alloc+0x86>
 801561e:	2b03      	cmp	r3, #3
 8015620:	f300 8146 	bgt.w	80158b0 <pbuf_alloc+0x2fc>
 8015624:	2b00      	cmp	r3, #0
 8015626:	f000 80d0 	beq.w	80157ca <pbuf_alloc+0x216>
 801562a:	2b00      	cmp	r3, #0
 801562c:	f2c0 8140 	blt.w	80158b0 <pbuf_alloc+0x2fc>
 8015630:	3b01      	subs	r3, #1
 8015632:	2b01      	cmp	r3, #1
 8015634:	f200 813c 	bhi.w	80158b0 <pbuf_alloc+0x2fc>
 8015638:	e10d      	b.n	8015856 <pbuf_alloc+0x2a2>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801563a:	2008      	movs	r0, #8
 801563c:	f7ff fd84 	bl	8015148 <memp_malloc>
 8015640:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 8015642:	69fb      	ldr	r3, [r7, #28]
 8015644:	2b00      	cmp	r3, #0
 8015646:	d103      	bne.n	8015650 <pbuf_alloc+0x9c>
      PBUF_POOL_IS_EMPTY();
 8015648:	f7ff ffa8 	bl	801559c <pbuf_pool_is_empty>
      return NULL;
 801564c:	2300      	movs	r3, #0
 801564e:	e140      	b.n	80158d2 <pbuf_alloc+0x31e>
    }
    p->type = type;
 8015650:	69fb      	ldr	r3, [r7, #28]
 8015652:	79ba      	ldrb	r2, [r7, #6]
 8015654:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 8015656:	69fb      	ldr	r3, [r7, #28]
 8015658:	2200      	movs	r2, #0
 801565a:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 801565c:	8afb      	ldrh	r3, [r7, #22]
 801565e:	3310      	adds	r3, #16
 8015660:	69fa      	ldr	r2, [r7, #28]
 8015662:	4413      	add	r3, r2
 8015664:	3303      	adds	r3, #3
 8015666:	f023 0303 	bic.w	r3, r3, #3
 801566a:	461a      	mov	r2, r3
 801566c:	69fb      	ldr	r3, [r7, #28]
 801566e:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 8015670:	69fb      	ldr	r3, [r7, #28]
 8015672:	685b      	ldr	r3, [r3, #4]
 8015674:	f003 0303 	and.w	r3, r3, #3
 8015678:	2b00      	cmp	r3, #0
 801567a:	d006      	beq.n	801568a <pbuf_alloc+0xd6>
 801567c:	4b83      	ldr	r3, [pc, #524]	@ (801588c <pbuf_alloc+0x2d8>)
 801567e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8015682:	4985      	ldr	r1, [pc, #532]	@ (8015898 <pbuf_alloc+0x2e4>)
 8015684:	4883      	ldr	r0, [pc, #524]	@ (8015894 <pbuf_alloc+0x2e0>)
 8015686:	f00c faff 	bl	8021c88 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 801568a:	69fb      	ldr	r3, [r7, #28]
 801568c:	88ba      	ldrh	r2, [r7, #4]
 801568e:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8015690:	8afb      	ldrh	r3, [r7, #22]
 8015692:	3303      	adds	r3, #3
 8015694:	f023 0303 	bic.w	r3, r3, #3
 8015698:	f5c3 7214 	rsb	r2, r3, #592	@ 0x250
 801569c:	88bb      	ldrh	r3, [r7, #4]
 801569e:	4293      	cmp	r3, r2
 80156a0:	bf28      	it	cs
 80156a2:	4613      	movcs	r3, r2
 80156a4:	b29a      	uxth	r2, r3
 80156a6:	69fb      	ldr	r3, [r7, #28]
 80156a8:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80156aa:	69fb      	ldr	r3, [r7, #28]
 80156ac:	685b      	ldr	r3, [r3, #4]
 80156ae:	69fa      	ldr	r2, [r7, #28]
 80156b0:	8952      	ldrh	r2, [r2, #10]
 80156b2:	441a      	add	r2, r3
 80156b4:	69fb      	ldr	r3, [r7, #28]
 80156b6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80156ba:	429a      	cmp	r2, r3
 80156bc:	d906      	bls.n	80156cc <pbuf_alloc+0x118>
 80156be:	4b73      	ldr	r3, [pc, #460]	@ (801588c <pbuf_alloc+0x2d8>)
 80156c0:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 80156c4:	4975      	ldr	r1, [pc, #468]	@ (801589c <pbuf_alloc+0x2e8>)
 80156c6:	4873      	ldr	r0, [pc, #460]	@ (8015894 <pbuf_alloc+0x2e0>)
 80156c8:	f00c fade 	bl	8021c88 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80156cc:	8afb      	ldrh	r3, [r7, #22]
 80156ce:	3303      	adds	r3, #3
 80156d0:	f023 0303 	bic.w	r3, r3, #3
 80156d4:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 80156d8:	d106      	bne.n	80156e8 <pbuf_alloc+0x134>
 80156da:	4b6c      	ldr	r3, [pc, #432]	@ (801588c <pbuf_alloc+0x2d8>)
 80156dc:	f240 1231 	movw	r2, #305	@ 0x131
 80156e0:	496f      	ldr	r1, [pc, #444]	@ (80158a0 <pbuf_alloc+0x2ec>)
 80156e2:	486c      	ldr	r0, [pc, #432]	@ (8015894 <pbuf_alloc+0x2e0>)
 80156e4:	f00c fad0 	bl	8021c88 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 80156e8:	69fb      	ldr	r3, [r7, #28]
 80156ea:	2201      	movs	r2, #1
 80156ec:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 80156ee:	69fb      	ldr	r3, [r7, #28]
 80156f0:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 80156f2:	88bb      	ldrh	r3, [r7, #4]
 80156f4:	69fa      	ldr	r2, [r7, #28]
 80156f6:	8952      	ldrh	r2, [r2, #10]
 80156f8:	1a9b      	subs	r3, r3, r2
 80156fa:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 80156fc:	e061      	b.n	80157c2 <pbuf_alloc+0x20e>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80156fe:	2008      	movs	r0, #8
 8015700:	f7ff fd22 	bl	8015148 <memp_malloc>
 8015704:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 8015706:	68fb      	ldr	r3, [r7, #12]
 8015708:	2b00      	cmp	r3, #0
 801570a:	d106      	bne.n	801571a <pbuf_alloc+0x166>
        PBUF_POOL_IS_EMPTY();
 801570c:	f7ff ff46 	bl	801559c <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 8015710:	69f8      	ldr	r0, [r7, #28]
 8015712:	f000 fac7 	bl	8015ca4 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 8015716:	2300      	movs	r3, #0
 8015718:	e0db      	b.n	80158d2 <pbuf_alloc+0x31e>
      }
      q->type = type;
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	79ba      	ldrb	r2, [r7, #6]
 801571e:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 8015720:	68fb      	ldr	r3, [r7, #12]
 8015722:	2200      	movs	r2, #0
 8015724:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 8015726:	68fb      	ldr	r3, [r7, #12]
 8015728:	2200      	movs	r2, #0
 801572a:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 801572c:	69bb      	ldr	r3, [r7, #24]
 801572e:	68fa      	ldr	r2, [r7, #12]
 8015730:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8015732:	693b      	ldr	r3, [r7, #16]
 8015734:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8015738:	4293      	cmp	r3, r2
 801573a:	dd06      	ble.n	801574a <pbuf_alloc+0x196>
 801573c:	4b53      	ldr	r3, [pc, #332]	@ (801588c <pbuf_alloc+0x2d8>)
 801573e:	f44f 72a6 	mov.w	r2, #332	@ 0x14c
 8015742:	4958      	ldr	r1, [pc, #352]	@ (80158a4 <pbuf_alloc+0x2f0>)
 8015744:	4853      	ldr	r0, [pc, #332]	@ (8015894 <pbuf_alloc+0x2e0>)
 8015746:	f00c fa9f 	bl	8021c88 <iprintf>
      q->tot_len = (u16_t)rem_len;
 801574a:	693b      	ldr	r3, [r7, #16]
 801574c:	b29a      	uxth	r2, r3
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8015752:	693b      	ldr	r3, [r7, #16]
 8015754:	b29b      	uxth	r3, r3
 8015756:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 801575a:	bf28      	it	cs
 801575c:	f44f 7314 	movcs.w	r3, #592	@ 0x250
 8015760:	b29a      	uxth	r2, r3
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8015766:	68fb      	ldr	r3, [r7, #12]
 8015768:	f103 0210 	add.w	r2, r3, #16
 801576c:	68fb      	ldr	r3, [r7, #12]
 801576e:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8015770:	68fb      	ldr	r3, [r7, #12]
 8015772:	685b      	ldr	r3, [r3, #4]
 8015774:	f003 0303 	and.w	r3, r3, #3
 8015778:	2b00      	cmp	r3, #0
 801577a:	d006      	beq.n	801578a <pbuf_alloc+0x1d6>
 801577c:	4b43      	ldr	r3, [pc, #268]	@ (801588c <pbuf_alloc+0x2d8>)
 801577e:	f240 1251 	movw	r2, #337	@ 0x151
 8015782:	4949      	ldr	r1, [pc, #292]	@ (80158a8 <pbuf_alloc+0x2f4>)
 8015784:	4843      	ldr	r0, [pc, #268]	@ (8015894 <pbuf_alloc+0x2e0>)
 8015786:	f00c fa7f 	bl	8021c88 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 801578a:	69fb      	ldr	r3, [r7, #28]
 801578c:	685b      	ldr	r3, [r3, #4]
 801578e:	69fa      	ldr	r2, [r7, #28]
 8015790:	8952      	ldrh	r2, [r2, #10]
 8015792:	441a      	add	r2, r3
 8015794:	69fb      	ldr	r3, [r7, #28]
 8015796:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801579a:	429a      	cmp	r2, r3
 801579c:	d906      	bls.n	80157ac <pbuf_alloc+0x1f8>
 801579e:	4b3b      	ldr	r3, [pc, #236]	@ (801588c <pbuf_alloc+0x2d8>)
 80157a0:	f240 1253 	movw	r2, #339	@ 0x153
 80157a4:	493d      	ldr	r1, [pc, #244]	@ (801589c <pbuf_alloc+0x2e8>)
 80157a6:	483b      	ldr	r0, [pc, #236]	@ (8015894 <pbuf_alloc+0x2e0>)
 80157a8:	f00c fa6e 	bl	8021c88 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	2201      	movs	r2, #1
 80157b0:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	895b      	ldrh	r3, [r3, #10]
 80157b6:	461a      	mov	r2, r3
 80157b8:	693b      	ldr	r3, [r7, #16]
 80157ba:	1a9b      	subs	r3, r3, r2
 80157bc:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 80157be:	68fb      	ldr	r3, [r7, #12]
 80157c0:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 80157c2:	693b      	ldr	r3, [r7, #16]
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	dc9a      	bgt.n	80156fe <pbuf_alloc+0x14a>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 80157c8:	e07c      	b.n	80158c4 <pbuf_alloc+0x310>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 80157ca:	8afb      	ldrh	r3, [r7, #22]
 80157cc:	3313      	adds	r3, #19
 80157ce:	b29b      	uxth	r3, r3
 80157d0:	f023 0303 	bic.w	r3, r3, #3
 80157d4:	b29a      	uxth	r2, r3
 80157d6:	88bb      	ldrh	r3, [r7, #4]
 80157d8:	3303      	adds	r3, #3
 80157da:	b29b      	uxth	r3, r3
 80157dc:	f023 0303 	bic.w	r3, r3, #3
 80157e0:	b29b      	uxth	r3, r3
 80157e2:	4413      	add	r3, r2
 80157e4:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 80157e6:	897a      	ldrh	r2, [r7, #10]
 80157e8:	88bb      	ldrh	r3, [r7, #4]
 80157ea:	3303      	adds	r3, #3
 80157ec:	f023 0303 	bic.w	r3, r3, #3
 80157f0:	429a      	cmp	r2, r3
 80157f2:	d201      	bcs.n	80157f8 <pbuf_alloc+0x244>
        return NULL;
 80157f4:	2300      	movs	r3, #0
 80157f6:	e06c      	b.n	80158d2 <pbuf_alloc+0x31e>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 80157f8:	897b      	ldrh	r3, [r7, #10]
 80157fa:	4618      	mov	r0, r3
 80157fc:	f7ff faf6 	bl	8014dec <mem_malloc>
 8015800:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 8015802:	69fb      	ldr	r3, [r7, #28]
 8015804:	2b00      	cmp	r3, #0
 8015806:	d101      	bne.n	801580c <pbuf_alloc+0x258>
      return NULL;
 8015808:	2300      	movs	r3, #0
 801580a:	e062      	b.n	80158d2 <pbuf_alloc+0x31e>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 801580c:	8afb      	ldrh	r3, [r7, #22]
 801580e:	3310      	adds	r3, #16
 8015810:	69fa      	ldr	r2, [r7, #28]
 8015812:	4413      	add	r3, r2
 8015814:	3303      	adds	r3, #3
 8015816:	f023 0303 	bic.w	r3, r3, #3
 801581a:	461a      	mov	r2, r3
 801581c:	69fb      	ldr	r3, [r7, #28]
 801581e:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8015820:	69fb      	ldr	r3, [r7, #28]
 8015822:	88ba      	ldrh	r2, [r7, #4]
 8015824:	811a      	strh	r2, [r3, #8]
 8015826:	69fb      	ldr	r3, [r7, #28]
 8015828:	891a      	ldrh	r2, [r3, #8]
 801582a:	69fb      	ldr	r3, [r7, #28]
 801582c:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 801582e:	69fb      	ldr	r3, [r7, #28]
 8015830:	2200      	movs	r2, #0
 8015832:	601a      	str	r2, [r3, #0]
    p->type = type;
 8015834:	69fb      	ldr	r3, [r7, #28]
 8015836:	79ba      	ldrb	r2, [r7, #6]
 8015838:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801583a:	69fb      	ldr	r3, [r7, #28]
 801583c:	685b      	ldr	r3, [r3, #4]
 801583e:	f003 0303 	and.w	r3, r3, #3
 8015842:	2b00      	cmp	r3, #0
 8015844:	d03d      	beq.n	80158c2 <pbuf_alloc+0x30e>
 8015846:	4b11      	ldr	r3, [pc, #68]	@ (801588c <pbuf_alloc+0x2d8>)
 8015848:	f44f 72bb 	mov.w	r2, #374	@ 0x176
 801584c:	4917      	ldr	r1, [pc, #92]	@ (80158ac <pbuf_alloc+0x2f8>)
 801584e:	4811      	ldr	r0, [pc, #68]	@ (8015894 <pbuf_alloc+0x2e0>)
 8015850:	f00c fa1a 	bl	8021c88 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 8015854:	e035      	b.n	80158c2 <pbuf_alloc+0x30e>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8015856:	2007      	movs	r0, #7
 8015858:	f7ff fc76 	bl	8015148 <memp_malloc>
 801585c:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 801585e:	69fb      	ldr	r3, [r7, #28]
 8015860:	2b00      	cmp	r3, #0
 8015862:	d101      	bne.n	8015868 <pbuf_alloc+0x2b4>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 8015864:	2300      	movs	r3, #0
 8015866:	e034      	b.n	80158d2 <pbuf_alloc+0x31e>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 8015868:	69fb      	ldr	r3, [r7, #28]
 801586a:	2200      	movs	r2, #0
 801586c:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 801586e:	69fb      	ldr	r3, [r7, #28]
 8015870:	88ba      	ldrh	r2, [r7, #4]
 8015872:	811a      	strh	r2, [r3, #8]
 8015874:	69fb      	ldr	r3, [r7, #28]
 8015876:	891a      	ldrh	r2, [r3, #8]
 8015878:	69fb      	ldr	r3, [r7, #28]
 801587a:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 801587c:	69fb      	ldr	r3, [r7, #28]
 801587e:	2200      	movs	r2, #0
 8015880:	601a      	str	r2, [r3, #0]
    p->type = type;
 8015882:	69fb      	ldr	r3, [r7, #28]
 8015884:	79ba      	ldrb	r2, [r7, #6]
 8015886:	731a      	strb	r2, [r3, #12]
    break;
 8015888:	e01c      	b.n	80158c4 <pbuf_alloc+0x310>
 801588a:	bf00      	nop
 801588c:	08025b28 	.word	0x08025b28
 8015890:	08025b58 	.word	0x08025b58
 8015894:	08025b74 	.word	0x08025b74
 8015898:	08025b9c 	.word	0x08025b9c
 801589c:	08025bcc 	.word	0x08025bcc
 80158a0:	08025c00 	.word	0x08025c00
 80158a4:	08025c34 	.word	0x08025c34
 80158a8:	08025c48 	.word	0x08025c48
 80158ac:	08025c78 	.word	0x08025c78
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80158b0:	4b0a      	ldr	r3, [pc, #40]	@ (80158dc <pbuf_alloc+0x328>)
 80158b2:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 80158b6:	490a      	ldr	r1, [pc, #40]	@ (80158e0 <pbuf_alloc+0x32c>)
 80158b8:	480a      	ldr	r0, [pc, #40]	@ (80158e4 <pbuf_alloc+0x330>)
 80158ba:	f00c f9e5 	bl	8021c88 <iprintf>
    return NULL;
 80158be:	2300      	movs	r3, #0
 80158c0:	e007      	b.n	80158d2 <pbuf_alloc+0x31e>
    break;
 80158c2:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 80158c4:	69fb      	ldr	r3, [r7, #28]
 80158c6:	2201      	movs	r2, #1
 80158c8:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 80158ca:	69fb      	ldr	r3, [r7, #28]
 80158cc:	2200      	movs	r2, #0
 80158ce:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80158d0:	69fb      	ldr	r3, [r7, #28]
}
 80158d2:	4618      	mov	r0, r3
 80158d4:	3720      	adds	r7, #32
 80158d6:	46bd      	mov	sp, r7
 80158d8:	bd80      	pop	{r7, pc}
 80158da:	bf00      	nop
 80158dc:	08025b28 	.word	0x08025b28
 80158e0:	08025ca4 	.word	0x08025ca4
 80158e4:	08025b74 	.word	0x08025b74

080158e8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80158e8:	b580      	push	{r7, lr}
 80158ea:	b084      	sub	sp, #16
 80158ec:	af00      	add	r7, sp, #0
 80158ee:	603b      	str	r3, [r7, #0]
 80158f0:	4603      	mov	r3, r0
 80158f2:	71fb      	strb	r3, [r7, #7]
 80158f4:	460b      	mov	r3, r1
 80158f6:	80bb      	strh	r3, [r7, #4]
 80158f8:	4613      	mov	r3, r2
 80158fa:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 80158fc:	79fb      	ldrb	r3, [r7, #7]
 80158fe:	2b04      	cmp	r3, #4
 8015900:	d81b      	bhi.n	801593a <pbuf_alloced_custom+0x52>
 8015902:	a201      	add	r2, pc, #4	@ (adr r2, 8015908 <pbuf_alloced_custom+0x20>)
 8015904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015908:	0801591d 	.word	0x0801591d
 801590c:	08015923 	.word	0x08015923
 8015910:	08015929 	.word	0x08015929
 8015914:	0801592f 	.word	0x0801592f
 8015918:	08015935 	.word	0x08015935
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 801591c:	2336      	movs	r3, #54	@ 0x36
 801591e:	81fb      	strh	r3, [r7, #14]
    break;
 8015920:	e014      	b.n	801594c <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8015922:	2322      	movs	r3, #34	@ 0x22
 8015924:	81fb      	strh	r3, [r7, #14]
    break;
 8015926:	e011      	b.n	801594c <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8015928:	230e      	movs	r3, #14
 801592a:	81fb      	strh	r3, [r7, #14]
    break;
 801592c:	e00e      	b.n	801594c <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 801592e:	2300      	movs	r3, #0
 8015930:	81fb      	strh	r3, [r7, #14]
    break;
 8015932:	e00b      	b.n	801594c <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 8015934:	2300      	movs	r3, #0
 8015936:	81fb      	strh	r3, [r7, #14]
    break;
 8015938:	e008      	b.n	801594c <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 801593a:	4b1d      	ldr	r3, [pc, #116]	@ (80159b0 <pbuf_alloced_custom+0xc8>)
 801593c:	f240 12c5 	movw	r2, #453	@ 0x1c5
 8015940:	491c      	ldr	r1, [pc, #112]	@ (80159b4 <pbuf_alloced_custom+0xcc>)
 8015942:	481d      	ldr	r0, [pc, #116]	@ (80159b8 <pbuf_alloced_custom+0xd0>)
 8015944:	f00c f9a0 	bl	8021c88 <iprintf>
    return NULL;
 8015948:	2300      	movs	r3, #0
 801594a:	e02d      	b.n	80159a8 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801594c:	89fb      	ldrh	r3, [r7, #14]
 801594e:	3303      	adds	r3, #3
 8015950:	f023 0203 	bic.w	r2, r3, #3
 8015954:	88bb      	ldrh	r3, [r7, #4]
 8015956:	441a      	add	r2, r3
 8015958:	8bbb      	ldrh	r3, [r7, #28]
 801595a:	429a      	cmp	r2, r3
 801595c:	d901      	bls.n	8015962 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801595e:	2300      	movs	r3, #0
 8015960:	e022      	b.n	80159a8 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 8015962:	683b      	ldr	r3, [r7, #0]
 8015964:	2200      	movs	r2, #0
 8015966:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 8015968:	69bb      	ldr	r3, [r7, #24]
 801596a:	2b00      	cmp	r3, #0
 801596c:	d008      	beq.n	8015980 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801596e:	89fb      	ldrh	r3, [r7, #14]
 8015970:	3303      	adds	r3, #3
 8015972:	f023 0303 	bic.w	r3, r3, #3
 8015976:	69ba      	ldr	r2, [r7, #24]
 8015978:	441a      	add	r2, r3
 801597a:	683b      	ldr	r3, [r7, #0]
 801597c:	605a      	str	r2, [r3, #4]
 801597e:	e002      	b.n	8015986 <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 8015980:	683b      	ldr	r3, [r7, #0]
 8015982:	2200      	movs	r2, #0
 8015984:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8015986:	683b      	ldr	r3, [r7, #0]
 8015988:	2202      	movs	r2, #2
 801598a:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 801598c:	683b      	ldr	r3, [r7, #0]
 801598e:	88ba      	ldrh	r2, [r7, #4]
 8015990:	811a      	strh	r2, [r3, #8]
 8015992:	683b      	ldr	r3, [r7, #0]
 8015994:	891a      	ldrh	r2, [r3, #8]
 8015996:	683b      	ldr	r3, [r7, #0]
 8015998:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 801599a:	683b      	ldr	r3, [r7, #0]
 801599c:	79ba      	ldrb	r2, [r7, #6]
 801599e:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 80159a0:	683b      	ldr	r3, [r7, #0]
 80159a2:	2201      	movs	r2, #1
 80159a4:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 80159a6:	683b      	ldr	r3, [r7, #0]
}
 80159a8:	4618      	mov	r0, r3
 80159aa:	3710      	adds	r7, #16
 80159ac:	46bd      	mov	sp, r7
 80159ae:	bd80      	pop	{r7, pc}
 80159b0:	08025b28 	.word	0x08025b28
 80159b4:	08025cc0 	.word	0x08025cc0
 80159b8:	08025b74 	.word	0x08025b74

080159bc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80159bc:	b580      	push	{r7, lr}
 80159be:	b086      	sub	sp, #24
 80159c0:	af00      	add	r7, sp, #0
 80159c2:	6078      	str	r0, [r7, #4]
 80159c4:	460b      	mov	r3, r1
 80159c6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d106      	bne.n	80159dc <pbuf_realloc+0x20>
 80159ce:	4b4b      	ldr	r3, [pc, #300]	@ (8015afc <pbuf_realloc+0x140>)
 80159d0:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80159d4:	494a      	ldr	r1, [pc, #296]	@ (8015b00 <pbuf_realloc+0x144>)
 80159d6:	484b      	ldr	r0, [pc, #300]	@ (8015b04 <pbuf_realloc+0x148>)
 80159d8:	f00c f956 	bl	8021c88 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	7b1b      	ldrb	r3, [r3, #12]
 80159e0:	2b03      	cmp	r3, #3
 80159e2:	d012      	beq.n	8015a0a <pbuf_realloc+0x4e>
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	7b1b      	ldrb	r3, [r3, #12]
 80159e8:	2b01      	cmp	r3, #1
 80159ea:	d00e      	beq.n	8015a0a <pbuf_realloc+0x4e>
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	7b1b      	ldrb	r3, [r3, #12]
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d00a      	beq.n	8015a0a <pbuf_realloc+0x4e>
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	7b1b      	ldrb	r3, [r3, #12]
 80159f8:	2b02      	cmp	r3, #2
 80159fa:	d006      	beq.n	8015a0a <pbuf_realloc+0x4e>
 80159fc:	4b3f      	ldr	r3, [pc, #252]	@ (8015afc <pbuf_realloc+0x140>)
 80159fe:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8015a02:	4941      	ldr	r1, [pc, #260]	@ (8015b08 <pbuf_realloc+0x14c>)
 8015a04:	483f      	ldr	r0, [pc, #252]	@ (8015b04 <pbuf_realloc+0x148>)
 8015a06:	f00c f93f 	bl	8021c88 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	891b      	ldrh	r3, [r3, #8]
 8015a0e:	887a      	ldrh	r2, [r7, #2]
 8015a10:	429a      	cmp	r2, r3
 8015a12:	d26e      	bcs.n	8015af2 <pbuf_realloc+0x136>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8015a14:	887b      	ldrh	r3, [r7, #2]
 8015a16:	687a      	ldr	r2, [r7, #4]
 8015a18:	8912      	ldrh	r2, [r2, #8]
 8015a1a:	1a9b      	subs	r3, r3, r2
 8015a1c:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8015a1e:	887b      	ldrh	r3, [r7, #2]
 8015a20:	827b      	strh	r3, [r7, #18]
  q = p;
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8015a26:	e025      	b.n	8015a74 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 8015a28:	697b      	ldr	r3, [r7, #20]
 8015a2a:	895b      	ldrh	r3, [r3, #10]
 8015a2c:	8a7a      	ldrh	r2, [r7, #18]
 8015a2e:	1ad3      	subs	r3, r2, r3
 8015a30:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8015a32:	68fb      	ldr	r3, [r7, #12]
 8015a34:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8015a38:	4293      	cmp	r3, r2
 8015a3a:	dd06      	ble.n	8015a4a <pbuf_realloc+0x8e>
 8015a3c:	4b2f      	ldr	r3, [pc, #188]	@ (8015afc <pbuf_realloc+0x140>)
 8015a3e:	f240 220b 	movw	r2, #523	@ 0x20b
 8015a42:	4932      	ldr	r1, [pc, #200]	@ (8015b0c <pbuf_realloc+0x150>)
 8015a44:	482f      	ldr	r0, [pc, #188]	@ (8015b04 <pbuf_realloc+0x148>)
 8015a46:	f00c f91f 	bl	8021c88 <iprintf>
    q->tot_len += (u16_t)grow;
 8015a4a:	697b      	ldr	r3, [r7, #20]
 8015a4c:	891a      	ldrh	r2, [r3, #8]
 8015a4e:	68fb      	ldr	r3, [r7, #12]
 8015a50:	b29b      	uxth	r3, r3
 8015a52:	4413      	add	r3, r2
 8015a54:	b29a      	uxth	r2, r3
 8015a56:	697b      	ldr	r3, [r7, #20]
 8015a58:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8015a5a:	697b      	ldr	r3, [r7, #20]
 8015a5c:	681b      	ldr	r3, [r3, #0]
 8015a5e:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8015a60:	697b      	ldr	r3, [r7, #20]
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d106      	bne.n	8015a74 <pbuf_realloc+0xb8>
 8015a66:	4b25      	ldr	r3, [pc, #148]	@ (8015afc <pbuf_realloc+0x140>)
 8015a68:	f240 220f 	movw	r2, #527	@ 0x20f
 8015a6c:	4928      	ldr	r1, [pc, #160]	@ (8015b10 <pbuf_realloc+0x154>)
 8015a6e:	4825      	ldr	r0, [pc, #148]	@ (8015b04 <pbuf_realloc+0x148>)
 8015a70:	f00c f90a 	bl	8021c88 <iprintf>
  while (rem_len > q->len) {
 8015a74:	697b      	ldr	r3, [r7, #20]
 8015a76:	895b      	ldrh	r3, [r3, #10]
 8015a78:	8a7a      	ldrh	r2, [r7, #18]
 8015a7a:	429a      	cmp	r2, r3
 8015a7c:	d8d4      	bhi.n	8015a28 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8015a7e:	697b      	ldr	r3, [r7, #20]
 8015a80:	7b1b      	ldrb	r3, [r3, #12]
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d121      	bne.n	8015aca <pbuf_realloc+0x10e>
 8015a86:	697b      	ldr	r3, [r7, #20]
 8015a88:	895b      	ldrh	r3, [r3, #10]
 8015a8a:	8a7a      	ldrh	r2, [r7, #18]
 8015a8c:	429a      	cmp	r2, r3
 8015a8e:	d01c      	beq.n	8015aca <pbuf_realloc+0x10e>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8015a90:	697b      	ldr	r3, [r7, #20]
 8015a92:	7b5b      	ldrb	r3, [r3, #13]
 8015a94:	f003 0302 	and.w	r3, r3, #2
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d116      	bne.n	8015aca <pbuf_realloc+0x10e>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8015a9c:	697b      	ldr	r3, [r7, #20]
 8015a9e:	685a      	ldr	r2, [r3, #4]
 8015aa0:	697b      	ldr	r3, [r7, #20]
 8015aa2:	1ad3      	subs	r3, r2, r3
 8015aa4:	b29a      	uxth	r2, r3
 8015aa6:	8a7b      	ldrh	r3, [r7, #18]
 8015aa8:	4413      	add	r3, r2
 8015aaa:	b29b      	uxth	r3, r3
 8015aac:	4619      	mov	r1, r3
 8015aae:	6978      	ldr	r0, [r7, #20]
 8015ab0:	f7ff f89e 	bl	8014bf0 <mem_trim>
 8015ab4:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8015ab6:	697b      	ldr	r3, [r7, #20]
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d106      	bne.n	8015aca <pbuf_realloc+0x10e>
 8015abc:	4b0f      	ldr	r3, [pc, #60]	@ (8015afc <pbuf_realloc+0x140>)
 8015abe:	f240 221d 	movw	r2, #541	@ 0x21d
 8015ac2:	4914      	ldr	r1, [pc, #80]	@ (8015b14 <pbuf_realloc+0x158>)
 8015ac4:	480f      	ldr	r0, [pc, #60]	@ (8015b04 <pbuf_realloc+0x148>)
 8015ac6:	f00c f8df 	bl	8021c88 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8015aca:	697b      	ldr	r3, [r7, #20]
 8015acc:	8a7a      	ldrh	r2, [r7, #18]
 8015ace:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8015ad0:	697b      	ldr	r3, [r7, #20]
 8015ad2:	895a      	ldrh	r2, [r3, #10]
 8015ad4:	697b      	ldr	r3, [r7, #20]
 8015ad6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8015ad8:	697b      	ldr	r3, [r7, #20]
 8015ada:	681b      	ldr	r3, [r3, #0]
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d004      	beq.n	8015aea <pbuf_realloc+0x12e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8015ae0:	697b      	ldr	r3, [r7, #20]
 8015ae2:	681b      	ldr	r3, [r3, #0]
 8015ae4:	4618      	mov	r0, r3
 8015ae6:	f000 f8dd 	bl	8015ca4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8015aea:	697b      	ldr	r3, [r7, #20]
 8015aec:	2200      	movs	r2, #0
 8015aee:	601a      	str	r2, [r3, #0]
 8015af0:	e000      	b.n	8015af4 <pbuf_realloc+0x138>
    return;
 8015af2:	bf00      	nop

}
 8015af4:	3718      	adds	r7, #24
 8015af6:	46bd      	mov	sp, r7
 8015af8:	bd80      	pop	{r7, pc}
 8015afa:	bf00      	nop
 8015afc:	08025b28 	.word	0x08025b28
 8015b00:	08025ce4 	.word	0x08025ce4
 8015b04:	08025b74 	.word	0x08025b74
 8015b08:	08025cfc 	.word	0x08025cfc
 8015b0c:	08025d18 	.word	0x08025d18
 8015b10:	08025d2c 	.word	0x08025d2c
 8015b14:	08025d44 	.word	0x08025d44

08015b18 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8015b18:	b580      	push	{r7, lr}
 8015b1a:	b084      	sub	sp, #16
 8015b1c:	af00      	add	r7, sp, #0
 8015b1e:	6078      	str	r0, [r7, #4]
 8015b20:	460b      	mov	r3, r1
 8015b22:	807b      	strh	r3, [r7, #2]
 8015b24:	4613      	mov	r3, r2
 8015b26:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d106      	bne.n	8015b3c <pbuf_header_impl+0x24>
 8015b2e:	4b46      	ldr	r3, [pc, #280]	@ (8015c48 <pbuf_header_impl+0x130>)
 8015b30:	f240 223f 	movw	r2, #575	@ 0x23f
 8015b34:	4945      	ldr	r1, [pc, #276]	@ (8015c4c <pbuf_header_impl+0x134>)
 8015b36:	4846      	ldr	r0, [pc, #280]	@ (8015c50 <pbuf_header_impl+0x138>)
 8015b38:	f00c f8a6 	bl	8021c88 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 8015b3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d002      	beq.n	8015b4a <pbuf_header_impl+0x32>
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d101      	bne.n	8015b4e <pbuf_header_impl+0x36>
    return 0;
 8015b4a:	2300      	movs	r3, #0
 8015b4c:	e078      	b.n	8015c40 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 8015b4e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	da10      	bge.n	8015b78 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 8015b56:	887b      	ldrh	r3, [r7, #2]
 8015b58:	425b      	negs	r3, r3
 8015b5a:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	895b      	ldrh	r3, [r3, #10]
 8015b60:	89fa      	ldrh	r2, [r7, #14]
 8015b62:	429a      	cmp	r2, r3
 8015b64:	d90a      	bls.n	8015b7c <pbuf_header_impl+0x64>
 8015b66:	4b38      	ldr	r3, [pc, #224]	@ (8015c48 <pbuf_header_impl+0x130>)
 8015b68:	f240 2247 	movw	r2, #583	@ 0x247
 8015b6c:	4939      	ldr	r1, [pc, #228]	@ (8015c54 <pbuf_header_impl+0x13c>)
 8015b6e:	4838      	ldr	r0, [pc, #224]	@ (8015c50 <pbuf_header_impl+0x138>)
 8015b70:	f00c f88a 	bl	8021c88 <iprintf>
 8015b74:	2301      	movs	r3, #1
 8015b76:	e063      	b.n	8015c40 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8015b78:	887b      	ldrh	r3, [r7, #2]
 8015b7a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	7b1b      	ldrb	r3, [r3, #12]
 8015b80:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	685b      	ldr	r3, [r3, #4]
 8015b86:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8015b88:	89bb      	ldrh	r3, [r7, #12]
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d002      	beq.n	8015b94 <pbuf_header_impl+0x7c>
 8015b8e:	89bb      	ldrh	r3, [r7, #12]
 8015b90:	2b03      	cmp	r3, #3
 8015b92:	d112      	bne.n	8015bba <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	685a      	ldr	r2, [r3, #4]
 8015b98:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015b9c:	425b      	negs	r3, r3
 8015b9e:	441a      	add	r2, r3
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	685a      	ldr	r2, [r3, #4]
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	3310      	adds	r3, #16
 8015bac:	429a      	cmp	r2, r3
 8015bae:	d238      	bcs.n	8015c22 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	68ba      	ldr	r2, [r7, #8]
 8015bb4:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 8015bb6:	2301      	movs	r3, #1
 8015bb8:	e042      	b.n	8015c40 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8015bba:	89bb      	ldrh	r3, [r7, #12]
 8015bbc:	2b02      	cmp	r3, #2
 8015bbe:	d002      	beq.n	8015bc6 <pbuf_header_impl+0xae>
 8015bc0:	89bb      	ldrh	r3, [r7, #12]
 8015bc2:	2b01      	cmp	r3, #1
 8015bc4:	d124      	bne.n	8015c10 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8015bc6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	da0d      	bge.n	8015bea <pbuf_header_impl+0xd2>
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	895b      	ldrh	r3, [r3, #10]
 8015bd2:	89fa      	ldrh	r2, [r7, #14]
 8015bd4:	429a      	cmp	r2, r3
 8015bd6:	d808      	bhi.n	8015bea <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	685a      	ldr	r2, [r3, #4]
 8015bdc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015be0:	425b      	negs	r3, r3
 8015be2:	441a      	add	r2, r3
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	605a      	str	r2, [r3, #4]
 8015be8:	e011      	b.n	8015c0e <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 8015bea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	dd0b      	ble.n	8015c0a <pbuf_header_impl+0xf2>
 8015bf2:	787b      	ldrb	r3, [r7, #1]
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d008      	beq.n	8015c0a <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	685a      	ldr	r2, [r3, #4]
 8015bfc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015c00:	425b      	negs	r3, r3
 8015c02:	441a      	add	r2, r3
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	605a      	str	r2, [r3, #4]
 8015c08:	e001      	b.n	8015c0e <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8015c0a:	2301      	movs	r3, #1
 8015c0c:	e018      	b.n	8015c40 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8015c0e:	e008      	b.n	8015c22 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8015c10:	4b0d      	ldr	r3, [pc, #52]	@ (8015c48 <pbuf_header_impl+0x130>)
 8015c12:	f240 2277 	movw	r2, #631	@ 0x277
 8015c16:	4910      	ldr	r1, [pc, #64]	@ (8015c58 <pbuf_header_impl+0x140>)
 8015c18:	480d      	ldr	r0, [pc, #52]	@ (8015c50 <pbuf_header_impl+0x138>)
 8015c1a:	f00c f835 	bl	8021c88 <iprintf>
    return 1;
 8015c1e:	2301      	movs	r3, #1
 8015c20:	e00e      	b.n	8015c40 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	895a      	ldrh	r2, [r3, #10]
 8015c26:	887b      	ldrh	r3, [r7, #2]
 8015c28:	4413      	add	r3, r2
 8015c2a:	b29a      	uxth	r2, r3
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	891a      	ldrh	r2, [r3, #8]
 8015c34:	887b      	ldrh	r3, [r7, #2]
 8015c36:	4413      	add	r3, r2
 8015c38:	b29a      	uxth	r2, r3
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8015c3e:	2300      	movs	r3, #0
}
 8015c40:	4618      	mov	r0, r3
 8015c42:	3710      	adds	r7, #16
 8015c44:	46bd      	mov	sp, r7
 8015c46:	bd80      	pop	{r7, pc}
 8015c48:	08025b28 	.word	0x08025b28
 8015c4c:	08025d60 	.word	0x08025d60
 8015c50:	08025b74 	.word	0x08025b74
 8015c54:	08025d6c 	.word	0x08025d6c
 8015c58:	08025d8c 	.word	0x08025d8c

08015c5c <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8015c5c:	b580      	push	{r7, lr}
 8015c5e:	b082      	sub	sp, #8
 8015c60:	af00      	add	r7, sp, #0
 8015c62:	6078      	str	r0, [r7, #4]
 8015c64:	460b      	mov	r3, r1
 8015c66:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 8015c68:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015c6c:	2200      	movs	r2, #0
 8015c6e:	4619      	mov	r1, r3
 8015c70:	6878      	ldr	r0, [r7, #4]
 8015c72:	f7ff ff51 	bl	8015b18 <pbuf_header_impl>
 8015c76:	4603      	mov	r3, r0
}
 8015c78:	4618      	mov	r0, r3
 8015c7a:	3708      	adds	r7, #8
 8015c7c:	46bd      	mov	sp, r7
 8015c7e:	bd80      	pop	{r7, pc}

08015c80 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8015c80:	b580      	push	{r7, lr}
 8015c82:	b082      	sub	sp, #8
 8015c84:	af00      	add	r7, sp, #0
 8015c86:	6078      	str	r0, [r7, #4]
 8015c88:	460b      	mov	r3, r1
 8015c8a:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8015c8c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015c90:	2201      	movs	r2, #1
 8015c92:	4619      	mov	r1, r3
 8015c94:	6878      	ldr	r0, [r7, #4]
 8015c96:	f7ff ff3f 	bl	8015b18 <pbuf_header_impl>
 8015c9a:	4603      	mov	r3, r0
}
 8015c9c:	4618      	mov	r0, r3
 8015c9e:	3708      	adds	r7, #8
 8015ca0:	46bd      	mov	sp, r7
 8015ca2:	bd80      	pop	{r7, pc}

08015ca4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8015ca4:	b580      	push	{r7, lr}
 8015ca6:	b086      	sub	sp, #24
 8015ca8:	af00      	add	r7, sp, #0
 8015caa:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d10b      	bne.n	8015cca <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d106      	bne.n	8015cc6 <pbuf_free+0x22>
 8015cb8:	4b3e      	ldr	r3, [pc, #248]	@ (8015db4 <pbuf_free+0x110>)
 8015cba:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8015cbe:	493e      	ldr	r1, [pc, #248]	@ (8015db8 <pbuf_free+0x114>)
 8015cc0:	483e      	ldr	r0, [pc, #248]	@ (8015dbc <pbuf_free+0x118>)
 8015cc2:	f00b ffe1 	bl	8021c88 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8015cc6:	2300      	movs	r3, #0
 8015cc8:	e070      	b.n	8015dac <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	7b1b      	ldrb	r3, [r3, #12]
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d012      	beq.n	8015cf8 <pbuf_free+0x54>
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	7b1b      	ldrb	r3, [r3, #12]
 8015cd6:	2b01      	cmp	r3, #1
 8015cd8:	d00e      	beq.n	8015cf8 <pbuf_free+0x54>
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	7b1b      	ldrb	r3, [r3, #12]
 8015cde:	2b02      	cmp	r3, #2
 8015ce0:	d00a      	beq.n	8015cf8 <pbuf_free+0x54>
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	7b1b      	ldrb	r3, [r3, #12]
 8015ce6:	2b03      	cmp	r3, #3
 8015ce8:	d006      	beq.n	8015cf8 <pbuf_free+0x54>
 8015cea:	4b32      	ldr	r3, [pc, #200]	@ (8015db4 <pbuf_free+0x110>)
 8015cec:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8015cf0:	4933      	ldr	r1, [pc, #204]	@ (8015dc0 <pbuf_free+0x11c>)
 8015cf2:	4832      	ldr	r0, [pc, #200]	@ (8015dbc <pbuf_free+0x118>)
 8015cf4:	f00b ffc8 	bl	8021c88 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8015cf8:	2300      	movs	r3, #0
 8015cfa:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8015cfc:	e052      	b.n	8015da4 <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	89db      	ldrh	r3, [r3, #14]
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d106      	bne.n	8015d14 <pbuf_free+0x70>
 8015d06:	4b2b      	ldr	r3, [pc, #172]	@ (8015db4 <pbuf_free+0x110>)
 8015d08:	f240 22eb 	movw	r2, #747	@ 0x2eb
 8015d0c:	492d      	ldr	r1, [pc, #180]	@ (8015dc4 <pbuf_free+0x120>)
 8015d0e:	482b      	ldr	r0, [pc, #172]	@ (8015dbc <pbuf_free+0x118>)
 8015d10:	f00b ffba 	bl	8021c88 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	89db      	ldrh	r3, [r3, #14]
 8015d18:	3b01      	subs	r3, #1
 8015d1a:	b29a      	uxth	r2, r3
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	81da      	strh	r2, [r3, #14]
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	89db      	ldrh	r3, [r3, #14]
 8015d24:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8015d26:	8abb      	ldrh	r3, [r7, #20]
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d139      	bne.n	8015da0 <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	681b      	ldr	r3, [r3, #0]
 8015d30:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	7b1b      	ldrb	r3, [r3, #12]
 8015d36:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	7b5b      	ldrb	r3, [r3, #13]
 8015d3c:	f003 0302 	and.w	r3, r3, #2
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d011      	beq.n	8015d68 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8015d48:	68bb      	ldr	r3, [r7, #8]
 8015d4a:	691b      	ldr	r3, [r3, #16]
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d106      	bne.n	8015d5e <pbuf_free+0xba>
 8015d50:	4b18      	ldr	r3, [pc, #96]	@ (8015db4 <pbuf_free+0x110>)
 8015d52:	f240 22f9 	movw	r2, #761	@ 0x2f9
 8015d56:	491c      	ldr	r1, [pc, #112]	@ (8015dc8 <pbuf_free+0x124>)
 8015d58:	4818      	ldr	r0, [pc, #96]	@ (8015dbc <pbuf_free+0x118>)
 8015d5a:	f00b ff95 	bl	8021c88 <iprintf>
        pc->custom_free_function(p);
 8015d5e:	68bb      	ldr	r3, [r7, #8]
 8015d60:	691b      	ldr	r3, [r3, #16]
 8015d62:	6878      	ldr	r0, [r7, #4]
 8015d64:	4798      	blx	r3
 8015d66:	e015      	b.n	8015d94 <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8015d68:	89fb      	ldrh	r3, [r7, #14]
 8015d6a:	2b03      	cmp	r3, #3
 8015d6c:	d104      	bne.n	8015d78 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 8015d6e:	6879      	ldr	r1, [r7, #4]
 8015d70:	2008      	movs	r0, #8
 8015d72:	f7ff fa3b 	bl	80151ec <memp_free>
 8015d76:	e00d      	b.n	8015d94 <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8015d78:	89fb      	ldrh	r3, [r7, #14]
 8015d7a:	2b01      	cmp	r3, #1
 8015d7c:	d002      	beq.n	8015d84 <pbuf_free+0xe0>
 8015d7e:	89fb      	ldrh	r3, [r7, #14]
 8015d80:	2b02      	cmp	r3, #2
 8015d82:	d104      	bne.n	8015d8e <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 8015d84:	6879      	ldr	r1, [r7, #4]
 8015d86:	2007      	movs	r0, #7
 8015d88:	f7ff fa30 	bl	80151ec <memp_free>
 8015d8c:	e002      	b.n	8015d94 <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8015d8e:	6878      	ldr	r0, [r7, #4]
 8015d90:	f7fe feb2 	bl	8014af8 <mem_free>
        }
      }
      count++;
 8015d94:	7dfb      	ldrb	r3, [r7, #23]
 8015d96:	3301      	adds	r3, #1
 8015d98:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8015d9a:	693b      	ldr	r3, [r7, #16]
 8015d9c:	607b      	str	r3, [r7, #4]
 8015d9e:	e001      	b.n	8015da4 <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8015da0:	2300      	movs	r3, #0
 8015da2:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d1a9      	bne.n	8015cfe <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8015daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8015dac:	4618      	mov	r0, r3
 8015dae:	3718      	adds	r7, #24
 8015db0:	46bd      	mov	sp, r7
 8015db2:	bd80      	pop	{r7, pc}
 8015db4:	08025b28 	.word	0x08025b28
 8015db8:	08025d60 	.word	0x08025d60
 8015dbc:	08025b74 	.word	0x08025b74
 8015dc0:	08025d9c 	.word	0x08025d9c
 8015dc4:	08025db4 	.word	0x08025db4
 8015dc8:	08025dcc 	.word	0x08025dcc

08015dcc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8015dcc:	b480      	push	{r7}
 8015dce:	b085      	sub	sp, #20
 8015dd0:	af00      	add	r7, sp, #0
 8015dd2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8015dd4:	2300      	movs	r3, #0
 8015dd6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8015dd8:	e005      	b.n	8015de6 <pbuf_clen+0x1a>
    ++len;
 8015dda:	89fb      	ldrh	r3, [r7, #14]
 8015ddc:	3301      	adds	r3, #1
 8015dde:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	681b      	ldr	r3, [r3, #0]
 8015de4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d1f6      	bne.n	8015dda <pbuf_clen+0xe>
  }
  return len;
 8015dec:	89fb      	ldrh	r3, [r7, #14]
}
 8015dee:	4618      	mov	r0, r3
 8015df0:	3714      	adds	r7, #20
 8015df2:	46bd      	mov	sp, r7
 8015df4:	bc80      	pop	{r7}
 8015df6:	4770      	bx	lr

08015df8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8015df8:	b580      	push	{r7, lr}
 8015dfa:	b082      	sub	sp, #8
 8015dfc:	af00      	add	r7, sp, #0
 8015dfe:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d010      	beq.n	8015e28 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	89db      	ldrh	r3, [r3, #14]
 8015e0a:	3301      	adds	r3, #1
 8015e0c:	b29a      	uxth	r2, r3
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	89db      	ldrh	r3, [r3, #14]
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d106      	bne.n	8015e28 <pbuf_ref+0x30>
 8015e1a:	4b05      	ldr	r3, [pc, #20]	@ (8015e30 <pbuf_ref+0x38>)
 8015e1c:	f240 3239 	movw	r2, #825	@ 0x339
 8015e20:	4904      	ldr	r1, [pc, #16]	@ (8015e34 <pbuf_ref+0x3c>)
 8015e22:	4805      	ldr	r0, [pc, #20]	@ (8015e38 <pbuf_ref+0x40>)
 8015e24:	f00b ff30 	bl	8021c88 <iprintf>
  }
}
 8015e28:	bf00      	nop
 8015e2a:	3708      	adds	r7, #8
 8015e2c:	46bd      	mov	sp, r7
 8015e2e:	bd80      	pop	{r7, pc}
 8015e30:	08025b28 	.word	0x08025b28
 8015e34:	08025df0 	.word	0x08025df0
 8015e38:	08025b74 	.word	0x08025b74

08015e3c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8015e3c:	b580      	push	{r7, lr}
 8015e3e:	b084      	sub	sp, #16
 8015e40:	af00      	add	r7, sp, #0
 8015e42:	6078      	str	r0, [r7, #4]
 8015e44:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d002      	beq.n	8015e52 <pbuf_cat+0x16>
 8015e4c:	683b      	ldr	r3, [r7, #0]
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d107      	bne.n	8015e62 <pbuf_cat+0x26>
 8015e52:	4b20      	ldr	r3, [pc, #128]	@ (8015ed4 <pbuf_cat+0x98>)
 8015e54:	f44f 7253 	mov.w	r2, #844	@ 0x34c
 8015e58:	491f      	ldr	r1, [pc, #124]	@ (8015ed8 <pbuf_cat+0x9c>)
 8015e5a:	4820      	ldr	r0, [pc, #128]	@ (8015edc <pbuf_cat+0xa0>)
 8015e5c:	f00b ff14 	bl	8021c88 <iprintf>
 8015e60:	e034      	b.n	8015ecc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	60fb      	str	r3, [r7, #12]
 8015e66:	e00a      	b.n	8015e7e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8015e68:	68fb      	ldr	r3, [r7, #12]
 8015e6a:	891a      	ldrh	r2, [r3, #8]
 8015e6c:	683b      	ldr	r3, [r7, #0]
 8015e6e:	891b      	ldrh	r3, [r3, #8]
 8015e70:	4413      	add	r3, r2
 8015e72:	b29a      	uxth	r2, r3
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8015e78:	68fb      	ldr	r3, [r7, #12]
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	60fb      	str	r3, [r7, #12]
 8015e7e:	68fb      	ldr	r3, [r7, #12]
 8015e80:	681b      	ldr	r3, [r3, #0]
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d1f0      	bne.n	8015e68 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8015e86:	68fb      	ldr	r3, [r7, #12]
 8015e88:	891a      	ldrh	r2, [r3, #8]
 8015e8a:	68fb      	ldr	r3, [r7, #12]
 8015e8c:	895b      	ldrh	r3, [r3, #10]
 8015e8e:	429a      	cmp	r2, r3
 8015e90:	d006      	beq.n	8015ea0 <pbuf_cat+0x64>
 8015e92:	4b10      	ldr	r3, [pc, #64]	@ (8015ed4 <pbuf_cat+0x98>)
 8015e94:	f240 3255 	movw	r2, #853	@ 0x355
 8015e98:	4911      	ldr	r1, [pc, #68]	@ (8015ee0 <pbuf_cat+0xa4>)
 8015e9a:	4810      	ldr	r0, [pc, #64]	@ (8015edc <pbuf_cat+0xa0>)
 8015e9c:	f00b fef4 	bl	8021c88 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d006      	beq.n	8015eb6 <pbuf_cat+0x7a>
 8015ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8015ed4 <pbuf_cat+0x98>)
 8015eaa:	f240 3256 	movw	r2, #854	@ 0x356
 8015eae:	490d      	ldr	r1, [pc, #52]	@ (8015ee4 <pbuf_cat+0xa8>)
 8015eb0:	480a      	ldr	r0, [pc, #40]	@ (8015edc <pbuf_cat+0xa0>)
 8015eb2:	f00b fee9 	bl	8021c88 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8015eb6:	68fb      	ldr	r3, [r7, #12]
 8015eb8:	891a      	ldrh	r2, [r3, #8]
 8015eba:	683b      	ldr	r3, [r7, #0]
 8015ebc:	891b      	ldrh	r3, [r3, #8]
 8015ebe:	4413      	add	r3, r2
 8015ec0:	b29a      	uxth	r2, r3
 8015ec2:	68fb      	ldr	r3, [r7, #12]
 8015ec4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8015ec6:	68fb      	ldr	r3, [r7, #12]
 8015ec8:	683a      	ldr	r2, [r7, #0]
 8015eca:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8015ecc:	3710      	adds	r7, #16
 8015ece:	46bd      	mov	sp, r7
 8015ed0:	bd80      	pop	{r7, pc}
 8015ed2:	bf00      	nop
 8015ed4:	08025b28 	.word	0x08025b28
 8015ed8:	08025e04 	.word	0x08025e04
 8015edc:	08025b74 	.word	0x08025b74
 8015ee0:	08025e3c 	.word	0x08025e3c
 8015ee4:	08025e6c 	.word	0x08025e6c

08015ee8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8015ee8:	b580      	push	{r7, lr}
 8015eea:	b082      	sub	sp, #8
 8015eec:	af00      	add	r7, sp, #0
 8015eee:	6078      	str	r0, [r7, #4]
 8015ef0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8015ef2:	6839      	ldr	r1, [r7, #0]
 8015ef4:	6878      	ldr	r0, [r7, #4]
 8015ef6:	f7ff ffa1 	bl	8015e3c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8015efa:	6838      	ldr	r0, [r7, #0]
 8015efc:	f7ff ff7c 	bl	8015df8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8015f00:	bf00      	nop
 8015f02:	3708      	adds	r7, #8
 8015f04:	46bd      	mov	sp, r7
 8015f06:	bd80      	pop	{r7, pc}

08015f08 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8015f08:	b580      	push	{r7, lr}
 8015f0a:	b084      	sub	sp, #16
 8015f0c:	af00      	add	r7, sp, #0
 8015f0e:	6078      	str	r0, [r7, #4]
 8015f10:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8015f12:	2300      	movs	r3, #0
 8015f14:	81fb      	strh	r3, [r7, #14]
 8015f16:	2300      	movs	r3, #0
 8015f18:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d008      	beq.n	8015f32 <pbuf_copy+0x2a>
 8015f20:	683b      	ldr	r3, [r7, #0]
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d005      	beq.n	8015f32 <pbuf_copy+0x2a>
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	891a      	ldrh	r2, [r3, #8]
 8015f2a:	683b      	ldr	r3, [r7, #0]
 8015f2c:	891b      	ldrh	r3, [r3, #8]
 8015f2e:	429a      	cmp	r2, r3
 8015f30:	d209      	bcs.n	8015f46 <pbuf_copy+0x3e>
 8015f32:	4b54      	ldr	r3, [pc, #336]	@ (8016084 <pbuf_copy+0x17c>)
 8015f34:	f44f 726f 	mov.w	r2, #956	@ 0x3bc
 8015f38:	4953      	ldr	r1, [pc, #332]	@ (8016088 <pbuf_copy+0x180>)
 8015f3a:	4854      	ldr	r0, [pc, #336]	@ (801608c <pbuf_copy+0x184>)
 8015f3c:	f00b fea4 	bl	8021c88 <iprintf>
 8015f40:	f06f 030f 	mvn.w	r3, #15
 8015f44:	e099      	b.n	801607a <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	895b      	ldrh	r3, [r3, #10]
 8015f4a:	461a      	mov	r2, r3
 8015f4c:	89fb      	ldrh	r3, [r7, #14]
 8015f4e:	1ad2      	subs	r2, r2, r3
 8015f50:	683b      	ldr	r3, [r7, #0]
 8015f52:	895b      	ldrh	r3, [r3, #10]
 8015f54:	4619      	mov	r1, r3
 8015f56:	89bb      	ldrh	r3, [r7, #12]
 8015f58:	1acb      	subs	r3, r1, r3
 8015f5a:	429a      	cmp	r2, r3
 8015f5c:	db05      	blt.n	8015f6a <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8015f5e:	683b      	ldr	r3, [r7, #0]
 8015f60:	895a      	ldrh	r2, [r3, #10]
 8015f62:	89bb      	ldrh	r3, [r7, #12]
 8015f64:	1ad3      	subs	r3, r2, r3
 8015f66:	817b      	strh	r3, [r7, #10]
 8015f68:	e004      	b.n	8015f74 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	895a      	ldrh	r2, [r3, #10]
 8015f6e:	89fb      	ldrh	r3, [r7, #14]
 8015f70:	1ad3      	subs	r3, r2, r3
 8015f72:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	685a      	ldr	r2, [r3, #4]
 8015f78:	89fb      	ldrh	r3, [r7, #14]
 8015f7a:	18d0      	adds	r0, r2, r3
 8015f7c:	683b      	ldr	r3, [r7, #0]
 8015f7e:	685a      	ldr	r2, [r3, #4]
 8015f80:	89bb      	ldrh	r3, [r7, #12]
 8015f82:	4413      	add	r3, r2
 8015f84:	897a      	ldrh	r2, [r7, #10]
 8015f86:	4619      	mov	r1, r3
 8015f88:	f00c f979 	bl	802227e <memcpy>
    offset_to += len;
 8015f8c:	89fa      	ldrh	r2, [r7, #14]
 8015f8e:	897b      	ldrh	r3, [r7, #10]
 8015f90:	4413      	add	r3, r2
 8015f92:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8015f94:	89ba      	ldrh	r2, [r7, #12]
 8015f96:	897b      	ldrh	r3, [r7, #10]
 8015f98:	4413      	add	r3, r2
 8015f9a:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	895b      	ldrh	r3, [r3, #10]
 8015fa0:	89fa      	ldrh	r2, [r7, #14]
 8015fa2:	429a      	cmp	r2, r3
 8015fa4:	d906      	bls.n	8015fb4 <pbuf_copy+0xac>
 8015fa6:	4b37      	ldr	r3, [pc, #220]	@ (8016084 <pbuf_copy+0x17c>)
 8015fa8:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8015fac:	4938      	ldr	r1, [pc, #224]	@ (8016090 <pbuf_copy+0x188>)
 8015fae:	4837      	ldr	r0, [pc, #220]	@ (801608c <pbuf_copy+0x184>)
 8015fb0:	f00b fe6a 	bl	8021c88 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8015fb4:	683b      	ldr	r3, [r7, #0]
 8015fb6:	895b      	ldrh	r3, [r3, #10]
 8015fb8:	89ba      	ldrh	r2, [r7, #12]
 8015fba:	429a      	cmp	r2, r3
 8015fbc:	d906      	bls.n	8015fcc <pbuf_copy+0xc4>
 8015fbe:	4b31      	ldr	r3, [pc, #196]	@ (8016084 <pbuf_copy+0x17c>)
 8015fc0:	f240 32ce 	movw	r2, #974	@ 0x3ce
 8015fc4:	4933      	ldr	r1, [pc, #204]	@ (8016094 <pbuf_copy+0x18c>)
 8015fc6:	4831      	ldr	r0, [pc, #196]	@ (801608c <pbuf_copy+0x184>)
 8015fc8:	f00b fe5e 	bl	8021c88 <iprintf>
    if (offset_from >= p_from->len) {
 8015fcc:	683b      	ldr	r3, [r7, #0]
 8015fce:	895b      	ldrh	r3, [r3, #10]
 8015fd0:	89ba      	ldrh	r2, [r7, #12]
 8015fd2:	429a      	cmp	r2, r3
 8015fd4:	d304      	bcc.n	8015fe0 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8015fd6:	2300      	movs	r3, #0
 8015fd8:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8015fda:	683b      	ldr	r3, [r7, #0]
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	895b      	ldrh	r3, [r3, #10]
 8015fe4:	89fa      	ldrh	r2, [r7, #14]
 8015fe6:	429a      	cmp	r2, r3
 8015fe8:	d114      	bne.n	8016014 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 8015fea:	2300      	movs	r3, #0
 8015fec:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	681b      	ldr	r3, [r3, #0]
 8015ff2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d10c      	bne.n	8016014 <pbuf_copy+0x10c>
 8015ffa:	683b      	ldr	r3, [r7, #0]
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d009      	beq.n	8016014 <pbuf_copy+0x10c>
 8016000:	4b20      	ldr	r3, [pc, #128]	@ (8016084 <pbuf_copy+0x17c>)
 8016002:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8016006:	4924      	ldr	r1, [pc, #144]	@ (8016098 <pbuf_copy+0x190>)
 8016008:	4820      	ldr	r0, [pc, #128]	@ (801608c <pbuf_copy+0x184>)
 801600a:	f00b fe3d 	bl	8021c88 <iprintf>
 801600e:	f06f 030f 	mvn.w	r3, #15
 8016012:	e032      	b.n	801607a <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8016014:	683b      	ldr	r3, [r7, #0]
 8016016:	2b00      	cmp	r3, #0
 8016018:	d013      	beq.n	8016042 <pbuf_copy+0x13a>
 801601a:	683b      	ldr	r3, [r7, #0]
 801601c:	895a      	ldrh	r2, [r3, #10]
 801601e:	683b      	ldr	r3, [r7, #0]
 8016020:	891b      	ldrh	r3, [r3, #8]
 8016022:	429a      	cmp	r2, r3
 8016024:	d10d      	bne.n	8016042 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8016026:	683b      	ldr	r3, [r7, #0]
 8016028:	681b      	ldr	r3, [r3, #0]
 801602a:	2b00      	cmp	r3, #0
 801602c:	d009      	beq.n	8016042 <pbuf_copy+0x13a>
 801602e:	4b15      	ldr	r3, [pc, #84]	@ (8016084 <pbuf_copy+0x17c>)
 8016030:	f240 32dd 	movw	r2, #989	@ 0x3dd
 8016034:	4919      	ldr	r1, [pc, #100]	@ (801609c <pbuf_copy+0x194>)
 8016036:	4815      	ldr	r0, [pc, #84]	@ (801608c <pbuf_copy+0x184>)
 8016038:	f00b fe26 	bl	8021c88 <iprintf>
 801603c:	f06f 0305 	mvn.w	r3, #5
 8016040:	e01b      	b.n	801607a <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	2b00      	cmp	r3, #0
 8016046:	d013      	beq.n	8016070 <pbuf_copy+0x168>
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	895a      	ldrh	r2, [r3, #10]
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	891b      	ldrh	r3, [r3, #8]
 8016050:	429a      	cmp	r2, r3
 8016052:	d10d      	bne.n	8016070 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	681b      	ldr	r3, [r3, #0]
 8016058:	2b00      	cmp	r3, #0
 801605a:	d009      	beq.n	8016070 <pbuf_copy+0x168>
 801605c:	4b09      	ldr	r3, [pc, #36]	@ (8016084 <pbuf_copy+0x17c>)
 801605e:	f240 32e2 	movw	r2, #994	@ 0x3e2
 8016062:	490e      	ldr	r1, [pc, #56]	@ (801609c <pbuf_copy+0x194>)
 8016064:	4809      	ldr	r0, [pc, #36]	@ (801608c <pbuf_copy+0x184>)
 8016066:	f00b fe0f 	bl	8021c88 <iprintf>
 801606a:	f06f 0305 	mvn.w	r3, #5
 801606e:	e004      	b.n	801607a <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8016070:	683b      	ldr	r3, [r7, #0]
 8016072:	2b00      	cmp	r3, #0
 8016074:	f47f af67 	bne.w	8015f46 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8016078:	2300      	movs	r3, #0
}
 801607a:	4618      	mov	r0, r3
 801607c:	3710      	adds	r7, #16
 801607e:	46bd      	mov	sp, r7
 8016080:	bd80      	pop	{r7, pc}
 8016082:	bf00      	nop
 8016084:	08025b28 	.word	0x08025b28
 8016088:	08025eb8 	.word	0x08025eb8
 801608c:	08025b74 	.word	0x08025b74
 8016090:	08025ee8 	.word	0x08025ee8
 8016094:	08025f00 	.word	0x08025f00
 8016098:	08025f1c 	.word	0x08025f1c
 801609c:	08025f2c 	.word	0x08025f2c

080160a0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80160a0:	b580      	push	{r7, lr}
 80160a2:	b088      	sub	sp, #32
 80160a4:	af00      	add	r7, sp, #0
 80160a6:	60f8      	str	r0, [r7, #12]
 80160a8:	60b9      	str	r1, [r7, #8]
 80160aa:	4611      	mov	r1, r2
 80160ac:	461a      	mov	r2, r3
 80160ae:	460b      	mov	r3, r1
 80160b0:	80fb      	strh	r3, [r7, #6]
 80160b2:	4613      	mov	r3, r2
 80160b4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80160b6:	2300      	movs	r3, #0
 80160b8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d108      	bne.n	80160d2 <pbuf_copy_partial+0x32>
 80160c0:	4b30      	ldr	r3, [pc, #192]	@ (8016184 <pbuf_copy_partial+0xe4>)
 80160c2:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 80160c6:	4930      	ldr	r1, [pc, #192]	@ (8016188 <pbuf_copy_partial+0xe8>)
 80160c8:	4830      	ldr	r0, [pc, #192]	@ (801618c <pbuf_copy_partial+0xec>)
 80160ca:	f00b fddd 	bl	8021c88 <iprintf>
 80160ce:	2300      	movs	r3, #0
 80160d0:	e054      	b.n	801617c <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80160d2:	68bb      	ldr	r3, [r7, #8]
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d108      	bne.n	80160ea <pbuf_copy_partial+0x4a>
 80160d8:	4b2a      	ldr	r3, [pc, #168]	@ (8016184 <pbuf_copy_partial+0xe4>)
 80160da:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80160de:	492c      	ldr	r1, [pc, #176]	@ (8016190 <pbuf_copy_partial+0xf0>)
 80160e0:	482a      	ldr	r0, [pc, #168]	@ (801618c <pbuf_copy_partial+0xec>)
 80160e2:	f00b fdd1 	bl	8021c88 <iprintf>
 80160e6:	2300      	movs	r3, #0
 80160e8:	e048      	b.n	801617c <pbuf_copy_partial+0xdc>

  left = 0;
 80160ea:	2300      	movs	r3, #0
 80160ec:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 80160ee:	68fb      	ldr	r3, [r7, #12]
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d002      	beq.n	80160fa <pbuf_copy_partial+0x5a>
 80160f4:	68bb      	ldr	r3, [r7, #8]
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d101      	bne.n	80160fe <pbuf_copy_partial+0x5e>
    return 0;
 80160fa:	2300      	movs	r3, #0
 80160fc:	e03e      	b.n	801617c <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80160fe:	68fb      	ldr	r3, [r7, #12]
 8016100:	61fb      	str	r3, [r7, #28]
 8016102:	e034      	b.n	801616e <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8016104:	88bb      	ldrh	r3, [r7, #4]
 8016106:	2b00      	cmp	r3, #0
 8016108:	d00a      	beq.n	8016120 <pbuf_copy_partial+0x80>
 801610a:	69fb      	ldr	r3, [r7, #28]
 801610c:	895b      	ldrh	r3, [r3, #10]
 801610e:	88ba      	ldrh	r2, [r7, #4]
 8016110:	429a      	cmp	r2, r3
 8016112:	d305      	bcc.n	8016120 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8016114:	69fb      	ldr	r3, [r7, #28]
 8016116:	895b      	ldrh	r3, [r3, #10]
 8016118:	88ba      	ldrh	r2, [r7, #4]
 801611a:	1ad3      	subs	r3, r2, r3
 801611c:	80bb      	strh	r3, [r7, #4]
 801611e:	e023      	b.n	8016168 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8016120:	69fb      	ldr	r3, [r7, #28]
 8016122:	895a      	ldrh	r2, [r3, #10]
 8016124:	88bb      	ldrh	r3, [r7, #4]
 8016126:	1ad3      	subs	r3, r2, r3
 8016128:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801612a:	8b3a      	ldrh	r2, [r7, #24]
 801612c:	88fb      	ldrh	r3, [r7, #6]
 801612e:	429a      	cmp	r2, r3
 8016130:	d901      	bls.n	8016136 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 8016132:	88fb      	ldrh	r3, [r7, #6]
 8016134:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8016136:	8b7b      	ldrh	r3, [r7, #26]
 8016138:	68ba      	ldr	r2, [r7, #8]
 801613a:	18d0      	adds	r0, r2, r3
 801613c:	69fb      	ldr	r3, [r7, #28]
 801613e:	685a      	ldr	r2, [r3, #4]
 8016140:	88bb      	ldrh	r3, [r7, #4]
 8016142:	4413      	add	r3, r2
 8016144:	8b3a      	ldrh	r2, [r7, #24]
 8016146:	4619      	mov	r1, r3
 8016148:	f00c f899 	bl	802227e <memcpy>
      copied_total += buf_copy_len;
 801614c:	8afa      	ldrh	r2, [r7, #22]
 801614e:	8b3b      	ldrh	r3, [r7, #24]
 8016150:	4413      	add	r3, r2
 8016152:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8016154:	8b7a      	ldrh	r2, [r7, #26]
 8016156:	8b3b      	ldrh	r3, [r7, #24]
 8016158:	4413      	add	r3, r2
 801615a:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 801615c:	88fa      	ldrh	r2, [r7, #6]
 801615e:	8b3b      	ldrh	r3, [r7, #24]
 8016160:	1ad3      	subs	r3, r2, r3
 8016162:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8016164:	2300      	movs	r3, #0
 8016166:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8016168:	69fb      	ldr	r3, [r7, #28]
 801616a:	681b      	ldr	r3, [r3, #0]
 801616c:	61fb      	str	r3, [r7, #28]
 801616e:	88fb      	ldrh	r3, [r7, #6]
 8016170:	2b00      	cmp	r3, #0
 8016172:	d002      	beq.n	801617a <pbuf_copy_partial+0xda>
 8016174:	69fb      	ldr	r3, [r7, #28]
 8016176:	2b00      	cmp	r3, #0
 8016178:	d1c4      	bne.n	8016104 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 801617a:	8afb      	ldrh	r3, [r7, #22]
}
 801617c:	4618      	mov	r0, r3
 801617e:	3720      	adds	r7, #32
 8016180:	46bd      	mov	sp, r7
 8016182:	bd80      	pop	{r7, pc}
 8016184:	08025b28 	.word	0x08025b28
 8016188:	08025f58 	.word	0x08025f58
 801618c:	08025b74 	.word	0x08025b74
 8016190:	08025f78 	.word	0x08025f78

08016194 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf*
pbuf_skip_const(const struct pbuf* in, u16_t in_offset, u16_t* out_offset)
{
 8016194:	b480      	push	{r7}
 8016196:	b087      	sub	sp, #28
 8016198:	af00      	add	r7, sp, #0
 801619a:	60f8      	str	r0, [r7, #12]
 801619c:	460b      	mov	r3, r1
 801619e:	607a      	str	r2, [r7, #4]
 80161a0:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 80161a2:	897b      	ldrh	r3, [r7, #10]
 80161a4:	82fb      	strh	r3, [r7, #22]
  const struct pbuf* q = in;
 80161a6:	68fb      	ldr	r3, [r7, #12]
 80161a8:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 80161aa:	e007      	b.n	80161bc <pbuf_skip_const+0x28>
    offset_left -= q->len;
 80161ac:	693b      	ldr	r3, [r7, #16]
 80161ae:	895b      	ldrh	r3, [r3, #10]
 80161b0:	8afa      	ldrh	r2, [r7, #22]
 80161b2:	1ad3      	subs	r3, r2, r3
 80161b4:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 80161b6:	693b      	ldr	r3, [r7, #16]
 80161b8:	681b      	ldr	r3, [r3, #0]
 80161ba:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 80161bc:	693b      	ldr	r3, [r7, #16]
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d004      	beq.n	80161cc <pbuf_skip_const+0x38>
 80161c2:	693b      	ldr	r3, [r7, #16]
 80161c4:	895b      	ldrh	r3, [r3, #10]
 80161c6:	8afa      	ldrh	r2, [r7, #22]
 80161c8:	429a      	cmp	r2, r3
 80161ca:	d2ef      	bcs.n	80161ac <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	d002      	beq.n	80161d8 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	8afa      	ldrh	r2, [r7, #22]
 80161d6:	801a      	strh	r2, [r3, #0]
  }
  return q;
 80161d8:	693b      	ldr	r3, [r7, #16]
}
 80161da:	4618      	mov	r0, r3
 80161dc:	371c      	adds	r7, #28
 80161de:	46bd      	mov	sp, r7
 80161e0:	bc80      	pop	{r7}
 80161e2:	4770      	bx	lr

080161e4 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf*
pbuf_skip(struct pbuf* in, u16_t in_offset, u16_t* out_offset)
{
 80161e4:	b580      	push	{r7, lr}
 80161e6:	b086      	sub	sp, #24
 80161e8:	af00      	add	r7, sp, #0
 80161ea:	60f8      	str	r0, [r7, #12]
 80161ec:	460b      	mov	r3, r1
 80161ee:	607a      	str	r2, [r7, #4]
 80161f0:	817b      	strh	r3, [r7, #10]
  const struct pbuf* out = pbuf_skip_const(in, in_offset, out_offset);
 80161f2:	897b      	ldrh	r3, [r7, #10]
 80161f4:	687a      	ldr	r2, [r7, #4]
 80161f6:	4619      	mov	r1, r3
 80161f8:	68f8      	ldr	r0, [r7, #12]
 80161fa:	f7ff ffcb 	bl	8016194 <pbuf_skip_const>
 80161fe:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf*, out);
 8016200:	697b      	ldr	r3, [r7, #20]
}
 8016202:	4618      	mov	r0, r3
 8016204:	3718      	adds	r7, #24
 8016206:	46bd      	mov	sp, r7
 8016208:	bd80      	pop	{r7, pc}
	...

0801620c <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 801620c:	b580      	push	{r7, lr}
 801620e:	b088      	sub	sp, #32
 8016210:	af00      	add	r7, sp, #0
 8016212:	60f8      	str	r0, [r7, #12]
 8016214:	60b9      	str	r1, [r7, #8]
 8016216:	4613      	mov	r3, r2
 8016218:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
 801621a:	88fb      	ldrh	r3, [r7, #6]
 801621c:	833b      	strh	r3, [r7, #24]
  u16_t copied_total = 0;
 801621e:	2300      	movs	r3, #0
 8016220:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8016222:	68fb      	ldr	r3, [r7, #12]
 8016224:	2b00      	cmp	r3, #0
 8016226:	d109      	bne.n	801623c <pbuf_take+0x30>
 8016228:	4b3a      	ldr	r3, [pc, #232]	@ (8016314 <pbuf_take+0x108>)
 801622a:	f240 4284 	movw	r2, #1156	@ 0x484
 801622e:	493a      	ldr	r1, [pc, #232]	@ (8016318 <pbuf_take+0x10c>)
 8016230:	483a      	ldr	r0, [pc, #232]	@ (801631c <pbuf_take+0x110>)
 8016232:	f00b fd29 	bl	8021c88 <iprintf>
 8016236:	f06f 030f 	mvn.w	r3, #15
 801623a:	e066      	b.n	801630a <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801623c:	68bb      	ldr	r3, [r7, #8]
 801623e:	2b00      	cmp	r3, #0
 8016240:	d109      	bne.n	8016256 <pbuf_take+0x4a>
 8016242:	4b34      	ldr	r3, [pc, #208]	@ (8016314 <pbuf_take+0x108>)
 8016244:	f240 4285 	movw	r2, #1157	@ 0x485
 8016248:	4935      	ldr	r1, [pc, #212]	@ (8016320 <pbuf_take+0x114>)
 801624a:	4834      	ldr	r0, [pc, #208]	@ (801631c <pbuf_take+0x110>)
 801624c:	f00b fd1c 	bl	8021c88 <iprintf>
 8016250:	f06f 030f 	mvn.w	r3, #15
 8016254:	e059      	b.n	801630a <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8016256:	68fb      	ldr	r3, [r7, #12]
 8016258:	891b      	ldrh	r3, [r3, #8]
 801625a:	88fa      	ldrh	r2, [r7, #6]
 801625c:	429a      	cmp	r2, r3
 801625e:	d909      	bls.n	8016274 <pbuf_take+0x68>
 8016260:	4b2c      	ldr	r3, [pc, #176]	@ (8016314 <pbuf_take+0x108>)
 8016262:	f240 4286 	movw	r2, #1158	@ 0x486
 8016266:	492f      	ldr	r1, [pc, #188]	@ (8016324 <pbuf_take+0x118>)
 8016268:	482c      	ldr	r0, [pc, #176]	@ (801631c <pbuf_take+0x110>)
 801626a:	f00b fd0d 	bl	8021c88 <iprintf>
 801626e:	f04f 33ff 	mov.w	r3, #4294967295
 8016272:	e04a      	b.n	801630a <pbuf_take+0xfe>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8016274:	68fb      	ldr	r3, [r7, #12]
 8016276:	2b00      	cmp	r3, #0
 8016278:	d007      	beq.n	801628a <pbuf_take+0x7e>
 801627a:	68bb      	ldr	r3, [r7, #8]
 801627c:	2b00      	cmp	r3, #0
 801627e:	d004      	beq.n	801628a <pbuf_take+0x7e>
 8016280:	68fb      	ldr	r3, [r7, #12]
 8016282:	891b      	ldrh	r3, [r3, #8]
 8016284:	88fa      	ldrh	r2, [r7, #6]
 8016286:	429a      	cmp	r2, r3
 8016288:	d902      	bls.n	8016290 <pbuf_take+0x84>
    return ERR_ARG;
 801628a:	f06f 030f 	mvn.w	r3, #15
 801628e:	e03c      	b.n	801630a <pbuf_take+0xfe>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8016290:	68fb      	ldr	r3, [r7, #12]
 8016292:	61fb      	str	r3, [r7, #28]
 8016294:	e027      	b.n	80162e6 <pbuf_take+0xda>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8016296:	69fb      	ldr	r3, [r7, #28]
 8016298:	2b00      	cmp	r3, #0
 801629a:	d106      	bne.n	80162aa <pbuf_take+0x9e>
 801629c:	4b1d      	ldr	r3, [pc, #116]	@ (8016314 <pbuf_take+0x108>)
 801629e:	f240 428e 	movw	r2, #1166	@ 0x48e
 80162a2:	4921      	ldr	r1, [pc, #132]	@ (8016328 <pbuf_take+0x11c>)
 80162a4:	481d      	ldr	r0, [pc, #116]	@ (801631c <pbuf_take+0x110>)
 80162a6:	f00b fcef 	bl	8021c88 <iprintf>
    buf_copy_len = total_copy_len;
 80162aa:	8b3b      	ldrh	r3, [r7, #24]
 80162ac:	837b      	strh	r3, [r7, #26]
    if (buf_copy_len > p->len) {
 80162ae:	69fb      	ldr	r3, [r7, #28]
 80162b0:	895b      	ldrh	r3, [r3, #10]
 80162b2:	8b7a      	ldrh	r2, [r7, #26]
 80162b4:	429a      	cmp	r2, r3
 80162b6:	d902      	bls.n	80162be <pbuf_take+0xb2>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 80162b8:	69fb      	ldr	r3, [r7, #28]
 80162ba:	895b      	ldrh	r3, [r3, #10]
 80162bc:	837b      	strh	r3, [r7, #26]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char*)dataptr)[copied_total], buf_copy_len);
 80162be:	69fb      	ldr	r3, [r7, #28]
 80162c0:	6858      	ldr	r0, [r3, #4]
 80162c2:	8afb      	ldrh	r3, [r7, #22]
 80162c4:	68ba      	ldr	r2, [r7, #8]
 80162c6:	4413      	add	r3, r2
 80162c8:	8b7a      	ldrh	r2, [r7, #26]
 80162ca:	4619      	mov	r1, r3
 80162cc:	f00b ffd7 	bl	802227e <memcpy>
    total_copy_len -= buf_copy_len;
 80162d0:	8b3a      	ldrh	r2, [r7, #24]
 80162d2:	8b7b      	ldrh	r3, [r7, #26]
 80162d4:	1ad3      	subs	r3, r2, r3
 80162d6:	833b      	strh	r3, [r7, #24]
    copied_total += buf_copy_len;
 80162d8:	8afa      	ldrh	r2, [r7, #22]
 80162da:	8b7b      	ldrh	r3, [r7, #26]
 80162dc:	4413      	add	r3, r2
 80162de:	82fb      	strh	r3, [r7, #22]
  for (p = buf; total_copy_len != 0; p = p->next) {
 80162e0:	69fb      	ldr	r3, [r7, #28]
 80162e2:	681b      	ldr	r3, [r3, #0]
 80162e4:	61fb      	str	r3, [r7, #28]
 80162e6:	8b3b      	ldrh	r3, [r7, #24]
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d1d4      	bne.n	8016296 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 80162ec:	8b3b      	ldrh	r3, [r7, #24]
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d103      	bne.n	80162fa <pbuf_take+0xee>
 80162f2:	8afa      	ldrh	r2, [r7, #22]
 80162f4:	88fb      	ldrh	r3, [r7, #6]
 80162f6:	429a      	cmp	r2, r3
 80162f8:	d006      	beq.n	8016308 <pbuf_take+0xfc>
 80162fa:	4b06      	ldr	r3, [pc, #24]	@ (8016314 <pbuf_take+0x108>)
 80162fc:	f240 4299 	movw	r2, #1177	@ 0x499
 8016300:	490a      	ldr	r1, [pc, #40]	@ (801632c <pbuf_take+0x120>)
 8016302:	4806      	ldr	r0, [pc, #24]	@ (801631c <pbuf_take+0x110>)
 8016304:	f00b fcc0 	bl	8021c88 <iprintf>
  return ERR_OK;
 8016308:	2300      	movs	r3, #0
}
 801630a:	4618      	mov	r0, r3
 801630c:	3720      	adds	r7, #32
 801630e:	46bd      	mov	sp, r7
 8016310:	bd80      	pop	{r7, pc}
 8016312:	bf00      	nop
 8016314:	08025b28 	.word	0x08025b28
 8016318:	08025f9c 	.word	0x08025f9c
 801631c:	08025b74 	.word	0x08025b74
 8016320:	08025fb4 	.word	0x08025fb4
 8016324:	08025fd0 	.word	0x08025fd0
 8016328:	08025ff0 	.word	0x08025ff0
 801632c:	08026008 	.word	0x08026008

08016330 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 8016330:	b580      	push	{r7, lr}
 8016332:	b088      	sub	sp, #32
 8016334:	af00      	add	r7, sp, #0
 8016336:	60f8      	str	r0, [r7, #12]
 8016338:	60b9      	str	r1, [r7, #8]
 801633a:	4611      	mov	r1, r2
 801633c:	461a      	mov	r2, r3
 801633e:	460b      	mov	r3, r1
 8016340:	80fb      	strh	r3, [r7, #6]
 8016342:	4613      	mov	r3, r2
 8016344:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf* q = pbuf_skip(buf, offset, &target_offset);
 8016346:	f107 0210 	add.w	r2, r7, #16
 801634a:	88bb      	ldrh	r3, [r7, #4]
 801634c:	4619      	mov	r1, r3
 801634e:	68f8      	ldr	r0, [r7, #12]
 8016350:	f7ff ff48 	bl	80161e4 <pbuf_skip>
 8016354:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 8016356:	69fb      	ldr	r3, [r7, #28]
 8016358:	2b00      	cmp	r3, #0
 801635a:	d035      	beq.n	80163c8 <pbuf_take_at+0x98>
 801635c:	69fb      	ldr	r3, [r7, #28]
 801635e:	891b      	ldrh	r3, [r3, #8]
 8016360:	461a      	mov	r2, r3
 8016362:	8a3b      	ldrh	r3, [r7, #16]
 8016364:	4619      	mov	r1, r3
 8016366:	88fb      	ldrh	r3, [r7, #6]
 8016368:	440b      	add	r3, r1
 801636a:	429a      	cmp	r2, r3
 801636c:	db2c      	blt.n	80163c8 <pbuf_take_at+0x98>
    u16_t remaining_len = len;
 801636e:	88fb      	ldrh	r3, [r7, #6]
 8016370:	837b      	strh	r3, [r7, #26]
    const u8_t* src_ptr = (const u8_t*)dataptr;
 8016372:	68bb      	ldr	r3, [r7, #8]
 8016374:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len = LWIP_MIN(q->len - target_offset, len);
 8016376:	88fa      	ldrh	r2, [r7, #6]
 8016378:	69fb      	ldr	r3, [r7, #28]
 801637a:	895b      	ldrh	r3, [r3, #10]
 801637c:	4619      	mov	r1, r3
 801637e:	8a3b      	ldrh	r3, [r7, #16]
 8016380:	1acb      	subs	r3, r1, r3
 8016382:	4293      	cmp	r3, r2
 8016384:	bfa8      	it	ge
 8016386:	4613      	movge	r3, r2
 8016388:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t*)q->payload) + target_offset, dataptr, first_copy_len);
 801638a:	69fb      	ldr	r3, [r7, #28]
 801638c:	685b      	ldr	r3, [r3, #4]
 801638e:	8a3a      	ldrh	r2, [r7, #16]
 8016390:	4413      	add	r3, r2
 8016392:	8a7a      	ldrh	r2, [r7, #18]
 8016394:	68b9      	ldr	r1, [r7, #8]
 8016396:	4618      	mov	r0, r3
 8016398:	f00b ff71 	bl	802227e <memcpy>
    remaining_len -= first_copy_len;
 801639c:	8b7a      	ldrh	r2, [r7, #26]
 801639e:	8a7b      	ldrh	r3, [r7, #18]
 80163a0:	1ad3      	subs	r3, r2, r3
 80163a2:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 80163a4:	8a7b      	ldrh	r3, [r7, #18]
 80163a6:	697a      	ldr	r2, [r7, #20]
 80163a8:	4413      	add	r3, r2
 80163aa:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 80163ac:	8b7b      	ldrh	r3, [r7, #26]
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d008      	beq.n	80163c4 <pbuf_take_at+0x94>
      return pbuf_take(q->next, src_ptr, remaining_len);
 80163b2:	69fb      	ldr	r3, [r7, #28]
 80163b4:	681b      	ldr	r3, [r3, #0]
 80163b6:	8b7a      	ldrh	r2, [r7, #26]
 80163b8:	6979      	ldr	r1, [r7, #20]
 80163ba:	4618      	mov	r0, r3
 80163bc:	f7ff ff26 	bl	801620c <pbuf_take>
 80163c0:	4603      	mov	r3, r0
 80163c2:	e003      	b.n	80163cc <pbuf_take_at+0x9c>
    }
    return ERR_OK;
 80163c4:	2300      	movs	r3, #0
 80163c6:	e001      	b.n	80163cc <pbuf_take_at+0x9c>
  }
  return ERR_MEM;
 80163c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80163cc:	4618      	mov	r0, r3
 80163ce:	3720      	adds	r7, #32
 80163d0:	46bd      	mov	sp, r7
 80163d2:	bd80      	pop	{r7, pc}

080163d4 <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
 80163d4:	b480      	push	{r7}
 80163d6:	af00      	add	r7, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 80163d8:	bf00      	nop
 80163da:	46bd      	mov	sp, r7
 80163dc:	bc80      	pop	{r7}
 80163de:	4770      	bx	lr

080163e0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80163e0:	b480      	push	{r7}
 80163e2:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 80163e4:	bf00      	nop
 80163e6:	46bd      	mov	sp, r7
 80163e8:	bc80      	pop	{r7}
 80163ea:	4770      	bx	lr

080163ec <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80163ec:	b580      	push	{r7, lr}
 80163ee:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80163f0:	f000 ffaa 	bl	8017348 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80163f4:	4b07      	ldr	r3, [pc, #28]	@ (8016414 <tcp_tmr+0x28>)
 80163f6:	781b      	ldrb	r3, [r3, #0]
 80163f8:	3301      	adds	r3, #1
 80163fa:	b2da      	uxtb	r2, r3
 80163fc:	4b05      	ldr	r3, [pc, #20]	@ (8016414 <tcp_tmr+0x28>)
 80163fe:	701a      	strb	r2, [r3, #0]
 8016400:	4b04      	ldr	r3, [pc, #16]	@ (8016414 <tcp_tmr+0x28>)
 8016402:	781b      	ldrb	r3, [r3, #0]
 8016404:	f003 0301 	and.w	r3, r3, #1
 8016408:	2b00      	cmp	r3, #0
 801640a:	d001      	beq.n	8016410 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801640c:	f000 fcd8 	bl	8016dc0 <tcp_slowtmr>
  }
}
 8016410:	bf00      	nop
 8016412:	bd80      	pop	{r7, pc}
 8016414:	2000c035 	.word	0x2000c035

08016418 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8016418:	b480      	push	{r7}
 801641a:	b085      	sub	sp, #20
 801641c:	af00      	add	r7, sp, #0
 801641e:	6078      	str	r0, [r7, #4]
 8016420:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	60fb      	str	r3, [r7, #12]
 8016426:	e00a      	b.n	801643e <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8016428:	68fb      	ldr	r3, [r7, #12]
 801642a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801642c:	683a      	ldr	r2, [r7, #0]
 801642e:	429a      	cmp	r2, r3
 8016430:	d102      	bne.n	8016438 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	2200      	movs	r2, #0
 8016436:	679a      	str	r2, [r3, #120]	@ 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8016438:	68fb      	ldr	r3, [r7, #12]
 801643a:	68db      	ldr	r3, [r3, #12]
 801643c:	60fb      	str	r3, [r7, #12]
 801643e:	68fb      	ldr	r3, [r7, #12]
 8016440:	2b00      	cmp	r3, #0
 8016442:	d1f1      	bne.n	8016428 <tcp_remove_listener+0x10>
      }
   }
}
 8016444:	bf00      	nop
 8016446:	bf00      	nop
 8016448:	3714      	adds	r7, #20
 801644a:	46bd      	mov	sp, r7
 801644c:	bc80      	pop	{r7}
 801644e:	4770      	bx	lr

08016450 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8016450:	b580      	push	{r7, lr}
 8016452:	b084      	sub	sp, #16
 8016454:	af00      	add	r7, sp, #0
 8016456:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	2b00      	cmp	r3, #0
 801645c:	d105      	bne.n	801646a <tcp_listen_closed+0x1a>
 801645e:	4b13      	ldr	r3, [pc, #76]	@ (80164ac <tcp_listen_closed+0x5c>)
 8016460:	22c0      	movs	r2, #192	@ 0xc0
 8016462:	4913      	ldr	r1, [pc, #76]	@ (80164b0 <tcp_listen_closed+0x60>)
 8016464:	4813      	ldr	r0, [pc, #76]	@ (80164b4 <tcp_listen_closed+0x64>)
 8016466:	f00b fc0f 	bl	8021c88 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	7d1b      	ldrb	r3, [r3, #20]
 801646e:	2b01      	cmp	r3, #1
 8016470:	d005      	beq.n	801647e <tcp_listen_closed+0x2e>
 8016472:	4b0e      	ldr	r3, [pc, #56]	@ (80164ac <tcp_listen_closed+0x5c>)
 8016474:	22c1      	movs	r2, #193	@ 0xc1
 8016476:	4910      	ldr	r1, [pc, #64]	@ (80164b8 <tcp_listen_closed+0x68>)
 8016478:	480e      	ldr	r0, [pc, #56]	@ (80164b4 <tcp_listen_closed+0x64>)
 801647a:	f00b fc05 	bl	8021c88 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801647e:	2301      	movs	r3, #1
 8016480:	60fb      	str	r3, [r7, #12]
 8016482:	e00b      	b.n	801649c <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8016484:	4a0d      	ldr	r2, [pc, #52]	@ (80164bc <tcp_listen_closed+0x6c>)
 8016486:	68fb      	ldr	r3, [r7, #12]
 8016488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	6879      	ldr	r1, [r7, #4]
 8016490:	4618      	mov	r0, r3
 8016492:	f7ff ffc1 	bl	8016418 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	3301      	adds	r3, #1
 801649a:	60fb      	str	r3, [r7, #12]
 801649c:	68fb      	ldr	r3, [r7, #12]
 801649e:	2b03      	cmp	r3, #3
 80164a0:	d9f0      	bls.n	8016484 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80164a2:	bf00      	nop
 80164a4:	bf00      	nop
 80164a6:	3710      	adds	r7, #16
 80164a8:	46bd      	mov	sp, r7
 80164aa:	bd80      	pop	{r7, pc}
 80164ac:	080260ac 	.word	0x080260ac
 80164b0:	080260dc 	.word	0x080260dc
 80164b4:	080260e8 	.word	0x080260e8
 80164b8:	08026110 	.word	0x08026110
 80164bc:	08030cbc 	.word	0x08030cbc

080164c0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80164c0:	b5b0      	push	{r4, r5, r7, lr}
 80164c2:	b086      	sub	sp, #24
 80164c4:	af02      	add	r7, sp, #8
 80164c6:	6078      	str	r0, [r7, #4]
 80164c8:	460b      	mov	r3, r1
 80164ca:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80164cc:	78fb      	ldrb	r3, [r7, #3]
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d075      	beq.n	80165be <tcp_close_shutdown+0xfe>
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	7d1b      	ldrb	r3, [r3, #20]
 80164d6:	2b04      	cmp	r3, #4
 80164d8:	d003      	beq.n	80164e2 <tcp_close_shutdown+0x22>
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	7d1b      	ldrb	r3, [r3, #20]
 80164de:	2b07      	cmp	r3, #7
 80164e0:	d16d      	bne.n	80165be <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d104      	bne.n	80164f4 <tcp_close_shutdown+0x34>
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80164ee:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80164f2:	d064      	beq.n	80165be <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	7e9b      	ldrb	r3, [r3, #26]
 80164f8:	f003 0310 	and.w	r3, r3, #16
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d106      	bne.n	801650e <tcp_close_shutdown+0x4e>
 8016500:	4b5e      	ldr	r3, [pc, #376]	@ (801667c <tcp_close_shutdown+0x1bc>)
 8016502:	f240 120f 	movw	r2, #271	@ 0x10f
 8016506:	495e      	ldr	r1, [pc, #376]	@ (8016680 <tcp_close_shutdown+0x1c0>)
 8016508:	485e      	ldr	r0, [pc, #376]	@ (8016684 <tcp_close_shutdown+0x1c4>)
 801650a:	f00b fbbd 	bl	8021c88 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8016516:	687c      	ldr	r4, [r7, #4]
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	1d1d      	adds	r5, r3, #4
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	8adb      	ldrh	r3, [r3, #22]
 8016520:	687a      	ldr	r2, [r7, #4]
 8016522:	8b12      	ldrh	r2, [r2, #24]
 8016524:	9201      	str	r2, [sp, #4]
 8016526:	9300      	str	r3, [sp, #0]
 8016528:	462b      	mov	r3, r5
 801652a:	4622      	mov	r2, r4
 801652c:	f004 fffc 	bl	801b528 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8016530:	6878      	ldr	r0, [r7, #4]
 8016532:	f001 fa73 	bl	8017a1c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8016536:	4b54      	ldr	r3, [pc, #336]	@ (8016688 <tcp_close_shutdown+0x1c8>)
 8016538:	681b      	ldr	r3, [r3, #0]
 801653a:	687a      	ldr	r2, [r7, #4]
 801653c:	429a      	cmp	r2, r3
 801653e:	d105      	bne.n	801654c <tcp_close_shutdown+0x8c>
 8016540:	4b51      	ldr	r3, [pc, #324]	@ (8016688 <tcp_close_shutdown+0x1c8>)
 8016542:	681b      	ldr	r3, [r3, #0]
 8016544:	68db      	ldr	r3, [r3, #12]
 8016546:	4a50      	ldr	r2, [pc, #320]	@ (8016688 <tcp_close_shutdown+0x1c8>)
 8016548:	6013      	str	r3, [r2, #0]
 801654a:	e013      	b.n	8016574 <tcp_close_shutdown+0xb4>
 801654c:	4b4e      	ldr	r3, [pc, #312]	@ (8016688 <tcp_close_shutdown+0x1c8>)
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	60fb      	str	r3, [r7, #12]
 8016552:	e00c      	b.n	801656e <tcp_close_shutdown+0xae>
 8016554:	68fb      	ldr	r3, [r7, #12]
 8016556:	68db      	ldr	r3, [r3, #12]
 8016558:	687a      	ldr	r2, [r7, #4]
 801655a:	429a      	cmp	r2, r3
 801655c:	d104      	bne.n	8016568 <tcp_close_shutdown+0xa8>
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	68da      	ldr	r2, [r3, #12]
 8016562:	68fb      	ldr	r3, [r7, #12]
 8016564:	60da      	str	r2, [r3, #12]
 8016566:	e005      	b.n	8016574 <tcp_close_shutdown+0xb4>
 8016568:	68fb      	ldr	r3, [r7, #12]
 801656a:	68db      	ldr	r3, [r3, #12]
 801656c:	60fb      	str	r3, [r7, #12]
 801656e:	68fb      	ldr	r3, [r7, #12]
 8016570:	2b00      	cmp	r3, #0
 8016572:	d1ef      	bne.n	8016554 <tcp_close_shutdown+0x94>
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	2200      	movs	r2, #0
 8016578:	60da      	str	r2, [r3, #12]
 801657a:	4b44      	ldr	r3, [pc, #272]	@ (801668c <tcp_close_shutdown+0x1cc>)
 801657c:	2201      	movs	r2, #1
 801657e:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	7d1b      	ldrb	r3, [r3, #20]
 8016584:	2b04      	cmp	r3, #4
 8016586:	d10c      	bne.n	80165a2 <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	220a      	movs	r2, #10
 801658c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801658e:	4b40      	ldr	r3, [pc, #256]	@ (8016690 <tcp_close_shutdown+0x1d0>)
 8016590:	681a      	ldr	r2, [r3, #0]
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	60da      	str	r2, [r3, #12]
 8016596:	4a3e      	ldr	r2, [pc, #248]	@ (8016690 <tcp_close_shutdown+0x1d0>)
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	6013      	str	r3, [r2, #0]
 801659c:	f005 fa3c 	bl	801ba18 <tcp_timer_needed>
 80165a0:	e00b      	b.n	80165ba <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 80165a2:	4b3c      	ldr	r3, [pc, #240]	@ (8016694 <tcp_close_shutdown+0x1d4>)
 80165a4:	681b      	ldr	r3, [r3, #0]
 80165a6:	687a      	ldr	r2, [r7, #4]
 80165a8:	429a      	cmp	r2, r3
 80165aa:	d102      	bne.n	80165b2 <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 80165ac:	f003 fe12 	bl	801a1d4 <tcp_trigger_input_pcb_close>
 80165b0:	e003      	b.n	80165ba <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 80165b2:	6879      	ldr	r1, [r7, #4]
 80165b4:	2001      	movs	r0, #1
 80165b6:	f7fe fe19 	bl	80151ec <memp_free>
        }
      }
      return ERR_OK;
 80165ba:	2300      	movs	r3, #0
 80165bc:	e05a      	b.n	8016674 <tcp_close_shutdown+0x1b4>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	7d1b      	ldrb	r3, [r3, #20]
 80165c2:	2b02      	cmp	r3, #2
 80165c4:	d03d      	beq.n	8016642 <tcp_close_shutdown+0x182>
 80165c6:	2b02      	cmp	r3, #2
 80165c8:	dc4e      	bgt.n	8016668 <tcp_close_shutdown+0x1a8>
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d002      	beq.n	80165d4 <tcp_close_shutdown+0x114>
 80165ce:	2b01      	cmp	r3, #1
 80165d0:	d02b      	beq.n	801662a <tcp_close_shutdown+0x16a>
 80165d2:	e049      	b.n	8016668 <tcp_close_shutdown+0x1a8>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	8adb      	ldrh	r3, [r3, #22]
 80165d8:	2b00      	cmp	r3, #0
 80165da:	d021      	beq.n	8016620 <tcp_close_shutdown+0x160>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80165dc:	4b2e      	ldr	r3, [pc, #184]	@ (8016698 <tcp_close_shutdown+0x1d8>)
 80165de:	681b      	ldr	r3, [r3, #0]
 80165e0:	687a      	ldr	r2, [r7, #4]
 80165e2:	429a      	cmp	r2, r3
 80165e4:	d105      	bne.n	80165f2 <tcp_close_shutdown+0x132>
 80165e6:	4b2c      	ldr	r3, [pc, #176]	@ (8016698 <tcp_close_shutdown+0x1d8>)
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	68db      	ldr	r3, [r3, #12]
 80165ec:	4a2a      	ldr	r2, [pc, #168]	@ (8016698 <tcp_close_shutdown+0x1d8>)
 80165ee:	6013      	str	r3, [r2, #0]
 80165f0:	e013      	b.n	801661a <tcp_close_shutdown+0x15a>
 80165f2:	4b29      	ldr	r3, [pc, #164]	@ (8016698 <tcp_close_shutdown+0x1d8>)
 80165f4:	681b      	ldr	r3, [r3, #0]
 80165f6:	60bb      	str	r3, [r7, #8]
 80165f8:	e00c      	b.n	8016614 <tcp_close_shutdown+0x154>
 80165fa:	68bb      	ldr	r3, [r7, #8]
 80165fc:	68db      	ldr	r3, [r3, #12]
 80165fe:	687a      	ldr	r2, [r7, #4]
 8016600:	429a      	cmp	r2, r3
 8016602:	d104      	bne.n	801660e <tcp_close_shutdown+0x14e>
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	68da      	ldr	r2, [r3, #12]
 8016608:	68bb      	ldr	r3, [r7, #8]
 801660a:	60da      	str	r2, [r3, #12]
 801660c:	e005      	b.n	801661a <tcp_close_shutdown+0x15a>
 801660e:	68bb      	ldr	r3, [r7, #8]
 8016610:	68db      	ldr	r3, [r3, #12]
 8016612:	60bb      	str	r3, [r7, #8]
 8016614:	68bb      	ldr	r3, [r7, #8]
 8016616:	2b00      	cmp	r3, #0
 8016618:	d1ef      	bne.n	80165fa <tcp_close_shutdown+0x13a>
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	2200      	movs	r2, #0
 801661e:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8016620:	6879      	ldr	r1, [r7, #4]
 8016622:	2001      	movs	r0, #1
 8016624:	f7fe fde2 	bl	80151ec <memp_free>
    break;
 8016628:	e023      	b.n	8016672 <tcp_close_shutdown+0x1b2>
  case LISTEN:
    tcp_listen_closed(pcb);
 801662a:	6878      	ldr	r0, [r7, #4]
 801662c:	f7ff ff10 	bl	8016450 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8016630:	6879      	ldr	r1, [r7, #4]
 8016632:	481a      	ldr	r0, [pc, #104]	@ (801669c <tcp_close_shutdown+0x1dc>)
 8016634:	f001 fa34 	bl	8017aa0 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8016638:	6879      	ldr	r1, [r7, #4]
 801663a:	2002      	movs	r0, #2
 801663c:	f7fe fdd6 	bl	80151ec <memp_free>
    break;
 8016640:	e017      	b.n	8016672 <tcp_close_shutdown+0x1b2>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8016642:	6879      	ldr	r1, [r7, #4]
 8016644:	4810      	ldr	r0, [pc, #64]	@ (8016688 <tcp_close_shutdown+0x1c8>)
 8016646:	f001 fa2b 	bl	8017aa0 <tcp_pcb_remove>
 801664a:	4b10      	ldr	r3, [pc, #64]	@ (801668c <tcp_close_shutdown+0x1cc>)
 801664c:	2201      	movs	r2, #1
 801664e:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8016650:	6879      	ldr	r1, [r7, #4]
 8016652:	2001      	movs	r0, #1
 8016654:	f7fe fdca 	bl	80151ec <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
 8016658:	4b11      	ldr	r3, [pc, #68]	@ (80166a0 <tcp_close_shutdown+0x1e0>)
 801665a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 801665e:	3301      	adds	r3, #1
 8016660:	4a0f      	ldr	r2, [pc, #60]	@ (80166a0 <tcp_close_shutdown+0x1e0>)
 8016662:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
    break;
 8016666:	e004      	b.n	8016672 <tcp_close_shutdown+0x1b2>
  default:
    return tcp_close_shutdown_fin(pcb);
 8016668:	6878      	ldr	r0, [r7, #4]
 801666a:	f000 f81b 	bl	80166a4 <tcp_close_shutdown_fin>
 801666e:	4603      	mov	r3, r0
 8016670:	e000      	b.n	8016674 <tcp_close_shutdown+0x1b4>
  }
  return ERR_OK;
 8016672:	2300      	movs	r3, #0
}
 8016674:	4618      	mov	r0, r3
 8016676:	3710      	adds	r7, #16
 8016678:	46bd      	mov	sp, r7
 801667a:	bdb0      	pop	{r4, r5, r7, pc}
 801667c:	080260ac 	.word	0x080260ac
 8016680:	08026128 	.word	0x08026128
 8016684:	080260e8 	.word	0x080260e8
 8016688:	2000c02c 	.word	0x2000c02c
 801668c:	2000c034 	.word	0x2000c034
 8016690:	2000c030 	.word	0x2000c030
 8016694:	2000c06c 	.word	0x2000c06c
 8016698:	2000c024 	.word	0x2000c024
 801669c:	2000c028 	.word	0x2000c028
 80166a0:	2000be88 	.word	0x2000be88

080166a4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80166a4:	b580      	push	{r7, lr}
 80166a6:	b084      	sub	sp, #16
 80166a8:	af00      	add	r7, sp, #0
 80166aa:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	d106      	bne.n	80166c0 <tcp_close_shutdown_fin+0x1c>
 80166b2:	4b38      	ldr	r3, [pc, #224]	@ (8016794 <tcp_close_shutdown_fin+0xf0>)
 80166b4:	f240 124d 	movw	r2, #333	@ 0x14d
 80166b8:	4937      	ldr	r1, [pc, #220]	@ (8016798 <tcp_close_shutdown_fin+0xf4>)
 80166ba:	4838      	ldr	r0, [pc, #224]	@ (801679c <tcp_close_shutdown_fin+0xf8>)
 80166bc:	f00b fae4 	bl	8021c88 <iprintf>

  switch (pcb->state) {
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	7d1b      	ldrb	r3, [r3, #20]
 80166c4:	2b07      	cmp	r3, #7
 80166c6:	d02e      	beq.n	8016726 <tcp_close_shutdown_fin+0x82>
 80166c8:	2b07      	cmp	r3, #7
 80166ca:	dc40      	bgt.n	801674e <tcp_close_shutdown_fin+0xaa>
 80166cc:	2b03      	cmp	r3, #3
 80166ce:	d002      	beq.n	80166d6 <tcp_close_shutdown_fin+0x32>
 80166d0:	2b04      	cmp	r3, #4
 80166d2:	d014      	beq.n	80166fe <tcp_close_shutdown_fin+0x5a>
 80166d4:	e03b      	b.n	801674e <tcp_close_shutdown_fin+0xaa>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 80166d6:	6878      	ldr	r0, [r7, #4]
 80166d8:	f003 fe06 	bl	801a2e8 <tcp_send_fin>
 80166dc:	4603      	mov	r3, r0
 80166de:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80166e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d134      	bne.n	8016752 <tcp_close_shutdown_fin+0xae>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
 80166e8:	4b2d      	ldr	r3, [pc, #180]	@ (80167a0 <tcp_close_shutdown_fin+0xfc>)
 80166ea:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80166ee:	3301      	adds	r3, #1
 80166f0:	4a2b      	ldr	r2, [pc, #172]	@ (80167a0 <tcp_close_shutdown_fin+0xfc>)
 80166f2:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
      pcb->state = FIN_WAIT_1;
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	2205      	movs	r2, #5
 80166fa:	751a      	strb	r2, [r3, #20]
    }
    break;
 80166fc:	e029      	b.n	8016752 <tcp_close_shutdown_fin+0xae>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 80166fe:	6878      	ldr	r0, [r7, #4]
 8016700:	f003 fdf2 	bl	801a2e8 <tcp_send_fin>
 8016704:	4603      	mov	r3, r0
 8016706:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8016708:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801670c:	2b00      	cmp	r3, #0
 801670e:	d122      	bne.n	8016756 <tcp_close_shutdown_fin+0xb2>
      MIB2_STATS_INC(mib2.tcpestabresets);
 8016710:	4b23      	ldr	r3, [pc, #140]	@ (80167a0 <tcp_close_shutdown_fin+0xfc>)
 8016712:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8016716:	3301      	adds	r3, #1
 8016718:	4a21      	ldr	r2, [pc, #132]	@ (80167a0 <tcp_close_shutdown_fin+0xfc>)
 801671a:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
      pcb->state = FIN_WAIT_1;
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	2205      	movs	r2, #5
 8016722:	751a      	strb	r2, [r3, #20]
    }
    break;
 8016724:	e017      	b.n	8016756 <tcp_close_shutdown_fin+0xb2>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8016726:	6878      	ldr	r0, [r7, #4]
 8016728:	f003 fdde 	bl	801a2e8 <tcp_send_fin>
 801672c:	4603      	mov	r3, r0
 801672e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8016730:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016734:	2b00      	cmp	r3, #0
 8016736:	d110      	bne.n	801675a <tcp_close_shutdown_fin+0xb6>
      MIB2_STATS_INC(mib2.tcpestabresets);
 8016738:	4b19      	ldr	r3, [pc, #100]	@ (80167a0 <tcp_close_shutdown_fin+0xfc>)
 801673a:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 801673e:	3301      	adds	r3, #1
 8016740:	4a17      	ldr	r2, [pc, #92]	@ (80167a0 <tcp_close_shutdown_fin+0xfc>)
 8016742:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
      pcb->state = LAST_ACK;
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	2209      	movs	r2, #9
 801674a:	751a      	strb	r2, [r3, #20]
    }
    break;
 801674c:	e005      	b.n	801675a <tcp_close_shutdown_fin+0xb6>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 801674e:	2300      	movs	r3, #0
 8016750:	e01c      	b.n	801678c <tcp_close_shutdown_fin+0xe8>
    break;
 8016752:	bf00      	nop
 8016754:	e002      	b.n	801675c <tcp_close_shutdown_fin+0xb8>
    break;
 8016756:	bf00      	nop
 8016758:	e000      	b.n	801675c <tcp_close_shutdown_fin+0xb8>
    break;
 801675a:	bf00      	nop
  }

  if (err == ERR_OK) {
 801675c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016760:	2b00      	cmp	r3, #0
 8016762:	d103      	bne.n	801676c <tcp_close_shutdown_fin+0xc8>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8016764:	6878      	ldr	r0, [r7, #4]
 8016766:	f004 fc47 	bl	801aff8 <tcp_output>
 801676a:	e00d      	b.n	8016788 <tcp_close_shutdown_fin+0xe4>
  } else if (err == ERR_MEM) {
 801676c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016774:	d108      	bne.n	8016788 <tcp_close_shutdown_fin+0xe4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	7e9b      	ldrb	r3, [r3, #26]
 801677a:	f043 0308 	orr.w	r3, r3, #8
 801677e:	b2da      	uxtb	r2, r3
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8016784:	2300      	movs	r3, #0
 8016786:	e001      	b.n	801678c <tcp_close_shutdown_fin+0xe8>
  }
  return err;
 8016788:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801678c:	4618      	mov	r0, r3
 801678e:	3710      	adds	r7, #16
 8016790:	46bd      	mov	sp, r7
 8016792:	bd80      	pop	{r7, pc}
 8016794:	080260ac 	.word	0x080260ac
 8016798:	080260dc 	.word	0x080260dc
 801679c:	080260e8 	.word	0x080260e8
 80167a0:	2000be88 	.word	0x2000be88

080167a4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80167a4:	b580      	push	{r7, lr}
 80167a6:	b082      	sub	sp, #8
 80167a8:	af00      	add	r7, sp, #0
 80167aa:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	7d1b      	ldrb	r3, [r3, #20]
 80167b0:	2b01      	cmp	r3, #1
 80167b2:	d006      	beq.n	80167c2 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	7e9b      	ldrb	r3, [r3, #26]
 80167b8:	f043 0310 	orr.w	r3, r3, #16
 80167bc:	b2da      	uxtb	r2, r3
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80167c2:	2101      	movs	r1, #1
 80167c4:	6878      	ldr	r0, [r7, #4]
 80167c6:	f7ff fe7b 	bl	80164c0 <tcp_close_shutdown>
 80167ca:	4603      	mov	r3, r0
}
 80167cc:	4618      	mov	r0, r3
 80167ce:	3708      	adds	r7, #8
 80167d0:	46bd      	mov	sp, r7
 80167d2:	bd80      	pop	{r7, pc}

080167d4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80167d4:	b580      	push	{r7, lr}
 80167d6:	b08c      	sub	sp, #48	@ 0x30
 80167d8:	af02      	add	r7, sp, #8
 80167da:	6078      	str	r0, [r7, #4]
 80167dc:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	7d1b      	ldrb	r3, [r3, #20]
 80167e2:	2b01      	cmp	r3, #1
 80167e4:	d106      	bne.n	80167f4 <tcp_abandon+0x20>
 80167e6:	4b4d      	ldr	r3, [pc, #308]	@ (801691c <tcp_abandon+0x148>)
 80167e8:	f240 12df 	movw	r2, #479	@ 0x1df
 80167ec:	494c      	ldr	r1, [pc, #304]	@ (8016920 <tcp_abandon+0x14c>)
 80167ee:	484d      	ldr	r0, [pc, #308]	@ (8016924 <tcp_abandon+0x150>)
 80167f0:	f00b fa4a 	bl	8021c88 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	7d1b      	ldrb	r3, [r3, #20]
 80167f8:	2b0a      	cmp	r3, #10
 80167fa:	d108      	bne.n	801680e <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80167fc:	6879      	ldr	r1, [r7, #4]
 80167fe:	484a      	ldr	r0, [pc, #296]	@ (8016928 <tcp_abandon+0x154>)
 8016800:	f001 f94e 	bl	8017aa0 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8016804:	6879      	ldr	r1, [r7, #4]
 8016806:	2001      	movs	r0, #1
 8016808:	f7fe fcf0 	bl	80151ec <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 801680c:	e081      	b.n	8016912 <tcp_abandon+0x13e>
    int send_rst = 0;
 801680e:	2300      	movs	r3, #0
 8016810:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8016812:	2300      	movs	r3, #0
 8016814:	847b      	strh	r3, [r7, #34]	@ 0x22
    seqno = pcb->snd_nxt;
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801681a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016820:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016828:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	691b      	ldr	r3, [r3, #16]
 801682e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	7d1b      	ldrb	r3, [r3, #20]
 8016834:	2b00      	cmp	r3, #0
 8016836:	d126      	bne.n	8016886 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	8adb      	ldrh	r3, [r3, #22]
 801683c:	2b00      	cmp	r3, #0
 801683e:	d02e      	beq.n	801689e <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8016840:	4b3a      	ldr	r3, [pc, #232]	@ (801692c <tcp_abandon+0x158>)
 8016842:	681b      	ldr	r3, [r3, #0]
 8016844:	687a      	ldr	r2, [r7, #4]
 8016846:	429a      	cmp	r2, r3
 8016848:	d105      	bne.n	8016856 <tcp_abandon+0x82>
 801684a:	4b38      	ldr	r3, [pc, #224]	@ (801692c <tcp_abandon+0x158>)
 801684c:	681b      	ldr	r3, [r3, #0]
 801684e:	68db      	ldr	r3, [r3, #12]
 8016850:	4a36      	ldr	r2, [pc, #216]	@ (801692c <tcp_abandon+0x158>)
 8016852:	6013      	str	r3, [r2, #0]
 8016854:	e013      	b.n	801687e <tcp_abandon+0xaa>
 8016856:	4b35      	ldr	r3, [pc, #212]	@ (801692c <tcp_abandon+0x158>)
 8016858:	681b      	ldr	r3, [r3, #0]
 801685a:	61fb      	str	r3, [r7, #28]
 801685c:	e00c      	b.n	8016878 <tcp_abandon+0xa4>
 801685e:	69fb      	ldr	r3, [r7, #28]
 8016860:	68db      	ldr	r3, [r3, #12]
 8016862:	687a      	ldr	r2, [r7, #4]
 8016864:	429a      	cmp	r2, r3
 8016866:	d104      	bne.n	8016872 <tcp_abandon+0x9e>
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	68da      	ldr	r2, [r3, #12]
 801686c:	69fb      	ldr	r3, [r7, #28]
 801686e:	60da      	str	r2, [r3, #12]
 8016870:	e005      	b.n	801687e <tcp_abandon+0xaa>
 8016872:	69fb      	ldr	r3, [r7, #28]
 8016874:	68db      	ldr	r3, [r3, #12]
 8016876:	61fb      	str	r3, [r7, #28]
 8016878:	69fb      	ldr	r3, [r7, #28]
 801687a:	2b00      	cmp	r3, #0
 801687c:	d1ef      	bne.n	801685e <tcp_abandon+0x8a>
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	2200      	movs	r2, #0
 8016882:	60da      	str	r2, [r3, #12]
 8016884:	e00b      	b.n	801689e <tcp_abandon+0xca>
      send_rst = reset;
 8016886:	683b      	ldr	r3, [r7, #0]
 8016888:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	8adb      	ldrh	r3, [r3, #22]
 801688e:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8016890:	6879      	ldr	r1, [r7, #4]
 8016892:	4827      	ldr	r0, [pc, #156]	@ (8016930 <tcp_abandon+0x15c>)
 8016894:	f001 f904 	bl	8017aa0 <tcp_pcb_remove>
 8016898:	4b26      	ldr	r3, [pc, #152]	@ (8016934 <tcp_abandon+0x160>)
 801689a:	2201      	movs	r2, #1
 801689c:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d004      	beq.n	80168b0 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80168aa:	4618      	mov	r0, r3
 80168ac:	f000 fe19 	bl	80174e2 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d004      	beq.n	80168c2 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80168bc:	4618      	mov	r0, r3
 80168be:	f000 fe10 	bl	80174e2 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	d004      	beq.n	80168d4 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80168ce:	4618      	mov	r0, r3
 80168d0:	f000 fe07 	bl	80174e2 <tcp_segs_free>
    if (send_rst) {
 80168d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80168d6:	2b00      	cmp	r3, #0
 80168d8:	d00c      	beq.n	80168f4 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80168da:	687a      	ldr	r2, [r7, #4]
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	1d19      	adds	r1, r3, #4
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	8b1b      	ldrh	r3, [r3, #24]
 80168e4:	9301      	str	r3, [sp, #4]
 80168e6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80168e8:	9300      	str	r3, [sp, #0]
 80168ea:	460b      	mov	r3, r1
 80168ec:	6979      	ldr	r1, [r7, #20]
 80168ee:	69b8      	ldr	r0, [r7, #24]
 80168f0:	f004 fe1a 	bl	801b528 <tcp_rst>
    last_state = pcb->state;
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	7d1b      	ldrb	r3, [r3, #20]
 80168f8:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 80168fa:	6879      	ldr	r1, [r7, #4]
 80168fc:	2001      	movs	r0, #1
 80168fe:	f7fe fc75 	bl	80151ec <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8016902:	693b      	ldr	r3, [r7, #16]
 8016904:	2b00      	cmp	r3, #0
 8016906:	d004      	beq.n	8016912 <tcp_abandon+0x13e>
 8016908:	693b      	ldr	r3, [r7, #16]
 801690a:	f06f 010c 	mvn.w	r1, #12
 801690e:	68f8      	ldr	r0, [r7, #12]
 8016910:	4798      	blx	r3
}
 8016912:	bf00      	nop
 8016914:	3728      	adds	r7, #40	@ 0x28
 8016916:	46bd      	mov	sp, r7
 8016918:	bd80      	pop	{r7, pc}
 801691a:	bf00      	nop
 801691c:	080260ac 	.word	0x080260ac
 8016920:	08026144 	.word	0x08026144
 8016924:	080260e8 	.word	0x080260e8
 8016928:	2000c030 	.word	0x2000c030
 801692c:	2000c024 	.word	0x2000c024
 8016930:	2000c02c 	.word	0x2000c02c
 8016934:	2000c034 	.word	0x2000c034

08016938 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8016938:	b580      	push	{r7, lr}
 801693a:	b082      	sub	sp, #8
 801693c:	af00      	add	r7, sp, #0
 801693e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8016940:	2101      	movs	r1, #1
 8016942:	6878      	ldr	r0, [r7, #4]
 8016944:	f7ff ff46 	bl	80167d4 <tcp_abandon>
}
 8016948:	bf00      	nop
 801694a:	3708      	adds	r7, #8
 801694c:	46bd      	mov	sp, r7
 801694e:	bd80      	pop	{r7, pc}

08016950 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016950:	b580      	push	{r7, lr}
 8016952:	b088      	sub	sp, #32
 8016954:	af00      	add	r7, sp, #0
 8016956:	60f8      	str	r0, [r7, #12]
 8016958:	60b9      	str	r1, [r7, #8]
 801695a:	4613      	mov	r3, r2
 801695c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801695e:	2304      	movs	r3, #4
 8016960:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8016962:	68bb      	ldr	r3, [r7, #8]
 8016964:	2b00      	cmp	r3, #0
 8016966:	d101      	bne.n	801696c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8016968:	4b3c      	ldr	r3, [pc, #240]	@ (8016a5c <tcp_bind+0x10c>)
 801696a:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 801696c:	68fb      	ldr	r3, [r7, #12]
 801696e:	2b00      	cmp	r3, #0
 8016970:	d002      	beq.n	8016978 <tcp_bind+0x28>
 8016972:	68bb      	ldr	r3, [r7, #8]
 8016974:	2b00      	cmp	r3, #0
 8016976:	d102      	bne.n	801697e <tcp_bind+0x2e>
    return ERR_VAL;
 8016978:	f06f 0305 	mvn.w	r3, #5
 801697c:	e06a      	b.n	8016a54 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801697e:	68fb      	ldr	r3, [r7, #12]
 8016980:	7d1b      	ldrb	r3, [r3, #20]
 8016982:	2b00      	cmp	r3, #0
 8016984:	d009      	beq.n	801699a <tcp_bind+0x4a>
 8016986:	4b36      	ldr	r3, [pc, #216]	@ (8016a60 <tcp_bind+0x110>)
 8016988:	f44f 7211 	mov.w	r2, #580	@ 0x244
 801698c:	4935      	ldr	r1, [pc, #212]	@ (8016a64 <tcp_bind+0x114>)
 801698e:	4836      	ldr	r0, [pc, #216]	@ (8016a68 <tcp_bind+0x118>)
 8016990:	f00b f97a 	bl	8021c88 <iprintf>
 8016994:	f06f 0305 	mvn.w	r3, #5
 8016998:	e05c      	b.n	8016a54 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 801699a:	88fb      	ldrh	r3, [r7, #6]
 801699c:	2b00      	cmp	r3, #0
 801699e:	d109      	bne.n	80169b4 <tcp_bind+0x64>
    port = tcp_new_port();
 80169a0:	f000 f9ca 	bl	8016d38 <tcp_new_port>
 80169a4:	4603      	mov	r3, r0
 80169a6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80169a8:	88fb      	ldrh	r3, [r7, #6]
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	d135      	bne.n	8016a1a <tcp_bind+0xca>
      return ERR_BUF;
 80169ae:	f06f 0301 	mvn.w	r3, #1
 80169b2:	e04f      	b.n	8016a54 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80169b4:	2300      	movs	r3, #0
 80169b6:	61fb      	str	r3, [r7, #28]
 80169b8:	e02b      	b.n	8016a12 <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80169ba:	4a2c      	ldr	r2, [pc, #176]	@ (8016a6c <tcp_bind+0x11c>)
 80169bc:	69fb      	ldr	r3, [r7, #28]
 80169be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	61bb      	str	r3, [r7, #24]
 80169c6:	e01e      	b.n	8016a06 <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 80169c8:	69bb      	ldr	r3, [r7, #24]
 80169ca:	8adb      	ldrh	r3, [r3, #22]
 80169cc:	88fa      	ldrh	r2, [r7, #6]
 80169ce:	429a      	cmp	r2, r3
 80169d0:	d116      	bne.n	8016a00 <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80169d2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d010      	beq.n	80169fa <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 80169d8:	69bb      	ldr	r3, [r7, #24]
 80169da:	681b      	ldr	r3, [r3, #0]
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d00c      	beq.n	80169fa <tcp_bind+0xaa>
 80169e0:	68bb      	ldr	r3, [r7, #8]
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	d009      	beq.n	80169fa <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 80169e6:	68bb      	ldr	r3, [r7, #8]
 80169e8:	681b      	ldr	r3, [r3, #0]
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	d005      	beq.n	80169fa <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80169ee:	69bb      	ldr	r3, [r7, #24]
 80169f0:	681a      	ldr	r2, [r3, #0]
 80169f2:	68bb      	ldr	r3, [r7, #8]
 80169f4:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80169f6:	429a      	cmp	r2, r3
 80169f8:	d102      	bne.n	8016a00 <tcp_bind+0xb0>
              return ERR_USE;
 80169fa:	f06f 0307 	mvn.w	r3, #7
 80169fe:	e029      	b.n	8016a54 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8016a00:	69bb      	ldr	r3, [r7, #24]
 8016a02:	68db      	ldr	r3, [r3, #12]
 8016a04:	61bb      	str	r3, [r7, #24]
 8016a06:	69bb      	ldr	r3, [r7, #24]
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d1dd      	bne.n	80169c8 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 8016a0c:	69fb      	ldr	r3, [r7, #28]
 8016a0e:	3301      	adds	r3, #1
 8016a10:	61fb      	str	r3, [r7, #28]
 8016a12:	69fa      	ldr	r2, [r7, #28]
 8016a14:	697b      	ldr	r3, [r7, #20]
 8016a16:	429a      	cmp	r2, r3
 8016a18:	dbcf      	blt.n	80169ba <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 8016a1a:	68bb      	ldr	r3, [r7, #8]
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d00c      	beq.n	8016a3a <tcp_bind+0xea>
 8016a20:	68bb      	ldr	r3, [r7, #8]
 8016a22:	681b      	ldr	r3, [r3, #0]
 8016a24:	2b00      	cmp	r3, #0
 8016a26:	d008      	beq.n	8016a3a <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8016a28:	68bb      	ldr	r3, [r7, #8]
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	d002      	beq.n	8016a34 <tcp_bind+0xe4>
 8016a2e:	68bb      	ldr	r3, [r7, #8]
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	e000      	b.n	8016a36 <tcp_bind+0xe6>
 8016a34:	2300      	movs	r3, #0
 8016a36:	68fa      	ldr	r2, [r7, #12]
 8016a38:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8016a3a:	68fb      	ldr	r3, [r7, #12]
 8016a3c:	88fa      	ldrh	r2, [r7, #6]
 8016a3e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8016a40:	4b0b      	ldr	r3, [pc, #44]	@ (8016a70 <tcp_bind+0x120>)
 8016a42:	681a      	ldr	r2, [r3, #0]
 8016a44:	68fb      	ldr	r3, [r7, #12]
 8016a46:	60da      	str	r2, [r3, #12]
 8016a48:	4a09      	ldr	r2, [pc, #36]	@ (8016a70 <tcp_bind+0x120>)
 8016a4a:	68fb      	ldr	r3, [r7, #12]
 8016a4c:	6013      	str	r3, [r2, #0]
 8016a4e:	f004 ffe3 	bl	801ba18 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8016a52:	2300      	movs	r3, #0
}
 8016a54:	4618      	mov	r0, r3
 8016a56:	3720      	adds	r7, #32
 8016a58:	46bd      	mov	sp, r7
 8016a5a:	bd80      	pop	{r7, pc}
 8016a5c:	08030cf4 	.word	0x08030cf4
 8016a60:	080260ac 	.word	0x080260ac
 8016a64:	08026178 	.word	0x08026178
 8016a68:	080260e8 	.word	0x080260e8
 8016a6c:	08030cbc 	.word	0x08030cbc
 8016a70:	2000c024 	.word	0x2000c024

08016a74 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8016a74:	b580      	push	{r7, lr}
 8016a76:	b084      	sub	sp, #16
 8016a78:	af00      	add	r7, sp, #0
 8016a7a:	60f8      	str	r0, [r7, #12]
 8016a7c:	60b9      	str	r1, [r7, #8]
 8016a7e:	4613      	mov	r3, r2
 8016a80:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 8016a82:	68b8      	ldr	r0, [r7, #8]
 8016a84:	f7ff ff58 	bl	8016938 <tcp_abort>

  return ERR_ABRT;
 8016a88:	f06f 030c 	mvn.w	r3, #12
}
 8016a8c:	4618      	mov	r0, r3
 8016a8e:	3710      	adds	r7, #16
 8016a90:	46bd      	mov	sp, r7
 8016a92:	bd80      	pop	{r7, pc}

08016a94 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8016a94:	b580      	push	{r7, lr}
 8016a96:	b082      	sub	sp, #8
 8016a98:	af00      	add	r7, sp, #0
 8016a9a:	6078      	str	r0, [r7, #4]
 8016a9c:	460b      	mov	r3, r1
 8016a9e:	70fb      	strb	r3, [r7, #3]
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8016aa0:	78fb      	ldrb	r3, [r7, #3]
 8016aa2:	2200      	movs	r2, #0
 8016aa4:	4619      	mov	r1, r3
 8016aa6:	6878      	ldr	r0, [r7, #4]
 8016aa8:	f000 f806 	bl	8016ab8 <tcp_listen_with_backlog_and_err>
 8016aac:	4603      	mov	r3, r0
}
 8016aae:	4618      	mov	r0, r3
 8016ab0:	3708      	adds	r7, #8
 8016ab2:	46bd      	mov	sp, r7
 8016ab4:	bd80      	pop	{r7, pc}
	...

08016ab8 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8016ab8:	b580      	push	{r7, lr}
 8016aba:	b088      	sub	sp, #32
 8016abc:	af00      	add	r7, sp, #0
 8016abe:	60f8      	str	r0, [r7, #12]
 8016ac0:	460b      	mov	r3, r1
 8016ac2:	607a      	str	r2, [r7, #4]
 8016ac4:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8016ac6:	2300      	movs	r3, #0
 8016ac8:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8016aca:	68fb      	ldr	r3, [r7, #12]
 8016acc:	7d1b      	ldrb	r3, [r3, #20]
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d009      	beq.n	8016ae6 <tcp_listen_with_backlog_and_err+0x2e>
 8016ad2:	4b3f      	ldr	r3, [pc, #252]	@ (8016bd0 <tcp_listen_with_backlog_and_err+0x118>)
 8016ad4:	f44f 722d 	mov.w	r2, #692	@ 0x2b4
 8016ad8:	493e      	ldr	r1, [pc, #248]	@ (8016bd4 <tcp_listen_with_backlog_and_err+0x11c>)
 8016ada:	483f      	ldr	r0, [pc, #252]	@ (8016bd8 <tcp_listen_with_backlog_and_err+0x120>)
 8016adc:	f00b f8d4 	bl	8021c88 <iprintf>
 8016ae0:	23f1      	movs	r3, #241	@ 0xf1
 8016ae2:	76fb      	strb	r3, [r7, #27]
 8016ae4:	e069      	b.n	8016bba <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8016ae6:	68fb      	ldr	r3, [r7, #12]
 8016ae8:	7d1b      	ldrb	r3, [r3, #20]
 8016aea:	2b01      	cmp	r3, #1
 8016aec:	d104      	bne.n	8016af8 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 8016aee:	68fb      	ldr	r3, [r7, #12]
 8016af0:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8016af2:	23f7      	movs	r3, #247	@ 0xf7
 8016af4:	76fb      	strb	r3, [r7, #27]
    goto done;
 8016af6:	e060      	b.n	8016bba <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8016af8:	2002      	movs	r0, #2
 8016afa:	f7fe fb25 	bl	8015148 <memp_malloc>
 8016afe:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8016b00:	69fb      	ldr	r3, [r7, #28]
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d102      	bne.n	8016b0c <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 8016b06:	23ff      	movs	r3, #255	@ 0xff
 8016b08:	76fb      	strb	r3, [r7, #27]
    goto done;
 8016b0a:	e056      	b.n	8016bba <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8016b0c:	68fb      	ldr	r3, [r7, #12]
 8016b0e:	691a      	ldr	r2, [r3, #16]
 8016b10:	69fb      	ldr	r3, [r7, #28]
 8016b12:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8016b14:	68fb      	ldr	r3, [r7, #12]
 8016b16:	8ada      	ldrh	r2, [r3, #22]
 8016b18:	69fb      	ldr	r3, [r7, #28]
 8016b1a:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8016b1c:	69fb      	ldr	r3, [r7, #28]
 8016b1e:	2201      	movs	r2, #1
 8016b20:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8016b22:	68fb      	ldr	r3, [r7, #12]
 8016b24:	7d5a      	ldrb	r2, [r3, #21]
 8016b26:	69fb      	ldr	r3, [r7, #28]
 8016b28:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8016b2a:	68fb      	ldr	r3, [r7, #12]
 8016b2c:	7a1a      	ldrb	r2, [r3, #8]
 8016b2e:	69fb      	ldr	r3, [r7, #28]
 8016b30:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8016b32:	68fb      	ldr	r3, [r7, #12]
 8016b34:	7a9a      	ldrb	r2, [r3, #10]
 8016b36:	69fb      	ldr	r3, [r7, #28]
 8016b38:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 8016b3a:	68fb      	ldr	r3, [r7, #12]
 8016b3c:	7a5a      	ldrb	r2, [r3, #9]
 8016b3e:	69fb      	ldr	r3, [r7, #28]
 8016b40:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8016b42:	68fb      	ldr	r3, [r7, #12]
 8016b44:	681a      	ldr	r2, [r3, #0]
 8016b46:	69fb      	ldr	r3, [r7, #28]
 8016b48:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8016b4a:	68fb      	ldr	r3, [r7, #12]
 8016b4c:	8adb      	ldrh	r3, [r3, #22]
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d021      	beq.n	8016b96 <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8016b52:	4b22      	ldr	r3, [pc, #136]	@ (8016bdc <tcp_listen_with_backlog_and_err+0x124>)
 8016b54:	681b      	ldr	r3, [r3, #0]
 8016b56:	68fa      	ldr	r2, [r7, #12]
 8016b58:	429a      	cmp	r2, r3
 8016b5a:	d105      	bne.n	8016b68 <tcp_listen_with_backlog_and_err+0xb0>
 8016b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8016bdc <tcp_listen_with_backlog_and_err+0x124>)
 8016b5e:	681b      	ldr	r3, [r3, #0]
 8016b60:	68db      	ldr	r3, [r3, #12]
 8016b62:	4a1e      	ldr	r2, [pc, #120]	@ (8016bdc <tcp_listen_with_backlog_and_err+0x124>)
 8016b64:	6013      	str	r3, [r2, #0]
 8016b66:	e013      	b.n	8016b90 <tcp_listen_with_backlog_and_err+0xd8>
 8016b68:	4b1c      	ldr	r3, [pc, #112]	@ (8016bdc <tcp_listen_with_backlog_and_err+0x124>)
 8016b6a:	681b      	ldr	r3, [r3, #0]
 8016b6c:	617b      	str	r3, [r7, #20]
 8016b6e:	e00c      	b.n	8016b8a <tcp_listen_with_backlog_and_err+0xd2>
 8016b70:	697b      	ldr	r3, [r7, #20]
 8016b72:	68db      	ldr	r3, [r3, #12]
 8016b74:	68fa      	ldr	r2, [r7, #12]
 8016b76:	429a      	cmp	r2, r3
 8016b78:	d104      	bne.n	8016b84 <tcp_listen_with_backlog_and_err+0xcc>
 8016b7a:	68fb      	ldr	r3, [r7, #12]
 8016b7c:	68da      	ldr	r2, [r3, #12]
 8016b7e:	697b      	ldr	r3, [r7, #20]
 8016b80:	60da      	str	r2, [r3, #12]
 8016b82:	e005      	b.n	8016b90 <tcp_listen_with_backlog_and_err+0xd8>
 8016b84:	697b      	ldr	r3, [r7, #20]
 8016b86:	68db      	ldr	r3, [r3, #12]
 8016b88:	617b      	str	r3, [r7, #20]
 8016b8a:	697b      	ldr	r3, [r7, #20]
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d1ef      	bne.n	8016b70 <tcp_listen_with_backlog_and_err+0xb8>
 8016b90:	68fb      	ldr	r3, [r7, #12]
 8016b92:	2200      	movs	r2, #0
 8016b94:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 8016b96:	68f9      	ldr	r1, [r7, #12]
 8016b98:	2001      	movs	r0, #1
 8016b9a:	f7fe fb27 	bl	80151ec <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8016b9e:	69fb      	ldr	r3, [r7, #28]
 8016ba0:	4a0f      	ldr	r2, [pc, #60]	@ (8016be0 <tcp_listen_with_backlog_and_err+0x128>)
 8016ba2:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8016ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8016be4 <tcp_listen_with_backlog_and_err+0x12c>)
 8016ba6:	681a      	ldr	r2, [r3, #0]
 8016ba8:	69fb      	ldr	r3, [r7, #28]
 8016baa:	60da      	str	r2, [r3, #12]
 8016bac:	4a0d      	ldr	r2, [pc, #52]	@ (8016be4 <tcp_listen_with_backlog_and_err+0x12c>)
 8016bae:	69fb      	ldr	r3, [r7, #28]
 8016bb0:	6013      	str	r3, [r2, #0]
 8016bb2:	f004 ff31 	bl	801ba18 <tcp_timer_needed>
  res = ERR_OK;
 8016bb6:	2300      	movs	r3, #0
 8016bb8:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d002      	beq.n	8016bc6 <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	7efa      	ldrb	r2, [r7, #27]
 8016bc4:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8016bc6:	69fb      	ldr	r3, [r7, #28]
}
 8016bc8:	4618      	mov	r0, r3
 8016bca:	3720      	adds	r7, #32
 8016bcc:	46bd      	mov	sp, r7
 8016bce:	bd80      	pop	{r7, pc}
 8016bd0:	080260ac 	.word	0x080260ac
 8016bd4:	080261a0 	.word	0x080261a0
 8016bd8:	080260e8 	.word	0x080260e8
 8016bdc:	2000c024 	.word	0x2000c024
 8016be0:	08016a75 	.word	0x08016a75
 8016be4:	2000c028 	.word	0x2000c028

08016be8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8016be8:	b580      	push	{r7, lr}
 8016bea:	b084      	sub	sp, #16
 8016bec:	af00      	add	r7, sp, #0
 8016bee:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016bf4:	687a      	ldr	r2, [r7, #4]
 8016bf6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8016bf8:	4413      	add	r3, r2
 8016bfa:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016c00:	687a      	ldr	r2, [r7, #4]
 8016c02:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8016c04:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8016c08:	bf28      	it	cs
 8016c0a:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8016c0e:	b292      	uxth	r2, r2
 8016c10:	4413      	add	r3, r2
 8016c12:	68fa      	ldr	r2, [r7, #12]
 8016c14:	1ad3      	subs	r3, r2, r3
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	db08      	blt.n	8016c2c <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016c26:	68fa      	ldr	r2, [r7, #12]
 8016c28:	1ad3      	subs	r3, r2, r3
 8016c2a:	e020      	b.n	8016c6e <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016c34:	1ad3      	subs	r3, r2, r3
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	dd03      	ble.n	8016c42 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	2200      	movs	r2, #0
 8016c3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8016c40:	e014      	b.n	8016c6c <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016c4a:	1ad3      	subs	r3, r2, r3
 8016c4c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8016c4e:	68bb      	ldr	r3, [r7, #8]
 8016c50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016c54:	d306      	bcc.n	8016c64 <tcp_update_rcv_ann_wnd+0x7c>
 8016c56:	4b08      	ldr	r3, [pc, #32]	@ (8016c78 <tcp_update_rcv_ann_wnd+0x90>)
 8016c58:	f44f 7242 	mov.w	r2, #776	@ 0x308
 8016c5c:	4907      	ldr	r1, [pc, #28]	@ (8016c7c <tcp_update_rcv_ann_wnd+0x94>)
 8016c5e:	4808      	ldr	r0, [pc, #32]	@ (8016c80 <tcp_update_rcv_ann_wnd+0x98>)
 8016c60:	f00b f812 	bl	8021c88 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8016c64:	68bb      	ldr	r3, [r7, #8]
 8016c66:	b29a      	uxth	r2, r3
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8016c6c:	2300      	movs	r3, #0
  }
}
 8016c6e:	4618      	mov	r0, r3
 8016c70:	3710      	adds	r7, #16
 8016c72:	46bd      	mov	sp, r7
 8016c74:	bd80      	pop	{r7, pc}
 8016c76:	bf00      	nop
 8016c78:	080260ac 	.word	0x080260ac
 8016c7c:	080261c4 	.word	0x080261c4
 8016c80:	080260e8 	.word	0x080260e8

08016c84 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8016c84:	b580      	push	{r7, lr}
 8016c86:	b084      	sub	sp, #16
 8016c88:	af00      	add	r7, sp, #0
 8016c8a:	6078      	str	r0, [r7, #4]
 8016c8c:	460b      	mov	r3, r1
 8016c8e:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	7d1b      	ldrb	r3, [r3, #20]
 8016c94:	2b01      	cmp	r3, #1
 8016c96:	d106      	bne.n	8016ca6 <tcp_recved+0x22>
 8016c98:	4b23      	ldr	r3, [pc, #140]	@ (8016d28 <tcp_recved+0xa4>)
 8016c9a:	f240 321f 	movw	r2, #799	@ 0x31f
 8016c9e:	4923      	ldr	r1, [pc, #140]	@ (8016d2c <tcp_recved+0xa8>)
 8016ca0:	4823      	ldr	r0, [pc, #140]	@ (8016d30 <tcp_recved+0xac>)
 8016ca2:	f00a fff1 	bl	8021c88 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8016caa:	887b      	ldrh	r3, [r7, #2]
 8016cac:	4413      	add	r3, r2
 8016cae:	b29a      	uxth	r2, r3
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	851a      	strh	r2, [r3, #40]	@ 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016cb8:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8016cbc:	d904      	bls.n	8016cc8 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8016cc4:	851a      	strh	r2, [r3, #40]	@ 0x28
 8016cc6:	e017      	b.n	8016cf8 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	d113      	bne.n	8016cf8 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	7d1b      	ldrb	r3, [r3, #20]
 8016cd4:	2b07      	cmp	r3, #7
 8016cd6:	d003      	beq.n	8016ce0 <tcp_recved+0x5c>
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	7d1b      	ldrb	r3, [r3, #20]
 8016cdc:	2b09      	cmp	r3, #9
 8016cde:	d104      	bne.n	8016cea <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8016ce6:	851a      	strh	r2, [r3, #40]	@ 0x28
 8016ce8:	e006      	b.n	8016cf8 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8016cea:	4b0f      	ldr	r3, [pc, #60]	@ (8016d28 <tcp_recved+0xa4>)
 8016cec:	f240 322d 	movw	r2, #813	@ 0x32d
 8016cf0:	4910      	ldr	r1, [pc, #64]	@ (8016d34 <tcp_recved+0xb0>)
 8016cf2:	480f      	ldr	r0, [pc, #60]	@ (8016d30 <tcp_recved+0xac>)
 8016cf4:	f00a ffc8 	bl	8021c88 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8016cf8:	6878      	ldr	r0, [r7, #4]
 8016cfa:	f7ff ff75 	bl	8016be8 <tcp_update_rcv_ann_wnd>
 8016cfe:	4603      	mov	r3, r0
 8016d00:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8016d02:	68fb      	ldr	r3, [r7, #12]
 8016d04:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8016d08:	db09      	blt.n	8016d1e <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	7e9b      	ldrb	r3, [r3, #26]
 8016d0e:	f043 0302 	orr.w	r3, r3, #2
 8016d12:	b2da      	uxtb	r2, r3
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8016d18:	6878      	ldr	r0, [r7, #4]
 8016d1a:	f004 f96d 	bl	801aff8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8016d1e:	bf00      	nop
 8016d20:	3710      	adds	r7, #16
 8016d22:	46bd      	mov	sp, r7
 8016d24:	bd80      	pop	{r7, pc}
 8016d26:	bf00      	nop
 8016d28:	080260ac 	.word	0x080260ac
 8016d2c:	080261e0 	.word	0x080261e0
 8016d30:	080260e8 	.word	0x080260e8
 8016d34:	08026208 	.word	0x08026208

08016d38 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8016d38:	b480      	push	{r7}
 8016d3a:	b083      	sub	sp, #12
 8016d3c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8016d3e:	2300      	movs	r3, #0
 8016d40:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 8016d42:	4b1d      	ldr	r3, [pc, #116]	@ (8016db8 <tcp_new_port+0x80>)
 8016d44:	881b      	ldrh	r3, [r3, #0]
 8016d46:	1c5a      	adds	r2, r3, #1
 8016d48:	b291      	uxth	r1, r2
 8016d4a:	4a1b      	ldr	r2, [pc, #108]	@ (8016db8 <tcp_new_port+0x80>)
 8016d4c:	8011      	strh	r1, [r2, #0]
 8016d4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016d52:	4293      	cmp	r3, r2
 8016d54:	d103      	bne.n	8016d5e <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8016d56:	4b18      	ldr	r3, [pc, #96]	@ (8016db8 <tcp_new_port+0x80>)
 8016d58:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8016d5c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8016d5e:	2300      	movs	r3, #0
 8016d60:	71fb      	strb	r3, [r7, #7]
 8016d62:	e01e      	b.n	8016da2 <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8016d64:	79fb      	ldrb	r3, [r7, #7]
 8016d66:	4a15      	ldr	r2, [pc, #84]	@ (8016dbc <tcp_new_port+0x84>)
 8016d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016d6c:	681b      	ldr	r3, [r3, #0]
 8016d6e:	603b      	str	r3, [r7, #0]
 8016d70:	e011      	b.n	8016d96 <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 8016d72:	683b      	ldr	r3, [r7, #0]
 8016d74:	8ada      	ldrh	r2, [r3, #22]
 8016d76:	4b10      	ldr	r3, [pc, #64]	@ (8016db8 <tcp_new_port+0x80>)
 8016d78:	881b      	ldrh	r3, [r3, #0]
 8016d7a:	429a      	cmp	r2, r3
 8016d7c:	d108      	bne.n	8016d90 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8016d7e:	88bb      	ldrh	r3, [r7, #4]
 8016d80:	3301      	adds	r3, #1
 8016d82:	80bb      	strh	r3, [r7, #4]
 8016d84:	88bb      	ldrh	r3, [r7, #4]
 8016d86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8016d8a:	d3da      	bcc.n	8016d42 <tcp_new_port+0xa>
          return 0;
 8016d8c:	2300      	movs	r3, #0
 8016d8e:	e00d      	b.n	8016dac <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8016d90:	683b      	ldr	r3, [r7, #0]
 8016d92:	68db      	ldr	r3, [r3, #12]
 8016d94:	603b      	str	r3, [r7, #0]
 8016d96:	683b      	ldr	r3, [r7, #0]
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	d1ea      	bne.n	8016d72 <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8016d9c:	79fb      	ldrb	r3, [r7, #7]
 8016d9e:	3301      	adds	r3, #1
 8016da0:	71fb      	strb	r3, [r7, #7]
 8016da2:	79fb      	ldrb	r3, [r7, #7]
 8016da4:	2b03      	cmp	r3, #3
 8016da6:	d9dd      	bls.n	8016d64 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8016da8:	4b03      	ldr	r3, [pc, #12]	@ (8016db8 <tcp_new_port+0x80>)
 8016daa:	881b      	ldrh	r3, [r3, #0]
}
 8016dac:	4618      	mov	r0, r3
 8016dae:	370c      	adds	r7, #12
 8016db0:	46bd      	mov	sp, r7
 8016db2:	bc80      	pop	{r7}
 8016db4:	4770      	bx	lr
 8016db6:	bf00      	nop
 8016db8:	2000011c 	.word	0x2000011c
 8016dbc:	08030cbc 	.word	0x08030cbc

08016dc0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8016dc0:	b5b0      	push	{r4, r5, r7, lr}
 8016dc2:	b08c      	sub	sp, #48	@ 0x30
 8016dc4:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8016dc6:	2300      	movs	r3, #0
 8016dc8:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 8016dca:	4b98      	ldr	r3, [pc, #608]	@ (801702c <tcp_slowtmr+0x26c>)
 8016dcc:	681b      	ldr	r3, [r3, #0]
 8016dce:	3301      	adds	r3, #1
 8016dd0:	4a96      	ldr	r2, [pc, #600]	@ (801702c <tcp_slowtmr+0x26c>)
 8016dd2:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8016dd4:	4b96      	ldr	r3, [pc, #600]	@ (8017030 <tcp_slowtmr+0x270>)
 8016dd6:	781b      	ldrb	r3, [r3, #0]
 8016dd8:	3301      	adds	r3, #1
 8016dda:	b2da      	uxtb	r2, r3
 8016ddc:	4b94      	ldr	r3, [pc, #592]	@ (8017030 <tcp_slowtmr+0x270>)
 8016dde:	701a      	strb	r2, [r3, #0]
 8016de0:	e000      	b.n	8016de4 <tcp_slowtmr+0x24>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8016de2:	bf00      	nop
  prev = NULL;
 8016de4:	2300      	movs	r3, #0
 8016de6:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 8016de8:	4b92      	ldr	r3, [pc, #584]	@ (8017034 <tcp_slowtmr+0x274>)
 8016dea:	681b      	ldr	r3, [r3, #0]
 8016dec:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 8016dee:	e227      	b.n	8017240 <tcp_slowtmr+0x480>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8016df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016df2:	7d1b      	ldrb	r3, [r3, #20]
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d106      	bne.n	8016e06 <tcp_slowtmr+0x46>
 8016df8:	4b8f      	ldr	r3, [pc, #572]	@ (8017038 <tcp_slowtmr+0x278>)
 8016dfa:	f44f 727c 	mov.w	r2, #1008	@ 0x3f0
 8016dfe:	498f      	ldr	r1, [pc, #572]	@ (801703c <tcp_slowtmr+0x27c>)
 8016e00:	488f      	ldr	r0, [pc, #572]	@ (8017040 <tcp_slowtmr+0x280>)
 8016e02:	f00a ff41 	bl	8021c88 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8016e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e08:	7d1b      	ldrb	r3, [r3, #20]
 8016e0a:	2b01      	cmp	r3, #1
 8016e0c:	d106      	bne.n	8016e1c <tcp_slowtmr+0x5c>
 8016e0e:	4b8a      	ldr	r3, [pc, #552]	@ (8017038 <tcp_slowtmr+0x278>)
 8016e10:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8016e14:	498b      	ldr	r1, [pc, #556]	@ (8017044 <tcp_slowtmr+0x284>)
 8016e16:	488a      	ldr	r0, [pc, #552]	@ (8017040 <tcp_slowtmr+0x280>)
 8016e18:	f00a ff36 	bl	8021c88 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8016e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e1e:	7d1b      	ldrb	r3, [r3, #20]
 8016e20:	2b0a      	cmp	r3, #10
 8016e22:	d106      	bne.n	8016e32 <tcp_slowtmr+0x72>
 8016e24:	4b84      	ldr	r3, [pc, #528]	@ (8017038 <tcp_slowtmr+0x278>)
 8016e26:	f240 32f2 	movw	r2, #1010	@ 0x3f2
 8016e2a:	4987      	ldr	r1, [pc, #540]	@ (8017048 <tcp_slowtmr+0x288>)
 8016e2c:	4884      	ldr	r0, [pc, #528]	@ (8017040 <tcp_slowtmr+0x280>)
 8016e2e:	f00a ff2b 	bl	8021c88 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8016e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e34:	7f5a      	ldrb	r2, [r3, #29]
 8016e36:	4b7e      	ldr	r3, [pc, #504]	@ (8017030 <tcp_slowtmr+0x270>)
 8016e38:	781b      	ldrb	r3, [r3, #0]
 8016e3a:	429a      	cmp	r2, r3
 8016e3c:	d103      	bne.n	8016e46 <tcp_slowtmr+0x86>
      pcb = pcb->next;
 8016e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e40:	68db      	ldr	r3, [r3, #12]
 8016e42:	627b      	str	r3, [r7, #36]	@ 0x24
      continue;
 8016e44:	e1fc      	b.n	8017240 <tcp_slowtmr+0x480>
    pcb->last_timer = tcp_timer_ctr;
 8016e46:	4b7a      	ldr	r3, [pc, #488]	@ (8017030 <tcp_slowtmr+0x270>)
 8016e48:	781a      	ldrb	r2, [r3, #0]
 8016e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e4c:	775a      	strb	r2, [r3, #29]
    pcb_remove = 0;
 8016e4e:	2300      	movs	r3, #0
 8016e50:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 8016e52:	2300      	movs	r3, #0
 8016e54:	77bb      	strb	r3, [r7, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8016e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e58:	7d1b      	ldrb	r3, [r3, #20]
 8016e5a:	2b02      	cmp	r3, #2
 8016e5c:	d108      	bne.n	8016e70 <tcp_slowtmr+0xb0>
 8016e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e60:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016e64:	2b05      	cmp	r3, #5
 8016e66:	d903      	bls.n	8016e70 <tcp_slowtmr+0xb0>
      ++pcb_remove;
 8016e68:	7ffb      	ldrb	r3, [r7, #31]
 8016e6a:	3301      	adds	r3, #1
 8016e6c:	77fb      	strb	r3, [r7, #31]
 8016e6e:	e0a2      	b.n	8016fb6 <tcp_slowtmr+0x1f6>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8016e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016e76:	2b0b      	cmp	r3, #11
 8016e78:	d903      	bls.n	8016e82 <tcp_slowtmr+0xc2>
      ++pcb_remove;
 8016e7a:	7ffb      	ldrb	r3, [r7, #31]
 8016e7c:	3301      	adds	r3, #1
 8016e7e:	77fb      	strb	r3, [r7, #31]
 8016e80:	e099      	b.n	8016fb6 <tcp_slowtmr+0x1f6>
      if (pcb->persist_backoff > 0) {
 8016e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e84:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	d032      	beq.n	8016ef2 <tcp_slowtmr+0x132>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8016e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e8e:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8016e92:	3b01      	subs	r3, #1
 8016e94:	4a6d      	ldr	r2, [pc, #436]	@ (801704c <tcp_slowtmr+0x28c>)
 8016e96:	5cd3      	ldrb	r3, [r2, r3]
 8016e98:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 8016e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e9c:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 8016ea0:	7cfa      	ldrb	r2, [r7, #19]
 8016ea2:	429a      	cmp	r2, r3
 8016ea4:	d907      	bls.n	8016eb6 <tcp_slowtmr+0xf6>
          pcb->persist_cnt++;
 8016ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ea8:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 8016eac:	3301      	adds	r3, #1
 8016eae:	b2da      	uxtb	r2, r3
 8016eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016eb2:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 8016eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016eb8:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 8016ebc:	7cfa      	ldrb	r2, [r7, #19]
 8016ebe:	429a      	cmp	r2, r3
 8016ec0:	d879      	bhi.n	8016fb6 <tcp_slowtmr+0x1f6>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8016ec2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016ec4:	f004 fcde 	bl	801b884 <tcp_zero_window_probe>
 8016ec8:	4603      	mov	r3, r0
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	d173      	bne.n	8016fb6 <tcp_slowtmr+0x1f6>
            pcb->persist_cnt = 0;
 8016ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ed0:	2200      	movs	r2, #0
 8016ed2:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8016ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ed8:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8016edc:	2b06      	cmp	r3, #6
 8016ede:	d86a      	bhi.n	8016fb6 <tcp_slowtmr+0x1f6>
              pcb->persist_backoff++;
 8016ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ee2:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8016ee6:	3301      	adds	r3, #1
 8016ee8:	b2da      	uxtb	r2, r3
 8016eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016eec:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
 8016ef0:	e061      	b.n	8016fb6 <tcp_slowtmr+0x1f6>
        if (pcb->rtime >= 0) {
 8016ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ef4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	db08      	blt.n	8016f0e <tcp_slowtmr+0x14e>
          ++pcb->rtime;
 8016efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016efe:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8016f02:	b29b      	uxth	r3, r3
 8016f04:	3301      	adds	r3, #1
 8016f06:	b29b      	uxth	r3, r3
 8016f08:	b21a      	sxth	r2, r3
 8016f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f0c:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8016f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d04f      	beq.n	8016fb6 <tcp_slowtmr+0x1f6>
 8016f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f18:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8016f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f1e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8016f22:	429a      	cmp	r2, r3
 8016f24:	db47      	blt.n	8016fb6 <tcp_slowtmr+0x1f6>
          if (pcb->state != SYN_SENT) {
 8016f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f28:	7d1b      	ldrb	r3, [r3, #20]
 8016f2a:	2b02      	cmp	r3, #2
 8016f2c:	d018      	beq.n	8016f60 <tcp_slowtmr+0x1a0>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8016f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f30:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016f34:	2b0c      	cmp	r3, #12
 8016f36:	bf28      	it	cs
 8016f38:	230c      	movcs	r3, #12
 8016f3a:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8016f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f3e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8016f42:	10db      	asrs	r3, r3, #3
 8016f44:	b21b      	sxth	r3, r3
 8016f46:	461a      	mov	r2, r3
 8016f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f4a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8016f4e:	4413      	add	r3, r2
 8016f50:	7dfa      	ldrb	r2, [r7, #23]
 8016f52:	493f      	ldr	r1, [pc, #252]	@ (8017050 <tcp_slowtmr+0x290>)
 8016f54:	5c8a      	ldrb	r2, [r1, r2]
 8016f56:	4093      	lsls	r3, r2
 8016f58:	b21a      	sxth	r2, r3
 8016f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f5c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
          pcb->rtime = 0;
 8016f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f62:	2200      	movs	r2, #0
 8016f64:	861a      	strh	r2, [r3, #48]	@ 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8016f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f68:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8016f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f6e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8016f72:	4293      	cmp	r3, r2
 8016f74:	bf28      	it	cs
 8016f76:	4613      	movcs	r3, r2
 8016f78:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 8016f7a:	8abb      	ldrh	r3, [r7, #20]
 8016f7c:	085b      	lsrs	r3, r3, #1
 8016f7e:	b29a      	uxth	r2, r3
 8016f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f82:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8016f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f88:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8016f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f8e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016f90:	005b      	lsls	r3, r3, #1
 8016f92:	b29b      	uxth	r3, r3
 8016f94:	429a      	cmp	r2, r3
 8016f96:	d206      	bcs.n	8016fa6 <tcp_slowtmr+0x1e6>
            pcb->ssthresh = (pcb->mss << 1);
 8016f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f9a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016f9c:	005b      	lsls	r3, r3, #1
 8016f9e:	b29a      	uxth	r2, r3
 8016fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fa2:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
          pcb->cwnd = pcb->mss;
 8016fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fa8:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8016faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fac:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
          tcp_rexmit_rto(pcb);
 8016fb0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016fb2:	f004 fb41 	bl	801b638 <tcp_rexmit_rto>
    if (pcb->state == FIN_WAIT_2) {
 8016fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fb8:	7d1b      	ldrb	r3, [r3, #20]
 8016fba:	2b06      	cmp	r3, #6
 8016fbc:	d10f      	bne.n	8016fde <tcp_slowtmr+0x21e>
      if (pcb->flags & TF_RXCLOSED) {
 8016fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fc0:	7e9b      	ldrb	r3, [r3, #26]
 8016fc2:	f003 0310 	and.w	r3, r3, #16
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d009      	beq.n	8016fde <tcp_slowtmr+0x21e>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016fca:	4b18      	ldr	r3, [pc, #96]	@ (801702c <tcp_slowtmr+0x26c>)
 8016fcc:	681a      	ldr	r2, [r3, #0]
 8016fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fd0:	6a1b      	ldr	r3, [r3, #32]
 8016fd2:	1ad3      	subs	r3, r2, r3
 8016fd4:	2b28      	cmp	r3, #40	@ 0x28
 8016fd6:	d902      	bls.n	8016fde <tcp_slowtmr+0x21e>
          ++pcb_remove;
 8016fd8:	7ffb      	ldrb	r3, [r7, #31]
 8016fda:	3301      	adds	r3, #1
 8016fdc:	77fb      	strb	r3, [r7, #31]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8016fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fe0:	7a1b      	ldrb	r3, [r3, #8]
 8016fe2:	f003 0308 	and.w	r3, r3, #8
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	d05d      	beq.n	80170a6 <tcp_slowtmr+0x2e6>
       ((pcb->state == ESTABLISHED) ||
 8016fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fec:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8016fee:	2b04      	cmp	r3, #4
 8016ff0:	d003      	beq.n	8016ffa <tcp_slowtmr+0x23a>
        (pcb->state == CLOSE_WAIT))) {
 8016ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ff4:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 8016ff6:	2b07      	cmp	r3, #7
 8016ff8:	d155      	bne.n	80170a6 <tcp_slowtmr+0x2e6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016ffa:	4b0c      	ldr	r3, [pc, #48]	@ (801702c <tcp_slowtmr+0x26c>)
 8016ffc:	681a      	ldr	r2, [r3, #0]
 8016ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017000:	6a1b      	ldr	r3, [r3, #32]
 8017002:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8017004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801700a:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 801700e:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8017012:	4910      	ldr	r1, [pc, #64]	@ (8017054 <tcp_slowtmr+0x294>)
 8017014:	fba1 1303 	umull	r1, r3, r1, r3
 8017018:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801701a:	429a      	cmp	r2, r3
 801701c:	d91c      	bls.n	8017058 <tcp_slowtmr+0x298>
        ++pcb_remove;
 801701e:	7ffb      	ldrb	r3, [r7, #31]
 8017020:	3301      	adds	r3, #1
 8017022:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 8017024:	7fbb      	ldrb	r3, [r7, #30]
 8017026:	3301      	adds	r3, #1
 8017028:	77bb      	strb	r3, [r7, #30]
 801702a:	e03c      	b.n	80170a6 <tcp_slowtmr+0x2e6>
 801702c:	2000c020 	.word	0x2000c020
 8017030:	2000c036 	.word	0x2000c036
 8017034:	2000c02c 	.word	0x2000c02c
 8017038:	080260ac 	.word	0x080260ac
 801703c:	0802625c 	.word	0x0802625c
 8017040:	080260e8 	.word	0x080260e8
 8017044:	08026288 	.word	0x08026288
 8017048:	080262b4 	.word	0x080262b4
 801704c:	08030cb4 	.word	0x08030cb4
 8017050:	08030ca4 	.word	0x08030ca4
 8017054:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017058:	4b97      	ldr	r3, [pc, #604]	@ (80172b8 <tcp_slowtmr+0x4f8>)
 801705a:	681a      	ldr	r2, [r3, #0]
 801705c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801705e:	6a1b      	ldr	r3, [r3, #32]
 8017060:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8017062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017064:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 8017068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801706a:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 801706e:	4618      	mov	r0, r3
 8017070:	4b92      	ldr	r3, [pc, #584]	@ (80172bc <tcp_slowtmr+0x4fc>)
 8017072:	fb00 f303 	mul.w	r3, r0, r3
 8017076:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 8017078:	4991      	ldr	r1, [pc, #580]	@ (80172c0 <tcp_slowtmr+0x500>)
 801707a:	fba1 1303 	umull	r1, r3, r1, r3
 801707e:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017080:	429a      	cmp	r2, r3
 8017082:	d910      	bls.n	80170a6 <tcp_slowtmr+0x2e6>
        err = tcp_keepalive(pcb);
 8017084:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017086:	f004 fbb5 	bl	801b7f4 <tcp_keepalive>
 801708a:	4603      	mov	r3, r0
 801708c:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 801708e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8017092:	2b00      	cmp	r3, #0
 8017094:	d107      	bne.n	80170a6 <tcp_slowtmr+0x2e6>
          pcb->keep_cnt_sent++;
 8017096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017098:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 801709c:	3301      	adds	r3, #1
 801709e:	b2da      	uxtb	r2, r3
 80170a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170a2:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
    if (pcb->ooseq != NULL &&
 80170a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d016      	beq.n	80170dc <tcp_slowtmr+0x31c>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 80170ae:	4b82      	ldr	r3, [pc, #520]	@ (80172b8 <tcp_slowtmr+0x4f8>)
 80170b0:	681a      	ldr	r2, [r3, #0]
 80170b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170b4:	6a1b      	ldr	r3, [r3, #32]
 80170b6:	1ad2      	subs	r2, r2, r3
 80170b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170ba:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80170be:	4619      	mov	r1, r3
 80170c0:	460b      	mov	r3, r1
 80170c2:	005b      	lsls	r3, r3, #1
 80170c4:	440b      	add	r3, r1
 80170c6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80170c8:	429a      	cmp	r2, r3
 80170ca:	d307      	bcc.n	80170dc <tcp_slowtmr+0x31c>
      tcp_segs_free(pcb->ooseq);
 80170cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80170d0:	4618      	mov	r0, r3
 80170d2:	f000 fa06 	bl	80174e2 <tcp_segs_free>
      pcb->ooseq = NULL;
 80170d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170d8:	2200      	movs	r2, #0
 80170da:	671a      	str	r2, [r3, #112]	@ 0x70
    if (pcb->state == SYN_RCVD) {
 80170dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170de:	7d1b      	ldrb	r3, [r3, #20]
 80170e0:	2b03      	cmp	r3, #3
 80170e2:	d109      	bne.n	80170f8 <tcp_slowtmr+0x338>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80170e4:	4b74      	ldr	r3, [pc, #464]	@ (80172b8 <tcp_slowtmr+0x4f8>)
 80170e6:	681a      	ldr	r2, [r3, #0]
 80170e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170ea:	6a1b      	ldr	r3, [r3, #32]
 80170ec:	1ad3      	subs	r3, r2, r3
 80170ee:	2b28      	cmp	r3, #40	@ 0x28
 80170f0:	d902      	bls.n	80170f8 <tcp_slowtmr+0x338>
        ++pcb_remove;
 80170f2:	7ffb      	ldrb	r3, [r7, #31]
 80170f4:	3301      	adds	r3, #1
 80170f6:	77fb      	strb	r3, [r7, #31]
    if (pcb->state == LAST_ACK) {
 80170f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170fa:	7d1b      	ldrb	r3, [r3, #20]
 80170fc:	2b09      	cmp	r3, #9
 80170fe:	d109      	bne.n	8017114 <tcp_slowtmr+0x354>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8017100:	4b6d      	ldr	r3, [pc, #436]	@ (80172b8 <tcp_slowtmr+0x4f8>)
 8017102:	681a      	ldr	r2, [r3, #0]
 8017104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017106:	6a1b      	ldr	r3, [r3, #32]
 8017108:	1ad3      	subs	r3, r2, r3
 801710a:	2bf0      	cmp	r3, #240	@ 0xf0
 801710c:	d902      	bls.n	8017114 <tcp_slowtmr+0x354>
        ++pcb_remove;
 801710e:	7ffb      	ldrb	r3, [r7, #31]
 8017110:	3301      	adds	r3, #1
 8017112:	77fb      	strb	r3, [r7, #31]
    if (pcb_remove) {
 8017114:	7ffb      	ldrb	r3, [r7, #31]
 8017116:	2b00      	cmp	r3, #0
 8017118:	d05d      	beq.n	80171d6 <tcp_slowtmr+0x416>
      tcp_err_fn err_fn = pcb->errf;
 801711a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801711c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8017120:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8017122:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017124:	f000 fc7a 	bl	8017a1c <tcp_pcb_purge>
      if (prev != NULL) {
 8017128:	6a3b      	ldr	r3, [r7, #32]
 801712a:	2b00      	cmp	r3, #0
 801712c:	d010      	beq.n	8017150 <tcp_slowtmr+0x390>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801712e:	4b65      	ldr	r3, [pc, #404]	@ (80172c4 <tcp_slowtmr+0x504>)
 8017130:	681b      	ldr	r3, [r3, #0]
 8017132:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017134:	429a      	cmp	r2, r3
 8017136:	d106      	bne.n	8017146 <tcp_slowtmr+0x386>
 8017138:	4b63      	ldr	r3, [pc, #396]	@ (80172c8 <tcp_slowtmr+0x508>)
 801713a:	f240 4289 	movw	r2, #1161	@ 0x489
 801713e:	4963      	ldr	r1, [pc, #396]	@ (80172cc <tcp_slowtmr+0x50c>)
 8017140:	4863      	ldr	r0, [pc, #396]	@ (80172d0 <tcp_slowtmr+0x510>)
 8017142:	f00a fda1 	bl	8021c88 <iprintf>
        prev->next = pcb->next;
 8017146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017148:	68da      	ldr	r2, [r3, #12]
 801714a:	6a3b      	ldr	r3, [r7, #32]
 801714c:	60da      	str	r2, [r3, #12]
 801714e:	e00f      	b.n	8017170 <tcp_slowtmr+0x3b0>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8017150:	4b5c      	ldr	r3, [pc, #368]	@ (80172c4 <tcp_slowtmr+0x504>)
 8017152:	681b      	ldr	r3, [r3, #0]
 8017154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017156:	429a      	cmp	r2, r3
 8017158:	d006      	beq.n	8017168 <tcp_slowtmr+0x3a8>
 801715a:	4b5b      	ldr	r3, [pc, #364]	@ (80172c8 <tcp_slowtmr+0x508>)
 801715c:	f240 428d 	movw	r2, #1165	@ 0x48d
 8017160:	495c      	ldr	r1, [pc, #368]	@ (80172d4 <tcp_slowtmr+0x514>)
 8017162:	485b      	ldr	r0, [pc, #364]	@ (80172d0 <tcp_slowtmr+0x510>)
 8017164:	f00a fd90 	bl	8021c88 <iprintf>
        tcp_active_pcbs = pcb->next;
 8017168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801716a:	68db      	ldr	r3, [r3, #12]
 801716c:	4a55      	ldr	r2, [pc, #340]	@ (80172c4 <tcp_slowtmr+0x504>)
 801716e:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8017170:	7fbb      	ldrb	r3, [r7, #30]
 8017172:	2b00      	cmp	r3, #0
 8017174:	d010      	beq.n	8017198 <tcp_slowtmr+0x3d8>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8017176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017178:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 801717a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801717c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801717e:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8017180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017182:	1d1d      	adds	r5, r3, #4
 8017184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017186:	8adb      	ldrh	r3, [r3, #22]
 8017188:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801718a:	8b12      	ldrh	r2, [r2, #24]
 801718c:	9201      	str	r2, [sp, #4]
 801718e:	9300      	str	r3, [sp, #0]
 8017190:	462b      	mov	r3, r5
 8017192:	4622      	mov	r2, r4
 8017194:	f004 f9c8 	bl	801b528 <tcp_rst>
      err_arg = pcb->callback_arg;
 8017198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801719a:	691b      	ldr	r3, [r3, #16]
 801719c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801719e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171a0:	7d1b      	ldrb	r3, [r3, #20]
 80171a2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80171a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171a6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80171a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171aa:	68db      	ldr	r3, [r3, #12]
 80171ac:	627b      	str	r3, [r7, #36]	@ 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 80171ae:	6839      	ldr	r1, [r7, #0]
 80171b0:	2001      	movs	r0, #1
 80171b2:	f7fe f81b 	bl	80151ec <memp_free>
      tcp_active_pcbs_changed = 0;
 80171b6:	4b48      	ldr	r3, [pc, #288]	@ (80172d8 <tcp_slowtmr+0x518>)
 80171b8:	2200      	movs	r2, #0
 80171ba:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80171bc:	68fb      	ldr	r3, [r7, #12]
 80171be:	2b00      	cmp	r3, #0
 80171c0:	d004      	beq.n	80171cc <tcp_slowtmr+0x40c>
 80171c2:	68fb      	ldr	r3, [r7, #12]
 80171c4:	f06f 010c 	mvn.w	r1, #12
 80171c8:	68b8      	ldr	r0, [r7, #8]
 80171ca:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80171cc:	4b42      	ldr	r3, [pc, #264]	@ (80172d8 <tcp_slowtmr+0x518>)
 80171ce:	781b      	ldrb	r3, [r3, #0]
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	d035      	beq.n	8017240 <tcp_slowtmr+0x480>
        goto tcp_slowtmr_start;
 80171d4:	e606      	b.n	8016de4 <tcp_slowtmr+0x24>
      prev = pcb;
 80171d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171d8:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 80171da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171dc:	68db      	ldr	r3, [r3, #12]
 80171de:	627b      	str	r3, [r7, #36]	@ 0x24
      ++prev->polltmr;
 80171e0:	6a3b      	ldr	r3, [r7, #32]
 80171e2:	7edb      	ldrb	r3, [r3, #27]
 80171e4:	3301      	adds	r3, #1
 80171e6:	b2da      	uxtb	r2, r3
 80171e8:	6a3b      	ldr	r3, [r7, #32]
 80171ea:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 80171ec:	6a3b      	ldr	r3, [r7, #32]
 80171ee:	7eda      	ldrb	r2, [r3, #27]
 80171f0:	6a3b      	ldr	r3, [r7, #32]
 80171f2:	7f1b      	ldrb	r3, [r3, #28]
 80171f4:	429a      	cmp	r2, r3
 80171f6:	d323      	bcc.n	8017240 <tcp_slowtmr+0x480>
        prev->polltmr = 0;
 80171f8:	6a3b      	ldr	r3, [r7, #32]
 80171fa:	2200      	movs	r2, #0
 80171fc:	76da      	strb	r2, [r3, #27]
        tcp_active_pcbs_changed = 0;
 80171fe:	4b36      	ldr	r3, [pc, #216]	@ (80172d8 <tcp_slowtmr+0x518>)
 8017200:	2200      	movs	r2, #0
 8017202:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8017204:	6a3b      	ldr	r3, [r7, #32]
 8017206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801720a:	2b00      	cmp	r3, #0
 801720c:	d00a      	beq.n	8017224 <tcp_slowtmr+0x464>
 801720e:	6a3b      	ldr	r3, [r7, #32]
 8017210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017214:	6a3a      	ldr	r2, [r7, #32]
 8017216:	6912      	ldr	r2, [r2, #16]
 8017218:	6a39      	ldr	r1, [r7, #32]
 801721a:	4610      	mov	r0, r2
 801721c:	4798      	blx	r3
 801721e:	4603      	mov	r3, r0
 8017220:	777b      	strb	r3, [r7, #29]
 8017222:	e001      	b.n	8017228 <tcp_slowtmr+0x468>
 8017224:	2300      	movs	r3, #0
 8017226:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8017228:	4b2b      	ldr	r3, [pc, #172]	@ (80172d8 <tcp_slowtmr+0x518>)
 801722a:	781b      	ldrb	r3, [r3, #0]
 801722c:	2b00      	cmp	r3, #0
 801722e:	f47f add8 	bne.w	8016de2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8017232:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8017236:	2b00      	cmp	r3, #0
 8017238:	d102      	bne.n	8017240 <tcp_slowtmr+0x480>
          tcp_output(prev);
 801723a:	6a38      	ldr	r0, [r7, #32]
 801723c:	f003 fedc 	bl	801aff8 <tcp_output>
  while (pcb != NULL) {
 8017240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017242:	2b00      	cmp	r3, #0
 8017244:	f47f add4 	bne.w	8016df0 <tcp_slowtmr+0x30>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8017248:	2300      	movs	r3, #0
 801724a:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 801724c:	4b23      	ldr	r3, [pc, #140]	@ (80172dc <tcp_slowtmr+0x51c>)
 801724e:	681b      	ldr	r3, [r3, #0]
 8017250:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 8017252:	e068      	b.n	8017326 <tcp_slowtmr+0x566>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8017254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017256:	7d1b      	ldrb	r3, [r3, #20]
 8017258:	2b0a      	cmp	r3, #10
 801725a:	d006      	beq.n	801726a <tcp_slowtmr+0x4aa>
 801725c:	4b1a      	ldr	r3, [pc, #104]	@ (80172c8 <tcp_slowtmr+0x508>)
 801725e:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 8017262:	491f      	ldr	r1, [pc, #124]	@ (80172e0 <tcp_slowtmr+0x520>)
 8017264:	481a      	ldr	r0, [pc, #104]	@ (80172d0 <tcp_slowtmr+0x510>)
 8017266:	f00a fd0f 	bl	8021c88 <iprintf>
    pcb_remove = 0;
 801726a:	2300      	movs	r3, #0
 801726c:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801726e:	4b12      	ldr	r3, [pc, #72]	@ (80172b8 <tcp_slowtmr+0x4f8>)
 8017270:	681a      	ldr	r2, [r3, #0]
 8017272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017274:	6a1b      	ldr	r3, [r3, #32]
 8017276:	1ad3      	subs	r3, r2, r3
 8017278:	2bf0      	cmp	r3, #240	@ 0xf0
 801727a:	d902      	bls.n	8017282 <tcp_slowtmr+0x4c2>
      ++pcb_remove;
 801727c:	7ffb      	ldrb	r3, [r7, #31]
 801727e:	3301      	adds	r3, #1
 8017280:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8017282:	7ffb      	ldrb	r3, [r7, #31]
 8017284:	2b00      	cmp	r3, #0
 8017286:	d049      	beq.n	801731c <tcp_slowtmr+0x55c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8017288:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801728a:	f000 fbc7 	bl	8017a1c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801728e:	6a3b      	ldr	r3, [r7, #32]
 8017290:	2b00      	cmp	r3, #0
 8017292:	d029      	beq.n	80172e8 <tcp_slowtmr+0x528>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8017294:	4b11      	ldr	r3, [pc, #68]	@ (80172dc <tcp_slowtmr+0x51c>)
 8017296:	681b      	ldr	r3, [r3, #0]
 8017298:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801729a:	429a      	cmp	r2, r3
 801729c:	d106      	bne.n	80172ac <tcp_slowtmr+0x4ec>
 801729e:	4b0a      	ldr	r3, [pc, #40]	@ (80172c8 <tcp_slowtmr+0x508>)
 80172a0:	f240 42cb 	movw	r2, #1227	@ 0x4cb
 80172a4:	490f      	ldr	r1, [pc, #60]	@ (80172e4 <tcp_slowtmr+0x524>)
 80172a6:	480a      	ldr	r0, [pc, #40]	@ (80172d0 <tcp_slowtmr+0x510>)
 80172a8:	f00a fcee 	bl	8021c88 <iprintf>
        prev->next = pcb->next;
 80172ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172ae:	68da      	ldr	r2, [r3, #12]
 80172b0:	6a3b      	ldr	r3, [r7, #32]
 80172b2:	60da      	str	r2, [r3, #12]
 80172b4:	e028      	b.n	8017308 <tcp_slowtmr+0x548>
 80172b6:	bf00      	nop
 80172b8:	2000c020 	.word	0x2000c020
 80172bc:	000124f8 	.word	0x000124f8
 80172c0:	10624dd3 	.word	0x10624dd3
 80172c4:	2000c02c 	.word	0x2000c02c
 80172c8:	080260ac 	.word	0x080260ac
 80172cc:	080262e4 	.word	0x080262e4
 80172d0:	080260e8 	.word	0x080260e8
 80172d4:	08026310 	.word	0x08026310
 80172d8:	2000c034 	.word	0x2000c034
 80172dc:	2000c030 	.word	0x2000c030
 80172e0:	0802633c 	.word	0x0802633c
 80172e4:	0802636c 	.word	0x0802636c
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80172e8:	4b13      	ldr	r3, [pc, #76]	@ (8017338 <tcp_slowtmr+0x578>)
 80172ea:	681b      	ldr	r3, [r3, #0]
 80172ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80172ee:	429a      	cmp	r2, r3
 80172f0:	d006      	beq.n	8017300 <tcp_slowtmr+0x540>
 80172f2:	4b12      	ldr	r3, [pc, #72]	@ (801733c <tcp_slowtmr+0x57c>)
 80172f4:	f240 42cf 	movw	r2, #1231	@ 0x4cf
 80172f8:	4911      	ldr	r1, [pc, #68]	@ (8017340 <tcp_slowtmr+0x580>)
 80172fa:	4812      	ldr	r0, [pc, #72]	@ (8017344 <tcp_slowtmr+0x584>)
 80172fc:	f00a fcc4 	bl	8021c88 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8017300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017302:	68db      	ldr	r3, [r3, #12]
 8017304:	4a0c      	ldr	r2, [pc, #48]	@ (8017338 <tcp_slowtmr+0x578>)
 8017306:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8017308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801730a:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 801730c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801730e:	68db      	ldr	r3, [r3, #12]
 8017310:	627b      	str	r3, [r7, #36]	@ 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8017312:	69b9      	ldr	r1, [r7, #24]
 8017314:	2001      	movs	r0, #1
 8017316:	f7fd ff69 	bl	80151ec <memp_free>
 801731a:	e004      	b.n	8017326 <tcp_slowtmr+0x566>
    } else {
      prev = pcb;
 801731c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801731e:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8017320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017322:	68db      	ldr	r3, [r3, #12]
 8017324:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 8017326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017328:	2b00      	cmp	r3, #0
 801732a:	d193      	bne.n	8017254 <tcp_slowtmr+0x494>
    }
  }
}
 801732c:	bf00      	nop
 801732e:	bf00      	nop
 8017330:	3728      	adds	r7, #40	@ 0x28
 8017332:	46bd      	mov	sp, r7
 8017334:	bdb0      	pop	{r4, r5, r7, pc}
 8017336:	bf00      	nop
 8017338:	2000c030 	.word	0x2000c030
 801733c:	080260ac 	.word	0x080260ac
 8017340:	08026394 	.word	0x08026394
 8017344:	080260e8 	.word	0x080260e8

08017348 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8017348:	b580      	push	{r7, lr}
 801734a:	b082      	sub	sp, #8
 801734c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801734e:	4b2d      	ldr	r3, [pc, #180]	@ (8017404 <tcp_fasttmr+0xbc>)
 8017350:	781b      	ldrb	r3, [r3, #0]
 8017352:	3301      	adds	r3, #1
 8017354:	b2da      	uxtb	r2, r3
 8017356:	4b2b      	ldr	r3, [pc, #172]	@ (8017404 <tcp_fasttmr+0xbc>)
 8017358:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801735a:	4b2b      	ldr	r3, [pc, #172]	@ (8017408 <tcp_fasttmr+0xc0>)
 801735c:	681b      	ldr	r3, [r3, #0]
 801735e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8017360:	e048      	b.n	80173f4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	7f5a      	ldrb	r2, [r3, #29]
 8017366:	4b27      	ldr	r3, [pc, #156]	@ (8017404 <tcp_fasttmr+0xbc>)
 8017368:	781b      	ldrb	r3, [r3, #0]
 801736a:	429a      	cmp	r2, r3
 801736c:	d03f      	beq.n	80173ee <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801736e:	4b25      	ldr	r3, [pc, #148]	@ (8017404 <tcp_fasttmr+0xbc>)
 8017370:	781a      	ldrb	r2, [r3, #0]
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	7e9b      	ldrb	r3, [r3, #26]
 801737a:	f003 0301 	and.w	r3, r3, #1
 801737e:	2b00      	cmp	r3, #0
 8017380:	d010      	beq.n	80173a4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	7e9b      	ldrb	r3, [r3, #26]
 8017386:	f043 0302 	orr.w	r3, r3, #2
 801738a:	b2da      	uxtb	r2, r3
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8017390:	6878      	ldr	r0, [r7, #4]
 8017392:	f003 fe31 	bl	801aff8 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	7e9b      	ldrb	r3, [r3, #26]
 801739a:	f023 0303 	bic.w	r3, r3, #3
 801739e:	b2da      	uxtb	r2, r3
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	7e9b      	ldrb	r3, [r3, #26]
 80173a8:	f003 0308 	and.w	r3, r3, #8
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d009      	beq.n	80173c4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	7e9b      	ldrb	r3, [r3, #26]
 80173b4:	f023 0308 	bic.w	r3, r3, #8
 80173b8:	b2da      	uxtb	r2, r3
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80173be:	6878      	ldr	r0, [r7, #4]
 80173c0:	f7ff f970 	bl	80166a4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	68db      	ldr	r3, [r3, #12]
 80173c8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d00a      	beq.n	80173e8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80173d2:	4b0e      	ldr	r3, [pc, #56]	@ (801740c <tcp_fasttmr+0xc4>)
 80173d4:	2200      	movs	r2, #0
 80173d6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80173d8:	6878      	ldr	r0, [r7, #4]
 80173da:	f000 f819 	bl	8017410 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80173de:	4b0b      	ldr	r3, [pc, #44]	@ (801740c <tcp_fasttmr+0xc4>)
 80173e0:	781b      	ldrb	r3, [r3, #0]
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	d000      	beq.n	80173e8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80173e6:	e7b8      	b.n	801735a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80173e8:	683b      	ldr	r3, [r7, #0]
 80173ea:	607b      	str	r3, [r7, #4]
 80173ec:	e002      	b.n	80173f4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	68db      	ldr	r3, [r3, #12]
 80173f2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	d1b3      	bne.n	8017362 <tcp_fasttmr+0x1a>
    }
  }
}
 80173fa:	bf00      	nop
 80173fc:	bf00      	nop
 80173fe:	3708      	adds	r7, #8
 8017400:	46bd      	mov	sp, r7
 8017402:	bd80      	pop	{r7, pc}
 8017404:	2000c036 	.word	0x2000c036
 8017408:	2000c02c 	.word	0x2000c02c
 801740c:	2000c034 	.word	0x2000c034

08017410 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8017410:	b590      	push	{r4, r7, lr}
 8017412:	b085      	sub	sp, #20
 8017414:	af00      	add	r7, sp, #0
 8017416:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801741c:	7b5b      	ldrb	r3, [r3, #13]
 801741e:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017424:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8017426:	687b      	ldr	r3, [r7, #4]
 8017428:	2200      	movs	r2, #0
 801742a:	675a      	str	r2, [r3, #116]	@ 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017432:	2b00      	cmp	r3, #0
 8017434:	d00b      	beq.n	801744e <tcp_process_refused_data+0x3e>
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	6918      	ldr	r0, [r3, #16]
 8017440:	2300      	movs	r3, #0
 8017442:	68ba      	ldr	r2, [r7, #8]
 8017444:	6879      	ldr	r1, [r7, #4]
 8017446:	47a0      	blx	r4
 8017448:	4603      	mov	r3, r0
 801744a:	73fb      	strb	r3, [r7, #15]
 801744c:	e007      	b.n	801745e <tcp_process_refused_data+0x4e>
 801744e:	2300      	movs	r3, #0
 8017450:	68ba      	ldr	r2, [r7, #8]
 8017452:	6879      	ldr	r1, [r7, #4]
 8017454:	2000      	movs	r0, #0
 8017456:	f000 f89b 	bl	8017590 <tcp_recv_null>
 801745a:	4603      	mov	r3, r0
 801745c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801745e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017462:	2b00      	cmp	r3, #0
 8017464:	d12a      	bne.n	80174bc <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8017466:	7bbb      	ldrb	r3, [r7, #14]
 8017468:	f003 0320 	and.w	r3, r3, #32
 801746c:	2b00      	cmp	r3, #0
 801746e:	d033      	beq.n	80174d8 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017474:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8017478:	d005      	beq.n	8017486 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801747e:	3301      	adds	r3, #1
 8017480:	b29a      	uxth	r2, r3
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801748c:	2b00      	cmp	r3, #0
 801748e:	d00b      	beq.n	80174a8 <tcp_process_refused_data+0x98>
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	6918      	ldr	r0, [r3, #16]
 801749a:	2300      	movs	r3, #0
 801749c:	2200      	movs	r2, #0
 801749e:	6879      	ldr	r1, [r7, #4]
 80174a0:	47a0      	blx	r4
 80174a2:	4603      	mov	r3, r0
 80174a4:	73fb      	strb	r3, [r7, #15]
 80174a6:	e001      	b.n	80174ac <tcp_process_refused_data+0x9c>
 80174a8:	2300      	movs	r3, #0
 80174aa:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80174ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80174b0:	f113 0f0d 	cmn.w	r3, #13
 80174b4:	d110      	bne.n	80174d8 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 80174b6:	f06f 030c 	mvn.w	r3, #12
 80174ba:	e00e      	b.n	80174da <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 80174bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80174c0:	f113 0f0d 	cmn.w	r3, #13
 80174c4:	d102      	bne.n	80174cc <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80174c6:	f06f 030c 	mvn.w	r3, #12
 80174ca:	e006      	b.n	80174da <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	68ba      	ldr	r2, [r7, #8]
 80174d0:	675a      	str	r2, [r3, #116]	@ 0x74
      return ERR_INPROGRESS;
 80174d2:	f06f 0304 	mvn.w	r3, #4
 80174d6:	e000      	b.n	80174da <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 80174d8:	2300      	movs	r3, #0
}
 80174da:	4618      	mov	r0, r3
 80174dc:	3714      	adds	r7, #20
 80174de:	46bd      	mov	sp, r7
 80174e0:	bd90      	pop	{r4, r7, pc}

080174e2 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80174e2:	b580      	push	{r7, lr}
 80174e4:	b084      	sub	sp, #16
 80174e6:	af00      	add	r7, sp, #0
 80174e8:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80174ea:	e007      	b.n	80174fc <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	681b      	ldr	r3, [r3, #0]
 80174f0:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80174f2:	6878      	ldr	r0, [r7, #4]
 80174f4:	f000 f80a 	bl	801750c <tcp_seg_free>
    seg = next;
 80174f8:	68fb      	ldr	r3, [r7, #12]
 80174fa:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	2b00      	cmp	r3, #0
 8017500:	d1f4      	bne.n	80174ec <tcp_segs_free+0xa>
  }
}
 8017502:	bf00      	nop
 8017504:	bf00      	nop
 8017506:	3710      	adds	r7, #16
 8017508:	46bd      	mov	sp, r7
 801750a:	bd80      	pop	{r7, pc}

0801750c <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801750c:	b580      	push	{r7, lr}
 801750e:	b082      	sub	sp, #8
 8017510:	af00      	add	r7, sp, #0
 8017512:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	2b00      	cmp	r3, #0
 8017518:	d00c      	beq.n	8017534 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801751a:	687b      	ldr	r3, [r7, #4]
 801751c:	685b      	ldr	r3, [r3, #4]
 801751e:	2b00      	cmp	r3, #0
 8017520:	d004      	beq.n	801752c <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	685b      	ldr	r3, [r3, #4]
 8017526:	4618      	mov	r0, r3
 8017528:	f7fe fbbc 	bl	8015ca4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801752c:	6879      	ldr	r1, [r7, #4]
 801752e:	2003      	movs	r0, #3
 8017530:	f7fd fe5c 	bl	80151ec <memp_free>
  }
}
 8017534:	bf00      	nop
 8017536:	3708      	adds	r7, #8
 8017538:	46bd      	mov	sp, r7
 801753a:	bd80      	pop	{r7, pc}

0801753c <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 801753c:	b480      	push	{r7}
 801753e:	b083      	sub	sp, #12
 8017540:	af00      	add	r7, sp, #0
 8017542:	6078      	str	r0, [r7, #4]
 8017544:	460b      	mov	r3, r1
 8017546:	70fb      	strb	r3, [r7, #3]
  pcb->prio = prio;
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	78fa      	ldrb	r2, [r7, #3]
 801754c:	755a      	strb	r2, [r3, #21]
}
 801754e:	bf00      	nop
 8017550:	370c      	adds	r7, #12
 8017552:	46bd      	mov	sp, r7
 8017554:	bc80      	pop	{r7}
 8017556:	4770      	bx	lr

08017558 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8017558:	b580      	push	{r7, lr}
 801755a:	b084      	sub	sp, #16
 801755c:	af00      	add	r7, sp, #0
 801755e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8017560:	2003      	movs	r0, #3
 8017562:	f7fd fdf1 	bl	8015148 <memp_malloc>
 8017566:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8017568:	68fb      	ldr	r3, [r7, #12]
 801756a:	2b00      	cmp	r3, #0
 801756c:	d101      	bne.n	8017572 <tcp_seg_copy+0x1a>
    return NULL;
 801756e:	2300      	movs	r3, #0
 8017570:	e00a      	b.n	8017588 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8017572:	2210      	movs	r2, #16
 8017574:	6879      	ldr	r1, [r7, #4]
 8017576:	68f8      	ldr	r0, [r7, #12]
 8017578:	f00a fe81 	bl	802227e <memcpy>
  pbuf_ref(cseg->p);
 801757c:	68fb      	ldr	r3, [r7, #12]
 801757e:	685b      	ldr	r3, [r3, #4]
 8017580:	4618      	mov	r0, r3
 8017582:	f7fe fc39 	bl	8015df8 <pbuf_ref>
  return cseg;
 8017586:	68fb      	ldr	r3, [r7, #12]
}
 8017588:	4618      	mov	r0, r3
 801758a:	3710      	adds	r7, #16
 801758c:	46bd      	mov	sp, r7
 801758e:	bd80      	pop	{r7, pc}

08017590 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8017590:	b580      	push	{r7, lr}
 8017592:	b084      	sub	sp, #16
 8017594:	af00      	add	r7, sp, #0
 8017596:	60f8      	str	r0, [r7, #12]
 8017598:	60b9      	str	r1, [r7, #8]
 801759a:	607a      	str	r2, [r7, #4]
 801759c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	d009      	beq.n	80175b8 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	891b      	ldrh	r3, [r3, #8]
 80175a8:	4619      	mov	r1, r3
 80175aa:	68b8      	ldr	r0, [r7, #8]
 80175ac:	f7ff fb6a 	bl	8016c84 <tcp_recved>
    pbuf_free(p);
 80175b0:	6878      	ldr	r0, [r7, #4]
 80175b2:	f7fe fb77 	bl	8015ca4 <pbuf_free>
 80175b6:	e008      	b.n	80175ca <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 80175b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80175bc:	2b00      	cmp	r3, #0
 80175be:	d104      	bne.n	80175ca <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 80175c0:	68b8      	ldr	r0, [r7, #8]
 80175c2:	f7ff f8ef 	bl	80167a4 <tcp_close>
 80175c6:	4603      	mov	r3, r0
 80175c8:	e000      	b.n	80175cc <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 80175ca:	2300      	movs	r3, #0
}
 80175cc:	4618      	mov	r0, r3
 80175ce:	3710      	adds	r7, #16
 80175d0:	46bd      	mov	sp, r7
 80175d2:	bd80      	pop	{r7, pc}

080175d4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80175d4:	b580      	push	{r7, lr}
 80175d6:	b086      	sub	sp, #24
 80175d8:	af00      	add	r7, sp, #0
 80175da:	4603      	mov	r3, r0
 80175dc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80175de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	db01      	blt.n	80175ea <tcp_kill_prio+0x16>
 80175e6:	79fb      	ldrb	r3, [r7, #7]
 80175e8:	e000      	b.n	80175ec <tcp_kill_prio+0x18>
 80175ea:	237f      	movs	r3, #127	@ 0x7f
 80175ec:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 80175ee:	2300      	movs	r3, #0
 80175f0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80175f2:	2300      	movs	r3, #0
 80175f4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80175f6:	4b16      	ldr	r3, [pc, #88]	@ (8017650 <tcp_kill_prio+0x7c>)
 80175f8:	681b      	ldr	r3, [r3, #0]
 80175fa:	617b      	str	r3, [r7, #20]
 80175fc:	e01a      	b.n	8017634 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 80175fe:	697b      	ldr	r3, [r7, #20]
 8017600:	7d5b      	ldrb	r3, [r3, #21]
 8017602:	7afa      	ldrb	r2, [r7, #11]
 8017604:	429a      	cmp	r2, r3
 8017606:	d312      	bcc.n	801762e <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017608:	4b12      	ldr	r3, [pc, #72]	@ (8017654 <tcp_kill_prio+0x80>)
 801760a:	681a      	ldr	r2, [r3, #0]
 801760c:	697b      	ldr	r3, [r7, #20]
 801760e:	6a1b      	ldr	r3, [r3, #32]
 8017610:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 8017612:	68fa      	ldr	r2, [r7, #12]
 8017614:	429a      	cmp	r2, r3
 8017616:	d80a      	bhi.n	801762e <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 8017618:	4b0e      	ldr	r3, [pc, #56]	@ (8017654 <tcp_kill_prio+0x80>)
 801761a:	681a      	ldr	r2, [r3, #0]
 801761c:	697b      	ldr	r3, [r7, #20]
 801761e:	6a1b      	ldr	r3, [r3, #32]
 8017620:	1ad3      	subs	r3, r2, r3
 8017622:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8017624:	697b      	ldr	r3, [r7, #20]
 8017626:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 8017628:	697b      	ldr	r3, [r7, #20]
 801762a:	7d5b      	ldrb	r3, [r3, #21]
 801762c:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801762e:	697b      	ldr	r3, [r7, #20]
 8017630:	68db      	ldr	r3, [r3, #12]
 8017632:	617b      	str	r3, [r7, #20]
 8017634:	697b      	ldr	r3, [r7, #20]
 8017636:	2b00      	cmp	r3, #0
 8017638:	d1e1      	bne.n	80175fe <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 801763a:	693b      	ldr	r3, [r7, #16]
 801763c:	2b00      	cmp	r3, #0
 801763e:	d002      	beq.n	8017646 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8017640:	6938      	ldr	r0, [r7, #16]
 8017642:	f7ff f979 	bl	8016938 <tcp_abort>
  }
}
 8017646:	bf00      	nop
 8017648:	3718      	adds	r7, #24
 801764a:	46bd      	mov	sp, r7
 801764c:	bd80      	pop	{r7, pc}
 801764e:	bf00      	nop
 8017650:	2000c02c 	.word	0x2000c02c
 8017654:	2000c020 	.word	0x2000c020

08017658 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8017658:	b580      	push	{r7, lr}
 801765a:	b086      	sub	sp, #24
 801765c:	af00      	add	r7, sp, #0
 801765e:	4603      	mov	r3, r0
 8017660:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8017662:	79fb      	ldrb	r3, [r7, #7]
 8017664:	2b08      	cmp	r3, #8
 8017666:	d009      	beq.n	801767c <tcp_kill_state+0x24>
 8017668:	79fb      	ldrb	r3, [r7, #7]
 801766a:	2b09      	cmp	r3, #9
 801766c:	d006      	beq.n	801767c <tcp_kill_state+0x24>
 801766e:	4b1a      	ldr	r3, [pc, #104]	@ (80176d8 <tcp_kill_state+0x80>)
 8017670:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8017674:	4919      	ldr	r1, [pc, #100]	@ (80176dc <tcp_kill_state+0x84>)
 8017676:	481a      	ldr	r0, [pc, #104]	@ (80176e0 <tcp_kill_state+0x88>)
 8017678:	f00a fb06 	bl	8021c88 <iprintf>

  inactivity = 0;
 801767c:	2300      	movs	r3, #0
 801767e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8017680:	2300      	movs	r3, #0
 8017682:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017684:	4b17      	ldr	r3, [pc, #92]	@ (80176e4 <tcp_kill_state+0x8c>)
 8017686:	681b      	ldr	r3, [r3, #0]
 8017688:	617b      	str	r3, [r7, #20]
 801768a:	e017      	b.n	80176bc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801768c:	697b      	ldr	r3, [r7, #20]
 801768e:	7d1b      	ldrb	r3, [r3, #20]
 8017690:	79fa      	ldrb	r2, [r7, #7]
 8017692:	429a      	cmp	r2, r3
 8017694:	d10f      	bne.n	80176b6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017696:	4b14      	ldr	r3, [pc, #80]	@ (80176e8 <tcp_kill_state+0x90>)
 8017698:	681a      	ldr	r2, [r3, #0]
 801769a:	697b      	ldr	r3, [r7, #20]
 801769c:	6a1b      	ldr	r3, [r3, #32]
 801769e:	1ad3      	subs	r3, r2, r3
 80176a0:	68fa      	ldr	r2, [r7, #12]
 80176a2:	429a      	cmp	r2, r3
 80176a4:	d807      	bhi.n	80176b6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80176a6:	4b10      	ldr	r3, [pc, #64]	@ (80176e8 <tcp_kill_state+0x90>)
 80176a8:	681a      	ldr	r2, [r3, #0]
 80176aa:	697b      	ldr	r3, [r7, #20]
 80176ac:	6a1b      	ldr	r3, [r3, #32]
 80176ae:	1ad3      	subs	r3, r2, r3
 80176b0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80176b2:	697b      	ldr	r3, [r7, #20]
 80176b4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80176b6:	697b      	ldr	r3, [r7, #20]
 80176b8:	68db      	ldr	r3, [r3, #12]
 80176ba:	617b      	str	r3, [r7, #20]
 80176bc:	697b      	ldr	r3, [r7, #20]
 80176be:	2b00      	cmp	r3, #0
 80176c0:	d1e4      	bne.n	801768c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80176c2:	693b      	ldr	r3, [r7, #16]
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	d003      	beq.n	80176d0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80176c8:	2100      	movs	r1, #0
 80176ca:	6938      	ldr	r0, [r7, #16]
 80176cc:	f7ff f882 	bl	80167d4 <tcp_abandon>
  }
}
 80176d0:	bf00      	nop
 80176d2:	3718      	adds	r7, #24
 80176d4:	46bd      	mov	sp, r7
 80176d6:	bd80      	pop	{r7, pc}
 80176d8:	080260ac 	.word	0x080260ac
 80176dc:	080263bc 	.word	0x080263bc
 80176e0:	080260e8 	.word	0x080260e8
 80176e4:	2000c02c 	.word	0x2000c02c
 80176e8:	2000c020 	.word	0x2000c020

080176ec <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80176ec:	b580      	push	{r7, lr}
 80176ee:	b084      	sub	sp, #16
 80176f0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80176f2:	2300      	movs	r3, #0
 80176f4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80176f6:	2300      	movs	r3, #0
 80176f8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80176fa:	4b12      	ldr	r3, [pc, #72]	@ (8017744 <tcp_kill_timewait+0x58>)
 80176fc:	681b      	ldr	r3, [r3, #0]
 80176fe:	60fb      	str	r3, [r7, #12]
 8017700:	e012      	b.n	8017728 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017702:	4b11      	ldr	r3, [pc, #68]	@ (8017748 <tcp_kill_timewait+0x5c>)
 8017704:	681a      	ldr	r2, [r3, #0]
 8017706:	68fb      	ldr	r3, [r7, #12]
 8017708:	6a1b      	ldr	r3, [r3, #32]
 801770a:	1ad3      	subs	r3, r2, r3
 801770c:	687a      	ldr	r2, [r7, #4]
 801770e:	429a      	cmp	r2, r3
 8017710:	d807      	bhi.n	8017722 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8017712:	4b0d      	ldr	r3, [pc, #52]	@ (8017748 <tcp_kill_timewait+0x5c>)
 8017714:	681a      	ldr	r2, [r3, #0]
 8017716:	68fb      	ldr	r3, [r7, #12]
 8017718:	6a1b      	ldr	r3, [r3, #32]
 801771a:	1ad3      	subs	r3, r2, r3
 801771c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801771e:	68fb      	ldr	r3, [r7, #12]
 8017720:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017722:	68fb      	ldr	r3, [r7, #12]
 8017724:	68db      	ldr	r3, [r3, #12]
 8017726:	60fb      	str	r3, [r7, #12]
 8017728:	68fb      	ldr	r3, [r7, #12]
 801772a:	2b00      	cmp	r3, #0
 801772c:	d1e9      	bne.n	8017702 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801772e:	68bb      	ldr	r3, [r7, #8]
 8017730:	2b00      	cmp	r3, #0
 8017732:	d002      	beq.n	801773a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8017734:	68b8      	ldr	r0, [r7, #8]
 8017736:	f7ff f8ff 	bl	8016938 <tcp_abort>
  }
}
 801773a:	bf00      	nop
 801773c:	3710      	adds	r7, #16
 801773e:	46bd      	mov	sp, r7
 8017740:	bd80      	pop	{r7, pc}
 8017742:	bf00      	nop
 8017744:	2000c030 	.word	0x2000c030
 8017748:	2000c020 	.word	0x2000c020

0801774c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801774c:	b580      	push	{r7, lr}
 801774e:	b084      	sub	sp, #16
 8017750:	af00      	add	r7, sp, #0
 8017752:	4603      	mov	r3, r0
 8017754:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017756:	2001      	movs	r0, #1
 8017758:	f7fd fcf6 	bl	8015148 <memp_malloc>
 801775c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801775e:	68fb      	ldr	r3, [r7, #12]
 8017760:	2b00      	cmp	r3, #0
 8017762:	d14c      	bne.n	80177fe <tcp_alloc+0xb2>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8017764:	f7ff ffc2 	bl	80176ec <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017768:	2001      	movs	r0, #1
 801776a:	f7fd fced 	bl	8015148 <memp_malloc>
 801776e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8017770:	68fb      	ldr	r3, [r7, #12]
 8017772:	2b00      	cmp	r3, #0
 8017774:	d139      	bne.n	80177ea <tcp_alloc+0x9e>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8017776:	2009      	movs	r0, #9
 8017778:	f7ff ff6e 	bl	8017658 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801777c:	2001      	movs	r0, #1
 801777e:	f7fd fce3 	bl	8015148 <memp_malloc>
 8017782:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8017784:	68fb      	ldr	r3, [r7, #12]
 8017786:	2b00      	cmp	r3, #0
 8017788:	d125      	bne.n	80177d6 <tcp_alloc+0x8a>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801778a:	2008      	movs	r0, #8
 801778c:	f7ff ff64 	bl	8017658 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017790:	2001      	movs	r0, #1
 8017792:	f7fd fcd9 	bl	8015148 <memp_malloc>
 8017796:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8017798:	68fb      	ldr	r3, [r7, #12]
 801779a:	2b00      	cmp	r3, #0
 801779c:	d111      	bne.n	80177c2 <tcp_alloc+0x76>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801779e:	79fb      	ldrb	r3, [r7, #7]
 80177a0:	4618      	mov	r0, r3
 80177a2:	f7ff ff17 	bl	80175d4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80177a6:	2001      	movs	r0, #1
 80177a8:	f7fd fcce 	bl	8015148 <memp_malloc>
 80177ac:	60f8      	str	r0, [r7, #12]
          if (pcb != NULL) {
 80177ae:	68fb      	ldr	r3, [r7, #12]
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	d006      	beq.n	80177c2 <tcp_alloc+0x76>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80177b4:	4b36      	ldr	r3, [pc, #216]	@ (8017890 <tcp_alloc+0x144>)
 80177b6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80177ba:	881a      	ldrh	r2, [r3, #0]
 80177bc:	3a01      	subs	r2, #1
 80177be:	b292      	uxth	r2, r2
 80177c0:	801a      	strh	r2, [r3, #0]
          }
        }
        if (pcb != NULL) {
 80177c2:	68fb      	ldr	r3, [r7, #12]
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d006      	beq.n	80177d6 <tcp_alloc+0x8a>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80177c8:	4b31      	ldr	r3, [pc, #196]	@ (8017890 <tcp_alloc+0x144>)
 80177ca:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80177ce:	881a      	ldrh	r2, [r3, #0]
 80177d0:	3a01      	subs	r2, #1
 80177d2:	b292      	uxth	r2, r2
 80177d4:	801a      	strh	r2, [r3, #0]
        }
      }
      if (pcb != NULL) {
 80177d6:	68fb      	ldr	r3, [r7, #12]
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d006      	beq.n	80177ea <tcp_alloc+0x9e>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80177dc:	4b2c      	ldr	r3, [pc, #176]	@ (8017890 <tcp_alloc+0x144>)
 80177de:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80177e2:	881a      	ldrh	r2, [r3, #0]
 80177e4:	3a01      	subs	r2, #1
 80177e6:	b292      	uxth	r2, r2
 80177e8:	801a      	strh	r2, [r3, #0]
      }
    }
    if (pcb != NULL) {
 80177ea:	68fb      	ldr	r3, [r7, #12]
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	d006      	beq.n	80177fe <tcp_alloc+0xb2>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80177f0:	4b27      	ldr	r3, [pc, #156]	@ (8017890 <tcp_alloc+0x144>)
 80177f2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80177f6:	881a      	ldrh	r2, [r3, #0]
 80177f8:	3a01      	subs	r2, #1
 80177fa:	b292      	uxth	r2, r2
 80177fc:	801a      	strh	r2, [r3, #0]
    }
  }
  if (pcb != NULL) {
 80177fe:	68fb      	ldr	r3, [r7, #12]
 8017800:	2b00      	cmp	r3, #0
 8017802:	d03f      	beq.n	8017884 <tcp_alloc+0x138>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8017804:	2298      	movs	r2, #152	@ 0x98
 8017806:	2100      	movs	r1, #0
 8017808:	68f8      	ldr	r0, [r7, #12]
 801780a:	f00a fc13 	bl	8022034 <memset>
    pcb->prio = prio;
 801780e:	68fb      	ldr	r3, [r7, #12]
 8017810:	79fa      	ldrb	r2, [r7, #7]
 8017812:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8017814:	68fb      	ldr	r3, [r7, #12]
 8017816:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 801781a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801781e:	68fb      	ldr	r3, [r7, #12]
 8017820:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8017824:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8017826:	68fb      	ldr	r3, [r7, #12]
 8017828:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801782a:	68fb      	ldr	r3, [r7, #12]
 801782c:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 801782e:	68fb      	ldr	r3, [r7, #12]
 8017830:	22ff      	movs	r2, #255	@ 0xff
 8017832:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8017834:	68fb      	ldr	r3, [r7, #12]
 8017836:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801783a:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801783c:	68fb      	ldr	r3, [r7, #12]
 801783e:	2206      	movs	r2, #6
 8017840:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8017844:	68fb      	ldr	r3, [r7, #12]
 8017846:	2206      	movs	r2, #6
 8017848:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 801784a:	68fb      	ldr	r3, [r7, #12]
 801784c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017850:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8017852:	68fb      	ldr	r3, [r7, #12]
 8017854:	2201      	movs	r2, #1
 8017856:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 801785a:	4b0e      	ldr	r3, [pc, #56]	@ (8017894 <tcp_alloc+0x148>)
 801785c:	681a      	ldr	r2, [r3, #0]
 801785e:	68fb      	ldr	r3, [r7, #12]
 8017860:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8017862:	4b0d      	ldr	r3, [pc, #52]	@ (8017898 <tcp_alloc+0x14c>)
 8017864:	781a      	ldrb	r2, [r3, #0]
 8017866:	68fb      	ldr	r3, [r7, #12]
 8017868:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801786a:	68fb      	ldr	r3, [r7, #12]
 801786c:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8017870:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8017874:	68fb      	ldr	r3, [r7, #12]
 8017876:	4a09      	ldr	r2, [pc, #36]	@ (801789c <tcp_alloc+0x150>)
 8017878:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801787c:	68fb      	ldr	r3, [r7, #12]
 801787e:	4a08      	ldr	r2, [pc, #32]	@ (80178a0 <tcp_alloc+0x154>)
 8017880:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8017884:	68fb      	ldr	r3, [r7, #12]
}
 8017886:	4618      	mov	r0, r3
 8017888:	3710      	adds	r7, #16
 801788a:	46bd      	mov	sp, r7
 801788c:	bd80      	pop	{r7, pc}
 801788e:	bf00      	nop
 8017890:	2000be88 	.word	0x2000be88
 8017894:	2000c020 	.word	0x2000c020
 8017898:	2000c036 	.word	0x2000c036
 801789c:	08017591 	.word	0x08017591
 80178a0:	006ddd00 	.word	0x006ddd00

080178a4 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80178a4:	b580      	push	{r7, lr}
 80178a6:	b084      	sub	sp, #16
 80178a8:	af00      	add	r7, sp, #0
 80178aa:	4603      	mov	r3, r0
 80178ac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80178ae:	2040      	movs	r0, #64	@ 0x40
 80178b0:	f7ff ff4c 	bl	801774c <tcp_alloc>
 80178b4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80178b6:	68fb      	ldr	r3, [r7, #12]
}
 80178b8:	4618      	mov	r0, r3
 80178ba:	3710      	adds	r7, #16
 80178bc:	46bd      	mov	sp, r7
 80178be:	bd80      	pop	{r7, pc}

080178c0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80178c0:	b480      	push	{r7}
 80178c2:	b083      	sub	sp, #12
 80178c4:	af00      	add	r7, sp, #0
 80178c6:	6078      	str	r0, [r7, #4]
 80178c8:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	2b00      	cmp	r3, #0
 80178ce:	d002      	beq.n	80178d6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	683a      	ldr	r2, [r7, #0]
 80178d4:	611a      	str	r2, [r3, #16]
  }
}
 80178d6:	bf00      	nop
 80178d8:	370c      	adds	r7, #12
 80178da:	46bd      	mov	sp, r7
 80178dc:	bc80      	pop	{r7}
 80178de:	4770      	bx	lr

080178e0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80178e0:	b580      	push	{r7, lr}
 80178e2:	b082      	sub	sp, #8
 80178e4:	af00      	add	r7, sp, #0
 80178e6:	6078      	str	r0, [r7, #4]
 80178e8:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d00e      	beq.n	801790e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	7d1b      	ldrb	r3, [r3, #20]
 80178f4:	2b01      	cmp	r3, #1
 80178f6:	d106      	bne.n	8017906 <tcp_recv+0x26>
 80178f8:	4b07      	ldr	r3, [pc, #28]	@ (8017918 <tcp_recv+0x38>)
 80178fa:	f240 62bb 	movw	r2, #1723	@ 0x6bb
 80178fe:	4907      	ldr	r1, [pc, #28]	@ (801791c <tcp_recv+0x3c>)
 8017900:	4807      	ldr	r0, [pc, #28]	@ (8017920 <tcp_recv+0x40>)
 8017902:	f00a f9c1 	bl	8021c88 <iprintf>
    pcb->recv = recv;
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	683a      	ldr	r2, [r7, #0]
 801790a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 801790e:	bf00      	nop
 8017910:	3708      	adds	r7, #8
 8017912:	46bd      	mov	sp, r7
 8017914:	bd80      	pop	{r7, pc}
 8017916:	bf00      	nop
 8017918:	080260ac 	.word	0x080260ac
 801791c:	080263cc 	.word	0x080263cc
 8017920:	080260e8 	.word	0x080260e8

08017924 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8017924:	b580      	push	{r7, lr}
 8017926:	b082      	sub	sp, #8
 8017928:	af00      	add	r7, sp, #0
 801792a:	6078      	str	r0, [r7, #4]
 801792c:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	2b00      	cmp	r3, #0
 8017932:	d00d      	beq.n	8017950 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	7d1b      	ldrb	r3, [r3, #20]
 8017938:	2b01      	cmp	r3, #1
 801793a:	d106      	bne.n	801794a <tcp_sent+0x26>
 801793c:	4b06      	ldr	r3, [pc, #24]	@ (8017958 <tcp_sent+0x34>)
 801793e:	f240 62cc 	movw	r2, #1740	@ 0x6cc
 8017942:	4906      	ldr	r1, [pc, #24]	@ (801795c <tcp_sent+0x38>)
 8017944:	4806      	ldr	r0, [pc, #24]	@ (8017960 <tcp_sent+0x3c>)
 8017946:	f00a f99f 	bl	8021c88 <iprintf>
    pcb->sent = sent;
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	683a      	ldr	r2, [r7, #0]
 801794e:	67da      	str	r2, [r3, #124]	@ 0x7c
  }
}
 8017950:	bf00      	nop
 8017952:	3708      	adds	r7, #8
 8017954:	46bd      	mov	sp, r7
 8017956:	bd80      	pop	{r7, pc}
 8017958:	080260ac 	.word	0x080260ac
 801795c:	080263f4 	.word	0x080263f4
 8017960:	080260e8 	.word	0x080260e8

08017964 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8017964:	b580      	push	{r7, lr}
 8017966:	b082      	sub	sp, #8
 8017968:	af00      	add	r7, sp, #0
 801796a:	6078      	str	r0, [r7, #4]
 801796c:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	2b00      	cmp	r3, #0
 8017972:	d00e      	beq.n	8017992 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8017974:	687b      	ldr	r3, [r7, #4]
 8017976:	7d1b      	ldrb	r3, [r3, #20]
 8017978:	2b01      	cmp	r3, #1
 801797a:	d106      	bne.n	801798a <tcp_err+0x26>
 801797c:	4b07      	ldr	r3, [pc, #28]	@ (801799c <tcp_err+0x38>)
 801797e:	f44f 62dc 	mov.w	r2, #1760	@ 0x6e0
 8017982:	4907      	ldr	r1, [pc, #28]	@ (80179a0 <tcp_err+0x3c>)
 8017984:	4807      	ldr	r0, [pc, #28]	@ (80179a4 <tcp_err+0x40>)
 8017986:	f00a f97f 	bl	8021c88 <iprintf>
    pcb->errf = err;
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	683a      	ldr	r2, [r7, #0]
 801798e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }
}
 8017992:	bf00      	nop
 8017994:	3708      	adds	r7, #8
 8017996:	46bd      	mov	sp, r7
 8017998:	bd80      	pop	{r7, pc}
 801799a:	bf00      	nop
 801799c:	080260ac 	.word	0x080260ac
 80179a0:	0802641c 	.word	0x0802641c
 80179a4:	080260e8 	.word	0x080260e8

080179a8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80179a8:	b480      	push	{r7}
 80179aa:	b085      	sub	sp, #20
 80179ac:	af00      	add	r7, sp, #0
 80179ae:	6078      	str	r0, [r7, #4]
 80179b0:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	2b00      	cmp	r3, #0
 80179b6:	d008      	beq.n	80179ca <tcp_accept+0x22>
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	7d1b      	ldrb	r3, [r3, #20]
 80179bc:	2b01      	cmp	r3, #1
 80179be:	d104      	bne.n	80179ca <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80179c4:	68fb      	ldr	r3, [r7, #12]
 80179c6:	683a      	ldr	r2, [r7, #0]
 80179c8:	619a      	str	r2, [r3, #24]
  }
}
 80179ca:	bf00      	nop
 80179cc:	3714      	adds	r7, #20
 80179ce:	46bd      	mov	sp, r7
 80179d0:	bc80      	pop	{r7}
 80179d2:	4770      	bx	lr

080179d4 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80179d4:	b580      	push	{r7, lr}
 80179d6:	b084      	sub	sp, #16
 80179d8:	af00      	add	r7, sp, #0
 80179da:	60f8      	str	r0, [r7, #12]
 80179dc:	60b9      	str	r1, [r7, #8]
 80179de:	4613      	mov	r3, r2
 80179e0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80179e2:	68fb      	ldr	r3, [r7, #12]
 80179e4:	7d1b      	ldrb	r3, [r3, #20]
 80179e6:	2b01      	cmp	r3, #1
 80179e8:	d106      	bne.n	80179f8 <tcp_poll+0x24>
 80179ea:	4b09      	ldr	r3, [pc, #36]	@ (8017a10 <tcp_poll+0x3c>)
 80179ec:	f240 7203 	movw	r2, #1795	@ 0x703
 80179f0:	4908      	ldr	r1, [pc, #32]	@ (8017a14 <tcp_poll+0x40>)
 80179f2:	4809      	ldr	r0, [pc, #36]	@ (8017a18 <tcp_poll+0x44>)
 80179f4:	f00a f948 	bl	8021c88 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80179f8:	68fb      	ldr	r3, [r7, #12]
 80179fa:	68ba      	ldr	r2, [r7, #8]
 80179fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8017a00:	68fb      	ldr	r3, [r7, #12]
 8017a02:	79fa      	ldrb	r2, [r7, #7]
 8017a04:	771a      	strb	r2, [r3, #28]
}
 8017a06:	bf00      	nop
 8017a08:	3710      	adds	r7, #16
 8017a0a:	46bd      	mov	sp, r7
 8017a0c:	bd80      	pop	{r7, pc}
 8017a0e:	bf00      	nop
 8017a10:	080260ac 	.word	0x080260ac
 8017a14:	08026444 	.word	0x08026444
 8017a18:	080260e8 	.word	0x080260e8

08017a1c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8017a1c:	b580      	push	{r7, lr}
 8017a1e:	b082      	sub	sp, #8
 8017a20:	af00      	add	r7, sp, #0
 8017a22:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	7d1b      	ldrb	r3, [r3, #20]
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	d034      	beq.n	8017a96 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8017a30:	2b0a      	cmp	r3, #10
 8017a32:	d030      	beq.n	8017a96 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 8017a38:	2b01      	cmp	r3, #1
 8017a3a:	d02c      	beq.n	8017a96 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	d007      	beq.n	8017a54 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017a48:	4618      	mov	r0, r3
 8017a4a:	f7fe f92b 	bl	8015ca4 <pbuf_free>
      pcb->refused_data = NULL;
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	2200      	movs	r2, #0
 8017a52:	675a      	str	r2, [r3, #116]	@ 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017a58:	4618      	mov	r0, r3
 8017a5a:	f7ff fd42 	bl	80174e2 <tcp_segs_free>
    pcb->ooseq = NULL;
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	2200      	movs	r2, #0
 8017a62:	671a      	str	r2, [r3, #112]	@ 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017a6a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017a70:	4618      	mov	r0, r3
 8017a72:	f7ff fd36 	bl	80174e2 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017a7a:	4618      	mov	r0, r3
 8017a7c:	f7ff fd31 	bl	80174e2 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	2200      	movs	r2, #0
 8017a84:	669a      	str	r2, [r3, #104]	@ 0x68
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8017a8e:	687b      	ldr	r3, [r7, #4]
 8017a90:	2200      	movs	r2, #0
 8017a92:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
#endif /* TCP_OVERSIZE */
  }
}
 8017a96:	bf00      	nop
 8017a98:	3708      	adds	r7, #8
 8017a9a:	46bd      	mov	sp, r7
 8017a9c:	bd80      	pop	{r7, pc}
	...

08017aa0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8017aa0:	b580      	push	{r7, lr}
 8017aa2:	b084      	sub	sp, #16
 8017aa4:	af00      	add	r7, sp, #0
 8017aa6:	6078      	str	r0, [r7, #4]
 8017aa8:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	681b      	ldr	r3, [r3, #0]
 8017aae:	683a      	ldr	r2, [r7, #0]
 8017ab0:	429a      	cmp	r2, r3
 8017ab2:	d105      	bne.n	8017ac0 <tcp_pcb_remove+0x20>
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	681b      	ldr	r3, [r3, #0]
 8017ab8:	68da      	ldr	r2, [r3, #12]
 8017aba:	687b      	ldr	r3, [r7, #4]
 8017abc:	601a      	str	r2, [r3, #0]
 8017abe:	e013      	b.n	8017ae8 <tcp_pcb_remove+0x48>
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	681b      	ldr	r3, [r3, #0]
 8017ac4:	60fb      	str	r3, [r7, #12]
 8017ac6:	e00c      	b.n	8017ae2 <tcp_pcb_remove+0x42>
 8017ac8:	68fb      	ldr	r3, [r7, #12]
 8017aca:	68db      	ldr	r3, [r3, #12]
 8017acc:	683a      	ldr	r2, [r7, #0]
 8017ace:	429a      	cmp	r2, r3
 8017ad0:	d104      	bne.n	8017adc <tcp_pcb_remove+0x3c>
 8017ad2:	683b      	ldr	r3, [r7, #0]
 8017ad4:	68da      	ldr	r2, [r3, #12]
 8017ad6:	68fb      	ldr	r3, [r7, #12]
 8017ad8:	60da      	str	r2, [r3, #12]
 8017ada:	e005      	b.n	8017ae8 <tcp_pcb_remove+0x48>
 8017adc:	68fb      	ldr	r3, [r7, #12]
 8017ade:	68db      	ldr	r3, [r3, #12]
 8017ae0:	60fb      	str	r3, [r7, #12]
 8017ae2:	68fb      	ldr	r3, [r7, #12]
 8017ae4:	2b00      	cmp	r3, #0
 8017ae6:	d1ef      	bne.n	8017ac8 <tcp_pcb_remove+0x28>
 8017ae8:	683b      	ldr	r3, [r7, #0]
 8017aea:	2200      	movs	r2, #0
 8017aec:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8017aee:	6838      	ldr	r0, [r7, #0]
 8017af0:	f7ff ff94 	bl	8017a1c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8017af4:	683b      	ldr	r3, [r7, #0]
 8017af6:	7d1b      	ldrb	r3, [r3, #20]
 8017af8:	2b0a      	cmp	r3, #10
 8017afa:	d013      	beq.n	8017b24 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 8017afc:	683b      	ldr	r3, [r7, #0]
 8017afe:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 8017b00:	2b01      	cmp	r3, #1
 8017b02:	d00f      	beq.n	8017b24 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 8017b04:	683b      	ldr	r3, [r7, #0]
 8017b06:	7e9b      	ldrb	r3, [r3, #26]
 8017b08:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 8017b0c:	2b00      	cmp	r3, #0
 8017b0e:	d009      	beq.n	8017b24 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 8017b10:	683b      	ldr	r3, [r7, #0]
 8017b12:	7e9b      	ldrb	r3, [r3, #26]
 8017b14:	f043 0302 	orr.w	r3, r3, #2
 8017b18:	b2da      	uxtb	r2, r3
 8017b1a:	683b      	ldr	r3, [r7, #0]
 8017b1c:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8017b1e:	6838      	ldr	r0, [r7, #0]
 8017b20:	f003 fa6a 	bl	801aff8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8017b24:	683b      	ldr	r3, [r7, #0]
 8017b26:	7d1b      	ldrb	r3, [r3, #20]
 8017b28:	2b01      	cmp	r3, #1
 8017b2a:	d020      	beq.n	8017b6e <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8017b2c:	683b      	ldr	r3, [r7, #0]
 8017b2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017b30:	2b00      	cmp	r3, #0
 8017b32:	d006      	beq.n	8017b42 <tcp_pcb_remove+0xa2>
 8017b34:	4b13      	ldr	r3, [pc, #76]	@ (8017b84 <tcp_pcb_remove+0xe4>)
 8017b36:	f240 7253 	movw	r2, #1875	@ 0x753
 8017b3a:	4913      	ldr	r1, [pc, #76]	@ (8017b88 <tcp_pcb_remove+0xe8>)
 8017b3c:	4813      	ldr	r0, [pc, #76]	@ (8017b8c <tcp_pcb_remove+0xec>)
 8017b3e:	f00a f8a3 	bl	8021c88 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8017b42:	683b      	ldr	r3, [r7, #0]
 8017b44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	d006      	beq.n	8017b58 <tcp_pcb_remove+0xb8>
 8017b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8017b84 <tcp_pcb_remove+0xe4>)
 8017b4c:	f240 7254 	movw	r2, #1876	@ 0x754
 8017b50:	490f      	ldr	r1, [pc, #60]	@ (8017b90 <tcp_pcb_remove+0xf0>)
 8017b52:	480e      	ldr	r0, [pc, #56]	@ (8017b8c <tcp_pcb_remove+0xec>)
 8017b54:	f00a f898 	bl	8021c88 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8017b58:	683b      	ldr	r3, [r7, #0]
 8017b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017b5c:	2b00      	cmp	r3, #0
 8017b5e:	d006      	beq.n	8017b6e <tcp_pcb_remove+0xce>
 8017b60:	4b08      	ldr	r3, [pc, #32]	@ (8017b84 <tcp_pcb_remove+0xe4>)
 8017b62:	f240 7256 	movw	r2, #1878	@ 0x756
 8017b66:	490b      	ldr	r1, [pc, #44]	@ (8017b94 <tcp_pcb_remove+0xf4>)
 8017b68:	4808      	ldr	r0, [pc, #32]	@ (8017b8c <tcp_pcb_remove+0xec>)
 8017b6a:	f00a f88d 	bl	8021c88 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8017b6e:	683b      	ldr	r3, [r7, #0]
 8017b70:	2200      	movs	r2, #0
 8017b72:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8017b74:	683b      	ldr	r3, [r7, #0]
 8017b76:	2200      	movs	r2, #0
 8017b78:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8017b7a:	bf00      	nop
 8017b7c:	3710      	adds	r7, #16
 8017b7e:	46bd      	mov	sp, r7
 8017b80:	bd80      	pop	{r7, pc}
 8017b82:	bf00      	nop
 8017b84:	080260ac 	.word	0x080260ac
 8017b88:	08026464 	.word	0x08026464
 8017b8c:	080260e8 	.word	0x080260e8
 8017b90:	0802647c 	.word	0x0802647c
 8017b94:	08026498 	.word	0x08026498

08017b98 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8017b98:	b480      	push	{r7}
 8017b9a:	b083      	sub	sp, #12
 8017b9c:	af00      	add	r7, sp, #0
 8017b9e:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8017ba0:	4b06      	ldr	r3, [pc, #24]	@ (8017bbc <tcp_next_iss+0x24>)
 8017ba2:	681a      	ldr	r2, [r3, #0]
 8017ba4:	4b06      	ldr	r3, [pc, #24]	@ (8017bc0 <tcp_next_iss+0x28>)
 8017ba6:	681b      	ldr	r3, [r3, #0]
 8017ba8:	4413      	add	r3, r2
 8017baa:	4a04      	ldr	r2, [pc, #16]	@ (8017bbc <tcp_next_iss+0x24>)
 8017bac:	6013      	str	r3, [r2, #0]
  return iss;
 8017bae:	4b03      	ldr	r3, [pc, #12]	@ (8017bbc <tcp_next_iss+0x24>)
 8017bb0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8017bb2:	4618      	mov	r0, r3
 8017bb4:	370c      	adds	r7, #12
 8017bb6:	46bd      	mov	sp, r7
 8017bb8:	bc80      	pop	{r7}
 8017bba:	4770      	bx	lr
 8017bbc:	20000120 	.word	0x20000120
 8017bc0:	2000c020 	.word	0x2000c020

08017bc4 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 8017bc4:	b580      	push	{r7, lr}
 8017bc6:	b084      	sub	sp, #16
 8017bc8:	af00      	add	r7, sp, #0
 8017bca:	4603      	mov	r3, r0
 8017bcc:	6039      	str	r1, [r7, #0]
 8017bce:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 8017bd0:	6838      	ldr	r0, [r7, #0]
 8017bd2:	f007 fda9 	bl	801f728 <ip4_route>
 8017bd6:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8017bd8:	68fb      	ldr	r3, [r7, #12]
 8017bda:	2b00      	cmp	r3, #0
 8017bdc:	d101      	bne.n	8017be2 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 8017bde:	88fb      	ldrh	r3, [r7, #6]
 8017be0:	e010      	b.n	8017c04 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 8017be2:	68fb      	ldr	r3, [r7, #12]
 8017be4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017be6:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8017be8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	d008      	beq.n	8017c02 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8017bf0:	897b      	ldrh	r3, [r7, #10]
 8017bf2:	3b28      	subs	r3, #40	@ 0x28
 8017bf4:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8017bf6:	893a      	ldrh	r2, [r7, #8]
 8017bf8:	88fb      	ldrh	r3, [r7, #6]
 8017bfa:	4293      	cmp	r3, r2
 8017bfc:	bf28      	it	cs
 8017bfe:	4613      	movcs	r3, r2
 8017c00:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 8017c02:	88fb      	ldrh	r3, [r7, #6]
}
 8017c04:	4618      	mov	r0, r3
 8017c06:	3710      	adds	r7, #16
 8017c08:	46bd      	mov	sp, r7
 8017c0a:	bd80      	pop	{r7, pc}

08017c0c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8017c0c:	b580      	push	{r7, lr}
 8017c0e:	b084      	sub	sp, #16
 8017c10:	af00      	add	r7, sp, #0
 8017c12:	6078      	str	r0, [r7, #4]
 8017c14:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8017c16:	683b      	ldr	r3, [r7, #0]
 8017c18:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8017c1a:	e011      	b.n	8017c40 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8017c1c:	68fb      	ldr	r3, [r7, #12]
 8017c1e:	681a      	ldr	r2, [r3, #0]
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	681b      	ldr	r3, [r3, #0]
 8017c24:	429a      	cmp	r2, r3
 8017c26:	d108      	bne.n	8017c3a <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8017c28:	68fb      	ldr	r3, [r7, #12]
 8017c2a:	68db      	ldr	r3, [r3, #12]
 8017c2c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8017c2e:	68f8      	ldr	r0, [r7, #12]
 8017c30:	f7fe fe82 	bl	8016938 <tcp_abort>
      pcb = next;
 8017c34:	68bb      	ldr	r3, [r7, #8]
 8017c36:	60fb      	str	r3, [r7, #12]
 8017c38:	e002      	b.n	8017c40 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 8017c3a:	68fb      	ldr	r3, [r7, #12]
 8017c3c:	68db      	ldr	r3, [r3, #12]
 8017c3e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8017c40:	68fb      	ldr	r3, [r7, #12]
 8017c42:	2b00      	cmp	r3, #0
 8017c44:	d1ea      	bne.n	8017c1c <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 8017c46:	bf00      	nop
 8017c48:	bf00      	nop
 8017c4a:	3710      	adds	r7, #16
 8017c4c:	46bd      	mov	sp, r7
 8017c4e:	bd80      	pop	{r7, pc}

08017c50 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8017c50:	b580      	push	{r7, lr}
 8017c52:	b084      	sub	sp, #16
 8017c54:	af00      	add	r7, sp, #0
 8017c56:	6078      	str	r0, [r7, #4]
 8017c58:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8017c5a:	687b      	ldr	r3, [r7, #4]
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	d02c      	beq.n	8017cba <tcp_netif_ip_addr_changed+0x6a>
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	681b      	ldr	r3, [r3, #0]
 8017c64:	2b00      	cmp	r3, #0
 8017c66:	d028      	beq.n	8017cba <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8017c68:	4b16      	ldr	r3, [pc, #88]	@ (8017cc4 <tcp_netif_ip_addr_changed+0x74>)
 8017c6a:	681b      	ldr	r3, [r3, #0]
 8017c6c:	4619      	mov	r1, r3
 8017c6e:	6878      	ldr	r0, [r7, #4]
 8017c70:	f7ff ffcc 	bl	8017c0c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8017c74:	4b14      	ldr	r3, [pc, #80]	@ (8017cc8 <tcp_netif_ip_addr_changed+0x78>)
 8017c76:	681b      	ldr	r3, [r3, #0]
 8017c78:	4619      	mov	r1, r3
 8017c7a:	6878      	ldr	r0, [r7, #4]
 8017c7c:	f7ff ffc6 	bl	8017c0c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8017c80:	683b      	ldr	r3, [r7, #0]
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	d019      	beq.n	8017cba <tcp_netif_ip_addr_changed+0x6a>
 8017c86:	683b      	ldr	r3, [r7, #0]
 8017c88:	681b      	ldr	r3, [r3, #0]
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	d015      	beq.n	8017cba <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8017c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8017ccc <tcp_netif_ip_addr_changed+0x7c>)
 8017c90:	681b      	ldr	r3, [r3, #0]
 8017c92:	60fb      	str	r3, [r7, #12]
 8017c94:	e00e      	b.n	8017cb4 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 8017c96:	68fb      	ldr	r3, [r7, #12]
 8017c98:	68db      	ldr	r3, [r3, #12]
 8017c9a:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8017c9c:	68fb      	ldr	r3, [r7, #12]
 8017c9e:	681a      	ldr	r2, [r3, #0]
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	681b      	ldr	r3, [r3, #0]
 8017ca4:	429a      	cmp	r2, r3
 8017ca6:	d103      	bne.n	8017cb0 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8017ca8:	683b      	ldr	r3, [r7, #0]
 8017caa:	681a      	ldr	r2, [r3, #0]
 8017cac:	68fb      	ldr	r3, [r7, #12]
 8017cae:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8017cb0:	68bb      	ldr	r3, [r7, #8]
 8017cb2:	60fb      	str	r3, [r7, #12]
 8017cb4:	68fb      	ldr	r3, [r7, #12]
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	d1ed      	bne.n	8017c96 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8017cba:	bf00      	nop
 8017cbc:	3710      	adds	r7, #16
 8017cbe:	46bd      	mov	sp, r7
 8017cc0:	bd80      	pop	{r7, pc}
 8017cc2:	bf00      	nop
 8017cc4:	2000c02c 	.word	0x2000c02c
 8017cc8:	2000c024 	.word	0x2000c024
 8017ccc:	2000c028 	.word	0x2000c028

08017cd0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8017cd0:	b590      	push	{r4, r7, lr}
 8017cd2:	b08b      	sub	sp, #44	@ 0x2c
 8017cd4:	af02      	add	r7, sp, #8
 8017cd6:	6078      	str	r0, [r7, #4]
 8017cd8:	6039      	str	r1, [r7, #0]

  LWIP_UNUSED_ARG(inp);

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 8017cda:	4b99      	ldr	r3, [pc, #612]	@ (8017f40 <tcp_input+0x270>)
 8017cdc:	f8b3 3092 	ldrh.w	r3, [r3, #146]	@ 0x92
 8017ce0:	3301      	adds	r3, #1
 8017ce2:	b29a      	uxth	r2, r3
 8017ce4:	4b96      	ldr	r3, [pc, #600]	@ (8017f40 <tcp_input+0x270>)
 8017ce6:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
  MIB2_STATS_INC(mib2.tcpinsegs);
 8017cea:	4b95      	ldr	r3, [pc, #596]	@ (8017f40 <tcp_input+0x270>)
 8017cec:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8017cf0:	3301      	adds	r3, #1
 8017cf2:	4a93      	ldr	r2, [pc, #588]	@ (8017f40 <tcp_input+0x270>)
 8017cf4:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  tcphdr = (struct tcp_hdr *)p->payload;
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	685b      	ldr	r3, [r3, #4]
 8017cfc:	4a91      	ldr	r2, [pc, #580]	@ (8017f44 <tcp_input+0x274>)
 8017cfe:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	895b      	ldrh	r3, [r3, #10]
 8017d04:	2b13      	cmp	r3, #19
 8017d06:	d808      	bhi.n	8017d1a <tcp_input+0x4a>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 8017d08:	4b8d      	ldr	r3, [pc, #564]	@ (8017f40 <tcp_input+0x270>)
 8017d0a:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8017d0e:	3301      	adds	r3, #1
 8017d10:	b29a      	uxth	r2, r3
 8017d12:	4b8b      	ldr	r3, [pc, #556]	@ (8017f40 <tcp_input+0x270>)
 8017d14:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
    goto dropped;
 8017d18:	e3e0      	b.n	80184dc <tcp_input+0x80c>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8017d1a:	4b8b      	ldr	r3, [pc, #556]	@ (8017f48 <tcp_input+0x278>)
 8017d1c:	695b      	ldr	r3, [r3, #20]
 8017d1e:	4a8a      	ldr	r2, [pc, #552]	@ (8017f48 <tcp_input+0x278>)
 8017d20:	6812      	ldr	r2, [r2, #0]
 8017d22:	4611      	mov	r1, r2
 8017d24:	4618      	mov	r0, r3
 8017d26:	f008 f863 	bl	801fdf0 <ip4_addr_isbroadcast_u32>
 8017d2a:	4603      	mov	r3, r0
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d105      	bne.n	8017d3c <tcp_input+0x6c>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8017d30:	4b85      	ldr	r3, [pc, #532]	@ (8017f48 <tcp_input+0x278>)
 8017d32:	695b      	ldr	r3, [r3, #20]
 8017d34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8017d38:	2be0      	cmp	r3, #224	@ 0xe0
 8017d3a:	d108      	bne.n	8017d4e <tcp_input+0x7e>
    TCP_STATS_INC(tcp.proterr);
 8017d3c:	4b80      	ldr	r3, [pc, #512]	@ (8017f40 <tcp_input+0x270>)
 8017d3e:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8017d42:	3301      	adds	r3, #1
 8017d44:	b29a      	uxth	r2, r3
 8017d46:	4b7e      	ldr	r3, [pc, #504]	@ (8017f40 <tcp_input+0x270>)
 8017d48:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
    goto dropped;
 8017d4c:	e3c6      	b.n	80184dc <tcp_input+0x80c>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 8017d4e:	4b7d      	ldr	r3, [pc, #500]	@ (8017f44 <tcp_input+0x274>)
 8017d50:	681b      	ldr	r3, [r3, #0]
 8017d52:	899b      	ldrh	r3, [r3, #12]
 8017d54:	b29b      	uxth	r3, r3
 8017d56:	4618      	mov	r0, r3
 8017d58:	f7fc fd4c 	bl	80147f4 <lwip_htons>
 8017d5c:	4603      	mov	r3, r0
 8017d5e:	0b1b      	lsrs	r3, r3, #12
 8017d60:	b29b      	uxth	r3, r3
 8017d62:	b2db      	uxtb	r3, r3
 8017d64:	009b      	lsls	r3, r3, #2
 8017d66:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8017d68:	7cbb      	ldrb	r3, [r7, #18]
 8017d6a:	2b13      	cmp	r3, #19
 8017d6c:	d905      	bls.n	8017d7a <tcp_input+0xaa>
 8017d6e:	7cbb      	ldrb	r3, [r7, #18]
 8017d70:	b29a      	uxth	r2, r3
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	891b      	ldrh	r3, [r3, #8]
 8017d76:	429a      	cmp	r2, r3
 8017d78:	d908      	bls.n	8017d8c <tcp_input+0xbc>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
 8017d7a:	4b71      	ldr	r3, [pc, #452]	@ (8017f40 <tcp_input+0x270>)
 8017d7c:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8017d80:	3301      	adds	r3, #1
 8017d82:	b29a      	uxth	r2, r3
 8017d84:	4b6e      	ldr	r3, [pc, #440]	@ (8017f40 <tcp_input+0x270>)
 8017d86:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
    goto dropped;
 8017d8a:	e3a7      	b.n	80184dc <tcp_input+0x80c>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8017d8c:	7cbb      	ldrb	r3, [r7, #18]
 8017d8e:	b29b      	uxth	r3, r3
 8017d90:	3b14      	subs	r3, #20
 8017d92:	b29a      	uxth	r2, r3
 8017d94:	4b6d      	ldr	r3, [pc, #436]	@ (8017f4c <tcp_input+0x27c>)
 8017d96:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8017d98:	4b6d      	ldr	r3, [pc, #436]	@ (8017f50 <tcp_input+0x280>)
 8017d9a:	2200      	movs	r2, #0
 8017d9c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8017d9e:	687b      	ldr	r3, [r7, #4]
 8017da0:	895a      	ldrh	r2, [r3, #10]
 8017da2:	7cbb      	ldrb	r3, [r7, #18]
 8017da4:	b29b      	uxth	r3, r3
 8017da6:	429a      	cmp	r2, r3
 8017da8:	d30d      	bcc.n	8017dc6 <tcp_input+0xf6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8017daa:	4b68      	ldr	r3, [pc, #416]	@ (8017f4c <tcp_input+0x27c>)
 8017dac:	881a      	ldrh	r2, [r3, #0]
 8017dae:	4b69      	ldr	r3, [pc, #420]	@ (8017f54 <tcp_input+0x284>)
 8017db0:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8017db2:	7cbb      	ldrb	r3, [r7, #18]
 8017db4:	b29b      	uxth	r3, r3
 8017db6:	425b      	negs	r3, r3
 8017db8:	b29b      	uxth	r3, r3
 8017dba:	b21b      	sxth	r3, r3
 8017dbc:	4619      	mov	r1, r3
 8017dbe:	6878      	ldr	r0, [r7, #4]
 8017dc0:	f7fd ff4c 	bl	8015c5c <pbuf_header>
 8017dc4:	e05d      	b.n	8017e82 <tcp_input+0x1b2>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8017dc6:	687b      	ldr	r3, [r7, #4]
 8017dc8:	681b      	ldr	r3, [r3, #0]
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	d105      	bne.n	8017dda <tcp_input+0x10a>
 8017dce:	4b62      	ldr	r3, [pc, #392]	@ (8017f58 <tcp_input+0x288>)
 8017dd0:	22b2      	movs	r2, #178	@ 0xb2
 8017dd2:	4962      	ldr	r1, [pc, #392]	@ (8017f5c <tcp_input+0x28c>)
 8017dd4:	4862      	ldr	r0, [pc, #392]	@ (8017f60 <tcp_input+0x290>)
 8017dd6:	f009 ff57 	bl	8021c88 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 8017dda:	f06f 0113 	mvn.w	r1, #19
 8017dde:	6878      	ldr	r0, [r7, #4]
 8017de0:	f7fd ff3c 	bl	8015c5c <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	895a      	ldrh	r2, [r3, #10]
 8017de8:	4b5a      	ldr	r3, [pc, #360]	@ (8017f54 <tcp_input+0x284>)
 8017dea:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8017dec:	4b57      	ldr	r3, [pc, #348]	@ (8017f4c <tcp_input+0x27c>)
 8017dee:	881a      	ldrh	r2, [r3, #0]
 8017df0:	4b58      	ldr	r3, [pc, #352]	@ (8017f54 <tcp_input+0x284>)
 8017df2:	881b      	ldrh	r3, [r3, #0]
 8017df4:	1ad3      	subs	r3, r2, r3
 8017df6:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8017df8:	4b56      	ldr	r3, [pc, #344]	@ (8017f54 <tcp_input+0x284>)
 8017dfa:	881b      	ldrh	r3, [r3, #0]
 8017dfc:	425b      	negs	r3, r3
 8017dfe:	b29b      	uxth	r3, r3
 8017e00:	b21b      	sxth	r3, r3
 8017e02:	4619      	mov	r1, r3
 8017e04:	6878      	ldr	r0, [r7, #4]
 8017e06:	f7fd ff29 	bl	8015c5c <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8017e0a:	687b      	ldr	r3, [r7, #4]
 8017e0c:	681b      	ldr	r3, [r3, #0]
 8017e0e:	895b      	ldrh	r3, [r3, #10]
 8017e10:	8a3a      	ldrh	r2, [r7, #16]
 8017e12:	429a      	cmp	r2, r3
 8017e14:	d908      	bls.n	8017e28 <tcp_input+0x158>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
 8017e16:	4b4a      	ldr	r3, [pc, #296]	@ (8017f40 <tcp_input+0x270>)
 8017e18:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8017e1c:	3301      	adds	r3, #1
 8017e1e:	b29a      	uxth	r2, r3
 8017e20:	4b47      	ldr	r3, [pc, #284]	@ (8017f40 <tcp_input+0x270>)
 8017e22:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
      goto dropped;
 8017e26:	e359      	b.n	80184dc <tcp_input+0x80c>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	681b      	ldr	r3, [r3, #0]
 8017e2c:	685b      	ldr	r3, [r3, #4]
 8017e2e:	4a48      	ldr	r2, [pc, #288]	@ (8017f50 <tcp_input+0x280>)
 8017e30:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 8017e32:	687b      	ldr	r3, [r7, #4]
 8017e34:	681a      	ldr	r2, [r3, #0]
 8017e36:	8a3b      	ldrh	r3, [r7, #16]
 8017e38:	425b      	negs	r3, r3
 8017e3a:	b29b      	uxth	r3, r3
 8017e3c:	b21b      	sxth	r3, r3
 8017e3e:	4619      	mov	r1, r3
 8017e40:	4610      	mov	r0, r2
 8017e42:	f7fd ff0b 	bl	8015c5c <pbuf_header>
    p->tot_len -= opt2len;
 8017e46:	687b      	ldr	r3, [r7, #4]
 8017e48:	891a      	ldrh	r2, [r3, #8]
 8017e4a:	8a3b      	ldrh	r3, [r7, #16]
 8017e4c:	1ad3      	subs	r3, r2, r3
 8017e4e:	b29a      	uxth	r2, r3
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8017e54:	687b      	ldr	r3, [r7, #4]
 8017e56:	895b      	ldrh	r3, [r3, #10]
 8017e58:	2b00      	cmp	r3, #0
 8017e5a:	d005      	beq.n	8017e68 <tcp_input+0x198>
 8017e5c:	4b3e      	ldr	r3, [pc, #248]	@ (8017f58 <tcp_input+0x288>)
 8017e5e:	22cf      	movs	r2, #207	@ 0xcf
 8017e60:	4940      	ldr	r1, [pc, #256]	@ (8017f64 <tcp_input+0x294>)
 8017e62:	483f      	ldr	r0, [pc, #252]	@ (8017f60 <tcp_input+0x290>)
 8017e64:	f009 ff10 	bl	8021c88 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8017e68:	687b      	ldr	r3, [r7, #4]
 8017e6a:	891a      	ldrh	r2, [r3, #8]
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	681b      	ldr	r3, [r3, #0]
 8017e70:	891b      	ldrh	r3, [r3, #8]
 8017e72:	429a      	cmp	r2, r3
 8017e74:	d005      	beq.n	8017e82 <tcp_input+0x1b2>
 8017e76:	4b38      	ldr	r3, [pc, #224]	@ (8017f58 <tcp_input+0x288>)
 8017e78:	22d0      	movs	r2, #208	@ 0xd0
 8017e7a:	493b      	ldr	r1, [pc, #236]	@ (8017f68 <tcp_input+0x298>)
 8017e7c:	4838      	ldr	r0, [pc, #224]	@ (8017f60 <tcp_input+0x290>)
 8017e7e:	f009 ff03 	bl	8021c88 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8017e82:	4b30      	ldr	r3, [pc, #192]	@ (8017f44 <tcp_input+0x274>)
 8017e84:	681b      	ldr	r3, [r3, #0]
 8017e86:	881b      	ldrh	r3, [r3, #0]
 8017e88:	b29b      	uxth	r3, r3
 8017e8a:	4a2e      	ldr	r2, [pc, #184]	@ (8017f44 <tcp_input+0x274>)
 8017e8c:	6814      	ldr	r4, [r2, #0]
 8017e8e:	4618      	mov	r0, r3
 8017e90:	f7fc fcb0 	bl	80147f4 <lwip_htons>
 8017e94:	4603      	mov	r3, r0
 8017e96:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8017e98:	4b2a      	ldr	r3, [pc, #168]	@ (8017f44 <tcp_input+0x274>)
 8017e9a:	681b      	ldr	r3, [r3, #0]
 8017e9c:	885b      	ldrh	r3, [r3, #2]
 8017e9e:	b29b      	uxth	r3, r3
 8017ea0:	4a28      	ldr	r2, [pc, #160]	@ (8017f44 <tcp_input+0x274>)
 8017ea2:	6814      	ldr	r4, [r2, #0]
 8017ea4:	4618      	mov	r0, r3
 8017ea6:	f7fc fca5 	bl	80147f4 <lwip_htons>
 8017eaa:	4603      	mov	r3, r0
 8017eac:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8017eae:	4b25      	ldr	r3, [pc, #148]	@ (8017f44 <tcp_input+0x274>)
 8017eb0:	681b      	ldr	r3, [r3, #0]
 8017eb2:	685b      	ldr	r3, [r3, #4]
 8017eb4:	4a23      	ldr	r2, [pc, #140]	@ (8017f44 <tcp_input+0x274>)
 8017eb6:	6814      	ldr	r4, [r2, #0]
 8017eb8:	4618      	mov	r0, r3
 8017eba:	f7fc fca8 	bl	801480e <lwip_htonl>
 8017ebe:	4603      	mov	r3, r0
 8017ec0:	6063      	str	r3, [r4, #4]
 8017ec2:	6863      	ldr	r3, [r4, #4]
 8017ec4:	4a29      	ldr	r2, [pc, #164]	@ (8017f6c <tcp_input+0x29c>)
 8017ec6:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8017ec8:	4b1e      	ldr	r3, [pc, #120]	@ (8017f44 <tcp_input+0x274>)
 8017eca:	681b      	ldr	r3, [r3, #0]
 8017ecc:	689b      	ldr	r3, [r3, #8]
 8017ece:	4a1d      	ldr	r2, [pc, #116]	@ (8017f44 <tcp_input+0x274>)
 8017ed0:	6814      	ldr	r4, [r2, #0]
 8017ed2:	4618      	mov	r0, r3
 8017ed4:	f7fc fc9b 	bl	801480e <lwip_htonl>
 8017ed8:	4603      	mov	r3, r0
 8017eda:	60a3      	str	r3, [r4, #8]
 8017edc:	68a3      	ldr	r3, [r4, #8]
 8017ede:	4a24      	ldr	r2, [pc, #144]	@ (8017f70 <tcp_input+0x2a0>)
 8017ee0:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8017ee2:	4b18      	ldr	r3, [pc, #96]	@ (8017f44 <tcp_input+0x274>)
 8017ee4:	681b      	ldr	r3, [r3, #0]
 8017ee6:	89db      	ldrh	r3, [r3, #14]
 8017ee8:	b29b      	uxth	r3, r3
 8017eea:	4a16      	ldr	r2, [pc, #88]	@ (8017f44 <tcp_input+0x274>)
 8017eec:	6814      	ldr	r4, [r2, #0]
 8017eee:	4618      	mov	r0, r3
 8017ef0:	f7fc fc80 	bl	80147f4 <lwip_htons>
 8017ef4:	4603      	mov	r3, r0
 8017ef6:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8017ef8:	4b12      	ldr	r3, [pc, #72]	@ (8017f44 <tcp_input+0x274>)
 8017efa:	681b      	ldr	r3, [r3, #0]
 8017efc:	899b      	ldrh	r3, [r3, #12]
 8017efe:	b29b      	uxth	r3, r3
 8017f00:	4618      	mov	r0, r3
 8017f02:	f7fc fc77 	bl	80147f4 <lwip_htons>
 8017f06:	4603      	mov	r3, r0
 8017f08:	b2db      	uxtb	r3, r3
 8017f0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8017f0e:	b2da      	uxtb	r2, r3
 8017f10:	4b18      	ldr	r3, [pc, #96]	@ (8017f74 <tcp_input+0x2a4>)
 8017f12:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8017f14:	687b      	ldr	r3, [r7, #4]
 8017f16:	891b      	ldrh	r3, [r3, #8]
 8017f18:	4a16      	ldr	r2, [pc, #88]	@ (8017f74 <tcp_input+0x2a4>)
 8017f1a:	7812      	ldrb	r2, [r2, #0]
 8017f1c:	f002 0203 	and.w	r2, r2, #3
 8017f20:	2a00      	cmp	r2, #0
 8017f22:	bf14      	ite	ne
 8017f24:	2201      	movne	r2, #1
 8017f26:	2200      	moveq	r2, #0
 8017f28:	b2d2      	uxtb	r2, r2
 8017f2a:	4413      	add	r3, r2
 8017f2c:	b29a      	uxth	r2, r3
 8017f2e:	4b12      	ldr	r3, [pc, #72]	@ (8017f78 <tcp_input+0x2a8>)
 8017f30:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8017f32:	2300      	movs	r3, #0
 8017f34:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017f36:	4b11      	ldr	r3, [pc, #68]	@ (8017f7c <tcp_input+0x2ac>)
 8017f38:	681b      	ldr	r3, [r3, #0]
 8017f3a:	61fb      	str	r3, [r7, #28]
 8017f3c:	e08d      	b.n	801805a <tcp_input+0x38a>
 8017f3e:	bf00      	nop
 8017f40:	2000be88 	.word	0x2000be88
 8017f44:	2000c048 	.word	0x2000c048
 8017f48:	200088a0 	.word	0x200088a0
 8017f4c:	2000c04c 	.word	0x2000c04c
 8017f50:	2000c050 	.word	0x2000c050
 8017f54:	2000c04e 	.word	0x2000c04e
 8017f58:	080264b0 	.word	0x080264b0
 8017f5c:	080264e4 	.word	0x080264e4
 8017f60:	080264f4 	.word	0x080264f4
 8017f64:	0802651c 	.word	0x0802651c
 8017f68:	08026528 	.word	0x08026528
 8017f6c:	2000c058 	.word	0x2000c058
 8017f70:	2000c05c 	.word	0x2000c05c
 8017f74:	2000c064 	.word	0x2000c064
 8017f78:	2000c062 	.word	0x2000c062
 8017f7c:	2000c02c 	.word	0x2000c02c
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8017f80:	69fb      	ldr	r3, [r7, #28]
 8017f82:	7d1b      	ldrb	r3, [r3, #20]
 8017f84:	2b00      	cmp	r3, #0
 8017f86:	d105      	bne.n	8017f94 <tcp_input+0x2c4>
 8017f88:	4b77      	ldr	r3, [pc, #476]	@ (8018168 <tcp_input+0x498>)
 8017f8a:	22e2      	movs	r2, #226	@ 0xe2
 8017f8c:	4977      	ldr	r1, [pc, #476]	@ (801816c <tcp_input+0x49c>)
 8017f8e:	4878      	ldr	r0, [pc, #480]	@ (8018170 <tcp_input+0x4a0>)
 8017f90:	f009 fe7a 	bl	8021c88 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8017f94:	69fb      	ldr	r3, [r7, #28]
 8017f96:	7d1b      	ldrb	r3, [r3, #20]
 8017f98:	2b0a      	cmp	r3, #10
 8017f9a:	d105      	bne.n	8017fa8 <tcp_input+0x2d8>
 8017f9c:	4b72      	ldr	r3, [pc, #456]	@ (8018168 <tcp_input+0x498>)
 8017f9e:	22e3      	movs	r2, #227	@ 0xe3
 8017fa0:	4974      	ldr	r1, [pc, #464]	@ (8018174 <tcp_input+0x4a4>)
 8017fa2:	4873      	ldr	r0, [pc, #460]	@ (8018170 <tcp_input+0x4a0>)
 8017fa4:	f009 fe70 	bl	8021c88 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8017fa8:	69fb      	ldr	r3, [r7, #28]
 8017faa:	7d1b      	ldrb	r3, [r3, #20]
 8017fac:	2b01      	cmp	r3, #1
 8017fae:	d105      	bne.n	8017fbc <tcp_input+0x2ec>
 8017fb0:	4b6d      	ldr	r3, [pc, #436]	@ (8018168 <tcp_input+0x498>)
 8017fb2:	22e4      	movs	r2, #228	@ 0xe4
 8017fb4:	4970      	ldr	r1, [pc, #448]	@ (8018178 <tcp_input+0x4a8>)
 8017fb6:	486e      	ldr	r0, [pc, #440]	@ (8018170 <tcp_input+0x4a0>)
 8017fb8:	f009 fe66 	bl	8021c88 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8017fbc:	69fb      	ldr	r3, [r7, #28]
 8017fbe:	8b1a      	ldrh	r2, [r3, #24]
 8017fc0:	4b6e      	ldr	r3, [pc, #440]	@ (801817c <tcp_input+0x4ac>)
 8017fc2:	681b      	ldr	r3, [r3, #0]
 8017fc4:	881b      	ldrh	r3, [r3, #0]
 8017fc6:	b29b      	uxth	r3, r3
 8017fc8:	429a      	cmp	r2, r3
 8017fca:	d141      	bne.n	8018050 <tcp_input+0x380>
        pcb->local_port == tcphdr->dest &&
 8017fcc:	69fb      	ldr	r3, [r7, #28]
 8017fce:	8ada      	ldrh	r2, [r3, #22]
 8017fd0:	4b6a      	ldr	r3, [pc, #424]	@ (801817c <tcp_input+0x4ac>)
 8017fd2:	681b      	ldr	r3, [r3, #0]
 8017fd4:	885b      	ldrh	r3, [r3, #2]
 8017fd6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8017fd8:	429a      	cmp	r2, r3
 8017fda:	d139      	bne.n	8018050 <tcp_input+0x380>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017fdc:	69fb      	ldr	r3, [r7, #28]
 8017fde:	685a      	ldr	r2, [r3, #4]
 8017fe0:	4b67      	ldr	r3, [pc, #412]	@ (8018180 <tcp_input+0x4b0>)
 8017fe2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8017fe4:	429a      	cmp	r2, r3
 8017fe6:	d133      	bne.n	8018050 <tcp_input+0x380>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017fe8:	69fb      	ldr	r3, [r7, #28]
 8017fea:	681a      	ldr	r2, [r3, #0]
 8017fec:	4b64      	ldr	r3, [pc, #400]	@ (8018180 <tcp_input+0x4b0>)
 8017fee:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017ff0:	429a      	cmp	r2, r3
 8017ff2:	d12d      	bne.n	8018050 <tcp_input+0x380>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8017ff4:	69fb      	ldr	r3, [r7, #28]
 8017ff6:	68db      	ldr	r3, [r3, #12]
 8017ff8:	69fa      	ldr	r2, [r7, #28]
 8017ffa:	429a      	cmp	r2, r3
 8017ffc:	d105      	bne.n	801800a <tcp_input+0x33a>
 8017ffe:	4b5a      	ldr	r3, [pc, #360]	@ (8018168 <tcp_input+0x498>)
 8018000:	22ec      	movs	r2, #236	@ 0xec
 8018002:	4960      	ldr	r1, [pc, #384]	@ (8018184 <tcp_input+0x4b4>)
 8018004:	485a      	ldr	r0, [pc, #360]	@ (8018170 <tcp_input+0x4a0>)
 8018006:	f009 fe3f 	bl	8021c88 <iprintf>
      if (prev != NULL) {
 801800a:	69bb      	ldr	r3, [r7, #24]
 801800c:	2b00      	cmp	r3, #0
 801800e:	d00b      	beq.n	8018028 <tcp_input+0x358>
        prev->next = pcb->next;
 8018010:	69fb      	ldr	r3, [r7, #28]
 8018012:	68da      	ldr	r2, [r3, #12]
 8018014:	69bb      	ldr	r3, [r7, #24]
 8018016:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8018018:	4b5b      	ldr	r3, [pc, #364]	@ (8018188 <tcp_input+0x4b8>)
 801801a:	681a      	ldr	r2, [r3, #0]
 801801c:	69fb      	ldr	r3, [r7, #28]
 801801e:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8018020:	4a59      	ldr	r2, [pc, #356]	@ (8018188 <tcp_input+0x4b8>)
 8018022:	69fb      	ldr	r3, [r7, #28]
 8018024:	6013      	str	r3, [r2, #0]
 8018026:	e007      	b.n	8018038 <tcp_input+0x368>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8018028:	4b58      	ldr	r3, [pc, #352]	@ (801818c <tcp_input+0x4bc>)
 801802a:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 801802e:	3301      	adds	r3, #1
 8018030:	b29a      	uxth	r2, r3
 8018032:	4b56      	ldr	r3, [pc, #344]	@ (801818c <tcp_input+0x4bc>)
 8018034:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8018038:	69fb      	ldr	r3, [r7, #28]
 801803a:	68db      	ldr	r3, [r3, #12]
 801803c:	69fa      	ldr	r2, [r7, #28]
 801803e:	429a      	cmp	r2, r3
 8018040:	d10f      	bne.n	8018062 <tcp_input+0x392>
 8018042:	4b49      	ldr	r3, [pc, #292]	@ (8018168 <tcp_input+0x498>)
 8018044:	22f4      	movs	r2, #244	@ 0xf4
 8018046:	4952      	ldr	r1, [pc, #328]	@ (8018190 <tcp_input+0x4c0>)
 8018048:	4849      	ldr	r0, [pc, #292]	@ (8018170 <tcp_input+0x4a0>)
 801804a:	f009 fe1d 	bl	8021c88 <iprintf>
      break;
 801804e:	e008      	b.n	8018062 <tcp_input+0x392>
    }
    prev = pcb;
 8018050:	69fb      	ldr	r3, [r7, #28]
 8018052:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018054:	69fb      	ldr	r3, [r7, #28]
 8018056:	68db      	ldr	r3, [r3, #12]
 8018058:	61fb      	str	r3, [r7, #28]
 801805a:	69fb      	ldr	r3, [r7, #28]
 801805c:	2b00      	cmp	r3, #0
 801805e:	d18f      	bne.n	8017f80 <tcp_input+0x2b0>
 8018060:	e000      	b.n	8018064 <tcp_input+0x394>
      break;
 8018062:	bf00      	nop
  }

  if (pcb == NULL) {
 8018064:	69fb      	ldr	r3, [r7, #28]
 8018066:	2b00      	cmp	r3, #0
 8018068:	f040 809a 	bne.w	80181a0 <tcp_input+0x4d0>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801806c:	4b49      	ldr	r3, [pc, #292]	@ (8018194 <tcp_input+0x4c4>)
 801806e:	681b      	ldr	r3, [r3, #0]
 8018070:	61fb      	str	r3, [r7, #28]
 8018072:	e02f      	b.n	80180d4 <tcp_input+0x404>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8018074:	69fb      	ldr	r3, [r7, #28]
 8018076:	7d1b      	ldrb	r3, [r3, #20]
 8018078:	2b0a      	cmp	r3, #10
 801807a:	d005      	beq.n	8018088 <tcp_input+0x3b8>
 801807c:	4b3a      	ldr	r3, [pc, #232]	@ (8018168 <tcp_input+0x498>)
 801807e:	22fe      	movs	r2, #254	@ 0xfe
 8018080:	4945      	ldr	r1, [pc, #276]	@ (8018198 <tcp_input+0x4c8>)
 8018082:	483b      	ldr	r0, [pc, #236]	@ (8018170 <tcp_input+0x4a0>)
 8018084:	f009 fe00 	bl	8021c88 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8018088:	69fb      	ldr	r3, [r7, #28]
 801808a:	8b1a      	ldrh	r2, [r3, #24]
 801808c:	4b3b      	ldr	r3, [pc, #236]	@ (801817c <tcp_input+0x4ac>)
 801808e:	681b      	ldr	r3, [r3, #0]
 8018090:	881b      	ldrh	r3, [r3, #0]
 8018092:	b29b      	uxth	r3, r3
 8018094:	429a      	cmp	r2, r3
 8018096:	d11a      	bne.n	80180ce <tcp_input+0x3fe>
          pcb->local_port == tcphdr->dest &&
 8018098:	69fb      	ldr	r3, [r7, #28]
 801809a:	8ada      	ldrh	r2, [r3, #22]
 801809c:	4b37      	ldr	r3, [pc, #220]	@ (801817c <tcp_input+0x4ac>)
 801809e:	681b      	ldr	r3, [r3, #0]
 80180a0:	885b      	ldrh	r3, [r3, #2]
 80180a2:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80180a4:	429a      	cmp	r2, r3
 80180a6:	d112      	bne.n	80180ce <tcp_input+0x3fe>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80180a8:	69fb      	ldr	r3, [r7, #28]
 80180aa:	685a      	ldr	r2, [r3, #4]
 80180ac:	4b34      	ldr	r3, [pc, #208]	@ (8018180 <tcp_input+0x4b0>)
 80180ae:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80180b0:	429a      	cmp	r2, r3
 80180b2:	d10c      	bne.n	80180ce <tcp_input+0x3fe>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80180b4:	69fb      	ldr	r3, [r7, #28]
 80180b6:	681a      	ldr	r2, [r3, #0]
 80180b8:	4b31      	ldr	r3, [pc, #196]	@ (8018180 <tcp_input+0x4b0>)
 80180ba:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80180bc:	429a      	cmp	r2, r3
 80180be:	d106      	bne.n	80180ce <tcp_input+0x3fe>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 80180c0:	69f8      	ldr	r0, [r7, #28]
 80180c2:	f000 fb5b 	bl	801877c <tcp_timewait_input>
        pbuf_free(p);
 80180c6:	6878      	ldr	r0, [r7, #4]
 80180c8:	f7fd fdec 	bl	8015ca4 <pbuf_free>
        return;
 80180cc:	e21a      	b.n	8018504 <tcp_input+0x834>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80180ce:	69fb      	ldr	r3, [r7, #28]
 80180d0:	68db      	ldr	r3, [r3, #12]
 80180d2:	61fb      	str	r3, [r7, #28]
 80180d4:	69fb      	ldr	r3, [r7, #28]
 80180d6:	2b00      	cmp	r3, #0
 80180d8:	d1cc      	bne.n	8018074 <tcp_input+0x3a4>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80180da:	2300      	movs	r3, #0
 80180dc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80180de:	4b2f      	ldr	r3, [pc, #188]	@ (801819c <tcp_input+0x4cc>)
 80180e0:	681b      	ldr	r3, [r3, #0]
 80180e2:	617b      	str	r3, [r7, #20]
 80180e4:	e019      	b.n	801811a <tcp_input+0x44a>
      if (lpcb->local_port == tcphdr->dest) {
 80180e6:	697b      	ldr	r3, [r7, #20]
 80180e8:	8ada      	ldrh	r2, [r3, #22]
 80180ea:	4b24      	ldr	r3, [pc, #144]	@ (801817c <tcp_input+0x4ac>)
 80180ec:	681b      	ldr	r3, [r3, #0]
 80180ee:	885b      	ldrh	r3, [r3, #2]
 80180f0:	b29b      	uxth	r3, r3
 80180f2:	429a      	cmp	r2, r3
 80180f4:	d10c      	bne.n	8018110 <tcp_input+0x440>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80180f6:	697b      	ldr	r3, [r7, #20]
 80180f8:	681a      	ldr	r2, [r3, #0]
 80180fa:	4b21      	ldr	r3, [pc, #132]	@ (8018180 <tcp_input+0x4b0>)
 80180fc:	695b      	ldr	r3, [r3, #20]
 80180fe:	429a      	cmp	r2, r3
 8018100:	d00f      	beq.n	8018122 <tcp_input+0x452>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8018102:	697b      	ldr	r3, [r7, #20]
 8018104:	2b00      	cmp	r3, #0
 8018106:	d00d      	beq.n	8018124 <tcp_input+0x454>
 8018108:	697b      	ldr	r3, [r7, #20]
 801810a:	681b      	ldr	r3, [r3, #0]
 801810c:	2b00      	cmp	r3, #0
 801810e:	d009      	beq.n	8018124 <tcp_input+0x454>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8018110:	697b      	ldr	r3, [r7, #20]
 8018112:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8018114:	697b      	ldr	r3, [r7, #20]
 8018116:	68db      	ldr	r3, [r3, #12]
 8018118:	617b      	str	r3, [r7, #20]
 801811a:	697b      	ldr	r3, [r7, #20]
 801811c:	2b00      	cmp	r3, #0
 801811e:	d1e2      	bne.n	80180e6 <tcp_input+0x416>
 8018120:	e000      	b.n	8018124 <tcp_input+0x454>
            break;
 8018122:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8018124:	697b      	ldr	r3, [r7, #20]
 8018126:	2b00      	cmp	r3, #0
 8018128:	d03a      	beq.n	80181a0 <tcp_input+0x4d0>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801812a:	69bb      	ldr	r3, [r7, #24]
 801812c:	2b00      	cmp	r3, #0
 801812e:	d00b      	beq.n	8018148 <tcp_input+0x478>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8018130:	697b      	ldr	r3, [r7, #20]
 8018132:	68da      	ldr	r2, [r3, #12]
 8018134:	69bb      	ldr	r3, [r7, #24]
 8018136:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8018138:	4b18      	ldr	r3, [pc, #96]	@ (801819c <tcp_input+0x4cc>)
 801813a:	681a      	ldr	r2, [r3, #0]
 801813c:	697b      	ldr	r3, [r7, #20]
 801813e:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8018140:	4a16      	ldr	r2, [pc, #88]	@ (801819c <tcp_input+0x4cc>)
 8018142:	697b      	ldr	r3, [r7, #20]
 8018144:	6013      	str	r3, [r2, #0]
 8018146:	e007      	b.n	8018158 <tcp_input+0x488>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8018148:	4b10      	ldr	r3, [pc, #64]	@ (801818c <tcp_input+0x4bc>)
 801814a:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 801814e:	3301      	adds	r3, #1
 8018150:	b29a      	uxth	r2, r3
 8018152:	4b0e      	ldr	r3, [pc, #56]	@ (801818c <tcp_input+0x4bc>)
 8018154:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 8018158:	6978      	ldr	r0, [r7, #20]
 801815a:	f000 fa1d 	bl	8018598 <tcp_listen_input>
      pbuf_free(p);
 801815e:	6878      	ldr	r0, [r7, #4]
 8018160:	f7fd fda0 	bl	8015ca4 <pbuf_free>
      return;
 8018164:	e1ce      	b.n	8018504 <tcp_input+0x834>
 8018166:	bf00      	nop
 8018168:	080264b0 	.word	0x080264b0
 801816c:	08026548 	.word	0x08026548
 8018170:	080264f4 	.word	0x080264f4
 8018174:	08026570 	.word	0x08026570
 8018178:	0802659c 	.word	0x0802659c
 801817c:	2000c048 	.word	0x2000c048
 8018180:	200088a0 	.word	0x200088a0
 8018184:	080265c4 	.word	0x080265c4
 8018188:	2000c02c 	.word	0x2000c02c
 801818c:	2000be88 	.word	0x2000be88
 8018190:	080265f0 	.word	0x080265f0
 8018194:	2000c030 	.word	0x2000c030
 8018198:	0802661c 	.word	0x0802661c
 801819c:	2000c028 	.word	0x2000c028
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 80181a0:	69fb      	ldr	r3, [r7, #28]
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	f000 8164 	beq.w	8018470 <tcp_input+0x7a0>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80181a8:	4b9a      	ldr	r3, [pc, #616]	@ (8018414 <tcp_input+0x744>)
 80181aa:	2200      	movs	r2, #0
 80181ac:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	891a      	ldrh	r2, [r3, #8]
 80181b2:	4b98      	ldr	r3, [pc, #608]	@ (8018414 <tcp_input+0x744>)
 80181b4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80181b6:	4a97      	ldr	r2, [pc, #604]	@ (8018414 <tcp_input+0x744>)
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80181bc:	4b96      	ldr	r3, [pc, #600]	@ (8018418 <tcp_input+0x748>)
 80181be:	681b      	ldr	r3, [r3, #0]
 80181c0:	4a94      	ldr	r2, [pc, #592]	@ (8018414 <tcp_input+0x744>)
 80181c2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80181c4:	4b95      	ldr	r3, [pc, #596]	@ (801841c <tcp_input+0x74c>)
 80181c6:	2200      	movs	r2, #0
 80181c8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80181ca:	4b95      	ldr	r3, [pc, #596]	@ (8018420 <tcp_input+0x750>)
 80181cc:	2200      	movs	r2, #0
 80181ce:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80181d0:	4b94      	ldr	r3, [pc, #592]	@ (8018424 <tcp_input+0x754>)
 80181d2:	2200      	movs	r2, #0
 80181d4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80181d6:	4b94      	ldr	r3, [pc, #592]	@ (8018428 <tcp_input+0x758>)
 80181d8:	781b      	ldrb	r3, [r3, #0]
 80181da:	f003 0308 	and.w	r3, r3, #8
 80181de:	2b00      	cmp	r3, #0
 80181e0:	d006      	beq.n	80181f0 <tcp_input+0x520>
      p->flags |= PBUF_FLAG_PUSH;
 80181e2:	687b      	ldr	r3, [r7, #4]
 80181e4:	7b5b      	ldrb	r3, [r3, #13]
 80181e6:	f043 0301 	orr.w	r3, r3, #1
 80181ea:	b2da      	uxtb	r2, r3
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80181f0:	69fb      	ldr	r3, [r7, #28]
 80181f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80181f4:	2b00      	cmp	r3, #0
 80181f6:	d025      	beq.n	8018244 <tcp_input+0x574>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80181f8:	69f8      	ldr	r0, [r7, #28]
 80181fa:	f7ff f909 	bl	8017410 <tcp_process_refused_data>
 80181fe:	4603      	mov	r3, r0
 8018200:	f113 0f0d 	cmn.w	r3, #13
 8018204:	d007      	beq.n	8018216 <tcp_input+0x546>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8018206:	69fb      	ldr	r3, [r7, #28]
 8018208:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801820a:	2b00      	cmp	r3, #0
 801820c:	d01a      	beq.n	8018244 <tcp_input+0x574>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801820e:	4b87      	ldr	r3, [pc, #540]	@ (801842c <tcp_input+0x75c>)
 8018210:	881b      	ldrh	r3, [r3, #0]
 8018212:	2b00      	cmp	r3, #0
 8018214:	d016      	beq.n	8018244 <tcp_input+0x574>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8018216:	69fb      	ldr	r3, [r7, #28]
 8018218:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801821a:	2b00      	cmp	r3, #0
 801821c:	d102      	bne.n	8018224 <tcp_input+0x554>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801821e:	69f8      	ldr	r0, [r7, #28]
 8018220:	f002 fe8e 	bl	801af40 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
 8018224:	4b82      	ldr	r3, [pc, #520]	@ (8018430 <tcp_input+0x760>)
 8018226:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 801822a:	3301      	adds	r3, #1
 801822c:	b29a      	uxth	r2, r3
 801822e:	4b80      	ldr	r3, [pc, #512]	@ (8018430 <tcp_input+0x760>)
 8018230:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
        MIB2_STATS_INC(mib2.tcpinerrs);
 8018234:	4b7e      	ldr	r3, [pc, #504]	@ (8018430 <tcp_input+0x760>)
 8018236:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 801823a:	3301      	adds	r3, #1
 801823c:	4a7c      	ldr	r2, [pc, #496]	@ (8018430 <tcp_input+0x760>)
 801823e:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
        goto aborted;
 8018242:	e102      	b.n	801844a <tcp_input+0x77a>
      }
    }
    tcp_input_pcb = pcb;
 8018244:	4a7b      	ldr	r2, [pc, #492]	@ (8018434 <tcp_input+0x764>)
 8018246:	69fb      	ldr	r3, [r7, #28]
 8018248:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801824a:	69f8      	ldr	r0, [r7, #28]
 801824c:	f000 fafe 	bl	801884c <tcp_process>
 8018250:	4603      	mov	r3, r0
 8018252:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8018254:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018258:	f113 0f0d 	cmn.w	r3, #13
 801825c:	f000 80d0 	beq.w	8018400 <tcp_input+0x730>
      if (recv_flags & TF_RESET) {
 8018260:	4b6f      	ldr	r3, [pc, #444]	@ (8018420 <tcp_input+0x750>)
 8018262:	781b      	ldrb	r3, [r3, #0]
 8018264:	f003 0308 	and.w	r3, r3, #8
 8018268:	2b00      	cmp	r3, #0
 801826a:	d016      	beq.n	801829a <tcp_input+0x5ca>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801826c:	69fb      	ldr	r3, [r7, #28]
 801826e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8018272:	2b00      	cmp	r3, #0
 8018274:	d008      	beq.n	8018288 <tcp_input+0x5b8>
 8018276:	69fb      	ldr	r3, [r7, #28]
 8018278:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801827c:	69fa      	ldr	r2, [r7, #28]
 801827e:	6912      	ldr	r2, [r2, #16]
 8018280:	f06f 010d 	mvn.w	r1, #13
 8018284:	4610      	mov	r0, r2
 8018286:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8018288:	69f9      	ldr	r1, [r7, #28]
 801828a:	486b      	ldr	r0, [pc, #428]	@ (8018438 <tcp_input+0x768>)
 801828c:	f7ff fc08 	bl	8017aa0 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8018290:	69f9      	ldr	r1, [r7, #28]
 8018292:	2001      	movs	r0, #1
 8018294:	f7fc ffaa 	bl	80151ec <memp_free>
 8018298:	e0d7      	b.n	801844a <tcp_input+0x77a>
      } else {
        err = ERR_OK;
 801829a:	2300      	movs	r3, #0
 801829c:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801829e:	4b61      	ldr	r3, [pc, #388]	@ (8018424 <tcp_input+0x754>)
 80182a0:	881b      	ldrh	r3, [r3, #0]
 80182a2:	2b00      	cmp	r3, #0
 80182a4:	d01b      	beq.n	80182de <tcp_input+0x60e>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80182a6:	4b5f      	ldr	r3, [pc, #380]	@ (8018424 <tcp_input+0x754>)
 80182a8:	881b      	ldrh	r3, [r3, #0]
 80182aa:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80182ac:	69fb      	ldr	r3, [r7, #28]
 80182ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80182b0:	2b00      	cmp	r3, #0
 80182b2:	d009      	beq.n	80182c8 <tcp_input+0x5f8>
 80182b4:	69fb      	ldr	r3, [r7, #28]
 80182b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80182b8:	69fa      	ldr	r2, [r7, #28]
 80182ba:	6910      	ldr	r0, [r2, #16]
 80182bc:	89fa      	ldrh	r2, [r7, #14]
 80182be:	69f9      	ldr	r1, [r7, #28]
 80182c0:	4798      	blx	r3
 80182c2:	4603      	mov	r3, r0
 80182c4:	74fb      	strb	r3, [r7, #19]
 80182c6:	e001      	b.n	80182cc <tcp_input+0x5fc>
 80182c8:	2300      	movs	r3, #0
 80182ca:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80182cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80182d0:	f113 0f0d 	cmn.w	r3, #13
 80182d4:	f000 8096 	beq.w	8018404 <tcp_input+0x734>
              goto aborted;
            }
          }
          recv_acked = 0;
 80182d8:	4b52      	ldr	r3, [pc, #328]	@ (8018424 <tcp_input+0x754>)
 80182da:	2200      	movs	r2, #0
 80182dc:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80182de:	69f8      	ldr	r0, [r7, #28]
 80182e0:	f000 f928 	bl	8018534 <tcp_input_delayed_close>
 80182e4:	4603      	mov	r3, r0
 80182e6:	2b00      	cmp	r3, #0
 80182e8:	f040 808e 	bne.w	8018408 <tcp_input+0x738>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80182ec:	4b4b      	ldr	r3, [pc, #300]	@ (801841c <tcp_input+0x74c>)
 80182ee:	681b      	ldr	r3, [r3, #0]
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d041      	beq.n	8018378 <tcp_input+0x6a8>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80182f4:	69fb      	ldr	r3, [r7, #28]
 80182f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80182f8:	2b00      	cmp	r3, #0
 80182fa:	d006      	beq.n	801830a <tcp_input+0x63a>
 80182fc:	4b4f      	ldr	r3, [pc, #316]	@ (801843c <tcp_input+0x76c>)
 80182fe:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 8018302:	494f      	ldr	r1, [pc, #316]	@ (8018440 <tcp_input+0x770>)
 8018304:	484f      	ldr	r0, [pc, #316]	@ (8018444 <tcp_input+0x774>)
 8018306:	f009 fcbf 	bl	8021c88 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801830a:	69fb      	ldr	r3, [r7, #28]
 801830c:	7e9b      	ldrb	r3, [r3, #26]
 801830e:	f003 0310 	and.w	r3, r3, #16
 8018312:	2b00      	cmp	r3, #0
 8018314:	d008      	beq.n	8018328 <tcp_input+0x658>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8018316:	4b41      	ldr	r3, [pc, #260]	@ (801841c <tcp_input+0x74c>)
 8018318:	681b      	ldr	r3, [r3, #0]
 801831a:	4618      	mov	r0, r3
 801831c:	f7fd fcc2 	bl	8015ca4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8018320:	69f8      	ldr	r0, [r7, #28]
 8018322:	f7fe fb09 	bl	8016938 <tcp_abort>
            goto aborted;
 8018326:	e090      	b.n	801844a <tcp_input+0x77a>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8018328:	69fb      	ldr	r3, [r7, #28]
 801832a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801832e:	2b00      	cmp	r3, #0
 8018330:	d00c      	beq.n	801834c <tcp_input+0x67c>
 8018332:	69fb      	ldr	r3, [r7, #28]
 8018334:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8018338:	69fb      	ldr	r3, [r7, #28]
 801833a:	6918      	ldr	r0, [r3, #16]
 801833c:	4b37      	ldr	r3, [pc, #220]	@ (801841c <tcp_input+0x74c>)
 801833e:	681a      	ldr	r2, [r3, #0]
 8018340:	2300      	movs	r3, #0
 8018342:	69f9      	ldr	r1, [r7, #28]
 8018344:	47a0      	blx	r4
 8018346:	4603      	mov	r3, r0
 8018348:	74fb      	strb	r3, [r7, #19]
 801834a:	e008      	b.n	801835e <tcp_input+0x68e>
 801834c:	4b33      	ldr	r3, [pc, #204]	@ (801841c <tcp_input+0x74c>)
 801834e:	681a      	ldr	r2, [r3, #0]
 8018350:	2300      	movs	r3, #0
 8018352:	69f9      	ldr	r1, [r7, #28]
 8018354:	2000      	movs	r0, #0
 8018356:	f7ff f91b 	bl	8017590 <tcp_recv_null>
 801835a:	4603      	mov	r3, r0
 801835c:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801835e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018362:	f113 0f0d 	cmn.w	r3, #13
 8018366:	d051      	beq.n	801840c <tcp_input+0x73c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8018368:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801836c:	2b00      	cmp	r3, #0
 801836e:	d003      	beq.n	8018378 <tcp_input+0x6a8>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8018370:	4b2a      	ldr	r3, [pc, #168]	@ (801841c <tcp_input+0x74c>)
 8018372:	681a      	ldr	r2, [r3, #0]
 8018374:	69fb      	ldr	r3, [r7, #28]
 8018376:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8018378:	4b29      	ldr	r3, [pc, #164]	@ (8018420 <tcp_input+0x750>)
 801837a:	781b      	ldrb	r3, [r3, #0]
 801837c:	f003 0320 	and.w	r3, r3, #32
 8018380:	2b00      	cmp	r3, #0
 8018382:	d030      	beq.n	80183e6 <tcp_input+0x716>
          if (pcb->refused_data != NULL) {
 8018384:	69fb      	ldr	r3, [r7, #28]
 8018386:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018388:	2b00      	cmp	r3, #0
 801838a:	d009      	beq.n	80183a0 <tcp_input+0x6d0>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801838c:	69fb      	ldr	r3, [r7, #28]
 801838e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018390:	7b5a      	ldrb	r2, [r3, #13]
 8018392:	69fb      	ldr	r3, [r7, #28]
 8018394:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018396:	f042 0220 	orr.w	r2, r2, #32
 801839a:	b2d2      	uxtb	r2, r2
 801839c:	735a      	strb	r2, [r3, #13]
 801839e:	e022      	b.n	80183e6 <tcp_input+0x716>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80183a0:	69fb      	ldr	r3, [r7, #28]
 80183a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80183a4:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80183a8:	d005      	beq.n	80183b6 <tcp_input+0x6e6>
              pcb->rcv_wnd++;
 80183aa:	69fb      	ldr	r3, [r7, #28]
 80183ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80183ae:	3301      	adds	r3, #1
 80183b0:	b29a      	uxth	r2, r3
 80183b2:	69fb      	ldr	r3, [r7, #28]
 80183b4:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80183b6:	69fb      	ldr	r3, [r7, #28]
 80183b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80183bc:	2b00      	cmp	r3, #0
 80183be:	d00b      	beq.n	80183d8 <tcp_input+0x708>
 80183c0:	69fb      	ldr	r3, [r7, #28]
 80183c2:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 80183c6:	69fb      	ldr	r3, [r7, #28]
 80183c8:	6918      	ldr	r0, [r3, #16]
 80183ca:	2300      	movs	r3, #0
 80183cc:	2200      	movs	r2, #0
 80183ce:	69f9      	ldr	r1, [r7, #28]
 80183d0:	47a0      	blx	r4
 80183d2:	4603      	mov	r3, r0
 80183d4:	74fb      	strb	r3, [r7, #19]
 80183d6:	e001      	b.n	80183dc <tcp_input+0x70c>
 80183d8:	2300      	movs	r3, #0
 80183da:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80183dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80183e0:	f113 0f0d 	cmn.w	r3, #13
 80183e4:	d014      	beq.n	8018410 <tcp_input+0x740>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80183e6:	4b13      	ldr	r3, [pc, #76]	@ (8018434 <tcp_input+0x764>)
 80183e8:	2200      	movs	r2, #0
 80183ea:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80183ec:	69f8      	ldr	r0, [r7, #28]
 80183ee:	f000 f8a1 	bl	8018534 <tcp_input_delayed_close>
 80183f2:	4603      	mov	r3, r0
 80183f4:	2b00      	cmp	r3, #0
 80183f6:	d127      	bne.n	8018448 <tcp_input+0x778>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80183f8:	69f8      	ldr	r0, [r7, #28]
 80183fa:	f002 fdfd 	bl	801aff8 <tcp_output>
 80183fe:	e024      	b.n	801844a <tcp_input+0x77a>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8018400:	bf00      	nop
 8018402:	e022      	b.n	801844a <tcp_input+0x77a>
              goto aborted;
 8018404:	bf00      	nop
 8018406:	e020      	b.n	801844a <tcp_input+0x77a>
          goto aborted;
 8018408:	bf00      	nop
 801840a:	e01e      	b.n	801844a <tcp_input+0x77a>
            goto aborted;
 801840c:	bf00      	nop
 801840e:	e01c      	b.n	801844a <tcp_input+0x77a>
              goto aborted;
 8018410:	bf00      	nop
 8018412:	e01a      	b.n	801844a <tcp_input+0x77a>
 8018414:	2000c038 	.word	0x2000c038
 8018418:	2000c048 	.word	0x2000c048
 801841c:	2000c068 	.word	0x2000c068
 8018420:	2000c065 	.word	0x2000c065
 8018424:	2000c060 	.word	0x2000c060
 8018428:	2000c064 	.word	0x2000c064
 801842c:	2000c062 	.word	0x2000c062
 8018430:	2000be88 	.word	0x2000be88
 8018434:	2000c06c 	.word	0x2000c06c
 8018438:	2000c02c 	.word	0x2000c02c
 801843c:	080264b0 	.word	0x080264b0
 8018440:	0802664c 	.word	0x0802664c
 8018444:	080264f4 	.word	0x080264f4
          goto aborted;
 8018448:	bf00      	nop
    tcp_input_pcb = NULL;
 801844a:	4b30      	ldr	r3, [pc, #192]	@ (801850c <tcp_input+0x83c>)
 801844c:	2200      	movs	r2, #0
 801844e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8018450:	4b2f      	ldr	r3, [pc, #188]	@ (8018510 <tcp_input+0x840>)
 8018452:	2200      	movs	r2, #0
 8018454:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 8018456:	4b2f      	ldr	r3, [pc, #188]	@ (8018514 <tcp_input+0x844>)
 8018458:	685b      	ldr	r3, [r3, #4]
 801845a:	2b00      	cmp	r3, #0
 801845c:	d051      	beq.n	8018502 <tcp_input+0x832>
    {
      pbuf_free(inseg.p);
 801845e:	4b2d      	ldr	r3, [pc, #180]	@ (8018514 <tcp_input+0x844>)
 8018460:	685b      	ldr	r3, [r3, #4]
 8018462:	4618      	mov	r0, r3
 8018464:	f7fd fc1e 	bl	8015ca4 <pbuf_free>
      inseg.p = NULL;
 8018468:	4b2a      	ldr	r3, [pc, #168]	@ (8018514 <tcp_input+0x844>)
 801846a:	2200      	movs	r2, #0
 801846c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801846e:	e048      	b.n	8018502 <tcp_input+0x832>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8018470:	4b29      	ldr	r3, [pc, #164]	@ (8018518 <tcp_input+0x848>)
 8018472:	681b      	ldr	r3, [r3, #0]
 8018474:	899b      	ldrh	r3, [r3, #12]
 8018476:	b29b      	uxth	r3, r3
 8018478:	4618      	mov	r0, r3
 801847a:	f7fc f9bb 	bl	80147f4 <lwip_htons>
 801847e:	4603      	mov	r3, r0
 8018480:	f003 0304 	and.w	r3, r3, #4
 8018484:	2b00      	cmp	r3, #0
 8018486:	d125      	bne.n	80184d4 <tcp_input+0x804>
      TCP_STATS_INC(tcp.proterr);
 8018488:	4b24      	ldr	r3, [pc, #144]	@ (801851c <tcp_input+0x84c>)
 801848a:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 801848e:	3301      	adds	r3, #1
 8018490:	b29a      	uxth	r2, r3
 8018492:	4b22      	ldr	r3, [pc, #136]	@ (801851c <tcp_input+0x84c>)
 8018494:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
      TCP_STATS_INC(tcp.drop);
 8018498:	4b20      	ldr	r3, [pc, #128]	@ (801851c <tcp_input+0x84c>)
 801849a:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 801849e:	3301      	adds	r3, #1
 80184a0:	b29a      	uxth	r2, r3
 80184a2:	4b1e      	ldr	r3, [pc, #120]	@ (801851c <tcp_input+0x84c>)
 80184a4:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80184a8:	4b1d      	ldr	r3, [pc, #116]	@ (8018520 <tcp_input+0x850>)
 80184aa:	6818      	ldr	r0, [r3, #0]
 80184ac:	4b1d      	ldr	r3, [pc, #116]	@ (8018524 <tcp_input+0x854>)
 80184ae:	881b      	ldrh	r3, [r3, #0]
 80184b0:	461a      	mov	r2, r3
 80184b2:	4b1d      	ldr	r3, [pc, #116]	@ (8018528 <tcp_input+0x858>)
 80184b4:	681b      	ldr	r3, [r3, #0]
 80184b6:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80184b8:	4b17      	ldr	r3, [pc, #92]	@ (8018518 <tcp_input+0x848>)
 80184ba:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80184bc:	885b      	ldrh	r3, [r3, #2]
 80184be:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80184c0:	4a15      	ldr	r2, [pc, #84]	@ (8018518 <tcp_input+0x848>)
 80184c2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80184c4:	8812      	ldrh	r2, [r2, #0]
 80184c6:	b292      	uxth	r2, r2
 80184c8:	9201      	str	r2, [sp, #4]
 80184ca:	9300      	str	r3, [sp, #0]
 80184cc:	4b17      	ldr	r3, [pc, #92]	@ (801852c <tcp_input+0x85c>)
 80184ce:	4a18      	ldr	r2, [pc, #96]	@ (8018530 <tcp_input+0x860>)
 80184d0:	f003 f82a 	bl	801b528 <tcp_rst>
    pbuf_free(p);
 80184d4:	6878      	ldr	r0, [r7, #4]
 80184d6:	f7fd fbe5 	bl	8015ca4 <pbuf_free>
  return;
 80184da:	e012      	b.n	8018502 <tcp_input+0x832>
dropped:
  TCP_STATS_INC(tcp.drop);
 80184dc:	4b0f      	ldr	r3, [pc, #60]	@ (801851c <tcp_input+0x84c>)
 80184de:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 80184e2:	3301      	adds	r3, #1
 80184e4:	b29a      	uxth	r2, r3
 80184e6:	4b0d      	ldr	r3, [pc, #52]	@ (801851c <tcp_input+0x84c>)
 80184e8:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
  MIB2_STATS_INC(mib2.tcpinerrs);
 80184ec:	4b0b      	ldr	r3, [pc, #44]	@ (801851c <tcp_input+0x84c>)
 80184ee:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80184f2:	3301      	adds	r3, #1
 80184f4:	4a09      	ldr	r2, [pc, #36]	@ (801851c <tcp_input+0x84c>)
 80184f6:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
  pbuf_free(p);
 80184fa:	6878      	ldr	r0, [r7, #4]
 80184fc:	f7fd fbd2 	bl	8015ca4 <pbuf_free>
 8018500:	e000      	b.n	8018504 <tcp_input+0x834>
  return;
 8018502:	bf00      	nop
}
 8018504:	3724      	adds	r7, #36	@ 0x24
 8018506:	46bd      	mov	sp, r7
 8018508:	bd90      	pop	{r4, r7, pc}
 801850a:	bf00      	nop
 801850c:	2000c06c 	.word	0x2000c06c
 8018510:	2000c068 	.word	0x2000c068
 8018514:	2000c038 	.word	0x2000c038
 8018518:	2000c048 	.word	0x2000c048
 801851c:	2000be88 	.word	0x2000be88
 8018520:	2000c05c 	.word	0x2000c05c
 8018524:	2000c062 	.word	0x2000c062
 8018528:	2000c058 	.word	0x2000c058
 801852c:	200088b0 	.word	0x200088b0
 8018530:	200088b4 	.word	0x200088b4

08018534 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8018534:	b580      	push	{r7, lr}
 8018536:	b082      	sub	sp, #8
 8018538:	af00      	add	r7, sp, #0
 801853a:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 801853c:	4b14      	ldr	r3, [pc, #80]	@ (8018590 <tcp_input_delayed_close+0x5c>)
 801853e:	781b      	ldrb	r3, [r3, #0]
 8018540:	f003 0310 	and.w	r3, r3, #16
 8018544:	2b00      	cmp	r3, #0
 8018546:	d01d      	beq.n	8018584 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8018548:	687b      	ldr	r3, [r7, #4]
 801854a:	7e9b      	ldrb	r3, [r3, #26]
 801854c:	f003 0310 	and.w	r3, r3, #16
 8018550:	2b00      	cmp	r3, #0
 8018552:	d10d      	bne.n	8018570 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801855a:	2b00      	cmp	r3, #0
 801855c:	d008      	beq.n	8018570 <tcp_input_delayed_close+0x3c>
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8018564:	687a      	ldr	r2, [r7, #4]
 8018566:	6912      	ldr	r2, [r2, #16]
 8018568:	f06f 010e 	mvn.w	r1, #14
 801856c:	4610      	mov	r0, r2
 801856e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8018570:	6879      	ldr	r1, [r7, #4]
 8018572:	4808      	ldr	r0, [pc, #32]	@ (8018594 <tcp_input_delayed_close+0x60>)
 8018574:	f7ff fa94 	bl	8017aa0 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8018578:	6879      	ldr	r1, [r7, #4]
 801857a:	2001      	movs	r0, #1
 801857c:	f7fc fe36 	bl	80151ec <memp_free>
    return 1;
 8018580:	2301      	movs	r3, #1
 8018582:	e000      	b.n	8018586 <tcp_input_delayed_close+0x52>
  }
  return 0;
 8018584:	2300      	movs	r3, #0
}
 8018586:	4618      	mov	r0, r3
 8018588:	3708      	adds	r7, #8
 801858a:	46bd      	mov	sp, r7
 801858c:	bd80      	pop	{r7, pc}
 801858e:	bf00      	nop
 8018590:	2000c065 	.word	0x2000c065
 8018594:	2000c02c 	.word	0x2000c02c

08018598 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8018598:	b580      	push	{r7, lr}
 801859a:	b088      	sub	sp, #32
 801859c:	af02      	add	r7, sp, #8
 801859e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80185a0:	4b6b      	ldr	r3, [pc, #428]	@ (8018750 <tcp_listen_input+0x1b8>)
 80185a2:	781b      	ldrb	r3, [r3, #0]
 80185a4:	f003 0304 	and.w	r3, r3, #4
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	f040 80ca 	bne.w	8018742 <tcp_listen_input+0x1aa>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80185ae:	4b68      	ldr	r3, [pc, #416]	@ (8018750 <tcp_listen_input+0x1b8>)
 80185b0:	781b      	ldrb	r3, [r3, #0]
 80185b2:	f003 0310 	and.w	r3, r3, #16
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	d016      	beq.n	80185e8 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80185ba:	4b66      	ldr	r3, [pc, #408]	@ (8018754 <tcp_listen_input+0x1bc>)
 80185bc:	6818      	ldr	r0, [r3, #0]
 80185be:	4b66      	ldr	r3, [pc, #408]	@ (8018758 <tcp_listen_input+0x1c0>)
 80185c0:	881b      	ldrh	r3, [r3, #0]
 80185c2:	461a      	mov	r2, r3
 80185c4:	4b65      	ldr	r3, [pc, #404]	@ (801875c <tcp_listen_input+0x1c4>)
 80185c6:	681b      	ldr	r3, [r3, #0]
 80185c8:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80185ca:	4b65      	ldr	r3, [pc, #404]	@ (8018760 <tcp_listen_input+0x1c8>)
 80185cc:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80185ce:	885b      	ldrh	r3, [r3, #2]
 80185d0:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80185d2:	4a63      	ldr	r2, [pc, #396]	@ (8018760 <tcp_listen_input+0x1c8>)
 80185d4:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80185d6:	8812      	ldrh	r2, [r2, #0]
 80185d8:	b292      	uxth	r2, r2
 80185da:	9201      	str	r2, [sp, #4]
 80185dc:	9300      	str	r3, [sp, #0]
 80185de:	4b61      	ldr	r3, [pc, #388]	@ (8018764 <tcp_listen_input+0x1cc>)
 80185e0:	4a61      	ldr	r2, [pc, #388]	@ (8018768 <tcp_listen_input+0x1d0>)
 80185e2:	f002 ffa1 	bl	801b528 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80185e6:	e0ae      	b.n	8018746 <tcp_listen_input+0x1ae>
  } else if (flags & TCP_SYN) {
 80185e8:	4b59      	ldr	r3, [pc, #356]	@ (8018750 <tcp_listen_input+0x1b8>)
 80185ea:	781b      	ldrb	r3, [r3, #0]
 80185ec:	f003 0302 	and.w	r3, r3, #2
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	f000 80a8 	beq.w	8018746 <tcp_listen_input+0x1ae>
    npcb = tcp_alloc(pcb->prio);
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	7d5b      	ldrb	r3, [r3, #21]
 80185fa:	4618      	mov	r0, r3
 80185fc:	f7ff f8a6 	bl	801774c <tcp_alloc>
 8018600:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8018602:	697b      	ldr	r3, [r7, #20]
 8018604:	2b00      	cmp	r3, #0
 8018606:	d119      	bne.n	801863c <tcp_listen_input+0xa4>
      TCP_STATS_INC(tcp.memerr);
 8018608:	4b58      	ldr	r3, [pc, #352]	@ (801876c <tcp_listen_input+0x1d4>)
 801860a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801860e:	3301      	adds	r3, #1
 8018610:	b29a      	uxth	r2, r3
 8018612:	4b56      	ldr	r3, [pc, #344]	@ (801876c <tcp_listen_input+0x1d4>)
 8018614:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	699b      	ldr	r3, [r3, #24]
 801861c:	2b00      	cmp	r3, #0
 801861e:	d00a      	beq.n	8018636 <tcp_listen_input+0x9e>
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	699b      	ldr	r3, [r3, #24]
 8018624:	687a      	ldr	r2, [r7, #4]
 8018626:	6910      	ldr	r0, [r2, #16]
 8018628:	f04f 32ff 	mov.w	r2, #4294967295
 801862c:	2100      	movs	r1, #0
 801862e:	4798      	blx	r3
 8018630:	4603      	mov	r3, r0
 8018632:	73bb      	strb	r3, [r7, #14]
      return;
 8018634:	e088      	b.n	8018748 <tcp_listen_input+0x1b0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8018636:	23f0      	movs	r3, #240	@ 0xf0
 8018638:	73bb      	strb	r3, [r7, #14]
      return;
 801863a:	e085      	b.n	8018748 <tcp_listen_input+0x1b0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801863c:	4b4c      	ldr	r3, [pc, #304]	@ (8018770 <tcp_listen_input+0x1d8>)
 801863e:	695a      	ldr	r2, [r3, #20]
 8018640:	697b      	ldr	r3, [r7, #20]
 8018642:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8018644:	4b4a      	ldr	r3, [pc, #296]	@ (8018770 <tcp_listen_input+0x1d8>)
 8018646:	691a      	ldr	r2, [r3, #16]
 8018648:	697b      	ldr	r3, [r7, #20]
 801864a:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	8ada      	ldrh	r2, [r3, #22]
 8018650:	697b      	ldr	r3, [r7, #20]
 8018652:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8018654:	4b42      	ldr	r3, [pc, #264]	@ (8018760 <tcp_listen_input+0x1c8>)
 8018656:	681b      	ldr	r3, [r3, #0]
 8018658:	881b      	ldrh	r3, [r3, #0]
 801865a:	b29a      	uxth	r2, r3
 801865c:	697b      	ldr	r3, [r7, #20]
 801865e:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8018660:	697b      	ldr	r3, [r7, #20]
 8018662:	2203      	movs	r2, #3
 8018664:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8018666:	4b3d      	ldr	r3, [pc, #244]	@ (801875c <tcp_listen_input+0x1c4>)
 8018668:	681b      	ldr	r3, [r3, #0]
 801866a:	1c5a      	adds	r2, r3, #1
 801866c:	697b      	ldr	r3, [r7, #20]
 801866e:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8018670:	697b      	ldr	r3, [r7, #20]
 8018672:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018674:	697b      	ldr	r3, [r7, #20]
 8018676:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8018678:	6978      	ldr	r0, [r7, #20]
 801867a:	f7ff fa8d 	bl	8017b98 <tcp_next_iss>
 801867e:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8018680:	697b      	ldr	r3, [r7, #20]
 8018682:	693a      	ldr	r2, [r7, #16]
 8018684:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->snd_nxt = iss;
 8018686:	697b      	ldr	r3, [r7, #20]
 8018688:	693a      	ldr	r2, [r7, #16]
 801868a:	64da      	str	r2, [r3, #76]	@ 0x4c
    npcb->lastack = iss;
 801868c:	697b      	ldr	r3, [r7, #20]
 801868e:	693a      	ldr	r2, [r7, #16]
 8018690:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8018692:	697b      	ldr	r3, [r7, #20]
 8018694:	693a      	ldr	r2, [r7, #16]
 8018696:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8018698:	4b30      	ldr	r3, [pc, #192]	@ (801875c <tcp_listen_input+0x1c4>)
 801869a:	681b      	ldr	r3, [r3, #0]
 801869c:	1e5a      	subs	r2, r3, #1
 801869e:	697b      	ldr	r3, [r7, #20]
 80186a0:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->callback_arg = pcb->callback_arg;
 80186a2:	687b      	ldr	r3, [r7, #4]
 80186a4:	691a      	ldr	r2, [r3, #16]
 80186a6:	697b      	ldr	r3, [r7, #20]
 80186a8:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80186aa:	697b      	ldr	r3, [r7, #20]
 80186ac:	687a      	ldr	r2, [r7, #4]
 80186ae:	679a      	str	r2, [r3, #120]	@ 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80186b0:	687b      	ldr	r3, [r7, #4]
 80186b2:	7a1b      	ldrb	r3, [r3, #8]
 80186b4:	f003 030c 	and.w	r3, r3, #12
 80186b8:	b2da      	uxtb	r2, r3
 80186ba:	697b      	ldr	r3, [r7, #20]
 80186bc:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80186be:	4b2d      	ldr	r3, [pc, #180]	@ (8018774 <tcp_listen_input+0x1dc>)
 80186c0:	681a      	ldr	r2, [r3, #0]
 80186c2:	697b      	ldr	r3, [r7, #20]
 80186c4:	60da      	str	r2, [r3, #12]
 80186c6:	4a2b      	ldr	r2, [pc, #172]	@ (8018774 <tcp_listen_input+0x1dc>)
 80186c8:	697b      	ldr	r3, [r7, #20]
 80186ca:	6013      	str	r3, [r2, #0]
 80186cc:	f003 f9a4 	bl	801ba18 <tcp_timer_needed>
 80186d0:	4b29      	ldr	r3, [pc, #164]	@ (8018778 <tcp_listen_input+0x1e0>)
 80186d2:	2201      	movs	r2, #1
 80186d4:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80186d6:	6978      	ldr	r0, [r7, #20]
 80186d8:	f001 fd16 	bl	801a108 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80186dc:	4b20      	ldr	r3, [pc, #128]	@ (8018760 <tcp_listen_input+0x1c8>)
 80186de:	681b      	ldr	r3, [r3, #0]
 80186e0:	89db      	ldrh	r3, [r3, #14]
 80186e2:	b29a      	uxth	r2, r3
 80186e4:	697b      	ldr	r3, [r7, #20]
 80186e6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 80186ea:	697b      	ldr	r3, [r7, #20]
 80186ec:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80186f0:	697b      	ldr	r3, [r7, #20]
 80186f2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80186f6:	697b      	ldr	r3, [r7, #20]
 80186f8:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80186fa:	697b      	ldr	r3, [r7, #20]
 80186fc:	3304      	adds	r3, #4
 80186fe:	4619      	mov	r1, r3
 8018700:	4610      	mov	r0, r2
 8018702:	f7ff fa5f 	bl	8017bc4 <tcp_eff_send_mss_impl>
 8018706:	4603      	mov	r3, r0
 8018708:	461a      	mov	r2, r3
 801870a:	697b      	ldr	r3, [r7, #20]
 801870c:	865a      	strh	r2, [r3, #50]	@ 0x32
    MIB2_STATS_INC(mib2.tcppassiveopens);
 801870e:	4b17      	ldr	r3, [pc, #92]	@ (801876c <tcp_listen_input+0x1d4>)
 8018710:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8018714:	3301      	adds	r3, #1
 8018716:	4a15      	ldr	r2, [pc, #84]	@ (801876c <tcp_listen_input+0x1d4>)
 8018718:	f8c2 311c 	str.w	r3, [r2, #284]	@ 0x11c
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801871c:	2112      	movs	r1, #18
 801871e:	6978      	ldr	r0, [r7, #20]
 8018720:	f002 faf8 	bl	801ad14 <tcp_enqueue_flags>
 8018724:	4603      	mov	r3, r0
 8018726:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8018728:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801872c:	2b00      	cmp	r3, #0
 801872e:	d004      	beq.n	801873a <tcp_listen_input+0x1a2>
      tcp_abandon(npcb, 0);
 8018730:	2100      	movs	r1, #0
 8018732:	6978      	ldr	r0, [r7, #20]
 8018734:	f7fe f84e 	bl	80167d4 <tcp_abandon>
      return;
 8018738:	e006      	b.n	8018748 <tcp_listen_input+0x1b0>
    tcp_output(npcb);
 801873a:	6978      	ldr	r0, [r7, #20]
 801873c:	f002 fc5c 	bl	801aff8 <tcp_output>
  return;
 8018740:	e001      	b.n	8018746 <tcp_listen_input+0x1ae>
    return;
 8018742:	bf00      	nop
 8018744:	e000      	b.n	8018748 <tcp_listen_input+0x1b0>
  return;
 8018746:	bf00      	nop
}
 8018748:	3718      	adds	r7, #24
 801874a:	46bd      	mov	sp, r7
 801874c:	bd80      	pop	{r7, pc}
 801874e:	bf00      	nop
 8018750:	2000c064 	.word	0x2000c064
 8018754:	2000c05c 	.word	0x2000c05c
 8018758:	2000c062 	.word	0x2000c062
 801875c:	2000c058 	.word	0x2000c058
 8018760:	2000c048 	.word	0x2000c048
 8018764:	200088b0 	.word	0x200088b0
 8018768:	200088b4 	.word	0x200088b4
 801876c:	2000be88 	.word	0x2000be88
 8018770:	200088a0 	.word	0x200088a0
 8018774:	2000c02c 	.word	0x2000c02c
 8018778:	2000c034 	.word	0x2000c034

0801877c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801877c:	b580      	push	{r7, lr}
 801877e:	b084      	sub	sp, #16
 8018780:	af02      	add	r7, sp, #8
 8018782:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8018784:	4b29      	ldr	r3, [pc, #164]	@ (801882c <tcp_timewait_input+0xb0>)
 8018786:	781b      	ldrb	r3, [r3, #0]
 8018788:	f003 0304 	and.w	r3, r3, #4
 801878c:	2b00      	cmp	r3, #0
 801878e:	d146      	bne.n	801881e <tcp_timewait_input+0xa2>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8018790:	4b26      	ldr	r3, [pc, #152]	@ (801882c <tcp_timewait_input+0xb0>)
 8018792:	781b      	ldrb	r3, [r3, #0]
 8018794:	f003 0302 	and.w	r3, r3, #2
 8018798:	2b00      	cmp	r3, #0
 801879a:	d027      	beq.n	80187ec <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801879c:	4b24      	ldr	r3, [pc, #144]	@ (8018830 <tcp_timewait_input+0xb4>)
 801879e:	681a      	ldr	r2, [r3, #0]
 80187a0:	687b      	ldr	r3, [r7, #4]
 80187a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80187a4:	1ad3      	subs	r3, r2, r3
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	db2a      	blt.n	8018800 <tcp_timewait_input+0x84>
 80187aa:	4b21      	ldr	r3, [pc, #132]	@ (8018830 <tcp_timewait_input+0xb4>)
 80187ac:	681a      	ldr	r2, [r3, #0]
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80187b2:	6879      	ldr	r1, [r7, #4]
 80187b4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80187b6:	440b      	add	r3, r1
 80187b8:	1ad3      	subs	r3, r2, r3
 80187ba:	2b00      	cmp	r3, #0
 80187bc:	dc20      	bgt.n	8018800 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80187be:	4b1d      	ldr	r3, [pc, #116]	@ (8018834 <tcp_timewait_input+0xb8>)
 80187c0:	6818      	ldr	r0, [r3, #0]
 80187c2:	4b1d      	ldr	r3, [pc, #116]	@ (8018838 <tcp_timewait_input+0xbc>)
 80187c4:	881b      	ldrh	r3, [r3, #0]
 80187c6:	461a      	mov	r2, r3
 80187c8:	4b19      	ldr	r3, [pc, #100]	@ (8018830 <tcp_timewait_input+0xb4>)
 80187ca:	681b      	ldr	r3, [r3, #0]
 80187cc:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80187ce:	4b1b      	ldr	r3, [pc, #108]	@ (801883c <tcp_timewait_input+0xc0>)
 80187d0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80187d2:	885b      	ldrh	r3, [r3, #2]
 80187d4:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80187d6:	4a19      	ldr	r2, [pc, #100]	@ (801883c <tcp_timewait_input+0xc0>)
 80187d8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80187da:	8812      	ldrh	r2, [r2, #0]
 80187dc:	b292      	uxth	r2, r2
 80187de:	9201      	str	r2, [sp, #4]
 80187e0:	9300      	str	r3, [sp, #0]
 80187e2:	4b17      	ldr	r3, [pc, #92]	@ (8018840 <tcp_timewait_input+0xc4>)
 80187e4:	4a17      	ldr	r2, [pc, #92]	@ (8018844 <tcp_timewait_input+0xc8>)
 80187e6:	f002 fe9f 	bl	801b528 <tcp_rst>
      return;
 80187ea:	e01b      	b.n	8018824 <tcp_timewait_input+0xa8>
    }
  } else if (flags & TCP_FIN) {
 80187ec:	4b0f      	ldr	r3, [pc, #60]	@ (801882c <tcp_timewait_input+0xb0>)
 80187ee:	781b      	ldrb	r3, [r3, #0]
 80187f0:	f003 0301 	and.w	r3, r3, #1
 80187f4:	2b00      	cmp	r3, #0
 80187f6:	d003      	beq.n	8018800 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80187f8:	4b13      	ldr	r3, [pc, #76]	@ (8018848 <tcp_timewait_input+0xcc>)
 80187fa:	681a      	ldr	r2, [r3, #0]
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8018800:	4b0d      	ldr	r3, [pc, #52]	@ (8018838 <tcp_timewait_input+0xbc>)
 8018802:	881b      	ldrh	r3, [r3, #0]
 8018804:	2b00      	cmp	r3, #0
 8018806:	d00c      	beq.n	8018822 <tcp_timewait_input+0xa6>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	7e9b      	ldrb	r3, [r3, #26]
 801880c:	f043 0302 	orr.w	r3, r3, #2
 8018810:	b2da      	uxtb	r2, r3
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8018816:	6878      	ldr	r0, [r7, #4]
 8018818:	f002 fbee 	bl	801aff8 <tcp_output>
  }
  return;
 801881c:	e001      	b.n	8018822 <tcp_timewait_input+0xa6>
    return;
 801881e:	bf00      	nop
 8018820:	e000      	b.n	8018824 <tcp_timewait_input+0xa8>
  return;
 8018822:	bf00      	nop
}
 8018824:	3708      	adds	r7, #8
 8018826:	46bd      	mov	sp, r7
 8018828:	bd80      	pop	{r7, pc}
 801882a:	bf00      	nop
 801882c:	2000c064 	.word	0x2000c064
 8018830:	2000c058 	.word	0x2000c058
 8018834:	2000c05c 	.word	0x2000c05c
 8018838:	2000c062 	.word	0x2000c062
 801883c:	2000c048 	.word	0x2000c048
 8018840:	200088b0 	.word	0x200088b0
 8018844:	200088b4 	.word	0x200088b4
 8018848:	2000c020 	.word	0x2000c020

0801884c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801884c:	b580      	push	{r7, lr}
 801884e:	b08a      	sub	sp, #40	@ 0x28
 8018850:	af02      	add	r7, sp, #8
 8018852:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8018854:	2300      	movs	r3, #0
 8018856:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8018858:	2300      	movs	r3, #0
 801885a:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801885c:	4b93      	ldr	r3, [pc, #588]	@ (8018aac <tcp_process+0x260>)
 801885e:	781b      	ldrb	r3, [r3, #0]
 8018860:	f003 0304 	and.w	r3, r3, #4
 8018864:	2b00      	cmp	r3, #0
 8018866:	d04e      	beq.n	8018906 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8018868:	687b      	ldr	r3, [r7, #4]
 801886a:	7d1b      	ldrb	r3, [r3, #20]
 801886c:	2b02      	cmp	r3, #2
 801886e:	d108      	bne.n	8018882 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018874:	4b8e      	ldr	r3, [pc, #568]	@ (8018ab0 <tcp_process+0x264>)
 8018876:	681b      	ldr	r3, [r3, #0]
 8018878:	429a      	cmp	r2, r3
 801887a:	d123      	bne.n	80188c4 <tcp_process+0x78>
        acceptable = 1;
 801887c:	2301      	movs	r3, #1
 801887e:	76fb      	strb	r3, [r7, #27]
 8018880:	e020      	b.n	80188c4 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018886:	4b8b      	ldr	r3, [pc, #556]	@ (8018ab4 <tcp_process+0x268>)
 8018888:	681b      	ldr	r3, [r3, #0]
 801888a:	429a      	cmp	r2, r3
 801888c:	d102      	bne.n	8018894 <tcp_process+0x48>
        acceptable = 1;
 801888e:	2301      	movs	r3, #1
 8018890:	76fb      	strb	r3, [r7, #27]
 8018892:	e017      	b.n	80188c4 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018894:	4b87      	ldr	r3, [pc, #540]	@ (8018ab4 <tcp_process+0x268>)
 8018896:	681a      	ldr	r2, [r3, #0]
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801889c:	1ad3      	subs	r3, r2, r3
 801889e:	2b00      	cmp	r3, #0
 80188a0:	db10      	blt.n	80188c4 <tcp_process+0x78>
 80188a2:	4b84      	ldr	r3, [pc, #528]	@ (8018ab4 <tcp_process+0x268>)
 80188a4:	681a      	ldr	r2, [r3, #0]
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80188aa:	6879      	ldr	r1, [r7, #4]
 80188ac:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80188ae:	440b      	add	r3, r1
 80188b0:	1ad3      	subs	r3, r2, r3
 80188b2:	2b00      	cmp	r3, #0
 80188b4:	dc06      	bgt.n	80188c4 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 80188b6:	687b      	ldr	r3, [r7, #4]
 80188b8:	7e9b      	ldrb	r3, [r3, #26]
 80188ba:	f043 0302 	orr.w	r3, r3, #2
 80188be:	b2da      	uxtb	r2, r3
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80188c4:	7efb      	ldrb	r3, [r7, #27]
 80188c6:	2b00      	cmp	r3, #0
 80188c8:	d01b      	beq.n	8018902 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	7d1b      	ldrb	r3, [r3, #20]
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	d106      	bne.n	80188e0 <tcp_process+0x94>
 80188d2:	4b79      	ldr	r3, [pc, #484]	@ (8018ab8 <tcp_process+0x26c>)
 80188d4:	f240 22e7 	movw	r2, #743	@ 0x2e7
 80188d8:	4978      	ldr	r1, [pc, #480]	@ (8018abc <tcp_process+0x270>)
 80188da:	4879      	ldr	r0, [pc, #484]	@ (8018ac0 <tcp_process+0x274>)
 80188dc:	f009 f9d4 	bl	8021c88 <iprintf>
      recv_flags |= TF_RESET;
 80188e0:	4b78      	ldr	r3, [pc, #480]	@ (8018ac4 <tcp_process+0x278>)
 80188e2:	781b      	ldrb	r3, [r3, #0]
 80188e4:	f043 0308 	orr.w	r3, r3, #8
 80188e8:	b2da      	uxtb	r2, r3
 80188ea:	4b76      	ldr	r3, [pc, #472]	@ (8018ac4 <tcp_process+0x278>)
 80188ec:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	7e9b      	ldrb	r3, [r3, #26]
 80188f2:	f023 0301 	bic.w	r3, r3, #1
 80188f6:	b2da      	uxtb	r2, r3
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 80188fc:	f06f 030d 	mvn.w	r3, #13
 8018900:	e348      	b.n	8018f94 <tcp_process+0x748>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 8018902:	2300      	movs	r3, #0
 8018904:	e346      	b.n	8018f94 <tcp_process+0x748>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8018906:	4b69      	ldr	r3, [pc, #420]	@ (8018aac <tcp_process+0x260>)
 8018908:	781b      	ldrb	r3, [r3, #0]
 801890a:	f003 0302 	and.w	r3, r3, #2
 801890e:	2b00      	cmp	r3, #0
 8018910:	d010      	beq.n	8018934 <tcp_process+0xe8>
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	7d1b      	ldrb	r3, [r3, #20]
 8018916:	2b02      	cmp	r3, #2
 8018918:	d00c      	beq.n	8018934 <tcp_process+0xe8>
 801891a:	687b      	ldr	r3, [r7, #4]
 801891c:	7d1b      	ldrb	r3, [r3, #20]
 801891e:	2b03      	cmp	r3, #3
 8018920:	d008      	beq.n	8018934 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	7e9b      	ldrb	r3, [r3, #26]
 8018926:	f043 0302 	orr.w	r3, r3, #2
 801892a:	b2da      	uxtb	r2, r3
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 8018930:	2300      	movs	r3, #0
 8018932:	e32f      	b.n	8018f94 <tcp_process+0x748>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	7e9b      	ldrb	r3, [r3, #26]
 8018938:	f003 0310 	and.w	r3, r3, #16
 801893c:	2b00      	cmp	r3, #0
 801893e:	d103      	bne.n	8018948 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8018940:	4b61      	ldr	r3, [pc, #388]	@ (8018ac8 <tcp_process+0x27c>)
 8018942:	681a      	ldr	r2, [r3, #0]
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	2200      	movs	r2, #0
 801894c:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96

  tcp_parseopt(pcb);
 8018950:	6878      	ldr	r0, [r7, #4]
 8018952:	f001 fbd9 	bl	801a108 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8018956:	687b      	ldr	r3, [r7, #4]
 8018958:	7d1b      	ldrb	r3, [r3, #20]
 801895a:	3b02      	subs	r3, #2
 801895c:	2b07      	cmp	r3, #7
 801895e:	f200 8309 	bhi.w	8018f74 <tcp_process+0x728>
 8018962:	a201      	add	r2, pc, #4	@ (adr r2, 8018968 <tcp_process+0x11c>)
 8018964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018968:	08018989 	.word	0x08018989
 801896c:	08018b7f 	.word	0x08018b7f
 8018970:	08018cd7 	.word	0x08018cd7
 8018974:	08018d01 	.word	0x08018d01
 8018978:	08018e23 	.word	0x08018e23
 801897c:	08018cd7 	.word	0x08018cd7
 8018980:	08018eaf 	.word	0x08018eaf
 8018984:	08018f3f 	.word	0x08018f3f
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8018988:	4b48      	ldr	r3, [pc, #288]	@ (8018aac <tcp_process+0x260>)
 801898a:	781b      	ldrb	r3, [r3, #0]
 801898c:	f003 0310 	and.w	r3, r3, #16
 8018990:	2b00      	cmp	r3, #0
 8018992:	f000 80ca 	beq.w	8018b2a <tcp_process+0x2de>
 8018996:	4b45      	ldr	r3, [pc, #276]	@ (8018aac <tcp_process+0x260>)
 8018998:	781b      	ldrb	r3, [r3, #0]
 801899a:	f003 0302 	and.w	r3, r3, #2
 801899e:	2b00      	cmp	r3, #0
 80189a0:	f000 80c3 	beq.w	8018b2a <tcp_process+0x2de>
        && (ackno == pcb->lastack + 1)) {
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80189a8:	1c5a      	adds	r2, r3, #1
 80189aa:	4b41      	ldr	r3, [pc, #260]	@ (8018ab0 <tcp_process+0x264>)
 80189ac:	681b      	ldr	r3, [r3, #0]
 80189ae:	429a      	cmp	r2, r3
 80189b0:	f040 80bb 	bne.w	8018b2a <tcp_process+0x2de>
      pcb->rcv_nxt = seqno + 1;
 80189b4:	4b3f      	ldr	r3, [pc, #252]	@ (8018ab4 <tcp_process+0x268>)
 80189b6:	681b      	ldr	r3, [r3, #0]
 80189b8:	1c5a      	adds	r2, r3, #1
 80189ba:	687b      	ldr	r3, [r7, #4]
 80189bc:	625a      	str	r2, [r3, #36]	@ 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	62da      	str	r2, [r3, #44]	@ 0x2c
      pcb->lastack = ackno;
 80189c6:	4b3a      	ldr	r3, [pc, #232]	@ (8018ab0 <tcp_process+0x264>)
 80189c8:	681a      	ldr	r2, [r3, #0]
 80189ca:	687b      	ldr	r3, [r7, #4]
 80189cc:	645a      	str	r2, [r3, #68]	@ 0x44
      pcb->snd_wnd = tcphdr->wnd;
 80189ce:	4b3f      	ldr	r3, [pc, #252]	@ (8018acc <tcp_process+0x280>)
 80189d0:	681b      	ldr	r3, [r3, #0]
 80189d2:	89db      	ldrh	r3, [r3, #14]
 80189d4:	b29a      	uxth	r2, r3
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80189e2:	687b      	ldr	r3, [r7, #4]
 80189e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80189e8:	4b32      	ldr	r3, [pc, #200]	@ (8018ab4 <tcp_process+0x268>)
 80189ea:	681b      	ldr	r3, [r3, #0]
 80189ec:	1e5a      	subs	r2, r3, #1
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	651a      	str	r2, [r3, #80]	@ 0x50
      pcb->state = ESTABLISHED;
 80189f2:	687b      	ldr	r3, [r7, #4]
 80189f4:	2204      	movs	r2, #4
 80189f6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80189fc:	687b      	ldr	r3, [r7, #4]
 80189fe:	3304      	adds	r3, #4
 8018a00:	4619      	mov	r1, r3
 8018a02:	4610      	mov	r0, r2
 8018a04:	f7ff f8de 	bl	8017bc4 <tcp_eff_send_mss_impl>
 8018a08:	4603      	mov	r3, r0
 8018a0a:	461a      	mov	r2, r3
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8018a10:	687b      	ldr	r3, [r7, #4]
 8018a12:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018a14:	005b      	lsls	r3, r3, #1
 8018a16:	f241 121c 	movw	r2, #4380	@ 0x111c
 8018a1a:	429a      	cmp	r2, r3
 8018a1c:	bf38      	it	cc
 8018a1e:	461a      	movcc	r2, r3
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018a24:	009b      	lsls	r3, r3, #2
 8018a26:	4293      	cmp	r3, r2
 8018a28:	bf28      	it	cs
 8018a2a:	4613      	movcs	r3, r2
 8018a2c:	b29a      	uxth	r2, r3
 8018a2e:	687b      	ldr	r3, [r7, #4]
 8018a30:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	d106      	bne.n	8018a4c <tcp_process+0x200>
 8018a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8018ab8 <tcp_process+0x26c>)
 8018a40:	f240 321a 	movw	r2, #794	@ 0x31a
 8018a44:	4922      	ldr	r1, [pc, #136]	@ (8018ad0 <tcp_process+0x284>)
 8018a46:	481e      	ldr	r0, [pc, #120]	@ (8018ac0 <tcp_process+0x274>)
 8018a48:	f009 f91e 	bl	8021c88 <iprintf>
      --pcb->snd_queuelen;
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8018a52:	3b01      	subs	r3, #1
 8018a54:	b29a      	uxth	r2, r3
 8018a56:	687b      	ldr	r3, [r7, #4]
 8018a58:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 8018a5c:	687b      	ldr	r3, [r7, #4]
 8018a5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018a60:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 8018a62:	69fb      	ldr	r3, [r7, #28]
 8018a64:	2b00      	cmp	r3, #0
 8018a66:	d111      	bne.n	8018a8c <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 8018a68:	687b      	ldr	r3, [r7, #4]
 8018a6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018a6c:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8018a6e:	69fb      	ldr	r3, [r7, #28]
 8018a70:	2b00      	cmp	r3, #0
 8018a72:	d106      	bne.n	8018a82 <tcp_process+0x236>
 8018a74:	4b10      	ldr	r3, [pc, #64]	@ (8018ab8 <tcp_process+0x26c>)
 8018a76:	f240 3222 	movw	r2, #802	@ 0x322
 8018a7a:	4916      	ldr	r1, [pc, #88]	@ (8018ad4 <tcp_process+0x288>)
 8018a7c:	4810      	ldr	r0, [pc, #64]	@ (8018ac0 <tcp_process+0x274>)
 8018a7e:	f009 f903 	bl	8021c88 <iprintf>
        pcb->unsent = rseg->next;
 8018a82:	69fb      	ldr	r3, [r7, #28]
 8018a84:	681a      	ldr	r2, [r3, #0]
 8018a86:	687b      	ldr	r3, [r7, #4]
 8018a88:	669a      	str	r2, [r3, #104]	@ 0x68
 8018a8a:	e003      	b.n	8018a94 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 8018a8c:	69fb      	ldr	r3, [r7, #28]
 8018a8e:	681a      	ldr	r2, [r3, #0]
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      tcp_seg_free(rseg);
 8018a94:	69f8      	ldr	r0, [r7, #28]
 8018a96:	f7fe fd39 	bl	801750c <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8018a9a:	687b      	ldr	r3, [r7, #4]
 8018a9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018a9e:	2b00      	cmp	r3, #0
 8018aa0:	d11a      	bne.n	8018ad8 <tcp_process+0x28c>
        pcb->rtime = -1;
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018aa8:	861a      	strh	r2, [r3, #48]	@ 0x30
 8018aaa:	e01c      	b.n	8018ae6 <tcp_process+0x29a>
 8018aac:	2000c064 	.word	0x2000c064
 8018ab0:	2000c05c 	.word	0x2000c05c
 8018ab4:	2000c058 	.word	0x2000c058
 8018ab8:	080264b0 	.word	0x080264b0
 8018abc:	08026668 	.word	0x08026668
 8018ac0:	080264f4 	.word	0x080264f4
 8018ac4:	2000c065 	.word	0x2000c065
 8018ac8:	2000c020 	.word	0x2000c020
 8018acc:	2000c048 	.word	0x2000c048
 8018ad0:	08026688 	.word	0x08026688
 8018ad4:	080266a0 	.word	0x080266a0
      } else {
        pcb->rtime = 0;
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	2200      	movs	r2, #0
 8018adc:	861a      	strh	r2, [r3, #48]	@ 0x30
        pcb->nrtx = 0;
 8018ade:	687b      	ldr	r3, [r7, #4]
 8018ae0:	2200      	movs	r2, #0
 8018ae2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8018aec:	2b00      	cmp	r3, #0
 8018aee:	d00a      	beq.n	8018b06 <tcp_process+0x2ba>
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8018af6:	687a      	ldr	r2, [r7, #4]
 8018af8:	6910      	ldr	r0, [r2, #16]
 8018afa:	2200      	movs	r2, #0
 8018afc:	6879      	ldr	r1, [r7, #4]
 8018afe:	4798      	blx	r3
 8018b00:	4603      	mov	r3, r0
 8018b02:	76bb      	strb	r3, [r7, #26]
 8018b04:	e001      	b.n	8018b0a <tcp_process+0x2be>
 8018b06:	2300      	movs	r3, #0
 8018b08:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 8018b0a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8018b0e:	f113 0f0d 	cmn.w	r3, #13
 8018b12:	d102      	bne.n	8018b1a <tcp_process+0x2ce>
        return ERR_ABRT;
 8018b14:	f06f 030c 	mvn.w	r3, #12
 8018b18:	e23c      	b.n	8018f94 <tcp_process+0x748>
      }
      tcp_ack_now(pcb);
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	7e9b      	ldrb	r3, [r3, #26]
 8018b1e:	f043 0302 	orr.w	r3, r3, #2
 8018b22:	b2da      	uxtb	r2, r3
 8018b24:	687b      	ldr	r3, [r7, #4]
 8018b26:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 8018b28:	e226      	b.n	8018f78 <tcp_process+0x72c>
    else if (flags & TCP_ACK) {
 8018b2a:	4b93      	ldr	r3, [pc, #588]	@ (8018d78 <tcp_process+0x52c>)
 8018b2c:	781b      	ldrb	r3, [r3, #0]
 8018b2e:	f003 0310 	and.w	r3, r3, #16
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	f000 8220 	beq.w	8018f78 <tcp_process+0x72c>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8018b38:	4b90      	ldr	r3, [pc, #576]	@ (8018d7c <tcp_process+0x530>)
 8018b3a:	6818      	ldr	r0, [r3, #0]
 8018b3c:	4b90      	ldr	r3, [pc, #576]	@ (8018d80 <tcp_process+0x534>)
 8018b3e:	881b      	ldrh	r3, [r3, #0]
 8018b40:	461a      	mov	r2, r3
 8018b42:	4b90      	ldr	r3, [pc, #576]	@ (8018d84 <tcp_process+0x538>)
 8018b44:	681b      	ldr	r3, [r3, #0]
 8018b46:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018b48:	4b8f      	ldr	r3, [pc, #572]	@ (8018d88 <tcp_process+0x53c>)
 8018b4a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8018b4c:	885b      	ldrh	r3, [r3, #2]
 8018b4e:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018b50:	4a8d      	ldr	r2, [pc, #564]	@ (8018d88 <tcp_process+0x53c>)
 8018b52:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8018b54:	8812      	ldrh	r2, [r2, #0]
 8018b56:	b292      	uxth	r2, r2
 8018b58:	9201      	str	r2, [sp, #4]
 8018b5a:	9300      	str	r3, [sp, #0]
 8018b5c:	4b8b      	ldr	r3, [pc, #556]	@ (8018d8c <tcp_process+0x540>)
 8018b5e:	4a8c      	ldr	r2, [pc, #560]	@ (8018d90 <tcp_process+0x544>)
 8018b60:	f002 fce2 	bl	801b528 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8018b6a:	2b05      	cmp	r3, #5
 8018b6c:	f200 8204 	bhi.w	8018f78 <tcp_process+0x72c>
        pcb->rtime = 0;
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	2200      	movs	r2, #0
 8018b74:	861a      	strh	r2, [r3, #48]	@ 0x30
        tcp_rexmit_rto(pcb);
 8018b76:	6878      	ldr	r0, [r7, #4]
 8018b78:	f002 fd5e 	bl	801b638 <tcp_rexmit_rto>
    break;
 8018b7c:	e1fc      	b.n	8018f78 <tcp_process+0x72c>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 8018b7e:	4b7e      	ldr	r3, [pc, #504]	@ (8018d78 <tcp_process+0x52c>)
 8018b80:	781b      	ldrb	r3, [r3, #0]
 8018b82:	f003 0310 	and.w	r3, r3, #16
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	f000 8091 	beq.w	8018cae <tcp_process+0x462>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8018b8c:	4b7b      	ldr	r3, [pc, #492]	@ (8018d7c <tcp_process+0x530>)
 8018b8e:	681a      	ldr	r2, [r3, #0]
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018b94:	1ad3      	subs	r3, r2, r3
 8018b96:	3b01      	subs	r3, #1
 8018b98:	2b00      	cmp	r3, #0
 8018b9a:	db71      	blt.n	8018c80 <tcp_process+0x434>
 8018b9c:	4b77      	ldr	r3, [pc, #476]	@ (8018d7c <tcp_process+0x530>)
 8018b9e:	681a      	ldr	r2, [r3, #0]
 8018ba0:	687b      	ldr	r3, [r7, #4]
 8018ba2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018ba4:	1ad3      	subs	r3, r2, r3
 8018ba6:	2b00      	cmp	r3, #0
 8018ba8:	dc6a      	bgt.n	8018c80 <tcp_process+0x434>
        pcb->state = ESTABLISHED;
 8018baa:	687b      	ldr	r3, [r7, #4]
 8018bac:	2204      	movs	r2, #4
 8018bae:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8018bb4:	2b00      	cmp	r3, #0
 8018bb6:	d00b      	beq.n	8018bd0 <tcp_process+0x384>
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8018bbc:	699b      	ldr	r3, [r3, #24]
 8018bbe:	2b00      	cmp	r3, #0
 8018bc0:	d106      	bne.n	8018bd0 <tcp_process+0x384>
 8018bc2:	4b74      	ldr	r3, [pc, #464]	@ (8018d94 <tcp_process+0x548>)
 8018bc4:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8018bc8:	4973      	ldr	r1, [pc, #460]	@ (8018d98 <tcp_process+0x54c>)
 8018bca:	4874      	ldr	r0, [pc, #464]	@ (8018d9c <tcp_process+0x550>)
 8018bcc:	f009 f85c 	bl	8021c88 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8018bd4:	2b00      	cmp	r3, #0
 8018bd6:	d102      	bne.n	8018bde <tcp_process+0x392>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 8018bd8:	23fa      	movs	r3, #250	@ 0xfa
 8018bda:	76bb      	strb	r3, [r7, #26]
 8018bdc:	e011      	b.n	8018c02 <tcp_process+0x3b6>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8018bde:	687b      	ldr	r3, [r7, #4]
 8018be0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8018be2:	699b      	ldr	r3, [r3, #24]
 8018be4:	2b00      	cmp	r3, #0
 8018be6:	d00a      	beq.n	8018bfe <tcp_process+0x3b2>
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8018bec:	699b      	ldr	r3, [r3, #24]
 8018bee:	687a      	ldr	r2, [r7, #4]
 8018bf0:	6910      	ldr	r0, [r2, #16]
 8018bf2:	2200      	movs	r2, #0
 8018bf4:	6879      	ldr	r1, [r7, #4]
 8018bf6:	4798      	blx	r3
 8018bf8:	4603      	mov	r3, r0
 8018bfa:	76bb      	strb	r3, [r7, #26]
 8018bfc:	e001      	b.n	8018c02 <tcp_process+0x3b6>
 8018bfe:	23f0      	movs	r3, #240	@ 0xf0
 8018c00:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 8018c02:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8018c06:	2b00      	cmp	r3, #0
 8018c08:	d00a      	beq.n	8018c20 <tcp_process+0x3d4>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 8018c0a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8018c0e:	f113 0f0d 	cmn.w	r3, #13
 8018c12:	d002      	beq.n	8018c1a <tcp_process+0x3ce>
            tcp_abort(pcb);
 8018c14:	6878      	ldr	r0, [r7, #4]
 8018c16:	f7fd fe8f 	bl	8016938 <tcp_abort>
          }
          return ERR_ABRT;
 8018c1a:	f06f 030c 	mvn.w	r3, #12
 8018c1e:	e1b9      	b.n	8018f94 <tcp_process+0x748>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 8018c20:	6878      	ldr	r0, [r7, #4]
 8018c22:	f000 fa3d 	bl	80190a0 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 8018c26:	4b5e      	ldr	r3, [pc, #376]	@ (8018da0 <tcp_process+0x554>)
 8018c28:	881b      	ldrh	r3, [r3, #0]
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	d005      	beq.n	8018c3a <tcp_process+0x3ee>
          recv_acked--;
 8018c2e:	4b5c      	ldr	r3, [pc, #368]	@ (8018da0 <tcp_process+0x554>)
 8018c30:	881b      	ldrh	r3, [r3, #0]
 8018c32:	3b01      	subs	r3, #1
 8018c34:	b29a      	uxth	r2, r3
 8018c36:	4b5a      	ldr	r3, [pc, #360]	@ (8018da0 <tcp_process+0x554>)
 8018c38:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018c3e:	005b      	lsls	r3, r3, #1
 8018c40:	f241 121c 	movw	r2, #4380	@ 0x111c
 8018c44:	429a      	cmp	r2, r3
 8018c46:	bf38      	it	cc
 8018c48:	461a      	movcc	r2, r3
 8018c4a:	687b      	ldr	r3, [r7, #4]
 8018c4c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018c4e:	009b      	lsls	r3, r3, #2
 8018c50:	4293      	cmp	r3, r2
 8018c52:	bf28      	it	cs
 8018c54:	4613      	movcs	r3, r2
 8018c56:	b29a      	uxth	r2, r3
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 8018c5e:	4b51      	ldr	r3, [pc, #324]	@ (8018da4 <tcp_process+0x558>)
 8018c60:	781b      	ldrb	r3, [r3, #0]
 8018c62:	f003 0320 	and.w	r3, r3, #32
 8018c66:	2b00      	cmp	r3, #0
 8018c68:	d034      	beq.n	8018cd4 <tcp_process+0x488>
          tcp_ack_now(pcb);
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	7e9b      	ldrb	r3, [r3, #26]
 8018c6e:	f043 0302 	orr.w	r3, r3, #2
 8018c72:	b2da      	uxtb	r2, r3
 8018c74:	687b      	ldr	r3, [r7, #4]
 8018c76:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	2207      	movs	r2, #7
 8018c7c:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 8018c7e:	e029      	b.n	8018cd4 <tcp_process+0x488>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8018c80:	4b3e      	ldr	r3, [pc, #248]	@ (8018d7c <tcp_process+0x530>)
 8018c82:	6818      	ldr	r0, [r3, #0]
 8018c84:	4b3e      	ldr	r3, [pc, #248]	@ (8018d80 <tcp_process+0x534>)
 8018c86:	881b      	ldrh	r3, [r3, #0]
 8018c88:	461a      	mov	r2, r3
 8018c8a:	4b3e      	ldr	r3, [pc, #248]	@ (8018d84 <tcp_process+0x538>)
 8018c8c:	681b      	ldr	r3, [r3, #0]
 8018c8e:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018c90:	4b3d      	ldr	r3, [pc, #244]	@ (8018d88 <tcp_process+0x53c>)
 8018c92:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8018c94:	885b      	ldrh	r3, [r3, #2]
 8018c96:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018c98:	4a3b      	ldr	r2, [pc, #236]	@ (8018d88 <tcp_process+0x53c>)
 8018c9a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8018c9c:	8812      	ldrh	r2, [r2, #0]
 8018c9e:	b292      	uxth	r2, r2
 8018ca0:	9201      	str	r2, [sp, #4]
 8018ca2:	9300      	str	r3, [sp, #0]
 8018ca4:	4b39      	ldr	r3, [pc, #228]	@ (8018d8c <tcp_process+0x540>)
 8018ca6:	4a3a      	ldr	r2, [pc, #232]	@ (8018d90 <tcp_process+0x544>)
 8018ca8:	f002 fc3e 	bl	801b528 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 8018cac:	e166      	b.n	8018f7c <tcp_process+0x730>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8018cae:	4b32      	ldr	r3, [pc, #200]	@ (8018d78 <tcp_process+0x52c>)
 8018cb0:	781b      	ldrb	r3, [r3, #0]
 8018cb2:	f003 0302 	and.w	r3, r3, #2
 8018cb6:	2b00      	cmp	r3, #0
 8018cb8:	f000 8160 	beq.w	8018f7c <tcp_process+0x730>
 8018cbc:	687b      	ldr	r3, [r7, #4]
 8018cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018cc0:	1e5a      	subs	r2, r3, #1
 8018cc2:	4b30      	ldr	r3, [pc, #192]	@ (8018d84 <tcp_process+0x538>)
 8018cc4:	681b      	ldr	r3, [r3, #0]
 8018cc6:	429a      	cmp	r2, r3
 8018cc8:	f040 8158 	bne.w	8018f7c <tcp_process+0x730>
      tcp_rexmit(pcb);
 8018ccc:	6878      	ldr	r0, [r7, #4]
 8018cce:	f002 fce9 	bl	801b6a4 <tcp_rexmit>
    break;
 8018cd2:	e153      	b.n	8018f7c <tcp_process+0x730>
 8018cd4:	e152      	b.n	8018f7c <tcp_process+0x730>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 8018cd6:	6878      	ldr	r0, [r7, #4]
 8018cd8:	f000 f9e2 	bl	80190a0 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8018cdc:	4b31      	ldr	r3, [pc, #196]	@ (8018da4 <tcp_process+0x558>)
 8018cde:	781b      	ldrb	r3, [r3, #0]
 8018ce0:	f003 0320 	and.w	r3, r3, #32
 8018ce4:	2b00      	cmp	r3, #0
 8018ce6:	f000 814b 	beq.w	8018f80 <tcp_process+0x734>
      tcp_ack_now(pcb);
 8018cea:	687b      	ldr	r3, [r7, #4]
 8018cec:	7e9b      	ldrb	r3, [r3, #26]
 8018cee:	f043 0302 	orr.w	r3, r3, #2
 8018cf2:	b2da      	uxtb	r2, r3
 8018cf4:	687b      	ldr	r3, [r7, #4]
 8018cf6:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	2207      	movs	r2, #7
 8018cfc:	751a      	strb	r2, [r3, #20]
    }
    break;
 8018cfe:	e13f      	b.n	8018f80 <tcp_process+0x734>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 8018d00:	6878      	ldr	r0, [r7, #4]
 8018d02:	f000 f9cd 	bl	80190a0 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8018d06:	4b27      	ldr	r3, [pc, #156]	@ (8018da4 <tcp_process+0x558>)
 8018d08:	781b      	ldrb	r3, [r3, #0]
 8018d0a:	f003 0320 	and.w	r3, r3, #32
 8018d0e:	2b00      	cmp	r3, #0
 8018d10:	d070      	beq.n	8018df4 <tcp_process+0x5a8>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018d12:	4b19      	ldr	r3, [pc, #100]	@ (8018d78 <tcp_process+0x52c>)
 8018d14:	781b      	ldrb	r3, [r3, #0]
 8018d16:	f003 0310 	and.w	r3, r3, #16
 8018d1a:	2b00      	cmp	r3, #0
 8018d1c:	d05f      	beq.n	8018dde <tcp_process+0x592>
 8018d1e:	687b      	ldr	r3, [r7, #4]
 8018d20:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018d22:	4b16      	ldr	r3, [pc, #88]	@ (8018d7c <tcp_process+0x530>)
 8018d24:	681b      	ldr	r3, [r3, #0]
 8018d26:	429a      	cmp	r2, r3
 8018d28:	d159      	bne.n	8018dde <tcp_process+0x592>
          pcb->unsent == NULL) {
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018d2e:	2b00      	cmp	r3, #0
 8018d30:	d155      	bne.n	8018dde <tcp_process+0x592>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8018d32:	687b      	ldr	r3, [r7, #4]
 8018d34:	7e9b      	ldrb	r3, [r3, #26]
 8018d36:	f043 0302 	orr.w	r3, r3, #2
 8018d3a:	b2da      	uxtb	r2, r3
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8018d40:	6878      	ldr	r0, [r7, #4]
 8018d42:	f7fe fe6b 	bl	8017a1c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8018d46:	4b18      	ldr	r3, [pc, #96]	@ (8018da8 <tcp_process+0x55c>)
 8018d48:	681b      	ldr	r3, [r3, #0]
 8018d4a:	687a      	ldr	r2, [r7, #4]
 8018d4c:	429a      	cmp	r2, r3
 8018d4e:	d105      	bne.n	8018d5c <tcp_process+0x510>
 8018d50:	4b15      	ldr	r3, [pc, #84]	@ (8018da8 <tcp_process+0x55c>)
 8018d52:	681b      	ldr	r3, [r3, #0]
 8018d54:	68db      	ldr	r3, [r3, #12]
 8018d56:	4a14      	ldr	r2, [pc, #80]	@ (8018da8 <tcp_process+0x55c>)
 8018d58:	6013      	str	r3, [r2, #0]
 8018d5a:	e02d      	b.n	8018db8 <tcp_process+0x56c>
 8018d5c:	4b12      	ldr	r3, [pc, #72]	@ (8018da8 <tcp_process+0x55c>)
 8018d5e:	681b      	ldr	r3, [r3, #0]
 8018d60:	617b      	str	r3, [r7, #20]
 8018d62:	e026      	b.n	8018db2 <tcp_process+0x566>
 8018d64:	697b      	ldr	r3, [r7, #20]
 8018d66:	68db      	ldr	r3, [r3, #12]
 8018d68:	687a      	ldr	r2, [r7, #4]
 8018d6a:	429a      	cmp	r2, r3
 8018d6c:	d11e      	bne.n	8018dac <tcp_process+0x560>
 8018d6e:	687b      	ldr	r3, [r7, #4]
 8018d70:	68da      	ldr	r2, [r3, #12]
 8018d72:	697b      	ldr	r3, [r7, #20]
 8018d74:	60da      	str	r2, [r3, #12]
 8018d76:	e01f      	b.n	8018db8 <tcp_process+0x56c>
 8018d78:	2000c064 	.word	0x2000c064
 8018d7c:	2000c05c 	.word	0x2000c05c
 8018d80:	2000c062 	.word	0x2000c062
 8018d84:	2000c058 	.word	0x2000c058
 8018d88:	2000c048 	.word	0x2000c048
 8018d8c:	200088b0 	.word	0x200088b0
 8018d90:	200088b4 	.word	0x200088b4
 8018d94:	080264b0 	.word	0x080264b0
 8018d98:	080266b4 	.word	0x080266b4
 8018d9c:	080264f4 	.word	0x080264f4
 8018da0:	2000c060 	.word	0x2000c060
 8018da4:	2000c065 	.word	0x2000c065
 8018da8:	2000c02c 	.word	0x2000c02c
 8018dac:	697b      	ldr	r3, [r7, #20]
 8018dae:	68db      	ldr	r3, [r3, #12]
 8018db0:	617b      	str	r3, [r7, #20]
 8018db2:	697b      	ldr	r3, [r7, #20]
 8018db4:	2b00      	cmp	r3, #0
 8018db6:	d1d5      	bne.n	8018d64 <tcp_process+0x518>
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	2200      	movs	r2, #0
 8018dbc:	60da      	str	r2, [r3, #12]
 8018dbe:	4b77      	ldr	r3, [pc, #476]	@ (8018f9c <tcp_process+0x750>)
 8018dc0:	2201      	movs	r2, #1
 8018dc2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	220a      	movs	r2, #10
 8018dc8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8018dca:	4b75      	ldr	r3, [pc, #468]	@ (8018fa0 <tcp_process+0x754>)
 8018dcc:	681a      	ldr	r2, [r3, #0]
 8018dce:	687b      	ldr	r3, [r7, #4]
 8018dd0:	60da      	str	r2, [r3, #12]
 8018dd2:	4a73      	ldr	r2, [pc, #460]	@ (8018fa0 <tcp_process+0x754>)
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	6013      	str	r3, [r2, #0]
 8018dd8:	f002 fe1e 	bl	801ba18 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 8018ddc:	e0d2      	b.n	8018f84 <tcp_process+0x738>
        tcp_ack_now(pcb);
 8018dde:	687b      	ldr	r3, [r7, #4]
 8018de0:	7e9b      	ldrb	r3, [r3, #26]
 8018de2:	f043 0302 	orr.w	r3, r3, #2
 8018de6:	b2da      	uxtb	r2, r3
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	2208      	movs	r2, #8
 8018df0:	751a      	strb	r2, [r3, #20]
    break;
 8018df2:	e0c7      	b.n	8018f84 <tcp_process+0x738>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018df4:	4b6b      	ldr	r3, [pc, #428]	@ (8018fa4 <tcp_process+0x758>)
 8018df6:	781b      	ldrb	r3, [r3, #0]
 8018df8:	f003 0310 	and.w	r3, r3, #16
 8018dfc:	2b00      	cmp	r3, #0
 8018dfe:	f000 80c1 	beq.w	8018f84 <tcp_process+0x738>
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018e06:	4b68      	ldr	r3, [pc, #416]	@ (8018fa8 <tcp_process+0x75c>)
 8018e08:	681b      	ldr	r3, [r3, #0]
 8018e0a:	429a      	cmp	r2, r3
 8018e0c:	f040 80ba 	bne.w	8018f84 <tcp_process+0x738>
               pcb->unsent == NULL) {
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018e14:	2b00      	cmp	r3, #0
 8018e16:	f040 80b5 	bne.w	8018f84 <tcp_process+0x738>
      pcb->state = FIN_WAIT_2;
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	2206      	movs	r2, #6
 8018e1e:	751a      	strb	r2, [r3, #20]
    break;
 8018e20:	e0b0      	b.n	8018f84 <tcp_process+0x738>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 8018e22:	6878      	ldr	r0, [r7, #4]
 8018e24:	f000 f93c 	bl	80190a0 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8018e28:	4b60      	ldr	r3, [pc, #384]	@ (8018fac <tcp_process+0x760>)
 8018e2a:	781b      	ldrb	r3, [r3, #0]
 8018e2c:	f003 0320 	and.w	r3, r3, #32
 8018e30:	2b00      	cmp	r3, #0
 8018e32:	f000 80a9 	beq.w	8018f88 <tcp_process+0x73c>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	7e9b      	ldrb	r3, [r3, #26]
 8018e3a:	f043 0302 	orr.w	r3, r3, #2
 8018e3e:	b2da      	uxtb	r2, r3
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 8018e44:	6878      	ldr	r0, [r7, #4]
 8018e46:	f7fe fde9 	bl	8017a1c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8018e4a:	4b59      	ldr	r3, [pc, #356]	@ (8018fb0 <tcp_process+0x764>)
 8018e4c:	681b      	ldr	r3, [r3, #0]
 8018e4e:	687a      	ldr	r2, [r7, #4]
 8018e50:	429a      	cmp	r2, r3
 8018e52:	d105      	bne.n	8018e60 <tcp_process+0x614>
 8018e54:	4b56      	ldr	r3, [pc, #344]	@ (8018fb0 <tcp_process+0x764>)
 8018e56:	681b      	ldr	r3, [r3, #0]
 8018e58:	68db      	ldr	r3, [r3, #12]
 8018e5a:	4a55      	ldr	r2, [pc, #340]	@ (8018fb0 <tcp_process+0x764>)
 8018e5c:	6013      	str	r3, [r2, #0]
 8018e5e:	e013      	b.n	8018e88 <tcp_process+0x63c>
 8018e60:	4b53      	ldr	r3, [pc, #332]	@ (8018fb0 <tcp_process+0x764>)
 8018e62:	681b      	ldr	r3, [r3, #0]
 8018e64:	613b      	str	r3, [r7, #16]
 8018e66:	e00c      	b.n	8018e82 <tcp_process+0x636>
 8018e68:	693b      	ldr	r3, [r7, #16]
 8018e6a:	68db      	ldr	r3, [r3, #12]
 8018e6c:	687a      	ldr	r2, [r7, #4]
 8018e6e:	429a      	cmp	r2, r3
 8018e70:	d104      	bne.n	8018e7c <tcp_process+0x630>
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	68da      	ldr	r2, [r3, #12]
 8018e76:	693b      	ldr	r3, [r7, #16]
 8018e78:	60da      	str	r2, [r3, #12]
 8018e7a:	e005      	b.n	8018e88 <tcp_process+0x63c>
 8018e7c:	693b      	ldr	r3, [r7, #16]
 8018e7e:	68db      	ldr	r3, [r3, #12]
 8018e80:	613b      	str	r3, [r7, #16]
 8018e82:	693b      	ldr	r3, [r7, #16]
 8018e84:	2b00      	cmp	r3, #0
 8018e86:	d1ef      	bne.n	8018e68 <tcp_process+0x61c>
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	2200      	movs	r2, #0
 8018e8c:	60da      	str	r2, [r3, #12]
 8018e8e:	4b43      	ldr	r3, [pc, #268]	@ (8018f9c <tcp_process+0x750>)
 8018e90:	2201      	movs	r2, #1
 8018e92:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	220a      	movs	r2, #10
 8018e98:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8018e9a:	4b41      	ldr	r3, [pc, #260]	@ (8018fa0 <tcp_process+0x754>)
 8018e9c:	681a      	ldr	r2, [r3, #0]
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	60da      	str	r2, [r3, #12]
 8018ea2:	4a3f      	ldr	r2, [pc, #252]	@ (8018fa0 <tcp_process+0x754>)
 8018ea4:	687b      	ldr	r3, [r7, #4]
 8018ea6:	6013      	str	r3, [r2, #0]
 8018ea8:	f002 fdb6 	bl	801ba18 <tcp_timer_needed>
    }
    break;
 8018eac:	e06c      	b.n	8018f88 <tcp_process+0x73c>
  case CLOSING:
    tcp_receive(pcb);
 8018eae:	6878      	ldr	r0, [r7, #4]
 8018eb0:	f000 f8f6 	bl	80190a0 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8018eb4:	4b3b      	ldr	r3, [pc, #236]	@ (8018fa4 <tcp_process+0x758>)
 8018eb6:	781b      	ldrb	r3, [r3, #0]
 8018eb8:	f003 0310 	and.w	r3, r3, #16
 8018ebc:	2b00      	cmp	r3, #0
 8018ebe:	d065      	beq.n	8018f8c <tcp_process+0x740>
 8018ec0:	687b      	ldr	r3, [r7, #4]
 8018ec2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018ec4:	4b38      	ldr	r3, [pc, #224]	@ (8018fa8 <tcp_process+0x75c>)
 8018ec6:	681b      	ldr	r3, [r3, #0]
 8018ec8:	429a      	cmp	r2, r3
 8018eca:	d15f      	bne.n	8018f8c <tcp_process+0x740>
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018ed0:	2b00      	cmp	r3, #0
 8018ed2:	d15b      	bne.n	8018f8c <tcp_process+0x740>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 8018ed4:	6878      	ldr	r0, [r7, #4]
 8018ed6:	f7fe fda1 	bl	8017a1c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8018eda:	4b35      	ldr	r3, [pc, #212]	@ (8018fb0 <tcp_process+0x764>)
 8018edc:	681b      	ldr	r3, [r3, #0]
 8018ede:	687a      	ldr	r2, [r7, #4]
 8018ee0:	429a      	cmp	r2, r3
 8018ee2:	d105      	bne.n	8018ef0 <tcp_process+0x6a4>
 8018ee4:	4b32      	ldr	r3, [pc, #200]	@ (8018fb0 <tcp_process+0x764>)
 8018ee6:	681b      	ldr	r3, [r3, #0]
 8018ee8:	68db      	ldr	r3, [r3, #12]
 8018eea:	4a31      	ldr	r2, [pc, #196]	@ (8018fb0 <tcp_process+0x764>)
 8018eec:	6013      	str	r3, [r2, #0]
 8018eee:	e013      	b.n	8018f18 <tcp_process+0x6cc>
 8018ef0:	4b2f      	ldr	r3, [pc, #188]	@ (8018fb0 <tcp_process+0x764>)
 8018ef2:	681b      	ldr	r3, [r3, #0]
 8018ef4:	60fb      	str	r3, [r7, #12]
 8018ef6:	e00c      	b.n	8018f12 <tcp_process+0x6c6>
 8018ef8:	68fb      	ldr	r3, [r7, #12]
 8018efa:	68db      	ldr	r3, [r3, #12]
 8018efc:	687a      	ldr	r2, [r7, #4]
 8018efe:	429a      	cmp	r2, r3
 8018f00:	d104      	bne.n	8018f0c <tcp_process+0x6c0>
 8018f02:	687b      	ldr	r3, [r7, #4]
 8018f04:	68da      	ldr	r2, [r3, #12]
 8018f06:	68fb      	ldr	r3, [r7, #12]
 8018f08:	60da      	str	r2, [r3, #12]
 8018f0a:	e005      	b.n	8018f18 <tcp_process+0x6cc>
 8018f0c:	68fb      	ldr	r3, [r7, #12]
 8018f0e:	68db      	ldr	r3, [r3, #12]
 8018f10:	60fb      	str	r3, [r7, #12]
 8018f12:	68fb      	ldr	r3, [r7, #12]
 8018f14:	2b00      	cmp	r3, #0
 8018f16:	d1ef      	bne.n	8018ef8 <tcp_process+0x6ac>
 8018f18:	687b      	ldr	r3, [r7, #4]
 8018f1a:	2200      	movs	r2, #0
 8018f1c:	60da      	str	r2, [r3, #12]
 8018f1e:	4b1f      	ldr	r3, [pc, #124]	@ (8018f9c <tcp_process+0x750>)
 8018f20:	2201      	movs	r2, #1
 8018f22:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	220a      	movs	r2, #10
 8018f28:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8018f2a:	4b1d      	ldr	r3, [pc, #116]	@ (8018fa0 <tcp_process+0x754>)
 8018f2c:	681a      	ldr	r2, [r3, #0]
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	60da      	str	r2, [r3, #12]
 8018f32:	4a1b      	ldr	r2, [pc, #108]	@ (8018fa0 <tcp_process+0x754>)
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	6013      	str	r3, [r2, #0]
 8018f38:	f002 fd6e 	bl	801ba18 <tcp_timer_needed>
    }
    break;
 8018f3c:	e026      	b.n	8018f8c <tcp_process+0x740>
  case LAST_ACK:
    tcp_receive(pcb);
 8018f3e:	6878      	ldr	r0, [r7, #4]
 8018f40:	f000 f8ae 	bl	80190a0 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8018f44:	4b17      	ldr	r3, [pc, #92]	@ (8018fa4 <tcp_process+0x758>)
 8018f46:	781b      	ldrb	r3, [r3, #0]
 8018f48:	f003 0310 	and.w	r3, r3, #16
 8018f4c:	2b00      	cmp	r3, #0
 8018f4e:	d01f      	beq.n	8018f90 <tcp_process+0x744>
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018f54:	4b14      	ldr	r3, [pc, #80]	@ (8018fa8 <tcp_process+0x75c>)
 8018f56:	681b      	ldr	r3, [r3, #0]
 8018f58:	429a      	cmp	r2, r3
 8018f5a:	d119      	bne.n	8018f90 <tcp_process+0x744>
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018f60:	2b00      	cmp	r3, #0
 8018f62:	d115      	bne.n	8018f90 <tcp_process+0x744>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 8018f64:	4b11      	ldr	r3, [pc, #68]	@ (8018fac <tcp_process+0x760>)
 8018f66:	781b      	ldrb	r3, [r3, #0]
 8018f68:	f043 0310 	orr.w	r3, r3, #16
 8018f6c:	b2da      	uxtb	r2, r3
 8018f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8018fac <tcp_process+0x760>)
 8018f70:	701a      	strb	r2, [r3, #0]
    }
    break;
 8018f72:	e00d      	b.n	8018f90 <tcp_process+0x744>
  default:
    break;
 8018f74:	bf00      	nop
 8018f76:	e00c      	b.n	8018f92 <tcp_process+0x746>
    break;
 8018f78:	bf00      	nop
 8018f7a:	e00a      	b.n	8018f92 <tcp_process+0x746>
    break;
 8018f7c:	bf00      	nop
 8018f7e:	e008      	b.n	8018f92 <tcp_process+0x746>
    break;
 8018f80:	bf00      	nop
 8018f82:	e006      	b.n	8018f92 <tcp_process+0x746>
    break;
 8018f84:	bf00      	nop
 8018f86:	e004      	b.n	8018f92 <tcp_process+0x746>
    break;
 8018f88:	bf00      	nop
 8018f8a:	e002      	b.n	8018f92 <tcp_process+0x746>
    break;
 8018f8c:	bf00      	nop
 8018f8e:	e000      	b.n	8018f92 <tcp_process+0x746>
    break;
 8018f90:	bf00      	nop
  }
  return ERR_OK;
 8018f92:	2300      	movs	r3, #0
}
 8018f94:	4618      	mov	r0, r3
 8018f96:	3720      	adds	r7, #32
 8018f98:	46bd      	mov	sp, r7
 8018f9a:	bd80      	pop	{r7, pc}
 8018f9c:	2000c034 	.word	0x2000c034
 8018fa0:	2000c030 	.word	0x2000c030
 8018fa4:	2000c064 	.word	0x2000c064
 8018fa8:	2000c05c 	.word	0x2000c05c
 8018fac:	2000c065 	.word	0x2000c065
 8018fb0:	2000c02c 	.word	0x2000c02c

08018fb4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8018fb4:	b590      	push	{r4, r7, lr}
 8018fb6:	b085      	sub	sp, #20
 8018fb8:	af00      	add	r7, sp, #0
 8018fba:	6078      	str	r0, [r7, #4]
 8018fbc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8018fbe:	687b      	ldr	r3, [r7, #4]
 8018fc0:	68db      	ldr	r3, [r3, #12]
 8018fc2:	899b      	ldrh	r3, [r3, #12]
 8018fc4:	b29b      	uxth	r3, r3
 8018fc6:	4618      	mov	r0, r3
 8018fc8:	f7fb fc14 	bl	80147f4 <lwip_htons>
 8018fcc:	4603      	mov	r3, r0
 8018fce:	f003 0301 	and.w	r3, r3, #1
 8018fd2:	2b00      	cmp	r3, #0
 8018fd4:	d027      	beq.n	8019026 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8018fd6:	6838      	ldr	r0, [r7, #0]
 8018fd8:	f7fe fa83 	bl	80174e2 <tcp_segs_free>
    next = NULL;
 8018fdc:	2300      	movs	r3, #0
 8018fde:	603b      	str	r3, [r7, #0]
 8018fe0:	e055      	b.n	801908e <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8018fe2:	683b      	ldr	r3, [r7, #0]
 8018fe4:	68db      	ldr	r3, [r3, #12]
 8018fe6:	899b      	ldrh	r3, [r3, #12]
 8018fe8:	b29b      	uxth	r3, r3
 8018fea:	4618      	mov	r0, r3
 8018fec:	f7fb fc02 	bl	80147f4 <lwip_htons>
 8018ff0:	4603      	mov	r3, r0
 8018ff2:	f003 0301 	and.w	r3, r3, #1
 8018ff6:	2b00      	cmp	r3, #0
 8018ff8:	d00d      	beq.n	8019016 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	68db      	ldr	r3, [r3, #12]
 8018ffe:	899b      	ldrh	r3, [r3, #12]
 8019000:	b29c      	uxth	r4, r3
 8019002:	2001      	movs	r0, #1
 8019004:	f7fb fbf6 	bl	80147f4 <lwip_htons>
 8019008:	4603      	mov	r3, r0
 801900a:	461a      	mov	r2, r3
 801900c:	687b      	ldr	r3, [r7, #4]
 801900e:	68db      	ldr	r3, [r3, #12]
 8019010:	4322      	orrs	r2, r4
 8019012:	b292      	uxth	r2, r2
 8019014:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8019016:	683b      	ldr	r3, [r7, #0]
 8019018:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801901a:	683b      	ldr	r3, [r7, #0]
 801901c:	681b      	ldr	r3, [r3, #0]
 801901e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8019020:	68f8      	ldr	r0, [r7, #12]
 8019022:	f7fe fa73 	bl	801750c <tcp_seg_free>
    while (next &&
 8019026:	683b      	ldr	r3, [r7, #0]
 8019028:	2b00      	cmp	r3, #0
 801902a:	d00e      	beq.n	801904a <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801902c:	687b      	ldr	r3, [r7, #4]
 801902e:	891b      	ldrh	r3, [r3, #8]
 8019030:	461a      	mov	r2, r3
 8019032:	4b1a      	ldr	r3, [pc, #104]	@ (801909c <tcp_oos_insert_segment+0xe8>)
 8019034:	681b      	ldr	r3, [r3, #0]
 8019036:	441a      	add	r2, r3
 8019038:	683b      	ldr	r3, [r7, #0]
 801903a:	68db      	ldr	r3, [r3, #12]
 801903c:	685b      	ldr	r3, [r3, #4]
 801903e:	6839      	ldr	r1, [r7, #0]
 8019040:	8909      	ldrh	r1, [r1, #8]
 8019042:	440b      	add	r3, r1
 8019044:	1ad3      	subs	r3, r2, r3
    while (next &&
 8019046:	2b00      	cmp	r3, #0
 8019048:	dacb      	bge.n	8018fe2 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 801904a:	683b      	ldr	r3, [r7, #0]
 801904c:	2b00      	cmp	r3, #0
 801904e:	d01e      	beq.n	801908e <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	891b      	ldrh	r3, [r3, #8]
 8019054:	461a      	mov	r2, r3
 8019056:	4b11      	ldr	r3, [pc, #68]	@ (801909c <tcp_oos_insert_segment+0xe8>)
 8019058:	681b      	ldr	r3, [r3, #0]
 801905a:	441a      	add	r2, r3
 801905c:	683b      	ldr	r3, [r7, #0]
 801905e:	68db      	ldr	r3, [r3, #12]
 8019060:	685b      	ldr	r3, [r3, #4]
 8019062:	1ad3      	subs	r3, r2, r3
    if (next &&
 8019064:	2b00      	cmp	r3, #0
 8019066:	dd12      	ble.n	801908e <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8019068:	683b      	ldr	r3, [r7, #0]
 801906a:	68db      	ldr	r3, [r3, #12]
 801906c:	685b      	ldr	r3, [r3, #4]
 801906e:	b29a      	uxth	r2, r3
 8019070:	4b0a      	ldr	r3, [pc, #40]	@ (801909c <tcp_oos_insert_segment+0xe8>)
 8019072:	681b      	ldr	r3, [r3, #0]
 8019074:	b29b      	uxth	r3, r3
 8019076:	1ad3      	subs	r3, r2, r3
 8019078:	b29a      	uxth	r2, r3
 801907a:	687b      	ldr	r3, [r7, #4]
 801907c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801907e:	687b      	ldr	r3, [r7, #4]
 8019080:	685a      	ldr	r2, [r3, #4]
 8019082:	687b      	ldr	r3, [r7, #4]
 8019084:	891b      	ldrh	r3, [r3, #8]
 8019086:	4619      	mov	r1, r3
 8019088:	4610      	mov	r0, r2
 801908a:	f7fc fc97 	bl	80159bc <pbuf_realloc>
    }
  }
  cseg->next = next;
 801908e:	687b      	ldr	r3, [r7, #4]
 8019090:	683a      	ldr	r2, [r7, #0]
 8019092:	601a      	str	r2, [r3, #0]
}
 8019094:	bf00      	nop
 8019096:	3714      	adds	r7, #20
 8019098:	46bd      	mov	sp, r7
 801909a:	bd90      	pop	{r4, r7, pc}
 801909c:	2000c058 	.word	0x2000c058

080190a0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80190a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80190a2:	b08d      	sub	sp, #52	@ 0x34
 80190a4:	af00      	add	r7, sp, #0
 80190a6:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 80190a8:	2300      	movs	r3, #0
 80190aa:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80190ac:	687b      	ldr	r3, [r7, #4]
 80190ae:	7d1b      	ldrb	r3, [r3, #20]
 80190b0:	2b03      	cmp	r3, #3
 80190b2:	d806      	bhi.n	80190c2 <tcp_receive+0x22>
 80190b4:	4b98      	ldr	r3, [pc, #608]	@ (8019318 <tcp_receive+0x278>)
 80190b6:	f44f 6281 	mov.w	r2, #1032	@ 0x408
 80190ba:	4998      	ldr	r1, [pc, #608]	@ (801931c <tcp_receive+0x27c>)
 80190bc:	4898      	ldr	r0, [pc, #608]	@ (8019320 <tcp_receive+0x280>)
 80190be:	f008 fde3 	bl	8021c88 <iprintf>

  if (flags & TCP_ACK) {
 80190c2:	4b98      	ldr	r3, [pc, #608]	@ (8019324 <tcp_receive+0x284>)
 80190c4:	781b      	ldrb	r3, [r3, #0]
 80190c6:	f003 0310 	and.w	r3, r3, #16
 80190ca:	2b00      	cmp	r3, #0
 80190cc:	f000 82c1 	beq.w	8019652 <tcp_receive+0x5b2>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80190d0:	687b      	ldr	r3, [r7, #4]
 80190d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80190d6:	461a      	mov	r2, r3
 80190d8:	687b      	ldr	r3, [r7, #4]
 80190da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80190dc:	4413      	add	r3, r2
 80190de:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80190e4:	4b90      	ldr	r3, [pc, #576]	@ (8019328 <tcp_receive+0x288>)
 80190e6:	681b      	ldr	r3, [r3, #0]
 80190e8:	1ad3      	subs	r3, r2, r3
 80190ea:	2b00      	cmp	r3, #0
 80190ec:	db1b      	blt.n	8019126 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80190ee:	687b      	ldr	r3, [r7, #4]
 80190f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80190f2:	4b8d      	ldr	r3, [pc, #564]	@ (8019328 <tcp_receive+0x288>)
 80190f4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80190f6:	429a      	cmp	r2, r3
 80190f8:	d106      	bne.n	8019108 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80190fa:	687b      	ldr	r3, [r7, #4]
 80190fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80190fe:	4b8b      	ldr	r3, [pc, #556]	@ (801932c <tcp_receive+0x28c>)
 8019100:	681b      	ldr	r3, [r3, #0]
 8019102:	1ad3      	subs	r3, r2, r3
 8019104:	2b00      	cmp	r3, #0
 8019106:	db0e      	blt.n	8019126 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8019108:	687b      	ldr	r3, [r7, #4]
 801910a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801910c:	4b87      	ldr	r3, [pc, #540]	@ (801932c <tcp_receive+0x28c>)
 801910e:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8019110:	429a      	cmp	r2, r3
 8019112:	d141      	bne.n	8019198 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8019114:	4b86      	ldr	r3, [pc, #536]	@ (8019330 <tcp_receive+0x290>)
 8019116:	681b      	ldr	r3, [r3, #0]
 8019118:	89db      	ldrh	r3, [r3, #14]
 801911a:	b29a      	uxth	r2, r3
 801911c:	687b      	ldr	r3, [r7, #4]
 801911e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8019122:	429a      	cmp	r2, r3
 8019124:	d938      	bls.n	8019198 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8019126:	4b82      	ldr	r3, [pc, #520]	@ (8019330 <tcp_receive+0x290>)
 8019128:	681b      	ldr	r3, [r3, #0]
 801912a:	89db      	ldrh	r3, [r3, #14]
 801912c:	b29a      	uxth	r2, r3
 801912e:	687b      	ldr	r3, [r7, #4]
 8019130:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	f8b3 205e 	ldrh.w	r2, [r3, #94]	@ 0x5e
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8019140:	429a      	cmp	r2, r3
 8019142:	d205      	bcs.n	8019150 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8019144:	687b      	ldr	r3, [r7, #4]
 8019146:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801914a:	687b      	ldr	r3, [r7, #4]
 801914c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      }
      pcb->snd_wl1 = seqno;
 8019150:	4b75      	ldr	r3, [pc, #468]	@ (8019328 <tcp_receive+0x288>)
 8019152:	681a      	ldr	r2, [r3, #0]
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	651a      	str	r2, [r3, #80]	@ 0x50
      pcb->snd_wl2 = ackno;
 8019158:	4b74      	ldr	r3, [pc, #464]	@ (801932c <tcp_receive+0x28c>)
 801915a:	681a      	ldr	r2, [r3, #0]
 801915c:	687b      	ldr	r3, [r7, #4]
 801915e:	655a      	str	r2, [r3, #84]	@ 0x54
      if (pcb->snd_wnd == 0) {
 8019160:	687b      	ldr	r3, [r7, #4]
 8019162:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8019166:	2b00      	cmp	r3, #0
 8019168:	d10d      	bne.n	8019186 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 801916a:	687b      	ldr	r3, [r7, #4]
 801916c:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8019170:	2b00      	cmp	r3, #0
 8019172:	d111      	bne.n	8019198 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8019174:	687b      	ldr	r3, [r7, #4]
 8019176:	2200      	movs	r2, #0
 8019178:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
          pcb->persist_backoff = 1;
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	2201      	movs	r2, #1
 8019180:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
 8019184:	e008      	b.n	8019198 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 8019186:	687b      	ldr	r3, [r7, #4]
 8019188:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 801918c:	2b00      	cmp	r3, #0
 801918e:	d003      	beq.n	8019198 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8019190:	687b      	ldr	r3, [r7, #4]
 8019192:	2200      	movs	r2, #0
 8019194:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8019198:	4b64      	ldr	r3, [pc, #400]	@ (801932c <tcp_receive+0x28c>)
 801919a:	681a      	ldr	r2, [r3, #0]
 801919c:	687b      	ldr	r3, [r7, #4]
 801919e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80191a0:	1ad3      	subs	r3, r2, r3
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	dc53      	bgt.n	801924e <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 80191a6:	4b63      	ldr	r3, [pc, #396]	@ (8019334 <tcp_receive+0x294>)
 80191a8:	881b      	ldrh	r3, [r3, #0]
 80191aa:	2b00      	cmp	r3, #0
 80191ac:	d146      	bne.n	801923c <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80191b2:	687a      	ldr	r2, [r7, #4]
 80191b4:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 80191b8:	4413      	add	r3, r2
 80191ba:	697a      	ldr	r2, [r7, #20]
 80191bc:	429a      	cmp	r2, r3
 80191be:	d13d      	bne.n	801923c <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80191c0:	687b      	ldr	r3, [r7, #4]
 80191c2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80191c6:	2b00      	cmp	r3, #0
 80191c8:	db38      	blt.n	801923c <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80191ca:	687b      	ldr	r3, [r7, #4]
 80191cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80191ce:	4b57      	ldr	r3, [pc, #348]	@ (801932c <tcp_receive+0x28c>)
 80191d0:	681b      	ldr	r3, [r3, #0]
 80191d2:	429a      	cmp	r2, r3
 80191d4:	d132      	bne.n	801923c <tcp_receive+0x19c>
              found_dupack = 1;
 80191d6:	2301      	movs	r3, #1
 80191d8:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80191da:	687b      	ldr	r3, [r7, #4]
 80191dc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80191e0:	2bff      	cmp	r3, #255	@ 0xff
 80191e2:	d007      	beq.n	80191f4 <tcp_receive+0x154>
                ++pcb->dupacks;
 80191e4:	687b      	ldr	r3, [r7, #4]
 80191e6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80191ea:	3301      	adds	r3, #1
 80191ec:	b2da      	uxtb	r2, r3
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80191fa:	2b03      	cmp	r3, #3
 80191fc:	d916      	bls.n	801922c <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 80191fe:	687b      	ldr	r3, [r7, #4]
 8019200:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8019204:	687b      	ldr	r3, [r7, #4]
 8019206:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019208:	4413      	add	r3, r2
 801920a:	b29a      	uxth	r2, r3
 801920c:	687b      	ldr	r3, [r7, #4]
 801920e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8019212:	429a      	cmp	r2, r3
 8019214:	d912      	bls.n	801923c <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 8019216:	687b      	ldr	r3, [r7, #4]
 8019218:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801921c:	687b      	ldr	r3, [r7, #4]
 801921e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019220:	4413      	add	r3, r2
 8019222:	b29a      	uxth	r2, r3
 8019224:	687b      	ldr	r3, [r7, #4]
 8019226:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801922a:	e007      	b.n	801923c <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8019232:	2b03      	cmp	r3, #3
 8019234:	d102      	bne.n	801923c <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 8019236:	6878      	ldr	r0, [r7, #4]
 8019238:	f002 fa8e 	bl	801b758 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801923c:	69fb      	ldr	r3, [r7, #28]
 801923e:	2b00      	cmp	r3, #0
 8019240:	f040 816a 	bne.w	8019518 <tcp_receive+0x478>
        pcb->dupacks = 0;
 8019244:	687b      	ldr	r3, [r7, #4]
 8019246:	2200      	movs	r2, #0
 8019248:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801924c:	e164      	b.n	8019518 <tcp_receive+0x478>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 801924e:	4b37      	ldr	r3, [pc, #220]	@ (801932c <tcp_receive+0x28c>)
 8019250:	681a      	ldr	r2, [r3, #0]
 8019252:	687b      	ldr	r3, [r7, #4]
 8019254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019256:	1ad3      	subs	r3, r2, r3
 8019258:	3b01      	subs	r3, #1
 801925a:	2b00      	cmp	r3, #0
 801925c:	f2c0 8108 	blt.w	8019470 <tcp_receive+0x3d0>
 8019260:	4b32      	ldr	r3, [pc, #200]	@ (801932c <tcp_receive+0x28c>)
 8019262:	681a      	ldr	r2, [r3, #0]
 8019264:	687b      	ldr	r3, [r7, #4]
 8019266:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019268:	1ad3      	subs	r3, r2, r3
 801926a:	2b00      	cmp	r3, #0
 801926c:	f300 8100 	bgt.w	8019470 <tcp_receive+0x3d0>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8019270:	687b      	ldr	r3, [r7, #4]
 8019272:	7e9b      	ldrb	r3, [r3, #26]
 8019274:	f003 0304 	and.w	r3, r3, #4
 8019278:	2b00      	cmp	r3, #0
 801927a:	d00c      	beq.n	8019296 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 801927c:	687b      	ldr	r3, [r7, #4]
 801927e:	7e9b      	ldrb	r3, [r3, #26]
 8019280:	f023 0304 	bic.w	r3, r3, #4
 8019284:	b2da      	uxtb	r2, r3
 8019286:	687b      	ldr	r3, [r7, #4]
 8019288:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801928a:	687b      	ldr	r3, [r7, #4]
 801928c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8019290:	687b      	ldr	r3, [r7, #4]
 8019292:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8019296:	687b      	ldr	r3, [r7, #4]
 8019298:	2200      	movs	r2, #0
 801929a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 801929e:	687b      	ldr	r3, [r7, #4]
 80192a0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80192a4:	10db      	asrs	r3, r3, #3
 80192a6:	b21b      	sxth	r3, r3
 80192a8:	b29a      	uxth	r2, r3
 80192aa:	687b      	ldr	r3, [r7, #4]
 80192ac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80192b0:	b29b      	uxth	r3, r3
 80192b2:	4413      	add	r3, r2
 80192b4:	b29b      	uxth	r3, r3
 80192b6:	b21a      	sxth	r2, r3
 80192b8:	687b      	ldr	r3, [r7, #4]
 80192ba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80192be:	687b      	ldr	r3, [r7, #4]
 80192c0:	2200      	movs	r2, #0
 80192c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80192c6:	4b19      	ldr	r3, [pc, #100]	@ (801932c <tcp_receive+0x28c>)
 80192c8:	681a      	ldr	r2, [r3, #0]
 80192ca:	687b      	ldr	r3, [r7, #4]
 80192cc:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80192ce:	687b      	ldr	r3, [r7, #4]
 80192d0:	7d1b      	ldrb	r3, [r3, #20]
 80192d2:	2b03      	cmp	r3, #3
 80192d4:	f240 8095 	bls.w	8019402 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80192de:	687b      	ldr	r3, [r7, #4]
 80192e0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80192e4:	429a      	cmp	r2, r3
 80192e6:	d227      	bcs.n	8019338 <tcp_receive+0x298>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 80192e8:	687b      	ldr	r3, [r7, #4]
 80192ea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80192ee:	687b      	ldr	r3, [r7, #4]
 80192f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80192f2:	4413      	add	r3, r2
 80192f4:	b29a      	uxth	r2, r3
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80192fc:	429a      	cmp	r2, r3
 80192fe:	f240 8080 	bls.w	8019402 <tcp_receive+0x362>
            pcb->cwnd += pcb->mss;
 8019302:	687b      	ldr	r3, [r7, #4]
 8019304:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8019308:	687b      	ldr	r3, [r7, #4]
 801930a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801930c:	4413      	add	r3, r2
 801930e:	b29a      	uxth	r2, r3
 8019310:	687b      	ldr	r3, [r7, #4]
 8019312:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8019316:	e074      	b.n	8019402 <tcp_receive+0x362>
 8019318:	080264b0 	.word	0x080264b0
 801931c:	080266d4 	.word	0x080266d4
 8019320:	080264f4 	.word	0x080264f4
 8019324:	2000c064 	.word	0x2000c064
 8019328:	2000c058 	.word	0x2000c058
 801932c:	2000c05c 	.word	0x2000c05c
 8019330:	2000c048 	.word	0x2000c048
 8019334:	2000c062 	.word	0x2000c062
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8019338:	687b      	ldr	r3, [r7, #4]
 801933a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801933e:	687b      	ldr	r3, [r7, #4]
 8019340:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019342:	4619      	mov	r1, r3
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019348:	fb01 f303 	mul.w	r3, r1, r3
 801934c:	6879      	ldr	r1, [r7, #4]
 801934e:	f8b1 1048 	ldrh.w	r1, [r1, #72]	@ 0x48
 8019352:	fb93 f3f1 	sdiv	r3, r3, r1
 8019356:	b29b      	uxth	r3, r3
 8019358:	4413      	add	r3, r2
 801935a:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 801935c:	687b      	ldr	r3, [r7, #4]
 801935e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8019362:	8a7a      	ldrh	r2, [r7, #18]
 8019364:	429a      	cmp	r2, r3
 8019366:	d94c      	bls.n	8019402 <tcp_receive+0x362>
            pcb->cwnd = new_cwnd;
 8019368:	687b      	ldr	r3, [r7, #4]
 801936a:	8a7a      	ldrh	r2, [r7, #18]
 801936c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 8019370:	e047      	b.n	8019402 <tcp_receive+0x362>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 8019372:	687b      	ldr	r3, [r7, #4]
 8019374:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019376:	62fb      	str	r3, [r7, #44]	@ 0x2c
        pcb->unacked = pcb->unacked->next;
 8019378:	687b      	ldr	r3, [r7, #4]
 801937a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801937c:	681a      	ldr	r2, [r3, #0]
 801937e:	687b      	ldr	r3, [r7, #4]
 8019380:	66da      	str	r2, [r3, #108]	@ 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8019382:	687b      	ldr	r3, [r7, #4]
 8019384:	f8b3 4062 	ldrh.w	r4, [r3, #98]	@ 0x62
 8019388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801938a:	685b      	ldr	r3, [r3, #4]
 801938c:	4618      	mov	r0, r3
 801938e:	f7fc fd1d 	bl	8015dcc <pbuf_clen>
 8019392:	4603      	mov	r3, r0
 8019394:	429c      	cmp	r4, r3
 8019396:	d206      	bcs.n	80193a6 <tcp_receive+0x306>
 8019398:	4b70      	ldr	r3, [pc, #448]	@ (801955c <tcp_receive+0x4bc>)
 801939a:	f240 429e 	movw	r2, #1182	@ 0x49e
 801939e:	4970      	ldr	r1, [pc, #448]	@ (8019560 <tcp_receive+0x4c0>)
 80193a0:	4870      	ldr	r0, [pc, #448]	@ (8019564 <tcp_receive+0x4c4>)
 80193a2:	f008 fc71 	bl	8021c88 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 80193a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80193a8:	685b      	ldr	r3, [r3, #4]
 80193aa:	4618      	mov	r0, r3
 80193ac:	f7fc fd0e 	bl	8015dcc <pbuf_clen>
 80193b0:	4603      	mov	r3, r0
 80193b2:	461a      	mov	r2, r3
 80193b4:	687b      	ldr	r3, [r7, #4]
 80193b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80193ba:	1a9b      	subs	r3, r3, r2
 80193bc:	b29a      	uxth	r2, r3
 80193be:	687b      	ldr	r3, [r7, #4]
 80193c0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        recv_acked += next->len;
 80193c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80193c6:	891a      	ldrh	r2, [r3, #8]
 80193c8:	4b67      	ldr	r3, [pc, #412]	@ (8019568 <tcp_receive+0x4c8>)
 80193ca:	881b      	ldrh	r3, [r3, #0]
 80193cc:	4413      	add	r3, r2
 80193ce:	b29a      	uxth	r2, r3
 80193d0:	4b65      	ldr	r3, [pc, #404]	@ (8019568 <tcp_receive+0x4c8>)
 80193d2:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 80193d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80193d6:	f7fe f899 	bl	801750c <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 80193da:	687b      	ldr	r3, [r7, #4]
 80193dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80193e0:	2b00      	cmp	r3, #0
 80193e2:	d00e      	beq.n	8019402 <tcp_receive+0x362>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 80193e4:	687b      	ldr	r3, [r7, #4]
 80193e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80193e8:	2b00      	cmp	r3, #0
 80193ea:	d10a      	bne.n	8019402 <tcp_receive+0x362>
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80193f0:	2b00      	cmp	r3, #0
 80193f2:	d106      	bne.n	8019402 <tcp_receive+0x362>
 80193f4:	4b59      	ldr	r3, [pc, #356]	@ (801955c <tcp_receive+0x4bc>)
 80193f6:	f240 42a6 	movw	r2, #1190	@ 0x4a6
 80193fa:	495c      	ldr	r1, [pc, #368]	@ (801956c <tcp_receive+0x4cc>)
 80193fc:	4859      	ldr	r0, [pc, #356]	@ (8019564 <tcp_receive+0x4c4>)
 80193fe:	f008 fc43 	bl	8021c88 <iprintf>
      while (pcb->unacked != NULL &&
 8019402:	687b      	ldr	r3, [r7, #4]
 8019404:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019406:	2b00      	cmp	r3, #0
 8019408:	d022      	beq.n	8019450 <tcp_receive+0x3b0>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 801940a:	687b      	ldr	r3, [r7, #4]
 801940c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801940e:	68db      	ldr	r3, [r3, #12]
 8019410:	685b      	ldr	r3, [r3, #4]
 8019412:	4618      	mov	r0, r3
 8019414:	f7fb f9fb 	bl	801480e <lwip_htonl>
 8019418:	4604      	mov	r4, r0
 801941a:	687b      	ldr	r3, [r7, #4]
 801941c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801941e:	891b      	ldrh	r3, [r3, #8]
 8019420:	461d      	mov	r5, r3
 8019422:	687b      	ldr	r3, [r7, #4]
 8019424:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019426:	68db      	ldr	r3, [r3, #12]
 8019428:	899b      	ldrh	r3, [r3, #12]
 801942a:	b29b      	uxth	r3, r3
 801942c:	4618      	mov	r0, r3
 801942e:	f7fb f9e1 	bl	80147f4 <lwip_htons>
 8019432:	4603      	mov	r3, r0
 8019434:	f003 0303 	and.w	r3, r3, #3
 8019438:	2b00      	cmp	r3, #0
 801943a:	d001      	beq.n	8019440 <tcp_receive+0x3a0>
 801943c:	2301      	movs	r3, #1
 801943e:	e000      	b.n	8019442 <tcp_receive+0x3a2>
 8019440:	2300      	movs	r3, #0
 8019442:	442b      	add	r3, r5
 8019444:	18e2      	adds	r2, r4, r3
 8019446:	4b4a      	ldr	r3, [pc, #296]	@ (8019570 <tcp_receive+0x4d0>)
 8019448:	681b      	ldr	r3, [r3, #0]
 801944a:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 801944c:	2b00      	cmp	r3, #0
 801944e:	dd90      	ble.n	8019372 <tcp_receive+0x2d2>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8019450:	687b      	ldr	r3, [r7, #4]
 8019452:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019454:	2b00      	cmp	r3, #0
 8019456:	d104      	bne.n	8019462 <tcp_receive+0x3c2>
        pcb->rtime = -1;
 8019458:	687b      	ldr	r3, [r7, #4]
 801945a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801945e:	861a      	strh	r2, [r3, #48]	@ 0x30
 8019460:	e002      	b.n	8019468 <tcp_receive+0x3c8>
      } else {
        pcb->rtime = 0;
 8019462:	687b      	ldr	r3, [r7, #4]
 8019464:	2200      	movs	r2, #0
 8019466:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8019468:	687b      	ldr	r3, [r7, #4]
 801946a:	2200      	movs	r2, #0
 801946c:	76da      	strb	r2, [r3, #27]
 801946e:	e002      	b.n	8019476 <tcp_receive+0x3d6>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8019470:	6878      	ldr	r0, [r7, #4]
 8019472:	f001 fd65 	bl	801af40 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8019476:	e04f      	b.n	8019518 <tcp_receive+0x478>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 8019478:	687b      	ldr	r3, [r7, #4]
 801947a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801947c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pcb->unsent = pcb->unsent->next;
 801947e:	687b      	ldr	r3, [r7, #4]
 8019480:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019482:	681a      	ldr	r2, [r3, #0]
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	669a      	str	r2, [r3, #104]	@ 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8019488:	687b      	ldr	r3, [r7, #4]
 801948a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801948c:	2b00      	cmp	r3, #0
 801948e:	d103      	bne.n	8019498 <tcp_receive+0x3f8>
        pcb->unsent_oversize = 0;
 8019490:	687b      	ldr	r3, [r7, #4]
 8019492:	2200      	movs	r2, #0
 8019494:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8019498:	687b      	ldr	r3, [r7, #4]
 801949a:	f8b3 4062 	ldrh.w	r4, [r3, #98]	@ 0x62
 801949e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80194a0:	685b      	ldr	r3, [r3, #4]
 80194a2:	4618      	mov	r0, r3
 80194a4:	f7fc fc92 	bl	8015dcc <pbuf_clen>
 80194a8:	4603      	mov	r3, r0
 80194aa:	429c      	cmp	r4, r3
 80194ac:	d206      	bcs.n	80194bc <tcp_receive+0x41c>
 80194ae:	4b2b      	ldr	r3, [pc, #172]	@ (801955c <tcp_receive+0x4bc>)
 80194b0:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 80194b4:	492a      	ldr	r1, [pc, #168]	@ (8019560 <tcp_receive+0x4c0>)
 80194b6:	482b      	ldr	r0, [pc, #172]	@ (8019564 <tcp_receive+0x4c4>)
 80194b8:	f008 fbe6 	bl	8021c88 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 80194bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80194be:	685b      	ldr	r3, [r3, #4]
 80194c0:	4618      	mov	r0, r3
 80194c2:	f7fc fc83 	bl	8015dcc <pbuf_clen>
 80194c6:	4603      	mov	r3, r0
 80194c8:	461a      	mov	r2, r3
 80194ca:	687b      	ldr	r3, [r7, #4]
 80194cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80194d0:	1a9b      	subs	r3, r3, r2
 80194d2:	b29a      	uxth	r2, r3
 80194d4:	687b      	ldr	r3, [r7, #4]
 80194d6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      recv_acked += next->len;
 80194da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80194dc:	891a      	ldrh	r2, [r3, #8]
 80194de:	4b22      	ldr	r3, [pc, #136]	@ (8019568 <tcp_receive+0x4c8>)
 80194e0:	881b      	ldrh	r3, [r3, #0]
 80194e2:	4413      	add	r3, r2
 80194e4:	b29a      	uxth	r2, r3
 80194e6:	4b20      	ldr	r3, [pc, #128]	@ (8019568 <tcp_receive+0x4c8>)
 80194e8:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 80194ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80194ec:	f7fe f80e 	bl	801750c <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 80194f0:	687b      	ldr	r3, [r7, #4]
 80194f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80194f6:	2b00      	cmp	r3, #0
 80194f8:	d00e      	beq.n	8019518 <tcp_receive+0x478>
        LWIP_ASSERT("tcp_receive: valid queue length",
 80194fa:	687b      	ldr	r3, [r7, #4]
 80194fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80194fe:	2b00      	cmp	r3, #0
 8019500:	d10a      	bne.n	8019518 <tcp_receive+0x478>
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019506:	2b00      	cmp	r3, #0
 8019508:	d106      	bne.n	8019518 <tcp_receive+0x478>
 801950a:	4b14      	ldr	r3, [pc, #80]	@ (801955c <tcp_receive+0x4bc>)
 801950c:	f240 42dc 	movw	r2, #1244	@ 0x4dc
 8019510:	4916      	ldr	r1, [pc, #88]	@ (801956c <tcp_receive+0x4cc>)
 8019512:	4814      	ldr	r0, [pc, #80]	@ (8019564 <tcp_receive+0x4c4>)
 8019514:	f008 fbb8 	bl	8021c88 <iprintf>
    while (pcb->unsent != NULL &&
 8019518:	687b      	ldr	r3, [r7, #4]
 801951a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801951c:	2b00      	cmp	r3, #0
 801951e:	d037      	beq.n	8019590 <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8019520:	4b13      	ldr	r3, [pc, #76]	@ (8019570 <tcp_receive+0x4d0>)
 8019522:	681c      	ldr	r4, [r3, #0]
 8019524:	687b      	ldr	r3, [r7, #4]
 8019526:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019528:	68db      	ldr	r3, [r3, #12]
 801952a:	685b      	ldr	r3, [r3, #4]
 801952c:	4618      	mov	r0, r3
 801952e:	f7fb f96e 	bl	801480e <lwip_htonl>
 8019532:	4605      	mov	r5, r0
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019538:	891b      	ldrh	r3, [r3, #8]
 801953a:	461e      	mov	r6, r3
 801953c:	687b      	ldr	r3, [r7, #4]
 801953e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019540:	68db      	ldr	r3, [r3, #12]
 8019542:	899b      	ldrh	r3, [r3, #12]
 8019544:	b29b      	uxth	r3, r3
 8019546:	4618      	mov	r0, r3
 8019548:	f7fb f954 	bl	80147f4 <lwip_htons>
 801954c:	4603      	mov	r3, r0
 801954e:	f003 0303 	and.w	r3, r3, #3
 8019552:	2b00      	cmp	r3, #0
 8019554:	d00e      	beq.n	8019574 <tcp_receive+0x4d4>
 8019556:	2301      	movs	r3, #1
 8019558:	e00d      	b.n	8019576 <tcp_receive+0x4d6>
 801955a:	bf00      	nop
 801955c:	080264b0 	.word	0x080264b0
 8019560:	080266f0 	.word	0x080266f0
 8019564:	080264f4 	.word	0x080264f4
 8019568:	2000c060 	.word	0x2000c060
 801956c:	08026718 	.word	0x08026718
 8019570:	2000c05c 	.word	0x2000c05c
 8019574:	2300      	movs	r3, #0
 8019576:	4433      	add	r3, r6
 8019578:	442b      	add	r3, r5
 801957a:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 801957c:	2b00      	cmp	r3, #0
 801957e:	db07      	blt.n	8019590 <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8019580:	4b8d      	ldr	r3, [pc, #564]	@ (80197b8 <tcp_receive+0x718>)
 8019582:	681a      	ldr	r2, [r3, #0]
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019588:	1ad3      	subs	r3, r2, r3
 801958a:	2b00      	cmp	r3, #0
 801958c:	f77f af74 	ble.w	8019478 <tcp_receive+0x3d8>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8019590:	687b      	ldr	r3, [r7, #4]
 8019592:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8019596:	4b89      	ldr	r3, [pc, #548]	@ (80197bc <tcp_receive+0x71c>)
 8019598:	881b      	ldrh	r3, [r3, #0]
 801959a:	4413      	add	r3, r2
 801959c:	b29a      	uxth	r2, r3
 801959e:	687b      	ldr	r3, [r7, #4]
 80195a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80195a8:	2b00      	cmp	r3, #0
 80195aa:	d052      	beq.n	8019652 <tcp_receive+0x5b2>
 80195ac:	687b      	ldr	r3, [r7, #4]
 80195ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80195b0:	4b81      	ldr	r3, [pc, #516]	@ (80197b8 <tcp_receive+0x718>)
 80195b2:	681b      	ldr	r3, [r3, #0]
 80195b4:	1ad3      	subs	r3, r2, r3
 80195b6:	2b00      	cmp	r3, #0
 80195b8:	da4b      	bge.n	8019652 <tcp_receive+0x5b2>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80195ba:	4b81      	ldr	r3, [pc, #516]	@ (80197c0 <tcp_receive+0x720>)
 80195bc:	681b      	ldr	r3, [r3, #0]
 80195be:	b29a      	uxth	r2, r3
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80195c4:	b29b      	uxth	r3, r3
 80195c6:	1ad3      	subs	r3, r2, r3
 80195c8:	b29b      	uxth	r3, r3
 80195ca:	847b      	strh	r3, [r7, #34]	@ 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 80195cc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80195ce:	687b      	ldr	r3, [r7, #4]
 80195d0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80195d4:	10db      	asrs	r3, r3, #3
 80195d6:	b21b      	sxth	r3, r3
 80195d8:	b29b      	uxth	r3, r3
 80195da:	1ad3      	subs	r3, r2, r3
 80195dc:	b29b      	uxth	r3, r3
 80195de:	847b      	strh	r3, [r7, #34]	@ 0x22
      pcb->sa += m;
 80195e0:	687b      	ldr	r3, [r7, #4]
 80195e2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80195e6:	b29a      	uxth	r2, r3
 80195e8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80195ea:	4413      	add	r3, r2
 80195ec:	b29b      	uxth	r3, r3
 80195ee:	b21a      	sxth	r2, r3
 80195f0:	687b      	ldr	r3, [r7, #4]
 80195f2:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 80195f4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80195f8:	2b00      	cmp	r3, #0
 80195fa:	da03      	bge.n	8019604 <tcp_receive+0x564>
        m = -m;
 80195fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80195fe:	425b      	negs	r3, r3
 8019600:	b29b      	uxth	r3, r3
 8019602:	847b      	strh	r3, [r7, #34]	@ 0x22
      }
      m = m - (pcb->sv >> 2);
 8019604:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8019606:	687b      	ldr	r3, [r7, #4]
 8019608:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801960c:	109b      	asrs	r3, r3, #2
 801960e:	b21b      	sxth	r3, r3
 8019610:	b29b      	uxth	r3, r3
 8019612:	1ad3      	subs	r3, r2, r3
 8019614:	b29b      	uxth	r3, r3
 8019616:	847b      	strh	r3, [r7, #34]	@ 0x22
      pcb->sv += m;
 8019618:	687b      	ldr	r3, [r7, #4]
 801961a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801961e:	b29a      	uxth	r2, r3
 8019620:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019622:	4413      	add	r3, r2
 8019624:	b29b      	uxth	r3, r3
 8019626:	b21a      	sxth	r2, r3
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 801962c:	687b      	ldr	r3, [r7, #4]
 801962e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8019632:	10db      	asrs	r3, r3, #3
 8019634:	b21b      	sxth	r3, r3
 8019636:	b29a      	uxth	r2, r3
 8019638:	687b      	ldr	r3, [r7, #4]
 801963a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801963e:	b29b      	uxth	r3, r3
 8019640:	4413      	add	r3, r2
 8019642:	b29b      	uxth	r3, r3
 8019644:	b21a      	sxth	r2, r3
 8019646:	687b      	ldr	r3, [r7, #4]
 8019648:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801964c:	687b      	ldr	r3, [r7, #4]
 801964e:	2200      	movs	r2, #0
 8019650:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8019652:	4b5c      	ldr	r3, [pc, #368]	@ (80197c4 <tcp_receive+0x724>)
 8019654:	881b      	ldrh	r3, [r3, #0]
 8019656:	2b00      	cmp	r3, #0
 8019658:	f000 84f1 	beq.w	801a03e <tcp_receive+0xf9e>
 801965c:	687b      	ldr	r3, [r7, #4]
 801965e:	7d1b      	ldrb	r3, [r3, #20]
 8019660:	2b06      	cmp	r3, #6
 8019662:	f200 84ec 	bhi.w	801a03e <tcp_receive+0xf9e>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8019666:	687b      	ldr	r3, [r7, #4]
 8019668:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801966a:	4b57      	ldr	r3, [pc, #348]	@ (80197c8 <tcp_receive+0x728>)
 801966c:	681b      	ldr	r3, [r3, #0]
 801966e:	1ad3      	subs	r3, r2, r3
 8019670:	3b01      	subs	r3, #1
 8019672:	2b00      	cmp	r3, #0
 8019674:	f2c0 80b8 	blt.w	80197e8 <tcp_receive+0x748>
 8019678:	687b      	ldr	r3, [r7, #4]
 801967a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801967c:	4b51      	ldr	r3, [pc, #324]	@ (80197c4 <tcp_receive+0x724>)
 801967e:	881b      	ldrh	r3, [r3, #0]
 8019680:	4619      	mov	r1, r3
 8019682:	4b51      	ldr	r3, [pc, #324]	@ (80197c8 <tcp_receive+0x728>)
 8019684:	681b      	ldr	r3, [r3, #0]
 8019686:	440b      	add	r3, r1
 8019688:	1ad3      	subs	r3, r2, r3
 801968a:	3301      	adds	r3, #1
 801968c:	2b00      	cmp	r3, #0
 801968e:	f300 80ab 	bgt.w	80197e8 <tcp_receive+0x748>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8019692:	4b4e      	ldr	r3, [pc, #312]	@ (80197cc <tcp_receive+0x72c>)
 8019694:	685b      	ldr	r3, [r3, #4]
 8019696:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801969c:	4b4a      	ldr	r3, [pc, #296]	@ (80197c8 <tcp_receive+0x728>)
 801969e:	681b      	ldr	r3, [r3, #0]
 80196a0:	1ad3      	subs	r3, r2, r3
 80196a2:	627b      	str	r3, [r7, #36]	@ 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80196a4:	4b49      	ldr	r3, [pc, #292]	@ (80197cc <tcp_receive+0x72c>)
 80196a6:	685b      	ldr	r3, [r3, #4]
 80196a8:	2b00      	cmp	r3, #0
 80196aa:	d106      	bne.n	80196ba <tcp_receive+0x61a>
 80196ac:	4b48      	ldr	r3, [pc, #288]	@ (80197d0 <tcp_receive+0x730>)
 80196ae:	f240 523c 	movw	r2, #1340	@ 0x53c
 80196b2:	4948      	ldr	r1, [pc, #288]	@ (80197d4 <tcp_receive+0x734>)
 80196b4:	4848      	ldr	r0, [pc, #288]	@ (80197d8 <tcp_receive+0x738>)
 80196b6:	f008 fae7 	bl	8021c88 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 80196ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80196bc:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80196c0:	4293      	cmp	r3, r2
 80196c2:	dd06      	ble.n	80196d2 <tcp_receive+0x632>
 80196c4:	4b42      	ldr	r3, [pc, #264]	@ (80197d0 <tcp_receive+0x730>)
 80196c6:	f240 523d 	movw	r2, #1341	@ 0x53d
 80196ca:	4944      	ldr	r1, [pc, #272]	@ (80197dc <tcp_receive+0x73c>)
 80196cc:	4842      	ldr	r0, [pc, #264]	@ (80197d8 <tcp_receive+0x738>)
 80196ce:	f008 fadb 	bl	8021c88 <iprintf>
      if (inseg.p->len < off) {
 80196d2:	4b3e      	ldr	r3, [pc, #248]	@ (80197cc <tcp_receive+0x72c>)
 80196d4:	685b      	ldr	r3, [r3, #4]
 80196d6:	895b      	ldrh	r3, [r3, #10]
 80196d8:	461a      	mov	r2, r3
 80196da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80196dc:	4293      	cmp	r3, r2
 80196de:	dd3e      	ble.n	801975e <tcp_receive+0x6be>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80196e0:	4b3a      	ldr	r3, [pc, #232]	@ (80197cc <tcp_receive+0x72c>)
 80196e2:	685b      	ldr	r3, [r3, #4]
 80196e4:	891b      	ldrh	r3, [r3, #8]
 80196e6:	461a      	mov	r2, r3
 80196e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80196ea:	4293      	cmp	r3, r2
 80196ec:	dd06      	ble.n	80196fc <tcp_receive+0x65c>
 80196ee:	4b38      	ldr	r3, [pc, #224]	@ (80197d0 <tcp_receive+0x730>)
 80196f0:	f240 523f 	movw	r2, #1343	@ 0x53f
 80196f4:	493a      	ldr	r1, [pc, #232]	@ (80197e0 <tcp_receive+0x740>)
 80196f6:	4838      	ldr	r0, [pc, #224]	@ (80197d8 <tcp_receive+0x738>)
 80196f8:	f008 fac6 	bl	8021c88 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80196fc:	4b33      	ldr	r3, [pc, #204]	@ (80197cc <tcp_receive+0x72c>)
 80196fe:	685b      	ldr	r3, [r3, #4]
 8019700:	891a      	ldrh	r2, [r3, #8]
 8019702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019704:	b29b      	uxth	r3, r3
 8019706:	1ad3      	subs	r3, r2, r3
 8019708:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 801970a:	e00e      	b.n	801972a <tcp_receive+0x68a>
          off -= p->len;
 801970c:	69bb      	ldr	r3, [r7, #24]
 801970e:	895b      	ldrh	r3, [r3, #10]
 8019710:	461a      	mov	r2, r3
 8019712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019714:	1a9b      	subs	r3, r3, r2
 8019716:	627b      	str	r3, [r7, #36]	@ 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8019718:	69bb      	ldr	r3, [r7, #24]
 801971a:	8a3a      	ldrh	r2, [r7, #16]
 801971c:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 801971e:	69bb      	ldr	r3, [r7, #24]
 8019720:	2200      	movs	r2, #0
 8019722:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8019724:	69bb      	ldr	r3, [r7, #24]
 8019726:	681b      	ldr	r3, [r3, #0]
 8019728:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 801972a:	69bb      	ldr	r3, [r7, #24]
 801972c:	895b      	ldrh	r3, [r3, #10]
 801972e:	461a      	mov	r2, r3
 8019730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019732:	4293      	cmp	r3, r2
 8019734:	dcea      	bgt.n	801970c <tcp_receive+0x66c>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8019736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019738:	b29b      	uxth	r3, r3
 801973a:	425b      	negs	r3, r3
 801973c:	b29b      	uxth	r3, r3
 801973e:	b21b      	sxth	r3, r3
 8019740:	4619      	mov	r1, r3
 8019742:	69b8      	ldr	r0, [r7, #24]
 8019744:	f7fc fa8a 	bl	8015c5c <pbuf_header>
 8019748:	4603      	mov	r3, r0
 801974a:	2b00      	cmp	r3, #0
 801974c:	d01c      	beq.n	8019788 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 801974e:	4b20      	ldr	r3, [pc, #128]	@ (80197d0 <tcp_receive+0x730>)
 8019750:	f240 524c 	movw	r2, #1356	@ 0x54c
 8019754:	4923      	ldr	r1, [pc, #140]	@ (80197e4 <tcp_receive+0x744>)
 8019756:	4820      	ldr	r0, [pc, #128]	@ (80197d8 <tcp_receive+0x738>)
 8019758:	f008 fa96 	bl	8021c88 <iprintf>
 801975c:	e014      	b.n	8019788 <tcp_receive+0x6e8>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 801975e:	4b1b      	ldr	r3, [pc, #108]	@ (80197cc <tcp_receive+0x72c>)
 8019760:	685b      	ldr	r3, [r3, #4]
 8019762:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019764:	b292      	uxth	r2, r2
 8019766:	4252      	negs	r2, r2
 8019768:	b292      	uxth	r2, r2
 801976a:	b212      	sxth	r2, r2
 801976c:	4611      	mov	r1, r2
 801976e:	4618      	mov	r0, r3
 8019770:	f7fc fa74 	bl	8015c5c <pbuf_header>
 8019774:	4603      	mov	r3, r0
 8019776:	2b00      	cmp	r3, #0
 8019778:	d006      	beq.n	8019788 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 801977a:	4b15      	ldr	r3, [pc, #84]	@ (80197d0 <tcp_receive+0x730>)
 801977c:	f240 5251 	movw	r2, #1361	@ 0x551
 8019780:	4918      	ldr	r1, [pc, #96]	@ (80197e4 <tcp_receive+0x744>)
 8019782:	4815      	ldr	r0, [pc, #84]	@ (80197d8 <tcp_receive+0x738>)
 8019784:	f008 fa80 	bl	8021c88 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8019788:	4b10      	ldr	r3, [pc, #64]	@ (80197cc <tcp_receive+0x72c>)
 801978a:	891a      	ldrh	r2, [r3, #8]
 801978c:	4b0e      	ldr	r3, [pc, #56]	@ (80197c8 <tcp_receive+0x728>)
 801978e:	681b      	ldr	r3, [r3, #0]
 8019790:	b299      	uxth	r1, r3
 8019792:	687b      	ldr	r3, [r7, #4]
 8019794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019796:	b29b      	uxth	r3, r3
 8019798:	1acb      	subs	r3, r1, r3
 801979a:	b29b      	uxth	r3, r3
 801979c:	4413      	add	r3, r2
 801979e:	b29a      	uxth	r2, r3
 80197a0:	4b0a      	ldr	r3, [pc, #40]	@ (80197cc <tcp_receive+0x72c>)
 80197a2:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80197a8:	4a07      	ldr	r2, [pc, #28]	@ (80197c8 <tcp_receive+0x728>)
 80197aa:	6013      	str	r3, [r2, #0]
 80197ac:	4b07      	ldr	r3, [pc, #28]	@ (80197cc <tcp_receive+0x72c>)
 80197ae:	68db      	ldr	r3, [r3, #12]
 80197b0:	4a05      	ldr	r2, [pc, #20]	@ (80197c8 <tcp_receive+0x728>)
 80197b2:	6812      	ldr	r2, [r2, #0]
 80197b4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80197b6:	e025      	b.n	8019804 <tcp_receive+0x764>
 80197b8:	2000c05c 	.word	0x2000c05c
 80197bc:	2000c060 	.word	0x2000c060
 80197c0:	2000c020 	.word	0x2000c020
 80197c4:	2000c062 	.word	0x2000c062
 80197c8:	2000c058 	.word	0x2000c058
 80197cc:	2000c038 	.word	0x2000c038
 80197d0:	080264b0 	.word	0x080264b0
 80197d4:	08026738 	.word	0x08026738
 80197d8:	080264f4 	.word	0x080264f4
 80197dc:	08026748 	.word	0x08026748
 80197e0:	08026758 	.word	0x08026758
 80197e4:	08026768 	.word	0x08026768
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80197e8:	4b87      	ldr	r3, [pc, #540]	@ (8019a08 <tcp_receive+0x968>)
 80197ea:	681a      	ldr	r2, [r3, #0]
 80197ec:	687b      	ldr	r3, [r7, #4]
 80197ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80197f0:	1ad3      	subs	r3, r2, r3
 80197f2:	2b00      	cmp	r3, #0
 80197f4:	da06      	bge.n	8019804 <tcp_receive+0x764>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80197f6:	687b      	ldr	r3, [r7, #4]
 80197f8:	7e9b      	ldrb	r3, [r3, #26]
 80197fa:	f043 0302 	orr.w	r3, r3, #2
 80197fe:	b2da      	uxtb	r2, r3
 8019800:	687b      	ldr	r3, [r7, #4]
 8019802:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8019804:	4b80      	ldr	r3, [pc, #512]	@ (8019a08 <tcp_receive+0x968>)
 8019806:	681a      	ldr	r2, [r3, #0]
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801980c:	1ad3      	subs	r3, r2, r3
 801980e:	2b00      	cmp	r3, #0
 8019810:	f2c0 8410 	blt.w	801a034 <tcp_receive+0xf94>
 8019814:	4b7c      	ldr	r3, [pc, #496]	@ (8019a08 <tcp_receive+0x968>)
 8019816:	681a      	ldr	r2, [r3, #0]
 8019818:	687b      	ldr	r3, [r7, #4]
 801981a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801981c:	6879      	ldr	r1, [r7, #4]
 801981e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8019820:	440b      	add	r3, r1
 8019822:	1ad3      	subs	r3, r2, r3
 8019824:	3301      	adds	r3, #1
 8019826:	2b00      	cmp	r3, #0
 8019828:	f300 8404 	bgt.w	801a034 <tcp_receive+0xf94>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801982c:	687b      	ldr	r3, [r7, #4]
 801982e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019830:	4b75      	ldr	r3, [pc, #468]	@ (8019a08 <tcp_receive+0x968>)
 8019832:	681b      	ldr	r3, [r3, #0]
 8019834:	429a      	cmp	r2, r3
 8019836:	f040 8287 	bne.w	8019d48 <tcp_receive+0xca8>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801983a:	4b74      	ldr	r3, [pc, #464]	@ (8019a0c <tcp_receive+0x96c>)
 801983c:	891c      	ldrh	r4, [r3, #8]
 801983e:	4b73      	ldr	r3, [pc, #460]	@ (8019a0c <tcp_receive+0x96c>)
 8019840:	68db      	ldr	r3, [r3, #12]
 8019842:	899b      	ldrh	r3, [r3, #12]
 8019844:	b29b      	uxth	r3, r3
 8019846:	4618      	mov	r0, r3
 8019848:	f7fa ffd4 	bl	80147f4 <lwip_htons>
 801984c:	4603      	mov	r3, r0
 801984e:	f003 0303 	and.w	r3, r3, #3
 8019852:	2b00      	cmp	r3, #0
 8019854:	d001      	beq.n	801985a <tcp_receive+0x7ba>
 8019856:	2301      	movs	r3, #1
 8019858:	e000      	b.n	801985c <tcp_receive+0x7bc>
 801985a:	2300      	movs	r3, #0
 801985c:	4423      	add	r3, r4
 801985e:	b29a      	uxth	r2, r3
 8019860:	4b6b      	ldr	r3, [pc, #428]	@ (8019a10 <tcp_receive+0x970>)
 8019862:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8019868:	4b69      	ldr	r3, [pc, #420]	@ (8019a10 <tcp_receive+0x970>)
 801986a:	881b      	ldrh	r3, [r3, #0]
 801986c:	429a      	cmp	r2, r3
 801986e:	d26e      	bcs.n	801994e <tcp_receive+0x8ae>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019870:	4b66      	ldr	r3, [pc, #408]	@ (8019a0c <tcp_receive+0x96c>)
 8019872:	68db      	ldr	r3, [r3, #12]
 8019874:	899b      	ldrh	r3, [r3, #12]
 8019876:	b29b      	uxth	r3, r3
 8019878:	4618      	mov	r0, r3
 801987a:	f7fa ffbb 	bl	80147f4 <lwip_htons>
 801987e:	4603      	mov	r3, r0
 8019880:	f003 0301 	and.w	r3, r3, #1
 8019884:	2b00      	cmp	r3, #0
 8019886:	d01b      	beq.n	80198c0 <tcp_receive+0x820>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8019888:	4b60      	ldr	r3, [pc, #384]	@ (8019a0c <tcp_receive+0x96c>)
 801988a:	68db      	ldr	r3, [r3, #12]
 801988c:	899b      	ldrh	r3, [r3, #12]
 801988e:	b29b      	uxth	r3, r3
 8019890:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8019894:	b29c      	uxth	r4, r3
 8019896:	4b5d      	ldr	r3, [pc, #372]	@ (8019a0c <tcp_receive+0x96c>)
 8019898:	68db      	ldr	r3, [r3, #12]
 801989a:	899b      	ldrh	r3, [r3, #12]
 801989c:	b29b      	uxth	r3, r3
 801989e:	4618      	mov	r0, r3
 80198a0:	f7fa ffa8 	bl	80147f4 <lwip_htons>
 80198a4:	4603      	mov	r3, r0
 80198a6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80198aa:	b29b      	uxth	r3, r3
 80198ac:	4618      	mov	r0, r3
 80198ae:	f7fa ffa1 	bl	80147f4 <lwip_htons>
 80198b2:	4603      	mov	r3, r0
 80198b4:	461a      	mov	r2, r3
 80198b6:	4b55      	ldr	r3, [pc, #340]	@ (8019a0c <tcp_receive+0x96c>)
 80198b8:	68db      	ldr	r3, [r3, #12]
 80198ba:	4322      	orrs	r2, r4
 80198bc:	b292      	uxth	r2, r2
 80198be:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80198c0:	687b      	ldr	r3, [r7, #4]
 80198c2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80198c4:	4b51      	ldr	r3, [pc, #324]	@ (8019a0c <tcp_receive+0x96c>)
 80198c6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80198c8:	4b50      	ldr	r3, [pc, #320]	@ (8019a0c <tcp_receive+0x96c>)
 80198ca:	68db      	ldr	r3, [r3, #12]
 80198cc:	899b      	ldrh	r3, [r3, #12]
 80198ce:	b29b      	uxth	r3, r3
 80198d0:	4618      	mov	r0, r3
 80198d2:	f7fa ff8f 	bl	80147f4 <lwip_htons>
 80198d6:	4603      	mov	r3, r0
 80198d8:	f003 0302 	and.w	r3, r3, #2
 80198dc:	2b00      	cmp	r3, #0
 80198de:	d005      	beq.n	80198ec <tcp_receive+0x84c>
            inseg.len -= 1;
 80198e0:	4b4a      	ldr	r3, [pc, #296]	@ (8019a0c <tcp_receive+0x96c>)
 80198e2:	891b      	ldrh	r3, [r3, #8]
 80198e4:	3b01      	subs	r3, #1
 80198e6:	b29a      	uxth	r2, r3
 80198e8:	4b48      	ldr	r3, [pc, #288]	@ (8019a0c <tcp_receive+0x96c>)
 80198ea:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80198ec:	4b47      	ldr	r3, [pc, #284]	@ (8019a0c <tcp_receive+0x96c>)
 80198ee:	685b      	ldr	r3, [r3, #4]
 80198f0:	4a46      	ldr	r2, [pc, #280]	@ (8019a0c <tcp_receive+0x96c>)
 80198f2:	8912      	ldrh	r2, [r2, #8]
 80198f4:	4611      	mov	r1, r2
 80198f6:	4618      	mov	r0, r3
 80198f8:	f7fc f860 	bl	80159bc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80198fc:	4b43      	ldr	r3, [pc, #268]	@ (8019a0c <tcp_receive+0x96c>)
 80198fe:	891c      	ldrh	r4, [r3, #8]
 8019900:	4b42      	ldr	r3, [pc, #264]	@ (8019a0c <tcp_receive+0x96c>)
 8019902:	68db      	ldr	r3, [r3, #12]
 8019904:	899b      	ldrh	r3, [r3, #12]
 8019906:	b29b      	uxth	r3, r3
 8019908:	4618      	mov	r0, r3
 801990a:	f7fa ff73 	bl	80147f4 <lwip_htons>
 801990e:	4603      	mov	r3, r0
 8019910:	f003 0303 	and.w	r3, r3, #3
 8019914:	2b00      	cmp	r3, #0
 8019916:	d001      	beq.n	801991c <tcp_receive+0x87c>
 8019918:	2301      	movs	r3, #1
 801991a:	e000      	b.n	801991e <tcp_receive+0x87e>
 801991c:	2300      	movs	r3, #0
 801991e:	4423      	add	r3, r4
 8019920:	b29a      	uxth	r2, r3
 8019922:	4b3b      	ldr	r3, [pc, #236]	@ (8019a10 <tcp_receive+0x970>)
 8019924:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019926:	4b3a      	ldr	r3, [pc, #232]	@ (8019a10 <tcp_receive+0x970>)
 8019928:	881b      	ldrh	r3, [r3, #0]
 801992a:	461a      	mov	r2, r3
 801992c:	4b36      	ldr	r3, [pc, #216]	@ (8019a08 <tcp_receive+0x968>)
 801992e:	681b      	ldr	r3, [r3, #0]
 8019930:	441a      	add	r2, r3
 8019932:	687b      	ldr	r3, [r7, #4]
 8019934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019936:	6879      	ldr	r1, [r7, #4]
 8019938:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801993a:	440b      	add	r3, r1
 801993c:	429a      	cmp	r2, r3
 801993e:	d006      	beq.n	801994e <tcp_receive+0x8ae>
 8019940:	4b34      	ldr	r3, [pc, #208]	@ (8019a14 <tcp_receive+0x974>)
 8019942:	f240 527e 	movw	r2, #1406	@ 0x57e
 8019946:	4934      	ldr	r1, [pc, #208]	@ (8019a18 <tcp_receive+0x978>)
 8019948:	4834      	ldr	r0, [pc, #208]	@ (8019a1c <tcp_receive+0x97c>)
 801994a:	f008 f99d 	bl	8021c88 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019952:	2b00      	cmp	r3, #0
 8019954:	f000 80e1 	beq.w	8019b1a <tcp_receive+0xa7a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019958:	4b2c      	ldr	r3, [pc, #176]	@ (8019a0c <tcp_receive+0x96c>)
 801995a:	68db      	ldr	r3, [r3, #12]
 801995c:	899b      	ldrh	r3, [r3, #12]
 801995e:	b29b      	uxth	r3, r3
 8019960:	4618      	mov	r0, r3
 8019962:	f7fa ff47 	bl	80147f4 <lwip_htons>
 8019966:	4603      	mov	r3, r0
 8019968:	f003 0301 	and.w	r3, r3, #1
 801996c:	2b00      	cmp	r3, #0
 801996e:	d010      	beq.n	8019992 <tcp_receive+0x8f2>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8019970:	e00a      	b.n	8019988 <tcp_receive+0x8e8>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8019972:	687b      	ldr	r3, [r7, #4]
 8019974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019976:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 8019978:	687b      	ldr	r3, [r7, #4]
 801997a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801997c:	681a      	ldr	r2, [r3, #0]
 801997e:	687b      	ldr	r3, [r7, #4]
 8019980:	671a      	str	r2, [r3, #112]	@ 0x70
              tcp_seg_free(old_ooseq);
 8019982:	68b8      	ldr	r0, [r7, #8]
 8019984:	f7fd fdc2 	bl	801750c <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8019988:	687b      	ldr	r3, [r7, #4]
 801998a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801998c:	2b00      	cmp	r3, #0
 801998e:	d1f0      	bne.n	8019972 <tcp_receive+0x8d2>
 8019990:	e0c3      	b.n	8019b1a <tcp_receive+0xa7a>
            }
          } else {
            next = pcb->ooseq;
 8019992:	687b      	ldr	r3, [r7, #4]
 8019994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019996:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8019998:	e04f      	b.n	8019a3a <tcp_receive+0x99a>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801999a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801999c:	68db      	ldr	r3, [r3, #12]
 801999e:	899b      	ldrh	r3, [r3, #12]
 80199a0:	b29b      	uxth	r3, r3
 80199a2:	4618      	mov	r0, r3
 80199a4:	f7fa ff26 	bl	80147f4 <lwip_htons>
 80199a8:	4603      	mov	r3, r0
 80199aa:	f003 0301 	and.w	r3, r3, #1
 80199ae:	2b00      	cmp	r3, #0
 80199b0:	d03b      	beq.n	8019a2a <tcp_receive+0x98a>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80199b2:	4b16      	ldr	r3, [pc, #88]	@ (8019a0c <tcp_receive+0x96c>)
 80199b4:	68db      	ldr	r3, [r3, #12]
 80199b6:	899b      	ldrh	r3, [r3, #12]
 80199b8:	b29b      	uxth	r3, r3
 80199ba:	4618      	mov	r0, r3
 80199bc:	f7fa ff1a 	bl	80147f4 <lwip_htons>
 80199c0:	4603      	mov	r3, r0
 80199c2:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80199c6:	2b00      	cmp	r3, #0
 80199c8:	d12f      	bne.n	8019a2a <tcp_receive+0x98a>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80199ca:	4b10      	ldr	r3, [pc, #64]	@ (8019a0c <tcp_receive+0x96c>)
 80199cc:	68db      	ldr	r3, [r3, #12]
 80199ce:	899b      	ldrh	r3, [r3, #12]
 80199d0:	b29c      	uxth	r4, r3
 80199d2:	2001      	movs	r0, #1
 80199d4:	f7fa ff0e 	bl	80147f4 <lwip_htons>
 80199d8:	4603      	mov	r3, r0
 80199da:	461a      	mov	r2, r3
 80199dc:	4b0b      	ldr	r3, [pc, #44]	@ (8019a0c <tcp_receive+0x96c>)
 80199de:	68db      	ldr	r3, [r3, #12]
 80199e0:	4322      	orrs	r2, r4
 80199e2:	b292      	uxth	r2, r2
 80199e4:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80199e6:	4b09      	ldr	r3, [pc, #36]	@ (8019a0c <tcp_receive+0x96c>)
 80199e8:	891c      	ldrh	r4, [r3, #8]
 80199ea:	4b08      	ldr	r3, [pc, #32]	@ (8019a0c <tcp_receive+0x96c>)
 80199ec:	68db      	ldr	r3, [r3, #12]
 80199ee:	899b      	ldrh	r3, [r3, #12]
 80199f0:	b29b      	uxth	r3, r3
 80199f2:	4618      	mov	r0, r3
 80199f4:	f7fa fefe 	bl	80147f4 <lwip_htons>
 80199f8:	4603      	mov	r3, r0
 80199fa:	f003 0303 	and.w	r3, r3, #3
 80199fe:	2b00      	cmp	r3, #0
 8019a00:	d00e      	beq.n	8019a20 <tcp_receive+0x980>
 8019a02:	2301      	movs	r3, #1
 8019a04:	e00d      	b.n	8019a22 <tcp_receive+0x982>
 8019a06:	bf00      	nop
 8019a08:	2000c058 	.word	0x2000c058
 8019a0c:	2000c038 	.word	0x2000c038
 8019a10:	2000c062 	.word	0x2000c062
 8019a14:	080264b0 	.word	0x080264b0
 8019a18:	0802677c 	.word	0x0802677c
 8019a1c:	080264f4 	.word	0x080264f4
 8019a20:	2300      	movs	r3, #0
 8019a22:	4423      	add	r3, r4
 8019a24:	b29a      	uxth	r2, r3
 8019a26:	4b95      	ldr	r3, [pc, #596]	@ (8019c7c <tcp_receive+0xbdc>)
 8019a28:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 8019a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
              next = next->next;
 8019a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019a30:	681b      	ldr	r3, [r3, #0]
 8019a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
              tcp_seg_free(prev);
 8019a34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019a36:	f7fd fd69 	bl	801750c <tcp_seg_free>
            while (next &&
 8019a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019a3c:	2b00      	cmp	r3, #0
 8019a3e:	d00e      	beq.n	8019a5e <tcp_receive+0x9be>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8019a40:	4b8e      	ldr	r3, [pc, #568]	@ (8019c7c <tcp_receive+0xbdc>)
 8019a42:	881b      	ldrh	r3, [r3, #0]
 8019a44:	461a      	mov	r2, r3
 8019a46:	4b8e      	ldr	r3, [pc, #568]	@ (8019c80 <tcp_receive+0xbe0>)
 8019a48:	681b      	ldr	r3, [r3, #0]
 8019a4a:	441a      	add	r2, r3
 8019a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019a4e:	68db      	ldr	r3, [r3, #12]
 8019a50:	685b      	ldr	r3, [r3, #4]
 8019a52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019a54:	8909      	ldrh	r1, [r1, #8]
 8019a56:	440b      	add	r3, r1
 8019a58:	1ad3      	subs	r3, r2, r3
            while (next &&
 8019a5a:	2b00      	cmp	r3, #0
 8019a5c:	da9d      	bge.n	801999a <tcp_receive+0x8fa>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8019a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019a60:	2b00      	cmp	r3, #0
 8019a62:	d057      	beq.n	8019b14 <tcp_receive+0xa74>
                TCP_SEQ_GT(seqno + tcplen,
 8019a64:	4b85      	ldr	r3, [pc, #532]	@ (8019c7c <tcp_receive+0xbdc>)
 8019a66:	881b      	ldrh	r3, [r3, #0]
 8019a68:	461a      	mov	r2, r3
 8019a6a:	4b85      	ldr	r3, [pc, #532]	@ (8019c80 <tcp_receive+0xbe0>)
 8019a6c:	681b      	ldr	r3, [r3, #0]
 8019a6e:	441a      	add	r2, r3
 8019a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019a72:	68db      	ldr	r3, [r3, #12]
 8019a74:	685b      	ldr	r3, [r3, #4]
 8019a76:	1ad3      	subs	r3, r2, r3
            if (next &&
 8019a78:	2b00      	cmp	r3, #0
 8019a7a:	dd4b      	ble.n	8019b14 <tcp_receive+0xa74>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8019a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019a7e:	68db      	ldr	r3, [r3, #12]
 8019a80:	685b      	ldr	r3, [r3, #4]
 8019a82:	b29a      	uxth	r2, r3
 8019a84:	4b7e      	ldr	r3, [pc, #504]	@ (8019c80 <tcp_receive+0xbe0>)
 8019a86:	681b      	ldr	r3, [r3, #0]
 8019a88:	b29b      	uxth	r3, r3
 8019a8a:	1ad3      	subs	r3, r2, r3
 8019a8c:	b29a      	uxth	r2, r3
 8019a8e:	4b7d      	ldr	r3, [pc, #500]	@ (8019c84 <tcp_receive+0xbe4>)
 8019a90:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8019a92:	4b7c      	ldr	r3, [pc, #496]	@ (8019c84 <tcp_receive+0xbe4>)
 8019a94:	68db      	ldr	r3, [r3, #12]
 8019a96:	899b      	ldrh	r3, [r3, #12]
 8019a98:	b29b      	uxth	r3, r3
 8019a9a:	4618      	mov	r0, r3
 8019a9c:	f7fa feaa 	bl	80147f4 <lwip_htons>
 8019aa0:	4603      	mov	r3, r0
 8019aa2:	f003 0302 	and.w	r3, r3, #2
 8019aa6:	2b00      	cmp	r3, #0
 8019aa8:	d005      	beq.n	8019ab6 <tcp_receive+0xa16>
                inseg.len -= 1;
 8019aaa:	4b76      	ldr	r3, [pc, #472]	@ (8019c84 <tcp_receive+0xbe4>)
 8019aac:	891b      	ldrh	r3, [r3, #8]
 8019aae:	3b01      	subs	r3, #1
 8019ab0:	b29a      	uxth	r2, r3
 8019ab2:	4b74      	ldr	r3, [pc, #464]	@ (8019c84 <tcp_receive+0xbe4>)
 8019ab4:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8019ab6:	4b73      	ldr	r3, [pc, #460]	@ (8019c84 <tcp_receive+0xbe4>)
 8019ab8:	685b      	ldr	r3, [r3, #4]
 8019aba:	4a72      	ldr	r2, [pc, #456]	@ (8019c84 <tcp_receive+0xbe4>)
 8019abc:	8912      	ldrh	r2, [r2, #8]
 8019abe:	4611      	mov	r1, r2
 8019ac0:	4618      	mov	r0, r3
 8019ac2:	f7fb ff7b 	bl	80159bc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8019ac6:	4b6f      	ldr	r3, [pc, #444]	@ (8019c84 <tcp_receive+0xbe4>)
 8019ac8:	891c      	ldrh	r4, [r3, #8]
 8019aca:	4b6e      	ldr	r3, [pc, #440]	@ (8019c84 <tcp_receive+0xbe4>)
 8019acc:	68db      	ldr	r3, [r3, #12]
 8019ace:	899b      	ldrh	r3, [r3, #12]
 8019ad0:	b29b      	uxth	r3, r3
 8019ad2:	4618      	mov	r0, r3
 8019ad4:	f7fa fe8e 	bl	80147f4 <lwip_htons>
 8019ad8:	4603      	mov	r3, r0
 8019ada:	f003 0303 	and.w	r3, r3, #3
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	d001      	beq.n	8019ae6 <tcp_receive+0xa46>
 8019ae2:	2301      	movs	r3, #1
 8019ae4:	e000      	b.n	8019ae8 <tcp_receive+0xa48>
 8019ae6:	2300      	movs	r3, #0
 8019ae8:	4423      	add	r3, r4
 8019aea:	b29a      	uxth	r2, r3
 8019aec:	4b63      	ldr	r3, [pc, #396]	@ (8019c7c <tcp_receive+0xbdc>)
 8019aee:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8019af0:	4b62      	ldr	r3, [pc, #392]	@ (8019c7c <tcp_receive+0xbdc>)
 8019af2:	881b      	ldrh	r3, [r3, #0]
 8019af4:	461a      	mov	r2, r3
 8019af6:	4b62      	ldr	r3, [pc, #392]	@ (8019c80 <tcp_receive+0xbe0>)
 8019af8:	681b      	ldr	r3, [r3, #0]
 8019afa:	441a      	add	r2, r3
 8019afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019afe:	68db      	ldr	r3, [r3, #12]
 8019b00:	685b      	ldr	r3, [r3, #4]
 8019b02:	429a      	cmp	r2, r3
 8019b04:	d006      	beq.n	8019b14 <tcp_receive+0xa74>
 8019b06:	4b60      	ldr	r3, [pc, #384]	@ (8019c88 <tcp_receive+0xbe8>)
 8019b08:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 8019b0c:	495f      	ldr	r1, [pc, #380]	@ (8019c8c <tcp_receive+0xbec>)
 8019b0e:	4860      	ldr	r0, [pc, #384]	@ (8019c90 <tcp_receive+0xbf0>)
 8019b10:	f008 f8ba 	bl	8021c88 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8019b14:	687b      	ldr	r3, [r7, #4]
 8019b16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019b18:	671a      	str	r2, [r3, #112]	@ 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8019b1a:	4b58      	ldr	r3, [pc, #352]	@ (8019c7c <tcp_receive+0xbdc>)
 8019b1c:	881b      	ldrh	r3, [r3, #0]
 8019b1e:	461a      	mov	r2, r3
 8019b20:	4b57      	ldr	r3, [pc, #348]	@ (8019c80 <tcp_receive+0xbe0>)
 8019b22:	681b      	ldr	r3, [r3, #0]
 8019b24:	441a      	add	r2, r3
 8019b26:	687b      	ldr	r3, [r7, #4]
 8019b28:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8019b2a:	687b      	ldr	r3, [r7, #4]
 8019b2c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8019b2e:	4b53      	ldr	r3, [pc, #332]	@ (8019c7c <tcp_receive+0xbdc>)
 8019b30:	881b      	ldrh	r3, [r3, #0]
 8019b32:	429a      	cmp	r2, r3
 8019b34:	d206      	bcs.n	8019b44 <tcp_receive+0xaa4>
 8019b36:	4b54      	ldr	r3, [pc, #336]	@ (8019c88 <tcp_receive+0xbe8>)
 8019b38:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8019b3c:	4955      	ldr	r1, [pc, #340]	@ (8019c94 <tcp_receive+0xbf4>)
 8019b3e:	4854      	ldr	r0, [pc, #336]	@ (8019c90 <tcp_receive+0xbf0>)
 8019b40:	f008 f8a2 	bl	8021c88 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8019b48:	4b4c      	ldr	r3, [pc, #304]	@ (8019c7c <tcp_receive+0xbdc>)
 8019b4a:	881b      	ldrh	r3, [r3, #0]
 8019b4c:	1ad3      	subs	r3, r2, r3
 8019b4e:	b29a      	uxth	r2, r3
 8019b50:	687b      	ldr	r3, [r7, #4]
 8019b52:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8019b54:	6878      	ldr	r0, [r7, #4]
 8019b56:	f7fd f847 	bl	8016be8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8019b5a:	4b4a      	ldr	r3, [pc, #296]	@ (8019c84 <tcp_receive+0xbe4>)
 8019b5c:	685b      	ldr	r3, [r3, #4]
 8019b5e:	891b      	ldrh	r3, [r3, #8]
 8019b60:	2b00      	cmp	r3, #0
 8019b62:	d006      	beq.n	8019b72 <tcp_receive+0xad2>
          recv_data = inseg.p;
 8019b64:	4b47      	ldr	r3, [pc, #284]	@ (8019c84 <tcp_receive+0xbe4>)
 8019b66:	685b      	ldr	r3, [r3, #4]
 8019b68:	4a4b      	ldr	r2, [pc, #300]	@ (8019c98 <tcp_receive+0xbf8>)
 8019b6a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8019b6c:	4b45      	ldr	r3, [pc, #276]	@ (8019c84 <tcp_receive+0xbe4>)
 8019b6e:	2200      	movs	r2, #0
 8019b70:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019b72:	4b44      	ldr	r3, [pc, #272]	@ (8019c84 <tcp_receive+0xbe4>)
 8019b74:	68db      	ldr	r3, [r3, #12]
 8019b76:	899b      	ldrh	r3, [r3, #12]
 8019b78:	b29b      	uxth	r3, r3
 8019b7a:	4618      	mov	r0, r3
 8019b7c:	f7fa fe3a 	bl	80147f4 <lwip_htons>
 8019b80:	4603      	mov	r3, r0
 8019b82:	f003 0301 	and.w	r3, r3, #1
 8019b86:	2b00      	cmp	r3, #0
 8019b88:	f000 80b4 	beq.w	8019cf4 <tcp_receive+0xc54>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8019b8c:	4b43      	ldr	r3, [pc, #268]	@ (8019c9c <tcp_receive+0xbfc>)
 8019b8e:	781b      	ldrb	r3, [r3, #0]
 8019b90:	f043 0320 	orr.w	r3, r3, #32
 8019b94:	b2da      	uxtb	r2, r3
 8019b96:	4b41      	ldr	r3, [pc, #260]	@ (8019c9c <tcp_receive+0xbfc>)
 8019b98:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8019b9a:	e0ab      	b.n	8019cf4 <tcp_receive+0xc54>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 8019b9c:	687b      	ldr	r3, [r7, #4]
 8019b9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019ba0:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 8019ba2:	687b      	ldr	r3, [r7, #4]
 8019ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019ba6:	68db      	ldr	r3, [r3, #12]
 8019ba8:	685b      	ldr	r3, [r3, #4]
 8019baa:	4a35      	ldr	r2, [pc, #212]	@ (8019c80 <tcp_receive+0xbe0>)
 8019bac:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8019bae:	68fb      	ldr	r3, [r7, #12]
 8019bb0:	891b      	ldrh	r3, [r3, #8]
 8019bb2:	461c      	mov	r4, r3
 8019bb4:	68fb      	ldr	r3, [r7, #12]
 8019bb6:	68db      	ldr	r3, [r3, #12]
 8019bb8:	899b      	ldrh	r3, [r3, #12]
 8019bba:	b29b      	uxth	r3, r3
 8019bbc:	4618      	mov	r0, r3
 8019bbe:	f7fa fe19 	bl	80147f4 <lwip_htons>
 8019bc2:	4603      	mov	r3, r0
 8019bc4:	f003 0303 	and.w	r3, r3, #3
 8019bc8:	2b00      	cmp	r3, #0
 8019bca:	d001      	beq.n	8019bd0 <tcp_receive+0xb30>
 8019bcc:	2301      	movs	r3, #1
 8019bce:	e000      	b.n	8019bd2 <tcp_receive+0xb32>
 8019bd0:	2300      	movs	r3, #0
 8019bd2:	191a      	adds	r2, r3, r4
 8019bd4:	687b      	ldr	r3, [r7, #4]
 8019bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019bd8:	441a      	add	r2, r3
 8019bda:	687b      	ldr	r3, [r7, #4]
 8019bdc:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8019bde:	687b      	ldr	r3, [r7, #4]
 8019be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8019be2:	461c      	mov	r4, r3
 8019be4:	68fb      	ldr	r3, [r7, #12]
 8019be6:	891b      	ldrh	r3, [r3, #8]
 8019be8:	461d      	mov	r5, r3
 8019bea:	68fb      	ldr	r3, [r7, #12]
 8019bec:	68db      	ldr	r3, [r3, #12]
 8019bee:	899b      	ldrh	r3, [r3, #12]
 8019bf0:	b29b      	uxth	r3, r3
 8019bf2:	4618      	mov	r0, r3
 8019bf4:	f7fa fdfe 	bl	80147f4 <lwip_htons>
 8019bf8:	4603      	mov	r3, r0
 8019bfa:	f003 0303 	and.w	r3, r3, #3
 8019bfe:	2b00      	cmp	r3, #0
 8019c00:	d001      	beq.n	8019c06 <tcp_receive+0xb66>
 8019c02:	2301      	movs	r3, #1
 8019c04:	e000      	b.n	8019c08 <tcp_receive+0xb68>
 8019c06:	2300      	movs	r3, #0
 8019c08:	442b      	add	r3, r5
 8019c0a:	429c      	cmp	r4, r3
 8019c0c:	d206      	bcs.n	8019c1c <tcp_receive+0xb7c>
 8019c0e:	4b1e      	ldr	r3, [pc, #120]	@ (8019c88 <tcp_receive+0xbe8>)
 8019c10:	f240 52dd 	movw	r2, #1501	@ 0x5dd
 8019c14:	4922      	ldr	r1, [pc, #136]	@ (8019ca0 <tcp_receive+0xc00>)
 8019c16:	481e      	ldr	r0, [pc, #120]	@ (8019c90 <tcp_receive+0xbf0>)
 8019c18:	f008 f836 	bl	8021c88 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8019c1c:	68fb      	ldr	r3, [r7, #12]
 8019c1e:	891b      	ldrh	r3, [r3, #8]
 8019c20:	461c      	mov	r4, r3
 8019c22:	68fb      	ldr	r3, [r7, #12]
 8019c24:	68db      	ldr	r3, [r3, #12]
 8019c26:	899b      	ldrh	r3, [r3, #12]
 8019c28:	b29b      	uxth	r3, r3
 8019c2a:	4618      	mov	r0, r3
 8019c2c:	f7fa fde2 	bl	80147f4 <lwip_htons>
 8019c30:	4603      	mov	r3, r0
 8019c32:	f003 0303 	and.w	r3, r3, #3
 8019c36:	2b00      	cmp	r3, #0
 8019c38:	d001      	beq.n	8019c3e <tcp_receive+0xb9e>
 8019c3a:	2301      	movs	r3, #1
 8019c3c:	e000      	b.n	8019c40 <tcp_receive+0xba0>
 8019c3e:	2300      	movs	r3, #0
 8019c40:	1919      	adds	r1, r3, r4
 8019c42:	687b      	ldr	r3, [r7, #4]
 8019c44:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8019c46:	b28b      	uxth	r3, r1
 8019c48:	1ad3      	subs	r3, r2, r3
 8019c4a:	b29a      	uxth	r2, r3
 8019c4c:	687b      	ldr	r3, [r7, #4]
 8019c4e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8019c50:	6878      	ldr	r0, [r7, #4]
 8019c52:	f7fc ffc9 	bl	8016be8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8019c56:	68fb      	ldr	r3, [r7, #12]
 8019c58:	685b      	ldr	r3, [r3, #4]
 8019c5a:	891b      	ldrh	r3, [r3, #8]
 8019c5c:	2b00      	cmp	r3, #0
 8019c5e:	d028      	beq.n	8019cb2 <tcp_receive+0xc12>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8019c60:	4b0d      	ldr	r3, [pc, #52]	@ (8019c98 <tcp_receive+0xbf8>)
 8019c62:	681b      	ldr	r3, [r3, #0]
 8019c64:	2b00      	cmp	r3, #0
 8019c66:	d01d      	beq.n	8019ca4 <tcp_receive+0xc04>
              pbuf_cat(recv_data, cseg->p);
 8019c68:	4b0b      	ldr	r3, [pc, #44]	@ (8019c98 <tcp_receive+0xbf8>)
 8019c6a:	681a      	ldr	r2, [r3, #0]
 8019c6c:	68fb      	ldr	r3, [r7, #12]
 8019c6e:	685b      	ldr	r3, [r3, #4]
 8019c70:	4619      	mov	r1, r3
 8019c72:	4610      	mov	r0, r2
 8019c74:	f7fc f8e2 	bl	8015e3c <pbuf_cat>
 8019c78:	e018      	b.n	8019cac <tcp_receive+0xc0c>
 8019c7a:	bf00      	nop
 8019c7c:	2000c062 	.word	0x2000c062
 8019c80:	2000c058 	.word	0x2000c058
 8019c84:	2000c038 	.word	0x2000c038
 8019c88:	080264b0 	.word	0x080264b0
 8019c8c:	080267b4 	.word	0x080267b4
 8019c90:	080264f4 	.word	0x080264f4
 8019c94:	080267f0 	.word	0x080267f0
 8019c98:	2000c068 	.word	0x2000c068
 8019c9c:	2000c065 	.word	0x2000c065
 8019ca0:	08026810 	.word	0x08026810
            } else {
              recv_data = cseg->p;
 8019ca4:	68fb      	ldr	r3, [r7, #12]
 8019ca6:	685b      	ldr	r3, [r3, #4]
 8019ca8:	4a71      	ldr	r2, [pc, #452]	@ (8019e70 <tcp_receive+0xdd0>)
 8019caa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8019cac:	68fb      	ldr	r3, [r7, #12]
 8019cae:	2200      	movs	r2, #0
 8019cb0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8019cb2:	68fb      	ldr	r3, [r7, #12]
 8019cb4:	68db      	ldr	r3, [r3, #12]
 8019cb6:	899b      	ldrh	r3, [r3, #12]
 8019cb8:	b29b      	uxth	r3, r3
 8019cba:	4618      	mov	r0, r3
 8019cbc:	f7fa fd9a 	bl	80147f4 <lwip_htons>
 8019cc0:	4603      	mov	r3, r0
 8019cc2:	f003 0301 	and.w	r3, r3, #1
 8019cc6:	2b00      	cmp	r3, #0
 8019cc8:	d00d      	beq.n	8019ce6 <tcp_receive+0xc46>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8019cca:	4b6a      	ldr	r3, [pc, #424]	@ (8019e74 <tcp_receive+0xdd4>)
 8019ccc:	781b      	ldrb	r3, [r3, #0]
 8019cce:	f043 0320 	orr.w	r3, r3, #32
 8019cd2:	b2da      	uxtb	r2, r3
 8019cd4:	4b67      	ldr	r3, [pc, #412]	@ (8019e74 <tcp_receive+0xdd4>)
 8019cd6:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8019cd8:	687b      	ldr	r3, [r7, #4]
 8019cda:	7d1b      	ldrb	r3, [r3, #20]
 8019cdc:	2b04      	cmp	r3, #4
 8019cde:	d102      	bne.n	8019ce6 <tcp_receive+0xc46>
              pcb->state = CLOSE_WAIT;
 8019ce0:	687b      	ldr	r3, [r7, #4]
 8019ce2:	2207      	movs	r2, #7
 8019ce4:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8019ce6:	68fb      	ldr	r3, [r7, #12]
 8019ce8:	681a      	ldr	r2, [r3, #0]
 8019cea:	687b      	ldr	r3, [r7, #4]
 8019cec:	671a      	str	r2, [r3, #112]	@ 0x70
          tcp_seg_free(cseg);
 8019cee:	68f8      	ldr	r0, [r7, #12]
 8019cf0:	f7fd fc0c 	bl	801750c <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8019cf4:	687b      	ldr	r3, [r7, #4]
 8019cf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019cf8:	2b00      	cmp	r3, #0
 8019cfa:	d008      	beq.n	8019d0e <tcp_receive+0xc6e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8019cfc:	687b      	ldr	r3, [r7, #4]
 8019cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019d00:	68db      	ldr	r3, [r3, #12]
 8019d02:	685a      	ldr	r2, [r3, #4]
 8019d04:	687b      	ldr	r3, [r7, #4]
 8019d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8019d08:	429a      	cmp	r2, r3
 8019d0a:	f43f af47 	beq.w	8019b9c <tcp_receive+0xafc>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8019d0e:	687b      	ldr	r3, [r7, #4]
 8019d10:	7e9b      	ldrb	r3, [r3, #26]
 8019d12:	f003 0301 	and.w	r3, r3, #1
 8019d16:	2b00      	cmp	r3, #0
 8019d18:	d00e      	beq.n	8019d38 <tcp_receive+0xc98>
 8019d1a:	687b      	ldr	r3, [r7, #4]
 8019d1c:	7e9b      	ldrb	r3, [r3, #26]
 8019d1e:	f023 0301 	bic.w	r3, r3, #1
 8019d22:	b2da      	uxtb	r2, r3
 8019d24:	687b      	ldr	r3, [r7, #4]
 8019d26:	769a      	strb	r2, [r3, #26]
 8019d28:	687b      	ldr	r3, [r7, #4]
 8019d2a:	7e9b      	ldrb	r3, [r3, #26]
 8019d2c:	f043 0302 	orr.w	r3, r3, #2
 8019d30:	b2da      	uxtb	r2, r3
 8019d32:	687b      	ldr	r3, [r7, #4]
 8019d34:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8019d36:	e181      	b.n	801a03c <tcp_receive+0xf9c>
        tcp_ack(pcb);
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	7e9b      	ldrb	r3, [r3, #26]
 8019d3c:	f043 0301 	orr.w	r3, r3, #1
 8019d40:	b2da      	uxtb	r2, r3
 8019d42:	687b      	ldr	r3, [r7, #4]
 8019d44:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8019d46:	e179      	b.n	801a03c <tcp_receive+0xf9c>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8019d48:	6878      	ldr	r0, [r7, #4]
 8019d4a:	f001 f8f9 	bl	801af40 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8019d4e:	687b      	ldr	r3, [r7, #4]
 8019d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019d52:	2b00      	cmp	r3, #0
 8019d54:	d106      	bne.n	8019d64 <tcp_receive+0xcc4>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8019d56:	4848      	ldr	r0, [pc, #288]	@ (8019e78 <tcp_receive+0xdd8>)
 8019d58:	f7fd fbfe 	bl	8017558 <tcp_seg_copy>
 8019d5c:	4602      	mov	r2, r0
 8019d5e:	687b      	ldr	r3, [r7, #4]
 8019d60:	671a      	str	r2, [r3, #112]	@ 0x70
      if (pcb->rcv_nxt == seqno) {
 8019d62:	e16b      	b.n	801a03c <tcp_receive+0xf9c>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 8019d64:	2300      	movs	r3, #0
 8019d66:	62bb      	str	r3, [r7, #40]	@ 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8019d68:	687b      	ldr	r3, [r7, #4]
 8019d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019d6e:	e150      	b.n	801a012 <tcp_receive+0xf72>
            if (seqno == next->tcphdr->seqno) {
 8019d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019d72:	68db      	ldr	r3, [r3, #12]
 8019d74:	685a      	ldr	r2, [r3, #4]
 8019d76:	4b41      	ldr	r3, [pc, #260]	@ (8019e7c <tcp_receive+0xddc>)
 8019d78:	681b      	ldr	r3, [r3, #0]
 8019d7a:	429a      	cmp	r2, r3
 8019d7c:	d11d      	bne.n	8019dba <tcp_receive+0xd1a>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8019d7e:	4b3e      	ldr	r3, [pc, #248]	@ (8019e78 <tcp_receive+0xdd8>)
 8019d80:	891a      	ldrh	r2, [r3, #8]
 8019d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019d84:	891b      	ldrh	r3, [r3, #8]
 8019d86:	429a      	cmp	r2, r3
 8019d88:	f240 8148 	bls.w	801a01c <tcp_receive+0xf7c>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 8019d8c:	483a      	ldr	r0, [pc, #232]	@ (8019e78 <tcp_receive+0xdd8>)
 8019d8e:	f7fd fbe3 	bl	8017558 <tcp_seg_copy>
 8019d92:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 8019d94:	68fb      	ldr	r3, [r7, #12]
 8019d96:	2b00      	cmp	r3, #0
 8019d98:	f000 8142 	beq.w	801a020 <tcp_receive+0xf80>
                  if (prev != NULL) {
 8019d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019d9e:	2b00      	cmp	r3, #0
 8019da0:	d003      	beq.n	8019daa <tcp_receive+0xd0a>
                    prev->next = cseg;
 8019da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019da4:	68fa      	ldr	r2, [r7, #12]
 8019da6:	601a      	str	r2, [r3, #0]
 8019da8:	e002      	b.n	8019db0 <tcp_receive+0xd10>
                  } else {
                    pcb->ooseq = cseg;
 8019daa:	687b      	ldr	r3, [r7, #4]
 8019dac:	68fa      	ldr	r2, [r7, #12]
 8019dae:	671a      	str	r2, [r3, #112]	@ 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 8019db0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019db2:	68f8      	ldr	r0, [r7, #12]
 8019db4:	f7ff f8fe 	bl	8018fb4 <tcp_oos_insert_segment>
                }
                break;
 8019db8:	e132      	b.n	801a020 <tcp_receive+0xf80>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8019dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019dbc:	2b00      	cmp	r3, #0
 8019dbe:	d117      	bne.n	8019df0 <tcp_receive+0xd50>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8019dc0:	4b2e      	ldr	r3, [pc, #184]	@ (8019e7c <tcp_receive+0xddc>)
 8019dc2:	681a      	ldr	r2, [r3, #0]
 8019dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019dc6:	68db      	ldr	r3, [r3, #12]
 8019dc8:	685b      	ldr	r3, [r3, #4]
 8019dca:	1ad3      	subs	r3, r2, r3
 8019dcc:	2b00      	cmp	r3, #0
 8019dce:	da57      	bge.n	8019e80 <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 8019dd0:	4829      	ldr	r0, [pc, #164]	@ (8019e78 <tcp_receive+0xdd8>)
 8019dd2:	f7fd fbc1 	bl	8017558 <tcp_seg_copy>
 8019dd6:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8019dd8:	68fb      	ldr	r3, [r7, #12]
 8019dda:	2b00      	cmp	r3, #0
 8019ddc:	f000 8122 	beq.w	801a024 <tcp_receive+0xf84>
                    pcb->ooseq = cseg;
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	68fa      	ldr	r2, [r7, #12]
 8019de4:	671a      	str	r2, [r3, #112]	@ 0x70
                    tcp_oos_insert_segment(cseg, next);
 8019de6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019de8:	68f8      	ldr	r0, [r7, #12]
 8019dea:	f7ff f8e3 	bl	8018fb4 <tcp_oos_insert_segment>
                  }
                  break;
 8019dee:	e119      	b.n	801a024 <tcp_receive+0xf84>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8019df0:	4b22      	ldr	r3, [pc, #136]	@ (8019e7c <tcp_receive+0xddc>)
 8019df2:	681a      	ldr	r2, [r3, #0]
 8019df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019df6:	68db      	ldr	r3, [r3, #12]
 8019df8:	685b      	ldr	r3, [r3, #4]
 8019dfa:	1ad3      	subs	r3, r2, r3
 8019dfc:	3b01      	subs	r3, #1
 8019dfe:	2b00      	cmp	r3, #0
 8019e00:	db3e      	blt.n	8019e80 <tcp_receive+0xde0>
 8019e02:	4b1e      	ldr	r3, [pc, #120]	@ (8019e7c <tcp_receive+0xddc>)
 8019e04:	681a      	ldr	r2, [r3, #0]
 8019e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e08:	68db      	ldr	r3, [r3, #12]
 8019e0a:	685b      	ldr	r3, [r3, #4]
 8019e0c:	1ad3      	subs	r3, r2, r3
 8019e0e:	3301      	adds	r3, #1
 8019e10:	2b00      	cmp	r3, #0
 8019e12:	dc35      	bgt.n	8019e80 <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 8019e14:	4818      	ldr	r0, [pc, #96]	@ (8019e78 <tcp_receive+0xdd8>)
 8019e16:	f7fd fb9f 	bl	8017558 <tcp_seg_copy>
 8019e1a:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8019e1c:	68fb      	ldr	r3, [r7, #12]
 8019e1e:	2b00      	cmp	r3, #0
 8019e20:	f000 8102 	beq.w	801a028 <tcp_receive+0xf88>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8019e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e26:	68db      	ldr	r3, [r3, #12]
 8019e28:	685b      	ldr	r3, [r3, #4]
 8019e2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019e2c:	8912      	ldrh	r2, [r2, #8]
 8019e2e:	441a      	add	r2, r3
 8019e30:	4b12      	ldr	r3, [pc, #72]	@ (8019e7c <tcp_receive+0xddc>)
 8019e32:	681b      	ldr	r3, [r3, #0]
 8019e34:	1ad3      	subs	r3, r2, r3
 8019e36:	2b00      	cmp	r3, #0
 8019e38:	dd12      	ble.n	8019e60 <tcp_receive+0xdc0>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8019e3a:	4b10      	ldr	r3, [pc, #64]	@ (8019e7c <tcp_receive+0xddc>)
 8019e3c:	681b      	ldr	r3, [r3, #0]
 8019e3e:	b29a      	uxth	r2, r3
 8019e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e42:	68db      	ldr	r3, [r3, #12]
 8019e44:	685b      	ldr	r3, [r3, #4]
 8019e46:	b29b      	uxth	r3, r3
 8019e48:	1ad3      	subs	r3, r2, r3
 8019e4a:	b29a      	uxth	r2, r3
 8019e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e4e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8019e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e52:	685a      	ldr	r2, [r3, #4]
 8019e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e56:	891b      	ldrh	r3, [r3, #8]
 8019e58:	4619      	mov	r1, r3
 8019e5a:	4610      	mov	r0, r2
 8019e5c:	f7fb fdae 	bl	80159bc <pbuf_realloc>
                    }
                    prev->next = cseg;
 8019e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e62:	68fa      	ldr	r2, [r7, #12]
 8019e64:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8019e66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019e68:	68f8      	ldr	r0, [r7, #12]
 8019e6a:	f7ff f8a3 	bl	8018fb4 <tcp_oos_insert_segment>
                  }
                  break;
 8019e6e:	e0db      	b.n	801a028 <tcp_receive+0xf88>
 8019e70:	2000c068 	.word	0x2000c068
 8019e74:	2000c065 	.word	0x2000c065
 8019e78:	2000c038 	.word	0x2000c038
 8019e7c:	2000c058 	.word	0x2000c058
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8019e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e82:	681b      	ldr	r3, [r3, #0]
 8019e84:	2b00      	cmp	r3, #0
 8019e86:	f040 80bf 	bne.w	801a008 <tcp_receive+0xf68>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8019e8a:	4b7c      	ldr	r3, [pc, #496]	@ (801a07c <tcp_receive+0xfdc>)
 8019e8c:	681a      	ldr	r2, [r3, #0]
 8019e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e90:	68db      	ldr	r3, [r3, #12]
 8019e92:	685b      	ldr	r3, [r3, #4]
 8019e94:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8019e96:	2b00      	cmp	r3, #0
 8019e98:	f340 80b6 	ble.w	801a008 <tcp_receive+0xf68>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8019e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e9e:	68db      	ldr	r3, [r3, #12]
 8019ea0:	899b      	ldrh	r3, [r3, #12]
 8019ea2:	b29b      	uxth	r3, r3
 8019ea4:	4618      	mov	r0, r3
 8019ea6:	f7fa fca5 	bl	80147f4 <lwip_htons>
 8019eaa:	4603      	mov	r3, r0
 8019eac:	f003 0301 	and.w	r3, r3, #1
 8019eb0:	2b00      	cmp	r3, #0
 8019eb2:	f040 80bb 	bne.w	801a02c <tcp_receive+0xf8c>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8019eb6:	4872      	ldr	r0, [pc, #456]	@ (801a080 <tcp_receive+0xfe0>)
 8019eb8:	f7fd fb4e 	bl	8017558 <tcp_seg_copy>
 8019ebc:	4602      	mov	r2, r0
 8019ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019ec0:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8019ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019ec4:	681b      	ldr	r3, [r3, #0]
 8019ec6:	2b00      	cmp	r3, #0
 8019ec8:	f000 80b2 	beq.w	801a030 <tcp_receive+0xf90>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8019ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019ece:	68db      	ldr	r3, [r3, #12]
 8019ed0:	685b      	ldr	r3, [r3, #4]
 8019ed2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019ed4:	8912      	ldrh	r2, [r2, #8]
 8019ed6:	441a      	add	r2, r3
 8019ed8:	4b68      	ldr	r3, [pc, #416]	@ (801a07c <tcp_receive+0xfdc>)
 8019eda:	681b      	ldr	r3, [r3, #0]
 8019edc:	1ad3      	subs	r3, r2, r3
 8019ede:	2b00      	cmp	r3, #0
 8019ee0:	dd12      	ble.n	8019f08 <tcp_receive+0xe68>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8019ee2:	4b66      	ldr	r3, [pc, #408]	@ (801a07c <tcp_receive+0xfdc>)
 8019ee4:	681b      	ldr	r3, [r3, #0]
 8019ee6:	b29a      	uxth	r2, r3
 8019ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019eea:	68db      	ldr	r3, [r3, #12]
 8019eec:	685b      	ldr	r3, [r3, #4]
 8019eee:	b29b      	uxth	r3, r3
 8019ef0:	1ad3      	subs	r3, r2, r3
 8019ef2:	b29a      	uxth	r2, r3
 8019ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019ef6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8019ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019efa:	685a      	ldr	r2, [r3, #4]
 8019efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019efe:	891b      	ldrh	r3, [r3, #8]
 8019f00:	4619      	mov	r1, r3
 8019f02:	4610      	mov	r0, r2
 8019f04:	f7fb fd5a 	bl	80159bc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8019f08:	4b5e      	ldr	r3, [pc, #376]	@ (801a084 <tcp_receive+0xfe4>)
 8019f0a:	881b      	ldrh	r3, [r3, #0]
 8019f0c:	461a      	mov	r2, r3
 8019f0e:	4b5b      	ldr	r3, [pc, #364]	@ (801a07c <tcp_receive+0xfdc>)
 8019f10:	681b      	ldr	r3, [r3, #0]
 8019f12:	441a      	add	r2, r3
 8019f14:	687b      	ldr	r3, [r7, #4]
 8019f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019f18:	6879      	ldr	r1, [r7, #4]
 8019f1a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8019f1c:	440b      	add	r3, r1
 8019f1e:	1ad3      	subs	r3, r2, r3
 8019f20:	2b00      	cmp	r3, #0
 8019f22:	f340 8085 	ble.w	801a030 <tcp_receive+0xf90>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8019f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f28:	681b      	ldr	r3, [r3, #0]
 8019f2a:	68db      	ldr	r3, [r3, #12]
 8019f2c:	899b      	ldrh	r3, [r3, #12]
 8019f2e:	b29b      	uxth	r3, r3
 8019f30:	4618      	mov	r0, r3
 8019f32:	f7fa fc5f 	bl	80147f4 <lwip_htons>
 8019f36:	4603      	mov	r3, r0
 8019f38:	f003 0301 	and.w	r3, r3, #1
 8019f3c:	2b00      	cmp	r3, #0
 8019f3e:	d01e      	beq.n	8019f7e <tcp_receive+0xede>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8019f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f42:	681b      	ldr	r3, [r3, #0]
 8019f44:	68db      	ldr	r3, [r3, #12]
 8019f46:	899b      	ldrh	r3, [r3, #12]
 8019f48:	b29b      	uxth	r3, r3
 8019f4a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8019f4e:	b29c      	uxth	r4, r3
 8019f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f52:	681b      	ldr	r3, [r3, #0]
 8019f54:	68db      	ldr	r3, [r3, #12]
 8019f56:	899b      	ldrh	r3, [r3, #12]
 8019f58:	b29b      	uxth	r3, r3
 8019f5a:	4618      	mov	r0, r3
 8019f5c:	f7fa fc4a 	bl	80147f4 <lwip_htons>
 8019f60:	4603      	mov	r3, r0
 8019f62:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8019f66:	b29b      	uxth	r3, r3
 8019f68:	4618      	mov	r0, r3
 8019f6a:	f7fa fc43 	bl	80147f4 <lwip_htons>
 8019f6e:	4603      	mov	r3, r0
 8019f70:	461a      	mov	r2, r3
 8019f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f74:	681b      	ldr	r3, [r3, #0]
 8019f76:	68db      	ldr	r3, [r3, #12]
 8019f78:	4322      	orrs	r2, r4
 8019f7a:	b292      	uxth	r2, r2
 8019f7c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8019f7e:	687b      	ldr	r3, [r7, #4]
 8019f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019f82:	b29a      	uxth	r2, r3
 8019f84:	687b      	ldr	r3, [r7, #4]
 8019f86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8019f88:	4413      	add	r3, r2
 8019f8a:	b299      	uxth	r1, r3
 8019f8c:	4b3b      	ldr	r3, [pc, #236]	@ (801a07c <tcp_receive+0xfdc>)
 8019f8e:	681b      	ldr	r3, [r3, #0]
 8019f90:	b29a      	uxth	r2, r3
 8019f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f94:	681b      	ldr	r3, [r3, #0]
 8019f96:	1a8a      	subs	r2, r1, r2
 8019f98:	b292      	uxth	r2, r2
 8019f9a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8019f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f9e:	681b      	ldr	r3, [r3, #0]
 8019fa0:	685a      	ldr	r2, [r3, #4]
 8019fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019fa4:	681b      	ldr	r3, [r3, #0]
 8019fa6:	891b      	ldrh	r3, [r3, #8]
 8019fa8:	4619      	mov	r1, r3
 8019faa:	4610      	mov	r0, r2
 8019fac:	f7fb fd06 	bl	80159bc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8019fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019fb2:	681b      	ldr	r3, [r3, #0]
 8019fb4:	891c      	ldrh	r4, [r3, #8]
 8019fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019fb8:	681b      	ldr	r3, [r3, #0]
 8019fba:	68db      	ldr	r3, [r3, #12]
 8019fbc:	899b      	ldrh	r3, [r3, #12]
 8019fbe:	b29b      	uxth	r3, r3
 8019fc0:	4618      	mov	r0, r3
 8019fc2:	f7fa fc17 	bl	80147f4 <lwip_htons>
 8019fc6:	4603      	mov	r3, r0
 8019fc8:	f003 0303 	and.w	r3, r3, #3
 8019fcc:	2b00      	cmp	r3, #0
 8019fce:	d001      	beq.n	8019fd4 <tcp_receive+0xf34>
 8019fd0:	2301      	movs	r3, #1
 8019fd2:	e000      	b.n	8019fd6 <tcp_receive+0xf36>
 8019fd4:	2300      	movs	r3, #0
 8019fd6:	4423      	add	r3, r4
 8019fd8:	b29a      	uxth	r2, r3
 8019fda:	4b2a      	ldr	r3, [pc, #168]	@ (801a084 <tcp_receive+0xfe4>)
 8019fdc:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019fde:	4b29      	ldr	r3, [pc, #164]	@ (801a084 <tcp_receive+0xfe4>)
 8019fe0:	881b      	ldrh	r3, [r3, #0]
 8019fe2:	461a      	mov	r2, r3
 8019fe4:	4b25      	ldr	r3, [pc, #148]	@ (801a07c <tcp_receive+0xfdc>)
 8019fe6:	681b      	ldr	r3, [r3, #0]
 8019fe8:	441a      	add	r2, r3
 8019fea:	687b      	ldr	r3, [r7, #4]
 8019fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019fee:	6879      	ldr	r1, [r7, #4]
 8019ff0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8019ff2:	440b      	add	r3, r1
 8019ff4:	429a      	cmp	r2, r3
 8019ff6:	d01b      	beq.n	801a030 <tcp_receive+0xf90>
 8019ff8:	4b23      	ldr	r3, [pc, #140]	@ (801a088 <tcp_receive+0xfe8>)
 8019ffa:	f240 627a 	movw	r2, #1658	@ 0x67a
 8019ffe:	4923      	ldr	r1, [pc, #140]	@ (801a08c <tcp_receive+0xfec>)
 801a000:	4823      	ldr	r0, [pc, #140]	@ (801a090 <tcp_receive+0xff0>)
 801a002:	f007 fe41 	bl	8021c88 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801a006:	e013      	b.n	801a030 <tcp_receive+0xf90>
              }
            }
            prev = next;
 801a008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a00a:	62bb      	str	r3, [r7, #40]	@ 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801a00c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a00e:	681b      	ldr	r3, [r3, #0]
 801a010:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a014:	2b00      	cmp	r3, #0
 801a016:	f47f aeab 	bne.w	8019d70 <tcp_receive+0xcd0>
      if (pcb->rcv_nxt == seqno) {
 801a01a:	e00f      	b.n	801a03c <tcp_receive+0xf9c>
                break;
 801a01c:	bf00      	nop
 801a01e:	e00d      	b.n	801a03c <tcp_receive+0xf9c>
                break;
 801a020:	bf00      	nop
 801a022:	e00b      	b.n	801a03c <tcp_receive+0xf9c>
                  break;
 801a024:	bf00      	nop
 801a026:	e009      	b.n	801a03c <tcp_receive+0xf9c>
                  break;
 801a028:	bf00      	nop
 801a02a:	e007      	b.n	801a03c <tcp_receive+0xf9c>
                  break;
 801a02c:	bf00      	nop
 801a02e:	e005      	b.n	801a03c <tcp_receive+0xf9c>
                break;
 801a030:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 801a032:	e003      	b.n	801a03c <tcp_receive+0xf9c>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801a034:	6878      	ldr	r0, [r7, #4]
 801a036:	f000 ff83 	bl	801af40 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801a03a:	e01a      	b.n	801a072 <tcp_receive+0xfd2>
 801a03c:	e019      	b.n	801a072 <tcp_receive+0xfd2>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801a03e:	4b0f      	ldr	r3, [pc, #60]	@ (801a07c <tcp_receive+0xfdc>)
 801a040:	681a      	ldr	r2, [r3, #0]
 801a042:	687b      	ldr	r3, [r7, #4]
 801a044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a046:	1ad3      	subs	r3, r2, r3
 801a048:	2b00      	cmp	r3, #0
 801a04a:	db0a      	blt.n	801a062 <tcp_receive+0xfc2>
 801a04c:	4b0b      	ldr	r3, [pc, #44]	@ (801a07c <tcp_receive+0xfdc>)
 801a04e:	681a      	ldr	r2, [r3, #0]
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a054:	6879      	ldr	r1, [r7, #4]
 801a056:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801a058:	440b      	add	r3, r1
 801a05a:	1ad3      	subs	r3, r2, r3
 801a05c:	3301      	adds	r3, #1
 801a05e:	2b00      	cmp	r3, #0
 801a060:	dd07      	ble.n	801a072 <tcp_receive+0xfd2>
      tcp_ack_now(pcb);
 801a062:	687b      	ldr	r3, [r7, #4]
 801a064:	7e9b      	ldrb	r3, [r3, #26]
 801a066:	f043 0302 	orr.w	r3, r3, #2
 801a06a:	b2da      	uxtb	r2, r3
 801a06c:	687b      	ldr	r3, [r7, #4]
 801a06e:	769a      	strb	r2, [r3, #26]
    }
  }
}
 801a070:	e7ff      	b.n	801a072 <tcp_receive+0xfd2>
 801a072:	bf00      	nop
 801a074:	3734      	adds	r7, #52	@ 0x34
 801a076:	46bd      	mov	sp, r7
 801a078:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a07a:	bf00      	nop
 801a07c:	2000c058 	.word	0x2000c058
 801a080:	2000c038 	.word	0x2000c038
 801a084:	2000c062 	.word	0x2000c062
 801a088:	080264b0 	.word	0x080264b0
 801a08c:	0802677c 	.word	0x0802677c
 801a090:	080264f4 	.word	0x080264f4

0801a094 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 801a094:	b480      	push	{r7}
 801a096:	b083      	sub	sp, #12
 801a098:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 801a09a:	4b17      	ldr	r3, [pc, #92]	@ (801a0f8 <tcp_getoptbyte+0x64>)
 801a09c:	681b      	ldr	r3, [r3, #0]
 801a09e:	2b00      	cmp	r3, #0
 801a0a0:	d005      	beq.n	801a0ae <tcp_getoptbyte+0x1a>
 801a0a2:	4b16      	ldr	r3, [pc, #88]	@ (801a0fc <tcp_getoptbyte+0x68>)
 801a0a4:	881a      	ldrh	r2, [r3, #0]
 801a0a6:	4b16      	ldr	r3, [pc, #88]	@ (801a100 <tcp_getoptbyte+0x6c>)
 801a0a8:	881b      	ldrh	r3, [r3, #0]
 801a0aa:	429a      	cmp	r2, r3
 801a0ac:	d20e      	bcs.n	801a0cc <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 801a0ae:	4b15      	ldr	r3, [pc, #84]	@ (801a104 <tcp_getoptbyte+0x70>)
 801a0b0:	681b      	ldr	r3, [r3, #0]
 801a0b2:	3314      	adds	r3, #20
 801a0b4:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 801a0b6:	4b11      	ldr	r3, [pc, #68]	@ (801a0fc <tcp_getoptbyte+0x68>)
 801a0b8:	881b      	ldrh	r3, [r3, #0]
 801a0ba:	1c5a      	adds	r2, r3, #1
 801a0bc:	b291      	uxth	r1, r2
 801a0be:	4a0f      	ldr	r2, [pc, #60]	@ (801a0fc <tcp_getoptbyte+0x68>)
 801a0c0:	8011      	strh	r1, [r2, #0]
 801a0c2:	461a      	mov	r2, r3
 801a0c4:	683b      	ldr	r3, [r7, #0]
 801a0c6:	4413      	add	r3, r2
 801a0c8:	781b      	ldrb	r3, [r3, #0]
 801a0ca:	e010      	b.n	801a0ee <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 801a0cc:	4b0b      	ldr	r3, [pc, #44]	@ (801a0fc <tcp_getoptbyte+0x68>)
 801a0ce:	881b      	ldrh	r3, [r3, #0]
 801a0d0:	1c5a      	adds	r2, r3, #1
 801a0d2:	b291      	uxth	r1, r2
 801a0d4:	4a09      	ldr	r2, [pc, #36]	@ (801a0fc <tcp_getoptbyte+0x68>)
 801a0d6:	8011      	strh	r1, [r2, #0]
 801a0d8:	b2da      	uxtb	r2, r3
 801a0da:	4b09      	ldr	r3, [pc, #36]	@ (801a100 <tcp_getoptbyte+0x6c>)
 801a0dc:	881b      	ldrh	r3, [r3, #0]
 801a0de:	b2db      	uxtb	r3, r3
 801a0e0:	1ad3      	subs	r3, r2, r3
 801a0e2:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 801a0e4:	4b04      	ldr	r3, [pc, #16]	@ (801a0f8 <tcp_getoptbyte+0x64>)
 801a0e6:	681a      	ldr	r2, [r3, #0]
 801a0e8:	79fb      	ldrb	r3, [r7, #7]
 801a0ea:	4413      	add	r3, r2
 801a0ec:	781b      	ldrb	r3, [r3, #0]
  }
}
 801a0ee:	4618      	mov	r0, r3
 801a0f0:	370c      	adds	r7, #12
 801a0f2:	46bd      	mov	sp, r7
 801a0f4:	bc80      	pop	{r7}
 801a0f6:	4770      	bx	lr
 801a0f8:	2000c050 	.word	0x2000c050
 801a0fc:	2000c054 	.word	0x2000c054
 801a100:	2000c04e 	.word	0x2000c04e
 801a104:	2000c048 	.word	0x2000c048

0801a108 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801a108:	b580      	push	{r7, lr}
 801a10a:	b084      	sub	sp, #16
 801a10c:	af00      	add	r7, sp, #0
 801a10e:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801a110:	4b2e      	ldr	r3, [pc, #184]	@ (801a1cc <tcp_parseopt+0xc4>)
 801a112:	881b      	ldrh	r3, [r3, #0]
 801a114:	2b00      	cmp	r3, #0
 801a116:	d056      	beq.n	801a1c6 <tcp_parseopt+0xbe>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a118:	4b2d      	ldr	r3, [pc, #180]	@ (801a1d0 <tcp_parseopt+0xc8>)
 801a11a:	2200      	movs	r2, #0
 801a11c:	801a      	strh	r2, [r3, #0]
 801a11e:	e046      	b.n	801a1ae <tcp_parseopt+0xa6>
      u8_t opt = tcp_getoptbyte();
 801a120:	f7ff ffb8 	bl	801a094 <tcp_getoptbyte>
 801a124:	4603      	mov	r3, r0
 801a126:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801a128:	7bfb      	ldrb	r3, [r7, #15]
 801a12a:	2b02      	cmp	r3, #2
 801a12c:	d006      	beq.n	801a13c <tcp_parseopt+0x34>
 801a12e:	2b02      	cmp	r3, #2
 801a130:	dc2a      	bgt.n	801a188 <tcp_parseopt+0x80>
 801a132:	2b00      	cmp	r3, #0
 801a134:	d042      	beq.n	801a1bc <tcp_parseopt+0xb4>
 801a136:	2b01      	cmp	r3, #1
 801a138:	d038      	beq.n	801a1ac <tcp_parseopt+0xa4>
 801a13a:	e025      	b.n	801a188 <tcp_parseopt+0x80>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801a13c:	f7ff ffaa 	bl	801a094 <tcp_getoptbyte>
 801a140:	4603      	mov	r3, r0
 801a142:	2b04      	cmp	r3, #4
 801a144:	d13c      	bne.n	801a1c0 <tcp_parseopt+0xb8>
 801a146:	4b22      	ldr	r3, [pc, #136]	@ (801a1d0 <tcp_parseopt+0xc8>)
 801a148:	881b      	ldrh	r3, [r3, #0]
 801a14a:	3301      	adds	r3, #1
 801a14c:	4a1f      	ldr	r2, [pc, #124]	@ (801a1cc <tcp_parseopt+0xc4>)
 801a14e:	8812      	ldrh	r2, [r2, #0]
 801a150:	4293      	cmp	r3, r2
 801a152:	da35      	bge.n	801a1c0 <tcp_parseopt+0xb8>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 801a154:	f7ff ff9e 	bl	801a094 <tcp_getoptbyte>
 801a158:	4603      	mov	r3, r0
 801a15a:	021b      	lsls	r3, r3, #8
 801a15c:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 801a15e:	f7ff ff99 	bl	801a094 <tcp_getoptbyte>
 801a162:	4603      	mov	r3, r0
 801a164:	461a      	mov	r2, r3
 801a166:	89bb      	ldrh	r3, [r7, #12]
 801a168:	4313      	orrs	r3, r2
 801a16a:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801a16c:	89bb      	ldrh	r3, [r7, #12]
 801a16e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801a172:	d804      	bhi.n	801a17e <tcp_parseopt+0x76>
 801a174:	89bb      	ldrh	r3, [r7, #12]
 801a176:	2b00      	cmp	r3, #0
 801a178:	d001      	beq.n	801a17e <tcp_parseopt+0x76>
 801a17a:	89ba      	ldrh	r2, [r7, #12]
 801a17c:	e001      	b.n	801a182 <tcp_parseopt+0x7a>
 801a17e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801a182:	687b      	ldr	r3, [r7, #4]
 801a184:	865a      	strh	r2, [r3, #50]	@ 0x32
        break;
 801a186:	e012      	b.n	801a1ae <tcp_parseopt+0xa6>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 801a188:	f7ff ff84 	bl	801a094 <tcp_getoptbyte>
 801a18c:	4603      	mov	r3, r0
 801a18e:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 801a190:	7afb      	ldrb	r3, [r7, #11]
 801a192:	2b01      	cmp	r3, #1
 801a194:	d916      	bls.n	801a1c4 <tcp_parseopt+0xbc>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 801a196:	7afb      	ldrb	r3, [r7, #11]
 801a198:	b29a      	uxth	r2, r3
 801a19a:	4b0d      	ldr	r3, [pc, #52]	@ (801a1d0 <tcp_parseopt+0xc8>)
 801a19c:	881b      	ldrh	r3, [r3, #0]
 801a19e:	4413      	add	r3, r2
 801a1a0:	b29b      	uxth	r3, r3
 801a1a2:	3b02      	subs	r3, #2
 801a1a4:	b29a      	uxth	r2, r3
 801a1a6:	4b0a      	ldr	r3, [pc, #40]	@ (801a1d0 <tcp_parseopt+0xc8>)
 801a1a8:	801a      	strh	r2, [r3, #0]
 801a1aa:	e000      	b.n	801a1ae <tcp_parseopt+0xa6>
        break;
 801a1ac:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a1ae:	4b08      	ldr	r3, [pc, #32]	@ (801a1d0 <tcp_parseopt+0xc8>)
 801a1b0:	881a      	ldrh	r2, [r3, #0]
 801a1b2:	4b06      	ldr	r3, [pc, #24]	@ (801a1cc <tcp_parseopt+0xc4>)
 801a1b4:	881b      	ldrh	r3, [r3, #0]
 801a1b6:	429a      	cmp	r2, r3
 801a1b8:	d3b2      	bcc.n	801a120 <tcp_parseopt+0x18>
 801a1ba:	e004      	b.n	801a1c6 <tcp_parseopt+0xbe>
        return;
 801a1bc:	bf00      	nop
 801a1be:	e002      	b.n	801a1c6 <tcp_parseopt+0xbe>
          return;
 801a1c0:	bf00      	nop
 801a1c2:	e000      	b.n	801a1c6 <tcp_parseopt+0xbe>
          return;
 801a1c4:	bf00      	nop
      }
    }
  }
}
 801a1c6:	3710      	adds	r7, #16
 801a1c8:	46bd      	mov	sp, r7
 801a1ca:	bd80      	pop	{r7, pc}
 801a1cc:	2000c04c 	.word	0x2000c04c
 801a1d0:	2000c054 	.word	0x2000c054

0801a1d4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801a1d4:	b480      	push	{r7}
 801a1d6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801a1d8:	4b05      	ldr	r3, [pc, #20]	@ (801a1f0 <tcp_trigger_input_pcb_close+0x1c>)
 801a1da:	781b      	ldrb	r3, [r3, #0]
 801a1dc:	f043 0310 	orr.w	r3, r3, #16
 801a1e0:	b2da      	uxtb	r2, r3
 801a1e2:	4b03      	ldr	r3, [pc, #12]	@ (801a1f0 <tcp_trigger_input_pcb_close+0x1c>)
 801a1e4:	701a      	strb	r2, [r3, #0]
}
 801a1e6:	bf00      	nop
 801a1e8:	46bd      	mov	sp, r7
 801a1ea:	bc80      	pop	{r7}
 801a1ec:	4770      	bx	lr
 801a1ee:	bf00      	nop
 801a1f0:	2000c065 	.word	0x2000c065

0801a1f4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 801a1f4:	b580      	push	{r7, lr}
 801a1f6:	b086      	sub	sp, #24
 801a1f8:	af00      	add	r7, sp, #0
 801a1fa:	60f8      	str	r0, [r7, #12]
 801a1fc:	607b      	str	r3, [r7, #4]
 801a1fe:	460b      	mov	r3, r1
 801a200:	817b      	strh	r3, [r7, #10]
 801a202:	4613      	mov	r3, r2
 801a204:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801a206:	897a      	ldrh	r2, [r7, #10]
 801a208:	893b      	ldrh	r3, [r7, #8]
 801a20a:	4413      	add	r3, r2
 801a20c:	b29b      	uxth	r3, r3
 801a20e:	3314      	adds	r3, #20
 801a210:	b29b      	uxth	r3, r3
 801a212:	2200      	movs	r2, #0
 801a214:	4619      	mov	r1, r3
 801a216:	2001      	movs	r0, #1
 801a218:	f7fb f9cc 	bl	80155b4 <pbuf_alloc>
 801a21c:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801a21e:	697b      	ldr	r3, [r7, #20]
 801a220:	2b00      	cmp	r3, #0
 801a222:	d056      	beq.n	801a2d2 <tcp_output_alloc_header+0xde>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801a224:	897b      	ldrh	r3, [r7, #10]
 801a226:	3313      	adds	r3, #19
 801a228:	697a      	ldr	r2, [r7, #20]
 801a22a:	8952      	ldrh	r2, [r2, #10]
 801a22c:	4293      	cmp	r3, r2
 801a22e:	db05      	blt.n	801a23c <tcp_output_alloc_header+0x48>
 801a230:	4b2a      	ldr	r3, [pc, #168]	@ (801a2dc <tcp_output_alloc_header+0xe8>)
 801a232:	2272      	movs	r2, #114	@ 0x72
 801a234:	492a      	ldr	r1, [pc, #168]	@ (801a2e0 <tcp_output_alloc_header+0xec>)
 801a236:	482b      	ldr	r0, [pc, #172]	@ (801a2e4 <tcp_output_alloc_header+0xf0>)
 801a238:	f007 fd26 	bl	8021c88 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801a23c:	697b      	ldr	r3, [r7, #20]
 801a23e:	685b      	ldr	r3, [r3, #4]
 801a240:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 801a242:	68fb      	ldr	r3, [r7, #12]
 801a244:	8adb      	ldrh	r3, [r3, #22]
 801a246:	4618      	mov	r0, r3
 801a248:	f7fa fad4 	bl	80147f4 <lwip_htons>
 801a24c:	4603      	mov	r3, r0
 801a24e:	461a      	mov	r2, r3
 801a250:	693b      	ldr	r3, [r7, #16]
 801a252:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 801a254:	68fb      	ldr	r3, [r7, #12]
 801a256:	8b1b      	ldrh	r3, [r3, #24]
 801a258:	4618      	mov	r0, r3
 801a25a:	f7fa facb 	bl	80147f4 <lwip_htons>
 801a25e:	4603      	mov	r3, r0
 801a260:	461a      	mov	r2, r3
 801a262:	693b      	ldr	r3, [r7, #16]
 801a264:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801a266:	693b      	ldr	r3, [r7, #16]
 801a268:	687a      	ldr	r2, [r7, #4]
 801a26a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801a26c:	68fb      	ldr	r3, [r7, #12]
 801a26e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a270:	4618      	mov	r0, r3
 801a272:	f7fa facc 	bl	801480e <lwip_htonl>
 801a276:	4602      	mov	r2, r0
 801a278:	693b      	ldr	r3, [r7, #16]
 801a27a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 801a27c:	897b      	ldrh	r3, [r7, #10]
 801a27e:	089b      	lsrs	r3, r3, #2
 801a280:	b29b      	uxth	r3, r3
 801a282:	3305      	adds	r3, #5
 801a284:	b29b      	uxth	r3, r3
 801a286:	031b      	lsls	r3, r3, #12
 801a288:	b29b      	uxth	r3, r3
 801a28a:	f043 0310 	orr.w	r3, r3, #16
 801a28e:	b29b      	uxth	r3, r3
 801a290:	4618      	mov	r0, r3
 801a292:	f7fa faaf 	bl	80147f4 <lwip_htons>
 801a296:	4603      	mov	r3, r0
 801a298:	461a      	mov	r2, r3
 801a29a:	693b      	ldr	r3, [r7, #16]
 801a29c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801a29e:	68fb      	ldr	r3, [r7, #12]
 801a2a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801a2a2:	4618      	mov	r0, r3
 801a2a4:	f7fa faa6 	bl	80147f4 <lwip_htons>
 801a2a8:	4603      	mov	r3, r0
 801a2aa:	461a      	mov	r2, r3
 801a2ac:	693b      	ldr	r3, [r7, #16]
 801a2ae:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801a2b0:	693b      	ldr	r3, [r7, #16]
 801a2b2:	2200      	movs	r2, #0
 801a2b4:	741a      	strb	r2, [r3, #16]
 801a2b6:	2200      	movs	r2, #0
 801a2b8:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801a2ba:	693b      	ldr	r3, [r7, #16]
 801a2bc:	2200      	movs	r2, #0
 801a2be:	749a      	strb	r2, [r3, #18]
 801a2c0:	2200      	movs	r2, #0
 801a2c2:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801a2c4:	68fb      	ldr	r3, [r7, #12]
 801a2c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a2c8:	68fa      	ldr	r2, [r7, #12]
 801a2ca:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801a2cc:	441a      	add	r2, r3
 801a2ce:	68fb      	ldr	r3, [r7, #12]
 801a2d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 801a2d2:	697b      	ldr	r3, [r7, #20]
}
 801a2d4:	4618      	mov	r0, r3
 801a2d6:	3718      	adds	r7, #24
 801a2d8:	46bd      	mov	sp, r7
 801a2da:	bd80      	pop	{r7, pc}
 801a2dc:	08026838 	.word	0x08026838
 801a2e0:	0802686c 	.word	0x0802686c
 801a2e4:	0802689c 	.word	0x0802689c

0801a2e8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801a2e8:	b590      	push	{r4, r7, lr}
 801a2ea:	b085      	sub	sp, #20
 801a2ec:	af00      	add	r7, sp, #0
 801a2ee:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801a2f0:	687b      	ldr	r3, [r7, #4]
 801a2f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801a2f4:	2b00      	cmp	r3, #0
 801a2f6:	d02d      	beq.n	801a354 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a2f8:	687b      	ldr	r3, [r7, #4]
 801a2fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801a2fc:	60fb      	str	r3, [r7, #12]
 801a2fe:	e002      	b.n	801a306 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 801a300:	68fb      	ldr	r3, [r7, #12]
 801a302:	681b      	ldr	r3, [r3, #0]
 801a304:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a306:	68fb      	ldr	r3, [r7, #12]
 801a308:	681b      	ldr	r3, [r3, #0]
 801a30a:	2b00      	cmp	r3, #0
 801a30c:	d1f8      	bne.n	801a300 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801a30e:	68fb      	ldr	r3, [r7, #12]
 801a310:	68db      	ldr	r3, [r3, #12]
 801a312:	899b      	ldrh	r3, [r3, #12]
 801a314:	b29b      	uxth	r3, r3
 801a316:	4618      	mov	r0, r3
 801a318:	f7fa fa6c 	bl	80147f4 <lwip_htons>
 801a31c:	4603      	mov	r3, r0
 801a31e:	f003 0307 	and.w	r3, r3, #7
 801a322:	2b00      	cmp	r3, #0
 801a324:	d116      	bne.n	801a354 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801a326:	68fb      	ldr	r3, [r7, #12]
 801a328:	68db      	ldr	r3, [r3, #12]
 801a32a:	899b      	ldrh	r3, [r3, #12]
 801a32c:	b29c      	uxth	r4, r3
 801a32e:	2001      	movs	r0, #1
 801a330:	f7fa fa60 	bl	80147f4 <lwip_htons>
 801a334:	4603      	mov	r3, r0
 801a336:	461a      	mov	r2, r3
 801a338:	68fb      	ldr	r3, [r7, #12]
 801a33a:	68db      	ldr	r3, [r3, #12]
 801a33c:	4322      	orrs	r2, r4
 801a33e:	b292      	uxth	r2, r2
 801a340:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 801a342:	687b      	ldr	r3, [r7, #4]
 801a344:	7e9b      	ldrb	r3, [r3, #26]
 801a346:	f043 0320 	orr.w	r3, r3, #32
 801a34a:	b2da      	uxtb	r2, r3
 801a34c:	687b      	ldr	r3, [r7, #4]
 801a34e:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 801a350:	2300      	movs	r3, #0
 801a352:	e004      	b.n	801a35e <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801a354:	2101      	movs	r1, #1
 801a356:	6878      	ldr	r0, [r7, #4]
 801a358:	f000 fcdc 	bl	801ad14 <tcp_enqueue_flags>
 801a35c:	4603      	mov	r3, r0
}
 801a35e:	4618      	mov	r0, r3
 801a360:	3714      	adds	r7, #20
 801a362:	46bd      	mov	sp, r7
 801a364:	bd90      	pop	{r4, r7, pc}
	...

0801a368 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 801a368:	b590      	push	{r4, r7, lr}
 801a36a:	b087      	sub	sp, #28
 801a36c:	af00      	add	r7, sp, #0
 801a36e:	60f8      	str	r0, [r7, #12]
 801a370:	60b9      	str	r1, [r7, #8]
 801a372:	603b      	str	r3, [r7, #0]
 801a374:	4613      	mov	r3, r2
 801a376:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801a378:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801a37c:	009b      	lsls	r3, r3, #2
 801a37e:	b2db      	uxtb	r3, r3
 801a380:	f003 0304 	and.w	r3, r3, #4
 801a384:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801a386:	2003      	movs	r0, #3
 801a388:	f7fa fede 	bl	8015148 <memp_malloc>
 801a38c:	6138      	str	r0, [r7, #16]
 801a38e:	693b      	ldr	r3, [r7, #16]
 801a390:	2b00      	cmp	r3, #0
 801a392:	d104      	bne.n	801a39e <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801a394:	68b8      	ldr	r0, [r7, #8]
 801a396:	f7fb fc85 	bl	8015ca4 <pbuf_free>
    return NULL;
 801a39a:	2300      	movs	r3, #0
 801a39c:	e068      	b.n	801a470 <tcp_create_segment+0x108>
  }
  seg->flags = optflags;
 801a39e:	693b      	ldr	r3, [r7, #16]
 801a3a0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801a3a4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801a3a6:	693b      	ldr	r3, [r7, #16]
 801a3a8:	2200      	movs	r2, #0
 801a3aa:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801a3ac:	693b      	ldr	r3, [r7, #16]
 801a3ae:	68ba      	ldr	r2, [r7, #8]
 801a3b0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801a3b2:	68bb      	ldr	r3, [r7, #8]
 801a3b4:	891a      	ldrh	r2, [r3, #8]
 801a3b6:	7dfb      	ldrb	r3, [r7, #23]
 801a3b8:	b29b      	uxth	r3, r3
 801a3ba:	429a      	cmp	r2, r3
 801a3bc:	d205      	bcs.n	801a3ca <tcp_create_segment+0x62>
 801a3be:	4b2e      	ldr	r3, [pc, #184]	@ (801a478 <tcp_create_segment+0x110>)
 801a3c0:	22ba      	movs	r2, #186	@ 0xba
 801a3c2:	492e      	ldr	r1, [pc, #184]	@ (801a47c <tcp_create_segment+0x114>)
 801a3c4:	482e      	ldr	r0, [pc, #184]	@ (801a480 <tcp_create_segment+0x118>)
 801a3c6:	f007 fc5f 	bl	8021c88 <iprintf>
  seg->len = p->tot_len - optlen;
 801a3ca:	68bb      	ldr	r3, [r7, #8]
 801a3cc:	891a      	ldrh	r2, [r3, #8]
 801a3ce:	7dfb      	ldrb	r3, [r7, #23]
 801a3d0:	b29b      	uxth	r3, r3
 801a3d2:	1ad3      	subs	r3, r2, r3
 801a3d4:	b29a      	uxth	r2, r3
 801a3d6:	693b      	ldr	r3, [r7, #16]
 801a3d8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 801a3da:	2114      	movs	r1, #20
 801a3dc:	68b8      	ldr	r0, [r7, #8]
 801a3de:	f7fb fc3d 	bl	8015c5c <pbuf_header>
 801a3e2:	4603      	mov	r3, r0
 801a3e4:	2b00      	cmp	r3, #0
 801a3e6:	d00c      	beq.n	801a402 <tcp_create_segment+0x9a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 801a3e8:	4b26      	ldr	r3, [pc, #152]	@ (801a484 <tcp_create_segment+0x11c>)
 801a3ea:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 801a3ee:	3301      	adds	r3, #1
 801a3f0:	b29a      	uxth	r2, r3
 801a3f2:	4b24      	ldr	r3, [pc, #144]	@ (801a484 <tcp_create_segment+0x11c>)
 801a3f4:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
    tcp_seg_free(seg);
 801a3f8:	6938      	ldr	r0, [r7, #16]
 801a3fa:	f7fd f887 	bl	801750c <tcp_seg_free>
    return NULL;
 801a3fe:	2300      	movs	r3, #0
 801a400:	e036      	b.n	801a470 <tcp_create_segment+0x108>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801a402:	693b      	ldr	r3, [r7, #16]
 801a404:	685b      	ldr	r3, [r3, #4]
 801a406:	685a      	ldr	r2, [r3, #4]
 801a408:	693b      	ldr	r3, [r7, #16]
 801a40a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801a40c:	68fb      	ldr	r3, [r7, #12]
 801a40e:	8ada      	ldrh	r2, [r3, #22]
 801a410:	693b      	ldr	r3, [r7, #16]
 801a412:	68dc      	ldr	r4, [r3, #12]
 801a414:	4610      	mov	r0, r2
 801a416:	f7fa f9ed 	bl	80147f4 <lwip_htons>
 801a41a:	4603      	mov	r3, r0
 801a41c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801a41e:	68fb      	ldr	r3, [r7, #12]
 801a420:	8b1a      	ldrh	r2, [r3, #24]
 801a422:	693b      	ldr	r3, [r7, #16]
 801a424:	68dc      	ldr	r4, [r3, #12]
 801a426:	4610      	mov	r0, r2
 801a428:	f7fa f9e4 	bl	80147f4 <lwip_htons>
 801a42c:	4603      	mov	r3, r0
 801a42e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801a430:	693b      	ldr	r3, [r7, #16]
 801a432:	68dc      	ldr	r4, [r3, #12]
 801a434:	6838      	ldr	r0, [r7, #0]
 801a436:	f7fa f9ea 	bl	801480e <lwip_htonl>
 801a43a:	4603      	mov	r3, r0
 801a43c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 801a43e:	7dfb      	ldrb	r3, [r7, #23]
 801a440:	089b      	lsrs	r3, r3, #2
 801a442:	b2db      	uxtb	r3, r3
 801a444:	3305      	adds	r3, #5
 801a446:	b29b      	uxth	r3, r3
 801a448:	031b      	lsls	r3, r3, #12
 801a44a:	b29a      	uxth	r2, r3
 801a44c:	79fb      	ldrb	r3, [r7, #7]
 801a44e:	b29b      	uxth	r3, r3
 801a450:	4313      	orrs	r3, r2
 801a452:	b29a      	uxth	r2, r3
 801a454:	693b      	ldr	r3, [r7, #16]
 801a456:	68dc      	ldr	r4, [r3, #12]
 801a458:	4610      	mov	r0, r2
 801a45a:	f7fa f9cb 	bl	80147f4 <lwip_htons>
 801a45e:	4603      	mov	r3, r0
 801a460:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801a462:	693b      	ldr	r3, [r7, #16]
 801a464:	68db      	ldr	r3, [r3, #12]
 801a466:	2200      	movs	r2, #0
 801a468:	749a      	strb	r2, [r3, #18]
 801a46a:	2200      	movs	r2, #0
 801a46c:	74da      	strb	r2, [r3, #19]
  return seg;
 801a46e:	693b      	ldr	r3, [r7, #16]
}
 801a470:	4618      	mov	r0, r3
 801a472:	371c      	adds	r7, #28
 801a474:	46bd      	mov	sp, r7
 801a476:	bd90      	pop	{r4, r7, pc}
 801a478:	08026838 	.word	0x08026838
 801a47c:	080268c4 	.word	0x080268c4
 801a480:	0802689c 	.word	0x0802689c
 801a484:	2000be88 	.word	0x2000be88

0801a488 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801a488:	b580      	push	{r7, lr}
 801a48a:	b086      	sub	sp, #24
 801a48c:	af00      	add	r7, sp, #0
 801a48e:	607b      	str	r3, [r7, #4]
 801a490:	4603      	mov	r3, r0
 801a492:	73fb      	strb	r3, [r7, #15]
 801a494:	460b      	mov	r3, r1
 801a496:	81bb      	strh	r3, [r7, #12]
 801a498:	4613      	mov	r3, r2
 801a49a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801a49c:	89bb      	ldrh	r3, [r7, #12]
 801a49e:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801a4a0:	89ba      	ldrh	r2, [r7, #12]
 801a4a2:	897b      	ldrh	r3, [r7, #10]
 801a4a4:	429a      	cmp	r2, r3
 801a4a6:	d221      	bcs.n	801a4ec <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801a4a8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801a4ac:	f003 0302 	and.w	r3, r3, #2
 801a4b0:	2b00      	cmp	r3, #0
 801a4b2:	d111      	bne.n	801a4d8 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 801a4b4:	6a3b      	ldr	r3, [r7, #32]
 801a4b6:	7e9b      	ldrb	r3, [r3, #26]
 801a4b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	d115      	bne.n	801a4ec <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 801a4c0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801a4c4:	2b00      	cmp	r3, #0
 801a4c6:	d007      	beq.n	801a4d8 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 801a4c8:	6a3b      	ldr	r3, [r7, #32]
 801a4ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
         (!first_seg ||
 801a4cc:	2b00      	cmp	r3, #0
 801a4ce:	d103      	bne.n	801a4d8 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 801a4d0:	6a3b      	ldr	r3, [r7, #32]
 801a4d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
          pcb->unsent != NULL ||
 801a4d4:	2b00      	cmp	r3, #0
 801a4d6:	d009      	beq.n	801a4ec <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801a4d8:	89bb      	ldrh	r3, [r7, #12]
 801a4da:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 801a4de:	f023 0203 	bic.w	r2, r3, #3
 801a4e2:	897b      	ldrh	r3, [r7, #10]
 801a4e4:	4293      	cmp	r3, r2
 801a4e6:	bf28      	it	cs
 801a4e8:	4613      	movcs	r3, r2
 801a4ea:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801a4ec:	8af9      	ldrh	r1, [r7, #22]
 801a4ee:	7bfb      	ldrb	r3, [r7, #15]
 801a4f0:	2200      	movs	r2, #0
 801a4f2:	4618      	mov	r0, r3
 801a4f4:	f7fb f85e 	bl	80155b4 <pbuf_alloc>
 801a4f8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a4fa:	693b      	ldr	r3, [r7, #16]
 801a4fc:	2b00      	cmp	r3, #0
 801a4fe:	d101      	bne.n	801a504 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 801a500:	2300      	movs	r3, #0
 801a502:	e019      	b.n	801a538 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801a504:	693b      	ldr	r3, [r7, #16]
 801a506:	681b      	ldr	r3, [r3, #0]
 801a508:	2b00      	cmp	r3, #0
 801a50a:	d006      	beq.n	801a51a <tcp_pbuf_prealloc+0x92>
 801a50c:	4b0c      	ldr	r3, [pc, #48]	@ (801a540 <tcp_pbuf_prealloc+0xb8>)
 801a50e:	f44f 7288 	mov.w	r2, #272	@ 0x110
 801a512:	490c      	ldr	r1, [pc, #48]	@ (801a544 <tcp_pbuf_prealloc+0xbc>)
 801a514:	480c      	ldr	r0, [pc, #48]	@ (801a548 <tcp_pbuf_prealloc+0xc0>)
 801a516:	f007 fbb7 	bl	8021c88 <iprintf>
  *oversize = p->len - length;
 801a51a:	693b      	ldr	r3, [r7, #16]
 801a51c:	895a      	ldrh	r2, [r3, #10]
 801a51e:	89bb      	ldrh	r3, [r7, #12]
 801a520:	1ad3      	subs	r3, r2, r3
 801a522:	b29a      	uxth	r2, r3
 801a524:	687b      	ldr	r3, [r7, #4]
 801a526:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801a528:	693b      	ldr	r3, [r7, #16]
 801a52a:	89ba      	ldrh	r2, [r7, #12]
 801a52c:	811a      	strh	r2, [r3, #8]
 801a52e:	693b      	ldr	r3, [r7, #16]
 801a530:	891a      	ldrh	r2, [r3, #8]
 801a532:	693b      	ldr	r3, [r7, #16]
 801a534:	815a      	strh	r2, [r3, #10]
  return p;
 801a536:	693b      	ldr	r3, [r7, #16]
}
 801a538:	4618      	mov	r0, r3
 801a53a:	3718      	adds	r7, #24
 801a53c:	46bd      	mov	sp, r7
 801a53e:	bd80      	pop	{r7, pc}
 801a540:	08026838 	.word	0x08026838
 801a544:	080268dc 	.word	0x080268dc
 801a548:	0802689c 	.word	0x0802689c

0801a54c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801a54c:	b580      	push	{r7, lr}
 801a54e:	b082      	sub	sp, #8
 801a550:	af00      	add	r7, sp, #0
 801a552:	6078      	str	r0, [r7, #4]
 801a554:	460b      	mov	r3, r1
 801a556:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801a558:	687b      	ldr	r3, [r7, #4]
 801a55a:	7d1b      	ldrb	r3, [r3, #20]
 801a55c:	2b04      	cmp	r3, #4
 801a55e:	d00e      	beq.n	801a57e <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 801a560:	687b      	ldr	r3, [r7, #4]
 801a562:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801a564:	2b07      	cmp	r3, #7
 801a566:	d00a      	beq.n	801a57e <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 801a568:	687b      	ldr	r3, [r7, #4]
 801a56a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801a56c:	2b02      	cmp	r3, #2
 801a56e:	d006      	beq.n	801a57e <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 801a570:	687b      	ldr	r3, [r7, #4]
 801a572:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801a574:	2b03      	cmp	r3, #3
 801a576:	d002      	beq.n	801a57e <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801a578:	f06f 030a 	mvn.w	r3, #10
 801a57c:	e057      	b.n	801a62e <tcp_write_checks+0xe2>
  } else if (len == 0) {
 801a57e:	887b      	ldrh	r3, [r7, #2]
 801a580:	2b00      	cmp	r3, #0
 801a582:	d101      	bne.n	801a588 <tcp_write_checks+0x3c>
    return ERR_OK;
 801a584:	2300      	movs	r3, #0
 801a586:	e052      	b.n	801a62e <tcp_write_checks+0xe2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801a588:	687b      	ldr	r3, [r7, #4]
 801a58a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a58e:	887a      	ldrh	r2, [r7, #2]
 801a590:	429a      	cmp	r2, r3
 801a592:	d909      	bls.n	801a5a8 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 801a594:	687b      	ldr	r3, [r7, #4]
 801a596:	7e9b      	ldrb	r3, [r3, #26]
 801a598:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801a59c:	b2da      	uxtb	r2, r3
 801a59e:	687b      	ldr	r3, [r7, #4]
 801a5a0:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 801a5a2:	f04f 33ff 	mov.w	r3, #4294967295
 801a5a6:	e042      	b.n	801a62e <tcp_write_checks+0xe2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 801a5a8:	687b      	ldr	r3, [r7, #4]
 801a5aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801a5ae:	2b03      	cmp	r3, #3
 801a5b0:	d806      	bhi.n	801a5c0 <tcp_write_checks+0x74>
 801a5b2:	687b      	ldr	r3, [r7, #4]
 801a5b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801a5b8:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 801a5bc:	4293      	cmp	r3, r2
 801a5be:	d911      	bls.n	801a5e4 <tcp_write_checks+0x98>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 801a5c0:	4b1d      	ldr	r3, [pc, #116]	@ (801a638 <tcp_write_checks+0xec>)
 801a5c2:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801a5c6:	3301      	adds	r3, #1
 801a5c8:	b29a      	uxth	r2, r3
 801a5ca:	4b1b      	ldr	r3, [pc, #108]	@ (801a638 <tcp_write_checks+0xec>)
 801a5cc:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    pcb->flags |= TF_NAGLEMEMERR;
 801a5d0:	687b      	ldr	r3, [r7, #4]
 801a5d2:	7e9b      	ldrb	r3, [r3, #26]
 801a5d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801a5d8:	b2da      	uxtb	r2, r3
 801a5da:	687b      	ldr	r3, [r7, #4]
 801a5dc:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 801a5de:	f04f 33ff 	mov.w	r3, #4294967295
 801a5e2:	e024      	b.n	801a62e <tcp_write_checks+0xe2>
  }
  if (pcb->snd_queuelen != 0) {
 801a5e4:	687b      	ldr	r3, [r7, #4]
 801a5e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801a5ea:	2b00      	cmp	r3, #0
 801a5ec:	d00f      	beq.n	801a60e <tcp_write_checks+0xc2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801a5ee:	687b      	ldr	r3, [r7, #4]
 801a5f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a5f2:	2b00      	cmp	r3, #0
 801a5f4:	d11a      	bne.n	801a62c <tcp_write_checks+0xe0>
 801a5f6:	687b      	ldr	r3, [r7, #4]
 801a5f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801a5fa:	2b00      	cmp	r3, #0
 801a5fc:	d116      	bne.n	801a62c <tcp_write_checks+0xe0>
 801a5fe:	4b0f      	ldr	r3, [pc, #60]	@ (801a63c <tcp_write_checks+0xf0>)
 801a600:	f240 1255 	movw	r2, #341	@ 0x155
 801a604:	490e      	ldr	r1, [pc, #56]	@ (801a640 <tcp_write_checks+0xf4>)
 801a606:	480f      	ldr	r0, [pc, #60]	@ (801a644 <tcp_write_checks+0xf8>)
 801a608:	f007 fb3e 	bl	8021c88 <iprintf>
 801a60c:	e00e      	b.n	801a62c <tcp_write_checks+0xe0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801a60e:	687b      	ldr	r3, [r7, #4]
 801a610:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a612:	2b00      	cmp	r3, #0
 801a614:	d103      	bne.n	801a61e <tcp_write_checks+0xd2>
 801a616:	687b      	ldr	r3, [r7, #4]
 801a618:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801a61a:	2b00      	cmp	r3, #0
 801a61c:	d006      	beq.n	801a62c <tcp_write_checks+0xe0>
 801a61e:	4b07      	ldr	r3, [pc, #28]	@ (801a63c <tcp_write_checks+0xf0>)
 801a620:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 801a624:	4908      	ldr	r1, [pc, #32]	@ (801a648 <tcp_write_checks+0xfc>)
 801a626:	4807      	ldr	r0, [pc, #28]	@ (801a644 <tcp_write_checks+0xf8>)
 801a628:	f007 fb2e 	bl	8021c88 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801a62c:	2300      	movs	r3, #0
}
 801a62e:	4618      	mov	r0, r3
 801a630:	3708      	adds	r7, #8
 801a632:	46bd      	mov	sp, r7
 801a634:	bd80      	pop	{r7, pc}
 801a636:	bf00      	nop
 801a638:	2000be88 	.word	0x2000be88
 801a63c:	08026838 	.word	0x08026838
 801a640:	080268f0 	.word	0x080268f0
 801a644:	0802689c 	.word	0x0802689c
 801a648:	0802692c 	.word	0x0802692c

0801a64c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801a64c:	b590      	push	{r4, r7, lr}
 801a64e:	b09b      	sub	sp, #108	@ 0x6c
 801a650:	af04      	add	r7, sp, #16
 801a652:	60f8      	str	r0, [r7, #12]
 801a654:	60b9      	str	r1, [r7, #8]
 801a656:	4611      	mov	r1, r2
 801a658:	461a      	mov	r2, r3
 801a65a:	460b      	mov	r3, r1
 801a65c:	80fb      	strh	r3, [r7, #6]
 801a65e:	4613      	mov	r3, r2
 801a660:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801a662:	2300      	movs	r3, #0
 801a664:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801a666:	2300      	movs	r3, #0
 801a668:	653b      	str	r3, [r7, #80]	@ 0x50
 801a66a:	2300      	movs	r3, #0
 801a66c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801a66e:	2300      	movs	r3, #0
 801a670:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a672:	2300      	movs	r3, #0
 801a674:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801a676:	2300      	movs	r3, #0
 801a678:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 801a67c:	2300      	movs	r3, #0
 801a67e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  u8_t optflags = 0;
 801a682:	2300      	movs	r3, #0
 801a684:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801a688:	2300      	movs	r3, #0
 801a68a:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801a68c:	2300      	movs	r3, #0
 801a68e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801a690:	2300      	movs	r3, #0
 801a692:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 801a694:	68fb      	ldr	r3, [r7, #12]
 801a696:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a69a:	085b      	lsrs	r3, r3, #1
 801a69c:	b29a      	uxth	r2, r3
 801a69e:	68fb      	ldr	r3, [r7, #12]
 801a6a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801a6a2:	4293      	cmp	r3, r2
 801a6a4:	bf28      	it	cs
 801a6a6:	4613      	movcs	r3, r2
 801a6a8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801a6aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a6ac:	2b00      	cmp	r3, #0
 801a6ae:	d102      	bne.n	801a6b6 <tcp_write+0x6a>
 801a6b0:	68fb      	ldr	r3, [r7, #12]
 801a6b2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801a6b4:	e000      	b.n	801a6b8 <tcp_write+0x6c>
 801a6b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a6b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801a6ba:	68bb      	ldr	r3, [r7, #8]
 801a6bc:	2b00      	cmp	r3, #0
 801a6be:	d109      	bne.n	801a6d4 <tcp_write+0x88>
 801a6c0:	4b92      	ldr	r3, [pc, #584]	@ (801a90c <tcp_write+0x2c0>)
 801a6c2:	f240 1291 	movw	r2, #401	@ 0x191
 801a6c6:	4992      	ldr	r1, [pc, #584]	@ (801a910 <tcp_write+0x2c4>)
 801a6c8:	4892      	ldr	r0, [pc, #584]	@ (801a914 <tcp_write+0x2c8>)
 801a6ca:	f007 fadd 	bl	8021c88 <iprintf>
 801a6ce:	f06f 030f 	mvn.w	r3, #15
 801a6d2:	e312      	b.n	801acfa <tcp_write+0x6ae>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801a6d4:	88fb      	ldrh	r3, [r7, #6]
 801a6d6:	4619      	mov	r1, r3
 801a6d8:	68f8      	ldr	r0, [r7, #12]
 801a6da:	f7ff ff37 	bl	801a54c <tcp_write_checks>
 801a6de:	4603      	mov	r3, r0
 801a6e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 801a6e4:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 801a6e8:	2b00      	cmp	r3, #0
 801a6ea:	d002      	beq.n	801a6f2 <tcp_write+0xa6>
    return err;
 801a6ec:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 801a6f0:	e303      	b.n	801acfa <tcp_write+0x6ae>
  }
  queuelen = pcb->snd_queuelen;
 801a6f2:	68fb      	ldr	r3, [r7, #12]
 801a6f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801a6f8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801a6fc:	68fb      	ldr	r3, [r7, #12]
 801a6fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801a700:	2b00      	cmp	r3, #0
 801a702:	f000 80f4 	beq.w	801a8ee <tcp_write+0x2a2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a706:	68fb      	ldr	r3, [r7, #12]
 801a708:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801a70a:	653b      	str	r3, [r7, #80]	@ 0x50
 801a70c:	e002      	b.n	801a714 <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 801a70e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a710:	681b      	ldr	r3, [r3, #0]
 801a712:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a714:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a716:	681b      	ldr	r3, [r3, #0]
 801a718:	2b00      	cmp	r3, #0
 801a71a:	d1f8      	bne.n	801a70e <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 801a71c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a71e:	7a9b      	ldrb	r3, [r3, #10]
 801a720:	009b      	lsls	r3, r3, #2
 801a722:	b29b      	uxth	r3, r3
 801a724:	f003 0304 	and.w	r3, r3, #4
 801a728:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801a72a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801a72c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a72e:	891b      	ldrh	r3, [r3, #8]
 801a730:	4619      	mov	r1, r3
 801a732:	8c3b      	ldrh	r3, [r7, #32]
 801a734:	440b      	add	r3, r1
 801a736:	429a      	cmp	r2, r3
 801a738:	da06      	bge.n	801a748 <tcp_write+0xfc>
 801a73a:	4b74      	ldr	r3, [pc, #464]	@ (801a90c <tcp_write+0x2c0>)
 801a73c:	f240 12c7 	movw	r2, #455	@ 0x1c7
 801a740:	4975      	ldr	r1, [pc, #468]	@ (801a918 <tcp_write+0x2cc>)
 801a742:	4874      	ldr	r0, [pc, #464]	@ (801a914 <tcp_write+0x2c8>)
 801a744:	f007 faa0 	bl	8021c88 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801a748:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a74a:	891a      	ldrh	r2, [r3, #8]
 801a74c:	8c3b      	ldrh	r3, [r7, #32]
 801a74e:	4413      	add	r3, r2
 801a750:	b29b      	uxth	r3, r3
 801a752:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801a754:	1ad3      	subs	r3, r2, r3
 801a756:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801a758:	68fb      	ldr	r3, [r7, #12]
 801a75a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801a75e:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801a760:	8a7b      	ldrh	r3, [r7, #18]
 801a762:	2b00      	cmp	r3, #0
 801a764:	d026      	beq.n	801a7b4 <tcp_write+0x168>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801a766:	8a7b      	ldrh	r3, [r7, #18]
 801a768:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a76a:	429a      	cmp	r2, r3
 801a76c:	d206      	bcs.n	801a77c <tcp_write+0x130>
 801a76e:	4b67      	ldr	r3, [pc, #412]	@ (801a90c <tcp_write+0x2c0>)
 801a770:	f240 12d9 	movw	r2, #473	@ 0x1d9
 801a774:	4969      	ldr	r1, [pc, #420]	@ (801a91c <tcp_write+0x2d0>)
 801a776:	4867      	ldr	r0, [pc, #412]	@ (801a914 <tcp_write+0x2c8>)
 801a778:	f007 fa86 	bl	8021c88 <iprintf>
      seg = last_unsent;
 801a77c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a77e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801a780:	8a7b      	ldrh	r3, [r7, #18]
 801a782:	88fa      	ldrh	r2, [r7, #6]
 801a784:	4293      	cmp	r3, r2
 801a786:	bf28      	it	cs
 801a788:	4613      	movcs	r3, r2
 801a78a:	b29b      	uxth	r3, r3
 801a78c:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a78e:	4293      	cmp	r3, r2
 801a790:	bf28      	it	cs
 801a792:	4613      	movcs	r3, r2
 801a794:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 801a796:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801a79a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a79c:	4413      	add	r3, r2
 801a79e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 801a7a2:	8a7a      	ldrh	r2, [r7, #18]
 801a7a4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a7a6:	1ad3      	subs	r3, r2, r3
 801a7a8:	b29b      	uxth	r3, r3
 801a7aa:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801a7ac:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a7ae:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a7b0:	1ad3      	subs	r3, r2, r3
 801a7b2:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801a7b4:	8a7b      	ldrh	r3, [r7, #18]
 801a7b6:	2b00      	cmp	r3, #0
 801a7b8:	d00b      	beq.n	801a7d2 <tcp_write+0x186>
 801a7ba:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801a7be:	88fb      	ldrh	r3, [r7, #6]
 801a7c0:	429a      	cmp	r2, r3
 801a7c2:	d006      	beq.n	801a7d2 <tcp_write+0x186>
 801a7c4:	4b51      	ldr	r3, [pc, #324]	@ (801a90c <tcp_write+0x2c0>)
 801a7c6:	f240 12e1 	movw	r2, #481	@ 0x1e1
 801a7ca:	4955      	ldr	r1, [pc, #340]	@ (801a920 <tcp_write+0x2d4>)
 801a7cc:	4851      	ldr	r0, [pc, #324]	@ (801a914 <tcp_write+0x2c8>)
 801a7ce:	f007 fa5b 	bl	8021c88 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801a7d2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801a7d6:	88fb      	ldrh	r3, [r7, #6]
 801a7d8:	429a      	cmp	r2, r3
 801a7da:	f080 8169 	bcs.w	801aab0 <tcp_write+0x464>
 801a7de:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a7e0:	2b00      	cmp	r3, #0
 801a7e2:	f000 8165 	beq.w	801aab0 <tcp_write+0x464>
 801a7e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a7e8:	891b      	ldrh	r3, [r3, #8]
 801a7ea:	2b00      	cmp	r3, #0
 801a7ec:	f000 8160 	beq.w	801aab0 <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801a7f0:	88fa      	ldrh	r2, [r7, #6]
 801a7f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801a7f6:	1ad2      	subs	r2, r2, r3
 801a7f8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a7fa:	4293      	cmp	r3, r2
 801a7fc:	bfa8      	it	ge
 801a7fe:	4613      	movge	r3, r2
 801a800:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801a802:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a804:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801a806:	797b      	ldrb	r3, [r7, #5]
 801a808:	f003 0301 	and.w	r3, r3, #1
 801a80c:	2b00      	cmp	r3, #0
 801a80e:	d027      	beq.n	801a860 <tcp_write+0x214>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801a810:	f107 0012 	add.w	r0, r7, #18
 801a814:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a816:	8bf9      	ldrh	r1, [r7, #30]
 801a818:	2301      	movs	r3, #1
 801a81a:	9302      	str	r3, [sp, #8]
 801a81c:	797b      	ldrb	r3, [r7, #5]
 801a81e:	9301      	str	r3, [sp, #4]
 801a820:	68fb      	ldr	r3, [r7, #12]
 801a822:	9300      	str	r3, [sp, #0]
 801a824:	4603      	mov	r3, r0
 801a826:	2004      	movs	r0, #4
 801a828:	f7ff fe2e 	bl	801a488 <tcp_pbuf_prealloc>
 801a82c:	6578      	str	r0, [r7, #84]	@ 0x54
 801a82e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a830:	2b00      	cmp	r3, #0
 801a832:	f000 8228 	beq.w	801ac86 <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801a836:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a838:	6858      	ldr	r0, [r3, #4]
 801a83a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801a83e:	68ba      	ldr	r2, [r7, #8]
 801a840:	4413      	add	r3, r2
 801a842:	8bfa      	ldrh	r2, [r7, #30]
 801a844:	4619      	mov	r1, r3
 801a846:	f007 fd1a 	bl	802227e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801a84a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801a84c:	f7fb fabe 	bl	8015dcc <pbuf_clen>
 801a850:	4603      	mov	r3, r0
 801a852:	461a      	mov	r2, r3
 801a854:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801a858:	4413      	add	r3, r2
 801a85a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 801a85e:	e03f      	b.n	801a8e0 <tcp_write+0x294>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801a860:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a862:	685b      	ldr	r3, [r3, #4]
 801a864:	637b      	str	r3, [r7, #52]	@ 0x34
 801a866:	e002      	b.n	801a86e <tcp_write+0x222>
 801a868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a86a:	681b      	ldr	r3, [r3, #0]
 801a86c:	637b      	str	r3, [r7, #52]	@ 0x34
 801a86e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a870:	681b      	ldr	r3, [r3, #0]
 801a872:	2b00      	cmp	r3, #0
 801a874:	d1f8      	bne.n	801a868 <tcp_write+0x21c>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801a876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a878:	7b1b      	ldrb	r3, [r3, #12]
 801a87a:	2b01      	cmp	r3, #1
 801a87c:	d115      	bne.n	801a8aa <tcp_write+0x25e>
 801a87e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a880:	685b      	ldr	r3, [r3, #4]
 801a882:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a884:	8952      	ldrh	r2, [r2, #10]
 801a886:	4413      	add	r3, r2
 801a888:	68ba      	ldr	r2, [r7, #8]
 801a88a:	429a      	cmp	r2, r3
 801a88c:	d10d      	bne.n	801a8aa <tcp_write+0x25e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801a88e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801a892:	2b00      	cmp	r3, #0
 801a894:	d006      	beq.n	801a8a4 <tcp_write+0x258>
 801a896:	4b1d      	ldr	r3, [pc, #116]	@ (801a90c <tcp_write+0x2c0>)
 801a898:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 801a89c:	4921      	ldr	r1, [pc, #132]	@ (801a924 <tcp_write+0x2d8>)
 801a89e:	481d      	ldr	r0, [pc, #116]	@ (801a914 <tcp_write+0x2c8>)
 801a8a0:	f007 f9f2 	bl	8021c88 <iprintf>
          extendlen = seglen;
 801a8a4:	8bfb      	ldrh	r3, [r7, #30]
 801a8a6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 801a8a8:	e01a      	b.n	801a8e0 <tcp_write+0x294>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801a8aa:	8bfb      	ldrh	r3, [r7, #30]
 801a8ac:	2201      	movs	r2, #1
 801a8ae:	4619      	mov	r1, r3
 801a8b0:	2004      	movs	r0, #4
 801a8b2:	f7fa fe7f 	bl	80155b4 <pbuf_alloc>
 801a8b6:	6578      	str	r0, [r7, #84]	@ 0x54
 801a8b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a8ba:	2b00      	cmp	r3, #0
 801a8bc:	f000 81e5 	beq.w	801ac8a <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 801a8c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801a8c4:	68ba      	ldr	r2, [r7, #8]
 801a8c6:	441a      	add	r2, r3
 801a8c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a8ca:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801a8cc:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801a8ce:	f7fb fa7d 	bl	8015dcc <pbuf_clen>
 801a8d2:	4603      	mov	r3, r0
 801a8d4:	461a      	mov	r2, r3
 801a8d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801a8da:	4413      	add	r3, r2
 801a8dc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801a8e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801a8e4:	8bfb      	ldrh	r3, [r7, #30]
 801a8e6:	4413      	add	r3, r2
 801a8e8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 801a8ec:	e0e0      	b.n	801aab0 <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801a8ee:	68fb      	ldr	r3, [r7, #12]
 801a8f0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801a8f4:	2b00      	cmp	r3, #0
 801a8f6:	f000 80db 	beq.w	801aab0 <tcp_write+0x464>
 801a8fa:	4b04      	ldr	r3, [pc, #16]	@ (801a90c <tcp_write+0x2c0>)
 801a8fc:	f44f 7209 	mov.w	r2, #548	@ 0x224
 801a900:	4909      	ldr	r1, [pc, #36]	@ (801a928 <tcp_write+0x2dc>)
 801a902:	4804      	ldr	r0, [pc, #16]	@ (801a914 <tcp_write+0x2c8>)
 801a904:	f007 f9c0 	bl	8021c88 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801a908:	e0d2      	b.n	801aab0 <tcp_write+0x464>
 801a90a:	bf00      	nop
 801a90c:	08026838 	.word	0x08026838
 801a910:	08026960 	.word	0x08026960
 801a914:	0802689c 	.word	0x0802689c
 801a918:	08026994 	.word	0x08026994
 801a91c:	080269ac 	.word	0x080269ac
 801a920:	080269cc 	.word	0x080269cc
 801a924:	080269ec 	.word	0x080269ec
 801a928:	08026a18 	.word	0x08026a18
    struct pbuf *p;
    u16_t left = len - pos;
 801a92c:	88fa      	ldrh	r2, [r7, #6]
 801a92e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801a932:	1ad3      	subs	r3, r2, r3
 801a934:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801a936:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a93a:	b29b      	uxth	r3, r3
 801a93c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801a93e:	1ad3      	subs	r3, r2, r3
 801a940:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801a942:	8b7a      	ldrh	r2, [r7, #26]
 801a944:	8bbb      	ldrh	r3, [r7, #28]
 801a946:	4293      	cmp	r3, r2
 801a948:	bf28      	it	cs
 801a94a:	4613      	movcs	r3, r2
 801a94c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801a94e:	797b      	ldrb	r3, [r7, #5]
 801a950:	f003 0301 	and.w	r3, r3, #1
 801a954:	2b00      	cmp	r3, #0
 801a956:	d036      	beq.n	801a9c6 <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801a958:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a95c:	b29a      	uxth	r2, r3
 801a95e:	8b3b      	ldrh	r3, [r7, #24]
 801a960:	4413      	add	r3, r2
 801a962:	b299      	uxth	r1, r3
 801a964:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a966:	2b00      	cmp	r3, #0
 801a968:	bf0c      	ite	eq
 801a96a:	2301      	moveq	r3, #1
 801a96c:	2300      	movne	r3, #0
 801a96e:	b2db      	uxtb	r3, r3
 801a970:	f107 0012 	add.w	r0, r7, #18
 801a974:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801a976:	9302      	str	r3, [sp, #8]
 801a978:	797b      	ldrb	r3, [r7, #5]
 801a97a:	9301      	str	r3, [sp, #4]
 801a97c:	68fb      	ldr	r3, [r7, #12]
 801a97e:	9300      	str	r3, [sp, #0]
 801a980:	4603      	mov	r3, r0
 801a982:	2000      	movs	r0, #0
 801a984:	f7ff fd80 	bl	801a488 <tcp_pbuf_prealloc>
 801a988:	6338      	str	r0, [r7, #48]	@ 0x30
 801a98a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a98c:	2b00      	cmp	r3, #0
 801a98e:	f000 817e 	beq.w	801ac8e <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801a992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a994:	895b      	ldrh	r3, [r3, #10]
 801a996:	8b3a      	ldrh	r2, [r7, #24]
 801a998:	429a      	cmp	r2, r3
 801a99a:	d906      	bls.n	801a9aa <tcp_write+0x35e>
 801a99c:	4b8f      	ldr	r3, [pc, #572]	@ (801abdc <tcp_write+0x590>)
 801a99e:	f44f 7210 	mov.w	r2, #576	@ 0x240
 801a9a2:	498f      	ldr	r1, [pc, #572]	@ (801abe0 <tcp_write+0x594>)
 801a9a4:	488f      	ldr	r0, [pc, #572]	@ (801abe4 <tcp_write+0x598>)
 801a9a6:	f007 f96f 	bl	8021c88 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 801a9aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a9ac:	685a      	ldr	r2, [r3, #4]
 801a9ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a9b2:	18d0      	adds	r0, r2, r3
 801a9b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801a9b8:	68ba      	ldr	r2, [r7, #8]
 801a9ba:	4413      	add	r3, r2
 801a9bc:	8b3a      	ldrh	r2, [r7, #24]
 801a9be:	4619      	mov	r1, r3
 801a9c0:	f007 fc5d 	bl	802227e <memcpy>
 801a9c4:	e02e      	b.n	801aa24 <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801a9c6:	8a7b      	ldrh	r3, [r7, #18]
 801a9c8:	2b00      	cmp	r3, #0
 801a9ca:	d006      	beq.n	801a9da <tcp_write+0x38e>
 801a9cc:	4b83      	ldr	r3, [pc, #524]	@ (801abdc <tcp_write+0x590>)
 801a9ce:	f240 224b 	movw	r2, #587	@ 0x24b
 801a9d2:	4985      	ldr	r1, [pc, #532]	@ (801abe8 <tcp_write+0x59c>)
 801a9d4:	4883      	ldr	r0, [pc, #524]	@ (801abe4 <tcp_write+0x598>)
 801a9d6:	f007 f957 	bl	8021c88 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801a9da:	8b3b      	ldrh	r3, [r7, #24]
 801a9dc:	2201      	movs	r2, #1
 801a9de:	4619      	mov	r1, r3
 801a9e0:	2000      	movs	r0, #0
 801a9e2:	f7fa fde7 	bl	80155b4 <pbuf_alloc>
 801a9e6:	6178      	str	r0, [r7, #20]
 801a9e8:	697b      	ldr	r3, [r7, #20]
 801a9ea:	2b00      	cmp	r3, #0
 801a9ec:	f000 8151 	beq.w	801ac92 <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 801a9f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801a9f4:	68ba      	ldr	r2, [r7, #8]
 801a9f6:	441a      	add	r2, r3
 801a9f8:	697b      	ldr	r3, [r7, #20]
 801a9fa:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801a9fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801aa00:	b29b      	uxth	r3, r3
 801aa02:	2200      	movs	r2, #0
 801aa04:	4619      	mov	r1, r3
 801aa06:	2000      	movs	r0, #0
 801aa08:	f7fa fdd4 	bl	80155b4 <pbuf_alloc>
 801aa0c:	6338      	str	r0, [r7, #48]	@ 0x30
 801aa0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aa10:	2b00      	cmp	r3, #0
 801aa12:	d103      	bne.n	801aa1c <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801aa14:	6978      	ldr	r0, [r7, #20]
 801aa16:	f7fb f945 	bl	8015ca4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801aa1a:	e13d      	b.n	801ac98 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801aa1c:	6979      	ldr	r1, [r7, #20]
 801aa1e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801aa20:	f7fb fa0c 	bl	8015e3c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801aa24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801aa26:	f7fb f9d1 	bl	8015dcc <pbuf_clen>
 801aa2a:	4603      	mov	r3, r0
 801aa2c:	461a      	mov	r2, r3
 801aa2e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801aa32:	4413      	add	r3, r2
 801aa34:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 801aa38:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801aa3c:	2b04      	cmp	r3, #4
 801aa3e:	d805      	bhi.n	801aa4c <tcp_write+0x400>
 801aa40:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801aa44:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 801aa48:	4293      	cmp	r3, r2
 801aa4a:	d903      	bls.n	801aa54 <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801aa4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801aa4e:	f7fb f929 	bl	8015ca4 <pbuf_free>
      goto memerr;
 801aa52:	e121      	b.n	801ac98 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801aa54:	68fb      	ldr	r3, [r7, #12]
 801aa56:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801aa58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801aa5c:	441a      	add	r2, r3
 801aa5e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801aa62:	9300      	str	r3, [sp, #0]
 801aa64:	4613      	mov	r3, r2
 801aa66:	2200      	movs	r2, #0
 801aa68:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801aa6a:	68f8      	ldr	r0, [r7, #12]
 801aa6c:	f7ff fc7c 	bl	801a368 <tcp_create_segment>
 801aa70:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801aa72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801aa74:	2b00      	cmp	r3, #0
 801aa76:	f000 810e 	beq.w	801ac96 <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801aa7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801aa7c:	2b00      	cmp	r3, #0
 801aa7e:	d102      	bne.n	801aa86 <tcp_write+0x43a>
      queue = seg;
 801aa80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801aa82:	647b      	str	r3, [r7, #68]	@ 0x44
 801aa84:	e00c      	b.n	801aaa0 <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801aa86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801aa88:	2b00      	cmp	r3, #0
 801aa8a:	d106      	bne.n	801aa9a <tcp_write+0x44e>
 801aa8c:	4b53      	ldr	r3, [pc, #332]	@ (801abdc <tcp_write+0x590>)
 801aa8e:	f240 2285 	movw	r2, #645	@ 0x285
 801aa92:	4956      	ldr	r1, [pc, #344]	@ (801abec <tcp_write+0x5a0>)
 801aa94:	4853      	ldr	r0, [pc, #332]	@ (801abe4 <tcp_write+0x598>)
 801aa96:	f007 f8f7 	bl	8021c88 <iprintf>
      prev_seg->next = seg;
 801aa9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801aa9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801aa9e:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801aaa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801aaa2:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801aaa4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801aaa8:	8b3b      	ldrh	r3, [r7, #24]
 801aaaa:	4413      	add	r3, r2
 801aaac:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 801aab0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801aab4:	88fb      	ldrh	r3, [r7, #6]
 801aab6:	429a      	cmp	r2, r3
 801aab8:	f4ff af38 	bcc.w	801a92c <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801aabc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801aabe:	2b00      	cmp	r3, #0
 801aac0:	d02c      	beq.n	801ab1c <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801aac2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801aac4:	685b      	ldr	r3, [r3, #4]
 801aac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801aac8:	e01e      	b.n	801ab08 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 801aaca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aacc:	891a      	ldrh	r2, [r3, #8]
 801aace:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801aad0:	4413      	add	r3, r2
 801aad2:	b29a      	uxth	r2, r3
 801aad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aad6:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801aad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aada:	681b      	ldr	r3, [r3, #0]
 801aadc:	2b00      	cmp	r3, #0
 801aade:	d110      	bne.n	801ab02 <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801aae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aae2:	685b      	ldr	r3, [r3, #4]
 801aae4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801aae6:	8952      	ldrh	r2, [r2, #10]
 801aae8:	4413      	add	r3, r2
 801aaea:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801aaec:	68b9      	ldr	r1, [r7, #8]
 801aaee:	4618      	mov	r0, r3
 801aaf0:	f007 fbc5 	bl	802227e <memcpy>
        p->len += oversize_used;
 801aaf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aaf6:	895a      	ldrh	r2, [r3, #10]
 801aaf8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801aafa:	4413      	add	r3, r2
 801aafc:	b29a      	uxth	r2, r3
 801aafe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ab00:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801ab02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ab04:	681b      	ldr	r3, [r3, #0]
 801ab06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ab08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ab0a:	2b00      	cmp	r3, #0
 801ab0c:	d1dd      	bne.n	801aaca <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 801ab0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ab10:	891a      	ldrh	r2, [r3, #8]
 801ab12:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801ab14:	4413      	add	r3, r2
 801ab16:	b29a      	uxth	r2, r3
 801ab18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ab1a:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801ab1c:	8a7a      	ldrh	r2, [r7, #18]
 801ab1e:	68fb      	ldr	r3, [r7, #12]
 801ab20:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801ab24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ab26:	2b00      	cmp	r3, #0
 801ab28:	d018      	beq.n	801ab5c <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801ab2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ab2c:	2b00      	cmp	r3, #0
 801ab2e:	d106      	bne.n	801ab3e <tcp_write+0x4f2>
 801ab30:	4b2a      	ldr	r3, [pc, #168]	@ (801abdc <tcp_write+0x590>)
 801ab32:	f240 22ba 	movw	r2, #698	@ 0x2ba
 801ab36:	492e      	ldr	r1, [pc, #184]	@ (801abf0 <tcp_write+0x5a4>)
 801ab38:	482a      	ldr	r0, [pc, #168]	@ (801abe4 <tcp_write+0x598>)
 801ab3a:	f007 f8a5 	bl	8021c88 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801ab3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ab40:	685b      	ldr	r3, [r3, #4]
 801ab42:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801ab44:	4618      	mov	r0, r3
 801ab46:	f7fb f979 	bl	8015e3c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801ab4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ab4c:	891a      	ldrh	r2, [r3, #8]
 801ab4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ab50:	891b      	ldrh	r3, [r3, #8]
 801ab52:	4413      	add	r3, r2
 801ab54:	b29a      	uxth	r2, r3
 801ab56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ab58:	811a      	strh	r2, [r3, #8]
 801ab5a:	e037      	b.n	801abcc <tcp_write+0x580>
  } else if (extendlen > 0) {
 801ab5c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ab5e:	2b00      	cmp	r3, #0
 801ab60:	d034      	beq.n	801abcc <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801ab62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ab64:	2b00      	cmp	r3, #0
 801ab66:	d003      	beq.n	801ab70 <tcp_write+0x524>
 801ab68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ab6a:	685b      	ldr	r3, [r3, #4]
 801ab6c:	2b00      	cmp	r3, #0
 801ab6e:	d106      	bne.n	801ab7e <tcp_write+0x532>
 801ab70:	4b1a      	ldr	r3, [pc, #104]	@ (801abdc <tcp_write+0x590>)
 801ab72:	f44f 7230 	mov.w	r2, #704	@ 0x2c0
 801ab76:	491f      	ldr	r1, [pc, #124]	@ (801abf4 <tcp_write+0x5a8>)
 801ab78:	481a      	ldr	r0, [pc, #104]	@ (801abe4 <tcp_write+0x598>)
 801ab7a:	f007 f885 	bl	8021c88 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801ab7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ab80:	685b      	ldr	r3, [r3, #4]
 801ab82:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ab84:	e009      	b.n	801ab9a <tcp_write+0x54e>
      p->tot_len += extendlen;
 801ab86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ab88:	891a      	ldrh	r2, [r3, #8]
 801ab8a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ab8c:	4413      	add	r3, r2
 801ab8e:	b29a      	uxth	r2, r3
 801ab90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ab92:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801ab94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ab96:	681b      	ldr	r3, [r3, #0]
 801ab98:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ab9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ab9c:	681b      	ldr	r3, [r3, #0]
 801ab9e:	2b00      	cmp	r3, #0
 801aba0:	d1f1      	bne.n	801ab86 <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 801aba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aba4:	891a      	ldrh	r2, [r3, #8]
 801aba6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801aba8:	4413      	add	r3, r2
 801abaa:	b29a      	uxth	r2, r3
 801abac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801abae:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801abb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801abb2:	895a      	ldrh	r2, [r3, #10]
 801abb4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801abb6:	4413      	add	r3, r2
 801abb8:	b29a      	uxth	r2, r3
 801abba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801abbc:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801abbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801abc0:	891a      	ldrh	r2, [r3, #8]
 801abc2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801abc4:	4413      	add	r3, r2
 801abc6:	b29a      	uxth	r2, r3
 801abc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801abca:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801abcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801abce:	2b00      	cmp	r3, #0
 801abd0:	d112      	bne.n	801abf8 <tcp_write+0x5ac>
    pcb->unsent = queue;
 801abd2:	68fb      	ldr	r3, [r7, #12]
 801abd4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801abd6:	669a      	str	r2, [r3, #104]	@ 0x68
 801abd8:	e011      	b.n	801abfe <tcp_write+0x5b2>
 801abda:	bf00      	nop
 801abdc:	08026838 	.word	0x08026838
 801abe0:	08026a48 	.word	0x08026a48
 801abe4:	0802689c 	.word	0x0802689c
 801abe8:	08026a88 	.word	0x08026a88
 801abec:	08026a98 	.word	0x08026a98
 801abf0:	08026aac 	.word	0x08026aac
 801abf4:	08026ae4 	.word	0x08026ae4
  } else {
    last_unsent->next = queue;
 801abf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801abfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801abfc:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801abfe:	68fb      	ldr	r3, [r7, #12]
 801ac00:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801ac02:	88fb      	ldrh	r3, [r7, #6]
 801ac04:	441a      	add	r2, r3
 801ac06:	68fb      	ldr	r3, [r7, #12]
 801ac08:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_buf -= len;
 801ac0a:	68fb      	ldr	r3, [r7, #12]
 801ac0c:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801ac10:	88fb      	ldrh	r3, [r7, #6]
 801ac12:	1ad3      	subs	r3, r2, r3
 801ac14:	b29a      	uxth	r2, r3
 801ac16:	68fb      	ldr	r3, [r7, #12]
 801ac18:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  pcb->snd_queuelen = queuelen;
 801ac1c:	68fb      	ldr	r3, [r7, #12]
 801ac1e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801ac22:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801ac26:	68fb      	ldr	r3, [r7, #12]
 801ac28:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801ac2c:	2b00      	cmp	r3, #0
 801ac2e:	d00e      	beq.n	801ac4e <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 801ac30:	68fb      	ldr	r3, [r7, #12]
 801ac32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ac34:	2b00      	cmp	r3, #0
 801ac36:	d10a      	bne.n	801ac4e <tcp_write+0x602>
 801ac38:	68fb      	ldr	r3, [r7, #12]
 801ac3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ac3c:	2b00      	cmp	r3, #0
 801ac3e:	d106      	bne.n	801ac4e <tcp_write+0x602>
 801ac40:	4b30      	ldr	r3, [pc, #192]	@ (801ad04 <tcp_write+0x6b8>)
 801ac42:	f44f 723b 	mov.w	r2, #748	@ 0x2ec
 801ac46:	4930      	ldr	r1, [pc, #192]	@ (801ad08 <tcp_write+0x6bc>)
 801ac48:	4830      	ldr	r0, [pc, #192]	@ (801ad0c <tcp_write+0x6c0>)
 801ac4a:	f007 f81d 	bl	8021c88 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 801ac4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ac50:	2b00      	cmp	r3, #0
 801ac52:	d016      	beq.n	801ac82 <tcp_write+0x636>
 801ac54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ac56:	68db      	ldr	r3, [r3, #12]
 801ac58:	2b00      	cmp	r3, #0
 801ac5a:	d012      	beq.n	801ac82 <tcp_write+0x636>
 801ac5c:	797b      	ldrb	r3, [r7, #5]
 801ac5e:	f003 0302 	and.w	r3, r3, #2
 801ac62:	2b00      	cmp	r3, #0
 801ac64:	d10d      	bne.n	801ac82 <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801ac66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ac68:	68db      	ldr	r3, [r3, #12]
 801ac6a:	899b      	ldrh	r3, [r3, #12]
 801ac6c:	b29c      	uxth	r4, r3
 801ac6e:	2008      	movs	r0, #8
 801ac70:	f7f9 fdc0 	bl	80147f4 <lwip_htons>
 801ac74:	4603      	mov	r3, r0
 801ac76:	461a      	mov	r2, r3
 801ac78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ac7a:	68db      	ldr	r3, [r3, #12]
 801ac7c:	4322      	orrs	r2, r4
 801ac7e:	b292      	uxth	r2, r2
 801ac80:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801ac82:	2300      	movs	r3, #0
 801ac84:	e039      	b.n	801acfa <tcp_write+0x6ae>
          goto memerr;
 801ac86:	bf00      	nop
 801ac88:	e006      	b.n	801ac98 <tcp_write+0x64c>
            goto memerr;
 801ac8a:	bf00      	nop
 801ac8c:	e004      	b.n	801ac98 <tcp_write+0x64c>
        goto memerr;
 801ac8e:	bf00      	nop
 801ac90:	e002      	b.n	801ac98 <tcp_write+0x64c>
        goto memerr;
 801ac92:	bf00      	nop
 801ac94:	e000      	b.n	801ac98 <tcp_write+0x64c>
      goto memerr;
 801ac96:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 801ac98:	68fb      	ldr	r3, [r7, #12]
 801ac9a:	7e9b      	ldrb	r3, [r3, #26]
 801ac9c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801aca0:	b2da      	uxtb	r2, r3
 801aca2:	68fb      	ldr	r3, [r7, #12]
 801aca4:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);
 801aca6:	4b1a      	ldr	r3, [pc, #104]	@ (801ad10 <tcp_write+0x6c4>)
 801aca8:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801acac:	3301      	adds	r3, #1
 801acae:	b29a      	uxth	r2, r3
 801acb0:	4b17      	ldr	r3, [pc, #92]	@ (801ad10 <tcp_write+0x6c4>)
 801acb2:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

  if (concat_p != NULL) {
 801acb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801acb8:	2b00      	cmp	r3, #0
 801acba:	d002      	beq.n	801acc2 <tcp_write+0x676>
    pbuf_free(concat_p);
 801acbc:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801acbe:	f7fa fff1 	bl	8015ca4 <pbuf_free>
  }
  if (queue != NULL) {
 801acc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801acc4:	2b00      	cmp	r3, #0
 801acc6:	d002      	beq.n	801acce <tcp_write+0x682>
    tcp_segs_free(queue);
 801acc8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801acca:	f7fc fc0a 	bl	80174e2 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801acce:	68fb      	ldr	r3, [r7, #12]
 801acd0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801acd4:	2b00      	cmp	r3, #0
 801acd6:	d00e      	beq.n	801acf6 <tcp_write+0x6aa>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801acd8:	68fb      	ldr	r3, [r7, #12]
 801acda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801acdc:	2b00      	cmp	r3, #0
 801acde:	d10a      	bne.n	801acf6 <tcp_write+0x6aa>
 801ace0:	68fb      	ldr	r3, [r7, #12]
 801ace2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ace4:	2b00      	cmp	r3, #0
 801ace6:	d106      	bne.n	801acf6 <tcp_write+0x6aa>
 801ace8:	4b06      	ldr	r3, [pc, #24]	@ (801ad04 <tcp_write+0x6b8>)
 801acea:	f240 3201 	movw	r2, #769	@ 0x301
 801acee:	4906      	ldr	r1, [pc, #24]	@ (801ad08 <tcp_write+0x6bc>)
 801acf0:	4806      	ldr	r0, [pc, #24]	@ (801ad0c <tcp_write+0x6c0>)
 801acf2:	f006 ffc9 	bl	8021c88 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801acf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 801acfa:	4618      	mov	r0, r3
 801acfc:	375c      	adds	r7, #92	@ 0x5c
 801acfe:	46bd      	mov	sp, r7
 801ad00:	bd90      	pop	{r4, r7, pc}
 801ad02:	bf00      	nop
 801ad04:	08026838 	.word	0x08026838
 801ad08:	08026b1c 	.word	0x08026b1c
 801ad0c:	0802689c 	.word	0x0802689c
 801ad10:	2000be88 	.word	0x2000be88

0801ad14 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801ad14:	b580      	push	{r7, lr}
 801ad16:	b08a      	sub	sp, #40	@ 0x28
 801ad18:	af02      	add	r7, sp, #8
 801ad1a:	6078      	str	r0, [r7, #4]
 801ad1c:	460b      	mov	r3, r1
 801ad1e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801ad20:	2300      	movs	r3, #0
 801ad22:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801ad24:	2300      	movs	r3, #0
 801ad26:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801ad28:	78fb      	ldrb	r3, [r7, #3]
 801ad2a:	f003 0303 	and.w	r3, r3, #3
 801ad2e:	2b00      	cmp	r3, #0
 801ad30:	d106      	bne.n	801ad40 <tcp_enqueue_flags+0x2c>
 801ad32:	4b7b      	ldr	r3, [pc, #492]	@ (801af20 <tcp_enqueue_flags+0x20c>)
 801ad34:	f240 321a 	movw	r2, #794	@ 0x31a
 801ad38:	497a      	ldr	r1, [pc, #488]	@ (801af24 <tcp_enqueue_flags+0x210>)
 801ad3a:	487b      	ldr	r0, [pc, #492]	@ (801af28 <tcp_enqueue_flags+0x214>)
 801ad3c:	f006 ffa4 	bl	8021c88 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 801ad40:	687b      	ldr	r3, [r7, #4]
 801ad42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801ad46:	2b03      	cmp	r3, #3
 801ad48:	d806      	bhi.n	801ad58 <tcp_enqueue_flags+0x44>
 801ad4a:	687b      	ldr	r3, [r7, #4]
 801ad4c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801ad50:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 801ad54:	4293      	cmp	r3, r2
 801ad56:	d916      	bls.n	801ad86 <tcp_enqueue_flags+0x72>
      ((flags & TCP_FIN) == 0)) {
 801ad58:	78fb      	ldrb	r3, [r7, #3]
 801ad5a:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 801ad5e:	2b00      	cmp	r3, #0
 801ad60:	d111      	bne.n	801ad86 <tcp_enqueue_flags+0x72>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 801ad62:	4b72      	ldr	r3, [pc, #456]	@ (801af2c <tcp_enqueue_flags+0x218>)
 801ad64:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801ad68:	3301      	adds	r3, #1
 801ad6a:	b29a      	uxth	r2, r3
 801ad6c:	4b6f      	ldr	r3, [pc, #444]	@ (801af2c <tcp_enqueue_flags+0x218>)
 801ad6e:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    pcb->flags |= TF_NAGLEMEMERR;
 801ad72:	687b      	ldr	r3, [r7, #4]
 801ad74:	7e9b      	ldrb	r3, [r3, #26]
 801ad76:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801ad7a:	b2da      	uxtb	r2, r3
 801ad7c:	687b      	ldr	r3, [r7, #4]
 801ad7e:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 801ad80:	f04f 33ff 	mov.w	r3, #4294967295
 801ad84:	e0c7      	b.n	801af16 <tcp_enqueue_flags+0x202>
  }

  if (flags & TCP_SYN) {
 801ad86:	78fb      	ldrb	r3, [r7, #3]
 801ad88:	f003 0302 	and.w	r3, r3, #2
 801ad8c:	2b00      	cmp	r3, #0
 801ad8e:	d001      	beq.n	801ad94 <tcp_enqueue_flags+0x80>
    optflags = TF_SEG_OPTS_MSS;
 801ad90:	2301      	movs	r3, #1
 801ad92:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801ad94:	7ffb      	ldrb	r3, [r7, #31]
 801ad96:	009b      	lsls	r3, r3, #2
 801ad98:	b2db      	uxtb	r3, r3
 801ad9a:	f003 0304 	and.w	r3, r3, #4
 801ad9e:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801ada0:	7dfb      	ldrb	r3, [r7, #23]
 801ada2:	b29b      	uxth	r3, r3
 801ada4:	2200      	movs	r2, #0
 801ada6:	4619      	mov	r1, r3
 801ada8:	2000      	movs	r0, #0
 801adaa:	f7fa fc03 	bl	80155b4 <pbuf_alloc>
 801adae:	6138      	str	r0, [r7, #16]
 801adb0:	693b      	ldr	r3, [r7, #16]
 801adb2:	2b00      	cmp	r3, #0
 801adb4:	d111      	bne.n	801adda <tcp_enqueue_flags+0xc6>
    pcb->flags |= TF_NAGLEMEMERR;
 801adb6:	687b      	ldr	r3, [r7, #4]
 801adb8:	7e9b      	ldrb	r3, [r3, #26]
 801adba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801adbe:	b2da      	uxtb	r2, r3
 801adc0:	687b      	ldr	r3, [r7, #4]
 801adc2:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 801adc4:	4b59      	ldr	r3, [pc, #356]	@ (801af2c <tcp_enqueue_flags+0x218>)
 801adc6:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801adca:	3301      	adds	r3, #1
 801adcc:	b29a      	uxth	r2, r3
 801adce:	4b57      	ldr	r3, [pc, #348]	@ (801af2c <tcp_enqueue_flags+0x218>)
 801add0:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    return ERR_MEM;
 801add4:	f04f 33ff 	mov.w	r3, #4294967295
 801add8:	e09d      	b.n	801af16 <tcp_enqueue_flags+0x202>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801adda:	693b      	ldr	r3, [r7, #16]
 801addc:	895a      	ldrh	r2, [r3, #10]
 801adde:	7dfb      	ldrb	r3, [r7, #23]
 801ade0:	b29b      	uxth	r3, r3
 801ade2:	429a      	cmp	r2, r3
 801ade4:	d206      	bcs.n	801adf4 <tcp_enqueue_flags+0xe0>
 801ade6:	4b4e      	ldr	r3, [pc, #312]	@ (801af20 <tcp_enqueue_flags+0x20c>)
 801ade8:	f44f 7250 	mov.w	r2, #832	@ 0x340
 801adec:	4950      	ldr	r1, [pc, #320]	@ (801af30 <tcp_enqueue_flags+0x21c>)
 801adee:	484e      	ldr	r0, [pc, #312]	@ (801af28 <tcp_enqueue_flags+0x214>)
 801adf0:	f006 ff4a 	bl	8021c88 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801adf4:	687b      	ldr	r3, [r7, #4]
 801adf6:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801adf8:	78fa      	ldrb	r2, [r7, #3]
 801adfa:	7ffb      	ldrb	r3, [r7, #31]
 801adfc:	9300      	str	r3, [sp, #0]
 801adfe:	460b      	mov	r3, r1
 801ae00:	6939      	ldr	r1, [r7, #16]
 801ae02:	6878      	ldr	r0, [r7, #4]
 801ae04:	f7ff fab0 	bl	801a368 <tcp_create_segment>
 801ae08:	60f8      	str	r0, [r7, #12]
 801ae0a:	68fb      	ldr	r3, [r7, #12]
 801ae0c:	2b00      	cmp	r3, #0
 801ae0e:	d111      	bne.n	801ae34 <tcp_enqueue_flags+0x120>
    pcb->flags |= TF_NAGLEMEMERR;
 801ae10:	687b      	ldr	r3, [r7, #4]
 801ae12:	7e9b      	ldrb	r3, [r3, #26]
 801ae14:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801ae18:	b2da      	uxtb	r2, r3
 801ae1a:	687b      	ldr	r3, [r7, #4]
 801ae1c:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 801ae1e:	4b43      	ldr	r3, [pc, #268]	@ (801af2c <tcp_enqueue_flags+0x218>)
 801ae20:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801ae24:	3301      	adds	r3, #1
 801ae26:	b29a      	uxth	r2, r3
 801ae28:	4b40      	ldr	r3, [pc, #256]	@ (801af2c <tcp_enqueue_flags+0x218>)
 801ae2a:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    return ERR_MEM;
 801ae2e:	f04f 33ff 	mov.w	r3, #4294967295
 801ae32:	e070      	b.n	801af16 <tcp_enqueue_flags+0x202>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801ae34:	68fb      	ldr	r3, [r7, #12]
 801ae36:	68db      	ldr	r3, [r3, #12]
 801ae38:	f003 0303 	and.w	r3, r3, #3
 801ae3c:	2b00      	cmp	r3, #0
 801ae3e:	d006      	beq.n	801ae4e <tcp_enqueue_flags+0x13a>
 801ae40:	4b37      	ldr	r3, [pc, #220]	@ (801af20 <tcp_enqueue_flags+0x20c>)
 801ae42:	f240 3249 	movw	r2, #841	@ 0x349
 801ae46:	493b      	ldr	r1, [pc, #236]	@ (801af34 <tcp_enqueue_flags+0x220>)
 801ae48:	4837      	ldr	r0, [pc, #220]	@ (801af28 <tcp_enqueue_flags+0x214>)
 801ae4a:	f006 ff1d 	bl	8021c88 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801ae4e:	68fb      	ldr	r3, [r7, #12]
 801ae50:	891b      	ldrh	r3, [r3, #8]
 801ae52:	2b00      	cmp	r3, #0
 801ae54:	d006      	beq.n	801ae64 <tcp_enqueue_flags+0x150>
 801ae56:	4b32      	ldr	r3, [pc, #200]	@ (801af20 <tcp_enqueue_flags+0x20c>)
 801ae58:	f240 324a 	movw	r2, #842	@ 0x34a
 801ae5c:	4936      	ldr	r1, [pc, #216]	@ (801af38 <tcp_enqueue_flags+0x224>)
 801ae5e:	4832      	ldr	r0, [pc, #200]	@ (801af28 <tcp_enqueue_flags+0x214>)
 801ae60:	f006 ff12 	bl	8021c88 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801ae64:	687b      	ldr	r3, [r7, #4]
 801ae66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ae68:	2b00      	cmp	r3, #0
 801ae6a:	d103      	bne.n	801ae74 <tcp_enqueue_flags+0x160>
    pcb->unsent = seg;
 801ae6c:	687b      	ldr	r3, [r7, #4]
 801ae6e:	68fa      	ldr	r2, [r7, #12]
 801ae70:	669a      	str	r2, [r3, #104]	@ 0x68
 801ae72:	e00d      	b.n	801ae90 <tcp_enqueue_flags+0x17c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801ae74:	687b      	ldr	r3, [r7, #4]
 801ae76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ae78:	61bb      	str	r3, [r7, #24]
 801ae7a:	e002      	b.n	801ae82 <tcp_enqueue_flags+0x16e>
 801ae7c:	69bb      	ldr	r3, [r7, #24]
 801ae7e:	681b      	ldr	r3, [r3, #0]
 801ae80:	61bb      	str	r3, [r7, #24]
 801ae82:	69bb      	ldr	r3, [r7, #24]
 801ae84:	681b      	ldr	r3, [r3, #0]
 801ae86:	2b00      	cmp	r3, #0
 801ae88:	d1f8      	bne.n	801ae7c <tcp_enqueue_flags+0x168>
    useg->next = seg;
 801ae8a:	69bb      	ldr	r3, [r7, #24]
 801ae8c:	68fa      	ldr	r2, [r7, #12]
 801ae8e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801ae90:	687b      	ldr	r3, [r7, #4]
 801ae92:	2200      	movs	r2, #0
 801ae94:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801ae98:	78fb      	ldrb	r3, [r7, #3]
 801ae9a:	f003 0302 	and.w	r3, r3, #2
 801ae9e:	2b00      	cmp	r3, #0
 801aea0:	d104      	bne.n	801aeac <tcp_enqueue_flags+0x198>
 801aea2:	78fb      	ldrb	r3, [r7, #3]
 801aea4:	f003 0301 	and.w	r3, r3, #1
 801aea8:	2b00      	cmp	r3, #0
 801aeaa:	d004      	beq.n	801aeb6 <tcp_enqueue_flags+0x1a2>
    pcb->snd_lbb++;
 801aeac:	687b      	ldr	r3, [r7, #4]
 801aeae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801aeb0:	1c5a      	adds	r2, r3, #1
 801aeb2:	687b      	ldr	r3, [r7, #4]
 801aeb4:	659a      	str	r2, [r3, #88]	@ 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801aeb6:	78fb      	ldrb	r3, [r7, #3]
 801aeb8:	f003 0301 	and.w	r3, r3, #1
 801aebc:	2b00      	cmp	r3, #0
 801aebe:	d006      	beq.n	801aece <tcp_enqueue_flags+0x1ba>
    pcb->flags |= TF_FIN;
 801aec0:	687b      	ldr	r3, [r7, #4]
 801aec2:	7e9b      	ldrb	r3, [r3, #26]
 801aec4:	f043 0320 	orr.w	r3, r3, #32
 801aec8:	b2da      	uxtb	r2, r3
 801aeca:	687b      	ldr	r3, [r7, #4]
 801aecc:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801aece:	68fb      	ldr	r3, [r7, #12]
 801aed0:	685b      	ldr	r3, [r3, #4]
 801aed2:	4618      	mov	r0, r3
 801aed4:	f7fa ff7a 	bl	8015dcc <pbuf_clen>
 801aed8:	4603      	mov	r3, r0
 801aeda:	461a      	mov	r2, r3
 801aedc:	687b      	ldr	r3, [r7, #4]
 801aede:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801aee2:	4413      	add	r3, r2
 801aee4:	b29a      	uxth	r2, r3
 801aee6:	687b      	ldr	r3, [r7, #4]
 801aee8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801aeec:	687b      	ldr	r3, [r7, #4]
 801aeee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801aef2:	2b00      	cmp	r3, #0
 801aef4:	d00e      	beq.n	801af14 <tcp_enqueue_flags+0x200>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801aef6:	687b      	ldr	r3, [r7, #4]
 801aef8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801aefa:	2b00      	cmp	r3, #0
 801aefc:	d10a      	bne.n	801af14 <tcp_enqueue_flags+0x200>
 801aefe:	687b      	ldr	r3, [r7, #4]
 801af00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801af02:	2b00      	cmp	r3, #0
 801af04:	d106      	bne.n	801af14 <tcp_enqueue_flags+0x200>
 801af06:	4b06      	ldr	r3, [pc, #24]	@ (801af20 <tcp_enqueue_flags+0x20c>)
 801af08:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 801af0c:	490b      	ldr	r1, [pc, #44]	@ (801af3c <tcp_enqueue_flags+0x228>)
 801af0e:	4806      	ldr	r0, [pc, #24]	@ (801af28 <tcp_enqueue_flags+0x214>)
 801af10:	f006 feba 	bl	8021c88 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801af14:	2300      	movs	r3, #0
}
 801af16:	4618      	mov	r0, r3
 801af18:	3720      	adds	r7, #32
 801af1a:	46bd      	mov	sp, r7
 801af1c:	bd80      	pop	{r7, pc}
 801af1e:	bf00      	nop
 801af20:	08026838 	.word	0x08026838
 801af24:	08026b3c 	.word	0x08026b3c
 801af28:	0802689c 	.word	0x0802689c
 801af2c:	2000be88 	.word	0x2000be88
 801af30:	08026b94 	.word	0x08026b94
 801af34:	08026bd0 	.word	0x08026bd0
 801af38:	08026be8 	.word	0x08026be8
 801af3c:	08026c14 	.word	0x08026c14

0801af40 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801af40:	b590      	push	{r4, r7, lr}
 801af42:	b08b      	sub	sp, #44	@ 0x2c
 801af44:	af04      	add	r7, sp, #16
 801af46:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 801af48:	2300      	movs	r3, #0
 801af4a:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801af4c:	7dbb      	ldrb	r3, [r7, #22]
 801af4e:	b29c      	uxth	r4, r3
 801af50:	687b      	ldr	r3, [r7, #4]
 801af52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801af54:	4618      	mov	r0, r3
 801af56:	f7f9 fc5a 	bl	801480e <lwip_htonl>
 801af5a:	4603      	mov	r3, r0
 801af5c:	2200      	movs	r2, #0
 801af5e:	4621      	mov	r1, r4
 801af60:	6878      	ldr	r0, [r7, #4]
 801af62:	f7ff f947 	bl	801a1f4 <tcp_output_alloc_header>
 801af66:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801af68:	693b      	ldr	r3, [r7, #16]
 801af6a:	2b00      	cmp	r3, #0
 801af6c:	d109      	bne.n	801af82 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 801af6e:	687b      	ldr	r3, [r7, #4]
 801af70:	7e9b      	ldrb	r3, [r3, #26]
 801af72:	f043 0303 	orr.w	r3, r3, #3
 801af76:	b2da      	uxtb	r2, r3
 801af78:	687b      	ldr	r3, [r7, #4]
 801af7a:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801af7c:	f06f 0301 	mvn.w	r3, #1
 801af80:	e036      	b.n	801aff0 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801af82:	687b      	ldr	r3, [r7, #4]
 801af84:	3304      	adds	r3, #4
 801af86:	4618      	mov	r0, r3
 801af88:	f004 fbce 	bl	801f728 <ip4_route>
 801af8c:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 801af8e:	68fb      	ldr	r3, [r7, #12]
 801af90:	2b00      	cmp	r3, #0
 801af92:	d102      	bne.n	801af9a <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 801af94:	23fc      	movs	r3, #252	@ 0xfc
 801af96:	75fb      	strb	r3, [r7, #23]
 801af98:	e012      	b.n	801afc0 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 801af9a:	6879      	ldr	r1, [r7, #4]
 801af9c:	687b      	ldr	r3, [r7, #4]
 801af9e:	1d18      	adds	r0, r3, #4
 801afa0:	687b      	ldr	r3, [r7, #4]
 801afa2:	7a9c      	ldrb	r4, [r3, #10]
 801afa4:	687b      	ldr	r3, [r7, #4]
 801afa6:	7a5b      	ldrb	r3, [r3, #9]
 801afa8:	68fa      	ldr	r2, [r7, #12]
 801afaa:	9202      	str	r2, [sp, #8]
 801afac:	2206      	movs	r2, #6
 801afae:	9201      	str	r2, [sp, #4]
 801afb0:	9300      	str	r3, [sp, #0]
 801afb2:	4623      	mov	r3, r4
 801afb4:	4602      	mov	r2, r0
 801afb6:	6938      	ldr	r0, [r7, #16]
 801afb8:	f004 fe28 	bl	801fc0c <ip4_output_if>
 801afbc:	4603      	mov	r3, r0
 801afbe:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 801afc0:	6938      	ldr	r0, [r7, #16]
 801afc2:	f7fa fe6f 	bl	8015ca4 <pbuf_free>

  if (err != ERR_OK) {
 801afc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801afca:	2b00      	cmp	r3, #0
 801afcc:	d007      	beq.n	801afde <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 801afce:	687b      	ldr	r3, [r7, #4]
 801afd0:	7e9b      	ldrb	r3, [r3, #26]
 801afd2:	f043 0303 	orr.w	r3, r3, #3
 801afd6:	b2da      	uxtb	r2, r3
 801afd8:	687b      	ldr	r3, [r7, #4]
 801afda:	769a      	strb	r2, [r3, #26]
 801afdc:	e006      	b.n	801afec <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801afde:	687b      	ldr	r3, [r7, #4]
 801afe0:	7e9b      	ldrb	r3, [r3, #26]
 801afe2:	f023 0303 	bic.w	r3, r3, #3
 801afe6:	b2da      	uxtb	r2, r3
 801afe8:	687b      	ldr	r3, [r7, #4]
 801afea:	769a      	strb	r2, [r3, #26]
  }

  return err;
 801afec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801aff0:	4618      	mov	r0, r3
 801aff2:	371c      	adds	r7, #28
 801aff4:	46bd      	mov	sp, r7
 801aff6:	bd90      	pop	{r4, r7, pc}

0801aff8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801aff8:	b5b0      	push	{r4, r5, r7, lr}
 801affa:	b08a      	sub	sp, #40	@ 0x28
 801affc:	af00      	add	r7, sp, #0
 801affe:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801b000:	687b      	ldr	r3, [r7, #4]
 801b002:	7d1b      	ldrb	r3, [r3, #20]
 801b004:	2b01      	cmp	r3, #1
 801b006:	d106      	bne.n	801b016 <tcp_output+0x1e>
 801b008:	4b99      	ldr	r3, [pc, #612]	@ (801b270 <tcp_output+0x278>)
 801b00a:	f44f 727b 	mov.w	r2, #1004	@ 0x3ec
 801b00e:	4999      	ldr	r1, [pc, #612]	@ (801b274 <tcp_output+0x27c>)
 801b010:	4899      	ldr	r0, [pc, #612]	@ (801b278 <tcp_output+0x280>)
 801b012:	f006 fe39 	bl	8021c88 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801b016:	4b99      	ldr	r3, [pc, #612]	@ (801b27c <tcp_output+0x284>)
 801b018:	681b      	ldr	r3, [r3, #0]
 801b01a:	687a      	ldr	r2, [r7, #4]
 801b01c:	429a      	cmp	r2, r3
 801b01e:	d101      	bne.n	801b024 <tcp_output+0x2c>
    return ERR_OK;
 801b020:	2300      	movs	r3, #0
 801b022:	e1cb      	b.n	801b3bc <tcp_output+0x3c4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801b024:	687b      	ldr	r3, [r7, #4]
 801b026:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801b02a:	687b      	ldr	r3, [r7, #4]
 801b02c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801b030:	4293      	cmp	r3, r2
 801b032:	bf28      	it	cs
 801b034:	4613      	movcs	r3, r2
 801b036:	b29b      	uxth	r3, r3
 801b038:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801b03a:	687b      	ldr	r3, [r7, #4]
 801b03c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b03e:	627b      	str	r3, [r7, #36]	@ 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 801b040:	687b      	ldr	r3, [r7, #4]
 801b042:	7e9b      	ldrb	r3, [r3, #26]
 801b044:	f003 0302 	and.w	r3, r3, #2
 801b048:	2b00      	cmp	r3, #0
 801b04a:	d017      	beq.n	801b07c <tcp_output+0x84>
 801b04c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b04e:	2b00      	cmp	r3, #0
 801b050:	d00f      	beq.n	801b072 <tcp_output+0x7a>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 801b052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b054:	68db      	ldr	r3, [r3, #12]
 801b056:	685b      	ldr	r3, [r3, #4]
 801b058:	4618      	mov	r0, r3
 801b05a:	f7f9 fbd8 	bl	801480e <lwip_htonl>
 801b05e:	4602      	mov	r2, r0
 801b060:	687b      	ldr	r3, [r7, #4]
 801b062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b064:	1ad3      	subs	r3, r2, r3
 801b066:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b068:	8912      	ldrh	r2, [r2, #8]
 801b06a:	4413      	add	r3, r2
     (seg == NULL ||
 801b06c:	69ba      	ldr	r2, [r7, #24]
 801b06e:	429a      	cmp	r2, r3
 801b070:	d204      	bcs.n	801b07c <tcp_output+0x84>
     return tcp_send_empty_ack(pcb);
 801b072:	6878      	ldr	r0, [r7, #4]
 801b074:	f7ff ff64 	bl	801af40 <tcp_send_empty_ack>
 801b078:	4603      	mov	r3, r0
 801b07a:	e19f      	b.n	801b3bc <tcp_output+0x3c4>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801b07c:	687b      	ldr	r3, [r7, #4]
 801b07e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b080:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801b082:	6a3b      	ldr	r3, [r7, #32]
 801b084:	2b00      	cmp	r3, #0
 801b086:	d007      	beq.n	801b098 <tcp_output+0xa0>
    for (; useg->next != NULL; useg = useg->next);
 801b088:	e002      	b.n	801b090 <tcp_output+0x98>
 801b08a:	6a3b      	ldr	r3, [r7, #32]
 801b08c:	681b      	ldr	r3, [r3, #0]
 801b08e:	623b      	str	r3, [r7, #32]
 801b090:	6a3b      	ldr	r3, [r7, #32]
 801b092:	681b      	ldr	r3, [r3, #0]
 801b094:	2b00      	cmp	r3, #0
 801b096:	d1f8      	bne.n	801b08a <tcp_output+0x92>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801b098:	687b      	ldr	r3, [r7, #4]
 801b09a:	3304      	adds	r3, #4
 801b09c:	4618      	mov	r0, r3
 801b09e:	f004 fb43 	bl	801f728 <ip4_route>
 801b0a2:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801b0a4:	697b      	ldr	r3, [r7, #20]
 801b0a6:	2b00      	cmp	r3, #0
 801b0a8:	d102      	bne.n	801b0b0 <tcp_output+0xb8>
    return ERR_RTE;
 801b0aa:	f06f 0303 	mvn.w	r3, #3
 801b0ae:	e185      	b.n	801b3bc <tcp_output+0x3c4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801b0b0:	687b      	ldr	r3, [r7, #4]
 801b0b2:	2b00      	cmp	r3, #0
 801b0b4:	d003      	beq.n	801b0be <tcp_output+0xc6>
 801b0b6:	687b      	ldr	r3, [r7, #4]
 801b0b8:	681b      	ldr	r3, [r3, #0]
 801b0ba:	2b00      	cmp	r3, #0
 801b0bc:	d111      	bne.n	801b0e2 <tcp_output+0xea>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801b0be:	697b      	ldr	r3, [r7, #20]
 801b0c0:	2b00      	cmp	r3, #0
 801b0c2:	d002      	beq.n	801b0ca <tcp_output+0xd2>
 801b0c4:	697b      	ldr	r3, [r7, #20]
 801b0c6:	3304      	adds	r3, #4
 801b0c8:	e000      	b.n	801b0cc <tcp_output+0xd4>
 801b0ca:	2300      	movs	r3, #0
 801b0cc:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801b0ce:	693b      	ldr	r3, [r7, #16]
 801b0d0:	2b00      	cmp	r3, #0
 801b0d2:	d102      	bne.n	801b0da <tcp_output+0xe2>
      return ERR_RTE;
 801b0d4:	f06f 0303 	mvn.w	r3, #3
 801b0d8:	e170      	b.n	801b3bc <tcp_output+0x3c4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801b0da:	693b      	ldr	r3, [r7, #16]
 801b0dc:	681a      	ldr	r2, [r3, #0]
 801b0de:	687b      	ldr	r3, [r7, #4]
 801b0e0:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 801b0e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0e4:	2b00      	cmp	r3, #0
 801b0e6:	f000 813f 	beq.w	801b368 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 801b0ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0ec:	68db      	ldr	r3, [r3, #12]
 801b0ee:	685b      	ldr	r3, [r3, #4]
 801b0f0:	4618      	mov	r0, r3
 801b0f2:	f7f9 fb8c 	bl	801480e <lwip_htonl>
 801b0f6:	4602      	mov	r2, r0
 801b0f8:	687b      	ldr	r3, [r7, #4]
 801b0fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b0fc:	1ad3      	subs	r3, r2, r3
 801b0fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b100:	8912      	ldrh	r2, [r2, #8]
 801b102:	4413      	add	r3, r2
  if (seg != NULL &&
 801b104:	69ba      	ldr	r2, [r7, #24]
 801b106:	429a      	cmp	r2, r3
 801b108:	f080 812e 	bcs.w	801b368 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 801b10c:	69bb      	ldr	r3, [r7, #24]
 801b10e:	2b00      	cmp	r3, #0
 801b110:	f000 812a 	beq.w	801b368 <tcp_output+0x370>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 801b114:	687b      	ldr	r3, [r7, #4]
 801b116:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801b11a:	461a      	mov	r2, r3
 801b11c:	69bb      	ldr	r3, [r7, #24]
 801b11e:	4293      	cmp	r3, r2
 801b120:	f040 8122 	bne.w	801b368 <tcp_output+0x370>
 801b124:	687b      	ldr	r3, [r7, #4]
 801b126:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b128:	2b00      	cmp	r3, #0
 801b12a:	f040 811d 	bne.w	801b368 <tcp_output+0x370>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 801b12e:	687b      	ldr	r3, [r7, #4]
 801b130:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 801b134:	2b00      	cmp	r3, #0
 801b136:	f040 812c 	bne.w	801b392 <tcp_output+0x39a>
      pcb->persist_cnt = 0;
 801b13a:	687b      	ldr	r3, [r7, #4]
 801b13c:	2200      	movs	r2, #0
 801b13e:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
      pcb->persist_backoff = 1;
 801b142:	687b      	ldr	r3, [r7, #4]
 801b144:	2201      	movs	r2, #1
 801b146:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
    }
    goto output_done;
 801b14a:	e122      	b.n	801b392 <tcp_output+0x39a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801b14c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b14e:	68db      	ldr	r3, [r3, #12]
 801b150:	899b      	ldrh	r3, [r3, #12]
 801b152:	b29b      	uxth	r3, r3
 801b154:	4618      	mov	r0, r3
 801b156:	f7f9 fb4d 	bl	80147f4 <lwip_htons>
 801b15a:	4603      	mov	r3, r0
 801b15c:	f003 0304 	and.w	r3, r3, #4
 801b160:	2b00      	cmp	r3, #0
 801b162:	d006      	beq.n	801b172 <tcp_output+0x17a>
 801b164:	4b42      	ldr	r3, [pc, #264]	@ (801b270 <tcp_output+0x278>)
 801b166:	f240 4245 	movw	r2, #1093	@ 0x445
 801b16a:	4945      	ldr	r1, [pc, #276]	@ (801b280 <tcp_output+0x288>)
 801b16c:	4842      	ldr	r0, [pc, #264]	@ (801b278 <tcp_output+0x280>)
 801b16e:	f006 fd8b 	bl	8021c88 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801b172:	687b      	ldr	r3, [r7, #4]
 801b174:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b176:	2b00      	cmp	r3, #0
 801b178:	d01f      	beq.n	801b1ba <tcp_output+0x1c2>
 801b17a:	687b      	ldr	r3, [r7, #4]
 801b17c:	7e9b      	ldrb	r3, [r3, #26]
 801b17e:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801b182:	2b00      	cmp	r3, #0
 801b184:	d119      	bne.n	801b1ba <tcp_output+0x1c2>
 801b186:	687b      	ldr	r3, [r7, #4]
 801b188:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b18a:	2b00      	cmp	r3, #0
 801b18c:	d00b      	beq.n	801b1a6 <tcp_output+0x1ae>
 801b18e:	687b      	ldr	r3, [r7, #4]
 801b190:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b192:	681b      	ldr	r3, [r3, #0]
 801b194:	2b00      	cmp	r3, #0
 801b196:	d110      	bne.n	801b1ba <tcp_output+0x1c2>
 801b198:	687b      	ldr	r3, [r7, #4]
 801b19a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b19c:	891a      	ldrh	r2, [r3, #8]
 801b19e:	687b      	ldr	r3, [r7, #4]
 801b1a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801b1a2:	429a      	cmp	r2, r3
 801b1a4:	d209      	bcs.n	801b1ba <tcp_output+0x1c2>
 801b1a6:	687b      	ldr	r3, [r7, #4]
 801b1a8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801b1ac:	2b00      	cmp	r3, #0
 801b1ae:	d004      	beq.n	801b1ba <tcp_output+0x1c2>
 801b1b0:	687b      	ldr	r3, [r7, #4]
 801b1b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801b1b6:	2b03      	cmp	r3, #3
 801b1b8:	d901      	bls.n	801b1be <tcp_output+0x1c6>
 801b1ba:	2301      	movs	r3, #1
 801b1bc:	e000      	b.n	801b1c0 <tcp_output+0x1c8>
 801b1be:	2300      	movs	r3, #0
 801b1c0:	2b00      	cmp	r3, #0
 801b1c2:	d106      	bne.n	801b1d2 <tcp_output+0x1da>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801b1c4:	687b      	ldr	r3, [r7, #4]
 801b1c6:	7e9b      	ldrb	r3, [r3, #26]
 801b1c8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801b1cc:	2b00      	cmp	r3, #0
 801b1ce:	f000 80e2 	beq.w	801b396 <tcp_output+0x39e>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801b1d2:	687b      	ldr	r3, [r7, #4]
 801b1d4:	7d1b      	ldrb	r3, [r3, #20]
 801b1d6:	2b02      	cmp	r3, #2
 801b1d8:	d00d      	beq.n	801b1f6 <tcp_output+0x1fe>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801b1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b1dc:	68db      	ldr	r3, [r3, #12]
 801b1de:	899b      	ldrh	r3, [r3, #12]
 801b1e0:	b29c      	uxth	r4, r3
 801b1e2:	2010      	movs	r0, #16
 801b1e4:	f7f9 fb06 	bl	80147f4 <lwip_htons>
 801b1e8:	4603      	mov	r3, r0
 801b1ea:	461a      	mov	r2, r3
 801b1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b1ee:	68db      	ldr	r3, [r3, #12]
 801b1f0:	4322      	orrs	r2, r4
 801b1f2:	b292      	uxth	r2, r2
 801b1f4:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 801b1f6:	697a      	ldr	r2, [r7, #20]
 801b1f8:	6879      	ldr	r1, [r7, #4]
 801b1fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b1fc:	f000 f8e2 	bl	801b3c4 <tcp_output_segment>
 801b200:	4603      	mov	r3, r0
 801b202:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801b204:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b208:	2b00      	cmp	r3, #0
 801b20a:	d009      	beq.n	801b220 <tcp_output+0x228>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 801b20c:	687b      	ldr	r3, [r7, #4]
 801b20e:	7e9b      	ldrb	r3, [r3, #26]
 801b210:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801b214:	b2da      	uxtb	r2, r3
 801b216:	687b      	ldr	r3, [r7, #4]
 801b218:	769a      	strb	r2, [r3, #26]
      return err;
 801b21a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b21e:	e0cd      	b.n	801b3bc <tcp_output+0x3c4>
    }
    pcb->unsent = seg->next;
 801b220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b222:	681a      	ldr	r2, [r3, #0]
 801b224:	687b      	ldr	r3, [r7, #4]
 801b226:	669a      	str	r2, [r3, #104]	@ 0x68
    if (pcb->state != SYN_SENT) {
 801b228:	687b      	ldr	r3, [r7, #4]
 801b22a:	7d1b      	ldrb	r3, [r3, #20]
 801b22c:	2b02      	cmp	r3, #2
 801b22e:	d006      	beq.n	801b23e <tcp_output+0x246>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801b230:	687b      	ldr	r3, [r7, #4]
 801b232:	7e9b      	ldrb	r3, [r3, #26]
 801b234:	f023 0303 	bic.w	r3, r3, #3
 801b238:	b2da      	uxtb	r2, r3
 801b23a:	687b      	ldr	r3, [r7, #4]
 801b23c:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801b23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b240:	68db      	ldr	r3, [r3, #12]
 801b242:	685b      	ldr	r3, [r3, #4]
 801b244:	4618      	mov	r0, r3
 801b246:	f7f9 fae2 	bl	801480e <lwip_htonl>
 801b24a:	4604      	mov	r4, r0
 801b24c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b24e:	891b      	ldrh	r3, [r3, #8]
 801b250:	461d      	mov	r5, r3
 801b252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b254:	68db      	ldr	r3, [r3, #12]
 801b256:	899b      	ldrh	r3, [r3, #12]
 801b258:	b29b      	uxth	r3, r3
 801b25a:	4618      	mov	r0, r3
 801b25c:	f7f9 faca 	bl	80147f4 <lwip_htons>
 801b260:	4603      	mov	r3, r0
 801b262:	f003 0303 	and.w	r3, r3, #3
 801b266:	2b00      	cmp	r3, #0
 801b268:	d00c      	beq.n	801b284 <tcp_output+0x28c>
 801b26a:	2301      	movs	r3, #1
 801b26c:	e00b      	b.n	801b286 <tcp_output+0x28e>
 801b26e:	bf00      	nop
 801b270:	08026838 	.word	0x08026838
 801b274:	08026c3c 	.word	0x08026c3c
 801b278:	0802689c 	.word	0x0802689c
 801b27c:	2000c06c 	.word	0x2000c06c
 801b280:	08026c64 	.word	0x08026c64
 801b284:	2300      	movs	r3, #0
 801b286:	442b      	add	r3, r5
 801b288:	4423      	add	r3, r4
 801b28a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b28c:	687b      	ldr	r3, [r7, #4]
 801b28e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801b290:	68bb      	ldr	r3, [r7, #8]
 801b292:	1ad3      	subs	r3, r2, r3
 801b294:	2b00      	cmp	r3, #0
 801b296:	da02      	bge.n	801b29e <tcp_output+0x2a6>
      pcb->snd_nxt = snd_nxt;
 801b298:	687b      	ldr	r3, [r7, #4]
 801b29a:	68ba      	ldr	r2, [r7, #8]
 801b29c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801b29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b2a0:	891b      	ldrh	r3, [r3, #8]
 801b2a2:	461c      	mov	r4, r3
 801b2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b2a6:	68db      	ldr	r3, [r3, #12]
 801b2a8:	899b      	ldrh	r3, [r3, #12]
 801b2aa:	b29b      	uxth	r3, r3
 801b2ac:	4618      	mov	r0, r3
 801b2ae:	f7f9 faa1 	bl	80147f4 <lwip_htons>
 801b2b2:	4603      	mov	r3, r0
 801b2b4:	f003 0303 	and.w	r3, r3, #3
 801b2b8:	2b00      	cmp	r3, #0
 801b2ba:	d001      	beq.n	801b2c0 <tcp_output+0x2c8>
 801b2bc:	2301      	movs	r3, #1
 801b2be:	e000      	b.n	801b2c2 <tcp_output+0x2ca>
 801b2c0:	2300      	movs	r3, #0
 801b2c2:	4423      	add	r3, r4
 801b2c4:	2b00      	cmp	r3, #0
 801b2c6:	d049      	beq.n	801b35c <tcp_output+0x364>
      seg->next = NULL;
 801b2c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b2ca:	2200      	movs	r2, #0
 801b2cc:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801b2ce:	687b      	ldr	r3, [r7, #4]
 801b2d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b2d2:	2b00      	cmp	r3, #0
 801b2d4:	d105      	bne.n	801b2e2 <tcp_output+0x2ea>
        pcb->unacked = seg;
 801b2d6:	687b      	ldr	r3, [r7, #4]
 801b2d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b2da:	66da      	str	r2, [r3, #108]	@ 0x6c
        useg = seg;
 801b2dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b2de:	623b      	str	r3, [r7, #32]
 801b2e0:	e03f      	b.n	801b362 <tcp_output+0x36a>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801b2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b2e4:	68db      	ldr	r3, [r3, #12]
 801b2e6:	685b      	ldr	r3, [r3, #4]
 801b2e8:	4618      	mov	r0, r3
 801b2ea:	f7f9 fa90 	bl	801480e <lwip_htonl>
 801b2ee:	4604      	mov	r4, r0
 801b2f0:	6a3b      	ldr	r3, [r7, #32]
 801b2f2:	68db      	ldr	r3, [r3, #12]
 801b2f4:	685b      	ldr	r3, [r3, #4]
 801b2f6:	4618      	mov	r0, r3
 801b2f8:	f7f9 fa89 	bl	801480e <lwip_htonl>
 801b2fc:	4603      	mov	r3, r0
 801b2fe:	1ae3      	subs	r3, r4, r3
 801b300:	2b00      	cmp	r3, #0
 801b302:	da24      	bge.n	801b34e <tcp_output+0x356>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801b304:	687b      	ldr	r3, [r7, #4]
 801b306:	336c      	adds	r3, #108	@ 0x6c
 801b308:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801b30a:	e002      	b.n	801b312 <tcp_output+0x31a>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 801b30c:	69fb      	ldr	r3, [r7, #28]
 801b30e:	681b      	ldr	r3, [r3, #0]
 801b310:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801b312:	69fb      	ldr	r3, [r7, #28]
 801b314:	681b      	ldr	r3, [r3, #0]
 801b316:	2b00      	cmp	r3, #0
 801b318:	d011      	beq.n	801b33e <tcp_output+0x346>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801b31a:	69fb      	ldr	r3, [r7, #28]
 801b31c:	681b      	ldr	r3, [r3, #0]
 801b31e:	68db      	ldr	r3, [r3, #12]
 801b320:	685b      	ldr	r3, [r3, #4]
 801b322:	4618      	mov	r0, r3
 801b324:	f7f9 fa73 	bl	801480e <lwip_htonl>
 801b328:	4604      	mov	r4, r0
 801b32a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b32c:	68db      	ldr	r3, [r3, #12]
 801b32e:	685b      	ldr	r3, [r3, #4]
 801b330:	4618      	mov	r0, r3
 801b332:	f7f9 fa6c 	bl	801480e <lwip_htonl>
 801b336:	4603      	mov	r3, r0
 801b338:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801b33a:	2b00      	cmp	r3, #0
 801b33c:	dbe6      	blt.n	801b30c <tcp_output+0x314>
          }
          seg->next = (*cur_seg);
 801b33e:	69fb      	ldr	r3, [r7, #28]
 801b340:	681a      	ldr	r2, [r3, #0]
 801b342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b344:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801b346:	69fb      	ldr	r3, [r7, #28]
 801b348:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b34a:	601a      	str	r2, [r3, #0]
 801b34c:	e009      	b.n	801b362 <tcp_output+0x36a>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801b34e:	6a3b      	ldr	r3, [r7, #32]
 801b350:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b352:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801b354:	6a3b      	ldr	r3, [r7, #32]
 801b356:	681b      	ldr	r3, [r3, #0]
 801b358:	623b      	str	r3, [r7, #32]
 801b35a:	e002      	b.n	801b362 <tcp_output+0x36a>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801b35c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b35e:	f7fc f8d5 	bl	801750c <tcp_seg_free>
    }
    seg = pcb->unsent;
 801b362:	687b      	ldr	r3, [r7, #4]
 801b364:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b366:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801b368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b36a:	2b00      	cmp	r3, #0
 801b36c:	d015      	beq.n	801b39a <tcp_output+0x3a2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801b36e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b370:	68db      	ldr	r3, [r3, #12]
 801b372:	685b      	ldr	r3, [r3, #4]
 801b374:	4618      	mov	r0, r3
 801b376:	f7f9 fa4a 	bl	801480e <lwip_htonl>
 801b37a:	4602      	mov	r2, r0
 801b37c:	687b      	ldr	r3, [r7, #4]
 801b37e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b380:	1ad3      	subs	r3, r2, r3
 801b382:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b384:	8912      	ldrh	r2, [r2, #8]
 801b386:	4413      	add	r3, r2
  while (seg != NULL &&
 801b388:	69ba      	ldr	r2, [r7, #24]
 801b38a:	429a      	cmp	r2, r3
 801b38c:	f4bf aede 	bcs.w	801b14c <tcp_output+0x154>
  }
output_done:
 801b390:	e003      	b.n	801b39a <tcp_output+0x3a2>
    goto output_done;
 801b392:	bf00      	nop
 801b394:	e002      	b.n	801b39c <tcp_output+0x3a4>
      break;
 801b396:	bf00      	nop
 801b398:	e000      	b.n	801b39c <tcp_output+0x3a4>
output_done:
 801b39a:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801b39c:	687b      	ldr	r3, [r7, #4]
 801b39e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b3a0:	2b00      	cmp	r3, #0
 801b3a2:	d103      	bne.n	801b3ac <tcp_output+0x3b4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801b3a4:	687b      	ldr	r3, [r7, #4]
 801b3a6:	2200      	movs	r2, #0
 801b3a8:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 801b3ac:	687b      	ldr	r3, [r7, #4]
 801b3ae:	7e9b      	ldrb	r3, [r3, #26]
 801b3b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801b3b4:	b2da      	uxtb	r2, r3
 801b3b6:	687b      	ldr	r3, [r7, #4]
 801b3b8:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 801b3ba:	2300      	movs	r3, #0
}
 801b3bc:	4618      	mov	r0, r3
 801b3be:	3728      	adds	r7, #40	@ 0x28
 801b3c0:	46bd      	mov	sp, r7
 801b3c2:	bdb0      	pop	{r4, r5, r7, pc}

0801b3c4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801b3c4:	b5b0      	push	{r4, r5, r7, lr}
 801b3c6:	b08c      	sub	sp, #48	@ 0x30
 801b3c8:	af04      	add	r7, sp, #16
 801b3ca:	60f8      	str	r0, [r7, #12]
 801b3cc:	60b9      	str	r1, [r7, #8]
 801b3ce:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 801b3d0:	68fb      	ldr	r3, [r7, #12]
 801b3d2:	685b      	ldr	r3, [r3, #4]
 801b3d4:	89db      	ldrh	r3, [r3, #14]
 801b3d6:	2b01      	cmp	r3, #1
 801b3d8:	d001      	beq.n	801b3de <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 801b3da:	2300      	movs	r3, #0
 801b3dc:	e09c      	b.n	801b518 <tcp_output_segment+0x154>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801b3de:	68bb      	ldr	r3, [r7, #8]
 801b3e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b3e2:	68fb      	ldr	r3, [r7, #12]
 801b3e4:	68dc      	ldr	r4, [r3, #12]
 801b3e6:	4610      	mov	r0, r2
 801b3e8:	f7f9 fa11 	bl	801480e <lwip_htonl>
 801b3ec:	4603      	mov	r3, r0
 801b3ee:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801b3f0:	68bb      	ldr	r3, [r7, #8]
 801b3f2:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801b3f4:	68fb      	ldr	r3, [r7, #12]
 801b3f6:	68dc      	ldr	r4, [r3, #12]
 801b3f8:	4610      	mov	r0, r2
 801b3fa:	f7f9 f9fb 	bl	80147f4 <lwip_htons>
 801b3fe:	4603      	mov	r3, r0
 801b400:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801b402:	68bb      	ldr	r3, [r7, #8]
 801b404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b406:	68ba      	ldr	r2, [r7, #8]
 801b408:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801b40a:	441a      	add	r2, r3
 801b40c:	68bb      	ldr	r3, [r7, #8]
 801b40e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801b410:	68fb      	ldr	r3, [r7, #12]
 801b412:	68db      	ldr	r3, [r3, #12]
 801b414:	3314      	adds	r3, #20
 801b416:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801b418:	68fb      	ldr	r3, [r7, #12]
 801b41a:	7a9b      	ldrb	r3, [r3, #10]
 801b41c:	f003 0301 	and.w	r3, r3, #1
 801b420:	2b00      	cmp	r3, #0
 801b422:	d014      	beq.n	801b44e <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 801b424:	68bb      	ldr	r3, [r7, #8]
 801b426:	3304      	adds	r3, #4
 801b428:	4619      	mov	r1, r3
 801b42a:	f44f 7006 	mov.w	r0, #536	@ 0x218
 801b42e:	f7fc fbc9 	bl	8017bc4 <tcp_eff_send_mss_impl>
 801b432:	4603      	mov	r3, r0
 801b434:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801b436:	8b7b      	ldrh	r3, [r7, #26]
 801b438:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 801b43c:	4618      	mov	r0, r3
 801b43e:	f7f9 f9e6 	bl	801480e <lwip_htonl>
 801b442:	4602      	mov	r2, r0
 801b444:	69fb      	ldr	r3, [r7, #28]
 801b446:	601a      	str	r2, [r3, #0]
    opts += 1;
 801b448:	69fb      	ldr	r3, [r7, #28]
 801b44a:	3304      	adds	r3, #4
 801b44c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801b44e:	68bb      	ldr	r3, [r7, #8]
 801b450:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801b454:	2b00      	cmp	r3, #0
 801b456:	da02      	bge.n	801b45e <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 801b458:	68bb      	ldr	r3, [r7, #8]
 801b45a:	2200      	movs	r2, #0
 801b45c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 801b45e:	68bb      	ldr	r3, [r7, #8]
 801b460:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b462:	2b00      	cmp	r3, #0
 801b464:	d10c      	bne.n	801b480 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 801b466:	4b2e      	ldr	r3, [pc, #184]	@ (801b520 <tcp_output_segment+0x15c>)
 801b468:	681a      	ldr	r2, [r3, #0]
 801b46a:	68bb      	ldr	r3, [r7, #8]
 801b46c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801b46e:	68fb      	ldr	r3, [r7, #12]
 801b470:	68db      	ldr	r3, [r3, #12]
 801b472:	685b      	ldr	r3, [r3, #4]
 801b474:	4618      	mov	r0, r3
 801b476:	f7f9 f9ca 	bl	801480e <lwip_htonl>
 801b47a:	4602      	mov	r2, r0
 801b47c:	68bb      	ldr	r3, [r7, #8]
 801b47e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801b480:	68fb      	ldr	r3, [r7, #12]
 801b482:	68da      	ldr	r2, [r3, #12]
 801b484:	68fb      	ldr	r3, [r7, #12]
 801b486:	685b      	ldr	r3, [r3, #4]
 801b488:	685b      	ldr	r3, [r3, #4]
 801b48a:	1ad3      	subs	r3, r2, r3
 801b48c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
 801b48e:	8b3b      	ldrh	r3, [r7, #24]
 801b490:	2b00      	cmp	r3, #0
 801b492:	d106      	bne.n	801b4a2 <tcp_output_segment+0xde>
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
 801b494:	4b23      	ldr	r3, [pc, #140]	@ (801b524 <tcp_output_segment+0x160>)
 801b496:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 801b49a:	3301      	adds	r3, #1
 801b49c:	4a21      	ldr	r2, [pc, #132]	@ (801b524 <tcp_output_segment+0x160>)
 801b49e:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128
  }

  seg->p->len -= len;
 801b4a2:	68fb      	ldr	r3, [r7, #12]
 801b4a4:	685b      	ldr	r3, [r3, #4]
 801b4a6:	8959      	ldrh	r1, [r3, #10]
 801b4a8:	68fb      	ldr	r3, [r7, #12]
 801b4aa:	685b      	ldr	r3, [r3, #4]
 801b4ac:	8b3a      	ldrh	r2, [r7, #24]
 801b4ae:	1a8a      	subs	r2, r1, r2
 801b4b0:	b292      	uxth	r2, r2
 801b4b2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801b4b4:	68fb      	ldr	r3, [r7, #12]
 801b4b6:	685b      	ldr	r3, [r3, #4]
 801b4b8:	8919      	ldrh	r1, [r3, #8]
 801b4ba:	68fb      	ldr	r3, [r7, #12]
 801b4bc:	685b      	ldr	r3, [r3, #4]
 801b4be:	8b3a      	ldrh	r2, [r7, #24]
 801b4c0:	1a8a      	subs	r2, r1, r2
 801b4c2:	b292      	uxth	r2, r2
 801b4c4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801b4c6:	68fb      	ldr	r3, [r7, #12]
 801b4c8:	685b      	ldr	r3, [r3, #4]
 801b4ca:	68fa      	ldr	r2, [r7, #12]
 801b4cc:	68d2      	ldr	r2, [r2, #12]
 801b4ce:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801b4d0:	68fb      	ldr	r3, [r7, #12]
 801b4d2:	68db      	ldr	r3, [r3, #12]
 801b4d4:	2200      	movs	r2, #0
 801b4d6:	741a      	strb	r2, [r3, #16]
 801b4d8:	2200      	movs	r2, #0
 801b4da:	745a      	strb	r2, [r3, #17]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
      seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 801b4dc:	4b11      	ldr	r3, [pc, #68]	@ (801b524 <tcp_output_segment+0x160>)
 801b4de:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 801b4e2:	3301      	adds	r3, #1
 801b4e4:	b29a      	uxth	r2, r3
 801b4e6:	4b0f      	ldr	r3, [pc, #60]	@ (801b524 <tcp_output_segment+0x160>)
 801b4e8:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801b4ec:	68fb      	ldr	r3, [r7, #12]
 801b4ee:	6858      	ldr	r0, [r3, #4]
 801b4f0:	68b9      	ldr	r1, [r7, #8]
 801b4f2:	68bb      	ldr	r3, [r7, #8]
 801b4f4:	1d1c      	adds	r4, r3, #4
 801b4f6:	68bb      	ldr	r3, [r7, #8]
 801b4f8:	7a9d      	ldrb	r5, [r3, #10]
 801b4fa:	68bb      	ldr	r3, [r7, #8]
 801b4fc:	7a5b      	ldrb	r3, [r3, #9]
 801b4fe:	687a      	ldr	r2, [r7, #4]
 801b500:	9202      	str	r2, [sp, #8]
 801b502:	2206      	movs	r2, #6
 801b504:	9201      	str	r2, [sp, #4]
 801b506:	9300      	str	r3, [sp, #0]
 801b508:	462b      	mov	r3, r5
 801b50a:	4622      	mov	r2, r4
 801b50c:	f004 fb7e 	bl	801fc0c <ip4_output_if>
 801b510:	4603      	mov	r3, r0
 801b512:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 801b514:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b518:	4618      	mov	r0, r3
 801b51a:	3720      	adds	r7, #32
 801b51c:	46bd      	mov	sp, r7
 801b51e:	bdb0      	pop	{r4, r5, r7, pc}
 801b520:	2000c020 	.word	0x2000c020
 801b524:	2000be88 	.word	0x2000be88

0801b528 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 801b528:	b580      	push	{r7, lr}
 801b52a:	b08c      	sub	sp, #48	@ 0x30
 801b52c:	af04      	add	r7, sp, #16
 801b52e:	60f8      	str	r0, [r7, #12]
 801b530:	60b9      	str	r1, [r7, #8]
 801b532:	607a      	str	r2, [r7, #4]
 801b534:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 801b536:	2200      	movs	r2, #0
 801b538:	2114      	movs	r1, #20
 801b53a:	2001      	movs	r0, #1
 801b53c:	f7fa f83a 	bl	80155b4 <pbuf_alloc>
 801b540:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 801b542:	69fb      	ldr	r3, [r7, #28]
 801b544:	2b00      	cmp	r3, #0
 801b546:	d06a      	beq.n	801b61e <tcp_rst+0xf6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801b548:	69fb      	ldr	r3, [r7, #28]
 801b54a:	895b      	ldrh	r3, [r3, #10]
 801b54c:	2b13      	cmp	r3, #19
 801b54e:	d806      	bhi.n	801b55e <tcp_rst+0x36>
 801b550:	4b35      	ldr	r3, [pc, #212]	@ (801b628 <tcp_rst+0x100>)
 801b552:	f240 524c 	movw	r2, #1356	@ 0x54c
 801b556:	4935      	ldr	r1, [pc, #212]	@ (801b62c <tcp_rst+0x104>)
 801b558:	4835      	ldr	r0, [pc, #212]	@ (801b630 <tcp_rst+0x108>)
 801b55a:	f006 fb95 	bl	8021c88 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 801b55e:	69fb      	ldr	r3, [r7, #28]
 801b560:	685b      	ldr	r3, [r3, #4]
 801b562:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 801b564:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801b566:	4618      	mov	r0, r3
 801b568:	f7f9 f944 	bl	80147f4 <lwip_htons>
 801b56c:	4603      	mov	r3, r0
 801b56e:	461a      	mov	r2, r3
 801b570:	69bb      	ldr	r3, [r7, #24]
 801b572:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 801b574:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801b576:	4618      	mov	r0, r3
 801b578:	f7f9 f93c 	bl	80147f4 <lwip_htons>
 801b57c:	4603      	mov	r3, r0
 801b57e:	461a      	mov	r2, r3
 801b580:	69bb      	ldr	r3, [r7, #24]
 801b582:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 801b584:	68f8      	ldr	r0, [r7, #12]
 801b586:	f7f9 f942 	bl	801480e <lwip_htonl>
 801b58a:	4602      	mov	r2, r0
 801b58c:	69bb      	ldr	r3, [r7, #24]
 801b58e:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 801b590:	68b8      	ldr	r0, [r7, #8]
 801b592:	f7f9 f93c 	bl	801480e <lwip_htonl>
 801b596:	4602      	mov	r2, r0
 801b598:	69bb      	ldr	r3, [r7, #24]
 801b59a:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 801b59c:	f245 0014 	movw	r0, #20500	@ 0x5014
 801b5a0:	f7f9 f928 	bl	80147f4 <lwip_htons>
 801b5a4:	4603      	mov	r3, r0
 801b5a6:	461a      	mov	r2, r3
 801b5a8:	69bb      	ldr	r3, [r7, #24]
 801b5aa:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 801b5ac:	69bb      	ldr	r3, [r7, #24]
 801b5ae:	2200      	movs	r2, #0
 801b5b0:	f042 0208 	orr.w	r2, r2, #8
 801b5b4:	739a      	strb	r2, [r3, #14]
 801b5b6:	2200      	movs	r2, #0
 801b5b8:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 801b5bc:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 801b5be:	69bb      	ldr	r3, [r7, #24]
 801b5c0:	2200      	movs	r2, #0
 801b5c2:	741a      	strb	r2, [r3, #16]
 801b5c4:	2200      	movs	r2, #0
 801b5c6:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 801b5c8:	69bb      	ldr	r3, [r7, #24]
 801b5ca:	2200      	movs	r2, #0
 801b5cc:	749a      	strb	r2, [r3, #18]
 801b5ce:	2200      	movs	r2, #0
 801b5d0:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
 801b5d2:	4b18      	ldr	r3, [pc, #96]	@ (801b634 <tcp_rst+0x10c>)
 801b5d4:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 801b5d8:	3301      	adds	r3, #1
 801b5da:	b29a      	uxth	r2, r3
 801b5dc:	4b15      	ldr	r3, [pc, #84]	@ (801b634 <tcp_rst+0x10c>)
 801b5de:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
  MIB2_STATS_INC(mib2.tcpoutrsts);
 801b5e2:	4b14      	ldr	r3, [pc, #80]	@ (801b634 <tcp_rst+0x10c>)
 801b5e4:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 801b5e8:	3301      	adds	r3, #1
 801b5ea:	4a12      	ldr	r2, [pc, #72]	@ (801b634 <tcp_rst+0x10c>)
 801b5ec:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138

  netif = ip_route(local_ip, remote_ip);
 801b5f0:	6838      	ldr	r0, [r7, #0]
 801b5f2:	f004 f899 	bl	801f728 <ip4_route>
 801b5f6:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 801b5f8:	697b      	ldr	r3, [r7, #20]
 801b5fa:	2b00      	cmp	r3, #0
 801b5fc:	d00b      	beq.n	801b616 <tcp_rst+0xee>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 801b5fe:	697b      	ldr	r3, [r7, #20]
 801b600:	9302      	str	r3, [sp, #8]
 801b602:	2306      	movs	r3, #6
 801b604:	9301      	str	r3, [sp, #4]
 801b606:	2300      	movs	r3, #0
 801b608:	9300      	str	r3, [sp, #0]
 801b60a:	23ff      	movs	r3, #255	@ 0xff
 801b60c:	683a      	ldr	r2, [r7, #0]
 801b60e:	6879      	ldr	r1, [r7, #4]
 801b610:	69f8      	ldr	r0, [r7, #28]
 801b612:	f004 fafb 	bl	801fc0c <ip4_output_if>
  }
  pbuf_free(p);
 801b616:	69f8      	ldr	r0, [r7, #28]
 801b618:	f7fa fb44 	bl	8015ca4 <pbuf_free>
 801b61c:	e000      	b.n	801b620 <tcp_rst+0xf8>
    return;
 801b61e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801b620:	3720      	adds	r7, #32
 801b622:	46bd      	mov	sp, r7
 801b624:	bd80      	pop	{r7, pc}
 801b626:	bf00      	nop
 801b628:	08026838 	.word	0x08026838
 801b62c:	0802686c 	.word	0x0802686c
 801b630:	0802689c 	.word	0x0802689c
 801b634:	2000be88 	.word	0x2000be88

0801b638 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801b638:	b580      	push	{r7, lr}
 801b63a:	b084      	sub	sp, #16
 801b63c:	af00      	add	r7, sp, #0
 801b63e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 801b640:	687b      	ldr	r3, [r7, #4]
 801b642:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b644:	2b00      	cmp	r3, #0
 801b646:	d029      	beq.n	801b69c <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 801b648:	687b      	ldr	r3, [r7, #4]
 801b64a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b64c:	60fb      	str	r3, [r7, #12]
 801b64e:	e002      	b.n	801b656 <tcp_rexmit_rto+0x1e>
 801b650:	68fb      	ldr	r3, [r7, #12]
 801b652:	681b      	ldr	r3, [r3, #0]
 801b654:	60fb      	str	r3, [r7, #12]
 801b656:	68fb      	ldr	r3, [r7, #12]
 801b658:	681b      	ldr	r3, [r3, #0]
 801b65a:	2b00      	cmp	r3, #0
 801b65c:	d1f8      	bne.n	801b650 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801b65e:	687b      	ldr	r3, [r7, #4]
 801b660:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 801b662:	68fb      	ldr	r3, [r7, #12]
 801b664:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801b666:	687b      	ldr	r3, [r7, #4]
 801b668:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801b66a:	687b      	ldr	r3, [r7, #4]
 801b66c:	669a      	str	r2, [r3, #104]	@ 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801b66e:	687b      	ldr	r3, [r7, #4]
 801b670:	2200      	movs	r2, #0
 801b672:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801b674:	687b      	ldr	r3, [r7, #4]
 801b676:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801b67a:	2bff      	cmp	r3, #255	@ 0xff
 801b67c:	d007      	beq.n	801b68e <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 801b67e:	687b      	ldr	r3, [r7, #4]
 801b680:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801b684:	3301      	adds	r3, #1
 801b686:	b2da      	uxtb	r2, r3
 801b688:	687b      	ldr	r3, [r7, #4]
 801b68a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801b68e:	687b      	ldr	r3, [r7, #4]
 801b690:	2200      	movs	r2, #0
 801b692:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 801b694:	6878      	ldr	r0, [r7, #4]
 801b696:	f7ff fcaf 	bl	801aff8 <tcp_output>
 801b69a:	e000      	b.n	801b69e <tcp_rexmit_rto+0x66>
    return;
 801b69c:	bf00      	nop
}
 801b69e:	3710      	adds	r7, #16
 801b6a0:	46bd      	mov	sp, r7
 801b6a2:	bd80      	pop	{r7, pc}

0801b6a4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 801b6a4:	b590      	push	{r4, r7, lr}
 801b6a6:	b085      	sub	sp, #20
 801b6a8:	af00      	add	r7, sp, #0
 801b6aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 801b6ac:	687b      	ldr	r3, [r7, #4]
 801b6ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b6b0:	2b00      	cmp	r3, #0
 801b6b2:	d04a      	beq.n	801b74a <tcp_rexmit+0xa6>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 801b6b4:	687b      	ldr	r3, [r7, #4]
 801b6b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b6b8:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 801b6ba:	68bb      	ldr	r3, [r7, #8]
 801b6bc:	681a      	ldr	r2, [r3, #0]
 801b6be:	687b      	ldr	r3, [r7, #4]
 801b6c0:	66da      	str	r2, [r3, #108]	@ 0x6c

  cur_seg = &(pcb->unsent);
 801b6c2:	687b      	ldr	r3, [r7, #4]
 801b6c4:	3368      	adds	r3, #104	@ 0x68
 801b6c6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801b6c8:	e002      	b.n	801b6d0 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 801b6ca:	68fb      	ldr	r3, [r7, #12]
 801b6cc:	681b      	ldr	r3, [r3, #0]
 801b6ce:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801b6d0:	68fb      	ldr	r3, [r7, #12]
 801b6d2:	681b      	ldr	r3, [r3, #0]
 801b6d4:	2b00      	cmp	r3, #0
 801b6d6:	d011      	beq.n	801b6fc <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801b6d8:	68fb      	ldr	r3, [r7, #12]
 801b6da:	681b      	ldr	r3, [r3, #0]
 801b6dc:	68db      	ldr	r3, [r3, #12]
 801b6de:	685b      	ldr	r3, [r3, #4]
 801b6e0:	4618      	mov	r0, r3
 801b6e2:	f7f9 f894 	bl	801480e <lwip_htonl>
 801b6e6:	4604      	mov	r4, r0
 801b6e8:	68bb      	ldr	r3, [r7, #8]
 801b6ea:	68db      	ldr	r3, [r3, #12]
 801b6ec:	685b      	ldr	r3, [r3, #4]
 801b6ee:	4618      	mov	r0, r3
 801b6f0:	f7f9 f88d 	bl	801480e <lwip_htonl>
 801b6f4:	4603      	mov	r3, r0
 801b6f6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801b6f8:	2b00      	cmp	r3, #0
 801b6fa:	dbe6      	blt.n	801b6ca <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 801b6fc:	68fb      	ldr	r3, [r7, #12]
 801b6fe:	681a      	ldr	r2, [r3, #0]
 801b700:	68bb      	ldr	r3, [r7, #8]
 801b702:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801b704:	68fb      	ldr	r3, [r7, #12]
 801b706:	68ba      	ldr	r2, [r7, #8]
 801b708:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801b70a:	68bb      	ldr	r3, [r7, #8]
 801b70c:	681b      	ldr	r3, [r3, #0]
 801b70e:	2b00      	cmp	r3, #0
 801b710:	d103      	bne.n	801b71a <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801b712:	687b      	ldr	r3, [r7, #4]
 801b714:	2200      	movs	r2, #0
 801b716:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801b71a:	687b      	ldr	r3, [r7, #4]
 801b71c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801b720:	2bff      	cmp	r3, #255	@ 0xff
 801b722:	d007      	beq.n	801b734 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 801b724:	687b      	ldr	r3, [r7, #4]
 801b726:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801b72a:	3301      	adds	r3, #1
 801b72c:	b2da      	uxtb	r2, r3
 801b72e:	687b      	ldr	r3, [r7, #4]
 801b730:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801b734:	687b      	ldr	r3, [r7, #4]
 801b736:	2200      	movs	r2, #0
 801b738:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
 801b73a:	4b06      	ldr	r3, [pc, #24]	@ (801b754 <tcp_rexmit+0xb0>)
 801b73c:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 801b740:	3301      	adds	r3, #1
 801b742:	4a04      	ldr	r2, [pc, #16]	@ (801b754 <tcp_rexmit+0xb0>)
 801b744:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
 801b748:	e000      	b.n	801b74c <tcp_rexmit+0xa8>
    return;
 801b74a:	bf00      	nop
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 801b74c:	3714      	adds	r7, #20
 801b74e:	46bd      	mov	sp, r7
 801b750:	bd90      	pop	{r4, r7, pc}
 801b752:	bf00      	nop
 801b754:	2000be88 	.word	0x2000be88

0801b758 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801b758:	b580      	push	{r7, lr}
 801b75a:	b082      	sub	sp, #8
 801b75c:	af00      	add	r7, sp, #0
 801b75e:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801b760:	687b      	ldr	r3, [r7, #4]
 801b762:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b764:	2b00      	cmp	r3, #0
 801b766:	d041      	beq.n	801b7ec <tcp_rexmit_fast+0x94>
 801b768:	687b      	ldr	r3, [r7, #4]
 801b76a:	7e9b      	ldrb	r3, [r3, #26]
 801b76c:	f003 0304 	and.w	r3, r3, #4
 801b770:	2b00      	cmp	r3, #0
 801b772:	d13b      	bne.n	801b7ec <tcp_rexmit_fast+0x94>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 801b774:	6878      	ldr	r0, [r7, #4]
 801b776:	f7ff ff95 	bl	801b6a4 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801b77a:	687b      	ldr	r3, [r7, #4]
 801b77c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801b780:	687b      	ldr	r3, [r7, #4]
 801b782:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801b786:	4293      	cmp	r3, r2
 801b788:	bf28      	it	cs
 801b78a:	4613      	movcs	r3, r2
 801b78c:	b29b      	uxth	r3, r3
 801b78e:	0fda      	lsrs	r2, r3, #31
 801b790:	4413      	add	r3, r2
 801b792:	105b      	asrs	r3, r3, #1
 801b794:	b29a      	uxth	r2, r3
 801b796:	687b      	ldr	r3, [r7, #4]
 801b798:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 801b79c:	687b      	ldr	r3, [r7, #4]
 801b79e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801b7a2:	461a      	mov	r2, r3
 801b7a4:	687b      	ldr	r3, [r7, #4]
 801b7a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801b7a8:	005b      	lsls	r3, r3, #1
 801b7aa:	429a      	cmp	r2, r3
 801b7ac:	d206      	bcs.n	801b7bc <tcp_rexmit_fast+0x64>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 801b7ae:	687b      	ldr	r3, [r7, #4]
 801b7b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801b7b2:	005b      	lsls	r3, r3, #1
 801b7b4:	b29a      	uxth	r2, r3
 801b7b6:	687b      	ldr	r3, [r7, #4]
 801b7b8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801b7bc:	687b      	ldr	r3, [r7, #4]
 801b7be:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801b7c2:	687b      	ldr	r3, [r7, #4]
 801b7c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801b7c6:	4619      	mov	r1, r3
 801b7c8:	0049      	lsls	r1, r1, #1
 801b7ca:	440b      	add	r3, r1
 801b7cc:	b29b      	uxth	r3, r3
 801b7ce:	4413      	add	r3, r2
 801b7d0:	b29a      	uxth	r2, r3
 801b7d2:	687b      	ldr	r3, [r7, #4]
 801b7d4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->flags |= TF_INFR;
 801b7d8:	687b      	ldr	r3, [r7, #4]
 801b7da:	7e9b      	ldrb	r3, [r3, #26]
 801b7dc:	f043 0304 	orr.w	r3, r3, #4
 801b7e0:	b2da      	uxtb	r2, r3
 801b7e2:	687b      	ldr	r3, [r7, #4]
 801b7e4:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 801b7e6:	687b      	ldr	r3, [r7, #4]
 801b7e8:	2200      	movs	r2, #0
 801b7ea:	861a      	strh	r2, [r3, #48]	@ 0x30
  }
}
 801b7ec:	bf00      	nop
 801b7ee:	3708      	adds	r7, #8
 801b7f0:	46bd      	mov	sp, r7
 801b7f2:	bd80      	pop	{r7, pc}

0801b7f4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801b7f4:	b580      	push	{r7, lr}
 801b7f6:	b08a      	sub	sp, #40	@ 0x28
 801b7f8:	af04      	add	r7, sp, #16
 801b7fa:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 801b7fc:	687b      	ldr	r3, [r7, #4]
 801b7fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b800:	3b01      	subs	r3, #1
 801b802:	4618      	mov	r0, r3
 801b804:	f7f9 f803 	bl	801480e <lwip_htonl>
 801b808:	4603      	mov	r3, r0
 801b80a:	2200      	movs	r2, #0
 801b80c:	2100      	movs	r1, #0
 801b80e:	6878      	ldr	r0, [r7, #4]
 801b810:	f7fe fcf0 	bl	801a1f4 <tcp_output_alloc_header>
 801b814:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b816:	693b      	ldr	r3, [r7, #16]
 801b818:	2b00      	cmp	r3, #0
 801b81a:	d102      	bne.n	801b822 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801b81c:	f04f 33ff 	mov.w	r3, #4294967295
 801b820:	e029      	b.n	801b876 <tcp_keepalive+0x82>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801b822:	687b      	ldr	r3, [r7, #4]
 801b824:	3304      	adds	r3, #4
 801b826:	4618      	mov	r0, r3
 801b828:	f003 ff7e 	bl	801f728 <ip4_route>
 801b82c:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 801b82e:	68fb      	ldr	r3, [r7, #12]
 801b830:	2b00      	cmp	r3, #0
 801b832:	d102      	bne.n	801b83a <tcp_keepalive+0x46>
    err = ERR_RTE;
 801b834:	23fc      	movs	r3, #252	@ 0xfc
 801b836:	75fb      	strb	r3, [r7, #23]
 801b838:	e018      	b.n	801b86c <tcp_keepalive+0x78>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);
 801b83a:	4b11      	ldr	r3, [pc, #68]	@ (801b880 <tcp_keepalive+0x8c>)
 801b83c:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 801b840:	3301      	adds	r3, #1
 801b842:	b29a      	uxth	r2, r3
 801b844:	4b0e      	ldr	r3, [pc, #56]	@ (801b880 <tcp_keepalive+0x8c>)
 801b846:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 801b84a:	6879      	ldr	r1, [r7, #4]
 801b84c:	687b      	ldr	r3, [r7, #4]
 801b84e:	1d1a      	adds	r2, r3, #4
 801b850:	687b      	ldr	r3, [r7, #4]
 801b852:	7a98      	ldrb	r0, [r3, #10]
 801b854:	68fb      	ldr	r3, [r7, #12]
 801b856:	9302      	str	r3, [sp, #8]
 801b858:	2306      	movs	r3, #6
 801b85a:	9301      	str	r3, [sp, #4]
 801b85c:	2300      	movs	r3, #0
 801b85e:	9300      	str	r3, [sp, #0]
 801b860:	4603      	mov	r3, r0
 801b862:	6938      	ldr	r0, [r7, #16]
 801b864:	f004 f9d2 	bl	801fc0c <ip4_output_if>
 801b868:	4603      	mov	r3, r0
 801b86a:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 801b86c:	6938      	ldr	r0, [r7, #16]
 801b86e:	f7fa fa19 	bl	8015ca4 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801b872:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b876:	4618      	mov	r0, r3
 801b878:	3718      	adds	r7, #24
 801b87a:	46bd      	mov	sp, r7
 801b87c:	bd80      	pop	{r7, pc}
 801b87e:	bf00      	nop
 801b880:	2000be88 	.word	0x2000be88

0801b884 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801b884:	b590      	push	{r4, r7, lr}
 801b886:	b08f      	sub	sp, #60	@ 0x3c
 801b888:	af04      	add	r7, sp, #16
 801b88a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 801b88c:	687b      	ldr	r3, [r7, #4]
 801b88e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b890:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 801b892:	6a3b      	ldr	r3, [r7, #32]
 801b894:	2b00      	cmp	r3, #0
 801b896:	d102      	bne.n	801b89e <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 801b898:	687b      	ldr	r3, [r7, #4]
 801b89a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b89c:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 801b89e:	6a3b      	ldr	r3, [r7, #32]
 801b8a0:	2b00      	cmp	r3, #0
 801b8a2:	d101      	bne.n	801b8a8 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 801b8a4:	2300      	movs	r3, #0
 801b8a6:	e08d      	b.n	801b9c4 <tcp_zero_window_probe+0x140>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801b8a8:	6a3b      	ldr	r3, [r7, #32]
 801b8aa:	68db      	ldr	r3, [r3, #12]
 801b8ac:	899b      	ldrh	r3, [r3, #12]
 801b8ae:	b29b      	uxth	r3, r3
 801b8b0:	4618      	mov	r0, r3
 801b8b2:	f7f8 ff9f 	bl	80147f4 <lwip_htons>
 801b8b6:	4603      	mov	r3, r0
 801b8b8:	f003 0301 	and.w	r3, r3, #1
 801b8bc:	2b00      	cmp	r3, #0
 801b8be:	d005      	beq.n	801b8cc <tcp_zero_window_probe+0x48>
 801b8c0:	6a3b      	ldr	r3, [r7, #32]
 801b8c2:	891b      	ldrh	r3, [r3, #8]
 801b8c4:	2b00      	cmp	r3, #0
 801b8c6:	d101      	bne.n	801b8cc <tcp_zero_window_probe+0x48>
 801b8c8:	2301      	movs	r3, #1
 801b8ca:	e000      	b.n	801b8ce <tcp_zero_window_probe+0x4a>
 801b8cc:	2300      	movs	r3, #0
 801b8ce:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801b8d0:	7ffb      	ldrb	r3, [r7, #31]
 801b8d2:	2b00      	cmp	r3, #0
 801b8d4:	bf0c      	ite	eq
 801b8d6:	2301      	moveq	r3, #1
 801b8d8:	2300      	movne	r3, #0
 801b8da:	b2db      	uxtb	r3, r3
 801b8dc:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 801b8de:	6a3b      	ldr	r3, [r7, #32]
 801b8e0:	68db      	ldr	r3, [r3, #12]
 801b8e2:	685b      	ldr	r3, [r3, #4]
 801b8e4:	8bba      	ldrh	r2, [r7, #28]
 801b8e6:	2100      	movs	r1, #0
 801b8e8:	6878      	ldr	r0, [r7, #4]
 801b8ea:	f7fe fc83 	bl	801a1f4 <tcp_output_alloc_header>
 801b8ee:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801b8f0:	69bb      	ldr	r3, [r7, #24]
 801b8f2:	2b00      	cmp	r3, #0
 801b8f4:	d102      	bne.n	801b8fc <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801b8f6:	f04f 33ff 	mov.w	r3, #4294967295
 801b8fa:	e063      	b.n	801b9c4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801b8fc:	69bb      	ldr	r3, [r7, #24]
 801b8fe:	685b      	ldr	r3, [r3, #4]
 801b900:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801b902:	7ffb      	ldrb	r3, [r7, #31]
 801b904:	2b00      	cmp	r3, #0
 801b906:	d00e      	beq.n	801b926 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801b908:	697b      	ldr	r3, [r7, #20]
 801b90a:	899b      	ldrh	r3, [r3, #12]
 801b90c:	b29b      	uxth	r3, r3
 801b90e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801b912:	b29c      	uxth	r4, r3
 801b914:	2011      	movs	r0, #17
 801b916:	f7f8 ff6d 	bl	80147f4 <lwip_htons>
 801b91a:	4603      	mov	r3, r0
 801b91c:	4323      	orrs	r3, r4
 801b91e:	b29a      	uxth	r2, r3
 801b920:	697b      	ldr	r3, [r7, #20]
 801b922:	819a      	strh	r2, [r3, #12]
 801b924:	e010      	b.n	801b948 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801b926:	69bb      	ldr	r3, [r7, #24]
 801b928:	685b      	ldr	r3, [r3, #4]
 801b92a:	3314      	adds	r3, #20
 801b92c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801b92e:	6a3b      	ldr	r3, [r7, #32]
 801b930:	6858      	ldr	r0, [r3, #4]
 801b932:	6a3b      	ldr	r3, [r7, #32]
 801b934:	685b      	ldr	r3, [r3, #4]
 801b936:	891a      	ldrh	r2, [r3, #8]
 801b938:	6a3b      	ldr	r3, [r7, #32]
 801b93a:	891b      	ldrh	r3, [r3, #8]
 801b93c:	1ad3      	subs	r3, r2, r3
 801b93e:	b29b      	uxth	r3, r3
 801b940:	2201      	movs	r2, #1
 801b942:	6939      	ldr	r1, [r7, #16]
 801b944:	f7fa fbac 	bl	80160a0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801b948:	6a3b      	ldr	r3, [r7, #32]
 801b94a:	68db      	ldr	r3, [r3, #12]
 801b94c:	685b      	ldr	r3, [r3, #4]
 801b94e:	4618      	mov	r0, r3
 801b950:	f7f8 ff5d 	bl	801480e <lwip_htonl>
 801b954:	4603      	mov	r3, r0
 801b956:	3301      	adds	r3, #1
 801b958:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b95a:	687b      	ldr	r3, [r7, #4]
 801b95c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801b95e:	68fb      	ldr	r3, [r7, #12]
 801b960:	1ad3      	subs	r3, r2, r3
 801b962:	2b00      	cmp	r3, #0
 801b964:	da02      	bge.n	801b96c <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 801b966:	687b      	ldr	r3, [r7, #4]
 801b968:	68fa      	ldr	r2, [r7, #12]
 801b96a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801b96c:	687b      	ldr	r3, [r7, #4]
 801b96e:	3304      	adds	r3, #4
 801b970:	4618      	mov	r0, r3
 801b972:	f003 fed9 	bl	801f728 <ip4_route>
 801b976:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 801b978:	68bb      	ldr	r3, [r7, #8]
 801b97a:	2b00      	cmp	r3, #0
 801b97c:	d103      	bne.n	801b986 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 801b97e:	23fc      	movs	r3, #252	@ 0xfc
 801b980:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b984:	e019      	b.n	801b9ba <tcp_zero_window_probe+0x136>
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    TCP_STATS_INC(tcp.xmit);
 801b986:	4b11      	ldr	r3, [pc, #68]	@ (801b9cc <tcp_zero_window_probe+0x148>)
 801b988:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 801b98c:	3301      	adds	r3, #1
 801b98e:	b29a      	uxth	r2, r3
 801b990:	4b0e      	ldr	r3, [pc, #56]	@ (801b9cc <tcp_zero_window_probe+0x148>)
 801b992:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801b996:	6879      	ldr	r1, [r7, #4]
 801b998:	687b      	ldr	r3, [r7, #4]
 801b99a:	1d1a      	adds	r2, r3, #4
 801b99c:	687b      	ldr	r3, [r7, #4]
 801b99e:	7a98      	ldrb	r0, [r3, #10]
 801b9a0:	68bb      	ldr	r3, [r7, #8]
 801b9a2:	9302      	str	r3, [sp, #8]
 801b9a4:	2306      	movs	r3, #6
 801b9a6:	9301      	str	r3, [sp, #4]
 801b9a8:	2300      	movs	r3, #0
 801b9aa:	9300      	str	r3, [sp, #0]
 801b9ac:	4603      	mov	r3, r0
 801b9ae:	69b8      	ldr	r0, [r7, #24]
 801b9b0:	f004 f92c 	bl	801fc0c <ip4_output_if>
 801b9b4:	4603      	mov	r3, r0
 801b9b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 801b9ba:	69b8      	ldr	r0, [r7, #24]
 801b9bc:	f7fa f972 	bl	8015ca4 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801b9c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801b9c4:	4618      	mov	r0, r3
 801b9c6:	372c      	adds	r7, #44	@ 0x2c
 801b9c8:	46bd      	mov	sp, r7
 801b9ca:	bd90      	pop	{r4, r7, pc}
 801b9cc:	2000be88 	.word	0x2000be88

0801b9d0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801b9d0:	b580      	push	{r7, lr}
 801b9d2:	b082      	sub	sp, #8
 801b9d4:	af00      	add	r7, sp, #0
 801b9d6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801b9d8:	f7fa fd08 	bl	80163ec <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801b9dc:	4b0a      	ldr	r3, [pc, #40]	@ (801ba08 <tcpip_tcp_timer+0x38>)
 801b9de:	681b      	ldr	r3, [r3, #0]
 801b9e0:	2b00      	cmp	r3, #0
 801b9e2:	d103      	bne.n	801b9ec <tcpip_tcp_timer+0x1c>
 801b9e4:	4b09      	ldr	r3, [pc, #36]	@ (801ba0c <tcpip_tcp_timer+0x3c>)
 801b9e6:	681b      	ldr	r3, [r3, #0]
 801b9e8:	2b00      	cmp	r3, #0
 801b9ea:	d005      	beq.n	801b9f8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801b9ec:	2200      	movs	r2, #0
 801b9ee:	4908      	ldr	r1, [pc, #32]	@ (801ba10 <tcpip_tcp_timer+0x40>)
 801b9f0:	20fa      	movs	r0, #250	@ 0xfa
 801b9f2:	f000 f86f 	bl	801bad4 <sys_timeout>
 801b9f6:	e003      	b.n	801ba00 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801b9f8:	4b06      	ldr	r3, [pc, #24]	@ (801ba14 <tcpip_tcp_timer+0x44>)
 801b9fa:	2200      	movs	r2, #0
 801b9fc:	601a      	str	r2, [r3, #0]
  }
}
 801b9fe:	bf00      	nop
 801ba00:	bf00      	nop
 801ba02:	3708      	adds	r7, #8
 801ba04:	46bd      	mov	sp, r7
 801ba06:	bd80      	pop	{r7, pc}
 801ba08:	2000c02c 	.word	0x2000c02c
 801ba0c:	2000c030 	.word	0x2000c030
 801ba10:	0801b9d1 	.word	0x0801b9d1
 801ba14:	2000c078 	.word	0x2000c078

0801ba18 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801ba18:	b580      	push	{r7, lr}
 801ba1a:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801ba1c:	4b0a      	ldr	r3, [pc, #40]	@ (801ba48 <tcp_timer_needed+0x30>)
 801ba1e:	681b      	ldr	r3, [r3, #0]
 801ba20:	2b00      	cmp	r3, #0
 801ba22:	d10f      	bne.n	801ba44 <tcp_timer_needed+0x2c>
 801ba24:	4b09      	ldr	r3, [pc, #36]	@ (801ba4c <tcp_timer_needed+0x34>)
 801ba26:	681b      	ldr	r3, [r3, #0]
 801ba28:	2b00      	cmp	r3, #0
 801ba2a:	d103      	bne.n	801ba34 <tcp_timer_needed+0x1c>
 801ba2c:	4b08      	ldr	r3, [pc, #32]	@ (801ba50 <tcp_timer_needed+0x38>)
 801ba2e:	681b      	ldr	r3, [r3, #0]
 801ba30:	2b00      	cmp	r3, #0
 801ba32:	d007      	beq.n	801ba44 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801ba34:	4b04      	ldr	r3, [pc, #16]	@ (801ba48 <tcp_timer_needed+0x30>)
 801ba36:	2201      	movs	r2, #1
 801ba38:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801ba3a:	2200      	movs	r2, #0
 801ba3c:	4905      	ldr	r1, [pc, #20]	@ (801ba54 <tcp_timer_needed+0x3c>)
 801ba3e:	20fa      	movs	r0, #250	@ 0xfa
 801ba40:	f000 f848 	bl	801bad4 <sys_timeout>
  }
}
 801ba44:	bf00      	nop
 801ba46:	bd80      	pop	{r7, pc}
 801ba48:	2000c078 	.word	0x2000c078
 801ba4c:	2000c02c 	.word	0x2000c02c
 801ba50:	2000c030 	.word	0x2000c030
 801ba54:	0801b9d1 	.word	0x0801b9d1

0801ba58 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 801ba58:	b580      	push	{r7, lr}
 801ba5a:	b084      	sub	sp, #16
 801ba5c:	af00      	add	r7, sp, #0
 801ba5e:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 801ba60:	687b      	ldr	r3, [r7, #4]
 801ba62:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801ba64:	68fb      	ldr	r3, [r7, #12]
 801ba66:	685b      	ldr	r3, [r3, #4]
 801ba68:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 801ba6a:	68fb      	ldr	r3, [r7, #12]
 801ba6c:	681b      	ldr	r3, [r3, #0]
 801ba6e:	687a      	ldr	r2, [r7, #4]
 801ba70:	4903      	ldr	r1, [pc, #12]	@ (801ba80 <cyclic_timer+0x28>)
 801ba72:	4618      	mov	r0, r3
 801ba74:	f000 f82e 	bl	801bad4 <sys_timeout>
}
 801ba78:	bf00      	nop
 801ba7a:	3710      	adds	r7, #16
 801ba7c:	46bd      	mov	sp, r7
 801ba7e:	bd80      	pop	{r7, pc}
 801ba80:	0801ba59 	.word	0x0801ba59

0801ba84 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801ba84:	b580      	push	{r7, lr}
 801ba86:	b082      	sub	sp, #8
 801ba88:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801ba8a:	2301      	movs	r3, #1
 801ba8c:	607b      	str	r3, [r7, #4]
 801ba8e:	e00e      	b.n	801baae <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 801ba90:	4a0d      	ldr	r2, [pc, #52]	@ (801bac8 <sys_timeouts_init+0x44>)
 801ba92:	687b      	ldr	r3, [r7, #4]
 801ba94:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801ba98:	687b      	ldr	r3, [r7, #4]
 801ba9a:	00db      	lsls	r3, r3, #3
 801ba9c:	4a0a      	ldr	r2, [pc, #40]	@ (801bac8 <sys_timeouts_init+0x44>)
 801ba9e:	4413      	add	r3, r2
 801baa0:	461a      	mov	r2, r3
 801baa2:	490a      	ldr	r1, [pc, #40]	@ (801bacc <sys_timeouts_init+0x48>)
 801baa4:	f000 f816 	bl	801bad4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801baa8:	687b      	ldr	r3, [r7, #4]
 801baaa:	3301      	adds	r3, #1
 801baac:	607b      	str	r3, [r7, #4]
 801baae:	687b      	ldr	r3, [r7, #4]
 801bab0:	2b04      	cmp	r3, #4
 801bab2:	d9ed      	bls.n	801ba90 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 801bab4:	f7ef fff2 	bl	800ba9c <sys_now>
 801bab8:	4603      	mov	r3, r0
 801baba:	4a05      	ldr	r2, [pc, #20]	@ (801bad0 <sys_timeouts_init+0x4c>)
 801babc:	6013      	str	r3, [r2, #0]
}
 801babe:	bf00      	nop
 801bac0:	3708      	adds	r7, #8
 801bac2:	46bd      	mov	sp, r7
 801bac4:	bd80      	pop	{r7, pc}
 801bac6:	bf00      	nop
 801bac8:	08030ccc 	.word	0x08030ccc
 801bacc:	0801ba59 	.word	0x0801ba59
 801bad0:	2000c074 	.word	0x2000c074

0801bad4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801bad4:	b580      	push	{r7, lr}
 801bad6:	b088      	sub	sp, #32
 801bad8:	af00      	add	r7, sp, #0
 801bada:	60f8      	str	r0, [r7, #12]
 801badc:	60b9      	str	r1, [r7, #8]
 801bade:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801bae0:	2006      	movs	r0, #6
 801bae2:	f7f9 fb31 	bl	8015148 <memp_malloc>
 801bae6:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 801bae8:	697b      	ldr	r3, [r7, #20]
 801baea:	2b00      	cmp	r3, #0
 801baec:	d10a      	bne.n	801bb04 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801baee:	697b      	ldr	r3, [r7, #20]
 801baf0:	2b00      	cmp	r3, #0
 801baf2:	f040 8084 	bne.w	801bbfe <sys_timeout+0x12a>
 801baf6:	4b44      	ldr	r3, [pc, #272]	@ (801bc08 <sys_timeout+0x134>)
 801baf8:	22d4      	movs	r2, #212	@ 0xd4
 801bafa:	4944      	ldr	r1, [pc, #272]	@ (801bc0c <sys_timeout+0x138>)
 801bafc:	4844      	ldr	r0, [pc, #272]	@ (801bc10 <sys_timeout+0x13c>)
 801bafe:	f006 f8c3 	bl	8021c88 <iprintf>
    return;
 801bb02:	e07c      	b.n	801bbfe <sys_timeout+0x12a>
  }

  now = sys_now();
 801bb04:	f7ef ffca 	bl	800ba9c <sys_now>
 801bb08:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 801bb0a:	4b42      	ldr	r3, [pc, #264]	@ (801bc14 <sys_timeout+0x140>)
 801bb0c:	681b      	ldr	r3, [r3, #0]
 801bb0e:	2b00      	cmp	r3, #0
 801bb10:	d105      	bne.n	801bb1e <sys_timeout+0x4a>
    diff = 0;
 801bb12:	2300      	movs	r3, #0
 801bb14:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 801bb16:	4a40      	ldr	r2, [pc, #256]	@ (801bc18 <sys_timeout+0x144>)
 801bb18:	693b      	ldr	r3, [r7, #16]
 801bb1a:	6013      	str	r3, [r2, #0]
 801bb1c:	e004      	b.n	801bb28 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 801bb1e:	4b3e      	ldr	r3, [pc, #248]	@ (801bc18 <sys_timeout+0x144>)
 801bb20:	681b      	ldr	r3, [r3, #0]
 801bb22:	693a      	ldr	r2, [r7, #16]
 801bb24:	1ad3      	subs	r3, r2, r3
 801bb26:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 801bb28:	697b      	ldr	r3, [r7, #20]
 801bb2a:	2200      	movs	r2, #0
 801bb2c:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801bb2e:	697b      	ldr	r3, [r7, #20]
 801bb30:	68ba      	ldr	r2, [r7, #8]
 801bb32:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801bb34:	697b      	ldr	r3, [r7, #20]
 801bb36:	687a      	ldr	r2, [r7, #4]
 801bb38:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 801bb3a:	68fa      	ldr	r2, [r7, #12]
 801bb3c:	69bb      	ldr	r3, [r7, #24]
 801bb3e:	441a      	add	r2, r3
 801bb40:	697b      	ldr	r3, [r7, #20]
 801bb42:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801bb44:	4b33      	ldr	r3, [pc, #204]	@ (801bc14 <sys_timeout+0x140>)
 801bb46:	681b      	ldr	r3, [r3, #0]
 801bb48:	2b00      	cmp	r3, #0
 801bb4a:	d103      	bne.n	801bb54 <sys_timeout+0x80>
    next_timeout = timeout;
 801bb4c:	4a31      	ldr	r2, [pc, #196]	@ (801bc14 <sys_timeout+0x140>)
 801bb4e:	697b      	ldr	r3, [r7, #20]
 801bb50:	6013      	str	r3, [r2, #0]
    return;
 801bb52:	e055      	b.n	801bc00 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 801bb54:	4b2f      	ldr	r3, [pc, #188]	@ (801bc14 <sys_timeout+0x140>)
 801bb56:	681b      	ldr	r3, [r3, #0]
 801bb58:	685b      	ldr	r3, [r3, #4]
 801bb5a:	68fa      	ldr	r2, [r7, #12]
 801bb5c:	429a      	cmp	r2, r3
 801bb5e:	d20f      	bcs.n	801bb80 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 801bb60:	4b2c      	ldr	r3, [pc, #176]	@ (801bc14 <sys_timeout+0x140>)
 801bb62:	681b      	ldr	r3, [r3, #0]
 801bb64:	6859      	ldr	r1, [r3, #4]
 801bb66:	4b2b      	ldr	r3, [pc, #172]	@ (801bc14 <sys_timeout+0x140>)
 801bb68:	681b      	ldr	r3, [r3, #0]
 801bb6a:	68fa      	ldr	r2, [r7, #12]
 801bb6c:	1a8a      	subs	r2, r1, r2
 801bb6e:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 801bb70:	4b28      	ldr	r3, [pc, #160]	@ (801bc14 <sys_timeout+0x140>)
 801bb72:	681a      	ldr	r2, [r3, #0]
 801bb74:	697b      	ldr	r3, [r7, #20]
 801bb76:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801bb78:	4a26      	ldr	r2, [pc, #152]	@ (801bc14 <sys_timeout+0x140>)
 801bb7a:	697b      	ldr	r3, [r7, #20]
 801bb7c:	6013      	str	r3, [r2, #0]
 801bb7e:	e03f      	b.n	801bc00 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801bb80:	4b24      	ldr	r3, [pc, #144]	@ (801bc14 <sys_timeout+0x140>)
 801bb82:	681b      	ldr	r3, [r3, #0]
 801bb84:	61fb      	str	r3, [r7, #28]
 801bb86:	e036      	b.n	801bbf6 <sys_timeout+0x122>
      timeout->time -= t->time;
 801bb88:	697b      	ldr	r3, [r7, #20]
 801bb8a:	685a      	ldr	r2, [r3, #4]
 801bb8c:	69fb      	ldr	r3, [r7, #28]
 801bb8e:	685b      	ldr	r3, [r3, #4]
 801bb90:	1ad2      	subs	r2, r2, r3
 801bb92:	697b      	ldr	r3, [r7, #20]
 801bb94:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 801bb96:	69fb      	ldr	r3, [r7, #28]
 801bb98:	681b      	ldr	r3, [r3, #0]
 801bb9a:	2b00      	cmp	r3, #0
 801bb9c:	d006      	beq.n	801bbac <sys_timeout+0xd8>
 801bb9e:	69fb      	ldr	r3, [r7, #28]
 801bba0:	681b      	ldr	r3, [r3, #0]
 801bba2:	685a      	ldr	r2, [r3, #4]
 801bba4:	697b      	ldr	r3, [r7, #20]
 801bba6:	685b      	ldr	r3, [r3, #4]
 801bba8:	429a      	cmp	r2, r3
 801bbaa:	d921      	bls.n	801bbf0 <sys_timeout+0x11c>
        if (t->next != NULL) {
 801bbac:	69fb      	ldr	r3, [r7, #28]
 801bbae:	681b      	ldr	r3, [r3, #0]
 801bbb0:	2b00      	cmp	r3, #0
 801bbb2:	d009      	beq.n	801bbc8 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 801bbb4:	69fb      	ldr	r3, [r7, #28]
 801bbb6:	681b      	ldr	r3, [r3, #0]
 801bbb8:	6859      	ldr	r1, [r3, #4]
 801bbba:	697b      	ldr	r3, [r7, #20]
 801bbbc:	685a      	ldr	r2, [r3, #4]
 801bbbe:	69fb      	ldr	r3, [r7, #28]
 801bbc0:	681b      	ldr	r3, [r3, #0]
 801bbc2:	1a8a      	subs	r2, r1, r2
 801bbc4:	605a      	str	r2, [r3, #4]
 801bbc6:	e00b      	b.n	801bbe0 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 801bbc8:	697b      	ldr	r3, [r7, #20]
 801bbca:	685b      	ldr	r3, [r3, #4]
 801bbcc:	68fa      	ldr	r2, [r7, #12]
 801bbce:	429a      	cmp	r2, r3
 801bbd0:	d206      	bcs.n	801bbe0 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 801bbd2:	4b10      	ldr	r3, [pc, #64]	@ (801bc14 <sys_timeout+0x140>)
 801bbd4:	681b      	ldr	r3, [r3, #0]
 801bbd6:	685a      	ldr	r2, [r3, #4]
 801bbd8:	68fb      	ldr	r3, [r7, #12]
 801bbda:	441a      	add	r2, r3
 801bbdc:	697b      	ldr	r3, [r7, #20]
 801bbde:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 801bbe0:	69fb      	ldr	r3, [r7, #28]
 801bbe2:	681a      	ldr	r2, [r3, #0]
 801bbe4:	697b      	ldr	r3, [r7, #20]
 801bbe6:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801bbe8:	69fb      	ldr	r3, [r7, #28]
 801bbea:	697a      	ldr	r2, [r7, #20]
 801bbec:	601a      	str	r2, [r3, #0]
        break;
 801bbee:	e007      	b.n	801bc00 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 801bbf0:	69fb      	ldr	r3, [r7, #28]
 801bbf2:	681b      	ldr	r3, [r3, #0]
 801bbf4:	61fb      	str	r3, [r7, #28]
 801bbf6:	69fb      	ldr	r3, [r7, #28]
 801bbf8:	2b00      	cmp	r3, #0
 801bbfa:	d1c5      	bne.n	801bb88 <sys_timeout+0xb4>
 801bbfc:	e000      	b.n	801bc00 <sys_timeout+0x12c>
    return;
 801bbfe:	bf00      	nop
      }
    }
  }
}
 801bc00:	3720      	adds	r7, #32
 801bc02:	46bd      	mov	sp, r7
 801bc04:	bd80      	pop	{r7, pc}
 801bc06:	bf00      	nop
 801bc08:	08026c7c 	.word	0x08026c7c
 801bc0c:	08026cb0 	.word	0x08026cb0
 801bc10:	08026cf0 	.word	0x08026cf0
 801bc14:	2000c070 	.word	0x2000c070
 801bc18:	2000c074 	.word	0x2000c074

0801bc1c <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 801bc1c:	b580      	push	{r7, lr}
 801bc1e:	b086      	sub	sp, #24
 801bc20:	af00      	add	r7, sp, #0
  if (next_timeout) {
 801bc22:	4b24      	ldr	r3, [pc, #144]	@ (801bcb4 <sys_check_timeouts+0x98>)
 801bc24:	681b      	ldr	r3, [r3, #0]
 801bc26:	2b00      	cmp	r3, #0
 801bc28:	d040      	beq.n	801bcac <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 801bc2a:	f7ef ff37 	bl	800ba9c <sys_now>
 801bc2e:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 801bc30:	4b21      	ldr	r3, [pc, #132]	@ (801bcb8 <sys_check_timeouts+0x9c>)
 801bc32:	681b      	ldr	r3, [r3, #0]
 801bc34:	68fa      	ldr	r2, [r7, #12]
 801bc36:	1ad3      	subs	r3, r2, r3
 801bc38:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 801bc3a:	4b20      	ldr	r3, [pc, #128]	@ (801bcbc <sys_check_timeouts+0xa0>)
 801bc3c:	781b      	ldrb	r3, [r3, #0]
 801bc3e:	b2db      	uxtb	r3, r3
 801bc40:	2b00      	cmp	r3, #0
 801bc42:	d001      	beq.n	801bc48 <sys_check_timeouts+0x2c>
 801bc44:	f7f9 fc86 	bl	8015554 <pbuf_free_ooseq>
      had_one = 0;
 801bc48:	2300      	movs	r3, #0
 801bc4a:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 801bc4c:	4b19      	ldr	r3, [pc, #100]	@ (801bcb4 <sys_check_timeouts+0x98>)
 801bc4e:	681b      	ldr	r3, [r3, #0]
 801bc50:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 801bc52:	68bb      	ldr	r3, [r7, #8]
 801bc54:	2b00      	cmp	r3, #0
 801bc56:	d026      	beq.n	801bca6 <sys_check_timeouts+0x8a>
 801bc58:	68bb      	ldr	r3, [r7, #8]
 801bc5a:	685b      	ldr	r3, [r3, #4]
 801bc5c:	697a      	ldr	r2, [r7, #20]
 801bc5e:	429a      	cmp	r2, r3
 801bc60:	d321      	bcc.n	801bca6 <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 801bc62:	2301      	movs	r3, #1
 801bc64:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 801bc66:	68bb      	ldr	r3, [r7, #8]
 801bc68:	685a      	ldr	r2, [r3, #4]
 801bc6a:	4b13      	ldr	r3, [pc, #76]	@ (801bcb8 <sys_check_timeouts+0x9c>)
 801bc6c:	681b      	ldr	r3, [r3, #0]
 801bc6e:	4413      	add	r3, r2
 801bc70:	4a11      	ldr	r2, [pc, #68]	@ (801bcb8 <sys_check_timeouts+0x9c>)
 801bc72:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 801bc74:	68bb      	ldr	r3, [r7, #8]
 801bc76:	685b      	ldr	r3, [r3, #4]
 801bc78:	697a      	ldr	r2, [r7, #20]
 801bc7a:	1ad3      	subs	r3, r2, r3
 801bc7c:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 801bc7e:	68bb      	ldr	r3, [r7, #8]
 801bc80:	681b      	ldr	r3, [r3, #0]
 801bc82:	4a0c      	ldr	r2, [pc, #48]	@ (801bcb4 <sys_check_timeouts+0x98>)
 801bc84:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 801bc86:	68bb      	ldr	r3, [r7, #8]
 801bc88:	689b      	ldr	r3, [r3, #8]
 801bc8a:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 801bc8c:	68bb      	ldr	r3, [r7, #8]
 801bc8e:	68db      	ldr	r3, [r3, #12]
 801bc90:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801bc92:	68b9      	ldr	r1, [r7, #8]
 801bc94:	2006      	movs	r0, #6
 801bc96:	f7f9 faa9 	bl	80151ec <memp_free>
        if (handler != NULL) {
 801bc9a:	687b      	ldr	r3, [r7, #4]
 801bc9c:	2b00      	cmp	r3, #0
 801bc9e:	d002      	beq.n	801bca6 <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 801bca0:	687b      	ldr	r3, [r7, #4]
 801bca2:	6838      	ldr	r0, [r7, #0]
 801bca4:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 801bca6:	7cfb      	ldrb	r3, [r7, #19]
 801bca8:	2b00      	cmp	r3, #0
 801bcaa:	d1c6      	bne.n	801bc3a <sys_check_timeouts+0x1e>
  }
}
 801bcac:	bf00      	nop
 801bcae:	3718      	adds	r7, #24
 801bcb0:	46bd      	mov	sp, r7
 801bcb2:	bd80      	pop	{r7, pc}
 801bcb4:	2000c070 	.word	0x2000c070
 801bcb8:	2000c074 	.word	0x2000c074
 801bcbc:	2000be85 	.word	0x2000be85

0801bcc0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801bcc0:	b480      	push	{r7}
 801bcc2:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 801bcc4:	bf00      	nop
 801bcc6:	46bd      	mov	sp, r7
 801bcc8:	bc80      	pop	{r7}
 801bcca:	4770      	bx	lr

0801bccc <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801bccc:	b480      	push	{r7}
 801bcce:	b083      	sub	sp, #12
 801bcd0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801bcd2:	2300      	movs	r3, #0
 801bcd4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801bcd6:	4b17      	ldr	r3, [pc, #92]	@ (801bd34 <udp_new_port+0x68>)
 801bcd8:	881b      	ldrh	r3, [r3, #0]
 801bcda:	1c5a      	adds	r2, r3, #1
 801bcdc:	b291      	uxth	r1, r2
 801bcde:	4a15      	ldr	r2, [pc, #84]	@ (801bd34 <udp_new_port+0x68>)
 801bce0:	8011      	strh	r1, [r2, #0]
 801bce2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801bce6:	4293      	cmp	r3, r2
 801bce8:	d103      	bne.n	801bcf2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801bcea:	4b12      	ldr	r3, [pc, #72]	@ (801bd34 <udp_new_port+0x68>)
 801bcec:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801bcf0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801bcf2:	4b11      	ldr	r3, [pc, #68]	@ (801bd38 <udp_new_port+0x6c>)
 801bcf4:	681b      	ldr	r3, [r3, #0]
 801bcf6:	603b      	str	r3, [r7, #0]
 801bcf8:	e011      	b.n	801bd1e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801bcfa:	683b      	ldr	r3, [r7, #0]
 801bcfc:	8a5a      	ldrh	r2, [r3, #18]
 801bcfe:	4b0d      	ldr	r3, [pc, #52]	@ (801bd34 <udp_new_port+0x68>)
 801bd00:	881b      	ldrh	r3, [r3, #0]
 801bd02:	429a      	cmp	r2, r3
 801bd04:	d108      	bne.n	801bd18 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801bd06:	88fb      	ldrh	r3, [r7, #6]
 801bd08:	3301      	adds	r3, #1
 801bd0a:	80fb      	strh	r3, [r7, #6]
 801bd0c:	88fb      	ldrh	r3, [r7, #6]
 801bd0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801bd12:	d3e0      	bcc.n	801bcd6 <udp_new_port+0xa>
        return 0;
 801bd14:	2300      	movs	r3, #0
 801bd16:	e007      	b.n	801bd28 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801bd18:	683b      	ldr	r3, [r7, #0]
 801bd1a:	68db      	ldr	r3, [r3, #12]
 801bd1c:	603b      	str	r3, [r7, #0]
 801bd1e:	683b      	ldr	r3, [r7, #0]
 801bd20:	2b00      	cmp	r3, #0
 801bd22:	d1ea      	bne.n	801bcfa <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801bd24:	4b03      	ldr	r3, [pc, #12]	@ (801bd34 <udp_new_port+0x68>)
 801bd26:	881b      	ldrh	r3, [r3, #0]
}
 801bd28:	4618      	mov	r0, r3
 801bd2a:	370c      	adds	r7, #12
 801bd2c:	46bd      	mov	sp, r7
 801bd2e:	bc80      	pop	{r7}
 801bd30:	4770      	bx	lr
 801bd32:	bf00      	nop
 801bd34:	20000124 	.word	0x20000124
 801bd38:	2000c07c 	.word	0x2000c07c

0801bd3c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801bd3c:	b480      	push	{r7}
 801bd3e:	b085      	sub	sp, #20
 801bd40:	af00      	add	r7, sp, #0
 801bd42:	60f8      	str	r0, [r7, #12]
 801bd44:	60b9      	str	r1, [r7, #8]
 801bd46:	4613      	mov	r3, r2
 801bd48:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801bd4a:	79fb      	ldrb	r3, [r7, #7]
 801bd4c:	2b00      	cmp	r3, #0
 801bd4e:	d018      	beq.n	801bd82 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801bd50:	68fb      	ldr	r3, [r7, #12]
 801bd52:	2b00      	cmp	r3, #0
 801bd54:	d013      	beq.n	801bd7e <udp_input_local_match+0x42>
 801bd56:	68fb      	ldr	r3, [r7, #12]
 801bd58:	681b      	ldr	r3, [r3, #0]
 801bd5a:	2b00      	cmp	r3, #0
 801bd5c:	d00f      	beq.n	801bd7e <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801bd5e:	4b13      	ldr	r3, [pc, #76]	@ (801bdac <udp_input_local_match+0x70>)
 801bd60:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801bd62:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bd66:	d00a      	beq.n	801bd7e <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801bd68:	68fb      	ldr	r3, [r7, #12]
 801bd6a:	681a      	ldr	r2, [r3, #0]
 801bd6c:	4b0f      	ldr	r3, [pc, #60]	@ (801bdac <udp_input_local_match+0x70>)
 801bd6e:	695b      	ldr	r3, [r3, #20]
 801bd70:	405a      	eors	r2, r3
 801bd72:	68bb      	ldr	r3, [r7, #8]
 801bd74:	3308      	adds	r3, #8
 801bd76:	681b      	ldr	r3, [r3, #0]
 801bd78:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801bd7a:	2b00      	cmp	r3, #0
 801bd7c:	d110      	bne.n	801bda0 <udp_input_local_match+0x64>
          return 1;
 801bd7e:	2301      	movs	r3, #1
 801bd80:	e00f      	b.n	801bda2 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801bd82:	68fb      	ldr	r3, [r7, #12]
 801bd84:	2b00      	cmp	r3, #0
 801bd86:	d009      	beq.n	801bd9c <udp_input_local_match+0x60>
 801bd88:	68fb      	ldr	r3, [r7, #12]
 801bd8a:	681b      	ldr	r3, [r3, #0]
 801bd8c:	2b00      	cmp	r3, #0
 801bd8e:	d005      	beq.n	801bd9c <udp_input_local_match+0x60>
 801bd90:	68fb      	ldr	r3, [r7, #12]
 801bd92:	681a      	ldr	r2, [r3, #0]
 801bd94:	4b05      	ldr	r3, [pc, #20]	@ (801bdac <udp_input_local_match+0x70>)
 801bd96:	695b      	ldr	r3, [r3, #20]
 801bd98:	429a      	cmp	r2, r3
 801bd9a:	d101      	bne.n	801bda0 <udp_input_local_match+0x64>
      return 1;
 801bd9c:	2301      	movs	r3, #1
 801bd9e:	e000      	b.n	801bda2 <udp_input_local_match+0x66>
    }
  }

  return 0;
 801bda0:	2300      	movs	r3, #0
}
 801bda2:	4618      	mov	r0, r3
 801bda4:	3714      	adds	r7, #20
 801bda6:	46bd      	mov	sp, r7
 801bda8:	bc80      	pop	{r7}
 801bdaa:	4770      	bx	lr
 801bdac:	200088a0 	.word	0x200088a0

0801bdb0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801bdb0:	b590      	push	{r4, r7, lr}
 801bdb2:	b08d      	sub	sp, #52	@ 0x34
 801bdb4:	af02      	add	r7, sp, #8
 801bdb6:	6078      	str	r0, [r7, #4]
 801bdb8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801bdba:	2300      	movs	r3, #0
 801bdbc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  PERF_START;

  UDP_STATS_INC(udp.recv);
 801bdbe:	4b93      	ldr	r3, [pc, #588]	@ (801c00c <udp_input+0x25c>)
 801bdc0:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
 801bdc4:	3301      	adds	r3, #1
 801bdc6:	b29a      	uxth	r2, r3
 801bdc8:	4b90      	ldr	r3, [pc, #576]	@ (801c00c <udp_input+0x25c>)
 801bdca:	f8a3 207a 	strh.w	r2, [r3, #122]	@ 0x7a

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801bdce:	687b      	ldr	r3, [r7, #4]
 801bdd0:	895b      	ldrh	r3, [r3, #10]
 801bdd2:	2b07      	cmp	r3, #7
 801bdd4:	d81a      	bhi.n	801be0c <udp_input+0x5c>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
 801bdd6:	4b8d      	ldr	r3, [pc, #564]	@ (801c00c <udp_input+0x25c>)
 801bdd8:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 801bddc:	3301      	adds	r3, #1
 801bdde:	b29a      	uxth	r2, r3
 801bde0:	4b8a      	ldr	r3, [pc, #552]	@ (801c00c <udp_input+0x25c>)
 801bde2:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
    UDP_STATS_INC(udp.drop);
 801bde6:	4b89      	ldr	r3, [pc, #548]	@ (801c00c <udp_input+0x25c>)
 801bde8:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 801bdec:	3301      	adds	r3, #1
 801bdee:	b29a      	uxth	r2, r3
 801bdf0:	4b86      	ldr	r3, [pc, #536]	@ (801c00c <udp_input+0x25c>)
 801bdf2:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    MIB2_STATS_INC(mib2.udpinerrors);
 801bdf6:	4b85      	ldr	r3, [pc, #532]	@ (801c00c <udp_input+0x25c>)
 801bdf8:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 801bdfc:	3301      	adds	r3, #1
 801bdfe:	4a83      	ldr	r2, [pc, #524]	@ (801c00c <udp_input+0x25c>)
 801be00:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
    pbuf_free(p);
 801be04:	6878      	ldr	r0, [r7, #4]
 801be06:	f7f9 ff4d 	bl	8015ca4 <pbuf_free>
    goto end;
 801be0a:	e0fa      	b.n	801c002 <udp_input+0x252>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801be0c:	687b      	ldr	r3, [r7, #4]
 801be0e:	685b      	ldr	r3, [r3, #4]
 801be10:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801be12:	4b7f      	ldr	r3, [pc, #508]	@ (801c010 <udp_input+0x260>)
 801be14:	695b      	ldr	r3, [r3, #20]
 801be16:	4a7e      	ldr	r2, [pc, #504]	@ (801c010 <udp_input+0x260>)
 801be18:	6812      	ldr	r2, [r2, #0]
 801be1a:	4611      	mov	r1, r2
 801be1c:	4618      	mov	r0, r3
 801be1e:	f003 ffe7 	bl	801fdf0 <ip4_addr_isbroadcast_u32>
 801be22:	4603      	mov	r3, r0
 801be24:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801be26:	697b      	ldr	r3, [r7, #20]
 801be28:	881b      	ldrh	r3, [r3, #0]
 801be2a:	b29b      	uxth	r3, r3
 801be2c:	4618      	mov	r0, r3
 801be2e:	f7f8 fce1 	bl	80147f4 <lwip_htons>
 801be32:	4603      	mov	r3, r0
 801be34:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801be36:	697b      	ldr	r3, [r7, #20]
 801be38:	885b      	ldrh	r3, [r3, #2]
 801be3a:	b29b      	uxth	r3, r3
 801be3c:	4618      	mov	r0, r3
 801be3e:	f7f8 fcd9 	bl	80147f4 <lwip_htons>
 801be42:	4603      	mov	r3, r0
 801be44:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801be46:	2300      	movs	r3, #0
 801be48:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 801be4a:	2300      	movs	r3, #0
 801be4c:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801be4e:	2300      	movs	r3, #0
 801be50:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801be52:	4b70      	ldr	r3, [pc, #448]	@ (801c014 <udp_input+0x264>)
 801be54:	681b      	ldr	r3, [r3, #0]
 801be56:	627b      	str	r3, [r7, #36]	@ 0x24
 801be58:	e044      	b.n	801bee4 <udp_input+0x134>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801be5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be5c:	8a5b      	ldrh	r3, [r3, #18]
 801be5e:	89fa      	ldrh	r2, [r7, #14]
 801be60:	429a      	cmp	r2, r3
 801be62:	d13a      	bne.n	801beda <udp_input+0x12a>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801be64:	7cfb      	ldrb	r3, [r7, #19]
 801be66:	461a      	mov	r2, r3
 801be68:	6839      	ldr	r1, [r7, #0]
 801be6a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801be6c:	f7ff ff66 	bl	801bd3c <udp_input_local_match>
 801be70:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801be72:	2b00      	cmp	r3, #0
 801be74:	d031      	beq.n	801beda <udp_input+0x12a>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 801be76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be78:	7c1b      	ldrb	r3, [r3, #16]
 801be7a:	f003 0304 	and.w	r3, r3, #4
 801be7e:	2b00      	cmp	r3, #0
 801be80:	d104      	bne.n	801be8c <udp_input+0xdc>
 801be82:	69fb      	ldr	r3, [r7, #28]
 801be84:	2b00      	cmp	r3, #0
 801be86:	d101      	bne.n	801be8c <udp_input+0xdc>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 801be88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be8a:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801be8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be8e:	8a9b      	ldrh	r3, [r3, #20]
 801be90:	8a3a      	ldrh	r2, [r7, #16]
 801be92:	429a      	cmp	r2, r3
 801be94:	d121      	bne.n	801beda <udp_input+0x12a>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801be96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be98:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801be9a:	2b00      	cmp	r3, #0
 801be9c:	d005      	beq.n	801beaa <udp_input+0xfa>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801be9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bea0:	685a      	ldr	r2, [r3, #4]
 801bea2:	4b5b      	ldr	r3, [pc, #364]	@ (801c010 <udp_input+0x260>)
 801bea4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801bea6:	429a      	cmp	r2, r3
 801bea8:	d117      	bne.n	801beda <udp_input+0x12a>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801beaa:	6a3b      	ldr	r3, [r7, #32]
 801beac:	2b00      	cmp	r3, #0
 801beae:	d00b      	beq.n	801bec8 <udp_input+0x118>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801beb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801beb2:	68da      	ldr	r2, [r3, #12]
 801beb4:	6a3b      	ldr	r3, [r7, #32]
 801beb6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801beb8:	4b56      	ldr	r3, [pc, #344]	@ (801c014 <udp_input+0x264>)
 801beba:	681a      	ldr	r2, [r3, #0]
 801bebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bebe:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801bec0:	4a54      	ldr	r2, [pc, #336]	@ (801c014 <udp_input+0x264>)
 801bec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bec4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801bec6:	e010      	b.n	801beea <udp_input+0x13a>
          UDP_STATS_INC(udp.cachehit);
 801bec8:	4b50      	ldr	r3, [pc, #320]	@ (801c00c <udp_input+0x25c>)
 801beca:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 801bece:	3301      	adds	r3, #1
 801bed0:	b29a      	uxth	r2, r3
 801bed2:	4b4e      	ldr	r3, [pc, #312]	@ (801c00c <udp_input+0x25c>)
 801bed4:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
        break;
 801bed8:	e007      	b.n	801beea <udp_input+0x13a>
      }
    }

    prev = pcb;
 801beda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bedc:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801bede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bee0:	68db      	ldr	r3, [r3, #12]
 801bee2:	627b      	str	r3, [r7, #36]	@ 0x24
 801bee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bee6:	2b00      	cmp	r3, #0
 801bee8:	d1b7      	bne.n	801be5a <udp_input+0xaa>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801beea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801beec:	2b00      	cmp	r3, #0
 801beee:	d101      	bne.n	801bef4 <udp_input+0x144>
    pcb = uncon_pcb;
 801bef0:	69fb      	ldr	r3, [r7, #28]
 801bef2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801bef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bef6:	2b00      	cmp	r3, #0
 801bef8:	d002      	beq.n	801bf00 <udp_input+0x150>
    for_us = 1;
 801befa:	2301      	movs	r3, #1
 801befc:	76fb      	strb	r3, [r7, #27]
 801befe:	e00a      	b.n	801bf16 <udp_input+0x166>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801bf00:	683b      	ldr	r3, [r7, #0]
 801bf02:	3304      	adds	r3, #4
 801bf04:	681a      	ldr	r2, [r3, #0]
 801bf06:	4b42      	ldr	r3, [pc, #264]	@ (801c010 <udp_input+0x260>)
 801bf08:	695b      	ldr	r3, [r3, #20]
 801bf0a:	429a      	cmp	r2, r3
 801bf0c:	bf0c      	ite	eq
 801bf0e:	2301      	moveq	r3, #1
 801bf10:	2300      	movne	r3, #0
 801bf12:	b2db      	uxtb	r3, r3
 801bf14:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801bf16:	7efb      	ldrb	r3, [r7, #27]
 801bf18:	2b00      	cmp	r3, #0
 801bf1a:	d06f      	beq.n	801bffc <udp_input+0x24c>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 801bf1c:	f06f 0107 	mvn.w	r1, #7
 801bf20:	6878      	ldr	r0, [r7, #4]
 801bf22:	f7f9 fe9b 	bl	8015c5c <pbuf_header>
 801bf26:	4603      	mov	r3, r0
 801bf28:	2b00      	cmp	r3, #0
 801bf2a:	d019      	beq.n	801bf60 <udp_input+0x1b0>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 801bf2c:	4b3a      	ldr	r3, [pc, #232]	@ (801c018 <udp_input+0x268>)
 801bf2e:	f240 1255 	movw	r2, #341	@ 0x155
 801bf32:	493a      	ldr	r1, [pc, #232]	@ (801c01c <udp_input+0x26c>)
 801bf34:	483a      	ldr	r0, [pc, #232]	@ (801c020 <udp_input+0x270>)
 801bf36:	f005 fea7 	bl	8021c88 <iprintf>
      UDP_STATS_INC(udp.drop);
 801bf3a:	4b34      	ldr	r3, [pc, #208]	@ (801c00c <udp_input+0x25c>)
 801bf3c:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 801bf40:	3301      	adds	r3, #1
 801bf42:	b29a      	uxth	r2, r3
 801bf44:	4b31      	ldr	r3, [pc, #196]	@ (801c00c <udp_input+0x25c>)
 801bf46:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
      MIB2_STATS_INC(mib2.udpinerrors);
 801bf4a:	4b30      	ldr	r3, [pc, #192]	@ (801c00c <udp_input+0x25c>)
 801bf4c:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 801bf50:	3301      	adds	r3, #1
 801bf52:	4a2e      	ldr	r2, [pc, #184]	@ (801c00c <udp_input+0x25c>)
 801bf54:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
      pbuf_free(p);
 801bf58:	6878      	ldr	r0, [r7, #4]
 801bf5a:	f7f9 fea3 	bl	8015ca4 <pbuf_free>
      goto end;
 801bf5e:	e050      	b.n	801c002 <udp_input+0x252>
    }

    if (pcb != NULL) {
 801bf60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf62:	2b00      	cmp	r3, #0
 801bf64:	d019      	beq.n	801bf9a <udp_input+0x1ea>
      MIB2_STATS_INC(mib2.udpindatagrams);
 801bf66:	4b29      	ldr	r3, [pc, #164]	@ (801c00c <udp_input+0x25c>)
 801bf68:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 801bf6c:	3301      	adds	r3, #1
 801bf6e:	4a27      	ldr	r2, [pc, #156]	@ (801c00c <udp_input+0x25c>)
 801bf70:	f8c2 313c 	str.w	r3, [r2, #316]	@ 0x13c
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801bf74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf76:	699b      	ldr	r3, [r3, #24]
 801bf78:	2b00      	cmp	r3, #0
 801bf7a:	d00a      	beq.n	801bf92 <udp_input+0x1e2>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801bf7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf7e:	699c      	ldr	r4, [r3, #24]
 801bf80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf82:	69d8      	ldr	r0, [r3, #28]
 801bf84:	8a3b      	ldrh	r3, [r7, #16]
 801bf86:	9300      	str	r3, [sp, #0]
 801bf88:	4b26      	ldr	r3, [pc, #152]	@ (801c024 <udp_input+0x274>)
 801bf8a:	687a      	ldr	r2, [r7, #4]
 801bf8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801bf8e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801bf90:	e038      	b.n	801c004 <udp_input+0x254>
        pbuf_free(p);
 801bf92:	6878      	ldr	r0, [r7, #4]
 801bf94:	f7f9 fe86 	bl	8015ca4 <pbuf_free>
        goto end;
 801bf98:	e033      	b.n	801c002 <udp_input+0x252>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801bf9a:	7cfb      	ldrb	r3, [r7, #19]
 801bf9c:	2b00      	cmp	r3, #0
 801bf9e:	d112      	bne.n	801bfc6 <udp_input+0x216>
 801bfa0:	4b1b      	ldr	r3, [pc, #108]	@ (801c010 <udp_input+0x260>)
 801bfa2:	695b      	ldr	r3, [r3, #20]
 801bfa4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801bfa8:	2be0      	cmp	r3, #224	@ 0xe0
 801bfaa:	d00c      	beq.n	801bfc6 <udp_input+0x216>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801bfac:	4b18      	ldr	r3, [pc, #96]	@ (801c010 <udp_input+0x260>)
 801bfae:	899b      	ldrh	r3, [r3, #12]
 801bfb0:	3308      	adds	r3, #8
 801bfb2:	b29b      	uxth	r3, r3
 801bfb4:	b21b      	sxth	r3, r3
 801bfb6:	4619      	mov	r1, r3
 801bfb8:	6878      	ldr	r0, [r7, #4]
 801bfba:	f7f9 fe61 	bl	8015c80 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801bfbe:	2103      	movs	r1, #3
 801bfc0:	6878      	ldr	r0, [r7, #4]
 801bfc2:	f003 fafd 	bl	801f5c0 <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
 801bfc6:	4b11      	ldr	r3, [pc, #68]	@ (801c00c <udp_input+0x25c>)
 801bfc8:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 801bfcc:	3301      	adds	r3, #1
 801bfce:	b29a      	uxth	r2, r3
 801bfd0:	4b0e      	ldr	r3, [pc, #56]	@ (801c00c <udp_input+0x25c>)
 801bfd2:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
      UDP_STATS_INC(udp.drop);
 801bfd6:	4b0d      	ldr	r3, [pc, #52]	@ (801c00c <udp_input+0x25c>)
 801bfd8:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 801bfdc:	3301      	adds	r3, #1
 801bfde:	b29a      	uxth	r2, r3
 801bfe0:	4b0a      	ldr	r3, [pc, #40]	@ (801c00c <udp_input+0x25c>)
 801bfe2:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
      MIB2_STATS_INC(mib2.udpnoports);
 801bfe6:	4b09      	ldr	r3, [pc, #36]	@ (801c00c <udp_input+0x25c>)
 801bfe8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 801bfec:	3301      	adds	r3, #1
 801bfee:	4a07      	ldr	r2, [pc, #28]	@ (801c00c <udp_input+0x25c>)
 801bff0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
      pbuf_free(p);
 801bff4:	6878      	ldr	r0, [r7, #4]
 801bff6:	f7f9 fe55 	bl	8015ca4 <pbuf_free>
  return;
 801bffa:	e003      	b.n	801c004 <udp_input+0x254>
    pbuf_free(p);
 801bffc:	6878      	ldr	r0, [r7, #4]
 801bffe:	f7f9 fe51 	bl	8015ca4 <pbuf_free>
  return;
 801c002:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801c004:	372c      	adds	r7, #44	@ 0x2c
 801c006:	46bd      	mov	sp, r7
 801c008:	bd90      	pop	{r4, r7, pc}
 801c00a:	bf00      	nop
 801c00c:	2000be88 	.word	0x2000be88
 801c010:	200088a0 	.word	0x200088a0
 801c014:	2000c07c 	.word	0x2000c07c
 801c018:	08026d18 	.word	0x08026d18
 801c01c:	08026d48 	.word	0x08026d48
 801c020:	08026d5c 	.word	0x08026d5c
 801c024:	200088b0 	.word	0x200088b0

0801c028 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
 801c028:	b580      	push	{r7, lr}
 801c02a:	b088      	sub	sp, #32
 801c02c:	af02      	add	r7, sp, #8
 801c02e:	60f8      	str	r0, [r7, #12]
 801c030:	60b9      	str	r1, [r7, #8]
 801c032:	607a      	str	r2, [r7, #4]
 801c034:	807b      	strh	r3, [r7, #2]
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
 801c036:	687b      	ldr	r3, [r7, #4]
 801c038:	617b      	str	r3, [r7, #20]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 801c03a:	68fb      	ldr	r3, [r7, #12]
 801c03c:	2b00      	cmp	r3, #0
 801c03e:	d002      	beq.n	801c046 <udp_sendto+0x1e>
 801c040:	687b      	ldr	r3, [r7, #4]
 801c042:	2b00      	cmp	r3, #0
 801c044:	d102      	bne.n	801c04c <udp_sendto+0x24>
    return ERR_VAL;
 801c046:	f06f 0305 	mvn.w	r3, #5
 801c04a:	e01b      	b.n	801c084 <udp_sendto+0x5c>
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 801c04c:	6978      	ldr	r0, [r7, #20]
 801c04e:	f003 fb6b 	bl	801f728 <ip4_route>
 801c052:	6138      	str	r0, [r7, #16]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801c054:	693b      	ldr	r3, [r7, #16]
 801c056:	2b00      	cmp	r3, #0
 801c058:	d10a      	bne.n	801c070 <udp_sendto+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
 801c05a:	4b0c      	ldr	r3, [pc, #48]	@ (801c08c <udp_sendto+0x64>)
 801c05c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 801c060:	3301      	adds	r3, #1
 801c062:	b29a      	uxth	r2, r3
 801c064:	4b09      	ldr	r3, [pc, #36]	@ (801c08c <udp_sendto+0x64>)
 801c066:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
    return ERR_RTE;
 801c06a:	f06f 0303 	mvn.w	r3, #3
 801c06e:	e009      	b.n	801c084 <udp_sendto+0x5c>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801c070:	887a      	ldrh	r2, [r7, #2]
 801c072:	693b      	ldr	r3, [r7, #16]
 801c074:	9300      	str	r3, [sp, #0]
 801c076:	4613      	mov	r3, r2
 801c078:	687a      	ldr	r2, [r7, #4]
 801c07a:	68b9      	ldr	r1, [r7, #8]
 801c07c:	68f8      	ldr	r0, [r7, #12]
 801c07e:	f000 f807 	bl	801c090 <udp_sendto_if>
 801c082:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801c084:	4618      	mov	r0, r3
 801c086:	3718      	adds	r7, #24
 801c088:	46bd      	mov	sp, r7
 801c08a:	bd80      	pop	{r7, pc}
 801c08c:	2000be88 	.word	0x2000be88

0801c090 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801c090:	b580      	push	{r7, lr}
 801c092:	b088      	sub	sp, #32
 801c094:	af02      	add	r7, sp, #8
 801c096:	60f8      	str	r0, [r7, #12]
 801c098:	60b9      	str	r1, [r7, #8]
 801c09a:	607a      	str	r2, [r7, #4]
 801c09c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 801c09e:	68fb      	ldr	r3, [r7, #12]
 801c0a0:	2b00      	cmp	r3, #0
 801c0a2:	d002      	beq.n	801c0aa <udp_sendto_if+0x1a>
 801c0a4:	687b      	ldr	r3, [r7, #4]
 801c0a6:	2b00      	cmp	r3, #0
 801c0a8:	d102      	bne.n	801c0b0 <udp_sendto_if+0x20>
    return ERR_VAL;
 801c0aa:	f06f 0305 	mvn.w	r3, #5
 801c0ae:	e028      	b.n	801c102 <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c0b0:	68fb      	ldr	r3, [r7, #12]
 801c0b2:	2b00      	cmp	r3, #0
 801c0b4:	d009      	beq.n	801c0ca <udp_sendto_if+0x3a>
 801c0b6:	68fb      	ldr	r3, [r7, #12]
 801c0b8:	681b      	ldr	r3, [r3, #0]
 801c0ba:	2b00      	cmp	r3, #0
 801c0bc:	d005      	beq.n	801c0ca <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801c0be:	68fb      	ldr	r3, [r7, #12]
 801c0c0:	681b      	ldr	r3, [r3, #0]
 801c0c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c0c6:	2be0      	cmp	r3, #224	@ 0xe0
 801c0c8:	d103      	bne.n	801c0d2 <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 801c0ca:	6a3b      	ldr	r3, [r7, #32]
 801c0cc:	3304      	adds	r3, #4
 801c0ce:	617b      	str	r3, [r7, #20]
 801c0d0:	e00b      	b.n	801c0ea <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801c0d2:	68fb      	ldr	r3, [r7, #12]
 801c0d4:	681a      	ldr	r2, [r3, #0]
 801c0d6:	6a3b      	ldr	r3, [r7, #32]
 801c0d8:	3304      	adds	r3, #4
 801c0da:	681b      	ldr	r3, [r3, #0]
 801c0dc:	429a      	cmp	r2, r3
 801c0de:	d002      	beq.n	801c0e6 <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 801c0e0:	f06f 0303 	mvn.w	r3, #3
 801c0e4:	e00d      	b.n	801c102 <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 801c0e6:	68fb      	ldr	r3, [r7, #12]
 801c0e8:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801c0ea:	887a      	ldrh	r2, [r7, #2]
 801c0ec:	697b      	ldr	r3, [r7, #20]
 801c0ee:	9301      	str	r3, [sp, #4]
 801c0f0:	6a3b      	ldr	r3, [r7, #32]
 801c0f2:	9300      	str	r3, [sp, #0]
 801c0f4:	4613      	mov	r3, r2
 801c0f6:	687a      	ldr	r2, [r7, #4]
 801c0f8:	68b9      	ldr	r1, [r7, #8]
 801c0fa:	68f8      	ldr	r0, [r7, #12]
 801c0fc:	f000 f806 	bl	801c10c <udp_sendto_if_src>
 801c100:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801c102:	4618      	mov	r0, r3
 801c104:	3718      	adds	r7, #24
 801c106:	46bd      	mov	sp, r7
 801c108:	bd80      	pop	{r7, pc}
	...

0801c10c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801c10c:	b580      	push	{r7, lr}
 801c10e:	b08c      	sub	sp, #48	@ 0x30
 801c110:	af04      	add	r7, sp, #16
 801c112:	60f8      	str	r0, [r7, #12]
 801c114:	60b9      	str	r1, [r7, #8]
 801c116:	607a      	str	r2, [r7, #4]
 801c118:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 801c11a:	68fb      	ldr	r3, [r7, #12]
 801c11c:	2b00      	cmp	r3, #0
 801c11e:	d002      	beq.n	801c126 <udp_sendto_if_src+0x1a>
 801c120:	687b      	ldr	r3, [r7, #4]
 801c122:	2b00      	cmp	r3, #0
 801c124:	d102      	bne.n	801c12c <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 801c126:	f06f 0305 	mvn.w	r3, #5
 801c12a:	e08d      	b.n	801c248 <udp_sendto_if_src+0x13c>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801c12c:	68fb      	ldr	r3, [r7, #12]
 801c12e:	8a5b      	ldrh	r3, [r3, #18]
 801c130:	2b00      	cmp	r3, #0
 801c132:	d10f      	bne.n	801c154 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801c134:	68f9      	ldr	r1, [r7, #12]
 801c136:	68fb      	ldr	r3, [r7, #12]
 801c138:	8a5b      	ldrh	r3, [r3, #18]
 801c13a:	461a      	mov	r2, r3
 801c13c:	68f8      	ldr	r0, [r7, #12]
 801c13e:	f000 f88f 	bl	801c260 <udp_bind>
 801c142:	4603      	mov	r3, r0
 801c144:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801c146:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c14a:	2b00      	cmp	r3, #0
 801c14c:	d002      	beq.n	801c154 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801c14e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c152:	e079      	b.n	801c248 <udp_sendto_if_src+0x13c>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 801c154:	2108      	movs	r1, #8
 801c156:	68b8      	ldr	r0, [r7, #8]
 801c158:	f7f9 fd80 	bl	8015c5c <pbuf_header>
 801c15c:	4603      	mov	r3, r0
 801c15e:	2b00      	cmp	r3, #0
 801c160:	d014      	beq.n	801c18c <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801c162:	2200      	movs	r2, #0
 801c164:	2108      	movs	r1, #8
 801c166:	2001      	movs	r0, #1
 801c168:	f7f9 fa24 	bl	80155b4 <pbuf_alloc>
 801c16c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801c16e:	69fb      	ldr	r3, [r7, #28]
 801c170:	2b00      	cmp	r3, #0
 801c172:	d102      	bne.n	801c17a <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801c174:	f04f 33ff 	mov.w	r3, #4294967295
 801c178:	e066      	b.n	801c248 <udp_sendto_if_src+0x13c>
    }
    if (p->tot_len != 0) {
 801c17a:	68bb      	ldr	r3, [r7, #8]
 801c17c:	891b      	ldrh	r3, [r3, #8]
 801c17e:	2b00      	cmp	r3, #0
 801c180:	d006      	beq.n	801c190 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801c182:	68b9      	ldr	r1, [r7, #8]
 801c184:	69f8      	ldr	r0, [r7, #28]
 801c186:	f7f9 feaf 	bl	8015ee8 <pbuf_chain>
 801c18a:	e001      	b.n	801c190 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801c18c:	68bb      	ldr	r3, [r7, #8]
 801c18e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801c190:	69fb      	ldr	r3, [r7, #28]
 801c192:	895b      	ldrh	r3, [r3, #10]
 801c194:	2b07      	cmp	r3, #7
 801c196:	d806      	bhi.n	801c1a6 <udp_sendto_if_src+0x9a>
 801c198:	4b2d      	ldr	r3, [pc, #180]	@ (801c250 <udp_sendto_if_src+0x144>)
 801c19a:	f240 22db 	movw	r2, #731	@ 0x2db
 801c19e:	492d      	ldr	r1, [pc, #180]	@ (801c254 <udp_sendto_if_src+0x148>)
 801c1a0:	482d      	ldr	r0, [pc, #180]	@ (801c258 <udp_sendto_if_src+0x14c>)
 801c1a2:	f005 fd71 	bl	8021c88 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801c1a6:	69fb      	ldr	r3, [r7, #28]
 801c1a8:	685b      	ldr	r3, [r3, #4]
 801c1aa:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801c1ac:	68fb      	ldr	r3, [r7, #12]
 801c1ae:	8a5b      	ldrh	r3, [r3, #18]
 801c1b0:	4618      	mov	r0, r3
 801c1b2:	f7f8 fb1f 	bl	80147f4 <lwip_htons>
 801c1b6:	4603      	mov	r3, r0
 801c1b8:	461a      	mov	r2, r3
 801c1ba:	697b      	ldr	r3, [r7, #20]
 801c1bc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801c1be:	887b      	ldrh	r3, [r7, #2]
 801c1c0:	4618      	mov	r0, r3
 801c1c2:	f7f8 fb17 	bl	80147f4 <lwip_htons>
 801c1c6:	4603      	mov	r3, r0
 801c1c8:	461a      	mov	r2, r3
 801c1ca:	697b      	ldr	r3, [r7, #20]
 801c1cc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801c1ce:	697b      	ldr	r3, [r7, #20]
 801c1d0:	2200      	movs	r2, #0
 801c1d2:	719a      	strb	r2, [r3, #6]
 801c1d4:	2200      	movs	r2, #0
 801c1d6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801c1d8:	69fb      	ldr	r3, [r7, #28]
 801c1da:	891b      	ldrh	r3, [r3, #8]
 801c1dc:	4618      	mov	r0, r3
 801c1de:	f7f8 fb09 	bl	80147f4 <lwip_htons>
 801c1e2:	4603      	mov	r3, r0
 801c1e4:	461a      	mov	r2, r3
 801c1e6:	697b      	ldr	r3, [r7, #20]
 801c1e8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801c1ea:	2311      	movs	r3, #17
 801c1ec:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801c1ee:	68fb      	ldr	r3, [r7, #12]
 801c1f0:	7a9b      	ldrb	r3, [r3, #10]
 801c1f2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801c1f4:	68fb      	ldr	r3, [r7, #12]
 801c1f6:	7a5b      	ldrb	r3, [r3, #9]
 801c1f8:	7cb9      	ldrb	r1, [r7, #18]
 801c1fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c1fc:	9202      	str	r2, [sp, #8]
 801c1fe:	7cfa      	ldrb	r2, [r7, #19]
 801c200:	9201      	str	r2, [sp, #4]
 801c202:	9300      	str	r3, [sp, #0]
 801c204:	460b      	mov	r3, r1
 801c206:	687a      	ldr	r2, [r7, #4]
 801c208:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801c20a:	69f8      	ldr	r0, [r7, #28]
 801c20c:	f003 fd28 	bl	801fc60 <ip4_output_if_src>
 801c210:	4603      	mov	r3, r0
 801c212:	76fb      	strb	r3, [r7, #27]
  NETIF_SET_HWADDRHINT(netif, NULL);

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);
 801c214:	4b11      	ldr	r3, [pc, #68]	@ (801c25c <udp_sendto_if_src+0x150>)
 801c216:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 801c21a:	3301      	adds	r3, #1
 801c21c:	4a0f      	ldr	r2, [pc, #60]	@ (801c25c <udp_sendto_if_src+0x150>)
 801c21e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801c222:	69fa      	ldr	r2, [r7, #28]
 801c224:	68bb      	ldr	r3, [r7, #8]
 801c226:	429a      	cmp	r2, r3
 801c228:	d004      	beq.n	801c234 <udp_sendto_if_src+0x128>
    /* free the header pbuf */
    pbuf_free(q);
 801c22a:	69f8      	ldr	r0, [r7, #28]
 801c22c:	f7f9 fd3a 	bl	8015ca4 <pbuf_free>
    q = NULL;
 801c230:	2300      	movs	r3, #0
 801c232:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
 801c234:	4b09      	ldr	r3, [pc, #36]	@ (801c25c <udp_sendto_if_src+0x150>)
 801c236:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 801c23a:	3301      	adds	r3, #1
 801c23c:	b29a      	uxth	r2, r3
 801c23e:	4b07      	ldr	r3, [pc, #28]	@ (801c25c <udp_sendto_if_src+0x150>)
 801c240:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
  return err;
 801c244:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801c248:	4618      	mov	r0, r3
 801c24a:	3720      	adds	r7, #32
 801c24c:	46bd      	mov	sp, r7
 801c24e:	bd80      	pop	{r7, pc}
 801c250:	08026d18 	.word	0x08026d18
 801c254:	08026d84 	.word	0x08026d84
 801c258:	08026d5c 	.word	0x08026d5c
 801c25c:	2000be88 	.word	0x2000be88

0801c260 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801c260:	b580      	push	{r7, lr}
 801c262:	b086      	sub	sp, #24
 801c264:	af00      	add	r7, sp, #0
 801c266:	60f8      	str	r0, [r7, #12]
 801c268:	60b9      	str	r1, [r7, #8]
 801c26a:	4613      	mov	r3, r2
 801c26c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801c26e:	68bb      	ldr	r3, [r7, #8]
 801c270:	2b00      	cmp	r3, #0
 801c272:	d101      	bne.n	801c278 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801c274:	4b30      	ldr	r3, [pc, #192]	@ (801c338 <udp_bind+0xd8>)
 801c276:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 801c278:	68fb      	ldr	r3, [r7, #12]
 801c27a:	2b00      	cmp	r3, #0
 801c27c:	d002      	beq.n	801c284 <udp_bind+0x24>
 801c27e:	68bb      	ldr	r3, [r7, #8]
 801c280:	2b00      	cmp	r3, #0
 801c282:	d102      	bne.n	801c28a <udp_bind+0x2a>
    return ERR_VAL;
 801c284:	f06f 0305 	mvn.w	r3, #5
 801c288:	e052      	b.n	801c330 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801c28a:	2300      	movs	r3, #0
 801c28c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c28e:	4b2b      	ldr	r3, [pc, #172]	@ (801c33c <udp_bind+0xdc>)
 801c290:	681b      	ldr	r3, [r3, #0]
 801c292:	617b      	str	r3, [r7, #20]
 801c294:	e009      	b.n	801c2aa <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801c296:	68fa      	ldr	r2, [r7, #12]
 801c298:	697b      	ldr	r3, [r7, #20]
 801c29a:	429a      	cmp	r2, r3
 801c29c:	d102      	bne.n	801c2a4 <udp_bind+0x44>
      rebind = 1;
 801c29e:	2301      	movs	r3, #1
 801c2a0:	74fb      	strb	r3, [r7, #19]
      break;
 801c2a2:	e005      	b.n	801c2b0 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c2a4:	697b      	ldr	r3, [r7, #20]
 801c2a6:	68db      	ldr	r3, [r3, #12]
 801c2a8:	617b      	str	r3, [r7, #20]
 801c2aa:	697b      	ldr	r3, [r7, #20]
 801c2ac:	2b00      	cmp	r3, #0
 801c2ae:	d1f2      	bne.n	801c296 <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 801c2b0:	88fb      	ldrh	r3, [r7, #6]
 801c2b2:	2b00      	cmp	r3, #0
 801c2b4:	d109      	bne.n	801c2ca <udp_bind+0x6a>
    port = udp_new_port();
 801c2b6:	f7ff fd09 	bl	801bccc <udp_new_port>
 801c2ba:	4603      	mov	r3, r0
 801c2bc:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801c2be:	88fb      	ldrh	r3, [r7, #6]
 801c2c0:	2b00      	cmp	r3, #0
 801c2c2:	d11e      	bne.n	801c302 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801c2c4:	f06f 0307 	mvn.w	r3, #7
 801c2c8:	e032      	b.n	801c330 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c2ca:	4b1c      	ldr	r3, [pc, #112]	@ (801c33c <udp_bind+0xdc>)
 801c2cc:	681b      	ldr	r3, [r3, #0]
 801c2ce:	617b      	str	r3, [r7, #20]
 801c2d0:	e014      	b.n	801c2fc <udp_bind+0x9c>
      if (pcb != ipcb) {
 801c2d2:	68fa      	ldr	r2, [r7, #12]
 801c2d4:	697b      	ldr	r3, [r7, #20]
 801c2d6:	429a      	cmp	r2, r3
 801c2d8:	d00d      	beq.n	801c2f6 <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801c2da:	697b      	ldr	r3, [r7, #20]
 801c2dc:	8a5b      	ldrh	r3, [r3, #18]
 801c2de:	88fa      	ldrh	r2, [r7, #6]
 801c2e0:	429a      	cmp	r2, r3
 801c2e2:	d108      	bne.n	801c2f6 <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 801c2e4:	697b      	ldr	r3, [r7, #20]
 801c2e6:	681a      	ldr	r2, [r3, #0]
 801c2e8:	68bb      	ldr	r3, [r7, #8]
 801c2ea:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801c2ec:	429a      	cmp	r2, r3
 801c2ee:	d102      	bne.n	801c2f6 <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801c2f0:	f06f 0307 	mvn.w	r3, #7
 801c2f4:	e01c      	b.n	801c330 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c2f6:	697b      	ldr	r3, [r7, #20]
 801c2f8:	68db      	ldr	r3, [r3, #12]
 801c2fa:	617b      	str	r3, [r7, #20]
 801c2fc:	697b      	ldr	r3, [r7, #20]
 801c2fe:	2b00      	cmp	r3, #0
 801c300:	d1e7      	bne.n	801c2d2 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801c302:	68bb      	ldr	r3, [r7, #8]
 801c304:	2b00      	cmp	r3, #0
 801c306:	d002      	beq.n	801c30e <udp_bind+0xae>
 801c308:	68bb      	ldr	r3, [r7, #8]
 801c30a:	681b      	ldr	r3, [r3, #0]
 801c30c:	e000      	b.n	801c310 <udp_bind+0xb0>
 801c30e:	2300      	movs	r3, #0
 801c310:	68fa      	ldr	r2, [r7, #12]
 801c312:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801c314:	68fb      	ldr	r3, [r7, #12]
 801c316:	88fa      	ldrh	r2, [r7, #6]
 801c318:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801c31a:	7cfb      	ldrb	r3, [r7, #19]
 801c31c:	2b00      	cmp	r3, #0
 801c31e:	d106      	bne.n	801c32e <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801c320:	4b06      	ldr	r3, [pc, #24]	@ (801c33c <udp_bind+0xdc>)
 801c322:	681a      	ldr	r2, [r3, #0]
 801c324:	68fb      	ldr	r3, [r7, #12]
 801c326:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801c328:	4a04      	ldr	r2, [pc, #16]	@ (801c33c <udp_bind+0xdc>)
 801c32a:	68fb      	ldr	r3, [r7, #12]
 801c32c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801c32e:	2300      	movs	r3, #0
}
 801c330:	4618      	mov	r0, r3
 801c332:	3718      	adds	r7, #24
 801c334:	46bd      	mov	sp, r7
 801c336:	bd80      	pop	{r7, pc}
 801c338:	08030cf4 	.word	0x08030cf4
 801c33c:	2000c07c 	.word	0x2000c07c

0801c340 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801c340:	b580      	push	{r7, lr}
 801c342:	b086      	sub	sp, #24
 801c344:	af00      	add	r7, sp, #0
 801c346:	60f8      	str	r0, [r7, #12]
 801c348:	60b9      	str	r1, [r7, #8]
 801c34a:	4613      	mov	r3, r2
 801c34c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 801c34e:	68fb      	ldr	r3, [r7, #12]
 801c350:	2b00      	cmp	r3, #0
 801c352:	d002      	beq.n	801c35a <udp_connect+0x1a>
 801c354:	68bb      	ldr	r3, [r7, #8]
 801c356:	2b00      	cmp	r3, #0
 801c358:	d102      	bne.n	801c360 <udp_connect+0x20>
    return ERR_VAL;
 801c35a:	f06f 0305 	mvn.w	r3, #5
 801c35e:	e03e      	b.n	801c3de <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 801c360:	68fb      	ldr	r3, [r7, #12]
 801c362:	8a5b      	ldrh	r3, [r3, #18]
 801c364:	2b00      	cmp	r3, #0
 801c366:	d10f      	bne.n	801c388 <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801c368:	68f9      	ldr	r1, [r7, #12]
 801c36a:	68fb      	ldr	r3, [r7, #12]
 801c36c:	8a5b      	ldrh	r3, [r3, #18]
 801c36e:	461a      	mov	r2, r3
 801c370:	68f8      	ldr	r0, [r7, #12]
 801c372:	f7ff ff75 	bl	801c260 <udp_bind>
 801c376:	4603      	mov	r3, r0
 801c378:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801c37a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c37e:	2b00      	cmp	r3, #0
 801c380:	d002      	beq.n	801c388 <udp_connect+0x48>
      return err;
 801c382:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c386:	e02a      	b.n	801c3de <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801c388:	68bb      	ldr	r3, [r7, #8]
 801c38a:	2b00      	cmp	r3, #0
 801c38c:	d002      	beq.n	801c394 <udp_connect+0x54>
 801c38e:	68bb      	ldr	r3, [r7, #8]
 801c390:	681b      	ldr	r3, [r3, #0]
 801c392:	e000      	b.n	801c396 <udp_connect+0x56>
 801c394:	2300      	movs	r3, #0
 801c396:	68fa      	ldr	r2, [r7, #12]
 801c398:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 801c39a:	68fb      	ldr	r3, [r7, #12]
 801c39c:	88fa      	ldrh	r2, [r7, #6]
 801c39e:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801c3a0:	68fb      	ldr	r3, [r7, #12]
 801c3a2:	7c1b      	ldrb	r3, [r3, #16]
 801c3a4:	f043 0304 	orr.w	r3, r3, #4
 801c3a8:	b2da      	uxtb	r2, r3
 801c3aa:	68fb      	ldr	r3, [r7, #12]
 801c3ac:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c3ae:	4b0e      	ldr	r3, [pc, #56]	@ (801c3e8 <udp_connect+0xa8>)
 801c3b0:	681b      	ldr	r3, [r3, #0]
 801c3b2:	617b      	str	r3, [r7, #20]
 801c3b4:	e008      	b.n	801c3c8 <udp_connect+0x88>
    if (pcb == ipcb) {
 801c3b6:	68fa      	ldr	r2, [r7, #12]
 801c3b8:	697b      	ldr	r3, [r7, #20]
 801c3ba:	429a      	cmp	r2, r3
 801c3bc:	d101      	bne.n	801c3c2 <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 801c3be:	2300      	movs	r3, #0
 801c3c0:	e00d      	b.n	801c3de <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c3c2:	697b      	ldr	r3, [r7, #20]
 801c3c4:	68db      	ldr	r3, [r3, #12]
 801c3c6:	617b      	str	r3, [r7, #20]
 801c3c8:	697b      	ldr	r3, [r7, #20]
 801c3ca:	2b00      	cmp	r3, #0
 801c3cc:	d1f3      	bne.n	801c3b6 <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801c3ce:	4b06      	ldr	r3, [pc, #24]	@ (801c3e8 <udp_connect+0xa8>)
 801c3d0:	681a      	ldr	r2, [r3, #0]
 801c3d2:	68fb      	ldr	r3, [r7, #12]
 801c3d4:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801c3d6:	4a04      	ldr	r2, [pc, #16]	@ (801c3e8 <udp_connect+0xa8>)
 801c3d8:	68fb      	ldr	r3, [r7, #12]
 801c3da:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801c3dc:	2300      	movs	r3, #0
}
 801c3de:	4618      	mov	r0, r3
 801c3e0:	3718      	adds	r7, #24
 801c3e2:	46bd      	mov	sp, r7
 801c3e4:	bd80      	pop	{r7, pc}
 801c3e6:	bf00      	nop
 801c3e8:	2000c07c 	.word	0x2000c07c

0801c3ec <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801c3ec:	b480      	push	{r7}
 801c3ee:	b085      	sub	sp, #20
 801c3f0:	af00      	add	r7, sp, #0
 801c3f2:	60f8      	str	r0, [r7, #12]
 801c3f4:	60b9      	str	r1, [r7, #8]
 801c3f6:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 801c3f8:	68fb      	ldr	r3, [r7, #12]
 801c3fa:	68ba      	ldr	r2, [r7, #8]
 801c3fc:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801c3fe:	68fb      	ldr	r3, [r7, #12]
 801c400:	687a      	ldr	r2, [r7, #4]
 801c402:	61da      	str	r2, [r3, #28]
}
 801c404:	bf00      	nop
 801c406:	3714      	adds	r7, #20
 801c408:	46bd      	mov	sp, r7
 801c40a:	bc80      	pop	{r7}
 801c40c:	4770      	bx	lr
	...

0801c410 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801c410:	b580      	push	{r7, lr}
 801c412:	b084      	sub	sp, #16
 801c414:	af00      	add	r7, sp, #0
 801c416:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801c418:	4b15      	ldr	r3, [pc, #84]	@ (801c470 <udp_remove+0x60>)
 801c41a:	681b      	ldr	r3, [r3, #0]
 801c41c:	687a      	ldr	r2, [r7, #4]
 801c41e:	429a      	cmp	r2, r3
 801c420:	d105      	bne.n	801c42e <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801c422:	4b13      	ldr	r3, [pc, #76]	@ (801c470 <udp_remove+0x60>)
 801c424:	681b      	ldr	r3, [r3, #0]
 801c426:	68db      	ldr	r3, [r3, #12]
 801c428:	4a11      	ldr	r2, [pc, #68]	@ (801c470 <udp_remove+0x60>)
 801c42a:	6013      	str	r3, [r2, #0]
 801c42c:	e017      	b.n	801c45e <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801c42e:	4b10      	ldr	r3, [pc, #64]	@ (801c470 <udp_remove+0x60>)
 801c430:	681b      	ldr	r3, [r3, #0]
 801c432:	60fb      	str	r3, [r7, #12]
 801c434:	e010      	b.n	801c458 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801c436:	68fb      	ldr	r3, [r7, #12]
 801c438:	68db      	ldr	r3, [r3, #12]
 801c43a:	2b00      	cmp	r3, #0
 801c43c:	d009      	beq.n	801c452 <udp_remove+0x42>
 801c43e:	68fb      	ldr	r3, [r7, #12]
 801c440:	68db      	ldr	r3, [r3, #12]
 801c442:	687a      	ldr	r2, [r7, #4]
 801c444:	429a      	cmp	r2, r3
 801c446:	d104      	bne.n	801c452 <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801c448:	687b      	ldr	r3, [r7, #4]
 801c44a:	68da      	ldr	r2, [r3, #12]
 801c44c:	68fb      	ldr	r3, [r7, #12]
 801c44e:	60da      	str	r2, [r3, #12]
        break;
 801c450:	e005      	b.n	801c45e <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801c452:	68fb      	ldr	r3, [r7, #12]
 801c454:	68db      	ldr	r3, [r3, #12]
 801c456:	60fb      	str	r3, [r7, #12]
 801c458:	68fb      	ldr	r3, [r7, #12]
 801c45a:	2b00      	cmp	r3, #0
 801c45c:	d1eb      	bne.n	801c436 <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801c45e:	6879      	ldr	r1, [r7, #4]
 801c460:	2000      	movs	r0, #0
 801c462:	f7f8 fec3 	bl	80151ec <memp_free>
}
 801c466:	bf00      	nop
 801c468:	3710      	adds	r7, #16
 801c46a:	46bd      	mov	sp, r7
 801c46c:	bd80      	pop	{r7, pc}
 801c46e:	bf00      	nop
 801c470:	2000c07c 	.word	0x2000c07c

0801c474 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801c474:	b580      	push	{r7, lr}
 801c476:	b082      	sub	sp, #8
 801c478:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801c47a:	2000      	movs	r0, #0
 801c47c:	f7f8 fe64 	bl	8015148 <memp_malloc>
 801c480:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801c482:	687b      	ldr	r3, [r7, #4]
 801c484:	2b00      	cmp	r3, #0
 801c486:	d007      	beq.n	801c498 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801c488:	2220      	movs	r2, #32
 801c48a:	2100      	movs	r1, #0
 801c48c:	6878      	ldr	r0, [r7, #4]
 801c48e:	f005 fdd1 	bl	8022034 <memset>
    pcb->ttl = UDP_TTL;
 801c492:	687b      	ldr	r3, [r7, #4]
 801c494:	22ff      	movs	r2, #255	@ 0xff
 801c496:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801c498:	687b      	ldr	r3, [r7, #4]
}
 801c49a:	4618      	mov	r0, r3
 801c49c:	3708      	adds	r7, #8
 801c49e:	46bd      	mov	sp, r7
 801c4a0:	bd80      	pop	{r7, pc}

0801c4a2 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801c4a2:	b580      	push	{r7, lr}
 801c4a4:	b084      	sub	sp, #16
 801c4a6:	af00      	add	r7, sp, #0
 801c4a8:	4603      	mov	r3, r0
 801c4aa:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;
  pcb = udp_new();
 801c4ac:	f7ff ffe2 	bl	801c474 <udp_new>
 801c4b0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801c4b2:	68fb      	ldr	r3, [r7, #12]
}
 801c4b4:	4618      	mov	r0, r3
 801c4b6:	3710      	adds	r7, #16
 801c4b8:	46bd      	mov	sp, r7
 801c4ba:	bd80      	pop	{r7, pc}

0801c4bc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 801c4bc:	b480      	push	{r7}
 801c4be:	b085      	sub	sp, #20
 801c4c0:	af00      	add	r7, sp, #0
 801c4c2:	6078      	str	r0, [r7, #4]
 801c4c4:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801c4c6:	687b      	ldr	r3, [r7, #4]
 801c4c8:	2b00      	cmp	r3, #0
 801c4ca:	d01e      	beq.n	801c50a <udp_netif_ip_addr_changed+0x4e>
 801c4cc:	687b      	ldr	r3, [r7, #4]
 801c4ce:	681b      	ldr	r3, [r3, #0]
 801c4d0:	2b00      	cmp	r3, #0
 801c4d2:	d01a      	beq.n	801c50a <udp_netif_ip_addr_changed+0x4e>
 801c4d4:	683b      	ldr	r3, [r7, #0]
 801c4d6:	2b00      	cmp	r3, #0
 801c4d8:	d017      	beq.n	801c50a <udp_netif_ip_addr_changed+0x4e>
 801c4da:	683b      	ldr	r3, [r7, #0]
 801c4dc:	681b      	ldr	r3, [r3, #0]
 801c4de:	2b00      	cmp	r3, #0
 801c4e0:	d013      	beq.n	801c50a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801c4e2:	4b0c      	ldr	r3, [pc, #48]	@ (801c514 <udp_netif_ip_addr_changed+0x58>)
 801c4e4:	681b      	ldr	r3, [r3, #0]
 801c4e6:	60fb      	str	r3, [r7, #12]
 801c4e8:	e00c      	b.n	801c504 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801c4ea:	68fb      	ldr	r3, [r7, #12]
 801c4ec:	681a      	ldr	r2, [r3, #0]
 801c4ee:	687b      	ldr	r3, [r7, #4]
 801c4f0:	681b      	ldr	r3, [r3, #0]
 801c4f2:	429a      	cmp	r2, r3
 801c4f4:	d103      	bne.n	801c4fe <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801c4f6:	683b      	ldr	r3, [r7, #0]
 801c4f8:	681a      	ldr	r2, [r3, #0]
 801c4fa:	68fb      	ldr	r3, [r7, #12]
 801c4fc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801c4fe:	68fb      	ldr	r3, [r7, #12]
 801c500:	68db      	ldr	r3, [r3, #12]
 801c502:	60fb      	str	r3, [r7, #12]
 801c504:	68fb      	ldr	r3, [r7, #12]
 801c506:	2b00      	cmp	r3, #0
 801c508:	d1ef      	bne.n	801c4ea <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801c50a:	bf00      	nop
 801c50c:	3714      	adds	r7, #20
 801c50e:	46bd      	mov	sp, r7
 801c510:	bc80      	pop	{r7}
 801c512:	4770      	bx	lr
 801c514:	2000c07c 	.word	0x2000c07c

0801c518 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(struct dhcp *dhcp);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 801c518:	b580      	push	{r7, lr}
 801c51a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 801c51c:	4b20      	ldr	r3, [pc, #128]	@ (801c5a0 <dhcp_inc_pcb_refcount+0x88>)
 801c51e:	781b      	ldrb	r3, [r3, #0]
 801c520:	2b00      	cmp	r3, #0
 801c522:	d133      	bne.n	801c58c <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801c524:	4b1f      	ldr	r3, [pc, #124]	@ (801c5a4 <dhcp_inc_pcb_refcount+0x8c>)
 801c526:	681b      	ldr	r3, [r3, #0]
 801c528:	2b00      	cmp	r3, #0
 801c52a:	d005      	beq.n	801c538 <dhcp_inc_pcb_refcount+0x20>
 801c52c:	4b1e      	ldr	r3, [pc, #120]	@ (801c5a8 <dhcp_inc_pcb_refcount+0x90>)
 801c52e:	22d9      	movs	r2, #217	@ 0xd9
 801c530:	491e      	ldr	r1, [pc, #120]	@ (801c5ac <dhcp_inc_pcb_refcount+0x94>)
 801c532:	481f      	ldr	r0, [pc, #124]	@ (801c5b0 <dhcp_inc_pcb_refcount+0x98>)
 801c534:	f005 fba8 	bl	8021c88 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 801c538:	f7ff ff9c 	bl	801c474 <udp_new>
 801c53c:	4603      	mov	r3, r0
 801c53e:	4a19      	ldr	r2, [pc, #100]	@ (801c5a4 <dhcp_inc_pcb_refcount+0x8c>)
 801c540:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 801c542:	4b18      	ldr	r3, [pc, #96]	@ (801c5a4 <dhcp_inc_pcb_refcount+0x8c>)
 801c544:	681b      	ldr	r3, [r3, #0]
 801c546:	2b00      	cmp	r3, #0
 801c548:	d102      	bne.n	801c550 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801c54a:	f04f 33ff 	mov.w	r3, #4294967295
 801c54e:	e024      	b.n	801c59a <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801c550:	4b14      	ldr	r3, [pc, #80]	@ (801c5a4 <dhcp_inc_pcb_refcount+0x8c>)
 801c552:	681b      	ldr	r3, [r3, #0]
 801c554:	7a1a      	ldrb	r2, [r3, #8]
 801c556:	4b13      	ldr	r3, [pc, #76]	@ (801c5a4 <dhcp_inc_pcb_refcount+0x8c>)
 801c558:	681b      	ldr	r3, [r3, #0]
 801c55a:	f042 0220 	orr.w	r2, r2, #32
 801c55e:	b2d2      	uxtb	r2, r2
 801c560:	721a      	strb	r2, [r3, #8]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 801c562:	4b10      	ldr	r3, [pc, #64]	@ (801c5a4 <dhcp_inc_pcb_refcount+0x8c>)
 801c564:	681b      	ldr	r3, [r3, #0]
 801c566:	2244      	movs	r2, #68	@ 0x44
 801c568:	4912      	ldr	r1, [pc, #72]	@ (801c5b4 <dhcp_inc_pcb_refcount+0x9c>)
 801c56a:	4618      	mov	r0, r3
 801c56c:	f7ff fe78 	bl	801c260 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
 801c570:	4b0c      	ldr	r3, [pc, #48]	@ (801c5a4 <dhcp_inc_pcb_refcount+0x8c>)
 801c572:	681b      	ldr	r3, [r3, #0]
 801c574:	2243      	movs	r2, #67	@ 0x43
 801c576:	490f      	ldr	r1, [pc, #60]	@ (801c5b4 <dhcp_inc_pcb_refcount+0x9c>)
 801c578:	4618      	mov	r0, r3
 801c57a:	f7ff fee1 	bl	801c340 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801c57e:	4b09      	ldr	r3, [pc, #36]	@ (801c5a4 <dhcp_inc_pcb_refcount+0x8c>)
 801c580:	681b      	ldr	r3, [r3, #0]
 801c582:	2200      	movs	r2, #0
 801c584:	490c      	ldr	r1, [pc, #48]	@ (801c5b8 <dhcp_inc_pcb_refcount+0xa0>)
 801c586:	4618      	mov	r0, r3
 801c588:	f7ff ff30 	bl	801c3ec <udp_recv>
  }

  dhcp_pcb_refcount++;
 801c58c:	4b04      	ldr	r3, [pc, #16]	@ (801c5a0 <dhcp_inc_pcb_refcount+0x88>)
 801c58e:	781b      	ldrb	r3, [r3, #0]
 801c590:	3301      	adds	r3, #1
 801c592:	b2da      	uxtb	r2, r3
 801c594:	4b02      	ldr	r3, [pc, #8]	@ (801c5a0 <dhcp_inc_pcb_refcount+0x88>)
 801c596:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 801c598:	2300      	movs	r3, #0
}
 801c59a:	4618      	mov	r0, r3
 801c59c:	bd80      	pop	{r7, pc}
 801c59e:	bf00      	nop
 801c5a0:	2000c0ac 	.word	0x2000c0ac
 801c5a4:	2000c0a8 	.word	0x2000c0a8
 801c5a8:	08026db4 	.word	0x08026db4
 801c5ac:	08026dec 	.word	0x08026dec
 801c5b0:	08026e14 	.word	0x08026e14
 801c5b4:	08030cf4 	.word	0x08030cf4
 801c5b8:	0801dc75 	.word	0x0801dc75

0801c5bc <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 801c5bc:	b580      	push	{r7, lr}
 801c5be:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801c5c0:	4b0e      	ldr	r3, [pc, #56]	@ (801c5fc <dhcp_dec_pcb_refcount+0x40>)
 801c5c2:	781b      	ldrb	r3, [r3, #0]
 801c5c4:	2b00      	cmp	r3, #0
 801c5c6:	d105      	bne.n	801c5d4 <dhcp_dec_pcb_refcount+0x18>
 801c5c8:	4b0d      	ldr	r3, [pc, #52]	@ (801c600 <dhcp_dec_pcb_refcount+0x44>)
 801c5ca:	22f3      	movs	r2, #243	@ 0xf3
 801c5cc:	490d      	ldr	r1, [pc, #52]	@ (801c604 <dhcp_dec_pcb_refcount+0x48>)
 801c5ce:	480e      	ldr	r0, [pc, #56]	@ (801c608 <dhcp_dec_pcb_refcount+0x4c>)
 801c5d0:	f005 fb5a 	bl	8021c88 <iprintf>
  dhcp_pcb_refcount--;
 801c5d4:	4b09      	ldr	r3, [pc, #36]	@ (801c5fc <dhcp_dec_pcb_refcount+0x40>)
 801c5d6:	781b      	ldrb	r3, [r3, #0]
 801c5d8:	3b01      	subs	r3, #1
 801c5da:	b2da      	uxtb	r2, r3
 801c5dc:	4b07      	ldr	r3, [pc, #28]	@ (801c5fc <dhcp_dec_pcb_refcount+0x40>)
 801c5de:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 801c5e0:	4b06      	ldr	r3, [pc, #24]	@ (801c5fc <dhcp_dec_pcb_refcount+0x40>)
 801c5e2:	781b      	ldrb	r3, [r3, #0]
 801c5e4:	2b00      	cmp	r3, #0
 801c5e6:	d107      	bne.n	801c5f8 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 801c5e8:	4b08      	ldr	r3, [pc, #32]	@ (801c60c <dhcp_dec_pcb_refcount+0x50>)
 801c5ea:	681b      	ldr	r3, [r3, #0]
 801c5ec:	4618      	mov	r0, r3
 801c5ee:	f7ff ff0f 	bl	801c410 <udp_remove>
    dhcp_pcb = NULL;
 801c5f2:	4b06      	ldr	r3, [pc, #24]	@ (801c60c <dhcp_dec_pcb_refcount+0x50>)
 801c5f4:	2200      	movs	r2, #0
 801c5f6:	601a      	str	r2, [r3, #0]
  }
}
 801c5f8:	bf00      	nop
 801c5fa:	bd80      	pop	{r7, pc}
 801c5fc:	2000c0ac 	.word	0x2000c0ac
 801c600:	08026db4 	.word	0x08026db4
 801c604:	08026e3c 	.word	0x08026e3c
 801c608:	08026e14 	.word	0x08026e14
 801c60c:	2000c0a8 	.word	0x2000c0a8

0801c610 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 801c610:	b580      	push	{r7, lr}
 801c612:	b084      	sub	sp, #16
 801c614:	af00      	add	r7, sp, #0
 801c616:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c618:	687b      	ldr	r3, [r7, #4]
 801c61a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c61c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801c61e:	210c      	movs	r1, #12
 801c620:	68f8      	ldr	r0, [r7, #12]
 801c622:	f000 ff85 	bl	801d530 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801c626:	4b06      	ldr	r3, [pc, #24]	@ (801c640 <dhcp_handle_nak+0x30>)
 801c628:	4a05      	ldr	r2, [pc, #20]	@ (801c640 <dhcp_handle_nak+0x30>)
 801c62a:	4905      	ldr	r1, [pc, #20]	@ (801c640 <dhcp_handle_nak+0x30>)
 801c62c:	6878      	ldr	r0, [r7, #4]
 801c62e:	f7f8 fe6b 	bl	8015308 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801c632:	6878      	ldr	r0, [r7, #4]
 801c634:	f000 fbb6 	bl	801cda4 <dhcp_discover>
}
 801c638:	bf00      	nop
 801c63a:	3710      	adds	r7, #16
 801c63c:	46bd      	mov	sp, r7
 801c63e:	bd80      	pop	{r7, pc}
 801c640:	08030cf4 	.word	0x08030cf4

0801c644 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 801c644:	b580      	push	{r7, lr}
 801c646:	b084      	sub	sp, #16
 801c648:	af00      	add	r7, sp, #0
 801c64a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c64c:	687b      	ldr	r3, [r7, #4]
 801c64e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c650:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801c652:	2108      	movs	r1, #8
 801c654:	68f8      	ldr	r0, [r7, #12]
 801c656:	f000 ff6b 	bl	801d530 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801c65a:	68fb      	ldr	r3, [r7, #12]
 801c65c:	3328      	adds	r3, #40	@ 0x28
 801c65e:	2200      	movs	r2, #0
 801c660:	4619      	mov	r1, r3
 801c662:	6878      	ldr	r0, [r7, #4]
 801c664:	f002 fbae 	bl	801edc4 <etharp_query>
 801c668:	4603      	mov	r3, r0
 801c66a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 801c66c:	68fb      	ldr	r3, [r7, #12]
 801c66e:	7a9b      	ldrb	r3, [r3, #10]
 801c670:	2bff      	cmp	r3, #255	@ 0xff
 801c672:	d005      	beq.n	801c680 <dhcp_check+0x3c>
    dhcp->tries++;
 801c674:	68fb      	ldr	r3, [r7, #12]
 801c676:	7a9b      	ldrb	r3, [r3, #10]
 801c678:	3301      	adds	r3, #1
 801c67a:	b2da      	uxtb	r2, r3
 801c67c:	68fb      	ldr	r3, [r7, #12]
 801c67e:	729a      	strb	r2, [r3, #10]
  }
  msecs = 500;
 801c680:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 801c684:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801c686:	893b      	ldrh	r3, [r7, #8]
 801c688:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801c68c:	4a06      	ldr	r2, [pc, #24]	@ (801c6a8 <dhcp_check+0x64>)
 801c68e:	fb82 1203 	smull	r1, r2, r2, r3
 801c692:	1152      	asrs	r2, r2, #5
 801c694:	17db      	asrs	r3, r3, #31
 801c696:	1ad3      	subs	r3, r2, r3
 801c698:	b29a      	uxth	r2, r3
 801c69a:	68fb      	ldr	r3, [r7, #12]
 801c69c:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801c69e:	bf00      	nop
 801c6a0:	3710      	adds	r7, #16
 801c6a2:	46bd      	mov	sp, r7
 801c6a4:	bd80      	pop	{r7, pc}
 801c6a6:	bf00      	nop
 801c6a8:	10624dd3 	.word	0x10624dd3

0801c6ac <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
 801c6ac:	b580      	push	{r7, lr}
 801c6ae:	b084      	sub	sp, #16
 801c6b0:	af00      	add	r7, sp, #0
 801c6b2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c6b4:	687b      	ldr	r3, [r7, #4]
 801c6b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c6b8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801c6ba:	4b0c      	ldr	r3, [pc, #48]	@ (801c6ec <dhcp_handle_offer+0x40>)
 801c6bc:	789b      	ldrb	r3, [r3, #2]
 801c6be:	2b00      	cmp	r3, #0
 801c6c0:	d00f      	beq.n	801c6e2 <dhcp_handle_offer+0x36>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801c6c2:	4b0b      	ldr	r3, [pc, #44]	@ (801c6f0 <dhcp_handle_offer+0x44>)
 801c6c4:	689b      	ldr	r3, [r3, #8]
 801c6c6:	4618      	mov	r0, r3
 801c6c8:	f7f8 f8a1 	bl	801480e <lwip_htonl>
 801c6cc:	4602      	mov	r2, r0
 801c6ce:	68fb      	ldr	r3, [r7, #12]
 801c6d0:	625a      	str	r2, [r3, #36]	@ 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 801c6d2:	68fb      	ldr	r3, [r7, #12]
 801c6d4:	685b      	ldr	r3, [r3, #4]
 801c6d6:	691a      	ldr	r2, [r3, #16]
 801c6d8:	68fb      	ldr	r3, [r7, #12]
 801c6da:	629a      	str	r2, [r3, #40]	@ 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801c6dc:	6878      	ldr	r0, [r7, #4]
 801c6de:	f000 f809 	bl	801c6f4 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
 801c6e2:	bf00      	nop
 801c6e4:	3710      	adds	r7, #16
 801c6e6:	46bd      	mov	sp, r7
 801c6e8:	bd80      	pop	{r7, pc}
 801c6ea:	bf00      	nop
 801c6ec:	2000c0a0 	.word	0x2000c0a0
 801c6f0:	2000c080 	.word	0x2000c080

0801c6f4 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 801c6f4:	b580      	push	{r7, lr}
 801c6f6:	b088      	sub	sp, #32
 801c6f8:	af02      	add	r7, sp, #8
 801c6fa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c6fc:	687b      	ldr	r3, [r7, #4]
 801c6fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c700:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801c702:	2101      	movs	r1, #1
 801c704:	6938      	ldr	r0, [r7, #16]
 801c706:	f000 ff13 	bl	801d530 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 801c70a:	2203      	movs	r2, #3
 801c70c:	6939      	ldr	r1, [r7, #16]
 801c70e:	6878      	ldr	r0, [r7, #4]
 801c710:	f001 fb96 	bl	801de40 <dhcp_create_msg>
 801c714:	4603      	mov	r3, r0
 801c716:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 801c718:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c71c:	2b00      	cmp	r3, #0
 801c71e:	d159      	bne.n	801c7d4 <dhcp_select+0xe0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c720:	2202      	movs	r2, #2
 801c722:	2139      	movs	r1, #57	@ 0x39
 801c724:	6938      	ldr	r0, [r7, #16]
 801c726:	f000 ff1d 	bl	801d564 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 801c72a:	687b      	ldr	r3, [r7, #4]
 801c72c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801c72e:	4619      	mov	r1, r3
 801c730:	6938      	ldr	r0, [r7, #16]
 801c732:	f000 ff79 	bl	801d628 <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 801c736:	2204      	movs	r2, #4
 801c738:	2132      	movs	r1, #50	@ 0x32
 801c73a:	6938      	ldr	r0, [r7, #16]
 801c73c:	f000 ff12 	bl	801d564 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801c740:	693b      	ldr	r3, [r7, #16]
 801c742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c744:	4618      	mov	r0, r3
 801c746:	f7f8 f862 	bl	801480e <lwip_htonl>
 801c74a:	4603      	mov	r3, r0
 801c74c:	4619      	mov	r1, r3
 801c74e:	6938      	ldr	r0, [r7, #16]
 801c750:	f000 ffa4 	bl	801d69c <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 801c754:	2204      	movs	r2, #4
 801c756:	2136      	movs	r1, #54	@ 0x36
 801c758:	6938      	ldr	r0, [r7, #16]
 801c75a:	f000 ff03 	bl	801d564 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801c75e:	693b      	ldr	r3, [r7, #16]
 801c760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c762:	4618      	mov	r0, r3
 801c764:	f7f8 f853 	bl	801480e <lwip_htonl>
 801c768:	4603      	mov	r3, r0
 801c76a:	4619      	mov	r1, r3
 801c76c:	6938      	ldr	r0, [r7, #16]
 801c76e:	f000 ff95 	bl	801d69c <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c772:	2203      	movs	r2, #3
 801c774:	2137      	movs	r1, #55	@ 0x37
 801c776:	6938      	ldr	r0, [r7, #16]
 801c778:	f000 fef4 	bl	801d564 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c77c:	2300      	movs	r3, #0
 801c77e:	75fb      	strb	r3, [r7, #23]
 801c780:	e009      	b.n	801c796 <dhcp_select+0xa2>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 801c782:	7dfb      	ldrb	r3, [r7, #23]
 801c784:	4a29      	ldr	r2, [pc, #164]	@ (801c82c <dhcp_select+0x138>)
 801c786:	5cd3      	ldrb	r3, [r2, r3]
 801c788:	4619      	mov	r1, r3
 801c78a:	6938      	ldr	r0, [r7, #16]
 801c78c:	f000 ff24 	bl	801d5d8 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c790:	7dfb      	ldrb	r3, [r7, #23]
 801c792:	3301      	adds	r3, #1
 801c794:	75fb      	strb	r3, [r7, #23]
 801c796:	7dfb      	ldrb	r3, [r7, #23]
 801c798:	2b02      	cmp	r3, #2
 801c79a:	d9f2      	bls.n	801c782 <dhcp_select+0x8e>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 801c79c:	6938      	ldr	r0, [r7, #16]
 801c79e:	f001 fcf3 	bl	801e188 <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801c7a2:	693b      	ldr	r3, [r7, #16]
 801c7a4:	68da      	ldr	r2, [r3, #12]
 801c7a6:	693b      	ldr	r3, [r7, #16]
 801c7a8:	8a9b      	ldrh	r3, [r3, #20]
 801c7aa:	33f0      	adds	r3, #240	@ 0xf0
 801c7ac:	b29b      	uxth	r3, r3
 801c7ae:	4619      	mov	r1, r3
 801c7b0:	4610      	mov	r0, r2
 801c7b2:	f7f9 f903 	bl	80159bc <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 801c7b6:	4b1e      	ldr	r3, [pc, #120]	@ (801c830 <dhcp_select+0x13c>)
 801c7b8:	6818      	ldr	r0, [r3, #0]
 801c7ba:	693b      	ldr	r3, [r7, #16]
 801c7bc:	68d9      	ldr	r1, [r3, #12]
 801c7be:	4b1d      	ldr	r3, [pc, #116]	@ (801c834 <dhcp_select+0x140>)
 801c7c0:	9301      	str	r3, [sp, #4]
 801c7c2:	687b      	ldr	r3, [r7, #4]
 801c7c4:	9300      	str	r3, [sp, #0]
 801c7c6:	2343      	movs	r3, #67	@ 0x43
 801c7c8:	4a1b      	ldr	r2, [pc, #108]	@ (801c838 <dhcp_select+0x144>)
 801c7ca:	f7ff fc9f 	bl	801c10c <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 801c7ce:	6938      	ldr	r0, [r7, #16]
 801c7d0:	f001 fc98 	bl	801e104 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801c7d4:	693b      	ldr	r3, [r7, #16]
 801c7d6:	7a9b      	ldrb	r3, [r3, #10]
 801c7d8:	2bff      	cmp	r3, #255	@ 0xff
 801c7da:	d005      	beq.n	801c7e8 <dhcp_select+0xf4>
    dhcp->tries++;
 801c7dc:	693b      	ldr	r3, [r7, #16]
 801c7de:	7a9b      	ldrb	r3, [r3, #10]
 801c7e0:	3301      	adds	r3, #1
 801c7e2:	b2da      	uxtb	r2, r3
 801c7e4:	693b      	ldr	r3, [r7, #16]
 801c7e6:	729a      	strb	r2, [r3, #10]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 801c7e8:	693b      	ldr	r3, [r7, #16]
 801c7ea:	7a9b      	ldrb	r3, [r3, #10]
 801c7ec:	2b05      	cmp	r3, #5
 801c7ee:	d807      	bhi.n	801c800 <dhcp_select+0x10c>
 801c7f0:	693b      	ldr	r3, [r7, #16]
 801c7f2:	7a9b      	ldrb	r3, [r3, #10]
 801c7f4:	461a      	mov	r2, r3
 801c7f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801c7fa:	4093      	lsls	r3, r2
 801c7fc:	b29b      	uxth	r3, r3
 801c7fe:	e001      	b.n	801c804 <dhcp_select+0x110>
 801c800:	f64e 2360 	movw	r3, #60000	@ 0xea60
 801c804:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801c806:	89bb      	ldrh	r3, [r7, #12]
 801c808:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801c80c:	4a0b      	ldr	r2, [pc, #44]	@ (801c83c <dhcp_select+0x148>)
 801c80e:	fb82 1203 	smull	r1, r2, r2, r3
 801c812:	1152      	asrs	r2, r2, #5
 801c814:	17db      	asrs	r3, r3, #31
 801c816:	1ad3      	subs	r3, r2, r3
 801c818:	b29a      	uxth	r2, r3
 801c81a:	693b      	ldr	r3, [r7, #16]
 801c81c:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801c81e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c822:	4618      	mov	r0, r3
 801c824:	3718      	adds	r7, #24
 801c826:	46bd      	mov	sp, r7
 801c828:	bd80      	pop	{r7, pc}
 801c82a:	bf00      	nop
 801c82c:	20000128 	.word	0x20000128
 801c830:	2000c0a8 	.word	0x2000c0a8
 801c834:	08030cf4 	.word	0x08030cf4
 801c838:	08030cf8 	.word	0x08030cf8
 801c83c:	10624dd3 	.word	0x10624dd3

0801c840 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 801c840:	b580      	push	{r7, lr}
 801c842:	b082      	sub	sp, #8
 801c844:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 801c846:	4b27      	ldr	r3, [pc, #156]	@ (801c8e4 <dhcp_coarse_tmr+0xa4>)
 801c848:	681b      	ldr	r3, [r3, #0]
 801c84a:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
 801c84c:	e042      	b.n	801c8d4 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801c84e:	687b      	ldr	r3, [r7, #4]
 801c850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c852:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801c854:	683b      	ldr	r3, [r7, #0]
 801c856:	2b00      	cmp	r3, #0
 801c858:	d039      	beq.n	801c8ce <dhcp_coarse_tmr+0x8e>
 801c85a:	683b      	ldr	r3, [r7, #0]
 801c85c:	7a5b      	ldrb	r3, [r3, #9]
 801c85e:	2b00      	cmp	r3, #0
 801c860:	d035      	beq.n	801c8ce <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801c862:	683b      	ldr	r3, [r7, #0]
 801c864:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801c866:	2b00      	cmp	r3, #0
 801c868:	d012      	beq.n	801c890 <dhcp_coarse_tmr+0x50>
 801c86a:	683b      	ldr	r3, [r7, #0]
 801c86c:	8c1b      	ldrh	r3, [r3, #32]
 801c86e:	3301      	adds	r3, #1
 801c870:	b29a      	uxth	r2, r3
 801c872:	683b      	ldr	r3, [r7, #0]
 801c874:	841a      	strh	r2, [r3, #32]
 801c876:	683b      	ldr	r3, [r7, #0]
 801c878:	8c1a      	ldrh	r2, [r3, #32]
 801c87a:	683b      	ldr	r3, [r7, #0]
 801c87c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801c87e:	429a      	cmp	r2, r3
 801c880:	d106      	bne.n	801c890 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
 801c882:	6878      	ldr	r0, [r7, #4]
 801c884:	f000 fd94 	bl	801d3b0 <dhcp_release>
        dhcp_discover(netif);
 801c888:	6878      	ldr	r0, [r7, #4]
 801c88a:	f000 fa8b 	bl	801cda4 <dhcp_discover>
 801c88e:	e01e      	b.n	801c8ce <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801c890:	683b      	ldr	r3, [r7, #0]
 801c892:	8bdb      	ldrh	r3, [r3, #30]
 801c894:	2b00      	cmp	r3, #0
 801c896:	d00b      	beq.n	801c8b0 <dhcp_coarse_tmr+0x70>
 801c898:	683b      	ldr	r3, [r7, #0]
 801c89a:	8bdb      	ldrh	r3, [r3, #30]
 801c89c:	1e5a      	subs	r2, r3, #1
 801c89e:	b291      	uxth	r1, r2
 801c8a0:	683a      	ldr	r2, [r7, #0]
 801c8a2:	83d1      	strh	r1, [r2, #30]
 801c8a4:	2b01      	cmp	r3, #1
 801c8a6:	d103      	bne.n	801c8b0 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 801c8a8:	6878      	ldr	r0, [r7, #4]
 801c8aa:	f000 f8c6 	bl	801ca3a <dhcp_t2_timeout>
 801c8ae:	e00e      	b.n	801c8ce <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801c8b0:	683b      	ldr	r3, [r7, #0]
 801c8b2:	8b9b      	ldrh	r3, [r3, #28]
 801c8b4:	2b00      	cmp	r3, #0
 801c8b6:	d00a      	beq.n	801c8ce <dhcp_coarse_tmr+0x8e>
 801c8b8:	683b      	ldr	r3, [r7, #0]
 801c8ba:	8b9b      	ldrh	r3, [r3, #28]
 801c8bc:	1e5a      	subs	r2, r3, #1
 801c8be:	b291      	uxth	r1, r2
 801c8c0:	683a      	ldr	r2, [r7, #0]
 801c8c2:	8391      	strh	r1, [r2, #28]
 801c8c4:	2b01      	cmp	r3, #1
 801c8c6:	d102      	bne.n	801c8ce <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 801c8c8:	6878      	ldr	r0, [r7, #4]
 801c8ca:	f000 f888 	bl	801c9de <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
 801c8ce:	687b      	ldr	r3, [r7, #4]
 801c8d0:	681b      	ldr	r3, [r3, #0]
 801c8d2:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 801c8d4:	687b      	ldr	r3, [r7, #4]
 801c8d6:	2b00      	cmp	r3, #0
 801c8d8:	d1b9      	bne.n	801c84e <dhcp_coarse_tmr+0xe>
  }
}
 801c8da:	bf00      	nop
 801c8dc:	bf00      	nop
 801c8de:	3708      	adds	r7, #8
 801c8e0:	46bd      	mov	sp, r7
 801c8e2:	bd80      	pop	{r7, pc}
 801c8e4:	2000be7c 	.word	0x2000be7c

0801c8e8 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 801c8e8:	b580      	push	{r7, lr}
 801c8ea:	b082      	sub	sp, #8
 801c8ec:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 801c8ee:	4b16      	ldr	r3, [pc, #88]	@ (801c948 <dhcp_fine_tmr+0x60>)
 801c8f0:	681b      	ldr	r3, [r3, #0]
 801c8f2:	607b      	str	r3, [r7, #4]
  /* loop through netif's */
  while (netif != NULL) {
 801c8f4:	e020      	b.n	801c938 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801c8f6:	687b      	ldr	r3, [r7, #4]
 801c8f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c8fa:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 801c8fc:	683b      	ldr	r3, [r7, #0]
 801c8fe:	2b00      	cmp	r3, #0
 801c900:	d017      	beq.n	801c932 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801c902:	683b      	ldr	r3, [r7, #0]
 801c904:	8adb      	ldrh	r3, [r3, #22]
 801c906:	2b01      	cmp	r3, #1
 801c908:	d906      	bls.n	801c918 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801c90a:	683b      	ldr	r3, [r7, #0]
 801c90c:	8adb      	ldrh	r3, [r3, #22]
 801c90e:	3b01      	subs	r3, #1
 801c910:	b29a      	uxth	r2, r3
 801c912:	683b      	ldr	r3, [r7, #0]
 801c914:	82da      	strh	r2, [r3, #22]
 801c916:	e00c      	b.n	801c932 <dhcp_fine_tmr+0x4a>
      }
      else if (dhcp->request_timeout == 1) {
 801c918:	683b      	ldr	r3, [r7, #0]
 801c91a:	8adb      	ldrh	r3, [r3, #22]
 801c91c:	2b01      	cmp	r3, #1
 801c91e:	d108      	bne.n	801c932 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 801c920:	683b      	ldr	r3, [r7, #0]
 801c922:	8adb      	ldrh	r3, [r3, #22]
 801c924:	3b01      	subs	r3, #1
 801c926:	b29a      	uxth	r2, r3
 801c928:	683b      	ldr	r3, [r7, #0]
 801c92a:	82da      	strh	r2, [r3, #22]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 801c92c:	6878      	ldr	r0, [r7, #4]
 801c92e:	f000 f80d 	bl	801c94c <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
 801c932:	687b      	ldr	r3, [r7, #4]
 801c934:	681b      	ldr	r3, [r3, #0]
 801c936:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 801c938:	687b      	ldr	r3, [r7, #4]
 801c93a:	2b00      	cmp	r3, #0
 801c93c:	d1db      	bne.n	801c8f6 <dhcp_fine_tmr+0xe>
  }
}
 801c93e:	bf00      	nop
 801c940:	bf00      	nop
 801c942:	3708      	adds	r7, #8
 801c944:	46bd      	mov	sp, r7
 801c946:	bd80      	pop	{r7, pc}
 801c948:	2000be7c 	.word	0x2000be7c

0801c94c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 801c94c:	b580      	push	{r7, lr}
 801c94e:	b084      	sub	sp, #16
 801c950:	af00      	add	r7, sp, #0
 801c952:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c954:	687b      	ldr	r3, [r7, #4]
 801c956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c958:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801c95a:	68fb      	ldr	r3, [r7, #12]
 801c95c:	7a5b      	ldrb	r3, [r3, #9]
 801c95e:	2b0c      	cmp	r3, #12
 801c960:	d003      	beq.n	801c96a <dhcp_timeout+0x1e>
 801c962:	68fb      	ldr	r3, [r7, #12]
 801c964:	7a5b      	ldrb	r3, [r3, #9]
 801c966:	2b06      	cmp	r3, #6
 801c968:	d103      	bne.n	801c972 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801c96a:	6878      	ldr	r0, [r7, #4]
 801c96c:	f000 fa1a 	bl	801cda4 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 801c970:	e031      	b.n	801c9d6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801c972:	68fb      	ldr	r3, [r7, #12]
 801c974:	7a5b      	ldrb	r3, [r3, #9]
 801c976:	2b01      	cmp	r3, #1
 801c978:	d10e      	bne.n	801c998 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801c97a:	68fb      	ldr	r3, [r7, #12]
 801c97c:	7a9b      	ldrb	r3, [r3, #10]
 801c97e:	2b05      	cmp	r3, #5
 801c980:	d803      	bhi.n	801c98a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801c982:	6878      	ldr	r0, [r7, #4]
 801c984:	f7ff feb6 	bl	801c6f4 <dhcp_select>
}
 801c988:	e025      	b.n	801c9d6 <dhcp_timeout+0x8a>
      dhcp_release(netif);
 801c98a:	6878      	ldr	r0, [r7, #4]
 801c98c:	f000 fd10 	bl	801d3b0 <dhcp_release>
      dhcp_discover(netif);
 801c990:	6878      	ldr	r0, [r7, #4]
 801c992:	f000 fa07 	bl	801cda4 <dhcp_discover>
}
 801c996:	e01e      	b.n	801c9d6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801c998:	68fb      	ldr	r3, [r7, #12]
 801c99a:	7a5b      	ldrb	r3, [r3, #9]
 801c99c:	2b08      	cmp	r3, #8
 801c99e:	d10b      	bne.n	801c9b8 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 801c9a0:	68fb      	ldr	r3, [r7, #12]
 801c9a2:	7a9b      	ldrb	r3, [r3, #10]
 801c9a4:	2b01      	cmp	r3, #1
 801c9a6:	d803      	bhi.n	801c9b0 <dhcp_timeout+0x64>
      dhcp_check(netif);
 801c9a8:	6878      	ldr	r0, [r7, #4]
 801c9aa:	f7ff fe4b 	bl	801c644 <dhcp_check>
}
 801c9ae:	e012      	b.n	801c9d6 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 801c9b0:	6878      	ldr	r0, [r7, #4]
 801c9b2:	f000 fa83 	bl	801cebc <dhcp_bind>
}
 801c9b6:	e00e      	b.n	801c9d6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801c9b8:	68fb      	ldr	r3, [r7, #12]
 801c9ba:	7a5b      	ldrb	r3, [r3, #9]
 801c9bc:	2b03      	cmp	r3, #3
 801c9be:	d10a      	bne.n	801c9d6 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 801c9c0:	68fb      	ldr	r3, [r7, #12]
 801c9c2:	7a9b      	ldrb	r3, [r3, #10]
 801c9c4:	2b01      	cmp	r3, #1
 801c9c6:	d803      	bhi.n	801c9d0 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 801c9c8:	6878      	ldr	r0, [r7, #4]
 801c9ca:	f000 fc5d 	bl	801d288 <dhcp_reboot>
}
 801c9ce:	e002      	b.n	801c9d6 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801c9d0:	6878      	ldr	r0, [r7, #4]
 801c9d2:	f000 f9e7 	bl	801cda4 <dhcp_discover>
}
 801c9d6:	bf00      	nop
 801c9d8:	3710      	adds	r7, #16
 801c9da:	46bd      	mov	sp, r7
 801c9dc:	bd80      	pop	{r7, pc}

0801c9de <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801c9de:	b580      	push	{r7, lr}
 801c9e0:	b084      	sub	sp, #16
 801c9e2:	af00      	add	r7, sp, #0
 801c9e4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c9e6:	687b      	ldr	r3, [r7, #4]
 801c9e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c9ea:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801c9ec:	68fb      	ldr	r3, [r7, #12]
 801c9ee:	7a5b      	ldrb	r3, [r3, #9]
 801c9f0:	2b01      	cmp	r3, #1
 801c9f2:	d007      	beq.n	801ca04 <dhcp_t1_timeout+0x26>
 801c9f4:	68fb      	ldr	r3, [r7, #12]
 801c9f6:	7a5b      	ldrb	r3, [r3, #9]
 801c9f8:	2b0a      	cmp	r3, #10
 801c9fa:	d003      	beq.n	801ca04 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 801c9fc:	68fb      	ldr	r3, [r7, #12]
 801c9fe:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801ca00:	2b05      	cmp	r3, #5
 801ca02:	d116      	bne.n	801ca32 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801ca04:	6878      	ldr	r0, [r7, #4]
 801ca06:	f000 fb33 	bl	801d070 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 801ca0a:	68fb      	ldr	r3, [r7, #12]
 801ca0c:	8b5b      	ldrh	r3, [r3, #26]
 801ca0e:	461a      	mov	r2, r3
 801ca10:	68fb      	ldr	r3, [r7, #12]
 801ca12:	8c1b      	ldrh	r3, [r3, #32]
 801ca14:	1ad3      	subs	r3, r2, r3
 801ca16:	2b01      	cmp	r3, #1
 801ca18:	dd0b      	ble.n	801ca32 <dhcp_t1_timeout+0x54>
    {
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801ca1a:	68fb      	ldr	r3, [r7, #12]
 801ca1c:	8b5b      	ldrh	r3, [r3, #26]
 801ca1e:	461a      	mov	r2, r3
 801ca20:	68fb      	ldr	r3, [r7, #12]
 801ca22:	8c1b      	ldrh	r3, [r3, #32]
 801ca24:	1ad3      	subs	r3, r2, r3
 801ca26:	0fda      	lsrs	r2, r3, #31
 801ca28:	4413      	add	r3, r2
 801ca2a:	105b      	asrs	r3, r3, #1
 801ca2c:	b29a      	uxth	r2, r3
 801ca2e:	68fb      	ldr	r3, [r7, #12]
 801ca30:	839a      	strh	r2, [r3, #28]
    }
  }
}
 801ca32:	bf00      	nop
 801ca34:	3710      	adds	r7, #16
 801ca36:	46bd      	mov	sp, r7
 801ca38:	bd80      	pop	{r7, pc}

0801ca3a <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801ca3a:	b580      	push	{r7, lr}
 801ca3c:	b084      	sub	sp, #16
 801ca3e:	af00      	add	r7, sp, #0
 801ca40:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ca42:	687b      	ldr	r3, [r7, #4]
 801ca44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ca46:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801ca48:	68fb      	ldr	r3, [r7, #12]
 801ca4a:	7a5b      	ldrb	r3, [r3, #9]
 801ca4c:	2b01      	cmp	r3, #1
 801ca4e:	d00b      	beq.n	801ca68 <dhcp_t2_timeout+0x2e>
 801ca50:	68fb      	ldr	r3, [r7, #12]
 801ca52:	7a5b      	ldrb	r3, [r3, #9]
 801ca54:	2b0a      	cmp	r3, #10
 801ca56:	d007      	beq.n	801ca68 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801ca58:	68fb      	ldr	r3, [r7, #12]
 801ca5a:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801ca5c:	2b05      	cmp	r3, #5
 801ca5e:	d003      	beq.n	801ca68 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801ca60:	68fb      	ldr	r3, [r7, #12]
 801ca62:	7a5b      	ldrb	r3, [r3, #9]
 801ca64:	2b04      	cmp	r3, #4
 801ca66:	d116      	bne.n	801ca96 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801ca68:	6878      	ldr	r0, [r7, #4]
 801ca6a:	f000 fb87 	bl	801d17c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 801ca6e:	68fb      	ldr	r3, [r7, #12]
 801ca70:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801ca72:	461a      	mov	r2, r3
 801ca74:	68fb      	ldr	r3, [r7, #12]
 801ca76:	8c1b      	ldrh	r3, [r3, #32]
 801ca78:	1ad3      	subs	r3, r2, r3
 801ca7a:	2b01      	cmp	r3, #1
 801ca7c:	dd0b      	ble.n	801ca96 <dhcp_t2_timeout+0x5c>
    {
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801ca7e:	68fb      	ldr	r3, [r7, #12]
 801ca80:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801ca82:	461a      	mov	r2, r3
 801ca84:	68fb      	ldr	r3, [r7, #12]
 801ca86:	8c1b      	ldrh	r3, [r3, #32]
 801ca88:	1ad3      	subs	r3, r2, r3
 801ca8a:	0fda      	lsrs	r2, r3, #31
 801ca8c:	4413      	add	r3, r2
 801ca8e:	105b      	asrs	r3, r3, #1
 801ca90:	b29a      	uxth	r2, r3
 801ca92:	68fb      	ldr	r3, [r7, #12]
 801ca94:	83da      	strh	r2, [r3, #30]
    }
  }
}
 801ca96:	bf00      	nop
 801ca98:	3710      	adds	r7, #16
 801ca9a:	46bd      	mov	sp, r7
 801ca9c:	bd80      	pop	{r7, pc}
	...

0801caa0 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
 801caa0:	b580      	push	{r7, lr}
 801caa2:	b084      	sub	sp, #16
 801caa4:	af00      	add	r7, sp, #0
 801caa6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801caa8:	687b      	ldr	r3, [r7, #4]
 801caaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801caac:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801caae:	68fb      	ldr	r3, [r7, #12]
 801cab0:	2200      	movs	r2, #0
 801cab2:	62da      	str	r2, [r3, #44]	@ 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801cab4:	68fb      	ldr	r3, [r7, #12]
 801cab6:	2200      	movs	r2, #0
 801cab8:	631a      	str	r2, [r3, #48]	@ 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801caba:	4b27      	ldr	r3, [pc, #156]	@ (801cb58 <dhcp_handle_ack+0xb8>)
 801cabc:	78db      	ldrb	r3, [r3, #3]
 801cabe:	2b00      	cmp	r3, #0
 801cac0:	d003      	beq.n	801caca <dhcp_handle_ack+0x2a>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801cac2:	4b26      	ldr	r3, [pc, #152]	@ (801cb5c <dhcp_handle_ack+0xbc>)
 801cac4:	68da      	ldr	r2, [r3, #12]
 801cac6:	68fb      	ldr	r3, [r7, #12]
 801cac8:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801caca:	4b23      	ldr	r3, [pc, #140]	@ (801cb58 <dhcp_handle_ack+0xb8>)
 801cacc:	791b      	ldrb	r3, [r3, #4]
 801cace:	2b00      	cmp	r3, #0
 801cad0:	d004      	beq.n	801cadc <dhcp_handle_ack+0x3c>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801cad2:	4b22      	ldr	r3, [pc, #136]	@ (801cb5c <dhcp_handle_ack+0xbc>)
 801cad4:	691a      	ldr	r2, [r3, #16]
 801cad6:	68fb      	ldr	r3, [r7, #12]
 801cad8:	639a      	str	r2, [r3, #56]	@ 0x38
 801cada:	e004      	b.n	801cae6 <dhcp_handle_ack+0x46>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801cadc:	68fb      	ldr	r3, [r7, #12]
 801cade:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cae0:	085a      	lsrs	r2, r3, #1
 801cae2:	68fb      	ldr	r3, [r7, #12]
 801cae4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801cae6:	4b1c      	ldr	r3, [pc, #112]	@ (801cb58 <dhcp_handle_ack+0xb8>)
 801cae8:	795b      	ldrb	r3, [r3, #5]
 801caea:	2b00      	cmp	r3, #0
 801caec:	d004      	beq.n	801caf8 <dhcp_handle_ack+0x58>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801caee:	4b1b      	ldr	r3, [pc, #108]	@ (801cb5c <dhcp_handle_ack+0xbc>)
 801caf0:	695a      	ldr	r2, [r3, #20]
 801caf2:	68fb      	ldr	r3, [r7, #12]
 801caf4:	63da      	str	r2, [r3, #60]	@ 0x3c
 801caf6:	e007      	b.n	801cb08 <dhcp_handle_ack+0x68>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801caf8:	68fb      	ldr	r3, [r7, #12]
 801cafa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801cafc:	4613      	mov	r3, r2
 801cafe:	00db      	lsls	r3, r3, #3
 801cb00:	1a9b      	subs	r3, r3, r2
 801cb02:	08da      	lsrs	r2, r3, #3
 801cb04:	68fb      	ldr	r3, [r7, #12]
 801cb06:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 801cb08:	68fb      	ldr	r3, [r7, #12]
 801cb0a:	685b      	ldr	r3, [r3, #4]
 801cb0c:	691a      	ldr	r2, [r3, #16]
 801cb0e:	68fb      	ldr	r3, [r7, #12]
 801cb10:	629a      	str	r2, [r3, #40]	@ 0x28
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801cb12:	4b11      	ldr	r3, [pc, #68]	@ (801cb58 <dhcp_handle_ack+0xb8>)
 801cb14:	799b      	ldrb	r3, [r3, #6]
 801cb16:	2b00      	cmp	r3, #0
 801cb18:	d00b      	beq.n	801cb32 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801cb1a:	4b10      	ldr	r3, [pc, #64]	@ (801cb5c <dhcp_handle_ack+0xbc>)
 801cb1c:	699b      	ldr	r3, [r3, #24]
 801cb1e:	4618      	mov	r0, r3
 801cb20:	f7f7 fe75 	bl	801480e <lwip_htonl>
 801cb24:	4602      	mov	r2, r0
 801cb26:	68fb      	ldr	r3, [r7, #12]
 801cb28:	62da      	str	r2, [r3, #44]	@ 0x2c
    dhcp->subnet_mask_given = 1;
 801cb2a:	68fb      	ldr	r3, [r7, #12]
 801cb2c:	2201      	movs	r2, #1
 801cb2e:	72da      	strb	r2, [r3, #11]
 801cb30:	e002      	b.n	801cb38 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801cb32:	68fb      	ldr	r3, [r7, #12]
 801cb34:	2200      	movs	r2, #0
 801cb36:	72da      	strb	r2, [r3, #11]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801cb38:	4b07      	ldr	r3, [pc, #28]	@ (801cb58 <dhcp_handle_ack+0xb8>)
 801cb3a:	79db      	ldrb	r3, [r3, #7]
 801cb3c:	2b00      	cmp	r3, #0
 801cb3e:	d007      	beq.n	801cb50 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801cb40:	4b06      	ldr	r3, [pc, #24]	@ (801cb5c <dhcp_handle_ack+0xbc>)
 801cb42:	69db      	ldr	r3, [r3, #28]
 801cb44:	4618      	mov	r0, r3
 801cb46:	f7f7 fe62 	bl	801480e <lwip_htonl>
 801cb4a:	4602      	mov	r2, r0
 801cb4c:	68fb      	ldr	r3, [r7, #12]
 801cb4e:	631a      	str	r2, [r3, #48]	@ 0x30
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801cb50:	bf00      	nop
 801cb52:	3710      	adds	r7, #16
 801cb54:	46bd      	mov	sp, r7
 801cb56:	bd80      	pop	{r7, pc}
 801cb58:	2000c0a0 	.word	0x2000c0a0
 801cb5c:	2000c080 	.word	0x2000c080

0801cb60 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801cb60:	b580      	push	{r7, lr}
 801cb62:	b084      	sub	sp, #16
 801cb64:	af00      	add	r7, sp, #0
 801cb66:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801cb68:	687b      	ldr	r3, [r7, #4]
 801cb6a:	2b00      	cmp	r3, #0
 801cb6c:	d109      	bne.n	801cb82 <dhcp_start+0x22>
 801cb6e:	4b3c      	ldr	r3, [pc, #240]	@ (801cc60 <dhcp_start+0x100>)
 801cb70:	f240 22d6 	movw	r2, #726	@ 0x2d6
 801cb74:	493b      	ldr	r1, [pc, #236]	@ (801cc64 <dhcp_start+0x104>)
 801cb76:	483c      	ldr	r0, [pc, #240]	@ (801cc68 <dhcp_start+0x108>)
 801cb78:	f005 f886 	bl	8021c88 <iprintf>
 801cb7c:	f06f 030f 	mvn.w	r3, #15
 801cb80:	e069      	b.n	801cc56 <dhcp_start+0xf6>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801cb82:	687b      	ldr	r3, [r7, #4]
 801cb84:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801cb88:	f003 0301 	and.w	r3, r3, #1
 801cb8c:	2b00      	cmp	r3, #0
 801cb8e:	d109      	bne.n	801cba4 <dhcp_start+0x44>
 801cb90:	4b33      	ldr	r3, [pc, #204]	@ (801cc60 <dhcp_start+0x100>)
 801cb92:	f240 22d7 	movw	r2, #727	@ 0x2d7
 801cb96:	4935      	ldr	r1, [pc, #212]	@ (801cc6c <dhcp_start+0x10c>)
 801cb98:	4833      	ldr	r0, [pc, #204]	@ (801cc68 <dhcp_start+0x108>)
 801cb9a:	f005 f875 	bl	8021c88 <iprintf>
 801cb9e:	f06f 030f 	mvn.w	r3, #15
 801cba2:	e058      	b.n	801cc56 <dhcp_start+0xf6>
  dhcp = netif_dhcp_data(netif);
 801cba4:	687b      	ldr	r3, [r7, #4]
 801cba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cba8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801cbaa:	687b      	ldr	r3, [r7, #4]
 801cbac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801cbae:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 801cbb2:	d202      	bcs.n	801cbba <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 801cbb4:	f04f 33ff 	mov.w	r3, #4294967295
 801cbb8:	e04d      	b.n	801cc56 <dhcp_start+0xf6>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801cbba:	68fb      	ldr	r3, [r7, #12]
 801cbbc:	2b00      	cmp	r3, #0
 801cbbe:	d10d      	bne.n	801cbdc <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801cbc0:	2040      	movs	r0, #64	@ 0x40
 801cbc2:	f7f8 f913 	bl	8014dec <mem_malloc>
 801cbc6:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 801cbc8:	68fb      	ldr	r3, [r7, #12]
 801cbca:	2b00      	cmp	r3, #0
 801cbcc:	d102      	bne.n	801cbd4 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801cbce:	f04f 33ff 	mov.w	r3, #4294967295
 801cbd2:	e040      	b.n	801cc56 <dhcp_start+0xf6>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801cbd4:	687b      	ldr	r3, [r7, #4]
 801cbd6:	68fa      	ldr	r2, [r7, #12]
 801cbd8:	625a      	str	r2, [r3, #36]	@ 0x24
 801cbda:	e01b      	b.n	801cc14 <dhcp_start+0xb4>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
 801cbdc:	68fb      	ldr	r3, [r7, #12]
 801cbde:	68db      	ldr	r3, [r3, #12]
 801cbe0:	2b00      	cmp	r3, #0
 801cbe2:	d006      	beq.n	801cbf2 <dhcp_start+0x92>
 801cbe4:	4b1e      	ldr	r3, [pc, #120]	@ (801cc60 <dhcp_start+0x100>)
 801cbe6:	f44f 723c 	mov.w	r2, #752	@ 0x2f0
 801cbea:	4921      	ldr	r1, [pc, #132]	@ (801cc70 <dhcp_start+0x110>)
 801cbec:	481e      	ldr	r0, [pc, #120]	@ (801cc68 <dhcp_start+0x108>)
 801cbee:	f005 f84b 	bl	8021c88 <iprintf>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
 801cbf2:	68fb      	ldr	r3, [r7, #12]
 801cbf4:	685b      	ldr	r3, [r3, #4]
 801cbf6:	2b00      	cmp	r3, #0
 801cbf8:	d006      	beq.n	801cc08 <dhcp_start+0xa8>
 801cbfa:	4b19      	ldr	r3, [pc, #100]	@ (801cc60 <dhcp_start+0x100>)
 801cbfc:	f240 22f1 	movw	r2, #753	@ 0x2f1
 801cc00:	491c      	ldr	r1, [pc, #112]	@ (801cc74 <dhcp_start+0x114>)
 801cc02:	4819      	ldr	r0, [pc, #100]	@ (801cc68 <dhcp_start+0x108>)
 801cc04:	f005 f840 	bl	8021c88 <iprintf>

    if (dhcp->pcb_allocated != 0) {
 801cc08:	68fb      	ldr	r3, [r7, #12]
 801cc0a:	7a1b      	ldrb	r3, [r3, #8]
 801cc0c:	2b00      	cmp	r3, #0
 801cc0e:	d001      	beq.n	801cc14 <dhcp_start+0xb4>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801cc10:	f7ff fcd4 	bl	801c5bc <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801cc14:	2240      	movs	r2, #64	@ 0x40
 801cc16:	2100      	movs	r1, #0
 801cc18:	68f8      	ldr	r0, [r7, #12]
 801cc1a:	f005 fa0b 	bl	8022034 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801cc1e:	f7ff fc7b 	bl	801c518 <dhcp_inc_pcb_refcount>
 801cc22:	4603      	mov	r3, r0
 801cc24:	2b00      	cmp	r3, #0
 801cc26:	d002      	beq.n	801cc2e <dhcp_start+0xce>
    return ERR_MEM;
 801cc28:	f04f 33ff 	mov.w	r3, #4294967295
 801cc2c:	e013      	b.n	801cc56 <dhcp_start+0xf6>
  }
  dhcp->pcb_allocated = 1;
 801cc2e:	68fb      	ldr	r3, [r7, #12]
 801cc30:	2201      	movs	r2, #1
 801cc32:	721a      	strb	r2, [r3, #8]
  }
#endif /* LWIP_DHCP_CHECK_LINK_UP */


  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801cc34:	6878      	ldr	r0, [r7, #4]
 801cc36:	f000 f8b5 	bl	801cda4 <dhcp_discover>
 801cc3a:	4603      	mov	r3, r0
 801cc3c:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 801cc3e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801cc42:	2b00      	cmp	r3, #0
 801cc44:	d005      	beq.n	801cc52 <dhcp_start+0xf2>
    /* free resources allocated above */
    dhcp_stop(netif);
 801cc46:	6878      	ldr	r0, [r7, #4]
 801cc48:	f000 fc3a 	bl	801d4c0 <dhcp_stop>
    return ERR_MEM;
 801cc4c:	f04f 33ff 	mov.w	r3, #4294967295
 801cc50:	e001      	b.n	801cc56 <dhcp_start+0xf6>
  }
  return result;
 801cc52:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801cc56:	4618      	mov	r0, r3
 801cc58:	3710      	adds	r7, #16
 801cc5a:	46bd      	mov	sp, r7
 801cc5c:	bd80      	pop	{r7, pc}
 801cc5e:	bf00      	nop
 801cc60:	08026db4 	.word	0x08026db4
 801cc64:	08026e60 	.word	0x08026e60
 801cc68:	08026e14 	.word	0x08026e14
 801cc6c:	08026ea4 	.word	0x08026ea4
 801cc70:	08026ec8 	.word	0x08026ec8
 801cc74:	08026ee0 	.word	0x08026ee0

0801cc78 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801cc78:	b580      	push	{r7, lr}
 801cc7a:	b084      	sub	sp, #16
 801cc7c:	af00      	add	r7, sp, #0
 801cc7e:	6078      	str	r0, [r7, #4]
 801cc80:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801cc82:	687b      	ldr	r3, [r7, #4]
 801cc84:	2b00      	cmp	r3, #0
 801cc86:	d107      	bne.n	801cc98 <dhcp_arp_reply+0x20>
 801cc88:	4b0e      	ldr	r3, [pc, #56]	@ (801ccc4 <dhcp_arp_reply+0x4c>)
 801cc8a:	f240 327b 	movw	r2, #891	@ 0x37b
 801cc8e:	490e      	ldr	r1, [pc, #56]	@ (801ccc8 <dhcp_arp_reply+0x50>)
 801cc90:	480e      	ldr	r0, [pc, #56]	@ (801cccc <dhcp_arp_reply+0x54>)
 801cc92:	f004 fff9 	bl	8021c88 <iprintf>
 801cc96:	e012      	b.n	801ccbe <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801cc98:	687b      	ldr	r3, [r7, #4]
 801cc9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cc9c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801cc9e:	68fb      	ldr	r3, [r7, #12]
 801cca0:	2b00      	cmp	r3, #0
 801cca2:	d00c      	beq.n	801ccbe <dhcp_arp_reply+0x46>
 801cca4:	68fb      	ldr	r3, [r7, #12]
 801cca6:	7a5b      	ldrb	r3, [r3, #9]
 801cca8:	2b08      	cmp	r3, #8
 801ccaa:	d108      	bne.n	801ccbe <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801ccac:	683b      	ldr	r3, [r7, #0]
 801ccae:	681a      	ldr	r2, [r3, #0]
 801ccb0:	68fb      	ldr	r3, [r7, #12]
 801ccb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ccb4:	429a      	cmp	r2, r3
 801ccb6:	d102      	bne.n	801ccbe <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801ccb8:	6878      	ldr	r0, [r7, #4]
 801ccba:	f000 f809 	bl	801ccd0 <dhcp_decline>
    }
  }
}
 801ccbe:	3710      	adds	r7, #16
 801ccc0:	46bd      	mov	sp, r7
 801ccc2:	bd80      	pop	{r7, pc}
 801ccc4:	08026db4 	.word	0x08026db4
 801ccc8:	08026e60 	.word	0x08026e60
 801cccc:	08026e14 	.word	0x08026e14

0801ccd0 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 801ccd0:	b580      	push	{r7, lr}
 801ccd2:	b086      	sub	sp, #24
 801ccd4:	af02      	add	r7, sp, #8
 801ccd6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ccd8:	687b      	ldr	r3, [r7, #4]
 801ccda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ccdc:	60fb      	str	r3, [r7, #12]
  err_t result = ERR_OK;
 801ccde:	2300      	movs	r3, #0
 801cce0:	72fb      	strb	r3, [r7, #11]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801cce2:	210c      	movs	r1, #12
 801cce4:	68f8      	ldr	r0, [r7, #12]
 801cce6:	f000 fc23 	bl	801d530 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 801ccea:	2204      	movs	r2, #4
 801ccec:	68f9      	ldr	r1, [r7, #12]
 801ccee:	6878      	ldr	r0, [r7, #4]
 801ccf0:	f001 f8a6 	bl	801de40 <dhcp_create_msg>
 801ccf4:	4603      	mov	r3, r0
 801ccf6:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
 801ccf8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801ccfc:	2b00      	cmp	r3, #0
 801ccfe:	d12a      	bne.n	801cd56 <dhcp_decline+0x86>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 801cd00:	2204      	movs	r2, #4
 801cd02:	2132      	movs	r1, #50	@ 0x32
 801cd04:	68f8      	ldr	r0, [r7, #12]
 801cd06:	f000 fc2d 	bl	801d564 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801cd0a:	68fb      	ldr	r3, [r7, #12]
 801cd0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cd0e:	4618      	mov	r0, r3
 801cd10:	f7f7 fd7d 	bl	801480e <lwip_htonl>
 801cd14:	4603      	mov	r3, r0
 801cd16:	4619      	mov	r1, r3
 801cd18:	68f8      	ldr	r0, [r7, #12]
 801cd1a:	f000 fcbf 	bl	801d69c <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 801cd1e:	68f8      	ldr	r0, [r7, #12]
 801cd20:	f001 fa32 	bl	801e188 <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801cd24:	68fb      	ldr	r3, [r7, #12]
 801cd26:	68da      	ldr	r2, [r3, #12]
 801cd28:	68fb      	ldr	r3, [r7, #12]
 801cd2a:	8a9b      	ldrh	r3, [r3, #20]
 801cd2c:	33f0      	adds	r3, #240	@ 0xf0
 801cd2e:	b29b      	uxth	r3, r3
 801cd30:	4619      	mov	r1, r3
 801cd32:	4610      	mov	r0, r2
 801cd34:	f7f8 fe42 	bl	80159bc <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 801cd38:	4b16      	ldr	r3, [pc, #88]	@ (801cd94 <dhcp_decline+0xc4>)
 801cd3a:	6818      	ldr	r0, [r3, #0]
 801cd3c:	68fb      	ldr	r3, [r7, #12]
 801cd3e:	68d9      	ldr	r1, [r3, #12]
 801cd40:	4b15      	ldr	r3, [pc, #84]	@ (801cd98 <dhcp_decline+0xc8>)
 801cd42:	9301      	str	r3, [sp, #4]
 801cd44:	687b      	ldr	r3, [r7, #4]
 801cd46:	9300      	str	r3, [sp, #0]
 801cd48:	2343      	movs	r3, #67	@ 0x43
 801cd4a:	4a14      	ldr	r2, [pc, #80]	@ (801cd9c <dhcp_decline+0xcc>)
 801cd4c:	f7ff f9de 	bl	801c10c <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 801cd50:	68f8      	ldr	r0, [r7, #12]
 801cd52:	f001 f9d7 	bl	801e104 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801cd56:	68fb      	ldr	r3, [r7, #12]
 801cd58:	7a9b      	ldrb	r3, [r3, #10]
 801cd5a:	2bff      	cmp	r3, #255	@ 0xff
 801cd5c:	d005      	beq.n	801cd6a <dhcp_decline+0x9a>
    dhcp->tries++;
 801cd5e:	68fb      	ldr	r3, [r7, #12]
 801cd60:	7a9b      	ldrb	r3, [r3, #10]
 801cd62:	3301      	adds	r3, #1
 801cd64:	b2da      	uxtb	r2, r3
 801cd66:	68fb      	ldr	r3, [r7, #12]
 801cd68:	729a      	strb	r2, [r3, #10]
  }
  msecs = 10*1000;
 801cd6a:	f242 7310 	movw	r3, #10000	@ 0x2710
 801cd6e:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801cd70:	893b      	ldrh	r3, [r7, #8]
 801cd72:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801cd76:	4a0a      	ldr	r2, [pc, #40]	@ (801cda0 <dhcp_decline+0xd0>)
 801cd78:	fb82 1203 	smull	r1, r2, r2, r3
 801cd7c:	1152      	asrs	r2, r2, #5
 801cd7e:	17db      	asrs	r3, r3, #31
 801cd80:	1ad3      	subs	r3, r2, r3
 801cd82:	b29a      	uxth	r2, r3
 801cd84:	68fb      	ldr	r3, [r7, #12]
 801cd86:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801cd88:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801cd8c:	4618      	mov	r0, r3
 801cd8e:	3710      	adds	r7, #16
 801cd90:	46bd      	mov	sp, r7
 801cd92:	bd80      	pop	{r7, pc}
 801cd94:	2000c0a8 	.word	0x2000c0a8
 801cd98:	08030cf4 	.word	0x08030cf4
 801cd9c:	08030cf8 	.word	0x08030cf8
 801cda0:	10624dd3 	.word	0x10624dd3

0801cda4 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801cda4:	b580      	push	{r7, lr}
 801cda6:	b088      	sub	sp, #32
 801cda8:	af02      	add	r7, sp, #8
 801cdaa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801cdac:	687b      	ldr	r3, [r7, #4]
 801cdae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cdb0:	613b      	str	r3, [r7, #16]
  err_t result = ERR_OK;
 801cdb2:	2300      	movs	r3, #0
 801cdb4:	73fb      	strb	r3, [r7, #15]
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801cdb6:	693b      	ldr	r3, [r7, #16]
 801cdb8:	2200      	movs	r2, #0
 801cdba:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801cdbc:	2106      	movs	r1, #6
 801cdbe:	6938      	ldr	r0, [r7, #16]
 801cdc0:	f000 fbb6 	bl	801d530 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 801cdc4:	2201      	movs	r2, #1
 801cdc6:	6939      	ldr	r1, [r7, #16]
 801cdc8:	6878      	ldr	r0, [r7, #4]
 801cdca:	f001 f839 	bl	801de40 <dhcp_create_msg>
 801cdce:	4603      	mov	r3, r0
 801cdd0:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 801cdd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801cdd6:	2b00      	cmp	r3, #0
 801cdd8:	d13b      	bne.n	801ce52 <dhcp_discover+0xae>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801cdda:	2202      	movs	r2, #2
 801cddc:	2139      	movs	r1, #57	@ 0x39
 801cdde:	6938      	ldr	r0, [r7, #16]
 801cde0:	f000 fbc0 	bl	801d564 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 801cde4:	687b      	ldr	r3, [r7, #4]
 801cde6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801cde8:	4619      	mov	r1, r3
 801cdea:	6938      	ldr	r0, [r7, #16]
 801cdec:	f000 fc1c 	bl	801d628 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801cdf0:	2203      	movs	r2, #3
 801cdf2:	2137      	movs	r1, #55	@ 0x37
 801cdf4:	6938      	ldr	r0, [r7, #16]
 801cdf6:	f000 fbb5 	bl	801d564 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801cdfa:	2300      	movs	r3, #0
 801cdfc:	75fb      	strb	r3, [r7, #23]
 801cdfe:	e009      	b.n	801ce14 <dhcp_discover+0x70>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 801ce00:	7dfb      	ldrb	r3, [r7, #23]
 801ce02:	4a29      	ldr	r2, [pc, #164]	@ (801cea8 <dhcp_discover+0x104>)
 801ce04:	5cd3      	ldrb	r3, [r2, r3]
 801ce06:	4619      	mov	r1, r3
 801ce08:	6938      	ldr	r0, [r7, #16]
 801ce0a:	f000 fbe5 	bl	801d5d8 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801ce0e:	7dfb      	ldrb	r3, [r7, #23]
 801ce10:	3301      	adds	r3, #1
 801ce12:	75fb      	strb	r3, [r7, #23]
 801ce14:	7dfb      	ldrb	r3, [r7, #23]
 801ce16:	2b02      	cmp	r3, #2
 801ce18:	d9f2      	bls.n	801ce00 <dhcp_discover+0x5c>
    }
    dhcp_option_trailer(dhcp);
 801ce1a:	6938      	ldr	r0, [r7, #16]
 801ce1c:	f001 f9b4 	bl	801e188 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801ce20:	693b      	ldr	r3, [r7, #16]
 801ce22:	68da      	ldr	r2, [r3, #12]
 801ce24:	693b      	ldr	r3, [r7, #16]
 801ce26:	8a9b      	ldrh	r3, [r3, #20]
 801ce28:	33f0      	adds	r3, #240	@ 0xf0
 801ce2a:	b29b      	uxth	r3, r3
 801ce2c:	4619      	mov	r1, r3
 801ce2e:	4610      	mov	r0, r2
 801ce30:	f7f8 fdc4 	bl	80159bc <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 801ce34:	4b1d      	ldr	r3, [pc, #116]	@ (801ceac <dhcp_discover+0x108>)
 801ce36:	6818      	ldr	r0, [r3, #0]
 801ce38:	693b      	ldr	r3, [r7, #16]
 801ce3a:	68d9      	ldr	r1, [r3, #12]
 801ce3c:	4b1c      	ldr	r3, [pc, #112]	@ (801ceb0 <dhcp_discover+0x10c>)
 801ce3e:	9301      	str	r3, [sp, #4]
 801ce40:	687b      	ldr	r3, [r7, #4]
 801ce42:	9300      	str	r3, [sp, #0]
 801ce44:	2343      	movs	r3, #67	@ 0x43
 801ce46:	4a1b      	ldr	r2, [pc, #108]	@ (801ceb4 <dhcp_discover+0x110>)
 801ce48:	f7ff f960 	bl	801c10c <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
 801ce4c:	6938      	ldr	r0, [r7, #16]
 801ce4e:	f001 f959 	bl	801e104 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801ce52:	693b      	ldr	r3, [r7, #16]
 801ce54:	7a9b      	ldrb	r3, [r3, #10]
 801ce56:	2bff      	cmp	r3, #255	@ 0xff
 801ce58:	d005      	beq.n	801ce66 <dhcp_discover+0xc2>
    dhcp->tries++;
 801ce5a:	693b      	ldr	r3, [r7, #16]
 801ce5c:	7a9b      	ldrb	r3, [r3, #10]
 801ce5e:	3301      	adds	r3, #1
 801ce60:	b2da      	uxtb	r2, r3
 801ce62:	693b      	ldr	r3, [r7, #16]
 801ce64:	729a      	strb	r2, [r3, #10]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 801ce66:	693b      	ldr	r3, [r7, #16]
 801ce68:	7a9b      	ldrb	r3, [r3, #10]
 801ce6a:	2b05      	cmp	r3, #5
 801ce6c:	d807      	bhi.n	801ce7e <dhcp_discover+0xda>
 801ce6e:	693b      	ldr	r3, [r7, #16]
 801ce70:	7a9b      	ldrb	r3, [r3, #10]
 801ce72:	461a      	mov	r2, r3
 801ce74:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801ce78:	4093      	lsls	r3, r2
 801ce7a:	b29b      	uxth	r3, r3
 801ce7c:	e001      	b.n	801ce82 <dhcp_discover+0xde>
 801ce7e:	f64e 2360 	movw	r3, #60000	@ 0xea60
 801ce82:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801ce84:	89bb      	ldrh	r3, [r7, #12]
 801ce86:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801ce8a:	4a0b      	ldr	r2, [pc, #44]	@ (801ceb8 <dhcp_discover+0x114>)
 801ce8c:	fb82 1203 	smull	r1, r2, r2, r3
 801ce90:	1152      	asrs	r2, r2, #5
 801ce92:	17db      	asrs	r3, r3, #31
 801ce94:	1ad3      	subs	r3, r2, r3
 801ce96:	b29a      	uxth	r2, r3
 801ce98:	693b      	ldr	r3, [r7, #16]
 801ce9a:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801ce9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801cea0:	4618      	mov	r0, r3
 801cea2:	3718      	adds	r7, #24
 801cea4:	46bd      	mov	sp, r7
 801cea6:	bd80      	pop	{r7, pc}
 801cea8:	20000128 	.word	0x20000128
 801ceac:	2000c0a8 	.word	0x2000c0a8
 801ceb0:	08030cf4 	.word	0x08030cf4
 801ceb4:	08030cf8 	.word	0x08030cf8
 801ceb8:	10624dd3 	.word	0x10624dd3

0801cebc <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 801cebc:	b580      	push	{r7, lr}
 801cebe:	b088      	sub	sp, #32
 801cec0:	af00      	add	r7, sp, #0
 801cec2:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801cec4:	687b      	ldr	r3, [r7, #4]
 801cec6:	2b00      	cmp	r3, #0
 801cec8:	d107      	bne.n	801ceda <dhcp_bind+0x1e>
 801ceca:	4b64      	ldr	r3, [pc, #400]	@ (801d05c <dhcp_bind+0x1a0>)
 801cecc:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 801ced0:	4963      	ldr	r1, [pc, #396]	@ (801d060 <dhcp_bind+0x1a4>)
 801ced2:	4864      	ldr	r0, [pc, #400]	@ (801d064 <dhcp_bind+0x1a8>)
 801ced4:	f004 fed8 	bl	8021c88 <iprintf>
 801ced8:	e0bc      	b.n	801d054 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801ceda:	687b      	ldr	r3, [r7, #4]
 801cedc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cede:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801cee0:	69bb      	ldr	r3, [r7, #24]
 801cee2:	2b00      	cmp	r3, #0
 801cee4:	d107      	bne.n	801cef6 <dhcp_bind+0x3a>
 801cee6:	4b5d      	ldr	r3, [pc, #372]	@ (801d05c <dhcp_bind+0x1a0>)
 801cee8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801ceec:	495e      	ldr	r1, [pc, #376]	@ (801d068 <dhcp_bind+0x1ac>)
 801ceee:	485d      	ldr	r0, [pc, #372]	@ (801d064 <dhcp_bind+0x1a8>)
 801cef0:	f004 feca 	bl	8021c88 <iprintf>
 801cef4:	e0ae      	b.n	801d054 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801cef6:	69bb      	ldr	r3, [r7, #24]
 801cef8:	2200      	movs	r2, #0
 801cefa:	841a      	strh	r2, [r3, #32]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801cefc:	69bb      	ldr	r3, [r7, #24]
 801cefe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cf00:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cf04:	d019      	beq.n	801cf3a <dhcp_bind+0x7e>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801cf06:	69bb      	ldr	r3, [r7, #24]
 801cf08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cf0a:	331e      	adds	r3, #30
 801cf0c:	4a57      	ldr	r2, [pc, #348]	@ (801d06c <dhcp_bind+0x1b0>)
 801cf0e:	fba2 2303 	umull	r2, r3, r2, r3
 801cf12:	095b      	lsrs	r3, r3, #5
 801cf14:	61fb      	str	r3, [r7, #28]
     if (timeout > 0xffff) {
 801cf16:	69fb      	ldr	r3, [r7, #28]
 801cf18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801cf1c:	d302      	bcc.n	801cf24 <dhcp_bind+0x68>
       timeout = 0xffff;
 801cf1e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801cf22:	61fb      	str	r3, [r7, #28]
     }
     dhcp->t0_timeout = (u16_t)timeout;
 801cf24:	69fb      	ldr	r3, [r7, #28]
 801cf26:	b29a      	uxth	r2, r3
 801cf28:	69bb      	ldr	r3, [r7, #24]
 801cf2a:	845a      	strh	r2, [r3, #34]	@ 0x22
     if (dhcp->t0_timeout == 0) {
 801cf2c:	69bb      	ldr	r3, [r7, #24]
 801cf2e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801cf30:	2b00      	cmp	r3, #0
 801cf32:	d102      	bne.n	801cf3a <dhcp_bind+0x7e>
       dhcp->t0_timeout = 1;
 801cf34:	69bb      	ldr	r3, [r7, #24]
 801cf36:	2201      	movs	r2, #1
 801cf38:	845a      	strh	r2, [r3, #34]	@ 0x22
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801cf3a:	69bb      	ldr	r3, [r7, #24]
 801cf3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801cf3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cf42:	d01d      	beq.n	801cf80 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801cf44:	69bb      	ldr	r3, [r7, #24]
 801cf46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801cf48:	331e      	adds	r3, #30
 801cf4a:	4a48      	ldr	r2, [pc, #288]	@ (801d06c <dhcp_bind+0x1b0>)
 801cf4c:	fba2 2303 	umull	r2, r3, r2, r3
 801cf50:	095b      	lsrs	r3, r3, #5
 801cf52:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801cf54:	69fb      	ldr	r3, [r7, #28]
 801cf56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801cf5a:	d302      	bcc.n	801cf62 <dhcp_bind+0xa6>
      timeout = 0xffff;
 801cf5c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801cf60:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801cf62:	69fb      	ldr	r3, [r7, #28]
 801cf64:	b29a      	uxth	r2, r3
 801cf66:	69bb      	ldr	r3, [r7, #24]
 801cf68:	831a      	strh	r2, [r3, #24]
    if (dhcp->t1_timeout == 0) {
 801cf6a:	69bb      	ldr	r3, [r7, #24]
 801cf6c:	8b1b      	ldrh	r3, [r3, #24]
 801cf6e:	2b00      	cmp	r3, #0
 801cf70:	d102      	bne.n	801cf78 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801cf72:	69bb      	ldr	r3, [r7, #24]
 801cf74:	2201      	movs	r2, #1
 801cf76:	831a      	strh	r2, [r3, #24]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801cf78:	69bb      	ldr	r3, [r7, #24]
 801cf7a:	8b1a      	ldrh	r2, [r3, #24]
 801cf7c:	69bb      	ldr	r3, [r7, #24]
 801cf7e:	839a      	strh	r2, [r3, #28]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801cf80:	69bb      	ldr	r3, [r7, #24]
 801cf82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801cf84:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cf88:	d01d      	beq.n	801cfc6 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801cf8a:	69bb      	ldr	r3, [r7, #24]
 801cf8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801cf8e:	331e      	adds	r3, #30
 801cf90:	4a36      	ldr	r2, [pc, #216]	@ (801d06c <dhcp_bind+0x1b0>)
 801cf92:	fba2 2303 	umull	r2, r3, r2, r3
 801cf96:	095b      	lsrs	r3, r3, #5
 801cf98:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801cf9a:	69fb      	ldr	r3, [r7, #28]
 801cf9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801cfa0:	d302      	bcc.n	801cfa8 <dhcp_bind+0xec>
      timeout = 0xffff;
 801cfa2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801cfa6:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801cfa8:	69fb      	ldr	r3, [r7, #28]
 801cfaa:	b29a      	uxth	r2, r3
 801cfac:	69bb      	ldr	r3, [r7, #24]
 801cfae:	835a      	strh	r2, [r3, #26]
    if (dhcp->t2_timeout == 0) {
 801cfb0:	69bb      	ldr	r3, [r7, #24]
 801cfb2:	8b5b      	ldrh	r3, [r3, #26]
 801cfb4:	2b00      	cmp	r3, #0
 801cfb6:	d102      	bne.n	801cfbe <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801cfb8:	69bb      	ldr	r3, [r7, #24]
 801cfba:	2201      	movs	r2, #1
 801cfbc:	835a      	strh	r2, [r3, #26]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801cfbe:	69bb      	ldr	r3, [r7, #24]
 801cfc0:	8b5a      	ldrh	r2, [r3, #26]
 801cfc2:	69bb      	ldr	r3, [r7, #24]
 801cfc4:	83da      	strh	r2, [r3, #30]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801cfc6:	69bb      	ldr	r3, [r7, #24]
 801cfc8:	8b1a      	ldrh	r2, [r3, #24]
 801cfca:	69bb      	ldr	r3, [r7, #24]
 801cfcc:	8b5b      	ldrh	r3, [r3, #26]
 801cfce:	429a      	cmp	r2, r3
 801cfd0:	d306      	bcc.n	801cfe0 <dhcp_bind+0x124>
 801cfd2:	69bb      	ldr	r3, [r7, #24]
 801cfd4:	8b5b      	ldrh	r3, [r3, #26]
 801cfd6:	2b00      	cmp	r3, #0
 801cfd8:	d002      	beq.n	801cfe0 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801cfda:	69bb      	ldr	r3, [r7, #24]
 801cfdc:	2200      	movs	r2, #0
 801cfde:	831a      	strh	r2, [r3, #24]
  }

  if (dhcp->subnet_mask_given) {
 801cfe0:	69bb      	ldr	r3, [r7, #24]
 801cfe2:	7adb      	ldrb	r3, [r3, #11]
 801cfe4:	2b00      	cmp	r3, #0
 801cfe6:	d003      	beq.n	801cff0 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801cfe8:	69bb      	ldr	r3, [r7, #24]
 801cfea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cfec:	613b      	str	r3, [r7, #16]
 801cfee:	e014      	b.n	801d01a <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801cff0:	69bb      	ldr	r3, [r7, #24]
 801cff2:	3328      	adds	r3, #40	@ 0x28
 801cff4:	781b      	ldrb	r3, [r3, #0]
 801cff6:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801cff8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801cffc:	2b00      	cmp	r3, #0
 801cffe:	db02      	blt.n	801d006 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801d000:	23ff      	movs	r3, #255	@ 0xff
 801d002:	613b      	str	r3, [r7, #16]
 801d004:	e009      	b.n	801d01a <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801d006:	7dfb      	ldrb	r3, [r7, #23]
 801d008:	2bbf      	cmp	r3, #191	@ 0xbf
 801d00a:	d903      	bls.n	801d014 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801d00c:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 801d010:	613b      	str	r3, [r7, #16]
 801d012:	e002      	b.n	801d01a <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801d014:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d018:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801d01a:	69bb      	ldr	r3, [r7, #24]
 801d01c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d01e:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801d020:	68fb      	ldr	r3, [r7, #12]
 801d022:	2b00      	cmp	r3, #0
 801d024:	d108      	bne.n	801d038 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801d026:	69bb      	ldr	r3, [r7, #24]
 801d028:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801d02a:	693b      	ldr	r3, [r7, #16]
 801d02c:	4013      	ands	r3, r2
 801d02e:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801d030:	68fb      	ldr	r3, [r7, #12]
 801d032:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801d036:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801d038:	210a      	movs	r1, #10
 801d03a:	69b8      	ldr	r0, [r7, #24]
 801d03c:	f000 fa78 	bl	801d530 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801d040:	69bb      	ldr	r3, [r7, #24]
 801d042:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 801d046:	f107 030c 	add.w	r3, r7, #12
 801d04a:	f107 0210 	add.w	r2, r7, #16
 801d04e:	6878      	ldr	r0, [r7, #4]
 801d050:	f7f8 f95a 	bl	8015308 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801d054:	3720      	adds	r7, #32
 801d056:	46bd      	mov	sp, r7
 801d058:	bd80      	pop	{r7, pc}
 801d05a:	bf00      	nop
 801d05c:	08026db4 	.word	0x08026db4
 801d060:	08026ef4 	.word	0x08026ef4
 801d064:	08026e14 	.word	0x08026e14
 801d068:	08026f10 	.word	0x08026f10
 801d06c:	88888889 	.word	0x88888889

0801d070 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801d070:	b580      	push	{r7, lr}
 801d072:	b088      	sub	sp, #32
 801d074:	af02      	add	r7, sp, #8
 801d076:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d078:	687b      	ldr	r3, [r7, #4]
 801d07a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d07c:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801d07e:	2105      	movs	r1, #5
 801d080:	6938      	ldr	r0, [r7, #16]
 801d082:	f000 fa55 	bl	801d530 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 801d086:	2203      	movs	r2, #3
 801d088:	6939      	ldr	r1, [r7, #16]
 801d08a:	6878      	ldr	r0, [r7, #4]
 801d08c:	f000 fed8 	bl	801de40 <dhcp_create_msg>
 801d090:	4603      	mov	r3, r0
 801d092:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 801d094:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d098:	2b00      	cmp	r3, #0
 801d09a:	d13b      	bne.n	801d114 <dhcp_renew+0xa4>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801d09c:	2202      	movs	r2, #2
 801d09e:	2139      	movs	r1, #57	@ 0x39
 801d0a0:	6938      	ldr	r0, [r7, #16]
 801d0a2:	f000 fa5f 	bl	801d564 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 801d0a6:	687b      	ldr	r3, [r7, #4]
 801d0a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801d0aa:	4619      	mov	r1, r3
 801d0ac:	6938      	ldr	r0, [r7, #16]
 801d0ae:	f000 fabb 	bl	801d628 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d0b2:	2203      	movs	r2, #3
 801d0b4:	2137      	movs	r1, #55	@ 0x37
 801d0b6:	6938      	ldr	r0, [r7, #16]
 801d0b8:	f000 fa54 	bl	801d564 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d0bc:	2300      	movs	r3, #0
 801d0be:	75fb      	strb	r3, [r7, #23]
 801d0c0:	e009      	b.n	801d0d6 <dhcp_renew+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 801d0c2:	7dfb      	ldrb	r3, [r7, #23]
 801d0c4:	4a2a      	ldr	r2, [pc, #168]	@ (801d170 <dhcp_renew+0x100>)
 801d0c6:	5cd3      	ldrb	r3, [r2, r3]
 801d0c8:	4619      	mov	r1, r3
 801d0ca:	6938      	ldr	r0, [r7, #16]
 801d0cc:	f000 fa84 	bl	801d5d8 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d0d0:	7dfb      	ldrb	r3, [r7, #23]
 801d0d2:	3301      	adds	r3, #1
 801d0d4:	75fb      	strb	r3, [r7, #23]
 801d0d6:	7dfb      	ldrb	r3, [r7, #23]
 801d0d8:	2b02      	cmp	r3, #2
 801d0da:	d9f2      	bls.n	801d0c2 <dhcp_renew+0x52>
#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
 801d0dc:	6938      	ldr	r0, [r7, #16]
 801d0de:	f001 f853 	bl	801e188 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801d0e2:	693b      	ldr	r3, [r7, #16]
 801d0e4:	68da      	ldr	r2, [r3, #12]
 801d0e6:	693b      	ldr	r3, [r7, #16]
 801d0e8:	8a9b      	ldrh	r3, [r3, #20]
 801d0ea:	33f0      	adds	r3, #240	@ 0xf0
 801d0ec:	b29b      	uxth	r3, r3
 801d0ee:	4619      	mov	r1, r3
 801d0f0:	4610      	mov	r0, r2
 801d0f2:	f7f8 fc63 	bl	80159bc <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 801d0f6:	4b1f      	ldr	r3, [pc, #124]	@ (801d174 <dhcp_renew+0x104>)
 801d0f8:	6818      	ldr	r0, [r3, #0]
 801d0fa:	693b      	ldr	r3, [r7, #16]
 801d0fc:	68d9      	ldr	r1, [r3, #12]
 801d0fe:	693b      	ldr	r3, [r7, #16]
 801d100:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801d104:	687b      	ldr	r3, [r7, #4]
 801d106:	9300      	str	r3, [sp, #0]
 801d108:	2343      	movs	r3, #67	@ 0x43
 801d10a:	f7fe ffc1 	bl	801c090 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 801d10e:	6938      	ldr	r0, [r7, #16]
 801d110:	f000 fff8 	bl	801e104 <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801d114:	693b      	ldr	r3, [r7, #16]
 801d116:	7a9b      	ldrb	r3, [r3, #10]
 801d118:	2bff      	cmp	r3, #255	@ 0xff
 801d11a:	d005      	beq.n	801d128 <dhcp_renew+0xb8>
    dhcp->tries++;
 801d11c:	693b      	ldr	r3, [r7, #16]
 801d11e:	7a9b      	ldrb	r3, [r3, #10]
 801d120:	3301      	adds	r3, #1
 801d122:	b2da      	uxtb	r2, r3
 801d124:	693b      	ldr	r3, [r7, #16]
 801d126:	729a      	strb	r2, [r3, #10]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 801d128:	693b      	ldr	r3, [r7, #16]
 801d12a:	7a9b      	ldrb	r3, [r3, #10]
 801d12c:	2b09      	cmp	r3, #9
 801d12e:	d809      	bhi.n	801d144 <dhcp_renew+0xd4>
 801d130:	693b      	ldr	r3, [r7, #16]
 801d132:	7a9b      	ldrb	r3, [r3, #10]
 801d134:	461a      	mov	r2, r3
 801d136:	0152      	lsls	r2, r2, #5
 801d138:	1ad2      	subs	r2, r2, r3
 801d13a:	0092      	lsls	r2, r2, #2
 801d13c:	4413      	add	r3, r2
 801d13e:	011b      	lsls	r3, r3, #4
 801d140:	b29b      	uxth	r3, r3
 801d142:	e001      	b.n	801d148 <dhcp_renew+0xd8>
 801d144:	f644 6320 	movw	r3, #20000	@ 0x4e20
 801d148:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801d14a:	89bb      	ldrh	r3, [r7, #12]
 801d14c:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801d150:	4a09      	ldr	r2, [pc, #36]	@ (801d178 <dhcp_renew+0x108>)
 801d152:	fb82 1203 	smull	r1, r2, r2, r3
 801d156:	1152      	asrs	r2, r2, #5
 801d158:	17db      	asrs	r3, r3, #31
 801d15a:	1ad3      	subs	r3, r2, r3
 801d15c:	b29a      	uxth	r2, r3
 801d15e:	693b      	ldr	r3, [r7, #16]
 801d160:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801d162:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801d166:	4618      	mov	r0, r3
 801d168:	3718      	adds	r7, #24
 801d16a:	46bd      	mov	sp, r7
 801d16c:	bd80      	pop	{r7, pc}
 801d16e:	bf00      	nop
 801d170:	20000128 	.word	0x20000128
 801d174:	2000c0a8 	.word	0x2000c0a8
 801d178:	10624dd3 	.word	0x10624dd3

0801d17c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801d17c:	b580      	push	{r7, lr}
 801d17e:	b088      	sub	sp, #32
 801d180:	af02      	add	r7, sp, #8
 801d182:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d184:	687b      	ldr	r3, [r7, #4]
 801d186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d188:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801d18a:	2104      	movs	r1, #4
 801d18c:	6938      	ldr	r0, [r7, #16]
 801d18e:	f000 f9cf 	bl	801d530 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 801d192:	2203      	movs	r2, #3
 801d194:	6939      	ldr	r1, [r7, #16]
 801d196:	6878      	ldr	r0, [r7, #4]
 801d198:	f000 fe52 	bl	801de40 <dhcp_create_msg>
 801d19c:	4603      	mov	r3, r0
 801d19e:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 801d1a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d1a4:	2b00      	cmp	r3, #0
 801d1a6:	d139      	bne.n	801d21c <dhcp_rebind+0xa0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801d1a8:	2202      	movs	r2, #2
 801d1aa:	2139      	movs	r1, #57	@ 0x39
 801d1ac:	6938      	ldr	r0, [r7, #16]
 801d1ae:	f000 f9d9 	bl	801d564 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 801d1b2:	687b      	ldr	r3, [r7, #4]
 801d1b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801d1b6:	4619      	mov	r1, r3
 801d1b8:	6938      	ldr	r0, [r7, #16]
 801d1ba:	f000 fa35 	bl	801d628 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d1be:	2203      	movs	r2, #3
 801d1c0:	2137      	movs	r1, #55	@ 0x37
 801d1c2:	6938      	ldr	r0, [r7, #16]
 801d1c4:	f000 f9ce 	bl	801d564 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d1c8:	2300      	movs	r3, #0
 801d1ca:	75fb      	strb	r3, [r7, #23]
 801d1cc:	e009      	b.n	801d1e2 <dhcp_rebind+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 801d1ce:	7dfb      	ldrb	r3, [r7, #23]
 801d1d0:	4a29      	ldr	r2, [pc, #164]	@ (801d278 <dhcp_rebind+0xfc>)
 801d1d2:	5cd3      	ldrb	r3, [r2, r3]
 801d1d4:	4619      	mov	r1, r3
 801d1d6:	6938      	ldr	r0, [r7, #16]
 801d1d8:	f000 f9fe 	bl	801d5d8 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d1dc:	7dfb      	ldrb	r3, [r7, #23]
 801d1de:	3301      	adds	r3, #1
 801d1e0:	75fb      	strb	r3, [r7, #23]
 801d1e2:	7dfb      	ldrb	r3, [r7, #23]
 801d1e4:	2b02      	cmp	r3, #2
 801d1e6:	d9f2      	bls.n	801d1ce <dhcp_rebind+0x52>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 801d1e8:	6938      	ldr	r0, [r7, #16]
 801d1ea:	f000 ffcd 	bl	801e188 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801d1ee:	693b      	ldr	r3, [r7, #16]
 801d1f0:	68da      	ldr	r2, [r3, #12]
 801d1f2:	693b      	ldr	r3, [r7, #16]
 801d1f4:	8a9b      	ldrh	r3, [r3, #20]
 801d1f6:	33f0      	adds	r3, #240	@ 0xf0
 801d1f8:	b29b      	uxth	r3, r3
 801d1fa:	4619      	mov	r1, r3
 801d1fc:	4610      	mov	r0, r2
 801d1fe:	f7f8 fbdd 	bl	80159bc <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 801d202:	4b1e      	ldr	r3, [pc, #120]	@ (801d27c <dhcp_rebind+0x100>)
 801d204:	6818      	ldr	r0, [r3, #0]
 801d206:	693b      	ldr	r3, [r7, #16]
 801d208:	68d9      	ldr	r1, [r3, #12]
 801d20a:	687b      	ldr	r3, [r7, #4]
 801d20c:	9300      	str	r3, [sp, #0]
 801d20e:	2343      	movs	r3, #67	@ 0x43
 801d210:	4a1b      	ldr	r2, [pc, #108]	@ (801d280 <dhcp_rebind+0x104>)
 801d212:	f7fe ff3d 	bl	801c090 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 801d216:	6938      	ldr	r0, [r7, #16]
 801d218:	f000 ff74 	bl	801e104 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801d21c:	693b      	ldr	r3, [r7, #16]
 801d21e:	7a9b      	ldrb	r3, [r3, #10]
 801d220:	2bff      	cmp	r3, #255	@ 0xff
 801d222:	d005      	beq.n	801d230 <dhcp_rebind+0xb4>
    dhcp->tries++;
 801d224:	693b      	ldr	r3, [r7, #16]
 801d226:	7a9b      	ldrb	r3, [r3, #10]
 801d228:	3301      	adds	r3, #1
 801d22a:	b2da      	uxtb	r2, r3
 801d22c:	693b      	ldr	r3, [r7, #16]
 801d22e:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 801d230:	693b      	ldr	r3, [r7, #16]
 801d232:	7a9b      	ldrb	r3, [r3, #10]
 801d234:	2b09      	cmp	r3, #9
 801d236:	d809      	bhi.n	801d24c <dhcp_rebind+0xd0>
 801d238:	693b      	ldr	r3, [r7, #16]
 801d23a:	7a9b      	ldrb	r3, [r3, #10]
 801d23c:	461a      	mov	r2, r3
 801d23e:	0152      	lsls	r2, r2, #5
 801d240:	1ad2      	subs	r2, r2, r3
 801d242:	0092      	lsls	r2, r2, #2
 801d244:	4413      	add	r3, r2
 801d246:	00db      	lsls	r3, r3, #3
 801d248:	b29b      	uxth	r3, r3
 801d24a:	e001      	b.n	801d250 <dhcp_rebind+0xd4>
 801d24c:	f242 7310 	movw	r3, #10000	@ 0x2710
 801d250:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801d252:	89bb      	ldrh	r3, [r7, #12]
 801d254:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801d258:	4a0a      	ldr	r2, [pc, #40]	@ (801d284 <dhcp_rebind+0x108>)
 801d25a:	fb82 1203 	smull	r1, r2, r2, r3
 801d25e:	1152      	asrs	r2, r2, #5
 801d260:	17db      	asrs	r3, r3, #31
 801d262:	1ad3      	subs	r3, r2, r3
 801d264:	b29a      	uxth	r2, r3
 801d266:	693b      	ldr	r3, [r7, #16]
 801d268:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801d26a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801d26e:	4618      	mov	r0, r3
 801d270:	3718      	adds	r7, #24
 801d272:	46bd      	mov	sp, r7
 801d274:	bd80      	pop	{r7, pc}
 801d276:	bf00      	nop
 801d278:	20000128 	.word	0x20000128
 801d27c:	2000c0a8 	.word	0x2000c0a8
 801d280:	08030cf8 	.word	0x08030cf8
 801d284:	10624dd3 	.word	0x10624dd3

0801d288 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801d288:	b580      	push	{r7, lr}
 801d28a:	b088      	sub	sp, #32
 801d28c:	af02      	add	r7, sp, #8
 801d28e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d290:	687b      	ldr	r3, [r7, #4]
 801d292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d294:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801d296:	2103      	movs	r1, #3
 801d298:	6938      	ldr	r0, [r7, #16]
 801d29a:	f000 f949 	bl	801d530 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 801d29e:	2203      	movs	r2, #3
 801d2a0:	6939      	ldr	r1, [r7, #16]
 801d2a2:	6878      	ldr	r0, [r7, #4]
 801d2a4:	f000 fdcc 	bl	801de40 <dhcp_create_msg>
 801d2a8:	4603      	mov	r3, r0
 801d2aa:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 801d2ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d2b0:	2b00      	cmp	r3, #0
 801d2b2:	d147      	bne.n	801d344 <dhcp_reboot+0xbc>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801d2b4:	2202      	movs	r2, #2
 801d2b6:	2139      	movs	r1, #57	@ 0x39
 801d2b8:	6938      	ldr	r0, [r7, #16]
 801d2ba:	f000 f953 	bl	801d564 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801d2be:	f44f 7110 	mov.w	r1, #576	@ 0x240
 801d2c2:	6938      	ldr	r0, [r7, #16]
 801d2c4:	f000 f9b0 	bl	801d628 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 801d2c8:	2204      	movs	r2, #4
 801d2ca:	2132      	movs	r1, #50	@ 0x32
 801d2cc:	6938      	ldr	r0, [r7, #16]
 801d2ce:	f000 f949 	bl	801d564 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801d2d2:	693b      	ldr	r3, [r7, #16]
 801d2d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d2d6:	4618      	mov	r0, r3
 801d2d8:	f7f7 fa99 	bl	801480e <lwip_htonl>
 801d2dc:	4603      	mov	r3, r0
 801d2de:	4619      	mov	r1, r3
 801d2e0:	6938      	ldr	r0, [r7, #16]
 801d2e2:	f000 f9db 	bl	801d69c <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d2e6:	2203      	movs	r2, #3
 801d2e8:	2137      	movs	r1, #55	@ 0x37
 801d2ea:	6938      	ldr	r0, [r7, #16]
 801d2ec:	f000 f93a 	bl	801d564 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d2f0:	2300      	movs	r3, #0
 801d2f2:	75fb      	strb	r3, [r7, #23]
 801d2f4:	e009      	b.n	801d30a <dhcp_reboot+0x82>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 801d2f6:	7dfb      	ldrb	r3, [r7, #23]
 801d2f8:	4a29      	ldr	r2, [pc, #164]	@ (801d3a0 <dhcp_reboot+0x118>)
 801d2fa:	5cd3      	ldrb	r3, [r2, r3]
 801d2fc:	4619      	mov	r1, r3
 801d2fe:	6938      	ldr	r0, [r7, #16]
 801d300:	f000 f96a 	bl	801d5d8 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d304:	7dfb      	ldrb	r3, [r7, #23]
 801d306:	3301      	adds	r3, #1
 801d308:	75fb      	strb	r3, [r7, #23]
 801d30a:	7dfb      	ldrb	r3, [r7, #23]
 801d30c:	2b02      	cmp	r3, #2
 801d30e:	d9f2      	bls.n	801d2f6 <dhcp_reboot+0x6e>
    }

    dhcp_option_trailer(dhcp);
 801d310:	6938      	ldr	r0, [r7, #16]
 801d312:	f000 ff39 	bl	801e188 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801d316:	693b      	ldr	r3, [r7, #16]
 801d318:	68da      	ldr	r2, [r3, #12]
 801d31a:	693b      	ldr	r3, [r7, #16]
 801d31c:	8a9b      	ldrh	r3, [r3, #20]
 801d31e:	33f0      	adds	r3, #240	@ 0xf0
 801d320:	b29b      	uxth	r3, r3
 801d322:	4619      	mov	r1, r3
 801d324:	4610      	mov	r0, r2
 801d326:	f7f8 fb49 	bl	80159bc <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 801d32a:	4b1e      	ldr	r3, [pc, #120]	@ (801d3a4 <dhcp_reboot+0x11c>)
 801d32c:	6818      	ldr	r0, [r3, #0]
 801d32e:	693b      	ldr	r3, [r7, #16]
 801d330:	68d9      	ldr	r1, [r3, #12]
 801d332:	687b      	ldr	r3, [r7, #4]
 801d334:	9300      	str	r3, [sp, #0]
 801d336:	2343      	movs	r3, #67	@ 0x43
 801d338:	4a1b      	ldr	r2, [pc, #108]	@ (801d3a8 <dhcp_reboot+0x120>)
 801d33a:	f7fe fea9 	bl	801c090 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 801d33e:	6938      	ldr	r0, [r7, #16]
 801d340:	f000 fee0 	bl	801e104 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801d344:	693b      	ldr	r3, [r7, #16]
 801d346:	7a9b      	ldrb	r3, [r3, #10]
 801d348:	2bff      	cmp	r3, #255	@ 0xff
 801d34a:	d005      	beq.n	801d358 <dhcp_reboot+0xd0>
    dhcp->tries++;
 801d34c:	693b      	ldr	r3, [r7, #16]
 801d34e:	7a9b      	ldrb	r3, [r3, #10]
 801d350:	3301      	adds	r3, #1
 801d352:	b2da      	uxtb	r2, r3
 801d354:	693b      	ldr	r3, [r7, #16]
 801d356:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 801d358:	693b      	ldr	r3, [r7, #16]
 801d35a:	7a9b      	ldrb	r3, [r3, #10]
 801d35c:	2b09      	cmp	r3, #9
 801d35e:	d809      	bhi.n	801d374 <dhcp_reboot+0xec>
 801d360:	693b      	ldr	r3, [r7, #16]
 801d362:	7a9b      	ldrb	r3, [r3, #10]
 801d364:	461a      	mov	r2, r3
 801d366:	0152      	lsls	r2, r2, #5
 801d368:	1ad2      	subs	r2, r2, r3
 801d36a:	0092      	lsls	r2, r2, #2
 801d36c:	4413      	add	r3, r2
 801d36e:	00db      	lsls	r3, r3, #3
 801d370:	b29b      	uxth	r3, r3
 801d372:	e001      	b.n	801d378 <dhcp_reboot+0xf0>
 801d374:	f242 7310 	movw	r3, #10000	@ 0x2710
 801d378:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801d37a:	89bb      	ldrh	r3, [r7, #12]
 801d37c:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801d380:	4a0a      	ldr	r2, [pc, #40]	@ (801d3ac <dhcp_reboot+0x124>)
 801d382:	fb82 1203 	smull	r1, r2, r2, r3
 801d386:	1152      	asrs	r2, r2, #5
 801d388:	17db      	asrs	r3, r3, #31
 801d38a:	1ad3      	subs	r3, r2, r3
 801d38c:	b29a      	uxth	r2, r3
 801d38e:	693b      	ldr	r3, [r7, #16]
 801d390:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801d392:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801d396:	4618      	mov	r0, r3
 801d398:	3718      	adds	r7, #24
 801d39a:	46bd      	mov	sp, r7
 801d39c:	bd80      	pop	{r7, pc}
 801d39e:	bf00      	nop
 801d3a0:	20000128 	.word	0x20000128
 801d3a4:	2000c0a8 	.word	0x2000c0a8
 801d3a8:	08030cf8 	.word	0x08030cf8
 801d3ac:	10624dd3 	.word	0x10624dd3

0801d3b0 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
 801d3b0:	b580      	push	{r7, lr}
 801d3b2:	b088      	sub	sp, #32
 801d3b4:	af02      	add	r7, sp, #8
 801d3b6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d3b8:	687b      	ldr	r3, [r7, #4]
 801d3ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d3bc:	617b      	str	r3, [r7, #20]
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
 801d3be:	697b      	ldr	r3, [r7, #20]
 801d3c0:	2b00      	cmp	r3, #0
 801d3c2:	d102      	bne.n	801d3ca <dhcp_release+0x1a>
    return ERR_ARG;
 801d3c4:	f06f 030f 	mvn.w	r3, #15
 801d3c8:	e072      	b.n	801d4b0 <dhcp_release+0x100>
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801d3ca:	697b      	ldr	r3, [r7, #20]
 801d3cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d3ce:	60fb      	str	r3, [r7, #12]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 801d3d0:	6878      	ldr	r0, [r7, #4]
 801d3d2:	f000 ff33 	bl	801e23c <dhcp_supplied_address>
 801d3d6:	4603      	mov	r3, r0
 801d3d8:	74fb      	strb	r3, [r7, #19]

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801d3da:	2100      	movs	r1, #0
 801d3dc:	6978      	ldr	r0, [r7, #20]
 801d3de:	f000 f8a7 	bl	801d530 <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801d3e2:	697b      	ldr	r3, [r7, #20]
 801d3e4:	2200      	movs	r2, #0
 801d3e6:	625a      	str	r2, [r3, #36]	@ 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801d3e8:	697b      	ldr	r3, [r7, #20]
 801d3ea:	2200      	movs	r2, #0
 801d3ec:	629a      	str	r2, [r3, #40]	@ 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801d3ee:	697b      	ldr	r3, [r7, #20]
 801d3f0:	2200      	movs	r2, #0
 801d3f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801d3f4:	697b      	ldr	r3, [r7, #20]
 801d3f6:	2200      	movs	r2, #0
 801d3f8:	631a      	str	r2, [r3, #48]	@ 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801d3fa:	697b      	ldr	r3, [r7, #20]
 801d3fc:	2200      	movs	r2, #0
 801d3fe:	63da      	str	r2, [r3, #60]	@ 0x3c
 801d400:	697b      	ldr	r3, [r7, #20]
 801d402:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801d404:	697b      	ldr	r3, [r7, #20]
 801d406:	639a      	str	r2, [r3, #56]	@ 0x38
 801d408:	697b      	ldr	r3, [r7, #20]
 801d40a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801d40c:	697b      	ldr	r3, [r7, #20]
 801d40e:	635a      	str	r2, [r3, #52]	@ 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801d410:	697b      	ldr	r3, [r7, #20]
 801d412:	2200      	movs	r2, #0
 801d414:	845a      	strh	r2, [r3, #34]	@ 0x22
 801d416:	697b      	ldr	r3, [r7, #20]
 801d418:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 801d41a:	697b      	ldr	r3, [r7, #20]
 801d41c:	841a      	strh	r2, [r3, #32]
 801d41e:	697b      	ldr	r3, [r7, #20]
 801d420:	8c1a      	ldrh	r2, [r3, #32]
 801d422:	697b      	ldr	r3, [r7, #20]
 801d424:	83da      	strh	r2, [r3, #30]
 801d426:	697b      	ldr	r3, [r7, #20]
 801d428:	8bda      	ldrh	r2, [r3, #30]
 801d42a:	697b      	ldr	r3, [r7, #20]
 801d42c:	839a      	strh	r2, [r3, #28]

  if (!is_dhcp_supplied_address) {
 801d42e:	7cfb      	ldrb	r3, [r7, #19]
 801d430:	2b00      	cmp	r3, #0
 801d432:	d101      	bne.n	801d438 <dhcp_release+0x88>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
 801d434:	2300      	movs	r3, #0
 801d436:	e03b      	b.n	801d4b0 <dhcp_release+0x100>
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 801d438:	2207      	movs	r2, #7
 801d43a:	6979      	ldr	r1, [r7, #20]
 801d43c:	6878      	ldr	r0, [r7, #4]
 801d43e:	f000 fcff 	bl	801de40 <dhcp_create_msg>
 801d442:	4603      	mov	r3, r0
 801d444:	74bb      	strb	r3, [r7, #18]
  if (result == ERR_OK) {
 801d446:	f997 3012 	ldrsb.w	r3, [r7, #18]
 801d44a:	2b00      	cmp	r3, #0
 801d44c:	d128      	bne.n	801d4a0 <dhcp_release+0xf0>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 801d44e:	2204      	movs	r2, #4
 801d450:	2136      	movs	r1, #54	@ 0x36
 801d452:	6978      	ldr	r0, [r7, #20]
 801d454:	f000 f886 	bl	801d564 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801d458:	68fb      	ldr	r3, [r7, #12]
 801d45a:	4618      	mov	r0, r3
 801d45c:	f7f7 f9d7 	bl	801480e <lwip_htonl>
 801d460:	4603      	mov	r3, r0
 801d462:	4619      	mov	r1, r3
 801d464:	6978      	ldr	r0, [r7, #20]
 801d466:	f000 f919 	bl	801d69c <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 801d46a:	6978      	ldr	r0, [r7, #20]
 801d46c:	f000 fe8c 	bl	801e188 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801d470:	697b      	ldr	r3, [r7, #20]
 801d472:	68da      	ldr	r2, [r3, #12]
 801d474:	697b      	ldr	r3, [r7, #20]
 801d476:	8a9b      	ldrh	r3, [r3, #20]
 801d478:	33f0      	adds	r3, #240	@ 0xf0
 801d47a:	b29b      	uxth	r3, r3
 801d47c:	4619      	mov	r1, r3
 801d47e:	4610      	mov	r0, r2
 801d480:	f7f8 fa9c 	bl	80159bc <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 801d484:	4b0c      	ldr	r3, [pc, #48]	@ (801d4b8 <dhcp_release+0x108>)
 801d486:	6818      	ldr	r0, [r3, #0]
 801d488:	697b      	ldr	r3, [r7, #20]
 801d48a:	68d9      	ldr	r1, [r3, #12]
 801d48c:	f107 020c 	add.w	r2, r7, #12
 801d490:	687b      	ldr	r3, [r7, #4]
 801d492:	9300      	str	r3, [sp, #0]
 801d494:	2343      	movs	r3, #67	@ 0x43
 801d496:	f7fe fdfb 	bl	801c090 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 801d49a:	6978      	ldr	r0, [r7, #20]
 801d49c:	f000 fe32 	bl	801e104 <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801d4a0:	4b06      	ldr	r3, [pc, #24]	@ (801d4bc <dhcp_release+0x10c>)
 801d4a2:	4a06      	ldr	r2, [pc, #24]	@ (801d4bc <dhcp_release+0x10c>)
 801d4a4:	4905      	ldr	r1, [pc, #20]	@ (801d4bc <dhcp_release+0x10c>)
 801d4a6:	6878      	ldr	r0, [r7, #4]
 801d4a8:	f7f7 ff2e 	bl	8015308 <netif_set_addr>

  return result;
 801d4ac:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 801d4b0:	4618      	mov	r0, r3
 801d4b2:	3718      	adds	r7, #24
 801d4b4:	46bd      	mov	sp, r7
 801d4b6:	bd80      	pop	{r7, pc}
 801d4b8:	2000c0a8 	.word	0x2000c0a8
 801d4bc:	08030cf4 	.word	0x08030cf4

0801d4c0 <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
 801d4c0:	b580      	push	{r7, lr}
 801d4c2:	b084      	sub	sp, #16
 801d4c4:	af00      	add	r7, sp, #0
 801d4c6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 801d4c8:	687b      	ldr	r3, [r7, #4]
 801d4ca:	2b00      	cmp	r3, #0
 801d4cc:	d107      	bne.n	801d4de <dhcp_stop+0x1e>
 801d4ce:	4b14      	ldr	r3, [pc, #80]	@ (801d520 <dhcp_stop+0x60>)
 801d4d0:	f240 5242 	movw	r2, #1346	@ 0x542
 801d4d4:	4913      	ldr	r1, [pc, #76]	@ (801d524 <dhcp_stop+0x64>)
 801d4d6:	4814      	ldr	r0, [pc, #80]	@ (801d528 <dhcp_stop+0x68>)
 801d4d8:	f004 fbd6 	bl	8021c88 <iprintf>
 801d4dc:	e01d      	b.n	801d51a <dhcp_stop+0x5a>
  dhcp = netif_dhcp_data(netif);
 801d4de:	687b      	ldr	r3, [r7, #4]
 801d4e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d4e2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
 801d4e4:	68fb      	ldr	r3, [r7, #12]
 801d4e6:	2b00      	cmp	r3, #0
 801d4e8:	d017      	beq.n	801d51a <dhcp_stop+0x5a>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 801d4ea:	68fb      	ldr	r3, [r7, #12]
 801d4ec:	685b      	ldr	r3, [r3, #4]
 801d4ee:	2b00      	cmp	r3, #0
 801d4f0:	d006      	beq.n	801d500 <dhcp_stop+0x40>
 801d4f2:	4b0b      	ldr	r3, [pc, #44]	@ (801d520 <dhcp_stop+0x60>)
 801d4f4:	f240 524f 	movw	r2, #1359	@ 0x54f
 801d4f8:	490c      	ldr	r1, [pc, #48]	@ (801d52c <dhcp_stop+0x6c>)
 801d4fa:	480b      	ldr	r0, [pc, #44]	@ (801d528 <dhcp_stop+0x68>)
 801d4fc:	f004 fbc4 	bl	8021c88 <iprintf>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801d500:	2100      	movs	r1, #0
 801d502:	68f8      	ldr	r0, [r7, #12]
 801d504:	f000 f814 	bl	801d530 <dhcp_set_state>

    if (dhcp->pcb_allocated != 0) {
 801d508:	68fb      	ldr	r3, [r7, #12]
 801d50a:	7a1b      	ldrb	r3, [r3, #8]
 801d50c:	2b00      	cmp	r3, #0
 801d50e:	d004      	beq.n	801d51a <dhcp_stop+0x5a>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801d510:	f7ff f854 	bl	801c5bc <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
 801d514:	68fb      	ldr	r3, [r7, #12]
 801d516:	2200      	movs	r2, #0
 801d518:	721a      	strb	r2, [r3, #8]
    }
  }
}
 801d51a:	3710      	adds	r7, #16
 801d51c:	46bd      	mov	sp, r7
 801d51e:	bd80      	pop	{r7, pc}
 801d520:	08026db4 	.word	0x08026db4
 801d524:	08026f28 	.word	0x08026f28
 801d528:	08026e14 	.word	0x08026e14
 801d52c:	08026ee0 	.word	0x08026ee0

0801d530 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801d530:	b480      	push	{r7}
 801d532:	b083      	sub	sp, #12
 801d534:	af00      	add	r7, sp, #0
 801d536:	6078      	str	r0, [r7, #4]
 801d538:	460b      	mov	r3, r1
 801d53a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801d53c:	687b      	ldr	r3, [r7, #4]
 801d53e:	7a5b      	ldrb	r3, [r3, #9]
 801d540:	78fa      	ldrb	r2, [r7, #3]
 801d542:	429a      	cmp	r2, r3
 801d544:	d008      	beq.n	801d558 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801d546:	687b      	ldr	r3, [r7, #4]
 801d548:	78fa      	ldrb	r2, [r7, #3]
 801d54a:	725a      	strb	r2, [r3, #9]
    dhcp->tries = 0;
 801d54c:	687b      	ldr	r3, [r7, #4]
 801d54e:	2200      	movs	r2, #0
 801d550:	729a      	strb	r2, [r3, #10]
    dhcp->request_timeout = 0;
 801d552:	687b      	ldr	r3, [r7, #4]
 801d554:	2200      	movs	r2, #0
 801d556:	82da      	strh	r2, [r3, #22]
  }
}
 801d558:	bf00      	nop
 801d55a:	370c      	adds	r7, #12
 801d55c:	46bd      	mov	sp, r7
 801d55e:	bc80      	pop	{r7}
 801d560:	4770      	bx	lr
	...

0801d564 <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
 801d564:	b580      	push	{r7, lr}
 801d566:	b082      	sub	sp, #8
 801d568:	af00      	add	r7, sp, #0
 801d56a:	6078      	str	r0, [r7, #4]
 801d56c:	460b      	mov	r3, r1
 801d56e:	70fb      	strb	r3, [r7, #3]
 801d570:	4613      	mov	r3, r2
 801d572:	70bb      	strb	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801d574:	687b      	ldr	r3, [r7, #4]
 801d576:	8a9b      	ldrh	r3, [r3, #20]
 801d578:	461a      	mov	r2, r3
 801d57a:	78bb      	ldrb	r3, [r7, #2]
 801d57c:	4413      	add	r3, r2
 801d57e:	3302      	adds	r3, #2
 801d580:	2b44      	cmp	r3, #68	@ 0x44
 801d582:	d906      	bls.n	801d592 <dhcp_option+0x2e>
 801d584:	4b11      	ldr	r3, [pc, #68]	@ (801d5cc <dhcp_option+0x68>)
 801d586:	f44f 62ae 	mov.w	r2, #1392	@ 0x570
 801d58a:	4911      	ldr	r1, [pc, #68]	@ (801d5d0 <dhcp_option+0x6c>)
 801d58c:	4811      	ldr	r0, [pc, #68]	@ (801d5d4 <dhcp_option+0x70>)
 801d58e:	f004 fb7b 	bl	8021c88 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 801d592:	687b      	ldr	r3, [r7, #4]
 801d594:	691a      	ldr	r2, [r3, #16]
 801d596:	687b      	ldr	r3, [r7, #4]
 801d598:	8a9b      	ldrh	r3, [r3, #20]
 801d59a:	1c59      	adds	r1, r3, #1
 801d59c:	b288      	uxth	r0, r1
 801d59e:	6879      	ldr	r1, [r7, #4]
 801d5a0:	8288      	strh	r0, [r1, #20]
 801d5a2:	4413      	add	r3, r2
 801d5a4:	78fa      	ldrb	r2, [r7, #3]
 801d5a6:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 801d5aa:	687b      	ldr	r3, [r7, #4]
 801d5ac:	691a      	ldr	r2, [r3, #16]
 801d5ae:	687b      	ldr	r3, [r7, #4]
 801d5b0:	8a9b      	ldrh	r3, [r3, #20]
 801d5b2:	1c59      	adds	r1, r3, #1
 801d5b4:	b288      	uxth	r0, r1
 801d5b6:	6879      	ldr	r1, [r7, #4]
 801d5b8:	8288      	strh	r0, [r1, #20]
 801d5ba:	4413      	add	r3, r2
 801d5bc:	78ba      	ldrb	r2, [r7, #2]
 801d5be:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
}
 801d5c2:	bf00      	nop
 801d5c4:	3708      	adds	r7, #8
 801d5c6:	46bd      	mov	sp, r7
 801d5c8:	bd80      	pop	{r7, pc}
 801d5ca:	bf00      	nop
 801d5cc:	08026db4 	.word	0x08026db4
 801d5d0:	08026f44 	.word	0x08026f44
 801d5d4:	08026e14 	.word	0x08026e14

0801d5d8 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
 801d5d8:	b580      	push	{r7, lr}
 801d5da:	b082      	sub	sp, #8
 801d5dc:	af00      	add	r7, sp, #0
 801d5de:	6078      	str	r0, [r7, #4]
 801d5e0:	460b      	mov	r3, r1
 801d5e2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 801d5e4:	687b      	ldr	r3, [r7, #4]
 801d5e6:	8a9b      	ldrh	r3, [r3, #20]
 801d5e8:	2b43      	cmp	r3, #67	@ 0x43
 801d5ea:	d906      	bls.n	801d5fa <dhcp_option_byte+0x22>
 801d5ec:	4b0b      	ldr	r3, [pc, #44]	@ (801d61c <dhcp_option_byte+0x44>)
 801d5ee:	f240 527b 	movw	r2, #1403	@ 0x57b
 801d5f2:	490b      	ldr	r1, [pc, #44]	@ (801d620 <dhcp_option_byte+0x48>)
 801d5f4:	480b      	ldr	r0, [pc, #44]	@ (801d624 <dhcp_option_byte+0x4c>)
 801d5f6:	f004 fb47 	bl	8021c88 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 801d5fa:	687b      	ldr	r3, [r7, #4]
 801d5fc:	691a      	ldr	r2, [r3, #16]
 801d5fe:	687b      	ldr	r3, [r7, #4]
 801d600:	8a9b      	ldrh	r3, [r3, #20]
 801d602:	1c59      	adds	r1, r3, #1
 801d604:	b288      	uxth	r0, r1
 801d606:	6879      	ldr	r1, [r7, #4]
 801d608:	8288      	strh	r0, [r1, #20]
 801d60a:	4413      	add	r3, r2
 801d60c:	78fa      	ldrb	r2, [r7, #3]
 801d60e:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
}
 801d612:	bf00      	nop
 801d614:	3708      	adds	r7, #8
 801d616:	46bd      	mov	sp, r7
 801d618:	bd80      	pop	{r7, pc}
 801d61a:	bf00      	nop
 801d61c:	08026db4 	.word	0x08026db4
 801d620:	08026f8c 	.word	0x08026f8c
 801d624:	08026e14 	.word	0x08026e14

0801d628 <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 801d628:	b590      	push	{r4, r7, lr}
 801d62a:	b083      	sub	sp, #12
 801d62c:	af00      	add	r7, sp, #0
 801d62e:	6078      	str	r0, [r7, #4]
 801d630:	460b      	mov	r3, r1
 801d632:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801d634:	687b      	ldr	r3, [r7, #4]
 801d636:	8a9b      	ldrh	r3, [r3, #20]
 801d638:	3302      	adds	r3, #2
 801d63a:	2b44      	cmp	r3, #68	@ 0x44
 801d63c:	d906      	bls.n	801d64c <dhcp_option_short+0x24>
 801d63e:	4b14      	ldr	r3, [pc, #80]	@ (801d690 <dhcp_option_short+0x68>)
 801d640:	f240 5282 	movw	r2, #1410	@ 0x582
 801d644:	4913      	ldr	r1, [pc, #76]	@ (801d694 <dhcp_option_short+0x6c>)
 801d646:	4814      	ldr	r0, [pc, #80]	@ (801d698 <dhcp_option_short+0x70>)
 801d648:	f004 fb1e 	bl	8021c88 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801d64c:	887b      	ldrh	r3, [r7, #2]
 801d64e:	0a1b      	lsrs	r3, r3, #8
 801d650:	b298      	uxth	r0, r3
 801d652:	687b      	ldr	r3, [r7, #4]
 801d654:	691a      	ldr	r2, [r3, #16]
 801d656:	687b      	ldr	r3, [r7, #4]
 801d658:	8a9b      	ldrh	r3, [r3, #20]
 801d65a:	1c59      	adds	r1, r3, #1
 801d65c:	b28c      	uxth	r4, r1
 801d65e:	6879      	ldr	r1, [r7, #4]
 801d660:	828c      	strh	r4, [r1, #20]
 801d662:	b2c1      	uxtb	r1, r0
 801d664:	4413      	add	r3, r2
 801d666:	460a      	mov	r2, r1
 801d668:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 801d66c:	687b      	ldr	r3, [r7, #4]
 801d66e:	691a      	ldr	r2, [r3, #16]
 801d670:	687b      	ldr	r3, [r7, #4]
 801d672:	8a9b      	ldrh	r3, [r3, #20]
 801d674:	1c59      	adds	r1, r3, #1
 801d676:	b288      	uxth	r0, r1
 801d678:	6879      	ldr	r1, [r7, #4]
 801d67a:	8288      	strh	r0, [r1, #20]
 801d67c:	8879      	ldrh	r1, [r7, #2]
 801d67e:	b2c9      	uxtb	r1, r1
 801d680:	4413      	add	r3, r2
 801d682:	460a      	mov	r2, r1
 801d684:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
}
 801d688:	bf00      	nop
 801d68a:	370c      	adds	r7, #12
 801d68c:	46bd      	mov	sp, r7
 801d68e:	bd90      	pop	{r4, r7, pc}
 801d690:	08026db4 	.word	0x08026db4
 801d694:	08026fc8 	.word	0x08026fc8
 801d698:	08026e14 	.word	0x08026e14

0801d69c <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 801d69c:	b590      	push	{r4, r7, lr}
 801d69e:	b083      	sub	sp, #12
 801d6a0:	af00      	add	r7, sp, #0
 801d6a2:	6078      	str	r0, [r7, #4]
 801d6a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801d6a6:	687b      	ldr	r3, [r7, #4]
 801d6a8:	8a9b      	ldrh	r3, [r3, #20]
 801d6aa:	3304      	adds	r3, #4
 801d6ac:	2b44      	cmp	r3, #68	@ 0x44
 801d6ae:	d906      	bls.n	801d6be <dhcp_option_long+0x22>
 801d6b0:	4b22      	ldr	r3, [pc, #136]	@ (801d73c <dhcp_option_long+0xa0>)
 801d6b2:	f240 528a 	movw	r2, #1418	@ 0x58a
 801d6b6:	4922      	ldr	r1, [pc, #136]	@ (801d740 <dhcp_option_long+0xa4>)
 801d6b8:	4822      	ldr	r0, [pc, #136]	@ (801d744 <dhcp_option_long+0xa8>)
 801d6ba:	f004 fae5 	bl	8021c88 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801d6be:	683b      	ldr	r3, [r7, #0]
 801d6c0:	0e18      	lsrs	r0, r3, #24
 801d6c2:	687b      	ldr	r3, [r7, #4]
 801d6c4:	691a      	ldr	r2, [r3, #16]
 801d6c6:	687b      	ldr	r3, [r7, #4]
 801d6c8:	8a9b      	ldrh	r3, [r3, #20]
 801d6ca:	1c59      	adds	r1, r3, #1
 801d6cc:	b28c      	uxth	r4, r1
 801d6ce:	6879      	ldr	r1, [r7, #4]
 801d6d0:	828c      	strh	r4, [r1, #20]
 801d6d2:	b2c1      	uxtb	r1, r0
 801d6d4:	4413      	add	r3, r2
 801d6d6:	460a      	mov	r2, r1
 801d6d8:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801d6dc:	683b      	ldr	r3, [r7, #0]
 801d6de:	0c18      	lsrs	r0, r3, #16
 801d6e0:	687b      	ldr	r3, [r7, #4]
 801d6e2:	691a      	ldr	r2, [r3, #16]
 801d6e4:	687b      	ldr	r3, [r7, #4]
 801d6e6:	8a9b      	ldrh	r3, [r3, #20]
 801d6e8:	1c59      	adds	r1, r3, #1
 801d6ea:	b28c      	uxth	r4, r1
 801d6ec:	6879      	ldr	r1, [r7, #4]
 801d6ee:	828c      	strh	r4, [r1, #20]
 801d6f0:	b2c1      	uxtb	r1, r0
 801d6f2:	4413      	add	r3, r2
 801d6f4:	460a      	mov	r2, r1
 801d6f6:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801d6fa:	683b      	ldr	r3, [r7, #0]
 801d6fc:	0a18      	lsrs	r0, r3, #8
 801d6fe:	687b      	ldr	r3, [r7, #4]
 801d700:	691a      	ldr	r2, [r3, #16]
 801d702:	687b      	ldr	r3, [r7, #4]
 801d704:	8a9b      	ldrh	r3, [r3, #20]
 801d706:	1c59      	adds	r1, r3, #1
 801d708:	b28c      	uxth	r4, r1
 801d70a:	6879      	ldr	r1, [r7, #4]
 801d70c:	828c      	strh	r4, [r1, #20]
 801d70e:	b2c1      	uxtb	r1, r0
 801d710:	4413      	add	r3, r2
 801d712:	460a      	mov	r2, r1
 801d714:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801d718:	687b      	ldr	r3, [r7, #4]
 801d71a:	691a      	ldr	r2, [r3, #16]
 801d71c:	687b      	ldr	r3, [r7, #4]
 801d71e:	8a9b      	ldrh	r3, [r3, #20]
 801d720:	1c59      	adds	r1, r3, #1
 801d722:	b288      	uxth	r0, r1
 801d724:	6879      	ldr	r1, [r7, #4]
 801d726:	8288      	strh	r0, [r1, #20]
 801d728:	6839      	ldr	r1, [r7, #0]
 801d72a:	b2c9      	uxtb	r1, r1
 801d72c:	4413      	add	r3, r2
 801d72e:	460a      	mov	r2, r1
 801d730:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
}
 801d734:	bf00      	nop
 801d736:	370c      	adds	r7, #12
 801d738:	46bd      	mov	sp, r7
 801d73a:	bd90      	pop	{r4, r7, pc}
 801d73c:	08026db4 	.word	0x08026db4
 801d740:	0802700c 	.word	0x0802700c
 801d744:	08026e14 	.word	0x08026e14

0801d748 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
 801d748:	b580      	push	{r7, lr}
 801d74a:	b08e      	sub	sp, #56	@ 0x38
 801d74c:	af00      	add	r7, sp, #0
 801d74e:	6078      	str	r0, [r7, #4]
 801d750:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801d752:	2300      	movs	r3, #0
 801d754:	627b      	str	r3, [r7, #36]	@ 0x24
  int parse_sname_as_options = 0;
 801d756:	2300      	movs	r3, #0
 801d758:	623b      	str	r3, [r7, #32]

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801d75a:	2208      	movs	r2, #8
 801d75c:	2100      	movs	r1, #0
 801d75e:	48b3      	ldr	r0, [pc, #716]	@ (801da2c <dhcp_parse_reply+0x2e4>)
 801d760:	f004 fc68 	bl	8022034 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801d764:	683b      	ldr	r3, [r7, #0]
 801d766:	895b      	ldrh	r3, [r3, #10]
 801d768:	2b2b      	cmp	r3, #43	@ 0x2b
 801d76a:	d802      	bhi.n	801d772 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801d76c:	f06f 0301 	mvn.w	r3, #1
 801d770:	e26a      	b.n	801dc48 <dhcp_parse_reply+0x500>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 801d772:	683b      	ldr	r3, [r7, #0]
 801d774:	685a      	ldr	r2, [r3, #4]
 801d776:	687b      	ldr	r3, [r7, #4]
 801d778:	605a      	str	r2, [r3, #4]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801d77a:	23f0      	movs	r3, #240	@ 0xf0
 801d77c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801d77e:	683b      	ldr	r3, [r7, #0]
 801d780:	891b      	ldrh	r3, [r3, #8]
 801d782:	85bb      	strh	r3, [r7, #44]	@ 0x2c
again:
  q = p;
 801d784:	683b      	ldr	r3, [r7, #0]
 801d786:	62bb      	str	r3, [r7, #40]	@ 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 801d788:	e00c      	b.n	801d7a4 <dhcp_parse_reply+0x5c>
    options_idx -= q->len;
 801d78a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d78c:	895b      	ldrh	r3, [r3, #10]
 801d78e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801d790:	1ad3      	subs	r3, r2, r3
 801d792:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    options_idx_max -= q->len;
 801d794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d796:	895b      	ldrh	r3, [r3, #10]
 801d798:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 801d79a:	1ad3      	subs	r3, r2, r3
 801d79c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    q = q->next;
 801d79e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d7a0:	681b      	ldr	r3, [r3, #0]
 801d7a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 801d7a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d7a6:	2b00      	cmp	r3, #0
 801d7a8:	d004      	beq.n	801d7b4 <dhcp_parse_reply+0x6c>
 801d7aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d7ac:	895b      	ldrh	r3, [r3, #10]
 801d7ae:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801d7b0:	429a      	cmp	r2, r3
 801d7b2:	d2ea      	bcs.n	801d78a <dhcp_parse_reply+0x42>
  }
  if (q == NULL) {
 801d7b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d7b6:	2b00      	cmp	r3, #0
 801d7b8:	d102      	bne.n	801d7c0 <dhcp_parse_reply+0x78>
    return ERR_BUF;
 801d7ba:	f06f 0301 	mvn.w	r3, #1
 801d7be:	e243      	b.n	801dc48 <dhcp_parse_reply+0x500>
  }
  offset = options_idx;
 801d7c0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801d7c2:	867b      	strh	r3, [r7, #50]	@ 0x32
  offset_max = options_idx_max;
 801d7c4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801d7c6:	863b      	strh	r3, [r7, #48]	@ 0x30
  options = (u8_t*)q->payload;
 801d7c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d7ca:	685b      	ldr	r3, [r3, #4]
 801d7cc:	637b      	str	r3, [r7, #52]	@ 0x34
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801d7ce:	e1fb      	b.n	801dbc8 <dhcp_parse_reply+0x480>
    u8_t op = options[offset];
 801d7d0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801d7d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d7d4:	4413      	add	r3, r2
 801d7d6:	781b      	ldrb	r3, [r3, #0]
 801d7d8:	757b      	strb	r3, [r7, #21]
    u8_t len;
    u8_t decode_len = 0;
 801d7da:	2300      	movs	r3, #0
 801d7dc:	77bb      	strb	r3, [r7, #30]
    int decode_idx = -1;
 801d7de:	f04f 33ff 	mov.w	r3, #4294967295
 801d7e2:	61bb      	str	r3, [r7, #24]
    u16_t val_offset = offset + 2;
 801d7e4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801d7e6:	3302      	adds	r3, #2
 801d7e8:	82fb      	strh	r3, [r7, #22]
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801d7ea:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801d7ec:	3301      	adds	r3, #1
 801d7ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d7f0:	8952      	ldrh	r2, [r2, #10]
 801d7f2:	4293      	cmp	r3, r2
 801d7f4:	da06      	bge.n	801d804 <dhcp_parse_reply+0xbc>
      len = options[offset + 1];
 801d7f6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801d7f8:	3301      	adds	r3, #1
 801d7fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d7fc:	4413      	add	r3, r2
 801d7fe:	781b      	ldrb	r3, [r3, #0]
 801d800:	77fb      	strb	r3, [r7, #31]
 801d802:	e00a      	b.n	801d81a <dhcp_parse_reply+0xd2>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 801d804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d806:	681b      	ldr	r3, [r3, #0]
 801d808:	2b00      	cmp	r3, #0
 801d80a:	d004      	beq.n	801d816 <dhcp_parse_reply+0xce>
 801d80c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d80e:	681b      	ldr	r3, [r3, #0]
 801d810:	685b      	ldr	r3, [r3, #4]
 801d812:	781b      	ldrb	r3, [r3, #0]
 801d814:	e000      	b.n	801d818 <dhcp_parse_reply+0xd0>
 801d816:	2300      	movs	r3, #0
 801d818:	77fb      	strb	r3, [r7, #31]
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801d81a:	7ffb      	ldrb	r3, [r7, #31]
 801d81c:	77bb      	strb	r3, [r7, #30]
    switch(op) {
 801d81e:	7d7b      	ldrb	r3, [r7, #21]
 801d820:	2b3b      	cmp	r3, #59	@ 0x3b
 801d822:	f200 8121 	bhi.w	801da68 <dhcp_parse_reply+0x320>
 801d826:	a201      	add	r2, pc, #4	@ (adr r2, 801d82c <dhcp_parse_reply+0xe4>)
 801d828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d82c:	0801d91d 	.word	0x0801d91d
 801d830:	0801d92d 	.word	0x0801d92d
 801d834:	0801da69 	.word	0x0801da69
 801d838:	0801d94d 	.word	0x0801d94d
 801d83c:	0801da69 	.word	0x0801da69
 801d840:	0801da69 	.word	0x0801da69
 801d844:	0801da69 	.word	0x0801da69
 801d848:	0801da69 	.word	0x0801da69
 801d84c:	0801da69 	.word	0x0801da69
 801d850:	0801da69 	.word	0x0801da69
 801d854:	0801da69 	.word	0x0801da69
 801d858:	0801da69 	.word	0x0801da69
 801d85c:	0801da69 	.word	0x0801da69
 801d860:	0801da69 	.word	0x0801da69
 801d864:	0801da69 	.word	0x0801da69
 801d868:	0801da69 	.word	0x0801da69
 801d86c:	0801da69 	.word	0x0801da69
 801d870:	0801da69 	.word	0x0801da69
 801d874:	0801da69 	.word	0x0801da69
 801d878:	0801da69 	.word	0x0801da69
 801d87c:	0801da69 	.word	0x0801da69
 801d880:	0801da69 	.word	0x0801da69
 801d884:	0801da69 	.word	0x0801da69
 801d888:	0801da69 	.word	0x0801da69
 801d88c:	0801da69 	.word	0x0801da69
 801d890:	0801da69 	.word	0x0801da69
 801d894:	0801da69 	.word	0x0801da69
 801d898:	0801da69 	.word	0x0801da69
 801d89c:	0801da69 	.word	0x0801da69
 801d8a0:	0801da69 	.word	0x0801da69
 801d8a4:	0801da69 	.word	0x0801da69
 801d8a8:	0801da69 	.word	0x0801da69
 801d8ac:	0801da69 	.word	0x0801da69
 801d8b0:	0801da69 	.word	0x0801da69
 801d8b4:	0801da69 	.word	0x0801da69
 801d8b8:	0801da69 	.word	0x0801da69
 801d8bc:	0801da69 	.word	0x0801da69
 801d8c0:	0801da69 	.word	0x0801da69
 801d8c4:	0801da69 	.word	0x0801da69
 801d8c8:	0801da69 	.word	0x0801da69
 801d8cc:	0801da69 	.word	0x0801da69
 801d8d0:	0801da69 	.word	0x0801da69
 801d8d4:	0801da69 	.word	0x0801da69
 801d8d8:	0801da69 	.word	0x0801da69
 801d8dc:	0801da69 	.word	0x0801da69
 801d8e0:	0801da69 	.word	0x0801da69
 801d8e4:	0801da69 	.word	0x0801da69
 801d8e8:	0801da69 	.word	0x0801da69
 801d8ec:	0801da69 	.word	0x0801da69
 801d8f0:	0801da69 	.word	0x0801da69
 801d8f4:	0801da69 	.word	0x0801da69
 801d8f8:	0801d973 	.word	0x0801d973
 801d8fc:	0801d993 	.word	0x0801d993
 801d900:	0801d9cd 	.word	0x0801d9cd
 801d904:	0801d9ed 	.word	0x0801d9ed
 801d908:	0801da69 	.word	0x0801da69
 801d90c:	0801da69 	.word	0x0801da69
 801d910:	0801da69 	.word	0x0801da69
 801d914:	0801da0d 	.word	0x0801da0d
 801d918:	0801da49 	.word	0x0801da49
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801d91c:	2300      	movs	r3, #0
 801d91e:	77fb      	strb	r3, [r7, #31]
 801d920:	7ffb      	ldrb	r3, [r7, #31]
 801d922:	77bb      	strb	r3, [r7, #30]
        /* will be increased below */
        offset--;
 801d924:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801d926:	3b01      	subs	r3, #1
 801d928:	867b      	strh	r3, [r7, #50]	@ 0x32
        break;
 801d92a:	e0a0      	b.n	801da6e <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801d92c:	7ffb      	ldrb	r3, [r7, #31]
 801d92e:	2b04      	cmp	r3, #4
 801d930:	d009      	beq.n	801d946 <dhcp_parse_reply+0x1fe>
 801d932:	4b3f      	ldr	r3, [pc, #252]	@ (801da30 <dhcp_parse_reply+0x2e8>)
 801d934:	f240 52f6 	movw	r2, #1526	@ 0x5f6
 801d938:	493e      	ldr	r1, [pc, #248]	@ (801da34 <dhcp_parse_reply+0x2ec>)
 801d93a:	483f      	ldr	r0, [pc, #252]	@ (801da38 <dhcp_parse_reply+0x2f0>)
 801d93c:	f004 f9a4 	bl	8021c88 <iprintf>
 801d940:	f06f 0305 	mvn.w	r3, #5
 801d944:	e180      	b.n	801dc48 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801d946:	2306      	movs	r3, #6
 801d948:	61bb      	str	r3, [r7, #24]
        break;
 801d94a:	e090      	b.n	801da6e <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801d94c:	2304      	movs	r3, #4
 801d94e:	77bb      	strb	r3, [r7, #30]
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801d950:	7ffa      	ldrb	r2, [r7, #31]
 801d952:	7fbb      	ldrb	r3, [r7, #30]
 801d954:	429a      	cmp	r2, r3
 801d956:	d209      	bcs.n	801d96c <dhcp_parse_reply+0x224>
 801d958:	4b35      	ldr	r3, [pc, #212]	@ (801da30 <dhcp_parse_reply+0x2e8>)
 801d95a:	f240 52fb 	movw	r2, #1531	@ 0x5fb
 801d95e:	4937      	ldr	r1, [pc, #220]	@ (801da3c <dhcp_parse_reply+0x2f4>)
 801d960:	4835      	ldr	r0, [pc, #212]	@ (801da38 <dhcp_parse_reply+0x2f0>)
 801d962:	f004 f991 	bl	8021c88 <iprintf>
 801d966:	f06f 0305 	mvn.w	r3, #5
 801d96a:	e16d      	b.n	801dc48 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801d96c:	2307      	movs	r3, #7
 801d96e:	61bb      	str	r3, [r7, #24]
        break;
 801d970:	e07d      	b.n	801da6e <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801d972:	7ffb      	ldrb	r3, [r7, #31]
 801d974:	2b04      	cmp	r3, #4
 801d976:	d009      	beq.n	801d98c <dhcp_parse_reply+0x244>
 801d978:	4b2d      	ldr	r3, [pc, #180]	@ (801da30 <dhcp_parse_reply+0x2e8>)
 801d97a:	f240 6209 	movw	r2, #1545	@ 0x609
 801d97e:	492d      	ldr	r1, [pc, #180]	@ (801da34 <dhcp_parse_reply+0x2ec>)
 801d980:	482d      	ldr	r0, [pc, #180]	@ (801da38 <dhcp_parse_reply+0x2f0>)
 801d982:	f004 f981 	bl	8021c88 <iprintf>
 801d986:	f06f 0305 	mvn.w	r3, #5
 801d98a:	e15d      	b.n	801dc48 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801d98c:	2303      	movs	r3, #3
 801d98e:	61bb      	str	r3, [r7, #24]
        break;
 801d990:	e06d      	b.n	801da6e <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801d992:	7ffb      	ldrb	r3, [r7, #31]
 801d994:	2b01      	cmp	r3, #1
 801d996:	d009      	beq.n	801d9ac <dhcp_parse_reply+0x264>
 801d998:	4b25      	ldr	r3, [pc, #148]	@ (801da30 <dhcp_parse_reply+0x2e8>)
 801d99a:	f240 6217 	movw	r2, #1559	@ 0x617
 801d99e:	4928      	ldr	r1, [pc, #160]	@ (801da40 <dhcp_parse_reply+0x2f8>)
 801d9a0:	4825      	ldr	r0, [pc, #148]	@ (801da38 <dhcp_parse_reply+0x2f0>)
 801d9a2:	f004 f971 	bl	8021c88 <iprintf>
 801d9a6:	f06f 0305 	mvn.w	r3, #5
 801d9aa:	e14d      	b.n	801dc48 <dhcp_parse_reply+0x500>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801d9ac:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801d9ae:	2bf0      	cmp	r3, #240	@ 0xf0
 801d9b0:	d009      	beq.n	801d9c6 <dhcp_parse_reply+0x27e>
 801d9b2:	4b1f      	ldr	r3, [pc, #124]	@ (801da30 <dhcp_parse_reply+0x2e8>)
 801d9b4:	f240 6219 	movw	r2, #1561	@ 0x619
 801d9b8:	4922      	ldr	r1, [pc, #136]	@ (801da44 <dhcp_parse_reply+0x2fc>)
 801d9ba:	481f      	ldr	r0, [pc, #124]	@ (801da38 <dhcp_parse_reply+0x2f0>)
 801d9bc:	f004 f964 	bl	8021c88 <iprintf>
 801d9c0:	f06f 0305 	mvn.w	r3, #5
 801d9c4:	e140      	b.n	801dc48 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801d9c6:	2300      	movs	r3, #0
 801d9c8:	61bb      	str	r3, [r7, #24]
        break;
 801d9ca:	e050      	b.n	801da6e <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801d9cc:	7ffb      	ldrb	r3, [r7, #31]
 801d9ce:	2b01      	cmp	r3, #1
 801d9d0:	d009      	beq.n	801d9e6 <dhcp_parse_reply+0x29e>
 801d9d2:	4b17      	ldr	r3, [pc, #92]	@ (801da30 <dhcp_parse_reply+0x2e8>)
 801d9d4:	f240 621d 	movw	r2, #1565	@ 0x61d
 801d9d8:	4919      	ldr	r1, [pc, #100]	@ (801da40 <dhcp_parse_reply+0x2f8>)
 801d9da:	4817      	ldr	r0, [pc, #92]	@ (801da38 <dhcp_parse_reply+0x2f0>)
 801d9dc:	f004 f954 	bl	8021c88 <iprintf>
 801d9e0:	f06f 0305 	mvn.w	r3, #5
 801d9e4:	e130      	b.n	801dc48 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801d9e6:	2301      	movs	r3, #1
 801d9e8:	61bb      	str	r3, [r7, #24]
        break;
 801d9ea:	e040      	b.n	801da6e <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801d9ec:	7ffb      	ldrb	r3, [r7, #31]
 801d9ee:	2b04      	cmp	r3, #4
 801d9f0:	d009      	beq.n	801da06 <dhcp_parse_reply+0x2be>
 801d9f2:	4b0f      	ldr	r3, [pc, #60]	@ (801da30 <dhcp_parse_reply+0x2e8>)
 801d9f4:	f240 6221 	movw	r2, #1569	@ 0x621
 801d9f8:	490e      	ldr	r1, [pc, #56]	@ (801da34 <dhcp_parse_reply+0x2ec>)
 801d9fa:	480f      	ldr	r0, [pc, #60]	@ (801da38 <dhcp_parse_reply+0x2f0>)
 801d9fc:	f004 f944 	bl	8021c88 <iprintf>
 801da00:	f06f 0305 	mvn.w	r3, #5
 801da04:	e120      	b.n	801dc48 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801da06:	2302      	movs	r3, #2
 801da08:	61bb      	str	r3, [r7, #24]
        break;
 801da0a:	e030      	b.n	801da6e <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801da0c:	7ffb      	ldrb	r3, [r7, #31]
 801da0e:	2b04      	cmp	r3, #4
 801da10:	d009      	beq.n	801da26 <dhcp_parse_reply+0x2de>
 801da12:	4b07      	ldr	r3, [pc, #28]	@ (801da30 <dhcp_parse_reply+0x2e8>)
 801da14:	f240 6225 	movw	r2, #1573	@ 0x625
 801da18:	4906      	ldr	r1, [pc, #24]	@ (801da34 <dhcp_parse_reply+0x2ec>)
 801da1a:	4807      	ldr	r0, [pc, #28]	@ (801da38 <dhcp_parse_reply+0x2f0>)
 801da1c:	f004 f934 	bl	8021c88 <iprintf>
 801da20:	f06f 0305 	mvn.w	r3, #5
 801da24:	e110      	b.n	801dc48 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T1;
 801da26:	2304      	movs	r3, #4
 801da28:	61bb      	str	r3, [r7, #24]
        break;
 801da2a:	e020      	b.n	801da6e <dhcp_parse_reply+0x326>
 801da2c:	2000c0a0 	.word	0x2000c0a0
 801da30:	08026db4 	.word	0x08026db4
 801da34:	0802704c 	.word	0x0802704c
 801da38:	08026e14 	.word	0x08026e14
 801da3c:	08027058 	.word	0x08027058
 801da40:	0802706c 	.word	0x0802706c
 801da44:	08027078 	.word	0x08027078
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801da48:	7ffb      	ldrb	r3, [r7, #31]
 801da4a:	2b04      	cmp	r3, #4
 801da4c:	d009      	beq.n	801da62 <dhcp_parse_reply+0x31a>
 801da4e:	4b80      	ldr	r3, [pc, #512]	@ (801dc50 <dhcp_parse_reply+0x508>)
 801da50:	f240 6229 	movw	r2, #1577	@ 0x629
 801da54:	497f      	ldr	r1, [pc, #508]	@ (801dc54 <dhcp_parse_reply+0x50c>)
 801da56:	4880      	ldr	r0, [pc, #512]	@ (801dc58 <dhcp_parse_reply+0x510>)
 801da58:	f004 f916 	bl	8021c88 <iprintf>
 801da5c:	f06f 0305 	mvn.w	r3, #5
 801da60:	e0f2      	b.n	801dc48 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T2;
 801da62:	2305      	movs	r3, #5
 801da64:	61bb      	str	r3, [r7, #24]
        break;
 801da66:	e002      	b.n	801da6e <dhcp_parse_reply+0x326>
      default:
        decode_len = 0;
 801da68:	2300      	movs	r3, #0
 801da6a:	77bb      	strb	r3, [r7, #30]
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        break;
 801da6c:	bf00      	nop
    }
    offset += len + 2;
 801da6e:	7ffb      	ldrb	r3, [r7, #31]
 801da70:	b29a      	uxth	r2, r3
 801da72:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801da74:	4413      	add	r3, r2
 801da76:	b29b      	uxth	r3, r3
 801da78:	3302      	adds	r3, #2
 801da7a:	867b      	strh	r3, [r7, #50]	@ 0x32
    if (decode_len > 0) {
 801da7c:	7fbb      	ldrb	r3, [r7, #30]
 801da7e:	2b00      	cmp	r3, #0
 801da80:	d079      	beq.n	801db76 <dhcp_parse_reply+0x42e>
      u32_t value = 0;
 801da82:	2300      	movs	r3, #0
 801da84:	60bb      	str	r3, [r7, #8]
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801da86:	69bb      	ldr	r3, [r7, #24]
 801da88:	2b00      	cmp	r3, #0
 801da8a:	db02      	blt.n	801da92 <dhcp_parse_reply+0x34a>
 801da8c:	69bb      	ldr	r3, [r7, #24]
 801da8e:	2b07      	cmp	r3, #7
 801da90:	dd06      	ble.n	801daa0 <dhcp_parse_reply+0x358>
 801da92:	4b6f      	ldr	r3, [pc, #444]	@ (801dc50 <dhcp_parse_reply+0x508>)
 801da94:	f240 6236 	movw	r2, #1590	@ 0x636
 801da98:	4970      	ldr	r1, [pc, #448]	@ (801dc5c <dhcp_parse_reply+0x514>)
 801da9a:	486f      	ldr	r0, [pc, #444]	@ (801dc58 <dhcp_parse_reply+0x510>)
 801da9c:	f004 f8f4 	bl	8021c88 <iprintf>
      if (!dhcp_option_given(dhcp, decode_idx)) {
 801daa0:	4a6f      	ldr	r2, [pc, #444]	@ (801dc60 <dhcp_parse_reply+0x518>)
 801daa2:	69bb      	ldr	r3, [r7, #24]
 801daa4:	4413      	add	r3, r2
 801daa6:	781b      	ldrb	r3, [r3, #0]
 801daa8:	2b00      	cmp	r3, #0
 801daaa:	d164      	bne.n	801db76 <dhcp_parse_reply+0x42e>
        copy_len = LWIP_MIN(decode_len, 4);
 801daac:	7fbb      	ldrb	r3, [r7, #30]
 801daae:	2b04      	cmp	r3, #4
 801dab0:	bf28      	it	cs
 801dab2:	2304      	movcs	r3, #4
 801dab4:	b2db      	uxtb	r3, r3
 801dab6:	827b      	strh	r3, [r7, #18]
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801dab8:	8afb      	ldrh	r3, [r7, #22]
 801daba:	8a7a      	ldrh	r2, [r7, #18]
 801dabc:	f107 0108 	add.w	r1, r7, #8
 801dac0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801dac2:	f7f8 faed 	bl	80160a0 <pbuf_copy_partial>
 801dac6:	4603      	mov	r3, r0
 801dac8:	461a      	mov	r2, r3
 801daca:	8a7b      	ldrh	r3, [r7, #18]
 801dacc:	4293      	cmp	r3, r2
 801dace:	d002      	beq.n	801dad6 <dhcp_parse_reply+0x38e>
          return ERR_BUF;
 801dad0:	f06f 0301 	mvn.w	r3, #1
 801dad4:	e0b8      	b.n	801dc48 <dhcp_parse_reply+0x500>
        }
        if (decode_len > 4) {
 801dad6:	7fbb      	ldrb	r3, [r7, #30]
 801dad8:	2b04      	cmp	r3, #4
 801dada:	d927      	bls.n	801db2c <dhcp_parse_reply+0x3e4>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801dadc:	7fbb      	ldrb	r3, [r7, #30]
 801dade:	f003 0303 	and.w	r3, r3, #3
 801dae2:	b2db      	uxtb	r3, r3
 801dae4:	2b00      	cmp	r3, #0
 801dae6:	d009      	beq.n	801dafc <dhcp_parse_reply+0x3b4>
 801dae8:	4b59      	ldr	r3, [pc, #356]	@ (801dc50 <dhcp_parse_reply+0x508>)
 801daea:	f240 623e 	movw	r2, #1598	@ 0x63e
 801daee:	495d      	ldr	r1, [pc, #372]	@ (801dc64 <dhcp_parse_reply+0x51c>)
 801daf0:	4859      	ldr	r0, [pc, #356]	@ (801dc58 <dhcp_parse_reply+0x510>)
 801daf2:	f004 f8c9 	bl	8021c88 <iprintf>
 801daf6:	f06f 0305 	mvn.w	r3, #5
 801dafa:	e0a5      	b.n	801dc48 <dhcp_parse_reply+0x500>
          dhcp_got_option(dhcp, decode_idx);
 801dafc:	4a58      	ldr	r2, [pc, #352]	@ (801dc60 <dhcp_parse_reply+0x518>)
 801dafe:	69bb      	ldr	r3, [r7, #24]
 801db00:	4413      	add	r3, r2
 801db02:	2201      	movs	r2, #1
 801db04:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801db06:	68bb      	ldr	r3, [r7, #8]
 801db08:	4618      	mov	r0, r3
 801db0a:	f7f6 fe80 	bl	801480e <lwip_htonl>
 801db0e:	4602      	mov	r2, r0
 801db10:	4955      	ldr	r1, [pc, #340]	@ (801dc68 <dhcp_parse_reply+0x520>)
 801db12:	69bb      	ldr	r3, [r7, #24]
 801db14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
          decode_len -= 4;
 801db18:	7fbb      	ldrb	r3, [r7, #30]
 801db1a:	3b04      	subs	r3, #4
 801db1c:	77bb      	strb	r3, [r7, #30]
          val_offset += 4;
 801db1e:	8afb      	ldrh	r3, [r7, #22]
 801db20:	3304      	adds	r3, #4
 801db22:	82fb      	strh	r3, [r7, #22]
          decode_idx++;
 801db24:	69bb      	ldr	r3, [r7, #24]
 801db26:	3301      	adds	r3, #1
 801db28:	61bb      	str	r3, [r7, #24]
          goto decode_next;
 801db2a:	e7ac      	b.n	801da86 <dhcp_parse_reply+0x33e>
        } else if (decode_len == 4) {
 801db2c:	7fbb      	ldrb	r3, [r7, #30]
 801db2e:	2b04      	cmp	r3, #4
 801db30:	d106      	bne.n	801db40 <dhcp_parse_reply+0x3f8>
          value = lwip_ntohl(value);
 801db32:	68bb      	ldr	r3, [r7, #8]
 801db34:	4618      	mov	r0, r3
 801db36:	f7f6 fe6a 	bl	801480e <lwip_htonl>
 801db3a:	4603      	mov	r3, r0
 801db3c:	60bb      	str	r3, [r7, #8]
 801db3e:	e010      	b.n	801db62 <dhcp_parse_reply+0x41a>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801db40:	7fbb      	ldrb	r3, [r7, #30]
 801db42:	2b01      	cmp	r3, #1
 801db44:	d009      	beq.n	801db5a <dhcp_parse_reply+0x412>
 801db46:	4b42      	ldr	r3, [pc, #264]	@ (801dc50 <dhcp_parse_reply+0x508>)
 801db48:	f44f 62c9 	mov.w	r2, #1608	@ 0x648
 801db4c:	4947      	ldr	r1, [pc, #284]	@ (801dc6c <dhcp_parse_reply+0x524>)
 801db4e:	4842      	ldr	r0, [pc, #264]	@ (801dc58 <dhcp_parse_reply+0x510>)
 801db50:	f004 f89a 	bl	8021c88 <iprintf>
 801db54:	f06f 0305 	mvn.w	r3, #5
 801db58:	e076      	b.n	801dc48 <dhcp_parse_reply+0x500>
          value = ((u8_t*)&value)[0];
 801db5a:	f107 0308 	add.w	r3, r7, #8
 801db5e:	781b      	ldrb	r3, [r3, #0]
 801db60:	60bb      	str	r3, [r7, #8]
        }
        dhcp_got_option(dhcp, decode_idx);
 801db62:	4a3f      	ldr	r2, [pc, #252]	@ (801dc60 <dhcp_parse_reply+0x518>)
 801db64:	69bb      	ldr	r3, [r7, #24]
 801db66:	4413      	add	r3, r2
 801db68:	2201      	movs	r2, #1
 801db6a:	701a      	strb	r2, [r3, #0]
        dhcp_set_option_value(dhcp, decode_idx, value);
 801db6c:	68ba      	ldr	r2, [r7, #8]
 801db6e:	493e      	ldr	r1, [pc, #248]	@ (801dc68 <dhcp_parse_reply+0x520>)
 801db70:	69bb      	ldr	r3, [r7, #24]
 801db72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      }
    }
    if (offset >= q->len) {
 801db76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801db78:	895b      	ldrh	r3, [r3, #10]
 801db7a:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 801db7c:	429a      	cmp	r2, r3
 801db7e:	d323      	bcc.n	801dbc8 <dhcp_parse_reply+0x480>
      offset -= q->len;
 801db80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801db82:	895b      	ldrh	r3, [r3, #10]
 801db84:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 801db86:	1ad3      	subs	r3, r2, r3
 801db88:	867b      	strh	r3, [r7, #50]	@ 0x32
      offset_max -= q->len;
 801db8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801db8c:	895b      	ldrh	r3, [r3, #10]
 801db8e:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 801db90:	1ad3      	subs	r3, r2, r3
 801db92:	863b      	strh	r3, [r7, #48]	@ 0x30
      if ((offset < offset_max) && offset_max) {
 801db94:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 801db96:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801db98:	429a      	cmp	r2, r3
 801db9a:	d223      	bcs.n	801dbe4 <dhcp_parse_reply+0x49c>
 801db9c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801db9e:	2b00      	cmp	r3, #0
 801dba0:	d020      	beq.n	801dbe4 <dhcp_parse_reply+0x49c>
        q = q->next;
 801dba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dba4:	681b      	ldr	r3, [r3, #0]
 801dba6:	62bb      	str	r3, [r7, #40]	@ 0x28
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801dba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dbaa:	2b00      	cmp	r3, #0
 801dbac:	d109      	bne.n	801dbc2 <dhcp_parse_reply+0x47a>
 801dbae:	4b28      	ldr	r3, [pc, #160]	@ (801dc50 <dhcp_parse_reply+0x508>)
 801dbb0:	f240 6254 	movw	r2, #1620	@ 0x654
 801dbb4:	492e      	ldr	r1, [pc, #184]	@ (801dc70 <dhcp_parse_reply+0x528>)
 801dbb6:	4828      	ldr	r0, [pc, #160]	@ (801dc58 <dhcp_parse_reply+0x510>)
 801dbb8:	f004 f866 	bl	8021c88 <iprintf>
 801dbbc:	f06f 0305 	mvn.w	r3, #5
 801dbc0:	e042      	b.n	801dc48 <dhcp_parse_reply+0x500>
        options = (u8_t*)q->payload;
 801dbc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dbc4:	685b      	ldr	r3, [r3, #4]
 801dbc6:	637b      	str	r3, [r7, #52]	@ 0x34
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801dbc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dbca:	2b00      	cmp	r3, #0
 801dbcc:	d00a      	beq.n	801dbe4 <dhcp_parse_reply+0x49c>
 801dbce:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 801dbd0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801dbd2:	429a      	cmp	r2, r3
 801dbd4:	d206      	bcs.n	801dbe4 <dhcp_parse_reply+0x49c>
 801dbd6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801dbd8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801dbda:	4413      	add	r3, r2
 801dbdc:	781b      	ldrb	r3, [r3, #0]
 801dbde:	2bff      	cmp	r3, #255	@ 0xff
 801dbe0:	f47f adf6 	bne.w	801d7d0 <dhcp_parse_reply+0x88>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801dbe4:	4b1e      	ldr	r3, [pc, #120]	@ (801dc60 <dhcp_parse_reply+0x518>)
 801dbe6:	781b      	ldrb	r3, [r3, #0]
 801dbe8:	2b00      	cmp	r3, #0
 801dbea:	d018      	beq.n	801dc1e <dhcp_parse_reply+0x4d6>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801dbec:	4b1e      	ldr	r3, [pc, #120]	@ (801dc68 <dhcp_parse_reply+0x520>)
 801dbee:	681b      	ldr	r3, [r3, #0]
 801dbf0:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801dbf2:	4b1b      	ldr	r3, [pc, #108]	@ (801dc60 <dhcp_parse_reply+0x518>)
 801dbf4:	2200      	movs	r2, #0
 801dbf6:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801dbf8:	68fb      	ldr	r3, [r7, #12]
 801dbfa:	2b01      	cmp	r3, #1
 801dbfc:	d102      	bne.n	801dc04 <dhcp_parse_reply+0x4bc>
      parse_file_as_options = 1;
 801dbfe:	2301      	movs	r3, #1
 801dc00:	627b      	str	r3, [r7, #36]	@ 0x24
 801dc02:	e00c      	b.n	801dc1e <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801dc04:	68fb      	ldr	r3, [r7, #12]
 801dc06:	2b02      	cmp	r3, #2
 801dc08:	d102      	bne.n	801dc10 <dhcp_parse_reply+0x4c8>
      parse_sname_as_options = 1;
 801dc0a:	2301      	movs	r3, #1
 801dc0c:	623b      	str	r3, [r7, #32]
 801dc0e:	e006      	b.n	801dc1e <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801dc10:	68fb      	ldr	r3, [r7, #12]
 801dc12:	2b03      	cmp	r3, #3
 801dc14:	d103      	bne.n	801dc1e <dhcp_parse_reply+0x4d6>
      parse_sname_as_options = 1;
 801dc16:	2301      	movs	r3, #1
 801dc18:	623b      	str	r3, [r7, #32]
      parse_file_as_options = 1;
 801dc1a:	2301      	movs	r3, #1
 801dc1c:	627b      	str	r3, [r7, #36]	@ 0x24
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
 801dc1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dc20:	2b00      	cmp	r3, #0
 801dc22:	d006      	beq.n	801dc32 <dhcp_parse_reply+0x4ea>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801dc24:	2300      	movs	r3, #0
 801dc26:	627b      	str	r3, [r7, #36]	@ 0x24
    options_idx = DHCP_FILE_OFS;
 801dc28:	236c      	movs	r3, #108	@ 0x6c
 801dc2a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801dc2c:	23ec      	movs	r3, #236	@ 0xec
 801dc2e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    goto again;
 801dc30:	e5a8      	b.n	801d784 <dhcp_parse_reply+0x3c>
  } else if (parse_sname_as_options) {
 801dc32:	6a3b      	ldr	r3, [r7, #32]
 801dc34:	2b00      	cmp	r3, #0
 801dc36:	d006      	beq.n	801dc46 <dhcp_parse_reply+0x4fe>
    parse_sname_as_options = 0;
 801dc38:	2300      	movs	r3, #0
 801dc3a:	623b      	str	r3, [r7, #32]
    options_idx = DHCP_SNAME_OFS;
 801dc3c:	232c      	movs	r3, #44	@ 0x2c
 801dc3e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801dc40:	236c      	movs	r3, #108	@ 0x6c
 801dc42:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    goto again;
 801dc44:	e59e      	b.n	801d784 <dhcp_parse_reply+0x3c>
  }
  return ERR_OK;
 801dc46:	2300      	movs	r3, #0
}
 801dc48:	4618      	mov	r0, r3
 801dc4a:	3738      	adds	r7, #56	@ 0x38
 801dc4c:	46bd      	mov	sp, r7
 801dc4e:	bd80      	pop	{r7, pc}
 801dc50:	08026db4 	.word	0x08026db4
 801dc54:	0802704c 	.word	0x0802704c
 801dc58:	08026e14 	.word	0x08026e14
 801dc5c:	08027090 	.word	0x08027090
 801dc60:	2000c0a0 	.word	0x2000c0a0
 801dc64:	080270a4 	.word	0x080270a4
 801dc68:	2000c080 	.word	0x2000c080
 801dc6c:	080270bc 	.word	0x080270bc
 801dc70:	080270d0 	.word	0x080270d0

0801dc74 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801dc74:	b580      	push	{r7, lr}
 801dc76:	b08a      	sub	sp, #40	@ 0x28
 801dc78:	af00      	add	r7, sp, #0
 801dc7a:	60f8      	str	r0, [r7, #12]
 801dc7c:	60b9      	str	r1, [r7, #8]
 801dc7e:	607a      	str	r2, [r7, #4]
 801dc80:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801dc82:	4b69      	ldr	r3, [pc, #420]	@ (801de28 <dhcp_recv+0x1b4>)
 801dc84:	685b      	ldr	r3, [r3, #4]
 801dc86:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801dc88:	6a3b      	ldr	r3, [r7, #32]
 801dc8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801dc8c:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801dc8e:	687b      	ldr	r3, [r7, #4]
 801dc90:	685b      	ldr	r3, [r3, #4]
 801dc92:	61bb      	str	r3, [r7, #24]
  u8_t i;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801dc94:	69fb      	ldr	r3, [r7, #28]
 801dc96:	2b00      	cmp	r3, #0
 801dc98:	f000 80a9 	beq.w	801ddee <dhcp_recv+0x17a>
 801dc9c:	69fb      	ldr	r3, [r7, #28]
 801dc9e:	7a1b      	ldrb	r3, [r3, #8]
 801dca0:	2b00      	cmp	r3, #0
 801dca2:	f000 80a4 	beq.w	801ddee <dhcp_recv+0x17a>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 801dca6:	69fb      	ldr	r3, [r7, #28]
 801dca8:	685b      	ldr	r3, [r3, #4]
 801dcaa:	2b00      	cmp	r3, #0
 801dcac:	d006      	beq.n	801dcbc <dhcp_recv+0x48>
 801dcae:	4b5f      	ldr	r3, [pc, #380]	@ (801de2c <dhcp_recv+0x1b8>)
 801dcb0:	f44f 62d5 	mov.w	r2, #1704	@ 0x6a8
 801dcb4:	495e      	ldr	r1, [pc, #376]	@ (801de30 <dhcp_recv+0x1bc>)
 801dcb6:	485f      	ldr	r0, [pc, #380]	@ (801de34 <dhcp_recv+0x1c0>)
 801dcb8:	f003 ffe6 	bl	8021c88 <iprintf>

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801dcbc:	687b      	ldr	r3, [r7, #4]
 801dcbe:	895b      	ldrh	r3, [r3, #10]
 801dcc0:	2b2b      	cmp	r3, #43	@ 0x2b
 801dcc2:	f240 8096 	bls.w	801ddf2 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801dcc6:	69bb      	ldr	r3, [r7, #24]
 801dcc8:	781b      	ldrb	r3, [r3, #0]
 801dcca:	2b02      	cmp	r3, #2
 801dccc:	f040 8093 	bne.w	801ddf6 <dhcp_recv+0x182>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 801dcd0:	2300      	movs	r3, #0
 801dcd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801dcd6:	e012      	b.n	801dcfe <dhcp_recv+0x8a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801dcd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801dcdc:	6a3a      	ldr	r2, [r7, #32]
 801dcde:	4413      	add	r3, r2
 801dce0:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 801dce4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801dce8:	69b9      	ldr	r1, [r7, #24]
 801dcea:	440b      	add	r3, r1
 801dcec:	7f1b      	ldrb	r3, [r3, #28]
 801dcee:	429a      	cmp	r2, r3
 801dcf0:	f040 8083 	bne.w	801ddfa <dhcp_recv+0x186>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 801dcf4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801dcf8:	3301      	adds	r3, #1
 801dcfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801dcfe:	6a3b      	ldr	r3, [r7, #32]
 801dd00:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801dd04:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801dd08:	429a      	cmp	r2, r3
 801dd0a:	d207      	bcs.n	801dd1c <dhcp_recv+0xa8>
 801dd0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801dd10:	2b05      	cmp	r3, #5
 801dd12:	d803      	bhi.n	801dd1c <dhcp_recv+0xa8>
 801dd14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801dd18:	2b0f      	cmp	r3, #15
 801dd1a:	d9dd      	bls.n	801dcd8 <dhcp_recv+0x64>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801dd1c:	69bb      	ldr	r3, [r7, #24]
 801dd1e:	685b      	ldr	r3, [r3, #4]
 801dd20:	4618      	mov	r0, r3
 801dd22:	f7f6 fd74 	bl	801480e <lwip_htonl>
 801dd26:	4602      	mov	r2, r0
 801dd28:	69fb      	ldr	r3, [r7, #28]
 801dd2a:	681b      	ldr	r3, [r3, #0]
 801dd2c:	429a      	cmp	r2, r3
 801dd2e:	d166      	bne.n	801ddfe <dhcp_recv+0x18a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",lwip_ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
 801dd30:	6879      	ldr	r1, [r7, #4]
 801dd32:	69f8      	ldr	r0, [r7, #28]
 801dd34:	f7ff fd08 	bl	801d748 <dhcp_parse_reply>
 801dd38:	4603      	mov	r3, r0
 801dd3a:	2b00      	cmp	r3, #0
 801dd3c:	d161      	bne.n	801de02 <dhcp_recv+0x18e>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801dd3e:	4b3e      	ldr	r3, [pc, #248]	@ (801de38 <dhcp_recv+0x1c4>)
 801dd40:	785b      	ldrb	r3, [r3, #1]
 801dd42:	2b00      	cmp	r3, #0
 801dd44:	d05f      	beq.n	801de06 <dhcp_recv+0x192>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801dd46:	4b3d      	ldr	r3, [pc, #244]	@ (801de3c <dhcp_recv+0x1c8>)
 801dd48:	685b      	ldr	r3, [r3, #4]
 801dd4a:	75fb      	strb	r3, [r7, #23]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801dd4c:	7dfb      	ldrb	r3, [r7, #23]
 801dd4e:	2b05      	cmp	r3, #5
 801dd50:	d128      	bne.n	801dda4 <dhcp_recv+0x130>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801dd52:	69fb      	ldr	r3, [r7, #28]
 801dd54:	7a5b      	ldrb	r3, [r3, #9]
 801dd56:	2b01      	cmp	r3, #1
 801dd58:	d111      	bne.n	801dd7e <dhcp_recv+0x10a>
      dhcp_handle_ack(netif);
 801dd5a:	6a38      	ldr	r0, [r7, #32]
 801dd5c:	f7fe fea0 	bl	801caa0 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801dd60:	6a3b      	ldr	r3, [r7, #32]
 801dd62:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801dd66:	f003 0308 	and.w	r3, r3, #8
 801dd6a:	2b00      	cmp	r3, #0
 801dd6c:	d003      	beq.n	801dd76 <dhcp_recv+0x102>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801dd6e:	6a38      	ldr	r0, [r7, #32]
 801dd70:	f7fe fc68 	bl	801c644 <dhcp_check>
 801dd74:	e04a      	b.n	801de0c <dhcp_recv+0x198>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801dd76:	6a38      	ldr	r0, [r7, #32]
 801dd78:	f7ff f8a0 	bl	801cebc <dhcp_bind>
 801dd7c:	e046      	b.n	801de0c <dhcp_recv+0x198>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801dd7e:	69fb      	ldr	r3, [r7, #28]
 801dd80:	7a5b      	ldrb	r3, [r3, #9]
 801dd82:	2b03      	cmp	r3, #3
 801dd84:	d007      	beq.n	801dd96 <dhcp_recv+0x122>
 801dd86:	69fb      	ldr	r3, [r7, #28]
 801dd88:	7a5b      	ldrb	r3, [r3, #9]
 801dd8a:	2b04      	cmp	r3, #4
 801dd8c:	d003      	beq.n	801dd96 <dhcp_recv+0x122>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801dd8e:	69fb      	ldr	r3, [r7, #28]
 801dd90:	7a5b      	ldrb	r3, [r3, #9]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801dd92:	2b05      	cmp	r3, #5
 801dd94:	d13a      	bne.n	801de0c <dhcp_recv+0x198>
      dhcp_handle_ack(netif);
 801dd96:	6a38      	ldr	r0, [r7, #32]
 801dd98:	f7fe fe82 	bl	801caa0 <dhcp_handle_ack>
      dhcp_bind(netif);
 801dd9c:	6a38      	ldr	r0, [r7, #32]
 801dd9e:	f7ff f88d 	bl	801cebc <dhcp_bind>
 801dda2:	e033      	b.n	801de0c <dhcp_recv+0x198>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801dda4:	7dfb      	ldrb	r3, [r7, #23]
 801dda6:	2b06      	cmp	r3, #6
 801dda8:	d113      	bne.n	801ddd2 <dhcp_recv+0x15e>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801ddaa:	69fb      	ldr	r3, [r7, #28]
 801ddac:	7a5b      	ldrb	r3, [r3, #9]
  else if ((msg_type == DHCP_NAK) &&
 801ddae:	2b03      	cmp	r3, #3
 801ddb0:	d00b      	beq.n	801ddca <dhcp_recv+0x156>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801ddb2:	69fb      	ldr	r3, [r7, #28]
 801ddb4:	7a5b      	ldrb	r3, [r3, #9]
 801ddb6:	2b01      	cmp	r3, #1
 801ddb8:	d007      	beq.n	801ddca <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801ddba:	69fb      	ldr	r3, [r7, #28]
 801ddbc:	7a5b      	ldrb	r3, [r3, #9]
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801ddbe:	2b04      	cmp	r3, #4
 801ddc0:	d003      	beq.n	801ddca <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801ddc2:	69fb      	ldr	r3, [r7, #28]
 801ddc4:	7a5b      	ldrb	r3, [r3, #9]
 801ddc6:	2b05      	cmp	r3, #5
 801ddc8:	d103      	bne.n	801ddd2 <dhcp_recv+0x15e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801ddca:	6a38      	ldr	r0, [r7, #32]
 801ddcc:	f7fe fc20 	bl	801c610 <dhcp_handle_nak>
 801ddd0:	e01c      	b.n	801de0c <dhcp_recv+0x198>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801ddd2:	7dfb      	ldrb	r3, [r7, #23]
 801ddd4:	2b02      	cmp	r3, #2
 801ddd6:	d118      	bne.n	801de0a <dhcp_recv+0x196>
 801ddd8:	69fb      	ldr	r3, [r7, #28]
 801ddda:	7a5b      	ldrb	r3, [r3, #9]
 801dddc:	2b06      	cmp	r3, #6
 801ddde:	d114      	bne.n	801de0a <dhcp_recv+0x196>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    dhcp->request_timeout = 0;
 801dde0:	69fb      	ldr	r3, [r7, #28]
 801dde2:	2200      	movs	r2, #0
 801dde4:	82da      	strh	r2, [r3, #22]
    /* remember offered lease */
    dhcp_handle_offer(netif);
 801dde6:	6a38      	ldr	r0, [r7, #32]
 801dde8:	f7fe fc60 	bl	801c6ac <dhcp_handle_offer>
 801ddec:	e00e      	b.n	801de0c <dhcp_recv+0x198>
    goto free_pbuf_and_return;
 801ddee:	bf00      	nop
 801ddf0:	e00c      	b.n	801de0c <dhcp_recv+0x198>
    goto free_pbuf_and_return;
 801ddf2:	bf00      	nop
 801ddf4:	e00a      	b.n	801de0c <dhcp_recv+0x198>
    goto free_pbuf_and_return;
 801ddf6:	bf00      	nop
 801ddf8:	e008      	b.n	801de0c <dhcp_recv+0x198>
      goto free_pbuf_and_return;
 801ddfa:	bf00      	nop
 801ddfc:	e006      	b.n	801de0c <dhcp_recv+0x198>
    goto free_pbuf_and_return;
 801ddfe:	bf00      	nop
 801de00:	e004      	b.n	801de0c <dhcp_recv+0x198>
    goto free_pbuf_and_return;
 801de02:	bf00      	nop
 801de04:	e002      	b.n	801de0c <dhcp_recv+0x198>
    goto free_pbuf_and_return;
 801de06:	bf00      	nop
 801de08:	e000      	b.n	801de0c <dhcp_recv+0x198>
  }

free_pbuf_and_return:
 801de0a:	bf00      	nop
  if (dhcp != NULL) {
 801de0c:	69fb      	ldr	r3, [r7, #28]
 801de0e:	2b00      	cmp	r3, #0
 801de10:	d002      	beq.n	801de18 <dhcp_recv+0x1a4>
    dhcp->msg_in = NULL;
 801de12:	69fb      	ldr	r3, [r7, #28]
 801de14:	2200      	movs	r2, #0
 801de16:	605a      	str	r2, [r3, #4]
  }
  pbuf_free(p);
 801de18:	6878      	ldr	r0, [r7, #4]
 801de1a:	f7f7 ff43 	bl	8015ca4 <pbuf_free>
}
 801de1e:	bf00      	nop
 801de20:	3728      	adds	r7, #40	@ 0x28
 801de22:	46bd      	mov	sp, r7
 801de24:	bd80      	pop	{r7, pc}
 801de26:	bf00      	nop
 801de28:	200088a0 	.word	0x200088a0
 801de2c:	08026db4 	.word	0x08026db4
 801de30:	08026ee0 	.word	0x08026ee0
 801de34:	08026e14 	.word	0x08026e14
 801de38:	2000c0a0 	.word	0x2000c0a0
 801de3c:	2000c080 	.word	0x2000c080

0801de40 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 801de40:	b590      	push	{r4, r7, lr}
 801de42:	b087      	sub	sp, #28
 801de44:	af00      	add	r7, sp, #0
 801de46:	60f8      	str	r0, [r7, #12]
 801de48:	60b9      	str	r1, [r7, #8]
 801de4a:	4613      	mov	r3, r2
 801de4c:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 801de4e:	68fb      	ldr	r3, [r7, #12]
 801de50:	2b00      	cmp	r3, #0
 801de52:	d109      	bne.n	801de68 <dhcp_create_msg+0x28>
 801de54:	4ba3      	ldr	r3, [pc, #652]	@ (801e0e4 <dhcp_create_msg+0x2a4>)
 801de56:	f240 721d 	movw	r2, #1821	@ 0x71d
 801de5a:	49a3      	ldr	r1, [pc, #652]	@ (801e0e8 <dhcp_create_msg+0x2a8>)
 801de5c:	48a3      	ldr	r0, [pc, #652]	@ (801e0ec <dhcp_create_msg+0x2ac>)
 801de5e:	f003 ff13 	bl	8021c88 <iprintf>
 801de62:	f06f 030f 	mvn.w	r3, #15
 801de66:	e138      	b.n	801e0da <dhcp_create_msg+0x29a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801de68:	68bb      	ldr	r3, [r7, #8]
 801de6a:	2b00      	cmp	r3, #0
 801de6c:	d109      	bne.n	801de82 <dhcp_create_msg+0x42>
 801de6e:	4b9d      	ldr	r3, [pc, #628]	@ (801e0e4 <dhcp_create_msg+0x2a4>)
 801de70:	f240 721e 	movw	r2, #1822	@ 0x71e
 801de74:	499e      	ldr	r1, [pc, #632]	@ (801e0f0 <dhcp_create_msg+0x2b0>)
 801de76:	489d      	ldr	r0, [pc, #628]	@ (801e0ec <dhcp_create_msg+0x2ac>)
 801de78:	f003 ff06 	bl	8021c88 <iprintf>
 801de7c:	f06f 0305 	mvn.w	r3, #5
 801de80:	e12b      	b.n	801e0da <dhcp_create_msg+0x29a>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 801de82:	68bb      	ldr	r3, [r7, #8]
 801de84:	68db      	ldr	r3, [r3, #12]
 801de86:	2b00      	cmp	r3, #0
 801de88:	d006      	beq.n	801de98 <dhcp_create_msg+0x58>
 801de8a:	4b96      	ldr	r3, [pc, #600]	@ (801e0e4 <dhcp_create_msg+0x2a4>)
 801de8c:	f240 721f 	movw	r2, #1823	@ 0x71f
 801de90:	4998      	ldr	r1, [pc, #608]	@ (801e0f4 <dhcp_create_msg+0x2b4>)
 801de92:	4896      	ldr	r0, [pc, #600]	@ (801e0ec <dhcp_create_msg+0x2ac>)
 801de94:	f003 fef8 	bl	8021c88 <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 801de98:	68bb      	ldr	r3, [r7, #8]
 801de9a:	691b      	ldr	r3, [r3, #16]
 801de9c:	2b00      	cmp	r3, #0
 801de9e:	d006      	beq.n	801deae <dhcp_create_msg+0x6e>
 801dea0:	4b90      	ldr	r3, [pc, #576]	@ (801e0e4 <dhcp_create_msg+0x2a4>)
 801dea2:	f44f 62e4 	mov.w	r2, #1824	@ 0x720
 801dea6:	4994      	ldr	r1, [pc, #592]	@ (801e0f8 <dhcp_create_msg+0x2b8>)
 801dea8:	4890      	ldr	r0, [pc, #576]	@ (801e0ec <dhcp_create_msg+0x2ac>)
 801deaa:	f003 feed 	bl	8021c88 <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801deae:	2200      	movs	r2, #0
 801deb0:	f44f 719a 	mov.w	r1, #308	@ 0x134
 801deb4:	2000      	movs	r0, #0
 801deb6:	f7f7 fb7d 	bl	80155b4 <pbuf_alloc>
 801deba:	4602      	mov	r2, r0
 801debc:	68bb      	ldr	r3, [r7, #8]
 801debe:	60da      	str	r2, [r3, #12]
  if (dhcp->p_out == NULL) {
 801dec0:	68bb      	ldr	r3, [r7, #8]
 801dec2:	68db      	ldr	r3, [r3, #12]
 801dec4:	2b00      	cmp	r3, #0
 801dec6:	d102      	bne.n	801dece <dhcp_create_msg+0x8e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
 801dec8:	f04f 33ff 	mov.w	r3, #4294967295
 801decc:	e105      	b.n	801e0da <dhcp_create_msg+0x29a>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801dece:	68bb      	ldr	r3, [r7, #8]
 801ded0:	68db      	ldr	r3, [r3, #12]
 801ded2:	895b      	ldrh	r3, [r3, #10]
 801ded4:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 801ded8:	d206      	bcs.n	801dee8 <dhcp_create_msg+0xa8>
 801deda:	4b82      	ldr	r3, [pc, #520]	@ (801e0e4 <dhcp_create_msg+0x2a4>)
 801dedc:	f240 7227 	movw	r2, #1831	@ 0x727
 801dee0:	4986      	ldr	r1, [pc, #536]	@ (801e0fc <dhcp_create_msg+0x2bc>)
 801dee2:	4882      	ldr	r0, [pc, #520]	@ (801e0ec <dhcp_create_msg+0x2ac>)
 801dee4:	f003 fed0 	bl	8021c88 <iprintf>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801dee8:	79fb      	ldrb	r3, [r7, #7]
 801deea:	2b03      	cmp	r3, #3
 801deec:	d103      	bne.n	801def6 <dhcp_create_msg+0xb6>
 801deee:	68bb      	ldr	r3, [r7, #8]
 801def0:	7a5b      	ldrb	r3, [r3, #9]
 801def2:	2b03      	cmp	r3, #3
 801def4:	d10d      	bne.n	801df12 <dhcp_create_msg+0xd2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801def6:	68bb      	ldr	r3, [r7, #8]
 801def8:	7a9b      	ldrb	r3, [r3, #10]
 801defa:	2b00      	cmp	r3, #0
 801defc:	d105      	bne.n	801df0a <dhcp_create_msg+0xca>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801defe:	f003 f8d9 	bl	80210b4 <rand>
 801df02:	4603      	mov	r3, r0
 801df04:	461a      	mov	r2, r3
 801df06:	4b7e      	ldr	r3, [pc, #504]	@ (801e100 <dhcp_create_msg+0x2c0>)
 801df08:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801df0a:	4b7d      	ldr	r3, [pc, #500]	@ (801e100 <dhcp_create_msg+0x2c0>)
 801df0c:	681a      	ldr	r2, [r3, #0]
 801df0e:	68bb      	ldr	r3, [r7, #8]
 801df10:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 801df12:	68bb      	ldr	r3, [r7, #8]
 801df14:	68db      	ldr	r3, [r3, #12]
 801df16:	685a      	ldr	r2, [r3, #4]
 801df18:	68bb      	ldr	r3, [r7, #8]
 801df1a:	611a      	str	r2, [r3, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 801df1c:	68bb      	ldr	r3, [r7, #8]
 801df1e:	691b      	ldr	r3, [r3, #16]
 801df20:	2201      	movs	r2, #1
 801df22:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 801df24:	68bb      	ldr	r3, [r7, #8]
 801df26:	691b      	ldr	r3, [r3, #16]
 801df28:	2201      	movs	r2, #1
 801df2a:	705a      	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 801df2c:	68bb      	ldr	r3, [r7, #8]
 801df2e:	691b      	ldr	r3, [r3, #16]
 801df30:	68fa      	ldr	r2, [r7, #12]
 801df32:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 801df36:	709a      	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
 801df38:	68bb      	ldr	r3, [r7, #8]
 801df3a:	691b      	ldr	r3, [r3, #16]
 801df3c:	2200      	movs	r2, #0
 801df3e:	70da      	strb	r2, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 801df40:	68bb      	ldr	r3, [r7, #8]
 801df42:	681a      	ldr	r2, [r3, #0]
 801df44:	68bb      	ldr	r3, [r7, #8]
 801df46:	691c      	ldr	r4, [r3, #16]
 801df48:	4610      	mov	r0, r2
 801df4a:	f7f6 fc60 	bl	801480e <lwip_htonl>
 801df4e:	4603      	mov	r3, r0
 801df50:	6063      	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
 801df52:	68bb      	ldr	r3, [r7, #8]
 801df54:	691b      	ldr	r3, [r3, #16]
 801df56:	2200      	movs	r2, #0
 801df58:	721a      	strb	r2, [r3, #8]
 801df5a:	2200      	movs	r2, #0
 801df5c:	725a      	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
 801df5e:	68bb      	ldr	r3, [r7, #8]
 801df60:	691b      	ldr	r3, [r3, #16]
 801df62:	2200      	movs	r2, #0
 801df64:	729a      	strb	r2, [r3, #10]
 801df66:	2200      	movs	r2, #0
 801df68:	72da      	strb	r2, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 801df6a:	68bb      	ldr	r3, [r7, #8]
 801df6c:	691b      	ldr	r3, [r3, #16]
 801df6e:	2200      	movs	r2, #0
 801df70:	731a      	strb	r2, [r3, #12]
 801df72:	2200      	movs	r2, #0
 801df74:	735a      	strb	r2, [r3, #13]
 801df76:	2200      	movs	r2, #0
 801df78:	739a      	strb	r2, [r3, #14]
 801df7a:	2200      	movs	r2, #0
 801df7c:	73da      	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801df7e:	79fb      	ldrb	r3, [r7, #7]
 801df80:	2b08      	cmp	r3, #8
 801df82:	d010      	beq.n	801dfa6 <dhcp_create_msg+0x166>
 801df84:	79fb      	ldrb	r3, [r7, #7]
 801df86:	2b04      	cmp	r3, #4
 801df88:	d00d      	beq.n	801dfa6 <dhcp_create_msg+0x166>
 801df8a:	79fb      	ldrb	r3, [r7, #7]
 801df8c:	2b07      	cmp	r3, #7
 801df8e:	d00a      	beq.n	801dfa6 <dhcp_create_msg+0x166>
 801df90:	79fb      	ldrb	r3, [r7, #7]
 801df92:	2b03      	cmp	r3, #3
 801df94:	d10d      	bne.n	801dfb2 <dhcp_create_msg+0x172>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 801df96:	68bb      	ldr	r3, [r7, #8]
 801df98:	7a5b      	ldrb	r3, [r3, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801df9a:	2b05      	cmp	r3, #5
 801df9c:	d003      	beq.n	801dfa6 <dhcp_create_msg+0x166>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 801df9e:	68bb      	ldr	r3, [r7, #8]
 801dfa0:	7a5b      	ldrb	r3, [r3, #9]
 801dfa2:	2b04      	cmp	r3, #4
 801dfa4:	d105      	bne.n	801dfb2 <dhcp_create_msg+0x172>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 801dfa6:	68fb      	ldr	r3, [r7, #12]
 801dfa8:	1d1a      	adds	r2, r3, #4
 801dfaa:	68bb      	ldr	r3, [r7, #8]
 801dfac:	691b      	ldr	r3, [r3, #16]
 801dfae:	6812      	ldr	r2, [r2, #0]
 801dfb0:	60da      	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 801dfb2:	68bb      	ldr	r3, [r7, #8]
 801dfb4:	691b      	ldr	r3, [r3, #16]
 801dfb6:	2200      	movs	r2, #0
 801dfb8:	741a      	strb	r2, [r3, #16]
 801dfba:	2200      	movs	r2, #0
 801dfbc:	745a      	strb	r2, [r3, #17]
 801dfbe:	2200      	movs	r2, #0
 801dfc0:	749a      	strb	r2, [r3, #18]
 801dfc2:	2200      	movs	r2, #0
 801dfc4:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 801dfc6:	68bb      	ldr	r3, [r7, #8]
 801dfc8:	691b      	ldr	r3, [r3, #16]
 801dfca:	2200      	movs	r2, #0
 801dfcc:	751a      	strb	r2, [r3, #20]
 801dfce:	2200      	movs	r2, #0
 801dfd0:	755a      	strb	r2, [r3, #21]
 801dfd2:	2200      	movs	r2, #0
 801dfd4:	759a      	strb	r2, [r3, #22]
 801dfd6:	2200      	movs	r2, #0
 801dfd8:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 801dfda:	68bb      	ldr	r3, [r7, #8]
 801dfdc:	691b      	ldr	r3, [r3, #16]
 801dfde:	2200      	movs	r2, #0
 801dfe0:	761a      	strb	r2, [r3, #24]
 801dfe2:	2200      	movs	r2, #0
 801dfe4:	765a      	strb	r2, [r3, #25]
 801dfe6:	2200      	movs	r2, #0
 801dfe8:	769a      	strb	r2, [r3, #26]
 801dfea:	2200      	movs	r2, #0
 801dfec:	76da      	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 801dfee:	2300      	movs	r3, #0
 801dff0:	82fb      	strh	r3, [r7, #22]
 801dff2:	e019      	b.n	801e028 <dhcp_create_msg+0x1e8>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 801dff4:	68fb      	ldr	r3, [r7, #12]
 801dff6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801dffa:	461a      	mov	r2, r3
 801dffc:	8afb      	ldrh	r3, [r7, #22]
 801dffe:	4293      	cmp	r3, r2
 801e000:	d208      	bcs.n	801e014 <dhcp_create_msg+0x1d4>
 801e002:	8afb      	ldrh	r3, [r7, #22]
 801e004:	2b05      	cmp	r3, #5
 801e006:	d805      	bhi.n	801e014 <dhcp_create_msg+0x1d4>
 801e008:	8afb      	ldrh	r3, [r7, #22]
 801e00a:	68fa      	ldr	r2, [r7, #12]
 801e00c:	4413      	add	r3, r2
 801e00e:	f893 102d 	ldrb.w	r1, [r3, #45]	@ 0x2d
 801e012:	e000      	b.n	801e016 <dhcp_create_msg+0x1d6>
 801e014:	2100      	movs	r1, #0
 801e016:	68bb      	ldr	r3, [r7, #8]
 801e018:	691a      	ldr	r2, [r3, #16]
 801e01a:	8afb      	ldrh	r3, [r7, #22]
 801e01c:	4413      	add	r3, r2
 801e01e:	460a      	mov	r2, r1
 801e020:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 801e022:	8afb      	ldrh	r3, [r7, #22]
 801e024:	3301      	adds	r3, #1
 801e026:	82fb      	strh	r3, [r7, #22]
 801e028:	8afb      	ldrh	r3, [r7, #22]
 801e02a:	2b0f      	cmp	r3, #15
 801e02c:	d9e2      	bls.n	801dff4 <dhcp_create_msg+0x1b4>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 801e02e:	2300      	movs	r3, #0
 801e030:	82fb      	strh	r3, [r7, #22]
 801e032:	e009      	b.n	801e048 <dhcp_create_msg+0x208>
    dhcp->msg_out->sname[i] = 0;
 801e034:	68bb      	ldr	r3, [r7, #8]
 801e036:	691a      	ldr	r2, [r3, #16]
 801e038:	8afb      	ldrh	r3, [r7, #22]
 801e03a:	4413      	add	r3, r2
 801e03c:	2200      	movs	r2, #0
 801e03e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 801e042:	8afb      	ldrh	r3, [r7, #22]
 801e044:	3301      	adds	r3, #1
 801e046:	82fb      	strh	r3, [r7, #22]
 801e048:	8afb      	ldrh	r3, [r7, #22]
 801e04a:	2b3f      	cmp	r3, #63	@ 0x3f
 801e04c:	d9f2      	bls.n	801e034 <dhcp_create_msg+0x1f4>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 801e04e:	2300      	movs	r3, #0
 801e050:	82fb      	strh	r3, [r7, #22]
 801e052:	e009      	b.n	801e068 <dhcp_create_msg+0x228>
    dhcp->msg_out->file[i] = 0;
 801e054:	68bb      	ldr	r3, [r7, #8]
 801e056:	691a      	ldr	r2, [r3, #16]
 801e058:	8afb      	ldrh	r3, [r7, #22]
 801e05a:	4413      	add	r3, r2
 801e05c:	2200      	movs	r2, #0
 801e05e:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 801e062:	8afb      	ldrh	r3, [r7, #22]
 801e064:	3301      	adds	r3, #1
 801e066:	82fb      	strh	r3, [r7, #22]
 801e068:	8afb      	ldrh	r3, [r7, #22]
 801e06a:	2b7f      	cmp	r3, #127	@ 0x7f
 801e06c:	d9f2      	bls.n	801e054 <dhcp_create_msg+0x214>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801e06e:	68bb      	ldr	r3, [r7, #8]
 801e070:	691b      	ldr	r3, [r3, #16]
 801e072:	2200      	movs	r2, #0
 801e074:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801e078:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 801e07c:	2200      	movs	r2, #0
 801e07e:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 801e082:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 801e086:	2200      	movs	r2, #0
 801e088:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 801e08c:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 801e090:	2200      	movs	r2, #0
 801e092:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801e096:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  dhcp->options_out_len = 0;
 801e09a:	68bb      	ldr	r3, [r7, #8]
 801e09c:	2200      	movs	r2, #0
 801e09e:	829a      	strh	r2, [r3, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 801e0a0:	2300      	movs	r3, #0
 801e0a2:	82fb      	strh	r3, [r7, #22]
 801e0a4:	e00b      	b.n	801e0be <dhcp_create_msg+0x27e>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 801e0a6:	68bb      	ldr	r3, [r7, #8]
 801e0a8:	691a      	ldr	r2, [r3, #16]
 801e0aa:	8afb      	ldrh	r3, [r7, #22]
 801e0ac:	8af9      	ldrh	r1, [r7, #22]
 801e0ae:	b2c9      	uxtb	r1, r1
 801e0b0:	4413      	add	r3, r2
 801e0b2:	460a      	mov	r2, r1
 801e0b4:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 801e0b8:	8afb      	ldrh	r3, [r7, #22]
 801e0ba:	3301      	adds	r3, #1
 801e0bc:	82fb      	strh	r3, [r7, #22]
 801e0be:	8afb      	ldrh	r3, [r7, #22]
 801e0c0:	2b43      	cmp	r3, #67	@ 0x43
 801e0c2:	d9f0      	bls.n	801e0a6 <dhcp_create_msg+0x266>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801e0c4:	2201      	movs	r2, #1
 801e0c6:	2135      	movs	r1, #53	@ 0x35
 801e0c8:	68b8      	ldr	r0, [r7, #8]
 801e0ca:	f7ff fa4b 	bl	801d564 <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 801e0ce:	79fb      	ldrb	r3, [r7, #7]
 801e0d0:	4619      	mov	r1, r3
 801e0d2:	68b8      	ldr	r0, [r7, #8]
 801e0d4:	f7ff fa80 	bl	801d5d8 <dhcp_option_byte>
  return ERR_OK;
 801e0d8:	2300      	movs	r3, #0
}
 801e0da:	4618      	mov	r0, r3
 801e0dc:	371c      	adds	r7, #28
 801e0de:	46bd      	mov	sp, r7
 801e0e0:	bd90      	pop	{r4, r7, pc}
 801e0e2:	bf00      	nop
 801e0e4:	08026db4 	.word	0x08026db4
 801e0e8:	080270e4 	.word	0x080270e4
 801e0ec:	08026e14 	.word	0x08026e14
 801e0f0:	08027104 	.word	0x08027104
 801e0f4:	08027124 	.word	0x08027124
 801e0f8:	0802714c 	.word	0x0802714c
 801e0fc:	08027174 	.word	0x08027174
 801e100:	2000c0b0 	.word	0x2000c0b0

0801e104 <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
 801e104:	b580      	push	{r7, lr}
 801e106:	b082      	sub	sp, #8
 801e108:	af00      	add	r7, sp, #0
 801e10a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 801e10c:	687b      	ldr	r3, [r7, #4]
 801e10e:	2b00      	cmp	r3, #0
 801e110:	d107      	bne.n	801e122 <dhcp_delete_msg+0x1e>
 801e112:	4b18      	ldr	r3, [pc, #96]	@ (801e174 <dhcp_delete_msg+0x70>)
 801e114:	f240 726d 	movw	r2, #1901	@ 0x76d
 801e118:	4917      	ldr	r1, [pc, #92]	@ (801e178 <dhcp_delete_msg+0x74>)
 801e11a:	4818      	ldr	r0, [pc, #96]	@ (801e17c <dhcp_delete_msg+0x78>)
 801e11c:	f003 fdb4 	bl	8021c88 <iprintf>
 801e120:	e024      	b.n	801e16c <dhcp_delete_msg+0x68>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 801e122:	687b      	ldr	r3, [r7, #4]
 801e124:	68db      	ldr	r3, [r3, #12]
 801e126:	2b00      	cmp	r3, #0
 801e128:	d106      	bne.n	801e138 <dhcp_delete_msg+0x34>
 801e12a:	4b12      	ldr	r3, [pc, #72]	@ (801e174 <dhcp_delete_msg+0x70>)
 801e12c:	f240 726e 	movw	r2, #1902	@ 0x76e
 801e130:	4913      	ldr	r1, [pc, #76]	@ (801e180 <dhcp_delete_msg+0x7c>)
 801e132:	4812      	ldr	r0, [pc, #72]	@ (801e17c <dhcp_delete_msg+0x78>)
 801e134:	f003 fda8 	bl	8021c88 <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 801e138:	687b      	ldr	r3, [r7, #4]
 801e13a:	691b      	ldr	r3, [r3, #16]
 801e13c:	2b00      	cmp	r3, #0
 801e13e:	d106      	bne.n	801e14e <dhcp_delete_msg+0x4a>
 801e140:	4b0c      	ldr	r3, [pc, #48]	@ (801e174 <dhcp_delete_msg+0x70>)
 801e142:	f240 726f 	movw	r2, #1903	@ 0x76f
 801e146:	490f      	ldr	r1, [pc, #60]	@ (801e184 <dhcp_delete_msg+0x80>)
 801e148:	480c      	ldr	r0, [pc, #48]	@ (801e17c <dhcp_delete_msg+0x78>)
 801e14a:	f003 fd9d 	bl	8021c88 <iprintf>
  if (dhcp->p_out != NULL) {
 801e14e:	687b      	ldr	r3, [r7, #4]
 801e150:	68db      	ldr	r3, [r3, #12]
 801e152:	2b00      	cmp	r3, #0
 801e154:	d004      	beq.n	801e160 <dhcp_delete_msg+0x5c>
    pbuf_free(dhcp->p_out);
 801e156:	687b      	ldr	r3, [r7, #4]
 801e158:	68db      	ldr	r3, [r3, #12]
 801e15a:	4618      	mov	r0, r3
 801e15c:	f7f7 fda2 	bl	8015ca4 <pbuf_free>
  }
  dhcp->p_out = NULL;
 801e160:	687b      	ldr	r3, [r7, #4]
 801e162:	2200      	movs	r2, #0
 801e164:	60da      	str	r2, [r3, #12]
  dhcp->msg_out = NULL;
 801e166:	687b      	ldr	r3, [r7, #4]
 801e168:	2200      	movs	r2, #0
 801e16a:	611a      	str	r2, [r3, #16]
}
 801e16c:	3708      	adds	r7, #8
 801e16e:	46bd      	mov	sp, r7
 801e170:	bd80      	pop	{r7, pc}
 801e172:	bf00      	nop
 801e174:	08026db4 	.word	0x08026db4
 801e178:	080271b4 	.word	0x080271b4
 801e17c:	08026e14 	.word	0x08026e14
 801e180:	080271d4 	.word	0x080271d4
 801e184:	080271fc 	.word	0x080271fc

0801e188 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 801e188:	b580      	push	{r7, lr}
 801e18a:	b082      	sub	sp, #8
 801e18c:	af00      	add	r7, sp, #0
 801e18e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 801e190:	687b      	ldr	r3, [r7, #4]
 801e192:	2b00      	cmp	r3, #0
 801e194:	d107      	bne.n	801e1a6 <dhcp_option_trailer+0x1e>
 801e196:	4b24      	ldr	r3, [pc, #144]	@ (801e228 <dhcp_option_trailer+0xa0>)
 801e198:	f240 7282 	movw	r2, #1922	@ 0x782
 801e19c:	4923      	ldr	r1, [pc, #140]	@ (801e22c <dhcp_option_trailer+0xa4>)
 801e19e:	4824      	ldr	r0, [pc, #144]	@ (801e230 <dhcp_option_trailer+0xa8>)
 801e1a0:	f003 fd72 	bl	8021c88 <iprintf>
 801e1a4:	e03c      	b.n	801e220 <dhcp_option_trailer+0x98>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 801e1a6:	687b      	ldr	r3, [r7, #4]
 801e1a8:	691b      	ldr	r3, [r3, #16]
 801e1aa:	2b00      	cmp	r3, #0
 801e1ac:	d106      	bne.n	801e1bc <dhcp_option_trailer+0x34>
 801e1ae:	4b1e      	ldr	r3, [pc, #120]	@ (801e228 <dhcp_option_trailer+0xa0>)
 801e1b0:	f240 7283 	movw	r2, #1923	@ 0x783
 801e1b4:	491f      	ldr	r1, [pc, #124]	@ (801e234 <dhcp_option_trailer+0xac>)
 801e1b6:	481e      	ldr	r0, [pc, #120]	@ (801e230 <dhcp_option_trailer+0xa8>)
 801e1b8:	f003 fd66 	bl	8021c88 <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 801e1bc:	687b      	ldr	r3, [r7, #4]
 801e1be:	8a9b      	ldrh	r3, [r3, #20]
 801e1c0:	2b43      	cmp	r3, #67	@ 0x43
 801e1c2:	d906      	bls.n	801e1d2 <dhcp_option_trailer+0x4a>
 801e1c4:	4b18      	ldr	r3, [pc, #96]	@ (801e228 <dhcp_option_trailer+0xa0>)
 801e1c6:	f240 7284 	movw	r2, #1924	@ 0x784
 801e1ca:	491b      	ldr	r1, [pc, #108]	@ (801e238 <dhcp_option_trailer+0xb0>)
 801e1cc:	4818      	ldr	r0, [pc, #96]	@ (801e230 <dhcp_option_trailer+0xa8>)
 801e1ce:	f003 fd5b 	bl	8021c88 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 801e1d2:	687b      	ldr	r3, [r7, #4]
 801e1d4:	691a      	ldr	r2, [r3, #16]
 801e1d6:	687b      	ldr	r3, [r7, #4]
 801e1d8:	8a9b      	ldrh	r3, [r3, #20]
 801e1da:	1c59      	adds	r1, r3, #1
 801e1dc:	b288      	uxth	r0, r1
 801e1de:	6879      	ldr	r1, [r7, #4]
 801e1e0:	8288      	strh	r0, [r1, #20]
 801e1e2:	4413      	add	r3, r2
 801e1e4:	22ff      	movs	r2, #255	@ 0xff
 801e1e6:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 801e1ea:	e00b      	b.n	801e204 <dhcp_option_trailer+0x7c>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 801e1ec:	687b      	ldr	r3, [r7, #4]
 801e1ee:	691a      	ldr	r2, [r3, #16]
 801e1f0:	687b      	ldr	r3, [r7, #4]
 801e1f2:	8a9b      	ldrh	r3, [r3, #20]
 801e1f4:	1c59      	adds	r1, r3, #1
 801e1f6:	b288      	uxth	r0, r1
 801e1f8:	6879      	ldr	r1, [r7, #4]
 801e1fa:	8288      	strh	r0, [r1, #20]
 801e1fc:	4413      	add	r3, r2
 801e1fe:	2200      	movs	r2, #0
 801e200:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 801e204:	687b      	ldr	r3, [r7, #4]
 801e206:	8a9b      	ldrh	r3, [r3, #20]
 801e208:	2b43      	cmp	r3, #67	@ 0x43
 801e20a:	d905      	bls.n	801e218 <dhcp_option_trailer+0x90>
 801e20c:	687b      	ldr	r3, [r7, #4]
 801e20e:	8a9b      	ldrh	r3, [r3, #20]
 801e210:	f003 0303 	and.w	r3, r3, #3
 801e214:	2b00      	cmp	r3, #0
 801e216:	d003      	beq.n	801e220 <dhcp_option_trailer+0x98>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
 801e218:	687b      	ldr	r3, [r7, #4]
 801e21a:	8a9b      	ldrh	r3, [r3, #20]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 801e21c:	2b43      	cmp	r3, #67	@ 0x43
 801e21e:	d9e5      	bls.n	801e1ec <dhcp_option_trailer+0x64>
  }
}
 801e220:	3708      	adds	r7, #8
 801e222:	46bd      	mov	sp, r7
 801e224:	bd80      	pop	{r7, pc}
 801e226:	bf00      	nop
 801e228:	08026db4 	.word	0x08026db4
 801e22c:	08027224 	.word	0x08027224
 801e230:	08026e14 	.word	0x08026e14
 801e234:	08027248 	.word	0x08027248
 801e238:	08027274 	.word	0x08027274

0801e23c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801e23c:	b480      	push	{r7}
 801e23e:	b085      	sub	sp, #20
 801e240:	af00      	add	r7, sp, #0
 801e242:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801e244:	687b      	ldr	r3, [r7, #4]
 801e246:	2b00      	cmp	r3, #0
 801e248:	d017      	beq.n	801e27a <dhcp_supplied_address+0x3e>
 801e24a:	687b      	ldr	r3, [r7, #4]
 801e24c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e24e:	2b00      	cmp	r3, #0
 801e250:	d013      	beq.n	801e27a <dhcp_supplied_address+0x3e>
    struct dhcp* dhcp = netif_dhcp_data(netif);
 801e252:	687b      	ldr	r3, [r7, #4]
 801e254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e256:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801e258:	68fb      	ldr	r3, [r7, #12]
 801e25a:	7a5b      	ldrb	r3, [r3, #9]
 801e25c:	2b0a      	cmp	r3, #10
 801e25e:	d007      	beq.n	801e270 <dhcp_supplied_address+0x34>
 801e260:	68fb      	ldr	r3, [r7, #12]
 801e262:	7a5b      	ldrb	r3, [r3, #9]
 801e264:	2b05      	cmp	r3, #5
 801e266:	d003      	beq.n	801e270 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801e268:	68fb      	ldr	r3, [r7, #12]
 801e26a:	7a5b      	ldrb	r3, [r3, #9]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801e26c:	2b04      	cmp	r3, #4
 801e26e:	d101      	bne.n	801e274 <dhcp_supplied_address+0x38>
 801e270:	2301      	movs	r3, #1
 801e272:	e000      	b.n	801e276 <dhcp_supplied_address+0x3a>
 801e274:	2300      	movs	r3, #0
 801e276:	b2db      	uxtb	r3, r3
 801e278:	e000      	b.n	801e27c <dhcp_supplied_address+0x40>
  }
  return 0;
 801e27a:	2300      	movs	r3, #0
}
 801e27c:	4618      	mov	r0, r3
 801e27e:	3714      	adds	r7, #20
 801e280:	46bd      	mov	sp, r7
 801e282:	bc80      	pop	{r7}
 801e284:	4770      	bx	lr
	...

0801e288 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801e288:	b580      	push	{r7, lr}
 801e28a:	b082      	sub	sp, #8
 801e28c:	af00      	add	r7, sp, #0
 801e28e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801e290:	4915      	ldr	r1, [pc, #84]	@ (801e2e8 <etharp_free_entry+0x60>)
 801e292:	687a      	ldr	r2, [r7, #4]
 801e294:	4613      	mov	r3, r2
 801e296:	005b      	lsls	r3, r3, #1
 801e298:	4413      	add	r3, r2
 801e29a:	00db      	lsls	r3, r3, #3
 801e29c:	440b      	add	r3, r1
 801e29e:	681b      	ldr	r3, [r3, #0]
 801e2a0:	2b00      	cmp	r3, #0
 801e2a2:	d013      	beq.n	801e2cc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801e2a4:	4910      	ldr	r1, [pc, #64]	@ (801e2e8 <etharp_free_entry+0x60>)
 801e2a6:	687a      	ldr	r2, [r7, #4]
 801e2a8:	4613      	mov	r3, r2
 801e2aa:	005b      	lsls	r3, r3, #1
 801e2ac:	4413      	add	r3, r2
 801e2ae:	00db      	lsls	r3, r3, #3
 801e2b0:	440b      	add	r3, r1
 801e2b2:	681b      	ldr	r3, [r3, #0]
 801e2b4:	4618      	mov	r0, r3
 801e2b6:	f7f7 fcf5 	bl	8015ca4 <pbuf_free>
    arp_table[i].q = NULL;
 801e2ba:	490b      	ldr	r1, [pc, #44]	@ (801e2e8 <etharp_free_entry+0x60>)
 801e2bc:	687a      	ldr	r2, [r7, #4]
 801e2be:	4613      	mov	r3, r2
 801e2c0:	005b      	lsls	r3, r3, #1
 801e2c2:	4413      	add	r3, r2
 801e2c4:	00db      	lsls	r3, r3, #3
 801e2c6:	440b      	add	r3, r1
 801e2c8:	2200      	movs	r2, #0
 801e2ca:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801e2cc:	4906      	ldr	r1, [pc, #24]	@ (801e2e8 <etharp_free_entry+0x60>)
 801e2ce:	687a      	ldr	r2, [r7, #4]
 801e2d0:	4613      	mov	r3, r2
 801e2d2:	005b      	lsls	r3, r3, #1
 801e2d4:	4413      	add	r3, r2
 801e2d6:	00db      	lsls	r3, r3, #3
 801e2d8:	440b      	add	r3, r1
 801e2da:	3314      	adds	r3, #20
 801e2dc:	2200      	movs	r2, #0
 801e2de:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801e2e0:	bf00      	nop
 801e2e2:	3708      	adds	r7, #8
 801e2e4:	46bd      	mov	sp, r7
 801e2e6:	bd80      	pop	{r7, pc}
 801e2e8:	2000c0b4 	.word	0x2000c0b4

0801e2ec <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801e2ec:	b580      	push	{r7, lr}
 801e2ee:	b082      	sub	sp, #8
 801e2f0:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e2f2:	2300      	movs	r3, #0
 801e2f4:	71fb      	strb	r3, [r7, #7]
 801e2f6:	e096      	b.n	801e426 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801e2f8:	79fa      	ldrb	r2, [r7, #7]
 801e2fa:	494f      	ldr	r1, [pc, #316]	@ (801e438 <etharp_tmr+0x14c>)
 801e2fc:	4613      	mov	r3, r2
 801e2fe:	005b      	lsls	r3, r3, #1
 801e300:	4413      	add	r3, r2
 801e302:	00db      	lsls	r3, r3, #3
 801e304:	440b      	add	r3, r1
 801e306:	3314      	adds	r3, #20
 801e308:	781b      	ldrb	r3, [r3, #0]
 801e30a:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 801e30c:	79bb      	ldrb	r3, [r7, #6]
 801e30e:	2b00      	cmp	r3, #0
 801e310:	f000 8086 	beq.w	801e420 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 801e314:	79fa      	ldrb	r2, [r7, #7]
 801e316:	4948      	ldr	r1, [pc, #288]	@ (801e438 <etharp_tmr+0x14c>)
 801e318:	4613      	mov	r3, r2
 801e31a:	005b      	lsls	r3, r3, #1
 801e31c:	4413      	add	r3, r2
 801e31e:	00db      	lsls	r3, r3, #3
 801e320:	440b      	add	r3, r1
 801e322:	3312      	adds	r3, #18
 801e324:	881b      	ldrh	r3, [r3, #0]
 801e326:	3301      	adds	r3, #1
 801e328:	b298      	uxth	r0, r3
 801e32a:	4943      	ldr	r1, [pc, #268]	@ (801e438 <etharp_tmr+0x14c>)
 801e32c:	4613      	mov	r3, r2
 801e32e:	005b      	lsls	r3, r3, #1
 801e330:	4413      	add	r3, r2
 801e332:	00db      	lsls	r3, r3, #3
 801e334:	440b      	add	r3, r1
 801e336:	3312      	adds	r3, #18
 801e338:	4602      	mov	r2, r0
 801e33a:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801e33c:	79fa      	ldrb	r2, [r7, #7]
 801e33e:	493e      	ldr	r1, [pc, #248]	@ (801e438 <etharp_tmr+0x14c>)
 801e340:	4613      	mov	r3, r2
 801e342:	005b      	lsls	r3, r3, #1
 801e344:	4413      	add	r3, r2
 801e346:	00db      	lsls	r3, r3, #3
 801e348:	440b      	add	r3, r1
 801e34a:	3312      	adds	r3, #18
 801e34c:	881b      	ldrh	r3, [r3, #0]
 801e34e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801e352:	d215      	bcs.n	801e380 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801e354:	79fa      	ldrb	r2, [r7, #7]
 801e356:	4938      	ldr	r1, [pc, #224]	@ (801e438 <etharp_tmr+0x14c>)
 801e358:	4613      	mov	r3, r2
 801e35a:	005b      	lsls	r3, r3, #1
 801e35c:	4413      	add	r3, r2
 801e35e:	00db      	lsls	r3, r3, #3
 801e360:	440b      	add	r3, r1
 801e362:	3314      	adds	r3, #20
 801e364:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801e366:	2b01      	cmp	r3, #1
 801e368:	d10f      	bne.n	801e38a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801e36a:	79fa      	ldrb	r2, [r7, #7]
 801e36c:	4932      	ldr	r1, [pc, #200]	@ (801e438 <etharp_tmr+0x14c>)
 801e36e:	4613      	mov	r3, r2
 801e370:	005b      	lsls	r3, r3, #1
 801e372:	4413      	add	r3, r2
 801e374:	00db      	lsls	r3, r3, #3
 801e376:	440b      	add	r3, r1
 801e378:	3312      	adds	r3, #18
 801e37a:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801e37c:	2b04      	cmp	r3, #4
 801e37e:	d904      	bls.n	801e38a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801e380:	79fb      	ldrb	r3, [r7, #7]
 801e382:	4618      	mov	r0, r3
 801e384:	f7ff ff80 	bl	801e288 <etharp_free_entry>
 801e388:	e04a      	b.n	801e420 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801e38a:	79fa      	ldrb	r2, [r7, #7]
 801e38c:	492a      	ldr	r1, [pc, #168]	@ (801e438 <etharp_tmr+0x14c>)
 801e38e:	4613      	mov	r3, r2
 801e390:	005b      	lsls	r3, r3, #1
 801e392:	4413      	add	r3, r2
 801e394:	00db      	lsls	r3, r3, #3
 801e396:	440b      	add	r3, r1
 801e398:	3314      	adds	r3, #20
 801e39a:	781b      	ldrb	r3, [r3, #0]
 801e39c:	2b03      	cmp	r3, #3
 801e39e:	d10a      	bne.n	801e3b6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801e3a0:	79fa      	ldrb	r2, [r7, #7]
 801e3a2:	4925      	ldr	r1, [pc, #148]	@ (801e438 <etharp_tmr+0x14c>)
 801e3a4:	4613      	mov	r3, r2
 801e3a6:	005b      	lsls	r3, r3, #1
 801e3a8:	4413      	add	r3, r2
 801e3aa:	00db      	lsls	r3, r3, #3
 801e3ac:	440b      	add	r3, r1
 801e3ae:	3314      	adds	r3, #20
 801e3b0:	2204      	movs	r2, #4
 801e3b2:	701a      	strb	r2, [r3, #0]
 801e3b4:	e034      	b.n	801e420 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801e3b6:	79fa      	ldrb	r2, [r7, #7]
 801e3b8:	491f      	ldr	r1, [pc, #124]	@ (801e438 <etharp_tmr+0x14c>)
 801e3ba:	4613      	mov	r3, r2
 801e3bc:	005b      	lsls	r3, r3, #1
 801e3be:	4413      	add	r3, r2
 801e3c0:	00db      	lsls	r3, r3, #3
 801e3c2:	440b      	add	r3, r1
 801e3c4:	3314      	adds	r3, #20
 801e3c6:	781b      	ldrb	r3, [r3, #0]
 801e3c8:	2b04      	cmp	r3, #4
 801e3ca:	d10a      	bne.n	801e3e2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801e3cc:	79fa      	ldrb	r2, [r7, #7]
 801e3ce:	491a      	ldr	r1, [pc, #104]	@ (801e438 <etharp_tmr+0x14c>)
 801e3d0:	4613      	mov	r3, r2
 801e3d2:	005b      	lsls	r3, r3, #1
 801e3d4:	4413      	add	r3, r2
 801e3d6:	00db      	lsls	r3, r3, #3
 801e3d8:	440b      	add	r3, r1
 801e3da:	3314      	adds	r3, #20
 801e3dc:	2202      	movs	r2, #2
 801e3de:	701a      	strb	r2, [r3, #0]
 801e3e0:	e01e      	b.n	801e420 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801e3e2:	79fa      	ldrb	r2, [r7, #7]
 801e3e4:	4914      	ldr	r1, [pc, #80]	@ (801e438 <etharp_tmr+0x14c>)
 801e3e6:	4613      	mov	r3, r2
 801e3e8:	005b      	lsls	r3, r3, #1
 801e3ea:	4413      	add	r3, r2
 801e3ec:	00db      	lsls	r3, r3, #3
 801e3ee:	440b      	add	r3, r1
 801e3f0:	3314      	adds	r3, #20
 801e3f2:	781b      	ldrb	r3, [r3, #0]
 801e3f4:	2b01      	cmp	r3, #1
 801e3f6:	d113      	bne.n	801e420 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801e3f8:	79fa      	ldrb	r2, [r7, #7]
 801e3fa:	490f      	ldr	r1, [pc, #60]	@ (801e438 <etharp_tmr+0x14c>)
 801e3fc:	4613      	mov	r3, r2
 801e3fe:	005b      	lsls	r3, r3, #1
 801e400:	4413      	add	r3, r2
 801e402:	00db      	lsls	r3, r3, #3
 801e404:	440b      	add	r3, r1
 801e406:	3308      	adds	r3, #8
 801e408:	6818      	ldr	r0, [r3, #0]
 801e40a:	79fa      	ldrb	r2, [r7, #7]
 801e40c:	4613      	mov	r3, r2
 801e40e:	005b      	lsls	r3, r3, #1
 801e410:	4413      	add	r3, r2
 801e412:	00db      	lsls	r3, r3, #3
 801e414:	4a08      	ldr	r2, [pc, #32]	@ (801e438 <etharp_tmr+0x14c>)
 801e416:	4413      	add	r3, r2
 801e418:	3304      	adds	r3, #4
 801e41a:	4619      	mov	r1, r3
 801e41c:	f000 fee8 	bl	801f1f0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e420:	79fb      	ldrb	r3, [r7, #7]
 801e422:	3301      	adds	r3, #1
 801e424:	71fb      	strb	r3, [r7, #7]
 801e426:	79fb      	ldrb	r3, [r7, #7]
 801e428:	2b09      	cmp	r3, #9
 801e42a:	f67f af65 	bls.w	801e2f8 <etharp_tmr+0xc>
      }
    }
  }
}
 801e42e:	bf00      	nop
 801e430:	bf00      	nop
 801e432:	3708      	adds	r7, #8
 801e434:	46bd      	mov	sp, r7
 801e436:	bd80      	pop	{r7, pc}
 801e438:	2000c0b4 	.word	0x2000c0b4

0801e43c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 801e43c:	b580      	push	{r7, lr}
 801e43e:	b088      	sub	sp, #32
 801e440:	af00      	add	r7, sp, #0
 801e442:	60f8      	str	r0, [r7, #12]
 801e444:	460b      	mov	r3, r1
 801e446:	607a      	str	r2, [r7, #4]
 801e448:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801e44a:	230a      	movs	r3, #10
 801e44c:	77fb      	strb	r3, [r7, #31]
 801e44e:	230a      	movs	r3, #10
 801e450:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 801e452:	230a      	movs	r3, #10
 801e454:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 801e456:	2300      	movs	r3, #0
 801e458:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 801e45a:	230a      	movs	r3, #10
 801e45c:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801e45e:	2300      	movs	r3, #0
 801e460:	833b      	strh	r3, [r7, #24]
 801e462:	2300      	movs	r3, #0
 801e464:	82fb      	strh	r3, [r7, #22]
 801e466:	2300      	movs	r3, #0
 801e468:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e46a:	2300      	movs	r3, #0
 801e46c:	773b      	strb	r3, [r7, #28]
 801e46e:	e093      	b.n	801e598 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 801e470:	7f3a      	ldrb	r2, [r7, #28]
 801e472:	4990      	ldr	r1, [pc, #576]	@ (801e6b4 <etharp_find_entry+0x278>)
 801e474:	4613      	mov	r3, r2
 801e476:	005b      	lsls	r3, r3, #1
 801e478:	4413      	add	r3, r2
 801e47a:	00db      	lsls	r3, r3, #3
 801e47c:	440b      	add	r3, r1
 801e47e:	3314      	adds	r3, #20
 801e480:	781b      	ldrb	r3, [r3, #0]
 801e482:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801e484:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801e488:	2b0a      	cmp	r3, #10
 801e48a:	d105      	bne.n	801e498 <etharp_find_entry+0x5c>
 801e48c:	7cfb      	ldrb	r3, [r7, #19]
 801e48e:	2b00      	cmp	r3, #0
 801e490:	d102      	bne.n	801e498 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 801e492:	7f3b      	ldrb	r3, [r7, #28]
 801e494:	777b      	strb	r3, [r7, #29]
 801e496:	e07c      	b.n	801e592 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 801e498:	7cfb      	ldrb	r3, [r7, #19]
 801e49a:	2b00      	cmp	r3, #0
 801e49c:	d079      	beq.n	801e592 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801e49e:	7cfb      	ldrb	r3, [r7, #19]
 801e4a0:	2b01      	cmp	r3, #1
 801e4a2:	d009      	beq.n	801e4b8 <etharp_find_entry+0x7c>
 801e4a4:	7cfb      	ldrb	r3, [r7, #19]
 801e4a6:	2b01      	cmp	r3, #1
 801e4a8:	d806      	bhi.n	801e4b8 <etharp_find_entry+0x7c>
 801e4aa:	4b83      	ldr	r3, [pc, #524]	@ (801e6b8 <etharp_find_entry+0x27c>)
 801e4ac:	f240 1225 	movw	r2, #293	@ 0x125
 801e4b0:	4982      	ldr	r1, [pc, #520]	@ (801e6bc <etharp_find_entry+0x280>)
 801e4b2:	4883      	ldr	r0, [pc, #524]	@ (801e6c0 <etharp_find_entry+0x284>)
 801e4b4:	f003 fbe8 	bl	8021c88 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801e4b8:	68fb      	ldr	r3, [r7, #12]
 801e4ba:	2b00      	cmp	r3, #0
 801e4bc:	d00f      	beq.n	801e4de <etharp_find_entry+0xa2>
 801e4be:	68fb      	ldr	r3, [r7, #12]
 801e4c0:	6819      	ldr	r1, [r3, #0]
 801e4c2:	7f3a      	ldrb	r2, [r7, #28]
 801e4c4:	487b      	ldr	r0, [pc, #492]	@ (801e6b4 <etharp_find_entry+0x278>)
 801e4c6:	4613      	mov	r3, r2
 801e4c8:	005b      	lsls	r3, r3, #1
 801e4ca:	4413      	add	r3, r2
 801e4cc:	00db      	lsls	r3, r3, #3
 801e4ce:	4403      	add	r3, r0
 801e4d0:	3304      	adds	r3, #4
 801e4d2:	681b      	ldr	r3, [r3, #0]
 801e4d4:	4299      	cmp	r1, r3
 801e4d6:	d102      	bne.n	801e4de <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 801e4d8:	f997 301c 	ldrsb.w	r3, [r7, #28]
 801e4dc:	e0e5      	b.n	801e6aa <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801e4de:	7cfb      	ldrb	r3, [r7, #19]
 801e4e0:	2b01      	cmp	r3, #1
 801e4e2:	d13b      	bne.n	801e55c <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801e4e4:	7f3a      	ldrb	r2, [r7, #28]
 801e4e6:	4973      	ldr	r1, [pc, #460]	@ (801e6b4 <etharp_find_entry+0x278>)
 801e4e8:	4613      	mov	r3, r2
 801e4ea:	005b      	lsls	r3, r3, #1
 801e4ec:	4413      	add	r3, r2
 801e4ee:	00db      	lsls	r3, r3, #3
 801e4f0:	440b      	add	r3, r1
 801e4f2:	681b      	ldr	r3, [r3, #0]
 801e4f4:	2b00      	cmp	r3, #0
 801e4f6:	d018      	beq.n	801e52a <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 801e4f8:	7f3a      	ldrb	r2, [r7, #28]
 801e4fa:	496e      	ldr	r1, [pc, #440]	@ (801e6b4 <etharp_find_entry+0x278>)
 801e4fc:	4613      	mov	r3, r2
 801e4fe:	005b      	lsls	r3, r3, #1
 801e500:	4413      	add	r3, r2
 801e502:	00db      	lsls	r3, r3, #3
 801e504:	440b      	add	r3, r1
 801e506:	3312      	adds	r3, #18
 801e508:	881b      	ldrh	r3, [r3, #0]
 801e50a:	8b3a      	ldrh	r2, [r7, #24]
 801e50c:	429a      	cmp	r2, r3
 801e50e:	d840      	bhi.n	801e592 <etharp_find_entry+0x156>
            old_queue = i;
 801e510:	7f3b      	ldrb	r3, [r7, #28]
 801e512:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 801e514:	7f3a      	ldrb	r2, [r7, #28]
 801e516:	4967      	ldr	r1, [pc, #412]	@ (801e6b4 <etharp_find_entry+0x278>)
 801e518:	4613      	mov	r3, r2
 801e51a:	005b      	lsls	r3, r3, #1
 801e51c:	4413      	add	r3, r2
 801e51e:	00db      	lsls	r3, r3, #3
 801e520:	440b      	add	r3, r1
 801e522:	3312      	adds	r3, #18
 801e524:	881b      	ldrh	r3, [r3, #0]
 801e526:	833b      	strh	r3, [r7, #24]
 801e528:	e033      	b.n	801e592 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801e52a:	7f3a      	ldrb	r2, [r7, #28]
 801e52c:	4961      	ldr	r1, [pc, #388]	@ (801e6b4 <etharp_find_entry+0x278>)
 801e52e:	4613      	mov	r3, r2
 801e530:	005b      	lsls	r3, r3, #1
 801e532:	4413      	add	r3, r2
 801e534:	00db      	lsls	r3, r3, #3
 801e536:	440b      	add	r3, r1
 801e538:	3312      	adds	r3, #18
 801e53a:	881b      	ldrh	r3, [r3, #0]
 801e53c:	8afa      	ldrh	r2, [r7, #22]
 801e53e:	429a      	cmp	r2, r3
 801e540:	d827      	bhi.n	801e592 <etharp_find_entry+0x156>
            old_pending = i;
 801e542:	7f3b      	ldrb	r3, [r7, #28]
 801e544:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 801e546:	7f3a      	ldrb	r2, [r7, #28]
 801e548:	495a      	ldr	r1, [pc, #360]	@ (801e6b4 <etharp_find_entry+0x278>)
 801e54a:	4613      	mov	r3, r2
 801e54c:	005b      	lsls	r3, r3, #1
 801e54e:	4413      	add	r3, r2
 801e550:	00db      	lsls	r3, r3, #3
 801e552:	440b      	add	r3, r1
 801e554:	3312      	adds	r3, #18
 801e556:	881b      	ldrh	r3, [r3, #0]
 801e558:	82fb      	strh	r3, [r7, #22]
 801e55a:	e01a      	b.n	801e592 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801e55c:	7cfb      	ldrb	r3, [r7, #19]
 801e55e:	2b01      	cmp	r3, #1
 801e560:	d917      	bls.n	801e592 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801e562:	7f3a      	ldrb	r2, [r7, #28]
 801e564:	4953      	ldr	r1, [pc, #332]	@ (801e6b4 <etharp_find_entry+0x278>)
 801e566:	4613      	mov	r3, r2
 801e568:	005b      	lsls	r3, r3, #1
 801e56a:	4413      	add	r3, r2
 801e56c:	00db      	lsls	r3, r3, #3
 801e56e:	440b      	add	r3, r1
 801e570:	3312      	adds	r3, #18
 801e572:	881b      	ldrh	r3, [r3, #0]
 801e574:	8aba      	ldrh	r2, [r7, #20]
 801e576:	429a      	cmp	r2, r3
 801e578:	d80b      	bhi.n	801e592 <etharp_find_entry+0x156>
            old_stable = i;
 801e57a:	7f3b      	ldrb	r3, [r7, #28]
 801e57c:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 801e57e:	7f3a      	ldrb	r2, [r7, #28]
 801e580:	494c      	ldr	r1, [pc, #304]	@ (801e6b4 <etharp_find_entry+0x278>)
 801e582:	4613      	mov	r3, r2
 801e584:	005b      	lsls	r3, r3, #1
 801e586:	4413      	add	r3, r2
 801e588:	00db      	lsls	r3, r3, #3
 801e58a:	440b      	add	r3, r1
 801e58c:	3312      	adds	r3, #18
 801e58e:	881b      	ldrh	r3, [r3, #0]
 801e590:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e592:	7f3b      	ldrb	r3, [r7, #28]
 801e594:	3301      	adds	r3, #1
 801e596:	773b      	strb	r3, [r7, #28]
 801e598:	7f3b      	ldrb	r3, [r7, #28]
 801e59a:	2b09      	cmp	r3, #9
 801e59c:	f67f af68 	bls.w	801e470 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801e5a0:	7afb      	ldrb	r3, [r7, #11]
 801e5a2:	f003 0302 	and.w	r3, r3, #2
 801e5a6:	2b00      	cmp	r3, #0
 801e5a8:	d108      	bne.n	801e5bc <etharp_find_entry+0x180>
 801e5aa:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801e5ae:	2b0a      	cmp	r3, #10
 801e5b0:	d107      	bne.n	801e5c2 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801e5b2:	7afb      	ldrb	r3, [r7, #11]
 801e5b4:	f003 0301 	and.w	r3, r3, #1
 801e5b8:	2b00      	cmp	r3, #0
 801e5ba:	d102      	bne.n	801e5c2 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 801e5bc:	f04f 33ff 	mov.w	r3, #4294967295
 801e5c0:	e073      	b.n	801e6aa <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801e5c2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801e5c6:	2b09      	cmp	r3, #9
 801e5c8:	dc02      	bgt.n	801e5d0 <etharp_find_entry+0x194>
    i = empty;
 801e5ca:	7f7b      	ldrb	r3, [r7, #29]
 801e5cc:	773b      	strb	r3, [r7, #28]
 801e5ce:	e036      	b.n	801e63e <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801e5d0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801e5d4:	2b09      	cmp	r3, #9
 801e5d6:	dc13      	bgt.n	801e600 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 801e5d8:	7fbb      	ldrb	r3, [r7, #30]
 801e5da:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801e5dc:	7f3a      	ldrb	r2, [r7, #28]
 801e5de:	4935      	ldr	r1, [pc, #212]	@ (801e6b4 <etharp_find_entry+0x278>)
 801e5e0:	4613      	mov	r3, r2
 801e5e2:	005b      	lsls	r3, r3, #1
 801e5e4:	4413      	add	r3, r2
 801e5e6:	00db      	lsls	r3, r3, #3
 801e5e8:	440b      	add	r3, r1
 801e5ea:	681b      	ldr	r3, [r3, #0]
 801e5ec:	2b00      	cmp	r3, #0
 801e5ee:	d018      	beq.n	801e622 <etharp_find_entry+0x1e6>
 801e5f0:	4b31      	ldr	r3, [pc, #196]	@ (801e6b8 <etharp_find_entry+0x27c>)
 801e5f2:	f240 126f 	movw	r2, #367	@ 0x16f
 801e5f6:	4933      	ldr	r1, [pc, #204]	@ (801e6c4 <etharp_find_entry+0x288>)
 801e5f8:	4831      	ldr	r0, [pc, #196]	@ (801e6c0 <etharp_find_entry+0x284>)
 801e5fa:	f003 fb45 	bl	8021c88 <iprintf>
 801e5fe:	e010      	b.n	801e622 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801e600:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801e604:	2b09      	cmp	r3, #9
 801e606:	dc02      	bgt.n	801e60e <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 801e608:	7ffb      	ldrb	r3, [r7, #31]
 801e60a:	773b      	strb	r3, [r7, #28]
 801e60c:	e009      	b.n	801e622 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801e60e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801e612:	2b09      	cmp	r3, #9
 801e614:	dc02      	bgt.n	801e61c <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801e616:	7efb      	ldrb	r3, [r7, #27]
 801e618:	773b      	strb	r3, [r7, #28]
 801e61a:	e002      	b.n	801e622 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 801e61c:	f04f 33ff 	mov.w	r3, #4294967295
 801e620:	e043      	b.n	801e6aa <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801e622:	7f3b      	ldrb	r3, [r7, #28]
 801e624:	2b09      	cmp	r3, #9
 801e626:	d906      	bls.n	801e636 <etharp_find_entry+0x1fa>
 801e628:	4b23      	ldr	r3, [pc, #140]	@ (801e6b8 <etharp_find_entry+0x27c>)
 801e62a:	f240 1281 	movw	r2, #385	@ 0x181
 801e62e:	4926      	ldr	r1, [pc, #152]	@ (801e6c8 <etharp_find_entry+0x28c>)
 801e630:	4823      	ldr	r0, [pc, #140]	@ (801e6c0 <etharp_find_entry+0x284>)
 801e632:	f003 fb29 	bl	8021c88 <iprintf>
    etharp_free_entry(i);
 801e636:	7f3b      	ldrb	r3, [r7, #28]
 801e638:	4618      	mov	r0, r3
 801e63a:	f7ff fe25 	bl	801e288 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801e63e:	7f3b      	ldrb	r3, [r7, #28]
 801e640:	2b09      	cmp	r3, #9
 801e642:	d906      	bls.n	801e652 <etharp_find_entry+0x216>
 801e644:	4b1c      	ldr	r3, [pc, #112]	@ (801e6b8 <etharp_find_entry+0x27c>)
 801e646:	f240 1285 	movw	r2, #389	@ 0x185
 801e64a:	491f      	ldr	r1, [pc, #124]	@ (801e6c8 <etharp_find_entry+0x28c>)
 801e64c:	481c      	ldr	r0, [pc, #112]	@ (801e6c0 <etharp_find_entry+0x284>)
 801e64e:	f003 fb1b 	bl	8021c88 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801e652:	7f3a      	ldrb	r2, [r7, #28]
 801e654:	4917      	ldr	r1, [pc, #92]	@ (801e6b4 <etharp_find_entry+0x278>)
 801e656:	4613      	mov	r3, r2
 801e658:	005b      	lsls	r3, r3, #1
 801e65a:	4413      	add	r3, r2
 801e65c:	00db      	lsls	r3, r3, #3
 801e65e:	440b      	add	r3, r1
 801e660:	3314      	adds	r3, #20
 801e662:	781b      	ldrb	r3, [r3, #0]
 801e664:	2b00      	cmp	r3, #0
 801e666:	d006      	beq.n	801e676 <etharp_find_entry+0x23a>
 801e668:	4b13      	ldr	r3, [pc, #76]	@ (801e6b8 <etharp_find_entry+0x27c>)
 801e66a:	f44f 72c3 	mov.w	r2, #390	@ 0x186
 801e66e:	4917      	ldr	r1, [pc, #92]	@ (801e6cc <etharp_find_entry+0x290>)
 801e670:	4813      	ldr	r0, [pc, #76]	@ (801e6c0 <etharp_find_entry+0x284>)
 801e672:	f003 fb09 	bl	8021c88 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801e676:	68fb      	ldr	r3, [r7, #12]
 801e678:	2b00      	cmp	r3, #0
 801e67a:	d00a      	beq.n	801e692 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801e67c:	7f3a      	ldrb	r2, [r7, #28]
 801e67e:	68fb      	ldr	r3, [r7, #12]
 801e680:	6819      	ldr	r1, [r3, #0]
 801e682:	480c      	ldr	r0, [pc, #48]	@ (801e6b4 <etharp_find_entry+0x278>)
 801e684:	4613      	mov	r3, r2
 801e686:	005b      	lsls	r3, r3, #1
 801e688:	4413      	add	r3, r2
 801e68a:	00db      	lsls	r3, r3, #3
 801e68c:	4403      	add	r3, r0
 801e68e:	3304      	adds	r3, #4
 801e690:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801e692:	7f3a      	ldrb	r2, [r7, #28]
 801e694:	4907      	ldr	r1, [pc, #28]	@ (801e6b4 <etharp_find_entry+0x278>)
 801e696:	4613      	mov	r3, r2
 801e698:	005b      	lsls	r3, r3, #1
 801e69a:	4413      	add	r3, r2
 801e69c:	00db      	lsls	r3, r3, #3
 801e69e:	440b      	add	r3, r1
 801e6a0:	3312      	adds	r3, #18
 801e6a2:	2200      	movs	r2, #0
 801e6a4:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 801e6a6:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 801e6aa:	4618      	mov	r0, r3
 801e6ac:	3720      	adds	r7, #32
 801e6ae:	46bd      	mov	sp, r7
 801e6b0:	bd80      	pop	{r7, pc}
 801e6b2:	bf00      	nop
 801e6b4:	2000c0b4 	.word	0x2000c0b4
 801e6b8:	080272b4 	.word	0x080272b4
 801e6bc:	080272ec 	.word	0x080272ec
 801e6c0:	0802732c 	.word	0x0802732c
 801e6c4:	08027354 	.word	0x08027354
 801e6c8:	0802736c 	.word	0x0802736c
 801e6cc:	08027380 	.word	0x08027380

0801e6d0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801e6d0:	b580      	push	{r7, lr}
 801e6d2:	b088      	sub	sp, #32
 801e6d4:	af02      	add	r7, sp, #8
 801e6d6:	60f8      	str	r0, [r7, #12]
 801e6d8:	60b9      	str	r1, [r7, #8]
 801e6da:	607a      	str	r2, [r7, #4]
 801e6dc:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801e6de:	68fb      	ldr	r3, [r7, #12]
 801e6e0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801e6e4:	2b06      	cmp	r3, #6
 801e6e6:	d006      	beq.n	801e6f6 <etharp_update_arp_entry+0x26>
 801e6e8:	4b48      	ldr	r3, [pc, #288]	@ (801e80c <etharp_update_arp_entry+0x13c>)
 801e6ea:	f240 12ab 	movw	r2, #427	@ 0x1ab
 801e6ee:	4948      	ldr	r1, [pc, #288]	@ (801e810 <etharp_update_arp_entry+0x140>)
 801e6f0:	4848      	ldr	r0, [pc, #288]	@ (801e814 <etharp_update_arp_entry+0x144>)
 801e6f2:	f003 fac9 	bl	8021c88 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801e6f6:	68bb      	ldr	r3, [r7, #8]
 801e6f8:	2b00      	cmp	r3, #0
 801e6fa:	d012      	beq.n	801e722 <etharp_update_arp_entry+0x52>
 801e6fc:	68bb      	ldr	r3, [r7, #8]
 801e6fe:	681b      	ldr	r3, [r3, #0]
 801e700:	2b00      	cmp	r3, #0
 801e702:	d00e      	beq.n	801e722 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801e704:	68bb      	ldr	r3, [r7, #8]
 801e706:	681b      	ldr	r3, [r3, #0]
 801e708:	68f9      	ldr	r1, [r7, #12]
 801e70a:	4618      	mov	r0, r3
 801e70c:	f001 fb70 	bl	801fdf0 <ip4_addr_isbroadcast_u32>
 801e710:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801e712:	2b00      	cmp	r3, #0
 801e714:	d105      	bne.n	801e722 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801e716:	68bb      	ldr	r3, [r7, #8]
 801e718:	681b      	ldr	r3, [r3, #0]
 801e71a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801e71e:	2be0      	cmp	r3, #224	@ 0xe0
 801e720:	d102      	bne.n	801e728 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801e722:	f06f 030f 	mvn.w	r3, #15
 801e726:	e06c      	b.n	801e802 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801e728:	78fb      	ldrb	r3, [r7, #3]
 801e72a:	68fa      	ldr	r2, [r7, #12]
 801e72c:	4619      	mov	r1, r3
 801e72e:	68b8      	ldr	r0, [r7, #8]
 801e730:	f7ff fe84 	bl	801e43c <etharp_find_entry>
 801e734:	4603      	mov	r3, r0
 801e736:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 801e738:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801e73c:	2b00      	cmp	r3, #0
 801e73e:	da02      	bge.n	801e746 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801e740:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801e744:	e05d      	b.n	801e802 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801e746:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801e74a:	4933      	ldr	r1, [pc, #204]	@ (801e818 <etharp_update_arp_entry+0x148>)
 801e74c:	4613      	mov	r3, r2
 801e74e:	005b      	lsls	r3, r3, #1
 801e750:	4413      	add	r3, r2
 801e752:	00db      	lsls	r3, r3, #3
 801e754:	440b      	add	r3, r1
 801e756:	3314      	adds	r3, #20
 801e758:	2202      	movs	r2, #2
 801e75a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801e75c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801e760:	492d      	ldr	r1, [pc, #180]	@ (801e818 <etharp_update_arp_entry+0x148>)
 801e762:	4613      	mov	r3, r2
 801e764:	005b      	lsls	r3, r3, #1
 801e766:	4413      	add	r3, r2
 801e768:	00db      	lsls	r3, r3, #3
 801e76a:	440b      	add	r3, r1
 801e76c:	3308      	adds	r3, #8
 801e76e:	68fa      	ldr	r2, [r7, #12]
 801e770:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 801e772:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801e776:	4613      	mov	r3, r2
 801e778:	005b      	lsls	r3, r3, #1
 801e77a:	4413      	add	r3, r2
 801e77c:	00db      	lsls	r3, r3, #3
 801e77e:	3308      	adds	r3, #8
 801e780:	4a25      	ldr	r2, [pc, #148]	@ (801e818 <etharp_update_arp_entry+0x148>)
 801e782:	4413      	add	r3, r2
 801e784:	3304      	adds	r3, #4
 801e786:	2206      	movs	r2, #6
 801e788:	6879      	ldr	r1, [r7, #4]
 801e78a:	4618      	mov	r0, r3
 801e78c:	f003 fd77 	bl	802227e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801e790:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801e794:	4920      	ldr	r1, [pc, #128]	@ (801e818 <etharp_update_arp_entry+0x148>)
 801e796:	4613      	mov	r3, r2
 801e798:	005b      	lsls	r3, r3, #1
 801e79a:	4413      	add	r3, r2
 801e79c:	00db      	lsls	r3, r3, #3
 801e79e:	440b      	add	r3, r1
 801e7a0:	3312      	adds	r3, #18
 801e7a2:	2200      	movs	r2, #0
 801e7a4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801e7a6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801e7aa:	491b      	ldr	r1, [pc, #108]	@ (801e818 <etharp_update_arp_entry+0x148>)
 801e7ac:	4613      	mov	r3, r2
 801e7ae:	005b      	lsls	r3, r3, #1
 801e7b0:	4413      	add	r3, r2
 801e7b2:	00db      	lsls	r3, r3, #3
 801e7b4:	440b      	add	r3, r1
 801e7b6:	681b      	ldr	r3, [r3, #0]
 801e7b8:	2b00      	cmp	r3, #0
 801e7ba:	d021      	beq.n	801e800 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801e7bc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801e7c0:	4915      	ldr	r1, [pc, #84]	@ (801e818 <etharp_update_arp_entry+0x148>)
 801e7c2:	4613      	mov	r3, r2
 801e7c4:	005b      	lsls	r3, r3, #1
 801e7c6:	4413      	add	r3, r2
 801e7c8:	00db      	lsls	r3, r3, #3
 801e7ca:	440b      	add	r3, r1
 801e7cc:	681b      	ldr	r3, [r3, #0]
 801e7ce:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801e7d0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801e7d4:	4910      	ldr	r1, [pc, #64]	@ (801e818 <etharp_update_arp_entry+0x148>)
 801e7d6:	4613      	mov	r3, r2
 801e7d8:	005b      	lsls	r3, r3, #1
 801e7da:	4413      	add	r3, r2
 801e7dc:	00db      	lsls	r3, r3, #3
 801e7de:	440b      	add	r3, r1
 801e7e0:	2200      	movs	r2, #0
 801e7e2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801e7e4:	68fb      	ldr	r3, [r7, #12]
 801e7e6:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 801e7ea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801e7ee:	9300      	str	r3, [sp, #0]
 801e7f0:	687b      	ldr	r3, [r7, #4]
 801e7f2:	6939      	ldr	r1, [r7, #16]
 801e7f4:	68f8      	ldr	r0, [r7, #12]
 801e7f6:	f002 fc09 	bl	802100c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801e7fa:	6938      	ldr	r0, [r7, #16]
 801e7fc:	f7f7 fa52 	bl	8015ca4 <pbuf_free>
  }
  return ERR_OK;
 801e800:	2300      	movs	r3, #0
}
 801e802:	4618      	mov	r0, r3
 801e804:	3718      	adds	r7, #24
 801e806:	46bd      	mov	sp, r7
 801e808:	bd80      	pop	{r7, pc}
 801e80a:	bf00      	nop
 801e80c:	080272b4 	.word	0x080272b4
 801e810:	080273ac 	.word	0x080273ac
 801e814:	0802732c 	.word	0x0802732c
 801e818:	2000c0b4 	.word	0x2000c0b4

0801e81c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801e81c:	b580      	push	{r7, lr}
 801e81e:	b084      	sub	sp, #16
 801e820:	af00      	add	r7, sp, #0
 801e822:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e824:	2300      	movs	r3, #0
 801e826:	73fb      	strb	r3, [r7, #15]
 801e828:	e01f      	b.n	801e86a <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 801e82a:	7bfa      	ldrb	r2, [r7, #15]
 801e82c:	4913      	ldr	r1, [pc, #76]	@ (801e87c <etharp_cleanup_netif+0x60>)
 801e82e:	4613      	mov	r3, r2
 801e830:	005b      	lsls	r3, r3, #1
 801e832:	4413      	add	r3, r2
 801e834:	00db      	lsls	r3, r3, #3
 801e836:	440b      	add	r3, r1
 801e838:	3314      	adds	r3, #20
 801e83a:	781b      	ldrb	r3, [r3, #0]
 801e83c:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801e83e:	7bbb      	ldrb	r3, [r7, #14]
 801e840:	2b00      	cmp	r3, #0
 801e842:	d00f      	beq.n	801e864 <etharp_cleanup_netif+0x48>
 801e844:	7bfa      	ldrb	r2, [r7, #15]
 801e846:	490d      	ldr	r1, [pc, #52]	@ (801e87c <etharp_cleanup_netif+0x60>)
 801e848:	4613      	mov	r3, r2
 801e84a:	005b      	lsls	r3, r3, #1
 801e84c:	4413      	add	r3, r2
 801e84e:	00db      	lsls	r3, r3, #3
 801e850:	440b      	add	r3, r1
 801e852:	3308      	adds	r3, #8
 801e854:	681b      	ldr	r3, [r3, #0]
 801e856:	687a      	ldr	r2, [r7, #4]
 801e858:	429a      	cmp	r2, r3
 801e85a:	d103      	bne.n	801e864 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 801e85c:	7bfb      	ldrb	r3, [r7, #15]
 801e85e:	4618      	mov	r0, r3
 801e860:	f7ff fd12 	bl	801e288 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e864:	7bfb      	ldrb	r3, [r7, #15]
 801e866:	3301      	adds	r3, #1
 801e868:	73fb      	strb	r3, [r7, #15]
 801e86a:	7bfb      	ldrb	r3, [r7, #15]
 801e86c:	2b09      	cmp	r3, #9
 801e86e:	d9dc      	bls.n	801e82a <etharp_cleanup_netif+0xe>
    }
  }
}
 801e870:	bf00      	nop
 801e872:	bf00      	nop
 801e874:	3710      	adds	r7, #16
 801e876:	46bd      	mov	sp, r7
 801e878:	bd80      	pop	{r7, pc}
 801e87a:	bf00      	nop
 801e87c:	2000c0b4 	.word	0x2000c0b4

0801e880 <etharp_get_entry>:
 * @param eth_ret return value: ETH address
 * @return 1 on valid index, 0 otherwise
 */
u8_t
etharp_get_entry(u8_t i, ip4_addr_t **ipaddr, struct netif **netif, struct eth_addr **eth_ret)
{
 801e880:	b580      	push	{r7, lr}
 801e882:	b084      	sub	sp, #16
 801e884:	af00      	add	r7, sp, #0
 801e886:	60b9      	str	r1, [r7, #8]
 801e888:	607a      	str	r2, [r7, #4]
 801e88a:	603b      	str	r3, [r7, #0]
 801e88c:	4603      	mov	r3, r0
 801e88e:	73fb      	strb	r3, [r7, #15]
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801e890:	68bb      	ldr	r3, [r7, #8]
 801e892:	2b00      	cmp	r3, #0
 801e894:	d106      	bne.n	801e8a4 <etharp_get_entry+0x24>
 801e896:	4b28      	ldr	r3, [pc, #160]	@ (801e938 <etharp_get_entry+0xb8>)
 801e898:	f240 2266 	movw	r2, #614	@ 0x266
 801e89c:	4927      	ldr	r1, [pc, #156]	@ (801e93c <etharp_get_entry+0xbc>)
 801e89e:	4828      	ldr	r0, [pc, #160]	@ (801e940 <etharp_get_entry+0xc0>)
 801e8a0:	f003 f9f2 	bl	8021c88 <iprintf>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801e8a4:	687b      	ldr	r3, [r7, #4]
 801e8a6:	2b00      	cmp	r3, #0
 801e8a8:	d106      	bne.n	801e8b8 <etharp_get_entry+0x38>
 801e8aa:	4b23      	ldr	r3, [pc, #140]	@ (801e938 <etharp_get_entry+0xb8>)
 801e8ac:	f240 2267 	movw	r2, #615	@ 0x267
 801e8b0:	4924      	ldr	r1, [pc, #144]	@ (801e944 <etharp_get_entry+0xc4>)
 801e8b2:	4823      	ldr	r0, [pc, #140]	@ (801e940 <etharp_get_entry+0xc0>)
 801e8b4:	f003 f9e8 	bl	8021c88 <iprintf>
  LWIP_ASSERT("eth_ret != NULL", eth_ret != NULL);
 801e8b8:	683b      	ldr	r3, [r7, #0]
 801e8ba:	2b00      	cmp	r3, #0
 801e8bc:	d106      	bne.n	801e8cc <etharp_get_entry+0x4c>
 801e8be:	4b1e      	ldr	r3, [pc, #120]	@ (801e938 <etharp_get_entry+0xb8>)
 801e8c0:	f44f 721a 	mov.w	r2, #616	@ 0x268
 801e8c4:	4920      	ldr	r1, [pc, #128]	@ (801e948 <etharp_get_entry+0xc8>)
 801e8c6:	481e      	ldr	r0, [pc, #120]	@ (801e940 <etharp_get_entry+0xc0>)
 801e8c8:	f003 f9de 	bl	8021c88 <iprintf>

  if((i < ARP_TABLE_SIZE) && (arp_table[i].state >= ETHARP_STATE_STABLE)) {
 801e8cc:	7bfb      	ldrb	r3, [r7, #15]
 801e8ce:	2b09      	cmp	r3, #9
 801e8d0:	d82c      	bhi.n	801e92c <etharp_get_entry+0xac>
 801e8d2:	7bfa      	ldrb	r2, [r7, #15]
 801e8d4:	491d      	ldr	r1, [pc, #116]	@ (801e94c <etharp_get_entry+0xcc>)
 801e8d6:	4613      	mov	r3, r2
 801e8d8:	005b      	lsls	r3, r3, #1
 801e8da:	4413      	add	r3, r2
 801e8dc:	00db      	lsls	r3, r3, #3
 801e8de:	440b      	add	r3, r1
 801e8e0:	3314      	adds	r3, #20
 801e8e2:	781b      	ldrb	r3, [r3, #0]
 801e8e4:	2b01      	cmp	r3, #1
 801e8e6:	d921      	bls.n	801e92c <etharp_get_entry+0xac>
    *ipaddr  = &arp_table[i].ipaddr;
 801e8e8:	7bfa      	ldrb	r2, [r7, #15]
 801e8ea:	4613      	mov	r3, r2
 801e8ec:	005b      	lsls	r3, r3, #1
 801e8ee:	4413      	add	r3, r2
 801e8f0:	00db      	lsls	r3, r3, #3
 801e8f2:	4a16      	ldr	r2, [pc, #88]	@ (801e94c <etharp_get_entry+0xcc>)
 801e8f4:	4413      	add	r3, r2
 801e8f6:	1d1a      	adds	r2, r3, #4
 801e8f8:	68bb      	ldr	r3, [r7, #8]
 801e8fa:	601a      	str	r2, [r3, #0]
    *netif   = arp_table[i].netif;
 801e8fc:	7bfa      	ldrb	r2, [r7, #15]
 801e8fe:	4913      	ldr	r1, [pc, #76]	@ (801e94c <etharp_get_entry+0xcc>)
 801e900:	4613      	mov	r3, r2
 801e902:	005b      	lsls	r3, r3, #1
 801e904:	4413      	add	r3, r2
 801e906:	00db      	lsls	r3, r3, #3
 801e908:	440b      	add	r3, r1
 801e90a:	3308      	adds	r3, #8
 801e90c:	681a      	ldr	r2, [r3, #0]
 801e90e:	687b      	ldr	r3, [r7, #4]
 801e910:	601a      	str	r2, [r3, #0]
    *eth_ret = &arp_table[i].ethaddr;
 801e912:	7bfa      	ldrb	r2, [r7, #15]
 801e914:	4613      	mov	r3, r2
 801e916:	005b      	lsls	r3, r3, #1
 801e918:	4413      	add	r3, r2
 801e91a:	00db      	lsls	r3, r3, #3
 801e91c:	3308      	adds	r3, #8
 801e91e:	4a0b      	ldr	r2, [pc, #44]	@ (801e94c <etharp_get_entry+0xcc>)
 801e920:	4413      	add	r3, r2
 801e922:	1d1a      	adds	r2, r3, #4
 801e924:	683b      	ldr	r3, [r7, #0]
 801e926:	601a      	str	r2, [r3, #0]
    return 1;
 801e928:	2301      	movs	r3, #1
 801e92a:	e000      	b.n	801e92e <etharp_get_entry+0xae>
  } else {
    return 0;
 801e92c:	2300      	movs	r3, #0
  }
}
 801e92e:	4618      	mov	r0, r3
 801e930:	3710      	adds	r7, #16
 801e932:	46bd      	mov	sp, r7
 801e934:	bd80      	pop	{r7, pc}
 801e936:	bf00      	nop
 801e938:	080272b4 	.word	0x080272b4
 801e93c:	080273f4 	.word	0x080273f4
 801e940:	0802732c 	.word	0x0802732c
 801e944:	08027404 	.word	0x08027404
 801e948:	08027414 	.word	0x08027414
 801e94c:	2000c0b4 	.word	0x2000c0b4

0801e950 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801e950:	b5b0      	push	{r4, r5, r7, lr}
 801e952:	b08a      	sub	sp, #40	@ 0x28
 801e954:	af04      	add	r7, sp, #16
 801e956:	6078      	str	r0, [r7, #4]
 801e958:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801e95a:	683b      	ldr	r3, [r7, #0]
 801e95c:	2b00      	cmp	r3, #0
 801e95e:	d107      	bne.n	801e970 <etharp_input+0x20>
 801e960:	4b4c      	ldr	r3, [pc, #304]	@ (801ea94 <etharp_input+0x144>)
 801e962:	f44f 7222 	mov.w	r2, #648	@ 0x288
 801e966:	494c      	ldr	r1, [pc, #304]	@ (801ea98 <etharp_input+0x148>)
 801e968:	484c      	ldr	r0, [pc, #304]	@ (801ea9c <etharp_input+0x14c>)
 801e96a:	f003 f98d 	bl	8021c88 <iprintf>
 801e96e:	e08d      	b.n	801ea8c <etharp_input+0x13c>

  hdr = (struct etharp_hdr *)p->payload;
 801e970:	687b      	ldr	r3, [r7, #4]
 801e972:	685b      	ldr	r3, [r3, #4]
 801e974:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 801e976:	693b      	ldr	r3, [r7, #16]
 801e978:	881b      	ldrh	r3, [r3, #0]
 801e97a:	b29b      	uxth	r3, r3
 801e97c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e980:	d10c      	bne.n	801e99c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801e982:	693b      	ldr	r3, [r7, #16]
 801e984:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 801e986:	2b06      	cmp	r3, #6
 801e988:	d108      	bne.n	801e99c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801e98a:	693b      	ldr	r3, [r7, #16]
 801e98c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801e98e:	2b04      	cmp	r3, #4
 801e990:	d104      	bne.n	801e99c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801e992:	693b      	ldr	r3, [r7, #16]
 801e994:	885b      	ldrh	r3, [r3, #2]
 801e996:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801e998:	2b08      	cmp	r3, #8
 801e99a:	d00f      	beq.n	801e9bc <etharp_input+0x6c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
 801e99c:	4b40      	ldr	r3, [pc, #256]	@ (801eaa0 <etharp_input+0x150>)
 801e99e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801e9a0:	3301      	adds	r3, #1
 801e9a2:	b29a      	uxth	r2, r3
 801e9a4:	4b3e      	ldr	r3, [pc, #248]	@ (801eaa0 <etharp_input+0x150>)
 801e9a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    ETHARP_STATS_INC(etharp.drop);
 801e9a8:	4b3d      	ldr	r3, [pc, #244]	@ (801eaa0 <etharp_input+0x150>)
 801e9aa:	8bdb      	ldrh	r3, [r3, #30]
 801e9ac:	3301      	adds	r3, #1
 801e9ae:	b29a      	uxth	r2, r3
 801e9b0:	4b3b      	ldr	r3, [pc, #236]	@ (801eaa0 <etharp_input+0x150>)
 801e9b2:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 801e9b4:	6878      	ldr	r0, [r7, #4]
 801e9b6:	f7f7 f975 	bl	8015ca4 <pbuf_free>
    return;
 801e9ba:	e067      	b.n	801ea8c <etharp_input+0x13c>
  }
  ETHARP_STATS_INC(etharp.recv);
 801e9bc:	4b38      	ldr	r3, [pc, #224]	@ (801eaa0 <etharp_input+0x150>)
 801e9be:	8b5b      	ldrh	r3, [r3, #26]
 801e9c0:	3301      	adds	r3, #1
 801e9c2:	b29a      	uxth	r2, r3
 801e9c4:	4b36      	ldr	r3, [pc, #216]	@ (801eaa0 <etharp_input+0x150>)
 801e9c6:	835a      	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 801e9c8:	693b      	ldr	r3, [r7, #16]
 801e9ca:	330e      	adds	r3, #14
 801e9cc:	681b      	ldr	r3, [r3, #0]
 801e9ce:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 801e9d0:	693b      	ldr	r3, [r7, #16]
 801e9d2:	3318      	adds	r3, #24
 801e9d4:	681b      	ldr	r3, [r3, #0]
 801e9d6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801e9d8:	683b      	ldr	r3, [r7, #0]
 801e9da:	3304      	adds	r3, #4
 801e9dc:	681b      	ldr	r3, [r3, #0]
 801e9de:	2b00      	cmp	r3, #0
 801e9e0:	d102      	bne.n	801e9e8 <etharp_input+0x98>
    for_us = 0;
 801e9e2:	2300      	movs	r3, #0
 801e9e4:	75fb      	strb	r3, [r7, #23]
 801e9e6:	e009      	b.n	801e9fc <etharp_input+0xac>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801e9e8:	68ba      	ldr	r2, [r7, #8]
 801e9ea:	683b      	ldr	r3, [r7, #0]
 801e9ec:	3304      	adds	r3, #4
 801e9ee:	681b      	ldr	r3, [r3, #0]
 801e9f0:	429a      	cmp	r2, r3
 801e9f2:	bf0c      	ite	eq
 801e9f4:	2301      	moveq	r3, #1
 801e9f6:	2300      	movne	r3, #0
 801e9f8:	b2db      	uxtb	r3, r3
 801e9fa:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801e9fc:	693b      	ldr	r3, [r7, #16]
 801e9fe:	f103 0208 	add.w	r2, r3, #8
 801ea02:	7dfb      	ldrb	r3, [r7, #23]
 801ea04:	2b00      	cmp	r3, #0
 801ea06:	d001      	beq.n	801ea0c <etharp_input+0xbc>
 801ea08:	2301      	movs	r3, #1
 801ea0a:	e000      	b.n	801ea0e <etharp_input+0xbe>
 801ea0c:	2302      	movs	r3, #2
 801ea0e:	f107 010c 	add.w	r1, r7, #12
 801ea12:	6838      	ldr	r0, [r7, #0]
 801ea14:	f7ff fe5c 	bl	801e6d0 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801ea18:	693b      	ldr	r3, [r7, #16]
 801ea1a:	88db      	ldrh	r3, [r3, #6]
 801ea1c:	b29b      	uxth	r3, r3
 801ea1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ea22:	d003      	beq.n	801ea2c <etharp_input+0xdc>
 801ea24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ea28:	d01e      	beq.n	801ea68 <etharp_input+0x118>
 801ea2a:	e024      	b.n	801ea76 <etharp_input+0x126>
     * reply. In any case, we time-stamp any existing ARP entry,
     * and possibly send out an IP packet that was queued on it. */

    LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
    /* ARP request for our address? */
    if (for_us) {
 801ea2c:	7dfb      	ldrb	r3, [r7, #23]
 801ea2e:	2b00      	cmp	r3, #0
 801ea30:	d028      	beq.n	801ea84 <etharp_input+0x134>
      /* send ARP response */
      etharp_raw(netif,
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801ea32:	683b      	ldr	r3, [r7, #0]
 801ea34:	f103 002d 	add.w	r0, r3, #45	@ 0x2d
 801ea38:	693b      	ldr	r3, [r7, #16]
 801ea3a:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801ea3e:	683b      	ldr	r3, [r7, #0]
 801ea40:	f103 052d 	add.w	r5, r3, #45	@ 0x2d
 801ea44:	683b      	ldr	r3, [r7, #0]
 801ea46:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 801ea48:	693a      	ldr	r2, [r7, #16]
 801ea4a:	3208      	adds	r2, #8
      etharp_raw(netif,
 801ea4c:	2102      	movs	r1, #2
 801ea4e:	9103      	str	r1, [sp, #12]
 801ea50:	f107 010c 	add.w	r1, r7, #12
 801ea54:	9102      	str	r1, [sp, #8]
 801ea56:	9201      	str	r2, [sp, #4]
 801ea58:	9300      	str	r3, [sp, #0]
 801ea5a:	462b      	mov	r3, r5
 801ea5c:	4622      	mov	r2, r4
 801ea5e:	4601      	mov	r1, r0
 801ea60:	6838      	ldr	r0, [r7, #0]
 801ea62:	f000 fb09 	bl	801f078 <etharp_raw>
    /* request was not directed to us */
    } else {
      /* { for_us == 0 and netif->ip_addr.addr != 0 } */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
    }
    break;
 801ea66:	e00d      	b.n	801ea84 <etharp_input+0x134>
#if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
    /* DHCP wants to know about ARP replies from any host with an
     * IP address also offered to us by the DHCP server. We do not
     * want to take a duplicate IP address on a single network.
     * @todo How should we handle redundant (fail-over) interfaces? */
    dhcp_arp_reply(netif, &sipaddr);
 801ea68:	f107 030c 	add.w	r3, r7, #12
 801ea6c:	4619      	mov	r1, r3
 801ea6e:	6838      	ldr	r0, [r7, #0]
 801ea70:	f7fe f902 	bl	801cc78 <dhcp_arp_reply>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
 801ea74:	e007      	b.n	801ea86 <etharp_input+0x136>
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
 801ea76:	4b0a      	ldr	r3, [pc, #40]	@ (801eaa0 <etharp_input+0x150>)
 801ea78:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801ea7a:	3301      	adds	r3, #1
 801ea7c:	b29a      	uxth	r2, r3
 801ea7e:	4b08      	ldr	r3, [pc, #32]	@ (801eaa0 <etharp_input+0x150>)
 801ea80:	859a      	strh	r2, [r3, #44]	@ 0x2c
    break;
 801ea82:	e000      	b.n	801ea86 <etharp_input+0x136>
    break;
 801ea84:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801ea86:	6878      	ldr	r0, [r7, #4]
 801ea88:	f7f7 f90c 	bl	8015ca4 <pbuf_free>
}
 801ea8c:	3718      	adds	r7, #24
 801ea8e:	46bd      	mov	sp, r7
 801ea90:	bdb0      	pop	{r4, r5, r7, pc}
 801ea92:	bf00      	nop
 801ea94:	080272b4 	.word	0x080272b4
 801ea98:	08027404 	.word	0x08027404
 801ea9c:	0802732c 	.word	0x0802732c
 801eaa0:	2000be88 	.word	0x2000be88

0801eaa4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 801eaa4:	b580      	push	{r7, lr}
 801eaa6:	b086      	sub	sp, #24
 801eaa8:	af02      	add	r7, sp, #8
 801eaaa:	60f8      	str	r0, [r7, #12]
 801eaac:	60b9      	str	r1, [r7, #8]
 801eaae:	4613      	mov	r3, r2
 801eab0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801eab2:	79fa      	ldrb	r2, [r7, #7]
 801eab4:	4944      	ldr	r1, [pc, #272]	@ (801ebc8 <etharp_output_to_arp_index+0x124>)
 801eab6:	4613      	mov	r3, r2
 801eab8:	005b      	lsls	r3, r3, #1
 801eaba:	4413      	add	r3, r2
 801eabc:	00db      	lsls	r3, r3, #3
 801eabe:	440b      	add	r3, r1
 801eac0:	3314      	adds	r3, #20
 801eac2:	781b      	ldrb	r3, [r3, #0]
 801eac4:	2b01      	cmp	r3, #1
 801eac6:	d806      	bhi.n	801ead6 <etharp_output_to_arp_index+0x32>
 801eac8:	4b40      	ldr	r3, [pc, #256]	@ (801ebcc <etharp_output_to_arp_index+0x128>)
 801eaca:	f44f 723b 	mov.w	r2, #748	@ 0x2ec
 801eace:	4940      	ldr	r1, [pc, #256]	@ (801ebd0 <etharp_output_to_arp_index+0x12c>)
 801ead0:	4840      	ldr	r0, [pc, #256]	@ (801ebd4 <etharp_output_to_arp_index+0x130>)
 801ead2:	f003 f8d9 	bl	8021c88 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801ead6:	79fa      	ldrb	r2, [r7, #7]
 801ead8:	493b      	ldr	r1, [pc, #236]	@ (801ebc8 <etharp_output_to_arp_index+0x124>)
 801eada:	4613      	mov	r3, r2
 801eadc:	005b      	lsls	r3, r3, #1
 801eade:	4413      	add	r3, r2
 801eae0:	00db      	lsls	r3, r3, #3
 801eae2:	440b      	add	r3, r1
 801eae4:	3314      	adds	r3, #20
 801eae6:	781b      	ldrb	r3, [r3, #0]
 801eae8:	2b02      	cmp	r3, #2
 801eaea:	d153      	bne.n	801eb94 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801eaec:	79fa      	ldrb	r2, [r7, #7]
 801eaee:	4936      	ldr	r1, [pc, #216]	@ (801ebc8 <etharp_output_to_arp_index+0x124>)
 801eaf0:	4613      	mov	r3, r2
 801eaf2:	005b      	lsls	r3, r3, #1
 801eaf4:	4413      	add	r3, r2
 801eaf6:	00db      	lsls	r3, r3, #3
 801eaf8:	440b      	add	r3, r1
 801eafa:	3312      	adds	r3, #18
 801eafc:	881b      	ldrh	r3, [r3, #0]
 801eafe:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801eb02:	d919      	bls.n	801eb38 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801eb04:	79fa      	ldrb	r2, [r7, #7]
 801eb06:	4613      	mov	r3, r2
 801eb08:	005b      	lsls	r3, r3, #1
 801eb0a:	4413      	add	r3, r2
 801eb0c:	00db      	lsls	r3, r3, #3
 801eb0e:	4a2e      	ldr	r2, [pc, #184]	@ (801ebc8 <etharp_output_to_arp_index+0x124>)
 801eb10:	4413      	add	r3, r2
 801eb12:	3304      	adds	r3, #4
 801eb14:	4619      	mov	r1, r3
 801eb16:	68f8      	ldr	r0, [r7, #12]
 801eb18:	f000 fb6a 	bl	801f1f0 <etharp_request>
 801eb1c:	4603      	mov	r3, r0
 801eb1e:	2b00      	cmp	r3, #0
 801eb20:	d138      	bne.n	801eb94 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801eb22:	79fa      	ldrb	r2, [r7, #7]
 801eb24:	4928      	ldr	r1, [pc, #160]	@ (801ebc8 <etharp_output_to_arp_index+0x124>)
 801eb26:	4613      	mov	r3, r2
 801eb28:	005b      	lsls	r3, r3, #1
 801eb2a:	4413      	add	r3, r2
 801eb2c:	00db      	lsls	r3, r3, #3
 801eb2e:	440b      	add	r3, r1
 801eb30:	3314      	adds	r3, #20
 801eb32:	2203      	movs	r2, #3
 801eb34:	701a      	strb	r2, [r3, #0]
 801eb36:	e02d      	b.n	801eb94 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801eb38:	79fa      	ldrb	r2, [r7, #7]
 801eb3a:	4923      	ldr	r1, [pc, #140]	@ (801ebc8 <etharp_output_to_arp_index+0x124>)
 801eb3c:	4613      	mov	r3, r2
 801eb3e:	005b      	lsls	r3, r3, #1
 801eb40:	4413      	add	r3, r2
 801eb42:	00db      	lsls	r3, r3, #3
 801eb44:	440b      	add	r3, r1
 801eb46:	3312      	adds	r3, #18
 801eb48:	881b      	ldrh	r3, [r3, #0]
 801eb4a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801eb4e:	d321      	bcc.n	801eb94 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801eb50:	79fa      	ldrb	r2, [r7, #7]
 801eb52:	4613      	mov	r3, r2
 801eb54:	005b      	lsls	r3, r3, #1
 801eb56:	4413      	add	r3, r2
 801eb58:	00db      	lsls	r3, r3, #3
 801eb5a:	4a1b      	ldr	r2, [pc, #108]	@ (801ebc8 <etharp_output_to_arp_index+0x124>)
 801eb5c:	4413      	add	r3, r2
 801eb5e:	1d19      	adds	r1, r3, #4
 801eb60:	79fa      	ldrb	r2, [r7, #7]
 801eb62:	4613      	mov	r3, r2
 801eb64:	005b      	lsls	r3, r3, #1
 801eb66:	4413      	add	r3, r2
 801eb68:	00db      	lsls	r3, r3, #3
 801eb6a:	3308      	adds	r3, #8
 801eb6c:	4a16      	ldr	r2, [pc, #88]	@ (801ebc8 <etharp_output_to_arp_index+0x124>)
 801eb6e:	4413      	add	r3, r2
 801eb70:	3304      	adds	r3, #4
 801eb72:	461a      	mov	r2, r3
 801eb74:	68f8      	ldr	r0, [r7, #12]
 801eb76:	f000 fb19 	bl	801f1ac <etharp_request_dst>
 801eb7a:	4603      	mov	r3, r0
 801eb7c:	2b00      	cmp	r3, #0
 801eb7e:	d109      	bne.n	801eb94 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801eb80:	79fa      	ldrb	r2, [r7, #7]
 801eb82:	4911      	ldr	r1, [pc, #68]	@ (801ebc8 <etharp_output_to_arp_index+0x124>)
 801eb84:	4613      	mov	r3, r2
 801eb86:	005b      	lsls	r3, r3, #1
 801eb88:	4413      	add	r3, r2
 801eb8a:	00db      	lsls	r3, r3, #3
 801eb8c:	440b      	add	r3, r1
 801eb8e:	3314      	adds	r3, #20
 801eb90:	2203      	movs	r2, #3
 801eb92:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801eb94:	68fb      	ldr	r3, [r7, #12]
 801eb96:	f103 012d 	add.w	r1, r3, #45	@ 0x2d
 801eb9a:	79fa      	ldrb	r2, [r7, #7]
 801eb9c:	4613      	mov	r3, r2
 801eb9e:	005b      	lsls	r3, r3, #1
 801eba0:	4413      	add	r3, r2
 801eba2:	00db      	lsls	r3, r3, #3
 801eba4:	3308      	adds	r3, #8
 801eba6:	4a08      	ldr	r2, [pc, #32]	@ (801ebc8 <etharp_output_to_arp_index+0x124>)
 801eba8:	4413      	add	r3, r2
 801ebaa:	3304      	adds	r3, #4
 801ebac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801ebb0:	9200      	str	r2, [sp, #0]
 801ebb2:	460a      	mov	r2, r1
 801ebb4:	68b9      	ldr	r1, [r7, #8]
 801ebb6:	68f8      	ldr	r0, [r7, #12]
 801ebb8:	f002 fa28 	bl	802100c <ethernet_output>
 801ebbc:	4603      	mov	r3, r0
}
 801ebbe:	4618      	mov	r0, r3
 801ebc0:	3710      	adds	r7, #16
 801ebc2:	46bd      	mov	sp, r7
 801ebc4:	bd80      	pop	{r7, pc}
 801ebc6:	bf00      	nop
 801ebc8:	2000c0b4 	.word	0x2000c0b4
 801ebcc:	080272b4 	.word	0x080272b4
 801ebd0:	08027424 	.word	0x08027424
 801ebd4:	0802732c 	.word	0x0802732c

0801ebd8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801ebd8:	b580      	push	{r7, lr}
 801ebda:	b08a      	sub	sp, #40	@ 0x28
 801ebdc:	af02      	add	r7, sp, #8
 801ebde:	60f8      	str	r0, [r7, #12]
 801ebe0:	60b9      	str	r1, [r7, #8]
 801ebe2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801ebe4:	687b      	ldr	r3, [r7, #4]
 801ebe6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801ebe8:	68fb      	ldr	r3, [r7, #12]
 801ebea:	2b00      	cmp	r3, #0
 801ebec:	d106      	bne.n	801ebfc <etharp_output+0x24>
 801ebee:	4b6c      	ldr	r3, [pc, #432]	@ (801eda0 <etharp_output+0x1c8>)
 801ebf0:	f240 321b 	movw	r2, #795	@ 0x31b
 801ebf4:	496b      	ldr	r1, [pc, #428]	@ (801eda4 <etharp_output+0x1cc>)
 801ebf6:	486c      	ldr	r0, [pc, #432]	@ (801eda8 <etharp_output+0x1d0>)
 801ebf8:	f003 f846 	bl	8021c88 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801ebfc:	68bb      	ldr	r3, [r7, #8]
 801ebfe:	2b00      	cmp	r3, #0
 801ec00:	d106      	bne.n	801ec10 <etharp_output+0x38>
 801ec02:	4b67      	ldr	r3, [pc, #412]	@ (801eda0 <etharp_output+0x1c8>)
 801ec04:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 801ec08:	4968      	ldr	r1, [pc, #416]	@ (801edac <etharp_output+0x1d4>)
 801ec0a:	4867      	ldr	r0, [pc, #412]	@ (801eda8 <etharp_output+0x1d0>)
 801ec0c:	f003 f83c 	bl	8021c88 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801ec10:	687b      	ldr	r3, [r7, #4]
 801ec12:	2b00      	cmp	r3, #0
 801ec14:	d106      	bne.n	801ec24 <etharp_output+0x4c>
 801ec16:	4b62      	ldr	r3, [pc, #392]	@ (801eda0 <etharp_output+0x1c8>)
 801ec18:	f240 321d 	movw	r2, #797	@ 0x31d
 801ec1c:	4964      	ldr	r1, [pc, #400]	@ (801edb0 <etharp_output+0x1d8>)
 801ec1e:	4862      	ldr	r0, [pc, #392]	@ (801eda8 <etharp_output+0x1d0>)
 801ec20:	f003 f832 	bl	8021c88 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801ec24:	687b      	ldr	r3, [r7, #4]
 801ec26:	681b      	ldr	r3, [r3, #0]
 801ec28:	68f9      	ldr	r1, [r7, #12]
 801ec2a:	4618      	mov	r0, r3
 801ec2c:	f001 f8e0 	bl	801fdf0 <ip4_addr_isbroadcast_u32>
 801ec30:	4603      	mov	r3, r0
 801ec32:	2b00      	cmp	r3, #0
 801ec34:	d002      	beq.n	801ec3c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801ec36:	4b5f      	ldr	r3, [pc, #380]	@ (801edb4 <etharp_output+0x1dc>)
 801ec38:	61fb      	str	r3, [r7, #28]
 801ec3a:	e0a1      	b.n	801ed80 <etharp_output+0x1a8>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801ec3c:	687b      	ldr	r3, [r7, #4]
 801ec3e:	681b      	ldr	r3, [r3, #0]
 801ec40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801ec44:	2be0      	cmp	r3, #224	@ 0xe0
 801ec46:	d118      	bne.n	801ec7a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801ec48:	2301      	movs	r3, #1
 801ec4a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801ec4c:	2300      	movs	r3, #0
 801ec4e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801ec50:	235e      	movs	r3, #94	@ 0x5e
 801ec52:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801ec54:	687b      	ldr	r3, [r7, #4]
 801ec56:	3301      	adds	r3, #1
 801ec58:	781b      	ldrb	r3, [r3, #0]
 801ec5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ec5e:	b2db      	uxtb	r3, r3
 801ec60:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801ec62:	687b      	ldr	r3, [r7, #4]
 801ec64:	3302      	adds	r3, #2
 801ec66:	781b      	ldrb	r3, [r3, #0]
 801ec68:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801ec6a:	687b      	ldr	r3, [r7, #4]
 801ec6c:	3303      	adds	r3, #3
 801ec6e:	781b      	ldrb	r3, [r3, #0]
 801ec70:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801ec72:	f107 0310 	add.w	r3, r7, #16
 801ec76:	61fb      	str	r3, [r7, #28]
 801ec78:	e082      	b.n	801ed80 <etharp_output+0x1a8>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801ec7a:	687b      	ldr	r3, [r7, #4]
 801ec7c:	681a      	ldr	r2, [r3, #0]
 801ec7e:	68fb      	ldr	r3, [r7, #12]
 801ec80:	3304      	adds	r3, #4
 801ec82:	681b      	ldr	r3, [r3, #0]
 801ec84:	405a      	eors	r2, r3
 801ec86:	68fb      	ldr	r3, [r7, #12]
 801ec88:	3308      	adds	r3, #8
 801ec8a:	681b      	ldr	r3, [r3, #0]
 801ec8c:	4013      	ands	r3, r2
 801ec8e:	2b00      	cmp	r3, #0
 801ec90:	d012      	beq.n	801ecb8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801ec92:	687b      	ldr	r3, [r7, #4]
 801ec94:	681b      	ldr	r3, [r3, #0]
 801ec96:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801ec98:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801ec9c:	4293      	cmp	r3, r2
 801ec9e:	d00b      	beq.n	801ecb8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801eca0:	68fb      	ldr	r3, [r7, #12]
 801eca2:	330c      	adds	r3, #12
 801eca4:	681b      	ldr	r3, [r3, #0]
 801eca6:	2b00      	cmp	r3, #0
 801eca8:	d003      	beq.n	801ecb2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801ecaa:	68fb      	ldr	r3, [r7, #12]
 801ecac:	330c      	adds	r3, #12
 801ecae:	61bb      	str	r3, [r7, #24]
 801ecb0:	e002      	b.n	801ecb8 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801ecb2:	f06f 0303 	mvn.w	r3, #3
 801ecb6:	e06f      	b.n	801ed98 <etharp_output+0x1c0>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801ecb8:	4b3f      	ldr	r3, [pc, #252]	@ (801edb8 <etharp_output+0x1e0>)
 801ecba:	781b      	ldrb	r3, [r3, #0]
 801ecbc:	4619      	mov	r1, r3
 801ecbe:	4a3f      	ldr	r2, [pc, #252]	@ (801edbc <etharp_output+0x1e4>)
 801ecc0:	460b      	mov	r3, r1
 801ecc2:	005b      	lsls	r3, r3, #1
 801ecc4:	440b      	add	r3, r1
 801ecc6:	00db      	lsls	r3, r3, #3
 801ecc8:	4413      	add	r3, r2
 801ecca:	3314      	adds	r3, #20
 801eccc:	781b      	ldrb	r3, [r3, #0]
 801ecce:	2b01      	cmp	r3, #1
 801ecd0:	d91d      	bls.n	801ed0e <etharp_output+0x136>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801ecd2:	69bb      	ldr	r3, [r7, #24]
 801ecd4:	681a      	ldr	r2, [r3, #0]
 801ecd6:	4b38      	ldr	r3, [pc, #224]	@ (801edb8 <etharp_output+0x1e0>)
 801ecd8:	781b      	ldrb	r3, [r3, #0]
 801ecda:	4618      	mov	r0, r3
 801ecdc:	4937      	ldr	r1, [pc, #220]	@ (801edbc <etharp_output+0x1e4>)
 801ecde:	4603      	mov	r3, r0
 801ece0:	005b      	lsls	r3, r3, #1
 801ece2:	4403      	add	r3, r0
 801ece4:	00db      	lsls	r3, r3, #3
 801ece6:	440b      	add	r3, r1
 801ece8:	3304      	adds	r3, #4
 801ecea:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801ecec:	429a      	cmp	r2, r3
 801ecee:	d10e      	bne.n	801ed0e <etharp_output+0x136>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
 801ecf0:	4b33      	ldr	r3, [pc, #204]	@ (801edc0 <etharp_output+0x1e8>)
 801ecf2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 801ecf4:	3301      	adds	r3, #1
 801ecf6:	b29a      	uxth	r2, r3
 801ecf8:	4b31      	ldr	r3, [pc, #196]	@ (801edc0 <etharp_output+0x1e8>)
 801ecfa:	85da      	strh	r2, [r3, #46]	@ 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801ecfc:	4b2e      	ldr	r3, [pc, #184]	@ (801edb8 <etharp_output+0x1e0>)
 801ecfe:	781b      	ldrb	r3, [r3, #0]
 801ed00:	461a      	mov	r2, r3
 801ed02:	68b9      	ldr	r1, [r7, #8]
 801ed04:	68f8      	ldr	r0, [r7, #12]
 801ed06:	f7ff fecd 	bl	801eaa4 <etharp_output_to_arp_index>
 801ed0a:	4603      	mov	r3, r0
 801ed0c:	e044      	b.n	801ed98 <etharp_output+0x1c0>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801ed0e:	2300      	movs	r3, #0
 801ed10:	75fb      	strb	r3, [r7, #23]
 801ed12:	e02a      	b.n	801ed6a <etharp_output+0x192>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801ed14:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801ed18:	4928      	ldr	r1, [pc, #160]	@ (801edbc <etharp_output+0x1e4>)
 801ed1a:	4613      	mov	r3, r2
 801ed1c:	005b      	lsls	r3, r3, #1
 801ed1e:	4413      	add	r3, r2
 801ed20:	00db      	lsls	r3, r3, #3
 801ed22:	440b      	add	r3, r1
 801ed24:	3314      	adds	r3, #20
 801ed26:	781b      	ldrb	r3, [r3, #0]
 801ed28:	2b01      	cmp	r3, #1
 801ed2a:	d918      	bls.n	801ed5e <etharp_output+0x186>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801ed2c:	69bb      	ldr	r3, [r7, #24]
 801ed2e:	6819      	ldr	r1, [r3, #0]
 801ed30:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801ed34:	4821      	ldr	r0, [pc, #132]	@ (801edbc <etharp_output+0x1e4>)
 801ed36:	4613      	mov	r3, r2
 801ed38:	005b      	lsls	r3, r3, #1
 801ed3a:	4413      	add	r3, r2
 801ed3c:	00db      	lsls	r3, r3, #3
 801ed3e:	4403      	add	r3, r0
 801ed40:	3304      	adds	r3, #4
 801ed42:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801ed44:	4299      	cmp	r1, r3
 801ed46:	d10a      	bne.n	801ed5e <etharp_output+0x186>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 801ed48:	7dfa      	ldrb	r2, [r7, #23]
 801ed4a:	4b1b      	ldr	r3, [pc, #108]	@ (801edb8 <etharp_output+0x1e0>)
 801ed4c:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801ed4e:	7dfb      	ldrb	r3, [r7, #23]
 801ed50:	461a      	mov	r2, r3
 801ed52:	68b9      	ldr	r1, [r7, #8]
 801ed54:	68f8      	ldr	r0, [r7, #12]
 801ed56:	f7ff fea5 	bl	801eaa4 <etharp_output_to_arp_index>
 801ed5a:	4603      	mov	r3, r0
 801ed5c:	e01c      	b.n	801ed98 <etharp_output+0x1c0>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801ed5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801ed62:	b2db      	uxtb	r3, r3
 801ed64:	3301      	adds	r3, #1
 801ed66:	b2db      	uxtb	r3, r3
 801ed68:	75fb      	strb	r3, [r7, #23]
 801ed6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801ed6e:	2b09      	cmp	r3, #9
 801ed70:	ddd0      	ble.n	801ed14 <etharp_output+0x13c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801ed72:	68ba      	ldr	r2, [r7, #8]
 801ed74:	69b9      	ldr	r1, [r7, #24]
 801ed76:	68f8      	ldr	r0, [r7, #12]
 801ed78:	f000 f824 	bl	801edc4 <etharp_query>
 801ed7c:	4603      	mov	r3, r0
 801ed7e:	e00b      	b.n	801ed98 <etharp_output+0x1c0>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 801ed80:	68fb      	ldr	r3, [r7, #12]
 801ed82:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 801ed86:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801ed8a:	9300      	str	r3, [sp, #0]
 801ed8c:	69fb      	ldr	r3, [r7, #28]
 801ed8e:	68b9      	ldr	r1, [r7, #8]
 801ed90:	68f8      	ldr	r0, [r7, #12]
 801ed92:	f002 f93b 	bl	802100c <ethernet_output>
 801ed96:	4603      	mov	r3, r0
}
 801ed98:	4618      	mov	r0, r3
 801ed9a:	3720      	adds	r7, #32
 801ed9c:	46bd      	mov	sp, r7
 801ed9e:	bd80      	pop	{r7, pc}
 801eda0:	080272b4 	.word	0x080272b4
 801eda4:	08027404 	.word	0x08027404
 801eda8:	0802732c 	.word	0x0802732c
 801edac:	08027454 	.word	0x08027454
 801edb0:	080273f4 	.word	0x080273f4
 801edb4:	08030cfc 	.word	0x08030cfc
 801edb8:	2000c1a4 	.word	0x2000c1a4
 801edbc:	2000c0b4 	.word	0x2000c0b4
 801edc0:	2000be88 	.word	0x2000be88

0801edc4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801edc4:	b580      	push	{r7, lr}
 801edc6:	b08c      	sub	sp, #48	@ 0x30
 801edc8:	af02      	add	r7, sp, #8
 801edca:	60f8      	str	r0, [r7, #12]
 801edcc:	60b9      	str	r1, [r7, #8]
 801edce:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 801edd0:	68fb      	ldr	r3, [r7, #12]
 801edd2:	332d      	adds	r3, #45	@ 0x2d
 801edd4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801edd6:	23ff      	movs	r3, #255	@ 0xff
 801edd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801eddc:	2300      	movs	r3, #0
 801edde:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801ede0:	68bb      	ldr	r3, [r7, #8]
 801ede2:	681b      	ldr	r3, [r3, #0]
 801ede4:	68f9      	ldr	r1, [r7, #12]
 801ede6:	4618      	mov	r0, r3
 801ede8:	f001 f802 	bl	801fdf0 <ip4_addr_isbroadcast_u32>
 801edec:	4603      	mov	r3, r0
 801edee:	2b00      	cmp	r3, #0
 801edf0:	d10c      	bne.n	801ee0c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801edf2:	68bb      	ldr	r3, [r7, #8]
 801edf4:	681b      	ldr	r3, [r3, #0]
 801edf6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801edfa:	2be0      	cmp	r3, #224	@ 0xe0
 801edfc:	d006      	beq.n	801ee0c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801edfe:	68bb      	ldr	r3, [r7, #8]
 801ee00:	2b00      	cmp	r3, #0
 801ee02:	d003      	beq.n	801ee0c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801ee04:	68bb      	ldr	r3, [r7, #8]
 801ee06:	681b      	ldr	r3, [r3, #0]
 801ee08:	2b00      	cmp	r3, #0
 801ee0a:	d102      	bne.n	801ee12 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801ee0c:	f06f 030f 	mvn.w	r3, #15
 801ee10:	e11d      	b.n	801f04e <etharp_query+0x28a>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801ee12:	68fa      	ldr	r2, [r7, #12]
 801ee14:	2101      	movs	r1, #1
 801ee16:	68b8      	ldr	r0, [r7, #8]
 801ee18:	f7ff fb10 	bl	801e43c <etharp_find_entry>
 801ee1c:	4603      	mov	r3, r0
 801ee1e:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 801ee20:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801ee24:	2b00      	cmp	r3, #0
 801ee26:	da0b      	bge.n	801ee40 <etharp_query+0x7c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
 801ee28:	687b      	ldr	r3, [r7, #4]
 801ee2a:	2b00      	cmp	r3, #0
 801ee2c:	d005      	beq.n	801ee3a <etharp_query+0x76>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
 801ee2e:	4b8a      	ldr	r3, [pc, #552]	@ (801f058 <etharp_query+0x294>)
 801ee30:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801ee32:	3301      	adds	r3, #1
 801ee34:	b29a      	uxth	r2, r3
 801ee36:	4b88      	ldr	r3, [pc, #544]	@ (801f058 <etharp_query+0x294>)
 801ee38:	849a      	strh	r2, [r3, #36]	@ 0x24
    }
    return (err_t)i;
 801ee3a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801ee3e:	e106      	b.n	801f04e <etharp_query+0x28a>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801ee40:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801ee44:	4985      	ldr	r1, [pc, #532]	@ (801f05c <etharp_query+0x298>)
 801ee46:	4613      	mov	r3, r2
 801ee48:	005b      	lsls	r3, r3, #1
 801ee4a:	4413      	add	r3, r2
 801ee4c:	00db      	lsls	r3, r3, #3
 801ee4e:	440b      	add	r3, r1
 801ee50:	3314      	adds	r3, #20
 801ee52:	781b      	ldrb	r3, [r3, #0]
 801ee54:	2b00      	cmp	r3, #0
 801ee56:	d117      	bne.n	801ee88 <etharp_query+0xc4>
    is_new_entry = 1;
 801ee58:	2301      	movs	r3, #1
 801ee5a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801ee5c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801ee60:	497e      	ldr	r1, [pc, #504]	@ (801f05c <etharp_query+0x298>)
 801ee62:	4613      	mov	r3, r2
 801ee64:	005b      	lsls	r3, r3, #1
 801ee66:	4413      	add	r3, r2
 801ee68:	00db      	lsls	r3, r3, #3
 801ee6a:	440b      	add	r3, r1
 801ee6c:	3314      	adds	r3, #20
 801ee6e:	2201      	movs	r2, #1
 801ee70:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801ee72:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801ee76:	4979      	ldr	r1, [pc, #484]	@ (801f05c <etharp_query+0x298>)
 801ee78:	4613      	mov	r3, r2
 801ee7a:	005b      	lsls	r3, r3, #1
 801ee7c:	4413      	add	r3, r2
 801ee7e:	00db      	lsls	r3, r3, #3
 801ee80:	440b      	add	r3, r1
 801ee82:	3308      	adds	r3, #8
 801ee84:	68fa      	ldr	r2, [r7, #12]
 801ee86:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801ee88:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801ee8c:	4973      	ldr	r1, [pc, #460]	@ (801f05c <etharp_query+0x298>)
 801ee8e:	4613      	mov	r3, r2
 801ee90:	005b      	lsls	r3, r3, #1
 801ee92:	4413      	add	r3, r2
 801ee94:	00db      	lsls	r3, r3, #3
 801ee96:	440b      	add	r3, r1
 801ee98:	3314      	adds	r3, #20
 801ee9a:	781b      	ldrb	r3, [r3, #0]
 801ee9c:	2b01      	cmp	r3, #1
 801ee9e:	d012      	beq.n	801eec6 <etharp_query+0x102>
 801eea0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801eea4:	496d      	ldr	r1, [pc, #436]	@ (801f05c <etharp_query+0x298>)
 801eea6:	4613      	mov	r3, r2
 801eea8:	005b      	lsls	r3, r3, #1
 801eeaa:	4413      	add	r3, r2
 801eeac:	00db      	lsls	r3, r3, #3
 801eeae:	440b      	add	r3, r1
 801eeb0:	3314      	adds	r3, #20
 801eeb2:	781b      	ldrb	r3, [r3, #0]
 801eeb4:	2b01      	cmp	r3, #1
 801eeb6:	d806      	bhi.n	801eec6 <etharp_query+0x102>
 801eeb8:	4b69      	ldr	r3, [pc, #420]	@ (801f060 <etharp_query+0x29c>)
 801eeba:	f240 32c7 	movw	r2, #967	@ 0x3c7
 801eebe:	4969      	ldr	r1, [pc, #420]	@ (801f064 <etharp_query+0x2a0>)
 801eec0:	4869      	ldr	r0, [pc, #420]	@ (801f068 <etharp_query+0x2a4>)
 801eec2:	f002 fee1 	bl	8021c88 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801eec6:	6a3b      	ldr	r3, [r7, #32]
 801eec8:	2b00      	cmp	r3, #0
 801eeca:	d102      	bne.n	801eed2 <etharp_query+0x10e>
 801eecc:	687b      	ldr	r3, [r7, #4]
 801eece:	2b00      	cmp	r3, #0
 801eed0:	d10c      	bne.n	801eeec <etharp_query+0x128>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801eed2:	68b9      	ldr	r1, [r7, #8]
 801eed4:	68f8      	ldr	r0, [r7, #12]
 801eed6:	f000 f98b 	bl	801f1f0 <etharp_request>
 801eeda:	4603      	mov	r3, r0
 801eedc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801eee0:	687b      	ldr	r3, [r7, #4]
 801eee2:	2b00      	cmp	r3, #0
 801eee4:	d102      	bne.n	801eeec <etharp_query+0x128>
      return result;
 801eee6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801eeea:	e0b0      	b.n	801f04e <etharp_query+0x28a>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801eeec:	687b      	ldr	r3, [r7, #4]
 801eeee:	2b00      	cmp	r3, #0
 801eef0:	d106      	bne.n	801ef00 <etharp_query+0x13c>
 801eef2:	4b5b      	ldr	r3, [pc, #364]	@ (801f060 <etharp_query+0x29c>)
 801eef4:	f240 32db 	movw	r2, #987	@ 0x3db
 801eef8:	495c      	ldr	r1, [pc, #368]	@ (801f06c <etharp_query+0x2a8>)
 801eefa:	485b      	ldr	r0, [pc, #364]	@ (801f068 <etharp_query+0x2a4>)
 801eefc:	f002 fec4 	bl	8021c88 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801ef00:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801ef04:	4955      	ldr	r1, [pc, #340]	@ (801f05c <etharp_query+0x298>)
 801ef06:	4613      	mov	r3, r2
 801ef08:	005b      	lsls	r3, r3, #1
 801ef0a:	4413      	add	r3, r2
 801ef0c:	00db      	lsls	r3, r3, #3
 801ef0e:	440b      	add	r3, r1
 801ef10:	3314      	adds	r3, #20
 801ef12:	781b      	ldrb	r3, [r3, #0]
 801ef14:	2b01      	cmp	r3, #1
 801ef16:	d918      	bls.n	801ef4a <etharp_query+0x186>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 801ef18:	7cfa      	ldrb	r2, [r7, #19]
 801ef1a:	4b55      	ldr	r3, [pc, #340]	@ (801f070 <etharp_query+0x2ac>)
 801ef1c:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801ef1e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801ef22:	4613      	mov	r3, r2
 801ef24:	005b      	lsls	r3, r3, #1
 801ef26:	4413      	add	r3, r2
 801ef28:	00db      	lsls	r3, r3, #3
 801ef2a:	3308      	adds	r3, #8
 801ef2c:	4a4b      	ldr	r2, [pc, #300]	@ (801f05c <etharp_query+0x298>)
 801ef2e:	4413      	add	r3, r2
 801ef30:	3304      	adds	r3, #4
 801ef32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801ef36:	9200      	str	r2, [sp, #0]
 801ef38:	697a      	ldr	r2, [r7, #20]
 801ef3a:	6879      	ldr	r1, [r7, #4]
 801ef3c:	68f8      	ldr	r0, [r7, #12]
 801ef3e:	f002 f865 	bl	802100c <ethernet_output>
 801ef42:	4603      	mov	r3, r0
 801ef44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801ef48:	e07f      	b.n	801f04a <etharp_query+0x286>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801ef4a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801ef4e:	4943      	ldr	r1, [pc, #268]	@ (801f05c <etharp_query+0x298>)
 801ef50:	4613      	mov	r3, r2
 801ef52:	005b      	lsls	r3, r3, #1
 801ef54:	4413      	add	r3, r2
 801ef56:	00db      	lsls	r3, r3, #3
 801ef58:	440b      	add	r3, r1
 801ef5a:	3314      	adds	r3, #20
 801ef5c:	781b      	ldrb	r3, [r3, #0]
 801ef5e:	2b01      	cmp	r3, #1
 801ef60:	d173      	bne.n	801f04a <etharp_query+0x286>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801ef62:	2300      	movs	r3, #0
 801ef64:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 801ef66:	687b      	ldr	r3, [r7, #4]
 801ef68:	61fb      	str	r3, [r7, #28]
    while (p) {
 801ef6a:	e01a      	b.n	801efa2 <etharp_query+0x1de>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801ef6c:	69fb      	ldr	r3, [r7, #28]
 801ef6e:	895a      	ldrh	r2, [r3, #10]
 801ef70:	69fb      	ldr	r3, [r7, #28]
 801ef72:	891b      	ldrh	r3, [r3, #8]
 801ef74:	429a      	cmp	r2, r3
 801ef76:	d10a      	bne.n	801ef8e <etharp_query+0x1ca>
 801ef78:	69fb      	ldr	r3, [r7, #28]
 801ef7a:	681b      	ldr	r3, [r3, #0]
 801ef7c:	2b00      	cmp	r3, #0
 801ef7e:	d006      	beq.n	801ef8e <etharp_query+0x1ca>
 801ef80:	4b37      	ldr	r3, [pc, #220]	@ (801f060 <etharp_query+0x29c>)
 801ef82:	f44f 727b 	mov.w	r2, #1004	@ 0x3ec
 801ef86:	493b      	ldr	r1, [pc, #236]	@ (801f074 <etharp_query+0x2b0>)
 801ef88:	4837      	ldr	r0, [pc, #220]	@ (801f068 <etharp_query+0x2a4>)
 801ef8a:	f002 fe7d 	bl	8021c88 <iprintf>
      if (p->type != PBUF_ROM) {
 801ef8e:	69fb      	ldr	r3, [r7, #28]
 801ef90:	7b1b      	ldrb	r3, [r3, #12]
 801ef92:	2b01      	cmp	r3, #1
 801ef94:	d002      	beq.n	801ef9c <etharp_query+0x1d8>
        copy_needed = 1;
 801ef96:	2301      	movs	r3, #1
 801ef98:	61bb      	str	r3, [r7, #24]
        break;
 801ef9a:	e005      	b.n	801efa8 <etharp_query+0x1e4>
      }
      p = p->next;
 801ef9c:	69fb      	ldr	r3, [r7, #28]
 801ef9e:	681b      	ldr	r3, [r3, #0]
 801efa0:	61fb      	str	r3, [r7, #28]
    while (p) {
 801efa2:	69fb      	ldr	r3, [r7, #28]
 801efa4:	2b00      	cmp	r3, #0
 801efa6:	d1e1      	bne.n	801ef6c <etharp_query+0x1a8>
    }
    if (copy_needed) {
 801efa8:	69bb      	ldr	r3, [r7, #24]
 801efaa:	2b00      	cmp	r3, #0
 801efac:	d017      	beq.n	801efde <etharp_query+0x21a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 801efae:	69fb      	ldr	r3, [r7, #28]
 801efb0:	891b      	ldrh	r3, [r3, #8]
 801efb2:	2200      	movs	r2, #0
 801efb4:	4619      	mov	r1, r3
 801efb6:	2002      	movs	r0, #2
 801efb8:	f7f6 fafc 	bl	80155b4 <pbuf_alloc>
 801efbc:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 801efbe:	69fb      	ldr	r3, [r7, #28]
 801efc0:	2b00      	cmp	r3, #0
 801efc2:	d011      	beq.n	801efe8 <etharp_query+0x224>
        if (pbuf_copy(p, q) != ERR_OK) {
 801efc4:	6879      	ldr	r1, [r7, #4]
 801efc6:	69f8      	ldr	r0, [r7, #28]
 801efc8:	f7f6 ff9e 	bl	8015f08 <pbuf_copy>
 801efcc:	4603      	mov	r3, r0
 801efce:	2b00      	cmp	r3, #0
 801efd0:	d00a      	beq.n	801efe8 <etharp_query+0x224>
          pbuf_free(p);
 801efd2:	69f8      	ldr	r0, [r7, #28]
 801efd4:	f7f6 fe66 	bl	8015ca4 <pbuf_free>
          p = NULL;
 801efd8:	2300      	movs	r3, #0
 801efda:	61fb      	str	r3, [r7, #28]
 801efdc:	e004      	b.n	801efe8 <etharp_query+0x224>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801efde:	687b      	ldr	r3, [r7, #4]
 801efe0:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801efe2:	69f8      	ldr	r0, [r7, #28]
 801efe4:	f7f6 ff08 	bl	8015df8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801efe8:	69fb      	ldr	r3, [r7, #28]
 801efea:	2b00      	cmp	r3, #0
 801efec:	d024      	beq.n	801f038 <etharp_query+0x274>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801efee:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801eff2:	491a      	ldr	r1, [pc, #104]	@ (801f05c <etharp_query+0x298>)
 801eff4:	4613      	mov	r3, r2
 801eff6:	005b      	lsls	r3, r3, #1
 801eff8:	4413      	add	r3, r2
 801effa:	00db      	lsls	r3, r3, #3
 801effc:	440b      	add	r3, r1
 801effe:	681b      	ldr	r3, [r3, #0]
 801f000:	2b00      	cmp	r3, #0
 801f002:	d00b      	beq.n	801f01c <etharp_query+0x258>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 801f004:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801f008:	4914      	ldr	r1, [pc, #80]	@ (801f05c <etharp_query+0x298>)
 801f00a:	4613      	mov	r3, r2
 801f00c:	005b      	lsls	r3, r3, #1
 801f00e:	4413      	add	r3, r2
 801f010:	00db      	lsls	r3, r3, #3
 801f012:	440b      	add	r3, r1
 801f014:	681b      	ldr	r3, [r3, #0]
 801f016:	4618      	mov	r0, r3
 801f018:	f7f6 fe44 	bl	8015ca4 <pbuf_free>
      }
      arp_table[i].q = p;
 801f01c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801f020:	490e      	ldr	r1, [pc, #56]	@ (801f05c <etharp_query+0x298>)
 801f022:	4613      	mov	r3, r2
 801f024:	005b      	lsls	r3, r3, #1
 801f026:	4413      	add	r3, r2
 801f028:	00db      	lsls	r3, r3, #3
 801f02a:	440b      	add	r3, r1
 801f02c:	69fa      	ldr	r2, [r7, #28]
 801f02e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801f030:	2300      	movs	r3, #0
 801f032:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801f036:	e008      	b.n	801f04a <etharp_query+0x286>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
 801f038:	4b07      	ldr	r3, [pc, #28]	@ (801f058 <etharp_query+0x294>)
 801f03a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801f03c:	3301      	adds	r3, #1
 801f03e:	b29a      	uxth	r2, r3
 801f040:	4b05      	ldr	r3, [pc, #20]	@ (801f058 <etharp_query+0x294>)
 801f042:	849a      	strh	r2, [r3, #36]	@ 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801f044:	23ff      	movs	r3, #255	@ 0xff
 801f046:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801f04a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801f04e:	4618      	mov	r0, r3
 801f050:	3728      	adds	r7, #40	@ 0x28
 801f052:	46bd      	mov	sp, r7
 801f054:	bd80      	pop	{r7, pc}
 801f056:	bf00      	nop
 801f058:	2000be88 	.word	0x2000be88
 801f05c:	2000c0b4 	.word	0x2000c0b4
 801f060:	080272b4 	.word	0x080272b4
 801f064:	08027460 	.word	0x08027460
 801f068:	0802732c 	.word	0x0802732c
 801f06c:	08027454 	.word	0x08027454
 801f070:	2000c1a4 	.word	0x2000c1a4
 801f074:	08027488 	.word	0x08027488

0801f078 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801f078:	b580      	push	{r7, lr}
 801f07a:	b08a      	sub	sp, #40	@ 0x28
 801f07c:	af02      	add	r7, sp, #8
 801f07e:	60f8      	str	r0, [r7, #12]
 801f080:	60b9      	str	r1, [r7, #8]
 801f082:	607a      	str	r2, [r7, #4]
 801f084:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801f086:	2300      	movs	r3, #0
 801f088:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801f08a:	68fb      	ldr	r3, [r7, #12]
 801f08c:	2b00      	cmp	r3, #0
 801f08e:	d106      	bne.n	801f09e <etharp_raw+0x26>
 801f090:	4b40      	ldr	r3, [pc, #256]	@ (801f194 <etharp_raw+0x11c>)
 801f092:	f44f 628b 	mov.w	r2, #1112	@ 0x458
 801f096:	4940      	ldr	r1, [pc, #256]	@ (801f198 <etharp_raw+0x120>)
 801f098:	4840      	ldr	r0, [pc, #256]	@ (801f19c <etharp_raw+0x124>)
 801f09a:	f002 fdf5 	bl	8021c88 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801f09e:	2200      	movs	r2, #0
 801f0a0:	211c      	movs	r1, #28
 801f0a2:	2002      	movs	r0, #2
 801f0a4:	f7f6 fa86 	bl	80155b4 <pbuf_alloc>
 801f0a8:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801f0aa:	69bb      	ldr	r3, [r7, #24]
 801f0ac:	2b00      	cmp	r3, #0
 801f0ae:	d108      	bne.n	801f0c2 <etharp_raw+0x4a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
 801f0b0:	4b3b      	ldr	r3, [pc, #236]	@ (801f1a0 <etharp_raw+0x128>)
 801f0b2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801f0b4:	3301      	adds	r3, #1
 801f0b6:	b29a      	uxth	r2, r3
 801f0b8:	4b39      	ldr	r3, [pc, #228]	@ (801f1a0 <etharp_raw+0x128>)
 801f0ba:	849a      	strh	r2, [r3, #36]	@ 0x24
    return ERR_MEM;
 801f0bc:	f04f 33ff 	mov.w	r3, #4294967295
 801f0c0:	e063      	b.n	801f18a <etharp_raw+0x112>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801f0c2:	69bb      	ldr	r3, [r7, #24]
 801f0c4:	895b      	ldrh	r3, [r3, #10]
 801f0c6:	2b1b      	cmp	r3, #27
 801f0c8:	d806      	bhi.n	801f0d8 <etharp_raw+0x60>
 801f0ca:	4b32      	ldr	r3, [pc, #200]	@ (801f194 <etharp_raw+0x11c>)
 801f0cc:	f240 4263 	movw	r2, #1123	@ 0x463
 801f0d0:	4934      	ldr	r1, [pc, #208]	@ (801f1a4 <etharp_raw+0x12c>)
 801f0d2:	4832      	ldr	r0, [pc, #200]	@ (801f19c <etharp_raw+0x124>)
 801f0d4:	f002 fdd8 	bl	8021c88 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801f0d8:	69bb      	ldr	r3, [r7, #24]
 801f0da:	685b      	ldr	r3, [r3, #4]
 801f0dc:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801f0de:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801f0e0:	4618      	mov	r0, r3
 801f0e2:	f7f5 fb87 	bl	80147f4 <lwip_htons>
 801f0e6:	4603      	mov	r3, r0
 801f0e8:	461a      	mov	r2, r3
 801f0ea:	697b      	ldr	r3, [r7, #20]
 801f0ec:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801f0ee:	68fb      	ldr	r3, [r7, #12]
 801f0f0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801f0f4:	2b06      	cmp	r3, #6
 801f0f6:	d006      	beq.n	801f106 <etharp_raw+0x8e>
 801f0f8:	4b26      	ldr	r3, [pc, #152]	@ (801f194 <etharp_raw+0x11c>)
 801f0fa:	f240 426a 	movw	r2, #1130	@ 0x46a
 801f0fe:	492a      	ldr	r1, [pc, #168]	@ (801f1a8 <etharp_raw+0x130>)
 801f100:	4826      	ldr	r0, [pc, #152]	@ (801f19c <etharp_raw+0x124>)
 801f102:	f002 fdc1 	bl	8021c88 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 801f106:	697b      	ldr	r3, [r7, #20]
 801f108:	3308      	adds	r3, #8
 801f10a:	2206      	movs	r2, #6
 801f10c:	6839      	ldr	r1, [r7, #0]
 801f10e:	4618      	mov	r0, r3
 801f110:	f003 f8b5 	bl	802227e <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 801f114:	697b      	ldr	r3, [r7, #20]
 801f116:	3312      	adds	r3, #18
 801f118:	2206      	movs	r2, #6
 801f11a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801f11c:	4618      	mov	r0, r3
 801f11e:	f003 f8ae 	bl	802227e <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 801f122:	697b      	ldr	r3, [r7, #20]
 801f124:	330e      	adds	r3, #14
 801f126:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801f128:	6812      	ldr	r2, [r2, #0]
 801f12a:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 801f12c:	697b      	ldr	r3, [r7, #20]
 801f12e:	3318      	adds	r3, #24
 801f130:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801f132:	6812      	ldr	r2, [r2, #0]
 801f134:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 801f136:	697b      	ldr	r3, [r7, #20]
 801f138:	2200      	movs	r2, #0
 801f13a:	701a      	strb	r2, [r3, #0]
 801f13c:	2200      	movs	r2, #0
 801f13e:	f042 0201 	orr.w	r2, r2, #1
 801f142:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801f144:	697b      	ldr	r3, [r7, #20]
 801f146:	2200      	movs	r2, #0
 801f148:	f042 0208 	orr.w	r2, r2, #8
 801f14c:	709a      	strb	r2, [r3, #2]
 801f14e:	2200      	movs	r2, #0
 801f150:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801f152:	697b      	ldr	r3, [r7, #20]
 801f154:	2206      	movs	r2, #6
 801f156:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801f158:	697b      	ldr	r3, [r7, #20]
 801f15a:	2204      	movs	r2, #4
 801f15c:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801f15e:	f640 0306 	movw	r3, #2054	@ 0x806
 801f162:	9300      	str	r3, [sp, #0]
 801f164:	687b      	ldr	r3, [r7, #4]
 801f166:	68ba      	ldr	r2, [r7, #8]
 801f168:	69b9      	ldr	r1, [r7, #24]
 801f16a:	68f8      	ldr	r0, [r7, #12]
 801f16c:	f001 ff4e 	bl	802100c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 801f170:	4b0b      	ldr	r3, [pc, #44]	@ (801f1a0 <etharp_raw+0x128>)
 801f172:	8b1b      	ldrh	r3, [r3, #24]
 801f174:	3301      	adds	r3, #1
 801f176:	b29a      	uxth	r2, r3
 801f178:	4b09      	ldr	r3, [pc, #36]	@ (801f1a0 <etharp_raw+0x128>)
 801f17a:	831a      	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
 801f17c:	69b8      	ldr	r0, [r7, #24]
 801f17e:	f7f6 fd91 	bl	8015ca4 <pbuf_free>
  p = NULL;
 801f182:	2300      	movs	r3, #0
 801f184:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801f186:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801f18a:	4618      	mov	r0, r3
 801f18c:	3720      	adds	r7, #32
 801f18e:	46bd      	mov	sp, r7
 801f190:	bd80      	pop	{r7, pc}
 801f192:	bf00      	nop
 801f194:	080272b4 	.word	0x080272b4
 801f198:	08027404 	.word	0x08027404
 801f19c:	0802732c 	.word	0x0802732c
 801f1a0:	2000be88 	.word	0x2000be88
 801f1a4:	080274a4 	.word	0x080274a4
 801f1a8:	080274d8 	.word	0x080274d8

0801f1ac <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 801f1ac:	b580      	push	{r7, lr}
 801f1ae:	b088      	sub	sp, #32
 801f1b0:	af04      	add	r7, sp, #16
 801f1b2:	60f8      	str	r0, [r7, #12]
 801f1b4:	60b9      	str	r1, [r7, #8]
 801f1b6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801f1b8:	68fb      	ldr	r3, [r7, #12]
 801f1ba:	f103 012d 	add.w	r1, r3, #45	@ 0x2d
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801f1be:	68fb      	ldr	r3, [r7, #12]
 801f1c0:	f103 002d 	add.w	r0, r3, #45	@ 0x2d
 801f1c4:	68fb      	ldr	r3, [r7, #12]
 801f1c6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801f1c8:	2201      	movs	r2, #1
 801f1ca:	9203      	str	r2, [sp, #12]
 801f1cc:	68ba      	ldr	r2, [r7, #8]
 801f1ce:	9202      	str	r2, [sp, #8]
 801f1d0:	4a06      	ldr	r2, [pc, #24]	@ (801f1ec <etharp_request_dst+0x40>)
 801f1d2:	9201      	str	r2, [sp, #4]
 801f1d4:	9300      	str	r3, [sp, #0]
 801f1d6:	4603      	mov	r3, r0
 801f1d8:	687a      	ldr	r2, [r7, #4]
 801f1da:	68f8      	ldr	r0, [r7, #12]
 801f1dc:	f7ff ff4c 	bl	801f078 <etharp_raw>
 801f1e0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801f1e2:	4618      	mov	r0, r3
 801f1e4:	3710      	adds	r7, #16
 801f1e6:	46bd      	mov	sp, r7
 801f1e8:	bd80      	pop	{r7, pc}
 801f1ea:	bf00      	nop
 801f1ec:	08030d04 	.word	0x08030d04

0801f1f0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801f1f0:	b580      	push	{r7, lr}
 801f1f2:	b082      	sub	sp, #8
 801f1f4:	af00      	add	r7, sp, #0
 801f1f6:	6078      	str	r0, [r7, #4]
 801f1f8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801f1fa:	4a05      	ldr	r2, [pc, #20]	@ (801f210 <etharp_request+0x20>)
 801f1fc:	6839      	ldr	r1, [r7, #0]
 801f1fe:	6878      	ldr	r0, [r7, #4]
 801f200:	f7ff ffd4 	bl	801f1ac <etharp_request_dst>
 801f204:	4603      	mov	r3, r0
}
 801f206:	4618      	mov	r0, r3
 801f208:	3708      	adds	r7, #8
 801f20a:	46bd      	mov	sp, r7
 801f20c:	bd80      	pop	{r7, pc}
 801f20e:	bf00      	nop
 801f210:	08030cfc 	.word	0x08030cfc

0801f214 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801f214:	b580      	push	{r7, lr}
 801f216:	b08e      	sub	sp, #56	@ 0x38
 801f218:	af04      	add	r7, sp, #16
 801f21a:	6078      	str	r0, [r7, #4]
 801f21c:	6039      	str	r1, [r7, #0]
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
 801f21e:	4baa      	ldr	r3, [pc, #680]	@ (801f4c8 <icmp_input+0x2b4>)
 801f220:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801f224:	3301      	adds	r3, #1
 801f226:	b29a      	uxth	r2, r3
 801f228:	4ba7      	ldr	r3, [pc, #668]	@ (801f4c8 <icmp_input+0x2b4>)
 801f22a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);
 801f22e:	4ba6      	ldr	r3, [pc, #664]	@ (801f4c8 <icmp_input+0x2b4>)
 801f230:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 801f234:	3301      	adds	r3, #1
 801f236:	4aa4      	ldr	r2, [pc, #656]	@ (801f4c8 <icmp_input+0x2b4>)
 801f238:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c

  iphdr_in = ip4_current_header();
 801f23c:	4ba3      	ldr	r3, [pc, #652]	@ (801f4cc <icmp_input+0x2b8>)
 801f23e:	689b      	ldr	r3, [r3, #8]
 801f240:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 801f242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f244:	781b      	ldrb	r3, [r3, #0]
 801f246:	f003 030f 	and.w	r3, r3, #15
 801f24a:	b29b      	uxth	r3, r3
 801f24c:	009b      	lsls	r3, r3, #2
 801f24e:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801f250:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801f252:	2b13      	cmp	r3, #19
 801f254:	f240 817f 	bls.w	801f556 <icmp_input+0x342>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 801f258:	687b      	ldr	r3, [r7, #4]
 801f25a:	895b      	ldrh	r3, [r3, #10]
 801f25c:	2b03      	cmp	r3, #3
 801f25e:	f240 817c 	bls.w	801f55a <icmp_input+0x346>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801f262:	687b      	ldr	r3, [r7, #4]
 801f264:	685b      	ldr	r3, [r3, #4]
 801f266:	781b      	ldrb	r3, [r3, #0]
 801f268:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 801f26c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801f270:	2b00      	cmp	r3, #0
 801f272:	d002      	beq.n	801f27a <icmp_input+0x66>
 801f274:	2b08      	cmp	r3, #8
 801f276:	d008      	beq.n	801f28a <icmp_input+0x76>
 801f278:	e0dd      	b.n	801f436 <icmp_input+0x222>
  case ICMP_ER:
    /* This is OK, echo reply might have been parsed by a raw PCB
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
 801f27a:	4b93      	ldr	r3, [pc, #588]	@ (801f4c8 <icmp_input+0x2b4>)
 801f27c:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 801f280:	3301      	adds	r3, #1
 801f282:	4a91      	ldr	r2, [pc, #580]	@ (801f4c8 <icmp_input+0x2b4>)
 801f284:	f8c2 316c 	str.w	r3, [r2, #364]	@ 0x16c
    break;
 801f288:	e161      	b.n	801f54e <icmp_input+0x33a>
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
 801f28a:	4b8f      	ldr	r3, [pc, #572]	@ (801f4c8 <icmp_input+0x2b4>)
 801f28c:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 801f290:	3301      	adds	r3, #1
 801f292:	4a8d      	ldr	r2, [pc, #564]	@ (801f4c8 <icmp_input+0x2b4>)
 801f294:	f8c2 3168 	str.w	r3, [r2, #360]	@ 0x168
    src = ip4_current_dest_addr();
 801f298:	4b8d      	ldr	r3, [pc, #564]	@ (801f4d0 <icmp_input+0x2bc>)
 801f29a:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801f29c:	4b8b      	ldr	r3, [pc, #556]	@ (801f4cc <icmp_input+0x2b8>)
 801f29e:	695b      	ldr	r3, [r3, #20]
 801f2a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801f2a4:	2be0      	cmp	r3, #224	@ 0xe0
 801f2a6:	f000 816e 	beq.w	801f586 <icmp_input+0x372>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801f2aa:	4b88      	ldr	r3, [pc, #544]	@ (801f4cc <icmp_input+0x2b8>)
 801f2ac:	695b      	ldr	r3, [r3, #20]
 801f2ae:	4a87      	ldr	r2, [pc, #540]	@ (801f4cc <icmp_input+0x2b8>)
 801f2b0:	6812      	ldr	r2, [r2, #0]
 801f2b2:	4611      	mov	r1, r2
 801f2b4:	4618      	mov	r0, r3
 801f2b6:	f000 fd9b 	bl	801fdf0 <ip4_addr_isbroadcast_u32>
 801f2ba:	4603      	mov	r3, r0
 801f2bc:	2b00      	cmp	r3, #0
 801f2be:	f040 8164 	bne.w	801f58a <icmp_input+0x376>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801f2c2:	687b      	ldr	r3, [r7, #4]
 801f2c4:	891b      	ldrh	r3, [r3, #8]
 801f2c6:	2b07      	cmp	r3, #7
 801f2c8:	f240 8149 	bls.w	801f55e <icmp_input+0x34a>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 801f2cc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801f2ce:	330e      	adds	r3, #14
 801f2d0:	b29b      	uxth	r3, r3
 801f2d2:	b21b      	sxth	r3, r3
 801f2d4:	4619      	mov	r1, r3
 801f2d6:	6878      	ldr	r0, [r7, #4]
 801f2d8:	f7f6 fcc0 	bl	8015c5c <pbuf_header>
 801f2dc:	4603      	mov	r3, r0
 801f2de:	2b00      	cmp	r3, #0
 801f2e0:	d046      	beq.n	801f370 <icmp_input+0x15c>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 801f2e2:	687b      	ldr	r3, [r7, #4]
 801f2e4:	891a      	ldrh	r2, [r3, #8]
 801f2e6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801f2e8:	4413      	add	r3, r2
 801f2ea:	b29b      	uxth	r3, r3
 801f2ec:	2200      	movs	r2, #0
 801f2ee:	4619      	mov	r1, r3
 801f2f0:	2002      	movs	r0, #2
 801f2f2:	f7f6 f95f 	bl	80155b4 <pbuf_alloc>
 801f2f6:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 801f2f8:	69bb      	ldr	r3, [r7, #24]
 801f2fa:	2b00      	cmp	r3, #0
 801f2fc:	f000 8147 	beq.w	801f58e <icmp_input+0x37a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801f300:	69bb      	ldr	r3, [r7, #24]
 801f302:	895b      	ldrh	r3, [r3, #10]
 801f304:	461a      	mov	r2, r3
 801f306:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801f308:	3308      	adds	r3, #8
 801f30a:	429a      	cmp	r2, r3
 801f30c:	d203      	bcs.n	801f316 <icmp_input+0x102>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 801f30e:	69b8      	ldr	r0, [r7, #24]
 801f310:	f7f6 fcc8 	bl	8015ca4 <pbuf_free>
        goto icmperr;
 801f314:	e13c      	b.n	801f590 <icmp_input+0x37c>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 801f316:	69bb      	ldr	r3, [r7, #24]
 801f318:	685b      	ldr	r3, [r3, #4]
 801f31a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801f31c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801f31e:	4618      	mov	r0, r3
 801f320:	f002 ffad 	bl	802227e <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 801f324:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801f326:	425b      	negs	r3, r3
 801f328:	b29b      	uxth	r3, r3
 801f32a:	b21b      	sxth	r3, r3
 801f32c:	4619      	mov	r1, r3
 801f32e:	69b8      	ldr	r0, [r7, #24]
 801f330:	f7f6 fc94 	bl	8015c5c <pbuf_header>
 801f334:	4603      	mov	r3, r0
 801f336:	2b00      	cmp	r3, #0
 801f338:	d009      	beq.n	801f34e <icmp_input+0x13a>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801f33a:	4b66      	ldr	r3, [pc, #408]	@ (801f4d4 <icmp_input+0x2c0>)
 801f33c:	22af      	movs	r2, #175	@ 0xaf
 801f33e:	4966      	ldr	r1, [pc, #408]	@ (801f4d8 <icmp_input+0x2c4>)
 801f340:	4866      	ldr	r0, [pc, #408]	@ (801f4dc <icmp_input+0x2c8>)
 801f342:	f002 fca1 	bl	8021c88 <iprintf>
        pbuf_free(r);
 801f346:	69b8      	ldr	r0, [r7, #24]
 801f348:	f7f6 fcac 	bl	8015ca4 <pbuf_free>
        goto icmperr;
 801f34c:	e120      	b.n	801f590 <icmp_input+0x37c>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 801f34e:	6879      	ldr	r1, [r7, #4]
 801f350:	69b8      	ldr	r0, [r7, #24]
 801f352:	f7f6 fdd9 	bl	8015f08 <pbuf_copy>
 801f356:	4603      	mov	r3, r0
 801f358:	2b00      	cmp	r3, #0
 801f35a:	d003      	beq.n	801f364 <icmp_input+0x150>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 801f35c:	69b8      	ldr	r0, [r7, #24]
 801f35e:	f7f6 fca1 	bl	8015ca4 <pbuf_free>
        goto icmperr;
 801f362:	e115      	b.n	801f590 <icmp_input+0x37c>
      }
      /* free the original p */
      pbuf_free(p);
 801f364:	6878      	ldr	r0, [r7, #4]
 801f366:	f7f6 fc9d 	bl	8015ca4 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 801f36a:	69bb      	ldr	r3, [r7, #24]
 801f36c:	607b      	str	r3, [r7, #4]
 801f36e:	e015      	b.n	801f39c <icmp_input+0x188>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 801f370:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801f372:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 801f376:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 801f37a:	33f2      	adds	r3, #242	@ 0xf2
 801f37c:	b29b      	uxth	r3, r3
 801f37e:	b21b      	sxth	r3, r3
 801f380:	4619      	mov	r1, r3
 801f382:	6878      	ldr	r0, [r7, #4]
 801f384:	f7f6 fc6a 	bl	8015c5c <pbuf_header>
 801f388:	4603      	mov	r3, r0
 801f38a:	2b00      	cmp	r3, #0
 801f38c:	d006      	beq.n	801f39c <icmp_input+0x188>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801f38e:	4b51      	ldr	r3, [pc, #324]	@ (801f4d4 <icmp_input+0x2c0>)
 801f390:	22c0      	movs	r2, #192	@ 0xc0
 801f392:	4953      	ldr	r1, [pc, #332]	@ (801f4e0 <icmp_input+0x2cc>)
 801f394:	4851      	ldr	r0, [pc, #324]	@ (801f4dc <icmp_input+0x2c8>)
 801f396:	f002 fc77 	bl	8021c88 <iprintf>
        goto icmperr;
 801f39a:	e0f9      	b.n	801f590 <icmp_input+0x37c>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 801f39c:	687b      	ldr	r3, [r7, #4]
 801f39e:	685b      	ldr	r3, [r3, #4]
 801f3a0:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 801f3a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801f3a6:	4619      	mov	r1, r3
 801f3a8:	6878      	ldr	r0, [r7, #4]
 801f3aa:	f7f6 fc57 	bl	8015c5c <pbuf_header>
 801f3ae:	4603      	mov	r3, r0
 801f3b0:	2b00      	cmp	r3, #0
 801f3b2:	f040 80cb 	bne.w	801f54c <icmp_input+0x338>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 801f3b6:	687b      	ldr	r3, [r7, #4]
 801f3b8:	685b      	ldr	r3, [r3, #4]
 801f3ba:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 801f3bc:	69fb      	ldr	r3, [r7, #28]
 801f3be:	681a      	ldr	r2, [r3, #0]
 801f3c0:	693b      	ldr	r3, [r7, #16]
 801f3c2:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801f3c4:	4b41      	ldr	r3, [pc, #260]	@ (801f4cc <icmp_input+0x2b8>)
 801f3c6:	691a      	ldr	r2, [r3, #16]
 801f3c8:	693b      	ldr	r3, [r7, #16]
 801f3ca:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 801f3cc:	697b      	ldr	r3, [r7, #20]
 801f3ce:	2200      	movs	r2, #0
 801f3d0:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 801f3d2:	697b      	ldr	r3, [r7, #20]
 801f3d4:	2200      	movs	r2, #0
 801f3d6:	709a      	strb	r2, [r3, #2]
 801f3d8:	2200      	movs	r2, #0
 801f3da:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 801f3dc:	693b      	ldr	r3, [r7, #16]
 801f3de:	22ff      	movs	r2, #255	@ 0xff
 801f3e0:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 801f3e2:	693b      	ldr	r3, [r7, #16]
 801f3e4:	2200      	movs	r2, #0
 801f3e6:	729a      	strb	r2, [r3, #10]
 801f3e8:	2200      	movs	r2, #0
 801f3ea:	72da      	strb	r2, [r3, #11]
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
        IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
      }
#endif /* CHECKSUM_GEN_IP */

      ICMP_STATS_INC(icmp.xmit);
 801f3ec:	4b36      	ldr	r3, [pc, #216]	@ (801f4c8 <icmp_input+0x2b4>)
 801f3ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801f3f2:	3301      	adds	r3, #1
 801f3f4:	b29a      	uxth	r2, r3
 801f3f6:	4b34      	ldr	r3, [pc, #208]	@ (801f4c8 <icmp_input+0x2b4>)
 801f3f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* increase number of messages attempted to send */
      MIB2_STATS_INC(mib2.icmpoutmsgs);
 801f3fc:	4b32      	ldr	r3, [pc, #200]	@ (801f4c8 <icmp_input+0x2b4>)
 801f3fe:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 801f402:	3301      	adds	r3, #1
 801f404:	4a30      	ldr	r2, [pc, #192]	@ (801f4c8 <icmp_input+0x2b4>)
 801f406:	f8c2 3180 	str.w	r3, [r2, #384]	@ 0x180
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);
 801f40a:	4b2f      	ldr	r3, [pc, #188]	@ (801f4c8 <icmp_input+0x2b4>)
 801f40c:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 801f410:	3301      	adds	r3, #1
 801f412:	4a2d      	ldr	r2, [pc, #180]	@ (801f4c8 <icmp_input+0x2b4>)
 801f414:	f8c2 3194 	str.w	r3, [r2, #404]	@ 0x194

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801f418:	683b      	ldr	r3, [r7, #0]
 801f41a:	9302      	str	r3, [sp, #8]
 801f41c:	2301      	movs	r3, #1
 801f41e:	9301      	str	r3, [sp, #4]
 801f420:	2300      	movs	r3, #0
 801f422:	9300      	str	r3, [sp, #0]
 801f424:	23ff      	movs	r3, #255	@ 0xff
 801f426:	2200      	movs	r2, #0
 801f428:	69f9      	ldr	r1, [r7, #28]
 801f42a:	6878      	ldr	r0, [r7, #4]
 801f42c:	f000 fbee 	bl	801fc0c <ip4_output_if>
 801f430:	4603      	mov	r3, r0
 801f432:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 801f434:	e08a      	b.n	801f54c <icmp_input+0x338>
  default:
    if (type == ICMP_DUR) {
 801f436:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801f43a:	2b03      	cmp	r3, #3
 801f43c:	d107      	bne.n	801f44e <icmp_input+0x23a>
      MIB2_STATS_INC(mib2.icmpindestunreachs);
 801f43e:	4b22      	ldr	r3, [pc, #136]	@ (801f4c8 <icmp_input+0x2b4>)
 801f440:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 801f444:	3301      	adds	r3, #1
 801f446:	4a20      	ldr	r2, [pc, #128]	@ (801f4c8 <icmp_input+0x2b4>)
 801f448:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 801f44c:	e06d      	b.n	801f52a <icmp_input+0x316>
    } else if (type == ICMP_TE) {
 801f44e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801f452:	2b0b      	cmp	r3, #11
 801f454:	d107      	bne.n	801f466 <icmp_input+0x252>
      MIB2_STATS_INC(mib2.icmpintimeexcds);
 801f456:	4b1c      	ldr	r3, [pc, #112]	@ (801f4c8 <icmp_input+0x2b4>)
 801f458:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 801f45c:	3301      	adds	r3, #1
 801f45e:	4a1a      	ldr	r2, [pc, #104]	@ (801f4c8 <icmp_input+0x2b4>)
 801f460:	f8c2 3158 	str.w	r3, [r2, #344]	@ 0x158
 801f464:	e061      	b.n	801f52a <icmp_input+0x316>
    } else if (type == ICMP_PP) {
 801f466:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801f46a:	2b0c      	cmp	r3, #12
 801f46c:	d107      	bne.n	801f47e <icmp_input+0x26a>
      MIB2_STATS_INC(mib2.icmpinparmprobs);
 801f46e:	4b16      	ldr	r3, [pc, #88]	@ (801f4c8 <icmp_input+0x2b4>)
 801f470:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 801f474:	3301      	adds	r3, #1
 801f476:	4a14      	ldr	r2, [pc, #80]	@ (801f4c8 <icmp_input+0x2b4>)
 801f478:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
 801f47c:	e055      	b.n	801f52a <icmp_input+0x316>
    } else if (type == ICMP_SQ) {
 801f47e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801f482:	2b04      	cmp	r3, #4
 801f484:	d107      	bne.n	801f496 <icmp_input+0x282>
      MIB2_STATS_INC(mib2.icmpinsrcquenchs);
 801f486:	4b10      	ldr	r3, [pc, #64]	@ (801f4c8 <icmp_input+0x2b4>)
 801f488:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 801f48c:	3301      	adds	r3, #1
 801f48e:	4a0e      	ldr	r2, [pc, #56]	@ (801f4c8 <icmp_input+0x2b4>)
 801f490:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
 801f494:	e049      	b.n	801f52a <icmp_input+0x316>
    } else if (type == ICMP_RD) {
 801f496:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801f49a:	2b05      	cmp	r3, #5
 801f49c:	d107      	bne.n	801f4ae <icmp_input+0x29a>
      MIB2_STATS_INC(mib2.icmpinredirects);
 801f49e:	4b0a      	ldr	r3, [pc, #40]	@ (801f4c8 <icmp_input+0x2b4>)
 801f4a0:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 801f4a4:	3301      	adds	r3, #1
 801f4a6:	4a08      	ldr	r2, [pc, #32]	@ (801f4c8 <icmp_input+0x2b4>)
 801f4a8:	f8c2 3164 	str.w	r3, [r2, #356]	@ 0x164
 801f4ac:	e03d      	b.n	801f52a <icmp_input+0x316>
    } else if (type == ICMP_TS) {
 801f4ae:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801f4b2:	2b0d      	cmp	r3, #13
 801f4b4:	d116      	bne.n	801f4e4 <icmp_input+0x2d0>
      MIB2_STATS_INC(mib2.icmpintimestamps);
 801f4b6:	4b04      	ldr	r3, [pc, #16]	@ (801f4c8 <icmp_input+0x2b4>)
 801f4b8:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 801f4bc:	3301      	adds	r3, #1
 801f4be:	4a02      	ldr	r2, [pc, #8]	@ (801f4c8 <icmp_input+0x2b4>)
 801f4c0:	f8c2 3170 	str.w	r3, [r2, #368]	@ 0x170
 801f4c4:	e031      	b.n	801f52a <icmp_input+0x316>
 801f4c6:	bf00      	nop
 801f4c8:	2000be88 	.word	0x2000be88
 801f4cc:	200088a0 	.word	0x200088a0
 801f4d0:	200088b4 	.word	0x200088b4
 801f4d4:	0802751c 	.word	0x0802751c
 801f4d8:	08027554 	.word	0x08027554
 801f4dc:	0802758c 	.word	0x0802758c
 801f4e0:	080275b4 	.word	0x080275b4
    } else if (type == ICMP_TSR) {
 801f4e4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801f4e8:	2b0e      	cmp	r3, #14
 801f4ea:	d107      	bne.n	801f4fc <icmp_input+0x2e8>
      MIB2_STATS_INC(mib2.icmpintimestampreps);
 801f4ec:	4b33      	ldr	r3, [pc, #204]	@ (801f5bc <icmp_input+0x3a8>)
 801f4ee:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 801f4f2:	3301      	adds	r3, #1
 801f4f4:	4a31      	ldr	r2, [pc, #196]	@ (801f5bc <icmp_input+0x3a8>)
 801f4f6:	f8c2 3174 	str.w	r3, [r2, #372]	@ 0x174
 801f4fa:	e016      	b.n	801f52a <icmp_input+0x316>
    } else if (type == ICMP_AM) {
 801f4fc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801f500:	2b11      	cmp	r3, #17
 801f502:	d107      	bne.n	801f514 <icmp_input+0x300>
      MIB2_STATS_INC(mib2.icmpinaddrmasks);
 801f504:	4b2d      	ldr	r3, [pc, #180]	@ (801f5bc <icmp_input+0x3a8>)
 801f506:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 801f50a:	3301      	adds	r3, #1
 801f50c:	4a2b      	ldr	r2, [pc, #172]	@ (801f5bc <icmp_input+0x3a8>)
 801f50e:	f8c2 3178 	str.w	r3, [r2, #376]	@ 0x178
 801f512:	e00a      	b.n	801f52a <icmp_input+0x316>
    } else if (type == ICMP_AMR) {
 801f514:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801f518:	2b12      	cmp	r3, #18
 801f51a:	d106      	bne.n	801f52a <icmp_input+0x316>
      MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
 801f51c:	4b27      	ldr	r3, [pc, #156]	@ (801f5bc <icmp_input+0x3a8>)
 801f51e:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 801f522:	3301      	adds	r3, #1
 801f524:	4a25      	ldr	r2, [pc, #148]	@ (801f5bc <icmp_input+0x3a8>)
 801f526:	f8c2 317c 	str.w	r3, [r2, #380]	@ 0x17c
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
 801f52a:	4b24      	ldr	r3, [pc, #144]	@ (801f5bc <icmp_input+0x3a8>)
 801f52c:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 801f530:	3301      	adds	r3, #1
 801f532:	b29a      	uxth	r2, r3
 801f534:	4b21      	ldr	r3, [pc, #132]	@ (801f5bc <icmp_input+0x3a8>)
 801f536:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
    ICMP_STATS_INC(icmp.drop);
 801f53a:	4b20      	ldr	r3, [pc, #128]	@ (801f5bc <icmp_input+0x3a8>)
 801f53c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801f540:	3301      	adds	r3, #1
 801f542:	b29a      	uxth	r2, r3
 801f544:	4b1d      	ldr	r3, [pc, #116]	@ (801f5bc <icmp_input+0x3a8>)
 801f546:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
 801f54a:	e000      	b.n	801f54e <icmp_input+0x33a>
    break;
 801f54c:	bf00      	nop
  }
  pbuf_free(p);
 801f54e:	6878      	ldr	r0, [r7, #4]
 801f550:	f7f6 fba8 	bl	8015ca4 <pbuf_free>
  return;
 801f554:	e02f      	b.n	801f5b6 <icmp_input+0x3a2>
    goto lenerr;
 801f556:	bf00      	nop
 801f558:	e002      	b.n	801f560 <icmp_input+0x34c>
    goto lenerr;
 801f55a:	bf00      	nop
 801f55c:	e000      	b.n	801f560 <icmp_input+0x34c>
      goto lenerr;
 801f55e:	bf00      	nop
lenerr:
  pbuf_free(p);
 801f560:	6878      	ldr	r0, [r7, #4]
 801f562:	f7f6 fb9f 	bl	8015ca4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 801f566:	4b15      	ldr	r3, [pc, #84]	@ (801f5bc <icmp_input+0x3a8>)
 801f568:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801f56c:	3301      	adds	r3, #1
 801f56e:	b29a      	uxth	r2, r3
 801f570:	4b12      	ldr	r3, [pc, #72]	@ (801f5bc <icmp_input+0x3a8>)
 801f572:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
 801f576:	4b11      	ldr	r3, [pc, #68]	@ (801f5bc <icmp_input+0x3a8>)
 801f578:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 801f57c:	3301      	adds	r3, #1
 801f57e:	4a0f      	ldr	r2, [pc, #60]	@ (801f5bc <icmp_input+0x3a8>)
 801f580:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
  return;
 801f584:	e017      	b.n	801f5b6 <icmp_input+0x3a2>
      goto icmperr;
 801f586:	bf00      	nop
 801f588:	e002      	b.n	801f590 <icmp_input+0x37c>
      goto icmperr;
 801f58a:	bf00      	nop
 801f58c:	e000      	b.n	801f590 <icmp_input+0x37c>
        goto icmperr;
 801f58e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801f590:	6878      	ldr	r0, [r7, #4]
 801f592:	f7f6 fb87 	bl	8015ca4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 801f596:	4b09      	ldr	r3, [pc, #36]	@ (801f5bc <icmp_input+0x3a8>)
 801f598:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 801f59c:	3301      	adds	r3, #1
 801f59e:	b29a      	uxth	r2, r3
 801f5a0:	4b06      	ldr	r3, [pc, #24]	@ (801f5bc <icmp_input+0x3a8>)
 801f5a2:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
 801f5a6:	4b05      	ldr	r3, [pc, #20]	@ (801f5bc <icmp_input+0x3a8>)
 801f5a8:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 801f5ac:	3301      	adds	r3, #1
 801f5ae:	4a03      	ldr	r2, [pc, #12]	@ (801f5bc <icmp_input+0x3a8>)
 801f5b0:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
  return;
 801f5b4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801f5b6:	3728      	adds	r7, #40	@ 0x28
 801f5b8:	46bd      	mov	sp, r7
 801f5ba:	bd80      	pop	{r7, pc}
 801f5bc:	2000be88 	.word	0x2000be88

0801f5c0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801f5c0:	b580      	push	{r7, lr}
 801f5c2:	b082      	sub	sp, #8
 801f5c4:	af00      	add	r7, sp, #0
 801f5c6:	6078      	str	r0, [r7, #4]
 801f5c8:	460b      	mov	r3, r1
 801f5ca:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
 801f5cc:	4b08      	ldr	r3, [pc, #32]	@ (801f5f0 <icmp_dest_unreach+0x30>)
 801f5ce:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 801f5d2:	3301      	adds	r3, #1
 801f5d4:	4a06      	ldr	r2, [pc, #24]	@ (801f5f0 <icmp_dest_unreach+0x30>)
 801f5d6:	f8c2 3188 	str.w	r3, [r2, #392]	@ 0x188
  icmp_send_response(p, ICMP_DUR, t);
 801f5da:	78fb      	ldrb	r3, [r7, #3]
 801f5dc:	461a      	mov	r2, r3
 801f5de:	2103      	movs	r1, #3
 801f5e0:	6878      	ldr	r0, [r7, #4]
 801f5e2:	f000 f821 	bl	801f628 <icmp_send_response>
}
 801f5e6:	bf00      	nop
 801f5e8:	3708      	adds	r7, #8
 801f5ea:	46bd      	mov	sp, r7
 801f5ec:	bd80      	pop	{r7, pc}
 801f5ee:	bf00      	nop
 801f5f0:	2000be88 	.word	0x2000be88

0801f5f4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801f5f4:	b580      	push	{r7, lr}
 801f5f6:	b082      	sub	sp, #8
 801f5f8:	af00      	add	r7, sp, #0
 801f5fa:	6078      	str	r0, [r7, #4]
 801f5fc:	460b      	mov	r3, r1
 801f5fe:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
 801f600:	4b08      	ldr	r3, [pc, #32]	@ (801f624 <icmp_time_exceeded+0x30>)
 801f602:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 801f606:	3301      	adds	r3, #1
 801f608:	4a06      	ldr	r2, [pc, #24]	@ (801f624 <icmp_time_exceeded+0x30>)
 801f60a:	f8c2 318c 	str.w	r3, [r2, #396]	@ 0x18c
  icmp_send_response(p, ICMP_TE, t);
 801f60e:	78fb      	ldrb	r3, [r7, #3]
 801f610:	461a      	mov	r2, r3
 801f612:	210b      	movs	r1, #11
 801f614:	6878      	ldr	r0, [r7, #4]
 801f616:	f000 f807 	bl	801f628 <icmp_send_response>
}
 801f61a:	bf00      	nop
 801f61c:	3708      	adds	r7, #8
 801f61e:	46bd      	mov	sp, r7
 801f620:	bd80      	pop	{r7, pc}
 801f622:	bf00      	nop
 801f624:	2000be88 	.word	0x2000be88

0801f628 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801f628:	b580      	push	{r7, lr}
 801f62a:	b08c      	sub	sp, #48	@ 0x30
 801f62c:	af04      	add	r7, sp, #16
 801f62e:	6078      	str	r0, [r7, #4]
 801f630:	460b      	mov	r3, r1
 801f632:	70fb      	strb	r3, [r7, #3]
 801f634:	4613      	mov	r3, r2
 801f636:	70bb      	strb	r3, [r7, #2]
  struct icmp_echo_hdr *icmphdr;
  ip4_addr_t iphdr_src;
  struct netif *netif;

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);
 801f638:	4b37      	ldr	r3, [pc, #220]	@ (801f718 <icmp_send_response+0xf0>)
 801f63a:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 801f63e:	3301      	adds	r3, #1
 801f640:	4a35      	ldr	r2, [pc, #212]	@ (801f718 <icmp_send_response+0xf0>)
 801f642:	f8c2 3180 	str.w	r3, [r2, #384]	@ 0x180

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801f646:	2200      	movs	r2, #0
 801f648:	2124      	movs	r1, #36	@ 0x24
 801f64a:	2001      	movs	r0, #1
 801f64c:	f7f5 ffb2 	bl	80155b4 <pbuf_alloc>
 801f650:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801f652:	69fb      	ldr	r3, [r7, #28]
 801f654:	2b00      	cmp	r3, #0
 801f656:	d107      	bne.n	801f668 <icmp_send_response+0x40>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
 801f658:	4b2f      	ldr	r3, [pc, #188]	@ (801f718 <icmp_send_response+0xf0>)
 801f65a:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 801f65e:	3301      	adds	r3, #1
 801f660:	4a2d      	ldr	r2, [pc, #180]	@ (801f718 <icmp_send_response+0xf0>)
 801f662:	f8c2 3184 	str.w	r3, [r2, #388]	@ 0x184
 801f666:	e053      	b.n	801f710 <icmp_send_response+0xe8>
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801f668:	69fb      	ldr	r3, [r7, #28]
 801f66a:	895b      	ldrh	r3, [r3, #10]
 801f66c:	2b23      	cmp	r3, #35	@ 0x23
 801f66e:	d806      	bhi.n	801f67e <icmp_send_response+0x56>
 801f670:	4b2a      	ldr	r3, [pc, #168]	@ (801f71c <icmp_send_response+0xf4>)
 801f672:	f240 1261 	movw	r2, #353	@ 0x161
 801f676:	492a      	ldr	r1, [pc, #168]	@ (801f720 <icmp_send_response+0xf8>)
 801f678:	482a      	ldr	r0, [pc, #168]	@ (801f724 <icmp_send_response+0xfc>)
 801f67a:	f002 fb05 	bl	8021c88 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801f67e:	687b      	ldr	r3, [r7, #4]
 801f680:	685b      	ldr	r3, [r3, #4]
 801f682:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801f684:	69fb      	ldr	r3, [r7, #28]
 801f686:	685b      	ldr	r3, [r3, #4]
 801f688:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801f68a:	697b      	ldr	r3, [r7, #20]
 801f68c:	78fa      	ldrb	r2, [r7, #3]
 801f68e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801f690:	697b      	ldr	r3, [r7, #20]
 801f692:	78ba      	ldrb	r2, [r7, #2]
 801f694:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801f696:	697b      	ldr	r3, [r7, #20]
 801f698:	2200      	movs	r2, #0
 801f69a:	711a      	strb	r2, [r3, #4]
 801f69c:	2200      	movs	r2, #0
 801f69e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801f6a0:	697b      	ldr	r3, [r7, #20]
 801f6a2:	2200      	movs	r2, #0
 801f6a4:	719a      	strb	r2, [r3, #6]
 801f6a6:	2200      	movs	r2, #0
 801f6a8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801f6aa:	69fb      	ldr	r3, [r7, #28]
 801f6ac:	685b      	ldr	r3, [r3, #4]
 801f6ae:	f103 0008 	add.w	r0, r3, #8
 801f6b2:	687b      	ldr	r3, [r7, #4]
 801f6b4:	685b      	ldr	r3, [r3, #4]
 801f6b6:	221c      	movs	r2, #28
 801f6b8:	4619      	mov	r1, r3
 801f6ba:	f002 fde0 	bl	802227e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801f6be:	69bb      	ldr	r3, [r7, #24]
 801f6c0:	68db      	ldr	r3, [r3, #12]
 801f6c2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 801f6c4:	f107 030c 	add.w	r3, r7, #12
 801f6c8:	4618      	mov	r0, r3
 801f6ca:	f000 f82d 	bl	801f728 <ip4_route>
 801f6ce:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801f6d0:	693b      	ldr	r3, [r7, #16]
 801f6d2:	2b00      	cmp	r3, #0
 801f6d4:	d019      	beq.n	801f70a <icmp_send_response+0xe2>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801f6d6:	697b      	ldr	r3, [r7, #20]
 801f6d8:	2200      	movs	r2, #0
 801f6da:	709a      	strb	r2, [r3, #2]
 801f6dc:	2200      	movs	r2, #0
 801f6de:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 801f6e0:	4b0d      	ldr	r3, [pc, #52]	@ (801f718 <icmp_send_response+0xf0>)
 801f6e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801f6e6:	3301      	adds	r3, #1
 801f6e8:	b29a      	uxth	r2, r3
 801f6ea:	4b0b      	ldr	r3, [pc, #44]	@ (801f718 <icmp_send_response+0xf0>)
 801f6ec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801f6f0:	f107 020c 	add.w	r2, r7, #12
 801f6f4:	693b      	ldr	r3, [r7, #16]
 801f6f6:	9302      	str	r3, [sp, #8]
 801f6f8:	2301      	movs	r3, #1
 801f6fa:	9301      	str	r3, [sp, #4]
 801f6fc:	2300      	movs	r3, #0
 801f6fe:	9300      	str	r3, [sp, #0]
 801f700:	23ff      	movs	r3, #255	@ 0xff
 801f702:	2100      	movs	r1, #0
 801f704:	69f8      	ldr	r0, [r7, #28]
 801f706:	f000 fa81 	bl	801fc0c <ip4_output_if>
  }
  pbuf_free(q);
 801f70a:	69f8      	ldr	r0, [r7, #28]
 801f70c:	f7f6 faca 	bl	8015ca4 <pbuf_free>
}
 801f710:	3720      	adds	r7, #32
 801f712:	46bd      	mov	sp, r7
 801f714:	bd80      	pop	{r7, pc}
 801f716:	bf00      	nop
 801f718:	2000be88 	.word	0x2000be88
 801f71c:	0802751c 	.word	0x0802751c
 801f720:	080275e8 	.word	0x080275e8
 801f724:	0802758c 	.word	0x0802758c

0801f728 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801f728:	b480      	push	{r7}
 801f72a:	b085      	sub	sp, #20
 801f72c:	af00      	add	r7, sp, #0
 801f72e:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 801f730:	4b37      	ldr	r3, [pc, #220]	@ (801f810 <ip4_route+0xe8>)
 801f732:	681b      	ldr	r3, [r3, #0]
 801f734:	60fb      	str	r3, [r7, #12]
 801f736:	e036      	b.n	801f7a6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801f738:	68fb      	ldr	r3, [r7, #12]
 801f73a:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801f73e:	f003 0301 	and.w	r3, r3, #1
 801f742:	b2db      	uxtb	r3, r3
 801f744:	2b00      	cmp	r3, #0
 801f746:	d02b      	beq.n	801f7a0 <ip4_route+0x78>
 801f748:	68fb      	ldr	r3, [r7, #12]
 801f74a:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801f74e:	089b      	lsrs	r3, r3, #2
 801f750:	f003 0301 	and.w	r3, r3, #1
 801f754:	b2db      	uxtb	r3, r3
 801f756:	2b00      	cmp	r3, #0
 801f758:	d022      	beq.n	801f7a0 <ip4_route+0x78>
 801f75a:	68fb      	ldr	r3, [r7, #12]
 801f75c:	3304      	adds	r3, #4
 801f75e:	681b      	ldr	r3, [r3, #0]
 801f760:	2b00      	cmp	r3, #0
 801f762:	d01d      	beq.n	801f7a0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801f764:	687b      	ldr	r3, [r7, #4]
 801f766:	681a      	ldr	r2, [r3, #0]
 801f768:	68fb      	ldr	r3, [r7, #12]
 801f76a:	3304      	adds	r3, #4
 801f76c:	681b      	ldr	r3, [r3, #0]
 801f76e:	405a      	eors	r2, r3
 801f770:	68fb      	ldr	r3, [r7, #12]
 801f772:	3308      	adds	r3, #8
 801f774:	681b      	ldr	r3, [r3, #0]
 801f776:	4013      	ands	r3, r2
 801f778:	2b00      	cmp	r3, #0
 801f77a:	d101      	bne.n	801f780 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801f77c:	68fb      	ldr	r3, [r7, #12]
 801f77e:	e042      	b.n	801f806 <ip4_route+0xde>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801f780:	68fb      	ldr	r3, [r7, #12]
 801f782:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801f786:	f003 0302 	and.w	r3, r3, #2
 801f78a:	2b00      	cmp	r3, #0
 801f78c:	d108      	bne.n	801f7a0 <ip4_route+0x78>
 801f78e:	687b      	ldr	r3, [r7, #4]
 801f790:	681a      	ldr	r2, [r3, #0]
 801f792:	68fb      	ldr	r3, [r7, #12]
 801f794:	330c      	adds	r3, #12
 801f796:	681b      	ldr	r3, [r3, #0]
 801f798:	429a      	cmp	r2, r3
 801f79a:	d101      	bne.n	801f7a0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801f79c:	68fb      	ldr	r3, [r7, #12]
 801f79e:	e032      	b.n	801f806 <ip4_route+0xde>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 801f7a0:	68fb      	ldr	r3, [r7, #12]
 801f7a2:	681b      	ldr	r3, [r3, #0]
 801f7a4:	60fb      	str	r3, [r7, #12]
 801f7a6:	68fb      	ldr	r3, [r7, #12]
 801f7a8:	2b00      	cmp	r3, #0
 801f7aa:	d1c5      	bne.n	801f738 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801f7ac:	4b19      	ldr	r3, [pc, #100]	@ (801f814 <ip4_route+0xec>)
 801f7ae:	681b      	ldr	r3, [r3, #0]
 801f7b0:	2b00      	cmp	r3, #0
 801f7b2:	d015      	beq.n	801f7e0 <ip4_route+0xb8>
 801f7b4:	4b17      	ldr	r3, [pc, #92]	@ (801f814 <ip4_route+0xec>)
 801f7b6:	681b      	ldr	r3, [r3, #0]
 801f7b8:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801f7bc:	f003 0301 	and.w	r3, r3, #1
 801f7c0:	2b00      	cmp	r3, #0
 801f7c2:	d00d      	beq.n	801f7e0 <ip4_route+0xb8>
 801f7c4:	4b13      	ldr	r3, [pc, #76]	@ (801f814 <ip4_route+0xec>)
 801f7c6:	681b      	ldr	r3, [r3, #0]
 801f7c8:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801f7cc:	f003 0304 	and.w	r3, r3, #4
 801f7d0:	2b00      	cmp	r3, #0
 801f7d2:	d005      	beq.n	801f7e0 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 801f7d4:	4b0f      	ldr	r3, [pc, #60]	@ (801f814 <ip4_route+0xec>)
 801f7d6:	681b      	ldr	r3, [r3, #0]
 801f7d8:	3304      	adds	r3, #4
 801f7da:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801f7dc:	2b00      	cmp	r3, #0
 801f7de:	d110      	bne.n	801f802 <ip4_route+0xda>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 801f7e0:	4b0d      	ldr	r3, [pc, #52]	@ (801f818 <ip4_route+0xf0>)
 801f7e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801f7e6:	3301      	adds	r3, #1
 801f7e8:	b29a      	uxth	r2, r3
 801f7ea:	4b0b      	ldr	r3, [pc, #44]	@ (801f818 <ip4_route+0xf0>)
 801f7ec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
 801f7f0:	4b09      	ldr	r3, [pc, #36]	@ (801f818 <ip4_route+0xf0>)
 801f7f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801f7f6:	3301      	adds	r3, #1
 801f7f8:	4a07      	ldr	r2, [pc, #28]	@ (801f818 <ip4_route+0xf0>)
 801f7fa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    return NULL;
 801f7fe:	2300      	movs	r3, #0
 801f800:	e001      	b.n	801f806 <ip4_route+0xde>
  }

  return netif_default;
 801f802:	4b04      	ldr	r3, [pc, #16]	@ (801f814 <ip4_route+0xec>)
 801f804:	681b      	ldr	r3, [r3, #0]
}
 801f806:	4618      	mov	r0, r3
 801f808:	3714      	adds	r7, #20
 801f80a:	46bd      	mov	sp, r7
 801f80c:	bc80      	pop	{r7}
 801f80e:	4770      	bx	lr
 801f810:	2000be7c 	.word	0x2000be7c
 801f814:	2000be80 	.word	0x2000be80
 801f818:	2000be88 	.word	0x2000be88

0801f81c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801f81c:	b580      	push	{r7, lr}
 801f81e:	b088      	sub	sp, #32
 801f820:	af00      	add	r7, sp, #0
 801f822:	6078      	str	r0, [r7, #4]
 801f824:	6039      	str	r1, [r7, #0]
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801f826:	2301      	movs	r3, #1
 801f828:	617b      	str	r3, [r7, #20]
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */

  IP_STATS_INC(ip.recv);
 801f82a:	4b9d      	ldr	r3, [pc, #628]	@ (801faa0 <ip4_input+0x284>)
 801f82c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801f830:	3301      	adds	r3, #1
 801f832:	b29a      	uxth	r2, r3
 801f834:	4b9a      	ldr	r3, [pc, #616]	@ (801faa0 <ip4_input+0x284>)
 801f836:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);
 801f83a:	4b99      	ldr	r3, [pc, #612]	@ (801faa0 <ip4_input+0x284>)
 801f83c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 801f840:	3301      	adds	r3, #1
 801f842:	4a97      	ldr	r2, [pc, #604]	@ (801faa0 <ip4_input+0x284>)
 801f844:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801f848:	687b      	ldr	r3, [r7, #4]
 801f84a:	685b      	ldr	r3, [r3, #4]
 801f84c:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801f84e:	69fb      	ldr	r3, [r7, #28]
 801f850:	781b      	ldrb	r3, [r3, #0]
 801f852:	091b      	lsrs	r3, r3, #4
 801f854:	b2db      	uxtb	r3, r3
 801f856:	2b04      	cmp	r3, #4
 801f858:	d01b      	beq.n	801f892 <ip4_input+0x76>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801f85a:	6878      	ldr	r0, [r7, #4]
 801f85c:	f7f6 fa22 	bl	8015ca4 <pbuf_free>
    IP_STATS_INC(ip.err);
 801f860:	4b8f      	ldr	r3, [pc, #572]	@ (801faa0 <ip4_input+0x284>)
 801f862:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801f866:	3301      	adds	r3, #1
 801f868:	b29a      	uxth	r2, r3
 801f86a:	4b8d      	ldr	r3, [pc, #564]	@ (801faa0 <ip4_input+0x284>)
 801f86c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    IP_STATS_INC(ip.drop);
 801f870:	4b8b      	ldr	r3, [pc, #556]	@ (801faa0 <ip4_input+0x284>)
 801f872:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801f876:	3301      	adds	r3, #1
 801f878:	b29a      	uxth	r2, r3
 801f87a:	4b89      	ldr	r3, [pc, #548]	@ (801faa0 <ip4_input+0x284>)
 801f87c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
 801f880:	4b87      	ldr	r3, [pc, #540]	@ (801faa0 <ip4_input+0x284>)
 801f882:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801f886:	3301      	adds	r3, #1
 801f888:	4a85      	ldr	r2, [pc, #532]	@ (801faa0 <ip4_input+0x284>)
 801f88a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
    return ERR_OK;
 801f88e:	2300      	movs	r3, #0
 801f890:	e1b3      	b.n	801fbfa <ip4_input+0x3de>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 801f892:	69fb      	ldr	r3, [r7, #28]
 801f894:	781b      	ldrb	r3, [r3, #0]
 801f896:	f003 030f 	and.w	r3, r3, #15
 801f89a:	81fb      	strh	r3, [r7, #14]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 801f89c:	89fb      	ldrh	r3, [r7, #14]
 801f89e:	009b      	lsls	r3, r3, #2
 801f8a0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801f8a2:	69fb      	ldr	r3, [r7, #28]
 801f8a4:	885b      	ldrh	r3, [r3, #2]
 801f8a6:	b29b      	uxth	r3, r3
 801f8a8:	4618      	mov	r0, r3
 801f8aa:	f7f4 ffa3 	bl	80147f4 <lwip_htons>
 801f8ae:	4603      	mov	r3, r0
 801f8b0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801f8b2:	687b      	ldr	r3, [r7, #4]
 801f8b4:	891b      	ldrh	r3, [r3, #8]
 801f8b6:	89ba      	ldrh	r2, [r7, #12]
 801f8b8:	429a      	cmp	r2, r3
 801f8ba:	d204      	bcs.n	801f8c6 <ip4_input+0xaa>
    pbuf_realloc(p, iphdr_len);
 801f8bc:	89bb      	ldrh	r3, [r7, #12]
 801f8be:	4619      	mov	r1, r3
 801f8c0:	6878      	ldr	r0, [r7, #4]
 801f8c2:	f7f6 f87b 	bl	80159bc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801f8c6:	687b      	ldr	r3, [r7, #4]
 801f8c8:	895b      	ldrh	r3, [r3, #10]
 801f8ca:	89fa      	ldrh	r2, [r7, #14]
 801f8cc:	429a      	cmp	r2, r3
 801f8ce:	d807      	bhi.n	801f8e0 <ip4_input+0xc4>
 801f8d0:	687b      	ldr	r3, [r7, #4]
 801f8d2:	891b      	ldrh	r3, [r3, #8]
 801f8d4:	89ba      	ldrh	r2, [r7, #12]
 801f8d6:	429a      	cmp	r2, r3
 801f8d8:	d802      	bhi.n	801f8e0 <ip4_input+0xc4>
 801f8da:	89fb      	ldrh	r3, [r7, #14]
 801f8dc:	2b13      	cmp	r3, #19
 801f8de:	d81b      	bhi.n	801f918 <ip4_input+0xfc>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801f8e0:	6878      	ldr	r0, [r7, #4]
 801f8e2:	f7f6 f9df 	bl	8015ca4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 801f8e6:	4b6e      	ldr	r3, [pc, #440]	@ (801faa0 <ip4_input+0x284>)
 801f8e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 801f8ec:	3301      	adds	r3, #1
 801f8ee:	b29a      	uxth	r2, r3
 801f8f0:	4b6b      	ldr	r3, [pc, #428]	@ (801faa0 <ip4_input+0x284>)
 801f8f2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    IP_STATS_INC(ip.drop);
 801f8f6:	4b6a      	ldr	r3, [pc, #424]	@ (801faa0 <ip4_input+0x284>)
 801f8f8:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801f8fc:	3301      	adds	r3, #1
 801f8fe:	b29a      	uxth	r2, r3
 801f900:	4b67      	ldr	r3, [pc, #412]	@ (801faa0 <ip4_input+0x284>)
 801f902:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
 801f906:	4b66      	ldr	r3, [pc, #408]	@ (801faa0 <ip4_input+0x284>)
 801f908:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801f90c:	3301      	adds	r3, #1
 801f90e:	4a64      	ldr	r2, [pc, #400]	@ (801faa0 <ip4_input+0x284>)
 801f910:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
    return ERR_OK;
 801f914:	2300      	movs	r3, #0
 801f916:	e170      	b.n	801fbfa <ip4_input+0x3de>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801f918:	69fb      	ldr	r3, [r7, #28]
 801f91a:	691b      	ldr	r3, [r3, #16]
 801f91c:	4a61      	ldr	r2, [pc, #388]	@ (801faa4 <ip4_input+0x288>)
 801f91e:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801f920:	69fb      	ldr	r3, [r7, #28]
 801f922:	68db      	ldr	r3, [r3, #12]
 801f924:	4a5f      	ldr	r2, [pc, #380]	@ (801faa4 <ip4_input+0x288>)
 801f926:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801f928:	4b5e      	ldr	r3, [pc, #376]	@ (801faa4 <ip4_input+0x288>)
 801f92a:	695b      	ldr	r3, [r3, #20]
 801f92c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801f930:	2be0      	cmp	r3, #224	@ 0xe0
 801f932:	d112      	bne.n	801f95a <ip4_input+0x13e>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801f934:	683b      	ldr	r3, [r7, #0]
 801f936:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801f93a:	f003 0301 	and.w	r3, r3, #1
 801f93e:	b2db      	uxtb	r3, r3
 801f940:	2b00      	cmp	r3, #0
 801f942:	d007      	beq.n	801f954 <ip4_input+0x138>
 801f944:	683b      	ldr	r3, [r7, #0]
 801f946:	3304      	adds	r3, #4
 801f948:	681b      	ldr	r3, [r3, #0]
 801f94a:	2b00      	cmp	r3, #0
 801f94c:	d002      	beq.n	801f954 <ip4_input+0x138>
      netif = inp;
 801f94e:	683b      	ldr	r3, [r7, #0]
 801f950:	61bb      	str	r3, [r7, #24]
 801f952:	e041      	b.n	801f9d8 <ip4_input+0x1bc>
    } else {
      netif = NULL;
 801f954:	2300      	movs	r3, #0
 801f956:	61bb      	str	r3, [r7, #24]
 801f958:	e03e      	b.n	801f9d8 <ip4_input+0x1bc>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 801f95a:	2301      	movs	r3, #1
 801f95c:	613b      	str	r3, [r7, #16]
    netif = inp;
 801f95e:	683b      	ldr	r3, [r7, #0]
 801f960:	61bb      	str	r3, [r7, #24]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801f962:	69bb      	ldr	r3, [r7, #24]
 801f964:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801f968:	f003 0301 	and.w	r3, r3, #1
 801f96c:	b2db      	uxtb	r3, r3
 801f96e:	2b00      	cmp	r3, #0
 801f970:	d014      	beq.n	801f99c <ip4_input+0x180>
 801f972:	69bb      	ldr	r3, [r7, #24]
 801f974:	3304      	adds	r3, #4
 801f976:	681b      	ldr	r3, [r3, #0]
 801f978:	2b00      	cmp	r3, #0
 801f97a:	d00f      	beq.n	801f99c <ip4_input+0x180>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801f97c:	4b49      	ldr	r3, [pc, #292]	@ (801faa4 <ip4_input+0x288>)
 801f97e:	695a      	ldr	r2, [r3, #20]
 801f980:	69bb      	ldr	r3, [r7, #24]
 801f982:	3304      	adds	r3, #4
 801f984:	681b      	ldr	r3, [r3, #0]
 801f986:	429a      	cmp	r2, r3
 801f988:	d026      	beq.n	801f9d8 <ip4_input+0x1bc>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801f98a:	4b46      	ldr	r3, [pc, #280]	@ (801faa4 <ip4_input+0x288>)
 801f98c:	695b      	ldr	r3, [r3, #20]
 801f98e:	69b9      	ldr	r1, [r7, #24]
 801f990:	4618      	mov	r0, r3
 801f992:	f000 fa2d 	bl	801fdf0 <ip4_addr_isbroadcast_u32>
 801f996:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801f998:	2b00      	cmp	r3, #0
 801f99a:	d11d      	bne.n	801f9d8 <ip4_input+0x1bc>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 801f99c:	693b      	ldr	r3, [r7, #16]
 801f99e:	2b00      	cmp	r3, #0
 801f9a0:	d00d      	beq.n	801f9be <ip4_input+0x1a2>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 801f9a2:	4b40      	ldr	r3, [pc, #256]	@ (801faa4 <ip4_input+0x288>)
 801f9a4:	695b      	ldr	r3, [r3, #20]
 801f9a6:	b2db      	uxtb	r3, r3
 801f9a8:	2b7f      	cmp	r3, #127	@ 0x7f
 801f9aa:	d102      	bne.n	801f9b2 <ip4_input+0x196>
          netif = NULL;
 801f9ac:	2300      	movs	r3, #0
 801f9ae:	61bb      	str	r3, [r7, #24]
          break;
 801f9b0:	e012      	b.n	801f9d8 <ip4_input+0x1bc>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 801f9b2:	2300      	movs	r3, #0
 801f9b4:	613b      	str	r3, [r7, #16]
        netif = netif_list;
 801f9b6:	4b3c      	ldr	r3, [pc, #240]	@ (801faa8 <ip4_input+0x28c>)
 801f9b8:	681b      	ldr	r3, [r3, #0]
 801f9ba:	61bb      	str	r3, [r7, #24]
 801f9bc:	e002      	b.n	801f9c4 <ip4_input+0x1a8>
      } else {
        netif = netif->next;
 801f9be:	69bb      	ldr	r3, [r7, #24]
 801f9c0:	681b      	ldr	r3, [r3, #0]
 801f9c2:	61bb      	str	r3, [r7, #24]
      }
      if (netif == inp) {
 801f9c4:	69ba      	ldr	r2, [r7, #24]
 801f9c6:	683b      	ldr	r3, [r7, #0]
 801f9c8:	429a      	cmp	r2, r3
 801f9ca:	d102      	bne.n	801f9d2 <ip4_input+0x1b6>
        netif = netif->next;
 801f9cc:	69bb      	ldr	r3, [r7, #24]
 801f9ce:	681b      	ldr	r3, [r3, #0]
 801f9d0:	61bb      	str	r3, [r7, #24]
      }
    } while (netif != NULL);
 801f9d2:	69bb      	ldr	r3, [r7, #24]
 801f9d4:	2b00      	cmp	r3, #0
 801f9d6:	d1c4      	bne.n	801f962 <ip4_input+0x146>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801f9d8:	69bb      	ldr	r3, [r7, #24]
 801f9da:	2b00      	cmp	r3, #0
 801f9dc:	d111      	bne.n	801fa02 <ip4_input+0x1e6>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801f9de:	69fb      	ldr	r3, [r7, #28]
 801f9e0:	7a5b      	ldrb	r3, [r3, #9]
 801f9e2:	2b11      	cmp	r3, #17
 801f9e4:	d10d      	bne.n	801fa02 <ip4_input+0x1e6>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
 801f9e6:	89fb      	ldrh	r3, [r7, #14]
 801f9e8:	69fa      	ldr	r2, [r7, #28]
 801f9ea:	4413      	add	r3, r2
 801f9ec:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
        lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801f9ee:	68bb      	ldr	r3, [r7, #8]
 801f9f0:	885b      	ldrh	r3, [r3, #2]
 801f9f2:	b29b      	uxth	r3, r3
 801f9f4:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 801f9f8:	d103      	bne.n	801fa02 <ip4_input+0x1e6>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801f9fa:	683b      	ldr	r3, [r7, #0]
 801f9fc:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801f9fe:	2300      	movs	r3, #0
 801fa00:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801fa02:	697b      	ldr	r3, [r7, #20]
 801fa04:	2b00      	cmp	r3, #0
 801fa06:	d02d      	beq.n	801fa64 <ip4_input+0x248>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801fa08:	4b26      	ldr	r3, [pc, #152]	@ (801faa4 <ip4_input+0x288>)
 801fa0a:	691b      	ldr	r3, [r3, #16]
 801fa0c:	2b00      	cmp	r3, #0
 801fa0e:	d029      	beq.n	801fa64 <ip4_input+0x248>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801fa10:	4b24      	ldr	r3, [pc, #144]	@ (801faa4 <ip4_input+0x288>)
 801fa12:	691b      	ldr	r3, [r3, #16]
 801fa14:	6839      	ldr	r1, [r7, #0]
 801fa16:	4618      	mov	r0, r3
 801fa18:	f000 f9ea 	bl	801fdf0 <ip4_addr_isbroadcast_u32>
 801fa1c:	4603      	mov	r3, r0
 801fa1e:	2b00      	cmp	r3, #0
 801fa20:	d105      	bne.n	801fa2e <ip4_input+0x212>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801fa22:	4b20      	ldr	r3, [pc, #128]	@ (801faa4 <ip4_input+0x288>)
 801fa24:	691b      	ldr	r3, [r3, #16]
 801fa26:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801fa2a:	2be0      	cmp	r3, #224	@ 0xe0
 801fa2c:	d11a      	bne.n	801fa64 <ip4_input+0x248>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801fa2e:	6878      	ldr	r0, [r7, #4]
 801fa30:	f7f6 f938 	bl	8015ca4 <pbuf_free>
      IP_STATS_INC(ip.drop);
 801fa34:	4b1a      	ldr	r3, [pc, #104]	@ (801faa0 <ip4_input+0x284>)
 801fa36:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801fa3a:	3301      	adds	r3, #1
 801fa3c:	b29a      	uxth	r2, r3
 801fa3e:	4b18      	ldr	r3, [pc, #96]	@ (801faa0 <ip4_input+0x284>)
 801fa40:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
 801fa44:	4b16      	ldr	r3, [pc, #88]	@ (801faa0 <ip4_input+0x284>)
 801fa46:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 801fa4a:	3301      	adds	r3, #1
 801fa4c:	4a14      	ldr	r2, [pc, #80]	@ (801faa0 <ip4_input+0x284>)
 801fa4e:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
      MIB2_STATS_INC(mib2.ipindiscards);
 801fa52:	4b13      	ldr	r3, [pc, #76]	@ (801faa0 <ip4_input+0x284>)
 801fa54:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801fa58:	3301      	adds	r3, #1
 801fa5a:	4a11      	ldr	r2, [pc, #68]	@ (801faa0 <ip4_input+0x284>)
 801fa5c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      return ERR_OK;
 801fa60:	2300      	movs	r3, #0
 801fa62:	e0ca      	b.n	801fbfa <ip4_input+0x3de>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801fa64:	69bb      	ldr	r3, [r7, #24]
 801fa66:	2b00      	cmp	r3, #0
 801fa68:	d120      	bne.n	801faac <ip4_input+0x290>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, iphdr, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
 801fa6a:	4b0d      	ldr	r3, [pc, #52]	@ (801faa0 <ip4_input+0x284>)
 801fa6c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801fa70:	3301      	adds	r3, #1
 801fa72:	b29a      	uxth	r2, r3
 801fa74:	4b0a      	ldr	r3, [pc, #40]	@ (801faa0 <ip4_input+0x284>)
 801fa76:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
 801fa7a:	4b09      	ldr	r3, [pc, #36]	@ (801faa0 <ip4_input+0x284>)
 801fa7c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 801fa80:	3301      	adds	r3, #1
 801fa82:	4a07      	ldr	r2, [pc, #28]	@ (801faa0 <ip4_input+0x284>)
 801fa84:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
      MIB2_STATS_INC(mib2.ipindiscards);
 801fa88:	4b05      	ldr	r3, [pc, #20]	@ (801faa0 <ip4_input+0x284>)
 801fa8a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801fa8e:	3301      	adds	r3, #1
 801fa90:	4a03      	ldr	r2, [pc, #12]	@ (801faa0 <ip4_input+0x284>)
 801fa92:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
    }
    pbuf_free(p);
 801fa96:	6878      	ldr	r0, [r7, #4]
 801fa98:	f7f6 f904 	bl	8015ca4 <pbuf_free>
    return ERR_OK;
 801fa9c:	2300      	movs	r3, #0
 801fa9e:	e0ac      	b.n	801fbfa <ip4_input+0x3de>
 801faa0:	2000be88 	.word	0x2000be88
 801faa4:	200088a0 	.word	0x200088a0
 801faa8:	2000be7c 	.word	0x2000be7c
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801faac:	69fb      	ldr	r3, [r7, #28]
 801faae:	88db      	ldrh	r3, [r3, #6]
 801fab0:	b29b      	uxth	r3, r3
 801fab2:	461a      	mov	r2, r3
 801fab4:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801fab8:	4013      	ands	r3, r2
 801faba:	2b00      	cmp	r3, #0
 801fabc:	d00b      	beq.n	801fad6 <ip4_input+0x2ba>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801fabe:	6878      	ldr	r0, [r7, #4]
 801fac0:	f000 fed0 	bl	8020864 <ip4_reass>
 801fac4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801fac6:	687b      	ldr	r3, [r7, #4]
 801fac8:	2b00      	cmp	r3, #0
 801faca:	d101      	bne.n	801fad0 <ip4_input+0x2b4>
      return ERR_OK;
 801facc:	2300      	movs	r3, #0
 801face:	e094      	b.n	801fbfa <ip4_input+0x3de>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801fad0:	687b      	ldr	r3, [r7, #4]
 801fad2:	685b      	ldr	r3, [r3, #4]
 801fad4:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801fad6:	4a4b      	ldr	r2, [pc, #300]	@ (801fc04 <ip4_input+0x3e8>)
 801fad8:	69bb      	ldr	r3, [r7, #24]
 801fada:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801fadc:	4a49      	ldr	r2, [pc, #292]	@ (801fc04 <ip4_input+0x3e8>)
 801fade:	683b      	ldr	r3, [r7, #0]
 801fae0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801fae2:	4a48      	ldr	r2, [pc, #288]	@ (801fc04 <ip4_input+0x3e8>)
 801fae4:	69fb      	ldr	r3, [r7, #28]
 801fae6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 801fae8:	69fb      	ldr	r3, [r7, #28]
 801faea:	781b      	ldrb	r3, [r3, #0]
 801faec:	f003 030f 	and.w	r3, r3, #15
 801faf0:	b29b      	uxth	r3, r3
 801faf2:	009b      	lsls	r3, r3, #2
 801faf4:	b29a      	uxth	r2, r3
 801faf6:	4b43      	ldr	r3, [pc, #268]	@ (801fc04 <ip4_input+0x3e8>)
 801faf8:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 801fafa:	89fb      	ldrh	r3, [r7, #14]
 801fafc:	425b      	negs	r3, r3
 801fafe:	b29b      	uxth	r3, r3
 801fb00:	b21b      	sxth	r3, r3
 801fb02:	4619      	mov	r1, r3
 801fb04:	6878      	ldr	r0, [r7, #4]
 801fb06:	f7f6 f8a9 	bl	8015c5c <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 801fb0a:	69fb      	ldr	r3, [r7, #28]
 801fb0c:	7a5b      	ldrb	r3, [r3, #9]
 801fb0e:	2b11      	cmp	r3, #17
 801fb10:	d006      	beq.n	801fb20 <ip4_input+0x304>
 801fb12:	2b11      	cmp	r3, #17
 801fb14:	dc28      	bgt.n	801fb68 <ip4_input+0x34c>
 801fb16:	2b01      	cmp	r3, #1
 801fb18:	d01a      	beq.n	801fb50 <ip4_input+0x334>
 801fb1a:	2b06      	cmp	r3, #6
 801fb1c:	d00c      	beq.n	801fb38 <ip4_input+0x31c>
 801fb1e:	e023      	b.n	801fb68 <ip4_input+0x34c>
#if LWIP_UDP
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
 801fb20:	4b39      	ldr	r3, [pc, #228]	@ (801fc08 <ip4_input+0x3ec>)
 801fb22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801fb26:	3301      	adds	r3, #1
 801fb28:	4a37      	ldr	r2, [pc, #220]	@ (801fc08 <ip4_input+0x3ec>)
 801fb2a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
      udp_input(p, inp);
 801fb2e:	6839      	ldr	r1, [r7, #0]
 801fb30:	6878      	ldr	r0, [r7, #4]
 801fb32:	f7fc f93d 	bl	801bdb0 <udp_input>
      break;
 801fb36:	e04d      	b.n	801fbd4 <ip4_input+0x3b8>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
 801fb38:	4b33      	ldr	r3, [pc, #204]	@ (801fc08 <ip4_input+0x3ec>)
 801fb3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801fb3e:	3301      	adds	r3, #1
 801fb40:	4a31      	ldr	r2, [pc, #196]	@ (801fc08 <ip4_input+0x3ec>)
 801fb42:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
      tcp_input(p, inp);
 801fb46:	6839      	ldr	r1, [r7, #0]
 801fb48:	6878      	ldr	r0, [r7, #4]
 801fb4a:	f7f8 f8c1 	bl	8017cd0 <tcp_input>
      break;
 801fb4e:	e041      	b.n	801fbd4 <ip4_input+0x3b8>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
 801fb50:	4b2d      	ldr	r3, [pc, #180]	@ (801fc08 <ip4_input+0x3ec>)
 801fb52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801fb56:	3301      	adds	r3, #1
 801fb58:	4a2b      	ldr	r2, [pc, #172]	@ (801fc08 <ip4_input+0x3ec>)
 801fb5a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
      icmp_input(p, inp);
 801fb5e:	6839      	ldr	r1, [r7, #0]
 801fb60:	6878      	ldr	r0, [r7, #4]
 801fb62:	f7ff fb57 	bl	801f214 <icmp_input>
      break;
 801fb66:	e035      	b.n	801fbd4 <ip4_input+0x3b8>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801fb68:	4b26      	ldr	r3, [pc, #152]	@ (801fc04 <ip4_input+0x3e8>)
 801fb6a:	695b      	ldr	r3, [r3, #20]
 801fb6c:	69b9      	ldr	r1, [r7, #24]
 801fb6e:	4618      	mov	r0, r3
 801fb70:	f000 f93e 	bl	801fdf0 <ip4_addr_isbroadcast_u32>
 801fb74:	4603      	mov	r3, r0
 801fb76:	2b00      	cmp	r3, #0
 801fb78:	d112      	bne.n	801fba0 <ip4_input+0x384>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801fb7a:	4b22      	ldr	r3, [pc, #136]	@ (801fc04 <ip4_input+0x3e8>)
 801fb7c:	695b      	ldr	r3, [r3, #20]
 801fb7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801fb82:	2be0      	cmp	r3, #224	@ 0xe0
 801fb84:	d00c      	beq.n	801fba0 <ip4_input+0x384>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 801fb86:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801fb8a:	4619      	mov	r1, r3
 801fb8c:	6878      	ldr	r0, [r7, #4]
 801fb8e:	f7f6 f877 	bl	8015c80 <pbuf_header_force>
        p->payload = iphdr;
 801fb92:	687b      	ldr	r3, [r7, #4]
 801fb94:	69fa      	ldr	r2, [r7, #28]
 801fb96:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801fb98:	2102      	movs	r1, #2
 801fb9a:	6878      	ldr	r0, [r7, #4]
 801fb9c:	f7ff fd10 	bl	801f5c0 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 801fba0:	6878      	ldr	r0, [r7, #4]
 801fba2:	f7f6 f87f 	bl	8015ca4 <pbuf_free>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

      IP_STATS_INC(ip.proterr);
 801fba6:	4b18      	ldr	r3, [pc, #96]	@ (801fc08 <ip4_input+0x3ec>)
 801fba8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801fbac:	3301      	adds	r3, #1
 801fbae:	b29a      	uxth	r2, r3
 801fbb0:	4b15      	ldr	r3, [pc, #84]	@ (801fc08 <ip4_input+0x3ec>)
 801fbb2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
      IP_STATS_INC(ip.drop);
 801fbb6:	4b14      	ldr	r3, [pc, #80]	@ (801fc08 <ip4_input+0x3ec>)
 801fbb8:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801fbbc:	3301      	adds	r3, #1
 801fbbe:	b29a      	uxth	r2, r3
 801fbc0:	4b11      	ldr	r3, [pc, #68]	@ (801fc08 <ip4_input+0x3ec>)
 801fbc2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      MIB2_STATS_INC(mib2.ipinunknownprotos);
 801fbc6:	4b10      	ldr	r3, [pc, #64]	@ (801fc08 <ip4_input+0x3ec>)
 801fbc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801fbcc:	3301      	adds	r3, #1
 801fbce:	4a0e      	ldr	r2, [pc, #56]	@ (801fc08 <ip4_input+0x3ec>)
 801fbd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801fbd4:	4b0b      	ldr	r3, [pc, #44]	@ (801fc04 <ip4_input+0x3e8>)
 801fbd6:	2200      	movs	r2, #0
 801fbd8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801fbda:	4b0a      	ldr	r3, [pc, #40]	@ (801fc04 <ip4_input+0x3e8>)
 801fbdc:	2200      	movs	r2, #0
 801fbde:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801fbe0:	4b08      	ldr	r3, [pc, #32]	@ (801fc04 <ip4_input+0x3e8>)
 801fbe2:	2200      	movs	r2, #0
 801fbe4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801fbe6:	4b07      	ldr	r3, [pc, #28]	@ (801fc04 <ip4_input+0x3e8>)
 801fbe8:	2200      	movs	r2, #0
 801fbea:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801fbec:	4b05      	ldr	r3, [pc, #20]	@ (801fc04 <ip4_input+0x3e8>)
 801fbee:	2200      	movs	r2, #0
 801fbf0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801fbf2:	4b04      	ldr	r3, [pc, #16]	@ (801fc04 <ip4_input+0x3e8>)
 801fbf4:	2200      	movs	r2, #0
 801fbf6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801fbf8:	2300      	movs	r3, #0
}
 801fbfa:	4618      	mov	r0, r3
 801fbfc:	3720      	adds	r7, #32
 801fbfe:	46bd      	mov	sp, r7
 801fc00:	bd80      	pop	{r7, pc}
 801fc02:	bf00      	nop
 801fc04:	200088a0 	.word	0x200088a0
 801fc08:	2000be88 	.word	0x2000be88

0801fc0c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 801fc0c:	b580      	push	{r7, lr}
 801fc0e:	b08a      	sub	sp, #40	@ 0x28
 801fc10:	af04      	add	r7, sp, #16
 801fc12:	60f8      	str	r0, [r7, #12]
 801fc14:	60b9      	str	r1, [r7, #8]
 801fc16:	607a      	str	r2, [r7, #4]
 801fc18:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801fc1a:	68bb      	ldr	r3, [r7, #8]
 801fc1c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801fc1e:	687b      	ldr	r3, [r7, #4]
 801fc20:	2b00      	cmp	r3, #0
 801fc22:	d009      	beq.n	801fc38 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801fc24:	68bb      	ldr	r3, [r7, #8]
 801fc26:	2b00      	cmp	r3, #0
 801fc28:	d003      	beq.n	801fc32 <ip4_output_if+0x26>
 801fc2a:	68bb      	ldr	r3, [r7, #8]
 801fc2c:	681b      	ldr	r3, [r3, #0]
 801fc2e:	2b00      	cmp	r3, #0
 801fc30:	d102      	bne.n	801fc38 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801fc32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fc34:	3304      	adds	r3, #4
 801fc36:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801fc38:	78fa      	ldrb	r2, [r7, #3]
 801fc3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fc3c:	9302      	str	r3, [sp, #8]
 801fc3e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801fc42:	9301      	str	r3, [sp, #4]
 801fc44:	f897 3020 	ldrb.w	r3, [r7, #32]
 801fc48:	9300      	str	r3, [sp, #0]
 801fc4a:	4613      	mov	r3, r2
 801fc4c:	687a      	ldr	r2, [r7, #4]
 801fc4e:	6979      	ldr	r1, [r7, #20]
 801fc50:	68f8      	ldr	r0, [r7, #12]
 801fc52:	f000 f805 	bl	801fc60 <ip4_output_if_src>
 801fc56:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801fc58:	4618      	mov	r0, r3
 801fc5a:	3718      	adds	r7, #24
 801fc5c:	46bd      	mov	sp, r7
 801fc5e:	bd80      	pop	{r7, pc}

0801fc60 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 801fc60:	b580      	push	{r7, lr}
 801fc62:	b088      	sub	sp, #32
 801fc64:	af00      	add	r7, sp, #0
 801fc66:	60f8      	str	r0, [r7, #12]
 801fc68:	60b9      	str	r1, [r7, #8]
 801fc6a:	607a      	str	r2, [r7, #4]
 801fc6c:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801fc6e:	68fb      	ldr	r3, [r7, #12]
 801fc70:	89db      	ldrh	r3, [r3, #14]
 801fc72:	2b01      	cmp	r3, #1
 801fc74:	d006      	beq.n	801fc84 <ip4_output_if_src+0x24>
 801fc76:	4b57      	ldr	r3, [pc, #348]	@ (801fdd4 <ip4_output_if_src+0x174>)
 801fc78:	f240 3233 	movw	r2, #819	@ 0x333
 801fc7c:	4956      	ldr	r1, [pc, #344]	@ (801fdd8 <ip4_output_if_src+0x178>)
 801fc7e:	4857      	ldr	r0, [pc, #348]	@ (801fddc <ip4_output_if_src+0x17c>)
 801fc80:	f002 f802 	bl	8021c88 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);
 801fc84:	4b56      	ldr	r3, [pc, #344]	@ (801fde0 <ip4_output_if_src+0x180>)
 801fc86:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 801fc8a:	3301      	adds	r3, #1
 801fc8c:	4a54      	ldr	r2, [pc, #336]	@ (801fde0 <ip4_output_if_src+0x180>)
 801fc8e:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801fc92:	687b      	ldr	r3, [r7, #4]
 801fc94:	2b00      	cmp	r3, #0
 801fc96:	d06f      	beq.n	801fd78 <ip4_output_if_src+0x118>
    u16_t ip_hlen = IP_HLEN;
 801fc98:	2314      	movs	r3, #20
 801fc9a:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 801fc9c:	2114      	movs	r1, #20
 801fc9e:	68f8      	ldr	r0, [r7, #12]
 801fca0:	f7f5 ffdc 	bl	8015c5c <pbuf_header>
 801fca4:	4603      	mov	r3, r0
 801fca6:	2b00      	cmp	r3, #0
 801fca8:	d011      	beq.n	801fcce <ip4_output_if_src+0x6e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 801fcaa:	4b4d      	ldr	r3, [pc, #308]	@ (801fde0 <ip4_output_if_src+0x180>)
 801fcac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801fcb0:	3301      	adds	r3, #1
 801fcb2:	b29a      	uxth	r2, r3
 801fcb4:	4b4a      	ldr	r3, [pc, #296]	@ (801fde0 <ip4_output_if_src+0x180>)
 801fcb6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
 801fcba:	4b49      	ldr	r3, [pc, #292]	@ (801fde0 <ip4_output_if_src+0x180>)
 801fcbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801fcc0:	3301      	adds	r3, #1
 801fcc2:	4a47      	ldr	r2, [pc, #284]	@ (801fde0 <ip4_output_if_src+0x180>)
 801fcc4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      return ERR_BUF;
 801fcc8:	f06f 0301 	mvn.w	r3, #1
 801fccc:	e07d      	b.n	801fdca <ip4_output_if_src+0x16a>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801fcce:	68fb      	ldr	r3, [r7, #12]
 801fcd0:	685b      	ldr	r3, [r3, #4]
 801fcd2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801fcd4:	68fb      	ldr	r3, [r7, #12]
 801fcd6:	895b      	ldrh	r3, [r3, #10]
 801fcd8:	2b13      	cmp	r3, #19
 801fcda:	d806      	bhi.n	801fcea <ip4_output_if_src+0x8a>
 801fcdc:	4b3d      	ldr	r3, [pc, #244]	@ (801fdd4 <ip4_output_if_src+0x174>)
 801fcde:	f44f 7258 	mov.w	r2, #864	@ 0x360
 801fce2:	4940      	ldr	r1, [pc, #256]	@ (801fde4 <ip4_output_if_src+0x184>)
 801fce4:	483d      	ldr	r0, [pc, #244]	@ (801fddc <ip4_output_if_src+0x17c>)
 801fce6:	f001 ffcf 	bl	8021c88 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801fcea:	69fb      	ldr	r3, [r7, #28]
 801fcec:	78fa      	ldrb	r2, [r7, #3]
 801fcee:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801fcf0:	69fb      	ldr	r3, [r7, #28]
 801fcf2:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801fcf6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801fcf8:	687b      	ldr	r3, [r7, #4]
 801fcfa:	681a      	ldr	r2, [r3, #0]
 801fcfc:	69fb      	ldr	r3, [r7, #28]
 801fcfe:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801fd00:	8b7b      	ldrh	r3, [r7, #26]
 801fd02:	089b      	lsrs	r3, r3, #2
 801fd04:	b29b      	uxth	r3, r3
 801fd06:	b2db      	uxtb	r3, r3
 801fd08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801fd0c:	b2da      	uxtb	r2, r3
 801fd0e:	69fb      	ldr	r3, [r7, #28]
 801fd10:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801fd12:	69fb      	ldr	r3, [r7, #28]
 801fd14:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801fd18:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801fd1a:	68fb      	ldr	r3, [r7, #12]
 801fd1c:	891b      	ldrh	r3, [r3, #8]
 801fd1e:	4618      	mov	r0, r3
 801fd20:	f7f4 fd68 	bl	80147f4 <lwip_htons>
 801fd24:	4603      	mov	r3, r0
 801fd26:	461a      	mov	r2, r3
 801fd28:	69fb      	ldr	r3, [r7, #28]
 801fd2a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801fd2c:	69fb      	ldr	r3, [r7, #28]
 801fd2e:	2200      	movs	r2, #0
 801fd30:	719a      	strb	r2, [r3, #6]
 801fd32:	2200      	movs	r2, #0
 801fd34:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801fd36:	4b2c      	ldr	r3, [pc, #176]	@ (801fde8 <ip4_output_if_src+0x188>)
 801fd38:	881b      	ldrh	r3, [r3, #0]
 801fd3a:	4618      	mov	r0, r3
 801fd3c:	f7f4 fd5a 	bl	80147f4 <lwip_htons>
 801fd40:	4603      	mov	r3, r0
 801fd42:	461a      	mov	r2, r3
 801fd44:	69fb      	ldr	r3, [r7, #28]
 801fd46:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801fd48:	4b27      	ldr	r3, [pc, #156]	@ (801fde8 <ip4_output_if_src+0x188>)
 801fd4a:	881b      	ldrh	r3, [r3, #0]
 801fd4c:	3301      	adds	r3, #1
 801fd4e:	b29a      	uxth	r2, r3
 801fd50:	4b25      	ldr	r3, [pc, #148]	@ (801fde8 <ip4_output_if_src+0x188>)
 801fd52:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801fd54:	68bb      	ldr	r3, [r7, #8]
 801fd56:	2b00      	cmp	r3, #0
 801fd58:	d104      	bne.n	801fd64 <ip4_output_if_src+0x104>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801fd5a:	4b24      	ldr	r3, [pc, #144]	@ (801fdec <ip4_output_if_src+0x18c>)
 801fd5c:	681a      	ldr	r2, [r3, #0]
 801fd5e:	69fb      	ldr	r3, [r7, #28]
 801fd60:	60da      	str	r2, [r3, #12]
 801fd62:	e003      	b.n	801fd6c <ip4_output_if_src+0x10c>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801fd64:	68bb      	ldr	r3, [r7, #8]
 801fd66:	681a      	ldr	r2, [r3, #0]
 801fd68:	69fb      	ldr	r3, [r7, #28]
 801fd6a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801fd6c:	69fb      	ldr	r3, [r7, #28]
 801fd6e:	2200      	movs	r2, #0
 801fd70:	729a      	strb	r2, [r3, #10]
 801fd72:	2200      	movs	r2, #0
 801fd74:	72da      	strb	r2, [r3, #11]
 801fd76:	e008      	b.n	801fd8a <ip4_output_if_src+0x12a>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 801fd78:	68fb      	ldr	r3, [r7, #12]
 801fd7a:	685b      	ldr	r3, [r3, #4]
 801fd7c:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801fd7e:	69fb      	ldr	r3, [r7, #28]
 801fd80:	691b      	ldr	r3, [r3, #16]
 801fd82:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801fd84:	f107 0314 	add.w	r3, r7, #20
 801fd88:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);
 801fd8a:	4b15      	ldr	r3, [pc, #84]	@ (801fde0 <ip4_output_if_src+0x180>)
 801fd8c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801fd90:	3301      	adds	r3, #1
 801fd92:	b29a      	uxth	r2, r3
 801fd94:	4b12      	ldr	r3, [pc, #72]	@ (801fde0 <ip4_output_if_src+0x180>)
 801fd96:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801fd9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fd9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801fd9e:	2b00      	cmp	r3, #0
 801fda0:	d00c      	beq.n	801fdbc <ip4_output_if_src+0x15c>
 801fda2:	68fb      	ldr	r3, [r7, #12]
 801fda4:	891a      	ldrh	r2, [r3, #8]
 801fda6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fda8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801fdaa:	429a      	cmp	r2, r3
 801fdac:	d906      	bls.n	801fdbc <ip4_output_if_src+0x15c>
    return ip4_frag(p, netif, dest);
 801fdae:	687a      	ldr	r2, [r7, #4]
 801fdb0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801fdb2:	68f8      	ldr	r0, [r7, #12]
 801fdb4:	f000 ff30 	bl	8020c18 <ip4_frag>
 801fdb8:	4603      	mov	r3, r0
 801fdba:	e006      	b.n	801fdca <ip4_output_if_src+0x16a>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801fdbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fdbe:	695b      	ldr	r3, [r3, #20]
 801fdc0:	687a      	ldr	r2, [r7, #4]
 801fdc2:	68f9      	ldr	r1, [r7, #12]
 801fdc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801fdc6:	4798      	blx	r3
 801fdc8:	4603      	mov	r3, r0
}
 801fdca:	4618      	mov	r0, r3
 801fdcc:	3720      	adds	r7, #32
 801fdce:	46bd      	mov	sp, r7
 801fdd0:	bd80      	pop	{r7, pc}
 801fdd2:	bf00      	nop
 801fdd4:	08027614 	.word	0x08027614
 801fdd8:	08027648 	.word	0x08027648
 801fddc:	08027654 	.word	0x08027654
 801fde0:	2000be88 	.word	0x2000be88
 801fde4:	0802767c 	.word	0x0802767c
 801fde8:	2000c1a6 	.word	0x2000c1a6
 801fdec:	08030cf4 	.word	0x08030cf4

0801fdf0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801fdf0:	b480      	push	{r7}
 801fdf2:	b085      	sub	sp, #20
 801fdf4:	af00      	add	r7, sp, #0
 801fdf6:	6078      	str	r0, [r7, #4]
 801fdf8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801fdfa:	687b      	ldr	r3, [r7, #4]
 801fdfc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801fdfe:	687b      	ldr	r3, [r7, #4]
 801fe00:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fe04:	d002      	beq.n	801fe0c <ip4_addr_isbroadcast_u32+0x1c>
 801fe06:	687b      	ldr	r3, [r7, #4]
 801fe08:	2b00      	cmp	r3, #0
 801fe0a:	d101      	bne.n	801fe10 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801fe0c:	2301      	movs	r3, #1
 801fe0e:	e02a      	b.n	801fe66 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801fe10:	683b      	ldr	r3, [r7, #0]
 801fe12:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801fe16:	f003 0302 	and.w	r3, r3, #2
 801fe1a:	2b00      	cmp	r3, #0
 801fe1c:	d101      	bne.n	801fe22 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801fe1e:	2300      	movs	r3, #0
 801fe20:	e021      	b.n	801fe66 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801fe22:	683b      	ldr	r3, [r7, #0]
 801fe24:	3304      	adds	r3, #4
 801fe26:	681b      	ldr	r3, [r3, #0]
 801fe28:	687a      	ldr	r2, [r7, #4]
 801fe2a:	429a      	cmp	r2, r3
 801fe2c:	d101      	bne.n	801fe32 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801fe2e:	2300      	movs	r3, #0
 801fe30:	e019      	b.n	801fe66 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801fe32:	68fa      	ldr	r2, [r7, #12]
 801fe34:	683b      	ldr	r3, [r7, #0]
 801fe36:	3304      	adds	r3, #4
 801fe38:	681b      	ldr	r3, [r3, #0]
 801fe3a:	405a      	eors	r2, r3
 801fe3c:	683b      	ldr	r3, [r7, #0]
 801fe3e:	3308      	adds	r3, #8
 801fe40:	681b      	ldr	r3, [r3, #0]
 801fe42:	4013      	ands	r3, r2
 801fe44:	2b00      	cmp	r3, #0
 801fe46:	d10d      	bne.n	801fe64 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801fe48:	683b      	ldr	r3, [r7, #0]
 801fe4a:	3308      	adds	r3, #8
 801fe4c:	681b      	ldr	r3, [r3, #0]
 801fe4e:	43da      	mvns	r2, r3
 801fe50:	687b      	ldr	r3, [r7, #4]
 801fe52:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801fe54:	683b      	ldr	r3, [r7, #0]
 801fe56:	3308      	adds	r3, #8
 801fe58:	681b      	ldr	r3, [r3, #0]
 801fe5a:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801fe5c:	429a      	cmp	r2, r3
 801fe5e:	d101      	bne.n	801fe64 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801fe60:	2301      	movs	r3, #1
 801fe62:	e000      	b.n	801fe66 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801fe64:	2300      	movs	r3, #0
  }
}
 801fe66:	4618      	mov	r0, r3
 801fe68:	3714      	adds	r7, #20
 801fe6a:	46bd      	mov	sp, r7
 801fe6c:	bc80      	pop	{r7}
 801fe6e:	4770      	bx	lr

0801fe70 <ipaddr_addr>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
 801fe70:	b580      	push	{r7, lr}
 801fe72:	b084      	sub	sp, #16
 801fe74:	af00      	add	r7, sp, #0
 801fe76:	6078      	str	r0, [r7, #4]
  ip4_addr_t val;

  if (ip4addr_aton(cp, &val)) {
 801fe78:	f107 030c 	add.w	r3, r7, #12
 801fe7c:	4619      	mov	r1, r3
 801fe7e:	6878      	ldr	r0, [r7, #4]
 801fe80:	f000 f80c 	bl	801fe9c <ip4addr_aton>
 801fe84:	4603      	mov	r3, r0
 801fe86:	2b00      	cmp	r3, #0
 801fe88:	d001      	beq.n	801fe8e <ipaddr_addr+0x1e>
    return ip4_addr_get_u32(&val);
 801fe8a:	68fb      	ldr	r3, [r7, #12]
 801fe8c:	e001      	b.n	801fe92 <ipaddr_addr+0x22>
  }
  return (IPADDR_NONE);
 801fe8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801fe92:	4618      	mov	r0, r3
 801fe94:	3710      	adds	r7, #16
 801fe96:	46bd      	mov	sp, r7
 801fe98:	bd80      	pop	{r7, pc}
	...

0801fe9c <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 801fe9c:	b580      	push	{r7, lr}
 801fe9e:	b08a      	sub	sp, #40	@ 0x28
 801fea0:	af00      	add	r7, sp, #0
 801fea2:	6078      	str	r0, [r7, #4]
 801fea4:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 801fea6:	f107 030c 	add.w	r3, r7, #12
 801feaa:	61fb      	str	r3, [r7, #28]

  c = *cp;
 801feac:	687b      	ldr	r3, [r7, #4]
 801feae:	781b      	ldrb	r3, [r3, #0]
 801feb0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!isdigit(c)) {
 801feb4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801feb8:	2b2f      	cmp	r3, #47	@ 0x2f
 801feba:	d903      	bls.n	801fec4 <ip4addr_aton+0x28>
 801febc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801fec0:	2b39      	cmp	r3, #57	@ 0x39
 801fec2:	d901      	bls.n	801fec8 <ip4addr_aton+0x2c>
      return 0;
 801fec4:	2300      	movs	r3, #0
 801fec6:	e11e      	b.n	8020106 <ip4addr_aton+0x26a>
    }
    val = 0;
 801fec8:	2300      	movs	r3, #0
 801feca:	627b      	str	r3, [r7, #36]	@ 0x24
    base = 10;
 801fecc:	230a      	movs	r3, #10
 801fece:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (c == '0') {
 801fed2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801fed6:	2b30      	cmp	r3, #48	@ 0x30
 801fed8:	d11c      	bne.n	801ff14 <ip4addr_aton+0x78>
      c = *++cp;
 801feda:	687b      	ldr	r3, [r7, #4]
 801fedc:	3301      	adds	r3, #1
 801fede:	607b      	str	r3, [r7, #4]
 801fee0:	687b      	ldr	r3, [r7, #4]
 801fee2:	781b      	ldrb	r3, [r3, #0]
 801fee4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (c == 'x' || c == 'X') {
 801fee8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801feec:	2b78      	cmp	r3, #120	@ 0x78
 801feee:	d003      	beq.n	801fef8 <ip4addr_aton+0x5c>
 801fef0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801fef4:	2b58      	cmp	r3, #88	@ 0x58
 801fef6:	d10a      	bne.n	801ff0e <ip4addr_aton+0x72>
        base = 16;
 801fef8:	2310      	movs	r3, #16
 801fefa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        c = *++cp;
 801fefe:	687b      	ldr	r3, [r7, #4]
 801ff00:	3301      	adds	r3, #1
 801ff02:	607b      	str	r3, [r7, #4]
 801ff04:	687b      	ldr	r3, [r7, #4]
 801ff06:	781b      	ldrb	r3, [r3, #0]
 801ff08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801ff0c:	e002      	b.n	801ff14 <ip4addr_aton+0x78>
      } else {
        base = 8;
 801ff0e:	2308      	movs	r3, #8
 801ff10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      }
    }
    for (;;) {
      if (isdigit(c)) {
 801ff14:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801ff18:	2b2f      	cmp	r3, #47	@ 0x2f
 801ff1a:	d915      	bls.n	801ff48 <ip4addr_aton+0xac>
 801ff1c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801ff20:	2b39      	cmp	r3, #57	@ 0x39
 801ff22:	d811      	bhi.n	801ff48 <ip4addr_aton+0xac>
        val = (val * base) + (u32_t)(c - '0');
 801ff24:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801ff28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ff2a:	fb03 f202 	mul.w	r2, r3, r2
 801ff2e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801ff32:	4413      	add	r3, r2
 801ff34:	3b30      	subs	r3, #48	@ 0x30
 801ff36:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 801ff38:	687b      	ldr	r3, [r7, #4]
 801ff3a:	3301      	adds	r3, #1
 801ff3c:	607b      	str	r3, [r7, #4]
 801ff3e:	687b      	ldr	r3, [r7, #4]
 801ff40:	781b      	ldrb	r3, [r3, #0]
 801ff42:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801ff46:	e036      	b.n	801ffb6 <ip4addr_aton+0x11a>
      } else if (base == 16 && isxdigit(c)) {
 801ff48:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801ff4c:	2b10      	cmp	r3, #16
 801ff4e:	d133      	bne.n	801ffb8 <ip4addr_aton+0x11c>
 801ff50:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801ff54:	2b2f      	cmp	r3, #47	@ 0x2f
 801ff56:	d903      	bls.n	801ff60 <ip4addr_aton+0xc4>
 801ff58:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801ff5c:	2b39      	cmp	r3, #57	@ 0x39
 801ff5e:	d90f      	bls.n	801ff80 <ip4addr_aton+0xe4>
 801ff60:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801ff64:	2b60      	cmp	r3, #96	@ 0x60
 801ff66:	d903      	bls.n	801ff70 <ip4addr_aton+0xd4>
 801ff68:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801ff6c:	2b66      	cmp	r3, #102	@ 0x66
 801ff6e:	d907      	bls.n	801ff80 <ip4addr_aton+0xe4>
 801ff70:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801ff74:	2b40      	cmp	r3, #64	@ 0x40
 801ff76:	d91f      	bls.n	801ffb8 <ip4addr_aton+0x11c>
 801ff78:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801ff7c:	2b46      	cmp	r3, #70	@ 0x46
 801ff7e:	d81b      	bhi.n	801ffb8 <ip4addr_aton+0x11c>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
 801ff80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff82:	011b      	lsls	r3, r3, #4
 801ff84:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801ff88:	f102 010a 	add.w	r1, r2, #10
 801ff8c:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801ff90:	2a60      	cmp	r2, #96	@ 0x60
 801ff92:	d905      	bls.n	801ffa0 <ip4addr_aton+0x104>
 801ff94:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801ff98:	2a7a      	cmp	r2, #122	@ 0x7a
 801ff9a:	d801      	bhi.n	801ffa0 <ip4addr_aton+0x104>
 801ff9c:	2261      	movs	r2, #97	@ 0x61
 801ff9e:	e000      	b.n	801ffa2 <ip4addr_aton+0x106>
 801ffa0:	2241      	movs	r2, #65	@ 0x41
 801ffa2:	1a8a      	subs	r2, r1, r2
 801ffa4:	4313      	orrs	r3, r2
 801ffa6:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 801ffa8:	687b      	ldr	r3, [r7, #4]
 801ffaa:	3301      	adds	r3, #1
 801ffac:	607b      	str	r3, [r7, #4]
 801ffae:	687b      	ldr	r3, [r7, #4]
 801ffb0:	781b      	ldrb	r3, [r3, #0]
 801ffb2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (isdigit(c)) {
 801ffb6:	e7ad      	b.n	801ff14 <ip4addr_aton+0x78>
      } else {
        break;
      }
    }
    if (c == '.') {
 801ffb8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801ffbc:	2b2e      	cmp	r3, #46	@ 0x2e
 801ffbe:	d114      	bne.n	801ffea <ip4addr_aton+0x14e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801ffc0:	f107 030c 	add.w	r3, r7, #12
 801ffc4:	330c      	adds	r3, #12
 801ffc6:	69fa      	ldr	r2, [r7, #28]
 801ffc8:	429a      	cmp	r2, r3
 801ffca:	d301      	bcc.n	801ffd0 <ip4addr_aton+0x134>
        return 0;
 801ffcc:	2300      	movs	r3, #0
 801ffce:	e09a      	b.n	8020106 <ip4addr_aton+0x26a>
      }
      *pp++ = val;
 801ffd0:	69fb      	ldr	r3, [r7, #28]
 801ffd2:	1d1a      	adds	r2, r3, #4
 801ffd4:	61fa      	str	r2, [r7, #28]
 801ffd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ffd8:	601a      	str	r2, [r3, #0]
      c = *++cp;
 801ffda:	687b      	ldr	r3, [r7, #4]
 801ffdc:	3301      	adds	r3, #1
 801ffde:	607b      	str	r3, [r7, #4]
 801ffe0:	687b      	ldr	r3, [r7, #4]
 801ffe2:	781b      	ldrb	r3, [r3, #0]
 801ffe4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (!isdigit(c)) {
 801ffe8:	e764      	b.n	801feb4 <ip4addr_aton+0x18>
    } else {
      break;
 801ffea:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
 801ffec:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801fff0:	2b00      	cmp	r3, #0
 801fff2:	d019      	beq.n	8020028 <ip4addr_aton+0x18c>
 801fff4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801fff8:	2b20      	cmp	r3, #32
 801fffa:	d015      	beq.n	8020028 <ip4addr_aton+0x18c>
 801fffc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8020000:	2b0c      	cmp	r3, #12
 8020002:	d011      	beq.n	8020028 <ip4addr_aton+0x18c>
 8020004:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8020008:	2b0a      	cmp	r3, #10
 802000a:	d00d      	beq.n	8020028 <ip4addr_aton+0x18c>
 802000c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8020010:	2b0d      	cmp	r3, #13
 8020012:	d009      	beq.n	8020028 <ip4addr_aton+0x18c>
 8020014:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8020018:	2b09      	cmp	r3, #9
 802001a:	d005      	beq.n	8020028 <ip4addr_aton+0x18c>
 802001c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8020020:	2b0b      	cmp	r3, #11
 8020022:	d001      	beq.n	8020028 <ip4addr_aton+0x18c>
    return 0;
 8020024:	2300      	movs	r3, #0
 8020026:	e06e      	b.n	8020106 <ip4addr_aton+0x26a>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8020028:	f107 030c 	add.w	r3, r7, #12
 802002c:	69fa      	ldr	r2, [r7, #28]
 802002e:	1ad3      	subs	r3, r2, r3
 8020030:	109b      	asrs	r3, r3, #2
 8020032:	3301      	adds	r3, #1
 8020034:	2b04      	cmp	r3, #4
 8020036:	d853      	bhi.n	80200e0 <ip4addr_aton+0x244>
 8020038:	a201      	add	r2, pc, #4	@ (adr r2, 8020040 <ip4addr_aton+0x1a4>)
 802003a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802003e:	bf00      	nop
 8020040:	08020055 	.word	0x08020055
 8020044:	080200f1 	.word	0x080200f1
 8020048:	08020059 	.word	0x08020059
 802004c:	0802007b 	.word	0x0802007b
 8020050:	080200a9 	.word	0x080200a9

  case 0:
    return 0;       /* initial nondigit */
 8020054:	2300      	movs	r3, #0
 8020056:	e056      	b.n	8020106 <ip4addr_aton+0x26a>

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL) {
 8020058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802005a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 802005e:	d301      	bcc.n	8020064 <ip4addr_aton+0x1c8>
      return 0;
 8020060:	2300      	movs	r3, #0
 8020062:	e050      	b.n	8020106 <ip4addr_aton+0x26a>
    }
    if (parts[0] > 0xff) {
 8020064:	68fb      	ldr	r3, [r7, #12]
 8020066:	2bff      	cmp	r3, #255	@ 0xff
 8020068:	d901      	bls.n	802006e <ip4addr_aton+0x1d2>
      return 0;
 802006a:	2300      	movs	r3, #0
 802006c:	e04b      	b.n	8020106 <ip4addr_aton+0x26a>
    }
    val |= parts[0] << 24;
 802006e:	68fb      	ldr	r3, [r7, #12]
 8020070:	061b      	lsls	r3, r3, #24
 8020072:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8020074:	4313      	orrs	r3, r2
 8020076:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8020078:	e03b      	b.n	80200f2 <ip4addr_aton+0x256>

  case 3:             /* a.b.c -- 8.8.16 bits */
    if (val > 0xffff) {
 802007a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802007c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8020080:	d301      	bcc.n	8020086 <ip4addr_aton+0x1ea>
      return 0;
 8020082:	2300      	movs	r3, #0
 8020084:	e03f      	b.n	8020106 <ip4addr_aton+0x26a>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8020086:	68fb      	ldr	r3, [r7, #12]
 8020088:	2bff      	cmp	r3, #255	@ 0xff
 802008a:	d802      	bhi.n	8020092 <ip4addr_aton+0x1f6>
 802008c:	693b      	ldr	r3, [r7, #16]
 802008e:	2bff      	cmp	r3, #255	@ 0xff
 8020090:	d901      	bls.n	8020096 <ip4addr_aton+0x1fa>
      return 0;
 8020092:	2300      	movs	r3, #0
 8020094:	e037      	b.n	8020106 <ip4addr_aton+0x26a>
    }
    val |= (parts[0] << 24) | (parts[1] << 16);
 8020096:	68fb      	ldr	r3, [r7, #12]
 8020098:	061a      	lsls	r2, r3, #24
 802009a:	693b      	ldr	r3, [r7, #16]
 802009c:	041b      	lsls	r3, r3, #16
 802009e:	4313      	orrs	r3, r2
 80200a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80200a2:	4313      	orrs	r3, r2
 80200a4:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 80200a6:	e024      	b.n	80200f2 <ip4addr_aton+0x256>

  case 4:             /* a.b.c.d -- 8.8.8.8 bits */
    if (val > 0xff) {
 80200a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80200aa:	2bff      	cmp	r3, #255	@ 0xff
 80200ac:	d901      	bls.n	80200b2 <ip4addr_aton+0x216>
      return 0;
 80200ae:	2300      	movs	r3, #0
 80200b0:	e029      	b.n	8020106 <ip4addr_aton+0x26a>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 80200b2:	68fb      	ldr	r3, [r7, #12]
 80200b4:	2bff      	cmp	r3, #255	@ 0xff
 80200b6:	d805      	bhi.n	80200c4 <ip4addr_aton+0x228>
 80200b8:	693b      	ldr	r3, [r7, #16]
 80200ba:	2bff      	cmp	r3, #255	@ 0xff
 80200bc:	d802      	bhi.n	80200c4 <ip4addr_aton+0x228>
 80200be:	697b      	ldr	r3, [r7, #20]
 80200c0:	2bff      	cmp	r3, #255	@ 0xff
 80200c2:	d901      	bls.n	80200c8 <ip4addr_aton+0x22c>
      return 0;
 80200c4:	2300      	movs	r3, #0
 80200c6:	e01e      	b.n	8020106 <ip4addr_aton+0x26a>
    }
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 80200c8:	68fb      	ldr	r3, [r7, #12]
 80200ca:	061a      	lsls	r2, r3, #24
 80200cc:	693b      	ldr	r3, [r7, #16]
 80200ce:	041b      	lsls	r3, r3, #16
 80200d0:	431a      	orrs	r2, r3
 80200d2:	697b      	ldr	r3, [r7, #20]
 80200d4:	021b      	lsls	r3, r3, #8
 80200d6:	4313      	orrs	r3, r2
 80200d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80200da:	4313      	orrs	r3, r2
 80200dc:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 80200de:	e008      	b.n	80200f2 <ip4addr_aton+0x256>
  default:
    LWIP_ASSERT("unhandled", 0);
 80200e0:	4b0b      	ldr	r3, [pc, #44]	@ (8020110 <ip4addr_aton+0x274>)
 80200e2:	f240 1203 	movw	r2, #259	@ 0x103
 80200e6:	490b      	ldr	r1, [pc, #44]	@ (8020114 <ip4addr_aton+0x278>)
 80200e8:	480b      	ldr	r0, [pc, #44]	@ (8020118 <ip4addr_aton+0x27c>)
 80200ea:	f001 fdcd 	bl	8021c88 <iprintf>
    break;
 80200ee:	e000      	b.n	80200f2 <ip4addr_aton+0x256>
    break;
 80200f0:	bf00      	nop
  }
  if (addr) {
 80200f2:	683b      	ldr	r3, [r7, #0]
 80200f4:	2b00      	cmp	r3, #0
 80200f6:	d005      	beq.n	8020104 <ip4addr_aton+0x268>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 80200f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80200fa:	f7f4 fb88 	bl	801480e <lwip_htonl>
 80200fe:	4602      	mov	r2, r0
 8020100:	683b      	ldr	r3, [r7, #0]
 8020102:	601a      	str	r2, [r3, #0]
  }
  return 1;
 8020104:	2301      	movs	r3, #1
}
 8020106:	4618      	mov	r0, r3
 8020108:	3728      	adds	r7, #40	@ 0x28
 802010a:	46bd      	mov	sp, r7
 802010c:	bd80      	pop	{r7, pc}
 802010e:	bf00      	nop
 8020110:	080276ac 	.word	0x080276ac
 8020114:	080276e8 	.word	0x080276e8
 8020118:	080276f4 	.word	0x080276f4

0802011c <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char*
ip4addr_ntoa(const ip4_addr_t *addr)
{
 802011c:	b580      	push	{r7, lr}
 802011e:	b082      	sub	sp, #8
 8020120:	af00      	add	r7, sp, #0
 8020122:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8020124:	2210      	movs	r2, #16
 8020126:	4904      	ldr	r1, [pc, #16]	@ (8020138 <ip4addr_ntoa+0x1c>)
 8020128:	6878      	ldr	r0, [r7, #4]
 802012a:	f000 f807 	bl	802013c <ip4addr_ntoa_r>
 802012e:	4603      	mov	r3, r0
}
 8020130:	4618      	mov	r0, r3
 8020132:	3708      	adds	r7, #8
 8020134:	46bd      	mov	sp, r7
 8020136:	bd80      	pop	{r7, pc}
 8020138:	2000c1a8 	.word	0x2000c1a8

0802013c <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char*
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 802013c:	b480      	push	{r7}
 802013e:	b08d      	sub	sp, #52	@ 0x34
 8020140:	af00      	add	r7, sp, #0
 8020142:	60f8      	str	r0, [r7, #12]
 8020144:	60b9      	str	r1, [r7, #8]
 8020146:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8020148:	2300      	movs	r3, #0
 802014a:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 802014c:	68fb      	ldr	r3, [r7, #12]
 802014e:	681b      	ldr	r3, [r3, #0]
 8020150:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8020152:	68bb      	ldr	r3, [r7, #8]
 8020154:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 8020156:	f107 0318 	add.w	r3, r7, #24
 802015a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 802015c:	2300      	movs	r3, #0
 802015e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8020162:	e058      	b.n	8020216 <ip4addr_ntoa_r+0xda>
    i = 0;
 8020164:	2300      	movs	r3, #0
 8020166:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 802016a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802016c:	781a      	ldrb	r2, [r3, #0]
 802016e:	4b32      	ldr	r3, [pc, #200]	@ (8020238 <ip4addr_ntoa_r+0xfc>)
 8020170:	fba3 1302 	umull	r1, r3, r3, r2
 8020174:	08d9      	lsrs	r1, r3, #3
 8020176:	460b      	mov	r3, r1
 8020178:	009b      	lsls	r3, r3, #2
 802017a:	440b      	add	r3, r1
 802017c:	005b      	lsls	r3, r3, #1
 802017e:	1ad3      	subs	r3, r2, r3
 8020180:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8020182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020184:	781b      	ldrb	r3, [r3, #0]
 8020186:	4a2c      	ldr	r2, [pc, #176]	@ (8020238 <ip4addr_ntoa_r+0xfc>)
 8020188:	fba2 2303 	umull	r2, r3, r2, r3
 802018c:	08db      	lsrs	r3, r3, #3
 802018e:	b2da      	uxtb	r2, r3
 8020190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020192:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8020194:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8020198:	1c5a      	adds	r2, r3, #1
 802019a:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 802019e:	4619      	mov	r1, r3
 80201a0:	7ffb      	ldrb	r3, [r7, #31]
 80201a2:	3330      	adds	r3, #48	@ 0x30
 80201a4:	b2da      	uxtb	r2, r3
 80201a6:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 80201aa:	443b      	add	r3, r7
 80201ac:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 80201b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80201b2:	781b      	ldrb	r3, [r3, #0]
 80201b4:	2b00      	cmp	r3, #0
 80201b6:	d1d8      	bne.n	802016a <ip4addr_ntoa_r+0x2e>
    while (i--) {
 80201b8:	e011      	b.n	80201de <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 80201ba:	6a3b      	ldr	r3, [r7, #32]
 80201bc:	1c5a      	adds	r2, r3, #1
 80201be:	623a      	str	r2, [r7, #32]
 80201c0:	687a      	ldr	r2, [r7, #4]
 80201c2:	429a      	cmp	r2, r3
 80201c4:	dc01      	bgt.n	80201ca <ip4addr_ntoa_r+0x8e>
        return NULL;
 80201c6:	2300      	movs	r3, #0
 80201c8:	e030      	b.n	802022c <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 80201ca:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80201ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80201d0:	1c59      	adds	r1, r3, #1
 80201d2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80201d4:	3230      	adds	r2, #48	@ 0x30
 80201d6:	443a      	add	r2, r7
 80201d8:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 80201dc:	701a      	strb	r2, [r3, #0]
    while (i--) {
 80201de:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80201e2:	1e5a      	subs	r2, r3, #1
 80201e4:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 80201e8:	2b00      	cmp	r3, #0
 80201ea:	d1e6      	bne.n	80201ba <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 80201ec:	6a3b      	ldr	r3, [r7, #32]
 80201ee:	1c5a      	adds	r2, r3, #1
 80201f0:	623a      	str	r2, [r7, #32]
 80201f2:	687a      	ldr	r2, [r7, #4]
 80201f4:	429a      	cmp	r2, r3
 80201f6:	dc01      	bgt.n	80201fc <ip4addr_ntoa_r+0xc0>
      return NULL;
 80201f8:	2300      	movs	r3, #0
 80201fa:	e017      	b.n	802022c <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 80201fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80201fe:	1c5a      	adds	r2, r3, #1
 8020200:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8020202:	222e      	movs	r2, #46	@ 0x2e
 8020204:	701a      	strb	r2, [r3, #0]
    ap++;
 8020206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020208:	3301      	adds	r3, #1
 802020a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 802020c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8020210:	3301      	adds	r3, #1
 8020212:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8020216:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 802021a:	2b03      	cmp	r3, #3
 802021c:	d9a2      	bls.n	8020164 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 802021e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020220:	3b01      	subs	r3, #1
 8020222:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8020224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020226:	2200      	movs	r2, #0
 8020228:	701a      	strb	r2, [r3, #0]
  return buf;
 802022a:	68bb      	ldr	r3, [r7, #8]
}
 802022c:	4618      	mov	r0, r3
 802022e:	3734      	adds	r7, #52	@ 0x34
 8020230:	46bd      	mov	sp, r7
 8020232:	bc80      	pop	{r7}
 8020234:	4770      	bx	lr
 8020236:	bf00      	nop
 8020238:	cccccccd 	.word	0xcccccccd

0802023c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 802023c:	b580      	push	{r7, lr}
 802023e:	b084      	sub	sp, #16
 8020240:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8020242:	2300      	movs	r3, #0
 8020244:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8020246:	4b12      	ldr	r3, [pc, #72]	@ (8020290 <ip_reass_tmr+0x54>)
 8020248:	681b      	ldr	r3, [r3, #0]
 802024a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 802024c:	e018      	b.n	8020280 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 802024e:	68fb      	ldr	r3, [r7, #12]
 8020250:	7fdb      	ldrb	r3, [r3, #31]
 8020252:	2b00      	cmp	r3, #0
 8020254:	d00b      	beq.n	802026e <ip_reass_tmr+0x32>
      r->timer--;
 8020256:	68fb      	ldr	r3, [r7, #12]
 8020258:	7fdb      	ldrb	r3, [r3, #31]
 802025a:	3b01      	subs	r3, #1
 802025c:	b2da      	uxtb	r2, r3
 802025e:	68fb      	ldr	r3, [r7, #12]
 8020260:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 8020262:	68fb      	ldr	r3, [r7, #12]
 8020264:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8020266:	68fb      	ldr	r3, [r7, #12]
 8020268:	681b      	ldr	r3, [r3, #0]
 802026a:	60fb      	str	r3, [r7, #12]
 802026c:	e008      	b.n	8020280 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 802026e:	68fb      	ldr	r3, [r7, #12]
 8020270:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8020272:	68fb      	ldr	r3, [r7, #12]
 8020274:	681b      	ldr	r3, [r3, #0]
 8020276:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8020278:	68b9      	ldr	r1, [r7, #8]
 802027a:	6878      	ldr	r0, [r7, #4]
 802027c:	f000 f80a 	bl	8020294 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8020280:	68fb      	ldr	r3, [r7, #12]
 8020282:	2b00      	cmp	r3, #0
 8020284:	d1e3      	bne.n	802024e <ip_reass_tmr+0x12>
     }
   }
}
 8020286:	bf00      	nop
 8020288:	bf00      	nop
 802028a:	3710      	adds	r7, #16
 802028c:	46bd      	mov	sp, r7
 802028e:	bd80      	pop	{r7, pc}
 8020290:	2000c1b8 	.word	0x2000c1b8

08020294 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8020294:	b580      	push	{r7, lr}
 8020296:	b088      	sub	sp, #32
 8020298:	af00      	add	r7, sp, #0
 802029a:	6078      	str	r0, [r7, #4]
 802029c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 802029e:	2300      	movs	r3, #0
 80202a0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80202a2:	683a      	ldr	r2, [r7, #0]
 80202a4:	687b      	ldr	r3, [r7, #4]
 80202a6:	429a      	cmp	r2, r3
 80202a8:	d105      	bne.n	80202b6 <ip_reass_free_complete_datagram+0x22>
 80202aa:	4b48      	ldr	r3, [pc, #288]	@ (80203cc <ip_reass_free_complete_datagram+0x138>)
 80202ac:	22ab      	movs	r2, #171	@ 0xab
 80202ae:	4948      	ldr	r1, [pc, #288]	@ (80203d0 <ip_reass_free_complete_datagram+0x13c>)
 80202b0:	4848      	ldr	r0, [pc, #288]	@ (80203d4 <ip_reass_free_complete_datagram+0x140>)
 80202b2:	f001 fce9 	bl	8021c88 <iprintf>
  if (prev != NULL) {
 80202b6:	683b      	ldr	r3, [r7, #0]
 80202b8:	2b00      	cmp	r3, #0
 80202ba:	d00a      	beq.n	80202d2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80202bc:	683b      	ldr	r3, [r7, #0]
 80202be:	681b      	ldr	r3, [r3, #0]
 80202c0:	687a      	ldr	r2, [r7, #4]
 80202c2:	429a      	cmp	r2, r3
 80202c4:	d005      	beq.n	80202d2 <ip_reass_free_complete_datagram+0x3e>
 80202c6:	4b41      	ldr	r3, [pc, #260]	@ (80203cc <ip_reass_free_complete_datagram+0x138>)
 80202c8:	22ad      	movs	r2, #173	@ 0xad
 80202ca:	4943      	ldr	r1, [pc, #268]	@ (80203d8 <ip_reass_free_complete_datagram+0x144>)
 80202cc:	4841      	ldr	r0, [pc, #260]	@ (80203d4 <ip_reass_free_complete_datagram+0x140>)
 80202ce:	f001 fcdb 	bl	8021c88 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
 80202d2:	4b42      	ldr	r3, [pc, #264]	@ (80203dc <ip_reass_free_complete_datagram+0x148>)
 80202d4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 80202d8:	3301      	adds	r3, #1
 80202da:	4a40      	ldr	r2, [pc, #256]	@ (80203dc <ip_reass_free_complete_datagram+0x148>)
 80202dc:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80202e0:	687b      	ldr	r3, [r7, #4]
 80202e2:	685b      	ldr	r3, [r3, #4]
 80202e4:	685b      	ldr	r3, [r3, #4]
 80202e6:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80202e8:	697b      	ldr	r3, [r7, #20]
 80202ea:	889b      	ldrh	r3, [r3, #4]
 80202ec:	b29b      	uxth	r3, r3
 80202ee:	2b00      	cmp	r3, #0
 80202f0:	d12a      	bne.n	8020348 <ip_reass_free_complete_datagram+0xb4>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80202f2:	687b      	ldr	r3, [r7, #4]
 80202f4:	685b      	ldr	r3, [r3, #4]
 80202f6:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80202f8:	697b      	ldr	r3, [r7, #20]
 80202fa:	681a      	ldr	r2, [r3, #0]
 80202fc:	687b      	ldr	r3, [r7, #4]
 80202fe:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8020300:	69bb      	ldr	r3, [r7, #24]
 8020302:	6858      	ldr	r0, [r3, #4]
 8020304:	687b      	ldr	r3, [r7, #4]
 8020306:	3308      	adds	r3, #8
 8020308:	2214      	movs	r2, #20
 802030a:	4619      	mov	r1, r3
 802030c:	f001 ffb7 	bl	802227e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8020310:	2101      	movs	r1, #1
 8020312:	69b8      	ldr	r0, [r7, #24]
 8020314:	f7ff f96e 	bl	801f5f4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8020318:	69b8      	ldr	r0, [r7, #24]
 802031a:	f7f5 fd57 	bl	8015dcc <pbuf_clen>
 802031e:	4603      	mov	r3, r0
 8020320:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8020322:	8bfa      	ldrh	r2, [r7, #30]
 8020324:	8a7b      	ldrh	r3, [r7, #18]
 8020326:	4413      	add	r3, r2
 8020328:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 802032c:	db05      	blt.n	802033a <ip_reass_free_complete_datagram+0xa6>
 802032e:	4b27      	ldr	r3, [pc, #156]	@ (80203cc <ip_reass_free_complete_datagram+0x138>)
 8020330:	22bc      	movs	r2, #188	@ 0xbc
 8020332:	492b      	ldr	r1, [pc, #172]	@ (80203e0 <ip_reass_free_complete_datagram+0x14c>)
 8020334:	4827      	ldr	r0, [pc, #156]	@ (80203d4 <ip_reass_free_complete_datagram+0x140>)
 8020336:	f001 fca7 	bl	8021c88 <iprintf>
    pbufs_freed += clen;
 802033a:	8bfa      	ldrh	r2, [r7, #30]
 802033c:	8a7b      	ldrh	r3, [r7, #18]
 802033e:	4413      	add	r3, r2
 8020340:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8020342:	69b8      	ldr	r0, [r7, #24]
 8020344:	f7f5 fcae 	bl	8015ca4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8020348:	687b      	ldr	r3, [r7, #4]
 802034a:	685b      	ldr	r3, [r3, #4]
 802034c:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 802034e:	e01f      	b.n	8020390 <ip_reass_free_complete_datagram+0xfc>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8020350:	69bb      	ldr	r3, [r7, #24]
 8020352:	685b      	ldr	r3, [r3, #4]
 8020354:	617b      	str	r3, [r7, #20]
    pcur = p;
 8020356:	69bb      	ldr	r3, [r7, #24]
 8020358:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 802035a:	697b      	ldr	r3, [r7, #20]
 802035c:	681b      	ldr	r3, [r3, #0]
 802035e:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8020360:	68f8      	ldr	r0, [r7, #12]
 8020362:	f7f5 fd33 	bl	8015dcc <pbuf_clen>
 8020366:	4603      	mov	r3, r0
 8020368:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 802036a:	8bfa      	ldrh	r2, [r7, #30]
 802036c:	8a7b      	ldrh	r3, [r7, #18]
 802036e:	4413      	add	r3, r2
 8020370:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8020374:	db05      	blt.n	8020382 <ip_reass_free_complete_datagram+0xee>
 8020376:	4b15      	ldr	r3, [pc, #84]	@ (80203cc <ip_reass_free_complete_datagram+0x138>)
 8020378:	22cc      	movs	r2, #204	@ 0xcc
 802037a:	4919      	ldr	r1, [pc, #100]	@ (80203e0 <ip_reass_free_complete_datagram+0x14c>)
 802037c:	4815      	ldr	r0, [pc, #84]	@ (80203d4 <ip_reass_free_complete_datagram+0x140>)
 802037e:	f001 fc83 	bl	8021c88 <iprintf>
    pbufs_freed += clen;
 8020382:	8bfa      	ldrh	r2, [r7, #30]
 8020384:	8a7b      	ldrh	r3, [r7, #18]
 8020386:	4413      	add	r3, r2
 8020388:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 802038a:	68f8      	ldr	r0, [r7, #12]
 802038c:	f7f5 fc8a 	bl	8015ca4 <pbuf_free>
  while (p != NULL) {
 8020390:	69bb      	ldr	r3, [r7, #24]
 8020392:	2b00      	cmp	r3, #0
 8020394:	d1dc      	bne.n	8020350 <ip_reass_free_complete_datagram+0xbc>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8020396:	6839      	ldr	r1, [r7, #0]
 8020398:	6878      	ldr	r0, [r7, #4]
 802039a:	f000 f8cb 	bl	8020534 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 802039e:	4b11      	ldr	r3, [pc, #68]	@ (80203e4 <ip_reass_free_complete_datagram+0x150>)
 80203a0:	881b      	ldrh	r3, [r3, #0]
 80203a2:	8bfa      	ldrh	r2, [r7, #30]
 80203a4:	429a      	cmp	r2, r3
 80203a6:	d905      	bls.n	80203b4 <ip_reass_free_complete_datagram+0x120>
 80203a8:	4b08      	ldr	r3, [pc, #32]	@ (80203cc <ip_reass_free_complete_datagram+0x138>)
 80203aa:	22d2      	movs	r2, #210	@ 0xd2
 80203ac:	490e      	ldr	r1, [pc, #56]	@ (80203e8 <ip_reass_free_complete_datagram+0x154>)
 80203ae:	4809      	ldr	r0, [pc, #36]	@ (80203d4 <ip_reass_free_complete_datagram+0x140>)
 80203b0:	f001 fc6a 	bl	8021c88 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 80203b4:	4b0b      	ldr	r3, [pc, #44]	@ (80203e4 <ip_reass_free_complete_datagram+0x150>)
 80203b6:	881a      	ldrh	r2, [r3, #0]
 80203b8:	8bfb      	ldrh	r3, [r7, #30]
 80203ba:	1ad3      	subs	r3, r2, r3
 80203bc:	b29a      	uxth	r2, r3
 80203be:	4b09      	ldr	r3, [pc, #36]	@ (80203e4 <ip_reass_free_complete_datagram+0x150>)
 80203c0:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80203c2:	8bfb      	ldrh	r3, [r7, #30]
}
 80203c4:	4618      	mov	r0, r3
 80203c6:	3720      	adds	r7, #32
 80203c8:	46bd      	mov	sp, r7
 80203ca:	bd80      	pop	{r7, pc}
 80203cc:	0802771c 	.word	0x0802771c
 80203d0:	08027758 	.word	0x08027758
 80203d4:	08027764 	.word	0x08027764
 80203d8:	0802778c 	.word	0x0802778c
 80203dc:	2000be88 	.word	0x2000be88
 80203e0:	080277a0 	.word	0x080277a0
 80203e4:	2000c1bc 	.word	0x2000c1bc
 80203e8:	080277c0 	.word	0x080277c0

080203ec <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80203ec:	b580      	push	{r7, lr}
 80203ee:	b08a      	sub	sp, #40	@ 0x28
 80203f0:	af00      	add	r7, sp, #0
 80203f2:	6078      	str	r0, [r7, #4]
 80203f4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80203f6:	2300      	movs	r3, #0
 80203f8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80203fa:	2300      	movs	r3, #0
 80203fc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80203fe:	2300      	movs	r3, #0
 8020400:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8020402:	2300      	movs	r3, #0
 8020404:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8020406:	2300      	movs	r3, #0
 8020408:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 802040a:	4b28      	ldr	r3, [pc, #160]	@ (80204ac <ip_reass_remove_oldest_datagram+0xc0>)
 802040c:	681b      	ldr	r3, [r3, #0]
 802040e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8020410:	e030      	b.n	8020474 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8020412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020414:	695a      	ldr	r2, [r3, #20]
 8020416:	687b      	ldr	r3, [r7, #4]
 8020418:	68db      	ldr	r3, [r3, #12]
 802041a:	429a      	cmp	r2, r3
 802041c:	d10c      	bne.n	8020438 <ip_reass_remove_oldest_datagram+0x4c>
 802041e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020420:	699a      	ldr	r2, [r3, #24]
 8020422:	687b      	ldr	r3, [r7, #4]
 8020424:	691b      	ldr	r3, [r3, #16]
 8020426:	429a      	cmp	r2, r3
 8020428:	d106      	bne.n	8020438 <ip_reass_remove_oldest_datagram+0x4c>
 802042a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802042c:	899a      	ldrh	r2, [r3, #12]
 802042e:	687b      	ldr	r3, [r7, #4]
 8020430:	889b      	ldrh	r3, [r3, #4]
 8020432:	b29b      	uxth	r3, r3
 8020434:	429a      	cmp	r2, r3
 8020436:	d014      	beq.n	8020462 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8020438:	693b      	ldr	r3, [r7, #16]
 802043a:	3301      	adds	r3, #1
 802043c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 802043e:	6a3b      	ldr	r3, [r7, #32]
 8020440:	2b00      	cmp	r3, #0
 8020442:	d104      	bne.n	802044e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8020444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020446:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8020448:	69fb      	ldr	r3, [r7, #28]
 802044a:	61bb      	str	r3, [r7, #24]
 802044c:	e009      	b.n	8020462 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 802044e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020450:	7fda      	ldrb	r2, [r3, #31]
 8020452:	6a3b      	ldr	r3, [r7, #32]
 8020454:	7fdb      	ldrb	r3, [r3, #31]
 8020456:	429a      	cmp	r2, r3
 8020458:	d803      	bhi.n	8020462 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 802045a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802045c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 802045e:	69fb      	ldr	r3, [r7, #28]
 8020460:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8020462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020464:	681b      	ldr	r3, [r3, #0]
 8020466:	2b00      	cmp	r3, #0
 8020468:	d001      	beq.n	802046e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 802046a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802046c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 802046e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020470:	681b      	ldr	r3, [r3, #0]
 8020472:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8020474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020476:	2b00      	cmp	r3, #0
 8020478:	d1cb      	bne.n	8020412 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 802047a:	6a3b      	ldr	r3, [r7, #32]
 802047c:	2b00      	cmp	r3, #0
 802047e:	d008      	beq.n	8020492 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8020480:	69b9      	ldr	r1, [r7, #24]
 8020482:	6a38      	ldr	r0, [r7, #32]
 8020484:	f7ff ff06 	bl	8020294 <ip_reass_free_complete_datagram>
 8020488:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 802048a:	697a      	ldr	r2, [r7, #20]
 802048c:	68fb      	ldr	r3, [r7, #12]
 802048e:	4413      	add	r3, r2
 8020490:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8020492:	697a      	ldr	r2, [r7, #20]
 8020494:	683b      	ldr	r3, [r7, #0]
 8020496:	429a      	cmp	r2, r3
 8020498:	da02      	bge.n	80204a0 <ip_reass_remove_oldest_datagram+0xb4>
 802049a:	693b      	ldr	r3, [r7, #16]
 802049c:	2b01      	cmp	r3, #1
 802049e:	dcac      	bgt.n	80203fa <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80204a0:	697b      	ldr	r3, [r7, #20]
}
 80204a2:	4618      	mov	r0, r3
 80204a4:	3728      	adds	r7, #40	@ 0x28
 80204a6:	46bd      	mov	sp, r7
 80204a8:	bd80      	pop	{r7, pc}
 80204aa:	bf00      	nop
 80204ac:	2000c1b8 	.word	0x2000c1b8

080204b0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80204b0:	b580      	push	{r7, lr}
 80204b2:	b084      	sub	sp, #16
 80204b4:	af00      	add	r7, sp, #0
 80204b6:	6078      	str	r0, [r7, #4]
 80204b8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80204ba:	2004      	movs	r0, #4
 80204bc:	f7f4 fe44 	bl	8015148 <memp_malloc>
 80204c0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80204c2:	68fb      	ldr	r3, [r7, #12]
 80204c4:	2b00      	cmp	r3, #0
 80204c6:	d116      	bne.n	80204f6 <ip_reass_enqueue_new_datagram+0x46>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80204c8:	6839      	ldr	r1, [r7, #0]
 80204ca:	6878      	ldr	r0, [r7, #4]
 80204cc:	f7ff ff8e 	bl	80203ec <ip_reass_remove_oldest_datagram>
 80204d0:	4602      	mov	r2, r0
 80204d2:	683b      	ldr	r3, [r7, #0]
 80204d4:	4293      	cmp	r3, r2
 80204d6:	dc03      	bgt.n	80204e0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80204d8:	2004      	movs	r0, #4
 80204da:	f7f4 fe35 	bl	8015148 <memp_malloc>
 80204de:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80204e0:	68fb      	ldr	r3, [r7, #12]
 80204e2:	2b00      	cmp	r3, #0
 80204e4:	d107      	bne.n	80204f6 <ip_reass_enqueue_new_datagram+0x46>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
 80204e6:	4b11      	ldr	r3, [pc, #68]	@ (802052c <ip_reass_enqueue_new_datagram+0x7c>)
 80204e8:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80204ea:	3301      	adds	r3, #1
 80204ec:	b29a      	uxth	r2, r3
 80204ee:	4b0f      	ldr	r3, [pc, #60]	@ (802052c <ip_reass_enqueue_new_datagram+0x7c>)
 80204f0:	879a      	strh	r2, [r3, #60]	@ 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 80204f2:	2300      	movs	r3, #0
 80204f4:	e016      	b.n	8020524 <ip_reass_enqueue_new_datagram+0x74>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80204f6:	2220      	movs	r2, #32
 80204f8:	2100      	movs	r1, #0
 80204fa:	68f8      	ldr	r0, [r7, #12]
 80204fc:	f001 fd9a 	bl	8022034 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8020500:	68fb      	ldr	r3, [r7, #12]
 8020502:	2203      	movs	r2, #3
 8020504:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8020506:	4b0a      	ldr	r3, [pc, #40]	@ (8020530 <ip_reass_enqueue_new_datagram+0x80>)
 8020508:	681a      	ldr	r2, [r3, #0]
 802050a:	68fb      	ldr	r3, [r7, #12]
 802050c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 802050e:	4a08      	ldr	r2, [pc, #32]	@ (8020530 <ip_reass_enqueue_new_datagram+0x80>)
 8020510:	68fb      	ldr	r3, [r7, #12]
 8020512:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8020514:	68fb      	ldr	r3, [r7, #12]
 8020516:	3308      	adds	r3, #8
 8020518:	2214      	movs	r2, #20
 802051a:	6879      	ldr	r1, [r7, #4]
 802051c:	4618      	mov	r0, r3
 802051e:	f001 feae 	bl	802227e <memcpy>
  return ipr;
 8020522:	68fb      	ldr	r3, [r7, #12]
}
 8020524:	4618      	mov	r0, r3
 8020526:	3710      	adds	r7, #16
 8020528:	46bd      	mov	sp, r7
 802052a:	bd80      	pop	{r7, pc}
 802052c:	2000be88 	.word	0x2000be88
 8020530:	2000c1b8 	.word	0x2000c1b8

08020534 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8020534:	b580      	push	{r7, lr}
 8020536:	b082      	sub	sp, #8
 8020538:	af00      	add	r7, sp, #0
 802053a:	6078      	str	r0, [r7, #4]
 802053c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 802053e:	4b10      	ldr	r3, [pc, #64]	@ (8020580 <ip_reass_dequeue_datagram+0x4c>)
 8020540:	681b      	ldr	r3, [r3, #0]
 8020542:	687a      	ldr	r2, [r7, #4]
 8020544:	429a      	cmp	r2, r3
 8020546:	d104      	bne.n	8020552 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8020548:	687b      	ldr	r3, [r7, #4]
 802054a:	681b      	ldr	r3, [r3, #0]
 802054c:	4a0c      	ldr	r2, [pc, #48]	@ (8020580 <ip_reass_dequeue_datagram+0x4c>)
 802054e:	6013      	str	r3, [r2, #0]
 8020550:	e00d      	b.n	802056e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8020552:	683b      	ldr	r3, [r7, #0]
 8020554:	2b00      	cmp	r3, #0
 8020556:	d106      	bne.n	8020566 <ip_reass_dequeue_datagram+0x32>
 8020558:	4b0a      	ldr	r3, [pc, #40]	@ (8020584 <ip_reass_dequeue_datagram+0x50>)
 802055a:	f240 1245 	movw	r2, #325	@ 0x145
 802055e:	490a      	ldr	r1, [pc, #40]	@ (8020588 <ip_reass_dequeue_datagram+0x54>)
 8020560:	480a      	ldr	r0, [pc, #40]	@ (802058c <ip_reass_dequeue_datagram+0x58>)
 8020562:	f001 fb91 	bl	8021c88 <iprintf>
    prev->next = ipr->next;
 8020566:	687b      	ldr	r3, [r7, #4]
 8020568:	681a      	ldr	r2, [r3, #0]
 802056a:	683b      	ldr	r3, [r7, #0]
 802056c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 802056e:	6879      	ldr	r1, [r7, #4]
 8020570:	2004      	movs	r0, #4
 8020572:	f7f4 fe3b 	bl	80151ec <memp_free>
}
 8020576:	bf00      	nop
 8020578:	3708      	adds	r7, #8
 802057a:	46bd      	mov	sp, r7
 802057c:	bd80      	pop	{r7, pc}
 802057e:	bf00      	nop
 8020580:	2000c1b8 	.word	0x2000c1b8
 8020584:	0802771c 	.word	0x0802771c
 8020588:	080277dc 	.word	0x080277dc
 802058c:	08027764 	.word	0x08027764

08020590 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8020590:	b580      	push	{r7, lr}
 8020592:	b08c      	sub	sp, #48	@ 0x30
 8020594:	af00      	add	r7, sp, #0
 8020596:	60f8      	str	r0, [r7, #12]
 8020598:	60b9      	str	r1, [r7, #8]
 802059a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 802059c:	2300      	movs	r3, #0
 802059e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80205a0:	2301      	movs	r3, #1
 80205a2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 80205a4:	68bb      	ldr	r3, [r7, #8]
 80205a6:	685b      	ldr	r3, [r3, #4]
 80205a8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80205aa:	69fb      	ldr	r3, [r7, #28]
 80205ac:	885b      	ldrh	r3, [r3, #2]
 80205ae:	b29b      	uxth	r3, r3
 80205b0:	4618      	mov	r0, r3
 80205b2:	f7f4 f91f 	bl	80147f4 <lwip_htons>
 80205b6:	4603      	mov	r3, r0
 80205b8:	461a      	mov	r2, r3
 80205ba:	69fb      	ldr	r3, [r7, #28]
 80205bc:	781b      	ldrb	r3, [r3, #0]
 80205be:	f003 030f 	and.w	r3, r3, #15
 80205c2:	b29b      	uxth	r3, r3
 80205c4:	009b      	lsls	r3, r3, #2
 80205c6:	b29b      	uxth	r3, r3
 80205c8:	1ad3      	subs	r3, r2, r3
 80205ca:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80205cc:	69fb      	ldr	r3, [r7, #28]
 80205ce:	88db      	ldrh	r3, [r3, #6]
 80205d0:	b29b      	uxth	r3, r3
 80205d2:	4618      	mov	r0, r3
 80205d4:	f7f4 f90e 	bl	80147f4 <lwip_htons>
 80205d8:	4603      	mov	r3, r0
 80205da:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80205de:	b29b      	uxth	r3, r3
 80205e0:	00db      	lsls	r3, r3, #3
 80205e2:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 80205e4:	68bb      	ldr	r3, [r7, #8]
 80205e6:	685b      	ldr	r3, [r3, #4]
 80205e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 80205ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80205ec:	2200      	movs	r2, #0
 80205ee:	701a      	strb	r2, [r3, #0]
 80205f0:	2200      	movs	r2, #0
 80205f2:	705a      	strb	r2, [r3, #1]
 80205f4:	2200      	movs	r2, #0
 80205f6:	709a      	strb	r2, [r3, #2]
 80205f8:	2200      	movs	r2, #0
 80205fa:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80205fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80205fe:	8b3a      	ldrh	r2, [r7, #24]
 8020600:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 8020602:	8b3a      	ldrh	r2, [r7, #24]
 8020604:	8b7b      	ldrh	r3, [r7, #26]
 8020606:	4413      	add	r3, r2
 8020608:	b29a      	uxth	r2, r3
 802060a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802060c:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 802060e:	68fb      	ldr	r3, [r7, #12]
 8020610:	685b      	ldr	r3, [r3, #4]
 8020612:	627b      	str	r3, [r7, #36]	@ 0x24
 8020614:	e061      	b.n	80206da <ip_reass_chain_frag_into_datagram_and_validate+0x14a>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8020616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020618:	685b      	ldr	r3, [r3, #4]
 802061a:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 802061c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802061e:	889b      	ldrh	r3, [r3, #4]
 8020620:	b29a      	uxth	r2, r3
 8020622:	697b      	ldr	r3, [r7, #20]
 8020624:	889b      	ldrh	r3, [r3, #4]
 8020626:	b29b      	uxth	r3, r3
 8020628:	429a      	cmp	r2, r3
 802062a:	d232      	bcs.n	8020692 <ip_reass_chain_frag_into_datagram_and_validate+0x102>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 802062c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802062e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8020630:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8020632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020634:	2b00      	cmp	r3, #0
 8020636:	d01f      	beq.n	8020678 <ip_reass_chain_frag_into_datagram_and_validate+0xe8>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8020638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802063a:	889b      	ldrh	r3, [r3, #4]
 802063c:	b29a      	uxth	r2, r3
 802063e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020640:	88db      	ldrh	r3, [r3, #6]
 8020642:	b29b      	uxth	r3, r3
 8020644:	429a      	cmp	r2, r3
 8020646:	f0c0 80e3 	bcc.w	8020810 <ip_reass_chain_frag_into_datagram_and_validate+0x280>
 802064a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802064c:	88db      	ldrh	r3, [r3, #6]
 802064e:	b29a      	uxth	r2, r3
 8020650:	697b      	ldr	r3, [r7, #20]
 8020652:	889b      	ldrh	r3, [r3, #4]
 8020654:	b29b      	uxth	r3, r3
 8020656:	429a      	cmp	r2, r3
 8020658:	f200 80da 	bhi.w	8020810 <ip_reass_chain_frag_into_datagram_and_validate+0x280>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 802065c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802065e:	68ba      	ldr	r2, [r7, #8]
 8020660:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8020662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020664:	88db      	ldrh	r3, [r3, #6]
 8020666:	b29a      	uxth	r2, r3
 8020668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802066a:	889b      	ldrh	r3, [r3, #4]
 802066c:	b29b      	uxth	r3, r3
 802066e:	429a      	cmp	r2, r3
 8020670:	d037      	beq.n	80206e2 <ip_reass_chain_frag_into_datagram_and_validate+0x152>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8020672:	2300      	movs	r3, #0
 8020674:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8020676:	e034      	b.n	80206e2 <ip_reass_chain_frag_into_datagram_and_validate+0x152>
        if (iprh->end > iprh_tmp->start) {
 8020678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802067a:	88db      	ldrh	r3, [r3, #6]
 802067c:	b29a      	uxth	r2, r3
 802067e:	697b      	ldr	r3, [r7, #20]
 8020680:	889b      	ldrh	r3, [r3, #4]
 8020682:	b29b      	uxth	r3, r3
 8020684:	429a      	cmp	r2, r3
 8020686:	f200 80c5 	bhi.w	8020814 <ip_reass_chain_frag_into_datagram_and_validate+0x284>
        ipr->p = new_p;
 802068a:	68fb      	ldr	r3, [r7, #12]
 802068c:	68ba      	ldr	r2, [r7, #8]
 802068e:	605a      	str	r2, [r3, #4]
      break;
 8020690:	e027      	b.n	80206e2 <ip_reass_chain_frag_into_datagram_and_validate+0x152>
    } else if (iprh->start == iprh_tmp->start) {
 8020692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020694:	889b      	ldrh	r3, [r3, #4]
 8020696:	b29a      	uxth	r2, r3
 8020698:	697b      	ldr	r3, [r7, #20]
 802069a:	889b      	ldrh	r3, [r3, #4]
 802069c:	b29b      	uxth	r3, r3
 802069e:	429a      	cmp	r2, r3
 80206a0:	f000 80ba 	beq.w	8020818 <ip_reass_chain_frag_into_datagram_and_validate+0x288>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80206a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80206a6:	889b      	ldrh	r3, [r3, #4]
 80206a8:	b29a      	uxth	r2, r3
 80206aa:	697b      	ldr	r3, [r7, #20]
 80206ac:	88db      	ldrh	r3, [r3, #6]
 80206ae:	b29b      	uxth	r3, r3
 80206b0:	429a      	cmp	r2, r3
 80206b2:	f0c0 80b3 	bcc.w	802081c <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80206b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80206b8:	2b00      	cmp	r3, #0
 80206ba:	d009      	beq.n	80206d0 <ip_reass_chain_frag_into_datagram_and_validate+0x140>
        if (iprh_prev->end != iprh_tmp->start) {
 80206bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80206be:	88db      	ldrh	r3, [r3, #6]
 80206c0:	b29a      	uxth	r2, r3
 80206c2:	697b      	ldr	r3, [r7, #20]
 80206c4:	889b      	ldrh	r3, [r3, #4]
 80206c6:	b29b      	uxth	r3, r3
 80206c8:	429a      	cmp	r2, r3
 80206ca:	d001      	beq.n	80206d0 <ip_reass_chain_frag_into_datagram_and_validate+0x140>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80206cc:	2300      	movs	r3, #0
 80206ce:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80206d0:	697b      	ldr	r3, [r7, #20]
 80206d2:	681b      	ldr	r3, [r3, #0]
 80206d4:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 80206d6:	697b      	ldr	r3, [r7, #20]
 80206d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 80206da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80206dc:	2b00      	cmp	r3, #0
 80206de:	d19a      	bne.n	8020616 <ip_reass_chain_frag_into_datagram_and_validate+0x86>
 80206e0:	e000      	b.n	80206e4 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
      break;
 80206e2:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80206e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80206e6:	2b00      	cmp	r3, #0
 80206e8:	d12d      	bne.n	8020746 <ip_reass_chain_frag_into_datagram_and_validate+0x1b6>
    if (iprh_prev != NULL) {
 80206ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80206ec:	2b00      	cmp	r3, #0
 80206ee:	d01c      	beq.n	802072a <ip_reass_chain_frag_into_datagram_and_validate+0x19a>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80206f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80206f2:	88db      	ldrh	r3, [r3, #6]
 80206f4:	b29a      	uxth	r2, r3
 80206f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80206f8:	889b      	ldrh	r3, [r3, #4]
 80206fa:	b29b      	uxth	r3, r3
 80206fc:	429a      	cmp	r2, r3
 80206fe:	d906      	bls.n	802070e <ip_reass_chain_frag_into_datagram_and_validate+0x17e>
 8020700:	4b51      	ldr	r3, [pc, #324]	@ (8020848 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8020702:	f240 12ab 	movw	r2, #427	@ 0x1ab
 8020706:	4951      	ldr	r1, [pc, #324]	@ (802084c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8020708:	4851      	ldr	r0, [pc, #324]	@ (8020850 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 802070a:	f001 fabd 	bl	8021c88 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 802070e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020710:	68ba      	ldr	r2, [r7, #8]
 8020712:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8020714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020716:	88db      	ldrh	r3, [r3, #6]
 8020718:	b29a      	uxth	r2, r3
 802071a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802071c:	889b      	ldrh	r3, [r3, #4]
 802071e:	b29b      	uxth	r3, r3
 8020720:	429a      	cmp	r2, r3
 8020722:	d010      	beq.n	8020746 <ip_reass_chain_frag_into_datagram_and_validate+0x1b6>
        valid = 0;
 8020724:	2300      	movs	r3, #0
 8020726:	623b      	str	r3, [r7, #32]
 8020728:	e00d      	b.n	8020746 <ip_reass_chain_frag_into_datagram_and_validate+0x1b6>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 802072a:	68fb      	ldr	r3, [r7, #12]
 802072c:	685b      	ldr	r3, [r3, #4]
 802072e:	2b00      	cmp	r3, #0
 8020730:	d006      	beq.n	8020740 <ip_reass_chain_frag_into_datagram_and_validate+0x1b0>
 8020732:	4b45      	ldr	r3, [pc, #276]	@ (8020848 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8020734:	f240 12b3 	movw	r2, #435	@ 0x1b3
 8020738:	4946      	ldr	r1, [pc, #280]	@ (8020854 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 802073a:	4845      	ldr	r0, [pc, #276]	@ (8020850 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 802073c:	f001 faa4 	bl	8021c88 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8020740:	68fb      	ldr	r3, [r7, #12]
 8020742:	68ba      	ldr	r2, [r7, #8]
 8020744:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8020746:	687b      	ldr	r3, [r7, #4]
 8020748:	2b00      	cmp	r3, #0
 802074a:	d105      	bne.n	8020758 <ip_reass_chain_frag_into_datagram_and_validate+0x1c8>
 802074c:	68fb      	ldr	r3, [r7, #12]
 802074e:	7f9b      	ldrb	r3, [r3, #30]
 8020750:	f003 0301 	and.w	r3, r3, #1
 8020754:	2b00      	cmp	r3, #0
 8020756:	d059      	beq.n	802080c <ip_reass_chain_frag_into_datagram_and_validate+0x27c>
    /* and had no holes so far */
    if (valid) {
 8020758:	6a3b      	ldr	r3, [r7, #32]
 802075a:	2b00      	cmp	r3, #0
 802075c:	d04f      	beq.n	80207fe <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 802075e:	68fb      	ldr	r3, [r7, #12]
 8020760:	685b      	ldr	r3, [r3, #4]
 8020762:	2b00      	cmp	r3, #0
 8020764:	d006      	beq.n	8020774 <ip_reass_chain_frag_into_datagram_and_validate+0x1e4>
 8020766:	68fb      	ldr	r3, [r7, #12]
 8020768:	685b      	ldr	r3, [r3, #4]
 802076a:	685b      	ldr	r3, [r3, #4]
 802076c:	889b      	ldrh	r3, [r3, #4]
 802076e:	b29b      	uxth	r3, r3
 8020770:	2b00      	cmp	r3, #0
 8020772:	d002      	beq.n	802077a <ip_reass_chain_frag_into_datagram_and_validate+0x1ea>
        valid = 0;
 8020774:	2300      	movs	r3, #0
 8020776:	623b      	str	r3, [r7, #32]
 8020778:	e041      	b.n	80207fe <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 802077a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802077c:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 802077e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020780:	681b      	ldr	r3, [r3, #0]
 8020782:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8020784:	e012      	b.n	80207ac <ip_reass_chain_frag_into_datagram_and_validate+0x21c>
          iprh = (struct ip_reass_helper*)q->payload;
 8020786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020788:	685b      	ldr	r3, [r3, #4]
 802078a:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 802078c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802078e:	88db      	ldrh	r3, [r3, #6]
 8020790:	b29a      	uxth	r2, r3
 8020792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020794:	889b      	ldrh	r3, [r3, #4]
 8020796:	b29b      	uxth	r3, r3
 8020798:	429a      	cmp	r2, r3
 802079a:	d002      	beq.n	80207a2 <ip_reass_chain_frag_into_datagram_and_validate+0x212>
            valid = 0;
 802079c:	2300      	movs	r3, #0
 802079e:	623b      	str	r3, [r7, #32]
            break;
 80207a0:	e007      	b.n	80207b2 <ip_reass_chain_frag_into_datagram_and_validate+0x222>
          }
          iprh_prev = iprh;
 80207a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80207a4:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 80207a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80207a8:	681b      	ldr	r3, [r3, #0]
 80207aa:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80207ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80207ae:	2b00      	cmp	r3, #0
 80207b0:	d1e9      	bne.n	8020786 <ip_reass_chain_frag_into_datagram_and_validate+0x1f6>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80207b2:	6a3b      	ldr	r3, [r7, #32]
 80207b4:	2b00      	cmp	r3, #0
 80207b6:	d022      	beq.n	80207fe <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80207b8:	68fb      	ldr	r3, [r7, #12]
 80207ba:	685b      	ldr	r3, [r3, #4]
 80207bc:	2b00      	cmp	r3, #0
 80207be:	d106      	bne.n	80207ce <ip_reass_chain_frag_into_datagram_and_validate+0x23e>
 80207c0:	4b21      	ldr	r3, [pc, #132]	@ (8020848 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80207c2:	f44f 72ea 	mov.w	r2, #468	@ 0x1d4
 80207c6:	4924      	ldr	r1, [pc, #144]	@ (8020858 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80207c8:	4821      	ldr	r0, [pc, #132]	@ (8020850 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80207ca:	f001 fa5d 	bl	8021c88 <iprintf>
          LWIP_ASSERT("sanity check",
 80207ce:	68fb      	ldr	r3, [r7, #12]
 80207d0:	685b      	ldr	r3, [r3, #4]
 80207d2:	685b      	ldr	r3, [r3, #4]
 80207d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80207d6:	429a      	cmp	r2, r3
 80207d8:	d106      	bne.n	80207e8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
 80207da:	4b1b      	ldr	r3, [pc, #108]	@ (8020848 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80207dc:	f240 12d5 	movw	r2, #469	@ 0x1d5
 80207e0:	491d      	ldr	r1, [pc, #116]	@ (8020858 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80207e2:	481b      	ldr	r0, [pc, #108]	@ (8020850 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80207e4:	f001 fa50 	bl	8021c88 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80207e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80207ea:	681b      	ldr	r3, [r3, #0]
 80207ec:	2b00      	cmp	r3, #0
 80207ee:	d006      	beq.n	80207fe <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
 80207f0:	4b15      	ldr	r3, [pc, #84]	@ (8020848 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80207f2:	f240 12d7 	movw	r2, #471	@ 0x1d7
 80207f6:	4919      	ldr	r1, [pc, #100]	@ (802085c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80207f8:	4815      	ldr	r0, [pc, #84]	@ (8020850 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80207fa:	f001 fa45 	bl	8021c88 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80207fe:	6a3b      	ldr	r3, [r7, #32]
 8020800:	2b00      	cmp	r3, #0
 8020802:	bf14      	ite	ne
 8020804:	2301      	movne	r3, #1
 8020806:	2300      	moveq	r3, #0
 8020808:	b2db      	uxtb	r3, r3
 802080a:	e018      	b.n	802083e <ip_reass_chain_frag_into_datagram_and_validate+0x2ae>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 802080c:	2300      	movs	r3, #0
 802080e:	e016      	b.n	802083e <ip_reass_chain_frag_into_datagram_and_validate+0x2ae>
          goto freepbuf;
 8020810:	bf00      	nop
 8020812:	e004      	b.n	802081e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
          goto freepbuf;
 8020814:	bf00      	nop
 8020816:	e002      	b.n	802081e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      goto freepbuf;
 8020818:	bf00      	nop
 802081a:	e000      	b.n	802081e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      goto freepbuf;
 802081c:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 802081e:	68b8      	ldr	r0, [r7, #8]
 8020820:	f7f5 fad4 	bl	8015dcc <pbuf_clen>
 8020824:	4603      	mov	r3, r0
 8020826:	461a      	mov	r2, r3
 8020828:	4b0d      	ldr	r3, [pc, #52]	@ (8020860 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 802082a:	881b      	ldrh	r3, [r3, #0]
 802082c:	1a9b      	subs	r3, r3, r2
 802082e:	b29a      	uxth	r2, r3
 8020830:	4b0b      	ldr	r3, [pc, #44]	@ (8020860 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8020832:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 8020834:	68b8      	ldr	r0, [r7, #8]
 8020836:	f7f5 fa35 	bl	8015ca4 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 802083a:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 802083e:	4618      	mov	r0, r3
 8020840:	3730      	adds	r7, #48	@ 0x30
 8020842:	46bd      	mov	sp, r7
 8020844:	bd80      	pop	{r7, pc}
 8020846:	bf00      	nop
 8020848:	0802771c 	.word	0x0802771c
 802084c:	080277f8 	.word	0x080277f8
 8020850:	08027764 	.word	0x08027764
 8020854:	08027818 	.word	0x08027818
 8020858:	08027850 	.word	0x08027850
 802085c:	08027860 	.word	0x08027860
 8020860:	2000c1bc 	.word	0x2000c1bc

08020864 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8020864:	b580      	push	{r7, lr}
 8020866:	b08e      	sub	sp, #56	@ 0x38
 8020868:	af00      	add	r7, sp, #0
 802086a:	6078      	str	r0, [r7, #4]
  struct ip_reass_helper *iprh;
  u16_t offset, len, clen;
  int valid;
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
 802086c:	4b9d      	ldr	r3, [pc, #628]	@ (8020ae4 <ip4_reass+0x280>)
 802086e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8020870:	3301      	adds	r3, #1
 8020872:	b29a      	uxth	r2, r3
 8020874:	4b9b      	ldr	r3, [pc, #620]	@ (8020ae4 <ip4_reass+0x280>)
 8020876:	865a      	strh	r2, [r3, #50]	@ 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);
 8020878:	4b9a      	ldr	r3, [pc, #616]	@ (8020ae4 <ip4_reass+0x280>)
 802087a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 802087e:	3301      	adds	r3, #1
 8020880:	4a98      	ldr	r2, [pc, #608]	@ (8020ae4 <ip4_reass+0x280>)
 8020882:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c

  fraghdr = (struct ip_hdr*)p->payload;
 8020886:	687b      	ldr	r3, [r7, #4]
 8020888:	685b      	ldr	r3, [r3, #4]
 802088a:	62bb      	str	r3, [r7, #40]	@ 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 802088c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802088e:	781b      	ldrb	r3, [r3, #0]
 8020890:	f003 030f 	and.w	r3, r3, #15
 8020894:	2b05      	cmp	r3, #5
 8020896:	d008      	beq.n	80208aa <ip4_reass+0x46>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
 8020898:	4b92      	ldr	r3, [pc, #584]	@ (8020ae4 <ip4_reass+0x280>)
 802089a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 802089e:	3301      	adds	r3, #1
 80208a0:	b29a      	uxth	r2, r3
 80208a2:	4b90      	ldr	r3, [pc, #576]	@ (8020ae4 <ip4_reass+0x280>)
 80208a4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    goto nullreturn;
 80208a8:	e14c      	b.n	8020b44 <ip4_reass+0x2e0>
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80208aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80208ac:	88db      	ldrh	r3, [r3, #6]
 80208ae:	b29b      	uxth	r3, r3
 80208b0:	4618      	mov	r0, r3
 80208b2:	f7f3 ff9f 	bl	80147f4 <lwip_htons>
 80208b6:	4603      	mov	r3, r0
 80208b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80208bc:	b29b      	uxth	r3, r3
 80208be:	00db      	lsls	r3, r3, #3
 80208c0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80208c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80208c4:	885b      	ldrh	r3, [r3, #2]
 80208c6:	b29b      	uxth	r3, r3
 80208c8:	4618      	mov	r0, r3
 80208ca:	f7f3 ff93 	bl	80147f4 <lwip_htons>
 80208ce:	4603      	mov	r3, r0
 80208d0:	461a      	mov	r2, r3
 80208d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80208d4:	781b      	ldrb	r3, [r3, #0]
 80208d6:	f003 030f 	and.w	r3, r3, #15
 80208da:	b29b      	uxth	r3, r3
 80208dc:	009b      	lsls	r3, r3, #2
 80208de:	b29b      	uxth	r3, r3
 80208e0:	1ad3      	subs	r3, r2, r3
 80208e2:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80208e4:	6878      	ldr	r0, [r7, #4]
 80208e6:	f7f5 fa71 	bl	8015dcc <pbuf_clen>
 80208ea:	4603      	mov	r3, r0
 80208ec:	847b      	strh	r3, [r7, #34]	@ 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80208ee:	4b7e      	ldr	r3, [pc, #504]	@ (8020ae8 <ip4_reass+0x284>)
 80208f0:	881b      	ldrh	r3, [r3, #0]
 80208f2:	461a      	mov	r2, r3
 80208f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80208f6:	4413      	add	r3, r2
 80208f8:	2b0a      	cmp	r3, #10
 80208fa:	dd15      	ble.n	8020928 <ip4_reass+0xc4>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80208fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80208fe:	4619      	mov	r1, r3
 8020900:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8020902:	f7ff fd73 	bl	80203ec <ip_reass_remove_oldest_datagram>
 8020906:	4603      	mov	r3, r0
 8020908:	2b00      	cmp	r3, #0
 802090a:	d006      	beq.n	802091a <ip4_reass+0xb6>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 802090c:	4b76      	ldr	r3, [pc, #472]	@ (8020ae8 <ip4_reass+0x284>)
 802090e:	881b      	ldrh	r3, [r3, #0]
 8020910:	461a      	mov	r2, r3
 8020912:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8020914:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8020916:	2b0a      	cmp	r3, #10
 8020918:	dd06      	ble.n	8020928 <ip4_reass+0xc4>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
        ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
 802091a:	4b72      	ldr	r3, [pc, #456]	@ (8020ae4 <ip4_reass+0x280>)
 802091c:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 802091e:	3301      	adds	r3, #1
 8020920:	b29a      	uxth	r2, r3
 8020922:	4b70      	ldr	r3, [pc, #448]	@ (8020ae4 <ip4_reass+0x280>)
 8020924:	879a      	strh	r2, [r3, #60]	@ 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
 8020926:	e10d      	b.n	8020b44 <ip4_reass+0x2e0>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8020928:	4b70      	ldr	r3, [pc, #448]	@ (8020aec <ip4_reass+0x288>)
 802092a:	681b      	ldr	r3, [r3, #0]
 802092c:	633b      	str	r3, [r7, #48]	@ 0x30
 802092e:	e01e      	b.n	802096e <ip4_reass+0x10a>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8020930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020932:	695a      	ldr	r2, [r3, #20]
 8020934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020936:	68db      	ldr	r3, [r3, #12]
 8020938:	429a      	cmp	r2, r3
 802093a:	d115      	bne.n	8020968 <ip4_reass+0x104>
 802093c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802093e:	699a      	ldr	r2, [r3, #24]
 8020940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020942:	691b      	ldr	r3, [r3, #16]
 8020944:	429a      	cmp	r2, r3
 8020946:	d10f      	bne.n	8020968 <ip4_reass+0x104>
 8020948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802094a:	899a      	ldrh	r2, [r3, #12]
 802094c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802094e:	889b      	ldrh	r3, [r3, #4]
 8020950:	b29b      	uxth	r3, r3
 8020952:	429a      	cmp	r2, r3
 8020954:	d108      	bne.n	8020968 <ip4_reass+0x104>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
 8020956:	4b63      	ldr	r3, [pc, #396]	@ (8020ae4 <ip4_reass+0x280>)
 8020958:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 802095c:	3301      	adds	r3, #1
 802095e:	b29a      	uxth	r2, r3
 8020960:	4b60      	ldr	r3, [pc, #384]	@ (8020ae4 <ip4_reass+0x280>)
 8020962:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      break;
 8020966:	e005      	b.n	8020974 <ip4_reass+0x110>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8020968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802096a:	681b      	ldr	r3, [r3, #0]
 802096c:	633b      	str	r3, [r7, #48]	@ 0x30
 802096e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020970:	2b00      	cmp	r3, #0
 8020972:	d1dd      	bne.n	8020930 <ip4_reass+0xcc>
    }
  }

  if (ipr == NULL) {
 8020974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020976:	2b00      	cmp	r3, #0
 8020978:	d109      	bne.n	802098e <ip4_reass+0x12a>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 802097a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 802097c:	4619      	mov	r1, r3
 802097e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8020980:	f7ff fd96 	bl	80204b0 <ip_reass_enqueue_new_datagram>
 8020984:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8020986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020988:	2b00      	cmp	r3, #0
 802098a:	d11c      	bne.n	80209c6 <ip4_reass+0x162>
      goto nullreturn;
 802098c:	e0da      	b.n	8020b44 <ip4_reass+0x2e0>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 802098e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020990:	88db      	ldrh	r3, [r3, #6]
 8020992:	b29b      	uxth	r3, r3
 8020994:	4618      	mov	r0, r3
 8020996:	f7f3 ff2d 	bl	80147f4 <lwip_htons>
 802099a:	4603      	mov	r3, r0
 802099c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80209a0:	2b00      	cmp	r3, #0
 80209a2:	d110      	bne.n	80209c6 <ip4_reass+0x162>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80209a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80209a6:	89db      	ldrh	r3, [r3, #14]
 80209a8:	4618      	mov	r0, r3
 80209aa:	f7f3 ff23 	bl	80147f4 <lwip_htons>
 80209ae:	4603      	mov	r3, r0
 80209b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80209b4:	2b00      	cmp	r3, #0
 80209b6:	d006      	beq.n	80209c6 <ip4_reass+0x162>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80209b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80209ba:	3308      	adds	r3, #8
 80209bc:	2214      	movs	r2, #20
 80209be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80209c0:	4618      	mov	r0, r3
 80209c2:	f001 fc5c 	bl	802227e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80209c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80209c8:	88db      	ldrh	r3, [r3, #6]
 80209ca:	b29b      	uxth	r3, r3
 80209cc:	f003 0320 	and.w	r3, r3, #32
 80209d0:	2b00      	cmp	r3, #0
 80209d2:	bf0c      	ite	eq
 80209d4:	2301      	moveq	r3, #1
 80209d6:	2300      	movne	r3, #0
 80209d8:	b2db      	uxtb	r3, r3
 80209da:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80209dc:	69fb      	ldr	r3, [r7, #28]
 80209de:	2b00      	cmp	r3, #0
 80209e0:	d00e      	beq.n	8020a00 <ip4_reass+0x19c>
    u16_t datagram_len = (u16_t)(offset + len);
 80209e2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80209e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80209e6:	4413      	add	r3, r2
 80209e8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80209ea:	8b7a      	ldrh	r2, [r7, #26]
 80209ec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80209ee:	429a      	cmp	r2, r3
 80209f0:	f0c0 80a5 	bcc.w	8020b3e <ip4_reass+0x2da>
 80209f4:	8b7b      	ldrh	r3, [r7, #26]
 80209f6:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 80209fa:	4293      	cmp	r3, r2
 80209fc:	f200 809f 	bhi.w	8020b3e <ip4_reass+0x2da>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8020a00:	69fa      	ldr	r2, [r7, #28]
 8020a02:	6879      	ldr	r1, [r7, #4]
 8020a04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8020a06:	f7ff fdc3 	bl	8020590 <ip_reass_chain_frag_into_datagram_and_validate>
 8020a0a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8020a0c:	697b      	ldr	r3, [r7, #20]
 8020a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020a12:	f000 8096 	beq.w	8020b42 <ip4_reass+0x2de>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8020a16:	4b34      	ldr	r3, [pc, #208]	@ (8020ae8 <ip4_reass+0x284>)
 8020a18:	881a      	ldrh	r2, [r3, #0]
 8020a1a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8020a1c:	4413      	add	r3, r2
 8020a1e:	b29a      	uxth	r2, r3
 8020a20:	4b31      	ldr	r3, [pc, #196]	@ (8020ae8 <ip4_reass+0x284>)
 8020a22:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8020a24:	69fb      	ldr	r3, [r7, #28]
 8020a26:	2b00      	cmp	r3, #0
 8020a28:	d00d      	beq.n	8020a46 <ip4_reass+0x1e2>
    u16_t datagram_len = (u16_t)(offset + len);
 8020a2a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8020a2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8020a2e:	4413      	add	r3, r2
 8020a30:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8020a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020a34:	8a7a      	ldrh	r2, [r7, #18]
 8020a36:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8020a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020a3a:	7f9b      	ldrb	r3, [r3, #30]
 8020a3c:	f043 0301 	orr.w	r3, r3, #1
 8020a40:	b2da      	uxtb	r2, r3
 8020a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020a44:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8020a46:	697b      	ldr	r3, [r7, #20]
 8020a48:	2b01      	cmp	r3, #1
 8020a4a:	d176      	bne.n	8020b3a <ip4_reass+0x2d6>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 8020a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020a4e:	8b9b      	ldrh	r3, [r3, #28]
 8020a50:	3314      	adds	r3, #20
 8020a52:	b29a      	uxth	r2, r3
 8020a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020a56:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8020a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020a5a:	685b      	ldr	r3, [r3, #4]
 8020a5c:	685b      	ldr	r3, [r3, #4]
 8020a5e:	681b      	ldr	r3, [r3, #0]
 8020a60:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 8020a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020a64:	685b      	ldr	r3, [r3, #4]
 8020a66:	685b      	ldr	r3, [r3, #4]
 8020a68:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8020a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020a6c:	3308      	adds	r3, #8
 8020a6e:	2214      	movs	r2, #20
 8020a70:	4619      	mov	r1, r3
 8020a72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8020a74:	f001 fc03 	bl	802227e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8020a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020a7a:	8b9b      	ldrh	r3, [r3, #28]
 8020a7c:	4618      	mov	r0, r3
 8020a7e:	f7f3 feb9 	bl	80147f4 <lwip_htons>
 8020a82:	4603      	mov	r3, r0
 8020a84:	461a      	mov	r2, r3
 8020a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020a88:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8020a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020a8c:	2200      	movs	r2, #0
 8020a8e:	719a      	strb	r2, [r3, #6]
 8020a90:	2200      	movs	r2, #0
 8020a92:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8020a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020a96:	2200      	movs	r2, #0
 8020a98:	729a      	strb	r2, [r3, #10]
 8020a9a:	2200      	movs	r2, #0
 8020a9c:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8020a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020aa0:	685b      	ldr	r3, [r3, #4]
 8020aa2:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8020aa4:	e00e      	b.n	8020ac4 <ip4_reass+0x260>
      iprh = (struct ip_reass_helper*)r->payload;
 8020aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020aa8:	685b      	ldr	r3, [r3, #4]
 8020aaa:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 8020aac:	f06f 0113 	mvn.w	r1, #19
 8020ab0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8020ab2:	f7f5 f8d3 	bl	8015c5c <pbuf_header>
      pbuf_cat(p, r);
 8020ab6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8020ab8:	6878      	ldr	r0, [r7, #4]
 8020aba:	f7f5 f9bf 	bl	8015e3c <pbuf_cat>
      r = iprh->next_pbuf;
 8020abe:	68fb      	ldr	r3, [r7, #12]
 8020ac0:	681b      	ldr	r3, [r3, #0]
 8020ac2:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8020ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020ac6:	2b00      	cmp	r3, #0
 8020ac8:	d1ed      	bne.n	8020aa6 <ip4_reass+0x242>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8020aca:	4b08      	ldr	r3, [pc, #32]	@ (8020aec <ip4_reass+0x288>)
 8020acc:	681b      	ldr	r3, [r3, #0]
 8020ace:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8020ad0:	429a      	cmp	r2, r3
 8020ad2:	d102      	bne.n	8020ada <ip4_reass+0x276>
      ipr_prev = NULL;
 8020ad4:	2300      	movs	r3, #0
 8020ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8020ad8:	e017      	b.n	8020b0a <ip4_reass+0x2a6>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8020ada:	4b04      	ldr	r3, [pc, #16]	@ (8020aec <ip4_reass+0x288>)
 8020adc:	681b      	ldr	r3, [r3, #0]
 8020ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8020ae0:	e00e      	b.n	8020b00 <ip4_reass+0x29c>
 8020ae2:	bf00      	nop
 8020ae4:	2000be88 	.word	0x2000be88
 8020ae8:	2000c1bc 	.word	0x2000c1bc
 8020aec:	2000c1b8 	.word	0x2000c1b8
        if (ipr_prev->next == ipr) {
 8020af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020af2:	681b      	ldr	r3, [r3, #0]
 8020af4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8020af6:	429a      	cmp	r2, r3
 8020af8:	d006      	beq.n	8020b08 <ip4_reass+0x2a4>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8020afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020afc:	681b      	ldr	r3, [r3, #0]
 8020afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8020b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020b02:	2b00      	cmp	r3, #0
 8020b04:	d1f4      	bne.n	8020af0 <ip4_reass+0x28c>
 8020b06:	e000      	b.n	8020b0a <ip4_reass+0x2a6>
          break;
 8020b08:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8020b0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8020b0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8020b0e:	f7ff fd11 	bl	8020534 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 8020b12:	6878      	ldr	r0, [r7, #4]
 8020b14:	f7f5 f95a 	bl	8015dcc <pbuf_clen>
 8020b18:	4603      	mov	r3, r0
 8020b1a:	461a      	mov	r2, r3
 8020b1c:	4b10      	ldr	r3, [pc, #64]	@ (8020b60 <ip4_reass+0x2fc>)
 8020b1e:	881b      	ldrh	r3, [r3, #0]
 8020b20:	1a9b      	subs	r3, r3, r2
 8020b22:	b29a      	uxth	r2, r3
 8020b24:	4b0e      	ldr	r3, [pc, #56]	@ (8020b60 <ip4_reass+0x2fc>)
 8020b26:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);
 8020b28:	4b0e      	ldr	r3, [pc, #56]	@ (8020b64 <ip4_reass+0x300>)
 8020b2a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8020b2e:	3301      	adds	r3, #1
 8020b30:	4a0c      	ldr	r2, [pc, #48]	@ (8020b64 <ip4_reass+0x300>)
 8020b32:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8

    /* Return the pbuf chain */
    return p;
 8020b36:	687b      	ldr	r3, [r7, #4]
 8020b38:	e00e      	b.n	8020b58 <ip4_reass+0x2f4>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8020b3a:	2300      	movs	r3, #0
 8020b3c:	e00c      	b.n	8020b58 <ip4_reass+0x2f4>
      goto nullreturn;
 8020b3e:	bf00      	nop
 8020b40:	e000      	b.n	8020b44 <ip4_reass+0x2e0>
    goto nullreturn;
 8020b42:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
 8020b44:	4b07      	ldr	r3, [pc, #28]	@ (8020b64 <ip4_reass+0x300>)
 8020b46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8020b48:	3301      	adds	r3, #1
 8020b4a:	b29a      	uxth	r2, r3
 8020b4c:	4b05      	ldr	r3, [pc, #20]	@ (8020b64 <ip4_reass+0x300>)
 8020b4e:	86da      	strh	r2, [r3, #54]	@ 0x36
  pbuf_free(p);
 8020b50:	6878      	ldr	r0, [r7, #4]
 8020b52:	f7f5 f8a7 	bl	8015ca4 <pbuf_free>
  return NULL;
 8020b56:	2300      	movs	r3, #0
}
 8020b58:	4618      	mov	r0, r3
 8020b5a:	3738      	adds	r7, #56	@ 0x38
 8020b5c:	46bd      	mov	sp, r7
 8020b5e:	bd80      	pop	{r7, pc}
 8020b60:	2000c1bc 	.word	0x2000c1bc
 8020b64:	2000be88 	.word	0x2000be88

08020b68 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 8020b68:	b580      	push	{r7, lr}
 8020b6a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8020b6c:	2005      	movs	r0, #5
 8020b6e:	f7f4 faeb 	bl	8015148 <memp_malloc>
 8020b72:	4603      	mov	r3, r0
}
 8020b74:	4618      	mov	r0, r3
 8020b76:	bd80      	pop	{r7, pc}

08020b78 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8020b78:	b580      	push	{r7, lr}
 8020b7a:	b082      	sub	sp, #8
 8020b7c:	af00      	add	r7, sp, #0
 8020b7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8020b80:	687b      	ldr	r3, [r7, #4]
 8020b82:	2b00      	cmp	r3, #0
 8020b84:	d106      	bne.n	8020b94 <ip_frag_free_pbuf_custom_ref+0x1c>
 8020b86:	4b07      	ldr	r3, [pc, #28]	@ (8020ba4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8020b88:	f240 22ae 	movw	r2, #686	@ 0x2ae
 8020b8c:	4906      	ldr	r1, [pc, #24]	@ (8020ba8 <ip_frag_free_pbuf_custom_ref+0x30>)
 8020b8e:	4807      	ldr	r0, [pc, #28]	@ (8020bac <ip_frag_free_pbuf_custom_ref+0x34>)
 8020b90:	f001 f87a 	bl	8021c88 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8020b94:	6879      	ldr	r1, [r7, #4]
 8020b96:	2005      	movs	r0, #5
 8020b98:	f7f4 fb28 	bl	80151ec <memp_free>
}
 8020b9c:	bf00      	nop
 8020b9e:	3708      	adds	r7, #8
 8020ba0:	46bd      	mov	sp, r7
 8020ba2:	bd80      	pop	{r7, pc}
 8020ba4:	0802771c 	.word	0x0802771c
 8020ba8:	08027884 	.word	0x08027884
 8020bac:	08027764 	.word	0x08027764

08020bb0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8020bb0:	b580      	push	{r7, lr}
 8020bb2:	b084      	sub	sp, #16
 8020bb4:	af00      	add	r7, sp, #0
 8020bb6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 8020bb8:	687b      	ldr	r3, [r7, #4]
 8020bba:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8020bbc:	68fb      	ldr	r3, [r7, #12]
 8020bbe:	2b00      	cmp	r3, #0
 8020bc0:	d106      	bne.n	8020bd0 <ipfrag_free_pbuf_custom+0x20>
 8020bc2:	4b11      	ldr	r3, [pc, #68]	@ (8020c08 <ipfrag_free_pbuf_custom+0x58>)
 8020bc4:	f44f 722e 	mov.w	r2, #696	@ 0x2b8
 8020bc8:	4910      	ldr	r1, [pc, #64]	@ (8020c0c <ipfrag_free_pbuf_custom+0x5c>)
 8020bca:	4811      	ldr	r0, [pc, #68]	@ (8020c10 <ipfrag_free_pbuf_custom+0x60>)
 8020bcc:	f001 f85c 	bl	8021c88 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 8020bd0:	68fa      	ldr	r2, [r7, #12]
 8020bd2:	687b      	ldr	r3, [r7, #4]
 8020bd4:	429a      	cmp	r2, r3
 8020bd6:	d006      	beq.n	8020be6 <ipfrag_free_pbuf_custom+0x36>
 8020bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8020c08 <ipfrag_free_pbuf_custom+0x58>)
 8020bda:	f240 22b9 	movw	r2, #697	@ 0x2b9
 8020bde:	490d      	ldr	r1, [pc, #52]	@ (8020c14 <ipfrag_free_pbuf_custom+0x64>)
 8020be0:	480b      	ldr	r0, [pc, #44]	@ (8020c10 <ipfrag_free_pbuf_custom+0x60>)
 8020be2:	f001 f851 	bl	8021c88 <iprintf>
  if (pcr->original != NULL) {
 8020be6:	68fb      	ldr	r3, [r7, #12]
 8020be8:	695b      	ldr	r3, [r3, #20]
 8020bea:	2b00      	cmp	r3, #0
 8020bec:	d004      	beq.n	8020bf8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8020bee:	68fb      	ldr	r3, [r7, #12]
 8020bf0:	695b      	ldr	r3, [r3, #20]
 8020bf2:	4618      	mov	r0, r3
 8020bf4:	f7f5 f856 	bl	8015ca4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8020bf8:	68f8      	ldr	r0, [r7, #12]
 8020bfa:	f7ff ffbd 	bl	8020b78 <ip_frag_free_pbuf_custom_ref>
}
 8020bfe:	bf00      	nop
 8020c00:	3710      	adds	r7, #16
 8020c02:	46bd      	mov	sp, r7
 8020c04:	bd80      	pop	{r7, pc}
 8020c06:	bf00      	nop
 8020c08:	0802771c 	.word	0x0802771c
 8020c0c:	08027890 	.word	0x08027890
 8020c10:	08027764 	.word	0x08027764
 8020c14:	0802789c 	.word	0x0802789c

08020c18 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8020c18:	b580      	push	{r7, lr}
 8020c1a:	b092      	sub	sp, #72	@ 0x48
 8020c1c:	af02      	add	r7, sp, #8
 8020c1e:	60f8      	str	r0, [r7, #12]
 8020c20:	60b9      	str	r1, [r7, #8]
 8020c22:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8020c24:	2300      	movs	r3, #0
 8020c26:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8020c28:	68bb      	ldr	r3, [r7, #8]
 8020c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8020c2c:	3b14      	subs	r3, #20
 8020c2e:	2b00      	cmp	r3, #0
 8020c30:	da00      	bge.n	8020c34 <ip4_frag+0x1c>
 8020c32:	3307      	adds	r3, #7
 8020c34:	10db      	asrs	r3, r3, #3
 8020c36:	867b      	strh	r3, [r7, #50]	@ 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8020c38:	2314      	movs	r3, #20
 8020c3a:	86fb      	strh	r3, [r7, #54]	@ 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8020c3c:	68fb      	ldr	r3, [r7, #12]
 8020c3e:	685b      	ldr	r3, [r3, #4]
 8020c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iphdr = original_iphdr;
 8020c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020c44:	62bb      	str	r3, [r7, #40]	@ 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8020c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020c48:	781b      	ldrb	r3, [r3, #0]
 8020c4a:	f003 030f 	and.w	r3, r3, #15
 8020c4e:	2b05      	cmp	r3, #5
 8020c50:	d009      	beq.n	8020c66 <ip4_frag+0x4e>
 8020c52:	4b84      	ldr	r3, [pc, #528]	@ (8020e64 <ip4_frag+0x24c>)
 8020c54:	f240 22e1 	movw	r2, #737	@ 0x2e1
 8020c58:	4983      	ldr	r1, [pc, #524]	@ (8020e68 <ip4_frag+0x250>)
 8020c5a:	4884      	ldr	r0, [pc, #528]	@ (8020e6c <ip4_frag+0x254>)
 8020c5c:	f001 f814 	bl	8021c88 <iprintf>
 8020c60:	f06f 0305 	mvn.w	r3, #5
 8020c64:	e0fa      	b.n	8020e5c <ip4_frag+0x244>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8020c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020c68:	88db      	ldrh	r3, [r3, #6]
 8020c6a:	b29b      	uxth	r3, r3
 8020c6c:	4618      	mov	r0, r3
 8020c6e:	f7f3 fdc1 	bl	80147f4 <lwip_htons>
 8020c72:	4603      	mov	r3, r0
 8020c74:	86bb      	strh	r3, [r7, #52]	@ 0x34
  ofo = tmp & IP_OFFMASK;
 8020c76:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8020c78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8020c7c:	873b      	strh	r3, [r7, #56]	@ 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8020c7e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8020c80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8020c84:	2b00      	cmp	r3, #0
 8020c86:	d009      	beq.n	8020c9c <ip4_frag+0x84>
 8020c88:	4b76      	ldr	r3, [pc, #472]	@ (8020e64 <ip4_frag+0x24c>)
 8020c8a:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8020c8e:	4978      	ldr	r1, [pc, #480]	@ (8020e70 <ip4_frag+0x258>)
 8020c90:	4876      	ldr	r0, [pc, #472]	@ (8020e6c <ip4_frag+0x254>)
 8020c92:	f000 fff9 	bl	8021c88 <iprintf>
 8020c96:	f06f 0305 	mvn.w	r3, #5
 8020c9a:	e0df      	b.n	8020e5c <ip4_frag+0x244>

  left = p->tot_len - IP_HLEN;
 8020c9c:	68fb      	ldr	r3, [r7, #12]
 8020c9e:	891b      	ldrh	r3, [r3, #8]
 8020ca0:	3b14      	subs	r3, #20
 8020ca2:	877b      	strh	r3, [r7, #58]	@ 0x3a

  while (left) {
 8020ca4:	e0c3      	b.n	8020e2e <ip4_frag+0x216>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 8020ca6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8020ca8:	00da      	lsls	r2, r3, #3
 8020caa:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8020cac:	4293      	cmp	r3, r2
 8020cae:	bfa8      	it	ge
 8020cb0:	4613      	movge	r3, r2
 8020cb2:	84fb      	strh	r3, [r7, #38]	@ 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8020cb4:	2200      	movs	r2, #0
 8020cb6:	2114      	movs	r1, #20
 8020cb8:	2002      	movs	r0, #2
 8020cba:	f7f4 fc7b 	bl	80155b4 <pbuf_alloc>
 8020cbe:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 8020cc0:	6a3b      	ldr	r3, [r7, #32]
 8020cc2:	2b00      	cmp	r3, #0
 8020cc4:	f000 80c0 	beq.w	8020e48 <ip4_frag+0x230>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8020cc8:	68fb      	ldr	r3, [r7, #12]
 8020cca:	895b      	ldrh	r3, [r3, #10]
 8020ccc:	2b13      	cmp	r3, #19
 8020cce:	d806      	bhi.n	8020cde <ip4_frag+0xc6>
 8020cd0:	4b64      	ldr	r3, [pc, #400]	@ (8020e64 <ip4_frag+0x24c>)
 8020cd2:	f44f 7242 	mov.w	r2, #776	@ 0x308
 8020cd6:	4967      	ldr	r1, [pc, #412]	@ (8020e74 <ip4_frag+0x25c>)
 8020cd8:	4864      	ldr	r0, [pc, #400]	@ (8020e6c <ip4_frag+0x254>)
 8020cda:	f000 ffd5 	bl	8021c88 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8020cde:	6a3b      	ldr	r3, [r7, #32]
 8020ce0:	685b      	ldr	r3, [r3, #4]
 8020ce2:	2214      	movs	r2, #20
 8020ce4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8020ce6:	4618      	mov	r0, r3
 8020ce8:	f001 fac9 	bl	802227e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8020cec:	6a3b      	ldr	r3, [r7, #32]
 8020cee:	685b      	ldr	r3, [r3, #4]
 8020cf0:	62bb      	str	r3, [r7, #40]	@ 0x28

    left_to_copy = fragsize;
 8020cf2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8020cf4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    while (left_to_copy) {
 8020cf6:	e04f      	b.n	8020d98 <ip4_frag+0x180>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 8020cf8:	68fb      	ldr	r3, [r7, #12]
 8020cfa:	895a      	ldrh	r2, [r3, #10]
 8020cfc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8020cfe:	1ad3      	subs	r3, r2, r3
 8020d00:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8020d02:	8b7a      	ldrh	r2, [r7, #26]
 8020d04:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8020d06:	4293      	cmp	r3, r2
 8020d08:	bf28      	it	cs
 8020d0a:	4613      	movcs	r3, r2
 8020d0c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8020d0e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8020d10:	2b00      	cmp	r3, #0
 8020d12:	d105      	bne.n	8020d20 <ip4_frag+0x108>
        poff = 0;
 8020d14:	2300      	movs	r3, #0
 8020d16:	86fb      	strh	r3, [r7, #54]	@ 0x36
        p = p->next;
 8020d18:	68fb      	ldr	r3, [r7, #12]
 8020d1a:	681b      	ldr	r3, [r3, #0]
 8020d1c:	60fb      	str	r3, [r7, #12]
        continue;
 8020d1e:	e03b      	b.n	8020d98 <ip4_frag+0x180>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8020d20:	f7ff ff22 	bl	8020b68 <ip_frag_alloc_pbuf_custom_ref>
 8020d24:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 8020d26:	697b      	ldr	r3, [r7, #20]
 8020d28:	2b00      	cmp	r3, #0
 8020d2a:	d103      	bne.n	8020d34 <ip4_frag+0x11c>
        pbuf_free(rambuf);
 8020d2c:	6a38      	ldr	r0, [r7, #32]
 8020d2e:	f7f4 ffb9 	bl	8015ca4 <pbuf_free>
        goto memerr;
 8020d32:	e08a      	b.n	8020e4a <ip4_frag+0x232>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8020d34:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 8020d36:	68fb      	ldr	r3, [r7, #12]
 8020d38:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8020d3a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8020d3c:	4413      	add	r3, r2
 8020d3e:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 8020d40:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8020d42:	9201      	str	r2, [sp, #4]
 8020d44:	9300      	str	r3, [sp, #0]
 8020d46:	4603      	mov	r3, r0
 8020d48:	2202      	movs	r2, #2
 8020d4a:	2004      	movs	r0, #4
 8020d4c:	f7f4 fdcc 	bl	80158e8 <pbuf_alloced_custom>
 8020d50:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 8020d52:	693b      	ldr	r3, [r7, #16]
 8020d54:	2b00      	cmp	r3, #0
 8020d56:	d106      	bne.n	8020d66 <ip4_frag+0x14e>
        ip_frag_free_pbuf_custom_ref(pcr);
 8020d58:	6978      	ldr	r0, [r7, #20]
 8020d5a:	f7ff ff0d 	bl	8020b78 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8020d5e:	6a38      	ldr	r0, [r7, #32]
 8020d60:	f7f4 ffa0 	bl	8015ca4 <pbuf_free>
        goto memerr;
 8020d64:	e071      	b.n	8020e4a <ip4_frag+0x232>
      }
      pbuf_ref(p);
 8020d66:	68f8      	ldr	r0, [r7, #12]
 8020d68:	f7f5 f846 	bl	8015df8 <pbuf_ref>
      pcr->original = p;
 8020d6c:	697b      	ldr	r3, [r7, #20]
 8020d6e:	68fa      	ldr	r2, [r7, #12]
 8020d70:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8020d72:	697b      	ldr	r3, [r7, #20]
 8020d74:	4a40      	ldr	r2, [pc, #256]	@ (8020e78 <ip4_frag+0x260>)
 8020d76:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8020d78:	6939      	ldr	r1, [r7, #16]
 8020d7a:	6a38      	ldr	r0, [r7, #32]
 8020d7c:	f7f5 f85e 	bl	8015e3c <pbuf_cat>
      left_to_copy -= newpbuflen;
 8020d80:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8020d82:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8020d84:	1ad3      	subs	r3, r2, r3
 8020d86:	87bb      	strh	r3, [r7, #60]	@ 0x3c
      if (left_to_copy) {
 8020d88:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8020d8a:	2b00      	cmp	r3, #0
 8020d8c:	d004      	beq.n	8020d98 <ip4_frag+0x180>
        poff = 0;
 8020d8e:	2300      	movs	r3, #0
 8020d90:	86fb      	strh	r3, [r7, #54]	@ 0x36
        p = p->next;
 8020d92:	68fb      	ldr	r3, [r7, #12]
 8020d94:	681b      	ldr	r3, [r3, #0]
 8020d96:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8020d98:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8020d9a:	2b00      	cmp	r3, #0
 8020d9c:	d1ac      	bne.n	8020cf8 <ip4_frag+0xe0>
      }
    }
    poff += newpbuflen;
 8020d9e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8020da0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8020da2:	4413      	add	r3, r2
 8020da4:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8020da6:	68bb      	ldr	r3, [r7, #8]
 8020da8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8020daa:	f1a3 0213 	sub.w	r2, r3, #19
 8020dae:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8020db0:	429a      	cmp	r2, r3
 8020db2:	bfcc      	ite	gt
 8020db4:	2301      	movgt	r3, #1
 8020db6:	2300      	movle	r3, #0
 8020db8:	b2db      	uxtb	r3, r3
 8020dba:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8020dbc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8020dbe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8020dc2:	86bb      	strh	r3, [r7, #52]	@ 0x34
    if (!last) {
 8020dc4:	69fb      	ldr	r3, [r7, #28]
 8020dc6:	2b00      	cmp	r3, #0
 8020dc8:	d103      	bne.n	8020dd2 <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 8020dca:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8020dcc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8020dd0:	86bb      	strh	r3, [r7, #52]	@ 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8020dd2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8020dd4:	4618      	mov	r0, r3
 8020dd6:	f7f3 fd0d 	bl	80147f4 <lwip_htons>
 8020dda:	4603      	mov	r3, r0
 8020ddc:	461a      	mov	r2, r3
 8020dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020de0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8020de2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8020de4:	3314      	adds	r3, #20
 8020de6:	b29b      	uxth	r3, r3
 8020de8:	4618      	mov	r0, r3
 8020dea:	f7f3 fd03 	bl	80147f4 <lwip_htons>
 8020dee:	4603      	mov	r3, r0
 8020df0:	461a      	mov	r2, r3
 8020df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020df4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8020df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020df8:	2200      	movs	r2, #0
 8020dfa:	729a      	strb	r2, [r3, #10]
 8020dfc:	2200      	movs	r2, #0
 8020dfe:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8020e00:	68bb      	ldr	r3, [r7, #8]
 8020e02:	695b      	ldr	r3, [r3, #20]
 8020e04:	687a      	ldr	r2, [r7, #4]
 8020e06:	6a39      	ldr	r1, [r7, #32]
 8020e08:	68b8      	ldr	r0, [r7, #8]
 8020e0a:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 8020e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8020e7c <ip4_frag+0x264>)
 8020e0e:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8020e10:	3301      	adds	r3, #1
 8020e12:	b29a      	uxth	r2, r3
 8020e14:	4b19      	ldr	r3, [pc, #100]	@ (8020e7c <ip4_frag+0x264>)
 8020e16:	861a      	strh	r2, [r3, #48]	@ 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8020e18:	6a38      	ldr	r0, [r7, #32]
 8020e1a:	f7f4 ff43 	bl	8015ca4 <pbuf_free>
    left -= fragsize;
 8020e1e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8020e20:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8020e22:	1ad3      	subs	r3, r2, r3
 8020e24:	877b      	strh	r3, [r7, #58]	@ 0x3a
    ofo += nfb;
 8020e26:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8020e28:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8020e2a:	4413      	add	r3, r2
 8020e2c:	873b      	strh	r3, [r7, #56]	@ 0x38
  while (left) {
 8020e2e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8020e30:	2b00      	cmp	r3, #0
 8020e32:	f47f af38 	bne.w	8020ca6 <ip4_frag+0x8e>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
 8020e36:	4b11      	ldr	r3, [pc, #68]	@ (8020e7c <ip4_frag+0x264>)
 8020e38:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8020e3c:	3301      	adds	r3, #1
 8020e3e:	4a0f      	ldr	r2, [pc, #60]	@ (8020e7c <ip4_frag+0x264>)
 8020e40:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
  return ERR_OK;
 8020e44:	2300      	movs	r3, #0
 8020e46:	e009      	b.n	8020e5c <ip4_frag+0x244>
      goto memerr;
 8020e48:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
 8020e4a:	4b0c      	ldr	r3, [pc, #48]	@ (8020e7c <ip4_frag+0x264>)
 8020e4c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8020e50:	3301      	adds	r3, #1
 8020e52:	4a0a      	ldr	r2, [pc, #40]	@ (8020e7c <ip4_frag+0x264>)
 8020e54:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
  return ERR_MEM;
 8020e58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8020e5c:	4618      	mov	r0, r3
 8020e5e:	3740      	adds	r7, #64	@ 0x40
 8020e60:	46bd      	mov	sp, r7
 8020e62:	bd80      	pop	{r7, pc}
 8020e64:	0802771c 	.word	0x0802771c
 8020e68:	080278a8 	.word	0x080278a8
 8020e6c:	08027764 	.word	0x08027764
 8020e70:	080278d0 	.word	0x080278d0
 8020e74:	080278ec 	.word	0x080278ec
 8020e78:	08020bb1 	.word	0x08020bb1
 8020e7c:	2000be88 	.word	0x2000be88

08020e80 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8020e80:	b580      	push	{r7, lr}
 8020e82:	b086      	sub	sp, #24
 8020e84:	af00      	add	r7, sp, #0
 8020e86:	6078      	str	r0, [r7, #4]
 8020e88:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8020e8a:	230e      	movs	r3, #14
 8020e8c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8020e8e:	687b      	ldr	r3, [r7, #4]
 8020e90:	895b      	ldrh	r3, [r3, #10]
 8020e92:	2b0e      	cmp	r3, #14
 8020e94:	d811      	bhi.n	8020eba <ethernet_input+0x3a>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
 8020e96:	4b5b      	ldr	r3, [pc, #364]	@ (8021004 <ethernet_input+0x184>)
 8020e98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8020e9a:	3301      	adds	r3, #1
 8020e9c:	b29a      	uxth	r2, r3
 8020e9e:	4b59      	ldr	r3, [pc, #356]	@ (8021004 <ethernet_input+0x184>)
 8020ea0:	851a      	strh	r2, [r3, #40]	@ 0x28
    ETHARP_STATS_INC(etharp.drop);
 8020ea2:	4b58      	ldr	r3, [pc, #352]	@ (8021004 <ethernet_input+0x184>)
 8020ea4:	8bdb      	ldrh	r3, [r3, #30]
 8020ea6:	3301      	adds	r3, #1
 8020ea8:	b29a      	uxth	r2, r3
 8020eaa:	4b56      	ldr	r3, [pc, #344]	@ (8021004 <ethernet_input+0x184>)
 8020eac:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
 8020eae:	683b      	ldr	r3, [r7, #0]
 8020eb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8020eb2:	1c5a      	adds	r2, r3, #1
 8020eb4:	683b      	ldr	r3, [r7, #0]
 8020eb6:	651a      	str	r2, [r3, #80]	@ 0x50
    goto free_and_return;
 8020eb8:	e09b      	b.n	8020ff2 <ethernet_input+0x172>
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8020eba:	687b      	ldr	r3, [r7, #4]
 8020ebc:	685b      	ldr	r3, [r3, #4]
 8020ebe:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8020ec0:	693b      	ldr	r3, [r7, #16]
 8020ec2:	7b1a      	ldrb	r2, [r3, #12]
 8020ec4:	7b5b      	ldrb	r3, [r3, #13]
 8020ec6:	021b      	lsls	r3, r3, #8
 8020ec8:	4313      	orrs	r3, r2
 8020eca:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8020ecc:	693b      	ldr	r3, [r7, #16]
 8020ece:	781b      	ldrb	r3, [r3, #0]
 8020ed0:	f003 0301 	and.w	r3, r3, #1
 8020ed4:	2b00      	cmp	r3, #0
 8020ed6:	d023      	beq.n	8020f20 <ethernet_input+0xa0>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8020ed8:	693b      	ldr	r3, [r7, #16]
 8020eda:	781b      	ldrb	r3, [r3, #0]
 8020edc:	2b01      	cmp	r3, #1
 8020ede:	d10f      	bne.n	8020f00 <ethernet_input+0x80>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8020ee0:	693b      	ldr	r3, [r7, #16]
 8020ee2:	785b      	ldrb	r3, [r3, #1]
 8020ee4:	2b00      	cmp	r3, #0
 8020ee6:	d11b      	bne.n	8020f20 <ethernet_input+0xa0>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8020ee8:	693b      	ldr	r3, [r7, #16]
 8020eea:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8020eec:	2b5e      	cmp	r3, #94	@ 0x5e
 8020eee:	d117      	bne.n	8020f20 <ethernet_input+0xa0>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8020ef0:	687b      	ldr	r3, [r7, #4]
 8020ef2:	7b5b      	ldrb	r3, [r3, #13]
 8020ef4:	f043 0310 	orr.w	r3, r3, #16
 8020ef8:	b2da      	uxtb	r2, r3
 8020efa:	687b      	ldr	r3, [r7, #4]
 8020efc:	735a      	strb	r2, [r3, #13]
 8020efe:	e00f      	b.n	8020f20 <ethernet_input+0xa0>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8020f00:	693b      	ldr	r3, [r7, #16]
 8020f02:	2206      	movs	r2, #6
 8020f04:	4940      	ldr	r1, [pc, #256]	@ (8021008 <ethernet_input+0x188>)
 8020f06:	4618      	mov	r0, r3
 8020f08:	f001 f86a 	bl	8021fe0 <memcmp>
 8020f0c:	4603      	mov	r3, r0
 8020f0e:	2b00      	cmp	r3, #0
 8020f10:	d106      	bne.n	8020f20 <ethernet_input+0xa0>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8020f12:	687b      	ldr	r3, [r7, #4]
 8020f14:	7b5b      	ldrb	r3, [r3, #13]
 8020f16:	f043 0308 	orr.w	r3, r3, #8
 8020f1a:	b2da      	uxtb	r2, r3
 8020f1c:	687b      	ldr	r3, [r7, #4]
 8020f1e:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8020f20:	89fb      	ldrh	r3, [r7, #14]
 8020f22:	2b08      	cmp	r3, #8
 8020f24:	d003      	beq.n	8020f2e <ethernet_input+0xae>
 8020f26:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8020f2a:	d01e      	beq.n	8020f6a <ethernet_input+0xea>
 8020f2c:	e048      	b.n	8020fc0 <ethernet_input+0x140>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8020f2e:	683b      	ldr	r3, [r7, #0]
 8020f30:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8020f34:	f003 0308 	and.w	r3, r3, #8
 8020f38:	2b00      	cmp	r3, #0
 8020f3a:	d055      	beq.n	8020fe8 <ethernet_input+0x168>
        goto free_and_return;
      }
      /* skip Ethernet header */
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8020f3c:	687b      	ldr	r3, [r7, #4]
 8020f3e:	895b      	ldrh	r3, [r3, #10]
 8020f40:	461a      	mov	r2, r3
 8020f42:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8020f46:	429a      	cmp	r2, r3
 8020f48:	db50      	blt.n	8020fec <ethernet_input+0x16c>
 8020f4a:	8afb      	ldrh	r3, [r7, #22]
 8020f4c:	425b      	negs	r3, r3
 8020f4e:	b29b      	uxth	r3, r3
 8020f50:	b21b      	sxth	r3, r3
 8020f52:	4619      	mov	r1, r3
 8020f54:	6878      	ldr	r0, [r7, #4]
 8020f56:	f7f4 fe81 	bl	8015c5c <pbuf_header>
 8020f5a:	4603      	mov	r3, r0
 8020f5c:	2b00      	cmp	r3, #0
 8020f5e:	d145      	bne.n	8020fec <ethernet_input+0x16c>
          p->tot_len, ip_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
 8020f60:	6839      	ldr	r1, [r7, #0]
 8020f62:	6878      	ldr	r0, [r7, #4]
 8020f64:	f7fe fc5a 	bl	801f81c <ip4_input>
      }
      break;
 8020f68:	e03c      	b.n	8020fe4 <ethernet_input+0x164>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8020f6a:	683b      	ldr	r3, [r7, #0]
 8020f6c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8020f70:	f003 0308 	and.w	r3, r3, #8
 8020f74:	2b00      	cmp	r3, #0
 8020f76:	d03b      	beq.n	8020ff0 <ethernet_input+0x170>
        goto free_and_return;
      }
      /* skip Ethernet header */
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8020f78:	687b      	ldr	r3, [r7, #4]
 8020f7a:	895b      	ldrh	r3, [r3, #10]
 8020f7c:	461a      	mov	r2, r3
 8020f7e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8020f82:	429a      	cmp	r2, r3
 8020f84:	db0a      	blt.n	8020f9c <ethernet_input+0x11c>
 8020f86:	8afb      	ldrh	r3, [r7, #22]
 8020f88:	425b      	negs	r3, r3
 8020f8a:	b29b      	uxth	r3, r3
 8020f8c:	b21b      	sxth	r3, r3
 8020f8e:	4619      	mov	r1, r3
 8020f90:	6878      	ldr	r0, [r7, #4]
 8020f92:	f7f4 fe63 	bl	8015c5c <pbuf_header>
 8020f96:	4603      	mov	r3, r0
 8020f98:	2b00      	cmp	r3, #0
 8020f9a:	d00c      	beq.n	8020fb6 <ethernet_input+0x136>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
          ("ethernet_input: ARP response packet dropped, too short (%"S16_F"/%"S16_F")\n",
          p->tot_len, ip_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
 8020f9c:	4b19      	ldr	r3, [pc, #100]	@ (8021004 <ethernet_input+0x184>)
 8020f9e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8020fa0:	3301      	adds	r3, #1
 8020fa2:	b29a      	uxth	r2, r3
 8020fa4:	4b17      	ldr	r3, [pc, #92]	@ (8021004 <ethernet_input+0x184>)
 8020fa6:	845a      	strh	r2, [r3, #34]	@ 0x22
        ETHARP_STATS_INC(etharp.drop);
 8020fa8:	4b16      	ldr	r3, [pc, #88]	@ (8021004 <ethernet_input+0x184>)
 8020faa:	8bdb      	ldrh	r3, [r3, #30]
 8020fac:	3301      	adds	r3, #1
 8020fae:	b29a      	uxth	r2, r3
 8020fb0:	4b14      	ldr	r3, [pc, #80]	@ (8021004 <ethernet_input+0x184>)
 8020fb2:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 8020fb4:	e01d      	b.n	8020ff2 <ethernet_input+0x172>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
 8020fb6:	6839      	ldr	r1, [r7, #0]
 8020fb8:	6878      	ldr	r0, [r7, #4]
 8020fba:	f7fd fcc9 	bl	801e950 <etharp_input>
      }
      break;
 8020fbe:	e011      	b.n	8020fe4 <ethernet_input+0x164>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if(LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 8020fc0:	4b10      	ldr	r3, [pc, #64]	@ (8021004 <ethernet_input+0x184>)
 8020fc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8020fc4:	3301      	adds	r3, #1
 8020fc6:	b29a      	uxth	r2, r3
 8020fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8021004 <ethernet_input+0x184>)
 8020fca:	851a      	strh	r2, [r3, #40]	@ 0x28
      ETHARP_STATS_INC(etharp.drop);
 8020fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8021004 <ethernet_input+0x184>)
 8020fce:	8bdb      	ldrh	r3, [r3, #30]
 8020fd0:	3301      	adds	r3, #1
 8020fd2:	b29a      	uxth	r2, r3
 8020fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8021004 <ethernet_input+0x184>)
 8020fd6:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
 8020fd8:	683b      	ldr	r3, [r7, #0]
 8020fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020fdc:	1c5a      	adds	r2, r3, #1
 8020fde:	683b      	ldr	r3, [r7, #0]
 8020fe0:	655a      	str	r2, [r3, #84]	@ 0x54
      goto free_and_return;
 8020fe2:	e006      	b.n	8020ff2 <ethernet_input+0x172>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8020fe4:	2300      	movs	r3, #0
 8020fe6:	e008      	b.n	8020ffa <ethernet_input+0x17a>
        goto free_and_return;
 8020fe8:	bf00      	nop
 8020fea:	e002      	b.n	8020ff2 <ethernet_input+0x172>
        goto free_and_return;
 8020fec:	bf00      	nop
 8020fee:	e000      	b.n	8020ff2 <ethernet_input+0x172>
        goto free_and_return;
 8020ff0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8020ff2:	6878      	ldr	r0, [r7, #4]
 8020ff4:	f7f4 fe56 	bl	8015ca4 <pbuf_free>
  return ERR_OK;
 8020ff8:	2300      	movs	r3, #0
}
 8020ffa:	4618      	mov	r0, r3
 8020ffc:	3718      	adds	r7, #24
 8020ffe:	46bd      	mov	sp, r7
 8021000:	bd80      	pop	{r7, pc}
 8021002:	bf00      	nop
 8021004:	2000be88 	.word	0x2000be88
 8021008:	08030cfc 	.word	0x08030cfc

0802100c <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 802100c:	b580      	push	{r7, lr}
 802100e:	b086      	sub	sp, #24
 8021010:	af00      	add	r7, sp, #0
 8021012:	60f8      	str	r0, [r7, #12]
 8021014:	60b9      	str	r1, [r7, #8]
 8021016:	607a      	str	r2, [r7, #4]
 8021018:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 802101a:	8c3b      	ldrh	r3, [r7, #32]
 802101c:	4618      	mov	r0, r3
 802101e:	f7f3 fbe9 	bl	80147f4 <lwip_htons>
 8021022:	4603      	mov	r3, r0
 8021024:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8021026:	210e      	movs	r1, #14
 8021028:	68b8      	ldr	r0, [r7, #8]
 802102a:	f7f4 fe17 	bl	8015c5c <pbuf_header>
 802102e:	4603      	mov	r3, r0
 8021030:	2b00      	cmp	r3, #0
 8021032:	d125      	bne.n	8021080 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8021034:	68bb      	ldr	r3, [r7, #8]
 8021036:	685b      	ldr	r3, [r3, #4]
 8021038:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 802103a:	693b      	ldr	r3, [r7, #16]
 802103c:	8afa      	ldrh	r2, [r7, #22]
 802103e:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8021040:	693b      	ldr	r3, [r7, #16]
 8021042:	2206      	movs	r2, #6
 8021044:	6839      	ldr	r1, [r7, #0]
 8021046:	4618      	mov	r0, r3
 8021048:	f001 f919 	bl	802227e <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 802104c:	693b      	ldr	r3, [r7, #16]
 802104e:	3306      	adds	r3, #6
 8021050:	2206      	movs	r2, #6
 8021052:	6879      	ldr	r1, [r7, #4]
 8021054:	4618      	mov	r0, r3
 8021056:	f001 f912 	bl	802227e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 802105a:	68fb      	ldr	r3, [r7, #12]
 802105c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8021060:	2b06      	cmp	r3, #6
 8021062:	d006      	beq.n	8021072 <ethernet_output+0x66>
 8021064:	4b0d      	ldr	r3, [pc, #52]	@ (802109c <ethernet_output+0x90>)
 8021066:	f240 122b 	movw	r2, #299	@ 0x12b
 802106a:	490d      	ldr	r1, [pc, #52]	@ (80210a0 <ethernet_output+0x94>)
 802106c:	480d      	ldr	r0, [pc, #52]	@ (80210a4 <ethernet_output+0x98>)
 802106e:	f000 fe0b 	bl	8021c88 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8021072:	68fb      	ldr	r3, [r7, #12]
 8021074:	699b      	ldr	r3, [r3, #24]
 8021076:	68b9      	ldr	r1, [r7, #8]
 8021078:	68f8      	ldr	r0, [r7, #12]
 802107a:	4798      	blx	r3
 802107c:	4603      	mov	r3, r0
 802107e:	e008      	b.n	8021092 <ethernet_output+0x86>
      goto pbuf_header_failed;
 8021080:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
 8021082:	4b09      	ldr	r3, [pc, #36]	@ (80210a8 <ethernet_output+0x9c>)
 8021084:	895b      	ldrh	r3, [r3, #10]
 8021086:	3301      	adds	r3, #1
 8021088:	b29a      	uxth	r2, r3
 802108a:	4b07      	ldr	r3, [pc, #28]	@ (80210a8 <ethernet_output+0x9c>)
 802108c:	815a      	strh	r2, [r3, #10]
  return ERR_BUF;
 802108e:	f06f 0301 	mvn.w	r3, #1
}
 8021092:	4618      	mov	r0, r3
 8021094:	3718      	adds	r7, #24
 8021096:	46bd      	mov	sp, r7
 8021098:	bd80      	pop	{r7, pc}
 802109a:	bf00      	nop
 802109c:	0802790c 	.word	0x0802790c
 80210a0:	08027944 	.word	0x08027944
 80210a4:	08027978 	.word	0x08027978
 80210a8:	2000be88 	.word	0x2000be88

080210ac <atoi>:
 80210ac:	220a      	movs	r2, #10
 80210ae:	2100      	movs	r1, #0
 80210b0:	f000 b8ba 	b.w	8021228 <strtol>

080210b4 <rand>:
 80210b4:	4b16      	ldr	r3, [pc, #88]	@ (8021110 <rand+0x5c>)
 80210b6:	b510      	push	{r4, lr}
 80210b8:	681c      	ldr	r4, [r3, #0]
 80210ba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80210bc:	b9b3      	cbnz	r3, 80210ec <rand+0x38>
 80210be:	2018      	movs	r0, #24
 80210c0:	f001 ffae 	bl	8023020 <malloc>
 80210c4:	4602      	mov	r2, r0
 80210c6:	6320      	str	r0, [r4, #48]	@ 0x30
 80210c8:	b920      	cbnz	r0, 80210d4 <rand+0x20>
 80210ca:	2152      	movs	r1, #82	@ 0x52
 80210cc:	4b11      	ldr	r3, [pc, #68]	@ (8021114 <rand+0x60>)
 80210ce:	4812      	ldr	r0, [pc, #72]	@ (8021118 <rand+0x64>)
 80210d0:	f001 f8e4 	bl	802229c <__assert_func>
 80210d4:	4911      	ldr	r1, [pc, #68]	@ (802111c <rand+0x68>)
 80210d6:	4b12      	ldr	r3, [pc, #72]	@ (8021120 <rand+0x6c>)
 80210d8:	e9c0 1300 	strd	r1, r3, [r0]
 80210dc:	4b11      	ldr	r3, [pc, #68]	@ (8021124 <rand+0x70>)
 80210de:	2100      	movs	r1, #0
 80210e0:	6083      	str	r3, [r0, #8]
 80210e2:	230b      	movs	r3, #11
 80210e4:	8183      	strh	r3, [r0, #12]
 80210e6:	2001      	movs	r0, #1
 80210e8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80210ec:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80210ee:	480e      	ldr	r0, [pc, #56]	@ (8021128 <rand+0x74>)
 80210f0:	690b      	ldr	r3, [r1, #16]
 80210f2:	694c      	ldr	r4, [r1, #20]
 80210f4:	4358      	muls	r0, r3
 80210f6:	4a0d      	ldr	r2, [pc, #52]	@ (802112c <rand+0x78>)
 80210f8:	fb02 0004 	mla	r0, r2, r4, r0
 80210fc:	fba3 3202 	umull	r3, r2, r3, r2
 8021100:	3301      	adds	r3, #1
 8021102:	eb40 0002 	adc.w	r0, r0, r2
 8021106:	e9c1 3004 	strd	r3, r0, [r1, #16]
 802110a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 802110e:	bd10      	pop	{r4, pc}
 8021110:	20000138 	.word	0x20000138
 8021114:	08030d0a 	.word	0x08030d0a
 8021118:	08030d21 	.word	0x08030d21
 802111c:	abcd330e 	.word	0xabcd330e
 8021120:	e66d1234 	.word	0xe66d1234
 8021124:	0005deec 	.word	0x0005deec
 8021128:	5851f42d 	.word	0x5851f42d
 802112c:	4c957f2d 	.word	0x4c957f2d

08021130 <_strtol_l.isra.0>:
 8021130:	2b24      	cmp	r3, #36	@ 0x24
 8021132:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021136:	4686      	mov	lr, r0
 8021138:	4690      	mov	r8, r2
 802113a:	d801      	bhi.n	8021140 <_strtol_l.isra.0+0x10>
 802113c:	2b01      	cmp	r3, #1
 802113e:	d106      	bne.n	802114e <_strtol_l.isra.0+0x1e>
 8021140:	f001 f862 	bl	8022208 <__errno>
 8021144:	2316      	movs	r3, #22
 8021146:	6003      	str	r3, [r0, #0]
 8021148:	2000      	movs	r0, #0
 802114a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802114e:	460d      	mov	r5, r1
 8021150:	4833      	ldr	r0, [pc, #204]	@ (8021220 <_strtol_l.isra.0+0xf0>)
 8021152:	462a      	mov	r2, r5
 8021154:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021158:	5d06      	ldrb	r6, [r0, r4]
 802115a:	f016 0608 	ands.w	r6, r6, #8
 802115e:	d1f8      	bne.n	8021152 <_strtol_l.isra.0+0x22>
 8021160:	2c2d      	cmp	r4, #45	@ 0x2d
 8021162:	d110      	bne.n	8021186 <_strtol_l.isra.0+0x56>
 8021164:	2601      	movs	r6, #1
 8021166:	782c      	ldrb	r4, [r5, #0]
 8021168:	1c95      	adds	r5, r2, #2
 802116a:	f033 0210 	bics.w	r2, r3, #16
 802116e:	d115      	bne.n	802119c <_strtol_l.isra.0+0x6c>
 8021170:	2c30      	cmp	r4, #48	@ 0x30
 8021172:	d10d      	bne.n	8021190 <_strtol_l.isra.0+0x60>
 8021174:	782a      	ldrb	r2, [r5, #0]
 8021176:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 802117a:	2a58      	cmp	r2, #88	@ 0x58
 802117c:	d108      	bne.n	8021190 <_strtol_l.isra.0+0x60>
 802117e:	786c      	ldrb	r4, [r5, #1]
 8021180:	3502      	adds	r5, #2
 8021182:	2310      	movs	r3, #16
 8021184:	e00a      	b.n	802119c <_strtol_l.isra.0+0x6c>
 8021186:	2c2b      	cmp	r4, #43	@ 0x2b
 8021188:	bf04      	itt	eq
 802118a:	782c      	ldrbeq	r4, [r5, #0]
 802118c:	1c95      	addeq	r5, r2, #2
 802118e:	e7ec      	b.n	802116a <_strtol_l.isra.0+0x3a>
 8021190:	2b00      	cmp	r3, #0
 8021192:	d1f6      	bne.n	8021182 <_strtol_l.isra.0+0x52>
 8021194:	2c30      	cmp	r4, #48	@ 0x30
 8021196:	bf14      	ite	ne
 8021198:	230a      	movne	r3, #10
 802119a:	2308      	moveq	r3, #8
 802119c:	2200      	movs	r2, #0
 802119e:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80211a2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80211a6:	fbbc f9f3 	udiv	r9, ip, r3
 80211aa:	4610      	mov	r0, r2
 80211ac:	fb03 ca19 	mls	sl, r3, r9, ip
 80211b0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80211b4:	2f09      	cmp	r7, #9
 80211b6:	d80f      	bhi.n	80211d8 <_strtol_l.isra.0+0xa8>
 80211b8:	463c      	mov	r4, r7
 80211ba:	42a3      	cmp	r3, r4
 80211bc:	dd1b      	ble.n	80211f6 <_strtol_l.isra.0+0xc6>
 80211be:	1c57      	adds	r7, r2, #1
 80211c0:	d007      	beq.n	80211d2 <_strtol_l.isra.0+0xa2>
 80211c2:	4581      	cmp	r9, r0
 80211c4:	d314      	bcc.n	80211f0 <_strtol_l.isra.0+0xc0>
 80211c6:	d101      	bne.n	80211cc <_strtol_l.isra.0+0x9c>
 80211c8:	45a2      	cmp	sl, r4
 80211ca:	db11      	blt.n	80211f0 <_strtol_l.isra.0+0xc0>
 80211cc:	2201      	movs	r2, #1
 80211ce:	fb00 4003 	mla	r0, r0, r3, r4
 80211d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80211d6:	e7eb      	b.n	80211b0 <_strtol_l.isra.0+0x80>
 80211d8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80211dc:	2f19      	cmp	r7, #25
 80211de:	d801      	bhi.n	80211e4 <_strtol_l.isra.0+0xb4>
 80211e0:	3c37      	subs	r4, #55	@ 0x37
 80211e2:	e7ea      	b.n	80211ba <_strtol_l.isra.0+0x8a>
 80211e4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80211e8:	2f19      	cmp	r7, #25
 80211ea:	d804      	bhi.n	80211f6 <_strtol_l.isra.0+0xc6>
 80211ec:	3c57      	subs	r4, #87	@ 0x57
 80211ee:	e7e4      	b.n	80211ba <_strtol_l.isra.0+0x8a>
 80211f0:	f04f 32ff 	mov.w	r2, #4294967295
 80211f4:	e7ed      	b.n	80211d2 <_strtol_l.isra.0+0xa2>
 80211f6:	1c53      	adds	r3, r2, #1
 80211f8:	d108      	bne.n	802120c <_strtol_l.isra.0+0xdc>
 80211fa:	2322      	movs	r3, #34	@ 0x22
 80211fc:	4660      	mov	r0, ip
 80211fe:	f8ce 3000 	str.w	r3, [lr]
 8021202:	f1b8 0f00 	cmp.w	r8, #0
 8021206:	d0a0      	beq.n	802114a <_strtol_l.isra.0+0x1a>
 8021208:	1e69      	subs	r1, r5, #1
 802120a:	e006      	b.n	802121a <_strtol_l.isra.0+0xea>
 802120c:	b106      	cbz	r6, 8021210 <_strtol_l.isra.0+0xe0>
 802120e:	4240      	negs	r0, r0
 8021210:	f1b8 0f00 	cmp.w	r8, #0
 8021214:	d099      	beq.n	802114a <_strtol_l.isra.0+0x1a>
 8021216:	2a00      	cmp	r2, #0
 8021218:	d1f6      	bne.n	8021208 <_strtol_l.isra.0+0xd8>
 802121a:	f8c8 1000 	str.w	r1, [r8]
 802121e:	e794      	b.n	802114a <_strtol_l.isra.0+0x1a>
 8021220:	08030eed 	.word	0x08030eed

08021224 <_strtol_r>:
 8021224:	f7ff bf84 	b.w	8021130 <_strtol_l.isra.0>

08021228 <strtol>:
 8021228:	4613      	mov	r3, r2
 802122a:	460a      	mov	r2, r1
 802122c:	4601      	mov	r1, r0
 802122e:	4802      	ldr	r0, [pc, #8]	@ (8021238 <strtol+0x10>)
 8021230:	6800      	ldr	r0, [r0, #0]
 8021232:	f7ff bf7d 	b.w	8021130 <_strtol_l.isra.0>
 8021236:	bf00      	nop
 8021238:	20000138 	.word	0x20000138

0802123c <tolower>:
 802123c:	4b03      	ldr	r3, [pc, #12]	@ (802124c <tolower+0x10>)
 802123e:	5c1b      	ldrb	r3, [r3, r0]
 8021240:	f003 0303 	and.w	r3, r3, #3
 8021244:	2b01      	cmp	r3, #1
 8021246:	bf08      	it	eq
 8021248:	3020      	addeq	r0, #32
 802124a:	4770      	bx	lr
 802124c:	08030eed 	.word	0x08030eed

08021250 <__cvt>:
 8021250:	2b00      	cmp	r3, #0
 8021252:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021256:	461d      	mov	r5, r3
 8021258:	bfbb      	ittet	lt
 802125a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 802125e:	461d      	movlt	r5, r3
 8021260:	2300      	movge	r3, #0
 8021262:	232d      	movlt	r3, #45	@ 0x2d
 8021264:	b088      	sub	sp, #32
 8021266:	4614      	mov	r4, r2
 8021268:	bfb8      	it	lt
 802126a:	4614      	movlt	r4, r2
 802126c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802126e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8021270:	7013      	strb	r3, [r2, #0]
 8021272:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8021274:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8021278:	f023 0820 	bic.w	r8, r3, #32
 802127c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8021280:	d005      	beq.n	802128e <__cvt+0x3e>
 8021282:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8021286:	d100      	bne.n	802128a <__cvt+0x3a>
 8021288:	3601      	adds	r6, #1
 802128a:	2302      	movs	r3, #2
 802128c:	e000      	b.n	8021290 <__cvt+0x40>
 802128e:	2303      	movs	r3, #3
 8021290:	aa07      	add	r2, sp, #28
 8021292:	9204      	str	r2, [sp, #16]
 8021294:	aa06      	add	r2, sp, #24
 8021296:	e9cd a202 	strd	sl, r2, [sp, #8]
 802129a:	e9cd 3600 	strd	r3, r6, [sp]
 802129e:	4622      	mov	r2, r4
 80212a0:	462b      	mov	r3, r5
 80212a2:	f001 f8a1 	bl	80223e8 <_dtoa_r>
 80212a6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80212aa:	4607      	mov	r7, r0
 80212ac:	d119      	bne.n	80212e2 <__cvt+0x92>
 80212ae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80212b0:	07db      	lsls	r3, r3, #31
 80212b2:	d50e      	bpl.n	80212d2 <__cvt+0x82>
 80212b4:	eb00 0906 	add.w	r9, r0, r6
 80212b8:	2200      	movs	r2, #0
 80212ba:	2300      	movs	r3, #0
 80212bc:	4620      	mov	r0, r4
 80212be:	4629      	mov	r1, r5
 80212c0:	f7df fbb8 	bl	8000a34 <__aeabi_dcmpeq>
 80212c4:	b108      	cbz	r0, 80212ca <__cvt+0x7a>
 80212c6:	f8cd 901c 	str.w	r9, [sp, #28]
 80212ca:	2230      	movs	r2, #48	@ 0x30
 80212cc:	9b07      	ldr	r3, [sp, #28]
 80212ce:	454b      	cmp	r3, r9
 80212d0:	d31e      	bcc.n	8021310 <__cvt+0xc0>
 80212d2:	4638      	mov	r0, r7
 80212d4:	9b07      	ldr	r3, [sp, #28]
 80212d6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80212d8:	1bdb      	subs	r3, r3, r7
 80212da:	6013      	str	r3, [r2, #0]
 80212dc:	b008      	add	sp, #32
 80212de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80212e2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80212e6:	eb00 0906 	add.w	r9, r0, r6
 80212ea:	d1e5      	bne.n	80212b8 <__cvt+0x68>
 80212ec:	7803      	ldrb	r3, [r0, #0]
 80212ee:	2b30      	cmp	r3, #48	@ 0x30
 80212f0:	d10a      	bne.n	8021308 <__cvt+0xb8>
 80212f2:	2200      	movs	r2, #0
 80212f4:	2300      	movs	r3, #0
 80212f6:	4620      	mov	r0, r4
 80212f8:	4629      	mov	r1, r5
 80212fa:	f7df fb9b 	bl	8000a34 <__aeabi_dcmpeq>
 80212fe:	b918      	cbnz	r0, 8021308 <__cvt+0xb8>
 8021300:	f1c6 0601 	rsb	r6, r6, #1
 8021304:	f8ca 6000 	str.w	r6, [sl]
 8021308:	f8da 3000 	ldr.w	r3, [sl]
 802130c:	4499      	add	r9, r3
 802130e:	e7d3      	b.n	80212b8 <__cvt+0x68>
 8021310:	1c59      	adds	r1, r3, #1
 8021312:	9107      	str	r1, [sp, #28]
 8021314:	701a      	strb	r2, [r3, #0]
 8021316:	e7d9      	b.n	80212cc <__cvt+0x7c>

08021318 <__exponent>:
 8021318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802131a:	2900      	cmp	r1, #0
 802131c:	bfb6      	itet	lt
 802131e:	232d      	movlt	r3, #45	@ 0x2d
 8021320:	232b      	movge	r3, #43	@ 0x2b
 8021322:	4249      	neglt	r1, r1
 8021324:	2909      	cmp	r1, #9
 8021326:	7002      	strb	r2, [r0, #0]
 8021328:	7043      	strb	r3, [r0, #1]
 802132a:	dd29      	ble.n	8021380 <__exponent+0x68>
 802132c:	f10d 0307 	add.w	r3, sp, #7
 8021330:	461d      	mov	r5, r3
 8021332:	270a      	movs	r7, #10
 8021334:	fbb1 f6f7 	udiv	r6, r1, r7
 8021338:	461a      	mov	r2, r3
 802133a:	fb07 1416 	mls	r4, r7, r6, r1
 802133e:	3430      	adds	r4, #48	@ 0x30
 8021340:	f802 4c01 	strb.w	r4, [r2, #-1]
 8021344:	460c      	mov	r4, r1
 8021346:	2c63      	cmp	r4, #99	@ 0x63
 8021348:	4631      	mov	r1, r6
 802134a:	f103 33ff 	add.w	r3, r3, #4294967295
 802134e:	dcf1      	bgt.n	8021334 <__exponent+0x1c>
 8021350:	3130      	adds	r1, #48	@ 0x30
 8021352:	1e94      	subs	r4, r2, #2
 8021354:	f803 1c01 	strb.w	r1, [r3, #-1]
 8021358:	4623      	mov	r3, r4
 802135a:	1c41      	adds	r1, r0, #1
 802135c:	42ab      	cmp	r3, r5
 802135e:	d30a      	bcc.n	8021376 <__exponent+0x5e>
 8021360:	f10d 0309 	add.w	r3, sp, #9
 8021364:	1a9b      	subs	r3, r3, r2
 8021366:	42ac      	cmp	r4, r5
 8021368:	bf88      	it	hi
 802136a:	2300      	movhi	r3, #0
 802136c:	3302      	adds	r3, #2
 802136e:	4403      	add	r3, r0
 8021370:	1a18      	subs	r0, r3, r0
 8021372:	b003      	add	sp, #12
 8021374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021376:	f813 6b01 	ldrb.w	r6, [r3], #1
 802137a:	f801 6f01 	strb.w	r6, [r1, #1]!
 802137e:	e7ed      	b.n	802135c <__exponent+0x44>
 8021380:	2330      	movs	r3, #48	@ 0x30
 8021382:	3130      	adds	r1, #48	@ 0x30
 8021384:	7083      	strb	r3, [r0, #2]
 8021386:	70c1      	strb	r1, [r0, #3]
 8021388:	1d03      	adds	r3, r0, #4
 802138a:	e7f1      	b.n	8021370 <__exponent+0x58>

0802138c <_printf_float>:
 802138c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021390:	b091      	sub	sp, #68	@ 0x44
 8021392:	460c      	mov	r4, r1
 8021394:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8021398:	4616      	mov	r6, r2
 802139a:	461f      	mov	r7, r3
 802139c:	4605      	mov	r5, r0
 802139e:	f000 fee9 	bl	8022174 <_localeconv_r>
 80213a2:	6803      	ldr	r3, [r0, #0]
 80213a4:	4618      	mov	r0, r3
 80213a6:	9308      	str	r3, [sp, #32]
 80213a8:	f7de ff18 	bl	80001dc <strlen>
 80213ac:	2300      	movs	r3, #0
 80213ae:	930e      	str	r3, [sp, #56]	@ 0x38
 80213b0:	f8d8 3000 	ldr.w	r3, [r8]
 80213b4:	9009      	str	r0, [sp, #36]	@ 0x24
 80213b6:	3307      	adds	r3, #7
 80213b8:	f023 0307 	bic.w	r3, r3, #7
 80213bc:	f103 0208 	add.w	r2, r3, #8
 80213c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80213c4:	f8d4 b000 	ldr.w	fp, [r4]
 80213c8:	f8c8 2000 	str.w	r2, [r8]
 80213cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80213d0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80213d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80213d6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80213da:	f04f 32ff 	mov.w	r2, #4294967295
 80213de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80213e2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80213e6:	4b9c      	ldr	r3, [pc, #624]	@ (8021658 <_printf_float+0x2cc>)
 80213e8:	f7df fb56 	bl	8000a98 <__aeabi_dcmpun>
 80213ec:	bb70      	cbnz	r0, 802144c <_printf_float+0xc0>
 80213ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80213f2:	f04f 32ff 	mov.w	r2, #4294967295
 80213f6:	4b98      	ldr	r3, [pc, #608]	@ (8021658 <_printf_float+0x2cc>)
 80213f8:	f7df fb30 	bl	8000a5c <__aeabi_dcmple>
 80213fc:	bb30      	cbnz	r0, 802144c <_printf_float+0xc0>
 80213fe:	2200      	movs	r2, #0
 8021400:	2300      	movs	r3, #0
 8021402:	4640      	mov	r0, r8
 8021404:	4649      	mov	r1, r9
 8021406:	f7df fb1f 	bl	8000a48 <__aeabi_dcmplt>
 802140a:	b110      	cbz	r0, 8021412 <_printf_float+0x86>
 802140c:	232d      	movs	r3, #45	@ 0x2d
 802140e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8021412:	4a92      	ldr	r2, [pc, #584]	@ (802165c <_printf_float+0x2d0>)
 8021414:	4b92      	ldr	r3, [pc, #584]	@ (8021660 <_printf_float+0x2d4>)
 8021416:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 802141a:	bf8c      	ite	hi
 802141c:	4690      	movhi	r8, r2
 802141e:	4698      	movls	r8, r3
 8021420:	2303      	movs	r3, #3
 8021422:	f04f 0900 	mov.w	r9, #0
 8021426:	6123      	str	r3, [r4, #16]
 8021428:	f02b 0304 	bic.w	r3, fp, #4
 802142c:	6023      	str	r3, [r4, #0]
 802142e:	4633      	mov	r3, r6
 8021430:	4621      	mov	r1, r4
 8021432:	4628      	mov	r0, r5
 8021434:	9700      	str	r7, [sp, #0]
 8021436:	aa0f      	add	r2, sp, #60	@ 0x3c
 8021438:	f000 f9d4 	bl	80217e4 <_printf_common>
 802143c:	3001      	adds	r0, #1
 802143e:	f040 8090 	bne.w	8021562 <_printf_float+0x1d6>
 8021442:	f04f 30ff 	mov.w	r0, #4294967295
 8021446:	b011      	add	sp, #68	@ 0x44
 8021448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802144c:	4642      	mov	r2, r8
 802144e:	464b      	mov	r3, r9
 8021450:	4640      	mov	r0, r8
 8021452:	4649      	mov	r1, r9
 8021454:	f7df fb20 	bl	8000a98 <__aeabi_dcmpun>
 8021458:	b148      	cbz	r0, 802146e <_printf_float+0xe2>
 802145a:	464b      	mov	r3, r9
 802145c:	2b00      	cmp	r3, #0
 802145e:	bfb8      	it	lt
 8021460:	232d      	movlt	r3, #45	@ 0x2d
 8021462:	4a80      	ldr	r2, [pc, #512]	@ (8021664 <_printf_float+0x2d8>)
 8021464:	bfb8      	it	lt
 8021466:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 802146a:	4b7f      	ldr	r3, [pc, #508]	@ (8021668 <_printf_float+0x2dc>)
 802146c:	e7d3      	b.n	8021416 <_printf_float+0x8a>
 802146e:	6863      	ldr	r3, [r4, #4]
 8021470:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8021474:	1c5a      	adds	r2, r3, #1
 8021476:	d13f      	bne.n	80214f8 <_printf_float+0x16c>
 8021478:	2306      	movs	r3, #6
 802147a:	6063      	str	r3, [r4, #4]
 802147c:	2200      	movs	r2, #0
 802147e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8021482:	6023      	str	r3, [r4, #0]
 8021484:	9206      	str	r2, [sp, #24]
 8021486:	aa0e      	add	r2, sp, #56	@ 0x38
 8021488:	e9cd a204 	strd	sl, r2, [sp, #16]
 802148c:	aa0d      	add	r2, sp, #52	@ 0x34
 802148e:	9203      	str	r2, [sp, #12]
 8021490:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8021494:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8021498:	6863      	ldr	r3, [r4, #4]
 802149a:	4642      	mov	r2, r8
 802149c:	9300      	str	r3, [sp, #0]
 802149e:	4628      	mov	r0, r5
 80214a0:	464b      	mov	r3, r9
 80214a2:	910a      	str	r1, [sp, #40]	@ 0x28
 80214a4:	f7ff fed4 	bl	8021250 <__cvt>
 80214a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80214aa:	4680      	mov	r8, r0
 80214ac:	2947      	cmp	r1, #71	@ 0x47
 80214ae:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80214b0:	d128      	bne.n	8021504 <_printf_float+0x178>
 80214b2:	1cc8      	adds	r0, r1, #3
 80214b4:	db02      	blt.n	80214bc <_printf_float+0x130>
 80214b6:	6863      	ldr	r3, [r4, #4]
 80214b8:	4299      	cmp	r1, r3
 80214ba:	dd40      	ble.n	802153e <_printf_float+0x1b2>
 80214bc:	f1aa 0a02 	sub.w	sl, sl, #2
 80214c0:	fa5f fa8a 	uxtb.w	sl, sl
 80214c4:	4652      	mov	r2, sl
 80214c6:	3901      	subs	r1, #1
 80214c8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80214cc:	910d      	str	r1, [sp, #52]	@ 0x34
 80214ce:	f7ff ff23 	bl	8021318 <__exponent>
 80214d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80214d4:	4681      	mov	r9, r0
 80214d6:	1813      	adds	r3, r2, r0
 80214d8:	2a01      	cmp	r2, #1
 80214da:	6123      	str	r3, [r4, #16]
 80214dc:	dc02      	bgt.n	80214e4 <_printf_float+0x158>
 80214de:	6822      	ldr	r2, [r4, #0]
 80214e0:	07d2      	lsls	r2, r2, #31
 80214e2:	d501      	bpl.n	80214e8 <_printf_float+0x15c>
 80214e4:	3301      	adds	r3, #1
 80214e6:	6123      	str	r3, [r4, #16]
 80214e8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80214ec:	2b00      	cmp	r3, #0
 80214ee:	d09e      	beq.n	802142e <_printf_float+0xa2>
 80214f0:	232d      	movs	r3, #45	@ 0x2d
 80214f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80214f6:	e79a      	b.n	802142e <_printf_float+0xa2>
 80214f8:	2947      	cmp	r1, #71	@ 0x47
 80214fa:	d1bf      	bne.n	802147c <_printf_float+0xf0>
 80214fc:	2b00      	cmp	r3, #0
 80214fe:	d1bd      	bne.n	802147c <_printf_float+0xf0>
 8021500:	2301      	movs	r3, #1
 8021502:	e7ba      	b.n	802147a <_printf_float+0xee>
 8021504:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8021508:	d9dc      	bls.n	80214c4 <_printf_float+0x138>
 802150a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 802150e:	d118      	bne.n	8021542 <_printf_float+0x1b6>
 8021510:	2900      	cmp	r1, #0
 8021512:	6863      	ldr	r3, [r4, #4]
 8021514:	dd0b      	ble.n	802152e <_printf_float+0x1a2>
 8021516:	6121      	str	r1, [r4, #16]
 8021518:	b913      	cbnz	r3, 8021520 <_printf_float+0x194>
 802151a:	6822      	ldr	r2, [r4, #0]
 802151c:	07d0      	lsls	r0, r2, #31
 802151e:	d502      	bpl.n	8021526 <_printf_float+0x19a>
 8021520:	3301      	adds	r3, #1
 8021522:	440b      	add	r3, r1
 8021524:	6123      	str	r3, [r4, #16]
 8021526:	f04f 0900 	mov.w	r9, #0
 802152a:	65a1      	str	r1, [r4, #88]	@ 0x58
 802152c:	e7dc      	b.n	80214e8 <_printf_float+0x15c>
 802152e:	b913      	cbnz	r3, 8021536 <_printf_float+0x1aa>
 8021530:	6822      	ldr	r2, [r4, #0]
 8021532:	07d2      	lsls	r2, r2, #31
 8021534:	d501      	bpl.n	802153a <_printf_float+0x1ae>
 8021536:	3302      	adds	r3, #2
 8021538:	e7f4      	b.n	8021524 <_printf_float+0x198>
 802153a:	2301      	movs	r3, #1
 802153c:	e7f2      	b.n	8021524 <_printf_float+0x198>
 802153e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8021542:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021544:	4299      	cmp	r1, r3
 8021546:	db05      	blt.n	8021554 <_printf_float+0x1c8>
 8021548:	6823      	ldr	r3, [r4, #0]
 802154a:	6121      	str	r1, [r4, #16]
 802154c:	07d8      	lsls	r0, r3, #31
 802154e:	d5ea      	bpl.n	8021526 <_printf_float+0x19a>
 8021550:	1c4b      	adds	r3, r1, #1
 8021552:	e7e7      	b.n	8021524 <_printf_float+0x198>
 8021554:	2900      	cmp	r1, #0
 8021556:	bfcc      	ite	gt
 8021558:	2201      	movgt	r2, #1
 802155a:	f1c1 0202 	rsble	r2, r1, #2
 802155e:	4413      	add	r3, r2
 8021560:	e7e0      	b.n	8021524 <_printf_float+0x198>
 8021562:	6823      	ldr	r3, [r4, #0]
 8021564:	055a      	lsls	r2, r3, #21
 8021566:	d407      	bmi.n	8021578 <_printf_float+0x1ec>
 8021568:	6923      	ldr	r3, [r4, #16]
 802156a:	4642      	mov	r2, r8
 802156c:	4631      	mov	r1, r6
 802156e:	4628      	mov	r0, r5
 8021570:	47b8      	blx	r7
 8021572:	3001      	adds	r0, #1
 8021574:	d12b      	bne.n	80215ce <_printf_float+0x242>
 8021576:	e764      	b.n	8021442 <_printf_float+0xb6>
 8021578:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 802157c:	f240 80dc 	bls.w	8021738 <_printf_float+0x3ac>
 8021580:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8021584:	2200      	movs	r2, #0
 8021586:	2300      	movs	r3, #0
 8021588:	f7df fa54 	bl	8000a34 <__aeabi_dcmpeq>
 802158c:	2800      	cmp	r0, #0
 802158e:	d033      	beq.n	80215f8 <_printf_float+0x26c>
 8021590:	2301      	movs	r3, #1
 8021592:	4631      	mov	r1, r6
 8021594:	4628      	mov	r0, r5
 8021596:	4a35      	ldr	r2, [pc, #212]	@ (802166c <_printf_float+0x2e0>)
 8021598:	47b8      	blx	r7
 802159a:	3001      	adds	r0, #1
 802159c:	f43f af51 	beq.w	8021442 <_printf_float+0xb6>
 80215a0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80215a4:	4543      	cmp	r3, r8
 80215a6:	db02      	blt.n	80215ae <_printf_float+0x222>
 80215a8:	6823      	ldr	r3, [r4, #0]
 80215aa:	07d8      	lsls	r0, r3, #31
 80215ac:	d50f      	bpl.n	80215ce <_printf_float+0x242>
 80215ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80215b2:	4631      	mov	r1, r6
 80215b4:	4628      	mov	r0, r5
 80215b6:	47b8      	blx	r7
 80215b8:	3001      	adds	r0, #1
 80215ba:	f43f af42 	beq.w	8021442 <_printf_float+0xb6>
 80215be:	f04f 0900 	mov.w	r9, #0
 80215c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80215c6:	f104 0a1a 	add.w	sl, r4, #26
 80215ca:	45c8      	cmp	r8, r9
 80215cc:	dc09      	bgt.n	80215e2 <_printf_float+0x256>
 80215ce:	6823      	ldr	r3, [r4, #0]
 80215d0:	079b      	lsls	r3, r3, #30
 80215d2:	f100 8102 	bmi.w	80217da <_printf_float+0x44e>
 80215d6:	68e0      	ldr	r0, [r4, #12]
 80215d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80215da:	4298      	cmp	r0, r3
 80215dc:	bfb8      	it	lt
 80215de:	4618      	movlt	r0, r3
 80215e0:	e731      	b.n	8021446 <_printf_float+0xba>
 80215e2:	2301      	movs	r3, #1
 80215e4:	4652      	mov	r2, sl
 80215e6:	4631      	mov	r1, r6
 80215e8:	4628      	mov	r0, r5
 80215ea:	47b8      	blx	r7
 80215ec:	3001      	adds	r0, #1
 80215ee:	f43f af28 	beq.w	8021442 <_printf_float+0xb6>
 80215f2:	f109 0901 	add.w	r9, r9, #1
 80215f6:	e7e8      	b.n	80215ca <_printf_float+0x23e>
 80215f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80215fa:	2b00      	cmp	r3, #0
 80215fc:	dc38      	bgt.n	8021670 <_printf_float+0x2e4>
 80215fe:	2301      	movs	r3, #1
 8021600:	4631      	mov	r1, r6
 8021602:	4628      	mov	r0, r5
 8021604:	4a19      	ldr	r2, [pc, #100]	@ (802166c <_printf_float+0x2e0>)
 8021606:	47b8      	blx	r7
 8021608:	3001      	adds	r0, #1
 802160a:	f43f af1a 	beq.w	8021442 <_printf_float+0xb6>
 802160e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8021612:	ea59 0303 	orrs.w	r3, r9, r3
 8021616:	d102      	bne.n	802161e <_printf_float+0x292>
 8021618:	6823      	ldr	r3, [r4, #0]
 802161a:	07d9      	lsls	r1, r3, #31
 802161c:	d5d7      	bpl.n	80215ce <_printf_float+0x242>
 802161e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8021622:	4631      	mov	r1, r6
 8021624:	4628      	mov	r0, r5
 8021626:	47b8      	blx	r7
 8021628:	3001      	adds	r0, #1
 802162a:	f43f af0a 	beq.w	8021442 <_printf_float+0xb6>
 802162e:	f04f 0a00 	mov.w	sl, #0
 8021632:	f104 0b1a 	add.w	fp, r4, #26
 8021636:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021638:	425b      	negs	r3, r3
 802163a:	4553      	cmp	r3, sl
 802163c:	dc01      	bgt.n	8021642 <_printf_float+0x2b6>
 802163e:	464b      	mov	r3, r9
 8021640:	e793      	b.n	802156a <_printf_float+0x1de>
 8021642:	2301      	movs	r3, #1
 8021644:	465a      	mov	r2, fp
 8021646:	4631      	mov	r1, r6
 8021648:	4628      	mov	r0, r5
 802164a:	47b8      	blx	r7
 802164c:	3001      	adds	r0, #1
 802164e:	f43f aef8 	beq.w	8021442 <_printf_float+0xb6>
 8021652:	f10a 0a01 	add.w	sl, sl, #1
 8021656:	e7ee      	b.n	8021636 <_printf_float+0x2aa>
 8021658:	7fefffff 	.word	0x7fefffff
 802165c:	08030d7d 	.word	0x08030d7d
 8021660:	08030d79 	.word	0x08030d79
 8021664:	08030d85 	.word	0x08030d85
 8021668:	08030d81 	.word	0x08030d81
 802166c:	08030edd 	.word	0x08030edd
 8021670:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8021672:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8021676:	4553      	cmp	r3, sl
 8021678:	bfa8      	it	ge
 802167a:	4653      	movge	r3, sl
 802167c:	2b00      	cmp	r3, #0
 802167e:	4699      	mov	r9, r3
 8021680:	dc36      	bgt.n	80216f0 <_printf_float+0x364>
 8021682:	f04f 0b00 	mov.w	fp, #0
 8021686:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802168a:	f104 021a 	add.w	r2, r4, #26
 802168e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8021690:	930a      	str	r3, [sp, #40]	@ 0x28
 8021692:	eba3 0309 	sub.w	r3, r3, r9
 8021696:	455b      	cmp	r3, fp
 8021698:	dc31      	bgt.n	80216fe <_printf_float+0x372>
 802169a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802169c:	459a      	cmp	sl, r3
 802169e:	dc3a      	bgt.n	8021716 <_printf_float+0x38a>
 80216a0:	6823      	ldr	r3, [r4, #0]
 80216a2:	07da      	lsls	r2, r3, #31
 80216a4:	d437      	bmi.n	8021716 <_printf_float+0x38a>
 80216a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80216a8:	ebaa 0903 	sub.w	r9, sl, r3
 80216ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80216ae:	ebaa 0303 	sub.w	r3, sl, r3
 80216b2:	4599      	cmp	r9, r3
 80216b4:	bfa8      	it	ge
 80216b6:	4699      	movge	r9, r3
 80216b8:	f1b9 0f00 	cmp.w	r9, #0
 80216bc:	dc33      	bgt.n	8021726 <_printf_float+0x39a>
 80216be:	f04f 0800 	mov.w	r8, #0
 80216c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80216c6:	f104 0b1a 	add.w	fp, r4, #26
 80216ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80216cc:	ebaa 0303 	sub.w	r3, sl, r3
 80216d0:	eba3 0309 	sub.w	r3, r3, r9
 80216d4:	4543      	cmp	r3, r8
 80216d6:	f77f af7a 	ble.w	80215ce <_printf_float+0x242>
 80216da:	2301      	movs	r3, #1
 80216dc:	465a      	mov	r2, fp
 80216de:	4631      	mov	r1, r6
 80216e0:	4628      	mov	r0, r5
 80216e2:	47b8      	blx	r7
 80216e4:	3001      	adds	r0, #1
 80216e6:	f43f aeac 	beq.w	8021442 <_printf_float+0xb6>
 80216ea:	f108 0801 	add.w	r8, r8, #1
 80216ee:	e7ec      	b.n	80216ca <_printf_float+0x33e>
 80216f0:	4642      	mov	r2, r8
 80216f2:	4631      	mov	r1, r6
 80216f4:	4628      	mov	r0, r5
 80216f6:	47b8      	blx	r7
 80216f8:	3001      	adds	r0, #1
 80216fa:	d1c2      	bne.n	8021682 <_printf_float+0x2f6>
 80216fc:	e6a1      	b.n	8021442 <_printf_float+0xb6>
 80216fe:	2301      	movs	r3, #1
 8021700:	4631      	mov	r1, r6
 8021702:	4628      	mov	r0, r5
 8021704:	920a      	str	r2, [sp, #40]	@ 0x28
 8021706:	47b8      	blx	r7
 8021708:	3001      	adds	r0, #1
 802170a:	f43f ae9a 	beq.w	8021442 <_printf_float+0xb6>
 802170e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021710:	f10b 0b01 	add.w	fp, fp, #1
 8021714:	e7bb      	b.n	802168e <_printf_float+0x302>
 8021716:	4631      	mov	r1, r6
 8021718:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 802171c:	4628      	mov	r0, r5
 802171e:	47b8      	blx	r7
 8021720:	3001      	adds	r0, #1
 8021722:	d1c0      	bne.n	80216a6 <_printf_float+0x31a>
 8021724:	e68d      	b.n	8021442 <_printf_float+0xb6>
 8021726:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021728:	464b      	mov	r3, r9
 802172a:	4631      	mov	r1, r6
 802172c:	4628      	mov	r0, r5
 802172e:	4442      	add	r2, r8
 8021730:	47b8      	blx	r7
 8021732:	3001      	adds	r0, #1
 8021734:	d1c3      	bne.n	80216be <_printf_float+0x332>
 8021736:	e684      	b.n	8021442 <_printf_float+0xb6>
 8021738:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 802173c:	f1ba 0f01 	cmp.w	sl, #1
 8021740:	dc01      	bgt.n	8021746 <_printf_float+0x3ba>
 8021742:	07db      	lsls	r3, r3, #31
 8021744:	d536      	bpl.n	80217b4 <_printf_float+0x428>
 8021746:	2301      	movs	r3, #1
 8021748:	4642      	mov	r2, r8
 802174a:	4631      	mov	r1, r6
 802174c:	4628      	mov	r0, r5
 802174e:	47b8      	blx	r7
 8021750:	3001      	adds	r0, #1
 8021752:	f43f ae76 	beq.w	8021442 <_printf_float+0xb6>
 8021756:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 802175a:	4631      	mov	r1, r6
 802175c:	4628      	mov	r0, r5
 802175e:	47b8      	blx	r7
 8021760:	3001      	adds	r0, #1
 8021762:	f43f ae6e 	beq.w	8021442 <_printf_float+0xb6>
 8021766:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 802176a:	2200      	movs	r2, #0
 802176c:	2300      	movs	r3, #0
 802176e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021772:	f7df f95f 	bl	8000a34 <__aeabi_dcmpeq>
 8021776:	b9c0      	cbnz	r0, 80217aa <_printf_float+0x41e>
 8021778:	4653      	mov	r3, sl
 802177a:	f108 0201 	add.w	r2, r8, #1
 802177e:	4631      	mov	r1, r6
 8021780:	4628      	mov	r0, r5
 8021782:	47b8      	blx	r7
 8021784:	3001      	adds	r0, #1
 8021786:	d10c      	bne.n	80217a2 <_printf_float+0x416>
 8021788:	e65b      	b.n	8021442 <_printf_float+0xb6>
 802178a:	2301      	movs	r3, #1
 802178c:	465a      	mov	r2, fp
 802178e:	4631      	mov	r1, r6
 8021790:	4628      	mov	r0, r5
 8021792:	47b8      	blx	r7
 8021794:	3001      	adds	r0, #1
 8021796:	f43f ae54 	beq.w	8021442 <_printf_float+0xb6>
 802179a:	f108 0801 	add.w	r8, r8, #1
 802179e:	45d0      	cmp	r8, sl
 80217a0:	dbf3      	blt.n	802178a <_printf_float+0x3fe>
 80217a2:	464b      	mov	r3, r9
 80217a4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80217a8:	e6e0      	b.n	802156c <_printf_float+0x1e0>
 80217aa:	f04f 0800 	mov.w	r8, #0
 80217ae:	f104 0b1a 	add.w	fp, r4, #26
 80217b2:	e7f4      	b.n	802179e <_printf_float+0x412>
 80217b4:	2301      	movs	r3, #1
 80217b6:	4642      	mov	r2, r8
 80217b8:	e7e1      	b.n	802177e <_printf_float+0x3f2>
 80217ba:	2301      	movs	r3, #1
 80217bc:	464a      	mov	r2, r9
 80217be:	4631      	mov	r1, r6
 80217c0:	4628      	mov	r0, r5
 80217c2:	47b8      	blx	r7
 80217c4:	3001      	adds	r0, #1
 80217c6:	f43f ae3c 	beq.w	8021442 <_printf_float+0xb6>
 80217ca:	f108 0801 	add.w	r8, r8, #1
 80217ce:	68e3      	ldr	r3, [r4, #12]
 80217d0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80217d2:	1a5b      	subs	r3, r3, r1
 80217d4:	4543      	cmp	r3, r8
 80217d6:	dcf0      	bgt.n	80217ba <_printf_float+0x42e>
 80217d8:	e6fd      	b.n	80215d6 <_printf_float+0x24a>
 80217da:	f04f 0800 	mov.w	r8, #0
 80217de:	f104 0919 	add.w	r9, r4, #25
 80217e2:	e7f4      	b.n	80217ce <_printf_float+0x442>

080217e4 <_printf_common>:
 80217e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80217e8:	4616      	mov	r6, r2
 80217ea:	4698      	mov	r8, r3
 80217ec:	688a      	ldr	r2, [r1, #8]
 80217ee:	690b      	ldr	r3, [r1, #16]
 80217f0:	4607      	mov	r7, r0
 80217f2:	4293      	cmp	r3, r2
 80217f4:	bfb8      	it	lt
 80217f6:	4613      	movlt	r3, r2
 80217f8:	6033      	str	r3, [r6, #0]
 80217fa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80217fe:	460c      	mov	r4, r1
 8021800:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8021804:	b10a      	cbz	r2, 802180a <_printf_common+0x26>
 8021806:	3301      	adds	r3, #1
 8021808:	6033      	str	r3, [r6, #0]
 802180a:	6823      	ldr	r3, [r4, #0]
 802180c:	0699      	lsls	r1, r3, #26
 802180e:	bf42      	ittt	mi
 8021810:	6833      	ldrmi	r3, [r6, #0]
 8021812:	3302      	addmi	r3, #2
 8021814:	6033      	strmi	r3, [r6, #0]
 8021816:	6825      	ldr	r5, [r4, #0]
 8021818:	f015 0506 	ands.w	r5, r5, #6
 802181c:	d106      	bne.n	802182c <_printf_common+0x48>
 802181e:	f104 0a19 	add.w	sl, r4, #25
 8021822:	68e3      	ldr	r3, [r4, #12]
 8021824:	6832      	ldr	r2, [r6, #0]
 8021826:	1a9b      	subs	r3, r3, r2
 8021828:	42ab      	cmp	r3, r5
 802182a:	dc2b      	bgt.n	8021884 <_printf_common+0xa0>
 802182c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8021830:	6822      	ldr	r2, [r4, #0]
 8021832:	3b00      	subs	r3, #0
 8021834:	bf18      	it	ne
 8021836:	2301      	movne	r3, #1
 8021838:	0692      	lsls	r2, r2, #26
 802183a:	d430      	bmi.n	802189e <_printf_common+0xba>
 802183c:	4641      	mov	r1, r8
 802183e:	4638      	mov	r0, r7
 8021840:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8021844:	47c8      	blx	r9
 8021846:	3001      	adds	r0, #1
 8021848:	d023      	beq.n	8021892 <_printf_common+0xae>
 802184a:	6823      	ldr	r3, [r4, #0]
 802184c:	6922      	ldr	r2, [r4, #16]
 802184e:	f003 0306 	and.w	r3, r3, #6
 8021852:	2b04      	cmp	r3, #4
 8021854:	bf14      	ite	ne
 8021856:	2500      	movne	r5, #0
 8021858:	6833      	ldreq	r3, [r6, #0]
 802185a:	f04f 0600 	mov.w	r6, #0
 802185e:	bf08      	it	eq
 8021860:	68e5      	ldreq	r5, [r4, #12]
 8021862:	f104 041a 	add.w	r4, r4, #26
 8021866:	bf08      	it	eq
 8021868:	1aed      	subeq	r5, r5, r3
 802186a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 802186e:	bf08      	it	eq
 8021870:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8021874:	4293      	cmp	r3, r2
 8021876:	bfc4      	itt	gt
 8021878:	1a9b      	subgt	r3, r3, r2
 802187a:	18ed      	addgt	r5, r5, r3
 802187c:	42b5      	cmp	r5, r6
 802187e:	d11a      	bne.n	80218b6 <_printf_common+0xd2>
 8021880:	2000      	movs	r0, #0
 8021882:	e008      	b.n	8021896 <_printf_common+0xb2>
 8021884:	2301      	movs	r3, #1
 8021886:	4652      	mov	r2, sl
 8021888:	4641      	mov	r1, r8
 802188a:	4638      	mov	r0, r7
 802188c:	47c8      	blx	r9
 802188e:	3001      	adds	r0, #1
 8021890:	d103      	bne.n	802189a <_printf_common+0xb6>
 8021892:	f04f 30ff 	mov.w	r0, #4294967295
 8021896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802189a:	3501      	adds	r5, #1
 802189c:	e7c1      	b.n	8021822 <_printf_common+0x3e>
 802189e:	2030      	movs	r0, #48	@ 0x30
 80218a0:	18e1      	adds	r1, r4, r3
 80218a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80218a6:	1c5a      	adds	r2, r3, #1
 80218a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80218ac:	4422      	add	r2, r4
 80218ae:	3302      	adds	r3, #2
 80218b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80218b4:	e7c2      	b.n	802183c <_printf_common+0x58>
 80218b6:	2301      	movs	r3, #1
 80218b8:	4622      	mov	r2, r4
 80218ba:	4641      	mov	r1, r8
 80218bc:	4638      	mov	r0, r7
 80218be:	47c8      	blx	r9
 80218c0:	3001      	adds	r0, #1
 80218c2:	d0e6      	beq.n	8021892 <_printf_common+0xae>
 80218c4:	3601      	adds	r6, #1
 80218c6:	e7d9      	b.n	802187c <_printf_common+0x98>

080218c8 <_printf_i>:
 80218c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80218cc:	7e0f      	ldrb	r7, [r1, #24]
 80218ce:	4691      	mov	r9, r2
 80218d0:	2f78      	cmp	r7, #120	@ 0x78
 80218d2:	4680      	mov	r8, r0
 80218d4:	460c      	mov	r4, r1
 80218d6:	469a      	mov	sl, r3
 80218d8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80218da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80218de:	d807      	bhi.n	80218f0 <_printf_i+0x28>
 80218e0:	2f62      	cmp	r7, #98	@ 0x62
 80218e2:	d80a      	bhi.n	80218fa <_printf_i+0x32>
 80218e4:	2f00      	cmp	r7, #0
 80218e6:	f000 80d1 	beq.w	8021a8c <_printf_i+0x1c4>
 80218ea:	2f58      	cmp	r7, #88	@ 0x58
 80218ec:	f000 80b8 	beq.w	8021a60 <_printf_i+0x198>
 80218f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80218f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80218f8:	e03a      	b.n	8021970 <_printf_i+0xa8>
 80218fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80218fe:	2b15      	cmp	r3, #21
 8021900:	d8f6      	bhi.n	80218f0 <_printf_i+0x28>
 8021902:	a101      	add	r1, pc, #4	@ (adr r1, 8021908 <_printf_i+0x40>)
 8021904:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8021908:	08021961 	.word	0x08021961
 802190c:	08021975 	.word	0x08021975
 8021910:	080218f1 	.word	0x080218f1
 8021914:	080218f1 	.word	0x080218f1
 8021918:	080218f1 	.word	0x080218f1
 802191c:	080218f1 	.word	0x080218f1
 8021920:	08021975 	.word	0x08021975
 8021924:	080218f1 	.word	0x080218f1
 8021928:	080218f1 	.word	0x080218f1
 802192c:	080218f1 	.word	0x080218f1
 8021930:	080218f1 	.word	0x080218f1
 8021934:	08021a73 	.word	0x08021a73
 8021938:	0802199f 	.word	0x0802199f
 802193c:	08021a2d 	.word	0x08021a2d
 8021940:	080218f1 	.word	0x080218f1
 8021944:	080218f1 	.word	0x080218f1
 8021948:	08021a95 	.word	0x08021a95
 802194c:	080218f1 	.word	0x080218f1
 8021950:	0802199f 	.word	0x0802199f
 8021954:	080218f1 	.word	0x080218f1
 8021958:	080218f1 	.word	0x080218f1
 802195c:	08021a35 	.word	0x08021a35
 8021960:	6833      	ldr	r3, [r6, #0]
 8021962:	1d1a      	adds	r2, r3, #4
 8021964:	681b      	ldr	r3, [r3, #0]
 8021966:	6032      	str	r2, [r6, #0]
 8021968:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802196c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8021970:	2301      	movs	r3, #1
 8021972:	e09c      	b.n	8021aae <_printf_i+0x1e6>
 8021974:	6833      	ldr	r3, [r6, #0]
 8021976:	6820      	ldr	r0, [r4, #0]
 8021978:	1d19      	adds	r1, r3, #4
 802197a:	6031      	str	r1, [r6, #0]
 802197c:	0606      	lsls	r6, r0, #24
 802197e:	d501      	bpl.n	8021984 <_printf_i+0xbc>
 8021980:	681d      	ldr	r5, [r3, #0]
 8021982:	e003      	b.n	802198c <_printf_i+0xc4>
 8021984:	0645      	lsls	r5, r0, #25
 8021986:	d5fb      	bpl.n	8021980 <_printf_i+0xb8>
 8021988:	f9b3 5000 	ldrsh.w	r5, [r3]
 802198c:	2d00      	cmp	r5, #0
 802198e:	da03      	bge.n	8021998 <_printf_i+0xd0>
 8021990:	232d      	movs	r3, #45	@ 0x2d
 8021992:	426d      	negs	r5, r5
 8021994:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8021998:	230a      	movs	r3, #10
 802199a:	4858      	ldr	r0, [pc, #352]	@ (8021afc <_printf_i+0x234>)
 802199c:	e011      	b.n	80219c2 <_printf_i+0xfa>
 802199e:	6821      	ldr	r1, [r4, #0]
 80219a0:	6833      	ldr	r3, [r6, #0]
 80219a2:	0608      	lsls	r0, r1, #24
 80219a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80219a8:	d402      	bmi.n	80219b0 <_printf_i+0xe8>
 80219aa:	0649      	lsls	r1, r1, #25
 80219ac:	bf48      	it	mi
 80219ae:	b2ad      	uxthmi	r5, r5
 80219b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80219b2:	6033      	str	r3, [r6, #0]
 80219b4:	bf14      	ite	ne
 80219b6:	230a      	movne	r3, #10
 80219b8:	2308      	moveq	r3, #8
 80219ba:	4850      	ldr	r0, [pc, #320]	@ (8021afc <_printf_i+0x234>)
 80219bc:	2100      	movs	r1, #0
 80219be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80219c2:	6866      	ldr	r6, [r4, #4]
 80219c4:	2e00      	cmp	r6, #0
 80219c6:	60a6      	str	r6, [r4, #8]
 80219c8:	db05      	blt.n	80219d6 <_printf_i+0x10e>
 80219ca:	6821      	ldr	r1, [r4, #0]
 80219cc:	432e      	orrs	r6, r5
 80219ce:	f021 0104 	bic.w	r1, r1, #4
 80219d2:	6021      	str	r1, [r4, #0]
 80219d4:	d04b      	beq.n	8021a6e <_printf_i+0x1a6>
 80219d6:	4616      	mov	r6, r2
 80219d8:	fbb5 f1f3 	udiv	r1, r5, r3
 80219dc:	fb03 5711 	mls	r7, r3, r1, r5
 80219e0:	5dc7      	ldrb	r7, [r0, r7]
 80219e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80219e6:	462f      	mov	r7, r5
 80219e8:	42bb      	cmp	r3, r7
 80219ea:	460d      	mov	r5, r1
 80219ec:	d9f4      	bls.n	80219d8 <_printf_i+0x110>
 80219ee:	2b08      	cmp	r3, #8
 80219f0:	d10b      	bne.n	8021a0a <_printf_i+0x142>
 80219f2:	6823      	ldr	r3, [r4, #0]
 80219f4:	07df      	lsls	r7, r3, #31
 80219f6:	d508      	bpl.n	8021a0a <_printf_i+0x142>
 80219f8:	6923      	ldr	r3, [r4, #16]
 80219fa:	6861      	ldr	r1, [r4, #4]
 80219fc:	4299      	cmp	r1, r3
 80219fe:	bfde      	ittt	le
 8021a00:	2330      	movle	r3, #48	@ 0x30
 8021a02:	f806 3c01 	strble.w	r3, [r6, #-1]
 8021a06:	f106 36ff 	addle.w	r6, r6, #4294967295
 8021a0a:	1b92      	subs	r2, r2, r6
 8021a0c:	6122      	str	r2, [r4, #16]
 8021a0e:	464b      	mov	r3, r9
 8021a10:	4621      	mov	r1, r4
 8021a12:	4640      	mov	r0, r8
 8021a14:	f8cd a000 	str.w	sl, [sp]
 8021a18:	aa03      	add	r2, sp, #12
 8021a1a:	f7ff fee3 	bl	80217e4 <_printf_common>
 8021a1e:	3001      	adds	r0, #1
 8021a20:	d14a      	bne.n	8021ab8 <_printf_i+0x1f0>
 8021a22:	f04f 30ff 	mov.w	r0, #4294967295
 8021a26:	b004      	add	sp, #16
 8021a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021a2c:	6823      	ldr	r3, [r4, #0]
 8021a2e:	f043 0320 	orr.w	r3, r3, #32
 8021a32:	6023      	str	r3, [r4, #0]
 8021a34:	2778      	movs	r7, #120	@ 0x78
 8021a36:	4832      	ldr	r0, [pc, #200]	@ (8021b00 <_printf_i+0x238>)
 8021a38:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8021a3c:	6823      	ldr	r3, [r4, #0]
 8021a3e:	6831      	ldr	r1, [r6, #0]
 8021a40:	061f      	lsls	r7, r3, #24
 8021a42:	f851 5b04 	ldr.w	r5, [r1], #4
 8021a46:	d402      	bmi.n	8021a4e <_printf_i+0x186>
 8021a48:	065f      	lsls	r7, r3, #25
 8021a4a:	bf48      	it	mi
 8021a4c:	b2ad      	uxthmi	r5, r5
 8021a4e:	6031      	str	r1, [r6, #0]
 8021a50:	07d9      	lsls	r1, r3, #31
 8021a52:	bf44      	itt	mi
 8021a54:	f043 0320 	orrmi.w	r3, r3, #32
 8021a58:	6023      	strmi	r3, [r4, #0]
 8021a5a:	b11d      	cbz	r5, 8021a64 <_printf_i+0x19c>
 8021a5c:	2310      	movs	r3, #16
 8021a5e:	e7ad      	b.n	80219bc <_printf_i+0xf4>
 8021a60:	4826      	ldr	r0, [pc, #152]	@ (8021afc <_printf_i+0x234>)
 8021a62:	e7e9      	b.n	8021a38 <_printf_i+0x170>
 8021a64:	6823      	ldr	r3, [r4, #0]
 8021a66:	f023 0320 	bic.w	r3, r3, #32
 8021a6a:	6023      	str	r3, [r4, #0]
 8021a6c:	e7f6      	b.n	8021a5c <_printf_i+0x194>
 8021a6e:	4616      	mov	r6, r2
 8021a70:	e7bd      	b.n	80219ee <_printf_i+0x126>
 8021a72:	6833      	ldr	r3, [r6, #0]
 8021a74:	6825      	ldr	r5, [r4, #0]
 8021a76:	1d18      	adds	r0, r3, #4
 8021a78:	6961      	ldr	r1, [r4, #20]
 8021a7a:	6030      	str	r0, [r6, #0]
 8021a7c:	062e      	lsls	r6, r5, #24
 8021a7e:	681b      	ldr	r3, [r3, #0]
 8021a80:	d501      	bpl.n	8021a86 <_printf_i+0x1be>
 8021a82:	6019      	str	r1, [r3, #0]
 8021a84:	e002      	b.n	8021a8c <_printf_i+0x1c4>
 8021a86:	0668      	lsls	r0, r5, #25
 8021a88:	d5fb      	bpl.n	8021a82 <_printf_i+0x1ba>
 8021a8a:	8019      	strh	r1, [r3, #0]
 8021a8c:	2300      	movs	r3, #0
 8021a8e:	4616      	mov	r6, r2
 8021a90:	6123      	str	r3, [r4, #16]
 8021a92:	e7bc      	b.n	8021a0e <_printf_i+0x146>
 8021a94:	6833      	ldr	r3, [r6, #0]
 8021a96:	2100      	movs	r1, #0
 8021a98:	1d1a      	adds	r2, r3, #4
 8021a9a:	6032      	str	r2, [r6, #0]
 8021a9c:	681e      	ldr	r6, [r3, #0]
 8021a9e:	6862      	ldr	r2, [r4, #4]
 8021aa0:	4630      	mov	r0, r6
 8021aa2:	f000 fbde 	bl	8022262 <memchr>
 8021aa6:	b108      	cbz	r0, 8021aac <_printf_i+0x1e4>
 8021aa8:	1b80      	subs	r0, r0, r6
 8021aaa:	6060      	str	r0, [r4, #4]
 8021aac:	6863      	ldr	r3, [r4, #4]
 8021aae:	6123      	str	r3, [r4, #16]
 8021ab0:	2300      	movs	r3, #0
 8021ab2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8021ab6:	e7aa      	b.n	8021a0e <_printf_i+0x146>
 8021ab8:	4632      	mov	r2, r6
 8021aba:	4649      	mov	r1, r9
 8021abc:	4640      	mov	r0, r8
 8021abe:	6923      	ldr	r3, [r4, #16]
 8021ac0:	47d0      	blx	sl
 8021ac2:	3001      	adds	r0, #1
 8021ac4:	d0ad      	beq.n	8021a22 <_printf_i+0x15a>
 8021ac6:	6823      	ldr	r3, [r4, #0]
 8021ac8:	079b      	lsls	r3, r3, #30
 8021aca:	d413      	bmi.n	8021af4 <_printf_i+0x22c>
 8021acc:	68e0      	ldr	r0, [r4, #12]
 8021ace:	9b03      	ldr	r3, [sp, #12]
 8021ad0:	4298      	cmp	r0, r3
 8021ad2:	bfb8      	it	lt
 8021ad4:	4618      	movlt	r0, r3
 8021ad6:	e7a6      	b.n	8021a26 <_printf_i+0x15e>
 8021ad8:	2301      	movs	r3, #1
 8021ada:	4632      	mov	r2, r6
 8021adc:	4649      	mov	r1, r9
 8021ade:	4640      	mov	r0, r8
 8021ae0:	47d0      	blx	sl
 8021ae2:	3001      	adds	r0, #1
 8021ae4:	d09d      	beq.n	8021a22 <_printf_i+0x15a>
 8021ae6:	3501      	adds	r5, #1
 8021ae8:	68e3      	ldr	r3, [r4, #12]
 8021aea:	9903      	ldr	r1, [sp, #12]
 8021aec:	1a5b      	subs	r3, r3, r1
 8021aee:	42ab      	cmp	r3, r5
 8021af0:	dcf2      	bgt.n	8021ad8 <_printf_i+0x210>
 8021af2:	e7eb      	b.n	8021acc <_printf_i+0x204>
 8021af4:	2500      	movs	r5, #0
 8021af6:	f104 0619 	add.w	r6, r4, #25
 8021afa:	e7f5      	b.n	8021ae8 <_printf_i+0x220>
 8021afc:	08030d89 	.word	0x08030d89
 8021b00:	08030d9a 	.word	0x08030d9a

08021b04 <std>:
 8021b04:	2300      	movs	r3, #0
 8021b06:	b510      	push	{r4, lr}
 8021b08:	4604      	mov	r4, r0
 8021b0a:	e9c0 3300 	strd	r3, r3, [r0]
 8021b0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021b12:	6083      	str	r3, [r0, #8]
 8021b14:	8181      	strh	r1, [r0, #12]
 8021b16:	6643      	str	r3, [r0, #100]	@ 0x64
 8021b18:	81c2      	strh	r2, [r0, #14]
 8021b1a:	6183      	str	r3, [r0, #24]
 8021b1c:	4619      	mov	r1, r3
 8021b1e:	2208      	movs	r2, #8
 8021b20:	305c      	adds	r0, #92	@ 0x5c
 8021b22:	f000 fa87 	bl	8022034 <memset>
 8021b26:	4b0d      	ldr	r3, [pc, #52]	@ (8021b5c <std+0x58>)
 8021b28:	6224      	str	r4, [r4, #32]
 8021b2a:	6263      	str	r3, [r4, #36]	@ 0x24
 8021b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8021b60 <std+0x5c>)
 8021b2e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8021b30:	4b0c      	ldr	r3, [pc, #48]	@ (8021b64 <std+0x60>)
 8021b32:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8021b34:	4b0c      	ldr	r3, [pc, #48]	@ (8021b68 <std+0x64>)
 8021b36:	6323      	str	r3, [r4, #48]	@ 0x30
 8021b38:	4b0c      	ldr	r3, [pc, #48]	@ (8021b6c <std+0x68>)
 8021b3a:	429c      	cmp	r4, r3
 8021b3c:	d006      	beq.n	8021b4c <std+0x48>
 8021b3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8021b42:	4294      	cmp	r4, r2
 8021b44:	d002      	beq.n	8021b4c <std+0x48>
 8021b46:	33d0      	adds	r3, #208	@ 0xd0
 8021b48:	429c      	cmp	r4, r3
 8021b4a:	d105      	bne.n	8021b58 <std+0x54>
 8021b4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8021b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021b54:	f000 bb82 	b.w	802225c <__retarget_lock_init_recursive>
 8021b58:	bd10      	pop	{r4, pc}
 8021b5a:	bf00      	nop
 8021b5c:	08021e2d 	.word	0x08021e2d
 8021b60:	08021e53 	.word	0x08021e53
 8021b64:	08021e8b 	.word	0x08021e8b
 8021b68:	08021eaf 	.word	0x08021eaf
 8021b6c:	2000c1c0 	.word	0x2000c1c0

08021b70 <stdio_exit_handler>:
 8021b70:	4a02      	ldr	r2, [pc, #8]	@ (8021b7c <stdio_exit_handler+0xc>)
 8021b72:	4903      	ldr	r1, [pc, #12]	@ (8021b80 <stdio_exit_handler+0x10>)
 8021b74:	4803      	ldr	r0, [pc, #12]	@ (8021b84 <stdio_exit_handler+0x14>)
 8021b76:	f000 b869 	b.w	8021c4c <_fwalk_sglue>
 8021b7a:	bf00      	nop
 8021b7c:	2000012c 	.word	0x2000012c
 8021b80:	080244e5 	.word	0x080244e5
 8021b84:	2000013c 	.word	0x2000013c

08021b88 <cleanup_stdio>:
 8021b88:	6841      	ldr	r1, [r0, #4]
 8021b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8021bbc <cleanup_stdio+0x34>)
 8021b8c:	b510      	push	{r4, lr}
 8021b8e:	4299      	cmp	r1, r3
 8021b90:	4604      	mov	r4, r0
 8021b92:	d001      	beq.n	8021b98 <cleanup_stdio+0x10>
 8021b94:	f002 fca6 	bl	80244e4 <_fflush_r>
 8021b98:	68a1      	ldr	r1, [r4, #8]
 8021b9a:	4b09      	ldr	r3, [pc, #36]	@ (8021bc0 <cleanup_stdio+0x38>)
 8021b9c:	4299      	cmp	r1, r3
 8021b9e:	d002      	beq.n	8021ba6 <cleanup_stdio+0x1e>
 8021ba0:	4620      	mov	r0, r4
 8021ba2:	f002 fc9f 	bl	80244e4 <_fflush_r>
 8021ba6:	68e1      	ldr	r1, [r4, #12]
 8021ba8:	4b06      	ldr	r3, [pc, #24]	@ (8021bc4 <cleanup_stdio+0x3c>)
 8021baa:	4299      	cmp	r1, r3
 8021bac:	d004      	beq.n	8021bb8 <cleanup_stdio+0x30>
 8021bae:	4620      	mov	r0, r4
 8021bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021bb4:	f002 bc96 	b.w	80244e4 <_fflush_r>
 8021bb8:	bd10      	pop	{r4, pc}
 8021bba:	bf00      	nop
 8021bbc:	2000c1c0 	.word	0x2000c1c0
 8021bc0:	2000c228 	.word	0x2000c228
 8021bc4:	2000c290 	.word	0x2000c290

08021bc8 <global_stdio_init.part.0>:
 8021bc8:	b510      	push	{r4, lr}
 8021bca:	4b0b      	ldr	r3, [pc, #44]	@ (8021bf8 <global_stdio_init.part.0+0x30>)
 8021bcc:	4c0b      	ldr	r4, [pc, #44]	@ (8021bfc <global_stdio_init.part.0+0x34>)
 8021bce:	4a0c      	ldr	r2, [pc, #48]	@ (8021c00 <global_stdio_init.part.0+0x38>)
 8021bd0:	4620      	mov	r0, r4
 8021bd2:	601a      	str	r2, [r3, #0]
 8021bd4:	2104      	movs	r1, #4
 8021bd6:	2200      	movs	r2, #0
 8021bd8:	f7ff ff94 	bl	8021b04 <std>
 8021bdc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8021be0:	2201      	movs	r2, #1
 8021be2:	2109      	movs	r1, #9
 8021be4:	f7ff ff8e 	bl	8021b04 <std>
 8021be8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8021bec:	2202      	movs	r2, #2
 8021bee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021bf2:	2112      	movs	r1, #18
 8021bf4:	f7ff bf86 	b.w	8021b04 <std>
 8021bf8:	2000c2f8 	.word	0x2000c2f8
 8021bfc:	2000c1c0 	.word	0x2000c1c0
 8021c00:	08021b71 	.word	0x08021b71

08021c04 <__sfp_lock_acquire>:
 8021c04:	4801      	ldr	r0, [pc, #4]	@ (8021c0c <__sfp_lock_acquire+0x8>)
 8021c06:	f000 bb2a 	b.w	802225e <__retarget_lock_acquire_recursive>
 8021c0a:	bf00      	nop
 8021c0c:	2000c301 	.word	0x2000c301

08021c10 <__sfp_lock_release>:
 8021c10:	4801      	ldr	r0, [pc, #4]	@ (8021c18 <__sfp_lock_release+0x8>)
 8021c12:	f000 bb25 	b.w	8022260 <__retarget_lock_release_recursive>
 8021c16:	bf00      	nop
 8021c18:	2000c301 	.word	0x2000c301

08021c1c <__sinit>:
 8021c1c:	b510      	push	{r4, lr}
 8021c1e:	4604      	mov	r4, r0
 8021c20:	f7ff fff0 	bl	8021c04 <__sfp_lock_acquire>
 8021c24:	6a23      	ldr	r3, [r4, #32]
 8021c26:	b11b      	cbz	r3, 8021c30 <__sinit+0x14>
 8021c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021c2c:	f7ff bff0 	b.w	8021c10 <__sfp_lock_release>
 8021c30:	4b04      	ldr	r3, [pc, #16]	@ (8021c44 <__sinit+0x28>)
 8021c32:	6223      	str	r3, [r4, #32]
 8021c34:	4b04      	ldr	r3, [pc, #16]	@ (8021c48 <__sinit+0x2c>)
 8021c36:	681b      	ldr	r3, [r3, #0]
 8021c38:	2b00      	cmp	r3, #0
 8021c3a:	d1f5      	bne.n	8021c28 <__sinit+0xc>
 8021c3c:	f7ff ffc4 	bl	8021bc8 <global_stdio_init.part.0>
 8021c40:	e7f2      	b.n	8021c28 <__sinit+0xc>
 8021c42:	bf00      	nop
 8021c44:	08021b89 	.word	0x08021b89
 8021c48:	2000c2f8 	.word	0x2000c2f8

08021c4c <_fwalk_sglue>:
 8021c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021c50:	4607      	mov	r7, r0
 8021c52:	4688      	mov	r8, r1
 8021c54:	4614      	mov	r4, r2
 8021c56:	2600      	movs	r6, #0
 8021c58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021c5c:	f1b9 0901 	subs.w	r9, r9, #1
 8021c60:	d505      	bpl.n	8021c6e <_fwalk_sglue+0x22>
 8021c62:	6824      	ldr	r4, [r4, #0]
 8021c64:	2c00      	cmp	r4, #0
 8021c66:	d1f7      	bne.n	8021c58 <_fwalk_sglue+0xc>
 8021c68:	4630      	mov	r0, r6
 8021c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021c6e:	89ab      	ldrh	r3, [r5, #12]
 8021c70:	2b01      	cmp	r3, #1
 8021c72:	d907      	bls.n	8021c84 <_fwalk_sglue+0x38>
 8021c74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021c78:	3301      	adds	r3, #1
 8021c7a:	d003      	beq.n	8021c84 <_fwalk_sglue+0x38>
 8021c7c:	4629      	mov	r1, r5
 8021c7e:	4638      	mov	r0, r7
 8021c80:	47c0      	blx	r8
 8021c82:	4306      	orrs	r6, r0
 8021c84:	3568      	adds	r5, #104	@ 0x68
 8021c86:	e7e9      	b.n	8021c5c <_fwalk_sglue+0x10>

08021c88 <iprintf>:
 8021c88:	b40f      	push	{r0, r1, r2, r3}
 8021c8a:	b507      	push	{r0, r1, r2, lr}
 8021c8c:	4906      	ldr	r1, [pc, #24]	@ (8021ca8 <iprintf+0x20>)
 8021c8e:	ab04      	add	r3, sp, #16
 8021c90:	6808      	ldr	r0, [r1, #0]
 8021c92:	f853 2b04 	ldr.w	r2, [r3], #4
 8021c96:	6881      	ldr	r1, [r0, #8]
 8021c98:	9301      	str	r3, [sp, #4]
 8021c9a:	f002 f93f 	bl	8023f1c <_vfiprintf_r>
 8021c9e:	b003      	add	sp, #12
 8021ca0:	f85d eb04 	ldr.w	lr, [sp], #4
 8021ca4:	b004      	add	sp, #16
 8021ca6:	4770      	bx	lr
 8021ca8:	20000138 	.word	0x20000138

08021cac <_puts_r>:
 8021cac:	6a03      	ldr	r3, [r0, #32]
 8021cae:	b570      	push	{r4, r5, r6, lr}
 8021cb0:	4605      	mov	r5, r0
 8021cb2:	460e      	mov	r6, r1
 8021cb4:	6884      	ldr	r4, [r0, #8]
 8021cb6:	b90b      	cbnz	r3, 8021cbc <_puts_r+0x10>
 8021cb8:	f7ff ffb0 	bl	8021c1c <__sinit>
 8021cbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021cbe:	07db      	lsls	r3, r3, #31
 8021cc0:	d405      	bmi.n	8021cce <_puts_r+0x22>
 8021cc2:	89a3      	ldrh	r3, [r4, #12]
 8021cc4:	0598      	lsls	r0, r3, #22
 8021cc6:	d402      	bmi.n	8021cce <_puts_r+0x22>
 8021cc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021cca:	f000 fac8 	bl	802225e <__retarget_lock_acquire_recursive>
 8021cce:	89a3      	ldrh	r3, [r4, #12]
 8021cd0:	0719      	lsls	r1, r3, #28
 8021cd2:	d502      	bpl.n	8021cda <_puts_r+0x2e>
 8021cd4:	6923      	ldr	r3, [r4, #16]
 8021cd6:	2b00      	cmp	r3, #0
 8021cd8:	d135      	bne.n	8021d46 <_puts_r+0x9a>
 8021cda:	4621      	mov	r1, r4
 8021cdc:	4628      	mov	r0, r5
 8021cde:	f000 f929 	bl	8021f34 <__swsetup_r>
 8021ce2:	b380      	cbz	r0, 8021d46 <_puts_r+0x9a>
 8021ce4:	f04f 35ff 	mov.w	r5, #4294967295
 8021ce8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021cea:	07da      	lsls	r2, r3, #31
 8021cec:	d405      	bmi.n	8021cfa <_puts_r+0x4e>
 8021cee:	89a3      	ldrh	r3, [r4, #12]
 8021cf0:	059b      	lsls	r3, r3, #22
 8021cf2:	d402      	bmi.n	8021cfa <_puts_r+0x4e>
 8021cf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021cf6:	f000 fab3 	bl	8022260 <__retarget_lock_release_recursive>
 8021cfa:	4628      	mov	r0, r5
 8021cfc:	bd70      	pop	{r4, r5, r6, pc}
 8021cfe:	2b00      	cmp	r3, #0
 8021d00:	da04      	bge.n	8021d0c <_puts_r+0x60>
 8021d02:	69a2      	ldr	r2, [r4, #24]
 8021d04:	429a      	cmp	r2, r3
 8021d06:	dc17      	bgt.n	8021d38 <_puts_r+0x8c>
 8021d08:	290a      	cmp	r1, #10
 8021d0a:	d015      	beq.n	8021d38 <_puts_r+0x8c>
 8021d0c:	6823      	ldr	r3, [r4, #0]
 8021d0e:	1c5a      	adds	r2, r3, #1
 8021d10:	6022      	str	r2, [r4, #0]
 8021d12:	7019      	strb	r1, [r3, #0]
 8021d14:	68a3      	ldr	r3, [r4, #8]
 8021d16:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8021d1a:	3b01      	subs	r3, #1
 8021d1c:	60a3      	str	r3, [r4, #8]
 8021d1e:	2900      	cmp	r1, #0
 8021d20:	d1ed      	bne.n	8021cfe <_puts_r+0x52>
 8021d22:	2b00      	cmp	r3, #0
 8021d24:	da11      	bge.n	8021d4a <_puts_r+0x9e>
 8021d26:	4622      	mov	r2, r4
 8021d28:	210a      	movs	r1, #10
 8021d2a:	4628      	mov	r0, r5
 8021d2c:	f000 f8c3 	bl	8021eb6 <__swbuf_r>
 8021d30:	3001      	adds	r0, #1
 8021d32:	d0d7      	beq.n	8021ce4 <_puts_r+0x38>
 8021d34:	250a      	movs	r5, #10
 8021d36:	e7d7      	b.n	8021ce8 <_puts_r+0x3c>
 8021d38:	4622      	mov	r2, r4
 8021d3a:	4628      	mov	r0, r5
 8021d3c:	f000 f8bb 	bl	8021eb6 <__swbuf_r>
 8021d40:	3001      	adds	r0, #1
 8021d42:	d1e7      	bne.n	8021d14 <_puts_r+0x68>
 8021d44:	e7ce      	b.n	8021ce4 <_puts_r+0x38>
 8021d46:	3e01      	subs	r6, #1
 8021d48:	e7e4      	b.n	8021d14 <_puts_r+0x68>
 8021d4a:	6823      	ldr	r3, [r4, #0]
 8021d4c:	1c5a      	adds	r2, r3, #1
 8021d4e:	6022      	str	r2, [r4, #0]
 8021d50:	220a      	movs	r2, #10
 8021d52:	701a      	strb	r2, [r3, #0]
 8021d54:	e7ee      	b.n	8021d34 <_puts_r+0x88>
	...

08021d58 <puts>:
 8021d58:	4b02      	ldr	r3, [pc, #8]	@ (8021d64 <puts+0xc>)
 8021d5a:	4601      	mov	r1, r0
 8021d5c:	6818      	ldr	r0, [r3, #0]
 8021d5e:	f7ff bfa5 	b.w	8021cac <_puts_r>
 8021d62:	bf00      	nop
 8021d64:	20000138 	.word	0x20000138

08021d68 <sniprintf>:
 8021d68:	b40c      	push	{r2, r3}
 8021d6a:	b530      	push	{r4, r5, lr}
 8021d6c:	4b18      	ldr	r3, [pc, #96]	@ (8021dd0 <sniprintf+0x68>)
 8021d6e:	1e0c      	subs	r4, r1, #0
 8021d70:	681d      	ldr	r5, [r3, #0]
 8021d72:	b09d      	sub	sp, #116	@ 0x74
 8021d74:	da08      	bge.n	8021d88 <sniprintf+0x20>
 8021d76:	238b      	movs	r3, #139	@ 0x8b
 8021d78:	f04f 30ff 	mov.w	r0, #4294967295
 8021d7c:	602b      	str	r3, [r5, #0]
 8021d7e:	b01d      	add	sp, #116	@ 0x74
 8021d80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021d84:	b002      	add	sp, #8
 8021d86:	4770      	bx	lr
 8021d88:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8021d8c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8021d90:	f04f 0300 	mov.w	r3, #0
 8021d94:	931b      	str	r3, [sp, #108]	@ 0x6c
 8021d96:	bf0c      	ite	eq
 8021d98:	4623      	moveq	r3, r4
 8021d9a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8021d9e:	9304      	str	r3, [sp, #16]
 8021da0:	9307      	str	r3, [sp, #28]
 8021da2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8021da6:	9002      	str	r0, [sp, #8]
 8021da8:	9006      	str	r0, [sp, #24]
 8021daa:	f8ad 3016 	strh.w	r3, [sp, #22]
 8021dae:	4628      	mov	r0, r5
 8021db0:	ab21      	add	r3, sp, #132	@ 0x84
 8021db2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8021db4:	a902      	add	r1, sp, #8
 8021db6:	9301      	str	r3, [sp, #4]
 8021db8:	f001 fdbe 	bl	8023938 <_svfiprintf_r>
 8021dbc:	1c43      	adds	r3, r0, #1
 8021dbe:	bfbc      	itt	lt
 8021dc0:	238b      	movlt	r3, #139	@ 0x8b
 8021dc2:	602b      	strlt	r3, [r5, #0]
 8021dc4:	2c00      	cmp	r4, #0
 8021dc6:	d0da      	beq.n	8021d7e <sniprintf+0x16>
 8021dc8:	2200      	movs	r2, #0
 8021dca:	9b02      	ldr	r3, [sp, #8]
 8021dcc:	701a      	strb	r2, [r3, #0]
 8021dce:	e7d6      	b.n	8021d7e <sniprintf+0x16>
 8021dd0:	20000138 	.word	0x20000138

08021dd4 <siscanf>:
 8021dd4:	b40e      	push	{r1, r2, r3}
 8021dd6:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8021dda:	b570      	push	{r4, r5, r6, lr}
 8021ddc:	2500      	movs	r5, #0
 8021dde:	b09d      	sub	sp, #116	@ 0x74
 8021de0:	ac21      	add	r4, sp, #132	@ 0x84
 8021de2:	f854 6b04 	ldr.w	r6, [r4], #4
 8021de6:	f8ad 2014 	strh.w	r2, [sp, #20]
 8021dea:	951b      	str	r5, [sp, #108]	@ 0x6c
 8021dec:	9002      	str	r0, [sp, #8]
 8021dee:	9006      	str	r0, [sp, #24]
 8021df0:	f7de f9f4 	bl	80001dc <strlen>
 8021df4:	4b0b      	ldr	r3, [pc, #44]	@ (8021e24 <siscanf+0x50>)
 8021df6:	9003      	str	r0, [sp, #12]
 8021df8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021dfa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8021dfe:	9007      	str	r0, [sp, #28]
 8021e00:	4809      	ldr	r0, [pc, #36]	@ (8021e28 <siscanf+0x54>)
 8021e02:	f8ad 3016 	strh.w	r3, [sp, #22]
 8021e06:	4632      	mov	r2, r6
 8021e08:	4623      	mov	r3, r4
 8021e0a:	a902      	add	r1, sp, #8
 8021e0c:	6800      	ldr	r0, [r0, #0]
 8021e0e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8021e10:	9514      	str	r5, [sp, #80]	@ 0x50
 8021e12:	9401      	str	r4, [sp, #4]
 8021e14:	f001 fee6 	bl	8023be4 <__ssvfiscanf_r>
 8021e18:	b01d      	add	sp, #116	@ 0x74
 8021e1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021e1e:	b003      	add	sp, #12
 8021e20:	4770      	bx	lr
 8021e22:	bf00      	nop
 8021e24:	08021e4f 	.word	0x08021e4f
 8021e28:	20000138 	.word	0x20000138

08021e2c <__sread>:
 8021e2c:	b510      	push	{r4, lr}
 8021e2e:	460c      	mov	r4, r1
 8021e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021e34:	f000 f9c4 	bl	80221c0 <_read_r>
 8021e38:	2800      	cmp	r0, #0
 8021e3a:	bfab      	itete	ge
 8021e3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8021e3e:	89a3      	ldrhlt	r3, [r4, #12]
 8021e40:	181b      	addge	r3, r3, r0
 8021e42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8021e46:	bfac      	ite	ge
 8021e48:	6563      	strge	r3, [r4, #84]	@ 0x54
 8021e4a:	81a3      	strhlt	r3, [r4, #12]
 8021e4c:	bd10      	pop	{r4, pc}

08021e4e <__seofread>:
 8021e4e:	2000      	movs	r0, #0
 8021e50:	4770      	bx	lr

08021e52 <__swrite>:
 8021e52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021e56:	461f      	mov	r7, r3
 8021e58:	898b      	ldrh	r3, [r1, #12]
 8021e5a:	4605      	mov	r5, r0
 8021e5c:	05db      	lsls	r3, r3, #23
 8021e5e:	460c      	mov	r4, r1
 8021e60:	4616      	mov	r6, r2
 8021e62:	d505      	bpl.n	8021e70 <__swrite+0x1e>
 8021e64:	2302      	movs	r3, #2
 8021e66:	2200      	movs	r2, #0
 8021e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021e6c:	f000 f996 	bl	802219c <_lseek_r>
 8021e70:	89a3      	ldrh	r3, [r4, #12]
 8021e72:	4632      	mov	r2, r6
 8021e74:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8021e78:	81a3      	strh	r3, [r4, #12]
 8021e7a:	4628      	mov	r0, r5
 8021e7c:	463b      	mov	r3, r7
 8021e7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021e82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021e86:	f000 b9ad 	b.w	80221e4 <_write_r>

08021e8a <__sseek>:
 8021e8a:	b510      	push	{r4, lr}
 8021e8c:	460c      	mov	r4, r1
 8021e8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021e92:	f000 f983 	bl	802219c <_lseek_r>
 8021e96:	1c43      	adds	r3, r0, #1
 8021e98:	89a3      	ldrh	r3, [r4, #12]
 8021e9a:	bf15      	itete	ne
 8021e9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8021e9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8021ea2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8021ea6:	81a3      	strheq	r3, [r4, #12]
 8021ea8:	bf18      	it	ne
 8021eaa:	81a3      	strhne	r3, [r4, #12]
 8021eac:	bd10      	pop	{r4, pc}

08021eae <__sclose>:
 8021eae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021eb2:	f000 b963 	b.w	802217c <_close_r>

08021eb6 <__swbuf_r>:
 8021eb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021eb8:	460e      	mov	r6, r1
 8021eba:	4614      	mov	r4, r2
 8021ebc:	4605      	mov	r5, r0
 8021ebe:	b118      	cbz	r0, 8021ec8 <__swbuf_r+0x12>
 8021ec0:	6a03      	ldr	r3, [r0, #32]
 8021ec2:	b90b      	cbnz	r3, 8021ec8 <__swbuf_r+0x12>
 8021ec4:	f7ff feaa 	bl	8021c1c <__sinit>
 8021ec8:	69a3      	ldr	r3, [r4, #24]
 8021eca:	60a3      	str	r3, [r4, #8]
 8021ecc:	89a3      	ldrh	r3, [r4, #12]
 8021ece:	071a      	lsls	r2, r3, #28
 8021ed0:	d501      	bpl.n	8021ed6 <__swbuf_r+0x20>
 8021ed2:	6923      	ldr	r3, [r4, #16]
 8021ed4:	b943      	cbnz	r3, 8021ee8 <__swbuf_r+0x32>
 8021ed6:	4621      	mov	r1, r4
 8021ed8:	4628      	mov	r0, r5
 8021eda:	f000 f82b 	bl	8021f34 <__swsetup_r>
 8021ede:	b118      	cbz	r0, 8021ee8 <__swbuf_r+0x32>
 8021ee0:	f04f 37ff 	mov.w	r7, #4294967295
 8021ee4:	4638      	mov	r0, r7
 8021ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021ee8:	6823      	ldr	r3, [r4, #0]
 8021eea:	6922      	ldr	r2, [r4, #16]
 8021eec:	b2f6      	uxtb	r6, r6
 8021eee:	1a98      	subs	r0, r3, r2
 8021ef0:	6963      	ldr	r3, [r4, #20]
 8021ef2:	4637      	mov	r7, r6
 8021ef4:	4283      	cmp	r3, r0
 8021ef6:	dc05      	bgt.n	8021f04 <__swbuf_r+0x4e>
 8021ef8:	4621      	mov	r1, r4
 8021efa:	4628      	mov	r0, r5
 8021efc:	f002 faf2 	bl	80244e4 <_fflush_r>
 8021f00:	2800      	cmp	r0, #0
 8021f02:	d1ed      	bne.n	8021ee0 <__swbuf_r+0x2a>
 8021f04:	68a3      	ldr	r3, [r4, #8]
 8021f06:	3b01      	subs	r3, #1
 8021f08:	60a3      	str	r3, [r4, #8]
 8021f0a:	6823      	ldr	r3, [r4, #0]
 8021f0c:	1c5a      	adds	r2, r3, #1
 8021f0e:	6022      	str	r2, [r4, #0]
 8021f10:	701e      	strb	r6, [r3, #0]
 8021f12:	6962      	ldr	r2, [r4, #20]
 8021f14:	1c43      	adds	r3, r0, #1
 8021f16:	429a      	cmp	r2, r3
 8021f18:	d004      	beq.n	8021f24 <__swbuf_r+0x6e>
 8021f1a:	89a3      	ldrh	r3, [r4, #12]
 8021f1c:	07db      	lsls	r3, r3, #31
 8021f1e:	d5e1      	bpl.n	8021ee4 <__swbuf_r+0x2e>
 8021f20:	2e0a      	cmp	r6, #10
 8021f22:	d1df      	bne.n	8021ee4 <__swbuf_r+0x2e>
 8021f24:	4621      	mov	r1, r4
 8021f26:	4628      	mov	r0, r5
 8021f28:	f002 fadc 	bl	80244e4 <_fflush_r>
 8021f2c:	2800      	cmp	r0, #0
 8021f2e:	d0d9      	beq.n	8021ee4 <__swbuf_r+0x2e>
 8021f30:	e7d6      	b.n	8021ee0 <__swbuf_r+0x2a>
	...

08021f34 <__swsetup_r>:
 8021f34:	b538      	push	{r3, r4, r5, lr}
 8021f36:	4b29      	ldr	r3, [pc, #164]	@ (8021fdc <__swsetup_r+0xa8>)
 8021f38:	4605      	mov	r5, r0
 8021f3a:	6818      	ldr	r0, [r3, #0]
 8021f3c:	460c      	mov	r4, r1
 8021f3e:	b118      	cbz	r0, 8021f48 <__swsetup_r+0x14>
 8021f40:	6a03      	ldr	r3, [r0, #32]
 8021f42:	b90b      	cbnz	r3, 8021f48 <__swsetup_r+0x14>
 8021f44:	f7ff fe6a 	bl	8021c1c <__sinit>
 8021f48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021f4c:	0719      	lsls	r1, r3, #28
 8021f4e:	d422      	bmi.n	8021f96 <__swsetup_r+0x62>
 8021f50:	06da      	lsls	r2, r3, #27
 8021f52:	d407      	bmi.n	8021f64 <__swsetup_r+0x30>
 8021f54:	2209      	movs	r2, #9
 8021f56:	602a      	str	r2, [r5, #0]
 8021f58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8021f60:	81a3      	strh	r3, [r4, #12]
 8021f62:	e033      	b.n	8021fcc <__swsetup_r+0x98>
 8021f64:	0758      	lsls	r0, r3, #29
 8021f66:	d512      	bpl.n	8021f8e <__swsetup_r+0x5a>
 8021f68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8021f6a:	b141      	cbz	r1, 8021f7e <__swsetup_r+0x4a>
 8021f6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8021f70:	4299      	cmp	r1, r3
 8021f72:	d002      	beq.n	8021f7a <__swsetup_r+0x46>
 8021f74:	4628      	mov	r0, r5
 8021f76:	f001 f80b 	bl	8022f90 <_free_r>
 8021f7a:	2300      	movs	r3, #0
 8021f7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8021f7e:	89a3      	ldrh	r3, [r4, #12]
 8021f80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8021f84:	81a3      	strh	r3, [r4, #12]
 8021f86:	2300      	movs	r3, #0
 8021f88:	6063      	str	r3, [r4, #4]
 8021f8a:	6923      	ldr	r3, [r4, #16]
 8021f8c:	6023      	str	r3, [r4, #0]
 8021f8e:	89a3      	ldrh	r3, [r4, #12]
 8021f90:	f043 0308 	orr.w	r3, r3, #8
 8021f94:	81a3      	strh	r3, [r4, #12]
 8021f96:	6923      	ldr	r3, [r4, #16]
 8021f98:	b94b      	cbnz	r3, 8021fae <__swsetup_r+0x7a>
 8021f9a:	89a3      	ldrh	r3, [r4, #12]
 8021f9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8021fa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8021fa4:	d003      	beq.n	8021fae <__swsetup_r+0x7a>
 8021fa6:	4621      	mov	r1, r4
 8021fa8:	4628      	mov	r0, r5
 8021faa:	f002 fafa 	bl	80245a2 <__smakebuf_r>
 8021fae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021fb2:	f013 0201 	ands.w	r2, r3, #1
 8021fb6:	d00a      	beq.n	8021fce <__swsetup_r+0x9a>
 8021fb8:	2200      	movs	r2, #0
 8021fba:	60a2      	str	r2, [r4, #8]
 8021fbc:	6962      	ldr	r2, [r4, #20]
 8021fbe:	4252      	negs	r2, r2
 8021fc0:	61a2      	str	r2, [r4, #24]
 8021fc2:	6922      	ldr	r2, [r4, #16]
 8021fc4:	b942      	cbnz	r2, 8021fd8 <__swsetup_r+0xa4>
 8021fc6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8021fca:	d1c5      	bne.n	8021f58 <__swsetup_r+0x24>
 8021fcc:	bd38      	pop	{r3, r4, r5, pc}
 8021fce:	0799      	lsls	r1, r3, #30
 8021fd0:	bf58      	it	pl
 8021fd2:	6962      	ldrpl	r2, [r4, #20]
 8021fd4:	60a2      	str	r2, [r4, #8]
 8021fd6:	e7f4      	b.n	8021fc2 <__swsetup_r+0x8e>
 8021fd8:	2000      	movs	r0, #0
 8021fda:	e7f7      	b.n	8021fcc <__swsetup_r+0x98>
 8021fdc:	20000138 	.word	0x20000138

08021fe0 <memcmp>:
 8021fe0:	b510      	push	{r4, lr}
 8021fe2:	3901      	subs	r1, #1
 8021fe4:	4402      	add	r2, r0
 8021fe6:	4290      	cmp	r0, r2
 8021fe8:	d101      	bne.n	8021fee <memcmp+0xe>
 8021fea:	2000      	movs	r0, #0
 8021fec:	e005      	b.n	8021ffa <memcmp+0x1a>
 8021fee:	7803      	ldrb	r3, [r0, #0]
 8021ff0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8021ff4:	42a3      	cmp	r3, r4
 8021ff6:	d001      	beq.n	8021ffc <memcmp+0x1c>
 8021ff8:	1b18      	subs	r0, r3, r4
 8021ffa:	bd10      	pop	{r4, pc}
 8021ffc:	3001      	adds	r0, #1
 8021ffe:	e7f2      	b.n	8021fe6 <memcmp+0x6>

08022000 <memmove>:
 8022000:	4288      	cmp	r0, r1
 8022002:	b510      	push	{r4, lr}
 8022004:	eb01 0402 	add.w	r4, r1, r2
 8022008:	d902      	bls.n	8022010 <memmove+0x10>
 802200a:	4284      	cmp	r4, r0
 802200c:	4623      	mov	r3, r4
 802200e:	d807      	bhi.n	8022020 <memmove+0x20>
 8022010:	1e43      	subs	r3, r0, #1
 8022012:	42a1      	cmp	r1, r4
 8022014:	d008      	beq.n	8022028 <memmove+0x28>
 8022016:	f811 2b01 	ldrb.w	r2, [r1], #1
 802201a:	f803 2f01 	strb.w	r2, [r3, #1]!
 802201e:	e7f8      	b.n	8022012 <memmove+0x12>
 8022020:	4601      	mov	r1, r0
 8022022:	4402      	add	r2, r0
 8022024:	428a      	cmp	r2, r1
 8022026:	d100      	bne.n	802202a <memmove+0x2a>
 8022028:	bd10      	pop	{r4, pc}
 802202a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802202e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8022032:	e7f7      	b.n	8022024 <memmove+0x24>

08022034 <memset>:
 8022034:	4603      	mov	r3, r0
 8022036:	4402      	add	r2, r0
 8022038:	4293      	cmp	r3, r2
 802203a:	d100      	bne.n	802203e <memset+0xa>
 802203c:	4770      	bx	lr
 802203e:	f803 1b01 	strb.w	r1, [r3], #1
 8022042:	e7f9      	b.n	8022038 <memset+0x4>

08022044 <strchr>:
 8022044:	4603      	mov	r3, r0
 8022046:	b2c9      	uxtb	r1, r1
 8022048:	4618      	mov	r0, r3
 802204a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802204e:	b112      	cbz	r2, 8022056 <strchr+0x12>
 8022050:	428a      	cmp	r2, r1
 8022052:	d1f9      	bne.n	8022048 <strchr+0x4>
 8022054:	4770      	bx	lr
 8022056:	2900      	cmp	r1, #0
 8022058:	bf18      	it	ne
 802205a:	2000      	movne	r0, #0
 802205c:	4770      	bx	lr
	...

08022060 <strncasecmp>:
 8022060:	b570      	push	{r4, r5, r6, lr}
 8022062:	4605      	mov	r5, r0
 8022064:	4e0d      	ldr	r6, [pc, #52]	@ (802209c <strncasecmp+0x3c>)
 8022066:	440a      	add	r2, r1
 8022068:	428a      	cmp	r2, r1
 802206a:	d101      	bne.n	8022070 <strncasecmp+0x10>
 802206c:	2000      	movs	r0, #0
 802206e:	e013      	b.n	8022098 <strncasecmp+0x38>
 8022070:	f815 3b01 	ldrb.w	r3, [r5], #1
 8022074:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022078:	5cf0      	ldrb	r0, [r6, r3]
 802207a:	f000 0003 	and.w	r0, r0, #3
 802207e:	2801      	cmp	r0, #1
 8022080:	5d30      	ldrb	r0, [r6, r4]
 8022082:	bf08      	it	eq
 8022084:	3320      	addeq	r3, #32
 8022086:	f000 0003 	and.w	r0, r0, #3
 802208a:	2801      	cmp	r0, #1
 802208c:	bf08      	it	eq
 802208e:	3420      	addeq	r4, #32
 8022090:	1b18      	subs	r0, r3, r4
 8022092:	d101      	bne.n	8022098 <strncasecmp+0x38>
 8022094:	2c00      	cmp	r4, #0
 8022096:	d1e7      	bne.n	8022068 <strncasecmp+0x8>
 8022098:	bd70      	pop	{r4, r5, r6, pc}
 802209a:	bf00      	nop
 802209c:	08030eed 	.word	0x08030eed

080220a0 <strncmp>:
 80220a0:	b510      	push	{r4, lr}
 80220a2:	b16a      	cbz	r2, 80220c0 <strncmp+0x20>
 80220a4:	3901      	subs	r1, #1
 80220a6:	1884      	adds	r4, r0, r2
 80220a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80220ac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80220b0:	429a      	cmp	r2, r3
 80220b2:	d103      	bne.n	80220bc <strncmp+0x1c>
 80220b4:	42a0      	cmp	r0, r4
 80220b6:	d001      	beq.n	80220bc <strncmp+0x1c>
 80220b8:	2a00      	cmp	r2, #0
 80220ba:	d1f5      	bne.n	80220a8 <strncmp+0x8>
 80220bc:	1ad0      	subs	r0, r2, r3
 80220be:	bd10      	pop	{r4, pc}
 80220c0:	4610      	mov	r0, r2
 80220c2:	e7fc      	b.n	80220be <strncmp+0x1e>

080220c4 <strncpy>:
 80220c4:	4603      	mov	r3, r0
 80220c6:	b510      	push	{r4, lr}
 80220c8:	3901      	subs	r1, #1
 80220ca:	b132      	cbz	r2, 80220da <strncpy+0x16>
 80220cc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80220d0:	3a01      	subs	r2, #1
 80220d2:	f803 4b01 	strb.w	r4, [r3], #1
 80220d6:	2c00      	cmp	r4, #0
 80220d8:	d1f7      	bne.n	80220ca <strncpy+0x6>
 80220da:	2100      	movs	r1, #0
 80220dc:	441a      	add	r2, r3
 80220de:	4293      	cmp	r3, r2
 80220e0:	d100      	bne.n	80220e4 <strncpy+0x20>
 80220e2:	bd10      	pop	{r4, pc}
 80220e4:	f803 1b01 	strb.w	r1, [r3], #1
 80220e8:	e7f9      	b.n	80220de <strncpy+0x1a>

080220ea <strstr>:
 80220ea:	780a      	ldrb	r2, [r1, #0]
 80220ec:	b570      	push	{r4, r5, r6, lr}
 80220ee:	b96a      	cbnz	r2, 802210c <strstr+0x22>
 80220f0:	bd70      	pop	{r4, r5, r6, pc}
 80220f2:	429a      	cmp	r2, r3
 80220f4:	d109      	bne.n	802210a <strstr+0x20>
 80220f6:	460c      	mov	r4, r1
 80220f8:	4605      	mov	r5, r0
 80220fa:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80220fe:	2b00      	cmp	r3, #0
 8022100:	d0f6      	beq.n	80220f0 <strstr+0x6>
 8022102:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8022106:	429e      	cmp	r6, r3
 8022108:	d0f7      	beq.n	80220fa <strstr+0x10>
 802210a:	3001      	adds	r0, #1
 802210c:	7803      	ldrb	r3, [r0, #0]
 802210e:	2b00      	cmp	r3, #0
 8022110:	d1ef      	bne.n	80220f2 <strstr+0x8>
 8022112:	4618      	mov	r0, r3
 8022114:	e7ec      	b.n	80220f0 <strstr+0x6>
	...

08022118 <strcasestr>:
 8022118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802211c:	780b      	ldrb	r3, [r1, #0]
 802211e:	4606      	mov	r6, r0
 8022120:	b1fb      	cbz	r3, 8022162 <strcasestr+0x4a>
 8022122:	4f13      	ldr	r7, [pc, #76]	@ (8022170 <strcasestr+0x58>)
 8022124:	1c4d      	adds	r5, r1, #1
 8022126:	5cfa      	ldrb	r2, [r7, r3]
 8022128:	4628      	mov	r0, r5
 802212a:	f002 0203 	and.w	r2, r2, #3
 802212e:	2a01      	cmp	r2, #1
 8022130:	bf08      	it	eq
 8022132:	3320      	addeq	r3, #32
 8022134:	b2dc      	uxtb	r4, r3
 8022136:	f7de f851 	bl	80001dc <strlen>
 802213a:	4681      	mov	r9, r0
 802213c:	46b0      	mov	r8, r6
 802213e:	f818 3b01 	ldrb.w	r3, [r8], #1
 8022142:	b19b      	cbz	r3, 802216c <strcasestr+0x54>
 8022144:	5cfa      	ldrb	r2, [r7, r3]
 8022146:	f002 0203 	and.w	r2, r2, #3
 802214a:	2a01      	cmp	r2, #1
 802214c:	bf08      	it	eq
 802214e:	3320      	addeq	r3, #32
 8022150:	b2db      	uxtb	r3, r3
 8022152:	42a3      	cmp	r3, r4
 8022154:	d108      	bne.n	8022168 <strcasestr+0x50>
 8022156:	464a      	mov	r2, r9
 8022158:	4629      	mov	r1, r5
 802215a:	4640      	mov	r0, r8
 802215c:	f7ff ff80 	bl	8022060 <strncasecmp>
 8022160:	b910      	cbnz	r0, 8022168 <strcasestr+0x50>
 8022162:	4630      	mov	r0, r6
 8022164:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022168:	4646      	mov	r6, r8
 802216a:	e7e7      	b.n	802213c <strcasestr+0x24>
 802216c:	461e      	mov	r6, r3
 802216e:	e7f8      	b.n	8022162 <strcasestr+0x4a>
 8022170:	08030eed 	.word	0x08030eed

08022174 <_localeconv_r>:
 8022174:	4800      	ldr	r0, [pc, #0]	@ (8022178 <_localeconv_r+0x4>)
 8022176:	4770      	bx	lr
 8022178:	20000278 	.word	0x20000278

0802217c <_close_r>:
 802217c:	b538      	push	{r3, r4, r5, lr}
 802217e:	2300      	movs	r3, #0
 8022180:	4d05      	ldr	r5, [pc, #20]	@ (8022198 <_close_r+0x1c>)
 8022182:	4604      	mov	r4, r0
 8022184:	4608      	mov	r0, r1
 8022186:	602b      	str	r3, [r5, #0]
 8022188:	f7e1 fd9e 	bl	8003cc8 <_close>
 802218c:	1c43      	adds	r3, r0, #1
 802218e:	d102      	bne.n	8022196 <_close_r+0x1a>
 8022190:	682b      	ldr	r3, [r5, #0]
 8022192:	b103      	cbz	r3, 8022196 <_close_r+0x1a>
 8022194:	6023      	str	r3, [r4, #0]
 8022196:	bd38      	pop	{r3, r4, r5, pc}
 8022198:	2000c2fc 	.word	0x2000c2fc

0802219c <_lseek_r>:
 802219c:	b538      	push	{r3, r4, r5, lr}
 802219e:	4604      	mov	r4, r0
 80221a0:	4608      	mov	r0, r1
 80221a2:	4611      	mov	r1, r2
 80221a4:	2200      	movs	r2, #0
 80221a6:	4d05      	ldr	r5, [pc, #20]	@ (80221bc <_lseek_r+0x20>)
 80221a8:	602a      	str	r2, [r5, #0]
 80221aa:	461a      	mov	r2, r3
 80221ac:	f7e1 fdb0 	bl	8003d10 <_lseek>
 80221b0:	1c43      	adds	r3, r0, #1
 80221b2:	d102      	bne.n	80221ba <_lseek_r+0x1e>
 80221b4:	682b      	ldr	r3, [r5, #0]
 80221b6:	b103      	cbz	r3, 80221ba <_lseek_r+0x1e>
 80221b8:	6023      	str	r3, [r4, #0]
 80221ba:	bd38      	pop	{r3, r4, r5, pc}
 80221bc:	2000c2fc 	.word	0x2000c2fc

080221c0 <_read_r>:
 80221c0:	b538      	push	{r3, r4, r5, lr}
 80221c2:	4604      	mov	r4, r0
 80221c4:	4608      	mov	r0, r1
 80221c6:	4611      	mov	r1, r2
 80221c8:	2200      	movs	r2, #0
 80221ca:	4d05      	ldr	r5, [pc, #20]	@ (80221e0 <_read_r+0x20>)
 80221cc:	602a      	str	r2, [r5, #0]
 80221ce:	461a      	mov	r2, r3
 80221d0:	f7e1 fd41 	bl	8003c56 <_read>
 80221d4:	1c43      	adds	r3, r0, #1
 80221d6:	d102      	bne.n	80221de <_read_r+0x1e>
 80221d8:	682b      	ldr	r3, [r5, #0]
 80221da:	b103      	cbz	r3, 80221de <_read_r+0x1e>
 80221dc:	6023      	str	r3, [r4, #0]
 80221de:	bd38      	pop	{r3, r4, r5, pc}
 80221e0:	2000c2fc 	.word	0x2000c2fc

080221e4 <_write_r>:
 80221e4:	b538      	push	{r3, r4, r5, lr}
 80221e6:	4604      	mov	r4, r0
 80221e8:	4608      	mov	r0, r1
 80221ea:	4611      	mov	r1, r2
 80221ec:	2200      	movs	r2, #0
 80221ee:	4d05      	ldr	r5, [pc, #20]	@ (8022204 <_write_r+0x20>)
 80221f0:	602a      	str	r2, [r5, #0]
 80221f2:	461a      	mov	r2, r3
 80221f4:	f7e1 fd4c 	bl	8003c90 <_write>
 80221f8:	1c43      	adds	r3, r0, #1
 80221fa:	d102      	bne.n	8022202 <_write_r+0x1e>
 80221fc:	682b      	ldr	r3, [r5, #0]
 80221fe:	b103      	cbz	r3, 8022202 <_write_r+0x1e>
 8022200:	6023      	str	r3, [r4, #0]
 8022202:	bd38      	pop	{r3, r4, r5, pc}
 8022204:	2000c2fc 	.word	0x2000c2fc

08022208 <__errno>:
 8022208:	4b01      	ldr	r3, [pc, #4]	@ (8022210 <__errno+0x8>)
 802220a:	6818      	ldr	r0, [r3, #0]
 802220c:	4770      	bx	lr
 802220e:	bf00      	nop
 8022210:	20000138 	.word	0x20000138

08022214 <__libc_init_array>:
 8022214:	b570      	push	{r4, r5, r6, lr}
 8022216:	2600      	movs	r6, #0
 8022218:	4d0c      	ldr	r5, [pc, #48]	@ (802224c <__libc_init_array+0x38>)
 802221a:	4c0d      	ldr	r4, [pc, #52]	@ (8022250 <__libc_init_array+0x3c>)
 802221c:	1b64      	subs	r4, r4, r5
 802221e:	10a4      	asrs	r4, r4, #2
 8022220:	42a6      	cmp	r6, r4
 8022222:	d109      	bne.n	8022238 <__libc_init_array+0x24>
 8022224:	f002 fc4c 	bl	8024ac0 <_init>
 8022228:	2600      	movs	r6, #0
 802222a:	4d0a      	ldr	r5, [pc, #40]	@ (8022254 <__libc_init_array+0x40>)
 802222c:	4c0a      	ldr	r4, [pc, #40]	@ (8022258 <__libc_init_array+0x44>)
 802222e:	1b64      	subs	r4, r4, r5
 8022230:	10a4      	asrs	r4, r4, #2
 8022232:	42a6      	cmp	r6, r4
 8022234:	d105      	bne.n	8022242 <__libc_init_array+0x2e>
 8022236:	bd70      	pop	{r4, r5, r6, pc}
 8022238:	f855 3b04 	ldr.w	r3, [r5], #4
 802223c:	4798      	blx	r3
 802223e:	3601      	adds	r6, #1
 8022240:	e7ee      	b.n	8022220 <__libc_init_array+0xc>
 8022242:	f855 3b04 	ldr.w	r3, [r5], #4
 8022246:	4798      	blx	r3
 8022248:	3601      	adds	r6, #1
 802224a:	e7f2      	b.n	8022232 <__libc_init_array+0x1e>
 802224c:	08031100 	.word	0x08031100
 8022250:	08031100 	.word	0x08031100
 8022254:	08031100 	.word	0x08031100
 8022258:	08031104 	.word	0x08031104

0802225c <__retarget_lock_init_recursive>:
 802225c:	4770      	bx	lr

0802225e <__retarget_lock_acquire_recursive>:
 802225e:	4770      	bx	lr

08022260 <__retarget_lock_release_recursive>:
 8022260:	4770      	bx	lr

08022262 <memchr>:
 8022262:	4603      	mov	r3, r0
 8022264:	b510      	push	{r4, lr}
 8022266:	b2c9      	uxtb	r1, r1
 8022268:	4402      	add	r2, r0
 802226a:	4293      	cmp	r3, r2
 802226c:	4618      	mov	r0, r3
 802226e:	d101      	bne.n	8022274 <memchr+0x12>
 8022270:	2000      	movs	r0, #0
 8022272:	e003      	b.n	802227c <memchr+0x1a>
 8022274:	7804      	ldrb	r4, [r0, #0]
 8022276:	3301      	adds	r3, #1
 8022278:	428c      	cmp	r4, r1
 802227a:	d1f6      	bne.n	802226a <memchr+0x8>
 802227c:	bd10      	pop	{r4, pc}

0802227e <memcpy>:
 802227e:	440a      	add	r2, r1
 8022280:	4291      	cmp	r1, r2
 8022282:	f100 33ff 	add.w	r3, r0, #4294967295
 8022286:	d100      	bne.n	802228a <memcpy+0xc>
 8022288:	4770      	bx	lr
 802228a:	b510      	push	{r4, lr}
 802228c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022290:	4291      	cmp	r1, r2
 8022292:	f803 4f01 	strb.w	r4, [r3, #1]!
 8022296:	d1f9      	bne.n	802228c <memcpy+0xe>
 8022298:	bd10      	pop	{r4, pc}
	...

0802229c <__assert_func>:
 802229c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802229e:	4614      	mov	r4, r2
 80222a0:	461a      	mov	r2, r3
 80222a2:	4b09      	ldr	r3, [pc, #36]	@ (80222c8 <__assert_func+0x2c>)
 80222a4:	4605      	mov	r5, r0
 80222a6:	681b      	ldr	r3, [r3, #0]
 80222a8:	68d8      	ldr	r0, [r3, #12]
 80222aa:	b14c      	cbz	r4, 80222c0 <__assert_func+0x24>
 80222ac:	4b07      	ldr	r3, [pc, #28]	@ (80222cc <__assert_func+0x30>)
 80222ae:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80222b2:	9100      	str	r1, [sp, #0]
 80222b4:	462b      	mov	r3, r5
 80222b6:	4906      	ldr	r1, [pc, #24]	@ (80222d0 <__assert_func+0x34>)
 80222b8:	f002 f93c 	bl	8024534 <fiprintf>
 80222bc:	f002 fa50 	bl	8024760 <abort>
 80222c0:	4b04      	ldr	r3, [pc, #16]	@ (80222d4 <__assert_func+0x38>)
 80222c2:	461c      	mov	r4, r3
 80222c4:	e7f3      	b.n	80222ae <__assert_func+0x12>
 80222c6:	bf00      	nop
 80222c8:	20000138 	.word	0x20000138
 80222cc:	08030dab 	.word	0x08030dab
 80222d0:	08030db8 	.word	0x08030db8
 80222d4:	08030de6 	.word	0x08030de6

080222d8 <quorem>:
 80222d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80222dc:	6903      	ldr	r3, [r0, #16]
 80222de:	690c      	ldr	r4, [r1, #16]
 80222e0:	4607      	mov	r7, r0
 80222e2:	42a3      	cmp	r3, r4
 80222e4:	db7e      	blt.n	80223e4 <quorem+0x10c>
 80222e6:	3c01      	subs	r4, #1
 80222e8:	00a3      	lsls	r3, r4, #2
 80222ea:	f100 0514 	add.w	r5, r0, #20
 80222ee:	f101 0814 	add.w	r8, r1, #20
 80222f2:	9300      	str	r3, [sp, #0]
 80222f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80222f8:	9301      	str	r3, [sp, #4]
 80222fa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80222fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8022302:	3301      	adds	r3, #1
 8022304:	429a      	cmp	r2, r3
 8022306:	fbb2 f6f3 	udiv	r6, r2, r3
 802230a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802230e:	d32e      	bcc.n	802236e <quorem+0x96>
 8022310:	f04f 0a00 	mov.w	sl, #0
 8022314:	46c4      	mov	ip, r8
 8022316:	46ae      	mov	lr, r5
 8022318:	46d3      	mov	fp, sl
 802231a:	f85c 3b04 	ldr.w	r3, [ip], #4
 802231e:	b298      	uxth	r0, r3
 8022320:	fb06 a000 	mla	r0, r6, r0, sl
 8022324:	0c1b      	lsrs	r3, r3, #16
 8022326:	0c02      	lsrs	r2, r0, #16
 8022328:	fb06 2303 	mla	r3, r6, r3, r2
 802232c:	f8de 2000 	ldr.w	r2, [lr]
 8022330:	b280      	uxth	r0, r0
 8022332:	b292      	uxth	r2, r2
 8022334:	1a12      	subs	r2, r2, r0
 8022336:	445a      	add	r2, fp
 8022338:	f8de 0000 	ldr.w	r0, [lr]
 802233c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8022340:	b29b      	uxth	r3, r3
 8022342:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8022346:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 802234a:	b292      	uxth	r2, r2
 802234c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8022350:	45e1      	cmp	r9, ip
 8022352:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8022356:	f84e 2b04 	str.w	r2, [lr], #4
 802235a:	d2de      	bcs.n	802231a <quorem+0x42>
 802235c:	9b00      	ldr	r3, [sp, #0]
 802235e:	58eb      	ldr	r3, [r5, r3]
 8022360:	b92b      	cbnz	r3, 802236e <quorem+0x96>
 8022362:	9b01      	ldr	r3, [sp, #4]
 8022364:	3b04      	subs	r3, #4
 8022366:	429d      	cmp	r5, r3
 8022368:	461a      	mov	r2, r3
 802236a:	d32f      	bcc.n	80223cc <quorem+0xf4>
 802236c:	613c      	str	r4, [r7, #16]
 802236e:	4638      	mov	r0, r7
 8022370:	f001 f97e 	bl	8023670 <__mcmp>
 8022374:	2800      	cmp	r0, #0
 8022376:	db25      	blt.n	80223c4 <quorem+0xec>
 8022378:	4629      	mov	r1, r5
 802237a:	2000      	movs	r0, #0
 802237c:	f858 2b04 	ldr.w	r2, [r8], #4
 8022380:	f8d1 c000 	ldr.w	ip, [r1]
 8022384:	fa1f fe82 	uxth.w	lr, r2
 8022388:	fa1f f38c 	uxth.w	r3, ip
 802238c:	eba3 030e 	sub.w	r3, r3, lr
 8022390:	4403      	add	r3, r0
 8022392:	0c12      	lsrs	r2, r2, #16
 8022394:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8022398:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 802239c:	b29b      	uxth	r3, r3
 802239e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80223a2:	45c1      	cmp	r9, r8
 80223a4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80223a8:	f841 3b04 	str.w	r3, [r1], #4
 80223ac:	d2e6      	bcs.n	802237c <quorem+0xa4>
 80223ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80223b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80223b6:	b922      	cbnz	r2, 80223c2 <quorem+0xea>
 80223b8:	3b04      	subs	r3, #4
 80223ba:	429d      	cmp	r5, r3
 80223bc:	461a      	mov	r2, r3
 80223be:	d30b      	bcc.n	80223d8 <quorem+0x100>
 80223c0:	613c      	str	r4, [r7, #16]
 80223c2:	3601      	adds	r6, #1
 80223c4:	4630      	mov	r0, r6
 80223c6:	b003      	add	sp, #12
 80223c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80223cc:	6812      	ldr	r2, [r2, #0]
 80223ce:	3b04      	subs	r3, #4
 80223d0:	2a00      	cmp	r2, #0
 80223d2:	d1cb      	bne.n	802236c <quorem+0x94>
 80223d4:	3c01      	subs	r4, #1
 80223d6:	e7c6      	b.n	8022366 <quorem+0x8e>
 80223d8:	6812      	ldr	r2, [r2, #0]
 80223da:	3b04      	subs	r3, #4
 80223dc:	2a00      	cmp	r2, #0
 80223de:	d1ef      	bne.n	80223c0 <quorem+0xe8>
 80223e0:	3c01      	subs	r4, #1
 80223e2:	e7ea      	b.n	80223ba <quorem+0xe2>
 80223e4:	2000      	movs	r0, #0
 80223e6:	e7ee      	b.n	80223c6 <quorem+0xee>

080223e8 <_dtoa_r>:
 80223e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80223ec:	4614      	mov	r4, r2
 80223ee:	461d      	mov	r5, r3
 80223f0:	69c7      	ldr	r7, [r0, #28]
 80223f2:	b097      	sub	sp, #92	@ 0x5c
 80223f4:	4681      	mov	r9, r0
 80223f6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80223fa:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80223fc:	b97f      	cbnz	r7, 802241e <_dtoa_r+0x36>
 80223fe:	2010      	movs	r0, #16
 8022400:	f000 fe0e 	bl	8023020 <malloc>
 8022404:	4602      	mov	r2, r0
 8022406:	f8c9 001c 	str.w	r0, [r9, #28]
 802240a:	b920      	cbnz	r0, 8022416 <_dtoa_r+0x2e>
 802240c:	21ef      	movs	r1, #239	@ 0xef
 802240e:	4bac      	ldr	r3, [pc, #688]	@ (80226c0 <_dtoa_r+0x2d8>)
 8022410:	48ac      	ldr	r0, [pc, #688]	@ (80226c4 <_dtoa_r+0x2dc>)
 8022412:	f7ff ff43 	bl	802229c <__assert_func>
 8022416:	e9c0 7701 	strd	r7, r7, [r0, #4]
 802241a:	6007      	str	r7, [r0, #0]
 802241c:	60c7      	str	r7, [r0, #12]
 802241e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8022422:	6819      	ldr	r1, [r3, #0]
 8022424:	b159      	cbz	r1, 802243e <_dtoa_r+0x56>
 8022426:	685a      	ldr	r2, [r3, #4]
 8022428:	2301      	movs	r3, #1
 802242a:	4093      	lsls	r3, r2
 802242c:	604a      	str	r2, [r1, #4]
 802242e:	608b      	str	r3, [r1, #8]
 8022430:	4648      	mov	r0, r9
 8022432:	f000 feeb 	bl	802320c <_Bfree>
 8022436:	2200      	movs	r2, #0
 8022438:	f8d9 301c 	ldr.w	r3, [r9, #28]
 802243c:	601a      	str	r2, [r3, #0]
 802243e:	1e2b      	subs	r3, r5, #0
 8022440:	bfaf      	iteee	ge
 8022442:	2300      	movge	r3, #0
 8022444:	2201      	movlt	r2, #1
 8022446:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 802244a:	9307      	strlt	r3, [sp, #28]
 802244c:	bfa8      	it	ge
 802244e:	6033      	strge	r3, [r6, #0]
 8022450:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8022454:	4b9c      	ldr	r3, [pc, #624]	@ (80226c8 <_dtoa_r+0x2e0>)
 8022456:	bfb8      	it	lt
 8022458:	6032      	strlt	r2, [r6, #0]
 802245a:	ea33 0308 	bics.w	r3, r3, r8
 802245e:	d112      	bne.n	8022486 <_dtoa_r+0x9e>
 8022460:	f242 730f 	movw	r3, #9999	@ 0x270f
 8022464:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8022466:	6013      	str	r3, [r2, #0]
 8022468:	f3c8 0313 	ubfx	r3, r8, #0, #20
 802246c:	4323      	orrs	r3, r4
 802246e:	f000 855e 	beq.w	8022f2e <_dtoa_r+0xb46>
 8022472:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022474:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80226cc <_dtoa_r+0x2e4>
 8022478:	2b00      	cmp	r3, #0
 802247a:	f000 8560 	beq.w	8022f3e <_dtoa_r+0xb56>
 802247e:	f10a 0303 	add.w	r3, sl, #3
 8022482:	f000 bd5a 	b.w	8022f3a <_dtoa_r+0xb52>
 8022486:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802248a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 802248e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8022492:	2200      	movs	r2, #0
 8022494:	2300      	movs	r3, #0
 8022496:	f7de facd 	bl	8000a34 <__aeabi_dcmpeq>
 802249a:	4607      	mov	r7, r0
 802249c:	b158      	cbz	r0, 80224b6 <_dtoa_r+0xce>
 802249e:	2301      	movs	r3, #1
 80224a0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80224a2:	6013      	str	r3, [r2, #0]
 80224a4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80224a6:	b113      	cbz	r3, 80224ae <_dtoa_r+0xc6>
 80224a8:	4b89      	ldr	r3, [pc, #548]	@ (80226d0 <_dtoa_r+0x2e8>)
 80224aa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80224ac:	6013      	str	r3, [r2, #0]
 80224ae:	f8df a224 	ldr.w	sl, [pc, #548]	@ 80226d4 <_dtoa_r+0x2ec>
 80224b2:	f000 bd44 	b.w	8022f3e <_dtoa_r+0xb56>
 80224b6:	ab14      	add	r3, sp, #80	@ 0x50
 80224b8:	9301      	str	r3, [sp, #4]
 80224ba:	ab15      	add	r3, sp, #84	@ 0x54
 80224bc:	9300      	str	r3, [sp, #0]
 80224be:	4648      	mov	r0, r9
 80224c0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80224c4:	f001 f984 	bl	80237d0 <__d2b>
 80224c8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80224cc:	9003      	str	r0, [sp, #12]
 80224ce:	2e00      	cmp	r6, #0
 80224d0:	d078      	beq.n	80225c4 <_dtoa_r+0x1dc>
 80224d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80224d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80224d8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80224dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80224e0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80224e4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80224e8:	9712      	str	r7, [sp, #72]	@ 0x48
 80224ea:	4619      	mov	r1, r3
 80224ec:	2200      	movs	r2, #0
 80224ee:	4b7a      	ldr	r3, [pc, #488]	@ (80226d8 <_dtoa_r+0x2f0>)
 80224f0:	f7dd fe80 	bl	80001f4 <__aeabi_dsub>
 80224f4:	a36c      	add	r3, pc, #432	@ (adr r3, 80226a8 <_dtoa_r+0x2c0>)
 80224f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80224fa:	f7de f833 	bl	8000564 <__aeabi_dmul>
 80224fe:	a36c      	add	r3, pc, #432	@ (adr r3, 80226b0 <_dtoa_r+0x2c8>)
 8022500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022504:	f7dd fe78 	bl	80001f8 <__adddf3>
 8022508:	4604      	mov	r4, r0
 802250a:	4630      	mov	r0, r6
 802250c:	460d      	mov	r5, r1
 802250e:	f7dd ffbf 	bl	8000490 <__aeabi_i2d>
 8022512:	a369      	add	r3, pc, #420	@ (adr r3, 80226b8 <_dtoa_r+0x2d0>)
 8022514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022518:	f7de f824 	bl	8000564 <__aeabi_dmul>
 802251c:	4602      	mov	r2, r0
 802251e:	460b      	mov	r3, r1
 8022520:	4620      	mov	r0, r4
 8022522:	4629      	mov	r1, r5
 8022524:	f7dd fe68 	bl	80001f8 <__adddf3>
 8022528:	4604      	mov	r4, r0
 802252a:	460d      	mov	r5, r1
 802252c:	f7de faca 	bl	8000ac4 <__aeabi_d2iz>
 8022530:	2200      	movs	r2, #0
 8022532:	4607      	mov	r7, r0
 8022534:	2300      	movs	r3, #0
 8022536:	4620      	mov	r0, r4
 8022538:	4629      	mov	r1, r5
 802253a:	f7de fa85 	bl	8000a48 <__aeabi_dcmplt>
 802253e:	b140      	cbz	r0, 8022552 <_dtoa_r+0x16a>
 8022540:	4638      	mov	r0, r7
 8022542:	f7dd ffa5 	bl	8000490 <__aeabi_i2d>
 8022546:	4622      	mov	r2, r4
 8022548:	462b      	mov	r3, r5
 802254a:	f7de fa73 	bl	8000a34 <__aeabi_dcmpeq>
 802254e:	b900      	cbnz	r0, 8022552 <_dtoa_r+0x16a>
 8022550:	3f01      	subs	r7, #1
 8022552:	2f16      	cmp	r7, #22
 8022554:	d854      	bhi.n	8022600 <_dtoa_r+0x218>
 8022556:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802255a:	4b60      	ldr	r3, [pc, #384]	@ (80226dc <_dtoa_r+0x2f4>)
 802255c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8022560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022564:	f7de fa70 	bl	8000a48 <__aeabi_dcmplt>
 8022568:	2800      	cmp	r0, #0
 802256a:	d04b      	beq.n	8022604 <_dtoa_r+0x21c>
 802256c:	2300      	movs	r3, #0
 802256e:	3f01      	subs	r7, #1
 8022570:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022572:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8022574:	1b9b      	subs	r3, r3, r6
 8022576:	1e5a      	subs	r2, r3, #1
 8022578:	bf49      	itett	mi
 802257a:	f1c3 0301 	rsbmi	r3, r3, #1
 802257e:	2300      	movpl	r3, #0
 8022580:	9304      	strmi	r3, [sp, #16]
 8022582:	2300      	movmi	r3, #0
 8022584:	9209      	str	r2, [sp, #36]	@ 0x24
 8022586:	bf54      	ite	pl
 8022588:	9304      	strpl	r3, [sp, #16]
 802258a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 802258c:	2f00      	cmp	r7, #0
 802258e:	db3b      	blt.n	8022608 <_dtoa_r+0x220>
 8022590:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022592:	970e      	str	r7, [sp, #56]	@ 0x38
 8022594:	443b      	add	r3, r7
 8022596:	9309      	str	r3, [sp, #36]	@ 0x24
 8022598:	2300      	movs	r3, #0
 802259a:	930a      	str	r3, [sp, #40]	@ 0x28
 802259c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802259e:	2b09      	cmp	r3, #9
 80225a0:	d865      	bhi.n	802266e <_dtoa_r+0x286>
 80225a2:	2b05      	cmp	r3, #5
 80225a4:	bfc4      	itt	gt
 80225a6:	3b04      	subgt	r3, #4
 80225a8:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80225aa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80225ac:	bfc8      	it	gt
 80225ae:	2400      	movgt	r4, #0
 80225b0:	f1a3 0302 	sub.w	r3, r3, #2
 80225b4:	bfd8      	it	le
 80225b6:	2401      	movle	r4, #1
 80225b8:	2b03      	cmp	r3, #3
 80225ba:	d864      	bhi.n	8022686 <_dtoa_r+0x29e>
 80225bc:	e8df f003 	tbb	[pc, r3]
 80225c0:	2c385553 	.word	0x2c385553
 80225c4:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80225c8:	441e      	add	r6, r3
 80225ca:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80225ce:	2b20      	cmp	r3, #32
 80225d0:	bfc1      	itttt	gt
 80225d2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80225d6:	fa08 f803 	lslgt.w	r8, r8, r3
 80225da:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80225de:	fa24 f303 	lsrgt.w	r3, r4, r3
 80225e2:	bfd6      	itet	le
 80225e4:	f1c3 0320 	rsble	r3, r3, #32
 80225e8:	ea48 0003 	orrgt.w	r0, r8, r3
 80225ec:	fa04 f003 	lslle.w	r0, r4, r3
 80225f0:	f7dd ff3e 	bl	8000470 <__aeabi_ui2d>
 80225f4:	2201      	movs	r2, #1
 80225f6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80225fa:	3e01      	subs	r6, #1
 80225fc:	9212      	str	r2, [sp, #72]	@ 0x48
 80225fe:	e774      	b.n	80224ea <_dtoa_r+0x102>
 8022600:	2301      	movs	r3, #1
 8022602:	e7b5      	b.n	8022570 <_dtoa_r+0x188>
 8022604:	900f      	str	r0, [sp, #60]	@ 0x3c
 8022606:	e7b4      	b.n	8022572 <_dtoa_r+0x18a>
 8022608:	9b04      	ldr	r3, [sp, #16]
 802260a:	1bdb      	subs	r3, r3, r7
 802260c:	9304      	str	r3, [sp, #16]
 802260e:	427b      	negs	r3, r7
 8022610:	930a      	str	r3, [sp, #40]	@ 0x28
 8022612:	2300      	movs	r3, #0
 8022614:	930e      	str	r3, [sp, #56]	@ 0x38
 8022616:	e7c1      	b.n	802259c <_dtoa_r+0x1b4>
 8022618:	2301      	movs	r3, #1
 802261a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802261c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 802261e:	eb07 0b03 	add.w	fp, r7, r3
 8022622:	f10b 0301 	add.w	r3, fp, #1
 8022626:	2b01      	cmp	r3, #1
 8022628:	9308      	str	r3, [sp, #32]
 802262a:	bfb8      	it	lt
 802262c:	2301      	movlt	r3, #1
 802262e:	e006      	b.n	802263e <_dtoa_r+0x256>
 8022630:	2301      	movs	r3, #1
 8022632:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022634:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8022636:	2b00      	cmp	r3, #0
 8022638:	dd28      	ble.n	802268c <_dtoa_r+0x2a4>
 802263a:	469b      	mov	fp, r3
 802263c:	9308      	str	r3, [sp, #32]
 802263e:	2100      	movs	r1, #0
 8022640:	2204      	movs	r2, #4
 8022642:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8022646:	f102 0514 	add.w	r5, r2, #20
 802264a:	429d      	cmp	r5, r3
 802264c:	d926      	bls.n	802269c <_dtoa_r+0x2b4>
 802264e:	6041      	str	r1, [r0, #4]
 8022650:	4648      	mov	r0, r9
 8022652:	f000 fd9b 	bl	802318c <_Balloc>
 8022656:	4682      	mov	sl, r0
 8022658:	2800      	cmp	r0, #0
 802265a:	d143      	bne.n	80226e4 <_dtoa_r+0x2fc>
 802265c:	4602      	mov	r2, r0
 802265e:	f240 11af 	movw	r1, #431	@ 0x1af
 8022662:	4b1f      	ldr	r3, [pc, #124]	@ (80226e0 <_dtoa_r+0x2f8>)
 8022664:	e6d4      	b.n	8022410 <_dtoa_r+0x28>
 8022666:	2300      	movs	r3, #0
 8022668:	e7e3      	b.n	8022632 <_dtoa_r+0x24a>
 802266a:	2300      	movs	r3, #0
 802266c:	e7d5      	b.n	802261a <_dtoa_r+0x232>
 802266e:	2401      	movs	r4, #1
 8022670:	2300      	movs	r3, #0
 8022672:	940b      	str	r4, [sp, #44]	@ 0x2c
 8022674:	9320      	str	r3, [sp, #128]	@ 0x80
 8022676:	f04f 3bff 	mov.w	fp, #4294967295
 802267a:	2200      	movs	r2, #0
 802267c:	2312      	movs	r3, #18
 802267e:	f8cd b020 	str.w	fp, [sp, #32]
 8022682:	9221      	str	r2, [sp, #132]	@ 0x84
 8022684:	e7db      	b.n	802263e <_dtoa_r+0x256>
 8022686:	2301      	movs	r3, #1
 8022688:	930b      	str	r3, [sp, #44]	@ 0x2c
 802268a:	e7f4      	b.n	8022676 <_dtoa_r+0x28e>
 802268c:	f04f 0b01 	mov.w	fp, #1
 8022690:	465b      	mov	r3, fp
 8022692:	f8cd b020 	str.w	fp, [sp, #32]
 8022696:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 802269a:	e7d0      	b.n	802263e <_dtoa_r+0x256>
 802269c:	3101      	adds	r1, #1
 802269e:	0052      	lsls	r2, r2, #1
 80226a0:	e7d1      	b.n	8022646 <_dtoa_r+0x25e>
 80226a2:	bf00      	nop
 80226a4:	f3af 8000 	nop.w
 80226a8:	636f4361 	.word	0x636f4361
 80226ac:	3fd287a7 	.word	0x3fd287a7
 80226b0:	8b60c8b3 	.word	0x8b60c8b3
 80226b4:	3fc68a28 	.word	0x3fc68a28
 80226b8:	509f79fb 	.word	0x509f79fb
 80226bc:	3fd34413 	.word	0x3fd34413
 80226c0:	08030d0a 	.word	0x08030d0a
 80226c4:	08030df4 	.word	0x08030df4
 80226c8:	7ff00000 	.word	0x7ff00000
 80226cc:	08030df0 	.word	0x08030df0
 80226d0:	08030ede 	.word	0x08030ede
 80226d4:	08030edd 	.word	0x08030edd
 80226d8:	3ff80000 	.word	0x3ff80000
 80226dc:	08031028 	.word	0x08031028
 80226e0:	08030e4c 	.word	0x08030e4c
 80226e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80226e8:	6018      	str	r0, [r3, #0]
 80226ea:	9b08      	ldr	r3, [sp, #32]
 80226ec:	2b0e      	cmp	r3, #14
 80226ee:	f200 80a1 	bhi.w	8022834 <_dtoa_r+0x44c>
 80226f2:	2c00      	cmp	r4, #0
 80226f4:	f000 809e 	beq.w	8022834 <_dtoa_r+0x44c>
 80226f8:	2f00      	cmp	r7, #0
 80226fa:	dd33      	ble.n	8022764 <_dtoa_r+0x37c>
 80226fc:	4b9c      	ldr	r3, [pc, #624]	@ (8022970 <_dtoa_r+0x588>)
 80226fe:	f007 020f 	and.w	r2, r7, #15
 8022702:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8022706:	05f8      	lsls	r0, r7, #23
 8022708:	e9d3 3400 	ldrd	r3, r4, [r3]
 802270c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8022710:	ea4f 1427 	mov.w	r4, r7, asr #4
 8022714:	d516      	bpl.n	8022744 <_dtoa_r+0x35c>
 8022716:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802271a:	4b96      	ldr	r3, [pc, #600]	@ (8022974 <_dtoa_r+0x58c>)
 802271c:	2603      	movs	r6, #3
 802271e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8022722:	f7de f849 	bl	80007b8 <__aeabi_ddiv>
 8022726:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802272a:	f004 040f 	and.w	r4, r4, #15
 802272e:	4d91      	ldr	r5, [pc, #580]	@ (8022974 <_dtoa_r+0x58c>)
 8022730:	b954      	cbnz	r4, 8022748 <_dtoa_r+0x360>
 8022732:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8022736:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802273a:	f7de f83d 	bl	80007b8 <__aeabi_ddiv>
 802273e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8022742:	e028      	b.n	8022796 <_dtoa_r+0x3ae>
 8022744:	2602      	movs	r6, #2
 8022746:	e7f2      	b.n	802272e <_dtoa_r+0x346>
 8022748:	07e1      	lsls	r1, r4, #31
 802274a:	d508      	bpl.n	802275e <_dtoa_r+0x376>
 802274c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8022750:	e9d5 2300 	ldrd	r2, r3, [r5]
 8022754:	f7dd ff06 	bl	8000564 <__aeabi_dmul>
 8022758:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802275c:	3601      	adds	r6, #1
 802275e:	1064      	asrs	r4, r4, #1
 8022760:	3508      	adds	r5, #8
 8022762:	e7e5      	b.n	8022730 <_dtoa_r+0x348>
 8022764:	f000 80af 	beq.w	80228c6 <_dtoa_r+0x4de>
 8022768:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802276c:	427c      	negs	r4, r7
 802276e:	4b80      	ldr	r3, [pc, #512]	@ (8022970 <_dtoa_r+0x588>)
 8022770:	f004 020f 	and.w	r2, r4, #15
 8022774:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8022778:	e9d3 2300 	ldrd	r2, r3, [r3]
 802277c:	f7dd fef2 	bl	8000564 <__aeabi_dmul>
 8022780:	2602      	movs	r6, #2
 8022782:	2300      	movs	r3, #0
 8022784:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8022788:	4d7a      	ldr	r5, [pc, #488]	@ (8022974 <_dtoa_r+0x58c>)
 802278a:	1124      	asrs	r4, r4, #4
 802278c:	2c00      	cmp	r4, #0
 802278e:	f040 808f 	bne.w	80228b0 <_dtoa_r+0x4c8>
 8022792:	2b00      	cmp	r3, #0
 8022794:	d1d3      	bne.n	802273e <_dtoa_r+0x356>
 8022796:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 802279a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802279c:	2b00      	cmp	r3, #0
 802279e:	f000 8094 	beq.w	80228ca <_dtoa_r+0x4e2>
 80227a2:	2200      	movs	r2, #0
 80227a4:	4620      	mov	r0, r4
 80227a6:	4629      	mov	r1, r5
 80227a8:	4b73      	ldr	r3, [pc, #460]	@ (8022978 <_dtoa_r+0x590>)
 80227aa:	f7de f94d 	bl	8000a48 <__aeabi_dcmplt>
 80227ae:	2800      	cmp	r0, #0
 80227b0:	f000 808b 	beq.w	80228ca <_dtoa_r+0x4e2>
 80227b4:	9b08      	ldr	r3, [sp, #32]
 80227b6:	2b00      	cmp	r3, #0
 80227b8:	f000 8087 	beq.w	80228ca <_dtoa_r+0x4e2>
 80227bc:	f1bb 0f00 	cmp.w	fp, #0
 80227c0:	dd34      	ble.n	802282c <_dtoa_r+0x444>
 80227c2:	4620      	mov	r0, r4
 80227c4:	2200      	movs	r2, #0
 80227c6:	4629      	mov	r1, r5
 80227c8:	4b6c      	ldr	r3, [pc, #432]	@ (802297c <_dtoa_r+0x594>)
 80227ca:	f7dd fecb 	bl	8000564 <__aeabi_dmul>
 80227ce:	465c      	mov	r4, fp
 80227d0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80227d4:	f107 38ff 	add.w	r8, r7, #4294967295
 80227d8:	3601      	adds	r6, #1
 80227da:	4630      	mov	r0, r6
 80227dc:	f7dd fe58 	bl	8000490 <__aeabi_i2d>
 80227e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80227e4:	f7dd febe 	bl	8000564 <__aeabi_dmul>
 80227e8:	2200      	movs	r2, #0
 80227ea:	4b65      	ldr	r3, [pc, #404]	@ (8022980 <_dtoa_r+0x598>)
 80227ec:	f7dd fd04 	bl	80001f8 <__adddf3>
 80227f0:	4605      	mov	r5, r0
 80227f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80227f6:	2c00      	cmp	r4, #0
 80227f8:	d16a      	bne.n	80228d0 <_dtoa_r+0x4e8>
 80227fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80227fe:	2200      	movs	r2, #0
 8022800:	4b60      	ldr	r3, [pc, #384]	@ (8022984 <_dtoa_r+0x59c>)
 8022802:	f7dd fcf7 	bl	80001f4 <__aeabi_dsub>
 8022806:	4602      	mov	r2, r0
 8022808:	460b      	mov	r3, r1
 802280a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802280e:	462a      	mov	r2, r5
 8022810:	4633      	mov	r3, r6
 8022812:	f7de f937 	bl	8000a84 <__aeabi_dcmpgt>
 8022816:	2800      	cmp	r0, #0
 8022818:	f040 8298 	bne.w	8022d4c <_dtoa_r+0x964>
 802281c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022820:	462a      	mov	r2, r5
 8022822:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8022826:	f7de f90f 	bl	8000a48 <__aeabi_dcmplt>
 802282a:	bb38      	cbnz	r0, 802287c <_dtoa_r+0x494>
 802282c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8022830:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8022834:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8022836:	2b00      	cmp	r3, #0
 8022838:	f2c0 8157 	blt.w	8022aea <_dtoa_r+0x702>
 802283c:	2f0e      	cmp	r7, #14
 802283e:	f300 8154 	bgt.w	8022aea <_dtoa_r+0x702>
 8022842:	4b4b      	ldr	r3, [pc, #300]	@ (8022970 <_dtoa_r+0x588>)
 8022844:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8022848:	e9d3 3400 	ldrd	r3, r4, [r3]
 802284c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8022850:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8022852:	2b00      	cmp	r3, #0
 8022854:	f280 80e5 	bge.w	8022a22 <_dtoa_r+0x63a>
 8022858:	9b08      	ldr	r3, [sp, #32]
 802285a:	2b00      	cmp	r3, #0
 802285c:	f300 80e1 	bgt.w	8022a22 <_dtoa_r+0x63a>
 8022860:	d10c      	bne.n	802287c <_dtoa_r+0x494>
 8022862:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8022866:	2200      	movs	r2, #0
 8022868:	4b46      	ldr	r3, [pc, #280]	@ (8022984 <_dtoa_r+0x59c>)
 802286a:	f7dd fe7b 	bl	8000564 <__aeabi_dmul>
 802286e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8022872:	f7de f8fd 	bl	8000a70 <__aeabi_dcmpge>
 8022876:	2800      	cmp	r0, #0
 8022878:	f000 8266 	beq.w	8022d48 <_dtoa_r+0x960>
 802287c:	2400      	movs	r4, #0
 802287e:	4625      	mov	r5, r4
 8022880:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8022882:	4656      	mov	r6, sl
 8022884:	ea6f 0803 	mvn.w	r8, r3
 8022888:	2700      	movs	r7, #0
 802288a:	4621      	mov	r1, r4
 802288c:	4648      	mov	r0, r9
 802288e:	f000 fcbd 	bl	802320c <_Bfree>
 8022892:	2d00      	cmp	r5, #0
 8022894:	f000 80bd 	beq.w	8022a12 <_dtoa_r+0x62a>
 8022898:	b12f      	cbz	r7, 80228a6 <_dtoa_r+0x4be>
 802289a:	42af      	cmp	r7, r5
 802289c:	d003      	beq.n	80228a6 <_dtoa_r+0x4be>
 802289e:	4639      	mov	r1, r7
 80228a0:	4648      	mov	r0, r9
 80228a2:	f000 fcb3 	bl	802320c <_Bfree>
 80228a6:	4629      	mov	r1, r5
 80228a8:	4648      	mov	r0, r9
 80228aa:	f000 fcaf 	bl	802320c <_Bfree>
 80228ae:	e0b0      	b.n	8022a12 <_dtoa_r+0x62a>
 80228b0:	07e2      	lsls	r2, r4, #31
 80228b2:	d505      	bpl.n	80228c0 <_dtoa_r+0x4d8>
 80228b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80228b8:	f7dd fe54 	bl	8000564 <__aeabi_dmul>
 80228bc:	2301      	movs	r3, #1
 80228be:	3601      	adds	r6, #1
 80228c0:	1064      	asrs	r4, r4, #1
 80228c2:	3508      	adds	r5, #8
 80228c4:	e762      	b.n	802278c <_dtoa_r+0x3a4>
 80228c6:	2602      	movs	r6, #2
 80228c8:	e765      	b.n	8022796 <_dtoa_r+0x3ae>
 80228ca:	46b8      	mov	r8, r7
 80228cc:	9c08      	ldr	r4, [sp, #32]
 80228ce:	e784      	b.n	80227da <_dtoa_r+0x3f2>
 80228d0:	4b27      	ldr	r3, [pc, #156]	@ (8022970 <_dtoa_r+0x588>)
 80228d2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80228d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80228d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80228dc:	4454      	add	r4, sl
 80228de:	2900      	cmp	r1, #0
 80228e0:	d054      	beq.n	802298c <_dtoa_r+0x5a4>
 80228e2:	2000      	movs	r0, #0
 80228e4:	4928      	ldr	r1, [pc, #160]	@ (8022988 <_dtoa_r+0x5a0>)
 80228e6:	f7dd ff67 	bl	80007b8 <__aeabi_ddiv>
 80228ea:	4633      	mov	r3, r6
 80228ec:	462a      	mov	r2, r5
 80228ee:	f7dd fc81 	bl	80001f4 <__aeabi_dsub>
 80228f2:	4656      	mov	r6, sl
 80228f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80228f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80228fc:	f7de f8e2 	bl	8000ac4 <__aeabi_d2iz>
 8022900:	4605      	mov	r5, r0
 8022902:	f7dd fdc5 	bl	8000490 <__aeabi_i2d>
 8022906:	4602      	mov	r2, r0
 8022908:	460b      	mov	r3, r1
 802290a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802290e:	f7dd fc71 	bl	80001f4 <__aeabi_dsub>
 8022912:	4602      	mov	r2, r0
 8022914:	460b      	mov	r3, r1
 8022916:	3530      	adds	r5, #48	@ 0x30
 8022918:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802291c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8022920:	f806 5b01 	strb.w	r5, [r6], #1
 8022924:	f7de f890 	bl	8000a48 <__aeabi_dcmplt>
 8022928:	2800      	cmp	r0, #0
 802292a:	d172      	bne.n	8022a12 <_dtoa_r+0x62a>
 802292c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8022930:	2000      	movs	r0, #0
 8022932:	4911      	ldr	r1, [pc, #68]	@ (8022978 <_dtoa_r+0x590>)
 8022934:	f7dd fc5e 	bl	80001f4 <__aeabi_dsub>
 8022938:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802293c:	f7de f884 	bl	8000a48 <__aeabi_dcmplt>
 8022940:	2800      	cmp	r0, #0
 8022942:	f040 80b4 	bne.w	8022aae <_dtoa_r+0x6c6>
 8022946:	42a6      	cmp	r6, r4
 8022948:	f43f af70 	beq.w	802282c <_dtoa_r+0x444>
 802294c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8022950:	2200      	movs	r2, #0
 8022952:	4b0a      	ldr	r3, [pc, #40]	@ (802297c <_dtoa_r+0x594>)
 8022954:	f7dd fe06 	bl	8000564 <__aeabi_dmul>
 8022958:	2200      	movs	r2, #0
 802295a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802295e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022962:	4b06      	ldr	r3, [pc, #24]	@ (802297c <_dtoa_r+0x594>)
 8022964:	f7dd fdfe 	bl	8000564 <__aeabi_dmul>
 8022968:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802296c:	e7c4      	b.n	80228f8 <_dtoa_r+0x510>
 802296e:	bf00      	nop
 8022970:	08031028 	.word	0x08031028
 8022974:	08031000 	.word	0x08031000
 8022978:	3ff00000 	.word	0x3ff00000
 802297c:	40240000 	.word	0x40240000
 8022980:	401c0000 	.word	0x401c0000
 8022984:	40140000 	.word	0x40140000
 8022988:	3fe00000 	.word	0x3fe00000
 802298c:	4631      	mov	r1, r6
 802298e:	4628      	mov	r0, r5
 8022990:	f7dd fde8 	bl	8000564 <__aeabi_dmul>
 8022994:	4656      	mov	r6, sl
 8022996:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802299a:	9413      	str	r4, [sp, #76]	@ 0x4c
 802299c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80229a0:	f7de f890 	bl	8000ac4 <__aeabi_d2iz>
 80229a4:	4605      	mov	r5, r0
 80229a6:	f7dd fd73 	bl	8000490 <__aeabi_i2d>
 80229aa:	4602      	mov	r2, r0
 80229ac:	460b      	mov	r3, r1
 80229ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80229b2:	f7dd fc1f 	bl	80001f4 <__aeabi_dsub>
 80229b6:	4602      	mov	r2, r0
 80229b8:	460b      	mov	r3, r1
 80229ba:	3530      	adds	r5, #48	@ 0x30
 80229bc:	f806 5b01 	strb.w	r5, [r6], #1
 80229c0:	42a6      	cmp	r6, r4
 80229c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80229c6:	f04f 0200 	mov.w	r2, #0
 80229ca:	d124      	bne.n	8022a16 <_dtoa_r+0x62e>
 80229cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80229d0:	4bae      	ldr	r3, [pc, #696]	@ (8022c8c <_dtoa_r+0x8a4>)
 80229d2:	f7dd fc11 	bl	80001f8 <__adddf3>
 80229d6:	4602      	mov	r2, r0
 80229d8:	460b      	mov	r3, r1
 80229da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80229de:	f7de f851 	bl	8000a84 <__aeabi_dcmpgt>
 80229e2:	2800      	cmp	r0, #0
 80229e4:	d163      	bne.n	8022aae <_dtoa_r+0x6c6>
 80229e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80229ea:	2000      	movs	r0, #0
 80229ec:	49a7      	ldr	r1, [pc, #668]	@ (8022c8c <_dtoa_r+0x8a4>)
 80229ee:	f7dd fc01 	bl	80001f4 <__aeabi_dsub>
 80229f2:	4602      	mov	r2, r0
 80229f4:	460b      	mov	r3, r1
 80229f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80229fa:	f7de f825 	bl	8000a48 <__aeabi_dcmplt>
 80229fe:	2800      	cmp	r0, #0
 8022a00:	f43f af14 	beq.w	802282c <_dtoa_r+0x444>
 8022a04:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8022a06:	1e73      	subs	r3, r6, #1
 8022a08:	9313      	str	r3, [sp, #76]	@ 0x4c
 8022a0a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8022a0e:	2b30      	cmp	r3, #48	@ 0x30
 8022a10:	d0f8      	beq.n	8022a04 <_dtoa_r+0x61c>
 8022a12:	4647      	mov	r7, r8
 8022a14:	e03b      	b.n	8022a8e <_dtoa_r+0x6a6>
 8022a16:	4b9e      	ldr	r3, [pc, #632]	@ (8022c90 <_dtoa_r+0x8a8>)
 8022a18:	f7dd fda4 	bl	8000564 <__aeabi_dmul>
 8022a1c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8022a20:	e7bc      	b.n	802299c <_dtoa_r+0x5b4>
 8022a22:	4656      	mov	r6, sl
 8022a24:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8022a28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8022a2c:	4620      	mov	r0, r4
 8022a2e:	4629      	mov	r1, r5
 8022a30:	f7dd fec2 	bl	80007b8 <__aeabi_ddiv>
 8022a34:	f7de f846 	bl	8000ac4 <__aeabi_d2iz>
 8022a38:	4680      	mov	r8, r0
 8022a3a:	f7dd fd29 	bl	8000490 <__aeabi_i2d>
 8022a3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8022a42:	f7dd fd8f 	bl	8000564 <__aeabi_dmul>
 8022a46:	4602      	mov	r2, r0
 8022a48:	460b      	mov	r3, r1
 8022a4a:	4620      	mov	r0, r4
 8022a4c:	4629      	mov	r1, r5
 8022a4e:	f7dd fbd1 	bl	80001f4 <__aeabi_dsub>
 8022a52:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8022a56:	9d08      	ldr	r5, [sp, #32]
 8022a58:	f806 4b01 	strb.w	r4, [r6], #1
 8022a5c:	eba6 040a 	sub.w	r4, r6, sl
 8022a60:	42a5      	cmp	r5, r4
 8022a62:	4602      	mov	r2, r0
 8022a64:	460b      	mov	r3, r1
 8022a66:	d133      	bne.n	8022ad0 <_dtoa_r+0x6e8>
 8022a68:	f7dd fbc6 	bl	80001f8 <__adddf3>
 8022a6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8022a70:	4604      	mov	r4, r0
 8022a72:	460d      	mov	r5, r1
 8022a74:	f7de f806 	bl	8000a84 <__aeabi_dcmpgt>
 8022a78:	b9c0      	cbnz	r0, 8022aac <_dtoa_r+0x6c4>
 8022a7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8022a7e:	4620      	mov	r0, r4
 8022a80:	4629      	mov	r1, r5
 8022a82:	f7dd ffd7 	bl	8000a34 <__aeabi_dcmpeq>
 8022a86:	b110      	cbz	r0, 8022a8e <_dtoa_r+0x6a6>
 8022a88:	f018 0f01 	tst.w	r8, #1
 8022a8c:	d10e      	bne.n	8022aac <_dtoa_r+0x6c4>
 8022a8e:	4648      	mov	r0, r9
 8022a90:	9903      	ldr	r1, [sp, #12]
 8022a92:	f000 fbbb 	bl	802320c <_Bfree>
 8022a96:	2300      	movs	r3, #0
 8022a98:	7033      	strb	r3, [r6, #0]
 8022a9a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8022a9c:	3701      	adds	r7, #1
 8022a9e:	601f      	str	r7, [r3, #0]
 8022aa0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022aa2:	2b00      	cmp	r3, #0
 8022aa4:	f000 824b 	beq.w	8022f3e <_dtoa_r+0xb56>
 8022aa8:	601e      	str	r6, [r3, #0]
 8022aaa:	e248      	b.n	8022f3e <_dtoa_r+0xb56>
 8022aac:	46b8      	mov	r8, r7
 8022aae:	4633      	mov	r3, r6
 8022ab0:	461e      	mov	r6, r3
 8022ab2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8022ab6:	2a39      	cmp	r2, #57	@ 0x39
 8022ab8:	d106      	bne.n	8022ac8 <_dtoa_r+0x6e0>
 8022aba:	459a      	cmp	sl, r3
 8022abc:	d1f8      	bne.n	8022ab0 <_dtoa_r+0x6c8>
 8022abe:	2230      	movs	r2, #48	@ 0x30
 8022ac0:	f108 0801 	add.w	r8, r8, #1
 8022ac4:	f88a 2000 	strb.w	r2, [sl]
 8022ac8:	781a      	ldrb	r2, [r3, #0]
 8022aca:	3201      	adds	r2, #1
 8022acc:	701a      	strb	r2, [r3, #0]
 8022ace:	e7a0      	b.n	8022a12 <_dtoa_r+0x62a>
 8022ad0:	2200      	movs	r2, #0
 8022ad2:	4b6f      	ldr	r3, [pc, #444]	@ (8022c90 <_dtoa_r+0x8a8>)
 8022ad4:	f7dd fd46 	bl	8000564 <__aeabi_dmul>
 8022ad8:	2200      	movs	r2, #0
 8022ada:	2300      	movs	r3, #0
 8022adc:	4604      	mov	r4, r0
 8022ade:	460d      	mov	r5, r1
 8022ae0:	f7dd ffa8 	bl	8000a34 <__aeabi_dcmpeq>
 8022ae4:	2800      	cmp	r0, #0
 8022ae6:	d09f      	beq.n	8022a28 <_dtoa_r+0x640>
 8022ae8:	e7d1      	b.n	8022a8e <_dtoa_r+0x6a6>
 8022aea:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8022aec:	2a00      	cmp	r2, #0
 8022aee:	f000 80ea 	beq.w	8022cc6 <_dtoa_r+0x8de>
 8022af2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8022af4:	2a01      	cmp	r2, #1
 8022af6:	f300 80cd 	bgt.w	8022c94 <_dtoa_r+0x8ac>
 8022afa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8022afc:	2a00      	cmp	r2, #0
 8022afe:	f000 80c1 	beq.w	8022c84 <_dtoa_r+0x89c>
 8022b02:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8022b06:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8022b08:	9e04      	ldr	r6, [sp, #16]
 8022b0a:	9a04      	ldr	r2, [sp, #16]
 8022b0c:	2101      	movs	r1, #1
 8022b0e:	441a      	add	r2, r3
 8022b10:	9204      	str	r2, [sp, #16]
 8022b12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022b14:	4648      	mov	r0, r9
 8022b16:	441a      	add	r2, r3
 8022b18:	9209      	str	r2, [sp, #36]	@ 0x24
 8022b1a:	f000 fc2b 	bl	8023374 <__i2b>
 8022b1e:	4605      	mov	r5, r0
 8022b20:	b166      	cbz	r6, 8022b3c <_dtoa_r+0x754>
 8022b22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022b24:	2b00      	cmp	r3, #0
 8022b26:	dd09      	ble.n	8022b3c <_dtoa_r+0x754>
 8022b28:	42b3      	cmp	r3, r6
 8022b2a:	bfa8      	it	ge
 8022b2c:	4633      	movge	r3, r6
 8022b2e:	9a04      	ldr	r2, [sp, #16]
 8022b30:	1af6      	subs	r6, r6, r3
 8022b32:	1ad2      	subs	r2, r2, r3
 8022b34:	9204      	str	r2, [sp, #16]
 8022b36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022b38:	1ad3      	subs	r3, r2, r3
 8022b3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8022b3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022b3e:	b30b      	cbz	r3, 8022b84 <_dtoa_r+0x79c>
 8022b40:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022b42:	2b00      	cmp	r3, #0
 8022b44:	f000 80c6 	beq.w	8022cd4 <_dtoa_r+0x8ec>
 8022b48:	2c00      	cmp	r4, #0
 8022b4a:	f000 80c0 	beq.w	8022cce <_dtoa_r+0x8e6>
 8022b4e:	4629      	mov	r1, r5
 8022b50:	4622      	mov	r2, r4
 8022b52:	4648      	mov	r0, r9
 8022b54:	f000 fcc6 	bl	80234e4 <__pow5mult>
 8022b58:	9a03      	ldr	r2, [sp, #12]
 8022b5a:	4601      	mov	r1, r0
 8022b5c:	4605      	mov	r5, r0
 8022b5e:	4648      	mov	r0, r9
 8022b60:	f000 fc1e 	bl	80233a0 <__multiply>
 8022b64:	9903      	ldr	r1, [sp, #12]
 8022b66:	4680      	mov	r8, r0
 8022b68:	4648      	mov	r0, r9
 8022b6a:	f000 fb4f 	bl	802320c <_Bfree>
 8022b6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022b70:	1b1b      	subs	r3, r3, r4
 8022b72:	930a      	str	r3, [sp, #40]	@ 0x28
 8022b74:	f000 80b1 	beq.w	8022cda <_dtoa_r+0x8f2>
 8022b78:	4641      	mov	r1, r8
 8022b7a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022b7c:	4648      	mov	r0, r9
 8022b7e:	f000 fcb1 	bl	80234e4 <__pow5mult>
 8022b82:	9003      	str	r0, [sp, #12]
 8022b84:	2101      	movs	r1, #1
 8022b86:	4648      	mov	r0, r9
 8022b88:	f000 fbf4 	bl	8023374 <__i2b>
 8022b8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022b8e:	4604      	mov	r4, r0
 8022b90:	2b00      	cmp	r3, #0
 8022b92:	f000 81d8 	beq.w	8022f46 <_dtoa_r+0xb5e>
 8022b96:	461a      	mov	r2, r3
 8022b98:	4601      	mov	r1, r0
 8022b9a:	4648      	mov	r0, r9
 8022b9c:	f000 fca2 	bl	80234e4 <__pow5mult>
 8022ba0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022ba2:	4604      	mov	r4, r0
 8022ba4:	2b01      	cmp	r3, #1
 8022ba6:	f300 809f 	bgt.w	8022ce8 <_dtoa_r+0x900>
 8022baa:	9b06      	ldr	r3, [sp, #24]
 8022bac:	2b00      	cmp	r3, #0
 8022bae:	f040 8097 	bne.w	8022ce0 <_dtoa_r+0x8f8>
 8022bb2:	9b07      	ldr	r3, [sp, #28]
 8022bb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8022bb8:	2b00      	cmp	r3, #0
 8022bba:	f040 8093 	bne.w	8022ce4 <_dtoa_r+0x8fc>
 8022bbe:	9b07      	ldr	r3, [sp, #28]
 8022bc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8022bc4:	0d1b      	lsrs	r3, r3, #20
 8022bc6:	051b      	lsls	r3, r3, #20
 8022bc8:	b133      	cbz	r3, 8022bd8 <_dtoa_r+0x7f0>
 8022bca:	9b04      	ldr	r3, [sp, #16]
 8022bcc:	3301      	adds	r3, #1
 8022bce:	9304      	str	r3, [sp, #16]
 8022bd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022bd2:	3301      	adds	r3, #1
 8022bd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8022bd6:	2301      	movs	r3, #1
 8022bd8:	930a      	str	r3, [sp, #40]	@ 0x28
 8022bda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022bdc:	2b00      	cmp	r3, #0
 8022bde:	f000 81b8 	beq.w	8022f52 <_dtoa_r+0xb6a>
 8022be2:	6923      	ldr	r3, [r4, #16]
 8022be4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8022be8:	6918      	ldr	r0, [r3, #16]
 8022bea:	f000 fb77 	bl	80232dc <__hi0bits>
 8022bee:	f1c0 0020 	rsb	r0, r0, #32
 8022bf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022bf4:	4418      	add	r0, r3
 8022bf6:	f010 001f 	ands.w	r0, r0, #31
 8022bfa:	f000 8082 	beq.w	8022d02 <_dtoa_r+0x91a>
 8022bfe:	f1c0 0320 	rsb	r3, r0, #32
 8022c02:	2b04      	cmp	r3, #4
 8022c04:	dd73      	ble.n	8022cee <_dtoa_r+0x906>
 8022c06:	9b04      	ldr	r3, [sp, #16]
 8022c08:	f1c0 001c 	rsb	r0, r0, #28
 8022c0c:	4403      	add	r3, r0
 8022c0e:	9304      	str	r3, [sp, #16]
 8022c10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022c12:	4406      	add	r6, r0
 8022c14:	4403      	add	r3, r0
 8022c16:	9309      	str	r3, [sp, #36]	@ 0x24
 8022c18:	9b04      	ldr	r3, [sp, #16]
 8022c1a:	2b00      	cmp	r3, #0
 8022c1c:	dd05      	ble.n	8022c2a <_dtoa_r+0x842>
 8022c1e:	461a      	mov	r2, r3
 8022c20:	4648      	mov	r0, r9
 8022c22:	9903      	ldr	r1, [sp, #12]
 8022c24:	f000 fcb8 	bl	8023598 <__lshift>
 8022c28:	9003      	str	r0, [sp, #12]
 8022c2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022c2c:	2b00      	cmp	r3, #0
 8022c2e:	dd05      	ble.n	8022c3c <_dtoa_r+0x854>
 8022c30:	4621      	mov	r1, r4
 8022c32:	461a      	mov	r2, r3
 8022c34:	4648      	mov	r0, r9
 8022c36:	f000 fcaf 	bl	8023598 <__lshift>
 8022c3a:	4604      	mov	r4, r0
 8022c3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022c3e:	2b00      	cmp	r3, #0
 8022c40:	d061      	beq.n	8022d06 <_dtoa_r+0x91e>
 8022c42:	4621      	mov	r1, r4
 8022c44:	9803      	ldr	r0, [sp, #12]
 8022c46:	f000 fd13 	bl	8023670 <__mcmp>
 8022c4a:	2800      	cmp	r0, #0
 8022c4c:	da5b      	bge.n	8022d06 <_dtoa_r+0x91e>
 8022c4e:	2300      	movs	r3, #0
 8022c50:	220a      	movs	r2, #10
 8022c52:	4648      	mov	r0, r9
 8022c54:	9903      	ldr	r1, [sp, #12]
 8022c56:	f000 fafb 	bl	8023250 <__multadd>
 8022c5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022c5c:	f107 38ff 	add.w	r8, r7, #4294967295
 8022c60:	9003      	str	r0, [sp, #12]
 8022c62:	2b00      	cmp	r3, #0
 8022c64:	f000 8177 	beq.w	8022f56 <_dtoa_r+0xb6e>
 8022c68:	4629      	mov	r1, r5
 8022c6a:	2300      	movs	r3, #0
 8022c6c:	220a      	movs	r2, #10
 8022c6e:	4648      	mov	r0, r9
 8022c70:	f000 faee 	bl	8023250 <__multadd>
 8022c74:	f1bb 0f00 	cmp.w	fp, #0
 8022c78:	4605      	mov	r5, r0
 8022c7a:	dc6f      	bgt.n	8022d5c <_dtoa_r+0x974>
 8022c7c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022c7e:	2b02      	cmp	r3, #2
 8022c80:	dc49      	bgt.n	8022d16 <_dtoa_r+0x92e>
 8022c82:	e06b      	b.n	8022d5c <_dtoa_r+0x974>
 8022c84:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8022c86:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8022c8a:	e73c      	b.n	8022b06 <_dtoa_r+0x71e>
 8022c8c:	3fe00000 	.word	0x3fe00000
 8022c90:	40240000 	.word	0x40240000
 8022c94:	9b08      	ldr	r3, [sp, #32]
 8022c96:	1e5c      	subs	r4, r3, #1
 8022c98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022c9a:	42a3      	cmp	r3, r4
 8022c9c:	db09      	blt.n	8022cb2 <_dtoa_r+0x8ca>
 8022c9e:	1b1c      	subs	r4, r3, r4
 8022ca0:	9b08      	ldr	r3, [sp, #32]
 8022ca2:	2b00      	cmp	r3, #0
 8022ca4:	f6bf af30 	bge.w	8022b08 <_dtoa_r+0x720>
 8022ca8:	9b04      	ldr	r3, [sp, #16]
 8022caa:	9a08      	ldr	r2, [sp, #32]
 8022cac:	1a9e      	subs	r6, r3, r2
 8022cae:	2300      	movs	r3, #0
 8022cb0:	e72b      	b.n	8022b0a <_dtoa_r+0x722>
 8022cb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022cb4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022cb6:	1ae3      	subs	r3, r4, r3
 8022cb8:	441a      	add	r2, r3
 8022cba:	940a      	str	r4, [sp, #40]	@ 0x28
 8022cbc:	9e04      	ldr	r6, [sp, #16]
 8022cbe:	2400      	movs	r4, #0
 8022cc0:	9b08      	ldr	r3, [sp, #32]
 8022cc2:	920e      	str	r2, [sp, #56]	@ 0x38
 8022cc4:	e721      	b.n	8022b0a <_dtoa_r+0x722>
 8022cc6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8022cc8:	9e04      	ldr	r6, [sp, #16]
 8022cca:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8022ccc:	e728      	b.n	8022b20 <_dtoa_r+0x738>
 8022cce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8022cd2:	e751      	b.n	8022b78 <_dtoa_r+0x790>
 8022cd4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022cd6:	9903      	ldr	r1, [sp, #12]
 8022cd8:	e750      	b.n	8022b7c <_dtoa_r+0x794>
 8022cda:	f8cd 800c 	str.w	r8, [sp, #12]
 8022cde:	e751      	b.n	8022b84 <_dtoa_r+0x79c>
 8022ce0:	2300      	movs	r3, #0
 8022ce2:	e779      	b.n	8022bd8 <_dtoa_r+0x7f0>
 8022ce4:	9b06      	ldr	r3, [sp, #24]
 8022ce6:	e777      	b.n	8022bd8 <_dtoa_r+0x7f0>
 8022ce8:	2300      	movs	r3, #0
 8022cea:	930a      	str	r3, [sp, #40]	@ 0x28
 8022cec:	e779      	b.n	8022be2 <_dtoa_r+0x7fa>
 8022cee:	d093      	beq.n	8022c18 <_dtoa_r+0x830>
 8022cf0:	9a04      	ldr	r2, [sp, #16]
 8022cf2:	331c      	adds	r3, #28
 8022cf4:	441a      	add	r2, r3
 8022cf6:	9204      	str	r2, [sp, #16]
 8022cf8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022cfa:	441e      	add	r6, r3
 8022cfc:	441a      	add	r2, r3
 8022cfe:	9209      	str	r2, [sp, #36]	@ 0x24
 8022d00:	e78a      	b.n	8022c18 <_dtoa_r+0x830>
 8022d02:	4603      	mov	r3, r0
 8022d04:	e7f4      	b.n	8022cf0 <_dtoa_r+0x908>
 8022d06:	9b08      	ldr	r3, [sp, #32]
 8022d08:	46b8      	mov	r8, r7
 8022d0a:	2b00      	cmp	r3, #0
 8022d0c:	dc20      	bgt.n	8022d50 <_dtoa_r+0x968>
 8022d0e:	469b      	mov	fp, r3
 8022d10:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022d12:	2b02      	cmp	r3, #2
 8022d14:	dd1e      	ble.n	8022d54 <_dtoa_r+0x96c>
 8022d16:	f1bb 0f00 	cmp.w	fp, #0
 8022d1a:	f47f adb1 	bne.w	8022880 <_dtoa_r+0x498>
 8022d1e:	4621      	mov	r1, r4
 8022d20:	465b      	mov	r3, fp
 8022d22:	2205      	movs	r2, #5
 8022d24:	4648      	mov	r0, r9
 8022d26:	f000 fa93 	bl	8023250 <__multadd>
 8022d2a:	4601      	mov	r1, r0
 8022d2c:	4604      	mov	r4, r0
 8022d2e:	9803      	ldr	r0, [sp, #12]
 8022d30:	f000 fc9e 	bl	8023670 <__mcmp>
 8022d34:	2800      	cmp	r0, #0
 8022d36:	f77f ada3 	ble.w	8022880 <_dtoa_r+0x498>
 8022d3a:	4656      	mov	r6, sl
 8022d3c:	2331      	movs	r3, #49	@ 0x31
 8022d3e:	f108 0801 	add.w	r8, r8, #1
 8022d42:	f806 3b01 	strb.w	r3, [r6], #1
 8022d46:	e59f      	b.n	8022888 <_dtoa_r+0x4a0>
 8022d48:	46b8      	mov	r8, r7
 8022d4a:	9c08      	ldr	r4, [sp, #32]
 8022d4c:	4625      	mov	r5, r4
 8022d4e:	e7f4      	b.n	8022d3a <_dtoa_r+0x952>
 8022d50:	f8dd b020 	ldr.w	fp, [sp, #32]
 8022d54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022d56:	2b00      	cmp	r3, #0
 8022d58:	f000 8101 	beq.w	8022f5e <_dtoa_r+0xb76>
 8022d5c:	2e00      	cmp	r6, #0
 8022d5e:	dd05      	ble.n	8022d6c <_dtoa_r+0x984>
 8022d60:	4629      	mov	r1, r5
 8022d62:	4632      	mov	r2, r6
 8022d64:	4648      	mov	r0, r9
 8022d66:	f000 fc17 	bl	8023598 <__lshift>
 8022d6a:	4605      	mov	r5, r0
 8022d6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022d6e:	2b00      	cmp	r3, #0
 8022d70:	d05c      	beq.n	8022e2c <_dtoa_r+0xa44>
 8022d72:	4648      	mov	r0, r9
 8022d74:	6869      	ldr	r1, [r5, #4]
 8022d76:	f000 fa09 	bl	802318c <_Balloc>
 8022d7a:	4606      	mov	r6, r0
 8022d7c:	b928      	cbnz	r0, 8022d8a <_dtoa_r+0x9a2>
 8022d7e:	4602      	mov	r2, r0
 8022d80:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8022d84:	4b80      	ldr	r3, [pc, #512]	@ (8022f88 <_dtoa_r+0xba0>)
 8022d86:	f7ff bb43 	b.w	8022410 <_dtoa_r+0x28>
 8022d8a:	692a      	ldr	r2, [r5, #16]
 8022d8c:	f105 010c 	add.w	r1, r5, #12
 8022d90:	3202      	adds	r2, #2
 8022d92:	0092      	lsls	r2, r2, #2
 8022d94:	300c      	adds	r0, #12
 8022d96:	f7ff fa72 	bl	802227e <memcpy>
 8022d9a:	2201      	movs	r2, #1
 8022d9c:	4631      	mov	r1, r6
 8022d9e:	4648      	mov	r0, r9
 8022da0:	f000 fbfa 	bl	8023598 <__lshift>
 8022da4:	462f      	mov	r7, r5
 8022da6:	4605      	mov	r5, r0
 8022da8:	f10a 0301 	add.w	r3, sl, #1
 8022dac:	9304      	str	r3, [sp, #16]
 8022dae:	eb0a 030b 	add.w	r3, sl, fp
 8022db2:	930a      	str	r3, [sp, #40]	@ 0x28
 8022db4:	9b06      	ldr	r3, [sp, #24]
 8022db6:	f003 0301 	and.w	r3, r3, #1
 8022dba:	9309      	str	r3, [sp, #36]	@ 0x24
 8022dbc:	9b04      	ldr	r3, [sp, #16]
 8022dbe:	4621      	mov	r1, r4
 8022dc0:	9803      	ldr	r0, [sp, #12]
 8022dc2:	f103 3bff 	add.w	fp, r3, #4294967295
 8022dc6:	f7ff fa87 	bl	80222d8 <quorem>
 8022dca:	4603      	mov	r3, r0
 8022dcc:	4639      	mov	r1, r7
 8022dce:	3330      	adds	r3, #48	@ 0x30
 8022dd0:	9006      	str	r0, [sp, #24]
 8022dd2:	9803      	ldr	r0, [sp, #12]
 8022dd4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022dd6:	f000 fc4b 	bl	8023670 <__mcmp>
 8022dda:	462a      	mov	r2, r5
 8022ddc:	9008      	str	r0, [sp, #32]
 8022dde:	4621      	mov	r1, r4
 8022de0:	4648      	mov	r0, r9
 8022de2:	f000 fc61 	bl	80236a8 <__mdiff>
 8022de6:	68c2      	ldr	r2, [r0, #12]
 8022de8:	4606      	mov	r6, r0
 8022dea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022dec:	bb02      	cbnz	r2, 8022e30 <_dtoa_r+0xa48>
 8022dee:	4601      	mov	r1, r0
 8022df0:	9803      	ldr	r0, [sp, #12]
 8022df2:	f000 fc3d 	bl	8023670 <__mcmp>
 8022df6:	4602      	mov	r2, r0
 8022df8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022dfa:	4631      	mov	r1, r6
 8022dfc:	4648      	mov	r0, r9
 8022dfe:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8022e02:	f000 fa03 	bl	802320c <_Bfree>
 8022e06:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022e08:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8022e0a:	9e04      	ldr	r6, [sp, #16]
 8022e0c:	ea42 0103 	orr.w	r1, r2, r3
 8022e10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022e12:	4319      	orrs	r1, r3
 8022e14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022e16:	d10d      	bne.n	8022e34 <_dtoa_r+0xa4c>
 8022e18:	2b39      	cmp	r3, #57	@ 0x39
 8022e1a:	d027      	beq.n	8022e6c <_dtoa_r+0xa84>
 8022e1c:	9a08      	ldr	r2, [sp, #32]
 8022e1e:	2a00      	cmp	r2, #0
 8022e20:	dd01      	ble.n	8022e26 <_dtoa_r+0xa3e>
 8022e22:	9b06      	ldr	r3, [sp, #24]
 8022e24:	3331      	adds	r3, #49	@ 0x31
 8022e26:	f88b 3000 	strb.w	r3, [fp]
 8022e2a:	e52e      	b.n	802288a <_dtoa_r+0x4a2>
 8022e2c:	4628      	mov	r0, r5
 8022e2e:	e7b9      	b.n	8022da4 <_dtoa_r+0x9bc>
 8022e30:	2201      	movs	r2, #1
 8022e32:	e7e2      	b.n	8022dfa <_dtoa_r+0xa12>
 8022e34:	9908      	ldr	r1, [sp, #32]
 8022e36:	2900      	cmp	r1, #0
 8022e38:	db04      	blt.n	8022e44 <_dtoa_r+0xa5c>
 8022e3a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8022e3c:	4301      	orrs	r1, r0
 8022e3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022e40:	4301      	orrs	r1, r0
 8022e42:	d120      	bne.n	8022e86 <_dtoa_r+0xa9e>
 8022e44:	2a00      	cmp	r2, #0
 8022e46:	ddee      	ble.n	8022e26 <_dtoa_r+0xa3e>
 8022e48:	2201      	movs	r2, #1
 8022e4a:	9903      	ldr	r1, [sp, #12]
 8022e4c:	4648      	mov	r0, r9
 8022e4e:	9304      	str	r3, [sp, #16]
 8022e50:	f000 fba2 	bl	8023598 <__lshift>
 8022e54:	4621      	mov	r1, r4
 8022e56:	9003      	str	r0, [sp, #12]
 8022e58:	f000 fc0a 	bl	8023670 <__mcmp>
 8022e5c:	2800      	cmp	r0, #0
 8022e5e:	9b04      	ldr	r3, [sp, #16]
 8022e60:	dc02      	bgt.n	8022e68 <_dtoa_r+0xa80>
 8022e62:	d1e0      	bne.n	8022e26 <_dtoa_r+0xa3e>
 8022e64:	07da      	lsls	r2, r3, #31
 8022e66:	d5de      	bpl.n	8022e26 <_dtoa_r+0xa3e>
 8022e68:	2b39      	cmp	r3, #57	@ 0x39
 8022e6a:	d1da      	bne.n	8022e22 <_dtoa_r+0xa3a>
 8022e6c:	2339      	movs	r3, #57	@ 0x39
 8022e6e:	f88b 3000 	strb.w	r3, [fp]
 8022e72:	4633      	mov	r3, r6
 8022e74:	461e      	mov	r6, r3
 8022e76:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8022e7a:	3b01      	subs	r3, #1
 8022e7c:	2a39      	cmp	r2, #57	@ 0x39
 8022e7e:	d04e      	beq.n	8022f1e <_dtoa_r+0xb36>
 8022e80:	3201      	adds	r2, #1
 8022e82:	701a      	strb	r2, [r3, #0]
 8022e84:	e501      	b.n	802288a <_dtoa_r+0x4a2>
 8022e86:	2a00      	cmp	r2, #0
 8022e88:	dd03      	ble.n	8022e92 <_dtoa_r+0xaaa>
 8022e8a:	2b39      	cmp	r3, #57	@ 0x39
 8022e8c:	d0ee      	beq.n	8022e6c <_dtoa_r+0xa84>
 8022e8e:	3301      	adds	r3, #1
 8022e90:	e7c9      	b.n	8022e26 <_dtoa_r+0xa3e>
 8022e92:	9a04      	ldr	r2, [sp, #16]
 8022e94:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022e96:	f802 3c01 	strb.w	r3, [r2, #-1]
 8022e9a:	428a      	cmp	r2, r1
 8022e9c:	d028      	beq.n	8022ef0 <_dtoa_r+0xb08>
 8022e9e:	2300      	movs	r3, #0
 8022ea0:	220a      	movs	r2, #10
 8022ea2:	9903      	ldr	r1, [sp, #12]
 8022ea4:	4648      	mov	r0, r9
 8022ea6:	f000 f9d3 	bl	8023250 <__multadd>
 8022eaa:	42af      	cmp	r7, r5
 8022eac:	9003      	str	r0, [sp, #12]
 8022eae:	f04f 0300 	mov.w	r3, #0
 8022eb2:	f04f 020a 	mov.w	r2, #10
 8022eb6:	4639      	mov	r1, r7
 8022eb8:	4648      	mov	r0, r9
 8022eba:	d107      	bne.n	8022ecc <_dtoa_r+0xae4>
 8022ebc:	f000 f9c8 	bl	8023250 <__multadd>
 8022ec0:	4607      	mov	r7, r0
 8022ec2:	4605      	mov	r5, r0
 8022ec4:	9b04      	ldr	r3, [sp, #16]
 8022ec6:	3301      	adds	r3, #1
 8022ec8:	9304      	str	r3, [sp, #16]
 8022eca:	e777      	b.n	8022dbc <_dtoa_r+0x9d4>
 8022ecc:	f000 f9c0 	bl	8023250 <__multadd>
 8022ed0:	4629      	mov	r1, r5
 8022ed2:	4607      	mov	r7, r0
 8022ed4:	2300      	movs	r3, #0
 8022ed6:	220a      	movs	r2, #10
 8022ed8:	4648      	mov	r0, r9
 8022eda:	f000 f9b9 	bl	8023250 <__multadd>
 8022ede:	4605      	mov	r5, r0
 8022ee0:	e7f0      	b.n	8022ec4 <_dtoa_r+0xadc>
 8022ee2:	f1bb 0f00 	cmp.w	fp, #0
 8022ee6:	bfcc      	ite	gt
 8022ee8:	465e      	movgt	r6, fp
 8022eea:	2601      	movle	r6, #1
 8022eec:	2700      	movs	r7, #0
 8022eee:	4456      	add	r6, sl
 8022ef0:	2201      	movs	r2, #1
 8022ef2:	9903      	ldr	r1, [sp, #12]
 8022ef4:	4648      	mov	r0, r9
 8022ef6:	9304      	str	r3, [sp, #16]
 8022ef8:	f000 fb4e 	bl	8023598 <__lshift>
 8022efc:	4621      	mov	r1, r4
 8022efe:	9003      	str	r0, [sp, #12]
 8022f00:	f000 fbb6 	bl	8023670 <__mcmp>
 8022f04:	2800      	cmp	r0, #0
 8022f06:	dcb4      	bgt.n	8022e72 <_dtoa_r+0xa8a>
 8022f08:	d102      	bne.n	8022f10 <_dtoa_r+0xb28>
 8022f0a:	9b04      	ldr	r3, [sp, #16]
 8022f0c:	07db      	lsls	r3, r3, #31
 8022f0e:	d4b0      	bmi.n	8022e72 <_dtoa_r+0xa8a>
 8022f10:	4633      	mov	r3, r6
 8022f12:	461e      	mov	r6, r3
 8022f14:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8022f18:	2a30      	cmp	r2, #48	@ 0x30
 8022f1a:	d0fa      	beq.n	8022f12 <_dtoa_r+0xb2a>
 8022f1c:	e4b5      	b.n	802288a <_dtoa_r+0x4a2>
 8022f1e:	459a      	cmp	sl, r3
 8022f20:	d1a8      	bne.n	8022e74 <_dtoa_r+0xa8c>
 8022f22:	2331      	movs	r3, #49	@ 0x31
 8022f24:	f108 0801 	add.w	r8, r8, #1
 8022f28:	f88a 3000 	strb.w	r3, [sl]
 8022f2c:	e4ad      	b.n	802288a <_dtoa_r+0x4a2>
 8022f2e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022f30:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8022f8c <_dtoa_r+0xba4>
 8022f34:	b11b      	cbz	r3, 8022f3e <_dtoa_r+0xb56>
 8022f36:	f10a 0308 	add.w	r3, sl, #8
 8022f3a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8022f3c:	6013      	str	r3, [r2, #0]
 8022f3e:	4650      	mov	r0, sl
 8022f40:	b017      	add	sp, #92	@ 0x5c
 8022f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022f46:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022f48:	2b01      	cmp	r3, #1
 8022f4a:	f77f ae2e 	ble.w	8022baa <_dtoa_r+0x7c2>
 8022f4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022f50:	930a      	str	r3, [sp, #40]	@ 0x28
 8022f52:	2001      	movs	r0, #1
 8022f54:	e64d      	b.n	8022bf2 <_dtoa_r+0x80a>
 8022f56:	f1bb 0f00 	cmp.w	fp, #0
 8022f5a:	f77f aed9 	ble.w	8022d10 <_dtoa_r+0x928>
 8022f5e:	4656      	mov	r6, sl
 8022f60:	4621      	mov	r1, r4
 8022f62:	9803      	ldr	r0, [sp, #12]
 8022f64:	f7ff f9b8 	bl	80222d8 <quorem>
 8022f68:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8022f6c:	f806 3b01 	strb.w	r3, [r6], #1
 8022f70:	eba6 020a 	sub.w	r2, r6, sl
 8022f74:	4593      	cmp	fp, r2
 8022f76:	ddb4      	ble.n	8022ee2 <_dtoa_r+0xafa>
 8022f78:	2300      	movs	r3, #0
 8022f7a:	220a      	movs	r2, #10
 8022f7c:	4648      	mov	r0, r9
 8022f7e:	9903      	ldr	r1, [sp, #12]
 8022f80:	f000 f966 	bl	8023250 <__multadd>
 8022f84:	9003      	str	r0, [sp, #12]
 8022f86:	e7eb      	b.n	8022f60 <_dtoa_r+0xb78>
 8022f88:	08030e4c 	.word	0x08030e4c
 8022f8c:	08030de7 	.word	0x08030de7

08022f90 <_free_r>:
 8022f90:	b538      	push	{r3, r4, r5, lr}
 8022f92:	4605      	mov	r5, r0
 8022f94:	2900      	cmp	r1, #0
 8022f96:	d040      	beq.n	802301a <_free_r+0x8a>
 8022f98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022f9c:	1f0c      	subs	r4, r1, #4
 8022f9e:	2b00      	cmp	r3, #0
 8022fa0:	bfb8      	it	lt
 8022fa2:	18e4      	addlt	r4, r4, r3
 8022fa4:	f000 f8e6 	bl	8023174 <__malloc_lock>
 8022fa8:	4a1c      	ldr	r2, [pc, #112]	@ (802301c <_free_r+0x8c>)
 8022faa:	6813      	ldr	r3, [r2, #0]
 8022fac:	b933      	cbnz	r3, 8022fbc <_free_r+0x2c>
 8022fae:	6063      	str	r3, [r4, #4]
 8022fb0:	6014      	str	r4, [r2, #0]
 8022fb2:	4628      	mov	r0, r5
 8022fb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022fb8:	f000 b8e2 	b.w	8023180 <__malloc_unlock>
 8022fbc:	42a3      	cmp	r3, r4
 8022fbe:	d908      	bls.n	8022fd2 <_free_r+0x42>
 8022fc0:	6820      	ldr	r0, [r4, #0]
 8022fc2:	1821      	adds	r1, r4, r0
 8022fc4:	428b      	cmp	r3, r1
 8022fc6:	bf01      	itttt	eq
 8022fc8:	6819      	ldreq	r1, [r3, #0]
 8022fca:	685b      	ldreq	r3, [r3, #4]
 8022fcc:	1809      	addeq	r1, r1, r0
 8022fce:	6021      	streq	r1, [r4, #0]
 8022fd0:	e7ed      	b.n	8022fae <_free_r+0x1e>
 8022fd2:	461a      	mov	r2, r3
 8022fd4:	685b      	ldr	r3, [r3, #4]
 8022fd6:	b10b      	cbz	r3, 8022fdc <_free_r+0x4c>
 8022fd8:	42a3      	cmp	r3, r4
 8022fda:	d9fa      	bls.n	8022fd2 <_free_r+0x42>
 8022fdc:	6811      	ldr	r1, [r2, #0]
 8022fde:	1850      	adds	r0, r2, r1
 8022fe0:	42a0      	cmp	r0, r4
 8022fe2:	d10b      	bne.n	8022ffc <_free_r+0x6c>
 8022fe4:	6820      	ldr	r0, [r4, #0]
 8022fe6:	4401      	add	r1, r0
 8022fe8:	1850      	adds	r0, r2, r1
 8022fea:	4283      	cmp	r3, r0
 8022fec:	6011      	str	r1, [r2, #0]
 8022fee:	d1e0      	bne.n	8022fb2 <_free_r+0x22>
 8022ff0:	6818      	ldr	r0, [r3, #0]
 8022ff2:	685b      	ldr	r3, [r3, #4]
 8022ff4:	4408      	add	r0, r1
 8022ff6:	6010      	str	r0, [r2, #0]
 8022ff8:	6053      	str	r3, [r2, #4]
 8022ffa:	e7da      	b.n	8022fb2 <_free_r+0x22>
 8022ffc:	d902      	bls.n	8023004 <_free_r+0x74>
 8022ffe:	230c      	movs	r3, #12
 8023000:	602b      	str	r3, [r5, #0]
 8023002:	e7d6      	b.n	8022fb2 <_free_r+0x22>
 8023004:	6820      	ldr	r0, [r4, #0]
 8023006:	1821      	adds	r1, r4, r0
 8023008:	428b      	cmp	r3, r1
 802300a:	bf01      	itttt	eq
 802300c:	6819      	ldreq	r1, [r3, #0]
 802300e:	685b      	ldreq	r3, [r3, #4]
 8023010:	1809      	addeq	r1, r1, r0
 8023012:	6021      	streq	r1, [r4, #0]
 8023014:	6063      	str	r3, [r4, #4]
 8023016:	6054      	str	r4, [r2, #4]
 8023018:	e7cb      	b.n	8022fb2 <_free_r+0x22>
 802301a:	bd38      	pop	{r3, r4, r5, pc}
 802301c:	2000c308 	.word	0x2000c308

08023020 <malloc>:
 8023020:	4b02      	ldr	r3, [pc, #8]	@ (802302c <malloc+0xc>)
 8023022:	4601      	mov	r1, r0
 8023024:	6818      	ldr	r0, [r3, #0]
 8023026:	f000 b825 	b.w	8023074 <_malloc_r>
 802302a:	bf00      	nop
 802302c:	20000138 	.word	0x20000138

08023030 <sbrk_aligned>:
 8023030:	b570      	push	{r4, r5, r6, lr}
 8023032:	4e0f      	ldr	r6, [pc, #60]	@ (8023070 <sbrk_aligned+0x40>)
 8023034:	460c      	mov	r4, r1
 8023036:	6831      	ldr	r1, [r6, #0]
 8023038:	4605      	mov	r5, r0
 802303a:	b911      	cbnz	r1, 8023042 <sbrk_aligned+0x12>
 802303c:	f001 fb80 	bl	8024740 <_sbrk_r>
 8023040:	6030      	str	r0, [r6, #0]
 8023042:	4621      	mov	r1, r4
 8023044:	4628      	mov	r0, r5
 8023046:	f001 fb7b 	bl	8024740 <_sbrk_r>
 802304a:	1c43      	adds	r3, r0, #1
 802304c:	d103      	bne.n	8023056 <sbrk_aligned+0x26>
 802304e:	f04f 34ff 	mov.w	r4, #4294967295
 8023052:	4620      	mov	r0, r4
 8023054:	bd70      	pop	{r4, r5, r6, pc}
 8023056:	1cc4      	adds	r4, r0, #3
 8023058:	f024 0403 	bic.w	r4, r4, #3
 802305c:	42a0      	cmp	r0, r4
 802305e:	d0f8      	beq.n	8023052 <sbrk_aligned+0x22>
 8023060:	1a21      	subs	r1, r4, r0
 8023062:	4628      	mov	r0, r5
 8023064:	f001 fb6c 	bl	8024740 <_sbrk_r>
 8023068:	3001      	adds	r0, #1
 802306a:	d1f2      	bne.n	8023052 <sbrk_aligned+0x22>
 802306c:	e7ef      	b.n	802304e <sbrk_aligned+0x1e>
 802306e:	bf00      	nop
 8023070:	2000c304 	.word	0x2000c304

08023074 <_malloc_r>:
 8023074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023078:	1ccd      	adds	r5, r1, #3
 802307a:	f025 0503 	bic.w	r5, r5, #3
 802307e:	3508      	adds	r5, #8
 8023080:	2d0c      	cmp	r5, #12
 8023082:	bf38      	it	cc
 8023084:	250c      	movcc	r5, #12
 8023086:	2d00      	cmp	r5, #0
 8023088:	4606      	mov	r6, r0
 802308a:	db01      	blt.n	8023090 <_malloc_r+0x1c>
 802308c:	42a9      	cmp	r1, r5
 802308e:	d904      	bls.n	802309a <_malloc_r+0x26>
 8023090:	230c      	movs	r3, #12
 8023092:	6033      	str	r3, [r6, #0]
 8023094:	2000      	movs	r0, #0
 8023096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802309a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8023170 <_malloc_r+0xfc>
 802309e:	f000 f869 	bl	8023174 <__malloc_lock>
 80230a2:	f8d8 3000 	ldr.w	r3, [r8]
 80230a6:	461c      	mov	r4, r3
 80230a8:	bb44      	cbnz	r4, 80230fc <_malloc_r+0x88>
 80230aa:	4629      	mov	r1, r5
 80230ac:	4630      	mov	r0, r6
 80230ae:	f7ff ffbf 	bl	8023030 <sbrk_aligned>
 80230b2:	1c43      	adds	r3, r0, #1
 80230b4:	4604      	mov	r4, r0
 80230b6:	d158      	bne.n	802316a <_malloc_r+0xf6>
 80230b8:	f8d8 4000 	ldr.w	r4, [r8]
 80230bc:	4627      	mov	r7, r4
 80230be:	2f00      	cmp	r7, #0
 80230c0:	d143      	bne.n	802314a <_malloc_r+0xd6>
 80230c2:	2c00      	cmp	r4, #0
 80230c4:	d04b      	beq.n	802315e <_malloc_r+0xea>
 80230c6:	6823      	ldr	r3, [r4, #0]
 80230c8:	4639      	mov	r1, r7
 80230ca:	4630      	mov	r0, r6
 80230cc:	eb04 0903 	add.w	r9, r4, r3
 80230d0:	f001 fb36 	bl	8024740 <_sbrk_r>
 80230d4:	4581      	cmp	r9, r0
 80230d6:	d142      	bne.n	802315e <_malloc_r+0xea>
 80230d8:	6821      	ldr	r1, [r4, #0]
 80230da:	4630      	mov	r0, r6
 80230dc:	1a6d      	subs	r5, r5, r1
 80230de:	4629      	mov	r1, r5
 80230e0:	f7ff ffa6 	bl	8023030 <sbrk_aligned>
 80230e4:	3001      	adds	r0, #1
 80230e6:	d03a      	beq.n	802315e <_malloc_r+0xea>
 80230e8:	6823      	ldr	r3, [r4, #0]
 80230ea:	442b      	add	r3, r5
 80230ec:	6023      	str	r3, [r4, #0]
 80230ee:	f8d8 3000 	ldr.w	r3, [r8]
 80230f2:	685a      	ldr	r2, [r3, #4]
 80230f4:	bb62      	cbnz	r2, 8023150 <_malloc_r+0xdc>
 80230f6:	f8c8 7000 	str.w	r7, [r8]
 80230fa:	e00f      	b.n	802311c <_malloc_r+0xa8>
 80230fc:	6822      	ldr	r2, [r4, #0]
 80230fe:	1b52      	subs	r2, r2, r5
 8023100:	d420      	bmi.n	8023144 <_malloc_r+0xd0>
 8023102:	2a0b      	cmp	r2, #11
 8023104:	d917      	bls.n	8023136 <_malloc_r+0xc2>
 8023106:	1961      	adds	r1, r4, r5
 8023108:	42a3      	cmp	r3, r4
 802310a:	6025      	str	r5, [r4, #0]
 802310c:	bf18      	it	ne
 802310e:	6059      	strne	r1, [r3, #4]
 8023110:	6863      	ldr	r3, [r4, #4]
 8023112:	bf08      	it	eq
 8023114:	f8c8 1000 	streq.w	r1, [r8]
 8023118:	5162      	str	r2, [r4, r5]
 802311a:	604b      	str	r3, [r1, #4]
 802311c:	4630      	mov	r0, r6
 802311e:	f000 f82f 	bl	8023180 <__malloc_unlock>
 8023122:	f104 000b 	add.w	r0, r4, #11
 8023126:	1d23      	adds	r3, r4, #4
 8023128:	f020 0007 	bic.w	r0, r0, #7
 802312c:	1ac2      	subs	r2, r0, r3
 802312e:	bf1c      	itt	ne
 8023130:	1a1b      	subne	r3, r3, r0
 8023132:	50a3      	strne	r3, [r4, r2]
 8023134:	e7af      	b.n	8023096 <_malloc_r+0x22>
 8023136:	6862      	ldr	r2, [r4, #4]
 8023138:	42a3      	cmp	r3, r4
 802313a:	bf0c      	ite	eq
 802313c:	f8c8 2000 	streq.w	r2, [r8]
 8023140:	605a      	strne	r2, [r3, #4]
 8023142:	e7eb      	b.n	802311c <_malloc_r+0xa8>
 8023144:	4623      	mov	r3, r4
 8023146:	6864      	ldr	r4, [r4, #4]
 8023148:	e7ae      	b.n	80230a8 <_malloc_r+0x34>
 802314a:	463c      	mov	r4, r7
 802314c:	687f      	ldr	r7, [r7, #4]
 802314e:	e7b6      	b.n	80230be <_malloc_r+0x4a>
 8023150:	461a      	mov	r2, r3
 8023152:	685b      	ldr	r3, [r3, #4]
 8023154:	42a3      	cmp	r3, r4
 8023156:	d1fb      	bne.n	8023150 <_malloc_r+0xdc>
 8023158:	2300      	movs	r3, #0
 802315a:	6053      	str	r3, [r2, #4]
 802315c:	e7de      	b.n	802311c <_malloc_r+0xa8>
 802315e:	230c      	movs	r3, #12
 8023160:	4630      	mov	r0, r6
 8023162:	6033      	str	r3, [r6, #0]
 8023164:	f000 f80c 	bl	8023180 <__malloc_unlock>
 8023168:	e794      	b.n	8023094 <_malloc_r+0x20>
 802316a:	6005      	str	r5, [r0, #0]
 802316c:	e7d6      	b.n	802311c <_malloc_r+0xa8>
 802316e:	bf00      	nop
 8023170:	2000c308 	.word	0x2000c308

08023174 <__malloc_lock>:
 8023174:	4801      	ldr	r0, [pc, #4]	@ (802317c <__malloc_lock+0x8>)
 8023176:	f7ff b872 	b.w	802225e <__retarget_lock_acquire_recursive>
 802317a:	bf00      	nop
 802317c:	2000c300 	.word	0x2000c300

08023180 <__malloc_unlock>:
 8023180:	4801      	ldr	r0, [pc, #4]	@ (8023188 <__malloc_unlock+0x8>)
 8023182:	f7ff b86d 	b.w	8022260 <__retarget_lock_release_recursive>
 8023186:	bf00      	nop
 8023188:	2000c300 	.word	0x2000c300

0802318c <_Balloc>:
 802318c:	b570      	push	{r4, r5, r6, lr}
 802318e:	69c6      	ldr	r6, [r0, #28]
 8023190:	4604      	mov	r4, r0
 8023192:	460d      	mov	r5, r1
 8023194:	b976      	cbnz	r6, 80231b4 <_Balloc+0x28>
 8023196:	2010      	movs	r0, #16
 8023198:	f7ff ff42 	bl	8023020 <malloc>
 802319c:	4602      	mov	r2, r0
 802319e:	61e0      	str	r0, [r4, #28]
 80231a0:	b920      	cbnz	r0, 80231ac <_Balloc+0x20>
 80231a2:	216b      	movs	r1, #107	@ 0x6b
 80231a4:	4b17      	ldr	r3, [pc, #92]	@ (8023204 <_Balloc+0x78>)
 80231a6:	4818      	ldr	r0, [pc, #96]	@ (8023208 <_Balloc+0x7c>)
 80231a8:	f7ff f878 	bl	802229c <__assert_func>
 80231ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80231b0:	6006      	str	r6, [r0, #0]
 80231b2:	60c6      	str	r6, [r0, #12]
 80231b4:	69e6      	ldr	r6, [r4, #28]
 80231b6:	68f3      	ldr	r3, [r6, #12]
 80231b8:	b183      	cbz	r3, 80231dc <_Balloc+0x50>
 80231ba:	69e3      	ldr	r3, [r4, #28]
 80231bc:	68db      	ldr	r3, [r3, #12]
 80231be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80231c2:	b9b8      	cbnz	r0, 80231f4 <_Balloc+0x68>
 80231c4:	2101      	movs	r1, #1
 80231c6:	fa01 f605 	lsl.w	r6, r1, r5
 80231ca:	1d72      	adds	r2, r6, #5
 80231cc:	4620      	mov	r0, r4
 80231ce:	0092      	lsls	r2, r2, #2
 80231d0:	f001 facd 	bl	802476e <_calloc_r>
 80231d4:	b160      	cbz	r0, 80231f0 <_Balloc+0x64>
 80231d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80231da:	e00e      	b.n	80231fa <_Balloc+0x6e>
 80231dc:	2221      	movs	r2, #33	@ 0x21
 80231de:	2104      	movs	r1, #4
 80231e0:	4620      	mov	r0, r4
 80231e2:	f001 fac4 	bl	802476e <_calloc_r>
 80231e6:	69e3      	ldr	r3, [r4, #28]
 80231e8:	60f0      	str	r0, [r6, #12]
 80231ea:	68db      	ldr	r3, [r3, #12]
 80231ec:	2b00      	cmp	r3, #0
 80231ee:	d1e4      	bne.n	80231ba <_Balloc+0x2e>
 80231f0:	2000      	movs	r0, #0
 80231f2:	bd70      	pop	{r4, r5, r6, pc}
 80231f4:	6802      	ldr	r2, [r0, #0]
 80231f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80231fa:	2300      	movs	r3, #0
 80231fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8023200:	e7f7      	b.n	80231f2 <_Balloc+0x66>
 8023202:	bf00      	nop
 8023204:	08030d0a 	.word	0x08030d0a
 8023208:	08030e5d 	.word	0x08030e5d

0802320c <_Bfree>:
 802320c:	b570      	push	{r4, r5, r6, lr}
 802320e:	69c6      	ldr	r6, [r0, #28]
 8023210:	4605      	mov	r5, r0
 8023212:	460c      	mov	r4, r1
 8023214:	b976      	cbnz	r6, 8023234 <_Bfree+0x28>
 8023216:	2010      	movs	r0, #16
 8023218:	f7ff ff02 	bl	8023020 <malloc>
 802321c:	4602      	mov	r2, r0
 802321e:	61e8      	str	r0, [r5, #28]
 8023220:	b920      	cbnz	r0, 802322c <_Bfree+0x20>
 8023222:	218f      	movs	r1, #143	@ 0x8f
 8023224:	4b08      	ldr	r3, [pc, #32]	@ (8023248 <_Bfree+0x3c>)
 8023226:	4809      	ldr	r0, [pc, #36]	@ (802324c <_Bfree+0x40>)
 8023228:	f7ff f838 	bl	802229c <__assert_func>
 802322c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8023230:	6006      	str	r6, [r0, #0]
 8023232:	60c6      	str	r6, [r0, #12]
 8023234:	b13c      	cbz	r4, 8023246 <_Bfree+0x3a>
 8023236:	69eb      	ldr	r3, [r5, #28]
 8023238:	6862      	ldr	r2, [r4, #4]
 802323a:	68db      	ldr	r3, [r3, #12]
 802323c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8023240:	6021      	str	r1, [r4, #0]
 8023242:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8023246:	bd70      	pop	{r4, r5, r6, pc}
 8023248:	08030d0a 	.word	0x08030d0a
 802324c:	08030e5d 	.word	0x08030e5d

08023250 <__multadd>:
 8023250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023254:	4607      	mov	r7, r0
 8023256:	460c      	mov	r4, r1
 8023258:	461e      	mov	r6, r3
 802325a:	2000      	movs	r0, #0
 802325c:	690d      	ldr	r5, [r1, #16]
 802325e:	f101 0c14 	add.w	ip, r1, #20
 8023262:	f8dc 3000 	ldr.w	r3, [ip]
 8023266:	3001      	adds	r0, #1
 8023268:	b299      	uxth	r1, r3
 802326a:	fb02 6101 	mla	r1, r2, r1, r6
 802326e:	0c1e      	lsrs	r6, r3, #16
 8023270:	0c0b      	lsrs	r3, r1, #16
 8023272:	fb02 3306 	mla	r3, r2, r6, r3
 8023276:	b289      	uxth	r1, r1
 8023278:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802327c:	4285      	cmp	r5, r0
 802327e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8023282:	f84c 1b04 	str.w	r1, [ip], #4
 8023286:	dcec      	bgt.n	8023262 <__multadd+0x12>
 8023288:	b30e      	cbz	r6, 80232ce <__multadd+0x7e>
 802328a:	68a3      	ldr	r3, [r4, #8]
 802328c:	42ab      	cmp	r3, r5
 802328e:	dc19      	bgt.n	80232c4 <__multadd+0x74>
 8023290:	6861      	ldr	r1, [r4, #4]
 8023292:	4638      	mov	r0, r7
 8023294:	3101      	adds	r1, #1
 8023296:	f7ff ff79 	bl	802318c <_Balloc>
 802329a:	4680      	mov	r8, r0
 802329c:	b928      	cbnz	r0, 80232aa <__multadd+0x5a>
 802329e:	4602      	mov	r2, r0
 80232a0:	21ba      	movs	r1, #186	@ 0xba
 80232a2:	4b0c      	ldr	r3, [pc, #48]	@ (80232d4 <__multadd+0x84>)
 80232a4:	480c      	ldr	r0, [pc, #48]	@ (80232d8 <__multadd+0x88>)
 80232a6:	f7fe fff9 	bl	802229c <__assert_func>
 80232aa:	6922      	ldr	r2, [r4, #16]
 80232ac:	f104 010c 	add.w	r1, r4, #12
 80232b0:	3202      	adds	r2, #2
 80232b2:	0092      	lsls	r2, r2, #2
 80232b4:	300c      	adds	r0, #12
 80232b6:	f7fe ffe2 	bl	802227e <memcpy>
 80232ba:	4621      	mov	r1, r4
 80232bc:	4638      	mov	r0, r7
 80232be:	f7ff ffa5 	bl	802320c <_Bfree>
 80232c2:	4644      	mov	r4, r8
 80232c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80232c8:	3501      	adds	r5, #1
 80232ca:	615e      	str	r6, [r3, #20]
 80232cc:	6125      	str	r5, [r4, #16]
 80232ce:	4620      	mov	r0, r4
 80232d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80232d4:	08030e4c 	.word	0x08030e4c
 80232d8:	08030e5d 	.word	0x08030e5d

080232dc <__hi0bits>:
 80232dc:	4603      	mov	r3, r0
 80232de:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80232e2:	bf3a      	itte	cc
 80232e4:	0403      	lslcc	r3, r0, #16
 80232e6:	2010      	movcc	r0, #16
 80232e8:	2000      	movcs	r0, #0
 80232ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80232ee:	bf3c      	itt	cc
 80232f0:	021b      	lslcc	r3, r3, #8
 80232f2:	3008      	addcc	r0, #8
 80232f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80232f8:	bf3c      	itt	cc
 80232fa:	011b      	lslcc	r3, r3, #4
 80232fc:	3004      	addcc	r0, #4
 80232fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8023302:	bf3c      	itt	cc
 8023304:	009b      	lslcc	r3, r3, #2
 8023306:	3002      	addcc	r0, #2
 8023308:	2b00      	cmp	r3, #0
 802330a:	db05      	blt.n	8023318 <__hi0bits+0x3c>
 802330c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8023310:	f100 0001 	add.w	r0, r0, #1
 8023314:	bf08      	it	eq
 8023316:	2020      	moveq	r0, #32
 8023318:	4770      	bx	lr

0802331a <__lo0bits>:
 802331a:	6803      	ldr	r3, [r0, #0]
 802331c:	4602      	mov	r2, r0
 802331e:	f013 0007 	ands.w	r0, r3, #7
 8023322:	d00b      	beq.n	802333c <__lo0bits+0x22>
 8023324:	07d9      	lsls	r1, r3, #31
 8023326:	d421      	bmi.n	802336c <__lo0bits+0x52>
 8023328:	0798      	lsls	r0, r3, #30
 802332a:	bf49      	itett	mi
 802332c:	085b      	lsrmi	r3, r3, #1
 802332e:	089b      	lsrpl	r3, r3, #2
 8023330:	2001      	movmi	r0, #1
 8023332:	6013      	strmi	r3, [r2, #0]
 8023334:	bf5c      	itt	pl
 8023336:	2002      	movpl	r0, #2
 8023338:	6013      	strpl	r3, [r2, #0]
 802333a:	4770      	bx	lr
 802333c:	b299      	uxth	r1, r3
 802333e:	b909      	cbnz	r1, 8023344 <__lo0bits+0x2a>
 8023340:	2010      	movs	r0, #16
 8023342:	0c1b      	lsrs	r3, r3, #16
 8023344:	b2d9      	uxtb	r1, r3
 8023346:	b909      	cbnz	r1, 802334c <__lo0bits+0x32>
 8023348:	3008      	adds	r0, #8
 802334a:	0a1b      	lsrs	r3, r3, #8
 802334c:	0719      	lsls	r1, r3, #28
 802334e:	bf04      	itt	eq
 8023350:	091b      	lsreq	r3, r3, #4
 8023352:	3004      	addeq	r0, #4
 8023354:	0799      	lsls	r1, r3, #30
 8023356:	bf04      	itt	eq
 8023358:	089b      	lsreq	r3, r3, #2
 802335a:	3002      	addeq	r0, #2
 802335c:	07d9      	lsls	r1, r3, #31
 802335e:	d403      	bmi.n	8023368 <__lo0bits+0x4e>
 8023360:	085b      	lsrs	r3, r3, #1
 8023362:	f100 0001 	add.w	r0, r0, #1
 8023366:	d003      	beq.n	8023370 <__lo0bits+0x56>
 8023368:	6013      	str	r3, [r2, #0]
 802336a:	4770      	bx	lr
 802336c:	2000      	movs	r0, #0
 802336e:	4770      	bx	lr
 8023370:	2020      	movs	r0, #32
 8023372:	4770      	bx	lr

08023374 <__i2b>:
 8023374:	b510      	push	{r4, lr}
 8023376:	460c      	mov	r4, r1
 8023378:	2101      	movs	r1, #1
 802337a:	f7ff ff07 	bl	802318c <_Balloc>
 802337e:	4602      	mov	r2, r0
 8023380:	b928      	cbnz	r0, 802338e <__i2b+0x1a>
 8023382:	f240 1145 	movw	r1, #325	@ 0x145
 8023386:	4b04      	ldr	r3, [pc, #16]	@ (8023398 <__i2b+0x24>)
 8023388:	4804      	ldr	r0, [pc, #16]	@ (802339c <__i2b+0x28>)
 802338a:	f7fe ff87 	bl	802229c <__assert_func>
 802338e:	2301      	movs	r3, #1
 8023390:	6144      	str	r4, [r0, #20]
 8023392:	6103      	str	r3, [r0, #16]
 8023394:	bd10      	pop	{r4, pc}
 8023396:	bf00      	nop
 8023398:	08030e4c 	.word	0x08030e4c
 802339c:	08030e5d 	.word	0x08030e5d

080233a0 <__multiply>:
 80233a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80233a4:	4617      	mov	r7, r2
 80233a6:	690a      	ldr	r2, [r1, #16]
 80233a8:	693b      	ldr	r3, [r7, #16]
 80233aa:	4689      	mov	r9, r1
 80233ac:	429a      	cmp	r2, r3
 80233ae:	bfa2      	ittt	ge
 80233b0:	463b      	movge	r3, r7
 80233b2:	460f      	movge	r7, r1
 80233b4:	4699      	movge	r9, r3
 80233b6:	693d      	ldr	r5, [r7, #16]
 80233b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80233bc:	68bb      	ldr	r3, [r7, #8]
 80233be:	6879      	ldr	r1, [r7, #4]
 80233c0:	eb05 060a 	add.w	r6, r5, sl
 80233c4:	42b3      	cmp	r3, r6
 80233c6:	b085      	sub	sp, #20
 80233c8:	bfb8      	it	lt
 80233ca:	3101      	addlt	r1, #1
 80233cc:	f7ff fede 	bl	802318c <_Balloc>
 80233d0:	b930      	cbnz	r0, 80233e0 <__multiply+0x40>
 80233d2:	4602      	mov	r2, r0
 80233d4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80233d8:	4b40      	ldr	r3, [pc, #256]	@ (80234dc <__multiply+0x13c>)
 80233da:	4841      	ldr	r0, [pc, #260]	@ (80234e0 <__multiply+0x140>)
 80233dc:	f7fe ff5e 	bl	802229c <__assert_func>
 80233e0:	f100 0414 	add.w	r4, r0, #20
 80233e4:	4623      	mov	r3, r4
 80233e6:	2200      	movs	r2, #0
 80233e8:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80233ec:	4573      	cmp	r3, lr
 80233ee:	d320      	bcc.n	8023432 <__multiply+0x92>
 80233f0:	f107 0814 	add.w	r8, r7, #20
 80233f4:	f109 0114 	add.w	r1, r9, #20
 80233f8:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80233fc:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8023400:	9302      	str	r3, [sp, #8]
 8023402:	1beb      	subs	r3, r5, r7
 8023404:	3b15      	subs	r3, #21
 8023406:	f023 0303 	bic.w	r3, r3, #3
 802340a:	3304      	adds	r3, #4
 802340c:	3715      	adds	r7, #21
 802340e:	42bd      	cmp	r5, r7
 8023410:	bf38      	it	cc
 8023412:	2304      	movcc	r3, #4
 8023414:	9301      	str	r3, [sp, #4]
 8023416:	9b02      	ldr	r3, [sp, #8]
 8023418:	9103      	str	r1, [sp, #12]
 802341a:	428b      	cmp	r3, r1
 802341c:	d80c      	bhi.n	8023438 <__multiply+0x98>
 802341e:	2e00      	cmp	r6, #0
 8023420:	dd03      	ble.n	802342a <__multiply+0x8a>
 8023422:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8023426:	2b00      	cmp	r3, #0
 8023428:	d055      	beq.n	80234d6 <__multiply+0x136>
 802342a:	6106      	str	r6, [r0, #16]
 802342c:	b005      	add	sp, #20
 802342e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023432:	f843 2b04 	str.w	r2, [r3], #4
 8023436:	e7d9      	b.n	80233ec <__multiply+0x4c>
 8023438:	f8b1 a000 	ldrh.w	sl, [r1]
 802343c:	f1ba 0f00 	cmp.w	sl, #0
 8023440:	d01f      	beq.n	8023482 <__multiply+0xe2>
 8023442:	46c4      	mov	ip, r8
 8023444:	46a1      	mov	r9, r4
 8023446:	2700      	movs	r7, #0
 8023448:	f85c 2b04 	ldr.w	r2, [ip], #4
 802344c:	f8d9 3000 	ldr.w	r3, [r9]
 8023450:	fa1f fb82 	uxth.w	fp, r2
 8023454:	b29b      	uxth	r3, r3
 8023456:	fb0a 330b 	mla	r3, sl, fp, r3
 802345a:	443b      	add	r3, r7
 802345c:	f8d9 7000 	ldr.w	r7, [r9]
 8023460:	0c12      	lsrs	r2, r2, #16
 8023462:	0c3f      	lsrs	r7, r7, #16
 8023464:	fb0a 7202 	mla	r2, sl, r2, r7
 8023468:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 802346c:	b29b      	uxth	r3, r3
 802346e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8023472:	4565      	cmp	r5, ip
 8023474:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8023478:	f849 3b04 	str.w	r3, [r9], #4
 802347c:	d8e4      	bhi.n	8023448 <__multiply+0xa8>
 802347e:	9b01      	ldr	r3, [sp, #4]
 8023480:	50e7      	str	r7, [r4, r3]
 8023482:	9b03      	ldr	r3, [sp, #12]
 8023484:	3104      	adds	r1, #4
 8023486:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 802348a:	f1b9 0f00 	cmp.w	r9, #0
 802348e:	d020      	beq.n	80234d2 <__multiply+0x132>
 8023490:	4647      	mov	r7, r8
 8023492:	46a4      	mov	ip, r4
 8023494:	f04f 0a00 	mov.w	sl, #0
 8023498:	6823      	ldr	r3, [r4, #0]
 802349a:	f8b7 b000 	ldrh.w	fp, [r7]
 802349e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80234a2:	b29b      	uxth	r3, r3
 80234a4:	fb09 220b 	mla	r2, r9, fp, r2
 80234a8:	4452      	add	r2, sl
 80234aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80234ae:	f84c 3b04 	str.w	r3, [ip], #4
 80234b2:	f857 3b04 	ldr.w	r3, [r7], #4
 80234b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80234ba:	f8bc 3000 	ldrh.w	r3, [ip]
 80234be:	42bd      	cmp	r5, r7
 80234c0:	fb09 330a 	mla	r3, r9, sl, r3
 80234c4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80234c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80234cc:	d8e5      	bhi.n	802349a <__multiply+0xfa>
 80234ce:	9a01      	ldr	r2, [sp, #4]
 80234d0:	50a3      	str	r3, [r4, r2]
 80234d2:	3404      	adds	r4, #4
 80234d4:	e79f      	b.n	8023416 <__multiply+0x76>
 80234d6:	3e01      	subs	r6, #1
 80234d8:	e7a1      	b.n	802341e <__multiply+0x7e>
 80234da:	bf00      	nop
 80234dc:	08030e4c 	.word	0x08030e4c
 80234e0:	08030e5d 	.word	0x08030e5d

080234e4 <__pow5mult>:
 80234e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80234e8:	4615      	mov	r5, r2
 80234ea:	f012 0203 	ands.w	r2, r2, #3
 80234ee:	4607      	mov	r7, r0
 80234f0:	460e      	mov	r6, r1
 80234f2:	d007      	beq.n	8023504 <__pow5mult+0x20>
 80234f4:	4c25      	ldr	r4, [pc, #148]	@ (802358c <__pow5mult+0xa8>)
 80234f6:	3a01      	subs	r2, #1
 80234f8:	2300      	movs	r3, #0
 80234fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80234fe:	f7ff fea7 	bl	8023250 <__multadd>
 8023502:	4606      	mov	r6, r0
 8023504:	10ad      	asrs	r5, r5, #2
 8023506:	d03d      	beq.n	8023584 <__pow5mult+0xa0>
 8023508:	69fc      	ldr	r4, [r7, #28]
 802350a:	b97c      	cbnz	r4, 802352c <__pow5mult+0x48>
 802350c:	2010      	movs	r0, #16
 802350e:	f7ff fd87 	bl	8023020 <malloc>
 8023512:	4602      	mov	r2, r0
 8023514:	61f8      	str	r0, [r7, #28]
 8023516:	b928      	cbnz	r0, 8023524 <__pow5mult+0x40>
 8023518:	f240 11b3 	movw	r1, #435	@ 0x1b3
 802351c:	4b1c      	ldr	r3, [pc, #112]	@ (8023590 <__pow5mult+0xac>)
 802351e:	481d      	ldr	r0, [pc, #116]	@ (8023594 <__pow5mult+0xb0>)
 8023520:	f7fe febc 	bl	802229c <__assert_func>
 8023524:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8023528:	6004      	str	r4, [r0, #0]
 802352a:	60c4      	str	r4, [r0, #12]
 802352c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8023530:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8023534:	b94c      	cbnz	r4, 802354a <__pow5mult+0x66>
 8023536:	f240 2171 	movw	r1, #625	@ 0x271
 802353a:	4638      	mov	r0, r7
 802353c:	f7ff ff1a 	bl	8023374 <__i2b>
 8023540:	2300      	movs	r3, #0
 8023542:	4604      	mov	r4, r0
 8023544:	f8c8 0008 	str.w	r0, [r8, #8]
 8023548:	6003      	str	r3, [r0, #0]
 802354a:	f04f 0900 	mov.w	r9, #0
 802354e:	07eb      	lsls	r3, r5, #31
 8023550:	d50a      	bpl.n	8023568 <__pow5mult+0x84>
 8023552:	4631      	mov	r1, r6
 8023554:	4622      	mov	r2, r4
 8023556:	4638      	mov	r0, r7
 8023558:	f7ff ff22 	bl	80233a0 <__multiply>
 802355c:	4680      	mov	r8, r0
 802355e:	4631      	mov	r1, r6
 8023560:	4638      	mov	r0, r7
 8023562:	f7ff fe53 	bl	802320c <_Bfree>
 8023566:	4646      	mov	r6, r8
 8023568:	106d      	asrs	r5, r5, #1
 802356a:	d00b      	beq.n	8023584 <__pow5mult+0xa0>
 802356c:	6820      	ldr	r0, [r4, #0]
 802356e:	b938      	cbnz	r0, 8023580 <__pow5mult+0x9c>
 8023570:	4622      	mov	r2, r4
 8023572:	4621      	mov	r1, r4
 8023574:	4638      	mov	r0, r7
 8023576:	f7ff ff13 	bl	80233a0 <__multiply>
 802357a:	6020      	str	r0, [r4, #0]
 802357c:	f8c0 9000 	str.w	r9, [r0]
 8023580:	4604      	mov	r4, r0
 8023582:	e7e4      	b.n	802354e <__pow5mult+0x6a>
 8023584:	4630      	mov	r0, r6
 8023586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802358a:	bf00      	nop
 802358c:	08030ff0 	.word	0x08030ff0
 8023590:	08030d0a 	.word	0x08030d0a
 8023594:	08030e5d 	.word	0x08030e5d

08023598 <__lshift>:
 8023598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802359c:	460c      	mov	r4, r1
 802359e:	4607      	mov	r7, r0
 80235a0:	4691      	mov	r9, r2
 80235a2:	6923      	ldr	r3, [r4, #16]
 80235a4:	6849      	ldr	r1, [r1, #4]
 80235a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80235aa:	68a3      	ldr	r3, [r4, #8]
 80235ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80235b0:	f108 0601 	add.w	r6, r8, #1
 80235b4:	42b3      	cmp	r3, r6
 80235b6:	db0b      	blt.n	80235d0 <__lshift+0x38>
 80235b8:	4638      	mov	r0, r7
 80235ba:	f7ff fde7 	bl	802318c <_Balloc>
 80235be:	4605      	mov	r5, r0
 80235c0:	b948      	cbnz	r0, 80235d6 <__lshift+0x3e>
 80235c2:	4602      	mov	r2, r0
 80235c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80235c8:	4b27      	ldr	r3, [pc, #156]	@ (8023668 <__lshift+0xd0>)
 80235ca:	4828      	ldr	r0, [pc, #160]	@ (802366c <__lshift+0xd4>)
 80235cc:	f7fe fe66 	bl	802229c <__assert_func>
 80235d0:	3101      	adds	r1, #1
 80235d2:	005b      	lsls	r3, r3, #1
 80235d4:	e7ee      	b.n	80235b4 <__lshift+0x1c>
 80235d6:	2300      	movs	r3, #0
 80235d8:	f100 0114 	add.w	r1, r0, #20
 80235dc:	f100 0210 	add.w	r2, r0, #16
 80235e0:	4618      	mov	r0, r3
 80235e2:	4553      	cmp	r3, sl
 80235e4:	db33      	blt.n	802364e <__lshift+0xb6>
 80235e6:	6920      	ldr	r0, [r4, #16]
 80235e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80235ec:	f104 0314 	add.w	r3, r4, #20
 80235f0:	f019 091f 	ands.w	r9, r9, #31
 80235f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80235f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80235fc:	d02b      	beq.n	8023656 <__lshift+0xbe>
 80235fe:	468a      	mov	sl, r1
 8023600:	2200      	movs	r2, #0
 8023602:	f1c9 0e20 	rsb	lr, r9, #32
 8023606:	6818      	ldr	r0, [r3, #0]
 8023608:	fa00 f009 	lsl.w	r0, r0, r9
 802360c:	4310      	orrs	r0, r2
 802360e:	f84a 0b04 	str.w	r0, [sl], #4
 8023612:	f853 2b04 	ldr.w	r2, [r3], #4
 8023616:	459c      	cmp	ip, r3
 8023618:	fa22 f20e 	lsr.w	r2, r2, lr
 802361c:	d8f3      	bhi.n	8023606 <__lshift+0x6e>
 802361e:	ebac 0304 	sub.w	r3, ip, r4
 8023622:	3b15      	subs	r3, #21
 8023624:	f023 0303 	bic.w	r3, r3, #3
 8023628:	3304      	adds	r3, #4
 802362a:	f104 0015 	add.w	r0, r4, #21
 802362e:	4560      	cmp	r0, ip
 8023630:	bf88      	it	hi
 8023632:	2304      	movhi	r3, #4
 8023634:	50ca      	str	r2, [r1, r3]
 8023636:	b10a      	cbz	r2, 802363c <__lshift+0xa4>
 8023638:	f108 0602 	add.w	r6, r8, #2
 802363c:	3e01      	subs	r6, #1
 802363e:	4638      	mov	r0, r7
 8023640:	4621      	mov	r1, r4
 8023642:	612e      	str	r6, [r5, #16]
 8023644:	f7ff fde2 	bl	802320c <_Bfree>
 8023648:	4628      	mov	r0, r5
 802364a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802364e:	f842 0f04 	str.w	r0, [r2, #4]!
 8023652:	3301      	adds	r3, #1
 8023654:	e7c5      	b.n	80235e2 <__lshift+0x4a>
 8023656:	3904      	subs	r1, #4
 8023658:	f853 2b04 	ldr.w	r2, [r3], #4
 802365c:	459c      	cmp	ip, r3
 802365e:	f841 2f04 	str.w	r2, [r1, #4]!
 8023662:	d8f9      	bhi.n	8023658 <__lshift+0xc0>
 8023664:	e7ea      	b.n	802363c <__lshift+0xa4>
 8023666:	bf00      	nop
 8023668:	08030e4c 	.word	0x08030e4c
 802366c:	08030e5d 	.word	0x08030e5d

08023670 <__mcmp>:
 8023670:	4603      	mov	r3, r0
 8023672:	690a      	ldr	r2, [r1, #16]
 8023674:	6900      	ldr	r0, [r0, #16]
 8023676:	b530      	push	{r4, r5, lr}
 8023678:	1a80      	subs	r0, r0, r2
 802367a:	d10e      	bne.n	802369a <__mcmp+0x2a>
 802367c:	3314      	adds	r3, #20
 802367e:	3114      	adds	r1, #20
 8023680:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8023684:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8023688:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 802368c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8023690:	4295      	cmp	r5, r2
 8023692:	d003      	beq.n	802369c <__mcmp+0x2c>
 8023694:	d205      	bcs.n	80236a2 <__mcmp+0x32>
 8023696:	f04f 30ff 	mov.w	r0, #4294967295
 802369a:	bd30      	pop	{r4, r5, pc}
 802369c:	42a3      	cmp	r3, r4
 802369e:	d3f3      	bcc.n	8023688 <__mcmp+0x18>
 80236a0:	e7fb      	b.n	802369a <__mcmp+0x2a>
 80236a2:	2001      	movs	r0, #1
 80236a4:	e7f9      	b.n	802369a <__mcmp+0x2a>
	...

080236a8 <__mdiff>:
 80236a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80236ac:	4689      	mov	r9, r1
 80236ae:	4606      	mov	r6, r0
 80236b0:	4611      	mov	r1, r2
 80236b2:	4648      	mov	r0, r9
 80236b4:	4614      	mov	r4, r2
 80236b6:	f7ff ffdb 	bl	8023670 <__mcmp>
 80236ba:	1e05      	subs	r5, r0, #0
 80236bc:	d112      	bne.n	80236e4 <__mdiff+0x3c>
 80236be:	4629      	mov	r1, r5
 80236c0:	4630      	mov	r0, r6
 80236c2:	f7ff fd63 	bl	802318c <_Balloc>
 80236c6:	4602      	mov	r2, r0
 80236c8:	b928      	cbnz	r0, 80236d6 <__mdiff+0x2e>
 80236ca:	f240 2137 	movw	r1, #567	@ 0x237
 80236ce:	4b3e      	ldr	r3, [pc, #248]	@ (80237c8 <__mdiff+0x120>)
 80236d0:	483e      	ldr	r0, [pc, #248]	@ (80237cc <__mdiff+0x124>)
 80236d2:	f7fe fde3 	bl	802229c <__assert_func>
 80236d6:	2301      	movs	r3, #1
 80236d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80236dc:	4610      	mov	r0, r2
 80236de:	b003      	add	sp, #12
 80236e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80236e4:	bfbc      	itt	lt
 80236e6:	464b      	movlt	r3, r9
 80236e8:	46a1      	movlt	r9, r4
 80236ea:	4630      	mov	r0, r6
 80236ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80236f0:	bfba      	itte	lt
 80236f2:	461c      	movlt	r4, r3
 80236f4:	2501      	movlt	r5, #1
 80236f6:	2500      	movge	r5, #0
 80236f8:	f7ff fd48 	bl	802318c <_Balloc>
 80236fc:	4602      	mov	r2, r0
 80236fe:	b918      	cbnz	r0, 8023708 <__mdiff+0x60>
 8023700:	f240 2145 	movw	r1, #581	@ 0x245
 8023704:	4b30      	ldr	r3, [pc, #192]	@ (80237c8 <__mdiff+0x120>)
 8023706:	e7e3      	b.n	80236d0 <__mdiff+0x28>
 8023708:	f100 0b14 	add.w	fp, r0, #20
 802370c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8023710:	f109 0310 	add.w	r3, r9, #16
 8023714:	60c5      	str	r5, [r0, #12]
 8023716:	f04f 0c00 	mov.w	ip, #0
 802371a:	f109 0514 	add.w	r5, r9, #20
 802371e:	46d9      	mov	r9, fp
 8023720:	6926      	ldr	r6, [r4, #16]
 8023722:	f104 0e14 	add.w	lr, r4, #20
 8023726:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 802372a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 802372e:	9301      	str	r3, [sp, #4]
 8023730:	9b01      	ldr	r3, [sp, #4]
 8023732:	f85e 0b04 	ldr.w	r0, [lr], #4
 8023736:	f853 af04 	ldr.w	sl, [r3, #4]!
 802373a:	b281      	uxth	r1, r0
 802373c:	9301      	str	r3, [sp, #4]
 802373e:	fa1f f38a 	uxth.w	r3, sl
 8023742:	1a5b      	subs	r3, r3, r1
 8023744:	0c00      	lsrs	r0, r0, #16
 8023746:	4463      	add	r3, ip
 8023748:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 802374c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8023750:	b29b      	uxth	r3, r3
 8023752:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8023756:	4576      	cmp	r6, lr
 8023758:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802375c:	f849 3b04 	str.w	r3, [r9], #4
 8023760:	d8e6      	bhi.n	8023730 <__mdiff+0x88>
 8023762:	1b33      	subs	r3, r6, r4
 8023764:	3b15      	subs	r3, #21
 8023766:	f023 0303 	bic.w	r3, r3, #3
 802376a:	3415      	adds	r4, #21
 802376c:	3304      	adds	r3, #4
 802376e:	42a6      	cmp	r6, r4
 8023770:	bf38      	it	cc
 8023772:	2304      	movcc	r3, #4
 8023774:	441d      	add	r5, r3
 8023776:	445b      	add	r3, fp
 8023778:	461e      	mov	r6, r3
 802377a:	462c      	mov	r4, r5
 802377c:	4544      	cmp	r4, r8
 802377e:	d30e      	bcc.n	802379e <__mdiff+0xf6>
 8023780:	f108 0103 	add.w	r1, r8, #3
 8023784:	1b49      	subs	r1, r1, r5
 8023786:	f021 0103 	bic.w	r1, r1, #3
 802378a:	3d03      	subs	r5, #3
 802378c:	45a8      	cmp	r8, r5
 802378e:	bf38      	it	cc
 8023790:	2100      	movcc	r1, #0
 8023792:	440b      	add	r3, r1
 8023794:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8023798:	b199      	cbz	r1, 80237c2 <__mdiff+0x11a>
 802379a:	6117      	str	r7, [r2, #16]
 802379c:	e79e      	b.n	80236dc <__mdiff+0x34>
 802379e:	46e6      	mov	lr, ip
 80237a0:	f854 1b04 	ldr.w	r1, [r4], #4
 80237a4:	fa1f fc81 	uxth.w	ip, r1
 80237a8:	44f4      	add	ip, lr
 80237aa:	0c08      	lsrs	r0, r1, #16
 80237ac:	4471      	add	r1, lr
 80237ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80237b2:	b289      	uxth	r1, r1
 80237b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80237b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80237bc:	f846 1b04 	str.w	r1, [r6], #4
 80237c0:	e7dc      	b.n	802377c <__mdiff+0xd4>
 80237c2:	3f01      	subs	r7, #1
 80237c4:	e7e6      	b.n	8023794 <__mdiff+0xec>
 80237c6:	bf00      	nop
 80237c8:	08030e4c 	.word	0x08030e4c
 80237cc:	08030e5d 	.word	0x08030e5d

080237d0 <__d2b>:
 80237d0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80237d4:	2101      	movs	r1, #1
 80237d6:	4690      	mov	r8, r2
 80237d8:	4699      	mov	r9, r3
 80237da:	9e08      	ldr	r6, [sp, #32]
 80237dc:	f7ff fcd6 	bl	802318c <_Balloc>
 80237e0:	4604      	mov	r4, r0
 80237e2:	b930      	cbnz	r0, 80237f2 <__d2b+0x22>
 80237e4:	4602      	mov	r2, r0
 80237e6:	f240 310f 	movw	r1, #783	@ 0x30f
 80237ea:	4b23      	ldr	r3, [pc, #140]	@ (8023878 <__d2b+0xa8>)
 80237ec:	4823      	ldr	r0, [pc, #140]	@ (802387c <__d2b+0xac>)
 80237ee:	f7fe fd55 	bl	802229c <__assert_func>
 80237f2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80237f6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80237fa:	b10d      	cbz	r5, 8023800 <__d2b+0x30>
 80237fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8023800:	9301      	str	r3, [sp, #4]
 8023802:	f1b8 0300 	subs.w	r3, r8, #0
 8023806:	d024      	beq.n	8023852 <__d2b+0x82>
 8023808:	4668      	mov	r0, sp
 802380a:	9300      	str	r3, [sp, #0]
 802380c:	f7ff fd85 	bl	802331a <__lo0bits>
 8023810:	e9dd 1200 	ldrd	r1, r2, [sp]
 8023814:	b1d8      	cbz	r0, 802384e <__d2b+0x7e>
 8023816:	f1c0 0320 	rsb	r3, r0, #32
 802381a:	fa02 f303 	lsl.w	r3, r2, r3
 802381e:	430b      	orrs	r3, r1
 8023820:	40c2      	lsrs	r2, r0
 8023822:	6163      	str	r3, [r4, #20]
 8023824:	9201      	str	r2, [sp, #4]
 8023826:	9b01      	ldr	r3, [sp, #4]
 8023828:	2b00      	cmp	r3, #0
 802382a:	bf0c      	ite	eq
 802382c:	2201      	moveq	r2, #1
 802382e:	2202      	movne	r2, #2
 8023830:	61a3      	str	r3, [r4, #24]
 8023832:	6122      	str	r2, [r4, #16]
 8023834:	b1ad      	cbz	r5, 8023862 <__d2b+0x92>
 8023836:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 802383a:	4405      	add	r5, r0
 802383c:	6035      	str	r5, [r6, #0]
 802383e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8023842:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023844:	6018      	str	r0, [r3, #0]
 8023846:	4620      	mov	r0, r4
 8023848:	b002      	add	sp, #8
 802384a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 802384e:	6161      	str	r1, [r4, #20]
 8023850:	e7e9      	b.n	8023826 <__d2b+0x56>
 8023852:	a801      	add	r0, sp, #4
 8023854:	f7ff fd61 	bl	802331a <__lo0bits>
 8023858:	9b01      	ldr	r3, [sp, #4]
 802385a:	2201      	movs	r2, #1
 802385c:	6163      	str	r3, [r4, #20]
 802385e:	3020      	adds	r0, #32
 8023860:	e7e7      	b.n	8023832 <__d2b+0x62>
 8023862:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8023866:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802386a:	6030      	str	r0, [r6, #0]
 802386c:	6918      	ldr	r0, [r3, #16]
 802386e:	f7ff fd35 	bl	80232dc <__hi0bits>
 8023872:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8023876:	e7e4      	b.n	8023842 <__d2b+0x72>
 8023878:	08030e4c 	.word	0x08030e4c
 802387c:	08030e5d 	.word	0x08030e5d

08023880 <__ssputs_r>:
 8023880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023884:	461f      	mov	r7, r3
 8023886:	688e      	ldr	r6, [r1, #8]
 8023888:	4682      	mov	sl, r0
 802388a:	42be      	cmp	r6, r7
 802388c:	460c      	mov	r4, r1
 802388e:	4690      	mov	r8, r2
 8023890:	680b      	ldr	r3, [r1, #0]
 8023892:	d82d      	bhi.n	80238f0 <__ssputs_r+0x70>
 8023894:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8023898:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 802389c:	d026      	beq.n	80238ec <__ssputs_r+0x6c>
 802389e:	6965      	ldr	r5, [r4, #20]
 80238a0:	6909      	ldr	r1, [r1, #16]
 80238a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80238a6:	eba3 0901 	sub.w	r9, r3, r1
 80238aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80238ae:	1c7b      	adds	r3, r7, #1
 80238b0:	444b      	add	r3, r9
 80238b2:	106d      	asrs	r5, r5, #1
 80238b4:	429d      	cmp	r5, r3
 80238b6:	bf38      	it	cc
 80238b8:	461d      	movcc	r5, r3
 80238ba:	0553      	lsls	r3, r2, #21
 80238bc:	d527      	bpl.n	802390e <__ssputs_r+0x8e>
 80238be:	4629      	mov	r1, r5
 80238c0:	f7ff fbd8 	bl	8023074 <_malloc_r>
 80238c4:	4606      	mov	r6, r0
 80238c6:	b360      	cbz	r0, 8023922 <__ssputs_r+0xa2>
 80238c8:	464a      	mov	r2, r9
 80238ca:	6921      	ldr	r1, [r4, #16]
 80238cc:	f7fe fcd7 	bl	802227e <memcpy>
 80238d0:	89a3      	ldrh	r3, [r4, #12]
 80238d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80238d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80238da:	81a3      	strh	r3, [r4, #12]
 80238dc:	6126      	str	r6, [r4, #16]
 80238de:	444e      	add	r6, r9
 80238e0:	6026      	str	r6, [r4, #0]
 80238e2:	463e      	mov	r6, r7
 80238e4:	6165      	str	r5, [r4, #20]
 80238e6:	eba5 0509 	sub.w	r5, r5, r9
 80238ea:	60a5      	str	r5, [r4, #8]
 80238ec:	42be      	cmp	r6, r7
 80238ee:	d900      	bls.n	80238f2 <__ssputs_r+0x72>
 80238f0:	463e      	mov	r6, r7
 80238f2:	4632      	mov	r2, r6
 80238f4:	4641      	mov	r1, r8
 80238f6:	6820      	ldr	r0, [r4, #0]
 80238f8:	f7fe fb82 	bl	8022000 <memmove>
 80238fc:	2000      	movs	r0, #0
 80238fe:	68a3      	ldr	r3, [r4, #8]
 8023900:	1b9b      	subs	r3, r3, r6
 8023902:	60a3      	str	r3, [r4, #8]
 8023904:	6823      	ldr	r3, [r4, #0]
 8023906:	4433      	add	r3, r6
 8023908:	6023      	str	r3, [r4, #0]
 802390a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802390e:	462a      	mov	r2, r5
 8023910:	f000 ff53 	bl	80247ba <_realloc_r>
 8023914:	4606      	mov	r6, r0
 8023916:	2800      	cmp	r0, #0
 8023918:	d1e0      	bne.n	80238dc <__ssputs_r+0x5c>
 802391a:	4650      	mov	r0, sl
 802391c:	6921      	ldr	r1, [r4, #16]
 802391e:	f7ff fb37 	bl	8022f90 <_free_r>
 8023922:	230c      	movs	r3, #12
 8023924:	f8ca 3000 	str.w	r3, [sl]
 8023928:	89a3      	ldrh	r3, [r4, #12]
 802392a:	f04f 30ff 	mov.w	r0, #4294967295
 802392e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023932:	81a3      	strh	r3, [r4, #12]
 8023934:	e7e9      	b.n	802390a <__ssputs_r+0x8a>
	...

08023938 <_svfiprintf_r>:
 8023938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802393c:	4698      	mov	r8, r3
 802393e:	898b      	ldrh	r3, [r1, #12]
 8023940:	4607      	mov	r7, r0
 8023942:	061b      	lsls	r3, r3, #24
 8023944:	460d      	mov	r5, r1
 8023946:	4614      	mov	r4, r2
 8023948:	b09d      	sub	sp, #116	@ 0x74
 802394a:	d510      	bpl.n	802396e <_svfiprintf_r+0x36>
 802394c:	690b      	ldr	r3, [r1, #16]
 802394e:	b973      	cbnz	r3, 802396e <_svfiprintf_r+0x36>
 8023950:	2140      	movs	r1, #64	@ 0x40
 8023952:	f7ff fb8f 	bl	8023074 <_malloc_r>
 8023956:	6028      	str	r0, [r5, #0]
 8023958:	6128      	str	r0, [r5, #16]
 802395a:	b930      	cbnz	r0, 802396a <_svfiprintf_r+0x32>
 802395c:	230c      	movs	r3, #12
 802395e:	603b      	str	r3, [r7, #0]
 8023960:	f04f 30ff 	mov.w	r0, #4294967295
 8023964:	b01d      	add	sp, #116	@ 0x74
 8023966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802396a:	2340      	movs	r3, #64	@ 0x40
 802396c:	616b      	str	r3, [r5, #20]
 802396e:	2300      	movs	r3, #0
 8023970:	9309      	str	r3, [sp, #36]	@ 0x24
 8023972:	2320      	movs	r3, #32
 8023974:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8023978:	2330      	movs	r3, #48	@ 0x30
 802397a:	f04f 0901 	mov.w	r9, #1
 802397e:	f8cd 800c 	str.w	r8, [sp, #12]
 8023982:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8023b1c <_svfiprintf_r+0x1e4>
 8023986:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802398a:	4623      	mov	r3, r4
 802398c:	469a      	mov	sl, r3
 802398e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023992:	b10a      	cbz	r2, 8023998 <_svfiprintf_r+0x60>
 8023994:	2a25      	cmp	r2, #37	@ 0x25
 8023996:	d1f9      	bne.n	802398c <_svfiprintf_r+0x54>
 8023998:	ebba 0b04 	subs.w	fp, sl, r4
 802399c:	d00b      	beq.n	80239b6 <_svfiprintf_r+0x7e>
 802399e:	465b      	mov	r3, fp
 80239a0:	4622      	mov	r2, r4
 80239a2:	4629      	mov	r1, r5
 80239a4:	4638      	mov	r0, r7
 80239a6:	f7ff ff6b 	bl	8023880 <__ssputs_r>
 80239aa:	3001      	adds	r0, #1
 80239ac:	f000 80a7 	beq.w	8023afe <_svfiprintf_r+0x1c6>
 80239b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80239b2:	445a      	add	r2, fp
 80239b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80239b6:	f89a 3000 	ldrb.w	r3, [sl]
 80239ba:	2b00      	cmp	r3, #0
 80239bc:	f000 809f 	beq.w	8023afe <_svfiprintf_r+0x1c6>
 80239c0:	2300      	movs	r3, #0
 80239c2:	f04f 32ff 	mov.w	r2, #4294967295
 80239c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80239ca:	f10a 0a01 	add.w	sl, sl, #1
 80239ce:	9304      	str	r3, [sp, #16]
 80239d0:	9307      	str	r3, [sp, #28]
 80239d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80239d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80239d8:	4654      	mov	r4, sl
 80239da:	2205      	movs	r2, #5
 80239dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80239e0:	484e      	ldr	r0, [pc, #312]	@ (8023b1c <_svfiprintf_r+0x1e4>)
 80239e2:	f7fe fc3e 	bl	8022262 <memchr>
 80239e6:	9a04      	ldr	r2, [sp, #16]
 80239e8:	b9d8      	cbnz	r0, 8023a22 <_svfiprintf_r+0xea>
 80239ea:	06d0      	lsls	r0, r2, #27
 80239ec:	bf44      	itt	mi
 80239ee:	2320      	movmi	r3, #32
 80239f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80239f4:	0711      	lsls	r1, r2, #28
 80239f6:	bf44      	itt	mi
 80239f8:	232b      	movmi	r3, #43	@ 0x2b
 80239fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80239fe:	f89a 3000 	ldrb.w	r3, [sl]
 8023a02:	2b2a      	cmp	r3, #42	@ 0x2a
 8023a04:	d015      	beq.n	8023a32 <_svfiprintf_r+0xfa>
 8023a06:	4654      	mov	r4, sl
 8023a08:	2000      	movs	r0, #0
 8023a0a:	f04f 0c0a 	mov.w	ip, #10
 8023a0e:	9a07      	ldr	r2, [sp, #28]
 8023a10:	4621      	mov	r1, r4
 8023a12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023a16:	3b30      	subs	r3, #48	@ 0x30
 8023a18:	2b09      	cmp	r3, #9
 8023a1a:	d94b      	bls.n	8023ab4 <_svfiprintf_r+0x17c>
 8023a1c:	b1b0      	cbz	r0, 8023a4c <_svfiprintf_r+0x114>
 8023a1e:	9207      	str	r2, [sp, #28]
 8023a20:	e014      	b.n	8023a4c <_svfiprintf_r+0x114>
 8023a22:	eba0 0308 	sub.w	r3, r0, r8
 8023a26:	fa09 f303 	lsl.w	r3, r9, r3
 8023a2a:	4313      	orrs	r3, r2
 8023a2c:	46a2      	mov	sl, r4
 8023a2e:	9304      	str	r3, [sp, #16]
 8023a30:	e7d2      	b.n	80239d8 <_svfiprintf_r+0xa0>
 8023a32:	9b03      	ldr	r3, [sp, #12]
 8023a34:	1d19      	adds	r1, r3, #4
 8023a36:	681b      	ldr	r3, [r3, #0]
 8023a38:	9103      	str	r1, [sp, #12]
 8023a3a:	2b00      	cmp	r3, #0
 8023a3c:	bfbb      	ittet	lt
 8023a3e:	425b      	neglt	r3, r3
 8023a40:	f042 0202 	orrlt.w	r2, r2, #2
 8023a44:	9307      	strge	r3, [sp, #28]
 8023a46:	9307      	strlt	r3, [sp, #28]
 8023a48:	bfb8      	it	lt
 8023a4a:	9204      	strlt	r2, [sp, #16]
 8023a4c:	7823      	ldrb	r3, [r4, #0]
 8023a4e:	2b2e      	cmp	r3, #46	@ 0x2e
 8023a50:	d10a      	bne.n	8023a68 <_svfiprintf_r+0x130>
 8023a52:	7863      	ldrb	r3, [r4, #1]
 8023a54:	2b2a      	cmp	r3, #42	@ 0x2a
 8023a56:	d132      	bne.n	8023abe <_svfiprintf_r+0x186>
 8023a58:	9b03      	ldr	r3, [sp, #12]
 8023a5a:	3402      	adds	r4, #2
 8023a5c:	1d1a      	adds	r2, r3, #4
 8023a5e:	681b      	ldr	r3, [r3, #0]
 8023a60:	9203      	str	r2, [sp, #12]
 8023a62:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8023a66:	9305      	str	r3, [sp, #20]
 8023a68:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8023b20 <_svfiprintf_r+0x1e8>
 8023a6c:	2203      	movs	r2, #3
 8023a6e:	4650      	mov	r0, sl
 8023a70:	7821      	ldrb	r1, [r4, #0]
 8023a72:	f7fe fbf6 	bl	8022262 <memchr>
 8023a76:	b138      	cbz	r0, 8023a88 <_svfiprintf_r+0x150>
 8023a78:	2240      	movs	r2, #64	@ 0x40
 8023a7a:	9b04      	ldr	r3, [sp, #16]
 8023a7c:	eba0 000a 	sub.w	r0, r0, sl
 8023a80:	4082      	lsls	r2, r0
 8023a82:	4313      	orrs	r3, r2
 8023a84:	3401      	adds	r4, #1
 8023a86:	9304      	str	r3, [sp, #16]
 8023a88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023a8c:	2206      	movs	r2, #6
 8023a8e:	4825      	ldr	r0, [pc, #148]	@ (8023b24 <_svfiprintf_r+0x1ec>)
 8023a90:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8023a94:	f7fe fbe5 	bl	8022262 <memchr>
 8023a98:	2800      	cmp	r0, #0
 8023a9a:	d036      	beq.n	8023b0a <_svfiprintf_r+0x1d2>
 8023a9c:	4b22      	ldr	r3, [pc, #136]	@ (8023b28 <_svfiprintf_r+0x1f0>)
 8023a9e:	bb1b      	cbnz	r3, 8023ae8 <_svfiprintf_r+0x1b0>
 8023aa0:	9b03      	ldr	r3, [sp, #12]
 8023aa2:	3307      	adds	r3, #7
 8023aa4:	f023 0307 	bic.w	r3, r3, #7
 8023aa8:	3308      	adds	r3, #8
 8023aaa:	9303      	str	r3, [sp, #12]
 8023aac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023aae:	4433      	add	r3, r6
 8023ab0:	9309      	str	r3, [sp, #36]	@ 0x24
 8023ab2:	e76a      	b.n	802398a <_svfiprintf_r+0x52>
 8023ab4:	460c      	mov	r4, r1
 8023ab6:	2001      	movs	r0, #1
 8023ab8:	fb0c 3202 	mla	r2, ip, r2, r3
 8023abc:	e7a8      	b.n	8023a10 <_svfiprintf_r+0xd8>
 8023abe:	2300      	movs	r3, #0
 8023ac0:	f04f 0c0a 	mov.w	ip, #10
 8023ac4:	4619      	mov	r1, r3
 8023ac6:	3401      	adds	r4, #1
 8023ac8:	9305      	str	r3, [sp, #20]
 8023aca:	4620      	mov	r0, r4
 8023acc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023ad0:	3a30      	subs	r2, #48	@ 0x30
 8023ad2:	2a09      	cmp	r2, #9
 8023ad4:	d903      	bls.n	8023ade <_svfiprintf_r+0x1a6>
 8023ad6:	2b00      	cmp	r3, #0
 8023ad8:	d0c6      	beq.n	8023a68 <_svfiprintf_r+0x130>
 8023ada:	9105      	str	r1, [sp, #20]
 8023adc:	e7c4      	b.n	8023a68 <_svfiprintf_r+0x130>
 8023ade:	4604      	mov	r4, r0
 8023ae0:	2301      	movs	r3, #1
 8023ae2:	fb0c 2101 	mla	r1, ip, r1, r2
 8023ae6:	e7f0      	b.n	8023aca <_svfiprintf_r+0x192>
 8023ae8:	ab03      	add	r3, sp, #12
 8023aea:	9300      	str	r3, [sp, #0]
 8023aec:	462a      	mov	r2, r5
 8023aee:	4638      	mov	r0, r7
 8023af0:	4b0e      	ldr	r3, [pc, #56]	@ (8023b2c <_svfiprintf_r+0x1f4>)
 8023af2:	a904      	add	r1, sp, #16
 8023af4:	f7fd fc4a 	bl	802138c <_printf_float>
 8023af8:	1c42      	adds	r2, r0, #1
 8023afa:	4606      	mov	r6, r0
 8023afc:	d1d6      	bne.n	8023aac <_svfiprintf_r+0x174>
 8023afe:	89ab      	ldrh	r3, [r5, #12]
 8023b00:	065b      	lsls	r3, r3, #25
 8023b02:	f53f af2d 	bmi.w	8023960 <_svfiprintf_r+0x28>
 8023b06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023b08:	e72c      	b.n	8023964 <_svfiprintf_r+0x2c>
 8023b0a:	ab03      	add	r3, sp, #12
 8023b0c:	9300      	str	r3, [sp, #0]
 8023b0e:	462a      	mov	r2, r5
 8023b10:	4638      	mov	r0, r7
 8023b12:	4b06      	ldr	r3, [pc, #24]	@ (8023b2c <_svfiprintf_r+0x1f4>)
 8023b14:	a904      	add	r1, sp, #16
 8023b16:	f7fd fed7 	bl	80218c8 <_printf_i>
 8023b1a:	e7ed      	b.n	8023af8 <_svfiprintf_r+0x1c0>
 8023b1c:	08030eb6 	.word	0x08030eb6
 8023b20:	08030ebc 	.word	0x08030ebc
 8023b24:	08030ec0 	.word	0x08030ec0
 8023b28:	0802138d 	.word	0x0802138d
 8023b2c:	08023881 	.word	0x08023881

08023b30 <_sungetc_r>:
 8023b30:	b538      	push	{r3, r4, r5, lr}
 8023b32:	1c4b      	adds	r3, r1, #1
 8023b34:	4614      	mov	r4, r2
 8023b36:	d103      	bne.n	8023b40 <_sungetc_r+0x10>
 8023b38:	f04f 35ff 	mov.w	r5, #4294967295
 8023b3c:	4628      	mov	r0, r5
 8023b3e:	bd38      	pop	{r3, r4, r5, pc}
 8023b40:	8993      	ldrh	r3, [r2, #12]
 8023b42:	b2cd      	uxtb	r5, r1
 8023b44:	f023 0320 	bic.w	r3, r3, #32
 8023b48:	8193      	strh	r3, [r2, #12]
 8023b4a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8023b4c:	6852      	ldr	r2, [r2, #4]
 8023b4e:	b18b      	cbz	r3, 8023b74 <_sungetc_r+0x44>
 8023b50:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8023b52:	4293      	cmp	r3, r2
 8023b54:	dd08      	ble.n	8023b68 <_sungetc_r+0x38>
 8023b56:	6823      	ldr	r3, [r4, #0]
 8023b58:	1e5a      	subs	r2, r3, #1
 8023b5a:	6022      	str	r2, [r4, #0]
 8023b5c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8023b60:	6863      	ldr	r3, [r4, #4]
 8023b62:	3301      	adds	r3, #1
 8023b64:	6063      	str	r3, [r4, #4]
 8023b66:	e7e9      	b.n	8023b3c <_sungetc_r+0xc>
 8023b68:	4621      	mov	r1, r4
 8023b6a:	f000 fd8f 	bl	802468c <__submore>
 8023b6e:	2800      	cmp	r0, #0
 8023b70:	d0f1      	beq.n	8023b56 <_sungetc_r+0x26>
 8023b72:	e7e1      	b.n	8023b38 <_sungetc_r+0x8>
 8023b74:	6921      	ldr	r1, [r4, #16]
 8023b76:	6823      	ldr	r3, [r4, #0]
 8023b78:	b151      	cbz	r1, 8023b90 <_sungetc_r+0x60>
 8023b7a:	4299      	cmp	r1, r3
 8023b7c:	d208      	bcs.n	8023b90 <_sungetc_r+0x60>
 8023b7e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8023b82:	42a9      	cmp	r1, r5
 8023b84:	d104      	bne.n	8023b90 <_sungetc_r+0x60>
 8023b86:	3b01      	subs	r3, #1
 8023b88:	3201      	adds	r2, #1
 8023b8a:	6023      	str	r3, [r4, #0]
 8023b8c:	6062      	str	r2, [r4, #4]
 8023b8e:	e7d5      	b.n	8023b3c <_sungetc_r+0xc>
 8023b90:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8023b94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8023b98:	6363      	str	r3, [r4, #52]	@ 0x34
 8023b9a:	2303      	movs	r3, #3
 8023b9c:	63a3      	str	r3, [r4, #56]	@ 0x38
 8023b9e:	4623      	mov	r3, r4
 8023ba0:	f803 5f46 	strb.w	r5, [r3, #70]!
 8023ba4:	6023      	str	r3, [r4, #0]
 8023ba6:	2301      	movs	r3, #1
 8023ba8:	e7dc      	b.n	8023b64 <_sungetc_r+0x34>

08023baa <__ssrefill_r>:
 8023baa:	b510      	push	{r4, lr}
 8023bac:	460c      	mov	r4, r1
 8023bae:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8023bb0:	b169      	cbz	r1, 8023bce <__ssrefill_r+0x24>
 8023bb2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8023bb6:	4299      	cmp	r1, r3
 8023bb8:	d001      	beq.n	8023bbe <__ssrefill_r+0x14>
 8023bba:	f7ff f9e9 	bl	8022f90 <_free_r>
 8023bbe:	2000      	movs	r0, #0
 8023bc0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8023bc2:	6360      	str	r0, [r4, #52]	@ 0x34
 8023bc4:	6063      	str	r3, [r4, #4]
 8023bc6:	b113      	cbz	r3, 8023bce <__ssrefill_r+0x24>
 8023bc8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8023bca:	6023      	str	r3, [r4, #0]
 8023bcc:	bd10      	pop	{r4, pc}
 8023bce:	6923      	ldr	r3, [r4, #16]
 8023bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8023bd4:	6023      	str	r3, [r4, #0]
 8023bd6:	2300      	movs	r3, #0
 8023bd8:	6063      	str	r3, [r4, #4]
 8023bda:	89a3      	ldrh	r3, [r4, #12]
 8023bdc:	f043 0320 	orr.w	r3, r3, #32
 8023be0:	81a3      	strh	r3, [r4, #12]
 8023be2:	e7f3      	b.n	8023bcc <__ssrefill_r+0x22>

08023be4 <__ssvfiscanf_r>:
 8023be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023be8:	460c      	mov	r4, r1
 8023bea:	2100      	movs	r1, #0
 8023bec:	4606      	mov	r6, r0
 8023bee:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8023bf2:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8023bf6:	49ab      	ldr	r1, [pc, #684]	@ (8023ea4 <__ssvfiscanf_r+0x2c0>)
 8023bf8:	f10d 0804 	add.w	r8, sp, #4
 8023bfc:	91a0      	str	r1, [sp, #640]	@ 0x280
 8023bfe:	49aa      	ldr	r1, [pc, #680]	@ (8023ea8 <__ssvfiscanf_r+0x2c4>)
 8023c00:	4faa      	ldr	r7, [pc, #680]	@ (8023eac <__ssvfiscanf_r+0x2c8>)
 8023c02:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8023c06:	91a1      	str	r1, [sp, #644]	@ 0x284
 8023c08:	9300      	str	r3, [sp, #0]
 8023c0a:	f892 9000 	ldrb.w	r9, [r2]
 8023c0e:	f1b9 0f00 	cmp.w	r9, #0
 8023c12:	f000 8159 	beq.w	8023ec8 <__ssvfiscanf_r+0x2e4>
 8023c16:	f817 3009 	ldrb.w	r3, [r7, r9]
 8023c1a:	1c55      	adds	r5, r2, #1
 8023c1c:	f013 0308 	ands.w	r3, r3, #8
 8023c20:	d019      	beq.n	8023c56 <__ssvfiscanf_r+0x72>
 8023c22:	6863      	ldr	r3, [r4, #4]
 8023c24:	2b00      	cmp	r3, #0
 8023c26:	dd0f      	ble.n	8023c48 <__ssvfiscanf_r+0x64>
 8023c28:	6823      	ldr	r3, [r4, #0]
 8023c2a:	781a      	ldrb	r2, [r3, #0]
 8023c2c:	5cba      	ldrb	r2, [r7, r2]
 8023c2e:	0712      	lsls	r2, r2, #28
 8023c30:	d401      	bmi.n	8023c36 <__ssvfiscanf_r+0x52>
 8023c32:	462a      	mov	r2, r5
 8023c34:	e7e9      	b.n	8023c0a <__ssvfiscanf_r+0x26>
 8023c36:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8023c38:	3301      	adds	r3, #1
 8023c3a:	3201      	adds	r2, #1
 8023c3c:	9245      	str	r2, [sp, #276]	@ 0x114
 8023c3e:	6862      	ldr	r2, [r4, #4]
 8023c40:	6023      	str	r3, [r4, #0]
 8023c42:	3a01      	subs	r2, #1
 8023c44:	6062      	str	r2, [r4, #4]
 8023c46:	e7ec      	b.n	8023c22 <__ssvfiscanf_r+0x3e>
 8023c48:	4621      	mov	r1, r4
 8023c4a:	4630      	mov	r0, r6
 8023c4c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8023c4e:	4798      	blx	r3
 8023c50:	2800      	cmp	r0, #0
 8023c52:	d0e9      	beq.n	8023c28 <__ssvfiscanf_r+0x44>
 8023c54:	e7ed      	b.n	8023c32 <__ssvfiscanf_r+0x4e>
 8023c56:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8023c5a:	f040 8086 	bne.w	8023d6a <__ssvfiscanf_r+0x186>
 8023c5e:	9341      	str	r3, [sp, #260]	@ 0x104
 8023c60:	9343      	str	r3, [sp, #268]	@ 0x10c
 8023c62:	7853      	ldrb	r3, [r2, #1]
 8023c64:	2b2a      	cmp	r3, #42	@ 0x2a
 8023c66:	bf04      	itt	eq
 8023c68:	2310      	moveq	r3, #16
 8023c6a:	1c95      	addeq	r5, r2, #2
 8023c6c:	f04f 020a 	mov.w	r2, #10
 8023c70:	bf08      	it	eq
 8023c72:	9341      	streq	r3, [sp, #260]	@ 0x104
 8023c74:	46aa      	mov	sl, r5
 8023c76:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8023c7a:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8023c7e:	2b09      	cmp	r3, #9
 8023c80:	d91e      	bls.n	8023cc0 <__ssvfiscanf_r+0xdc>
 8023c82:	f8df b22c 	ldr.w	fp, [pc, #556]	@ 8023eb0 <__ssvfiscanf_r+0x2cc>
 8023c86:	2203      	movs	r2, #3
 8023c88:	4658      	mov	r0, fp
 8023c8a:	f7fe faea 	bl	8022262 <memchr>
 8023c8e:	b138      	cbz	r0, 8023ca0 <__ssvfiscanf_r+0xbc>
 8023c90:	2301      	movs	r3, #1
 8023c92:	4655      	mov	r5, sl
 8023c94:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8023c96:	eba0 000b 	sub.w	r0, r0, fp
 8023c9a:	4083      	lsls	r3, r0
 8023c9c:	4313      	orrs	r3, r2
 8023c9e:	9341      	str	r3, [sp, #260]	@ 0x104
 8023ca0:	f815 3b01 	ldrb.w	r3, [r5], #1
 8023ca4:	2b78      	cmp	r3, #120	@ 0x78
 8023ca6:	d806      	bhi.n	8023cb6 <__ssvfiscanf_r+0xd2>
 8023ca8:	2b57      	cmp	r3, #87	@ 0x57
 8023caa:	d810      	bhi.n	8023cce <__ssvfiscanf_r+0xea>
 8023cac:	2b25      	cmp	r3, #37	@ 0x25
 8023cae:	d05c      	beq.n	8023d6a <__ssvfiscanf_r+0x186>
 8023cb0:	d856      	bhi.n	8023d60 <__ssvfiscanf_r+0x17c>
 8023cb2:	2b00      	cmp	r3, #0
 8023cb4:	d074      	beq.n	8023da0 <__ssvfiscanf_r+0x1bc>
 8023cb6:	2303      	movs	r3, #3
 8023cb8:	9347      	str	r3, [sp, #284]	@ 0x11c
 8023cba:	230a      	movs	r3, #10
 8023cbc:	9342      	str	r3, [sp, #264]	@ 0x108
 8023cbe:	e087      	b.n	8023dd0 <__ssvfiscanf_r+0x1ec>
 8023cc0:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8023cc2:	4655      	mov	r5, sl
 8023cc4:	fb02 1103 	mla	r1, r2, r3, r1
 8023cc8:	3930      	subs	r1, #48	@ 0x30
 8023cca:	9143      	str	r1, [sp, #268]	@ 0x10c
 8023ccc:	e7d2      	b.n	8023c74 <__ssvfiscanf_r+0x90>
 8023cce:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8023cd2:	2a20      	cmp	r2, #32
 8023cd4:	d8ef      	bhi.n	8023cb6 <__ssvfiscanf_r+0xd2>
 8023cd6:	a101      	add	r1, pc, #4	@ (adr r1, 8023cdc <__ssvfiscanf_r+0xf8>)
 8023cd8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8023cdc:	08023daf 	.word	0x08023daf
 8023ce0:	08023cb7 	.word	0x08023cb7
 8023ce4:	08023cb7 	.word	0x08023cb7
 8023ce8:	08023e09 	.word	0x08023e09
 8023cec:	08023cb7 	.word	0x08023cb7
 8023cf0:	08023cb7 	.word	0x08023cb7
 8023cf4:	08023cb7 	.word	0x08023cb7
 8023cf8:	08023cb7 	.word	0x08023cb7
 8023cfc:	08023cb7 	.word	0x08023cb7
 8023d00:	08023cb7 	.word	0x08023cb7
 8023d04:	08023cb7 	.word	0x08023cb7
 8023d08:	08023e1f 	.word	0x08023e1f
 8023d0c:	08023e05 	.word	0x08023e05
 8023d10:	08023d67 	.word	0x08023d67
 8023d14:	08023d67 	.word	0x08023d67
 8023d18:	08023d67 	.word	0x08023d67
 8023d1c:	08023cb7 	.word	0x08023cb7
 8023d20:	08023dc1 	.word	0x08023dc1
 8023d24:	08023cb7 	.word	0x08023cb7
 8023d28:	08023cb7 	.word	0x08023cb7
 8023d2c:	08023cb7 	.word	0x08023cb7
 8023d30:	08023cb7 	.word	0x08023cb7
 8023d34:	08023e2f 	.word	0x08023e2f
 8023d38:	08023dc9 	.word	0x08023dc9
 8023d3c:	08023da7 	.word	0x08023da7
 8023d40:	08023cb7 	.word	0x08023cb7
 8023d44:	08023cb7 	.word	0x08023cb7
 8023d48:	08023e2b 	.word	0x08023e2b
 8023d4c:	08023cb7 	.word	0x08023cb7
 8023d50:	08023e05 	.word	0x08023e05
 8023d54:	08023cb7 	.word	0x08023cb7
 8023d58:	08023cb7 	.word	0x08023cb7
 8023d5c:	08023daf 	.word	0x08023daf
 8023d60:	3b45      	subs	r3, #69	@ 0x45
 8023d62:	2b02      	cmp	r3, #2
 8023d64:	d8a7      	bhi.n	8023cb6 <__ssvfiscanf_r+0xd2>
 8023d66:	2305      	movs	r3, #5
 8023d68:	e031      	b.n	8023dce <__ssvfiscanf_r+0x1ea>
 8023d6a:	6863      	ldr	r3, [r4, #4]
 8023d6c:	2b00      	cmp	r3, #0
 8023d6e:	dd0d      	ble.n	8023d8c <__ssvfiscanf_r+0x1a8>
 8023d70:	6823      	ldr	r3, [r4, #0]
 8023d72:	781a      	ldrb	r2, [r3, #0]
 8023d74:	454a      	cmp	r2, r9
 8023d76:	f040 80a7 	bne.w	8023ec8 <__ssvfiscanf_r+0x2e4>
 8023d7a:	3301      	adds	r3, #1
 8023d7c:	6862      	ldr	r2, [r4, #4]
 8023d7e:	6023      	str	r3, [r4, #0]
 8023d80:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8023d82:	3a01      	subs	r2, #1
 8023d84:	3301      	adds	r3, #1
 8023d86:	6062      	str	r2, [r4, #4]
 8023d88:	9345      	str	r3, [sp, #276]	@ 0x114
 8023d8a:	e752      	b.n	8023c32 <__ssvfiscanf_r+0x4e>
 8023d8c:	4621      	mov	r1, r4
 8023d8e:	4630      	mov	r0, r6
 8023d90:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8023d92:	4798      	blx	r3
 8023d94:	2800      	cmp	r0, #0
 8023d96:	d0eb      	beq.n	8023d70 <__ssvfiscanf_r+0x18c>
 8023d98:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8023d9a:	2800      	cmp	r0, #0
 8023d9c:	f040 808c 	bne.w	8023eb8 <__ssvfiscanf_r+0x2d4>
 8023da0:	f04f 30ff 	mov.w	r0, #4294967295
 8023da4:	e08c      	b.n	8023ec0 <__ssvfiscanf_r+0x2dc>
 8023da6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8023da8:	f042 0220 	orr.w	r2, r2, #32
 8023dac:	9241      	str	r2, [sp, #260]	@ 0x104
 8023dae:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8023db0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8023db4:	9241      	str	r2, [sp, #260]	@ 0x104
 8023db6:	2210      	movs	r2, #16
 8023db8:	2b6e      	cmp	r3, #110	@ 0x6e
 8023dba:	9242      	str	r2, [sp, #264]	@ 0x108
 8023dbc:	d902      	bls.n	8023dc4 <__ssvfiscanf_r+0x1e0>
 8023dbe:	e005      	b.n	8023dcc <__ssvfiscanf_r+0x1e8>
 8023dc0:	2300      	movs	r3, #0
 8023dc2:	9342      	str	r3, [sp, #264]	@ 0x108
 8023dc4:	2303      	movs	r3, #3
 8023dc6:	e002      	b.n	8023dce <__ssvfiscanf_r+0x1ea>
 8023dc8:	2308      	movs	r3, #8
 8023dca:	9342      	str	r3, [sp, #264]	@ 0x108
 8023dcc:	2304      	movs	r3, #4
 8023dce:	9347      	str	r3, [sp, #284]	@ 0x11c
 8023dd0:	6863      	ldr	r3, [r4, #4]
 8023dd2:	2b00      	cmp	r3, #0
 8023dd4:	dd39      	ble.n	8023e4a <__ssvfiscanf_r+0x266>
 8023dd6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8023dd8:	0659      	lsls	r1, r3, #25
 8023dda:	d404      	bmi.n	8023de6 <__ssvfiscanf_r+0x202>
 8023ddc:	6823      	ldr	r3, [r4, #0]
 8023dde:	781a      	ldrb	r2, [r3, #0]
 8023de0:	5cba      	ldrb	r2, [r7, r2]
 8023de2:	0712      	lsls	r2, r2, #28
 8023de4:	d438      	bmi.n	8023e58 <__ssvfiscanf_r+0x274>
 8023de6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8023de8:	2b02      	cmp	r3, #2
 8023dea:	dc47      	bgt.n	8023e7c <__ssvfiscanf_r+0x298>
 8023dec:	466b      	mov	r3, sp
 8023dee:	4622      	mov	r2, r4
 8023df0:	4630      	mov	r0, r6
 8023df2:	a941      	add	r1, sp, #260	@ 0x104
 8023df4:	f000 f9aa 	bl	802414c <_scanf_chars>
 8023df8:	2801      	cmp	r0, #1
 8023dfa:	d065      	beq.n	8023ec8 <__ssvfiscanf_r+0x2e4>
 8023dfc:	2802      	cmp	r0, #2
 8023dfe:	f47f af18 	bne.w	8023c32 <__ssvfiscanf_r+0x4e>
 8023e02:	e7c9      	b.n	8023d98 <__ssvfiscanf_r+0x1b4>
 8023e04:	220a      	movs	r2, #10
 8023e06:	e7d7      	b.n	8023db8 <__ssvfiscanf_r+0x1d4>
 8023e08:	4629      	mov	r1, r5
 8023e0a:	4640      	mov	r0, r8
 8023e0c:	f000 fc05 	bl	802461a <__sccl>
 8023e10:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8023e12:	4605      	mov	r5, r0
 8023e14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023e18:	9341      	str	r3, [sp, #260]	@ 0x104
 8023e1a:	2301      	movs	r3, #1
 8023e1c:	e7d7      	b.n	8023dce <__ssvfiscanf_r+0x1ea>
 8023e1e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8023e20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023e24:	9341      	str	r3, [sp, #260]	@ 0x104
 8023e26:	2300      	movs	r3, #0
 8023e28:	e7d1      	b.n	8023dce <__ssvfiscanf_r+0x1ea>
 8023e2a:	2302      	movs	r3, #2
 8023e2c:	e7cf      	b.n	8023dce <__ssvfiscanf_r+0x1ea>
 8023e2e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8023e30:	06c3      	lsls	r3, r0, #27
 8023e32:	f53f aefe 	bmi.w	8023c32 <__ssvfiscanf_r+0x4e>
 8023e36:	9b00      	ldr	r3, [sp, #0]
 8023e38:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8023e3a:	1d19      	adds	r1, r3, #4
 8023e3c:	9100      	str	r1, [sp, #0]
 8023e3e:	681b      	ldr	r3, [r3, #0]
 8023e40:	07c0      	lsls	r0, r0, #31
 8023e42:	bf4c      	ite	mi
 8023e44:	801a      	strhmi	r2, [r3, #0]
 8023e46:	601a      	strpl	r2, [r3, #0]
 8023e48:	e6f3      	b.n	8023c32 <__ssvfiscanf_r+0x4e>
 8023e4a:	4621      	mov	r1, r4
 8023e4c:	4630      	mov	r0, r6
 8023e4e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8023e50:	4798      	blx	r3
 8023e52:	2800      	cmp	r0, #0
 8023e54:	d0bf      	beq.n	8023dd6 <__ssvfiscanf_r+0x1f2>
 8023e56:	e79f      	b.n	8023d98 <__ssvfiscanf_r+0x1b4>
 8023e58:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8023e5a:	3201      	adds	r2, #1
 8023e5c:	9245      	str	r2, [sp, #276]	@ 0x114
 8023e5e:	6862      	ldr	r2, [r4, #4]
 8023e60:	3a01      	subs	r2, #1
 8023e62:	2a00      	cmp	r2, #0
 8023e64:	6062      	str	r2, [r4, #4]
 8023e66:	dd02      	ble.n	8023e6e <__ssvfiscanf_r+0x28a>
 8023e68:	3301      	adds	r3, #1
 8023e6a:	6023      	str	r3, [r4, #0]
 8023e6c:	e7b6      	b.n	8023ddc <__ssvfiscanf_r+0x1f8>
 8023e6e:	4621      	mov	r1, r4
 8023e70:	4630      	mov	r0, r6
 8023e72:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8023e74:	4798      	blx	r3
 8023e76:	2800      	cmp	r0, #0
 8023e78:	d0b0      	beq.n	8023ddc <__ssvfiscanf_r+0x1f8>
 8023e7a:	e78d      	b.n	8023d98 <__ssvfiscanf_r+0x1b4>
 8023e7c:	2b04      	cmp	r3, #4
 8023e7e:	dc06      	bgt.n	8023e8e <__ssvfiscanf_r+0x2aa>
 8023e80:	466b      	mov	r3, sp
 8023e82:	4622      	mov	r2, r4
 8023e84:	4630      	mov	r0, r6
 8023e86:	a941      	add	r1, sp, #260	@ 0x104
 8023e88:	f000 f9ba 	bl	8024200 <_scanf_i>
 8023e8c:	e7b4      	b.n	8023df8 <__ssvfiscanf_r+0x214>
 8023e8e:	4b09      	ldr	r3, [pc, #36]	@ (8023eb4 <__ssvfiscanf_r+0x2d0>)
 8023e90:	2b00      	cmp	r3, #0
 8023e92:	f43f aece 	beq.w	8023c32 <__ssvfiscanf_r+0x4e>
 8023e96:	466b      	mov	r3, sp
 8023e98:	4622      	mov	r2, r4
 8023e9a:	4630      	mov	r0, r6
 8023e9c:	a941      	add	r1, sp, #260	@ 0x104
 8023e9e:	f3af 8000 	nop.w
 8023ea2:	e7a9      	b.n	8023df8 <__ssvfiscanf_r+0x214>
 8023ea4:	08023b31 	.word	0x08023b31
 8023ea8:	08023bab 	.word	0x08023bab
 8023eac:	08030eed 	.word	0x08030eed
 8023eb0:	08030ebc 	.word	0x08030ebc
 8023eb4:	00000000 	.word	0x00000000
 8023eb8:	89a3      	ldrh	r3, [r4, #12]
 8023eba:	065b      	lsls	r3, r3, #25
 8023ebc:	f53f af70 	bmi.w	8023da0 <__ssvfiscanf_r+0x1bc>
 8023ec0:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8023ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023ec8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8023eca:	e7f9      	b.n	8023ec0 <__ssvfiscanf_r+0x2dc>

08023ecc <__sfputc_r>:
 8023ecc:	6893      	ldr	r3, [r2, #8]
 8023ece:	b410      	push	{r4}
 8023ed0:	3b01      	subs	r3, #1
 8023ed2:	2b00      	cmp	r3, #0
 8023ed4:	6093      	str	r3, [r2, #8]
 8023ed6:	da07      	bge.n	8023ee8 <__sfputc_r+0x1c>
 8023ed8:	6994      	ldr	r4, [r2, #24]
 8023eda:	42a3      	cmp	r3, r4
 8023edc:	db01      	blt.n	8023ee2 <__sfputc_r+0x16>
 8023ede:	290a      	cmp	r1, #10
 8023ee0:	d102      	bne.n	8023ee8 <__sfputc_r+0x1c>
 8023ee2:	bc10      	pop	{r4}
 8023ee4:	f7fd bfe7 	b.w	8021eb6 <__swbuf_r>
 8023ee8:	6813      	ldr	r3, [r2, #0]
 8023eea:	1c58      	adds	r0, r3, #1
 8023eec:	6010      	str	r0, [r2, #0]
 8023eee:	7019      	strb	r1, [r3, #0]
 8023ef0:	4608      	mov	r0, r1
 8023ef2:	bc10      	pop	{r4}
 8023ef4:	4770      	bx	lr

08023ef6 <__sfputs_r>:
 8023ef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023ef8:	4606      	mov	r6, r0
 8023efa:	460f      	mov	r7, r1
 8023efc:	4614      	mov	r4, r2
 8023efe:	18d5      	adds	r5, r2, r3
 8023f00:	42ac      	cmp	r4, r5
 8023f02:	d101      	bne.n	8023f08 <__sfputs_r+0x12>
 8023f04:	2000      	movs	r0, #0
 8023f06:	e007      	b.n	8023f18 <__sfputs_r+0x22>
 8023f08:	463a      	mov	r2, r7
 8023f0a:	4630      	mov	r0, r6
 8023f0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023f10:	f7ff ffdc 	bl	8023ecc <__sfputc_r>
 8023f14:	1c43      	adds	r3, r0, #1
 8023f16:	d1f3      	bne.n	8023f00 <__sfputs_r+0xa>
 8023f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08023f1c <_vfiprintf_r>:
 8023f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f20:	460d      	mov	r5, r1
 8023f22:	4614      	mov	r4, r2
 8023f24:	4698      	mov	r8, r3
 8023f26:	4606      	mov	r6, r0
 8023f28:	b09d      	sub	sp, #116	@ 0x74
 8023f2a:	b118      	cbz	r0, 8023f34 <_vfiprintf_r+0x18>
 8023f2c:	6a03      	ldr	r3, [r0, #32]
 8023f2e:	b90b      	cbnz	r3, 8023f34 <_vfiprintf_r+0x18>
 8023f30:	f7fd fe74 	bl	8021c1c <__sinit>
 8023f34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023f36:	07d9      	lsls	r1, r3, #31
 8023f38:	d405      	bmi.n	8023f46 <_vfiprintf_r+0x2a>
 8023f3a:	89ab      	ldrh	r3, [r5, #12]
 8023f3c:	059a      	lsls	r2, r3, #22
 8023f3e:	d402      	bmi.n	8023f46 <_vfiprintf_r+0x2a>
 8023f40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023f42:	f7fe f98c 	bl	802225e <__retarget_lock_acquire_recursive>
 8023f46:	89ab      	ldrh	r3, [r5, #12]
 8023f48:	071b      	lsls	r3, r3, #28
 8023f4a:	d501      	bpl.n	8023f50 <_vfiprintf_r+0x34>
 8023f4c:	692b      	ldr	r3, [r5, #16]
 8023f4e:	b99b      	cbnz	r3, 8023f78 <_vfiprintf_r+0x5c>
 8023f50:	4629      	mov	r1, r5
 8023f52:	4630      	mov	r0, r6
 8023f54:	f7fd ffee 	bl	8021f34 <__swsetup_r>
 8023f58:	b170      	cbz	r0, 8023f78 <_vfiprintf_r+0x5c>
 8023f5a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023f5c:	07dc      	lsls	r4, r3, #31
 8023f5e:	d504      	bpl.n	8023f6a <_vfiprintf_r+0x4e>
 8023f60:	f04f 30ff 	mov.w	r0, #4294967295
 8023f64:	b01d      	add	sp, #116	@ 0x74
 8023f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023f6a:	89ab      	ldrh	r3, [r5, #12]
 8023f6c:	0598      	lsls	r0, r3, #22
 8023f6e:	d4f7      	bmi.n	8023f60 <_vfiprintf_r+0x44>
 8023f70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023f72:	f7fe f975 	bl	8022260 <__retarget_lock_release_recursive>
 8023f76:	e7f3      	b.n	8023f60 <_vfiprintf_r+0x44>
 8023f78:	2300      	movs	r3, #0
 8023f7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8023f7c:	2320      	movs	r3, #32
 8023f7e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8023f82:	2330      	movs	r3, #48	@ 0x30
 8023f84:	f04f 0901 	mov.w	r9, #1
 8023f88:	f8cd 800c 	str.w	r8, [sp, #12]
 8023f8c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8024138 <_vfiprintf_r+0x21c>
 8023f90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8023f94:	4623      	mov	r3, r4
 8023f96:	469a      	mov	sl, r3
 8023f98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023f9c:	b10a      	cbz	r2, 8023fa2 <_vfiprintf_r+0x86>
 8023f9e:	2a25      	cmp	r2, #37	@ 0x25
 8023fa0:	d1f9      	bne.n	8023f96 <_vfiprintf_r+0x7a>
 8023fa2:	ebba 0b04 	subs.w	fp, sl, r4
 8023fa6:	d00b      	beq.n	8023fc0 <_vfiprintf_r+0xa4>
 8023fa8:	465b      	mov	r3, fp
 8023faa:	4622      	mov	r2, r4
 8023fac:	4629      	mov	r1, r5
 8023fae:	4630      	mov	r0, r6
 8023fb0:	f7ff ffa1 	bl	8023ef6 <__sfputs_r>
 8023fb4:	3001      	adds	r0, #1
 8023fb6:	f000 80a7 	beq.w	8024108 <_vfiprintf_r+0x1ec>
 8023fba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023fbc:	445a      	add	r2, fp
 8023fbe:	9209      	str	r2, [sp, #36]	@ 0x24
 8023fc0:	f89a 3000 	ldrb.w	r3, [sl]
 8023fc4:	2b00      	cmp	r3, #0
 8023fc6:	f000 809f 	beq.w	8024108 <_vfiprintf_r+0x1ec>
 8023fca:	2300      	movs	r3, #0
 8023fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8023fd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023fd4:	f10a 0a01 	add.w	sl, sl, #1
 8023fd8:	9304      	str	r3, [sp, #16]
 8023fda:	9307      	str	r3, [sp, #28]
 8023fdc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8023fe0:	931a      	str	r3, [sp, #104]	@ 0x68
 8023fe2:	4654      	mov	r4, sl
 8023fe4:	2205      	movs	r2, #5
 8023fe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023fea:	4853      	ldr	r0, [pc, #332]	@ (8024138 <_vfiprintf_r+0x21c>)
 8023fec:	f7fe f939 	bl	8022262 <memchr>
 8023ff0:	9a04      	ldr	r2, [sp, #16]
 8023ff2:	b9d8      	cbnz	r0, 802402c <_vfiprintf_r+0x110>
 8023ff4:	06d1      	lsls	r1, r2, #27
 8023ff6:	bf44      	itt	mi
 8023ff8:	2320      	movmi	r3, #32
 8023ffa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8023ffe:	0713      	lsls	r3, r2, #28
 8024000:	bf44      	itt	mi
 8024002:	232b      	movmi	r3, #43	@ 0x2b
 8024004:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8024008:	f89a 3000 	ldrb.w	r3, [sl]
 802400c:	2b2a      	cmp	r3, #42	@ 0x2a
 802400e:	d015      	beq.n	802403c <_vfiprintf_r+0x120>
 8024010:	4654      	mov	r4, sl
 8024012:	2000      	movs	r0, #0
 8024014:	f04f 0c0a 	mov.w	ip, #10
 8024018:	9a07      	ldr	r2, [sp, #28]
 802401a:	4621      	mov	r1, r4
 802401c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024020:	3b30      	subs	r3, #48	@ 0x30
 8024022:	2b09      	cmp	r3, #9
 8024024:	d94b      	bls.n	80240be <_vfiprintf_r+0x1a2>
 8024026:	b1b0      	cbz	r0, 8024056 <_vfiprintf_r+0x13a>
 8024028:	9207      	str	r2, [sp, #28]
 802402a:	e014      	b.n	8024056 <_vfiprintf_r+0x13a>
 802402c:	eba0 0308 	sub.w	r3, r0, r8
 8024030:	fa09 f303 	lsl.w	r3, r9, r3
 8024034:	4313      	orrs	r3, r2
 8024036:	46a2      	mov	sl, r4
 8024038:	9304      	str	r3, [sp, #16]
 802403a:	e7d2      	b.n	8023fe2 <_vfiprintf_r+0xc6>
 802403c:	9b03      	ldr	r3, [sp, #12]
 802403e:	1d19      	adds	r1, r3, #4
 8024040:	681b      	ldr	r3, [r3, #0]
 8024042:	9103      	str	r1, [sp, #12]
 8024044:	2b00      	cmp	r3, #0
 8024046:	bfbb      	ittet	lt
 8024048:	425b      	neglt	r3, r3
 802404a:	f042 0202 	orrlt.w	r2, r2, #2
 802404e:	9307      	strge	r3, [sp, #28]
 8024050:	9307      	strlt	r3, [sp, #28]
 8024052:	bfb8      	it	lt
 8024054:	9204      	strlt	r2, [sp, #16]
 8024056:	7823      	ldrb	r3, [r4, #0]
 8024058:	2b2e      	cmp	r3, #46	@ 0x2e
 802405a:	d10a      	bne.n	8024072 <_vfiprintf_r+0x156>
 802405c:	7863      	ldrb	r3, [r4, #1]
 802405e:	2b2a      	cmp	r3, #42	@ 0x2a
 8024060:	d132      	bne.n	80240c8 <_vfiprintf_r+0x1ac>
 8024062:	9b03      	ldr	r3, [sp, #12]
 8024064:	3402      	adds	r4, #2
 8024066:	1d1a      	adds	r2, r3, #4
 8024068:	681b      	ldr	r3, [r3, #0]
 802406a:	9203      	str	r2, [sp, #12]
 802406c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8024070:	9305      	str	r3, [sp, #20]
 8024072:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 802413c <_vfiprintf_r+0x220>
 8024076:	2203      	movs	r2, #3
 8024078:	4650      	mov	r0, sl
 802407a:	7821      	ldrb	r1, [r4, #0]
 802407c:	f7fe f8f1 	bl	8022262 <memchr>
 8024080:	b138      	cbz	r0, 8024092 <_vfiprintf_r+0x176>
 8024082:	2240      	movs	r2, #64	@ 0x40
 8024084:	9b04      	ldr	r3, [sp, #16]
 8024086:	eba0 000a 	sub.w	r0, r0, sl
 802408a:	4082      	lsls	r2, r0
 802408c:	4313      	orrs	r3, r2
 802408e:	3401      	adds	r4, #1
 8024090:	9304      	str	r3, [sp, #16]
 8024092:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024096:	2206      	movs	r2, #6
 8024098:	4829      	ldr	r0, [pc, #164]	@ (8024140 <_vfiprintf_r+0x224>)
 802409a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802409e:	f7fe f8e0 	bl	8022262 <memchr>
 80240a2:	2800      	cmp	r0, #0
 80240a4:	d03f      	beq.n	8024126 <_vfiprintf_r+0x20a>
 80240a6:	4b27      	ldr	r3, [pc, #156]	@ (8024144 <_vfiprintf_r+0x228>)
 80240a8:	bb1b      	cbnz	r3, 80240f2 <_vfiprintf_r+0x1d6>
 80240aa:	9b03      	ldr	r3, [sp, #12]
 80240ac:	3307      	adds	r3, #7
 80240ae:	f023 0307 	bic.w	r3, r3, #7
 80240b2:	3308      	adds	r3, #8
 80240b4:	9303      	str	r3, [sp, #12]
 80240b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80240b8:	443b      	add	r3, r7
 80240ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80240bc:	e76a      	b.n	8023f94 <_vfiprintf_r+0x78>
 80240be:	460c      	mov	r4, r1
 80240c0:	2001      	movs	r0, #1
 80240c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80240c6:	e7a8      	b.n	802401a <_vfiprintf_r+0xfe>
 80240c8:	2300      	movs	r3, #0
 80240ca:	f04f 0c0a 	mov.w	ip, #10
 80240ce:	4619      	mov	r1, r3
 80240d0:	3401      	adds	r4, #1
 80240d2:	9305      	str	r3, [sp, #20]
 80240d4:	4620      	mov	r0, r4
 80240d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80240da:	3a30      	subs	r2, #48	@ 0x30
 80240dc:	2a09      	cmp	r2, #9
 80240de:	d903      	bls.n	80240e8 <_vfiprintf_r+0x1cc>
 80240e0:	2b00      	cmp	r3, #0
 80240e2:	d0c6      	beq.n	8024072 <_vfiprintf_r+0x156>
 80240e4:	9105      	str	r1, [sp, #20]
 80240e6:	e7c4      	b.n	8024072 <_vfiprintf_r+0x156>
 80240e8:	4604      	mov	r4, r0
 80240ea:	2301      	movs	r3, #1
 80240ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80240f0:	e7f0      	b.n	80240d4 <_vfiprintf_r+0x1b8>
 80240f2:	ab03      	add	r3, sp, #12
 80240f4:	9300      	str	r3, [sp, #0]
 80240f6:	462a      	mov	r2, r5
 80240f8:	4630      	mov	r0, r6
 80240fa:	4b13      	ldr	r3, [pc, #76]	@ (8024148 <_vfiprintf_r+0x22c>)
 80240fc:	a904      	add	r1, sp, #16
 80240fe:	f7fd f945 	bl	802138c <_printf_float>
 8024102:	4607      	mov	r7, r0
 8024104:	1c78      	adds	r0, r7, #1
 8024106:	d1d6      	bne.n	80240b6 <_vfiprintf_r+0x19a>
 8024108:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802410a:	07d9      	lsls	r1, r3, #31
 802410c:	d405      	bmi.n	802411a <_vfiprintf_r+0x1fe>
 802410e:	89ab      	ldrh	r3, [r5, #12]
 8024110:	059a      	lsls	r2, r3, #22
 8024112:	d402      	bmi.n	802411a <_vfiprintf_r+0x1fe>
 8024114:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8024116:	f7fe f8a3 	bl	8022260 <__retarget_lock_release_recursive>
 802411a:	89ab      	ldrh	r3, [r5, #12]
 802411c:	065b      	lsls	r3, r3, #25
 802411e:	f53f af1f 	bmi.w	8023f60 <_vfiprintf_r+0x44>
 8024122:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024124:	e71e      	b.n	8023f64 <_vfiprintf_r+0x48>
 8024126:	ab03      	add	r3, sp, #12
 8024128:	9300      	str	r3, [sp, #0]
 802412a:	462a      	mov	r2, r5
 802412c:	4630      	mov	r0, r6
 802412e:	4b06      	ldr	r3, [pc, #24]	@ (8024148 <_vfiprintf_r+0x22c>)
 8024130:	a904      	add	r1, sp, #16
 8024132:	f7fd fbc9 	bl	80218c8 <_printf_i>
 8024136:	e7e4      	b.n	8024102 <_vfiprintf_r+0x1e6>
 8024138:	08030eb6 	.word	0x08030eb6
 802413c:	08030ebc 	.word	0x08030ebc
 8024140:	08030ec0 	.word	0x08030ec0
 8024144:	0802138d 	.word	0x0802138d
 8024148:	08023ef7 	.word	0x08023ef7

0802414c <_scanf_chars>:
 802414c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024150:	4615      	mov	r5, r2
 8024152:	688a      	ldr	r2, [r1, #8]
 8024154:	4680      	mov	r8, r0
 8024156:	460c      	mov	r4, r1
 8024158:	b932      	cbnz	r2, 8024168 <_scanf_chars+0x1c>
 802415a:	698a      	ldr	r2, [r1, #24]
 802415c:	2a00      	cmp	r2, #0
 802415e:	bf14      	ite	ne
 8024160:	f04f 32ff 	movne.w	r2, #4294967295
 8024164:	2201      	moveq	r2, #1
 8024166:	608a      	str	r2, [r1, #8]
 8024168:	2700      	movs	r7, #0
 802416a:	6822      	ldr	r2, [r4, #0]
 802416c:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 80241fc <_scanf_chars+0xb0>
 8024170:	06d1      	lsls	r1, r2, #27
 8024172:	bf5f      	itttt	pl
 8024174:	681a      	ldrpl	r2, [r3, #0]
 8024176:	1d11      	addpl	r1, r2, #4
 8024178:	6019      	strpl	r1, [r3, #0]
 802417a:	6816      	ldrpl	r6, [r2, #0]
 802417c:	69a0      	ldr	r0, [r4, #24]
 802417e:	b188      	cbz	r0, 80241a4 <_scanf_chars+0x58>
 8024180:	2801      	cmp	r0, #1
 8024182:	d107      	bne.n	8024194 <_scanf_chars+0x48>
 8024184:	682b      	ldr	r3, [r5, #0]
 8024186:	781a      	ldrb	r2, [r3, #0]
 8024188:	6963      	ldr	r3, [r4, #20]
 802418a:	5c9b      	ldrb	r3, [r3, r2]
 802418c:	b953      	cbnz	r3, 80241a4 <_scanf_chars+0x58>
 802418e:	2f00      	cmp	r7, #0
 8024190:	d031      	beq.n	80241f6 <_scanf_chars+0xaa>
 8024192:	e022      	b.n	80241da <_scanf_chars+0x8e>
 8024194:	2802      	cmp	r0, #2
 8024196:	d120      	bne.n	80241da <_scanf_chars+0x8e>
 8024198:	682b      	ldr	r3, [r5, #0]
 802419a:	781b      	ldrb	r3, [r3, #0]
 802419c:	f819 3003 	ldrb.w	r3, [r9, r3]
 80241a0:	071b      	lsls	r3, r3, #28
 80241a2:	d41a      	bmi.n	80241da <_scanf_chars+0x8e>
 80241a4:	6823      	ldr	r3, [r4, #0]
 80241a6:	3701      	adds	r7, #1
 80241a8:	06da      	lsls	r2, r3, #27
 80241aa:	bf5e      	ittt	pl
 80241ac:	682b      	ldrpl	r3, [r5, #0]
 80241ae:	781b      	ldrbpl	r3, [r3, #0]
 80241b0:	f806 3b01 	strbpl.w	r3, [r6], #1
 80241b4:	682a      	ldr	r2, [r5, #0]
 80241b6:	686b      	ldr	r3, [r5, #4]
 80241b8:	3201      	adds	r2, #1
 80241ba:	602a      	str	r2, [r5, #0]
 80241bc:	68a2      	ldr	r2, [r4, #8]
 80241be:	3b01      	subs	r3, #1
 80241c0:	3a01      	subs	r2, #1
 80241c2:	606b      	str	r3, [r5, #4]
 80241c4:	60a2      	str	r2, [r4, #8]
 80241c6:	b142      	cbz	r2, 80241da <_scanf_chars+0x8e>
 80241c8:	2b00      	cmp	r3, #0
 80241ca:	dcd7      	bgt.n	802417c <_scanf_chars+0x30>
 80241cc:	4629      	mov	r1, r5
 80241ce:	4640      	mov	r0, r8
 80241d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80241d4:	4798      	blx	r3
 80241d6:	2800      	cmp	r0, #0
 80241d8:	d0d0      	beq.n	802417c <_scanf_chars+0x30>
 80241da:	6823      	ldr	r3, [r4, #0]
 80241dc:	f013 0310 	ands.w	r3, r3, #16
 80241e0:	d105      	bne.n	80241ee <_scanf_chars+0xa2>
 80241e2:	68e2      	ldr	r2, [r4, #12]
 80241e4:	3201      	adds	r2, #1
 80241e6:	60e2      	str	r2, [r4, #12]
 80241e8:	69a2      	ldr	r2, [r4, #24]
 80241ea:	b102      	cbz	r2, 80241ee <_scanf_chars+0xa2>
 80241ec:	7033      	strb	r3, [r6, #0]
 80241ee:	2000      	movs	r0, #0
 80241f0:	6923      	ldr	r3, [r4, #16]
 80241f2:	443b      	add	r3, r7
 80241f4:	6123      	str	r3, [r4, #16]
 80241f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80241fa:	bf00      	nop
 80241fc:	08030eed 	.word	0x08030eed

08024200 <_scanf_i>:
 8024200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024204:	460c      	mov	r4, r1
 8024206:	4698      	mov	r8, r3
 8024208:	4b72      	ldr	r3, [pc, #456]	@ (80243d4 <_scanf_i+0x1d4>)
 802420a:	b087      	sub	sp, #28
 802420c:	4682      	mov	sl, r0
 802420e:	4616      	mov	r6, r2
 8024210:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8024214:	ab03      	add	r3, sp, #12
 8024216:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802421a:	4b6f      	ldr	r3, [pc, #444]	@ (80243d8 <_scanf_i+0x1d8>)
 802421c:	69a1      	ldr	r1, [r4, #24]
 802421e:	4a6f      	ldr	r2, [pc, #444]	@ (80243dc <_scanf_i+0x1dc>)
 8024220:	4627      	mov	r7, r4
 8024222:	2903      	cmp	r1, #3
 8024224:	bf08      	it	eq
 8024226:	461a      	moveq	r2, r3
 8024228:	68a3      	ldr	r3, [r4, #8]
 802422a:	9201      	str	r2, [sp, #4]
 802422c:	1e5a      	subs	r2, r3, #1
 802422e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8024232:	bf81      	itttt	hi
 8024234:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8024238:	eb03 0905 	addhi.w	r9, r3, r5
 802423c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8024240:	60a3      	strhi	r3, [r4, #8]
 8024242:	f857 3b1c 	ldr.w	r3, [r7], #28
 8024246:	bf98      	it	ls
 8024248:	f04f 0900 	movls.w	r9, #0
 802424c:	463d      	mov	r5, r7
 802424e:	f04f 0b00 	mov.w	fp, #0
 8024252:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8024256:	6023      	str	r3, [r4, #0]
 8024258:	6831      	ldr	r1, [r6, #0]
 802425a:	ab03      	add	r3, sp, #12
 802425c:	2202      	movs	r2, #2
 802425e:	7809      	ldrb	r1, [r1, #0]
 8024260:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8024264:	f7fd fffd 	bl	8022262 <memchr>
 8024268:	b328      	cbz	r0, 80242b6 <_scanf_i+0xb6>
 802426a:	f1bb 0f01 	cmp.w	fp, #1
 802426e:	d159      	bne.n	8024324 <_scanf_i+0x124>
 8024270:	6862      	ldr	r2, [r4, #4]
 8024272:	b92a      	cbnz	r2, 8024280 <_scanf_i+0x80>
 8024274:	2108      	movs	r1, #8
 8024276:	6822      	ldr	r2, [r4, #0]
 8024278:	6061      	str	r1, [r4, #4]
 802427a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 802427e:	6022      	str	r2, [r4, #0]
 8024280:	6822      	ldr	r2, [r4, #0]
 8024282:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8024286:	6022      	str	r2, [r4, #0]
 8024288:	68a2      	ldr	r2, [r4, #8]
 802428a:	1e51      	subs	r1, r2, #1
 802428c:	60a1      	str	r1, [r4, #8]
 802428e:	b192      	cbz	r2, 80242b6 <_scanf_i+0xb6>
 8024290:	6832      	ldr	r2, [r6, #0]
 8024292:	1c51      	adds	r1, r2, #1
 8024294:	6031      	str	r1, [r6, #0]
 8024296:	7812      	ldrb	r2, [r2, #0]
 8024298:	f805 2b01 	strb.w	r2, [r5], #1
 802429c:	6872      	ldr	r2, [r6, #4]
 802429e:	3a01      	subs	r2, #1
 80242a0:	2a00      	cmp	r2, #0
 80242a2:	6072      	str	r2, [r6, #4]
 80242a4:	dc07      	bgt.n	80242b6 <_scanf_i+0xb6>
 80242a6:	4631      	mov	r1, r6
 80242a8:	4650      	mov	r0, sl
 80242aa:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80242ae:	4790      	blx	r2
 80242b0:	2800      	cmp	r0, #0
 80242b2:	f040 8085 	bne.w	80243c0 <_scanf_i+0x1c0>
 80242b6:	f10b 0b01 	add.w	fp, fp, #1
 80242ba:	f1bb 0f03 	cmp.w	fp, #3
 80242be:	d1cb      	bne.n	8024258 <_scanf_i+0x58>
 80242c0:	6863      	ldr	r3, [r4, #4]
 80242c2:	b90b      	cbnz	r3, 80242c8 <_scanf_i+0xc8>
 80242c4:	230a      	movs	r3, #10
 80242c6:	6063      	str	r3, [r4, #4]
 80242c8:	6863      	ldr	r3, [r4, #4]
 80242ca:	4945      	ldr	r1, [pc, #276]	@ (80243e0 <_scanf_i+0x1e0>)
 80242cc:	6960      	ldr	r0, [r4, #20]
 80242ce:	1ac9      	subs	r1, r1, r3
 80242d0:	f000 f9a3 	bl	802461a <__sccl>
 80242d4:	f04f 0b00 	mov.w	fp, #0
 80242d8:	68a3      	ldr	r3, [r4, #8]
 80242da:	6822      	ldr	r2, [r4, #0]
 80242dc:	2b00      	cmp	r3, #0
 80242de:	d03d      	beq.n	802435c <_scanf_i+0x15c>
 80242e0:	6831      	ldr	r1, [r6, #0]
 80242e2:	6960      	ldr	r0, [r4, #20]
 80242e4:	f891 c000 	ldrb.w	ip, [r1]
 80242e8:	f810 000c 	ldrb.w	r0, [r0, ip]
 80242ec:	2800      	cmp	r0, #0
 80242ee:	d035      	beq.n	802435c <_scanf_i+0x15c>
 80242f0:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80242f4:	d124      	bne.n	8024340 <_scanf_i+0x140>
 80242f6:	0510      	lsls	r0, r2, #20
 80242f8:	d522      	bpl.n	8024340 <_scanf_i+0x140>
 80242fa:	f10b 0b01 	add.w	fp, fp, #1
 80242fe:	f1b9 0f00 	cmp.w	r9, #0
 8024302:	d003      	beq.n	802430c <_scanf_i+0x10c>
 8024304:	3301      	adds	r3, #1
 8024306:	f109 39ff 	add.w	r9, r9, #4294967295
 802430a:	60a3      	str	r3, [r4, #8]
 802430c:	6873      	ldr	r3, [r6, #4]
 802430e:	3b01      	subs	r3, #1
 8024310:	2b00      	cmp	r3, #0
 8024312:	6073      	str	r3, [r6, #4]
 8024314:	dd1b      	ble.n	802434e <_scanf_i+0x14e>
 8024316:	6833      	ldr	r3, [r6, #0]
 8024318:	3301      	adds	r3, #1
 802431a:	6033      	str	r3, [r6, #0]
 802431c:	68a3      	ldr	r3, [r4, #8]
 802431e:	3b01      	subs	r3, #1
 8024320:	60a3      	str	r3, [r4, #8]
 8024322:	e7d9      	b.n	80242d8 <_scanf_i+0xd8>
 8024324:	f1bb 0f02 	cmp.w	fp, #2
 8024328:	d1ae      	bne.n	8024288 <_scanf_i+0x88>
 802432a:	6822      	ldr	r2, [r4, #0]
 802432c:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8024330:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8024334:	d1c4      	bne.n	80242c0 <_scanf_i+0xc0>
 8024336:	2110      	movs	r1, #16
 8024338:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 802433c:	6061      	str	r1, [r4, #4]
 802433e:	e7a2      	b.n	8024286 <_scanf_i+0x86>
 8024340:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8024344:	6022      	str	r2, [r4, #0]
 8024346:	780b      	ldrb	r3, [r1, #0]
 8024348:	f805 3b01 	strb.w	r3, [r5], #1
 802434c:	e7de      	b.n	802430c <_scanf_i+0x10c>
 802434e:	4631      	mov	r1, r6
 8024350:	4650      	mov	r0, sl
 8024352:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8024356:	4798      	blx	r3
 8024358:	2800      	cmp	r0, #0
 802435a:	d0df      	beq.n	802431c <_scanf_i+0x11c>
 802435c:	6823      	ldr	r3, [r4, #0]
 802435e:	05d9      	lsls	r1, r3, #23
 8024360:	d50d      	bpl.n	802437e <_scanf_i+0x17e>
 8024362:	42bd      	cmp	r5, r7
 8024364:	d909      	bls.n	802437a <_scanf_i+0x17a>
 8024366:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 802436a:	4632      	mov	r2, r6
 802436c:	4650      	mov	r0, sl
 802436e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8024372:	f105 39ff 	add.w	r9, r5, #4294967295
 8024376:	4798      	blx	r3
 8024378:	464d      	mov	r5, r9
 802437a:	42bd      	cmp	r5, r7
 802437c:	d028      	beq.n	80243d0 <_scanf_i+0x1d0>
 802437e:	6822      	ldr	r2, [r4, #0]
 8024380:	f012 0210 	ands.w	r2, r2, #16
 8024384:	d113      	bne.n	80243ae <_scanf_i+0x1ae>
 8024386:	702a      	strb	r2, [r5, #0]
 8024388:	4639      	mov	r1, r7
 802438a:	6863      	ldr	r3, [r4, #4]
 802438c:	4650      	mov	r0, sl
 802438e:	9e01      	ldr	r6, [sp, #4]
 8024390:	47b0      	blx	r6
 8024392:	f8d8 3000 	ldr.w	r3, [r8]
 8024396:	6821      	ldr	r1, [r4, #0]
 8024398:	1d1a      	adds	r2, r3, #4
 802439a:	f8c8 2000 	str.w	r2, [r8]
 802439e:	f011 0f20 	tst.w	r1, #32
 80243a2:	681b      	ldr	r3, [r3, #0]
 80243a4:	d00f      	beq.n	80243c6 <_scanf_i+0x1c6>
 80243a6:	6018      	str	r0, [r3, #0]
 80243a8:	68e3      	ldr	r3, [r4, #12]
 80243aa:	3301      	adds	r3, #1
 80243ac:	60e3      	str	r3, [r4, #12]
 80243ae:	2000      	movs	r0, #0
 80243b0:	6923      	ldr	r3, [r4, #16]
 80243b2:	1bed      	subs	r5, r5, r7
 80243b4:	445d      	add	r5, fp
 80243b6:	442b      	add	r3, r5
 80243b8:	6123      	str	r3, [r4, #16]
 80243ba:	b007      	add	sp, #28
 80243bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80243c0:	f04f 0b00 	mov.w	fp, #0
 80243c4:	e7ca      	b.n	802435c <_scanf_i+0x15c>
 80243c6:	07ca      	lsls	r2, r1, #31
 80243c8:	bf4c      	ite	mi
 80243ca:	8018      	strhmi	r0, [r3, #0]
 80243cc:	6018      	strpl	r0, [r3, #0]
 80243ce:	e7eb      	b.n	80243a8 <_scanf_i+0x1a8>
 80243d0:	2001      	movs	r0, #1
 80243d2:	e7f2      	b.n	80243ba <_scanf_i+0x1ba>
 80243d4:	080279a0 	.word	0x080279a0
 80243d8:	08021225 	.word	0x08021225
 80243dc:	080248f5 	.word	0x080248f5
 80243e0:	08030ed7 	.word	0x08030ed7

080243e4 <__sflush_r>:
 80243e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80243e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80243ea:	0716      	lsls	r6, r2, #28
 80243ec:	4605      	mov	r5, r0
 80243ee:	460c      	mov	r4, r1
 80243f0:	d454      	bmi.n	802449c <__sflush_r+0xb8>
 80243f2:	684b      	ldr	r3, [r1, #4]
 80243f4:	2b00      	cmp	r3, #0
 80243f6:	dc02      	bgt.n	80243fe <__sflush_r+0x1a>
 80243f8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80243fa:	2b00      	cmp	r3, #0
 80243fc:	dd48      	ble.n	8024490 <__sflush_r+0xac>
 80243fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8024400:	2e00      	cmp	r6, #0
 8024402:	d045      	beq.n	8024490 <__sflush_r+0xac>
 8024404:	2300      	movs	r3, #0
 8024406:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802440a:	682f      	ldr	r7, [r5, #0]
 802440c:	6a21      	ldr	r1, [r4, #32]
 802440e:	602b      	str	r3, [r5, #0]
 8024410:	d030      	beq.n	8024474 <__sflush_r+0x90>
 8024412:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8024414:	89a3      	ldrh	r3, [r4, #12]
 8024416:	0759      	lsls	r1, r3, #29
 8024418:	d505      	bpl.n	8024426 <__sflush_r+0x42>
 802441a:	6863      	ldr	r3, [r4, #4]
 802441c:	1ad2      	subs	r2, r2, r3
 802441e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8024420:	b10b      	cbz	r3, 8024426 <__sflush_r+0x42>
 8024422:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8024424:	1ad2      	subs	r2, r2, r3
 8024426:	2300      	movs	r3, #0
 8024428:	4628      	mov	r0, r5
 802442a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802442c:	6a21      	ldr	r1, [r4, #32]
 802442e:	47b0      	blx	r6
 8024430:	1c43      	adds	r3, r0, #1
 8024432:	89a3      	ldrh	r3, [r4, #12]
 8024434:	d106      	bne.n	8024444 <__sflush_r+0x60>
 8024436:	6829      	ldr	r1, [r5, #0]
 8024438:	291d      	cmp	r1, #29
 802443a:	d82b      	bhi.n	8024494 <__sflush_r+0xb0>
 802443c:	4a28      	ldr	r2, [pc, #160]	@ (80244e0 <__sflush_r+0xfc>)
 802443e:	40ca      	lsrs	r2, r1
 8024440:	07d6      	lsls	r6, r2, #31
 8024442:	d527      	bpl.n	8024494 <__sflush_r+0xb0>
 8024444:	2200      	movs	r2, #0
 8024446:	6062      	str	r2, [r4, #4]
 8024448:	6922      	ldr	r2, [r4, #16]
 802444a:	04d9      	lsls	r1, r3, #19
 802444c:	6022      	str	r2, [r4, #0]
 802444e:	d504      	bpl.n	802445a <__sflush_r+0x76>
 8024450:	1c42      	adds	r2, r0, #1
 8024452:	d101      	bne.n	8024458 <__sflush_r+0x74>
 8024454:	682b      	ldr	r3, [r5, #0]
 8024456:	b903      	cbnz	r3, 802445a <__sflush_r+0x76>
 8024458:	6560      	str	r0, [r4, #84]	@ 0x54
 802445a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802445c:	602f      	str	r7, [r5, #0]
 802445e:	b1b9      	cbz	r1, 8024490 <__sflush_r+0xac>
 8024460:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8024464:	4299      	cmp	r1, r3
 8024466:	d002      	beq.n	802446e <__sflush_r+0x8a>
 8024468:	4628      	mov	r0, r5
 802446a:	f7fe fd91 	bl	8022f90 <_free_r>
 802446e:	2300      	movs	r3, #0
 8024470:	6363      	str	r3, [r4, #52]	@ 0x34
 8024472:	e00d      	b.n	8024490 <__sflush_r+0xac>
 8024474:	2301      	movs	r3, #1
 8024476:	4628      	mov	r0, r5
 8024478:	47b0      	blx	r6
 802447a:	4602      	mov	r2, r0
 802447c:	1c50      	adds	r0, r2, #1
 802447e:	d1c9      	bne.n	8024414 <__sflush_r+0x30>
 8024480:	682b      	ldr	r3, [r5, #0]
 8024482:	2b00      	cmp	r3, #0
 8024484:	d0c6      	beq.n	8024414 <__sflush_r+0x30>
 8024486:	2b1d      	cmp	r3, #29
 8024488:	d001      	beq.n	802448e <__sflush_r+0xaa>
 802448a:	2b16      	cmp	r3, #22
 802448c:	d11d      	bne.n	80244ca <__sflush_r+0xe6>
 802448e:	602f      	str	r7, [r5, #0]
 8024490:	2000      	movs	r0, #0
 8024492:	e021      	b.n	80244d8 <__sflush_r+0xf4>
 8024494:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8024498:	b21b      	sxth	r3, r3
 802449a:	e01a      	b.n	80244d2 <__sflush_r+0xee>
 802449c:	690f      	ldr	r7, [r1, #16]
 802449e:	2f00      	cmp	r7, #0
 80244a0:	d0f6      	beq.n	8024490 <__sflush_r+0xac>
 80244a2:	0793      	lsls	r3, r2, #30
 80244a4:	bf18      	it	ne
 80244a6:	2300      	movne	r3, #0
 80244a8:	680e      	ldr	r6, [r1, #0]
 80244aa:	bf08      	it	eq
 80244ac:	694b      	ldreq	r3, [r1, #20]
 80244ae:	1bf6      	subs	r6, r6, r7
 80244b0:	600f      	str	r7, [r1, #0]
 80244b2:	608b      	str	r3, [r1, #8]
 80244b4:	2e00      	cmp	r6, #0
 80244b6:	ddeb      	ble.n	8024490 <__sflush_r+0xac>
 80244b8:	4633      	mov	r3, r6
 80244ba:	463a      	mov	r2, r7
 80244bc:	4628      	mov	r0, r5
 80244be:	6a21      	ldr	r1, [r4, #32]
 80244c0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80244c4:	47e0      	blx	ip
 80244c6:	2800      	cmp	r0, #0
 80244c8:	dc07      	bgt.n	80244da <__sflush_r+0xf6>
 80244ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80244ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80244d2:	f04f 30ff 	mov.w	r0, #4294967295
 80244d6:	81a3      	strh	r3, [r4, #12]
 80244d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80244da:	4407      	add	r7, r0
 80244dc:	1a36      	subs	r6, r6, r0
 80244de:	e7e9      	b.n	80244b4 <__sflush_r+0xd0>
 80244e0:	20400001 	.word	0x20400001

080244e4 <_fflush_r>:
 80244e4:	b538      	push	{r3, r4, r5, lr}
 80244e6:	690b      	ldr	r3, [r1, #16]
 80244e8:	4605      	mov	r5, r0
 80244ea:	460c      	mov	r4, r1
 80244ec:	b913      	cbnz	r3, 80244f4 <_fflush_r+0x10>
 80244ee:	2500      	movs	r5, #0
 80244f0:	4628      	mov	r0, r5
 80244f2:	bd38      	pop	{r3, r4, r5, pc}
 80244f4:	b118      	cbz	r0, 80244fe <_fflush_r+0x1a>
 80244f6:	6a03      	ldr	r3, [r0, #32]
 80244f8:	b90b      	cbnz	r3, 80244fe <_fflush_r+0x1a>
 80244fa:	f7fd fb8f 	bl	8021c1c <__sinit>
 80244fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024502:	2b00      	cmp	r3, #0
 8024504:	d0f3      	beq.n	80244ee <_fflush_r+0xa>
 8024506:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8024508:	07d0      	lsls	r0, r2, #31
 802450a:	d404      	bmi.n	8024516 <_fflush_r+0x32>
 802450c:	0599      	lsls	r1, r3, #22
 802450e:	d402      	bmi.n	8024516 <_fflush_r+0x32>
 8024510:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8024512:	f7fd fea4 	bl	802225e <__retarget_lock_acquire_recursive>
 8024516:	4628      	mov	r0, r5
 8024518:	4621      	mov	r1, r4
 802451a:	f7ff ff63 	bl	80243e4 <__sflush_r>
 802451e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8024520:	4605      	mov	r5, r0
 8024522:	07da      	lsls	r2, r3, #31
 8024524:	d4e4      	bmi.n	80244f0 <_fflush_r+0xc>
 8024526:	89a3      	ldrh	r3, [r4, #12]
 8024528:	059b      	lsls	r3, r3, #22
 802452a:	d4e1      	bmi.n	80244f0 <_fflush_r+0xc>
 802452c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802452e:	f7fd fe97 	bl	8022260 <__retarget_lock_release_recursive>
 8024532:	e7dd      	b.n	80244f0 <_fflush_r+0xc>

08024534 <fiprintf>:
 8024534:	b40e      	push	{r1, r2, r3}
 8024536:	b503      	push	{r0, r1, lr}
 8024538:	4601      	mov	r1, r0
 802453a:	ab03      	add	r3, sp, #12
 802453c:	4805      	ldr	r0, [pc, #20]	@ (8024554 <fiprintf+0x20>)
 802453e:	f853 2b04 	ldr.w	r2, [r3], #4
 8024542:	6800      	ldr	r0, [r0, #0]
 8024544:	9301      	str	r3, [sp, #4]
 8024546:	f7ff fce9 	bl	8023f1c <_vfiprintf_r>
 802454a:	b002      	add	sp, #8
 802454c:	f85d eb04 	ldr.w	lr, [sp], #4
 8024550:	b003      	add	sp, #12
 8024552:	4770      	bx	lr
 8024554:	20000138 	.word	0x20000138

08024558 <__swhatbuf_r>:
 8024558:	b570      	push	{r4, r5, r6, lr}
 802455a:	460c      	mov	r4, r1
 802455c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024560:	4615      	mov	r5, r2
 8024562:	2900      	cmp	r1, #0
 8024564:	461e      	mov	r6, r3
 8024566:	b096      	sub	sp, #88	@ 0x58
 8024568:	da0c      	bge.n	8024584 <__swhatbuf_r+0x2c>
 802456a:	89a3      	ldrh	r3, [r4, #12]
 802456c:	2100      	movs	r1, #0
 802456e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8024572:	bf14      	ite	ne
 8024574:	2340      	movne	r3, #64	@ 0x40
 8024576:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802457a:	2000      	movs	r0, #0
 802457c:	6031      	str	r1, [r6, #0]
 802457e:	602b      	str	r3, [r5, #0]
 8024580:	b016      	add	sp, #88	@ 0x58
 8024582:	bd70      	pop	{r4, r5, r6, pc}
 8024584:	466a      	mov	r2, sp
 8024586:	f000 f8b9 	bl	80246fc <_fstat_r>
 802458a:	2800      	cmp	r0, #0
 802458c:	dbed      	blt.n	802456a <__swhatbuf_r+0x12>
 802458e:	9901      	ldr	r1, [sp, #4]
 8024590:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8024594:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8024598:	4259      	negs	r1, r3
 802459a:	4159      	adcs	r1, r3
 802459c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80245a0:	e7eb      	b.n	802457a <__swhatbuf_r+0x22>

080245a2 <__smakebuf_r>:
 80245a2:	898b      	ldrh	r3, [r1, #12]
 80245a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80245a6:	079d      	lsls	r5, r3, #30
 80245a8:	4606      	mov	r6, r0
 80245aa:	460c      	mov	r4, r1
 80245ac:	d507      	bpl.n	80245be <__smakebuf_r+0x1c>
 80245ae:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80245b2:	6023      	str	r3, [r4, #0]
 80245b4:	6123      	str	r3, [r4, #16]
 80245b6:	2301      	movs	r3, #1
 80245b8:	6163      	str	r3, [r4, #20]
 80245ba:	b003      	add	sp, #12
 80245bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80245be:	466a      	mov	r2, sp
 80245c0:	ab01      	add	r3, sp, #4
 80245c2:	f7ff ffc9 	bl	8024558 <__swhatbuf_r>
 80245c6:	9f00      	ldr	r7, [sp, #0]
 80245c8:	4605      	mov	r5, r0
 80245ca:	4639      	mov	r1, r7
 80245cc:	4630      	mov	r0, r6
 80245ce:	f7fe fd51 	bl	8023074 <_malloc_r>
 80245d2:	b948      	cbnz	r0, 80245e8 <__smakebuf_r+0x46>
 80245d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80245d8:	059a      	lsls	r2, r3, #22
 80245da:	d4ee      	bmi.n	80245ba <__smakebuf_r+0x18>
 80245dc:	f023 0303 	bic.w	r3, r3, #3
 80245e0:	f043 0302 	orr.w	r3, r3, #2
 80245e4:	81a3      	strh	r3, [r4, #12]
 80245e6:	e7e2      	b.n	80245ae <__smakebuf_r+0xc>
 80245e8:	89a3      	ldrh	r3, [r4, #12]
 80245ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80245ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80245f2:	81a3      	strh	r3, [r4, #12]
 80245f4:	9b01      	ldr	r3, [sp, #4]
 80245f6:	6020      	str	r0, [r4, #0]
 80245f8:	b15b      	cbz	r3, 8024612 <__smakebuf_r+0x70>
 80245fa:	4630      	mov	r0, r6
 80245fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024600:	f000 f88e 	bl	8024720 <_isatty_r>
 8024604:	b128      	cbz	r0, 8024612 <__smakebuf_r+0x70>
 8024606:	89a3      	ldrh	r3, [r4, #12]
 8024608:	f023 0303 	bic.w	r3, r3, #3
 802460c:	f043 0301 	orr.w	r3, r3, #1
 8024610:	81a3      	strh	r3, [r4, #12]
 8024612:	89a3      	ldrh	r3, [r4, #12]
 8024614:	431d      	orrs	r5, r3
 8024616:	81a5      	strh	r5, [r4, #12]
 8024618:	e7cf      	b.n	80245ba <__smakebuf_r+0x18>

0802461a <__sccl>:
 802461a:	b570      	push	{r4, r5, r6, lr}
 802461c:	780b      	ldrb	r3, [r1, #0]
 802461e:	4604      	mov	r4, r0
 8024620:	2b5e      	cmp	r3, #94	@ 0x5e
 8024622:	bf0b      	itete	eq
 8024624:	784b      	ldrbeq	r3, [r1, #1]
 8024626:	1c4a      	addne	r2, r1, #1
 8024628:	1c8a      	addeq	r2, r1, #2
 802462a:	2100      	movne	r1, #0
 802462c:	bf08      	it	eq
 802462e:	2101      	moveq	r1, #1
 8024630:	3801      	subs	r0, #1
 8024632:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8024636:	f800 1f01 	strb.w	r1, [r0, #1]!
 802463a:	42a8      	cmp	r0, r5
 802463c:	d1fb      	bne.n	8024636 <__sccl+0x1c>
 802463e:	b90b      	cbnz	r3, 8024644 <__sccl+0x2a>
 8024640:	1e50      	subs	r0, r2, #1
 8024642:	bd70      	pop	{r4, r5, r6, pc}
 8024644:	f081 0101 	eor.w	r1, r1, #1
 8024648:	4610      	mov	r0, r2
 802464a:	54e1      	strb	r1, [r4, r3]
 802464c:	4602      	mov	r2, r0
 802464e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8024652:	2d2d      	cmp	r5, #45	@ 0x2d
 8024654:	d005      	beq.n	8024662 <__sccl+0x48>
 8024656:	2d5d      	cmp	r5, #93	@ 0x5d
 8024658:	d016      	beq.n	8024688 <__sccl+0x6e>
 802465a:	2d00      	cmp	r5, #0
 802465c:	d0f1      	beq.n	8024642 <__sccl+0x28>
 802465e:	462b      	mov	r3, r5
 8024660:	e7f2      	b.n	8024648 <__sccl+0x2e>
 8024662:	7846      	ldrb	r6, [r0, #1]
 8024664:	2e5d      	cmp	r6, #93	@ 0x5d
 8024666:	d0fa      	beq.n	802465e <__sccl+0x44>
 8024668:	42b3      	cmp	r3, r6
 802466a:	dcf8      	bgt.n	802465e <__sccl+0x44>
 802466c:	461a      	mov	r2, r3
 802466e:	3002      	adds	r0, #2
 8024670:	3201      	adds	r2, #1
 8024672:	4296      	cmp	r6, r2
 8024674:	54a1      	strb	r1, [r4, r2]
 8024676:	dcfb      	bgt.n	8024670 <__sccl+0x56>
 8024678:	1af2      	subs	r2, r6, r3
 802467a:	3a01      	subs	r2, #1
 802467c:	42b3      	cmp	r3, r6
 802467e:	bfa8      	it	ge
 8024680:	2200      	movge	r2, #0
 8024682:	1c5d      	adds	r5, r3, #1
 8024684:	18ab      	adds	r3, r5, r2
 8024686:	e7e1      	b.n	802464c <__sccl+0x32>
 8024688:	4610      	mov	r0, r2
 802468a:	e7da      	b.n	8024642 <__sccl+0x28>

0802468c <__submore>:
 802468c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024690:	460c      	mov	r4, r1
 8024692:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8024694:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8024698:	4299      	cmp	r1, r3
 802469a:	d11b      	bne.n	80246d4 <__submore+0x48>
 802469c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80246a0:	f7fe fce8 	bl	8023074 <_malloc_r>
 80246a4:	b918      	cbnz	r0, 80246ae <__submore+0x22>
 80246a6:	f04f 30ff 	mov.w	r0, #4294967295
 80246aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80246ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80246b2:	63a3      	str	r3, [r4, #56]	@ 0x38
 80246b4:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80246b8:	6360      	str	r0, [r4, #52]	@ 0x34
 80246ba:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80246be:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80246c2:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80246c6:	7043      	strb	r3, [r0, #1]
 80246c8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80246cc:	7003      	strb	r3, [r0, #0]
 80246ce:	6020      	str	r0, [r4, #0]
 80246d0:	2000      	movs	r0, #0
 80246d2:	e7ea      	b.n	80246aa <__submore+0x1e>
 80246d4:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80246d6:	0077      	lsls	r7, r6, #1
 80246d8:	463a      	mov	r2, r7
 80246da:	f000 f86e 	bl	80247ba <_realloc_r>
 80246de:	4605      	mov	r5, r0
 80246e0:	2800      	cmp	r0, #0
 80246e2:	d0e0      	beq.n	80246a6 <__submore+0x1a>
 80246e4:	eb00 0806 	add.w	r8, r0, r6
 80246e8:	4601      	mov	r1, r0
 80246ea:	4632      	mov	r2, r6
 80246ec:	4640      	mov	r0, r8
 80246ee:	f7fd fdc6 	bl	802227e <memcpy>
 80246f2:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80246f6:	f8c4 8000 	str.w	r8, [r4]
 80246fa:	e7e9      	b.n	80246d0 <__submore+0x44>

080246fc <_fstat_r>:
 80246fc:	b538      	push	{r3, r4, r5, lr}
 80246fe:	2300      	movs	r3, #0
 8024700:	4d06      	ldr	r5, [pc, #24]	@ (802471c <_fstat_r+0x20>)
 8024702:	4604      	mov	r4, r0
 8024704:	4608      	mov	r0, r1
 8024706:	4611      	mov	r1, r2
 8024708:	602b      	str	r3, [r5, #0]
 802470a:	f7df fae8 	bl	8003cde <_fstat>
 802470e:	1c43      	adds	r3, r0, #1
 8024710:	d102      	bne.n	8024718 <_fstat_r+0x1c>
 8024712:	682b      	ldr	r3, [r5, #0]
 8024714:	b103      	cbz	r3, 8024718 <_fstat_r+0x1c>
 8024716:	6023      	str	r3, [r4, #0]
 8024718:	bd38      	pop	{r3, r4, r5, pc}
 802471a:	bf00      	nop
 802471c:	2000c2fc 	.word	0x2000c2fc

08024720 <_isatty_r>:
 8024720:	b538      	push	{r3, r4, r5, lr}
 8024722:	2300      	movs	r3, #0
 8024724:	4d05      	ldr	r5, [pc, #20]	@ (802473c <_isatty_r+0x1c>)
 8024726:	4604      	mov	r4, r0
 8024728:	4608      	mov	r0, r1
 802472a:	602b      	str	r3, [r5, #0]
 802472c:	f7df fae6 	bl	8003cfc <_isatty>
 8024730:	1c43      	adds	r3, r0, #1
 8024732:	d102      	bne.n	802473a <_isatty_r+0x1a>
 8024734:	682b      	ldr	r3, [r5, #0]
 8024736:	b103      	cbz	r3, 802473a <_isatty_r+0x1a>
 8024738:	6023      	str	r3, [r4, #0]
 802473a:	bd38      	pop	{r3, r4, r5, pc}
 802473c:	2000c2fc 	.word	0x2000c2fc

08024740 <_sbrk_r>:
 8024740:	b538      	push	{r3, r4, r5, lr}
 8024742:	2300      	movs	r3, #0
 8024744:	4d05      	ldr	r5, [pc, #20]	@ (802475c <_sbrk_r+0x1c>)
 8024746:	4604      	mov	r4, r0
 8024748:	4608      	mov	r0, r1
 802474a:	602b      	str	r3, [r5, #0]
 802474c:	f7df faec 	bl	8003d28 <_sbrk>
 8024750:	1c43      	adds	r3, r0, #1
 8024752:	d102      	bne.n	802475a <_sbrk_r+0x1a>
 8024754:	682b      	ldr	r3, [r5, #0]
 8024756:	b103      	cbz	r3, 802475a <_sbrk_r+0x1a>
 8024758:	6023      	str	r3, [r4, #0]
 802475a:	bd38      	pop	{r3, r4, r5, pc}
 802475c:	2000c2fc 	.word	0x2000c2fc

08024760 <abort>:
 8024760:	2006      	movs	r0, #6
 8024762:	b508      	push	{r3, lr}
 8024764:	f000 f8fe 	bl	8024964 <raise>
 8024768:	2001      	movs	r0, #1
 802476a:	f7df fa69 	bl	8003c40 <_exit>

0802476e <_calloc_r>:
 802476e:	b570      	push	{r4, r5, r6, lr}
 8024770:	fba1 5402 	umull	r5, r4, r1, r2
 8024774:	b934      	cbnz	r4, 8024784 <_calloc_r+0x16>
 8024776:	4629      	mov	r1, r5
 8024778:	f7fe fc7c 	bl	8023074 <_malloc_r>
 802477c:	4606      	mov	r6, r0
 802477e:	b928      	cbnz	r0, 802478c <_calloc_r+0x1e>
 8024780:	4630      	mov	r0, r6
 8024782:	bd70      	pop	{r4, r5, r6, pc}
 8024784:	220c      	movs	r2, #12
 8024786:	2600      	movs	r6, #0
 8024788:	6002      	str	r2, [r0, #0]
 802478a:	e7f9      	b.n	8024780 <_calloc_r+0x12>
 802478c:	462a      	mov	r2, r5
 802478e:	4621      	mov	r1, r4
 8024790:	f7fd fc50 	bl	8022034 <memset>
 8024794:	e7f4      	b.n	8024780 <_calloc_r+0x12>

08024796 <__ascii_mbtowc>:
 8024796:	b082      	sub	sp, #8
 8024798:	b901      	cbnz	r1, 802479c <__ascii_mbtowc+0x6>
 802479a:	a901      	add	r1, sp, #4
 802479c:	b142      	cbz	r2, 80247b0 <__ascii_mbtowc+0x1a>
 802479e:	b14b      	cbz	r3, 80247b4 <__ascii_mbtowc+0x1e>
 80247a0:	7813      	ldrb	r3, [r2, #0]
 80247a2:	600b      	str	r3, [r1, #0]
 80247a4:	7812      	ldrb	r2, [r2, #0]
 80247a6:	1e10      	subs	r0, r2, #0
 80247a8:	bf18      	it	ne
 80247aa:	2001      	movne	r0, #1
 80247ac:	b002      	add	sp, #8
 80247ae:	4770      	bx	lr
 80247b0:	4610      	mov	r0, r2
 80247b2:	e7fb      	b.n	80247ac <__ascii_mbtowc+0x16>
 80247b4:	f06f 0001 	mvn.w	r0, #1
 80247b8:	e7f8      	b.n	80247ac <__ascii_mbtowc+0x16>

080247ba <_realloc_r>:
 80247ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80247be:	4607      	mov	r7, r0
 80247c0:	4614      	mov	r4, r2
 80247c2:	460d      	mov	r5, r1
 80247c4:	b921      	cbnz	r1, 80247d0 <_realloc_r+0x16>
 80247c6:	4611      	mov	r1, r2
 80247c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80247cc:	f7fe bc52 	b.w	8023074 <_malloc_r>
 80247d0:	b92a      	cbnz	r2, 80247de <_realloc_r+0x24>
 80247d2:	f7fe fbdd 	bl	8022f90 <_free_r>
 80247d6:	4625      	mov	r5, r4
 80247d8:	4628      	mov	r0, r5
 80247da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80247de:	f000 f8dd 	bl	802499c <_malloc_usable_size_r>
 80247e2:	4284      	cmp	r4, r0
 80247e4:	4606      	mov	r6, r0
 80247e6:	d802      	bhi.n	80247ee <_realloc_r+0x34>
 80247e8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80247ec:	d8f4      	bhi.n	80247d8 <_realloc_r+0x1e>
 80247ee:	4621      	mov	r1, r4
 80247f0:	4638      	mov	r0, r7
 80247f2:	f7fe fc3f 	bl	8023074 <_malloc_r>
 80247f6:	4680      	mov	r8, r0
 80247f8:	b908      	cbnz	r0, 80247fe <_realloc_r+0x44>
 80247fa:	4645      	mov	r5, r8
 80247fc:	e7ec      	b.n	80247d8 <_realloc_r+0x1e>
 80247fe:	42b4      	cmp	r4, r6
 8024800:	4622      	mov	r2, r4
 8024802:	4629      	mov	r1, r5
 8024804:	bf28      	it	cs
 8024806:	4632      	movcs	r2, r6
 8024808:	f7fd fd39 	bl	802227e <memcpy>
 802480c:	4629      	mov	r1, r5
 802480e:	4638      	mov	r0, r7
 8024810:	f7fe fbbe 	bl	8022f90 <_free_r>
 8024814:	e7f1      	b.n	80247fa <_realloc_r+0x40>
	...

08024818 <_strtoul_l.isra.0>:
 8024818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802481c:	4686      	mov	lr, r0
 802481e:	460d      	mov	r5, r1
 8024820:	4e33      	ldr	r6, [pc, #204]	@ (80248f0 <_strtoul_l.isra.0+0xd8>)
 8024822:	4628      	mov	r0, r5
 8024824:	f815 4b01 	ldrb.w	r4, [r5], #1
 8024828:	5d37      	ldrb	r7, [r6, r4]
 802482a:	f017 0708 	ands.w	r7, r7, #8
 802482e:	d1f8      	bne.n	8024822 <_strtoul_l.isra.0+0xa>
 8024830:	2c2d      	cmp	r4, #45	@ 0x2d
 8024832:	d110      	bne.n	8024856 <_strtoul_l.isra.0+0x3e>
 8024834:	2701      	movs	r7, #1
 8024836:	782c      	ldrb	r4, [r5, #0]
 8024838:	1c85      	adds	r5, r0, #2
 802483a:	f033 0010 	bics.w	r0, r3, #16
 802483e:	d115      	bne.n	802486c <_strtoul_l.isra.0+0x54>
 8024840:	2c30      	cmp	r4, #48	@ 0x30
 8024842:	d10d      	bne.n	8024860 <_strtoul_l.isra.0+0x48>
 8024844:	7828      	ldrb	r0, [r5, #0]
 8024846:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 802484a:	2858      	cmp	r0, #88	@ 0x58
 802484c:	d108      	bne.n	8024860 <_strtoul_l.isra.0+0x48>
 802484e:	786c      	ldrb	r4, [r5, #1]
 8024850:	3502      	adds	r5, #2
 8024852:	2310      	movs	r3, #16
 8024854:	e00a      	b.n	802486c <_strtoul_l.isra.0+0x54>
 8024856:	2c2b      	cmp	r4, #43	@ 0x2b
 8024858:	bf04      	itt	eq
 802485a:	782c      	ldrbeq	r4, [r5, #0]
 802485c:	1c85      	addeq	r5, r0, #2
 802485e:	e7ec      	b.n	802483a <_strtoul_l.isra.0+0x22>
 8024860:	2b00      	cmp	r3, #0
 8024862:	d1f6      	bne.n	8024852 <_strtoul_l.isra.0+0x3a>
 8024864:	2c30      	cmp	r4, #48	@ 0x30
 8024866:	bf14      	ite	ne
 8024868:	230a      	movne	r3, #10
 802486a:	2308      	moveq	r3, #8
 802486c:	f04f 38ff 	mov.w	r8, #4294967295
 8024870:	fbb8 f8f3 	udiv	r8, r8, r3
 8024874:	2600      	movs	r6, #0
 8024876:	fb03 f908 	mul.w	r9, r3, r8
 802487a:	4630      	mov	r0, r6
 802487c:	ea6f 0909 	mvn.w	r9, r9
 8024880:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8024884:	f1bc 0f09 	cmp.w	ip, #9
 8024888:	d810      	bhi.n	80248ac <_strtoul_l.isra.0+0x94>
 802488a:	4664      	mov	r4, ip
 802488c:	42a3      	cmp	r3, r4
 802488e:	dd1e      	ble.n	80248ce <_strtoul_l.isra.0+0xb6>
 8024890:	f1b6 3fff 	cmp.w	r6, #4294967295
 8024894:	d007      	beq.n	80248a6 <_strtoul_l.isra.0+0x8e>
 8024896:	4580      	cmp	r8, r0
 8024898:	d316      	bcc.n	80248c8 <_strtoul_l.isra.0+0xb0>
 802489a:	d101      	bne.n	80248a0 <_strtoul_l.isra.0+0x88>
 802489c:	45a1      	cmp	r9, r4
 802489e:	db13      	blt.n	80248c8 <_strtoul_l.isra.0+0xb0>
 80248a0:	2601      	movs	r6, #1
 80248a2:	fb00 4003 	mla	r0, r0, r3, r4
 80248a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80248aa:	e7e9      	b.n	8024880 <_strtoul_l.isra.0+0x68>
 80248ac:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80248b0:	f1bc 0f19 	cmp.w	ip, #25
 80248b4:	d801      	bhi.n	80248ba <_strtoul_l.isra.0+0xa2>
 80248b6:	3c37      	subs	r4, #55	@ 0x37
 80248b8:	e7e8      	b.n	802488c <_strtoul_l.isra.0+0x74>
 80248ba:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80248be:	f1bc 0f19 	cmp.w	ip, #25
 80248c2:	d804      	bhi.n	80248ce <_strtoul_l.isra.0+0xb6>
 80248c4:	3c57      	subs	r4, #87	@ 0x57
 80248c6:	e7e1      	b.n	802488c <_strtoul_l.isra.0+0x74>
 80248c8:	f04f 36ff 	mov.w	r6, #4294967295
 80248cc:	e7eb      	b.n	80248a6 <_strtoul_l.isra.0+0x8e>
 80248ce:	1c73      	adds	r3, r6, #1
 80248d0:	d106      	bne.n	80248e0 <_strtoul_l.isra.0+0xc8>
 80248d2:	2322      	movs	r3, #34	@ 0x22
 80248d4:	4630      	mov	r0, r6
 80248d6:	f8ce 3000 	str.w	r3, [lr]
 80248da:	b932      	cbnz	r2, 80248ea <_strtoul_l.isra.0+0xd2>
 80248dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80248e0:	b107      	cbz	r7, 80248e4 <_strtoul_l.isra.0+0xcc>
 80248e2:	4240      	negs	r0, r0
 80248e4:	2a00      	cmp	r2, #0
 80248e6:	d0f9      	beq.n	80248dc <_strtoul_l.isra.0+0xc4>
 80248e8:	b106      	cbz	r6, 80248ec <_strtoul_l.isra.0+0xd4>
 80248ea:	1e69      	subs	r1, r5, #1
 80248ec:	6011      	str	r1, [r2, #0]
 80248ee:	e7f5      	b.n	80248dc <_strtoul_l.isra.0+0xc4>
 80248f0:	08030eed 	.word	0x08030eed

080248f4 <_strtoul_r>:
 80248f4:	f7ff bf90 	b.w	8024818 <_strtoul_l.isra.0>

080248f8 <__ascii_wctomb>:
 80248f8:	4603      	mov	r3, r0
 80248fa:	4608      	mov	r0, r1
 80248fc:	b141      	cbz	r1, 8024910 <__ascii_wctomb+0x18>
 80248fe:	2aff      	cmp	r2, #255	@ 0xff
 8024900:	d904      	bls.n	802490c <__ascii_wctomb+0x14>
 8024902:	228a      	movs	r2, #138	@ 0x8a
 8024904:	f04f 30ff 	mov.w	r0, #4294967295
 8024908:	601a      	str	r2, [r3, #0]
 802490a:	4770      	bx	lr
 802490c:	2001      	movs	r0, #1
 802490e:	700a      	strb	r2, [r1, #0]
 8024910:	4770      	bx	lr

08024912 <_raise_r>:
 8024912:	291f      	cmp	r1, #31
 8024914:	b538      	push	{r3, r4, r5, lr}
 8024916:	4605      	mov	r5, r0
 8024918:	460c      	mov	r4, r1
 802491a:	d904      	bls.n	8024926 <_raise_r+0x14>
 802491c:	2316      	movs	r3, #22
 802491e:	6003      	str	r3, [r0, #0]
 8024920:	f04f 30ff 	mov.w	r0, #4294967295
 8024924:	bd38      	pop	{r3, r4, r5, pc}
 8024926:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8024928:	b112      	cbz	r2, 8024930 <_raise_r+0x1e>
 802492a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802492e:	b94b      	cbnz	r3, 8024944 <_raise_r+0x32>
 8024930:	4628      	mov	r0, r5
 8024932:	f000 f831 	bl	8024998 <_getpid_r>
 8024936:	4622      	mov	r2, r4
 8024938:	4601      	mov	r1, r0
 802493a:	4628      	mov	r0, r5
 802493c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024940:	f000 b818 	b.w	8024974 <_kill_r>
 8024944:	2b01      	cmp	r3, #1
 8024946:	d00a      	beq.n	802495e <_raise_r+0x4c>
 8024948:	1c59      	adds	r1, r3, #1
 802494a:	d103      	bne.n	8024954 <_raise_r+0x42>
 802494c:	2316      	movs	r3, #22
 802494e:	6003      	str	r3, [r0, #0]
 8024950:	2001      	movs	r0, #1
 8024952:	e7e7      	b.n	8024924 <_raise_r+0x12>
 8024954:	2100      	movs	r1, #0
 8024956:	4620      	mov	r0, r4
 8024958:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802495c:	4798      	blx	r3
 802495e:	2000      	movs	r0, #0
 8024960:	e7e0      	b.n	8024924 <_raise_r+0x12>
	...

08024964 <raise>:
 8024964:	4b02      	ldr	r3, [pc, #8]	@ (8024970 <raise+0xc>)
 8024966:	4601      	mov	r1, r0
 8024968:	6818      	ldr	r0, [r3, #0]
 802496a:	f7ff bfd2 	b.w	8024912 <_raise_r>
 802496e:	bf00      	nop
 8024970:	20000138 	.word	0x20000138

08024974 <_kill_r>:
 8024974:	b538      	push	{r3, r4, r5, lr}
 8024976:	2300      	movs	r3, #0
 8024978:	4d06      	ldr	r5, [pc, #24]	@ (8024994 <_kill_r+0x20>)
 802497a:	4604      	mov	r4, r0
 802497c:	4608      	mov	r0, r1
 802497e:	4611      	mov	r1, r2
 8024980:	602b      	str	r3, [r5, #0]
 8024982:	f7df f94b 	bl	8003c1c <_kill>
 8024986:	1c43      	adds	r3, r0, #1
 8024988:	d102      	bne.n	8024990 <_kill_r+0x1c>
 802498a:	682b      	ldr	r3, [r5, #0]
 802498c:	b103      	cbz	r3, 8024990 <_kill_r+0x1c>
 802498e:	6023      	str	r3, [r4, #0]
 8024990:	bd38      	pop	{r3, r4, r5, pc}
 8024992:	bf00      	nop
 8024994:	2000c2fc 	.word	0x2000c2fc

08024998 <_getpid_r>:
 8024998:	f7df b938 	b.w	8003c0c <_getpid>

0802499c <_malloc_usable_size_r>:
 802499c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80249a0:	1f18      	subs	r0, r3, #4
 80249a2:	2b00      	cmp	r3, #0
 80249a4:	bfbc      	itt	lt
 80249a6:	580b      	ldrlt	r3, [r1, r0]
 80249a8:	18c0      	addlt	r0, r0, r3
 80249aa:	4770      	bx	lr

080249ac <sqrtf>:
 80249ac:	b538      	push	{r3, r4, r5, lr}
 80249ae:	4605      	mov	r5, r0
 80249b0:	f000 f816 	bl	80249e0 <__ieee754_sqrtf>
 80249b4:	4629      	mov	r1, r5
 80249b6:	4604      	mov	r4, r0
 80249b8:	4628      	mov	r0, r5
 80249ba:	f7dc fbcf 	bl	800115c <__aeabi_fcmpun>
 80249be:	b968      	cbnz	r0, 80249dc <sqrtf+0x30>
 80249c0:	2100      	movs	r1, #0
 80249c2:	4628      	mov	r0, r5
 80249c4:	f7dc fba2 	bl	800110c <__aeabi_fcmplt>
 80249c8:	b140      	cbz	r0, 80249dc <sqrtf+0x30>
 80249ca:	f7fd fc1d 	bl	8022208 <__errno>
 80249ce:	2321      	movs	r3, #33	@ 0x21
 80249d0:	2100      	movs	r1, #0
 80249d2:	6003      	str	r3, [r0, #0]
 80249d4:	4608      	mov	r0, r1
 80249d6:	f7dc faaf 	bl	8000f38 <__aeabi_fdiv>
 80249da:	4604      	mov	r4, r0
 80249dc:	4620      	mov	r0, r4
 80249de:	bd38      	pop	{r3, r4, r5, pc}

080249e0 <__ieee754_sqrtf>:
 80249e0:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 80249e4:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80249e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80249ec:	4603      	mov	r3, r0
 80249ee:	4604      	mov	r4, r0
 80249f0:	d30a      	bcc.n	8024a08 <__ieee754_sqrtf+0x28>
 80249f2:	4601      	mov	r1, r0
 80249f4:	f7dc f9ec 	bl	8000dd0 <__aeabi_fmul>
 80249f8:	4601      	mov	r1, r0
 80249fa:	4620      	mov	r0, r4
 80249fc:	f7dc f8e0 	bl	8000bc0 <__addsf3>
 8024a00:	4604      	mov	r4, r0
 8024a02:	4620      	mov	r0, r4
 8024a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024a08:	2a00      	cmp	r2, #0
 8024a0a:	d0fa      	beq.n	8024a02 <__ieee754_sqrtf+0x22>
 8024a0c:	2800      	cmp	r0, #0
 8024a0e:	da06      	bge.n	8024a1e <__ieee754_sqrtf+0x3e>
 8024a10:	4601      	mov	r1, r0
 8024a12:	f7dc f8d3 	bl	8000bbc <__aeabi_fsub>
 8024a16:	4601      	mov	r1, r0
 8024a18:	f7dc fa8e 	bl	8000f38 <__aeabi_fdiv>
 8024a1c:	e7f0      	b.n	8024a00 <__ieee754_sqrtf+0x20>
 8024a1e:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 8024a22:	d03c      	beq.n	8024a9e <__ieee754_sqrtf+0xbe>
 8024a24:	15c2      	asrs	r2, r0, #23
 8024a26:	2400      	movs	r4, #0
 8024a28:	2019      	movs	r0, #25
 8024a2a:	4626      	mov	r6, r4
 8024a2c:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8024a30:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8024a34:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 8024a38:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8024a3c:	07d2      	lsls	r2, r2, #31
 8024a3e:	bf58      	it	pl
 8024a40:	005b      	lslpl	r3, r3, #1
 8024a42:	106d      	asrs	r5, r5, #1
 8024a44:	005b      	lsls	r3, r3, #1
 8024a46:	1872      	adds	r2, r6, r1
 8024a48:	429a      	cmp	r2, r3
 8024a4a:	bfcf      	iteee	gt
 8024a4c:	461a      	movgt	r2, r3
 8024a4e:	1856      	addle	r6, r2, r1
 8024a50:	1864      	addle	r4, r4, r1
 8024a52:	1a9a      	suble	r2, r3, r2
 8024a54:	3801      	subs	r0, #1
 8024a56:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8024a5a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8024a5e:	d1f2      	bne.n	8024a46 <__ieee754_sqrtf+0x66>
 8024a60:	b1ba      	cbz	r2, 8024a92 <__ieee754_sqrtf+0xb2>
 8024a62:	4e15      	ldr	r6, [pc, #84]	@ (8024ab8 <__ieee754_sqrtf+0xd8>)
 8024a64:	4f15      	ldr	r7, [pc, #84]	@ (8024abc <__ieee754_sqrtf+0xdc>)
 8024a66:	6830      	ldr	r0, [r6, #0]
 8024a68:	6839      	ldr	r1, [r7, #0]
 8024a6a:	f7dc f8a7 	bl	8000bbc <__aeabi_fsub>
 8024a6e:	f8d6 8000 	ldr.w	r8, [r6]
 8024a72:	4601      	mov	r1, r0
 8024a74:	4640      	mov	r0, r8
 8024a76:	f7dc fb53 	bl	8001120 <__aeabi_fcmple>
 8024a7a:	b150      	cbz	r0, 8024a92 <__ieee754_sqrtf+0xb2>
 8024a7c:	6830      	ldr	r0, [r6, #0]
 8024a7e:	6839      	ldr	r1, [r7, #0]
 8024a80:	f7dc f89e 	bl	8000bc0 <__addsf3>
 8024a84:	6836      	ldr	r6, [r6, #0]
 8024a86:	4601      	mov	r1, r0
 8024a88:	4630      	mov	r0, r6
 8024a8a:	f7dc fb3f 	bl	800110c <__aeabi_fcmplt>
 8024a8e:	b170      	cbz	r0, 8024aae <__ieee754_sqrtf+0xce>
 8024a90:	3402      	adds	r4, #2
 8024a92:	1064      	asrs	r4, r4, #1
 8024a94:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8024a98:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8024a9c:	e7b1      	b.n	8024a02 <__ieee754_sqrtf+0x22>
 8024a9e:	005b      	lsls	r3, r3, #1
 8024aa0:	0218      	lsls	r0, r3, #8
 8024aa2:	460a      	mov	r2, r1
 8024aa4:	f101 0101 	add.w	r1, r1, #1
 8024aa8:	d5f9      	bpl.n	8024a9e <__ieee754_sqrtf+0xbe>
 8024aaa:	4252      	negs	r2, r2
 8024aac:	e7bb      	b.n	8024a26 <__ieee754_sqrtf+0x46>
 8024aae:	3401      	adds	r4, #1
 8024ab0:	f024 0401 	bic.w	r4, r4, #1
 8024ab4:	e7ed      	b.n	8024a92 <__ieee754_sqrtf+0xb2>
 8024ab6:	bf00      	nop
 8024ab8:	080310f4 	.word	0x080310f4
 8024abc:	080310f0 	.word	0x080310f0

08024ac0 <_init>:
 8024ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024ac2:	bf00      	nop
 8024ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024ac6:	bc08      	pop	{r3}
 8024ac8:	469e      	mov	lr, r3
 8024aca:	4770      	bx	lr

08024acc <_fini>:
 8024acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024ace:	bf00      	nop
 8024ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024ad2:	bc08      	pop	{r3}
 8024ad4:	469e      	mov	lr, r3
 8024ad6:	4770      	bx	lr
