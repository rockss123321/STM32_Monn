
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000230a0  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000c228  08023228  08023228  00024228  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802f450  0802f450  000312e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0802f450  0802f450  00030450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802f458  0802f458  000312e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802f458  0802f458  00030458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802f45c  0802f45c  0003045c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002e8  20000000  0802f460  00031000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000dd20  200002e8  0802f748  000312e8  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  2000e008  0802f748  00032008  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000312e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003c6fb  00000000  00000000  00031311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a527  00000000  00000000  0006da0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002880  00000000  00000000  00077f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001fab  00000000  00000000  0007a7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b03a  00000000  00000000  0007c763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004dc70  00000000  00000000  000b779d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed7b3  00000000  00000000  0010540d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f2bc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ba28  00000000  00000000  001f2c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001fe62c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200002e8 	.word	0x200002e8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08023210 	.word	0x08023210

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200002ec 	.word	0x200002ec
 80001c4:	08023210 	.word	0x08023210

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	@ 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__gedf2>:
 8000988:	f04f 3cff 	mov.w	ip, #4294967295
 800098c:	e006      	b.n	800099c <__cmpdf2+0x4>
 800098e:	bf00      	nop

08000990 <__ledf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	e002      	b.n	800099c <__cmpdf2+0x4>
 8000996:	bf00      	nop

08000998 <__cmpdf2>:
 8000998:	f04f 0c01 	mov.w	ip, #1
 800099c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ac:	bf18      	it	ne
 80009ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b2:	d01b      	beq.n	80009ec <__cmpdf2+0x54>
 80009b4:	b001      	add	sp, #4
 80009b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ba:	bf0c      	ite	eq
 80009bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c0:	ea91 0f03 	teqne	r1, r3
 80009c4:	bf02      	ittt	eq
 80009c6:	ea90 0f02 	teqeq	r0, r2
 80009ca:	2000      	moveq	r0, #0
 80009cc:	4770      	bxeq	lr
 80009ce:	f110 0f00 	cmn.w	r0, #0
 80009d2:	ea91 0f03 	teq	r1, r3
 80009d6:	bf58      	it	pl
 80009d8:	4299      	cmppl	r1, r3
 80009da:	bf08      	it	eq
 80009dc:	4290      	cmpeq	r0, r2
 80009de:	bf2c      	ite	cs
 80009e0:	17d8      	asrcs	r0, r3, #31
 80009e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e6:	f040 0001 	orr.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	d102      	bne.n	80009fc <__cmpdf2+0x64>
 80009f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fa:	d107      	bne.n	8000a0c <__cmpdf2+0x74>
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d1d6      	bne.n	80009b4 <__cmpdf2+0x1c>
 8000a06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0a:	d0d3      	beq.n	80009b4 <__cmpdf2+0x1c>
 8000a0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_cdrcmple>:
 8000a14:	4684      	mov	ip, r0
 8000a16:	4610      	mov	r0, r2
 8000a18:	4662      	mov	r2, ip
 8000a1a:	468c      	mov	ip, r1
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4663      	mov	r3, ip
 8000a20:	e000      	b.n	8000a24 <__aeabi_cdcmpeq>
 8000a22:	bf00      	nop

08000a24 <__aeabi_cdcmpeq>:
 8000a24:	b501      	push	{r0, lr}
 8000a26:	f7ff ffb7 	bl	8000998 <__cmpdf2>
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	bf48      	it	mi
 8000a2e:	f110 0f00 	cmnmi.w	r0, #0
 8000a32:	bd01      	pop	{r0, pc}

08000a34 <__aeabi_dcmpeq>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff fff4 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a3c:	bf0c      	ite	eq
 8000a3e:	2001      	moveq	r0, #1
 8000a40:	2000      	movne	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmplt>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffea 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a50:	bf34      	ite	cc
 8000a52:	2001      	movcc	r0, #1
 8000a54:	2000      	movcs	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmple>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffe0 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpge>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffce 	bl	8000a14 <__aeabi_cdrcmple>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpgt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffc4 	bl	8000a14 <__aeabi_cdrcmple>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpun>:
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__aeabi_dcmpun+0x10>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d10a      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__aeabi_dcmpun+0x20>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000ab8:	f04f 0000 	mov.w	r0, #0
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0001 	mov.w	r0, #1
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_frsub>:
 8000bb4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	e002      	b.n	8000bc0 <__addsf3>
 8000bba:	bf00      	nop

08000bbc <__aeabi_fsub>:
 8000bbc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bc0 <__addsf3>:
 8000bc0:	0042      	lsls	r2, r0, #1
 8000bc2:	bf1f      	itttt	ne
 8000bc4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bc8:	ea92 0f03 	teqne	r2, r3
 8000bcc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bd0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bd4:	d06a      	beq.n	8000cac <__addsf3+0xec>
 8000bd6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bda:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bde:	bfc1      	itttt	gt
 8000be0:	18d2      	addgt	r2, r2, r3
 8000be2:	4041      	eorgt	r1, r0
 8000be4:	4048      	eorgt	r0, r1
 8000be6:	4041      	eorgt	r1, r0
 8000be8:	bfb8      	it	lt
 8000bea:	425b      	neglt	r3, r3
 8000bec:	2b19      	cmp	r3, #25
 8000bee:	bf88      	it	hi
 8000bf0:	4770      	bxhi	lr
 8000bf2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bf6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bfa:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bfe:	bf18      	it	ne
 8000c00:	4240      	negne	r0, r0
 8000c02:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c06:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c0a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c0e:	bf18      	it	ne
 8000c10:	4249      	negne	r1, r1
 8000c12:	ea92 0f03 	teq	r2, r3
 8000c16:	d03f      	beq.n	8000c98 <__addsf3+0xd8>
 8000c18:	f1a2 0201 	sub.w	r2, r2, #1
 8000c1c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c20:	eb10 000c 	adds.w	r0, r0, ip
 8000c24:	f1c3 0320 	rsb	r3, r3, #32
 8000c28:	fa01 f103 	lsl.w	r1, r1, r3
 8000c2c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c30:	d502      	bpl.n	8000c38 <__addsf3+0x78>
 8000c32:	4249      	negs	r1, r1
 8000c34:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c38:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c3c:	d313      	bcc.n	8000c66 <__addsf3+0xa6>
 8000c3e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c42:	d306      	bcc.n	8000c52 <__addsf3+0x92>
 8000c44:	0840      	lsrs	r0, r0, #1
 8000c46:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c4a:	f102 0201 	add.w	r2, r2, #1
 8000c4e:	2afe      	cmp	r2, #254	@ 0xfe
 8000c50:	d251      	bcs.n	8000cf6 <__addsf3+0x136>
 8000c52:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c56:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c5a:	bf08      	it	eq
 8000c5c:	f020 0001 	biceq.w	r0, r0, #1
 8000c60:	ea40 0003 	orr.w	r0, r0, r3
 8000c64:	4770      	bx	lr
 8000c66:	0049      	lsls	r1, r1, #1
 8000c68:	eb40 0000 	adc.w	r0, r0, r0
 8000c6c:	3a01      	subs	r2, #1
 8000c6e:	bf28      	it	cs
 8000c70:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c74:	d2ed      	bcs.n	8000c52 <__addsf3+0x92>
 8000c76:	fab0 fc80 	clz	ip, r0
 8000c7a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c7e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c82:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c86:	bfaa      	itet	ge
 8000c88:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c8c:	4252      	neglt	r2, r2
 8000c8e:	4318      	orrge	r0, r3
 8000c90:	bfbc      	itt	lt
 8000c92:	40d0      	lsrlt	r0, r2
 8000c94:	4318      	orrlt	r0, r3
 8000c96:	4770      	bx	lr
 8000c98:	f092 0f00 	teq	r2, #0
 8000c9c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ca0:	bf06      	itte	eq
 8000ca2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ca6:	3201      	addeq	r2, #1
 8000ca8:	3b01      	subne	r3, #1
 8000caa:	e7b5      	b.n	8000c18 <__addsf3+0x58>
 8000cac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cb0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cb4:	bf18      	it	ne
 8000cb6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cba:	d021      	beq.n	8000d00 <__addsf3+0x140>
 8000cbc:	ea92 0f03 	teq	r2, r3
 8000cc0:	d004      	beq.n	8000ccc <__addsf3+0x10c>
 8000cc2:	f092 0f00 	teq	r2, #0
 8000cc6:	bf08      	it	eq
 8000cc8:	4608      	moveq	r0, r1
 8000cca:	4770      	bx	lr
 8000ccc:	ea90 0f01 	teq	r0, r1
 8000cd0:	bf1c      	itt	ne
 8000cd2:	2000      	movne	r0, #0
 8000cd4:	4770      	bxne	lr
 8000cd6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cda:	d104      	bne.n	8000ce6 <__addsf3+0x126>
 8000cdc:	0040      	lsls	r0, r0, #1
 8000cde:	bf28      	it	cs
 8000ce0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000ce4:	4770      	bx	lr
 8000ce6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cea:	bf3c      	itt	cc
 8000cec:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cf0:	4770      	bxcc	lr
 8000cf2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cf6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cfa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cfe:	4770      	bx	lr
 8000d00:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d04:	bf16      	itet	ne
 8000d06:	4608      	movne	r0, r1
 8000d08:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d0c:	4601      	movne	r1, r0
 8000d0e:	0242      	lsls	r2, r0, #9
 8000d10:	bf06      	itte	eq
 8000d12:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d16:	ea90 0f01 	teqeq	r0, r1
 8000d1a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d1e:	4770      	bx	lr

08000d20 <__aeabi_ui2f>:
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	e004      	b.n	8000d30 <__aeabi_i2f+0x8>
 8000d26:	bf00      	nop

08000d28 <__aeabi_i2f>:
 8000d28:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d2c:	bf48      	it	mi
 8000d2e:	4240      	negmi	r0, r0
 8000d30:	ea5f 0c00 	movs.w	ip, r0
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d3c:	4601      	mov	r1, r0
 8000d3e:	f04f 0000 	mov.w	r0, #0
 8000d42:	e01c      	b.n	8000d7e <__aeabi_l2f+0x2a>

08000d44 <__aeabi_ul2f>:
 8000d44:	ea50 0201 	orrs.w	r2, r0, r1
 8000d48:	bf08      	it	eq
 8000d4a:	4770      	bxeq	lr
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	e00a      	b.n	8000d68 <__aeabi_l2f+0x14>
 8000d52:	bf00      	nop

08000d54 <__aeabi_l2f>:
 8000d54:	ea50 0201 	orrs.w	r2, r0, r1
 8000d58:	bf08      	it	eq
 8000d5a:	4770      	bxeq	lr
 8000d5c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d60:	d502      	bpl.n	8000d68 <__aeabi_l2f+0x14>
 8000d62:	4240      	negs	r0, r0
 8000d64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d68:	ea5f 0c01 	movs.w	ip, r1
 8000d6c:	bf02      	ittt	eq
 8000d6e:	4684      	moveq	ip, r0
 8000d70:	4601      	moveq	r1, r0
 8000d72:	2000      	moveq	r0, #0
 8000d74:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d78:	bf08      	it	eq
 8000d7a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d7e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d82:	fabc f28c 	clz	r2, ip
 8000d86:	3a08      	subs	r2, #8
 8000d88:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d8c:	db10      	blt.n	8000db0 <__aeabi_l2f+0x5c>
 8000d8e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d92:	4463      	add	r3, ip
 8000d94:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d98:	f1c2 0220 	rsb	r2, r2, #32
 8000d9c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000da0:	fa20 f202 	lsr.w	r2, r0, r2
 8000da4:	eb43 0002 	adc.w	r0, r3, r2
 8000da8:	bf08      	it	eq
 8000daa:	f020 0001 	biceq.w	r0, r0, #1
 8000dae:	4770      	bx	lr
 8000db0:	f102 0220 	add.w	r2, r2, #32
 8000db4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000db8:	f1c2 0220 	rsb	r2, r2, #32
 8000dbc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dc0:	fa21 f202 	lsr.w	r2, r1, r2
 8000dc4:	eb43 0002 	adc.w	r0, r3, r2
 8000dc8:	bf08      	it	eq
 8000dca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dce:	4770      	bx	lr

08000dd0 <__aeabi_fmul>:
 8000dd0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000dd4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dd8:	bf1e      	ittt	ne
 8000dda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dde:	ea92 0f0c 	teqne	r2, ip
 8000de2:	ea93 0f0c 	teqne	r3, ip
 8000de6:	d06f      	beq.n	8000ec8 <__aeabi_fmul+0xf8>
 8000de8:	441a      	add	r2, r3
 8000dea:	ea80 0c01 	eor.w	ip, r0, r1
 8000dee:	0240      	lsls	r0, r0, #9
 8000df0:	bf18      	it	ne
 8000df2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000df6:	d01e      	beq.n	8000e36 <__aeabi_fmul+0x66>
 8000df8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000dfc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e00:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e04:	fba0 3101 	umull	r3, r1, r0, r1
 8000e08:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e0c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e10:	bf3e      	ittt	cc
 8000e12:	0049      	lslcc	r1, r1, #1
 8000e14:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e18:	005b      	lslcc	r3, r3, #1
 8000e1a:	ea40 0001 	orr.w	r0, r0, r1
 8000e1e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e22:	2afd      	cmp	r2, #253	@ 0xfd
 8000e24:	d81d      	bhi.n	8000e62 <__aeabi_fmul+0x92>
 8000e26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e2e:	bf08      	it	eq
 8000e30:	f020 0001 	biceq.w	r0, r0, #1
 8000e34:	4770      	bx	lr
 8000e36:	f090 0f00 	teq	r0, #0
 8000e3a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e3e:	bf08      	it	eq
 8000e40:	0249      	lsleq	r1, r1, #9
 8000e42:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e46:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e4a:	3a7f      	subs	r2, #127	@ 0x7f
 8000e4c:	bfc2      	ittt	gt
 8000e4e:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e52:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e56:	4770      	bxgt	lr
 8000e58:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e5c:	f04f 0300 	mov.w	r3, #0
 8000e60:	3a01      	subs	r2, #1
 8000e62:	dc5d      	bgt.n	8000f20 <__aeabi_fmul+0x150>
 8000e64:	f112 0f19 	cmn.w	r2, #25
 8000e68:	bfdc      	itt	le
 8000e6a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e6e:	4770      	bxle	lr
 8000e70:	f1c2 0200 	rsb	r2, r2, #0
 8000e74:	0041      	lsls	r1, r0, #1
 8000e76:	fa21 f102 	lsr.w	r1, r1, r2
 8000e7a:	f1c2 0220 	rsb	r2, r2, #32
 8000e7e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e82:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e86:	f140 0000 	adc.w	r0, r0, #0
 8000e8a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e8e:	bf08      	it	eq
 8000e90:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e94:	4770      	bx	lr
 8000e96:	f092 0f00 	teq	r2, #0
 8000e9a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e9e:	bf02      	ittt	eq
 8000ea0:	0040      	lsleq	r0, r0, #1
 8000ea2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ea6:	3a01      	subeq	r2, #1
 8000ea8:	d0f9      	beq.n	8000e9e <__aeabi_fmul+0xce>
 8000eaa:	ea40 000c 	orr.w	r0, r0, ip
 8000eae:	f093 0f00 	teq	r3, #0
 8000eb2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000eb6:	bf02      	ittt	eq
 8000eb8:	0049      	lsleq	r1, r1, #1
 8000eba:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ebe:	3b01      	subeq	r3, #1
 8000ec0:	d0f9      	beq.n	8000eb6 <__aeabi_fmul+0xe6>
 8000ec2:	ea41 010c 	orr.w	r1, r1, ip
 8000ec6:	e78f      	b.n	8000de8 <__aeabi_fmul+0x18>
 8000ec8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	bf18      	it	ne
 8000ed2:	ea93 0f0c 	teqne	r3, ip
 8000ed6:	d00a      	beq.n	8000eee <__aeabi_fmul+0x11e>
 8000ed8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000edc:	bf18      	it	ne
 8000ede:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ee2:	d1d8      	bne.n	8000e96 <__aeabi_fmul+0xc6>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eec:	4770      	bx	lr
 8000eee:	f090 0f00 	teq	r0, #0
 8000ef2:	bf17      	itett	ne
 8000ef4:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ef8:	4608      	moveq	r0, r1
 8000efa:	f091 0f00 	teqne	r1, #0
 8000efe:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000f02:	d014      	beq.n	8000f2e <__aeabi_fmul+0x15e>
 8000f04:	ea92 0f0c 	teq	r2, ip
 8000f08:	d101      	bne.n	8000f0e <__aeabi_fmul+0x13e>
 8000f0a:	0242      	lsls	r2, r0, #9
 8000f0c:	d10f      	bne.n	8000f2e <__aeabi_fmul+0x15e>
 8000f0e:	ea93 0f0c 	teq	r3, ip
 8000f12:	d103      	bne.n	8000f1c <__aeabi_fmul+0x14c>
 8000f14:	024b      	lsls	r3, r1, #9
 8000f16:	bf18      	it	ne
 8000f18:	4608      	movne	r0, r1
 8000f1a:	d108      	bne.n	8000f2e <__aeabi_fmul+0x15e>
 8000f1c:	ea80 0001 	eor.w	r0, r0, r1
 8000f20:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f24:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f28:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f2c:	4770      	bx	lr
 8000f2e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f32:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f36:	4770      	bx	lr

08000f38 <__aeabi_fdiv>:
 8000f38:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f3c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f40:	bf1e      	ittt	ne
 8000f42:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f46:	ea92 0f0c 	teqne	r2, ip
 8000f4a:	ea93 0f0c 	teqne	r3, ip
 8000f4e:	d069      	beq.n	8001024 <__aeabi_fdiv+0xec>
 8000f50:	eba2 0203 	sub.w	r2, r2, r3
 8000f54:	ea80 0c01 	eor.w	ip, r0, r1
 8000f58:	0249      	lsls	r1, r1, #9
 8000f5a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f5e:	d037      	beq.n	8000fd0 <__aeabi_fdiv+0x98>
 8000f60:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f64:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f68:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f6c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f70:	428b      	cmp	r3, r1
 8000f72:	bf38      	it	cc
 8000f74:	005b      	lslcc	r3, r3, #1
 8000f76:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f7a:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f7e:	428b      	cmp	r3, r1
 8000f80:	bf24      	itt	cs
 8000f82:	1a5b      	subcs	r3, r3, r1
 8000f84:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f88:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f8c:	bf24      	itt	cs
 8000f8e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f92:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f96:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f9a:	bf24      	itt	cs
 8000f9c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fa0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fa4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fa8:	bf24      	itt	cs
 8000faa:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fae:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fb2:	011b      	lsls	r3, r3, #4
 8000fb4:	bf18      	it	ne
 8000fb6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fba:	d1e0      	bne.n	8000f7e <__aeabi_fdiv+0x46>
 8000fbc:	2afd      	cmp	r2, #253	@ 0xfd
 8000fbe:	f63f af50 	bhi.w	8000e62 <__aeabi_fmul+0x92>
 8000fc2:	428b      	cmp	r3, r1
 8000fc4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fc8:	bf08      	it	eq
 8000fca:	f020 0001 	biceq.w	r0, r0, #1
 8000fce:	4770      	bx	lr
 8000fd0:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000fd4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fd8:	327f      	adds	r2, #127	@ 0x7f
 8000fda:	bfc2      	ittt	gt
 8000fdc:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fe0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fe4:	4770      	bxgt	lr
 8000fe6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fea:	f04f 0300 	mov.w	r3, #0
 8000fee:	3a01      	subs	r2, #1
 8000ff0:	e737      	b.n	8000e62 <__aeabi_fmul+0x92>
 8000ff2:	f092 0f00 	teq	r2, #0
 8000ff6:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ffa:	bf02      	ittt	eq
 8000ffc:	0040      	lsleq	r0, r0, #1
 8000ffe:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8001002:	3a01      	subeq	r2, #1
 8001004:	d0f9      	beq.n	8000ffa <__aeabi_fdiv+0xc2>
 8001006:	ea40 000c 	orr.w	r0, r0, ip
 800100a:	f093 0f00 	teq	r3, #0
 800100e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8001012:	bf02      	ittt	eq
 8001014:	0049      	lsleq	r1, r1, #1
 8001016:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800101a:	3b01      	subeq	r3, #1
 800101c:	d0f9      	beq.n	8001012 <__aeabi_fdiv+0xda>
 800101e:	ea41 010c 	orr.w	r1, r1, ip
 8001022:	e795      	b.n	8000f50 <__aeabi_fdiv+0x18>
 8001024:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001028:	ea92 0f0c 	teq	r2, ip
 800102c:	d108      	bne.n	8001040 <__aeabi_fdiv+0x108>
 800102e:	0242      	lsls	r2, r0, #9
 8001030:	f47f af7d 	bne.w	8000f2e <__aeabi_fmul+0x15e>
 8001034:	ea93 0f0c 	teq	r3, ip
 8001038:	f47f af70 	bne.w	8000f1c <__aeabi_fmul+0x14c>
 800103c:	4608      	mov	r0, r1
 800103e:	e776      	b.n	8000f2e <__aeabi_fmul+0x15e>
 8001040:	ea93 0f0c 	teq	r3, ip
 8001044:	d104      	bne.n	8001050 <__aeabi_fdiv+0x118>
 8001046:	024b      	lsls	r3, r1, #9
 8001048:	f43f af4c 	beq.w	8000ee4 <__aeabi_fmul+0x114>
 800104c:	4608      	mov	r0, r1
 800104e:	e76e      	b.n	8000f2e <__aeabi_fmul+0x15e>
 8001050:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001054:	bf18      	it	ne
 8001056:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800105a:	d1ca      	bne.n	8000ff2 <__aeabi_fdiv+0xba>
 800105c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001060:	f47f af5c 	bne.w	8000f1c <__aeabi_fmul+0x14c>
 8001064:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001068:	f47f af3c 	bne.w	8000ee4 <__aeabi_fmul+0x114>
 800106c:	e75f      	b.n	8000f2e <__aeabi_fmul+0x15e>
 800106e:	bf00      	nop

08001070 <__gesf2>:
 8001070:	f04f 3cff 	mov.w	ip, #4294967295
 8001074:	e006      	b.n	8001084 <__cmpsf2+0x4>
 8001076:	bf00      	nop

08001078 <__lesf2>:
 8001078:	f04f 0c01 	mov.w	ip, #1
 800107c:	e002      	b.n	8001084 <__cmpsf2+0x4>
 800107e:	bf00      	nop

08001080 <__cmpsf2>:
 8001080:	f04f 0c01 	mov.w	ip, #1
 8001084:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001088:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800108c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001090:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001094:	bf18      	it	ne
 8001096:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800109a:	d011      	beq.n	80010c0 <__cmpsf2+0x40>
 800109c:	b001      	add	sp, #4
 800109e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010a2:	bf18      	it	ne
 80010a4:	ea90 0f01 	teqne	r0, r1
 80010a8:	bf58      	it	pl
 80010aa:	ebb2 0003 	subspl.w	r0, r2, r3
 80010ae:	bf88      	it	hi
 80010b0:	17c8      	asrhi	r0, r1, #31
 80010b2:	bf38      	it	cc
 80010b4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010b8:	bf18      	it	ne
 80010ba:	f040 0001 	orrne.w	r0, r0, #1
 80010be:	4770      	bx	lr
 80010c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010c4:	d102      	bne.n	80010cc <__cmpsf2+0x4c>
 80010c6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010ca:	d105      	bne.n	80010d8 <__cmpsf2+0x58>
 80010cc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010d0:	d1e4      	bne.n	800109c <__cmpsf2+0x1c>
 80010d2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010d6:	d0e1      	beq.n	800109c <__cmpsf2+0x1c>
 80010d8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop

080010e0 <__aeabi_cfrcmple>:
 80010e0:	4684      	mov	ip, r0
 80010e2:	4608      	mov	r0, r1
 80010e4:	4661      	mov	r1, ip
 80010e6:	e7ff      	b.n	80010e8 <__aeabi_cfcmpeq>

080010e8 <__aeabi_cfcmpeq>:
 80010e8:	b50f      	push	{r0, r1, r2, r3, lr}
 80010ea:	f7ff ffc9 	bl	8001080 <__cmpsf2>
 80010ee:	2800      	cmp	r0, #0
 80010f0:	bf48      	it	mi
 80010f2:	f110 0f00 	cmnmi.w	r0, #0
 80010f6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010f8 <__aeabi_fcmpeq>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff fff4 	bl	80010e8 <__aeabi_cfcmpeq>
 8001100:	bf0c      	ite	eq
 8001102:	2001      	moveq	r0, #1
 8001104:	2000      	movne	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop

0800110c <__aeabi_fcmplt>:
 800110c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001110:	f7ff ffea 	bl	80010e8 <__aeabi_cfcmpeq>
 8001114:	bf34      	ite	cc
 8001116:	2001      	movcc	r0, #1
 8001118:	2000      	movcs	r0, #0
 800111a:	f85d fb08 	ldr.w	pc, [sp], #8
 800111e:	bf00      	nop

08001120 <__aeabi_fcmple>:
 8001120:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001124:	f7ff ffe0 	bl	80010e8 <__aeabi_cfcmpeq>
 8001128:	bf94      	ite	ls
 800112a:	2001      	movls	r0, #1
 800112c:	2000      	movhi	r0, #0
 800112e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001132:	bf00      	nop

08001134 <__aeabi_fcmpge>:
 8001134:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001138:	f7ff ffd2 	bl	80010e0 <__aeabi_cfrcmple>
 800113c:	bf94      	ite	ls
 800113e:	2001      	movls	r0, #1
 8001140:	2000      	movhi	r0, #0
 8001142:	f85d fb08 	ldr.w	pc, [sp], #8
 8001146:	bf00      	nop

08001148 <__aeabi_fcmpgt>:
 8001148:	f84d ed08 	str.w	lr, [sp, #-8]!
 800114c:	f7ff ffc8 	bl	80010e0 <__aeabi_cfrcmple>
 8001150:	bf34      	ite	cc
 8001152:	2001      	movcc	r0, #1
 8001154:	2000      	movcs	r0, #0
 8001156:	f85d fb08 	ldr.w	pc, [sp], #8
 800115a:	bf00      	nop

0800115c <__aeabi_fcmpun>:
 800115c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001160:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001164:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001168:	d102      	bne.n	8001170 <__aeabi_fcmpun+0x14>
 800116a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800116e:	d108      	bne.n	8001182 <__aeabi_fcmpun+0x26>
 8001170:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001174:	d102      	bne.n	800117c <__aeabi_fcmpun+0x20>
 8001176:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800117a:	d102      	bne.n	8001182 <__aeabi_fcmpun+0x26>
 800117c:	f04f 0000 	mov.w	r0, #0
 8001180:	4770      	bx	lr
 8001182:	f04f 0001 	mov.w	r0, #1
 8001186:	4770      	bx	lr

08001188 <__aeabi_f2iz>:
 8001188:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800118c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001190:	d30f      	bcc.n	80011b2 <__aeabi_f2iz+0x2a>
 8001192:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001196:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800119a:	d90d      	bls.n	80011b8 <__aeabi_f2iz+0x30>
 800119c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80011a4:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80011a8:	fa23 f002 	lsr.w	r0, r3, r2
 80011ac:	bf18      	it	ne
 80011ae:	4240      	negne	r0, r0
 80011b0:	4770      	bx	lr
 80011b2:	f04f 0000 	mov.w	r0, #0
 80011b6:	4770      	bx	lr
 80011b8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80011bc:	d101      	bne.n	80011c2 <__aeabi_f2iz+0x3a>
 80011be:	0242      	lsls	r2, r0, #9
 80011c0:	d105      	bne.n	80011ce <__aeabi_f2iz+0x46>
 80011c2:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80011c6:	bf08      	it	eq
 80011c8:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80011cc:	4770      	bx	lr
 80011ce:	f04f 0000 	mov.w	r0, #0
 80011d2:	4770      	bx	lr

080011d4 <__aeabi_f2uiz>:
 80011d4:	0042      	lsls	r2, r0, #1
 80011d6:	d20e      	bcs.n	80011f6 <__aeabi_f2uiz+0x22>
 80011d8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80011dc:	d30b      	bcc.n	80011f6 <__aeabi_f2uiz+0x22>
 80011de:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80011e2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011e6:	d409      	bmi.n	80011fc <__aeabi_f2uiz+0x28>
 80011e8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80011f0:	fa23 f002 	lsr.w	r0, r3, r2
 80011f4:	4770      	bx	lr
 80011f6:	f04f 0000 	mov.w	r0, #0
 80011fa:	4770      	bx	lr
 80011fc:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001200:	d101      	bne.n	8001206 <__aeabi_f2uiz+0x32>
 8001202:	0242      	lsls	r2, r0, #9
 8001204:	d102      	bne.n	800120c <__aeabi_f2uiz+0x38>
 8001206:	f04f 30ff 	mov.w	r0, #4294967295
 800120a:	4770      	bx	lr
 800120c:	f04f 0000 	mov.w	r0, #0
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop

08001214 <__aeabi_uldivmod>:
 8001214:	b953      	cbnz	r3, 800122c <__aeabi_uldivmod+0x18>
 8001216:	b94a      	cbnz	r2, 800122c <__aeabi_uldivmod+0x18>
 8001218:	2900      	cmp	r1, #0
 800121a:	bf08      	it	eq
 800121c:	2800      	cmpeq	r0, #0
 800121e:	bf1c      	itt	ne
 8001220:	f04f 31ff 	movne.w	r1, #4294967295
 8001224:	f04f 30ff 	movne.w	r0, #4294967295
 8001228:	f000 b98c 	b.w	8001544 <__aeabi_idiv0>
 800122c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001234:	f000 f806 	bl	8001244 <__udivmoddi4>
 8001238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800123c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001240:	b004      	add	sp, #16
 8001242:	4770      	bx	lr

08001244 <__udivmoddi4>:
 8001244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001248:	9d08      	ldr	r5, [sp, #32]
 800124a:	468e      	mov	lr, r1
 800124c:	4604      	mov	r4, r0
 800124e:	4688      	mov	r8, r1
 8001250:	2b00      	cmp	r3, #0
 8001252:	d14a      	bne.n	80012ea <__udivmoddi4+0xa6>
 8001254:	428a      	cmp	r2, r1
 8001256:	4617      	mov	r7, r2
 8001258:	d962      	bls.n	8001320 <__udivmoddi4+0xdc>
 800125a:	fab2 f682 	clz	r6, r2
 800125e:	b14e      	cbz	r6, 8001274 <__udivmoddi4+0x30>
 8001260:	f1c6 0320 	rsb	r3, r6, #32
 8001264:	fa01 f806 	lsl.w	r8, r1, r6
 8001268:	fa20 f303 	lsr.w	r3, r0, r3
 800126c:	40b7      	lsls	r7, r6
 800126e:	ea43 0808 	orr.w	r8, r3, r8
 8001272:	40b4      	lsls	r4, r6
 8001274:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001278:	fbb8 f1fe 	udiv	r1, r8, lr
 800127c:	fa1f fc87 	uxth.w	ip, r7
 8001280:	fb0e 8811 	mls	r8, lr, r1, r8
 8001284:	fb01 f20c 	mul.w	r2, r1, ip
 8001288:	0c23      	lsrs	r3, r4, #16
 800128a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800128e:	429a      	cmp	r2, r3
 8001290:	d909      	bls.n	80012a6 <__udivmoddi4+0x62>
 8001292:	18fb      	adds	r3, r7, r3
 8001294:	f101 30ff 	add.w	r0, r1, #4294967295
 8001298:	f080 80eb 	bcs.w	8001472 <__udivmoddi4+0x22e>
 800129c:	429a      	cmp	r2, r3
 800129e:	f240 80e8 	bls.w	8001472 <__udivmoddi4+0x22e>
 80012a2:	3902      	subs	r1, #2
 80012a4:	443b      	add	r3, r7
 80012a6:	1a9a      	subs	r2, r3, r2
 80012a8:	fbb2 f0fe 	udiv	r0, r2, lr
 80012ac:	fb0e 2210 	mls	r2, lr, r0, r2
 80012b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80012b4:	b2a3      	uxth	r3, r4
 80012b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80012ba:	459c      	cmp	ip, r3
 80012bc:	d909      	bls.n	80012d2 <__udivmoddi4+0x8e>
 80012be:	18fb      	adds	r3, r7, r3
 80012c0:	f100 32ff 	add.w	r2, r0, #4294967295
 80012c4:	f080 80d7 	bcs.w	8001476 <__udivmoddi4+0x232>
 80012c8:	459c      	cmp	ip, r3
 80012ca:	f240 80d4 	bls.w	8001476 <__udivmoddi4+0x232>
 80012ce:	443b      	add	r3, r7
 80012d0:	3802      	subs	r0, #2
 80012d2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80012d6:	2100      	movs	r1, #0
 80012d8:	eba3 030c 	sub.w	r3, r3, ip
 80012dc:	b11d      	cbz	r5, 80012e6 <__udivmoddi4+0xa2>
 80012de:	2200      	movs	r2, #0
 80012e0:	40f3      	lsrs	r3, r6
 80012e2:	e9c5 3200 	strd	r3, r2, [r5]
 80012e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012ea:	428b      	cmp	r3, r1
 80012ec:	d905      	bls.n	80012fa <__udivmoddi4+0xb6>
 80012ee:	b10d      	cbz	r5, 80012f4 <__udivmoddi4+0xb0>
 80012f0:	e9c5 0100 	strd	r0, r1, [r5]
 80012f4:	2100      	movs	r1, #0
 80012f6:	4608      	mov	r0, r1
 80012f8:	e7f5      	b.n	80012e6 <__udivmoddi4+0xa2>
 80012fa:	fab3 f183 	clz	r1, r3
 80012fe:	2900      	cmp	r1, #0
 8001300:	d146      	bne.n	8001390 <__udivmoddi4+0x14c>
 8001302:	4573      	cmp	r3, lr
 8001304:	d302      	bcc.n	800130c <__udivmoddi4+0xc8>
 8001306:	4282      	cmp	r2, r0
 8001308:	f200 8108 	bhi.w	800151c <__udivmoddi4+0x2d8>
 800130c:	1a84      	subs	r4, r0, r2
 800130e:	eb6e 0203 	sbc.w	r2, lr, r3
 8001312:	2001      	movs	r0, #1
 8001314:	4690      	mov	r8, r2
 8001316:	2d00      	cmp	r5, #0
 8001318:	d0e5      	beq.n	80012e6 <__udivmoddi4+0xa2>
 800131a:	e9c5 4800 	strd	r4, r8, [r5]
 800131e:	e7e2      	b.n	80012e6 <__udivmoddi4+0xa2>
 8001320:	2a00      	cmp	r2, #0
 8001322:	f000 8091 	beq.w	8001448 <__udivmoddi4+0x204>
 8001326:	fab2 f682 	clz	r6, r2
 800132a:	2e00      	cmp	r6, #0
 800132c:	f040 80a5 	bne.w	800147a <__udivmoddi4+0x236>
 8001330:	1a8a      	subs	r2, r1, r2
 8001332:	2101      	movs	r1, #1
 8001334:	0c03      	lsrs	r3, r0, #16
 8001336:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800133a:	b280      	uxth	r0, r0
 800133c:	b2bc      	uxth	r4, r7
 800133e:	fbb2 fcfe 	udiv	ip, r2, lr
 8001342:	fb0e 221c 	mls	r2, lr, ip, r2
 8001346:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800134a:	fb04 f20c 	mul.w	r2, r4, ip
 800134e:	429a      	cmp	r2, r3
 8001350:	d907      	bls.n	8001362 <__udivmoddi4+0x11e>
 8001352:	18fb      	adds	r3, r7, r3
 8001354:	f10c 38ff 	add.w	r8, ip, #4294967295
 8001358:	d202      	bcs.n	8001360 <__udivmoddi4+0x11c>
 800135a:	429a      	cmp	r2, r3
 800135c:	f200 80e3 	bhi.w	8001526 <__udivmoddi4+0x2e2>
 8001360:	46c4      	mov	ip, r8
 8001362:	1a9b      	subs	r3, r3, r2
 8001364:	fbb3 f2fe 	udiv	r2, r3, lr
 8001368:	fb0e 3312 	mls	r3, lr, r2, r3
 800136c:	fb02 f404 	mul.w	r4, r2, r4
 8001370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8001374:	429c      	cmp	r4, r3
 8001376:	d907      	bls.n	8001388 <__udivmoddi4+0x144>
 8001378:	18fb      	adds	r3, r7, r3
 800137a:	f102 30ff 	add.w	r0, r2, #4294967295
 800137e:	d202      	bcs.n	8001386 <__udivmoddi4+0x142>
 8001380:	429c      	cmp	r4, r3
 8001382:	f200 80cd 	bhi.w	8001520 <__udivmoddi4+0x2dc>
 8001386:	4602      	mov	r2, r0
 8001388:	1b1b      	subs	r3, r3, r4
 800138a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800138e:	e7a5      	b.n	80012dc <__udivmoddi4+0x98>
 8001390:	f1c1 0620 	rsb	r6, r1, #32
 8001394:	408b      	lsls	r3, r1
 8001396:	fa22 f706 	lsr.w	r7, r2, r6
 800139a:	431f      	orrs	r7, r3
 800139c:	fa2e fa06 	lsr.w	sl, lr, r6
 80013a0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80013a4:	fbba f8f9 	udiv	r8, sl, r9
 80013a8:	fa0e fe01 	lsl.w	lr, lr, r1
 80013ac:	fa20 f306 	lsr.w	r3, r0, r6
 80013b0:	fb09 aa18 	mls	sl, r9, r8, sl
 80013b4:	fa1f fc87 	uxth.w	ip, r7
 80013b8:	ea43 030e 	orr.w	r3, r3, lr
 80013bc:	fa00 fe01 	lsl.w	lr, r0, r1
 80013c0:	fb08 f00c 	mul.w	r0, r8, ip
 80013c4:	0c1c      	lsrs	r4, r3, #16
 80013c6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80013ca:	42a0      	cmp	r0, r4
 80013cc:	fa02 f201 	lsl.w	r2, r2, r1
 80013d0:	d90a      	bls.n	80013e8 <__udivmoddi4+0x1a4>
 80013d2:	193c      	adds	r4, r7, r4
 80013d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80013d8:	f080 809e 	bcs.w	8001518 <__udivmoddi4+0x2d4>
 80013dc:	42a0      	cmp	r0, r4
 80013de:	f240 809b 	bls.w	8001518 <__udivmoddi4+0x2d4>
 80013e2:	f1a8 0802 	sub.w	r8, r8, #2
 80013e6:	443c      	add	r4, r7
 80013e8:	1a24      	subs	r4, r4, r0
 80013ea:	b298      	uxth	r0, r3
 80013ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80013f0:	fb09 4413 	mls	r4, r9, r3, r4
 80013f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80013f8:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80013fc:	45a4      	cmp	ip, r4
 80013fe:	d909      	bls.n	8001414 <__udivmoddi4+0x1d0>
 8001400:	193c      	adds	r4, r7, r4
 8001402:	f103 30ff 	add.w	r0, r3, #4294967295
 8001406:	f080 8085 	bcs.w	8001514 <__udivmoddi4+0x2d0>
 800140a:	45a4      	cmp	ip, r4
 800140c:	f240 8082 	bls.w	8001514 <__udivmoddi4+0x2d0>
 8001410:	3b02      	subs	r3, #2
 8001412:	443c      	add	r4, r7
 8001414:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001418:	eba4 040c 	sub.w	r4, r4, ip
 800141c:	fba0 8c02 	umull	r8, ip, r0, r2
 8001420:	4564      	cmp	r4, ip
 8001422:	4643      	mov	r3, r8
 8001424:	46e1      	mov	r9, ip
 8001426:	d364      	bcc.n	80014f2 <__udivmoddi4+0x2ae>
 8001428:	d061      	beq.n	80014ee <__udivmoddi4+0x2aa>
 800142a:	b15d      	cbz	r5, 8001444 <__udivmoddi4+0x200>
 800142c:	ebbe 0203 	subs.w	r2, lr, r3
 8001430:	eb64 0409 	sbc.w	r4, r4, r9
 8001434:	fa04 f606 	lsl.w	r6, r4, r6
 8001438:	fa22 f301 	lsr.w	r3, r2, r1
 800143c:	431e      	orrs	r6, r3
 800143e:	40cc      	lsrs	r4, r1
 8001440:	e9c5 6400 	strd	r6, r4, [r5]
 8001444:	2100      	movs	r1, #0
 8001446:	e74e      	b.n	80012e6 <__udivmoddi4+0xa2>
 8001448:	fbb1 fcf2 	udiv	ip, r1, r2
 800144c:	0c01      	lsrs	r1, r0, #16
 800144e:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8001452:	b280      	uxth	r0, r0
 8001454:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001458:	463b      	mov	r3, r7
 800145a:	fbb1 f1f7 	udiv	r1, r1, r7
 800145e:	4638      	mov	r0, r7
 8001460:	463c      	mov	r4, r7
 8001462:	46b8      	mov	r8, r7
 8001464:	46be      	mov	lr, r7
 8001466:	2620      	movs	r6, #32
 8001468:	eba2 0208 	sub.w	r2, r2, r8
 800146c:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001470:	e765      	b.n	800133e <__udivmoddi4+0xfa>
 8001472:	4601      	mov	r1, r0
 8001474:	e717      	b.n	80012a6 <__udivmoddi4+0x62>
 8001476:	4610      	mov	r0, r2
 8001478:	e72b      	b.n	80012d2 <__udivmoddi4+0x8e>
 800147a:	f1c6 0120 	rsb	r1, r6, #32
 800147e:	fa2e fc01 	lsr.w	ip, lr, r1
 8001482:	40b7      	lsls	r7, r6
 8001484:	fa0e fe06 	lsl.w	lr, lr, r6
 8001488:	fa20 f101 	lsr.w	r1, r0, r1
 800148c:	ea41 010e 	orr.w	r1, r1, lr
 8001490:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001494:	fbbc f8fe 	udiv	r8, ip, lr
 8001498:	b2bc      	uxth	r4, r7
 800149a:	fb0e cc18 	mls	ip, lr, r8, ip
 800149e:	fb08 f904 	mul.w	r9, r8, r4
 80014a2:	0c0a      	lsrs	r2, r1, #16
 80014a4:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80014a8:	40b0      	lsls	r0, r6
 80014aa:	4591      	cmp	r9, r2
 80014ac:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80014b0:	b280      	uxth	r0, r0
 80014b2:	d93e      	bls.n	8001532 <__udivmoddi4+0x2ee>
 80014b4:	18ba      	adds	r2, r7, r2
 80014b6:	f108 3cff 	add.w	ip, r8, #4294967295
 80014ba:	d201      	bcs.n	80014c0 <__udivmoddi4+0x27c>
 80014bc:	4591      	cmp	r9, r2
 80014be:	d81f      	bhi.n	8001500 <__udivmoddi4+0x2bc>
 80014c0:	eba2 0209 	sub.w	r2, r2, r9
 80014c4:	fbb2 f9fe 	udiv	r9, r2, lr
 80014c8:	fb09 f804 	mul.w	r8, r9, r4
 80014cc:	fb0e 2a19 	mls	sl, lr, r9, r2
 80014d0:	b28a      	uxth	r2, r1
 80014d2:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 80014d6:	4542      	cmp	r2, r8
 80014d8:	d229      	bcs.n	800152e <__udivmoddi4+0x2ea>
 80014da:	18ba      	adds	r2, r7, r2
 80014dc:	f109 31ff 	add.w	r1, r9, #4294967295
 80014e0:	d2c2      	bcs.n	8001468 <__udivmoddi4+0x224>
 80014e2:	4542      	cmp	r2, r8
 80014e4:	d2c0      	bcs.n	8001468 <__udivmoddi4+0x224>
 80014e6:	f1a9 0102 	sub.w	r1, r9, #2
 80014ea:	443a      	add	r2, r7
 80014ec:	e7bc      	b.n	8001468 <__udivmoddi4+0x224>
 80014ee:	45c6      	cmp	lr, r8
 80014f0:	d29b      	bcs.n	800142a <__udivmoddi4+0x1e6>
 80014f2:	ebb8 0302 	subs.w	r3, r8, r2
 80014f6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80014fa:	3801      	subs	r0, #1
 80014fc:	46e1      	mov	r9, ip
 80014fe:	e794      	b.n	800142a <__udivmoddi4+0x1e6>
 8001500:	eba7 0909 	sub.w	r9, r7, r9
 8001504:	444a      	add	r2, r9
 8001506:	fbb2 f9fe 	udiv	r9, r2, lr
 800150a:	f1a8 0c02 	sub.w	ip, r8, #2
 800150e:	fb09 f804 	mul.w	r8, r9, r4
 8001512:	e7db      	b.n	80014cc <__udivmoddi4+0x288>
 8001514:	4603      	mov	r3, r0
 8001516:	e77d      	b.n	8001414 <__udivmoddi4+0x1d0>
 8001518:	46d0      	mov	r8, sl
 800151a:	e765      	b.n	80013e8 <__udivmoddi4+0x1a4>
 800151c:	4608      	mov	r0, r1
 800151e:	e6fa      	b.n	8001316 <__udivmoddi4+0xd2>
 8001520:	443b      	add	r3, r7
 8001522:	3a02      	subs	r2, #2
 8001524:	e730      	b.n	8001388 <__udivmoddi4+0x144>
 8001526:	f1ac 0c02 	sub.w	ip, ip, #2
 800152a:	443b      	add	r3, r7
 800152c:	e719      	b.n	8001362 <__udivmoddi4+0x11e>
 800152e:	4649      	mov	r1, r9
 8001530:	e79a      	b.n	8001468 <__udivmoddi4+0x224>
 8001532:	eba2 0209 	sub.w	r2, r2, r9
 8001536:	fbb2 f9fe 	udiv	r9, r2, lr
 800153a:	46c4      	mov	ip, r8
 800153c:	fb09 f804 	mul.w	r8, r9, r4
 8001540:	e7c4      	b.n	80014cc <__udivmoddi4+0x288>
 8001542:	bf00      	nop

08001544 <__aeabi_idiv0>:
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop

08001548 <pin_to_index>:
} ButtonInfo_t;

static volatile ButtonInfo_t buttons[BTN_COUNT];

static int pin_to_index(uint16_t gpio_pin)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	80fb      	strh	r3, [r7, #6]
    switch (gpio_pin) {
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	2b08      	cmp	r3, #8
 8001556:	d006      	beq.n	8001566 <pin_to_index+0x1e>
 8001558:	2b08      	cmp	r3, #8
 800155a:	dc0a      	bgt.n	8001572 <pin_to_index+0x2a>
 800155c:	2b02      	cmp	r3, #2
 800155e:	d006      	beq.n	800156e <pin_to_index+0x26>
 8001560:	2b04      	cmp	r3, #4
 8001562:	d002      	beq.n	800156a <pin_to_index+0x22>
 8001564:	e005      	b.n	8001572 <pin_to_index+0x2a>
    case GPIO_PIN_3: return BTN_A;  // Изменено
 8001566:	2300      	movs	r3, #0
 8001568:	e005      	b.n	8001576 <pin_to_index+0x2e>
    case GPIO_PIN_2: return BTN_B;
 800156a:	2301      	movs	r3, #1
 800156c:	e003      	b.n	8001576 <pin_to_index+0x2e>
    case GPIO_PIN_1: return BTN_C;  // Изменено
 800156e:	2302      	movs	r3, #2
 8001570:	e001      	b.n	8001576 <pin_to_index+0x2e>
    default: return -1;
 8001572:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8001576:	4618      	mov	r0, r3
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr

08001580 <Buttons_GetState>:

ButtonState_t Buttons_GetState(ButtonId_t id)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]
    uint16_t pin;
    switch (id) {
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	2b02      	cmp	r3, #2
 800158e:	d00c      	beq.n	80015aa <Buttons_GetState+0x2a>
 8001590:	2b02      	cmp	r3, #2
 8001592:	dc0d      	bgt.n	80015b0 <Buttons_GetState+0x30>
 8001594:	2b00      	cmp	r3, #0
 8001596:	d002      	beq.n	800159e <Buttons_GetState+0x1e>
 8001598:	2b01      	cmp	r3, #1
 800159a:	d003      	beq.n	80015a4 <Buttons_GetState+0x24>
 800159c:	e008      	b.n	80015b0 <Buttons_GetState+0x30>
    case BTN_A: pin = BTN_A_PIN; break;  // Теперь это правая кнопка
 800159e:	2308      	movs	r3, #8
 80015a0:	81fb      	strh	r3, [r7, #14]
 80015a2:	e007      	b.n	80015b4 <Buttons_GetState+0x34>
    case BTN_B: pin = BTN_B_PIN; break;  // Средняя
 80015a4:	2304      	movs	r3, #4
 80015a6:	81fb      	strh	r3, [r7, #14]
 80015a8:	e004      	b.n	80015b4 <Buttons_GetState+0x34>
    case BTN_C: pin = BTN_C_PIN; break;  // Теперь это левая кнопка
 80015aa:	2302      	movs	r3, #2
 80015ac:	81fb      	strh	r3, [r7, #14]
 80015ae:	e001      	b.n	80015b4 <Buttons_GetState+0x34>
    default: return BUTTON_RELEASED;
 80015b0:	2300      	movs	r3, #0
 80015b2:	e00a      	b.n	80015ca <Buttons_GetState+0x4a>
    }
    return (HAL_GPIO_ReadPin(BTN_GPIO_PORT, pin) == GPIO_PIN_SET) ?
 80015b4:	89fb      	ldrh	r3, [r7, #14]
 80015b6:	4619      	mov	r1, r3
 80015b8:	4806      	ldr	r0, [pc, #24]	@ (80015d4 <Buttons_GetState+0x54>)
 80015ba:	f006 fb45 	bl	8007c48 <HAL_GPIO_ReadPin>
 80015be:	4603      	mov	r3, r0
            BUTTON_PRESSED : BUTTON_RELEASED;
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	bf0c      	ite	eq
 80015c4:	2301      	moveq	r3, #1
 80015c6:	2300      	movne	r3, #0
 80015c8:	b2db      	uxtb	r3, r3
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40020c00 	.word	0x40020c00

080015d8 <Buttons_Init>:

void Buttons_SetDebounceMs(uint32_t ms) { debounce_ms = ms; }
void Buttons_SetLongPressMs(uint32_t ms) { longpress_ms = ms; }

void Buttons_Init(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
    for (int i = 0; i < BTN_COUNT; ++i) {
 80015de:	2300      	movs	r3, #0
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	e03d      	b.n	8001660 <Buttons_Init+0x88>
        buttons[i].last_tick = 0;
 80015e4:	4923      	ldr	r1, [pc, #140]	@ (8001674 <Buttons_Init+0x9c>)
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	4613      	mov	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	440b      	add	r3, r1
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
        buttons[i].press_start = 0;
 80015f6:	491f      	ldr	r1, [pc, #124]	@ (8001674 <Buttons_Init+0x9c>)
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	4613      	mov	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4413      	add	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	440b      	add	r3, r1
 8001604:	3304      	adds	r3, #4
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
        buttons[i].state = BUTTON_RELEASED;
 800160a:	491a      	ldr	r1, [pc, #104]	@ (8001674 <Buttons_Init+0x9c>)
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	4613      	mov	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	440b      	add	r3, r1
 8001618:	3308      	adds	r3, #8
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]
        buttons[i].callback = NULL;
 800161e:	4915      	ldr	r1, [pc, #84]	@ (8001674 <Buttons_Init+0x9c>)
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	4613      	mov	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4413      	add	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	440b      	add	r3, r1
 800162c:	330c      	adds	r3, #12
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
        buttons[i].long30_reported = 0;
 8001632:	4910      	ldr	r1, [pc, #64]	@ (8001674 <Buttons_Init+0x9c>)
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	440b      	add	r3, r1
 8001640:	3310      	adds	r3, #16
 8001642:	2200      	movs	r2, #0
 8001644:	701a      	strb	r2, [r3, #0]
        buttons[i].long60_reported = 0;
 8001646:	490b      	ldr	r1, [pc, #44]	@ (8001674 <Buttons_Init+0x9c>)
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	4613      	mov	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	440b      	add	r3, r1
 8001654:	3311      	adds	r3, #17
 8001656:	2200      	movs	r2, #0
 8001658:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < BTN_COUNT; ++i) {
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	3301      	adds	r3, #1
 800165e:	607b      	str	r3, [r7, #4]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b02      	cmp	r3, #2
 8001664:	ddbe      	ble.n	80015e4 <Buttons_Init+0xc>
    }
}
 8001666:	bf00      	nop
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	20000304 	.word	0x20000304

08001678 <Buttons_EXTI_Handle>:
        buttons[id].callback = callback;
    }
}

void Buttons_EXTI_Handle(uint16_t GPIO_Pin)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	80fb      	strh	r3, [r7, #6]
    int idx = pin_to_index(GPIO_Pin);
 8001682:	88fb      	ldrh	r3, [r7, #6]
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff5f 	bl	8001548 <pin_to_index>
 800168a:	6178      	str	r0, [r7, #20]
    if (idx < 0) return;
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	2b00      	cmp	r3, #0
 8001690:	f2c0 809f 	blt.w	80017d2 <Buttons_EXTI_Handle+0x15a>

    uint32_t now = HAL_GetTick();
 8001694:	f003 fce4 	bl	8005060 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

    if ((now - buttons[idx].last_tick) < debounce_ms) return;
 800169a:	4951      	ldr	r1, [pc, #324]	@ (80017e0 <Buttons_EXTI_Handle+0x168>)
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	4613      	mov	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	440b      	add	r3, r1
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	1ad2      	subs	r2, r2, r3
 80016ae:	4b4d      	ldr	r3, [pc, #308]	@ (80017e4 <Buttons_EXTI_Handle+0x16c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	f0c0 808f 	bcc.w	80017d6 <Buttons_EXTI_Handle+0x15e>
    buttons[idx].last_tick = now;
 80016b8:	4949      	ldr	r1, [pc, #292]	@ (80017e0 <Buttons_EXTI_Handle+0x168>)
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	4613      	mov	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	440b      	add	r3, r1
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	601a      	str	r2, [r3, #0]

    ButtonState_t cur = Buttons_GetState((ButtonId_t)idx);
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff ff56 	bl	8001580 <Buttons_GetState>
 80016d4:	4603      	mov	r3, r0
 80016d6:	73fb      	strb	r3, [r7, #15]

    if (cur != buttons[idx].state) {
 80016d8:	4941      	ldr	r1, [pc, #260]	@ (80017e0 <Buttons_EXTI_Handle+0x168>)
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	4613      	mov	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4413      	add	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	440b      	add	r3, r1
 80016e6:	3308      	adds	r3, #8
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	7bfa      	ldrb	r2, [r7, #15]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d072      	beq.n	80017d8 <Buttons_EXTI_Handle+0x160>
        buttons[idx].state = cur;
 80016f2:	493b      	ldr	r1, [pc, #236]	@ (80017e0 <Buttons_EXTI_Handle+0x168>)
 80016f4:	697a      	ldr	r2, [r7, #20]
 80016f6:	4613      	mov	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	440b      	add	r3, r1
 8001700:	3308      	adds	r3, #8
 8001702:	7bfa      	ldrb	r2, [r7, #15]
 8001704:	701a      	strb	r2, [r3, #0]

        if (cur == BUTTON_PRESSED) {
 8001706:	7bfb      	ldrb	r3, [r7, #15]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d11e      	bne.n	800174a <Buttons_EXTI_Handle+0xd2>
            buttons[idx].press_start = now;
 800170c:	4934      	ldr	r1, [pc, #208]	@ (80017e0 <Buttons_EXTI_Handle+0x168>)
 800170e:	697a      	ldr	r2, [r7, #20]
 8001710:	4613      	mov	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	440b      	add	r3, r1
 800171a:	3304      	adds	r3, #4
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	601a      	str	r2, [r3, #0]
            buttons[idx].long30_reported = 0;
 8001720:	492f      	ldr	r1, [pc, #188]	@ (80017e0 <Buttons_EXTI_Handle+0x168>)
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	4613      	mov	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	440b      	add	r3, r1
 800172e:	3310      	adds	r3, #16
 8001730:	2200      	movs	r2, #0
 8001732:	701a      	strb	r2, [r3, #0]
            buttons[idx].long60_reported = 0;
 8001734:	492a      	ldr	r1, [pc, #168]	@ (80017e0 <Buttons_EXTI_Handle+0x168>)
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	440b      	add	r3, r1
 8001742:	3311      	adds	r3, #17
 8001744:	2200      	movs	r2, #0
 8001746:	701a      	strb	r2, [r3, #0]
 8001748:	e046      	b.n	80017d8 <Buttons_EXTI_Handle+0x160>
        } else {
            /* Отпускание */
            uint32_t dur = now - buttons[idx].press_start;
 800174a:	4925      	ldr	r1, [pc, #148]	@ (80017e0 <Buttons_EXTI_Handle+0x168>)
 800174c:	697a      	ldr	r2, [r7, #20]
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	440b      	add	r3, r1
 8001758:	3304      	adds	r3, #4
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	60bb      	str	r3, [r7, #8]
            if (buttons[idx].callback) {
 8001762:	491f      	ldr	r1, [pc, #124]	@ (80017e0 <Buttons_EXTI_Handle+0x168>)
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	4613      	mov	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4413      	add	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	440b      	add	r3, r1
 8001770:	330c      	adds	r3, #12
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d02f      	beq.n	80017d8 <Buttons_EXTI_Handle+0x160>
                if (dur >= longpress_ms && dur < LONG30_MS) {
 8001778:	4b1b      	ldr	r3, [pc, #108]	@ (80017e8 <Buttons_EXTI_Handle+0x170>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68ba      	ldr	r2, [r7, #8]
 800177e:	429a      	cmp	r2, r3
 8001780:	d313      	bcc.n	80017aa <Buttons_EXTI_Handle+0x132>
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	f247 522f 	movw	r2, #29999	@ 0x752f
 8001788:	4293      	cmp	r3, r2
 800178a:	d80e      	bhi.n	80017aa <Buttons_EXTI_Handle+0x132>
                    buttons[idx].callback((ButtonId_t)idx, BTN_EVENT_LONG);
 800178c:	4914      	ldr	r1, [pc, #80]	@ (80017e0 <Buttons_EXTI_Handle+0x168>)
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	4613      	mov	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	440b      	add	r3, r1
 800179a:	330c      	adds	r3, #12
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	b2d2      	uxtb	r2, r2
 80017a2:	2101      	movs	r1, #1
 80017a4:	4610      	mov	r0, r2
 80017a6:	4798      	blx	r3
 80017a8:	e016      	b.n	80017d8 <Buttons_EXTI_Handle+0x160>
                } else if (dur < longpress_ms) {
 80017aa:	4b0f      	ldr	r3, [pc, #60]	@ (80017e8 <Buttons_EXTI_Handle+0x170>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d211      	bcs.n	80017d8 <Buttons_EXTI_Handle+0x160>
                    buttons[idx].callback((ButtonId_t)idx, BTN_EVENT_SHORT);
 80017b4:	490a      	ldr	r1, [pc, #40]	@ (80017e0 <Buttons_EXTI_Handle+0x168>)
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	4613      	mov	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	440b      	add	r3, r1
 80017c2:	330c      	adds	r3, #12
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	697a      	ldr	r2, [r7, #20]
 80017c8:	b2d2      	uxtb	r2, r2
 80017ca:	2100      	movs	r1, #0
 80017cc:	4610      	mov	r0, r2
 80017ce:	4798      	blx	r3
 80017d0:	e002      	b.n	80017d8 <Buttons_EXTI_Handle+0x160>
    if (idx < 0) return;
 80017d2:	bf00      	nop
 80017d4:	e000      	b.n	80017d8 <Buttons_EXTI_Handle+0x160>
    if ((now - buttons[idx].last_tick) < debounce_ms) return;
 80017d6:	bf00      	nop
                }
                /* Если удержали >30 или >60 — событие уже сработало в Task */
            }
        }
    }
}
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000304 	.word	0x20000304
 80017e4:	20000000 	.word	0x20000000
 80017e8:	20000004 	.word	0x20000004

080017ec <HAL_GPIO_EXTI_Callback>:
    }
}

/* вызывать из stm32f2xx_it.c */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	80fb      	strh	r3, [r7, #6]
    Buttons_EXTI_Handle(GPIO_Pin);
 80017f6:	88fb      	ldrh	r3, [r7, #6]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff3d 	bl	8001678 <Buttons_EXTI_Handle>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800180c:	f3bf 8f4f 	dsb	sy
}
 8001810:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001812:	4b06      	ldr	r3, [pc, #24]	@ (800182c <__NVIC_SystemReset+0x24>)
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800181a:	4904      	ldr	r1, [pc, #16]	@ (800182c <__NVIC_SystemReset+0x24>)
 800181c:	4b04      	ldr	r3, [pc, #16]	@ (8001830 <__NVIC_SystemReset+0x28>)
 800181e:	4313      	orrs	r3, r2
 8001820:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001822:	f3bf 8f4f 	dsb	sy
}
 8001826:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001828:	bf00      	nop
 800182a:	e7fd      	b.n	8001828 <__NVIC_SystemReset+0x20>
 800182c:	e000ed00 	.word	0xe000ed00
 8001830:	05fa0004 	.word	0x05fa0004

08001834 <OLED_ShowCurrentPage>:


// Добавим глобальную переменную для текущей страницы
int current_page = 0; // 0 = AB page, 1 = NETINFO page

void OLED_ShowCurrentPage(void) {
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 8001838:	2000      	movs	r0, #0
 800183a:	f003 f893 	bl	8004964 <ssd1306_Fill>

    switch (current_page) {
 800183e:	4b0d      	ldr	r3, [pc, #52]	@ (8001874 <OLED_ShowCurrentPage+0x40>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d002      	beq.n	800184c <OLED_ShowCurrentPage+0x18>
 8001846:	2b01      	cmp	r3, #1
 8001848:	d003      	beq.n	8001852 <OLED_ShowCurrentPage+0x1e>
 800184a:	e008      	b.n	800185e <OLED_ShowCurrentPage+0x2a>
        case 0:
            OLED_DrawABPage();
 800184c:	f001 fe4e 	bl	80034ec <OLED_DrawABPage>
            break;
 8001850:	e00b      	b.n	800186a <OLED_ShowCurrentPage+0x36>
        case 1:
            OLED_DrawNetInfo(&gnetif, 0, 0);
 8001852:	2200      	movs	r2, #0
 8001854:	2100      	movs	r1, #0
 8001856:	4808      	ldr	r0, [pc, #32]	@ (8001878 <OLED_ShowCurrentPage+0x44>)
 8001858:	f002 f83e 	bl	80038d8 <OLED_DrawNetInfo>
            break;
 800185c:	e005      	b.n	800186a <OLED_ShowCurrentPage+0x36>
        default:
            current_page = 0;
 800185e:	4b05      	ldr	r3, [pc, #20]	@ (8001874 <OLED_ShowCurrentPage+0x40>)
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
            OLED_DrawABPage();
 8001864:	f001 fe42 	bl	80034ec <OLED_DrawABPage>
            break;
 8001868:	bf00      	nop
    }

    ssd1306_UpdateScreen();
 800186a:	f003 f893 	bl	8004994 <ssd1306_UpdateScreen>
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	2000034c 	.word	0x2000034c
 8001878:	20006f20 	.word	0x20006f20

0800187c <Buttons_Process>:

void Buttons_Process(void) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b088      	sub	sp, #32
 8001880:	af00      	add	r7, sp, #0
    static uint32_t btn1_last_action = 0;
    static uint32_t btn3_last_action = 0;
    static uint8_t btn1_held = 0;
    static uint8_t btn3_held = 0;

    uint32_t now = HAL_GetTick();
 8001882:	f003 fbed 	bl	8005060 <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

    // ---- Если меню Settings активно ----
    if (settings_active) {
 8001888:	4b95      	ldr	r3, [pc, #596]	@ (8001ae0 <Buttons_Process+0x264>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 80c5 	beq.w	8001a1c <Buttons_Process+0x1a0>
        int any_pressed = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]

        // Обработка кнопки 3 (ПРАВАЯ кнопка - ВВЕРХ)
        if (HAL_GPIO_ReadPin(BTN_PORT, BTN3_PIN) == GPIO_PIN_RESET) {
 8001896:	2108      	movs	r1, #8
 8001898:	4892      	ldr	r0, [pc, #584]	@ (8001ae4 <Buttons_Process+0x268>)
 800189a:	f006 f9d5 	bl	8007c48 <HAL_GPIO_ReadPin>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d13c      	bne.n	800191e <Buttons_Process+0xa2>
            if (!btn3_held) {
 80018a4:	4b90      	ldr	r3, [pc, #576]	@ (8001ae8 <Buttons_Process+0x26c>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d10a      	bne.n	80018c2 <Buttons_Process+0x46>
                // Первое нажатие
                btn3_held = 1;
 80018ac:	4b8e      	ldr	r3, [pc, #568]	@ (8001ae8 <Buttons_Process+0x26c>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	701a      	strb	r2, [r3, #0]
                btn3_last_action = now;
 80018b2:	4a8e      	ldr	r2, [pc, #568]	@ (8001aec <Buttons_Process+0x270>)
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	6013      	str	r3, [r2, #0]
                OLED_Settings_MoveUp();
 80018b8:	f002 fd4c 	bl	8004354 <OLED_Settings_MoveUp>
                any_pressed = 1;
 80018bc:	2301      	movs	r3, #1
 80018be:	61fb      	str	r3, [r7, #28]
 80018c0:	e030      	b.n	8001924 <Buttons_Process+0xa8>
            } else {
                // Удержание - быстрое изменение с ускорением
                uint32_t hold_time = now - btn3_last_action;
 80018c2:	4b8a      	ldr	r3, [pc, #552]	@ (8001aec <Buttons_Process+0x270>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	607b      	str	r3, [r7, #4]
                uint32_t delay_ms;

                if (hold_time > 5000) {
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d902      	bls.n	80018dc <Buttons_Process+0x60>
                    delay_ms = 20;
 80018d6:	2314      	movs	r3, #20
 80018d8:	61bb      	str	r3, [r7, #24]
 80018da:	e011      	b.n	8001900 <Buttons_Process+0x84>
                } else if (hold_time > 3000) {
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d902      	bls.n	80018ec <Buttons_Process+0x70>
                    delay_ms = 50;
 80018e6:	2332      	movs	r3, #50	@ 0x32
 80018e8:	61bb      	str	r3, [r7, #24]
 80018ea:	e009      	b.n	8001900 <Buttons_Process+0x84>
                } else if (hold_time > 1000) {
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80018f2:	d902      	bls.n	80018fa <Buttons_Process+0x7e>
                    delay_ms = 100;
 80018f4:	2364      	movs	r3, #100	@ 0x64
 80018f6:	61bb      	str	r3, [r7, #24]
 80018f8:	e002      	b.n	8001900 <Buttons_Process+0x84>
                } else {
                    delay_ms = 300;
 80018fa:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80018fe:	61bb      	str	r3, [r7, #24]
                }

                if (now - btn3_last_action > delay_ms) {
 8001900:	4b7a      	ldr	r3, [pc, #488]	@ (8001aec <Buttons_Process+0x270>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	429a      	cmp	r2, r3
 800190c:	d20a      	bcs.n	8001924 <Buttons_Process+0xa8>
                    OLED_Settings_MoveUp();
 800190e:	f002 fd21 	bl	8004354 <OLED_Settings_MoveUp>
                    btn3_last_action = now;
 8001912:	4a76      	ldr	r2, [pc, #472]	@ (8001aec <Buttons_Process+0x270>)
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	6013      	str	r3, [r2, #0]
                    any_pressed = 1;
 8001918:	2301      	movs	r3, #1
 800191a:	61fb      	str	r3, [r7, #28]
 800191c:	e002      	b.n	8001924 <Buttons_Process+0xa8>
                }
            }
        } else {
            btn3_held = 0;
 800191e:	4b72      	ldr	r3, [pc, #456]	@ (8001ae8 <Buttons_Process+0x26c>)
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
        }

        // Обработка кнопки 1 (ЛЕВАЯ кнопка - ВНИЗ)
        if (HAL_GPIO_ReadPin(BTN_PORT, BTN1_PIN) == GPIO_PIN_RESET) {
 8001924:	2102      	movs	r1, #2
 8001926:	486f      	ldr	r0, [pc, #444]	@ (8001ae4 <Buttons_Process+0x268>)
 8001928:	f006 f98e 	bl	8007c48 <HAL_GPIO_ReadPin>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d13c      	bne.n	80019ac <Buttons_Process+0x130>
            if (!btn1_held) {
 8001932:	4b6f      	ldr	r3, [pc, #444]	@ (8001af0 <Buttons_Process+0x274>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10a      	bne.n	8001950 <Buttons_Process+0xd4>
                // Первое нажатие
                btn1_held = 1;
 800193a:	4b6d      	ldr	r3, [pc, #436]	@ (8001af0 <Buttons_Process+0x274>)
 800193c:	2201      	movs	r2, #1
 800193e:	701a      	strb	r2, [r3, #0]
                btn1_last_action = now;
 8001940:	4a6c      	ldr	r2, [pc, #432]	@ (8001af4 <Buttons_Process+0x278>)
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	6013      	str	r3, [r2, #0]
                OLED_Settings_MoveDown();
 8001946:	f002 fd3b 	bl	80043c0 <OLED_Settings_MoveDown>
                any_pressed = 1;
 800194a:	2301      	movs	r3, #1
 800194c:	61fb      	str	r3, [r7, #28]
 800194e:	e030      	b.n	80019b2 <Buttons_Process+0x136>
            } else {
                // Удержание - быстрое изменение с ускорением
                uint32_t hold_time = now - btn1_last_action;
 8001950:	4b68      	ldr	r3, [pc, #416]	@ (8001af4 <Buttons_Process+0x278>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	603b      	str	r3, [r7, #0]
                uint32_t delay_ms;

                if (hold_time > 5000) {
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001960:	4293      	cmp	r3, r2
 8001962:	d902      	bls.n	800196a <Buttons_Process+0xee>
                    delay_ms = 20;
 8001964:	2314      	movs	r3, #20
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	e011      	b.n	800198e <Buttons_Process+0x112>
                } else if (hold_time > 3000) {
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001970:	4293      	cmp	r3, r2
 8001972:	d902      	bls.n	800197a <Buttons_Process+0xfe>
                    delay_ms = 50;
 8001974:	2332      	movs	r3, #50	@ 0x32
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	e009      	b.n	800198e <Buttons_Process+0x112>
                } else if (hold_time > 1000) {
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001980:	d902      	bls.n	8001988 <Buttons_Process+0x10c>
                    delay_ms = 100;
 8001982:	2364      	movs	r3, #100	@ 0x64
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	e002      	b.n	800198e <Buttons_Process+0x112>
                } else {
                    delay_ms = 300;
 8001988:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800198c:	617b      	str	r3, [r7, #20]
                }

                if (now - btn1_last_action > delay_ms) {
 800198e:	4b59      	ldr	r3, [pc, #356]	@ (8001af4 <Buttons_Process+0x278>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	429a      	cmp	r2, r3
 800199a:	d20a      	bcs.n	80019b2 <Buttons_Process+0x136>
                    OLED_Settings_MoveDown();
 800199c:	f002 fd10 	bl	80043c0 <OLED_Settings_MoveDown>
                    btn1_last_action = now;
 80019a0:	4a54      	ldr	r2, [pc, #336]	@ (8001af4 <Buttons_Process+0x278>)
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	6013      	str	r3, [r2, #0]
                    any_pressed = 1;
 80019a6:	2301      	movs	r3, #1
 80019a8:	61fb      	str	r3, [r7, #28]
 80019aa:	e002      	b.n	80019b2 <Buttons_Process+0x136>
                }
            }
        } else {
            btn1_held = 0;
 80019ac:	4b50      	ldr	r3, [pc, #320]	@ (8001af0 <Buttons_Process+0x274>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]
        }

        // Обработка кнопки 2 (Выбор)
        if (HAL_GPIO_ReadPin(BTN_PORT, BTN2_PIN) == GPIO_PIN_RESET) {
 80019b2:	2104      	movs	r1, #4
 80019b4:	484b      	ldr	r0, [pc, #300]	@ (8001ae4 <Buttons_Process+0x268>)
 80019b6:	f006 f947 	bl	8007c48 <HAL_GPIO_ReadPin>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d118      	bne.n	80019f2 <Buttons_Process+0x176>
            HAL_Delay(50);
 80019c0:	2032      	movs	r0, #50	@ 0x32
 80019c2:	f003 fb57 	bl	8005074 <HAL_Delay>
            if (HAL_GPIO_ReadPin(BTN_PORT, BTN2_PIN) == GPIO_PIN_RESET) {
 80019c6:	2104      	movs	r1, #4
 80019c8:	4846      	ldr	r0, [pc, #280]	@ (8001ae4 <Buttons_Process+0x268>)
 80019ca:	f006 f93d 	bl	8007c48 <HAL_GPIO_ReadPin>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d10e      	bne.n	80019f2 <Buttons_Process+0x176>
                OLED_Settings_Select();
 80019d4:	f002 fd2c 	bl	8004430 <OLED_Settings_Select>
                // Ждем отпускания кнопки
                while (HAL_GPIO_ReadPin(BTN_PORT, BTN2_PIN) == GPIO_PIN_RESET) {
 80019d8:	e002      	b.n	80019e0 <Buttons_Process+0x164>
                    HAL_Delay(10);
 80019da:	200a      	movs	r0, #10
 80019dc:	f003 fb4a 	bl	8005074 <HAL_Delay>
                while (HAL_GPIO_ReadPin(BTN_PORT, BTN2_PIN) == GPIO_PIN_RESET) {
 80019e0:	2104      	movs	r1, #4
 80019e2:	4840      	ldr	r0, [pc, #256]	@ (8001ae4 <Buttons_Process+0x268>)
 80019e4:	f006 f930 	bl	8007c48 <HAL_GPIO_ReadPin>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0f5      	beq.n	80019da <Buttons_Process+0x15e>
                }
                any_pressed = 1;
 80019ee:	2301      	movs	r3, #1
 80019f0:	61fb      	str	r3, [r7, #28]
            }
        }

        // Обновляем таймер последней активности
        if (any_pressed) settings_last_activity = now;
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d002      	beq.n	80019fe <Buttons_Process+0x182>
 80019f8:	4a3f      	ldr	r2, [pc, #252]	@ (8001af8 <Buttons_Process+0x27c>)
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	6013      	str	r3, [r2, #0]

        // Если прошло 10 секунд без действий → выход из настроек
        if ((now - settings_last_activity) >= 10000) {
 80019fe:	4b3e      	ldr	r3, [pc, #248]	@ (8001af8 <Buttons_Process+0x27c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	f240 80c9 	bls.w	8001ba2 <Buttons_Process+0x326>
            settings_active = 0;
 8001a10:	4b33      	ldr	r3, [pc, #204]	@ (8001ae0 <Buttons_Process+0x264>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	701a      	strb	r2, [r3, #0]
            OLED_DrawABPage();
 8001a16:	f001 fd69 	bl	80034ec <OLED_DrawABPage>
        }

        return;
 8001a1a:	e0c2      	b.n	8001ba2 <Buttons_Process+0x326>
    }

    // ---- Режим обычного переключения страниц ----
    if (HAL_GPIO_ReadPin(BTN_PORT, BTN3_PIN) == GPIO_PIN_RESET) {  // Правая кнопка = предыдущая страница
 8001a1c:	2108      	movs	r1, #8
 8001a1e:	4831      	ldr	r0, [pc, #196]	@ (8001ae4 <Buttons_Process+0x268>)
 8001a20:	f006 f912 	bl	8007c48 <HAL_GPIO_ReadPin>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d11f      	bne.n	8001a6a <Buttons_Process+0x1ee>
        HAL_Delay(200);
 8001a2a:	20c8      	movs	r0, #200	@ 0xc8
 8001a2c:	f003 fb22 	bl	8005074 <HAL_Delay>
        if (HAL_GPIO_ReadPin(BTN_PORT, BTN3_PIN) == GPIO_PIN_RESET) {
 8001a30:	2108      	movs	r1, #8
 8001a32:	482c      	ldr	r0, [pc, #176]	@ (8001ae4 <Buttons_Process+0x268>)
 8001a34:	f006 f908 	bl	8007c48 <HAL_GPIO_ReadPin>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d115      	bne.n	8001a6a <Buttons_Process+0x1ee>
            current_page--;
 8001a3e:	4b2f      	ldr	r3, [pc, #188]	@ (8001afc <Buttons_Process+0x280>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	4a2d      	ldr	r2, [pc, #180]	@ (8001afc <Buttons_Process+0x280>)
 8001a46:	6013      	str	r3, [r2, #0]
            if (current_page < 0) current_page = 1;
 8001a48:	4b2c      	ldr	r3, [pc, #176]	@ (8001afc <Buttons_Process+0x280>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	da02      	bge.n	8001a56 <Buttons_Process+0x1da>
 8001a50:	4b2a      	ldr	r3, [pc, #168]	@ (8001afc <Buttons_Process+0x280>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	601a      	str	r2, [r3, #0]
            OLED_ShowCurrentPage();
 8001a56:	f7ff feed 	bl	8001834 <OLED_ShowCurrentPage>
            while (HAL_GPIO_ReadPin(BTN_PORT, BTN3_PIN) == GPIO_PIN_RESET);
 8001a5a:	bf00      	nop
 8001a5c:	2108      	movs	r1, #8
 8001a5e:	4821      	ldr	r0, [pc, #132]	@ (8001ae4 <Buttons_Process+0x268>)
 8001a60:	f006 f8f2 	bl	8007c48 <HAL_GPIO_ReadPin>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0f8      	beq.n	8001a5c <Buttons_Process+0x1e0>
        }
    }

    if (HAL_GPIO_ReadPin(BTN_PORT, BTN1_PIN) == GPIO_PIN_RESET) {  // Левая кнопка = следующая страница
 8001a6a:	2102      	movs	r1, #2
 8001a6c:	481d      	ldr	r0, [pc, #116]	@ (8001ae4 <Buttons_Process+0x268>)
 8001a6e:	f006 f8eb 	bl	8007c48 <HAL_GPIO_ReadPin>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d11f      	bne.n	8001ab8 <Buttons_Process+0x23c>
        HAL_Delay(200);
 8001a78:	20c8      	movs	r0, #200	@ 0xc8
 8001a7a:	f003 fafb 	bl	8005074 <HAL_Delay>
        if (HAL_GPIO_ReadPin(BTN_PORT, BTN1_PIN) == GPIO_PIN_RESET) {
 8001a7e:	2102      	movs	r1, #2
 8001a80:	4818      	ldr	r0, [pc, #96]	@ (8001ae4 <Buttons_Process+0x268>)
 8001a82:	f006 f8e1 	bl	8007c48 <HAL_GPIO_ReadPin>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d115      	bne.n	8001ab8 <Buttons_Process+0x23c>
            current_page++;
 8001a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001afc <Buttons_Process+0x280>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	3301      	adds	r3, #1
 8001a92:	4a1a      	ldr	r2, [pc, #104]	@ (8001afc <Buttons_Process+0x280>)
 8001a94:	6013      	str	r3, [r2, #0]
            if (current_page > 1) current_page = 0;
 8001a96:	4b19      	ldr	r3, [pc, #100]	@ (8001afc <Buttons_Process+0x280>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	dd02      	ble.n	8001aa4 <Buttons_Process+0x228>
 8001a9e:	4b17      	ldr	r3, [pc, #92]	@ (8001afc <Buttons_Process+0x280>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
            OLED_ShowCurrentPage();
 8001aa4:	f7ff fec6 	bl	8001834 <OLED_ShowCurrentPage>
            while (HAL_GPIO_ReadPin(BTN_PORT, BTN1_PIN) == GPIO_PIN_RESET);
 8001aa8:	bf00      	nop
 8001aaa:	2102      	movs	r1, #2
 8001aac:	480d      	ldr	r0, [pc, #52]	@ (8001ae4 <Buttons_Process+0x268>)
 8001aae:	f006 f8cb 	bl	8007c48 <HAL_GPIO_ReadPin>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0f8      	beq.n	8001aaa <Buttons_Process+0x22e>
        }
    }

    // ---- Кнопка 2 (Settings / RESET) ----
    if (HAL_GPIO_ReadPin(BTN_PORT, BTN2_PIN) == GPIO_PIN_RESET) {
 8001ab8:	2104      	movs	r1, #4
 8001aba:	480a      	ldr	r0, [pc, #40]	@ (8001ae4 <Buttons_Process+0x268>)
 8001abc:	f006 f8c4 	bl	8007c48 <HAL_GPIO_ReadPin>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d146      	bne.n	8001b54 <Buttons_Process+0x2d8>
        if (!btn2_held) {
 8001ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b00 <Buttons_Process+0x284>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d11c      	bne.n	8001b08 <Buttons_Process+0x28c>
            btn2_held = 1;
 8001ace:	4b0c      	ldr	r3, [pc, #48]	@ (8001b00 <Buttons_Process+0x284>)
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	701a      	strb	r2, [r3, #0]
            btn2_press_time = HAL_GetTick();
 8001ad4:	f003 fac4 	bl	8005060 <HAL_GetTick>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	4a0a      	ldr	r2, [pc, #40]	@ (8001b04 <Buttons_Process+0x288>)
 8001adc:	6013      	str	r3, [r2, #0]
 8001ade:	e061      	b.n	8001ba4 <Buttons_Process+0x328>
 8001ae0:	20000340 	.word	0x20000340
 8001ae4:	40020c00 	.word	0x40020c00
 8001ae8:	20000350 	.word	0x20000350
 8001aec:	20000354 	.word	0x20000354
 8001af0:	20000358 	.word	0x20000358
 8001af4:	2000035c 	.word	0x2000035c
 8001af8:	20000360 	.word	0x20000360
 8001afc:	2000034c 	.word	0x2000034c
 8001b00:	20000348 	.word	0x20000348
 8001b04:	20000344 	.word	0x20000344
        } else {
            uint32_t held_time = (HAL_GetTick() - btn2_press_time) / 1000;
 8001b08:	f003 faaa 	bl	8005060 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	4b27      	ldr	r3, [pc, #156]	@ (8001bac <Buttons_Process+0x330>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	4a26      	ldr	r2, [pc, #152]	@ (8001bb0 <Buttons_Process+0x334>)
 8001b16:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1a:	099b      	lsrs	r3, r3, #6
 8001b1c:	60bb      	str	r3, [r7, #8]

            if (held_time >= 60) {
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	2b3b      	cmp	r3, #59	@ 0x3b
 8001b22:	d912      	bls.n	8001b4a <Buttons_Process+0x2ce>
                // HARD RESET через IWDG
                IWDG->KR = 0x5555;
 8001b24:	4b23      	ldr	r3, [pc, #140]	@ (8001bb4 <Buttons_Process+0x338>)
 8001b26:	f245 5255 	movw	r2, #21845	@ 0x5555
 8001b2a:	601a      	str	r2, [r3, #0]
                IWDG->PR = 0;
 8001b2c:	4b21      	ldr	r3, [pc, #132]	@ (8001bb4 <Buttons_Process+0x338>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	605a      	str	r2, [r3, #4]
                IWDG->RLR = 10;
 8001b32:	4b20      	ldr	r3, [pc, #128]	@ (8001bb4 <Buttons_Process+0x338>)
 8001b34:	220a      	movs	r2, #10
 8001b36:	609a      	str	r2, [r3, #8]
                IWDG->KR = 0xAAAA;
 8001b38:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb4 <Buttons_Process+0x338>)
 8001b3a:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8001b3e:	601a      	str	r2, [r3, #0]
                IWDG->KR = 0xCCCC;
 8001b40:	4b1c      	ldr	r3, [pc, #112]	@ (8001bb4 <Buttons_Process+0x338>)
 8001b42:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	e02c      	b.n	8001ba4 <Buttons_Process+0x328>
            } else if (held_time >= 30) {
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	2b1d      	cmp	r3, #29
 8001b4e:	d929      	bls.n	8001ba4 <Buttons_Process+0x328>
                // SOFT RESET
                NVIC_SystemReset();
 8001b50:	f7ff fe5a 	bl	8001808 <__NVIC_SystemReset>
            }
        }
    } else {
        if (btn2_held) {
 8001b54:	4b18      	ldr	r3, [pc, #96]	@ (8001bb8 <Buttons_Process+0x33c>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d01e      	beq.n	8001b9a <Buttons_Process+0x31e>
            uint32_t press_time = (HAL_GetTick() - btn2_press_time);
 8001b5c:	f003 fa80 	bl	8005060 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	4b12      	ldr	r3, [pc, #72]	@ (8001bac <Buttons_Process+0x330>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	60fb      	str	r3, [r7, #12]
            if (press_time < 1000) {
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b70:	d213      	bcs.n	8001b9a <Buttons_Process+0x31e>
                // Короткое нажатие → открыть/закрыть Settings
                if (!settings_active) {
 8001b72:	4b12      	ldr	r3, [pc, #72]	@ (8001bbc <Buttons_Process+0x340>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10a      	bne.n	8001b90 <Buttons_Process+0x314>
                    settings_active = 1;
 8001b7a:	4b10      	ldr	r3, [pc, #64]	@ (8001bbc <Buttons_Process+0x340>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	701a      	strb	r2, [r3, #0]
                    OLED_Settings_Init();
 8001b80:	f001 ff96 	bl	8003ab0 <OLED_Settings_Init>
                    settings_last_activity = HAL_GetTick();
 8001b84:	f003 fa6c 	bl	8005060 <HAL_GetTick>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	4a0d      	ldr	r2, [pc, #52]	@ (8001bc0 <Buttons_Process+0x344>)
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	e004      	b.n	8001b9a <Buttons_Process+0x31e>
                } else {
                    settings_active = 0;
 8001b90:	4b0a      	ldr	r3, [pc, #40]	@ (8001bbc <Buttons_Process+0x340>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
                    OLED_DrawABPage();
 8001b96:	f001 fca9 	bl	80034ec <OLED_DrawABPage>
                }
            }
        }
        btn2_held = 0;
 8001b9a:	4b07      	ldr	r3, [pc, #28]	@ (8001bb8 <Buttons_Process+0x33c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	701a      	strb	r2, [r3, #0]
 8001ba0:	e000      	b.n	8001ba4 <Buttons_Process+0x328>
        return;
 8001ba2:	bf00      	nop
    }
}
 8001ba4:	3720      	adds	r7, #32
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000344 	.word	0x20000344
 8001bb0:	10624dd3 	.word	0x10624dd3
 8001bb4:	40003000 	.word	0x40003000
 8001bb8:	20000348 	.word	0x20000348
 8001bbc:	20000340 	.word	0x20000340
 8001bc0:	20000360 	.word	0x20000360

08001bc4 <crc32_calc>:
#define BKP_WORDS     (sizeof(credentials_t)/4)  // сколько слов займём

static credentials_t creds;

// CRC32 для контроля
static uint32_t crc32_calc(const void *data, size_t len) {
 8001bc4:	b480      	push	{r7}
 8001bc6:	b087      	sub	sp, #28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
    uint32_t crc = 0xFFFFFFFF;
 8001bce:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd2:	617b      	str	r3, [r7, #20]
    const uint8_t *p = data;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	613b      	str	r3, [r7, #16]
    while (len--) {
 8001bd8:	e01a      	b.n	8001c10 <crc32_calc+0x4c>
        crc ^= *p++;
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1c5a      	adds	r2, r3, #1
 8001bde:	613a      	str	r2, [r7, #16]
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	461a      	mov	r2, r3
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	4053      	eors	r3, r2
 8001be8:	617b      	str	r3, [r7, #20]
        for (int i = 0; i < 8; i++) {
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	e00c      	b.n	8001c0a <crc32_calc+0x46>
            crc = (crc >> 1) ^ (0xEDB88320 & (-(crc & 1)));
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	085a      	lsrs	r2, r3, #1
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	4259      	negs	r1, r3
 8001bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8001c28 <crc32_calc+0x64>)
 8001bfe:	400b      	ands	r3, r1
 8001c00:	4053      	eors	r3, r2
 8001c02:	617b      	str	r3, [r7, #20]
        for (int i = 0; i < 8; i++) {
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	3301      	adds	r3, #1
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2b07      	cmp	r3, #7
 8001c0e:	ddef      	ble.n	8001bf0 <crc32_calc+0x2c>
    while (len--) {
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	1e5a      	subs	r2, r3, #1
 8001c14:	603a      	str	r2, [r7, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1df      	bne.n	8001bda <crc32_calc+0x16>
        }
    }
    return ~crc;
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	43db      	mvns	r3, r3
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	371c      	adds	r7, #28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr
 8001c28:	edb88320 	.word	0xedb88320

08001c2c <backup_write>:

static void backup_write(const credentials_t *c) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
    const uint32_t *src = (const uint32_t*)c;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = 0; i < BKP_WORDS; i++) {
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	e00c      	b.n	8001c58 <backup_write+0x2c>
        HAL_RTCEx_BKUPWrite(&hrtc, BKP_BASE + i, src[i]);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	4413      	add	r3, r2
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	68f9      	ldr	r1, [r7, #12]
 8001c4c:	4806      	ldr	r0, [pc, #24]	@ (8001c68 <backup_write+0x3c>)
 8001c4e:	f007 fcf5 	bl	800963c <HAL_RTCEx_BKUPWrite>
    for (uint32_t i = 0; i < BKP_WORDS; i++) {
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	3301      	adds	r3, #1
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2b08      	cmp	r3, #8
 8001c5c:	d9ef      	bls.n	8001c3e <backup_write+0x12>
    }
}
 8001c5e:	bf00      	nop
 8001c60:	bf00      	nop
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20002a08 	.word	0x20002a08

08001c6c <backup_read>:

static void backup_read(credentials_t *c) {
 8001c6c:	b590      	push	{r4, r7, lr}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
    uint32_t *dst = (uint32_t*)c;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	60bb      	str	r3, [r7, #8]
    for (uint32_t i = 0; i < BKP_WORDS; i++) {
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	e00c      	b.n	8001c98 <backup_read+0x2c>
        dst[i] = HAL_RTCEx_BKUPRead(&hrtc, BKP_BASE + i);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	68ba      	ldr	r2, [r7, #8]
 8001c84:	18d4      	adds	r4, r2, r3
 8001c86:	68f9      	ldr	r1, [r7, #12]
 8001c88:	4807      	ldr	r0, [pc, #28]	@ (8001ca8 <backup_read+0x3c>)
 8001c8a:	f007 fcf0 	bl	800966e <HAL_RTCEx_BKUPRead>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	6023      	str	r3, [r4, #0]
    for (uint32_t i = 0; i < BKP_WORDS; i++) {
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	3301      	adds	r3, #1
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2b08      	cmp	r3, #8
 8001c9c:	d9ef      	bls.n	8001c7e <backup_read+0x12>
    }
}
 8001c9e:	bf00      	nop
 8001ca0:	bf00      	nop
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd90      	pop	{r4, r7, pc}
 8001ca8:	20002a08 	.word	0x20002a08

08001cac <Creds_Init>:

// публичные функции
void Creds_Init(void) {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
    backup_read(&creds);
 8001cb2:	4814      	ldr	r0, [pc, #80]	@ (8001d04 <Creds_Init+0x58>)
 8001cb4:	f7ff ffda 	bl	8001c6c <backup_read>

    uint32_t crc = crc32_calc(&creds, sizeof(credentials_t) - sizeof(uint32_t));
 8001cb8:	2120      	movs	r1, #32
 8001cba:	4812      	ldr	r0, [pc, #72]	@ (8001d04 <Creds_Init+0x58>)
 8001cbc:	f7ff ff82 	bl	8001bc4 <crc32_calc>
 8001cc0:	6078      	str	r0, [r7, #4]
    if (crc != creds.crc) {
 8001cc2:	4b10      	ldr	r3, [pc, #64]	@ (8001d04 <Creds_Init+0x58>)
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d017      	beq.n	8001cfc <Creds_Init+0x50>
        // дефолтные значения
        strcpy(creds.username, "admin");
 8001ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8001d04 <Creds_Init+0x58>)
 8001cce:	4a0e      	ldr	r2, [pc, #56]	@ (8001d08 <Creds_Init+0x5c>)
 8001cd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cd4:	6018      	str	r0, [r3, #0]
 8001cd6:	3304      	adds	r3, #4
 8001cd8:	8019      	strh	r1, [r3, #0]
        strcpy(creds.password, "admin");
 8001cda:	4b0c      	ldr	r3, [pc, #48]	@ (8001d0c <Creds_Init+0x60>)
 8001cdc:	4a0a      	ldr	r2, [pc, #40]	@ (8001d08 <Creds_Init+0x5c>)
 8001cde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ce2:	6018      	str	r0, [r3, #0]
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	8019      	strh	r1, [r3, #0]
        creds.crc = crc32_calc(&creds, sizeof(credentials_t) - sizeof(uint32_t));
 8001ce8:	2120      	movs	r1, #32
 8001cea:	4806      	ldr	r0, [pc, #24]	@ (8001d04 <Creds_Init+0x58>)
 8001cec:	f7ff ff6a 	bl	8001bc4 <crc32_calc>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	4a04      	ldr	r2, [pc, #16]	@ (8001d04 <Creds_Init+0x58>)
 8001cf4:	6213      	str	r3, [r2, #32]
        backup_write(&creds);
 8001cf6:	4803      	ldr	r0, [pc, #12]	@ (8001d04 <Creds_Init+0x58>)
 8001cf8:	f7ff ff98 	bl	8001c2c <backup_write>
    }
}
 8001cfc:	bf00      	nop
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000364 	.word	0x20000364
 8001d08:	08023228 	.word	0x08023228
 8001d0c:	20000374 	.word	0x20000374

08001d10 <HAL_ADC_ConvCpltCallback>:
#define ADC_BUFFER_SIZE   (3 * ADC_SAMPLES)
uint32_t adc_buffer[ADC_BUFFER_SIZE];
volatile uint8_t dma_ready = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
    dma_ready = 1;
 8001d18:	4b03      	ldr	r3, [pc, #12]	@ (8001d28 <HAL_ADC_ConvCpltCallback+0x18>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	701a      	strb	r2, [r3, #0]
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr
 8001d28:	20002908 	.word	0x20002908

08001d2c <NET_CGI_Handler>:
// Таблица CGI
const tCGI NET_CGI = {"/set_network.cgi", NET_CGI_Handler};
tCGI CGI_TAB[5];

const char* NET_CGI_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
 8001d38:	603b      	str	r3, [r7, #0]
    for (int i=0; i<iNumParams; i++) {
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
 8001d3e:	e071      	b.n	8001e24 <NET_CGI_Handler+0xf8>
        // Сетевые
        if (strcmp(pcParam[i], "ip") == 0 && pcValue[i][0] != '\0') new_ip.addr = ipaddr_addr(pcValue[i]);
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	4413      	add	r3, r2
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	493c      	ldr	r1, [pc, #240]	@ (8001e3c <NET_CGI_Handler+0x110>)
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7fe fa3b 	bl	80001c8 <strcmp>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d113      	bne.n	8001d80 <NET_CGI_Handler+0x54>
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	4413      	add	r3, r2
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d00b      	beq.n	8001d80 <NET_CGI_Handler+0x54>
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	4413      	add	r3, r2
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f01c fc92 	bl	801e69c <ipaddr_addr>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	4a31      	ldr	r2, [pc, #196]	@ (8001e40 <NET_CGI_Handler+0x114>)
 8001d7c:	6013      	str	r3, [r2, #0]
 8001d7e:	e04e      	b.n	8001e1e <NET_CGI_Handler+0xf2>
        else if (strcmp(pcParam[i], "mask") == 0 && pcValue[i][0] != '\0') new_mask.addr = ipaddr_addr(pcValue[i]);
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	4413      	add	r3, r2
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	492e      	ldr	r1, [pc, #184]	@ (8001e44 <NET_CGI_Handler+0x118>)
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7fe fa1b 	bl	80001c8 <strcmp>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d113      	bne.n	8001dc0 <NET_CGI_Handler+0x94>
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	4413      	add	r3, r2
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d00b      	beq.n	8001dc0 <NET_CGI_Handler+0x94>
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	4413      	add	r3, r2
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f01c fc72 	bl	801e69c <ipaddr_addr>
 8001db8:	4603      	mov	r3, r0
 8001dba:	4a23      	ldr	r2, [pc, #140]	@ (8001e48 <NET_CGI_Handler+0x11c>)
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	e02e      	b.n	8001e1e <NET_CGI_Handler+0xf2>
        else if (strcmp(pcParam[i], "gateway") == 0 && pcValue[i][0] != '\0') new_gw.addr = ipaddr_addr(pcValue[i]);
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4920      	ldr	r1, [pc, #128]	@ (8001e4c <NET_CGI_Handler+0x120>)
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe f9fb 	bl	80001c8 <strcmp>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d113      	bne.n	8001e00 <NET_CGI_Handler+0xd4>
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	4413      	add	r3, r2
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00b      	beq.n	8001e00 <NET_CGI_Handler+0xd4>
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	4413      	add	r3, r2
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f01c fc52 	bl	801e69c <ipaddr_addr>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	4a15      	ldr	r2, [pc, #84]	@ (8001e50 <NET_CGI_Handler+0x124>)
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	e00e      	b.n	8001e1e <NET_CGI_Handler+0xf2>
        else if (strcmp(pcParam[i], "dhcp") == 0) new_dhcp_enabled = 1;
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	4413      	add	r3, r2
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4912      	ldr	r1, [pc, #72]	@ (8001e54 <NET_CGI_Handler+0x128>)
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7fe f9db 	bl	80001c8 <strcmp>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d102      	bne.n	8001e1e <NET_CGI_Handler+0xf2>
 8001e18:	4b0f      	ldr	r3, [pc, #60]	@ (8001e58 <NET_CGI_Handler+0x12c>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	701a      	strb	r2, [r3, #0]
    for (int i=0; i<iNumParams; i++) {
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	3301      	adds	r3, #1
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	db89      	blt.n	8001d40 <NET_CGI_Handler+0x14>
    }

    apply_network_settings = 1;
 8001e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e5c <NET_CGI_Handler+0x130>)
 8001e2e:	2201      	movs	r2, #1
 8001e30:	701a      	strb	r2, [r3, #0]

    return "/settings.html";  // редирект обратно
 8001e32:	4b0b      	ldr	r3, [pc, #44]	@ (8001e60 <NET_CGI_Handler+0x134>)
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	08023244 	.word	0x08023244
 8001e40:	20002a70 	.word	0x20002a70
 8001e44:	08023248 	.word	0x08023248
 8001e48:	20002a74 	.word	0x20002a74
 8001e4c:	08023250 	.word	0x08023250
 8001e50:	20002a78 	.word	0x20002a78
 8001e54:	08023258 	.word	0x08023258
 8001e58:	20002a7c 	.word	0x20002a7c
 8001e5c:	20002a7d 	.word	0x20002a7d
 8001e60:	08023260 	.word	0x08023260

08001e64 <DATE_CGI_Handler>:

uint8_t new_year=0, new_month=0, new_day=0;
uint8_t apply_date_settings = 0;

const char* DATE_CGI_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08a      	sub	sp, #40	@ 0x28
 8001e68:	af02      	add	r7, sp, #8
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
 8001e70:	603b      	str	r3, [r7, #0]
    for(int i=0; i<iNumParams; i++)
 8001e72:	2300      	movs	r3, #0
 8001e74:	61fb      	str	r3, [r7, #28]
 8001e76:	e03f      	b.n	8001ef8 <DATE_CGI_Handler+0x94>
    {
        if(strcmp(pcParam[i],"date")==0 && pcValue[i][0]!='\0')
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	4413      	add	r3, r2
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4923      	ldr	r1, [pc, #140]	@ (8001f10 <DATE_CGI_Handler+0xac>)
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe f99f 	bl	80001c8 <strcmp>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d130      	bne.n	8001ef2 <DATE_CGI_Handler+0x8e>
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	4413      	add	r3, r2
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d028      	beq.n	8001ef2 <DATE_CGI_Handler+0x8e>
        {
            int y,m,d;
            if(sscanf(pcValue[i], "%d-%d-%d", &y,&m,&d)==3)
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	6818      	ldr	r0, [r3, #0]
 8001eaa:	f107 0114 	add.w	r1, r7, #20
 8001eae:	f107 0218 	add.w	r2, r7, #24
 8001eb2:	f107 0310 	add.w	r3, r7, #16
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	4916      	ldr	r1, [pc, #88]	@ (8001f14 <DATE_CGI_Handler+0xb0>)
 8001ebc:	f01e fb96 	bl	80205ec <siscanf>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b03      	cmp	r3, #3
 8001ec4:	d115      	bne.n	8001ef2 <DATE_CGI_Handler+0x8e>
            {
                new_year  = (uint8_t)(y % 100);
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	4a13      	ldr	r2, [pc, #76]	@ (8001f18 <DATE_CGI_Handler+0xb4>)
 8001eca:	fb82 1203 	smull	r1, r2, r2, r3
 8001ece:	1151      	asrs	r1, r2, #5
 8001ed0:	17da      	asrs	r2, r3, #31
 8001ed2:	1a8a      	subs	r2, r1, r2
 8001ed4:	2164      	movs	r1, #100	@ 0x64
 8001ed6:	fb01 f202 	mul.w	r2, r1, r2
 8001eda:	1a9a      	subs	r2, r3, r2
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	4b0f      	ldr	r3, [pc, #60]	@ (8001f1c <DATE_CGI_Handler+0xb8>)
 8001ee0:	701a      	strb	r2, [r3, #0]
                new_month = (uint8_t)m;
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f20 <DATE_CGI_Handler+0xbc>)
 8001ee8:	701a      	strb	r2, [r3, #0]
                new_day   = (uint8_t)d;
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	4b0d      	ldr	r3, [pc, #52]	@ (8001f24 <DATE_CGI_Handler+0xc0>)
 8001ef0:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<iNumParams; i++)
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	61fb      	str	r3, [r7, #28]
 8001ef8:	69fa      	ldr	r2, [r7, #28]
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	dbbb      	blt.n	8001e78 <DATE_CGI_Handler+0x14>
            }
        }
    }
    apply_date_settings = 1;
 8001f00:	4b09      	ldr	r3, [pc, #36]	@ (8001f28 <DATE_CGI_Handler+0xc4>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	701a      	strb	r2, [r3, #0]
    return "/settings.html";
 8001f06:	4b09      	ldr	r3, [pc, #36]	@ (8001f2c <DATE_CGI_Handler+0xc8>)
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3720      	adds	r7, #32
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	08023270 	.word	0x08023270
 8001f14:	08023278 	.word	0x08023278
 8001f18:	51eb851f 	.word	0x51eb851f
 8001f1c:	20002aa8 	.word	0x20002aa8
 8001f20:	20002aa9 	.word	0x20002aa9
 8001f24:	20002aaa 	.word	0x20002aaa
 8001f28:	20002aab 	.word	0x20002aab
 8001f2c:	08023260 	.word	0x08023260

08001f30 <TIME_CGI_Handler>:

uint8_t new_hours = 0, new_minutes = 0, new_seconds = 0;
uint8_t apply_time_settings = 0;

const char* TIME_CGI_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08a      	sub	sp, #40	@ 0x28
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
 8001f3c:	603b      	str	r3, [r7, #0]
    apply_time_settings = 0;
 8001f3e:	4b40      	ldr	r3, [pc, #256]	@ (8002040 <TIME_CGI_Handler+0x110>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	701a      	strb	r2, [r3, #0]

    for(int i = 0; i < iNumParams; i++)
 8001f44:	2300      	movs	r3, #0
 8001f46:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f48:	e071      	b.n	800202e <TIME_CGI_Handler+0xfe>
    {
        if(strcmp(pcParam[i], "time") == 0 && strlen(pcValue[i]) >= 5)
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	4413      	add	r3, r2
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	493b      	ldr	r1, [pc, #236]	@ (8002044 <TIME_CGI_Handler+0x114>)
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7fe f936 	bl	80001c8 <strcmp>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d162      	bne.n	8002028 <TIME_CGI_Handler+0xf8>
 8001f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	4413      	add	r3, r2
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7fe f935 	bl	80001dc <strlen>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b04      	cmp	r3, #4
 8001f76:	d957      	bls.n	8002028 <TIME_CGI_Handler+0xf8>
        {
            // Простой парсинг без sscanf
            char *colon = strchr(pcValue[i], ':');
 8001f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	4413      	add	r3, r2
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	213a      	movs	r1, #58	@ 0x3a
 8001f84:	4618      	mov	r0, r3
 8001f86:	f01e fc69 	bl	802085c <strchr>
 8001f8a:	6238      	str	r0, [r7, #32]
            if(colon != NULL)
 8001f8c:	6a3b      	ldr	r3, [r7, #32]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d04a      	beq.n	8002028 <TIME_CGI_Handler+0xf8>
            {
                // Берем первые 2 символа как часы
                char hour_str[3] = {0};
 8001f92:	f107 0314 	add.w	r3, r7, #20
 8001f96:	2100      	movs	r1, #0
 8001f98:	460a      	mov	r2, r1
 8001f9a:	801a      	strh	r2, [r3, #0]
 8001f9c:	460a      	mov	r2, r1
 8001f9e:	709a      	strb	r2, [r3, #2]
                strncpy(hour_str, pcValue[i], 2);
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	6819      	ldr	r1, [r3, #0]
 8001faa:	f107 0314 	add.w	r3, r7, #20
 8001fae:	2202      	movs	r2, #2
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f01e fc72 	bl	802089a <strncpy>
                hour_str[2] = '\0';
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	75bb      	strb	r3, [r7, #22]

                // Берем 2 символа после двоеточия как минуты
                char min_str[3] = {0};
 8001fba:	f107 0310 	add.w	r3, r7, #16
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	460a      	mov	r2, r1
 8001fc2:	801a      	strh	r2, [r3, #0]
 8001fc4:	460a      	mov	r2, r1
 8001fc6:	709a      	strb	r2, [r3, #2]
                strncpy(min_str, colon + 1, 2);
 8001fc8:	6a3b      	ldr	r3, [r7, #32]
 8001fca:	1c59      	adds	r1, r3, #1
 8001fcc:	f107 0310 	add.w	r3, r7, #16
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f01e fc61 	bl	802089a <strncpy>
                min_str[2] = '\0';
 8001fd8:	2300      	movs	r3, #0
 8001fda:	74bb      	strb	r3, [r7, #18]

                int h = atoi(hour_str);
 8001fdc:	f107 0314 	add.w	r3, r7, #20
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f01d fc79 	bl	801f8d8 <atoi>
 8001fe6:	61f8      	str	r0, [r7, #28]
                int mi = atoi(min_str);
 8001fe8:	f107 0310 	add.w	r3, r7, #16
 8001fec:	4618      	mov	r0, r3
 8001fee:	f01d fc73 	bl	801f8d8 <atoi>
 8001ff2:	61b8      	str	r0, [r7, #24]

                if(h >= 0 && h < 24 && mi >= 0 && mi < 60)
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	db16      	blt.n	8002028 <TIME_CGI_Handler+0xf8>
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	2b17      	cmp	r3, #23
 8001ffe:	dc13      	bgt.n	8002028 <TIME_CGI_Handler+0xf8>
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	2b00      	cmp	r3, #0
 8002004:	db10      	blt.n	8002028 <TIME_CGI_Handler+0xf8>
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	2b3b      	cmp	r3, #59	@ 0x3b
 800200a:	dc0d      	bgt.n	8002028 <TIME_CGI_Handler+0xf8>
                {
                    new_hours = (uint8_t)h;
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	b2da      	uxtb	r2, r3
 8002010:	4b0d      	ldr	r3, [pc, #52]	@ (8002048 <TIME_CGI_Handler+0x118>)
 8002012:	701a      	strb	r2, [r3, #0]
                    new_minutes = (uint8_t)mi;
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	b2da      	uxtb	r2, r3
 8002018:	4b0c      	ldr	r3, [pc, #48]	@ (800204c <TIME_CGI_Handler+0x11c>)
 800201a:	701a      	strb	r2, [r3, #0]
                    new_seconds = 0;
 800201c:	4b0c      	ldr	r3, [pc, #48]	@ (8002050 <TIME_CGI_Handler+0x120>)
 800201e:	2200      	movs	r2, #0
 8002020:	701a      	strb	r2, [r3, #0]
                    apply_time_settings = 1;
 8002022:	4b07      	ldr	r3, [pc, #28]	@ (8002040 <TIME_CGI_Handler+0x110>)
 8002024:	2201      	movs	r2, #1
 8002026:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < iNumParams; i++)
 8002028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202a:	3301      	adds	r3, #1
 800202c:	627b      	str	r3, [r7, #36]	@ 0x24
 800202e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	429a      	cmp	r2, r3
 8002034:	db89      	blt.n	8001f4a <TIME_CGI_Handler+0x1a>
                }
            }
        }
    }
    return "/settings.html";
 8002036:	4b07      	ldr	r3, [pc, #28]	@ (8002054 <TIME_CGI_Handler+0x124>)
}
 8002038:	4618      	mov	r0, r3
 800203a:	3728      	adds	r7, #40	@ 0x28
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20002aaf 	.word	0x20002aaf
 8002044:	08023294 	.word	0x08023294
 8002048:	20002aac 	.word	0x20002aac
 800204c:	20002aad 	.word	0x20002aad
 8002050:	20002aae 	.word	0x20002aae
 8002054:	08023260 	.word	0x08023260

08002058 <SNMP_CGI_Handler>:
char snmp_trap[32] = "public";
uint8_t apply_snmp_settings = 0;

// CGI-хэндлер для SNMP
const char* SNMP_CGI_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
 8002064:	603b      	str	r3, [r7, #0]
    for(int i=0; i<iNumParams; i++)
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
 800206a:	e067      	b.n	800213c <SNMP_CGI_Handler+0xe4>
    {
        if(strcmp(pcParam[i],"snmp-read")==0 && pcValue[i][0]!='\0')
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	4413      	add	r3, r2
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4937      	ldr	r1, [pc, #220]	@ (8002154 <SNMP_CGI_Handler+0xfc>)
 8002078:	4618      	mov	r0, r3
 800207a:	f7fe f8a5 	bl	80001c8 <strcmp>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d115      	bne.n	80020b0 <SNMP_CGI_Handler+0x58>
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	4413      	add	r3, r2
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00d      	beq.n	80020b0 <SNMP_CGI_Handler+0x58>
        {
            strncpy(snmp_read, pcValue[i], sizeof(snmp_read)-1);
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	4413      	add	r3, r2
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	221f      	movs	r2, #31
 80020a0:	4619      	mov	r1, r3
 80020a2:	482d      	ldr	r0, [pc, #180]	@ (8002158 <SNMP_CGI_Handler+0x100>)
 80020a4:	f01e fbf9 	bl	802089a <strncpy>
            snmp_read[sizeof(snmp_read)-1] = 0;
 80020a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002158 <SNMP_CGI_Handler+0x100>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	77da      	strb	r2, [r3, #31]
 80020ae:	e042      	b.n	8002136 <SNMP_CGI_Handler+0xde>
        }
        else if(strcmp(pcParam[i],"snmp-write")==0 && pcValue[i][0]!='\0')
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	4413      	add	r3, r2
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4928      	ldr	r1, [pc, #160]	@ (800215c <SNMP_CGI_Handler+0x104>)
 80020bc:	4618      	mov	r0, r3
 80020be:	f7fe f883 	bl	80001c8 <strcmp>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d115      	bne.n	80020f4 <SNMP_CGI_Handler+0x9c>
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	4413      	add	r3, r2
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00d      	beq.n	80020f4 <SNMP_CGI_Handler+0x9c>
        {
            strncpy(snmp_write, pcValue[i], sizeof(snmp_write)-1);
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	4413      	add	r3, r2
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	221f      	movs	r2, #31
 80020e4:	4619      	mov	r1, r3
 80020e6:	481e      	ldr	r0, [pc, #120]	@ (8002160 <SNMP_CGI_Handler+0x108>)
 80020e8:	f01e fbd7 	bl	802089a <strncpy>
            snmp_write[sizeof(snmp_write)-1] = 0;
 80020ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002160 <SNMP_CGI_Handler+0x108>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	77da      	strb	r2, [r3, #31]
 80020f2:	e020      	b.n	8002136 <SNMP_CGI_Handler+0xde>
        }
        else if(strcmp(pcParam[i],"snmp-trap")==0 && pcValue[i][0]!='\0')
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	4413      	add	r3, r2
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4919      	ldr	r1, [pc, #100]	@ (8002164 <SNMP_CGI_Handler+0x10c>)
 8002100:	4618      	mov	r0, r3
 8002102:	f7fe f861 	bl	80001c8 <strcmp>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d114      	bne.n	8002136 <SNMP_CGI_Handler+0xde>
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	4413      	add	r3, r2
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00c      	beq.n	8002136 <SNMP_CGI_Handler+0xde>
        {
            strncpy(snmp_trap, pcValue[i], sizeof(snmp_trap)-1);
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	4413      	add	r3, r2
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	221f      	movs	r2, #31
 8002128:	4619      	mov	r1, r3
 800212a:	480f      	ldr	r0, [pc, #60]	@ (8002168 <SNMP_CGI_Handler+0x110>)
 800212c:	f01e fbb5 	bl	802089a <strncpy>
            snmp_trap[sizeof(snmp_trap)-1] = 0;
 8002130:	4b0d      	ldr	r3, [pc, #52]	@ (8002168 <SNMP_CGI_Handler+0x110>)
 8002132:	2200      	movs	r2, #0
 8002134:	77da      	strb	r2, [r3, #31]
    for(int i=0; i<iNumParams; i++)
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	3301      	adds	r3, #1
 800213a:	617b      	str	r3, [r7, #20]
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	429a      	cmp	r2, r3
 8002142:	db93      	blt.n	800206c <SNMP_CGI_Handler+0x14>
        }
    }
    apply_snmp_settings = 1; // ставим флаг применения в main()
 8002144:	4b09      	ldr	r3, [pc, #36]	@ (800216c <SNMP_CGI_Handler+0x114>)
 8002146:	2201      	movs	r2, #1
 8002148:	701a      	strb	r2, [r3, #0]
    return "/settings.html";  // редирект обратно
 800214a:	4b09      	ldr	r3, [pc, #36]	@ (8002170 <SNMP_CGI_Handler+0x118>)
}
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	080232ac 	.word	0x080232ac
 8002158:	20000010 	.word	0x20000010
 800215c:	080232b8 	.word	0x080232b8
 8002160:	20000030 	.word	0x20000030
 8002164:	080232c4 	.word	0x080232c4
 8002168:	20000050 	.word	0x20000050
 800216c:	20002ab0 	.word	0x20002ab0
 8002170:	08023260 	.word	0x08023260

08002174 <Save_SNMP_Settings_To_Flash>:
#include <string.h>

#define FLASH_SNMP_ADDR  0x080E0000  // выбери свободный сектор

void Save_SNMP_Settings_To_Flash(const char* read, const char* write, const char* trap)
{
 8002174:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002178:	b08c      	sub	sp, #48	@ 0x30
 800217a:	af00      	add	r7, sp, #0
 800217c:	60f8      	str	r0, [r7, #12]
 800217e:	60b9      	str	r1, [r7, #8]
 8002180:	607a      	str	r2, [r7, #4]
    HAL_FLASH_Unlock();
 8002182:	f005 f93d 	bl	8007400 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef eraseInit;
    uint32_t pageError = 0;
 8002186:	2300      	movs	r3, #0
 8002188:	617b      	str	r3, [r7, #20]

    eraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 800218a:	2300      	movs	r3, #0
 800218c:	61bb      	str	r3, [r7, #24]
    eraseInit.Sector = FLASH_SECTOR_11;   // зависит от твоего чипа!
 800218e:	230b      	movs	r3, #11
 8002190:	623b      	str	r3, [r7, #32]
    eraseInit.NbSectors = 1;
 8002192:	2301      	movs	r3, #1
 8002194:	627b      	str	r3, [r7, #36]	@ 0x24
    eraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8002196:	2302      	movs	r3, #2
 8002198:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_FLASHEx_Erase(&eraseInit, &pageError);
 800219a:	f107 0214 	add.w	r2, r7, #20
 800219e:	f107 0318 	add.w	r3, r7, #24
 80021a2:	4611      	mov	r1, r2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f005 fa89 	bl	80076bc <HAL_FLASHEx_Erase>

    uint32_t address = FLASH_SNMP_ADDR;
 80021aa:	4b18      	ldr	r3, [pc, #96]	@ (800220c <Save_SNMP_Settings_To_Flash+0x98>)
 80021ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, *((uint32_t*)read));
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2200      	movs	r2, #0
 80021b4:	469a      	mov	sl, r3
 80021b6:	4693      	mov	fp, r2
 80021b8:	4652      	mov	r2, sl
 80021ba:	465b      	mov	r3, fp
 80021bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80021be:	2002      	movs	r0, #2
 80021c0:	f005 f8ca 	bl	8007358 <HAL_FLASH_Program>
    address += 4;
 80021c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021c6:	3304      	adds	r3, #4
 80021c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, *((uint32_t*)write));
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2200      	movs	r2, #0
 80021d0:	4698      	mov	r8, r3
 80021d2:	4691      	mov	r9, r2
 80021d4:	4642      	mov	r2, r8
 80021d6:	464b      	mov	r3, r9
 80021d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80021da:	2002      	movs	r0, #2
 80021dc:	f005 f8bc 	bl	8007358 <HAL_FLASH_Program>
    address += 4;
 80021e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021e2:	3304      	adds	r3, #4
 80021e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, *((uint32_t*)trap));
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2200      	movs	r2, #0
 80021ec:	461c      	mov	r4, r3
 80021ee:	4615      	mov	r5, r2
 80021f0:	4622      	mov	r2, r4
 80021f2:	462b      	mov	r3, r5
 80021f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80021f6:	2002      	movs	r0, #2
 80021f8:	f005 f8ae 	bl	8007358 <HAL_FLASH_Program>

    HAL_FLASH_Lock();
 80021fc:	f005 f922 	bl	8007444 <HAL_FLASH_Lock>
}
 8002200:	bf00      	nop
 8002202:	3730      	adds	r7, #48	@ 0x30
 8002204:	46bd      	mov	sp, r7
 8002206:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800220a:	bf00      	nop
 800220c:	080e0000 	.word	0x080e0000

08002210 <crc32>:

FW_Update_Context fw_ctx;

// CRC32 функция (можно заменить на HAL/STM32 встроенную)
uint32_t crc32(uint8_t *data, uint32_t len)
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
    uint32_t crc = 0xFFFFFFFF;
 800221a:	f04f 33ff 	mov.w	r3, #4294967295
 800221e:	617b      	str	r3, [r7, #20]
    for(uint32_t i = 0; i < len; i++) {
 8002220:	2300      	movs	r3, #0
 8002222:	613b      	str	r3, [r7, #16]
 8002224:	e01d      	b.n	8002262 <crc32+0x52>
        crc ^= data[i];
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	4413      	add	r3, r2
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	461a      	mov	r2, r3
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	4053      	eors	r3, r2
 8002234:	617b      	str	r3, [r7, #20]
        for(uint8_t j = 0; j < 8; j++)
 8002236:	2300      	movs	r3, #0
 8002238:	73fb      	strb	r3, [r7, #15]
 800223a:	e00c      	b.n	8002256 <crc32+0x46>
            crc = (crc >> 1) ^ (0xEDB88320 & (~(crc & 1) + 1));
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	085a      	lsrs	r2, r3, #1
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	4259      	negs	r1, r3
 8002248:	4b0b      	ldr	r3, [pc, #44]	@ (8002278 <crc32+0x68>)
 800224a:	400b      	ands	r3, r1
 800224c:	4053      	eors	r3, r2
 800224e:	617b      	str	r3, [r7, #20]
        for(uint8_t j = 0; j < 8; j++)
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	3301      	adds	r3, #1
 8002254:	73fb      	strb	r3, [r7, #15]
 8002256:	7bfb      	ldrb	r3, [r7, #15]
 8002258:	2b07      	cmp	r3, #7
 800225a:	d9ef      	bls.n	800223c <crc32+0x2c>
    for(uint32_t i = 0; i < len; i++) {
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	3301      	adds	r3, #1
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d3dd      	bcc.n	8002226 <crc32+0x16>
    }
    return ~crc;
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	43db      	mvns	r3, r3
}
 800226e:	4618      	mov	r0, r3
 8002270:	371c      	adds	r7, #28
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr
 8002278:	edb88320 	.word	0xedb88320

0800227c <FW_Update_CGI_Handler>:

// --- CGI ---
const char* FW_Update_CGI_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
 8002288:	603b      	str	r3, [r7, #0]
    return "/update.html";
 800228a:	4b03      	ldr	r3, [pc, #12]	@ (8002298 <FW_Update_CGI_Handler+0x1c>)
}
 800228c:	4618      	mov	r0, r3
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	080232e0 	.word	0x080232e0

0800229c <httpd_post_begin>:
                       u16_t content_len,
                       int total_data_len,
                       char *post_data,
                       u16_t post_data_len,
                       u8_t *connection_status)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
 80022a8:	807b      	strh	r3, [r7, #2]
    if(strcmp(uri, "/fw_update.cgi") == 0) {
 80022aa:	4910      	ldr	r1, [pc, #64]	@ (80022ec <httpd_post_begin+0x50>)
 80022ac:	68b8      	ldr	r0, [r7, #8]
 80022ae:	f7fd ff8b 	bl	80001c8 <strcmp>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d113      	bne.n	80022e0 <httpd_post_begin+0x44>
        fw_ctx.buffer_len = 0;
 80022b8:	4b0d      	ldr	r3, [pc, #52]	@ (80022f0 <httpd_post_begin+0x54>)
 80022ba:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80022be:	461a      	mov	r2, r3
 80022c0:	2300      	movs	r3, #0
 80022c2:	6013      	str	r3, [r2, #0]
        fw_ctx.total_len = 0;
 80022c4:	4b0a      	ldr	r3, [pc, #40]	@ (80022f0 <httpd_post_begin+0x54>)
 80022c6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80022ca:	461a      	mov	r2, r3
 80022cc:	2300      	movs	r3, #0
 80022ce:	6053      	str	r3, [r2, #4]
        fw_ctx.active = true;
 80022d0:	4b07      	ldr	r3, [pc, #28]	@ (80022f0 <httpd_post_begin+0x54>)
 80022d2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80022d6:	2201      	movs	r2, #1
 80022d8:	721a      	strb	r2, [r3, #8]
        *connection_status = 1; // продолжаем принимать
 80022da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022dc:	2201      	movs	r2, #1
 80022de:	701a      	strb	r2, [r3, #0]
    }
    return ERR_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	080232f0 	.word	0x080232f0
 80022f0:	20002ab4 	.word	0x20002ab4

080022f4 <httpd_post_receive_data>:



err_t httpd_post_receive_data(void *connection, struct pbuf *p)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
    if(!fw_ctx.active || p == NULL) return ERR_OK;
 80022fe:	4b2a      	ldr	r3, [pc, #168]	@ (80023a8 <httpd_post_receive_data+0xb4>)
 8002300:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002304:	7a1b      	ldrb	r3, [r3, #8]
 8002306:	f083 0301 	eor.w	r3, r3, #1
 800230a:	b2db      	uxtb	r3, r3
 800230c:	2b00      	cmp	r3, #0
 800230e:	d102      	bne.n	8002316 <httpd_post_receive_data+0x22>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <httpd_post_receive_data+0x26>
 8002316:	2300      	movs	r3, #0
 8002318:	e041      	b.n	800239e <httpd_post_receive_data+0xaa>

    uint16_t copied = 0;
 800231a:	2300      	movs	r3, #0
 800231c:	81fb      	strh	r3, [r7, #14]
    while(p && fw_ctx.buffer_len < RAM_BUFFER_SIZE) {
 800231e:	e029      	b.n	8002374 <httpd_post_receive_data+0x80>
        uint16_t len = p->len > (RAM_BUFFER_SIZE - fw_ctx.buffer_len) ? (RAM_BUFFER_SIZE - fw_ctx.buffer_len) : p->len;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	895b      	ldrh	r3, [r3, #10]
 8002324:	461a      	mov	r2, r3
 8002326:	4b20      	ldr	r3, [pc, #128]	@ (80023a8 <httpd_post_receive_data+0xb4>)
 8002328:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f5c3 4380 	rsb	r3, r3, #16384	@ 0x4000
 8002332:	4293      	cmp	r3, r2
 8002334:	bf28      	it	cs
 8002336:	4613      	movcs	r3, r2
 8002338:	81bb      	strh	r3, [r7, #12]
        memcpy(fw_ctx.buffer + fw_ctx.buffer_len, p->payload, len);
 800233a:	4b1b      	ldr	r3, [pc, #108]	@ (80023a8 <httpd_post_receive_data+0xb4>)
 800233c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a19      	ldr	r2, [pc, #100]	@ (80023a8 <httpd_post_receive_data+0xb4>)
 8002344:	1898      	adds	r0, r3, r2
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	89ba      	ldrh	r2, [r7, #12]
 800234c:	4619      	mov	r1, r3
 800234e:	f01e fb3c 	bl	80209ca <memcpy>
        fw_ctx.buffer_len += len;
 8002352:	4b15      	ldr	r3, [pc, #84]	@ (80023a8 <httpd_post_receive_data+0xb4>)
 8002354:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	89bb      	ldrh	r3, [r7, #12]
 800235c:	4413      	add	r3, r2
 800235e:	4a12      	ldr	r2, [pc, #72]	@ (80023a8 <httpd_post_receive_data+0xb4>)
 8002360:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8002364:	6013      	str	r3, [r2, #0]
        copied += len;
 8002366:	89fa      	ldrh	r2, [r7, #14]
 8002368:	89bb      	ldrh	r3, [r7, #12]
 800236a:	4413      	add	r3, r2
 800236c:	81fb      	strh	r3, [r7, #14]
        p = p->next;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	603b      	str	r3, [r7, #0]
    while(p && fw_ctx.buffer_len < RAM_BUFFER_SIZE) {
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d006      	beq.n	8002388 <httpd_post_receive_data+0x94>
 800237a:	4b0b      	ldr	r3, [pc, #44]	@ (80023a8 <httpd_post_receive_data+0xb4>)
 800237c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002386:	d3cb      	bcc.n	8002320 <httpd_post_receive_data+0x2c>
    }
    fw_ctx.total_len += copied;
 8002388:	4b07      	ldr	r3, [pc, #28]	@ (80023a8 <httpd_post_receive_data+0xb4>)
 800238a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	89fb      	ldrh	r3, [r7, #14]
 8002392:	4413      	add	r3, r2
 8002394:	4a04      	ldr	r2, [pc, #16]	@ (80023a8 <httpd_post_receive_data+0xb4>)
 8002396:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800239a:	6053      	str	r3, [r2, #4]

    return ERR_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20002ab4 	.word	0x20002ab4

080023ac <httpd_post_finished>:

void httpd_post_finished(void *connection, char *response_uri, u16_t response_uri_len)
{
 80023ac:	b5b0      	push	{r4, r5, r7, lr}
 80023ae:	b08e      	sub	sp, #56	@ 0x38
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	4613      	mov	r3, r2
 80023b8:	80fb      	strh	r3, [r7, #6]
    if(fw_ctx.active && fw_ctx.total_len > 0) {
 80023ba:	4b34      	ldr	r3, [pc, #208]	@ (800248c <httpd_post_finished+0xe0>)
 80023bc:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80023c0:	7a1b      	ldrb	r3, [r3, #8]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d053      	beq.n	800246e <httpd_post_finished+0xc2>
 80023c6:	4b31      	ldr	r3, [pc, #196]	@ (800248c <httpd_post_finished+0xe0>)
 80023c8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d04d      	beq.n	800246e <httpd_post_finished+0xc2>
        // Проверка CRC перед записью
        uint32_t calculated_crc = crc32(fw_ctx.buffer, fw_ctx.buffer_len);
 80023d2:	4b2e      	ldr	r3, [pc, #184]	@ (800248c <httpd_post_finished+0xe0>)
 80023d4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4619      	mov	r1, r3
 80023dc:	482b      	ldr	r0, [pc, #172]	@ (800248c <httpd_post_finished+0xe0>)
 80023de:	f7ff ff17 	bl	8002210 <crc32>
 80023e2:	6338      	str	r0, [r7, #48]	@ 0x30
        // Можно сравнить с CRC из заголовка формы (если есть)
        // Например: если(calculated_crc != expected_crc) -> ошибка

        // Стираем flash
        HAL_FLASH_Unlock();
 80023e4:	f005 f80c 	bl	8007400 <HAL_FLASH_Unlock>
        FLASH_EraseInitTypeDef erase;
        uint32_t pageError;
        erase.TypeErase = FLASH_TYPEERASE_SECTORS;
 80023e8:	2300      	movs	r3, #0
 80023ea:	61bb      	str	r3, [r7, #24]
        erase.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80023ec:	2302      	movs	r3, #2
 80023ee:	62bb      	str	r3, [r7, #40]	@ 0x28
        erase.Sector = FLASH_SECTOR_2; // зависит от MCU
 80023f0:	2302      	movs	r3, #2
 80023f2:	623b      	str	r3, [r7, #32]
        erase.NbSectors = 1;
 80023f4:	2301      	movs	r3, #1
 80023f6:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_FLASHEx_Erase(&erase, &pageError);
 80023f8:	f107 0214 	add.w	r2, r7, #20
 80023fc:	f107 0318 	add.w	r3, r7, #24
 8002400:	4611      	mov	r1, r2
 8002402:	4618      	mov	r0, r3
 8002404:	f005 f95a 	bl	80076bc <HAL_FLASHEx_Erase>

        // Запись flash блоками по 32 бита
        for(uint32_t i = 0; i < fw_ctx.buffer_len; i += 4) {
 8002408:	2300      	movs	r3, #0
 800240a:	637b      	str	r3, [r7, #52]	@ 0x34
 800240c:	e026      	b.n	800245c <httpd_post_finished+0xb0>
            uint32_t word = 0xFFFFFFFF;
 800240e:	f04f 33ff 	mov.w	r3, #4294967295
 8002412:	613b      	str	r3, [r7, #16]
            uint32_t copy_bytes = (fw_ctx.buffer_len - i) >= 4 ? 4 : (fw_ctx.buffer_len - i);
 8002414:	4b1d      	ldr	r3, [pc, #116]	@ (800248c <httpd_post_finished+0xe0>)
 8002416:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b04      	cmp	r3, #4
 8002422:	bf28      	it	cs
 8002424:	2304      	movcs	r3, #4
 8002426:	62fb      	str	r3, [r7, #44]	@ 0x2c
            memcpy(&word, fw_ctx.buffer + i, copy_bytes);
 8002428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800242a:	4a18      	ldr	r2, [pc, #96]	@ (800248c <httpd_post_finished+0xe0>)
 800242c:	1899      	adds	r1, r3, r2
 800242e:	f107 0310 	add.w	r3, r7, #16
 8002432:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002434:	4618      	mov	r0, r3
 8002436:	f01e fac8 	bl	80209ca <memcpy>
            HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_UPDATE_ADDR + i, word);
 800243a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800243c:	f103 6100 	add.w	r1, r3, #134217728	@ 0x8000000
 8002440:	f501 3100 	add.w	r1, r1, #131072	@ 0x20000
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	2200      	movs	r2, #0
 8002448:	461c      	mov	r4, r3
 800244a:	4615      	mov	r5, r2
 800244c:	4622      	mov	r2, r4
 800244e:	462b      	mov	r3, r5
 8002450:	2002      	movs	r0, #2
 8002452:	f004 ff81 	bl	8007358 <HAL_FLASH_Program>
        for(uint32_t i = 0; i < fw_ctx.buffer_len; i += 4) {
 8002456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002458:	3304      	adds	r3, #4
 800245a:	637b      	str	r3, [r7, #52]	@ 0x34
 800245c:	4b0b      	ldr	r3, [pc, #44]	@ (800248c <httpd_post_finished+0xe0>)
 800245e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002466:	429a      	cmp	r2, r3
 8002468:	d3d1      	bcc.n	800240e <httpd_post_finished+0x62>
        }
        HAL_FLASH_Lock();
 800246a:	f004 ffeb 	bl	8007444 <HAL_FLASH_Lock>
    }

    fw_ctx.active = false;
 800246e:	4b07      	ldr	r3, [pc, #28]	@ (800248c <httpd_post_finished+0xe0>)
 8002470:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002474:	2200      	movs	r2, #0
 8002476:	721a      	strb	r2, [r3, #8]
    strncpy(response_uri, "/update_complete.html", response_uri_len);
 8002478:	88fb      	ldrh	r3, [r7, #6]
 800247a:	461a      	mov	r2, r3
 800247c:	4904      	ldr	r1, [pc, #16]	@ (8002490 <httpd_post_finished+0xe4>)
 800247e:	68b8      	ldr	r0, [r7, #8]
 8002480:	f01e fa0b 	bl	802089a <strncpy>
}
 8002484:	bf00      	nop
 8002486:	3738      	adds	r7, #56	@ 0x38
 8002488:	46bd      	mov	sp, r7
 800248a:	bdb0      	pop	{r4, r5, r7, pc}
 800248c:	20002ab4 	.word	0x20002ab4
 8002490:	08023300 	.word	0x08023300

08002494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800249a:	f002 fd7d 	bl	8004f98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800249e:	f000 f925 	bl	80026ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024a2:	f000 fae7 	bl	8002a74 <MX_GPIO_Init>
  MX_DMA_Init();
 80024a6:	f000 fac5 	bl	8002a34 <MX_DMA_Init>
  MX_I2C1_Init();
 80024aa:	f000 f9f1 	bl	8002890 <MX_I2C1_Init>
  MX_LWIP_Init();
 80024ae:	f007 fc2d 	bl	8009d0c <MX_LWIP_Init>
  MX_ADC1_Init();
 80024b2:	f000 f97b 	bl	80027ac <MX_ADC1_Init>
  MX_TIM3_Init();
 80024b6:	f000 fa71 	bl	800299c <MX_TIM3_Init>
  MX_RTC_Init();
 80024ba:	f000 fa17 	bl	80028ec <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  httpd_init();
 80024be:	f009 fde1 	bl	800c084 <httpd_init>

  httpd_ssi_init_custom();
 80024c2:	f008 fa05 	bl	800a8d0 <httpd_ssi_init_custom>

  Creds_Init();
 80024c6:	f7ff fbf1 	bl	8001cac <Creds_Init>
  // Регистрация CGI

  CGI_TAB[0] = NET_CGI;
 80024ca:	4b68      	ldr	r3, [pc, #416]	@ (800266c <main+0x1d8>)
 80024cc:	4a68      	ldr	r2, [pc, #416]	@ (8002670 <main+0x1dc>)
 80024ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024d2:	e883 0003 	stmia.w	r3, {r0, r1}
  CGI_TAB[1] = DATE_CGI;
 80024d6:	4b65      	ldr	r3, [pc, #404]	@ (800266c <main+0x1d8>)
 80024d8:	4a66      	ldr	r2, [pc, #408]	@ (8002674 <main+0x1e0>)
 80024da:	3308      	adds	r3, #8
 80024dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024e0:	e883 0003 	stmia.w	r3, {r0, r1}
  CGI_TAB[2] = TIME_CGI;
 80024e4:	4b61      	ldr	r3, [pc, #388]	@ (800266c <main+0x1d8>)
 80024e6:	4a64      	ldr	r2, [pc, #400]	@ (8002678 <main+0x1e4>)
 80024e8:	3310      	adds	r3, #16
 80024ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024ee:	e883 0003 	stmia.w	r3, {r0, r1}
  CGI_TAB[3] = SNMP_CGI;
 80024f2:	4b5e      	ldr	r3, [pc, #376]	@ (800266c <main+0x1d8>)
 80024f4:	4a61      	ldr	r2, [pc, #388]	@ (800267c <main+0x1e8>)
 80024f6:	3318      	adds	r3, #24
 80024f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024fc:	e883 0003 	stmia.w	r3, {r0, r1}
  CGI_TAB[4] = FW_UPDATE_CGI;
 8002500:	4b5a      	ldr	r3, [pc, #360]	@ (800266c <main+0x1d8>)
 8002502:	4a5f      	ldr	r2, [pc, #380]	@ (8002680 <main+0x1ec>)
 8002504:	3320      	adds	r3, #32
 8002506:	e892 0003 	ldmia.w	r2, {r0, r1}
 800250a:	e883 0003 	stmia.w	r3, {r0, r1}
  http_set_cgi_handlers(CGI_TAB, 6); // количество зарегистрированных CGI
 800250e:	2106      	movs	r1, #6
 8002510:	4856      	ldr	r0, [pc, #344]	@ (800266c <main+0x1d8>)
 8002512:	f009 fe45 	bl	800c1a0 <http_set_cgi_handlers>
  snmp_init();
 8002516:	f00f fd8f 	bl	8012038 <snmp_init>

  snmp_set_mibs(mib_array, snmp_num_mibs);
 800251a:	2302      	movs	r3, #2
 800251c:	4619      	mov	r1, r3
 800251e:	4859      	ldr	r0, [pc, #356]	@ (8002684 <main+0x1f0>)
 8002520:	f00a fbd2 	bl	800ccc8 <snmp_set_mibs>


  ssd1306_Init();
 8002524:	f002 f9b4 	bl	8004890 <ssd1306_Init>

  ssd1306_UpdateScreen();
 8002528:	f002 fa34 	bl	8004994 <ssd1306_UpdateScreen>

  ssd1306_Fill(Black);
 800252c:	2000      	movs	r0, #0
 800252e:	f002 fa19 	bl	8004964 <ssd1306_Fill>

  Buttons_Init();
 8002532:	f7ff f851 	bl	80015d8 <Buttons_Init>


  HAL_ADC_Start_DMA(&hadc1, adc_buffer, ADC_BUFFER_SIZE);
 8002536:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 800253a:	4953      	ldr	r1, [pc, #332]	@ (8002688 <main+0x1f4>)
 800253c:	4853      	ldr	r0, [pc, #332]	@ (800268c <main+0x1f8>)
 800253e:	f002 fe01 	bl	8005144 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start(&htim3);
 8002542:	4853      	ldr	r0, [pc, #332]	@ (8002690 <main+0x1fc>)
 8002544:	f007 f8fa 	bl	800973c <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 8002548:	f007 fd06 	bl	8009f58 <MX_LWIP_Process>

      if (dma_ready) {
 800254c:	4b51      	ldr	r3, [pc, #324]	@ (8002694 <main+0x200>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d007      	beq.n	8002566 <main+0xd2>
          SignalProcessor_Update(adc_buffer, ADC_SAMPLES);
 8002556:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800255a:	484b      	ldr	r0, [pc, #300]	@ (8002688 <main+0x1f4>)
 800255c:	f000 fb10 	bl	8002b80 <SignalProcessor_Update>
          dma_ready = 0;
 8002560:	4b4c      	ldr	r3, [pc, #304]	@ (8002694 <main+0x200>)
 8002562:	2200      	movs	r2, #0
 8002564:	701a      	strb	r2, [r3, #0]
      }
	    Buttons_Process();
 8002566:	f7ff f989 	bl	800187c <Buttons_Process>

	    OLED_Settings_TimeoutCheck();
 800256a:	f002 f88b 	bl	8004684 <OLED_Settings_TimeoutCheck>

	    OLED_UpdateDisplay();
 800256e:	f002 f8b3 	bl	80046d8 <OLED_UpdateDisplay>

	    if(apply_network_settings) {
 8002572:	4b49      	ldr	r3, [pc, #292]	@ (8002698 <main+0x204>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d019      	beq.n	80025ae <main+0x11a>
	        apply_network_settings = 0;  // сбрасываем флаг
 800257a:	4b47      	ldr	r3, [pc, #284]	@ (8002698 <main+0x204>)
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]

	        // временно опускаем интерфейс
	        netif_set_down(&gnetif);
 8002580:	4846      	ldr	r0, [pc, #280]	@ (800269c <main+0x208>)
 8002582:	f011 fbbf 	bl	8013d04 <netif_set_down>

	        // если был DHCP, остановим его
	        dhcp_stop(&gnetif);
 8002586:	4845      	ldr	r0, [pc, #276]	@ (800269c <main+0x208>)
 8002588:	f019 fbb0 	bl	801bcec <dhcp_stop>

	        if(new_dhcp_enabled) {
 800258c:	4b44      	ldr	r3, [pc, #272]	@ (80026a0 <main+0x20c>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d003      	beq.n	800259c <main+0x108>
	            // включаем DHCP
	            dhcp_start(&gnetif);
 8002594:	4841      	ldr	r0, [pc, #260]	@ (800269c <main+0x208>)
 8002596:	f018 fef9 	bl	801b38c <dhcp_start>
 800259a:	e005      	b.n	80025a8 <main+0x114>
	        } else {
	            // ставим статический IP
	            netif_set_addr(&gnetif, &new_ip, &new_mask, &new_gw);
 800259c:	4b41      	ldr	r3, [pc, #260]	@ (80026a4 <main+0x210>)
 800259e:	4a42      	ldr	r2, [pc, #264]	@ (80026a8 <main+0x214>)
 80025a0:	4942      	ldr	r1, [pc, #264]	@ (80026ac <main+0x218>)
 80025a2:	483e      	ldr	r0, [pc, #248]	@ (800269c <main+0x208>)
 80025a4:	f011 fac6 	bl	8013b34 <netif_set_addr>
	        }

	        // поднимаем интерфейс
	        netif_set_up(&gnetif);
 80025a8:	483c      	ldr	r0, [pc, #240]	@ (800269c <main+0x208>)
 80025aa:	f011 fb5b 	bl	8013c64 <netif_set_up>
	    }

	    	// Дата
	    	if(apply_date_settings)
 80025ae:	4b40      	ldr	r3, [pc, #256]	@ (80026b0 <main+0x21c>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d01b      	beq.n	80025ee <main+0x15a>
	    	{
	    	    apply_date_settings = 0;
 80025b6:	4b3e      	ldr	r3, [pc, #248]	@ (80026b0 <main+0x21c>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	701a      	strb	r2, [r3, #0]

	    	    RTC_DateTypeDef sDate = {0};
 80025bc:	2300      	movs	r3, #0
 80025be:	60fb      	str	r3, [r7, #12]
	    	    sDate.Year  = new_year;
 80025c0:	4b3c      	ldr	r3, [pc, #240]	@ (80026b4 <main+0x220>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	73fb      	strb	r3, [r7, #15]
	    	    sDate.Month = new_month;
 80025c6:	4b3c      	ldr	r3, [pc, #240]	@ (80026b8 <main+0x224>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	737b      	strb	r3, [r7, #13]
	    	    sDate.Date  = new_day;
 80025cc:	4b3b      	ldr	r3, [pc, #236]	@ (80026bc <main+0x228>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	73bb      	strb	r3, [r7, #14]
	    	    sDate.WeekDay = RTC_WEEKDAY_TUESDAY; // на основе даты можно вычислить
 80025d2:	2302      	movs	r3, #2
 80025d4:	733b      	strb	r3, [r7, #12]


	    	    if(HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80025d6:	f107 030c 	add.w	r3, r7, #12
 80025da:	2200      	movs	r2, #0
 80025dc:	4619      	mov	r1, r3
 80025de:	4838      	ldr	r0, [pc, #224]	@ (80026c0 <main+0x22c>)
 80025e0:	f006 fea5 	bl	800932e <HAL_RTC_SetDate>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <main+0x15a>
	    	        Error_Handler();
 80025ea:	f000 fac1 	bl	8002b70 <Error_Handler>
	    	}


	    	// Обработка ВРЕМЕНИ
	    	if(apply_time_settings)
 80025ee:	4b35      	ldr	r3, [pc, #212]	@ (80026c4 <main+0x230>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d023      	beq.n	800263e <main+0x1aa>
	    	{
	    	    apply_time_settings = 0; // Сбрасываем флаг сразу
 80025f6:	4b33      	ldr	r3, [pc, #204]	@ (80026c4 <main+0x230>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	701a      	strb	r2, [r3, #0]

	    	    RTC_TimeTypeDef sTime = {0};
 80025fc:	463b      	mov	r3, r7
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	605a      	str	r2, [r3, #4]
 8002604:	609a      	str	r2, [r3, #8]
	    	    sTime.Hours = new_hours;
 8002606:	4b30      	ldr	r3, [pc, #192]	@ (80026c8 <main+0x234>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	703b      	strb	r3, [r7, #0]
	    	    sTime.Minutes = new_minutes;
 800260c:	4b2f      	ldr	r3, [pc, #188]	@ (80026cc <main+0x238>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	707b      	strb	r3, [r7, #1]
	    	    sTime.Seconds = new_seconds;
 8002612:	4b2f      	ldr	r3, [pc, #188]	@ (80026d0 <main+0x23c>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	70bb      	strb	r3, [r7, #2]
	    	    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002618:	2300      	movs	r3, #0
 800261a:	607b      	str	r3, [r7, #4]
	    	    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800261c:	2300      	movs	r3, #0
 800261e:	60bb      	str	r3, [r7, #8]

	    	    // Пробуем BIN формат
	    	    if(HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002620:	463b      	mov	r3, r7
 8002622:	2200      	movs	r2, #0
 8002624:	4619      	mov	r1, r3
 8002626:	4826      	ldr	r0, [pc, #152]	@ (80026c0 <main+0x22c>)
 8002628:	f006 fd95 	bl	8009156 <HAL_RTC_SetTime>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d005      	beq.n	800263e <main+0x1aa>
	    	    {
	    	        // Если не получилось, пробуем BCD
	    	        if(HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002632:	463b      	mov	r3, r7
 8002634:	2201      	movs	r2, #1
 8002636:	4619      	mov	r1, r3
 8002638:	4821      	ldr	r0, [pc, #132]	@ (80026c0 <main+0x22c>)
 800263a:	f006 fd8c 	bl	8009156 <HAL_RTC_SetTime>
	    	            // Ошибка установки времени
	    	        }
	    	    }
	    	}
	        // Проверка применения SNMP
	        if (apply_snmp_settings)
 800263e:	4b25      	ldr	r3, [pc, #148]	@ (80026d4 <main+0x240>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d080      	beq.n	8002548 <main+0xb4>
	        {
	            apply_snmp_settings = 0;
 8002646:	4b23      	ldr	r3, [pc, #140]	@ (80026d4 <main+0x240>)
 8002648:	2200      	movs	r2, #0
 800264a:	701a      	strb	r2, [r3, #0]

	            // Здесь применяем community строки к стеку
	            // --- пример, если у тебя LwIP SNMPv2c ---
	            snmp_community[0] = snmp_read;
 800264c:	4b22      	ldr	r3, [pc, #136]	@ (80026d8 <main+0x244>)
 800264e:	4a23      	ldr	r2, [pc, #140]	@ (80026dc <main+0x248>)
 8002650:	601a      	str	r2, [r3, #0]
	            snmp_community_write[0] = snmp_write;
 8002652:	4b23      	ldr	r3, [pc, #140]	@ (80026e0 <main+0x24c>)
 8002654:	4a23      	ldr	r2, [pc, #140]	@ (80026e4 <main+0x250>)
 8002656:	601a      	str	r2, [r3, #0]
	            snmp_set_community_trap(snmp_trap);
 8002658:	4823      	ldr	r0, [pc, #140]	@ (80026e8 <main+0x254>)
 800265a:	f00d fac5 	bl	800fbe8 <snmp_set_community_trap>



	            // Если нужно — сохранить в Flash/EEPROM
	            Save_SNMP_Settings_To_Flash(snmp_read, snmp_write, snmp_trap);
 800265e:	4a22      	ldr	r2, [pc, #136]	@ (80026e8 <main+0x254>)
 8002660:	4920      	ldr	r1, [pc, #128]	@ (80026e4 <main+0x250>)
 8002662:	481e      	ldr	r0, [pc, #120]	@ (80026dc <main+0x248>)
 8002664:	f7ff fd86 	bl	8002174 <Save_SNMP_Settings_To_Flash>
	  MX_LWIP_Process();
 8002668:	e76e      	b.n	8002548 <main+0xb4>
 800266a:	bf00      	nop
 800266c:	20002a80 	.word	0x20002a80
 8002670:	08025fa0 	.word	0x08025fa0
 8002674:	08025fa8 	.word	0x08025fa8
 8002678:	08025fb0 	.word	0x08025fb0
 800267c:	08025fb8 	.word	0x08025fb8
 8002680:	08025fc0 	.word	0x08025fc0
 8002684:	20000008 	.word	0x20000008
 8002688:	20000388 	.word	0x20000388
 800268c:	2000290c 	.word	0x2000290c
 8002690:	20002a28 	.word	0x20002a28
 8002694:	20002908 	.word	0x20002908
 8002698:	20002a7d 	.word	0x20002a7d
 800269c:	20006f20 	.word	0x20006f20
 80026a0:	20002a7c 	.word	0x20002a7c
 80026a4:	20002a78 	.word	0x20002a78
 80026a8:	20002a74 	.word	0x20002a74
 80026ac:	20002a70 	.word	0x20002a70
 80026b0:	20002aab 	.word	0x20002aab
 80026b4:	20002aa8 	.word	0x20002aa8
 80026b8:	20002aa9 	.word	0x20002aa9
 80026bc:	20002aaa 	.word	0x20002aaa
 80026c0:	20002a08 	.word	0x20002a08
 80026c4:	20002aaf 	.word	0x20002aaf
 80026c8:	20002aac 	.word	0x20002aac
 80026cc:	20002aad 	.word	0x20002aad
 80026d0:	20002aae 	.word	0x20002aae
 80026d4:	20002ab0 	.word	0x20002ab0
 80026d8:	20000104 	.word	0x20000104
 80026dc:	20000010 	.word	0x20000010
 80026e0:	20000108 	.word	0x20000108
 80026e4:	20000030 	.word	0x20000030
 80026e8:	20000050 	.word	0x20000050

080026ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b096      	sub	sp, #88	@ 0x58
 80026f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80026f6:	2230      	movs	r2, #48	@ 0x30
 80026f8:	2100      	movs	r1, #0
 80026fa:	4618      	mov	r0, r3
 80026fc:	f01e f8a6 	bl	802084c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002700:	f107 0314 	add.w	r3, r7, #20
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	605a      	str	r2, [r3, #4]
 800270a:	609a      	str	r2, [r3, #8]
 800270c:	60da      	str	r2, [r3, #12]
 800270e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002710:	463b      	mov	r3, r7
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	605a      	str	r2, [r3, #4]
 8002718:	609a      	str	r2, [r3, #8]
 800271a:	60da      	str	r2, [r3, #12]
 800271c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800271e:	2309      	movs	r3, #9
 8002720:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002722:	2301      	movs	r3, #1
 8002724:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002726:	2301      	movs	r3, #1
 8002728:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800272a:	2302      	movs	r3, #2
 800272c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800272e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002732:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLM = 20;
 8002734:	2314      	movs	r3, #20
 8002736:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002738:	23c0      	movs	r3, #192	@ 0xc0
 800273a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800273c:	2302      	movs	r3, #2
 800273e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002740:	2304      	movs	r3, #4
 8002742:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002744:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002748:	4618      	mov	r0, r3
 800274a:	f005 ff59 	bl	8008600 <HAL_RCC_OscConfig>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8002754:	f000 fa0c 	bl	8002b70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002758:	230f      	movs	r3, #15
 800275a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800275c:	2302      	movs	r3, #2
 800275e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002760:	2300      	movs	r3, #0
 8002762:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002764:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002768:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800276a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800276e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002770:	f107 0314 	add.w	r3, r7, #20
 8002774:	2103      	movs	r1, #3
 8002776:	4618      	mov	r0, r3
 8002778:	f006 f996 	bl	8008aa8 <HAL_RCC_ClockConfig>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002782:	f000 f9f5 	bl	8002b70 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002786:	2304      	movs	r3, #4
 8002788:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800278a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800278e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002790:	463b      	mov	r3, r7
 8002792:	4618      	mov	r0, r3
 8002794:	f006 fb66 	bl	8008e64 <HAL_RCCEx_PeriphCLKConfig>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800279e:	f000 f9e7 	bl	8002b70 <Error_Handler>
  }
}
 80027a2:	bf00      	nop
 80027a4:	3758      	adds	r7, #88	@ 0x58
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80027b2:	463b      	mov	r3, r7
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	609a      	str	r2, [r3, #8]
 80027bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80027be:	4b32      	ldr	r3, [pc, #200]	@ (8002888 <MX_ADC1_Init+0xdc>)
 80027c0:	4a32      	ldr	r2, [pc, #200]	@ (800288c <MX_ADC1_Init+0xe0>)
 80027c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80027c4:	4b30      	ldr	r3, [pc, #192]	@ (8002888 <MX_ADC1_Init+0xdc>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80027ca:	4b2f      	ldr	r3, [pc, #188]	@ (8002888 <MX_ADC1_Init+0xdc>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80027d0:	4b2d      	ldr	r3, [pc, #180]	@ (8002888 <MX_ADC1_Init+0xdc>)
 80027d2:	2201      	movs	r2, #1
 80027d4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80027d6:	4b2c      	ldr	r3, [pc, #176]	@ (8002888 <MX_ADC1_Init+0xdc>)
 80027d8:	2200      	movs	r2, #0
 80027da:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80027dc:	4b2a      	ldr	r3, [pc, #168]	@ (8002888 <MX_ADC1_Init+0xdc>)
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80027e4:	4b28      	ldr	r3, [pc, #160]	@ (8002888 <MX_ADC1_Init+0xdc>)
 80027e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80027ec:	4b26      	ldr	r3, [pc, #152]	@ (8002888 <MX_ADC1_Init+0xdc>)
 80027ee:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80027f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80027f4:	4b24      	ldr	r3, [pc, #144]	@ (8002888 <MX_ADC1_Init+0xdc>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80027fa:	4b23      	ldr	r3, [pc, #140]	@ (8002888 <MX_ADC1_Init+0xdc>)
 80027fc:	2203      	movs	r2, #3
 80027fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002800:	4b21      	ldr	r3, [pc, #132]	@ (8002888 <MX_ADC1_Init+0xdc>)
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002808:	4b1f      	ldr	r3, [pc, #124]	@ (8002888 <MX_ADC1_Init+0xdc>)
 800280a:	2201      	movs	r2, #1
 800280c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800280e:	481e      	ldr	r0, [pc, #120]	@ (8002888 <MX_ADC1_Init+0xdc>)
 8002810:	f002 fc54 	bl	80050bc <HAL_ADC_Init>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800281a:	f000 f9a9 	bl	8002b70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800281e:	2305      	movs	r3, #5
 8002820:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002822:	2301      	movs	r3, #1
 8002824:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8002826:	2303      	movs	r3, #3
 8002828:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800282a:	463b      	mov	r3, r7
 800282c:	4619      	mov	r1, r3
 800282e:	4816      	ldr	r0, [pc, #88]	@ (8002888 <MX_ADC1_Init+0xdc>)
 8002830:	f002 fd78 	bl	8005324 <HAL_ADC_ConfigChannel>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800283a:	f000 f999 	bl	8002b70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800283e:	2306      	movs	r3, #6
 8002840:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002842:	2302      	movs	r3, #2
 8002844:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8002846:	2303      	movs	r3, #3
 8002848:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800284a:	463b      	mov	r3, r7
 800284c:	4619      	mov	r1, r3
 800284e:	480e      	ldr	r0, [pc, #56]	@ (8002888 <MX_ADC1_Init+0xdc>)
 8002850:	f002 fd68 	bl	8005324 <HAL_ADC_ConfigChannel>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800285a:	f000 f989 	bl	8002b70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800285e:	230a      	movs	r3, #10
 8002860:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002862:	2303      	movs	r3, #3
 8002864:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8002866:	2303      	movs	r3, #3
 8002868:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800286a:	463b      	mov	r3, r7
 800286c:	4619      	mov	r1, r3
 800286e:	4806      	ldr	r0, [pc, #24]	@ (8002888 <MX_ADC1_Init+0xdc>)
 8002870:	f002 fd58 	bl	8005324 <HAL_ADC_ConfigChannel>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800287a:	f000 f979 	bl	8002b70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800287e:	bf00      	nop
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	2000290c 	.word	0x2000290c
 800288c:	40012000 	.word	0x40012000

08002890 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002894:	4b12      	ldr	r3, [pc, #72]	@ (80028e0 <MX_I2C1_Init+0x50>)
 8002896:	4a13      	ldr	r2, [pc, #76]	@ (80028e4 <MX_I2C1_Init+0x54>)
 8002898:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800289a:	4b11      	ldr	r3, [pc, #68]	@ (80028e0 <MX_I2C1_Init+0x50>)
 800289c:	4a12      	ldr	r2, [pc, #72]	@ (80028e8 <MX_I2C1_Init+0x58>)
 800289e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80028a0:	4b0f      	ldr	r3, [pc, #60]	@ (80028e0 <MX_I2C1_Init+0x50>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80028a6:	4b0e      	ldr	r3, [pc, #56]	@ (80028e0 <MX_I2C1_Init+0x50>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028ac:	4b0c      	ldr	r3, [pc, #48]	@ (80028e0 <MX_I2C1_Init+0x50>)
 80028ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80028b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028b4:	4b0a      	ldr	r3, [pc, #40]	@ (80028e0 <MX_I2C1_Init+0x50>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80028ba:	4b09      	ldr	r3, [pc, #36]	@ (80028e0 <MX_I2C1_Init+0x50>)
 80028bc:	2200      	movs	r2, #0
 80028be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028c0:	4b07      	ldr	r3, [pc, #28]	@ (80028e0 <MX_I2C1_Init+0x50>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028c6:	4b06      	ldr	r3, [pc, #24]	@ (80028e0 <MX_I2C1_Init+0x50>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028cc:	4804      	ldr	r0, [pc, #16]	@ (80028e0 <MX_I2C1_Init+0x50>)
 80028ce:	f005 f9eb 	bl	8007ca8 <HAL_I2C_Init>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80028d8:	f000 f94a 	bl	8002b70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80028dc:	bf00      	nop
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	200029b4 	.word	0x200029b4
 80028e4:	40005400 	.word	0x40005400
 80028e8:	000186a0 	.word	0x000186a0

080028ec <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80028f2:	1d3b      	adds	r3, r7, #4
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	605a      	str	r2, [r3, #4]
 80028fa:	609a      	str	r2, [r3, #8]
  RTC_DateTypeDef sDate = {0};
 80028fc:	2300      	movs	r3, #0
 80028fe:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002900:	4b24      	ldr	r3, [pc, #144]	@ (8002994 <MX_RTC_Init+0xa8>)
 8002902:	4a25      	ldr	r2, [pc, #148]	@ (8002998 <MX_RTC_Init+0xac>)
 8002904:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002906:	4b23      	ldr	r3, [pc, #140]	@ (8002994 <MX_RTC_Init+0xa8>)
 8002908:	2200      	movs	r2, #0
 800290a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800290c:	4b21      	ldr	r3, [pc, #132]	@ (8002994 <MX_RTC_Init+0xa8>)
 800290e:	227f      	movs	r2, #127	@ 0x7f
 8002910:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002912:	4b20      	ldr	r3, [pc, #128]	@ (8002994 <MX_RTC_Init+0xa8>)
 8002914:	22ff      	movs	r2, #255	@ 0xff
 8002916:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002918:	4b1e      	ldr	r3, [pc, #120]	@ (8002994 <MX_RTC_Init+0xa8>)
 800291a:	2200      	movs	r2, #0
 800291c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800291e:	4b1d      	ldr	r3, [pc, #116]	@ (8002994 <MX_RTC_Init+0xa8>)
 8002920:	2200      	movs	r2, #0
 8002922:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002924:	4b1b      	ldr	r3, [pc, #108]	@ (8002994 <MX_RTC_Init+0xa8>)
 8002926:	2200      	movs	r2, #0
 8002928:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800292a:	481a      	ldr	r0, [pc, #104]	@ (8002994 <MX_RTC_Init+0xa8>)
 800292c:	f006 fb90 	bl	8009050 <HAL_RTC_Init>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <MX_RTC_Init+0x4e>
  {
    Error_Handler();
 8002936:	f000 f91b 	bl	8002b70 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800293a:	2300      	movs	r3, #0
 800293c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800293e:	2300      	movs	r3, #0
 8002940:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002942:	2300      	movs	r3, #0
 8002944:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002946:	2300      	movs	r3, #0
 8002948:	60bb      	str	r3, [r7, #8]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800294a:	2300      	movs	r3, #0
 800294c:	60fb      	str	r3, [r7, #12]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800294e:	1d3b      	adds	r3, r7, #4
 8002950:	2201      	movs	r2, #1
 8002952:	4619      	mov	r1, r3
 8002954:	480f      	ldr	r0, [pc, #60]	@ (8002994 <MX_RTC_Init+0xa8>)
 8002956:	f006 fbfe 	bl	8009156 <HAL_RTC_SetTime>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <MX_RTC_Init+0x78>
  {
    Error_Handler();
 8002960:	f000 f906 	bl	8002b70 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002964:	2301      	movs	r3, #1
 8002966:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002968:	2301      	movs	r3, #1
 800296a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800296c:	2301      	movs	r3, #1
 800296e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002970:	2300      	movs	r3, #0
 8002972:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002974:	463b      	mov	r3, r7
 8002976:	2201      	movs	r2, #1
 8002978:	4619      	mov	r1, r3
 800297a:	4806      	ldr	r0, [pc, #24]	@ (8002994 <MX_RTC_Init+0xa8>)
 800297c:	f006 fcd7 	bl	800932e <HAL_RTC_SetDate>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <MX_RTC_Init+0x9e>
  {
    Error_Handler();
 8002986:	f000 f8f3 	bl	8002b70 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800298a:	bf00      	nop
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	20002a08 	.word	0x20002a08
 8002998:	40002800 	.word	0x40002800

0800299c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029a2:	f107 0308 	add.w	r3, r7, #8
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	605a      	str	r2, [r3, #4]
 80029ac:	609a      	str	r2, [r3, #8]
 80029ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029b0:	463b      	mov	r3, r7
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80029b8:	4b1c      	ldr	r3, [pc, #112]	@ (8002a2c <MX_TIM3_Init+0x90>)
 80029ba:	4a1d      	ldr	r2, [pc, #116]	@ (8002a30 <MX_TIM3_Init+0x94>)
 80029bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 59;
 80029be:	4b1b      	ldr	r3, [pc, #108]	@ (8002a2c <MX_TIM3_Init+0x90>)
 80029c0:	223b      	movs	r2, #59	@ 0x3b
 80029c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029c4:	4b19      	ldr	r3, [pc, #100]	@ (8002a2c <MX_TIM3_Init+0x90>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80029ca:	4b18      	ldr	r3, [pc, #96]	@ (8002a2c <MX_TIM3_Init+0x90>)
 80029cc:	2263      	movs	r2, #99	@ 0x63
 80029ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029d0:	4b16      	ldr	r3, [pc, #88]	@ (8002a2c <MX_TIM3_Init+0x90>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80029d6:	4b15      	ldr	r3, [pc, #84]	@ (8002a2c <MX_TIM3_Init+0x90>)
 80029d8:	2280      	movs	r2, #128	@ 0x80
 80029da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80029dc:	4813      	ldr	r0, [pc, #76]	@ (8002a2c <MX_TIM3_Init+0x90>)
 80029de:	f006 fe5d 	bl	800969c <HAL_TIM_Base_Init>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80029e8:	f000 f8c2 	bl	8002b70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80029f2:	f107 0308 	add.w	r3, r7, #8
 80029f6:	4619      	mov	r1, r3
 80029f8:	480c      	ldr	r0, [pc, #48]	@ (8002a2c <MX_TIM3_Init+0x90>)
 80029fa:	f006 ff05 	bl	8009808 <HAL_TIM_ConfigClockSource>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8002a04:	f000 f8b4 	bl	8002b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002a08:	2320      	movs	r3, #32
 8002a0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a10:	463b      	mov	r3, r7
 8002a12:	4619      	mov	r1, r3
 8002a14:	4805      	ldr	r0, [pc, #20]	@ (8002a2c <MX_TIM3_Init+0x90>)
 8002a16:	f007 f8ff 	bl	8009c18 <HAL_TIMEx_MasterConfigSynchronization>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002a20:	f000 f8a6 	bl	8002b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002a24:	bf00      	nop
 8002a26:	3718      	adds	r7, #24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	20002a28 	.word	0x20002a28
 8002a30:	40000400 	.word	0x40000400

08002a34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	607b      	str	r3, [r7, #4]
 8002a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8002a70 <MX_DMA_Init+0x3c>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a42:	4a0b      	ldr	r2, [pc, #44]	@ (8002a70 <MX_DMA_Init+0x3c>)
 8002a44:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a4a:	4b09      	ldr	r3, [pc, #36]	@ (8002a70 <MX_DMA_Init+0x3c>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a52:	607b      	str	r3, [r7, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002a56:	2200      	movs	r2, #0
 8002a58:	2100      	movs	r1, #0
 8002a5a:	2038      	movs	r0, #56	@ 0x38
 8002a5c:	f002 ffe1 	bl	8005a22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002a60:	2038      	movs	r0, #56	@ 0x38
 8002a62:	f002 fffa 	bl	8005a5a <HAL_NVIC_EnableIRQ>

}
 8002a66:	bf00      	nop
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40023800 	.word	0x40023800

08002a74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08a      	sub	sp, #40	@ 0x28
 8002a78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a7a:	f107 0314 	add.w	r3, r7, #20
 8002a7e:	2200      	movs	r2, #0
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	605a      	str	r2, [r3, #4]
 8002a84:	609a      	str	r2, [r3, #8]
 8002a86:	60da      	str	r2, [r3, #12]
 8002a88:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	613b      	str	r3, [r7, #16]
 8002a8e:	4b36      	ldr	r3, [pc, #216]	@ (8002b68 <MX_GPIO_Init+0xf4>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a92:	4a35      	ldr	r2, [pc, #212]	@ (8002b68 <MX_GPIO_Init+0xf4>)
 8002a94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a9a:	4b33      	ldr	r3, [pc, #204]	@ (8002b68 <MX_GPIO_Init+0xf4>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aa2:	613b      	str	r3, [r7, #16]
 8002aa4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	4b2f      	ldr	r3, [pc, #188]	@ (8002b68 <MX_GPIO_Init+0xf4>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aae:	4a2e      	ldr	r2, [pc, #184]	@ (8002b68 <MX_GPIO_Init+0xf4>)
 8002ab0:	f043 0304 	orr.w	r3, r3, #4
 8002ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ab6:	4b2c      	ldr	r3, [pc, #176]	@ (8002b68 <MX_GPIO_Init+0xf4>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aba:	f003 0304 	and.w	r3, r3, #4
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	4b28      	ldr	r3, [pc, #160]	@ (8002b68 <MX_GPIO_Init+0xf4>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aca:	4a27      	ldr	r2, [pc, #156]	@ (8002b68 <MX_GPIO_Init+0xf4>)
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ad2:	4b25      	ldr	r3, [pc, #148]	@ (8002b68 <MX_GPIO_Init+0xf4>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	60bb      	str	r3, [r7, #8]
 8002adc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	607b      	str	r3, [r7, #4]
 8002ae2:	4b21      	ldr	r3, [pc, #132]	@ (8002b68 <MX_GPIO_Init+0xf4>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae6:	4a20      	ldr	r2, [pc, #128]	@ (8002b68 <MX_GPIO_Init+0xf4>)
 8002ae8:	f043 0302 	orr.w	r3, r3, #2
 8002aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aee:	4b1e      	ldr	r3, [pc, #120]	@ (8002b68 <MX_GPIO_Init+0xf4>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	607b      	str	r3, [r7, #4]
 8002af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002afa:	2300      	movs	r3, #0
 8002afc:	603b      	str	r3, [r7, #0]
 8002afe:	4b1a      	ldr	r3, [pc, #104]	@ (8002b68 <MX_GPIO_Init+0xf4>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b02:	4a19      	ldr	r2, [pc, #100]	@ (8002b68 <MX_GPIO_Init+0xf4>)
 8002b04:	f043 0308 	orr.w	r3, r3, #8
 8002b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b0a:	4b17      	ldr	r3, [pc, #92]	@ (8002b68 <MX_GPIO_Init+0xf4>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	603b      	str	r3, [r7, #0]
 8002b14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002b16:	230e      	movs	r3, #14
 8002b18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b1a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002b1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b20:	2301      	movs	r3, #1
 8002b22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b24:	f107 0314 	add.w	r3, r7, #20
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4810      	ldr	r0, [pc, #64]	@ (8002b6c <MX_GPIO_Init+0xf8>)
 8002b2c:	f004 feee 	bl	800790c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002b30:	2200      	movs	r2, #0
 8002b32:	2105      	movs	r1, #5
 8002b34:	2007      	movs	r0, #7
 8002b36:	f002 ff74 	bl	8005a22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002b3a:	2007      	movs	r0, #7
 8002b3c:	f002 ff8d 	bl	8005a5a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002b40:	2200      	movs	r2, #0
 8002b42:	2105      	movs	r1, #5
 8002b44:	2008      	movs	r0, #8
 8002b46:	f002 ff6c 	bl	8005a22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002b4a:	2008      	movs	r0, #8
 8002b4c:	f002 ff85 	bl	8005a5a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8002b50:	2200      	movs	r2, #0
 8002b52:	2105      	movs	r1, #5
 8002b54:	2009      	movs	r0, #9
 8002b56:	f002 ff64 	bl	8005a22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002b5a:	2009      	movs	r0, #9
 8002b5c:	f002 ff7d 	bl	8005a5a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002b60:	bf00      	nop
 8002b62:	3728      	adds	r7, #40	@ 0x28
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	40020c00 	.word	0x40020c00

08002b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002b74:	b672      	cpsid	i
}
 8002b76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b78:	bf00      	nop
 8002b7a:	e7fd      	b.n	8002b78 <Error_Handler+0x8>
 8002b7c:	0000      	movs	r0, r0
	...

08002b80 <SignalProcessor_Update>:
float voltage2 = 0.0f;
float current  = 0.0f;
float selected_voltage = 0.0f;

void SignalProcessor_Update(uint32_t *adc_buf, size_t samples)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b090      	sub	sp, #64	@ 0x40
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
    double sum_v1 = 0.0;
 8002b8a:	f04f 0200 	mov.w	r2, #0
 8002b8e:	f04f 0300 	mov.w	r3, #0
 8002b92:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double sum_v2 = 0.0;
 8002b96:	f04f 0200 	mov.w	r2, #0
 8002b9a:	f04f 0300 	mov.w	r3, #0
 8002b9e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    double sum_i  = 0.0;
 8002ba2:	f04f 0200 	mov.w	r2, #0
 8002ba6:	f04f 0300 	mov.w	r3, #0
 8002baa:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    for (size_t n = 0; n < samples; n++) {
 8002bae:	2300      	movs	r3, #0
 8002bb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bb2:	e095      	b.n	8002ce0 <SignalProcessor_Update+0x160>
        // Буфер имеет вид [ch1, ch2, ch3, ch1, ch2, ch3, ...]
        uint32_t raw1 = adc_buf[n * 3 + 0];
 8002bb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	4413      	add	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	623b      	str	r3, [r7, #32]
        uint32_t raw2 = adc_buf[n * 3 + 1];
 8002bc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bca:	4613      	mov	r3, r2
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	4413      	add	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	3304      	adds	r3, #4
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	61fb      	str	r3, [r7, #28]
        uint32_t raw3 = adc_buf[n * 3 + 2];
 8002bdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bde:	4613      	mov	r3, r2
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	4413      	add	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	3308      	adds	r3, #8
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	4413      	add	r3, r2
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	61bb      	str	r3, [r7, #24]

        // Переводим в напряжение на пине (0…3.3 В)
        float v1 = (raw1 * VREF / ADC_RESOLUTION) - VREF_HALF;
 8002bf0:	6a38      	ldr	r0, [r7, #32]
 8002bf2:	f7fe f895 	bl	8000d20 <__aeabi_ui2f>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	49a1      	ldr	r1, [pc, #644]	@ (8002e80 <SignalProcessor_Update+0x300>)
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fe f8e8 	bl	8000dd0 <__aeabi_fmul>
 8002c00:	4603      	mov	r3, r0
 8002c02:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7fe f996 	bl	8000f38 <__aeabi_fdiv>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	499d      	ldr	r1, [pc, #628]	@ (8002e84 <SignalProcessor_Update+0x304>)
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7fd ffd3 	bl	8000bbc <__aeabi_fsub>
 8002c16:	4603      	mov	r3, r0
 8002c18:	617b      	str	r3, [r7, #20]
        float v2 = (raw2 * VREF / ADC_RESOLUTION) - VREF_HALF;
 8002c1a:	69f8      	ldr	r0, [r7, #28]
 8002c1c:	f7fe f880 	bl	8000d20 <__aeabi_ui2f>
 8002c20:	4603      	mov	r3, r0
 8002c22:	4997      	ldr	r1, [pc, #604]	@ (8002e80 <SignalProcessor_Update+0x300>)
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7fe f8d3 	bl	8000dd0 <__aeabi_fmul>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7fe f981 	bl	8000f38 <__aeabi_fdiv>
 8002c36:	4603      	mov	r3, r0
 8002c38:	4992      	ldr	r1, [pc, #584]	@ (8002e84 <SignalProcessor_Update+0x304>)
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7fd ffbe 	bl	8000bbc <__aeabi_fsub>
 8002c40:	4603      	mov	r3, r0
 8002c42:	613b      	str	r3, [r7, #16]
        float i  = (raw3 * VREF / ADC_RESOLUTION) - VREF_HALF;
 8002c44:	69b8      	ldr	r0, [r7, #24]
 8002c46:	f7fe f86b 	bl	8000d20 <__aeabi_ui2f>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	498c      	ldr	r1, [pc, #560]	@ (8002e80 <SignalProcessor_Update+0x300>)
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fe f8be 	bl	8000dd0 <__aeabi_fmul>
 8002c54:	4603      	mov	r3, r0
 8002c56:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fe f96c 	bl	8000f38 <__aeabi_fdiv>
 8002c60:	4603      	mov	r3, r0
 8002c62:	4988      	ldr	r1, [pc, #544]	@ (8002e84 <SignalProcessor_Update+0x304>)
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7fd ffa9 	bl	8000bbc <__aeabi_fsub>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	60fb      	str	r3, [r7, #12]

        // Суммируем квадраты
        sum_v1 += (double)(v1 * v1);
 8002c6e:	6979      	ldr	r1, [r7, #20]
 8002c70:	6978      	ldr	r0, [r7, #20]
 8002c72:	f7fe f8ad 	bl	8000dd0 <__aeabi_fmul>
 8002c76:	4603      	mov	r3, r0
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fd fc1b 	bl	80004b4 <__aeabi_f2d>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	460b      	mov	r3, r1
 8002c82:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002c86:	f7fd fab7 	bl	80001f8 <__adddf3>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
        sum_v2 += (double)(v2 * v2);
 8002c92:	6939      	ldr	r1, [r7, #16]
 8002c94:	6938      	ldr	r0, [r7, #16]
 8002c96:	f7fe f89b 	bl	8000dd0 <__aeabi_fmul>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7fd fc09 	bl	80004b4 <__aeabi_f2d>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002caa:	f7fd faa5 	bl	80001f8 <__adddf3>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
        sum_i  += (double)(i  * i);
 8002cb6:	68f9      	ldr	r1, [r7, #12]
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f7fe f889 	bl	8000dd0 <__aeabi_fmul>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fd fbf7 	bl	80004b4 <__aeabi_f2d>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	460b      	mov	r3, r1
 8002cca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002cce:	f7fd fa93 	bl	80001f8 <__adddf3>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    for (size_t n = 0; n < samples; n++) {
 8002cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cdc:	3301      	adds	r3, #1
 8002cde:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ce0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	f4ff af65 	bcc.w	8002bb4 <SignalProcessor_Update+0x34>
    }

    // RMS
    voltage1 = (sqrtf(sum_v1 / samples) - 0.82)*780;
 8002cea:	6838      	ldr	r0, [r7, #0]
 8002cec:	f7fd fbc0 	bl	8000470 <__aeabi_ui2d>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002cf8:	f7fd fd5e 	bl	80007b8 <__aeabi_ddiv>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4610      	mov	r0, r2
 8002d02:	4619      	mov	r1, r3
 8002d04:	f7fd ff06 	bl	8000b14 <__aeabi_d2f>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f020 f9f6 	bl	80230fc <sqrtf>
 8002d10:	4603      	mov	r3, r0
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fd fbce 	bl	80004b4 <__aeabi_f2d>
 8002d18:	a357      	add	r3, pc, #348	@ (adr r3, 8002e78 <SignalProcessor_Update+0x2f8>)
 8002d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1e:	f7fd fa69 	bl	80001f4 <__aeabi_dsub>
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	4610      	mov	r0, r2
 8002d28:	4619      	mov	r1, r3
 8002d2a:	f04f 0200 	mov.w	r2, #0
 8002d2e:	4b56      	ldr	r3, [pc, #344]	@ (8002e88 <SignalProcessor_Update+0x308>)
 8002d30:	f7fd fc18 	bl	8000564 <__aeabi_dmul>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4610      	mov	r0, r2
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	f7fd feea 	bl	8000b14 <__aeabi_d2f>
 8002d40:	4603      	mov	r3, r0
 8002d42:	4a52      	ldr	r2, [pc, #328]	@ (8002e8c <SignalProcessor_Update+0x30c>)
 8002d44:	6013      	str	r3, [r2, #0]
    if (voltage1 < 20.0f) {
 8002d46:	4b51      	ldr	r3, [pc, #324]	@ (8002e8c <SignalProcessor_Update+0x30c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4951      	ldr	r1, [pc, #324]	@ (8002e90 <SignalProcessor_Update+0x310>)
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7fe f9dd 	bl	800110c <__aeabi_fcmplt>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <SignalProcessor_Update+0x1e0>
        voltage1 = 0.0f;
 8002d58:	4b4c      	ldr	r3, [pc, #304]	@ (8002e8c <SignalProcessor_Update+0x30c>)
 8002d5a:	f04f 0200 	mov.w	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]
    }
    voltage2 = (sqrtf(sum_v2 / samples) - 0.82)*780;
 8002d60:	6838      	ldr	r0, [r7, #0]
 8002d62:	f7fd fb85 	bl	8000470 <__aeabi_ui2d>
 8002d66:	4602      	mov	r2, r0
 8002d68:	460b      	mov	r3, r1
 8002d6a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002d6e:	f7fd fd23 	bl	80007b8 <__aeabi_ddiv>
 8002d72:	4602      	mov	r2, r0
 8002d74:	460b      	mov	r3, r1
 8002d76:	4610      	mov	r0, r2
 8002d78:	4619      	mov	r1, r3
 8002d7a:	f7fd fecb 	bl	8000b14 <__aeabi_d2f>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	4618      	mov	r0, r3
 8002d82:	f020 f9bb 	bl	80230fc <sqrtf>
 8002d86:	4603      	mov	r3, r0
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7fd fb93 	bl	80004b4 <__aeabi_f2d>
 8002d8e:	a33a      	add	r3, pc, #232	@ (adr r3, 8002e78 <SignalProcessor_Update+0x2f8>)
 8002d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d94:	f7fd fa2e 	bl	80001f4 <__aeabi_dsub>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	4610      	mov	r0, r2
 8002d9e:	4619      	mov	r1, r3
 8002da0:	f04f 0200 	mov.w	r2, #0
 8002da4:	4b38      	ldr	r3, [pc, #224]	@ (8002e88 <SignalProcessor_Update+0x308>)
 8002da6:	f7fd fbdd 	bl	8000564 <__aeabi_dmul>
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	4610      	mov	r0, r2
 8002db0:	4619      	mov	r1, r3
 8002db2:	f7fd feaf 	bl	8000b14 <__aeabi_d2f>
 8002db6:	4603      	mov	r3, r0
 8002db8:	4a36      	ldr	r2, [pc, #216]	@ (8002e94 <SignalProcessor_Update+0x314>)
 8002dba:	6013      	str	r3, [r2, #0]
    if (voltage2 < 20.0f) {
 8002dbc:	4b35      	ldr	r3, [pc, #212]	@ (8002e94 <SignalProcessor_Update+0x314>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4933      	ldr	r1, [pc, #204]	@ (8002e90 <SignalProcessor_Update+0x310>)
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fe f9a2 	bl	800110c <__aeabi_fcmplt>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <SignalProcessor_Update+0x256>
        voltage2 = 0.0f;
 8002dce:	4b31      	ldr	r3, [pc, #196]	@ (8002e94 <SignalProcessor_Update+0x314>)
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]
    }
	current  = (sqrtf(sum_i  / samples) - 0.82)*25;
 8002dd6:	6838      	ldr	r0, [r7, #0]
 8002dd8:	f7fd fb4a 	bl	8000470 <__aeabi_ui2d>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002de4:	f7fd fce8 	bl	80007b8 <__aeabi_ddiv>
 8002de8:	4602      	mov	r2, r0
 8002dea:	460b      	mov	r3, r1
 8002dec:	4610      	mov	r0, r2
 8002dee:	4619      	mov	r1, r3
 8002df0:	f7fd fe90 	bl	8000b14 <__aeabi_d2f>
 8002df4:	4603      	mov	r3, r0
 8002df6:	4618      	mov	r0, r3
 8002df8:	f020 f980 	bl	80230fc <sqrtf>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fd fb58 	bl	80004b4 <__aeabi_f2d>
 8002e04:	a31c      	add	r3, pc, #112	@ (adr r3, 8002e78 <SignalProcessor_Update+0x2f8>)
 8002e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0a:	f7fd f9f3 	bl	80001f4 <__aeabi_dsub>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4610      	mov	r0, r2
 8002e14:	4619      	mov	r1, r3
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	4b1f      	ldr	r3, [pc, #124]	@ (8002e98 <SignalProcessor_Update+0x318>)
 8002e1c:	f7fd fba2 	bl	8000564 <__aeabi_dmul>
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	4610      	mov	r0, r2
 8002e26:	4619      	mov	r1, r3
 8002e28:	f7fd fe74 	bl	8000b14 <__aeabi_d2f>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	4a1b      	ldr	r2, [pc, #108]	@ (8002e9c <SignalProcessor_Update+0x31c>)
 8002e30:	6013      	str	r3, [r2, #0]
    if (current < 0.205f) {
 8002e32:	4b1a      	ldr	r3, [pc, #104]	@ (8002e9c <SignalProcessor_Update+0x31c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	491a      	ldr	r1, [pc, #104]	@ (8002ea0 <SignalProcessor_Update+0x320>)
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7fe f967 	bl	800110c <__aeabi_fcmplt>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <SignalProcessor_Update+0x2cc>
        current = 0.0f;
 8002e44:	4b15      	ldr	r3, [pc, #84]	@ (8002e9c <SignalProcessor_Update+0x31c>)
 8002e46:	f04f 0200 	mov.w	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]
    }

    // Выбор активного напряжения
    if (voltage1 > 50.0f) {
 8002e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8002e8c <SignalProcessor_Update+0x30c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4914      	ldr	r1, [pc, #80]	@ (8002ea4 <SignalProcessor_Update+0x324>)
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fe f978 	bl	8001148 <__aeabi_fcmpgt>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d004      	beq.n	8002e68 <SignalProcessor_Update+0x2e8>
        selected_voltage = voltage1;
 8002e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e8c <SignalProcessor_Update+0x30c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a11      	ldr	r2, [pc, #68]	@ (8002ea8 <SignalProcessor_Update+0x328>)
 8002e64:	6013      	str	r3, [r2, #0]
    } else {
        selected_voltage = voltage2;
    }
}
 8002e66:	e003      	b.n	8002e70 <SignalProcessor_Update+0x2f0>
        selected_voltage = voltage2;
 8002e68:	4b0a      	ldr	r3, [pc, #40]	@ (8002e94 <SignalProcessor_Update+0x314>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a0e      	ldr	r2, [pc, #56]	@ (8002ea8 <SignalProcessor_Update+0x328>)
 8002e6e:	6013      	str	r3, [r2, #0]
}
 8002e70:	bf00      	nop
 8002e72:	3740      	adds	r7, #64	@ 0x40
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	a3d70a3d 	.word	0xa3d70a3d
 8002e7c:	3fea3d70 	.word	0x3fea3d70
 8002e80:	40533333 	.word	0x40533333
 8002e84:	3fd33333 	.word	0x3fd33333
 8002e88:	40886000 	.word	0x40886000
 8002e8c:	20006ac0 	.word	0x20006ac0
 8002e90:	41a00000 	.word	0x41a00000
 8002e94:	20006ac4 	.word	0x20006ac4
 8002e98:	40390000 	.word	0x40390000
 8002e9c:	20006ac8 	.word	0x20006ac8
 8002ea0:	3e51eb85 	.word	0x3e51eb85
 8002ea4:	42480000 	.word	0x42480000
 8002ea8:	20006acc 	.word	0x20006acc

08002eac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	607b      	str	r3, [r7, #4]
 8002eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8002ef4 <HAL_MspInit+0x48>)
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eba:	4a0e      	ldr	r2, [pc, #56]	@ (8002ef4 <HAL_MspInit+0x48>)
 8002ebc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ec0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8002ef4 <HAL_MspInit+0x48>)
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002eca:	607b      	str	r3, [r7, #4]
 8002ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	603b      	str	r3, [r7, #0]
 8002ed2:	4b08      	ldr	r3, [pc, #32]	@ (8002ef4 <HAL_MspInit+0x48>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed6:	4a07      	ldr	r2, [pc, #28]	@ (8002ef4 <HAL_MspInit+0x48>)
 8002ed8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002edc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ede:	4b05      	ldr	r3, [pc, #20]	@ (8002ef4 <HAL_MspInit+0x48>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ee6:	603b      	str	r3, [r7, #0]
 8002ee8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr
 8002ef4:	40023800 	.word	0x40023800

08002ef8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b08a      	sub	sp, #40	@ 0x28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f00:	f107 0314 	add.w	r3, r7, #20
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	605a      	str	r2, [r3, #4]
 8002f0a:	609a      	str	r2, [r3, #8]
 8002f0c:	60da      	str	r2, [r3, #12]
 8002f0e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a3c      	ldr	r2, [pc, #240]	@ (8003008 <HAL_ADC_MspInit+0x110>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d172      	bne.n	8003000 <HAL_ADC_MspInit+0x108>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	613b      	str	r3, [r7, #16]
 8002f1e:	4b3b      	ldr	r3, [pc, #236]	@ (800300c <HAL_ADC_MspInit+0x114>)
 8002f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f22:	4a3a      	ldr	r2, [pc, #232]	@ (800300c <HAL_ADC_MspInit+0x114>)
 8002f24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f28:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f2a:	4b38      	ldr	r3, [pc, #224]	@ (800300c <HAL_ADC_MspInit+0x114>)
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f32:	613b      	str	r3, [r7, #16]
 8002f34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f36:	2300      	movs	r3, #0
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	4b34      	ldr	r3, [pc, #208]	@ (800300c <HAL_ADC_MspInit+0x114>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3e:	4a33      	ldr	r2, [pc, #204]	@ (800300c <HAL_ADC_MspInit+0x114>)
 8002f40:	f043 0304 	orr.w	r3, r3, #4
 8002f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f46:	4b31      	ldr	r3, [pc, #196]	@ (800300c <HAL_ADC_MspInit+0x114>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f52:	2300      	movs	r3, #0
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	4b2d      	ldr	r3, [pc, #180]	@ (800300c <HAL_ADC_MspInit+0x114>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5a:	4a2c      	ldr	r2, [pc, #176]	@ (800300c <HAL_ADC_MspInit+0x114>)
 8002f5c:	f043 0301 	orr.w	r3, r3, #1
 8002f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f62:	4b2a      	ldr	r3, [pc, #168]	@ (800300c <HAL_ADC_MspInit+0x114>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	60bb      	str	r3, [r7, #8]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f72:	2303      	movs	r3, #3
 8002f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f76:	2300      	movs	r3, #0
 8002f78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f7a:	f107 0314 	add.w	r3, r7, #20
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4823      	ldr	r0, [pc, #140]	@ (8003010 <HAL_ADC_MspInit+0x118>)
 8002f82:	f004 fcc3 	bl	800790c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002f86:	2360      	movs	r3, #96	@ 0x60
 8002f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f92:	f107 0314 	add.w	r3, r7, #20
 8002f96:	4619      	mov	r1, r3
 8002f98:	481e      	ldr	r0, [pc, #120]	@ (8003014 <HAL_ADC_MspInit+0x11c>)
 8002f9a:	f004 fcb7 	bl	800790c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8003018 <HAL_ADC_MspInit+0x120>)
 8002fa0:	4a1e      	ldr	r2, [pc, #120]	@ (800301c <HAL_ADC_MspInit+0x124>)
 8002fa2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002fa4:	4b1c      	ldr	r3, [pc, #112]	@ (8003018 <HAL_ADC_MspInit+0x120>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002faa:	4b1b      	ldr	r3, [pc, #108]	@ (8003018 <HAL_ADC_MspInit+0x120>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fb0:	4b19      	ldr	r3, [pc, #100]	@ (8003018 <HAL_ADC_MspInit+0x120>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002fb6:	4b18      	ldr	r3, [pc, #96]	@ (8003018 <HAL_ADC_MspInit+0x120>)
 8002fb8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fbc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002fbe:	4b16      	ldr	r3, [pc, #88]	@ (8003018 <HAL_ADC_MspInit+0x120>)
 8002fc0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002fc4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002fc6:	4b14      	ldr	r3, [pc, #80]	@ (8003018 <HAL_ADC_MspInit+0x120>)
 8002fc8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002fcc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002fce:	4b12      	ldr	r3, [pc, #72]	@ (8003018 <HAL_ADC_MspInit+0x120>)
 8002fd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002fd4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002fd6:	4b10      	ldr	r3, [pc, #64]	@ (8003018 <HAL_ADC_MspInit+0x120>)
 8002fd8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002fdc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fde:	4b0e      	ldr	r3, [pc, #56]	@ (8003018 <HAL_ADC_MspInit+0x120>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002fe4:	480c      	ldr	r0, [pc, #48]	@ (8003018 <HAL_ADC_MspInit+0x120>)
 8002fe6:	f002 fd53 	bl	8005a90 <HAL_DMA_Init>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8002ff0:	f7ff fdbe 	bl	8002b70 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a08      	ldr	r2, [pc, #32]	@ (8003018 <HAL_ADC_MspInit+0x120>)
 8002ff8:	639a      	str	r2, [r3, #56]	@ 0x38
 8002ffa:	4a07      	ldr	r2, [pc, #28]	@ (8003018 <HAL_ADC_MspInit+0x120>)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003000:	bf00      	nop
 8003002:	3728      	adds	r7, #40	@ 0x28
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40012000 	.word	0x40012000
 800300c:	40023800 	.word	0x40023800
 8003010:	40020800 	.word	0x40020800
 8003014:	40020000 	.word	0x40020000
 8003018:	20002954 	.word	0x20002954
 800301c:	40026410 	.word	0x40026410

08003020 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b08a      	sub	sp, #40	@ 0x28
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003028:	f107 0314 	add.w	r3, r7, #20
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	605a      	str	r2, [r3, #4]
 8003032:	609a      	str	r2, [r3, #8]
 8003034:	60da      	str	r2, [r3, #12]
 8003036:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a19      	ldr	r2, [pc, #100]	@ (80030a4 <HAL_I2C_MspInit+0x84>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d12b      	bne.n	800309a <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003042:	2300      	movs	r3, #0
 8003044:	613b      	str	r3, [r7, #16]
 8003046:	4b18      	ldr	r3, [pc, #96]	@ (80030a8 <HAL_I2C_MspInit+0x88>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304a:	4a17      	ldr	r2, [pc, #92]	@ (80030a8 <HAL_I2C_MspInit+0x88>)
 800304c:	f043 0302 	orr.w	r3, r3, #2
 8003050:	6313      	str	r3, [r2, #48]	@ 0x30
 8003052:	4b15      	ldr	r3, [pc, #84]	@ (80030a8 <HAL_I2C_MspInit+0x88>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	613b      	str	r3, [r7, #16]
 800305c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800305e:	23c0      	movs	r3, #192	@ 0xc0
 8003060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003062:	2312      	movs	r3, #18
 8003064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003066:	2300      	movs	r3, #0
 8003068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800306a:	2303      	movs	r3, #3
 800306c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800306e:	2304      	movs	r3, #4
 8003070:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003072:	f107 0314 	add.w	r3, r7, #20
 8003076:	4619      	mov	r1, r3
 8003078:	480c      	ldr	r0, [pc, #48]	@ (80030ac <HAL_I2C_MspInit+0x8c>)
 800307a:	f004 fc47 	bl	800790c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800307e:	2300      	movs	r3, #0
 8003080:	60fb      	str	r3, [r7, #12]
 8003082:	4b09      	ldr	r3, [pc, #36]	@ (80030a8 <HAL_I2C_MspInit+0x88>)
 8003084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003086:	4a08      	ldr	r2, [pc, #32]	@ (80030a8 <HAL_I2C_MspInit+0x88>)
 8003088:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800308c:	6413      	str	r3, [r2, #64]	@ 0x40
 800308e:	4b06      	ldr	r3, [pc, #24]	@ (80030a8 <HAL_I2C_MspInit+0x88>)
 8003090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003092:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800309a:	bf00      	nop
 800309c:	3728      	adds	r7, #40	@ 0x28
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	40005400 	.word	0x40005400
 80030a8:	40023800 	.word	0x40023800
 80030ac:	40020400 	.word	0x40020400

080030b0 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a05      	ldr	r2, [pc, #20]	@ (80030d4 <HAL_RTC_MspInit+0x24>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d102      	bne.n	80030c8 <HAL_RTC_MspInit+0x18>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80030c2:	4b05      	ldr	r3, [pc, #20]	@ (80030d8 <HAL_RTC_MspInit+0x28>)
 80030c4:	2201      	movs	r2, #1
 80030c6:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bc80      	pop	{r7}
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	40002800 	.word	0x40002800
 80030d8:	42470e3c 	.word	0x42470e3c

080030dc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a0a      	ldr	r2, [pc, #40]	@ (8003114 <HAL_TIM_Base_MspInit+0x38>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d10d      	bne.n	800310a <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030ee:	2300      	movs	r3, #0
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	4b09      	ldr	r3, [pc, #36]	@ (8003118 <HAL_TIM_Base_MspInit+0x3c>)
 80030f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f6:	4a08      	ldr	r2, [pc, #32]	@ (8003118 <HAL_TIM_Base_MspInit+0x3c>)
 80030f8:	f043 0302 	orr.w	r3, r3, #2
 80030fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80030fe:	4b06      	ldr	r3, [pc, #24]	@ (8003118 <HAL_TIM_Base_MspInit+0x3c>)
 8003100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	60fb      	str	r3, [r7, #12]
 8003108:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 800310a:	bf00      	nop
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	bc80      	pop	{r7}
 8003112:	4770      	bx	lr
 8003114:	40000400 	.word	0x40000400
 8003118:	40023800 	.word	0x40023800

0800311c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003120:	bf00      	nop
 8003122:	e7fd      	b.n	8003120 <NMI_Handler+0x4>

08003124 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003128:	bf00      	nop
 800312a:	e7fd      	b.n	8003128 <HardFault_Handler+0x4>

0800312c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003130:	bf00      	nop
 8003132:	e7fd      	b.n	8003130 <MemManage_Handler+0x4>

08003134 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003138:	bf00      	nop
 800313a:	e7fd      	b.n	8003138 <BusFault_Handler+0x4>

0800313c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003140:	bf00      	nop
 8003142:	e7fd      	b.n	8003140 <UsageFault_Handler+0x4>

08003144 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003148:	bf00      	nop
 800314a:	46bd      	mov	sp, r7
 800314c:	bc80      	pop	{r7}
 800314e:	4770      	bx	lr

08003150 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003154:	bf00      	nop
 8003156:	46bd      	mov	sp, r7
 8003158:	bc80      	pop	{r7}
 800315a:	4770      	bx	lr

0800315c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003160:	bf00      	nop
 8003162:	46bd      	mov	sp, r7
 8003164:	bc80      	pop	{r7}
 8003166:	4770      	bx	lr

08003168 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800316c:	f001 ff66 	bl	800503c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003170:	bf00      	nop
 8003172:	bd80      	pop	{r7, pc}

08003174 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003178:	2002      	movs	r0, #2
 800317a:	f004 fd7d 	bl	8007c78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800317e:	bf00      	nop
 8003180:	bd80      	pop	{r7, pc}

08003182 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003186:	2004      	movs	r0, #4
 8003188:	f004 fd76 	bl	8007c78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800318c:	bf00      	nop
 800318e:	bd80      	pop	{r7, pc}

08003190 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003194:	2008      	movs	r0, #8
 8003196:	f004 fd6f 	bl	8007c78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800319a:	bf00      	nop
 800319c:	bd80      	pop	{r7, pc}
	...

080031a0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80031a4:	4802      	ldr	r0, [pc, #8]	@ (80031b0 <DMA2_Stream0_IRQHandler+0x10>)
 80031a6:	f002 fd79 	bl	8005c9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80031aa:	bf00      	nop
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	20002954 	.word	0x20002954

080031b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  return 1;
 80031b8:	2301      	movs	r3, #1
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	46bd      	mov	sp, r7
 80031be:	bc80      	pop	{r7}
 80031c0:	4770      	bx	lr
	...

080031c4 <_kill>:

int _kill(int pid, int sig)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80031ce:	4b05      	ldr	r3, [pc, #20]	@ (80031e4 <_kill+0x20>)
 80031d0:	2216      	movs	r2, #22
 80031d2:	601a      	str	r2, [r3, #0]
  return -1;
 80031d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031d8:	4618      	mov	r0, r3
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	bc80      	pop	{r7}
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	2000dff8 	.word	0x2000dff8

080031e8 <_exit>:

void _exit (int status)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80031f0:	f04f 31ff 	mov.w	r1, #4294967295
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7ff ffe5 	bl	80031c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80031fa:	bf00      	nop
 80031fc:	e7fd      	b.n	80031fa <_exit+0x12>

080031fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b086      	sub	sp, #24
 8003202:	af00      	add	r7, sp, #0
 8003204:	60f8      	str	r0, [r7, #12]
 8003206:	60b9      	str	r1, [r7, #8]
 8003208:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800320a:	2300      	movs	r3, #0
 800320c:	617b      	str	r3, [r7, #20]
 800320e:	e00a      	b.n	8003226 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003210:	f3af 8000 	nop.w
 8003214:	4601      	mov	r1, r0
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	1c5a      	adds	r2, r3, #1
 800321a:	60ba      	str	r2, [r7, #8]
 800321c:	b2ca      	uxtb	r2, r1
 800321e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	3301      	adds	r3, #1
 8003224:	617b      	str	r3, [r7, #20]
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	429a      	cmp	r2, r3
 800322c:	dbf0      	blt.n	8003210 <_read+0x12>
  }

  return len;
 800322e:	687b      	ldr	r3, [r7, #4]
}
 8003230:	4618      	mov	r0, r3
 8003232:	3718      	adds	r7, #24
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003244:	2300      	movs	r3, #0
 8003246:	617b      	str	r3, [r7, #20]
 8003248:	e009      	b.n	800325e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	1c5a      	adds	r2, r3, #1
 800324e:	60ba      	str	r2, [r7, #8]
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	3301      	adds	r3, #1
 800325c:	617b      	str	r3, [r7, #20]
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	429a      	cmp	r2, r3
 8003264:	dbf1      	blt.n	800324a <_write+0x12>
  }
  return len;
 8003266:	687b      	ldr	r3, [r7, #4]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <_close>:

int _close(int file)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003278:	f04f 33ff 	mov.w	r3, #4294967295
}
 800327c:	4618      	mov	r0, r3
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	bc80      	pop	{r7}
 8003284:	4770      	bx	lr

08003286 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
 800328e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003296:	605a      	str	r2, [r3, #4]
  return 0;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc80      	pop	{r7}
 80032a2:	4770      	bx	lr

080032a4 <_isatty>:

int _isatty(int file)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80032ac:	2301      	movs	r3, #1
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr

080032b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bc80      	pop	{r7}
 80032ce:	4770      	bx	lr

080032d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b087      	sub	sp, #28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032d8:	4a14      	ldr	r2, [pc, #80]	@ (800332c <_sbrk+0x5c>)
 80032da:	4b15      	ldr	r3, [pc, #84]	@ (8003330 <_sbrk+0x60>)
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032e4:	4b13      	ldr	r3, [pc, #76]	@ (8003334 <_sbrk+0x64>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d102      	bne.n	80032f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032ec:	4b11      	ldr	r3, [pc, #68]	@ (8003334 <_sbrk+0x64>)
 80032ee:	4a12      	ldr	r2, [pc, #72]	@ (8003338 <_sbrk+0x68>)
 80032f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032f2:	4b10      	ldr	r3, [pc, #64]	@ (8003334 <_sbrk+0x64>)
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4413      	add	r3, r2
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d205      	bcs.n	800330c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8003300:	4b0e      	ldr	r3, [pc, #56]	@ (800333c <_sbrk+0x6c>)
 8003302:	220c      	movs	r2, #12
 8003304:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003306:	f04f 33ff 	mov.w	r3, #4294967295
 800330a:	e009      	b.n	8003320 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800330c:	4b09      	ldr	r3, [pc, #36]	@ (8003334 <_sbrk+0x64>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003312:	4b08      	ldr	r3, [pc, #32]	@ (8003334 <_sbrk+0x64>)
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4413      	add	r3, r2
 800331a:	4a06      	ldr	r2, [pc, #24]	@ (8003334 <_sbrk+0x64>)
 800331c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800331e:	68fb      	ldr	r3, [r7, #12]
}
 8003320:	4618      	mov	r0, r3
 8003322:	371c      	adds	r7, #28
 8003324:	46bd      	mov	sp, r7
 8003326:	bc80      	pop	{r7}
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	2001c000 	.word	0x2001c000
 8003330:	00004000 	.word	0x00004000
 8003334:	20006ad0 	.word	0x20006ad0
 8003338:	2000e008 	.word	0x2000e008
 800333c:	2000dff8 	.word	0x2000dff8

08003340 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003344:	bf00      	nop
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr

0800334c <draw_cross>:
extern float current;

/* --- Вспомогательные функции --- */

/* Рисует крест поверх круга */
static void draw_cross(int cx, int cy, int r) {
 800334c:	b590      	push	{r4, r7, lr}
 800334e:	b089      	sub	sp, #36	@ 0x24
 8003350:	af02      	add	r7, sp, #8
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
    int d = (int)(r * 0.65f);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f7fd fce5 	bl	8000d28 <__aeabi_i2f>
 800335e:	4603      	mov	r3, r0
 8003360:	4923      	ldr	r1, [pc, #140]	@ (80033f0 <draw_cross+0xa4>)
 8003362:	4618      	mov	r0, r3
 8003364:	f7fd fd34 	bl	8000dd0 <__aeabi_fmul>
 8003368:	4603      	mov	r3, r0
 800336a:	4618      	mov	r0, r3
 800336c:	f7fd ff0c 	bl	8001188 <__aeabi_f2iz>
 8003370:	4603      	mov	r3, r0
 8003372:	617b      	str	r3, [r7, #20]
    ssd1306_Line(cx - d, cy - d, cx + d, cy + d, White);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	b2da      	uxtb	r2, r3
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	b2db      	uxtb	r3, r3
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	b2d8      	uxtb	r0, r3
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	b2da      	uxtb	r2, r3
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	b2db      	uxtb	r3, r3
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	b2d9      	uxtb	r1, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	b2da      	uxtb	r2, r3
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	b2db      	uxtb	r3, r3
 8003394:	4413      	add	r3, r2
 8003396:	b2dc      	uxtb	r4, r3
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	b2da      	uxtb	r2, r3
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	4413      	add	r3, r2
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2201      	movs	r2, #1
 80033a6:	9200      	str	r2, [sp, #0]
 80033a8:	4622      	mov	r2, r4
 80033aa:	f001 fc3b 	bl	8004c24 <ssd1306_Line>
    ssd1306_Line(cx - d, cy + d, cx + d, cy - d, White);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	b2da      	uxtb	r2, r3
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	b2d8      	uxtb	r0, r3
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	4413      	add	r3, r2
 80033c4:	b2d9      	uxtb	r1, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	4413      	add	r3, r2
 80033d0:	b2dc      	uxtb	r4, r3
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2201      	movs	r2, #1
 80033e0:	9200      	str	r2, [sp, #0]
 80033e2:	4622      	mov	r2, r4
 80033e4:	f001 fc1e 	bl	8004c24 <ssd1306_Line>
}
 80033e8:	bf00      	nop
 80033ea:	371c      	adds	r7, #28
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd90      	pop	{r4, r7, pc}
 80033f0:	3f266666 	.word	0x3f266666

080033f4 <draw_centered_char>:

/* Центрированный символ */
static void draw_centered_char(int cx, int cy, char ch, const SSD1306_Font_t *font) {
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08c      	sub	sp, #48	@ 0x30
 80033f8:	af02      	add	r7, sp, #8
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	603b      	str	r3, [r7, #0]
 8003400:	4613      	mov	r3, r2
 8003402:	71fb      	strb	r3, [r7, #7]
    char s[2] = { ch, '\0' };
 8003404:	79fb      	ldrb	r3, [r7, #7]
 8003406:	753b      	strb	r3, [r7, #20]
 8003408:	2300      	movs	r3, #0
 800340a:	757b      	strb	r3, [r7, #21]
    int fw = font->width;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	61fb      	str	r3, [r7, #28]
    int fh = font->height;
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	785b      	ldrb	r3, [r3, #1]
 8003416:	61bb      	str	r3, [r7, #24]
    int x = cx - fw / 2;
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	0fda      	lsrs	r2, r3, #31
 800341c:	4413      	add	r3, r2
 800341e:	105b      	asrs	r3, r3, #1
 8003420:	425b      	negs	r3, r3
 8003422:	461a      	mov	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	4413      	add	r3, r2
 8003428:	627b      	str	r3, [r7, #36]	@ 0x24
    int y = cy - fh / 2;
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	0fda      	lsrs	r2, r3, #31
 800342e:	4413      	add	r3, r2
 8003430:	105b      	asrs	r3, r3, #1
 8003432:	425b      	negs	r3, r3
 8003434:	461a      	mov	r2, r3
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	4413      	add	r3, r2
 800343a:	623b      	str	r3, [r7, #32]
    if (x < 0) x = 0;
 800343c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343e:	2b00      	cmp	r3, #0
 8003440:	da01      	bge.n	8003446 <draw_centered_char+0x52>
 8003442:	2300      	movs	r3, #0
 8003444:	627b      	str	r3, [r7, #36]	@ 0x24
    if (y < 0) y = 0;
 8003446:	6a3b      	ldr	r3, [r7, #32]
 8003448:	2b00      	cmp	r3, #0
 800344a:	da01      	bge.n	8003450 <draw_centered_char+0x5c>
 800344c:	2300      	movs	r3, #0
 800344e:	623b      	str	r3, [r7, #32]
    ssd1306_SetCursor((uint8_t)x, (uint8_t)y);
 8003450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003452:	b2db      	uxtb	r3, r3
 8003454:	6a3a      	ldr	r2, [r7, #32]
 8003456:	b2d2      	uxtb	r2, r2
 8003458:	4611      	mov	r1, r2
 800345a:	4618      	mov	r0, r3
 800345c:	f001 fbca 	bl	8004bf4 <ssd1306_SetCursor>
    ssd1306_WriteString(s, *font, White);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	f107 0014 	add.w	r0, r7, #20
 8003466:	2201      	movs	r2, #1
 8003468:	9200      	str	r2, [sp, #0]
 800346a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800346c:	f001 fb9c 	bl	8004ba8 <ssd1306_WriteString>
}
 8003470:	bf00      	nop
 8003472:	3728      	adds	r7, #40	@ 0x28
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <draw_input_circle>:

/* Кружок с буквой. Если нет входа — крест. Если активный — двойной круг */
static void draw_input_circle(int cx, int cy, char label, uint8_t hasInput, uint8_t isActive) {
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	4611      	mov	r1, r2
 8003484:	461a      	mov	r2, r3
 8003486:	460b      	mov	r3, r1
 8003488:	71fb      	strb	r3, [r7, #7]
 800348a:	4613      	mov	r3, r2
 800348c:	71bb      	strb	r3, [r7, #6]
    const int r = 12;
 800348e:	230c      	movs	r3, #12
 8003490:	617b      	str	r3, [r7, #20]
    ssd1306_DrawCircle((uint8_t)cx, (uint8_t)cy, (uint8_t)r, White);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	b2d8      	uxtb	r0, r3
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	b2d9      	uxtb	r1, r3
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	b2da      	uxtb	r2, r3
 800349e:	2301      	movs	r3, #1
 80034a0:	f001 fc2c 	bl	8004cfc <ssd1306_DrawCircle>

    // буква всегда рисуется
    draw_centered_char(cx, cy, label, &Font_11x18);
 80034a4:	79fa      	ldrb	r2, [r7, #7]
 80034a6:	4b10      	ldr	r3, [pc, #64]	@ (80034e8 <draw_input_circle+0x70>)
 80034a8:	68b9      	ldr	r1, [r7, #8]
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f7ff ffa2 	bl	80033f4 <draw_centered_char>

    if (!hasInput) {
 80034b0:	79bb      	ldrb	r3, [r7, #6]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d105      	bne.n	80034c2 <draw_input_circle+0x4a>
        draw_cross(cx, cy, r);
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	68b9      	ldr	r1, [r7, #8]
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f7ff ff46 	bl	800334c <draw_cross>
    } else if (isActive) {
        ssd1306_DrawCircle((uint8_t)cx, (uint8_t)cy, (uint8_t)(r + 3), White);
    }
}
 80034c0:	e00e      	b.n	80034e0 <draw_input_circle+0x68>
    } else if (isActive) {
 80034c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00a      	beq.n	80034e0 <draw_input_circle+0x68>
        ssd1306_DrawCircle((uint8_t)cx, (uint8_t)cy, (uint8_t)(r + 3), White);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	b2d8      	uxtb	r0, r3
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	b2d9      	uxtb	r1, r3
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	3303      	adds	r3, #3
 80034d8:	b2da      	uxtb	r2, r3
 80034da:	2301      	movs	r3, #1
 80034dc:	f001 fc0e 	bl	8004cfc <ssd1306_DrawCircle>
}
 80034e0:	bf00      	nop
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	080275a4 	.word	0x080275a4

080034ec <OLED_DrawABPage>:

/* --- Главная функция --- */
void OLED_DrawABPage(void) {
 80034ec:	b590      	push	{r4, r7, lr}
 80034ee:	b0a5      	sub	sp, #148	@ 0x94
 80034f0:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 80034f2:	2000      	movs	r0, #0
 80034f4:	f001 fa36 	bl	8004964 <ssd1306_Fill>

    const int SW = SSD1306_ROTATED_WIDTH;   // 64
 80034f8:	2340      	movs	r3, #64	@ 0x40
 80034fa:	677b      	str	r3, [r7, #116]	@ 0x74
    const int SH = SSD1306_ROTATED_HEIGHT;  // 128
 80034fc:	2380      	movs	r3, #128	@ 0x80
 80034fe:	673b      	str	r3, [r7, #112]	@ 0x70

    // Заголовок сверху - БОЛЬШИМИ БУКВАМИ ДЛЯ ТЕСТА
    const char title[] = "BONCH-ATS";
 8003500:	4a72      	ldr	r2, [pc, #456]	@ (80036cc <OLED_DrawABPage+0x1e0>)
 8003502:	f107 0320 	add.w	r3, r7, #32
 8003506:	ca07      	ldmia	r2, {r0, r1, r2}
 8003508:	c303      	stmia	r3!, {r0, r1}
 800350a:	801a      	strh	r2, [r3, #0]
    const SSD1306_Font_t *title_font = &Font_7x10;
 800350c:	4b70      	ldr	r3, [pc, #448]	@ (80036d0 <OLED_DrawABPage+0x1e4>)
 800350e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    int title_x = (SW / 2) - ((int)strlen(title) * title_font->width / 2);
 8003510:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003512:	0fda      	lsrs	r2, r3, #31
 8003514:	4413      	add	r3, r2
 8003516:	105b      	asrs	r3, r3, #1
 8003518:	4619      	mov	r1, r3
 800351a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	461a      	mov	r2, r3
 8003520:	4613      	mov	r3, r2
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	4413      	add	r3, r2
 8003526:	0fda      	lsrs	r2, r3, #31
 8003528:	4413      	add	r3, r2
 800352a:	105b      	asrs	r3, r3, #1
 800352c:	425b      	negs	r3, r3
 800352e:	440b      	add	r3, r1
 8003530:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (title_x < 0) title_x = 0;
 8003534:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003538:	2b00      	cmp	r3, #0
 800353a:	da02      	bge.n	8003542 <OLED_DrawABPage+0x56>
 800353c:	2300      	movs	r3, #0
 800353e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    ssd1306_SetCursor(title_x, 2);
 8003542:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2102      	movs	r1, #2
 800354a:	4618      	mov	r0, r3
 800354c:	f001 fb52 	bl	8004bf4 <ssd1306_SetCursor>
    ssd1306_WriteString((char*)title, *title_font, White);
 8003550:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003552:	f107 0020 	add.w	r0, r7, #32
 8003556:	2201      	movs	r2, #1
 8003558:	9200      	str	r2, [sp, #0]
 800355a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800355c:	f001 fb24 	bl	8004ba8 <ssd1306_WriteString>
    int title_bottom = 2 + title_font->height;
 8003560:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003562:	785b      	ldrb	r3, [r3, #1]
 8003564:	3302      	adds	r3, #2
 8003566:	66bb      	str	r3, [r7, #104]	@ 0x68

    // Нижний блок (U/I/P)
    const SSD1306_Font_t *fval = &Font_7x10;
 8003568:	4b59      	ldr	r3, [pc, #356]	@ (80036d0 <OLED_DrawABPage+0x1e4>)
 800356a:	667b      	str	r3, [r7, #100]	@ 0x64
    const int fh = fval->height;   // ~10
 800356c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800356e:	785b      	ldrb	r3, [r3, #1]
 8003570:	663b      	str	r3, [r7, #96]	@ 0x60
    const int vpad = 4;
 8003572:	2304      	movs	r3, #4
 8003574:	65fb      	str	r3, [r7, #92]	@ 0x5c
    const int box_x = 2;
 8003576:	2302      	movs	r3, #2
 8003578:	65bb      	str	r3, [r7, #88]	@ 0x58
    const int lines = 3;
 800357a:	2303      	movs	r3, #3
 800357c:	657b      	str	r3, [r7, #84]	@ 0x54
    const int box_h = (fh * lines) + (vpad * (lines + 1));
 800357e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003580:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003582:	fb03 f202 	mul.w	r2, r3, r2
 8003586:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003588:	3301      	adds	r3, #1
 800358a:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800358c:	fb01 f303 	mul.w	r3, r1, r3
 8003590:	4413      	add	r3, r2
 8003592:	653b      	str	r3, [r7, #80]	@ 0x50
    const int box_w = SW - 4;
 8003594:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003596:	3b04      	subs	r3, #4
 8003598:	64fb      	str	r3, [r7, #76]	@ 0x4c
    const int box_y = SH - box_h - 4;
 800359a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800359c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	3b04      	subs	r3, #4
 80035a2:	64bb      	str	r3, [r7, #72]	@ 0x48
    int data_top = box_y;
 80035a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035a6:	647b      	str	r3, [r7, #68]	@ 0x44

    // Параметры входов
    uint8_t hasA = (voltage1 > ABPAGE_VOLTAGE_THRESHOLD);
 80035a8:	4b4a      	ldr	r3, [pc, #296]	@ (80036d4 <OLED_DrawABPage+0x1e8>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2201      	movs	r2, #1
 80035ae:	4614      	mov	r4, r2
 80035b0:	4949      	ldr	r1, [pc, #292]	@ (80036d8 <OLED_DrawABPage+0x1ec>)
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7fd fdc8 	bl	8001148 <__aeabi_fcmpgt>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <OLED_DrawABPage+0xd6>
 80035be:	2300      	movs	r3, #0
 80035c0:	461c      	mov	r4, r3
 80035c2:	b2e3      	uxtb	r3, r4
 80035c4:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    uint8_t hasB = (voltage2 > ABPAGE_VOLTAGE_THRESHOLD);
 80035c8:	4b44      	ldr	r3, [pc, #272]	@ (80036dc <OLED_DrawABPage+0x1f0>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2201      	movs	r2, #1
 80035ce:	4614      	mov	r4, r2
 80035d0:	4941      	ldr	r1, [pc, #260]	@ (80036d8 <OLED_DrawABPage+0x1ec>)
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7fd fdb8 	bl	8001148 <__aeabi_fcmpgt>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <OLED_DrawABPage+0xf6>
 80035de:	2300      	movs	r3, #0
 80035e0:	461c      	mov	r4, r3
 80035e2:	b2e3      	uxtb	r3, r4
 80035e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
    uint8_t activeA = 0, activeB = 0;
 80035e8:	2300      	movs	r3, #0
 80035ea:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 80035ee:	2300      	movs	r3, #0
 80035f0:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
    if (hasA && hasB) activeA = 1;     // A приоритет
 80035f4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d007      	beq.n	800360c <OLED_DrawABPage+0x120>
 80035fc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <OLED_DrawABPage+0x120>
 8003604:	2301      	movs	r3, #1
 8003606:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 800360a:	e00e      	b.n	800362a <OLED_DrawABPage+0x13e>
    else if (hasA) activeA = 1;
 800360c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003610:	2b00      	cmp	r3, #0
 8003612:	d003      	beq.n	800361c <OLED_DrawABPage+0x130>
 8003614:	2301      	movs	r3, #1
 8003616:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 800361a:	e006      	b.n	800362a <OLED_DrawABPage+0x13e>
    else if (hasB) activeB = 1;
 800361c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003620:	2b00      	cmp	r3, #0
 8003622:	d002      	beq.n	800362a <OLED_DrawABPage+0x13e>
 8003624:	2301      	movs	r3, #1
 8003626:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82

    // Кружки A и B — по центру между заголовком и блоком данных
    // ЯВНО СДВИГАЕМ ВНИЗ НА 10 ПИКСЕЛЕЙ ДЛЯ ТЕСТА
    int center_y = title_bottom + 10 + ((data_top - title_bottom - 10) / 2);
 800362a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800362c:	f103 020a 	add.w	r2, r3, #10
 8003630:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003632:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003634:	1acb      	subs	r3, r1, r3
 8003636:	3b0a      	subs	r3, #10
 8003638:	0fd9      	lsrs	r1, r3, #31
 800363a:	440b      	add	r3, r1
 800363c:	105b      	asrs	r3, r3, #1
 800363e:	4413      	add	r3, r2
 8003640:	63fb      	str	r3, [r7, #60]	@ 0x3c

    const int ax = SW / 4;
 8003642:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003644:	2b00      	cmp	r3, #0
 8003646:	da00      	bge.n	800364a <OLED_DrawABPage+0x15e>
 8003648:	3303      	adds	r3, #3
 800364a:	109b      	asrs	r3, r3, #2
 800364c:	63bb      	str	r3, [r7, #56]	@ 0x38
    const int bx = (SW * 3) / 4;
 800364e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003650:	4613      	mov	r3, r2
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	4413      	add	r3, r2
 8003656:	2b00      	cmp	r3, #0
 8003658:	da00      	bge.n	800365c <OLED_DrawABPage+0x170>
 800365a:	3303      	adds	r3, #3
 800365c:	109b      	asrs	r3, r3, #2
 800365e:	637b      	str	r3, [r7, #52]	@ 0x34

    draw_input_circle(ax, center_y, 'A', hasA, activeA);
 8003660:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8003664:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	4613      	mov	r3, r2
 800366c:	2241      	movs	r2, #65	@ 0x41
 800366e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003670:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003672:	f7ff ff01 	bl	8003478 <draw_input_circle>
    draw_input_circle(bx, center_y, 'B', hasB, activeB);
 8003676:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 800367a:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	4613      	mov	r3, r2
 8003682:	2242      	movs	r2, #66	@ 0x42
 8003684:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003686:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003688:	f7ff fef6 	bl	8003478 <draw_input_circle>

    // Рисуем нижний блок
    ssd1306_DrawRectangle(box_x, box_y, box_x + box_w, box_y + box_h, White);
 800368c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800368e:	b2d8      	uxtb	r0, r3
 8003690:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003692:	b2d9      	uxtb	r1, r3
 8003694:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003696:	b2da      	uxtb	r2, r3
 8003698:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800369a:	b2db      	uxtb	r3, r3
 800369c:	4413      	add	r3, r2
 800369e:	b2dc      	uxtb	r4, r3
 80036a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	4413      	add	r3, r2
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2201      	movs	r2, #1
 80036ae:	9200      	str	r2, [sp, #0]
 80036b0:	4622      	mov	r2, r4
 80036b2:	f001 fbaa 	bl	8004e0a <ssd1306_DrawRectangle>

    // Значения
    float u_work = 0.0f;
 80036b6:	f04f 0300 	mov.w	r3, #0
 80036ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (activeA) u_work = voltage1;
 80036bc:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00d      	beq.n	80036e0 <OLED_DrawABPage+0x1f4>
 80036c4:	4b03      	ldr	r3, [pc, #12]	@ (80036d4 <OLED_DrawABPage+0x1e8>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80036ca:	e010      	b.n	80036ee <OLED_DrawABPage+0x202>
 80036cc:	08023334 	.word	0x08023334
 80036d0:	08027598 	.word	0x08027598
 80036d4:	20006ac0 	.word	0x20006ac0
 80036d8:	41a00000 	.word	0x41a00000
 80036dc:	20006ac4 	.word	0x20006ac4
    else if (activeB) u_work = voltage2;
 80036e0:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d002      	beq.n	80036ee <OLED_DrawABPage+0x202>
 80036e8:	4b48      	ldr	r3, [pc, #288]	@ (800380c <OLED_DrawABPage+0x320>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	67fb      	str	r3, [r7, #124]	@ 0x7c

    // Округление мощности до целых - ТЕПЕРЬ ТОЧНО БЕЗ ДРОБНОЙ ЧАСТИ
    int power_int = (int)(current * u_work);
 80036ee:	4b48      	ldr	r3, [pc, #288]	@ (8003810 <OLED_DrawABPage+0x324>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7fd fb6b 	bl	8000dd0 <__aeabi_fmul>
 80036fa:	4603      	mov	r3, r0
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7fd fd43 	bl	8001188 <__aeabi_f2iz>
 8003702:	4603      	mov	r3, r0
 8003704:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (current * u_work - power_int >= 0.5) power_int++; // Правильное округление
 8003706:	4b42      	ldr	r3, [pc, #264]	@ (8003810 <OLED_DrawABPage+0x324>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800370c:	4618      	mov	r0, r3
 800370e:	f7fd fb5f 	bl	8000dd0 <__aeabi_fmul>
 8003712:	4603      	mov	r3, r0
 8003714:	461c      	mov	r4, r3
 8003716:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8003718:	f7fd fb06 	bl	8000d28 <__aeabi_i2f>
 800371c:	4603      	mov	r3, r0
 800371e:	4619      	mov	r1, r3
 8003720:	4620      	mov	r0, r4
 8003722:	f7fd fa4b 	bl	8000bbc <__aeabi_fsub>
 8003726:	4603      	mov	r3, r0
 8003728:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800372c:	4618      	mov	r0, r3
 800372e:	f7fd fd01 	bl	8001134 <__aeabi_fcmpge>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d002      	beq.n	800373e <OLED_DrawABPage+0x252>
 8003738:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800373a:	3301      	adds	r3, #1
 800373c:	67bb      	str	r3, [r7, #120]	@ 0x78

    char buf[32];
    int text_x = box_x + 4;
 800373e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003740:	3304      	adds	r3, #4
 8003742:	633b      	str	r3, [r7, #48]	@ 0x30
    int y = box_y + vpad;
 8003744:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003746:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003748:	4413      	add	r3, r2
 800374a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // ИЗМЕНИЛ ФОРМАТ ДЛЯ ТЕСТА - БОЛЬШИЕ БУКВЫ
    snprintf(buf, sizeof(buf), "U=%.1fV", u_work);
 800374c:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800374e:	f7fc feb1 	bl	80004b4 <__aeabi_f2d>
 8003752:	4602      	mov	r2, r0
 8003754:	460b      	mov	r3, r1
 8003756:	4638      	mov	r0, r7
 8003758:	e9cd 2300 	strd	r2, r3, [sp]
 800375c:	4a2d      	ldr	r2, [pc, #180]	@ (8003814 <OLED_DrawABPage+0x328>)
 800375e:	2120      	movs	r1, #32
 8003760:	f01c ff0e 	bl	8020580 <sniprintf>
    ssd1306_SetCursor(text_x, y);
 8003764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003766:	b2db      	uxtb	r3, r3
 8003768:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800376a:	b2d2      	uxtb	r2, r2
 800376c:	4611      	mov	r1, r2
 800376e:	4618      	mov	r0, r3
 8003770:	f001 fa40 	bl	8004bf4 <ssd1306_SetCursor>
    ssd1306_WriteString(buf, *fval, White);
 8003774:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003776:	4638      	mov	r0, r7
 8003778:	2201      	movs	r2, #1
 800377a:	9200      	str	r2, [sp, #0]
 800377c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800377e:	f001 fa13 	bl	8004ba8 <ssd1306_WriteString>

    y += fh + vpad;
 8003782:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003784:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003786:	4413      	add	r3, r2
 8003788:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800378a:	4413      	add	r3, r2
 800378c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    snprintf(buf, sizeof(buf), "I=%.1f A", current);
 800378e:	4b20      	ldr	r3, [pc, #128]	@ (8003810 <OLED_DrawABPage+0x324>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f7fc fe8e 	bl	80004b4 <__aeabi_f2d>
 8003798:	4602      	mov	r2, r0
 800379a:	460b      	mov	r3, r1
 800379c:	4638      	mov	r0, r7
 800379e:	e9cd 2300 	strd	r2, r3, [sp]
 80037a2:	4a1d      	ldr	r2, [pc, #116]	@ (8003818 <OLED_DrawABPage+0x32c>)
 80037a4:	2120      	movs	r1, #32
 80037a6:	f01c feeb 	bl	8020580 <sniprintf>
    ssd1306_SetCursor(text_x, y);
 80037aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037b0:	b2d2      	uxtb	r2, r2
 80037b2:	4611      	mov	r1, r2
 80037b4:	4618      	mov	r0, r3
 80037b6:	f001 fa1d 	bl	8004bf4 <ssd1306_SetCursor>
    ssd1306_WriteString(buf, *fval, White);
 80037ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80037bc:	4638      	mov	r0, r7
 80037be:	2201      	movs	r2, #1
 80037c0:	9200      	str	r2, [sp, #0]
 80037c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037c4:	f001 f9f0 	bl	8004ba8 <ssd1306_WriteString>

    y += fh + vpad;
 80037c8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80037ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037cc:	4413      	add	r3, r2
 80037ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037d0:	4413      	add	r3, r2
 80037d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // ЯВНОЕ ИЗМЕНЕНИЕ - ЦЕЛОЕ ЧИСЛО БЕЗ ТОЧКИ
    snprintf(buf, sizeof(buf), "P=%d W", power_int);
 80037d4:	4638      	mov	r0, r7
 80037d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037d8:	4a10      	ldr	r2, [pc, #64]	@ (800381c <OLED_DrawABPage+0x330>)
 80037da:	2120      	movs	r1, #32
 80037dc:	f01c fed0 	bl	8020580 <sniprintf>
    ssd1306_SetCursor(text_x, y);
 80037e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037e6:	b2d2      	uxtb	r2, r2
 80037e8:	4611      	mov	r1, r2
 80037ea:	4618      	mov	r0, r3
 80037ec:	f001 fa02 	bl	8004bf4 <ssd1306_SetCursor>
    ssd1306_WriteString(buf, *fval, White);
 80037f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80037f2:	4638      	mov	r0, r7
 80037f4:	2201      	movs	r2, #1
 80037f6:	9200      	str	r2, [sp, #0]
 80037f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037fa:	f001 f9d5 	bl	8004ba8 <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 80037fe:	f001 f8c9 	bl	8004994 <ssd1306_UpdateScreen>
}
 8003802:	bf00      	nop
 8003804:	378c      	adds	r7, #140	@ 0x8c
 8003806:	46bd      	mov	sp, r7
 8003808:	bd90      	pop	{r4, r7, pc}
 800380a:	bf00      	nop
 800380c:	20006ac4 	.word	0x20006ac4
 8003810:	20006ac8 	.word	0x20006ac8
 8003814:	08023318 	.word	0x08023318
 8003818:	08023320 	.word	0x08023320
 800381c:	0802332c 	.word	0x0802332c

08003820 <OLED_DrawIP_Split>:
 *
 * @param x   позиция курсора X
 * @param y   позиция курсора Y
 * @param addr указатель на ip4_addr_t
 */
void OLED_DrawIP_Split(uint8_t x, uint8_t y, const ip4_addr_t *addr) {
 8003820:	b580      	push	{r7, lr}
 8003822:	b08a      	sub	sp, #40	@ 0x28
 8003824:	af02      	add	r7, sp, #8
 8003826:	4603      	mov	r3, r0
 8003828:	603a      	str	r2, [r7, #0]
 800382a:	71fb      	strb	r3, [r7, #7]
 800382c:	460b      	mov	r3, r1
 800382e:	71bb      	strb	r3, [r7, #6]
    char line[20];

    if (!addr) return;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d045      	beq.n	80038c2 <OLED_DrawIP_Split+0xa2>

    uint8_t o1 = ip4_addr1_16(addr);
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	77fb      	strb	r3, [r7, #31]
    uint8_t o2 = ip4_addr2_16(addr);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	3301      	adds	r3, #1
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	77bb      	strb	r3, [r7, #30]
    uint8_t o3 = ip4_addr3_16(addr);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	3302      	adds	r3, #2
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	777b      	strb	r3, [r7, #29]
    uint8_t o4 = ip4_addr4_16(addr);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	3303      	adds	r3, #3
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	773b      	strb	r3, [r7, #28]

    // Вторая строка: первые два октета
    snprintf(line, sizeof(line), "%u.%u.", o1, o2);
 8003854:	7ffa      	ldrb	r2, [r7, #31]
 8003856:	7fbb      	ldrb	r3, [r7, #30]
 8003858:	f107 0008 	add.w	r0, r7, #8
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	4613      	mov	r3, r2
 8003860:	4a1a      	ldr	r2, [pc, #104]	@ (80038cc <OLED_DrawIP_Split+0xac>)
 8003862:	2114      	movs	r1, #20
 8003864:	f01c fe8c 	bl	8020580 <sniprintf>
    ssd1306_SetCursor(x, y);
 8003868:	79ba      	ldrb	r2, [r7, #6]
 800386a:	79fb      	ldrb	r3, [r7, #7]
 800386c:	4611      	mov	r1, r2
 800386e:	4618      	mov	r0, r3
 8003870:	f001 f9c0 	bl	8004bf4 <ssd1306_SetCursor>
    ssd1306_WriteString(line, Font_7x10, White);
 8003874:	4b16      	ldr	r3, [pc, #88]	@ (80038d0 <OLED_DrawIP_Split+0xb0>)
 8003876:	f107 0008 	add.w	r0, r7, #8
 800387a:	2201      	movs	r2, #1
 800387c:	9200      	str	r2, [sp, #0]
 800387e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003880:	f001 f992 	bl	8004ba8 <ssd1306_WriteString>

    // Третья строка: последние два октета
    snprintf(line, sizeof(line), "%u.%u", o3, o4);
 8003884:	7f7a      	ldrb	r2, [r7, #29]
 8003886:	7f3b      	ldrb	r3, [r7, #28]
 8003888:	f107 0008 	add.w	r0, r7, #8
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	4613      	mov	r3, r2
 8003890:	4a10      	ldr	r2, [pc, #64]	@ (80038d4 <OLED_DrawIP_Split+0xb4>)
 8003892:	2114      	movs	r1, #20
 8003894:	f01c fe74 	bl	8020580 <sniprintf>
    ssd1306_SetCursor(x, y + Font_7x10.height + 2);
 8003898:	4b0d      	ldr	r3, [pc, #52]	@ (80038d0 <OLED_DrawIP_Split+0xb0>)
 800389a:	785a      	ldrb	r2, [r3, #1]
 800389c:	79bb      	ldrb	r3, [r7, #6]
 800389e:	4413      	add	r3, r2
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	3302      	adds	r3, #2
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	79fb      	ldrb	r3, [r7, #7]
 80038a8:	4611      	mov	r1, r2
 80038aa:	4618      	mov	r0, r3
 80038ac:	f001 f9a2 	bl	8004bf4 <ssd1306_SetCursor>
    ssd1306_WriteString(line, Font_7x10, White);
 80038b0:	4b07      	ldr	r3, [pc, #28]	@ (80038d0 <OLED_DrawIP_Split+0xb0>)
 80038b2:	f107 0008 	add.w	r0, r7, #8
 80038b6:	2201      	movs	r2, #1
 80038b8:	9200      	str	r2, [sp, #0]
 80038ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038bc:	f001 f974 	bl	8004ba8 <ssd1306_WriteString>
 80038c0:	e000      	b.n	80038c4 <OLED_DrawIP_Split+0xa4>
    if (!addr) return;
 80038c2:	bf00      	nop
}
 80038c4:	3720      	adds	r7, #32
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	08023340 	.word	0x08023340
 80038d0:	08027598 	.word	0x08027598
 80038d4:	08023348 	.word	0x08023348

080038d8 <OLED_DrawNetInfo>:
 *
 * @param netif  структура сетевого интерфейса LwIP
 * @param startX начальная позиция X
 * @param startY начальная позиция Y
 */
void OLED_DrawNetInfo(struct netif *netif, uint8_t startX, uint8_t startY) {
 80038d8:	b580      	push	{r7, lr}
 80038da:	b096      	sub	sp, #88	@ 0x58
 80038dc:	af02      	add	r7, sp, #8
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	460b      	mov	r3, r1
 80038e2:	70fb      	strb	r3, [r7, #3]
 80038e4:	4613      	mov	r3, r2
 80038e6:	70bb      	strb	r3, [r7, #2]
	char buffer[64];
	uint8_t lineY = startY;
 80038e8:	78bb      	ldrb	r3, [r7, #2]
 80038ea:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    ssd1306_Fill(Black);
 80038ee:	2000      	movs	r0, #0
 80038f0:	f001 f838 	bl	8004964 <ssd1306_Fill>

    ssd1306_SetCursor(startX, startY);
 80038f4:	78ba      	ldrb	r2, [r7, #2]
 80038f6:	78fb      	ldrb	r3, [r7, #3]
 80038f8:	4611      	mov	r1, r2
 80038fa:	4618      	mov	r0, r3
 80038fc:	f001 f97a 	bl	8004bf4 <ssd1306_SetCursor>
    ssd1306_WriteString("NETINF", Font_7x10, White);
 8003900:	4b5b      	ldr	r3, [pc, #364]	@ (8003a70 <OLED_DrawNetInfo+0x198>)
 8003902:	2201      	movs	r2, #1
 8003904:	9200      	str	r2, [sp, #0]
 8003906:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003908:	485a      	ldr	r0, [pc, #360]	@ (8003a74 <OLED_DrawNetInfo+0x19c>)
 800390a:	f001 f94d 	bl	8004ba8 <ssd1306_WriteString>

    // Полоса под заголовком
    ssd1306_DrawRectangle(0, startY + Font_7x10.height + 1, SSD1306_ROTATED_WIDTH-1, startY + Font_7x10.height + 2, White);
 800390e:	4b58      	ldr	r3, [pc, #352]	@ (8003a70 <OLED_DrawNetInfo+0x198>)
 8003910:	785a      	ldrb	r2, [r3, #1]
 8003912:	78bb      	ldrb	r3, [r7, #2]
 8003914:	4413      	add	r3, r2
 8003916:	b2db      	uxtb	r3, r3
 8003918:	3301      	adds	r3, #1
 800391a:	b2d9      	uxtb	r1, r3
 800391c:	4b54      	ldr	r3, [pc, #336]	@ (8003a70 <OLED_DrawNetInfo+0x198>)
 800391e:	785a      	ldrb	r2, [r3, #1]
 8003920:	78bb      	ldrb	r3, [r7, #2]
 8003922:	4413      	add	r3, r2
 8003924:	b2db      	uxtb	r3, r3
 8003926:	3302      	adds	r3, #2
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2201      	movs	r2, #1
 800392c:	9200      	str	r2, [sp, #0]
 800392e:	223f      	movs	r2, #63	@ 0x3f
 8003930:	2000      	movs	r0, #0
 8003932:	f001 fa6a 	bl	8004e0a <ssd1306_DrawRectangle>

    // IP
    lineY = startY + Font_7x10.height + 6;
 8003936:	4b4e      	ldr	r3, [pc, #312]	@ (8003a70 <OLED_DrawNetInfo+0x198>)
 8003938:	785a      	ldrb	r2, [r3, #1]
 800393a:	78bb      	ldrb	r3, [r7, #2]
 800393c:	4413      	add	r3, r2
 800393e:	b2db      	uxtb	r3, r3
 8003940:	3306      	adds	r3, #6
 8003942:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    ssd1306_SetCursor(startX, lineY);
 8003946:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800394a:	78fb      	ldrb	r3, [r7, #3]
 800394c:	4611      	mov	r1, r2
 800394e:	4618      	mov	r0, r3
 8003950:	f001 f950 	bl	8004bf4 <ssd1306_SetCursor>
    ssd1306_WriteString("IP:", Font_7x10, White);
 8003954:	4b46      	ldr	r3, [pc, #280]	@ (8003a70 <OLED_DrawNetInfo+0x198>)
 8003956:	2201      	movs	r2, #1
 8003958:	9200      	str	r2, [sp, #0]
 800395a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800395c:	4846      	ldr	r0, [pc, #280]	@ (8003a78 <OLED_DrawNetInfo+0x1a0>)
 800395e:	f001 f923 	bl	8004ba8 <ssd1306_WriteString>
    OLED_DrawIP_Split(startX , lineY + Font_7x10.height + 2, netif_ip4_addr(netif));
 8003962:	4b43      	ldr	r3, [pc, #268]	@ (8003a70 <OLED_DrawNetInfo+0x198>)
 8003964:	785a      	ldrb	r2, [r3, #1]
 8003966:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800396a:	4413      	add	r3, r2
 800396c:	b2db      	uxtb	r3, r3
 800396e:	3302      	adds	r3, #2
 8003970:	b2d9      	uxtb	r1, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	1d1a      	adds	r2, r3, #4
 8003976:	78fb      	ldrb	r3, [r7, #3]
 8003978:	4618      	mov	r0, r3
 800397a:	f7ff ff51 	bl	8003820 <OLED_DrawIP_Split>

    // линия-разделитель
    lineY += 3*(Font_7x10.height + 1);
 800397e:	4b3c      	ldr	r3, [pc, #240]	@ (8003a70 <OLED_DrawNetInfo+0x198>)
 8003980:	785b      	ldrb	r3, [r3, #1]
 8003982:	3301      	adds	r3, #1
 8003984:	b2db      	uxtb	r3, r3
 8003986:	461a      	mov	r2, r3
 8003988:	0052      	lsls	r2, r2, #1
 800398a:	4413      	add	r3, r2
 800398c:	b2da      	uxtb	r2, r3
 800398e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003992:	4413      	add	r3, r2
 8003994:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    ssd1306_DrawRectangle(0, lineY, SSD1306_ROTATED_WIDTH-1, lineY, White);
 8003998:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800399c:	f897 104f 	ldrb.w	r1, [r7, #79]	@ 0x4f
 80039a0:	2201      	movs	r2, #1
 80039a2:	9200      	str	r2, [sp, #0]
 80039a4:	223f      	movs	r2, #63	@ 0x3f
 80039a6:	2000      	movs	r0, #0
 80039a8:	f001 fa2f 	bl	8004e0a <ssd1306_DrawRectangle>

    // MASK
    lineY += 4;
 80039ac:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80039b0:	3304      	adds	r3, #4
 80039b2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    ssd1306_SetCursor(startX, lineY);
 80039b6:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80039ba:	78fb      	ldrb	r3, [r7, #3]
 80039bc:	4611      	mov	r1, r2
 80039be:	4618      	mov	r0, r3
 80039c0:	f001 f918 	bl	8004bf4 <ssd1306_SetCursor>
    ssd1306_WriteString("MASK:", Font_7x10, White);
 80039c4:	4b2a      	ldr	r3, [pc, #168]	@ (8003a70 <OLED_DrawNetInfo+0x198>)
 80039c6:	2201      	movs	r2, #1
 80039c8:	9200      	str	r2, [sp, #0]
 80039ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039cc:	482b      	ldr	r0, [pc, #172]	@ (8003a7c <OLED_DrawNetInfo+0x1a4>)
 80039ce:	f001 f8eb 	bl	8004ba8 <ssd1306_WriteString>
    OLED_DrawIP_Split(startX, lineY + Font_7x10.height + 2, netif_ip4_netmask(netif));
 80039d2:	4b27      	ldr	r3, [pc, #156]	@ (8003a70 <OLED_DrawNetInfo+0x198>)
 80039d4:	785a      	ldrb	r2, [r3, #1]
 80039d6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80039da:	4413      	add	r3, r2
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	3302      	adds	r3, #2
 80039e0:	b2d9      	uxtb	r1, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f103 0208 	add.w	r2, r3, #8
 80039e8:	78fb      	ldrb	r3, [r7, #3]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7ff ff18 	bl	8003820 <OLED_DrawIP_Split>

    // линия-разделитель
    lineY += 3*(Font_7x10.height + 1);
 80039f0:	4b1f      	ldr	r3, [pc, #124]	@ (8003a70 <OLED_DrawNetInfo+0x198>)
 80039f2:	785b      	ldrb	r3, [r3, #1]
 80039f4:	3301      	adds	r3, #1
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	461a      	mov	r2, r3
 80039fa:	0052      	lsls	r2, r2, #1
 80039fc:	4413      	add	r3, r2
 80039fe:	b2da      	uxtb	r2, r3
 8003a00:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003a04:	4413      	add	r3, r2
 8003a06:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    ssd1306_DrawRectangle(0, lineY, SSD1306_ROTATED_WIDTH-1, lineY, White);
 8003a0a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003a0e:	f897 104f 	ldrb.w	r1, [r7, #79]	@ 0x4f
 8003a12:	2201      	movs	r2, #1
 8003a14:	9200      	str	r2, [sp, #0]
 8003a16:	223f      	movs	r2, #63	@ 0x3f
 8003a18:	2000      	movs	r0, #0
 8003a1a:	f001 f9f6 	bl	8004e0a <ssd1306_DrawRectangle>

    // GW
    lineY += 4;
 8003a1e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003a22:	3304      	adds	r3, #4
 8003a24:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    ssd1306_SetCursor(startX, lineY);
 8003a28:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8003a2c:	78fb      	ldrb	r3, [r7, #3]
 8003a2e:	4611      	mov	r1, r2
 8003a30:	4618      	mov	r0, r3
 8003a32:	f001 f8df 	bl	8004bf4 <ssd1306_SetCursor>
    ssd1306_WriteString("GW:", Font_7x10, White);
 8003a36:	4b0e      	ldr	r3, [pc, #56]	@ (8003a70 <OLED_DrawNetInfo+0x198>)
 8003a38:	2201      	movs	r2, #1
 8003a3a:	9200      	str	r2, [sp, #0]
 8003a3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a3e:	4810      	ldr	r0, [pc, #64]	@ (8003a80 <OLED_DrawNetInfo+0x1a8>)
 8003a40:	f001 f8b2 	bl	8004ba8 <ssd1306_WriteString>
    OLED_DrawIP_Split(startX, lineY + Font_7x10.height + 2, netif_ip4_gw(netif));
 8003a44:	4b0a      	ldr	r3, [pc, #40]	@ (8003a70 <OLED_DrawNetInfo+0x198>)
 8003a46:	785a      	ldrb	r2, [r3, #1]
 8003a48:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003a4c:	4413      	add	r3, r2
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	3302      	adds	r3, #2
 8003a52:	b2d9      	uxtb	r1, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f103 020c 	add.w	r2, r3, #12
 8003a5a:	78fb      	ldrb	r3, [r7, #3]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff fedf 	bl	8003820 <OLED_DrawIP_Split>
    // отправить буфер на дисплей
    ssd1306_UpdateScreen();
 8003a62:	f000 ff97 	bl	8004994 <ssd1306_UpdateScreen>
}
 8003a66:	bf00      	nop
 8003a68:	3750      	adds	r7, #80	@ 0x50
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	08027598 	.word	0x08027598
 8003a74:	08023350 	.word	0x08023350
 8003a78:	08023358 	.word	0x08023358
 8003a7c:	0802335c 	.word	0x0802335c
 8003a80:	08023364 	.word	0x08023364

08003a84 <__NVIC_SystemReset>:
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003a88:	f3bf 8f4f 	dsb	sy
}
 8003a8c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003a8e:	4b06      	ldr	r3, [pc, #24]	@ (8003aa8 <__NVIC_SystemReset+0x24>)
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003a96:	4904      	ldr	r1, [pc, #16]	@ (8003aa8 <__NVIC_SystemReset+0x24>)
 8003a98:	4b04      	ldr	r3, [pc, #16]	@ (8003aac <__NVIC_SystemReset+0x28>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003a9e:	f3bf 8f4f 	dsb	sy
}
 8003aa2:	bf00      	nop
    __NOP();
 8003aa4:	bf00      	nop
 8003aa6:	e7fd      	b.n	8003aa4 <__NVIC_SystemReset+0x20>
 8003aa8:	e000ed00 	.word	0xe000ed00
 8003aac:	05fa0004 	.word	0x05fa0004

08003ab0 <OLED_Settings_Init>:
static void DHCP_Apply(void);
static bool OLED_Confirm(const char *msg);

// Инициализация меню
void OLED_Settings_Init(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
    selected_index = 0;
 8003ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8003ae0 <OLED_Settings_Init+0x30>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]
    editing_active = false;
 8003aba:	4b0a      	ldr	r3, [pc, #40]	@ (8003ae4 <OLED_Settings_Init+0x34>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	701a      	strb	r2, [r3, #0]
    confirm_active = false;
 8003ac0:	4b09      	ldr	r3, [pc, #36]	@ (8003ae8 <OLED_Settings_Init+0x38>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	701a      	strb	r2, [r3, #0]
    settings_active = true;
 8003ac6:	4b09      	ldr	r3, [pc, #36]	@ (8003aec <OLED_Settings_Init+0x3c>)
 8003ac8:	2201      	movs	r2, #1
 8003aca:	701a      	strb	r2, [r3, #0]
    last_activity_time = HAL_GetTick();
 8003acc:	f001 fac8 	bl	8005060 <HAL_GetTick>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	4a07      	ldr	r2, [pc, #28]	@ (8003af0 <OLED_Settings_Init+0x40>)
 8003ad4:	6013      	str	r3, [r2, #0]
    OLED_Settings_Draw();
 8003ad6:	f000 fa6b 	bl	8003fb0 <OLED_Settings_Draw>
}
 8003ada:	bf00      	nop
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	20006ad4 	.word	0x20006ad4
 8003ae4:	20006adc 	.word	0x20006adc
 8003ae8:	20006ae5 	.word	0x20006ae5
 8003aec:	20000340 	.word	0x20000340
 8003af0:	20006ae0 	.word	0x20006ae0

08003af4 <OLED_Draw_Confirm>:

// --- Отображение меню подтверждения ---
static void OLED_Draw_Confirm(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b08c      	sub	sp, #48	@ 0x30
 8003af8:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 8003afa:	2000      	movs	r0, #0
 8003afc:	f000 ff32 	bl	8004964 <ssd1306_Fill>
    const int SW = SSD1306_ROTATED_WIDTH;
 8003b00:	2340      	movs	r3, #64	@ 0x40
 8003b02:	627b      	str	r3, [r7, #36]	@ 0x24

    // Заголовок
    ssd1306_SetCursor(0, 2);
 8003b04:	2102      	movs	r1, #2
 8003b06:	2000      	movs	r0, #0
 8003b08:	f001 f874 	bl	8004bf4 <ssd1306_SetCursor>
    ssd1306_WriteString("Confirm", *menu_font, White);
 8003b0c:	4b52      	ldr	r3, [pc, #328]	@ (8003c58 <OLED_Draw_Confirm+0x164>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2201      	movs	r2, #1
 8003b12:	9200      	str	r2, [sp, #0]
 8003b14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b16:	4851      	ldr	r0, [pc, #324]	@ (8003c5c <OLED_Draw_Confirm+0x168>)
 8003b18:	f001 f846 	bl	8004ba8 <ssd1306_WriteString>

    ssd1306_SetCursor(0, 12);
 8003b1c:	210c      	movs	r1, #12
 8003b1e:	2000      	movs	r0, #0
 8003b20:	f001 f868 	bl	8004bf4 <ssd1306_SetCursor>
    ssd1306_WriteString("settings", *menu_font, White);
 8003b24:	4b4c      	ldr	r3, [pc, #304]	@ (8003c58 <OLED_Draw_Confirm+0x164>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	9200      	str	r2, [sp, #0]
 8003b2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b2e:	484c      	ldr	r0, [pc, #304]	@ (8003c60 <OLED_Draw_Confirm+0x16c>)
 8003b30:	f001 f83a 	bl	8004ba8 <ssd1306_WriteString>

    // IP адрес в две строки
    ssd1306_SetCursor(0, 22);
 8003b34:	2116      	movs	r1, #22
 8003b36:	2000      	movs	r0, #0
 8003b38:	f001 f85c 	bl	8004bf4 <ssd1306_SetCursor>
    ssd1306_WriteString("IP:", *menu_font, White);
 8003b3c:	4b46      	ldr	r3, [pc, #280]	@ (8003c58 <OLED_Draw_Confirm+0x164>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2201      	movs	r2, #1
 8003b42:	9200      	str	r2, [sp, #0]
 8003b44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b46:	4847      	ldr	r0, [pc, #284]	@ (8003c64 <OLED_Draw_Confirm+0x170>)
 8003b48:	f001 f82e 	bl	8004ba8 <ssd1306_WriteString>

    // Первая строка IP: 192.168.
    char ip_str1[16];
    snprintf(ip_str1, sizeof(ip_str1), "%d.%d.", last_ip[0], last_ip[1]);
 8003b4c:	4b46      	ldr	r3, [pc, #280]	@ (8003c68 <OLED_Draw_Confirm+0x174>)
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	461a      	mov	r2, r3
 8003b52:	4b45      	ldr	r3, [pc, #276]	@ (8003c68 <OLED_Draw_Confirm+0x174>)
 8003b54:	785b      	ldrb	r3, [r3, #1]
 8003b56:	f107 0014 	add.w	r0, r7, #20
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	4a43      	ldr	r2, [pc, #268]	@ (8003c6c <OLED_Draw_Confirm+0x178>)
 8003b60:	2110      	movs	r1, #16
 8003b62:	f01c fd0d 	bl	8020580 <sniprintf>
    ssd1306_SetCursor(10, 32);
 8003b66:	2120      	movs	r1, #32
 8003b68:	200a      	movs	r0, #10
 8003b6a:	f001 f843 	bl	8004bf4 <ssd1306_SetCursor>
    ssd1306_WriteString(ip_str1, *menu_font, White);
 8003b6e:	4b3a      	ldr	r3, [pc, #232]	@ (8003c58 <OLED_Draw_Confirm+0x164>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f107 0014 	add.w	r0, r7, #20
 8003b76:	2201      	movs	r2, #1
 8003b78:	9200      	str	r2, [sp, #0]
 8003b7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b7c:	f001 f814 	bl	8004ba8 <ssd1306_WriteString>

    // Вторая строка: 1.178
    char ip_str2[16];
    snprintf(ip_str2, sizeof(ip_str2), "%d.%d", last_ip[2], last_ip[3]);
 8003b80:	4b39      	ldr	r3, [pc, #228]	@ (8003c68 <OLED_Draw_Confirm+0x174>)
 8003b82:	789b      	ldrb	r3, [r3, #2]
 8003b84:	461a      	mov	r2, r3
 8003b86:	4b38      	ldr	r3, [pc, #224]	@ (8003c68 <OLED_Draw_Confirm+0x174>)
 8003b88:	78db      	ldrb	r3, [r3, #3]
 8003b8a:	1d38      	adds	r0, r7, #4
 8003b8c:	9300      	str	r3, [sp, #0]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	4a37      	ldr	r2, [pc, #220]	@ (8003c70 <OLED_Draw_Confirm+0x17c>)
 8003b92:	2110      	movs	r1, #16
 8003b94:	f01c fcf4 	bl	8020580 <sniprintf>
    ssd1306_SetCursor(10, 42);
 8003b98:	212a      	movs	r1, #42	@ 0x2a
 8003b9a:	200a      	movs	r0, #10
 8003b9c:	f001 f82a 	bl	8004bf4 <ssd1306_SetCursor>
    ssd1306_WriteString(ip_str2, *menu_font, White);
 8003ba0:	4b2d      	ldr	r3, [pc, #180]	@ (8003c58 <OLED_Draw_Confirm+0x164>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	1d38      	adds	r0, r7, #4
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	9200      	str	r2, [sp, #0]
 8003baa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bac:	f000 fffc 	bl	8004ba8 <ssd1306_WriteString>

    // Опции Yes/No
    if(confirm_selection == 0) {
 8003bb0:	4b30      	ldr	r3, [pc, #192]	@ (8003c74 <OLED_Draw_Confirm+0x180>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d124      	bne.n	8003c02 <OLED_Draw_Confirm+0x10e>
        // Yes выделено (слева)
        ssd1306_FillRect(0, 55, 25, menu_font->height + 2, White);
 8003bb8:	4b27      	ldr	r3, [pc, #156]	@ (8003c58 <OLED_Draw_Confirm+0x164>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	785b      	ldrb	r3, [r3, #1]
 8003bbe:	3302      	adds	r3, #2
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	9200      	str	r2, [sp, #0]
 8003bc6:	2219      	movs	r2, #25
 8003bc8:	2137      	movs	r1, #55	@ 0x37
 8003bca:	2000      	movs	r0, #0
 8003bcc:	f001 f986 	bl	8004edc <ssd1306_FillRect>
        ssd1306_SetCursor(2, 57);
 8003bd0:	2139      	movs	r1, #57	@ 0x39
 8003bd2:	2002      	movs	r0, #2
 8003bd4:	f001 f80e 	bl	8004bf4 <ssd1306_SetCursor>
        ssd1306_WriteString("Yes", *menu_font, Black);
 8003bd8:	4b1f      	ldr	r3, [pc, #124]	@ (8003c58 <OLED_Draw_Confirm+0x164>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	9200      	str	r2, [sp, #0]
 8003be0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003be2:	4825      	ldr	r0, [pc, #148]	@ (8003c78 <OLED_Draw_Confirm+0x184>)
 8003be4:	f000 ffe0 	bl	8004ba8 <ssd1306_WriteString>

        ssd1306_SetCursor(30, 57);
 8003be8:	2139      	movs	r1, #57	@ 0x39
 8003bea:	201e      	movs	r0, #30
 8003bec:	f001 f802 	bl	8004bf4 <ssd1306_SetCursor>
        ssd1306_WriteString("No", *menu_font, White);
 8003bf0:	4b19      	ldr	r3, [pc, #100]	@ (8003c58 <OLED_Draw_Confirm+0x164>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	9200      	str	r2, [sp, #0]
 8003bf8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bfa:	4820      	ldr	r0, [pc, #128]	@ (8003c7c <OLED_Draw_Confirm+0x188>)
 8003bfc:	f000 ffd4 	bl	8004ba8 <ssd1306_WriteString>
 8003c00:	e023      	b.n	8003c4a <OLED_Draw_Confirm+0x156>
    } else {
        // No выделено (справа)
        ssd1306_SetCursor(0, 57);
 8003c02:	2139      	movs	r1, #57	@ 0x39
 8003c04:	2000      	movs	r0, #0
 8003c06:	f000 fff5 	bl	8004bf4 <ssd1306_SetCursor>
        ssd1306_WriteString("Yes", *menu_font, White);
 8003c0a:	4b13      	ldr	r3, [pc, #76]	@ (8003c58 <OLED_Draw_Confirm+0x164>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	9200      	str	r2, [sp, #0]
 8003c12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c14:	4818      	ldr	r0, [pc, #96]	@ (8003c78 <OLED_Draw_Confirm+0x184>)
 8003c16:	f000 ffc7 	bl	8004ba8 <ssd1306_WriteString>

        ssd1306_FillRect(30, 55, 25, menu_font->height + 2, White);
 8003c1a:	4b0f      	ldr	r3, [pc, #60]	@ (8003c58 <OLED_Draw_Confirm+0x164>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	785b      	ldrb	r3, [r3, #1]
 8003c20:	3302      	adds	r3, #2
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2201      	movs	r2, #1
 8003c26:	9200      	str	r2, [sp, #0]
 8003c28:	2219      	movs	r2, #25
 8003c2a:	2137      	movs	r1, #55	@ 0x37
 8003c2c:	201e      	movs	r0, #30
 8003c2e:	f001 f955 	bl	8004edc <ssd1306_FillRect>
        ssd1306_SetCursor(32, 57);
 8003c32:	2139      	movs	r1, #57	@ 0x39
 8003c34:	2020      	movs	r0, #32
 8003c36:	f000 ffdd 	bl	8004bf4 <ssd1306_SetCursor>
        ssd1306_WriteString("No", *menu_font, Black);
 8003c3a:	4b07      	ldr	r3, [pc, #28]	@ (8003c58 <OLED_Draw_Confirm+0x164>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	9200      	str	r2, [sp, #0]
 8003c42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c44:	480d      	ldr	r0, [pc, #52]	@ (8003c7c <OLED_Draw_Confirm+0x188>)
 8003c46:	f000 ffaf 	bl	8004ba8 <ssd1306_WriteString>
    }

    ssd1306_UpdateScreen();
 8003c4a:	f000 fea3 	bl	8004994 <ssd1306_UpdateScreen>
}
 8003c4e:	bf00      	nop
 8003c50:	3728      	adds	r7, #40	@ 0x28
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	2000009c 	.word	0x2000009c
 8003c5c:	080233a0 	.word	0x080233a0
 8003c60:	080233a8 	.word	0x080233a8
 8003c64:	080233b4 	.word	0x080233b4
 8003c68:	20000074 	.word	0x20000074
 8003c6c:	080233b8 	.word	0x080233b8
 8003c70:	080233c0 	.word	0x080233c0
 8003c74:	20006ae8 	.word	0x20006ae8
 8003c78:	080233c8 	.word	0x080233c8
 8003c7c:	080233cc 	.word	0x080233cc

08003c80 <Apply_Network_Settings>:

// --- Применение сетевых настроек в LwIP ---
void Apply_Network_Settings(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af02      	add	r7, sp, #8
    ip_addr_t ip_addr, netmask, gw;

    // Преобразуем наши настройки в формат LwIP
    IP4_ADDR(&ip_addr, last_ip[0], last_ip[1], last_ip[2], last_ip[3]);
 8003c86:	4b85      	ldr	r3, [pc, #532]	@ (8003e9c <Apply_Network_Settings+0x21c>)
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	061a      	lsls	r2, r3, #24
 8003c8c:	4b83      	ldr	r3, [pc, #524]	@ (8003e9c <Apply_Network_Settings+0x21c>)
 8003c8e:	785b      	ldrb	r3, [r3, #1]
 8003c90:	041b      	lsls	r3, r3, #16
 8003c92:	431a      	orrs	r2, r3
 8003c94:	4b81      	ldr	r3, [pc, #516]	@ (8003e9c <Apply_Network_Settings+0x21c>)
 8003c96:	789b      	ldrb	r3, [r3, #2]
 8003c98:	021b      	lsls	r3, r3, #8
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	4a7f      	ldr	r2, [pc, #508]	@ (8003e9c <Apply_Network_Settings+0x21c>)
 8003c9e:	78d2      	ldrb	r2, [r2, #3]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	061a      	lsls	r2, r3, #24
 8003ca4:	4b7d      	ldr	r3, [pc, #500]	@ (8003e9c <Apply_Network_Settings+0x21c>)
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	0619      	lsls	r1, r3, #24
 8003caa:	4b7c      	ldr	r3, [pc, #496]	@ (8003e9c <Apply_Network_Settings+0x21c>)
 8003cac:	785b      	ldrb	r3, [r3, #1]
 8003cae:	041b      	lsls	r3, r3, #16
 8003cb0:	4319      	orrs	r1, r3
 8003cb2:	4b7a      	ldr	r3, [pc, #488]	@ (8003e9c <Apply_Network_Settings+0x21c>)
 8003cb4:	789b      	ldrb	r3, [r3, #2]
 8003cb6:	021b      	lsls	r3, r3, #8
 8003cb8:	430b      	orrs	r3, r1
 8003cba:	4978      	ldr	r1, [pc, #480]	@ (8003e9c <Apply_Network_Settings+0x21c>)
 8003cbc:	78c9      	ldrb	r1, [r1, #3]
 8003cbe:	430b      	orrs	r3, r1
 8003cc0:	021b      	lsls	r3, r3, #8
 8003cc2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	4b74      	ldr	r3, [pc, #464]	@ (8003e9c <Apply_Network_Settings+0x21c>)
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	0619      	lsls	r1, r3, #24
 8003cce:	4b73      	ldr	r3, [pc, #460]	@ (8003e9c <Apply_Network_Settings+0x21c>)
 8003cd0:	785b      	ldrb	r3, [r3, #1]
 8003cd2:	041b      	lsls	r3, r3, #16
 8003cd4:	4319      	orrs	r1, r3
 8003cd6:	4b71      	ldr	r3, [pc, #452]	@ (8003e9c <Apply_Network_Settings+0x21c>)
 8003cd8:	789b      	ldrb	r3, [r3, #2]
 8003cda:	021b      	lsls	r3, r3, #8
 8003cdc:	430b      	orrs	r3, r1
 8003cde:	496f      	ldr	r1, [pc, #444]	@ (8003e9c <Apply_Network_Settings+0x21c>)
 8003ce0:	78c9      	ldrb	r1, [r1, #3]
 8003ce2:	430b      	orrs	r3, r1
 8003ce4:	0a1b      	lsrs	r3, r3, #8
 8003ce6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003cea:	431a      	orrs	r2, r3
 8003cec:	4b6b      	ldr	r3, [pc, #428]	@ (8003e9c <Apply_Network_Settings+0x21c>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	0619      	lsls	r1, r3, #24
 8003cf2:	4b6a      	ldr	r3, [pc, #424]	@ (8003e9c <Apply_Network_Settings+0x21c>)
 8003cf4:	785b      	ldrb	r3, [r3, #1]
 8003cf6:	041b      	lsls	r3, r3, #16
 8003cf8:	4319      	orrs	r1, r3
 8003cfa:	4b68      	ldr	r3, [pc, #416]	@ (8003e9c <Apply_Network_Settings+0x21c>)
 8003cfc:	789b      	ldrb	r3, [r3, #2]
 8003cfe:	021b      	lsls	r3, r3, #8
 8003d00:	430b      	orrs	r3, r1
 8003d02:	4966      	ldr	r1, [pc, #408]	@ (8003e9c <Apply_Network_Settings+0x21c>)
 8003d04:	78c9      	ldrb	r1, [r1, #3]
 8003d06:	430b      	orrs	r3, r1
 8003d08:	0e1b      	lsrs	r3, r3, #24
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	60fb      	str	r3, [r7, #12]
    IP4_ADDR(&netmask, last_mask[0], last_mask[1], last_mask[2], last_mask[3]);
 8003d0e:	4b64      	ldr	r3, [pc, #400]	@ (8003ea0 <Apply_Network_Settings+0x220>)
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	061a      	lsls	r2, r3, #24
 8003d14:	4b62      	ldr	r3, [pc, #392]	@ (8003ea0 <Apply_Network_Settings+0x220>)
 8003d16:	785b      	ldrb	r3, [r3, #1]
 8003d18:	041b      	lsls	r3, r3, #16
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	4b60      	ldr	r3, [pc, #384]	@ (8003ea0 <Apply_Network_Settings+0x220>)
 8003d1e:	789b      	ldrb	r3, [r3, #2]
 8003d20:	021b      	lsls	r3, r3, #8
 8003d22:	4313      	orrs	r3, r2
 8003d24:	4a5e      	ldr	r2, [pc, #376]	@ (8003ea0 <Apply_Network_Settings+0x220>)
 8003d26:	78d2      	ldrb	r2, [r2, #3]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	061a      	lsls	r2, r3, #24
 8003d2c:	4b5c      	ldr	r3, [pc, #368]	@ (8003ea0 <Apply_Network_Settings+0x220>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	0619      	lsls	r1, r3, #24
 8003d32:	4b5b      	ldr	r3, [pc, #364]	@ (8003ea0 <Apply_Network_Settings+0x220>)
 8003d34:	785b      	ldrb	r3, [r3, #1]
 8003d36:	041b      	lsls	r3, r3, #16
 8003d38:	4319      	orrs	r1, r3
 8003d3a:	4b59      	ldr	r3, [pc, #356]	@ (8003ea0 <Apply_Network_Settings+0x220>)
 8003d3c:	789b      	ldrb	r3, [r3, #2]
 8003d3e:	021b      	lsls	r3, r3, #8
 8003d40:	430b      	orrs	r3, r1
 8003d42:	4957      	ldr	r1, [pc, #348]	@ (8003ea0 <Apply_Network_Settings+0x220>)
 8003d44:	78c9      	ldrb	r1, [r1, #3]
 8003d46:	430b      	orrs	r3, r1
 8003d48:	021b      	lsls	r3, r3, #8
 8003d4a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	4b53      	ldr	r3, [pc, #332]	@ (8003ea0 <Apply_Network_Settings+0x220>)
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	0619      	lsls	r1, r3, #24
 8003d56:	4b52      	ldr	r3, [pc, #328]	@ (8003ea0 <Apply_Network_Settings+0x220>)
 8003d58:	785b      	ldrb	r3, [r3, #1]
 8003d5a:	041b      	lsls	r3, r3, #16
 8003d5c:	4319      	orrs	r1, r3
 8003d5e:	4b50      	ldr	r3, [pc, #320]	@ (8003ea0 <Apply_Network_Settings+0x220>)
 8003d60:	789b      	ldrb	r3, [r3, #2]
 8003d62:	021b      	lsls	r3, r3, #8
 8003d64:	430b      	orrs	r3, r1
 8003d66:	494e      	ldr	r1, [pc, #312]	@ (8003ea0 <Apply_Network_Settings+0x220>)
 8003d68:	78c9      	ldrb	r1, [r1, #3]
 8003d6a:	430b      	orrs	r3, r1
 8003d6c:	0a1b      	lsrs	r3, r3, #8
 8003d6e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003d72:	431a      	orrs	r2, r3
 8003d74:	4b4a      	ldr	r3, [pc, #296]	@ (8003ea0 <Apply_Network_Settings+0x220>)
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	0619      	lsls	r1, r3, #24
 8003d7a:	4b49      	ldr	r3, [pc, #292]	@ (8003ea0 <Apply_Network_Settings+0x220>)
 8003d7c:	785b      	ldrb	r3, [r3, #1]
 8003d7e:	041b      	lsls	r3, r3, #16
 8003d80:	4319      	orrs	r1, r3
 8003d82:	4b47      	ldr	r3, [pc, #284]	@ (8003ea0 <Apply_Network_Settings+0x220>)
 8003d84:	789b      	ldrb	r3, [r3, #2]
 8003d86:	021b      	lsls	r3, r3, #8
 8003d88:	430b      	orrs	r3, r1
 8003d8a:	4945      	ldr	r1, [pc, #276]	@ (8003ea0 <Apply_Network_Settings+0x220>)
 8003d8c:	78c9      	ldrb	r1, [r1, #3]
 8003d8e:	430b      	orrs	r3, r1
 8003d90:	0e1b      	lsrs	r3, r3, #24
 8003d92:	4313      	orrs	r3, r2
 8003d94:	60bb      	str	r3, [r7, #8]
    IP4_ADDR(&gw, last_gw[0], last_gw[1], last_gw[2], last_gw[3]);
 8003d96:	4b43      	ldr	r3, [pc, #268]	@ (8003ea4 <Apply_Network_Settings+0x224>)
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	061a      	lsls	r2, r3, #24
 8003d9c:	4b41      	ldr	r3, [pc, #260]	@ (8003ea4 <Apply_Network_Settings+0x224>)
 8003d9e:	785b      	ldrb	r3, [r3, #1]
 8003da0:	041b      	lsls	r3, r3, #16
 8003da2:	431a      	orrs	r2, r3
 8003da4:	4b3f      	ldr	r3, [pc, #252]	@ (8003ea4 <Apply_Network_Settings+0x224>)
 8003da6:	789b      	ldrb	r3, [r3, #2]
 8003da8:	021b      	lsls	r3, r3, #8
 8003daa:	4313      	orrs	r3, r2
 8003dac:	4a3d      	ldr	r2, [pc, #244]	@ (8003ea4 <Apply_Network_Settings+0x224>)
 8003dae:	78d2      	ldrb	r2, [r2, #3]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	061a      	lsls	r2, r3, #24
 8003db4:	4b3b      	ldr	r3, [pc, #236]	@ (8003ea4 <Apply_Network_Settings+0x224>)
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	0619      	lsls	r1, r3, #24
 8003dba:	4b3a      	ldr	r3, [pc, #232]	@ (8003ea4 <Apply_Network_Settings+0x224>)
 8003dbc:	785b      	ldrb	r3, [r3, #1]
 8003dbe:	041b      	lsls	r3, r3, #16
 8003dc0:	4319      	orrs	r1, r3
 8003dc2:	4b38      	ldr	r3, [pc, #224]	@ (8003ea4 <Apply_Network_Settings+0x224>)
 8003dc4:	789b      	ldrb	r3, [r3, #2]
 8003dc6:	021b      	lsls	r3, r3, #8
 8003dc8:	430b      	orrs	r3, r1
 8003dca:	4936      	ldr	r1, [pc, #216]	@ (8003ea4 <Apply_Network_Settings+0x224>)
 8003dcc:	78c9      	ldrb	r1, [r1, #3]
 8003dce:	430b      	orrs	r3, r1
 8003dd0:	021b      	lsls	r3, r3, #8
 8003dd2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	4b32      	ldr	r3, [pc, #200]	@ (8003ea4 <Apply_Network_Settings+0x224>)
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	0619      	lsls	r1, r3, #24
 8003dde:	4b31      	ldr	r3, [pc, #196]	@ (8003ea4 <Apply_Network_Settings+0x224>)
 8003de0:	785b      	ldrb	r3, [r3, #1]
 8003de2:	041b      	lsls	r3, r3, #16
 8003de4:	4319      	orrs	r1, r3
 8003de6:	4b2f      	ldr	r3, [pc, #188]	@ (8003ea4 <Apply_Network_Settings+0x224>)
 8003de8:	789b      	ldrb	r3, [r3, #2]
 8003dea:	021b      	lsls	r3, r3, #8
 8003dec:	430b      	orrs	r3, r1
 8003dee:	492d      	ldr	r1, [pc, #180]	@ (8003ea4 <Apply_Network_Settings+0x224>)
 8003df0:	78c9      	ldrb	r1, [r1, #3]
 8003df2:	430b      	orrs	r3, r1
 8003df4:	0a1b      	lsrs	r3, r3, #8
 8003df6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	4b29      	ldr	r3, [pc, #164]	@ (8003ea4 <Apply_Network_Settings+0x224>)
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	0619      	lsls	r1, r3, #24
 8003e02:	4b28      	ldr	r3, [pc, #160]	@ (8003ea4 <Apply_Network_Settings+0x224>)
 8003e04:	785b      	ldrb	r3, [r3, #1]
 8003e06:	041b      	lsls	r3, r3, #16
 8003e08:	4319      	orrs	r1, r3
 8003e0a:	4b26      	ldr	r3, [pc, #152]	@ (8003ea4 <Apply_Network_Settings+0x224>)
 8003e0c:	789b      	ldrb	r3, [r3, #2]
 8003e0e:	021b      	lsls	r3, r3, #8
 8003e10:	430b      	orrs	r3, r1
 8003e12:	4924      	ldr	r1, [pc, #144]	@ (8003ea4 <Apply_Network_Settings+0x224>)
 8003e14:	78c9      	ldrb	r1, [r1, #3]
 8003e16:	430b      	orrs	r3, r1
 8003e18:	0e1b      	lsrs	r3, r3, #24
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	607b      	str	r3, [r7, #4]

    // Применяем статический IP
    netif_set_addr(&gnetif, &ip_addr, &netmask, &gw);
 8003e1e:	1d3b      	adds	r3, r7, #4
 8003e20:	f107 0208 	add.w	r2, r7, #8
 8003e24:	f107 010c 	add.w	r1, r7, #12
 8003e28:	481f      	ldr	r0, [pc, #124]	@ (8003ea8 <Apply_Network_Settings+0x228>)
 8003e2a:	f00f fe83 	bl	8013b34 <netif_set_addr>

    printf("Network settings applied:\n");
 8003e2e:	481f      	ldr	r0, [pc, #124]	@ (8003eac <Apply_Network_Settings+0x22c>)
 8003e30:	f01c fb9e 	bl	8020570 <puts>
    printf("IP: %d.%d.%d.%d\n", last_ip[0], last_ip[1], last_ip[2], last_ip[3]);
 8003e34:	4b19      	ldr	r3, [pc, #100]	@ (8003e9c <Apply_Network_Settings+0x21c>)
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	4619      	mov	r1, r3
 8003e3a:	4b18      	ldr	r3, [pc, #96]	@ (8003e9c <Apply_Network_Settings+0x21c>)
 8003e3c:	785b      	ldrb	r3, [r3, #1]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	4b16      	ldr	r3, [pc, #88]	@ (8003e9c <Apply_Network_Settings+0x21c>)
 8003e42:	789b      	ldrb	r3, [r3, #2]
 8003e44:	4618      	mov	r0, r3
 8003e46:	4b15      	ldr	r3, [pc, #84]	@ (8003e9c <Apply_Network_Settings+0x21c>)
 8003e48:	78db      	ldrb	r3, [r3, #3]
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	4818      	ldr	r0, [pc, #96]	@ (8003eb0 <Apply_Network_Settings+0x230>)
 8003e50:	f01c fb26 	bl	80204a0 <iprintf>
    printf("Mask: %d.%d.%d.%d\n", last_mask[0], last_mask[1], last_mask[2], last_mask[3]);
 8003e54:	4b12      	ldr	r3, [pc, #72]	@ (8003ea0 <Apply_Network_Settings+0x220>)
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	4619      	mov	r1, r3
 8003e5a:	4b11      	ldr	r3, [pc, #68]	@ (8003ea0 <Apply_Network_Settings+0x220>)
 8003e5c:	785b      	ldrb	r3, [r3, #1]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	4b0f      	ldr	r3, [pc, #60]	@ (8003ea0 <Apply_Network_Settings+0x220>)
 8003e62:	789b      	ldrb	r3, [r3, #2]
 8003e64:	4618      	mov	r0, r3
 8003e66:	4b0e      	ldr	r3, [pc, #56]	@ (8003ea0 <Apply_Network_Settings+0x220>)
 8003e68:	78db      	ldrb	r3, [r3, #3]
 8003e6a:	9300      	str	r3, [sp, #0]
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	4811      	ldr	r0, [pc, #68]	@ (8003eb4 <Apply_Network_Settings+0x234>)
 8003e70:	f01c fb16 	bl	80204a0 <iprintf>
    printf("GW: %d.%d.%d.%d\n", last_gw[0], last_gw[1], last_gw[2], last_gw[3]);
 8003e74:	4b0b      	ldr	r3, [pc, #44]	@ (8003ea4 <Apply_Network_Settings+0x224>)
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	4619      	mov	r1, r3
 8003e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8003ea4 <Apply_Network_Settings+0x224>)
 8003e7c:	785b      	ldrb	r3, [r3, #1]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	4b08      	ldr	r3, [pc, #32]	@ (8003ea4 <Apply_Network_Settings+0x224>)
 8003e82:	789b      	ldrb	r3, [r3, #2]
 8003e84:	4618      	mov	r0, r3
 8003e86:	4b07      	ldr	r3, [pc, #28]	@ (8003ea4 <Apply_Network_Settings+0x224>)
 8003e88:	78db      	ldrb	r3, [r3, #3]
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	480a      	ldr	r0, [pc, #40]	@ (8003eb8 <Apply_Network_Settings+0x238>)
 8003e90:	f01c fb06 	bl	80204a0 <iprintf>
}
 8003e94:	bf00      	nop
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	20000074 	.word	0x20000074
 8003ea0:	20000078 	.word	0x20000078
 8003ea4:	2000007c 	.word	0x2000007c
 8003ea8:	20006f20 	.word	0x20006f20
 8003eac:	080233d0 	.word	0x080233d0
 8003eb0:	080233ec 	.word	0x080233ec
 8003eb4:	08023400 	.word	0x08023400
 8003eb8:	08023414 	.word	0x08023414

08003ebc <DHCP_Apply>:

// --- Применение DHCP ---
static void DHCP_Apply()
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
    if(dhcp_on)
 8003ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8003eec <DHCP_Apply+0x30>)
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d006      	beq.n	8003ed6 <DHCP_Apply+0x1a>
    {
        // Включаем DHCP
        dhcp_start(&gnetif);
 8003ec8:	4809      	ldr	r0, [pc, #36]	@ (8003ef0 <DHCP_Apply+0x34>)
 8003eca:	f017 fa5f 	bl	801b38c <dhcp_start>
        printf("DHCP enabled\n");
 8003ece:	4809      	ldr	r0, [pc, #36]	@ (8003ef4 <DHCP_Apply+0x38>)
 8003ed0:	f01c fb4e 	bl	8020570 <puts>
        // Выключаем DHCP и применяем статический IP
        dhcp_stop(&gnetif);
        Apply_Network_Settings();
        printf("DHCP disabled, static IP applied\n");
    }
}
 8003ed4:	e007      	b.n	8003ee6 <DHCP_Apply+0x2a>
        dhcp_stop(&gnetif);
 8003ed6:	4806      	ldr	r0, [pc, #24]	@ (8003ef0 <DHCP_Apply+0x34>)
 8003ed8:	f017 ff08 	bl	801bcec <dhcp_stop>
        Apply_Network_Settings();
 8003edc:	f7ff fed0 	bl	8003c80 <Apply_Network_Settings>
        printf("DHCP disabled, static IP applied\n");
 8003ee0:	4805      	ldr	r0, [pc, #20]	@ (8003ef8 <DHCP_Apply+0x3c>)
 8003ee2:	f01c fb45 	bl	8020570 <puts>
}
 8003ee6:	bf00      	nop
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	200000b8 	.word	0x200000b8
 8003ef0:	20006f20 	.word	0x20006f20
 8003ef4:	08023428 	.word	0x08023428
 8003ef8:	08023438 	.word	0x08023438

08003efc <OLED_Confirm>:

// --- Подтверждение действий ---
static bool OLED_Confirm(const char *msg)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af02      	add	r7, sp, #8
 8003f02:	6078      	str	r0, [r7, #4]
    ssd1306_Fill(Black);
 8003f04:	2000      	movs	r0, #0
 8003f06:	f000 fd2d 	bl	8004964 <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	2000      	movs	r0, #0
 8003f0e:	f000 fe71 	bl	8004bf4 <ssd1306_SetCursor>
    ssd1306_WriteString((char*)msg, *menu_font, White);
 8003f12:	4b23      	ldr	r3, [pc, #140]	@ (8003fa0 <OLED_Confirm+0xa4>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2201      	movs	r2, #1
 8003f18:	9200      	str	r2, [sp, #0]
 8003f1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 fe43 	bl	8004ba8 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 16);
 8003f22:	2110      	movs	r1, #16
 8003f24:	2000      	movs	r0, #0
 8003f26:	f000 fe65 	bl	8004bf4 <ssd1306_SetCursor>
    ssd1306_WriteString("Middle=OK", *menu_font, White);
 8003f2a:	4b1d      	ldr	r3, [pc, #116]	@ (8003fa0 <OLED_Confirm+0xa4>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	9200      	str	r2, [sp, #0]
 8003f32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f34:	481b      	ldr	r0, [pc, #108]	@ (8003fa4 <OLED_Confirm+0xa8>)
 8003f36:	f000 fe37 	bl	8004ba8 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 26);
 8003f3a:	211a      	movs	r1, #26
 8003f3c:	2000      	movs	r0, #0
 8003f3e:	f000 fe59 	bl	8004bf4 <ssd1306_SetCursor>
    ssd1306_WriteString("Left/Right=Cancel", *menu_font, White);
 8003f42:	4b17      	ldr	r3, [pc, #92]	@ (8003fa0 <OLED_Confirm+0xa4>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2201      	movs	r2, #1
 8003f48:	9200      	str	r2, [sp, #0]
 8003f4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f4c:	4816      	ldr	r0, [pc, #88]	@ (8003fa8 <OLED_Confirm+0xac>)
 8003f4e:	f000 fe2b 	bl	8004ba8 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8003f52:	f000 fd1f 	bl	8004994 <ssd1306_UpdateScreen>

    // Ждём нажатия
    while(1)
    {
        update_activity_time();
 8003f56:	f000 f9a7 	bl	80042a8 <update_activity_time>

        if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == GPIO_PIN_RESET)
 8003f5a:	2104      	movs	r1, #4
 8003f5c:	4813      	ldr	r0, [pc, #76]	@ (8003fac <OLED_Confirm+0xb0>)
 8003f5e:	f003 fe73 	bl	8007c48 <HAL_GPIO_ReadPin>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <OLED_Confirm+0x70>
            return true;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e015      	b.n	8003f98 <OLED_Confirm+0x9c>
        if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1) == GPIO_PIN_RESET)
 8003f6c:	2102      	movs	r1, #2
 8003f6e:	480f      	ldr	r0, [pc, #60]	@ (8003fac <OLED_Confirm+0xb0>)
 8003f70:	f003 fe6a 	bl	8007c48 <HAL_GPIO_ReadPin>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <OLED_Confirm+0x82>
            return false;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	e00c      	b.n	8003f98 <OLED_Confirm+0x9c>
        if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3) == GPIO_PIN_RESET)
 8003f7e:	2108      	movs	r1, #8
 8003f80:	480a      	ldr	r0, [pc, #40]	@ (8003fac <OLED_Confirm+0xb0>)
 8003f82:	f003 fe61 	bl	8007c48 <HAL_GPIO_ReadPin>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <OLED_Confirm+0x94>
            return false;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	e003      	b.n	8003f98 <OLED_Confirm+0x9c>

        // Добавляем небольшую задержку для уменьшения нагрузки на CPU
        HAL_Delay(50);
 8003f90:	2032      	movs	r0, #50	@ 0x32
 8003f92:	f001 f86f 	bl	8005074 <HAL_Delay>
        update_activity_time();
 8003f96:	e7de      	b.n	8003f56 <OLED_Confirm+0x5a>
    }
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3708      	adds	r7, #8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	2000009c 	.word	0x2000009c
 8003fa4:	0802345c 	.word	0x0802345c
 8003fa8:	08023468 	.word	0x08023468
 8003fac:	40020c00 	.word	0x40020c00

08003fb0 <OLED_Settings_Draw>:

// Рисуем меню
void OLED_Settings_Draw(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b08a      	sub	sp, #40	@ 0x28
 8003fb4:	af02      	add	r7, sp, #8
    if(confirm_active) {
 8003fb6:	4b40      	ldr	r3, [pc, #256]	@ (80040b8 <OLED_Settings_Draw+0x108>)
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d002      	beq.n	8003fc4 <OLED_Settings_Draw+0x14>
        OLED_Draw_Confirm();
 8003fbe:	f7ff fd99 	bl	8003af4 <OLED_Draw_Confirm>
 8003fc2:	e075      	b.n	80040b0 <OLED_Settings_Draw+0x100>
        return;
    }

    ssd1306_Fill(Black);
 8003fc4:	2000      	movs	r0, #0
 8003fc6:	f000 fccd 	bl	8004964 <ssd1306_Fill>
    const int SW = SSD1306_ROTATED_WIDTH;
 8003fca:	2340      	movs	r3, #64	@ 0x40
 8003fcc:	613b      	str	r3, [r7, #16]

    // Заголовок
    const char title[] = "Settings";
 8003fce:	4a3b      	ldr	r2, [pc, #236]	@ (80040bc <OLED_Settings_Draw+0x10c>)
 8003fd0:	1d3b      	adds	r3, r7, #4
 8003fd2:	ca07      	ldmia	r2, {r0, r1, r2}
 8003fd4:	c303      	stmia	r3!, {r0, r1}
 8003fd6:	701a      	strb	r2, [r3, #0]
    int title_x = (SW / 2) - ((int)strlen(title) * menu_font->width / 2);
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	0fda      	lsrs	r2, r3, #31
 8003fdc:	4413      	add	r3, r2
 8003fde:	105b      	asrs	r3, r3, #1
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	4b37      	ldr	r3, [pc, #220]	@ (80040c0 <OLED_Settings_Draw+0x110>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	61fb      	str	r3, [r7, #28]
    if(title_x < 0) title_x = 0;
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	da01      	bge.n	8003ff8 <OLED_Settings_Draw+0x48>
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	61fb      	str	r3, [r7, #28]
    ssd1306_SetCursor(title_x, 2);
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2102      	movs	r1, #2
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 fdf8 	bl	8004bf4 <ssd1306_SetCursor>
    ssd1306_WriteString((char*)title, *menu_font, White);
 8004004:	4b2e      	ldr	r3, [pc, #184]	@ (80040c0 <OLED_Settings_Draw+0x110>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	1d38      	adds	r0, r7, #4
 800400a:	2201      	movs	r2, #1
 800400c:	9200      	str	r2, [sp, #0]
 800400e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004010:	f000 fdca 	bl	8004ba8 <ssd1306_WriteString>

    // Список пунктов
    int y = 16;
 8004014:	2310      	movs	r3, #16
 8004016:	61bb      	str	r3, [r7, #24]
    for(int i = 0; i < MENU_ITEMS_COUNT; i++)
 8004018:	2300      	movs	r3, #0
 800401a:	617b      	str	r3, [r7, #20]
 800401c:	e043      	b.n	80040a6 <OLED_Settings_Draw+0xf6>
    {
        if(i == selected_index)
 800401e:	4b29      	ldr	r3, [pc, #164]	@ (80040c4 <OLED_Settings_Draw+0x114>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	429a      	cmp	r2, r3
 8004026:	d121      	bne.n	800406c <OLED_Settings_Draw+0xbc>
        {
            ssd1306_FillRect(0, y - 1, SW, menu_font->height + 2, White);
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	b2db      	uxtb	r3, r3
 800402c:	3b01      	subs	r3, #1
 800402e:	b2d9      	uxtb	r1, r3
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	b2da      	uxtb	r2, r3
 8004034:	4b22      	ldr	r3, [pc, #136]	@ (80040c0 <OLED_Settings_Draw+0x110>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	785b      	ldrb	r3, [r3, #1]
 800403a:	3302      	adds	r3, #2
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2001      	movs	r0, #1
 8004040:	9000      	str	r0, [sp, #0]
 8004042:	2000      	movs	r0, #0
 8004044:	f000 ff4a 	bl	8004edc <ssd1306_FillRect>
            ssd1306_SetCursor(2, y);
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	b2db      	uxtb	r3, r3
 800404c:	4619      	mov	r1, r3
 800404e:	2002      	movs	r0, #2
 8004050:	f000 fdd0 	bl	8004bf4 <ssd1306_SetCursor>
            ssd1306_WriteString((char*)menu_items[i], *menu_font, Black);
 8004054:	4a1c      	ldr	r2, [pc, #112]	@ (80040c8 <OLED_Settings_Draw+0x118>)
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800405c:	4b18      	ldr	r3, [pc, #96]	@ (80040c0 <OLED_Settings_Draw+0x110>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2200      	movs	r2, #0
 8004062:	9200      	str	r2, [sp, #0]
 8004064:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004066:	f000 fd9f 	bl	8004ba8 <ssd1306_WriteString>
 800406a:	e010      	b.n	800408e <OLED_Settings_Draw+0xde>
        }
        else
        {
            ssd1306_SetCursor(2, y);
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	b2db      	uxtb	r3, r3
 8004070:	4619      	mov	r1, r3
 8004072:	2002      	movs	r0, #2
 8004074:	f000 fdbe 	bl	8004bf4 <ssd1306_SetCursor>
            ssd1306_WriteString((char*)menu_items[i], *menu_font, White);
 8004078:	4a13      	ldr	r2, [pc, #76]	@ (80040c8 <OLED_Settings_Draw+0x118>)
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004080:	4b0f      	ldr	r3, [pc, #60]	@ (80040c0 <OLED_Settings_Draw+0x110>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2201      	movs	r2, #1
 8004086:	9200      	str	r2, [sp, #0]
 8004088:	cb0e      	ldmia	r3, {r1, r2, r3}
 800408a:	f000 fd8d 	bl	8004ba8 <ssd1306_WriteString>
        }
        y += menu_font->height + vpad;
 800408e:	4b0c      	ldr	r3, [pc, #48]	@ (80040c0 <OLED_Settings_Draw+0x110>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	785b      	ldrb	r3, [r3, #1]
 8004094:	461a      	mov	r2, r3
 8004096:	2303      	movs	r3, #3
 8004098:	4413      	add	r3, r2
 800409a:	69ba      	ldr	r2, [r7, #24]
 800409c:	4413      	add	r3, r2
 800409e:	61bb      	str	r3, [r7, #24]
    for(int i = 0; i < MENU_ITEMS_COUNT; i++)
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	3301      	adds	r3, #1
 80040a4:	617b      	str	r3, [r7, #20]
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2b06      	cmp	r3, #6
 80040aa:	d9b8      	bls.n	800401e <OLED_Settings_Draw+0x6e>
    }

    ssd1306_UpdateScreen();
 80040ac:	f000 fc72 	bl	8004994 <ssd1306_UpdateScreen>
}
 80040b0:	3720      	adds	r7, #32
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	20006ae5 	.word	0x20006ae5
 80040bc:	0802347c 	.word	0x0802347c
 80040c0:	2000009c 	.word	0x2000009c
 80040c4:	20006ad4 	.word	0x20006ad4
 80040c8:	20000080 	.word	0x20000080

080040cc <OLED_Draw_Edit>:

// --- Отображение IP/Mask/GW при редактировании ---
static void OLED_Draw_Edit()
{
 80040cc:	b590      	push	{r4, r7, lr}
 80040ce:	b08d      	sub	sp, #52	@ 0x34
 80040d0:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 80040d2:	2000      	movs	r0, #0
 80040d4:	f000 fc46 	bl	8004964 <ssd1306_Fill>
    const int SW = SSD1306_ROTATED_WIDTH;
 80040d8:	2340      	movs	r3, #64	@ 0x40
 80040da:	617b      	str	r3, [r7, #20]
    const int SH = SSD1306_ROTATED_HEIGHT;
 80040dc:	2380      	movs	r3, #128	@ 0x80
 80040de:	613b      	str	r3, [r7, #16]

    // Заголовок по центру
    int title_x = (SW / 2) - ((int)strlen(edit_title) * menu_font->width / 2);
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	0fda      	lsrs	r2, r3, #31
 80040e4:	4413      	add	r3, r2
 80040e6:	105b      	asrs	r3, r3, #1
 80040e8:	461c      	mov	r4, r3
 80040ea:	4866      	ldr	r0, [pc, #408]	@ (8004284 <OLED_Draw_Edit+0x1b8>)
 80040ec:	f7fc f876 	bl	80001dc <strlen>
 80040f0:	4603      	mov	r3, r0
 80040f2:	461a      	mov	r2, r3
 80040f4:	4b64      	ldr	r3, [pc, #400]	@ (8004288 <OLED_Draw_Edit+0x1bc>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	fb02 f303 	mul.w	r3, r2, r3
 80040fe:	0fda      	lsrs	r2, r3, #31
 8004100:	4413      	add	r3, r2
 8004102:	105b      	asrs	r3, r3, #1
 8004104:	425b      	negs	r3, r3
 8004106:	4423      	add	r3, r4
 8004108:	627b      	str	r3, [r7, #36]	@ 0x24
    if(title_x < 0) title_x = 0;
 800410a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410c:	2b00      	cmp	r3, #0
 800410e:	da01      	bge.n	8004114 <OLED_Draw_Edit+0x48>
 8004110:	2300      	movs	r3, #0
 8004112:	627b      	str	r3, [r7, #36]	@ 0x24
    ssd1306_SetCursor(title_x, 2);
 8004114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2102      	movs	r1, #2
 800411a:	4618      	mov	r0, r3
 800411c:	f000 fd6a 	bl	8004bf4 <ssd1306_SetCursor>
    ssd1306_WriteString(edit_title, *menu_font, White);
 8004120:	4b59      	ldr	r3, [pc, #356]	@ (8004288 <OLED_Draw_Edit+0x1bc>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2201      	movs	r2, #1
 8004126:	9200      	str	r2, [sp, #0]
 8004128:	cb0e      	ldmia	r3, {r1, r2, r3}
 800412a:	4856      	ldr	r0, [pc, #344]	@ (8004284 <OLED_Draw_Edit+0x1b8>)
 800412c:	f000 fd3c 	bl	8004ba8 <ssd1306_WriteString>

    // Отображение IP адреса в столбик по центру
    int start_y = 15;
 8004130:	230f      	movs	r3, #15
 8004132:	623b      	str	r3, [r7, #32]
    int part_spacing = edit_font->height + 2;
 8004134:	4b55      	ldr	r3, [pc, #340]	@ (800428c <OLED_Draw_Edit+0x1c0>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	785b      	ldrb	r3, [r3, #1]
 800413a:	3302      	adds	r3, #2
 800413c:	60fb      	str	r3, [r7, #12]

    for(int i = 0; i < 4; i++)
 800413e:	2300      	movs	r3, #0
 8004140:	61fb      	str	r3, [r7, #28]
 8004142:	e066      	b.n	8004212 <OLED_Draw_Edit+0x146>
    {
        char part_str[4];
        snprintf(part_str, sizeof(part_str), "%d", edit_parts[i]);
 8004144:	4a52      	ldr	r2, [pc, #328]	@ (8004290 <OLED_Draw_Edit+0x1c4>)
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	4413      	add	r3, r2
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	1d38      	adds	r0, r7, #4
 800414e:	4a51      	ldr	r2, [pc, #324]	@ (8004294 <OLED_Draw_Edit+0x1c8>)
 8004150:	2104      	movs	r1, #4
 8004152:	f01c fa15 	bl	8020580 <sniprintf>

        // Центрирование по горизонтали
        int part_width = strlen(part_str) * edit_font->width;
 8004156:	1d3b      	adds	r3, r7, #4
 8004158:	4618      	mov	r0, r3
 800415a:	f7fc f83f 	bl	80001dc <strlen>
 800415e:	4602      	mov	r2, r0
 8004160:	4b4a      	ldr	r3, [pc, #296]	@ (800428c <OLED_Draw_Edit+0x1c0>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	fb02 f303 	mul.w	r3, r2, r3
 800416a:	60bb      	str	r3, [r7, #8]
        int part_x = (SW / 2) - (part_width / 2);
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	0fda      	lsrs	r2, r3, #31
 8004170:	4413      	add	r3, r2
 8004172:	105b      	asrs	r3, r3, #1
 8004174:	4619      	mov	r1, r3
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	0fda      	lsrs	r2, r3, #31
 800417a:	4413      	add	r3, r2
 800417c:	105b      	asrs	r3, r3, #1
 800417e:	425b      	negs	r3, r3
 8004180:	440b      	add	r3, r1
 8004182:	61bb      	str	r3, [r7, #24]
        if(part_x < 0) part_x = 0;
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	2b00      	cmp	r3, #0
 8004188:	da01      	bge.n	800418e <OLED_Draw_Edit+0xc2>
 800418a:	2300      	movs	r3, #0
 800418c:	61bb      	str	r3, [r7, #24]

        // Подсветка текущей части
        if(i == edit_digit)
 800418e:	4b42      	ldr	r3, [pc, #264]	@ (8004298 <OLED_Draw_Edit+0x1cc>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	69fa      	ldr	r2, [r7, #28]
 8004194:	429a      	cmp	r2, r3
 8004196:	d125      	bne.n	80041e4 <OLED_Draw_Edit+0x118>
        {
            ssd1306_FillRect(part_x - 2, start_y - 1, part_width + 4, edit_font->height + 2, White);
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	b2db      	uxtb	r3, r3
 800419c:	3b02      	subs	r3, #2
 800419e:	b2d8      	uxtb	r0, r3
 80041a0:	6a3b      	ldr	r3, [r7, #32]
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	3b01      	subs	r3, #1
 80041a6:	b2d9      	uxtb	r1, r3
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	3304      	adds	r3, #4
 80041ae:	b2da      	uxtb	r2, r3
 80041b0:	4b36      	ldr	r3, [pc, #216]	@ (800428c <OLED_Draw_Edit+0x1c0>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	785b      	ldrb	r3, [r3, #1]
 80041b6:	3302      	adds	r3, #2
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2401      	movs	r4, #1
 80041bc:	9400      	str	r4, [sp, #0]
 80041be:	f000 fe8d 	bl	8004edc <ssd1306_FillRect>
            ssd1306_SetCursor(part_x, start_y);
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	6a3a      	ldr	r2, [r7, #32]
 80041c8:	b2d2      	uxtb	r2, r2
 80041ca:	4611      	mov	r1, r2
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 fd11 	bl	8004bf4 <ssd1306_SetCursor>
            ssd1306_WriteString(part_str, *edit_font, Black);
 80041d2:	4b2e      	ldr	r3, [pc, #184]	@ (800428c <OLED_Draw_Edit+0x1c0>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	1d38      	adds	r0, r7, #4
 80041d8:	2200      	movs	r2, #0
 80041da:	9200      	str	r2, [sp, #0]
 80041dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041de:	f000 fce3 	bl	8004ba8 <ssd1306_WriteString>
 80041e2:	e00f      	b.n	8004204 <OLED_Draw_Edit+0x138>
        }
        else
        {
            ssd1306_SetCursor(part_x, start_y);
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	6a3a      	ldr	r2, [r7, #32]
 80041ea:	b2d2      	uxtb	r2, r2
 80041ec:	4611      	mov	r1, r2
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 fd00 	bl	8004bf4 <ssd1306_SetCursor>
            ssd1306_WriteString(part_str, *edit_font, White);
 80041f4:	4b25      	ldr	r3, [pc, #148]	@ (800428c <OLED_Draw_Edit+0x1c0>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	1d38      	adds	r0, r7, #4
 80041fa:	2201      	movs	r2, #1
 80041fc:	9200      	str	r2, [sp, #0]
 80041fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004200:	f000 fcd2 	bl	8004ba8 <ssd1306_WriteString>
        }

        start_y += part_spacing;
 8004204:	6a3a      	ldr	r2, [r7, #32]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	4413      	add	r3, r2
 800420a:	623b      	str	r3, [r7, #32]
    for(int i = 0; i < 4; i++)
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	3301      	adds	r3, #1
 8004210:	61fb      	str	r3, [r7, #28]
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	2b03      	cmp	r3, #3
 8004216:	dd95      	ble.n	8004144 <OLED_Draw_Edit+0x78>
    }

    // Инструкция внизу
    ssd1306_SetCursor(0, SH - 30);
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	b2db      	uxtb	r3, r3
 800421c:	3b1e      	subs	r3, #30
 800421e:	b2db      	uxtb	r3, r3
 8004220:	4619      	mov	r1, r3
 8004222:	2000      	movs	r0, #0
 8004224:	f000 fce6 	bl	8004bf4 <ssd1306_SetCursor>
    ssd1306_WriteString("Up/Dn:", *menu_font, White);
 8004228:	4b17      	ldr	r3, [pc, #92]	@ (8004288 <OLED_Draw_Edit+0x1bc>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2201      	movs	r2, #1
 800422e:	9200      	str	r2, [sp, #0]
 8004230:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004232:	481a      	ldr	r0, [pc, #104]	@ (800429c <OLED_Draw_Edit+0x1d0>)
 8004234:	f000 fcb8 	bl	8004ba8 <ssd1306_WriteString>
    ssd1306_SetCursor(0, SH - 20);
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	b2db      	uxtb	r3, r3
 800423c:	3b14      	subs	r3, #20
 800423e:	b2db      	uxtb	r3, r3
 8004240:	4619      	mov	r1, r3
 8004242:	2000      	movs	r0, #0
 8004244:	f000 fcd6 	bl	8004bf4 <ssd1306_SetCursor>
    ssd1306_WriteString("Change", *menu_font, White);
 8004248:	4b0f      	ldr	r3, [pc, #60]	@ (8004288 <OLED_Draw_Edit+0x1bc>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2201      	movs	r2, #1
 800424e:	9200      	str	r2, [sp, #0]
 8004250:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004252:	4813      	ldr	r0, [pc, #76]	@ (80042a0 <OLED_Draw_Edit+0x1d4>)
 8004254:	f000 fca8 	bl	8004ba8 <ssd1306_WriteString>
    ssd1306_SetCursor(0, SH - 10);
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	b2db      	uxtb	r3, r3
 800425c:	3b0a      	subs	r3, #10
 800425e:	b2db      	uxtb	r3, r3
 8004260:	4619      	mov	r1, r3
 8004262:	2000      	movs	r0, #0
 8004264:	f000 fcc6 	bl	8004bf4 <ssd1306_SetCursor>
    ssd1306_WriteString("Mid: Next", *menu_font, White);
 8004268:	4b07      	ldr	r3, [pc, #28]	@ (8004288 <OLED_Draw_Edit+0x1bc>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2201      	movs	r2, #1
 800426e:	9200      	str	r2, [sp, #0]
 8004270:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004272:	480c      	ldr	r0, [pc, #48]	@ (80042a4 <OLED_Draw_Edit+0x1d8>)
 8004274:	f000 fc98 	bl	8004ba8 <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 8004278:	f000 fb8c 	bl	8004994 <ssd1306_UpdateScreen>
}
 800427c:	bf00      	nop
 800427e:	372c      	adds	r7, #44	@ 0x2c
 8004280:	46bd      	mov	sp, r7
 8004282:	bd90      	pop	{r4, r7, pc}
 8004284:	200000a8 	.word	0x200000a8
 8004288:	2000009c 	.word	0x2000009c
 800428c:	200000a0 	.word	0x200000a0
 8004290:	200000a4 	.word	0x200000a4
 8004294:	08023488 	.word	0x08023488
 8004298:	20006ad8 	.word	0x20006ad8
 800429c:	0802348c 	.word	0x0802348c
 80042a0:	08023494 	.word	0x08023494
 80042a4:	0802349c 	.word	0x0802349c

080042a8 <update_activity_time>:

// Обновление времени активности
static void update_activity_time(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
    last_activity_time = HAL_GetTick();
 80042ac:	f000 fed8 	bl	8005060 <HAL_GetTick>
 80042b0:	4603      	mov	r3, r0
 80042b2:	4a02      	ldr	r2, [pc, #8]	@ (80042bc <update_activity_time+0x14>)
 80042b4:	6013      	str	r3, [r2, #0]
}
 80042b6:	bf00      	nop
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	20006ae0 	.word	0x20006ae0

080042c0 <change_edit_value>:

// Изменение значения с учетом удержания
static void change_edit_value(int delta)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
    uint32_t now = HAL_GetTick();
 80042c8:	f000 feca 	bl	8005060 <HAL_GetTick>
 80042cc:	60f8      	str	r0, [r7, #12]
    static uint32_t last_change_time = 0;
    static uint32_t change_delay = 300;

    if(!button_held)
 80042ce:	4b1c      	ldr	r3, [pc, #112]	@ (8004340 <change_edit_value+0x80>)
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10e      	bne.n	80042f4 <change_edit_value+0x34>
    {
        edit_parts[edit_digit] += delta;
 80042d6:	4b1b      	ldr	r3, [pc, #108]	@ (8004344 <change_edit_value+0x84>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a1b      	ldr	r2, [pc, #108]	@ (8004348 <change_edit_value+0x88>)
 80042dc:	5cd1      	ldrb	r1, [r2, r3]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	4b18      	ldr	r3, [pc, #96]	@ (8004344 <change_edit_value+0x84>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	440a      	add	r2, r1
 80042e8:	b2d1      	uxtb	r1, r2
 80042ea:	4a17      	ldr	r2, [pc, #92]	@ (8004348 <change_edit_value+0x88>)
 80042ec:	54d1      	strb	r1, [r2, r3]
        if(edit_parts[edit_digit] > 255) edit_parts[edit_digit] = 255;
        if(edit_parts[edit_digit] < 0) edit_parts[edit_digit] = 0;
        OLED_Draw_Edit();
 80042ee:	f7ff feed 	bl	80040cc <OLED_Draw_Edit>
        return;
 80042f2:	e021      	b.n	8004338 <change_edit_value+0x78>
    }

    if(now - last_change_time > change_delay)
 80042f4:	4b15      	ldr	r3, [pc, #84]	@ (800434c <change_edit_value+0x8c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	1ad2      	subs	r2, r2, r3
 80042fc:	4b14      	ldr	r3, [pc, #80]	@ (8004350 <change_edit_value+0x90>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	429a      	cmp	r2, r3
 8004302:	d919      	bls.n	8004338 <change_edit_value+0x78>
    {
        edit_parts[edit_digit] += delta;
 8004304:	4b0f      	ldr	r3, [pc, #60]	@ (8004344 <change_edit_value+0x84>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a0f      	ldr	r2, [pc, #60]	@ (8004348 <change_edit_value+0x88>)
 800430a:	5cd1      	ldrb	r1, [r2, r3]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	b2da      	uxtb	r2, r3
 8004310:	4b0c      	ldr	r3, [pc, #48]	@ (8004344 <change_edit_value+0x84>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	440a      	add	r2, r1
 8004316:	b2d1      	uxtb	r1, r2
 8004318:	4a0b      	ldr	r2, [pc, #44]	@ (8004348 <change_edit_value+0x88>)
 800431a:	54d1      	strb	r1, [r2, r3]
        if(edit_parts[edit_digit] > 255) edit_parts[edit_digit] = 255;
        if(edit_parts[edit_digit] < 0) edit_parts[edit_digit] = 0;

        if(change_delay > 50) change_delay -= 10;
 800431c:	4b0c      	ldr	r3, [pc, #48]	@ (8004350 <change_edit_value+0x90>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2b32      	cmp	r3, #50	@ 0x32
 8004322:	d904      	bls.n	800432e <change_edit_value+0x6e>
 8004324:	4b0a      	ldr	r3, [pc, #40]	@ (8004350 <change_edit_value+0x90>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	3b0a      	subs	r3, #10
 800432a:	4a09      	ldr	r2, [pc, #36]	@ (8004350 <change_edit_value+0x90>)
 800432c:	6013      	str	r3, [r2, #0]

        last_change_time = now;
 800432e:	4a07      	ldr	r2, [pc, #28]	@ (800434c <change_edit_value+0x8c>)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6013      	str	r3, [r2, #0]
        OLED_Draw_Edit();
 8004334:	f7ff feca 	bl	80040cc <OLED_Draw_Edit>
    }
}
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	20006ae4 	.word	0x20006ae4
 8004344:	20006ad8 	.word	0x20006ad8
 8004348:	200000a4 	.word	0x200000a4
 800434c:	20006aec 	.word	0x20006aec
 8004350:	200000bc 	.word	0x200000bc

08004354 <OLED_Settings_MoveUp>:

// --- Навигация меню ---
void OLED_Settings_MoveUp(void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	af00      	add	r7, sp, #0
    if(!settings_active) return;
 8004358:	4b14      	ldr	r3, [pc, #80]	@ (80043ac <OLED_Settings_MoveUp+0x58>)
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d023      	beq.n	80043a8 <OLED_Settings_MoveUp+0x54>

    update_activity_time();
 8004360:	f7ff ffa2 	bl	80042a8 <update_activity_time>

    if(confirm_active) {
 8004364:	4b12      	ldr	r3, [pc, #72]	@ (80043b0 <OLED_Settings_MoveUp+0x5c>)
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d005      	beq.n	8004378 <OLED_Settings_MoveUp+0x24>
        confirm_selection = 0; // Yes (слева)
 800436c:	4b11      	ldr	r3, [pc, #68]	@ (80043b4 <OLED_Settings_MoveUp+0x60>)
 800436e:	2200      	movs	r2, #0
 8004370:	601a      	str	r2, [r3, #0]
        OLED_Draw_Confirm();
 8004372:	f7ff fbbf 	bl	8003af4 <OLED_Draw_Confirm>
        return;
 8004376:	e018      	b.n	80043aa <OLED_Settings_MoveUp+0x56>
    }

    if(editing_active)
 8004378:	4b0f      	ldr	r3, [pc, #60]	@ (80043b8 <OLED_Settings_MoveUp+0x64>)
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d003      	beq.n	8004388 <OLED_Settings_MoveUp+0x34>
    {
        change_edit_value(1);
 8004380:	2001      	movs	r0, #1
 8004382:	f7ff ff9d 	bl	80042c0 <change_edit_value>
        return;
 8004386:	e010      	b.n	80043aa <OLED_Settings_MoveUp+0x56>
    }

    if(selected_index > 0)
 8004388:	4b0c      	ldr	r3, [pc, #48]	@ (80043bc <OLED_Settings_MoveUp+0x68>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	dd05      	ble.n	800439c <OLED_Settings_MoveUp+0x48>
        selected_index--;
 8004390:	4b0a      	ldr	r3, [pc, #40]	@ (80043bc <OLED_Settings_MoveUp+0x68>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	3b01      	subs	r3, #1
 8004396:	4a09      	ldr	r2, [pc, #36]	@ (80043bc <OLED_Settings_MoveUp+0x68>)
 8004398:	6013      	str	r3, [r2, #0]
 800439a:	e002      	b.n	80043a2 <OLED_Settings_MoveUp+0x4e>
    else
        selected_index = MENU_ITEMS_COUNT - 1;
 800439c:	4b07      	ldr	r3, [pc, #28]	@ (80043bc <OLED_Settings_MoveUp+0x68>)
 800439e:	2206      	movs	r2, #6
 80043a0:	601a      	str	r2, [r3, #0]

    OLED_Settings_Draw();
 80043a2:	f7ff fe05 	bl	8003fb0 <OLED_Settings_Draw>
 80043a6:	e000      	b.n	80043aa <OLED_Settings_MoveUp+0x56>
    if(!settings_active) return;
 80043a8:	bf00      	nop
}
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	20000340 	.word	0x20000340
 80043b0:	20006ae5 	.word	0x20006ae5
 80043b4:	20006ae8 	.word	0x20006ae8
 80043b8:	20006adc 	.word	0x20006adc
 80043bc:	20006ad4 	.word	0x20006ad4

080043c0 <OLED_Settings_MoveDown>:

void OLED_Settings_MoveDown(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
    if(!settings_active) return;
 80043c4:	4b15      	ldr	r3, [pc, #84]	@ (800441c <OLED_Settings_MoveDown+0x5c>)
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d024      	beq.n	8004416 <OLED_Settings_MoveDown+0x56>

    update_activity_time();
 80043cc:	f7ff ff6c 	bl	80042a8 <update_activity_time>

    if(confirm_active) {
 80043d0:	4b13      	ldr	r3, [pc, #76]	@ (8004420 <OLED_Settings_MoveDown+0x60>)
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d005      	beq.n	80043e4 <OLED_Settings_MoveDown+0x24>
        confirm_selection = 1; // No (справа)
 80043d8:	4b12      	ldr	r3, [pc, #72]	@ (8004424 <OLED_Settings_MoveDown+0x64>)
 80043da:	2201      	movs	r2, #1
 80043dc:	601a      	str	r2, [r3, #0]
        OLED_Draw_Confirm();
 80043de:	f7ff fb89 	bl	8003af4 <OLED_Draw_Confirm>
        return;
 80043e2:	e019      	b.n	8004418 <OLED_Settings_MoveDown+0x58>
    }

    if(editing_active)
 80043e4:	4b10      	ldr	r3, [pc, #64]	@ (8004428 <OLED_Settings_MoveDown+0x68>)
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d004      	beq.n	80043f6 <OLED_Settings_MoveDown+0x36>
    {
        change_edit_value(-1);
 80043ec:	f04f 30ff 	mov.w	r0, #4294967295
 80043f0:	f7ff ff66 	bl	80042c0 <change_edit_value>
        return;
 80043f4:	e010      	b.n	8004418 <OLED_Settings_MoveDown+0x58>
    }

    if(selected_index < MENU_ITEMS_COUNT - 1)
 80043f6:	4b0d      	ldr	r3, [pc, #52]	@ (800442c <OLED_Settings_MoveDown+0x6c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b05      	cmp	r3, #5
 80043fc:	d805      	bhi.n	800440a <OLED_Settings_MoveDown+0x4a>
        selected_index++;
 80043fe:	4b0b      	ldr	r3, [pc, #44]	@ (800442c <OLED_Settings_MoveDown+0x6c>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	3301      	adds	r3, #1
 8004404:	4a09      	ldr	r2, [pc, #36]	@ (800442c <OLED_Settings_MoveDown+0x6c>)
 8004406:	6013      	str	r3, [r2, #0]
 8004408:	e002      	b.n	8004410 <OLED_Settings_MoveDown+0x50>
    else
        selected_index = 0;
 800440a:	4b08      	ldr	r3, [pc, #32]	@ (800442c <OLED_Settings_MoveDown+0x6c>)
 800440c:	2200      	movs	r2, #0
 800440e:	601a      	str	r2, [r3, #0]

    OLED_Settings_Draw();
 8004410:	f7ff fdce 	bl	8003fb0 <OLED_Settings_Draw>
 8004414:	e000      	b.n	8004418 <OLED_Settings_MoveDown+0x58>
    if(!settings_active) return;
 8004416:	bf00      	nop
}
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	20000340 	.word	0x20000340
 8004420:	20006ae5 	.word	0x20006ae5
 8004424:	20006ae8 	.word	0x20006ae8
 8004428:	20006adc 	.word	0x20006adc
 800442c:	20006ad4 	.word	0x20006ad4

08004430 <OLED_Settings_Select>:
// --- Выбор пункта меню ---
void OLED_Settings_Select(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
    if(!settings_active) return;
 8004434:	4b77      	ldr	r3, [pc, #476]	@ (8004614 <OLED_Settings_Select+0x1e4>)
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 80e8 	beq.w	800460e <OLED_Settings_Select+0x1de>

    update_activity_time();
 800443e:	f7ff ff33 	bl	80042a8 <update_activity_time>

    if(confirm_active) {
 8004442:	4b75      	ldr	r3, [pc, #468]	@ (8004618 <OLED_Settings_Select+0x1e8>)
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00b      	beq.n	8004462 <OLED_Settings_Select+0x32>
        if(confirm_selection == 0) {
 800444a:	4b74      	ldr	r3, [pc, #464]	@ (800461c <OLED_Settings_Select+0x1ec>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <OLED_Settings_Select+0x26>
            // Yes - применяем настройки
            Apply_Network_Settings();
 8004452:	f7ff fc15 	bl	8003c80 <Apply_Network_Settings>
        }
        confirm_active = false;
 8004456:	4b70      	ldr	r3, [pc, #448]	@ (8004618 <OLED_Settings_Select+0x1e8>)
 8004458:	2200      	movs	r2, #0
 800445a:	701a      	strb	r2, [r3, #0]
        OLED_Settings_Draw();
 800445c:	f7ff fda8 	bl	8003fb0 <OLED_Settings_Draw>
        return;
 8004460:	e0d6      	b.n	8004610 <OLED_Settings_Select+0x1e0>
    }

    if(editing_active)
 8004462:	4b6f      	ldr	r3, [pc, #444]	@ (8004620 <OLED_Settings_Select+0x1f0>)
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d031      	beq.n	80044ce <OLED_Settings_Select+0x9e>
    {
        edit_digit++;
 800446a:	4b6e      	ldr	r3, [pc, #440]	@ (8004624 <OLED_Settings_Select+0x1f4>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	3301      	adds	r3, #1
 8004470:	4a6c      	ldr	r2, [pc, #432]	@ (8004624 <OLED_Settings_Select+0x1f4>)
 8004472:	6013      	str	r3, [r2, #0]
        if(edit_digit > 3)
 8004474:	4b6b      	ldr	r3, [pc, #428]	@ (8004624 <OLED_Settings_Select+0x1f4>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2b03      	cmp	r3, #3
 800447a:	dd25      	ble.n	80044c8 <OLED_Settings_Select+0x98>
        {
            editing_active = false;
 800447c:	4b68      	ldr	r3, [pc, #416]	@ (8004620 <OLED_Settings_Select+0x1f0>)
 800447e:	2200      	movs	r2, #0
 8004480:	701a      	strb	r2, [r3, #0]

            // Сохраняем изменения и показываем подтверждение
            switch(selected_index)
 8004482:	4b69      	ldr	r3, [pc, #420]	@ (8004628 <OLED_Settings_Select+0x1f8>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b02      	cmp	r3, #2
 8004488:	d010      	beq.n	80044ac <OLED_Settings_Select+0x7c>
 800448a:	2b02      	cmp	r3, #2
 800448c:	dc13      	bgt.n	80044b6 <OLED_Settings_Select+0x86>
 800448e:	2b00      	cmp	r3, #0
 8004490:	d002      	beq.n	8004498 <OLED_Settings_Select+0x68>
 8004492:	2b01      	cmp	r3, #1
 8004494:	d005      	beq.n	80044a2 <OLED_Settings_Select+0x72>
 8004496:	e00e      	b.n	80044b6 <OLED_Settings_Select+0x86>
            {
                case 0:
                    memcpy(last_ip, edit_parts, 4);
 8004498:	4b64      	ldr	r3, [pc, #400]	@ (800462c <OLED_Settings_Select+0x1fc>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a64      	ldr	r2, [pc, #400]	@ (8004630 <OLED_Settings_Select+0x200>)
 800449e:	6013      	str	r3, [r2, #0]
                    break;
 80044a0:	e009      	b.n	80044b6 <OLED_Settings_Select+0x86>
                case 1:
                    memcpy(last_mask, edit_parts, 4);
 80044a2:	4b62      	ldr	r3, [pc, #392]	@ (800462c <OLED_Settings_Select+0x1fc>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a63      	ldr	r2, [pc, #396]	@ (8004634 <OLED_Settings_Select+0x204>)
 80044a8:	6013      	str	r3, [r2, #0]
                    break;
 80044aa:	e004      	b.n	80044b6 <OLED_Settings_Select+0x86>
                case 2:
                    memcpy(last_gw, edit_parts, 4);
 80044ac:	4b5f      	ldr	r3, [pc, #380]	@ (800462c <OLED_Settings_Select+0x1fc>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a61      	ldr	r2, [pc, #388]	@ (8004638 <OLED_Settings_Select+0x208>)
 80044b2:	6013      	str	r3, [r2, #0]
                    break;
 80044b4:	bf00      	nop
            }

            confirm_active = true;
 80044b6:	4b58      	ldr	r3, [pc, #352]	@ (8004618 <OLED_Settings_Select+0x1e8>)
 80044b8:	2201      	movs	r2, #1
 80044ba:	701a      	strb	r2, [r3, #0]
            confirm_selection = 0;
 80044bc:	4b57      	ldr	r3, [pc, #348]	@ (800461c <OLED_Settings_Select+0x1ec>)
 80044be:	2200      	movs	r2, #0
 80044c0:	601a      	str	r2, [r3, #0]
            OLED_Draw_Confirm();
 80044c2:	f7ff fb17 	bl	8003af4 <OLED_Draw_Confirm>
        }
        else
            OLED_Draw_Edit();
        return;
 80044c6:	e0a3      	b.n	8004610 <OLED_Settings_Select+0x1e0>
            OLED_Draw_Edit();
 80044c8:	f7ff fe00 	bl	80040cc <OLED_Draw_Edit>
        return;
 80044cc:	e0a0      	b.n	8004610 <OLED_Settings_Select+0x1e0>
    }

    switch(selected_index)
 80044ce:	4b56      	ldr	r3, [pc, #344]	@ (8004628 <OLED_Settings_Select+0x1f8>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b06      	cmp	r3, #6
 80044d4:	f200 809c 	bhi.w	8004610 <OLED_Settings_Select+0x1e0>
 80044d8:	a201      	add	r2, pc, #4	@ (adr r2, 80044e0 <OLED_Settings_Select+0xb0>)
 80044da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044de:	bf00      	nop
 80044e0:	080044fd 	.word	0x080044fd
 80044e4:	0800452b 	.word	0x0800452b
 80044e8:	0800454f 	.word	0x0800454f
 80044ec:	0800457d 	.word	0x0800457d
 80044f0:	0800459b 	.word	0x0800459b
 80044f4:	080045b1 	.word	0x080045b1
 80044f8:	08004611 	.word	0x08004611
    {
        case 0: // IP
            editing_active = true;
 80044fc:	4b48      	ldr	r3, [pc, #288]	@ (8004620 <OLED_Settings_Select+0x1f0>)
 80044fe:	2201      	movs	r2, #1
 8004500:	701a      	strb	r2, [r3, #0]
            edit_digit = 0;
 8004502:	4b48      	ldr	r3, [pc, #288]	@ (8004624 <OLED_Settings_Select+0x1f4>)
 8004504:	2200      	movs	r2, #0
 8004506:	601a      	str	r2, [r3, #0]
            strcpy(edit_title, "Set IP");
 8004508:	4b4c      	ldr	r3, [pc, #304]	@ (800463c <OLED_Settings_Select+0x20c>)
 800450a:	4a4d      	ldr	r2, [pc, #308]	@ (8004640 <OLED_Settings_Select+0x210>)
 800450c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004510:	6018      	str	r0, [r3, #0]
 8004512:	3304      	adds	r3, #4
 8004514:	8019      	strh	r1, [r3, #0]
 8004516:	3302      	adds	r3, #2
 8004518:	0c0a      	lsrs	r2, r1, #16
 800451a:	701a      	strb	r2, [r3, #0]
            memcpy(edit_parts, last_ip, 4);
 800451c:	4b44      	ldr	r3, [pc, #272]	@ (8004630 <OLED_Settings_Select+0x200>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a42      	ldr	r2, [pc, #264]	@ (800462c <OLED_Settings_Select+0x1fc>)
 8004522:	6013      	str	r3, [r2, #0]
            OLED_Draw_Edit();  // ПЕРЕХОДИМ В РЕЖИМ РЕДАКТИРОВАНИЯ
 8004524:	f7ff fdd2 	bl	80040cc <OLED_Draw_Edit>
            break;
 8004528:	e072      	b.n	8004610 <OLED_Settings_Select+0x1e0>

        case 1: // Mask
            editing_active = true;
 800452a:	4b3d      	ldr	r3, [pc, #244]	@ (8004620 <OLED_Settings_Select+0x1f0>)
 800452c:	2201      	movs	r2, #1
 800452e:	701a      	strb	r2, [r3, #0]
            edit_digit = 0;
 8004530:	4b3c      	ldr	r3, [pc, #240]	@ (8004624 <OLED_Settings_Select+0x1f4>)
 8004532:	2200      	movs	r2, #0
 8004534:	601a      	str	r2, [r3, #0]
            strcpy(edit_title, "Set Mask");
 8004536:	4b41      	ldr	r3, [pc, #260]	@ (800463c <OLED_Settings_Select+0x20c>)
 8004538:	4a42      	ldr	r2, [pc, #264]	@ (8004644 <OLED_Settings_Select+0x214>)
 800453a:	ca07      	ldmia	r2, {r0, r1, r2}
 800453c:	c303      	stmia	r3!, {r0, r1}
 800453e:	701a      	strb	r2, [r3, #0]
            memcpy(edit_parts, last_mask, 4);
 8004540:	4b3c      	ldr	r3, [pc, #240]	@ (8004634 <OLED_Settings_Select+0x204>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a39      	ldr	r2, [pc, #228]	@ (800462c <OLED_Settings_Select+0x1fc>)
 8004546:	6013      	str	r3, [r2, #0]
            OLED_Draw_Edit();  // ПЕРЕХОДИМ В РЕЖИМ РЕДАКТИРОВАНИЯ
 8004548:	f7ff fdc0 	bl	80040cc <OLED_Draw_Edit>
            break;
 800454c:	e060      	b.n	8004610 <OLED_Settings_Select+0x1e0>

        case 2: // Gateway
            editing_active = true;
 800454e:	4b34      	ldr	r3, [pc, #208]	@ (8004620 <OLED_Settings_Select+0x1f0>)
 8004550:	2201      	movs	r2, #1
 8004552:	701a      	strb	r2, [r3, #0]
            edit_digit = 0;
 8004554:	4b33      	ldr	r3, [pc, #204]	@ (8004624 <OLED_Settings_Select+0x1f4>)
 8004556:	2200      	movs	r2, #0
 8004558:	601a      	str	r2, [r3, #0]
            strcpy(edit_title, "Set GW");
 800455a:	4b38      	ldr	r3, [pc, #224]	@ (800463c <OLED_Settings_Select+0x20c>)
 800455c:	4a3a      	ldr	r2, [pc, #232]	@ (8004648 <OLED_Settings_Select+0x218>)
 800455e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004562:	6018      	str	r0, [r3, #0]
 8004564:	3304      	adds	r3, #4
 8004566:	8019      	strh	r1, [r3, #0]
 8004568:	3302      	adds	r3, #2
 800456a:	0c0a      	lsrs	r2, r1, #16
 800456c:	701a      	strb	r2, [r3, #0]
            memcpy(edit_parts, last_gw, 4);
 800456e:	4b32      	ldr	r3, [pc, #200]	@ (8004638 <OLED_Settings_Select+0x208>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a2e      	ldr	r2, [pc, #184]	@ (800462c <OLED_Settings_Select+0x1fc>)
 8004574:	6013      	str	r3, [r2, #0]
            OLED_Draw_Edit();  // ПЕРЕХОДИМ В РЕЖИМ РЕДАКТИРОВАНИЯ
 8004576:	f7ff fda9 	bl	80040cc <OLED_Draw_Edit>
            break;
 800457a:	e049      	b.n	8004610 <OLED_Settings_Select+0x1e0>

        case 3: // DHCP
            dhcp_on = !dhcp_on;
 800457c:	4b33      	ldr	r3, [pc, #204]	@ (800464c <OLED_Settings_Select+0x21c>)
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	bf0c      	ite	eq
 8004584:	2301      	moveq	r3, #1
 8004586:	2300      	movne	r3, #0
 8004588:	b2db      	uxtb	r3, r3
 800458a:	461a      	mov	r2, r3
 800458c:	4b2f      	ldr	r3, [pc, #188]	@ (800464c <OLED_Settings_Select+0x21c>)
 800458e:	701a      	strb	r2, [r3, #0]
            DHCP_Apply();
 8004590:	f7ff fc94 	bl	8003ebc <DHCP_Apply>
            OLED_Settings_Draw();
 8004594:	f7ff fd0c 	bl	8003fb0 <OLED_Settings_Draw>
            break;
 8004598:	e03a      	b.n	8004610 <OLED_Settings_Select+0x1e0>

        case 4: // Reboot
            if(OLED_Confirm("Will Reboot!"))
 800459a:	482d      	ldr	r0, [pc, #180]	@ (8004650 <OLED_Settings_Select+0x220>)
 800459c:	f7ff fcae 	bl	8003efc <OLED_Confirm>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d001      	beq.n	80045aa <OLED_Settings_Select+0x17a>
                NVIC_SystemReset();
 80045a6:	f7ff fa6d 	bl	8003a84 <__NVIC_SystemReset>
            else
                OLED_Settings_Draw();
 80045aa:	f7ff fd01 	bl	8003fb0 <OLED_Settings_Draw>
            break;
 80045ae:	e02f      	b.n	8004610 <OLED_Settings_Select+0x1e0>

        case 5: // Reset
            if(OLED_Confirm("Factory Reset!"))
 80045b0:	4828      	ldr	r0, [pc, #160]	@ (8004654 <OLED_Settings_Select+0x224>)
 80045b2:	f7ff fca3 	bl	8003efc <OLED_Confirm>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d025      	beq.n	8004608 <OLED_Settings_Select+0x1d8>
            {
                last_ip[0] = 192; last_ip[1] = 168; last_ip[2] = 1; last_ip[3] = 178;
 80045bc:	4b1c      	ldr	r3, [pc, #112]	@ (8004630 <OLED_Settings_Select+0x200>)
 80045be:	22c0      	movs	r2, #192	@ 0xc0
 80045c0:	701a      	strb	r2, [r3, #0]
 80045c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004630 <OLED_Settings_Select+0x200>)
 80045c4:	22a8      	movs	r2, #168	@ 0xa8
 80045c6:	705a      	strb	r2, [r3, #1]
 80045c8:	4b19      	ldr	r3, [pc, #100]	@ (8004630 <OLED_Settings_Select+0x200>)
 80045ca:	2201      	movs	r2, #1
 80045cc:	709a      	strb	r2, [r3, #2]
 80045ce:	4b18      	ldr	r3, [pc, #96]	@ (8004630 <OLED_Settings_Select+0x200>)
 80045d0:	22b2      	movs	r2, #178	@ 0xb2
 80045d2:	70da      	strb	r2, [r3, #3]
                last_mask[0] = 255; last_mask[1] = 255; last_mask[2] = 255; last_mask[3] = 0;
 80045d4:	4b17      	ldr	r3, [pc, #92]	@ (8004634 <OLED_Settings_Select+0x204>)
 80045d6:	22ff      	movs	r2, #255	@ 0xff
 80045d8:	701a      	strb	r2, [r3, #0]
 80045da:	4b16      	ldr	r3, [pc, #88]	@ (8004634 <OLED_Settings_Select+0x204>)
 80045dc:	22ff      	movs	r2, #255	@ 0xff
 80045de:	705a      	strb	r2, [r3, #1]
 80045e0:	4b14      	ldr	r3, [pc, #80]	@ (8004634 <OLED_Settings_Select+0x204>)
 80045e2:	22ff      	movs	r2, #255	@ 0xff
 80045e4:	709a      	strb	r2, [r3, #2]
 80045e6:	4b13      	ldr	r3, [pc, #76]	@ (8004634 <OLED_Settings_Select+0x204>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	70da      	strb	r2, [r3, #3]
                last_gw[0] = 192; last_gw[1] = 168; last_gw[2] = 1; last_gw[3] = 1;
 80045ec:	4b12      	ldr	r3, [pc, #72]	@ (8004638 <OLED_Settings_Select+0x208>)
 80045ee:	22c0      	movs	r2, #192	@ 0xc0
 80045f0:	701a      	strb	r2, [r3, #0]
 80045f2:	4b11      	ldr	r3, [pc, #68]	@ (8004638 <OLED_Settings_Select+0x208>)
 80045f4:	22a8      	movs	r2, #168	@ 0xa8
 80045f6:	705a      	strb	r2, [r3, #1]
 80045f8:	4b0f      	ldr	r3, [pc, #60]	@ (8004638 <OLED_Settings_Select+0x208>)
 80045fa:	2201      	movs	r2, #1
 80045fc:	709a      	strb	r2, [r3, #2]
 80045fe:	4b0e      	ldr	r3, [pc, #56]	@ (8004638 <OLED_Settings_Select+0x208>)
 8004600:	2201      	movs	r2, #1
 8004602:	70da      	strb	r2, [r3, #3]
                Apply_Network_Settings();
 8004604:	f7ff fb3c 	bl	8003c80 <Apply_Network_Settings>
            }
            OLED_Settings_Draw();
 8004608:	f7ff fcd2 	bl	8003fb0 <OLED_Settings_Draw>
            break;
 800460c:	e000      	b.n	8004610 <OLED_Settings_Select+0x1e0>
    if(!settings_active) return;
 800460e:	bf00      	nop

        case 6: // Set rotation
            // TODO: вывод 0° / 180° и поворот
            break;
    }
}
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	20000340 	.word	0x20000340
 8004618:	20006ae5 	.word	0x20006ae5
 800461c:	20006ae8 	.word	0x20006ae8
 8004620:	20006adc 	.word	0x20006adc
 8004624:	20006ad8 	.word	0x20006ad8
 8004628:	20006ad4 	.word	0x20006ad4
 800462c:	200000a4 	.word	0x200000a4
 8004630:	20000074 	.word	0x20000074
 8004634:	20000078 	.word	0x20000078
 8004638:	2000007c 	.word	0x2000007c
 800463c:	200000a8 	.word	0x200000a8
 8004640:	080234a8 	.word	0x080234a8
 8004644:	080234b0 	.word	0x080234b0
 8004648:	080234bc 	.word	0x080234bc
 800464c:	200000b8 	.word	0x200000b8
 8004650:	080234c4 	.word	0x080234c4
 8004654:	080234d4 	.word	0x080234d4

08004658 <OLED_Settings_Exit>:

// Выход из меню настроек
void OLED_Settings_Exit(void)
{
 8004658:	b480      	push	{r7}
 800465a:	af00      	add	r7, sp, #0
    settings_active = false;
 800465c:	4b06      	ldr	r3, [pc, #24]	@ (8004678 <OLED_Settings_Exit+0x20>)
 800465e:	2200      	movs	r2, #0
 8004660:	701a      	strb	r2, [r3, #0]
    editing_active = false;
 8004662:	4b06      	ldr	r3, [pc, #24]	@ (800467c <OLED_Settings_Exit+0x24>)
 8004664:	2200      	movs	r2, #0
 8004666:	701a      	strb	r2, [r3, #0]
    confirm_active = false;
 8004668:	4b05      	ldr	r3, [pc, #20]	@ (8004680 <OLED_Settings_Exit+0x28>)
 800466a:	2200      	movs	r2, #0
 800466c:	701a      	strb	r2, [r3, #0]
}
 800466e:	bf00      	nop
 8004670:	46bd      	mov	sp, r7
 8004672:	bc80      	pop	{r7}
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	20000340 	.word	0x20000340
 800467c:	20006adc 	.word	0x20006adc
 8004680:	20006ae5 	.word	0x20006ae5

08004684 <OLED_Settings_TimeoutCheck>:

// Проверка таймаута бездействия
void OLED_Settings_TimeoutCheck(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
    if (!settings_active) return;
 800468a:	4b0f      	ldr	r3, [pc, #60]	@ (80046c8 <OLED_Settings_TimeoutCheck+0x44>)
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d015      	beq.n	80046be <OLED_Settings_TimeoutCheck+0x3a>

    uint32_t now = HAL_GetTick();
 8004692:	f000 fce5 	bl	8005060 <HAL_GetTick>
 8004696:	6078      	str	r0, [r7, #4]

    // Таймаут работает ТОЛЬКО если мы не в режиме редактирования и не в подтверждении
    if (!editing_active && !confirm_active && (now - last_activity_time) >= 10000)
 8004698:	4b0c      	ldr	r3, [pc, #48]	@ (80046cc <OLED_Settings_TimeoutCheck+0x48>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10f      	bne.n	80046c0 <OLED_Settings_TimeoutCheck+0x3c>
 80046a0:	4b0b      	ldr	r3, [pc, #44]	@ (80046d0 <OLED_Settings_TimeoutCheck+0x4c>)
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10b      	bne.n	80046c0 <OLED_Settings_TimeoutCheck+0x3c>
 80046a8:	4b0a      	ldr	r3, [pc, #40]	@ (80046d4 <OLED_Settings_TimeoutCheck+0x50>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d903      	bls.n	80046c0 <OLED_Settings_TimeoutCheck+0x3c>
    {
        OLED_Settings_Exit();
 80046b8:	f7ff ffce 	bl	8004658 <OLED_Settings_Exit>
 80046bc:	e000      	b.n	80046c0 <OLED_Settings_TimeoutCheck+0x3c>
    if (!settings_active) return;
 80046be:	bf00      	nop
    }
}
 80046c0:	3708      	adds	r7, #8
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	20000340 	.word	0x20000340
 80046cc:	20006adc 	.word	0x20006adc
 80046d0:	20006ae5 	.word	0x20006ae5
 80046d4:	20006ae0 	.word	0x20006ae0

080046d8 <OLED_UpdateDisplay>:
    button_held = held;
    if(!held) button_press_time = 0;
}

void OLED_UpdateDisplay(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
    static uint32_t last_display_update = 0;
    uint32_t now = HAL_GetTick();
 80046de:	f000 fcbf 	bl	8005060 <HAL_GetTick>
 80046e2:	6078      	str	r0, [r7, #4]

    if (now - last_display_update < 500) {
 80046e4:	4b12      	ldr	r3, [pc, #72]	@ (8004730 <OLED_UpdateDisplay+0x58>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80046f0:	d31a      	bcc.n	8004728 <OLED_UpdateDisplay+0x50>
        return;
    }
    last_display_update = now;
 80046f2:	4a0f      	ldr	r2, [pc, #60]	@ (8004730 <OLED_UpdateDisplay+0x58>)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6013      	str	r3, [r2, #0]

    if (settings_active) {
 80046f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004734 <OLED_UpdateDisplay+0x5c>)
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d010      	beq.n	8004722 <OLED_UpdateDisplay+0x4a>
        if (confirm_active) {
 8004700:	4b0d      	ldr	r3, [pc, #52]	@ (8004738 <OLED_UpdateDisplay+0x60>)
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d002      	beq.n	800470e <OLED_UpdateDisplay+0x36>
            OLED_Draw_Confirm();
 8004708:	f7ff f9f4 	bl	8003af4 <OLED_Draw_Confirm>
 800470c:	e00d      	b.n	800472a <OLED_UpdateDisplay+0x52>
        }
        else if (editing_active) {
 800470e:	4b0b      	ldr	r3, [pc, #44]	@ (800473c <OLED_UpdateDisplay+0x64>)
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d002      	beq.n	800471c <OLED_UpdateDisplay+0x44>
            OLED_Draw_Edit();
 8004716:	f7ff fcd9 	bl	80040cc <OLED_Draw_Edit>
 800471a:	e006      	b.n	800472a <OLED_UpdateDisplay+0x52>
        }
        else {
            OLED_Settings_Draw();
 800471c:	f7ff fc48 	bl	8003fb0 <OLED_Settings_Draw>
 8004720:	e003      	b.n	800472a <OLED_UpdateDisplay+0x52>
        }
    }
    else {
        OLED_ShowCurrentPage();
 8004722:	f7fd f887 	bl	8001834 <OLED_ShowCurrentPage>
 8004726:	e000      	b.n	800472a <OLED_UpdateDisplay+0x52>
        return;
 8004728:	bf00      	nop
    }
}
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	20006af0 	.word	0x20006af0
 8004734:	20000340 	.word	0x20000340
 8004738:	20006ae5 	.word	0x20006ae5
 800473c:	20006adc 	.word	0x20006adc

08004740 <custom_get_value>:
static const u32_t custom_base_oid[] = { 1,3,6,1,4,1,62283,1 };



/* Колбэки для чтения переменных */
static s16_t custom_get_value(struct snmp_node_instance* instance, void* value) {
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  *(u32_t*)value = voltage1;
 800474a:	4b06      	ldr	r3, [pc, #24]	@ (8004764 <custom_get_value+0x24>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4618      	mov	r0, r3
 8004750:	f7fc fd40 	bl	80011d4 <__aeabi_f2uiz>
 8004754:	4602      	mov	r2, r0
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	601a      	str	r2, [r3, #0]
  return sizeof(u32_t);
 800475a:	2304      	movs	r3, #4
}
 800475c:	4618      	mov	r0, r3
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	20006ac0 	.word	0x20006ac0

08004768 <custom_get_var1>:

static s16_t custom_get_var1(struct snmp_node_instance* instance, void* value) {
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  *(u32_t*)value = voltage2;
 8004772:	4b06      	ldr	r3, [pc, #24]	@ (800478c <custom_get_var1+0x24>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4618      	mov	r0, r3
 8004778:	f7fc fd2c 	bl	80011d4 <__aeabi_f2uiz>
 800477c:	4602      	mov	r2, r0
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	601a      	str	r2, [r3, #0]
  return sizeof(u32_t);
 8004782:	2304      	movs	r3, #4
}
 8004784:	4618      	mov	r0, r3
 8004786:	3708      	adds	r7, #8
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	20006ac4 	.word	0x20006ac4

08004790 <custom_get_var2>:

static s16_t custom_get_var2(struct snmp_node_instance* instance, void* value) {
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  *(u32_t*)value = current;
 800479a:	4b06      	ldr	r3, [pc, #24]	@ (80047b4 <custom_get_var2+0x24>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4618      	mov	r0, r3
 80047a0:	f7fc fd18 	bl	80011d4 <__aeabi_f2uiz>
 80047a4:	4602      	mov	r2, r0
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	601a      	str	r2, [r3, #0]
  return sizeof(u32_t);
 80047aa:	2304      	movs	r3, #4
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3708      	adds	r7, #8
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	20006ac8 	.word	0x20006ac8

080047b8 <custom_get_var3>:

static s16_t custom_get_var3(struct snmp_node_instance* instance, void* value) {
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  *(u32_t*)value = 123;
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	227b      	movs	r2, #123	@ 0x7b
 80047c6:	601a      	str	r2, [r3, #0]
  return sizeof(u32_t);
 80047c8:	2304      	movs	r3, #4
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bc80      	pop	{r7}
 80047d2:	4770      	bx	lr

080047d4 <custom_get_var4>:

static s16_t custom_get_var4(struct snmp_node_instance* instance, void* value) {
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  *(u32_t*)value = 228;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	22e4      	movs	r2, #228	@ 0xe4
 80047e2:	601a      	str	r2, [r3, #0]
  return sizeof(u32_t);
 80047e4:	2304      	movs	r3, #4
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bc80      	pop	{r7}
 80047ee:	4770      	bx	lr

080047f0 <ssd1306_map_logical_to_physical>:
/* Map logical (lx,ly) -> physical (px,py) for 90° clockwise rotation:
 * px = physical_x = W - 1 - ly
 * py = physical_y = lx
 */
// Поворот 90° против часовой стрелки
static inline void ssd1306_map_logical_to_physical(uint8_t lx, uint8_t ly, uint8_t *px, uint8_t *py) {
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60ba      	str	r2, [r7, #8]
 80047f8:	607b      	str	r3, [r7, #4]
 80047fa:	4603      	mov	r3, r0
 80047fc:	73fb      	strb	r3, [r7, #15]
 80047fe:	460b      	mov	r3, r1
 8004800:	73bb      	strb	r3, [r7, #14]
    *px = ly;
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	7bba      	ldrb	r2, [r7, #14]
 8004806:	701a      	strb	r2, [r3, #0]
    *py = (uint8_t)(SSD1306_HEIGHT - 1 - lx);
 8004808:	7bfb      	ldrb	r3, [r7, #15]
 800480a:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 800480e:	b2da      	uxtb	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	701a      	strb	r2, [r3, #0]
}
 8004814:	bf00      	nop
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	bc80      	pop	{r7}
 800481c:	4770      	bx	lr

0800481e <ssd1306_Reset>:


#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800481e:	b480      	push	{r7}
 8004820:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8004822:	bf00      	nop
 8004824:	46bd      	mov	sp, r7
 8004826:	bc80      	pop	{r7}
 8004828:	4770      	bx	lr
	...

0800482c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af04      	add	r7, sp, #16
 8004832:	4603      	mov	r3, r0
 8004834:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004836:	f04f 33ff 	mov.w	r3, #4294967295
 800483a:	9302      	str	r3, [sp, #8]
 800483c:	2301      	movs	r3, #1
 800483e:	9301      	str	r3, [sp, #4]
 8004840:	1dfb      	adds	r3, r7, #7
 8004842:	9300      	str	r3, [sp, #0]
 8004844:	2301      	movs	r3, #1
 8004846:	2200      	movs	r2, #0
 8004848:	2178      	movs	r1, #120	@ 0x78
 800484a:	4803      	ldr	r0, [pc, #12]	@ (8004858 <ssd1306_WriteCommand+0x2c>)
 800484c:	f003 fb70 	bl	8007f30 <HAL_I2C_Mem_Write>
}
 8004850:	bf00      	nop
 8004852:	3708      	adds	r7, #8
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	200029b4 	.word	0x200029b4

0800485c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800485c:	b580      	push	{r7, lr}
 800485e:	b086      	sub	sp, #24
 8004860:	af04      	add	r7, sp, #16
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	b29b      	uxth	r3, r3
 800486a:	f04f 32ff 	mov.w	r2, #4294967295
 800486e:	9202      	str	r2, [sp, #8]
 8004870:	9301      	str	r3, [sp, #4]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	2301      	movs	r3, #1
 8004878:	2240      	movs	r2, #64	@ 0x40
 800487a:	2178      	movs	r1, #120	@ 0x78
 800487c:	4803      	ldr	r0, [pc, #12]	@ (800488c <ssd1306_WriteData+0x30>)
 800487e:	f003 fb57 	bl	8007f30 <HAL_I2C_Mem_Write>
}
 8004882:	bf00      	nop
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	200029b4 	.word	0x200029b4

08004890 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8004894:	f7ff ffc3 	bl	800481e <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8004898:	2064      	movs	r0, #100	@ 0x64
 800489a:	f000 fbeb 	bl	8005074 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800489e:	2000      	movs	r0, #0
 80048a0:	f000 fafe 	bl	8004ea0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80048a4:	2020      	movs	r0, #32
 80048a6:	f7ff ffc1 	bl	800482c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80048aa:	2000      	movs	r0, #0
 80048ac:	f7ff ffbe 	bl	800482c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80048b0:	20b0      	movs	r0, #176	@ 0xb0
 80048b2:	f7ff ffbb 	bl	800482c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80048b6:	20c8      	movs	r0, #200	@ 0xc8
 80048b8:	f7ff ffb8 	bl	800482c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80048bc:	2000      	movs	r0, #0
 80048be:	f7ff ffb5 	bl	800482c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80048c2:	2010      	movs	r0, #16
 80048c4:	f7ff ffb2 	bl	800482c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80048c8:	2040      	movs	r0, #64	@ 0x40
 80048ca:	f7ff ffaf 	bl	800482c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80048ce:	20ff      	movs	r0, #255	@ 0xff
 80048d0:	f000 fad2 	bl	8004e78 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80048d4:	20a1      	movs	r0, #161	@ 0xa1
 80048d6:	f7ff ffa9 	bl	800482c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80048da:	20a6      	movs	r0, #166	@ 0xa6
 80048dc:	f7ff ffa6 	bl	800482c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80048e0:	20a8      	movs	r0, #168	@ 0xa8
 80048e2:	f7ff ffa3 	bl	800482c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80048e6:	203f      	movs	r0, #63	@ 0x3f
 80048e8:	f7ff ffa0 	bl	800482c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80048ec:	20a4      	movs	r0, #164	@ 0xa4
 80048ee:	f7ff ff9d 	bl	800482c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80048f2:	20d3      	movs	r0, #211	@ 0xd3
 80048f4:	f7ff ff9a 	bl	800482c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80048f8:	2000      	movs	r0, #0
 80048fa:	f7ff ff97 	bl	800482c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80048fe:	20d5      	movs	r0, #213	@ 0xd5
 8004900:	f7ff ff94 	bl	800482c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8004904:	20f0      	movs	r0, #240	@ 0xf0
 8004906:	f7ff ff91 	bl	800482c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800490a:	20d9      	movs	r0, #217	@ 0xd9
 800490c:	f7ff ff8e 	bl	800482c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8004910:	2022      	movs	r0, #34	@ 0x22
 8004912:	f7ff ff8b 	bl	800482c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8004916:	20da      	movs	r0, #218	@ 0xda
 8004918:	f7ff ff88 	bl	800482c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800491c:	2012      	movs	r0, #18
 800491e:	f7ff ff85 	bl	800482c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8004922:	20db      	movs	r0, #219	@ 0xdb
 8004924:	f7ff ff82 	bl	800482c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8004928:	2020      	movs	r0, #32
 800492a:	f7ff ff7f 	bl	800482c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800492e:	208d      	movs	r0, #141	@ 0x8d
 8004930:	f7ff ff7c 	bl	800482c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8004934:	2014      	movs	r0, #20
 8004936:	f7ff ff79 	bl	800482c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800493a:	2001      	movs	r0, #1
 800493c:	f000 fab0 	bl	8004ea0 <ssd1306_SetDisplayOn>

    // Clear screen (logical)
    ssd1306_Fill(Black);
 8004940:	2000      	movs	r0, #0
 8004942:	f000 f80f 	bl	8004964 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8004946:	f000 f825 	bl	8004994 <ssd1306_UpdateScreen>

    // Set default values for screen object (logical coords)
    SSD1306.CurrentX = 0;
 800494a:	4b05      	ldr	r3, [pc, #20]	@ (8004960 <ssd1306_Init+0xd0>)
 800494c:	2200      	movs	r2, #0
 800494e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8004950:	4b03      	ldr	r3, [pc, #12]	@ (8004960 <ssd1306_Init+0xd0>)
 8004952:	2200      	movs	r2, #0
 8004954:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8004956:	4b02      	ldr	r3, [pc, #8]	@ (8004960 <ssd1306_Init+0xd0>)
 8004958:	2201      	movs	r2, #1
 800495a:	711a      	strb	r2, [r3, #4]
}
 800495c:	bf00      	nop
 800495e:	bd80      	pop	{r7, pc}
 8004960:	20006ef4 	.word	0x20006ef4

08004964 <ssd1306_Fill>:

/* Fill the whole screen with the given color (physical buffer fill) */
void ssd1306_Fill(SSD1306_COLOR color) {
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	4603      	mov	r3, r0
 800496c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800496e:	79fb      	ldrb	r3, [r7, #7]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <ssd1306_Fill+0x14>
 8004974:	2300      	movs	r3, #0
 8004976:	e000      	b.n	800497a <ssd1306_Fill+0x16>
 8004978:	23ff      	movs	r3, #255	@ 0xff
 800497a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800497e:	4619      	mov	r1, r3
 8004980:	4803      	ldr	r0, [pc, #12]	@ (8004990 <ssd1306_Fill+0x2c>)
 8004982:	f01b ff63 	bl	802084c <memset>
}
 8004986:	bf00      	nop
 8004988:	3708      	adds	r7, #8
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	20006af4 	.word	0x20006af4

08004994 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen (physical pages) */
void ssd1306_UpdateScreen(void) {
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
    // depends on the screen height (physical):
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800499a:	2300      	movs	r3, #0
 800499c:	71fb      	strb	r3, [r7, #7]
 800499e:	e016      	b.n	80049ce <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80049a0:	79fb      	ldrb	r3, [r7, #7]
 80049a2:	3b50      	subs	r3, #80	@ 0x50
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff ff40 	bl	800482c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80049ac:	2000      	movs	r0, #0
 80049ae:	f7ff ff3d 	bl	800482c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80049b2:	2010      	movs	r0, #16
 80049b4:	f7ff ff3a 	bl	800482c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 80049b8:	79fb      	ldrb	r3, [r7, #7]
 80049ba:	01db      	lsls	r3, r3, #7
 80049bc:	4a08      	ldr	r2, [pc, #32]	@ (80049e0 <ssd1306_UpdateScreen+0x4c>)
 80049be:	4413      	add	r3, r2
 80049c0:	2180      	movs	r1, #128	@ 0x80
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7ff ff4a 	bl	800485c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80049c8:	79fb      	ldrb	r3, [r7, #7]
 80049ca:	3301      	adds	r3, #1
 80049cc:	71fb      	strb	r3, [r7, #7]
 80049ce:	79fb      	ldrb	r3, [r7, #7]
 80049d0:	2b07      	cmp	r3, #7
 80049d2:	d9e5      	bls.n	80049a0 <ssd1306_UpdateScreen+0xc>
    }
}
 80049d4:	bf00      	nop
 80049d6:	bf00      	nop
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	20006af4 	.word	0x20006af4

080049e4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer (logical coords)
 * X => X Logical Coordinate (0..SSD1306_ROTATED_WIDTH-1)
 * Y => Y Logical Coordinate (0..SSD1306_ROTATED_HEIGHT-1)
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	4603      	mov	r3, r0
 80049ec:	71fb      	strb	r3, [r7, #7]
 80049ee:	460b      	mov	r3, r1
 80049f0:	71bb      	strb	r3, [r7, #6]
 80049f2:	4613      	mov	r3, r2
 80049f4:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_ROTATED_WIDTH || y >= SSD1306_ROTATED_HEIGHT) {
 80049f6:	79fb      	ldrb	r3, [r7, #7]
 80049f8:	2b3f      	cmp	r3, #63	@ 0x3f
 80049fa:	d83c      	bhi.n	8004a76 <ssd1306_DrawPixel+0x92>
 80049fc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	db38      	blt.n	8004a76 <ssd1306_DrawPixel+0x92>
        // Don't write outside the logical buffer
        return;
    }

    uint8_t px, py;
    ssd1306_map_logical_to_physical(x, y, &px, &py);
 8004a04:	f107 0309 	add.w	r3, r7, #9
 8004a08:	f107 020a 	add.w	r2, r7, #10
 8004a0c:	79b9      	ldrb	r1, [r7, #6]
 8004a0e:	79f8      	ldrb	r0, [r7, #7]
 8004a10:	f7ff feee 	bl	80047f0 <ssd1306_map_logical_to_physical>

    uint32_t index = (uint32_t)px + ((uint32_t)(py / 8) * SSD1306_WIDTH);
 8004a14:	7abb      	ldrb	r3, [r7, #10]
 8004a16:	461a      	mov	r2, r3
 8004a18:	7a7b      	ldrb	r3, [r7, #9]
 8004a1a:	08db      	lsrs	r3, r3, #3
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	01db      	lsls	r3, r3, #7
 8004a20:	4413      	add	r3, r2
 8004a22:	60fb      	str	r3, [r7, #12]
    uint8_t mask = (uint8_t)(1 << (py % 8));
 8004a24:	7a7b      	ldrb	r3, [r7, #9]
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a30:	72fb      	strb	r3, [r7, #11]

    if (color == White) {
 8004a32:	797b      	ldrb	r3, [r7, #5]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d10c      	bne.n	8004a52 <ssd1306_DrawPixel+0x6e>
        SSD1306_Buffer[index] |= mask;
 8004a38:	4a11      	ldr	r2, [pc, #68]	@ (8004a80 <ssd1306_DrawPixel+0x9c>)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	781a      	ldrb	r2, [r3, #0]
 8004a40:	7afb      	ldrb	r3, [r7, #11]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	b2d9      	uxtb	r1, r3
 8004a46:	4a0e      	ldr	r2, [pc, #56]	@ (8004a80 <ssd1306_DrawPixel+0x9c>)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	460a      	mov	r2, r1
 8004a4e:	701a      	strb	r2, [r3, #0]
 8004a50:	e012      	b.n	8004a78 <ssd1306_DrawPixel+0x94>
    } else {
        SSD1306_Buffer[index] &= ~mask;
 8004a52:	4a0b      	ldr	r2, [pc, #44]	@ (8004a80 <ssd1306_DrawPixel+0x9c>)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	4413      	add	r3, r2
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	b25a      	sxtb	r2, r3
 8004a5c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004a60:	43db      	mvns	r3, r3
 8004a62:	b25b      	sxtb	r3, r3
 8004a64:	4013      	ands	r3, r2
 8004a66:	b25b      	sxtb	r3, r3
 8004a68:	b2d9      	uxtb	r1, r3
 8004a6a:	4a05      	ldr	r2, [pc, #20]	@ (8004a80 <ssd1306_DrawPixel+0x9c>)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	4413      	add	r3, r2
 8004a70:	460a      	mov	r2, r1
 8004a72:	701a      	strb	r2, [r3, #0]
 8004a74:	e000      	b.n	8004a78 <ssd1306_DrawPixel+0x94>
        return;
 8004a76:	bf00      	nop
    }
}
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	20006af4 	.word	0x20006af4

08004a84 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer (logical coords)
 * ch       => char to write
 * Font     => Font to use
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8004a84:	b590      	push	{r4, r7, lr}
 8004a86:	b089      	sub	sp, #36	@ 0x24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	4604      	mov	r4, r0
 8004a8c:	4638      	mov	r0, r7
 8004a8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8004a92:	4623      	mov	r3, r4
 8004a94:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 8004a96:	7bfb      	ldrb	r3, [r7, #15]
 8004a98:	2b1f      	cmp	r3, #31
 8004a9a:	d902      	bls.n	8004aa2 <ssd1306_WriteChar+0x1e>
 8004a9c:	7bfb      	ldrb	r3, [r7, #15]
 8004a9e:	2b7e      	cmp	r3, #126	@ 0x7e
 8004aa0:	d901      	bls.n	8004aa6 <ssd1306_WriteChar+0x22>
        return 0;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	e079      	b.n	8004b9a <ssd1306_WriteChar+0x116>

    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d005      	beq.n	8004ab8 <ssd1306_WriteChar+0x34>
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	7bfb      	ldrb	r3, [r7, #15]
 8004ab0:	3b20      	subs	r3, #32
 8004ab2:	4413      	add	r3, r2
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	e000      	b.n	8004aba <ssd1306_WriteChar+0x36>
 8004ab8:	783b      	ldrb	r3, [r7, #0]
 8004aba:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line (logical)
    if (SSD1306_ROTATED_WIDTH < (SSD1306.CurrentX + char_width) ||
 8004abc:	4b39      	ldr	r3, [pc, #228]	@ (8004ba4 <ssd1306_WriteChar+0x120>)
 8004abe:	881b      	ldrh	r3, [r3, #0]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	7dfb      	ldrb	r3, [r7, #23]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	2b40      	cmp	r3, #64	@ 0x40
 8004ac8:	dc06      	bgt.n	8004ad8 <ssd1306_WriteChar+0x54>
        SSD1306_ROTATED_HEIGHT < (SSD1306.CurrentY + Font.height))
 8004aca:	4b36      	ldr	r3, [pc, #216]	@ (8004ba4 <ssd1306_WriteChar+0x120>)
 8004acc:	885b      	ldrh	r3, [r3, #2]
 8004ace:	461a      	mov	r2, r3
 8004ad0:	787b      	ldrb	r3, [r7, #1]
 8004ad2:	4413      	add	r3, r2
    if (SSD1306_ROTATED_WIDTH < (SSD1306.CurrentX + char_width) ||
 8004ad4:	2b80      	cmp	r3, #128	@ 0x80
 8004ad6:	dd01      	ble.n	8004adc <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	e05e      	b.n	8004b9a <ssd1306_WriteChar+0x116>
    }

    // Use the font to write (font expected to be in conventional orientation;
    // since DrawPixel maps logical->physical, characters will be rotated accordingly)
    for(i = 0; i < Font.height; i++) {
 8004adc:	2300      	movs	r3, #0
 8004ade:	61fb      	str	r3, [r7, #28]
 8004ae0:	e04d      	b.n	8004b7e <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	7bfb      	ldrb	r3, [r7, #15]
 8004ae6:	3b20      	subs	r3, #32
 8004ae8:	7879      	ldrb	r1, [r7, #1]
 8004aea:	fb01 f303 	mul.w	r3, r1, r3
 8004aee:	4619      	mov	r1, r3
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	440b      	add	r3, r1
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	4413      	add	r3, r2
 8004af8:	881b      	ldrh	r3, [r3, #0]
 8004afa:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8004afc:	2300      	movs	r3, #0
 8004afe:	61bb      	str	r3, [r7, #24]
 8004b00:	e036      	b.n	8004b70 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d013      	beq.n	8004b3a <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8004b12:	4b24      	ldr	r3, [pc, #144]	@ (8004ba4 <ssd1306_WriteChar+0x120>)
 8004b14:	881b      	ldrh	r3, [r3, #0]
 8004b16:	b2da      	uxtb	r2, r3
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	4413      	add	r3, r2
 8004b1e:	b2d8      	uxtb	r0, r3
 8004b20:	4b20      	ldr	r3, [pc, #128]	@ (8004ba4 <ssd1306_WriteChar+0x120>)
 8004b22:	885b      	ldrh	r3, [r3, #2]
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	4413      	add	r3, r2
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8004b32:	4619      	mov	r1, r3
 8004b34:	f7ff ff56 	bl	80049e4 <ssd1306_DrawPixel>
 8004b38:	e017      	b.n	8004b6a <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004b3a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ba4 <ssd1306_WriteChar+0x120>)
 8004b3c:	881b      	ldrh	r3, [r3, #0]
 8004b3e:	b2da      	uxtb	r2, r3
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	4413      	add	r3, r2
 8004b46:	b2d8      	uxtb	r0, r3
 8004b48:	4b16      	ldr	r3, [pc, #88]	@ (8004ba4 <ssd1306_WriteChar+0x120>)
 8004b4a:	885b      	ldrh	r3, [r3, #2]
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	4413      	add	r3, r2
 8004b54:	b2d9      	uxtb	r1, r3
 8004b56:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	bf0c      	ite	eq
 8004b5e:	2301      	moveq	r3, #1
 8004b60:	2300      	movne	r3, #0
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	461a      	mov	r2, r3
 8004b66:	f7ff ff3d 	bl	80049e4 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	61bb      	str	r3, [r7, #24]
 8004b70:	7dfb      	ldrb	r3, [r7, #23]
 8004b72:	69ba      	ldr	r2, [r7, #24]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d3c4      	bcc.n	8004b02 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	61fb      	str	r3, [r7, #28]
 8004b7e:	787b      	ldrb	r3, [r7, #1]
 8004b80:	461a      	mov	r2, r3
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d3ac      	bcc.n	8004ae2 <ssd1306_WriteChar+0x5e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8004b88:	4b06      	ldr	r3, [pc, #24]	@ (8004ba4 <ssd1306_WriteChar+0x120>)
 8004b8a:	881a      	ldrh	r2, [r3, #0]
 8004b8c:	7dfb      	ldrb	r3, [r7, #23]
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	4413      	add	r3, r2
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	4b03      	ldr	r3, [pc, #12]	@ (8004ba4 <ssd1306_WriteChar+0x120>)
 8004b96:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8004b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3724      	adds	r7, #36	@ 0x24
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd90      	pop	{r4, r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20006ef4 	.word	0x20006ef4

08004ba8 <ssd1306_WriteString>:

/* Write full string to screenbuffer (logical) */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b086      	sub	sp, #24
 8004bac:	af02      	add	r7, sp, #8
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	4638      	mov	r0, r7
 8004bb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8004bb6:	e013      	b.n	8004be0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	7818      	ldrb	r0, [r3, #0]
 8004bbc:	7e3b      	ldrb	r3, [r7, #24]
 8004bbe:	9300      	str	r3, [sp, #0]
 8004bc0:	463b      	mov	r3, r7
 8004bc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bc4:	f7ff ff5e 	bl	8004a84 <ssd1306_WriteChar>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	461a      	mov	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d002      	beq.n	8004bda <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	e008      	b.n	8004bec <ssd1306_WriteString+0x44>
        }
        str++;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1e7      	bne.n	8004bb8 <ssd1306_WriteString+0x10>
    }

    // Everything ok
    return *str;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	781b      	ldrb	r3, [r3, #0]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <ssd1306_SetCursor>:

/* Position the cursor (logical) */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	460a      	mov	r2, r1
 8004bfe:	71fb      	strb	r3, [r7, #7]
 8004c00:	4613      	mov	r3, r2
 8004c02:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8004c04:	79fb      	ldrb	r3, [r7, #7]
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	4b05      	ldr	r3, [pc, #20]	@ (8004c20 <ssd1306_SetCursor+0x2c>)
 8004c0a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8004c0c:	79bb      	ldrb	r3, [r7, #6]
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	4b03      	ldr	r3, [pc, #12]	@ (8004c20 <ssd1306_SetCursor+0x2c>)
 8004c12:	805a      	strh	r2, [r3, #2]
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bc80      	pop	{r7}
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	20006ef4 	.word	0x20006ef4

08004c24 <ssd1306_Line>:

/* Draw line by Bresenham's algorithm (logical coords) */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8004c24:	b590      	push	{r4, r7, lr}
 8004c26:	b089      	sub	sp, #36	@ 0x24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	4604      	mov	r4, r0
 8004c2c:	4608      	mov	r0, r1
 8004c2e:	4611      	mov	r1, r2
 8004c30:	461a      	mov	r2, r3
 8004c32:	4623      	mov	r3, r4
 8004c34:	71fb      	strb	r3, [r7, #7]
 8004c36:	4603      	mov	r3, r0
 8004c38:	71bb      	strb	r3, [r7, #6]
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	717b      	strb	r3, [r7, #5]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs((int32_t)x2 - (int32_t)x1);
 8004c42:	797a      	ldrb	r2, [r7, #5]
 8004c44:	79fb      	ldrb	r3, [r7, #7]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	bfb8      	it	lt
 8004c4c:	425b      	neglt	r3, r3
 8004c4e:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs((int32_t)y2 - (int32_t)y1);
 8004c50:	793a      	ldrb	r2, [r7, #4]
 8004c52:	79bb      	ldrb	r3, [r7, #6]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	bfb8      	it	lt
 8004c5a:	425b      	neglt	r3, r3
 8004c5c:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8004c5e:	79fa      	ldrb	r2, [r7, #7]
 8004c60:	797b      	ldrb	r3, [r7, #5]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d201      	bcs.n	8004c6a <ssd1306_Line+0x46>
 8004c66:	2301      	movs	r3, #1
 8004c68:	e001      	b.n	8004c6e <ssd1306_Line+0x4a>
 8004c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c6e:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8004c70:	79ba      	ldrb	r2, [r7, #6]
 8004c72:	793b      	ldrb	r3, [r7, #4]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d201      	bcs.n	8004c7c <ssd1306_Line+0x58>
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e001      	b.n	8004c80 <ssd1306_Line+0x5c>
 8004c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c80:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8004c82:	69ba      	ldr	r2, [r7, #24]
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	61fb      	str	r3, [r7, #28]
    int32_t error2;

    ssd1306_DrawPixel(x2, y2, color);
 8004c8a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8004c8e:	7939      	ldrb	r1, [r7, #4]
 8004c90:	797b      	ldrb	r3, [r7, #5]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7ff fea6 	bl	80049e4 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8004c98:	e024      	b.n	8004ce4 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8004c9a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8004c9e:	79b9      	ldrb	r1, [r7, #6]
 8004ca0:	79fb      	ldrb	r3, [r7, #7]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7ff fe9e 	bl	80049e4 <ssd1306_DrawPixel>
        error2 = error * 2;
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	005b      	lsls	r3, r3, #1
 8004cac:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	425b      	negs	r3, r3
 8004cb2:	68ba      	ldr	r2, [r7, #8]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	dd08      	ble.n	8004cca <ssd1306_Line+0xa6>
            error -= deltaY;
 8004cb8:	69fa      	ldr	r2, [r7, #28]
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	b2da      	uxtb	r2, r3
 8004cc4:	79fb      	ldrb	r3, [r7, #7]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	71fb      	strb	r3, [r7, #7]
        }

        if(error2 < deltaX) {
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	da08      	bge.n	8004ce4 <ssd1306_Line+0xc0>
            error += deltaX;
 8004cd2:	69fa      	ldr	r2, [r7, #28]
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	b2da      	uxtb	r2, r3
 8004cde:	79bb      	ldrb	r3, [r7, #6]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8004ce4:	79fa      	ldrb	r2, [r7, #7]
 8004ce6:	797b      	ldrb	r3, [r7, #5]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d1d6      	bne.n	8004c9a <ssd1306_Line+0x76>
 8004cec:	79ba      	ldrb	r2, [r7, #6]
 8004cee:	793b      	ldrb	r3, [r7, #4]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d1d2      	bne.n	8004c9a <ssd1306_Line+0x76>
        }
    }
    return;
 8004cf4:	bf00      	nop
}
 8004cf6:	3724      	adds	r7, #36	@ 0x24
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd90      	pop	{r4, r7, pc}

08004cfc <ssd1306_DrawCircle>:
    ssd1306_Line(x,y,xp2,yp2,color);
    return;
}

/* Draw circle by Bresenham's algorithm (logical) */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8004cfc:	b590      	push	{r4, r7, lr}
 8004cfe:	b087      	sub	sp, #28
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	4604      	mov	r4, r0
 8004d04:	4608      	mov	r0, r1
 8004d06:	4611      	mov	r1, r2
 8004d08:	461a      	mov	r2, r3
 8004d0a:	4623      	mov	r3, r4
 8004d0c:	71fb      	strb	r3, [r7, #7]
 8004d0e:	4603      	mov	r3, r0
 8004d10:	71bb      	strb	r3, [r7, #6]
 8004d12:	460b      	mov	r3, r1
 8004d14:	717b      	strb	r3, [r7, #5]
 8004d16:	4613      	mov	r3, r2
 8004d18:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8004d1a:	797b      	ldrb	r3, [r7, #5]
 8004d1c:	425b      	negs	r3, r3
 8004d1e:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8004d20:	2300      	movs	r3, #0
 8004d22:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 8004d24:	797b      	ldrb	r3, [r7, #5]
 8004d26:	f1c3 0301 	rsb	r3, r3, #1
 8004d2a:	005b      	lsls	r3, r3, #1
 8004d2c:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_ROTATED_WIDTH || par_y >= SSD1306_ROTATED_HEIGHT) {
 8004d2e:	79fb      	ldrb	r3, [r7, #7]
 8004d30:	2b3f      	cmp	r3, #63	@ 0x3f
 8004d32:	d866      	bhi.n	8004e02 <ssd1306_DrawCircle+0x106>
 8004d34:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	db62      	blt.n	8004e02 <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	79fa      	ldrb	r2, [r7, #7]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	b2d8      	uxtb	r0, r3
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	b2da      	uxtb	r2, r3
 8004d4a:	79bb      	ldrb	r3, [r7, #6]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	793a      	ldrb	r2, [r7, #4]
 8004d52:	4619      	mov	r1, r3
 8004d54:	f7ff fe46 	bl	80049e4 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	b2da      	uxtb	r2, r3
 8004d5c:	79fb      	ldrb	r3, [r7, #7]
 8004d5e:	4413      	add	r3, r2
 8004d60:	b2d8      	uxtb	r0, r3
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	b2da      	uxtb	r2, r3
 8004d66:	79bb      	ldrb	r3, [r7, #6]
 8004d68:	4413      	add	r3, r2
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	793a      	ldrb	r2, [r7, #4]
 8004d6e:	4619      	mov	r1, r3
 8004d70:	f7ff fe38 	bl	80049e4 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	b2da      	uxtb	r2, r3
 8004d78:	79fb      	ldrb	r3, [r7, #7]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	b2d8      	uxtb	r0, r3
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	79ba      	ldrb	r2, [r7, #6]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	793a      	ldrb	r2, [r7, #4]
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	f7ff fe2a 	bl	80049e4 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	79fa      	ldrb	r2, [r7, #7]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	b2d8      	uxtb	r0, r3
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	79ba      	ldrb	r2, [r7, #6]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	793a      	ldrb	r2, [r7, #4]
 8004da6:	4619      	mov	r1, r3
 8004da8:	f7ff fe1c 	bl	80049e4 <ssd1306_DrawPixel>
        e2 = err;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	dc13      	bgt.n	8004de0 <ssd1306_DrawCircle+0xe4>
            y++;
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	3301      	adds	r3, #1
 8004dbc:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	425b      	negs	r3, r3
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d105      	bne.n	8004de0 <ssd1306_DrawCircle+0xe4>
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	dc01      	bgt.n	8004de0 <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 8004de0:	68ba      	ldr	r2, [r7, #8]
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	dd08      	ble.n	8004dfa <ssd1306_DrawCircle+0xfe>
            x++;
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	3301      	adds	r3, #1
 8004dec:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	005b      	lsls	r3, r3, #1
 8004df2:	3301      	adds	r3, #1
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	4413      	add	r3, r2
 8004df8:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	dd9d      	ble.n	8004d3c <ssd1306_DrawCircle+0x40>

    return;
 8004e00:	e000      	b.n	8004e04 <ssd1306_DrawCircle+0x108>
        return;
 8004e02:	bf00      	nop
}
 8004e04:	371c      	adds	r7, #28
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd90      	pop	{r4, r7, pc}

08004e0a <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle (logical) */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8004e0a:	b590      	push	{r4, r7, lr}
 8004e0c:	b085      	sub	sp, #20
 8004e0e:	af02      	add	r7, sp, #8
 8004e10:	4604      	mov	r4, r0
 8004e12:	4608      	mov	r0, r1
 8004e14:	4611      	mov	r1, r2
 8004e16:	461a      	mov	r2, r3
 8004e18:	4623      	mov	r3, r4
 8004e1a:	71fb      	strb	r3, [r7, #7]
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	71bb      	strb	r3, [r7, #6]
 8004e20:	460b      	mov	r3, r1
 8004e22:	717b      	strb	r3, [r7, #5]
 8004e24:	4613      	mov	r3, r2
 8004e26:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8004e28:	79bc      	ldrb	r4, [r7, #6]
 8004e2a:	797a      	ldrb	r2, [r7, #5]
 8004e2c:	79b9      	ldrb	r1, [r7, #6]
 8004e2e:	79f8      	ldrb	r0, [r7, #7]
 8004e30:	7e3b      	ldrb	r3, [r7, #24]
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	4623      	mov	r3, r4
 8004e36:	f7ff fef5 	bl	8004c24 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8004e3a:	793c      	ldrb	r4, [r7, #4]
 8004e3c:	797a      	ldrb	r2, [r7, #5]
 8004e3e:	79b9      	ldrb	r1, [r7, #6]
 8004e40:	7978      	ldrb	r0, [r7, #5]
 8004e42:	7e3b      	ldrb	r3, [r7, #24]
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	4623      	mov	r3, r4
 8004e48:	f7ff feec 	bl	8004c24 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8004e4c:	793c      	ldrb	r4, [r7, #4]
 8004e4e:	79fa      	ldrb	r2, [r7, #7]
 8004e50:	7939      	ldrb	r1, [r7, #4]
 8004e52:	7978      	ldrb	r0, [r7, #5]
 8004e54:	7e3b      	ldrb	r3, [r7, #24]
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	4623      	mov	r3, r4
 8004e5a:	f7ff fee3 	bl	8004c24 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8004e5e:	79bc      	ldrb	r4, [r7, #6]
 8004e60:	79fa      	ldrb	r2, [r7, #7]
 8004e62:	7939      	ldrb	r1, [r7, #4]
 8004e64:	79f8      	ldrb	r0, [r7, #7]
 8004e66:	7e3b      	ldrb	r3, [r7, #24]
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	4623      	mov	r3, r4
 8004e6c:	f7ff feda 	bl	8004c24 <ssd1306_Line>

    return;
 8004e70:	bf00      	nop
}
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd90      	pop	{r4, r7, pc}

08004e78 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	4603      	mov	r3, r0
 8004e80:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8004e82:	2381      	movs	r3, #129	@ 0x81
 8004e84:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8004e86:	7bfb      	ldrb	r3, [r7, #15]
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7ff fccf 	bl	800482c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8004e8e:	79fb      	ldrb	r3, [r7, #7]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7ff fccb 	bl	800482c <ssd1306_WriteCommand>
}
 8004e96:	bf00      	nop
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
	...

08004ea0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8004eaa:	79fb      	ldrb	r3, [r7, #7]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d005      	beq.n	8004ebc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8004eb0:	23af      	movs	r3, #175	@ 0xaf
 8004eb2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8004eb4:	4b08      	ldr	r3, [pc, #32]	@ (8004ed8 <ssd1306_SetDisplayOn+0x38>)
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	715a      	strb	r2, [r3, #5]
 8004eba:	e004      	b.n	8004ec6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8004ebc:	23ae      	movs	r3, #174	@ 0xae
 8004ebe:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8004ec0:	4b05      	ldr	r3, [pc, #20]	@ (8004ed8 <ssd1306_SetDisplayOn+0x38>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8004ec6:	7bfb      	ldrb	r3, [r7, #15]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7ff fcaf 	bl	800482c <ssd1306_WriteCommand>
}
 8004ece:	bf00      	nop
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	20006ef4 	.word	0x20006ef4

08004edc <ssd1306_FillRect>:

uint8_t ssd1306_GetDisplayOn() {
    return SSD1306.DisplayOn;
}

void ssd1306_FillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8004edc:	b590      	push	{r4, r7, lr}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	4604      	mov	r4, r0
 8004ee4:	4608      	mov	r0, r1
 8004ee6:	4611      	mov	r1, r2
 8004ee8:	461a      	mov	r2, r3
 8004eea:	4623      	mov	r3, r4
 8004eec:	71fb      	strb	r3, [r7, #7]
 8004eee:	4603      	mov	r3, r0
 8004ef0:	71bb      	strb	r3, [r7, #6]
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	717b      	strb	r3, [r7, #5]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	713b      	strb	r3, [r7, #4]
    for (uint8_t i = y; i < y + h; i++) {
 8004efa:	79bb      	ldrb	r3, [r7, #6]
 8004efc:	73fb      	strb	r3, [r7, #15]
 8004efe:	e015      	b.n	8004f2c <ssd1306_FillRect+0x50>
        for (uint8_t j = x; j < x + w; j++) {
 8004f00:	79fb      	ldrb	r3, [r7, #7]
 8004f02:	73bb      	strb	r3, [r7, #14]
 8004f04:	e009      	b.n	8004f1a <ssd1306_FillRect+0x3e>
            ssd1306_DrawPixel(j, i, color);
 8004f06:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004f0a:	7bf9      	ldrb	r1, [r7, #15]
 8004f0c:	7bbb      	ldrb	r3, [r7, #14]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7ff fd68 	bl	80049e4 <ssd1306_DrawPixel>
        for (uint8_t j = x; j < x + w; j++) {
 8004f14:	7bbb      	ldrb	r3, [r7, #14]
 8004f16:	3301      	adds	r3, #1
 8004f18:	73bb      	strb	r3, [r7, #14]
 8004f1a:	7bba      	ldrb	r2, [r7, #14]
 8004f1c:	79f9      	ldrb	r1, [r7, #7]
 8004f1e:	797b      	ldrb	r3, [r7, #5]
 8004f20:	440b      	add	r3, r1
 8004f22:	429a      	cmp	r2, r3
 8004f24:	dbef      	blt.n	8004f06 <ssd1306_FillRect+0x2a>
    for (uint8_t i = y; i < y + h; i++) {
 8004f26:	7bfb      	ldrb	r3, [r7, #15]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	73fb      	strb	r3, [r7, #15]
 8004f2c:	7bfa      	ldrb	r2, [r7, #15]
 8004f2e:	79b9      	ldrb	r1, [r7, #6]
 8004f30:	793b      	ldrb	r3, [r7, #4]
 8004f32:	440b      	add	r3, r1
 8004f34:	429a      	cmp	r2, r3
 8004f36:	dbe3      	blt.n	8004f00 <ssd1306_FillRect+0x24>
        }
    }
}
 8004f38:	bf00      	nop
 8004f3a:	bf00      	nop
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd90      	pop	{r4, r7, pc}
	...

08004f44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004f44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004f7c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8004f48:	f7fe f9fa 	bl	8003340 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004f4c:	480c      	ldr	r0, [pc, #48]	@ (8004f80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004f4e:	490d      	ldr	r1, [pc, #52]	@ (8004f84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004f50:	4a0d      	ldr	r2, [pc, #52]	@ (8004f88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004f54:	e002      	b.n	8004f5c <LoopCopyDataInit>

08004f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f5a:	3304      	adds	r3, #4

08004f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f60:	d3f9      	bcc.n	8004f56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f62:	4a0a      	ldr	r2, [pc, #40]	@ (8004f8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004f64:	4c0a      	ldr	r4, [pc, #40]	@ (8004f90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f68:	e001      	b.n	8004f6e <LoopFillZerobss>

08004f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f6c:	3204      	adds	r2, #4

08004f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f70:	d3fb      	bcc.n	8004f6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004f72:	f01b fcf5 	bl	8020960 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004f76:	f7fd fa8d 	bl	8002494 <main>
  bx  lr
 8004f7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004f7c:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8004f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004f84:	200002e8 	.word	0x200002e8
  ldr r2, =_sidata
 8004f88:	0802f460 	.word	0x0802f460
  ldr r2, =_sbss
 8004f8c:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 8004f90:	2000e008 	.word	0x2000e008

08004f94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004f94:	e7fe      	b.n	8004f94 <ADC_IRQHandler>
	...

08004f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8004fd8 <HAL_Init+0x40>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a0d      	ldr	r2, [pc, #52]	@ (8004fd8 <HAL_Init+0x40>)
 8004fa2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004fa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8004fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd8 <HAL_Init+0x40>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a0a      	ldr	r2, [pc, #40]	@ (8004fd8 <HAL_Init+0x40>)
 8004fae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004fb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004fb4:	4b08      	ldr	r3, [pc, #32]	@ (8004fd8 <HAL_Init+0x40>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a07      	ldr	r2, [pc, #28]	@ (8004fd8 <HAL_Init+0x40>)
 8004fba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004fc0:	2003      	movs	r0, #3
 8004fc2:	f000 fd23 	bl	8005a0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004fc6:	200f      	movs	r0, #15
 8004fc8:	f000 f808 	bl	8004fdc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8004fcc:	f7fd ff6e 	bl	8002eac <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	40023c00 	.word	0x40023c00

08004fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004fe4:	4b12      	ldr	r3, [pc, #72]	@ (8005030 <HAL_InitTick+0x54>)
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	4b12      	ldr	r3, [pc, #72]	@ (8005034 <HAL_InitTick+0x58>)
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	4619      	mov	r1, r3
 8004fee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 fd3b 	bl	8005a76 <HAL_SYSTICK_Config>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e00e      	b.n	8005028 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2b0f      	cmp	r3, #15
 800500e:	d80a      	bhi.n	8005026 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005010:	2200      	movs	r2, #0
 8005012:	6879      	ldr	r1, [r7, #4]
 8005014:	f04f 30ff 	mov.w	r0, #4294967295
 8005018:	f000 fd03 	bl	8005a22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800501c:	4a06      	ldr	r2, [pc, #24]	@ (8005038 <HAL_InitTick+0x5c>)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005022:	2300      	movs	r3, #0
 8005024:	e000      	b.n	8005028 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
}
 8005028:	4618      	mov	r0, r3
 800502a:	3708      	adds	r7, #8
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	20000070 	.word	0x20000070
 8005034:	200000c4 	.word	0x200000c4
 8005038:	200000c0 	.word	0x200000c0

0800503c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800503c:	b480      	push	{r7}
 800503e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005040:	4b05      	ldr	r3, [pc, #20]	@ (8005058 <HAL_IncTick+0x1c>)
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	461a      	mov	r2, r3
 8005046:	4b05      	ldr	r3, [pc, #20]	@ (800505c <HAL_IncTick+0x20>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4413      	add	r3, r2
 800504c:	4a03      	ldr	r2, [pc, #12]	@ (800505c <HAL_IncTick+0x20>)
 800504e:	6013      	str	r3, [r2, #0]
}
 8005050:	bf00      	nop
 8005052:	46bd      	mov	sp, r7
 8005054:	bc80      	pop	{r7}
 8005056:	4770      	bx	lr
 8005058:	200000c4 	.word	0x200000c4
 800505c:	20006efc 	.word	0x20006efc

08005060 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005060:	b480      	push	{r7}
 8005062:	af00      	add	r7, sp, #0
  return uwTick;
 8005064:	4b02      	ldr	r3, [pc, #8]	@ (8005070 <HAL_GetTick+0x10>)
 8005066:	681b      	ldr	r3, [r3, #0]
}
 8005068:	4618      	mov	r0, r3
 800506a:	46bd      	mov	sp, r7
 800506c:	bc80      	pop	{r7}
 800506e:	4770      	bx	lr
 8005070:	20006efc 	.word	0x20006efc

08005074 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800507c:	f7ff fff0 	bl	8005060 <HAL_GetTick>
 8005080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508c:	d005      	beq.n	800509a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800508e:	4b0a      	ldr	r3, [pc, #40]	@ (80050b8 <HAL_Delay+0x44>)
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	461a      	mov	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	4413      	add	r3, r2
 8005098:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800509a:	bf00      	nop
 800509c:	f7ff ffe0 	bl	8005060 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d8f7      	bhi.n	800509c <HAL_Delay+0x28>
  {
  }
}
 80050ac:	bf00      	nop
 80050ae:	bf00      	nop
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	200000c4 	.word	0x200000c4

080050bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050c4:	2300      	movs	r3, #0
 80050c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d101      	bne.n	80050d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e033      	b.n	800513a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d109      	bne.n	80050ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7fd ff0c 	bl	8002ef8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f2:	f003 0310 	and.w	r3, r3, #16
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d118      	bne.n	800512c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050fe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005102:	f023 0302 	bic.w	r3, r3, #2
 8005106:	f043 0202 	orr.w	r2, r3, #2
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 fa28 	bl	8005564 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511e:	f023 0303 	bic.w	r3, r3, #3
 8005122:	f043 0201 	orr.w	r2, r3, #1
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	641a      	str	r2, [r3, #64]	@ 0x40
 800512a:	e001      	b.n	8005130 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005138:	7bfb      	ldrb	r3, [r7, #15]
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
	...

08005144 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b086      	sub	sp, #24
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005150:	2300      	movs	r3, #0
 8005152:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800515a:	2b01      	cmp	r3, #1
 800515c:	d101      	bne.n	8005162 <HAL_ADC_Start_DMA+0x1e>
 800515e:	2302      	movs	r3, #2
 8005160:	e0bc      	b.n	80052dc <HAL_ADC_Start_DMA+0x198>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	2b01      	cmp	r3, #1
 8005176:	d018      	beq.n	80051aa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689a      	ldr	r2, [r3, #8]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f042 0201 	orr.w	r2, r2, #1
 8005186:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005188:	4b56      	ldr	r3, [pc, #344]	@ (80052e4 <HAL_ADC_Start_DMA+0x1a0>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a56      	ldr	r2, [pc, #344]	@ (80052e8 <HAL_ADC_Start_DMA+0x1a4>)
 800518e:	fba2 2303 	umull	r2, r3, r2, r3
 8005192:	0c9a      	lsrs	r2, r3, #18
 8005194:	4613      	mov	r3, r2
 8005196:	005b      	lsls	r3, r3, #1
 8005198:	4413      	add	r3, r2
 800519a:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 800519c:	e002      	b.n	80051a4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	3b01      	subs	r3, #1
 80051a2:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1f9      	bne.n	800519e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f003 0301 	and.w	r3, r3, #1
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	f040 8084 	bne.w	80052c2 <HAL_ADC_Start_DMA+0x17e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051be:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80051c2:	f023 0301 	bic.w	r3, r3, #1
 80051c6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d007      	beq.n	80051ec <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80051e4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80051f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051f8:	d106      	bne.n	8005208 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051fe:	f023 0206 	bic.w	r2, r3, #6
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	645a      	str	r2, [r3, #68]	@ 0x44
 8005206:	e002      	b.n	800520e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800521a:	4a34      	ldr	r2, [pc, #208]	@ (80052ec <HAL_ADC_Start_DMA+0x1a8>)
 800521c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005222:	4a33      	ldr	r2, [pc, #204]	@ (80052f0 <HAL_ADC_Start_DMA+0x1ac>)
 8005224:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800522a:	4a32      	ldr	r2, [pc, #200]	@ (80052f4 <HAL_ADC_Start_DMA+0x1b0>)
 800522c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8005236:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	685a      	ldr	r2, [r3, #4]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8005246:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	689a      	ldr	r2, [r3, #8]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005256:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	334c      	adds	r3, #76	@ 0x4c
 8005262:	4619      	mov	r1, r3
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f000 fcc0 	bl	8005bec <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800526c:	4b22      	ldr	r3, [pc, #136]	@ (80052f8 <HAL_ADC_Start_DMA+0x1b4>)
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f003 031f 	and.w	r3, r3, #31
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10f      	bne.n	8005298 <HAL_ADC_Start_DMA+0x154>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d129      	bne.n	80052da <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	689a      	ldr	r2, [r3, #8]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005294:	609a      	str	r2, [r3, #8]
 8005296:	e020      	b.n	80052da <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a17      	ldr	r2, [pc, #92]	@ (80052fc <HAL_ADC_Start_DMA+0x1b8>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d11b      	bne.n	80052da <HAL_ADC_Start_DMA+0x196>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d114      	bne.n	80052da <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	689a      	ldr	r2, [r3, #8]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80052be:	609a      	str	r2, [r3, #8]
 80052c0:	e00b      	b.n	80052da <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c6:	f043 0210 	orr.w	r2, r3, #16
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052d2:	f043 0201 	orr.w	r2, r3, #1
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3718      	adds	r7, #24
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	20000070 	.word	0x20000070
 80052e8:	431bde83 	.word	0x431bde83
 80052ec:	08005771 	.word	0x08005771
 80052f0:	0800582b 	.word	0x0800582b
 80052f4:	08005847 	.word	0x08005847
 80052f8:	40012300 	.word	0x40012300
 80052fc:	40012000 	.word	0x40012000

08005300 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	bc80      	pop	{r7}
 8005310:	4770      	bx	lr

08005312 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005312:	b480      	push	{r7}
 8005314:	b083      	sub	sp, #12
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800531a:	bf00      	nop
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	bc80      	pop	{r7}
 8005322:	4770      	bx	lr

08005324 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800532e:	2300      	movs	r3, #0
 8005330:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005338:	2b01      	cmp	r3, #1
 800533a:	d101      	bne.n	8005340 <HAL_ADC_ConfigChannel+0x1c>
 800533c:	2302      	movs	r3, #2
 800533e:	e103      	b.n	8005548 <HAL_ADC_ConfigChannel+0x224>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2b09      	cmp	r3, #9
 800534e:	d925      	bls.n	800539c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68d9      	ldr	r1, [r3, #12]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	b29b      	uxth	r3, r3
 800535c:	461a      	mov	r2, r3
 800535e:	4613      	mov	r3, r2
 8005360:	005b      	lsls	r3, r3, #1
 8005362:	4413      	add	r3, r2
 8005364:	3b1e      	subs	r3, #30
 8005366:	2207      	movs	r2, #7
 8005368:	fa02 f303 	lsl.w	r3, r2, r3
 800536c:	43da      	mvns	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	400a      	ands	r2, r1
 8005374:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68d9      	ldr	r1, [r3, #12]
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	689a      	ldr	r2, [r3, #8]
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	b29b      	uxth	r3, r3
 8005386:	4618      	mov	r0, r3
 8005388:	4603      	mov	r3, r0
 800538a:	005b      	lsls	r3, r3, #1
 800538c:	4403      	add	r3, r0
 800538e:	3b1e      	subs	r3, #30
 8005390:	409a      	lsls	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	430a      	orrs	r2, r1
 8005398:	60da      	str	r2, [r3, #12]
 800539a:	e022      	b.n	80053e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6919      	ldr	r1, [r3, #16]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	461a      	mov	r2, r3
 80053aa:	4613      	mov	r3, r2
 80053ac:	005b      	lsls	r3, r3, #1
 80053ae:	4413      	add	r3, r2
 80053b0:	2207      	movs	r2, #7
 80053b2:	fa02 f303 	lsl.w	r3, r2, r3
 80053b6:	43da      	mvns	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	400a      	ands	r2, r1
 80053be:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6919      	ldr	r1, [r3, #16]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	689a      	ldr	r2, [r3, #8]
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	4618      	mov	r0, r3
 80053d2:	4603      	mov	r3, r0
 80053d4:	005b      	lsls	r3, r3, #1
 80053d6:	4403      	add	r3, r0
 80053d8:	409a      	lsls	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	2b06      	cmp	r3, #6
 80053e8:	d824      	bhi.n	8005434 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	4613      	mov	r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	3b05      	subs	r3, #5
 80053fc:	221f      	movs	r2, #31
 80053fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005402:	43da      	mvns	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	400a      	ands	r2, r1
 800540a:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	b29b      	uxth	r3, r3
 8005418:	4618      	mov	r0, r3
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	685a      	ldr	r2, [r3, #4]
 800541e:	4613      	mov	r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	4413      	add	r3, r2
 8005424:	3b05      	subs	r3, #5
 8005426:	fa00 f203 	lsl.w	r2, r0, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	430a      	orrs	r2, r1
 8005430:	635a      	str	r2, [r3, #52]	@ 0x34
 8005432:	e04c      	b.n	80054ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	2b0c      	cmp	r3, #12
 800543a:	d824      	bhi.n	8005486 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	4613      	mov	r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4413      	add	r3, r2
 800544c:	3b23      	subs	r3, #35	@ 0x23
 800544e:	221f      	movs	r2, #31
 8005450:	fa02 f303 	lsl.w	r3, r2, r3
 8005454:	43da      	mvns	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	400a      	ands	r2, r1
 800545c:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	b29b      	uxth	r3, r3
 800546a:	4618      	mov	r0, r3
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	4613      	mov	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4413      	add	r3, r2
 8005476:	3b23      	subs	r3, #35	@ 0x23
 8005478:	fa00 f203 	lsl.w	r2, r0, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	430a      	orrs	r2, r1
 8005482:	631a      	str	r2, [r3, #48]	@ 0x30
 8005484:	e023      	b.n	80054ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	4613      	mov	r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4413      	add	r3, r2
 8005496:	3b41      	subs	r3, #65	@ 0x41
 8005498:	221f      	movs	r2, #31
 800549a:	fa02 f303 	lsl.w	r3, r2, r3
 800549e:	43da      	mvns	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	400a      	ands	r2, r1
 80054a6:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	4618      	mov	r0, r3
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	4613      	mov	r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4413      	add	r3, r2
 80054c0:	3b41      	subs	r3, #65	@ 0x41
 80054c2:	fa00 f203 	lsl.w	r2, r0, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	430a      	orrs	r2, r1
 80054cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a20      	ldr	r2, [pc, #128]	@ (8005554 <HAL_ADC_ConfigChannel+0x230>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d109      	bne.n	80054ec <HAL_ADC_ConfigChannel+0x1c8>
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2b12      	cmp	r3, #18
 80054de:	d105      	bne.n	80054ec <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80054e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005558 <HAL_ADC_ConfigChannel+0x234>)
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005558 <HAL_ADC_ConfigChannel+0x234>)
 80054e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80054ea:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a18      	ldr	r2, [pc, #96]	@ (8005554 <HAL_ADC_ConfigChannel+0x230>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d123      	bne.n	800553e <HAL_ADC_ConfigChannel+0x21a>
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2b10      	cmp	r3, #16
 80054fc:	d003      	beq.n	8005506 <HAL_ADC_ConfigChannel+0x1e2>
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2b11      	cmp	r3, #17
 8005504:	d11b      	bne.n	800553e <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005506:	4b14      	ldr	r3, [pc, #80]	@ (8005558 <HAL_ADC_ConfigChannel+0x234>)
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	4a13      	ldr	r2, [pc, #76]	@ (8005558 <HAL_ADC_ConfigChannel+0x234>)
 800550c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005510:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2b10      	cmp	r3, #16
 8005518:	d111      	bne.n	800553e <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800551a:	4b10      	ldr	r3, [pc, #64]	@ (800555c <HAL_ADC_ConfigChannel+0x238>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a10      	ldr	r2, [pc, #64]	@ (8005560 <HAL_ADC_ConfigChannel+0x23c>)
 8005520:	fba2 2303 	umull	r2, r3, r2, r3
 8005524:	0c9a      	lsrs	r2, r3, #18
 8005526:	4613      	mov	r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4413      	add	r3, r2
 800552c:	005b      	lsls	r3, r3, #1
 800552e:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8005530:	e002      	b.n	8005538 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	3b01      	subs	r3, #1
 8005536:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1f9      	bne.n	8005532 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3714      	adds	r7, #20
 800554c:	46bd      	mov	sp, r7
 800554e:	bc80      	pop	{r7}
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	40012000 	.word	0x40012000
 8005558:	40012300 	.word	0x40012300
 800555c:	20000070 	.word	0x20000070
 8005560:	431bde83 	.word	0x431bde83

08005564 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800556c:	4b7e      	ldr	r3, [pc, #504]	@ (8005768 <ADC_Init+0x204>)
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	4a7d      	ldr	r2, [pc, #500]	@ (8005768 <ADC_Init+0x204>)
 8005572:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8005576:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005578:	4b7b      	ldr	r3, [pc, #492]	@ (8005768 <ADC_Init+0x204>)
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	4979      	ldr	r1, [pc, #484]	@ (8005768 <ADC_Init+0x204>)
 8005582:	4313      	orrs	r3, r2
 8005584:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	685a      	ldr	r2, [r3, #4]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005594:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6859      	ldr	r1, [r3, #4]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	021a      	lsls	r2, r3, #8
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	685a      	ldr	r2, [r3, #4]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80055b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	6859      	ldr	r1, [r3, #4]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	689a      	ldr	r2, [r3, #8]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689a      	ldr	r2, [r3, #8]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6899      	ldr	r1, [r3, #8]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68da      	ldr	r2, [r3, #12]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	430a      	orrs	r2, r1
 80055ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f2:	4a5e      	ldr	r2, [pc, #376]	@ (800576c <ADC_Init+0x208>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d022      	beq.n	800563e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689a      	ldr	r2, [r3, #8]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005606:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6899      	ldr	r1, [r3, #8]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	430a      	orrs	r2, r1
 8005618:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	689a      	ldr	r2, [r3, #8]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005628:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	6899      	ldr	r1, [r3, #8]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	430a      	orrs	r2, r1
 800563a:	609a      	str	r2, [r3, #8]
 800563c:	e00f      	b.n	800565e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800564c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	689a      	ldr	r2, [r3, #8]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800565c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	689a      	ldr	r2, [r3, #8]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f022 0202 	bic.w	r2, r2, #2
 800566c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	6899      	ldr	r1, [r3, #8]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	7e1b      	ldrb	r3, [r3, #24]
 8005678:	005a      	lsls	r2, r3, #1
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d027      	beq.n	80056dc <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800569a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	685a      	ldr	r2, [r3, #4]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80056aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b0:	3b01      	subs	r3, #1
 80056b2:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 80056b6:	60ba      	str	r2, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	fa92 f2a2 	rbit	r2, r2
 80056be:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	fab2 f282 	clz	r2, r2
 80056c6:	b2d2      	uxtb	r2, r2
 80056c8:	fa03 f102 	lsl.w	r1, r3, r2
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	685a      	ldr	r2, [r3, #4]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	430a      	orrs	r2, r1
 80056d8:	605a      	str	r2, [r3, #4]
 80056da:	e007      	b.n	80056ec <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80056fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	69db      	ldr	r3, [r3, #28]
 8005706:	3b01      	subs	r3, #1
 8005708:	051a      	lsls	r2, r3, #20
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	430a      	orrs	r2, r1
 8005710:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	689a      	ldr	r2, [r3, #8]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005720:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	6899      	ldr	r1, [r3, #8]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800572e:	025a      	lsls	r2, r3, #9
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	430a      	orrs	r2, r1
 8005736:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689a      	ldr	r2, [r3, #8]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005746:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6899      	ldr	r1, [r3, #8]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	029a      	lsls	r2, r3, #10
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	430a      	orrs	r2, r1
 800575a:	609a      	str	r2, [r3, #8]
}
 800575c:	bf00      	nop
 800575e:	3714      	adds	r7, #20
 8005760:	46bd      	mov	sp, r7
 8005762:	bc80      	pop	{r7}
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	40012300 	.word	0x40012300
 800576c:	0f000001 	.word	0x0f000001

08005770 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800577c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005782:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005786:	2b00      	cmp	r3, #0
 8005788:	d13c      	bne.n	8005804 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800578e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d12b      	bne.n	80057fc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d127      	bne.n	80057fc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d006      	beq.n	80057c8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d119      	bne.n	80057fc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f022 0220 	bic.w	r2, r2, #32
 80057d6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d105      	bne.n	80057fc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f4:	f043 0201 	orr.w	r2, r3, #1
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f7fc fa87 	bl	8001d10 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005802:	e00e      	b.n	8005822 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005808:	f003 0310 	and.w	r3, r3, #16
 800580c:	2b00      	cmp	r3, #0
 800580e:	d003      	beq.n	8005818 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f7ff fd7e 	bl	8005312 <HAL_ADC_ErrorCallback>
}
 8005816:	e004      	b.n	8005822 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800581c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	4798      	blx	r3
}
 8005822:	bf00      	nop
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b084      	sub	sp, #16
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005836:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	f7ff fd61 	bl	8005300 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800583e:	bf00      	nop
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b084      	sub	sp, #16
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005852:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2240      	movs	r2, #64	@ 0x40
 8005858:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800585e:	f043 0204 	orr.w	r2, r3, #4
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f7ff fd53 	bl	8005312 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800586c:	bf00      	nop
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <__NVIC_SetPriorityGrouping>:
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f003 0307 	and.w	r3, r3, #7
 8005882:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005884:	4b0c      	ldr	r3, [pc, #48]	@ (80058b8 <__NVIC_SetPriorityGrouping+0x44>)
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005890:	4013      	ands	r3, r2
 8005892:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800589c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80058a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80058a6:	4a04      	ldr	r2, [pc, #16]	@ (80058b8 <__NVIC_SetPriorityGrouping+0x44>)
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	60d3      	str	r3, [r2, #12]
}
 80058ac:	bf00      	nop
 80058ae:	3714      	adds	r7, #20
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bc80      	pop	{r7}
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	e000ed00 	.word	0xe000ed00

080058bc <__NVIC_GetPriorityGrouping>:
{
 80058bc:	b480      	push	{r7}
 80058be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80058c0:	4b04      	ldr	r3, [pc, #16]	@ (80058d4 <__NVIC_GetPriorityGrouping+0x18>)
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	0a1b      	lsrs	r3, r3, #8
 80058c6:	f003 0307 	and.w	r3, r3, #7
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bc80      	pop	{r7}
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	e000ed00 	.word	0xe000ed00

080058d8 <__NVIC_EnableIRQ>:
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	4603      	mov	r3, r0
 80058e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	db0b      	blt.n	8005902 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058ea:	79fb      	ldrb	r3, [r7, #7]
 80058ec:	f003 021f 	and.w	r2, r3, #31
 80058f0:	4906      	ldr	r1, [pc, #24]	@ (800590c <__NVIC_EnableIRQ+0x34>)
 80058f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058f6:	095b      	lsrs	r3, r3, #5
 80058f8:	2001      	movs	r0, #1
 80058fa:	fa00 f202 	lsl.w	r2, r0, r2
 80058fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005902:	bf00      	nop
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	bc80      	pop	{r7}
 800590a:	4770      	bx	lr
 800590c:	e000e100 	.word	0xe000e100

08005910 <__NVIC_SetPriority>:
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	4603      	mov	r3, r0
 8005918:	6039      	str	r1, [r7, #0]
 800591a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800591c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005920:	2b00      	cmp	r3, #0
 8005922:	db0a      	blt.n	800593a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	b2da      	uxtb	r2, r3
 8005928:	490c      	ldr	r1, [pc, #48]	@ (800595c <__NVIC_SetPriority+0x4c>)
 800592a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800592e:	0112      	lsls	r2, r2, #4
 8005930:	b2d2      	uxtb	r2, r2
 8005932:	440b      	add	r3, r1
 8005934:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005938:	e00a      	b.n	8005950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	b2da      	uxtb	r2, r3
 800593e:	4908      	ldr	r1, [pc, #32]	@ (8005960 <__NVIC_SetPriority+0x50>)
 8005940:	79fb      	ldrb	r3, [r7, #7]
 8005942:	f003 030f 	and.w	r3, r3, #15
 8005946:	3b04      	subs	r3, #4
 8005948:	0112      	lsls	r2, r2, #4
 800594a:	b2d2      	uxtb	r2, r2
 800594c:	440b      	add	r3, r1
 800594e:	761a      	strb	r2, [r3, #24]
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	bc80      	pop	{r7}
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	e000e100 	.word	0xe000e100
 8005960:	e000ed00 	.word	0xe000ed00

08005964 <NVIC_EncodePriority>:
{
 8005964:	b480      	push	{r7}
 8005966:	b089      	sub	sp, #36	@ 0x24
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f003 0307 	and.w	r3, r3, #7
 8005976:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	f1c3 0307 	rsb	r3, r3, #7
 800597e:	2b04      	cmp	r3, #4
 8005980:	bf28      	it	cs
 8005982:	2304      	movcs	r3, #4
 8005984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	3304      	adds	r3, #4
 800598a:	2b06      	cmp	r3, #6
 800598c:	d902      	bls.n	8005994 <NVIC_EncodePriority+0x30>
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	3b03      	subs	r3, #3
 8005992:	e000      	b.n	8005996 <NVIC_EncodePriority+0x32>
 8005994:	2300      	movs	r3, #0
 8005996:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005998:	f04f 32ff 	mov.w	r2, #4294967295
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	fa02 f303 	lsl.w	r3, r2, r3
 80059a2:	43da      	mvns	r2, r3
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	401a      	ands	r2, r3
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80059ac:	f04f 31ff 	mov.w	r1, #4294967295
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	fa01 f303 	lsl.w	r3, r1, r3
 80059b6:	43d9      	mvns	r1, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059bc:	4313      	orrs	r3, r2
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3724      	adds	r7, #36	@ 0x24
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bc80      	pop	{r7}
 80059c6:	4770      	bx	lr

080059c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	3b01      	subs	r3, #1
 80059d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80059d8:	d301      	bcc.n	80059de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80059da:	2301      	movs	r3, #1
 80059dc:	e00f      	b.n	80059fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80059de:	4a0a      	ldr	r2, [pc, #40]	@ (8005a08 <SysTick_Config+0x40>)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	3b01      	subs	r3, #1
 80059e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80059e6:	210f      	movs	r1, #15
 80059e8:	f04f 30ff 	mov.w	r0, #4294967295
 80059ec:	f7ff ff90 	bl	8005910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80059f0:	4b05      	ldr	r3, [pc, #20]	@ (8005a08 <SysTick_Config+0x40>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80059f6:	4b04      	ldr	r3, [pc, #16]	@ (8005a08 <SysTick_Config+0x40>)
 80059f8:	2207      	movs	r2, #7
 80059fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3708      	adds	r7, #8
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	e000e010 	.word	0xe000e010

08005a0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f7ff ff2d 	bl	8005874 <__NVIC_SetPriorityGrouping>
}
 8005a1a:	bf00      	nop
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b086      	sub	sp, #24
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	4603      	mov	r3, r0
 8005a2a:	60b9      	str	r1, [r7, #8]
 8005a2c:	607a      	str	r2, [r7, #4]
 8005a2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005a30:	2300      	movs	r3, #0
 8005a32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005a34:	f7ff ff42 	bl	80058bc <__NVIC_GetPriorityGrouping>
 8005a38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	68b9      	ldr	r1, [r7, #8]
 8005a3e:	6978      	ldr	r0, [r7, #20]
 8005a40:	f7ff ff90 	bl	8005964 <NVIC_EncodePriority>
 8005a44:	4602      	mov	r2, r0
 8005a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a4a:	4611      	mov	r1, r2
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7ff ff5f 	bl	8005910 <__NVIC_SetPriority>
}
 8005a52:	bf00      	nop
 8005a54:	3718      	adds	r7, #24
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a5a:	b580      	push	{r7, lr}
 8005a5c:	b082      	sub	sp, #8
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	4603      	mov	r3, r0
 8005a62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7ff ff35 	bl	80058d8 <__NVIC_EnableIRQ>
}
 8005a6e:	bf00      	nop
 8005a70:	3708      	adds	r7, #8
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b082      	sub	sp, #8
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f7ff ffa2 	bl	80059c8 <SysTick_Config>
 8005a84:	4603      	mov	r3, r0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3708      	adds	r7, #8
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
	...

08005a90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005a9c:	f7ff fae0 	bl	8005060 <HAL_GetTick>
 8005aa0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d101      	bne.n	8005aac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e099      	b.n	8005be0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2202      	movs	r2, #2
 8005ab0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f022 0201 	bic.w	r2, r2, #1
 8005aca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005acc:	e00f      	b.n	8005aee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ace:	f7ff fac7 	bl	8005060 <HAL_GetTick>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	2b05      	cmp	r3, #5
 8005ada:	d908      	bls.n	8005aee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2203      	movs	r2, #3
 8005ae6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e078      	b.n	8005be0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0301 	and.w	r3, r3, #1
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1e8      	bne.n	8005ace <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005b04:	697a      	ldr	r2, [r7, #20]
 8005b06:	4b38      	ldr	r3, [pc, #224]	@ (8005be8 <HAL_DMA_Init+0x158>)
 8005b08:	4013      	ands	r3, r2
 8005b0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685a      	ldr	r2, [r3, #4]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	699b      	ldr	r3, [r3, #24]
 8005b2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a1b      	ldr	r3, [r3, #32]
 8005b38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b44:	2b04      	cmp	r3, #4
 8005b46:	d107      	bne.n	8005b58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b50:	4313      	orrs	r3, r2
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	f023 0307 	bic.w	r3, r3, #7
 8005b6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b7e:	2b04      	cmp	r3, #4
 8005b80:	d117      	bne.n	8005bb2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00e      	beq.n	8005bb2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 fa6d 	bl	8006074 <DMA_CheckFifoParam>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d008      	beq.n	8005bb2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2240      	movs	r2, #64	@ 0x40
 8005ba4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e016      	b.n	8005be0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 fa26 	bl	800600c <DMA_CalcBaseAndBitshift>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bc8:	223f      	movs	r2, #63	@ 0x3f
 8005bca:	409a      	lsls	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3718      	adds	r7, #24
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	f010803f 	.word	0xf010803f

08005bec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
 8005bf8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c02:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d101      	bne.n	8005c12 <HAL_DMA_Start_IT+0x26>
 8005c0e:	2302      	movs	r3, #2
 8005c10:	e040      	b.n	8005c94 <HAL_DMA_Start_IT+0xa8>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d12f      	bne.n	8005c86 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2202      	movs	r2, #2
 8005c2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	68b9      	ldr	r1, [r7, #8]
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	f000 f9b8 	bl	8005fb0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c44:	223f      	movs	r2, #63	@ 0x3f
 8005c46:	409a      	lsls	r2, r3
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f042 0216 	orr.w	r2, r2, #22
 8005c5a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d007      	beq.n	8005c74 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f042 0208 	orr.w	r2, r2, #8
 8005c72:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f042 0201 	orr.w	r2, r2, #1
 8005c82:	601a      	str	r2, [r3, #0]
 8005c84:	e005      	b.n	8005c92 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005c8e:	2302      	movs	r3, #2
 8005c90:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005c92:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3718      	adds	r7, #24
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005ca8:	4b8e      	ldr	r3, [pc, #568]	@ (8005ee4 <HAL_DMA_IRQHandler+0x248>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a8e      	ldr	r2, [pc, #568]	@ (8005ee8 <HAL_DMA_IRQHandler+0x24c>)
 8005cae:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb2:	0a9b      	lsrs	r3, r3, #10
 8005cb4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cc6:	2208      	movs	r2, #8
 8005cc8:	409a      	lsls	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	4013      	ands	r3, r2
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d01a      	beq.n	8005d08 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0304 	and.w	r3, r3, #4
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d013      	beq.n	8005d08 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f022 0204 	bic.w	r2, r2, #4
 8005cee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cf4:	2208      	movs	r2, #8
 8005cf6:	409a      	lsls	r2, r3
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d00:	f043 0201 	orr.w	r2, r3, #1
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	409a      	lsls	r2, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	4013      	ands	r3, r2
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d012      	beq.n	8005d3e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00b      	beq.n	8005d3e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	409a      	lsls	r2, r3
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d36:	f043 0202 	orr.w	r2, r3, #2
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d42:	2204      	movs	r2, #4
 8005d44:	409a      	lsls	r2, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	4013      	ands	r3, r2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d012      	beq.n	8005d74 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0302 	and.w	r3, r3, #2
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d00b      	beq.n	8005d74 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d60:	2204      	movs	r2, #4
 8005d62:	409a      	lsls	r2, r3
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d6c:	f043 0204 	orr.w	r2, r3, #4
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d78:	2210      	movs	r2, #16
 8005d7a:	409a      	lsls	r2, r3
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	4013      	ands	r3, r2
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d043      	beq.n	8005e0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0308 	and.w	r3, r3, #8
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d03c      	beq.n	8005e0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d96:	2210      	movs	r2, #16
 8005d98:	409a      	lsls	r2, r3
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d018      	beq.n	8005dde <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d108      	bne.n	8005dcc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d024      	beq.n	8005e0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	4798      	blx	r3
 8005dca:	e01f      	b.n	8005e0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d01b      	beq.n	8005e0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	4798      	blx	r3
 8005ddc:	e016      	b.n	8005e0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d107      	bne.n	8005dfc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f022 0208 	bic.w	r2, r2, #8
 8005dfa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d003      	beq.n	8005e0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e10:	2220      	movs	r2, #32
 8005e12:	409a      	lsls	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	4013      	ands	r3, r2
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f000 808f 	beq.w	8005f3c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0310 	and.w	r3, r3, #16
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f000 8087 	beq.w	8005f3c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e32:	2220      	movs	r2, #32
 8005e34:	409a      	lsls	r2, r3
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b05      	cmp	r3, #5
 8005e44:	d136      	bne.n	8005eb4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f022 0216 	bic.w	r2, r2, #22
 8005e54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	695a      	ldr	r2, [r3, #20]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d103      	bne.n	8005e76 <HAL_DMA_IRQHandler+0x1da>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d007      	beq.n	8005e86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f022 0208 	bic.w	r2, r2, #8
 8005e84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e8a:	223f      	movs	r2, #63	@ 0x3f
 8005e8c:	409a      	lsls	r2, r3
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d07e      	beq.n	8005fa8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	4798      	blx	r3
        }
        return;
 8005eb2:	e079      	b.n	8005fa8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d01d      	beq.n	8005efe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10d      	bne.n	8005eec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d031      	beq.n	8005f3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	4798      	blx	r3
 8005ee0:	e02c      	b.n	8005f3c <HAL_DMA_IRQHandler+0x2a0>
 8005ee2:	bf00      	nop
 8005ee4:	20000070 	.word	0x20000070
 8005ee8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d023      	beq.n	8005f3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	4798      	blx	r3
 8005efc:	e01e      	b.n	8005f3c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10f      	bne.n	8005f2c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f022 0210 	bic.w	r2, r2, #16
 8005f1a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d003      	beq.n	8005f3c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d032      	beq.n	8005faa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f48:	f003 0301 	and.w	r3, r3, #1
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d022      	beq.n	8005f96 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2205      	movs	r2, #5
 8005f54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f022 0201 	bic.w	r2, r2, #1
 8005f66:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	60bb      	str	r3, [r7, #8]
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d307      	bcc.n	8005f84 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 0301 	and.w	r3, r3, #1
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1f2      	bne.n	8005f68 <HAL_DMA_IRQHandler+0x2cc>
 8005f82:	e000      	b.n	8005f86 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005f84:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d005      	beq.n	8005faa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	4798      	blx	r3
 8005fa6:	e000      	b.n	8005faa <HAL_DMA_IRQHandler+0x30e>
        return;
 8005fa8:	bf00      	nop
    }
  }
}
 8005faa:	3718      	adds	r7, #24
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	607a      	str	r2, [r7, #4]
 8005fbc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005fcc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	2b40      	cmp	r3, #64	@ 0x40
 8005fdc:	d108      	bne.n	8005ff0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005fee:	e007      	b.n	8006000 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68ba      	ldr	r2, [r7, #8]
 8005ff6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	60da      	str	r2, [r3, #12]
}
 8006000:	bf00      	nop
 8006002:	3714      	adds	r7, #20
 8006004:	46bd      	mov	sp, r7
 8006006:	bc80      	pop	{r7}
 8006008:	4770      	bx	lr
	...

0800600c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	b2db      	uxtb	r3, r3
 800601a:	3b10      	subs	r3, #16
 800601c:	4a13      	ldr	r2, [pc, #76]	@ (800606c <DMA_CalcBaseAndBitshift+0x60>)
 800601e:	fba2 2303 	umull	r2, r3, r2, r3
 8006022:	091b      	lsrs	r3, r3, #4
 8006024:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006026:	4a12      	ldr	r2, [pc, #72]	@ (8006070 <DMA_CalcBaseAndBitshift+0x64>)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	4413      	add	r3, r2
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	461a      	mov	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2b03      	cmp	r3, #3
 8006038:	d909      	bls.n	800604e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006042:	f023 0303 	bic.w	r3, r3, #3
 8006046:	1d1a      	adds	r2, r3, #4
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	659a      	str	r2, [r3, #88]	@ 0x58
 800604c:	e007      	b.n	800605e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006056:	f023 0303 	bic.w	r3, r3, #3
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006062:	4618      	mov	r0, r3
 8006064:	3714      	adds	r7, #20
 8006066:	46bd      	mov	sp, r7
 8006068:	bc80      	pop	{r7}
 800606a:	4770      	bx	lr
 800606c:	aaaaaaab 	.word	0xaaaaaaab
 8006070:	080275b0 	.word	0x080275b0

08006074 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800607c:	2300      	movs	r3, #0
 800607e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006084:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d11f      	bne.n	80060ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	2b03      	cmp	r3, #3
 8006092:	d856      	bhi.n	8006142 <DMA_CheckFifoParam+0xce>
 8006094:	a201      	add	r2, pc, #4	@ (adr r2, 800609c <DMA_CheckFifoParam+0x28>)
 8006096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609a:	bf00      	nop
 800609c:	080060ad 	.word	0x080060ad
 80060a0:	080060bf 	.word	0x080060bf
 80060a4:	080060ad 	.word	0x080060ad
 80060a8:	08006143 	.word	0x08006143
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d046      	beq.n	8006146 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060bc:	e043      	b.n	8006146 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060c2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80060c6:	d140      	bne.n	800614a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060cc:	e03d      	b.n	800614a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060d6:	d121      	bne.n	800611c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2b03      	cmp	r3, #3
 80060dc:	d837      	bhi.n	800614e <DMA_CheckFifoParam+0xda>
 80060de:	a201      	add	r2, pc, #4	@ (adr r2, 80060e4 <DMA_CheckFifoParam+0x70>)
 80060e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e4:	080060f5 	.word	0x080060f5
 80060e8:	080060fb 	.word	0x080060fb
 80060ec:	080060f5 	.word	0x080060f5
 80060f0:	0800610d 	.word	0x0800610d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	73fb      	strb	r3, [r7, #15]
      break;
 80060f8:	e030      	b.n	800615c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d025      	beq.n	8006152 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800610a:	e022      	b.n	8006152 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006110:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006114:	d11f      	bne.n	8006156 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800611a:	e01c      	b.n	8006156 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	2b02      	cmp	r3, #2
 8006120:	d903      	bls.n	800612a <DMA_CheckFifoParam+0xb6>
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	2b03      	cmp	r3, #3
 8006126:	d003      	beq.n	8006130 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006128:	e018      	b.n	800615c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	73fb      	strb	r3, [r7, #15]
      break;
 800612e:	e015      	b.n	800615c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006134:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00e      	beq.n	800615a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	73fb      	strb	r3, [r7, #15]
      break;
 8006140:	e00b      	b.n	800615a <DMA_CheckFifoParam+0xe6>
      break;
 8006142:	bf00      	nop
 8006144:	e00a      	b.n	800615c <DMA_CheckFifoParam+0xe8>
      break;
 8006146:	bf00      	nop
 8006148:	e008      	b.n	800615c <DMA_CheckFifoParam+0xe8>
      break;
 800614a:	bf00      	nop
 800614c:	e006      	b.n	800615c <DMA_CheckFifoParam+0xe8>
      break;
 800614e:	bf00      	nop
 8006150:	e004      	b.n	800615c <DMA_CheckFifoParam+0xe8>
      break;
 8006152:	bf00      	nop
 8006154:	e002      	b.n	800615c <DMA_CheckFifoParam+0xe8>
      break;   
 8006156:	bf00      	nop
 8006158:	e000      	b.n	800615c <DMA_CheckFifoParam+0xe8>
      break;
 800615a:	bf00      	nop
    }
  } 
  
  return status; 
 800615c:	7bfb      	ldrb	r3, [r7, #15]
}
 800615e:	4618      	mov	r0, r3
 8006160:	3714      	adds	r7, #20
 8006162:	46bd      	mov	sp, r7
 8006164:	bc80      	pop	{r7}
 8006166:	4770      	bx	lr

08006168 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b088      	sub	sp, #32
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8006170:	2300      	movs	r3, #0
 8006172:	61fb      	str	r3, [r7, #28]
 8006174:	2300      	movs	r3, #0
 8006176:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8006178:	4ba3      	ldr	r3, [pc, #652]	@ (8006408 <HAL_ETH_Init+0x2a0>)
 800617a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 800617c:	2300      	movs	r3, #0
 800617e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8006180:	2300      	movs	r3, #0
 8006182:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d101      	bne.n	800618e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e173      	b.n	8006476 <HAL_ETH_Init+0x30e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006194:	b2db      	uxtb	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d106      	bne.n	80061a8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f003 fee4 	bl	8009f70 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061a8:	2300      	movs	r3, #0
 80061aa:	60bb      	str	r3, [r7, #8]
 80061ac:	4b97      	ldr	r3, [pc, #604]	@ (800640c <HAL_ETH_Init+0x2a4>)
 80061ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061b0:	4a96      	ldr	r2, [pc, #600]	@ (800640c <HAL_ETH_Init+0x2a4>)
 80061b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80061b6:	6453      	str	r3, [r2, #68]	@ 0x44
 80061b8:	4b94      	ldr	r3, [pc, #592]	@ (800640c <HAL_ETH_Init+0x2a4>)
 80061ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061c0:	60bb      	str	r3, [r7, #8]
 80061c2:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80061c4:	4b92      	ldr	r3, [pc, #584]	@ (8006410 <HAL_ETH_Init+0x2a8>)
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	4a91      	ldr	r2, [pc, #580]	@ (8006410 <HAL_ETH_Init+0x2a8>)
 80061ca:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80061ce:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80061d0:	4b8f      	ldr	r3, [pc, #572]	@ (8006410 <HAL_ETH_Init+0x2a8>)
 80061d2:	685a      	ldr	r2, [r3, #4]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a1b      	ldr	r3, [r3, #32]
 80061d8:	498d      	ldr	r1, [pc, #564]	@ (8006410 <HAL_ETH_Init+0x2a8>)
 80061da:	4313      	orrs	r3, r2
 80061dc:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	6812      	ldr	r2, [r2, #0]
 80061ec:	f043 0301 	orr.w	r3, r3, #1
 80061f0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80061f4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80061f6:	f7fe ff33 	bl	8005060 <HAL_GetTick>
 80061fa:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80061fc:	e011      	b.n	8006222 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 80061fe:	f7fe ff2f 	bl	8005060 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800620c:	d909      	bls.n	8006222 <HAL_ETH_Init+0xba>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2203      	movs	r2, #3
 8006212:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e129      	b.n	8006476 <HAL_ETH_Init+0x30e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 0301 	and.w	r3, r3, #1
 8006230:	2b00      	cmp	r3, #0
 8006232:	d1e4      	bne.n	80061fe <HAL_ETH_Init+0x96>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	f023 031c 	bic.w	r3, r3, #28
 8006242:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8006244:	f002 fde2 	bl	8008e0c <HAL_RCC_GetHCLKFreq>
 8006248:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	4a71      	ldr	r2, [pc, #452]	@ (8006414 <HAL_ETH_Init+0x2ac>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d908      	bls.n	8006264 <HAL_ETH_Init+0xfc>
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	4a70      	ldr	r2, [pc, #448]	@ (8006418 <HAL_ETH_Init+0x2b0>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d804      	bhi.n	8006264 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	f043 0308 	orr.w	r3, r3, #8
 8006260:	61fb      	str	r3, [r7, #28]
 8006262:	e01a      	b.n	800629a <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	4a6c      	ldr	r2, [pc, #432]	@ (8006418 <HAL_ETH_Init+0x2b0>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d908      	bls.n	800627e <HAL_ETH_Init+0x116>
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	4a66      	ldr	r2, [pc, #408]	@ (8006408 <HAL_ETH_Init+0x2a0>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d204      	bcs.n	800627e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	f043 030c 	orr.w	r3, r3, #12
 800627a:	61fb      	str	r3, [r7, #28]
 800627c:	e00d      	b.n	800629a <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	4a61      	ldr	r2, [pc, #388]	@ (8006408 <HAL_ETH_Init+0x2a0>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d303      	bcc.n	800628e <HAL_ETH_Init+0x126>
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	4a64      	ldr	r2, [pc, #400]	@ (800641c <HAL_ETH_Init+0x2b4>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d904      	bls.n	8006298 <HAL_ETH_Init+0x130>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else /* ((hclk >= 100000000)&&(hclk < 120000000)) */
  {
    /* CSR Clock Range between 100-120 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	f043 0304 	orr.w	r3, r3, #4
 8006294:	61fb      	str	r3, [r7, #28]
 8006296:	e000      	b.n	800629a <HAL_ETH_Init+0x132>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8006298:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	69fa      	ldr	r2, [r7, #28]
 80062a0:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80062a2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80062a6:	2100      	movs	r1, #0
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 fb8e 	bl	80069ca <HAL_ETH_WritePHYRegister>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00b      	beq.n	80062cc <HAL_ETH_Init+0x164>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80062b8:	6939      	ldr	r1, [r7, #16]
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 fd44 	bl	8006d48 <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e0d4      	b.n	8006476 <HAL_ETH_Init+0x30e>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80062cc:	20ff      	movs	r0, #255	@ 0xff
 80062ce:	f7fe fed1 	bl	8005074 <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	f000 80a2 	beq.w	8006420 <HAL_ETH_Init+0x2b8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80062dc:	f7fe fec0 	bl	8005060 <HAL_GetTick>
 80062e0:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80062e2:	f107 030c 	add.w	r3, r7, #12
 80062e6:	461a      	mov	r2, r3
 80062e8:	2101      	movs	r1, #1
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 fb05 	bl	80068fa <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 80062f0:	f7fe feb6 	bl	8005060 <HAL_GetTick>
 80062f4:	4602      	mov	r2, r0
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062fe:	4293      	cmp	r3, r2
 8006300:	d90f      	bls.n	8006322 <HAL_ETH_Init+0x1ba>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8006306:	6939      	ldr	r1, [r7, #16]
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 fd1d 	bl	8006d48 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        return HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	e0a9      	b.n	8006476 <HAL_ETH_Init+0x30e>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f003 0304 	and.w	r3, r3, #4
 8006328:	2b00      	cmp	r3, #0
 800632a:	d0da      	beq.n	80062e2 <HAL_ETH_Init+0x17a>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800632c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006330:	2100      	movs	r1, #0
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fb49 	bl	80069ca <HAL_ETH_WritePHYRegister>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00b      	beq.n	8006356 <HAL_ETH_Init+0x1ee>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8006342:	6939      	ldr	r1, [r7, #16]
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 fcff 	bl	8006d48 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e08f      	b.n	8006476 <HAL_ETH_Init+0x30e>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 8006356:	f7fe fe83 	bl	8005060 <HAL_GetTick>
 800635a:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800635c:	f107 030c 	add.w	r3, r7, #12
 8006360:	461a      	mov	r2, r3
 8006362:	2101      	movs	r1, #1
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 fac8 	bl	80068fa <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800636a:	f7fe fe79 	bl	8005060 <HAL_GetTick>
 800636e:	4602      	mov	r2, r0
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006378:	4293      	cmp	r3, r2
 800637a:	d90f      	bls.n	800639c <HAL_ETH_Init+0x234>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8006380:	6939      	ldr	r1, [r7, #16]
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 fce0 	bl	8006d48 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        return HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	e06c      	b.n	8006476 <HAL_ETH_Init+0x30e>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f003 0320 	and.w	r3, r3, #32
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d0da      	beq.n	800635c <HAL_ETH_Init+0x1f4>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80063a6:	f107 030c 	add.w	r3, r7, #12
 80063aa:	461a      	mov	r2, r3
 80063ac:	2110      	movs	r1, #16
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 faa3 	bl	80068fa <HAL_ETH_ReadPHYRegister>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00b      	beq.n	80063d2 <HAL_ETH_Init+0x26a>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80063be:	6939      	ldr	r1, [r7, #16]
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 fcc1 	bl	8006d48 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e051      	b.n	8006476 <HAL_ETH_Init+0x30e>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f003 0304 	and.w	r3, r3, #4
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d004      	beq.n	80063e6 <HAL_ETH_Init+0x27e>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80063e2:	60da      	str	r2, [r3, #12]
 80063e4:	e002      	b.n	80063ec <HAL_ETH_Init+0x284>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f003 0302 	and.w	r3, r3, #2
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d003      	beq.n	80063fe <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	609a      	str	r2, [r3, #8]
 80063fc:	e032      	b.n	8006464 <HAL_ETH_Init+0x2fc>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006404:	609a      	str	r2, [r3, #8]
 8006406:	e02d      	b.n	8006464 <HAL_ETH_Init+0x2fc>
 8006408:	03938700 	.word	0x03938700
 800640c:	40023800 	.word	0x40023800
 8006410:	40013800 	.word	0x40013800
 8006414:	01312cff 	.word	0x01312cff
 8006418:	02160ebf 	.word	0x02160ebf
 800641c:	05f5e0ff 	.word	0x05f5e0ff
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	08db      	lsrs	r3, r3, #3
 8006426:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	085b      	lsrs	r3, r3, #1
 800642e:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8006430:	4313      	orrs	r3, r2
 8006432:	b29b      	uxth	r3, r3
 8006434:	461a      	mov	r2, r3
 8006436:	2100      	movs	r1, #0
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 fac6 	bl	80069ca <HAL_ETH_WritePHYRegister>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00b      	beq.n	800645c <HAL_ETH_Init+0x2f4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8006448:	6939      	ldr	r1, [r7, #16]
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 fc7c 	bl	8006d48 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e00c      	b.n	8006476 <HAL_ETH_Init+0x30e>
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800645c:	f640 70ff 	movw	r0, #4095	@ 0xfff
 8006460:	f7fe fe08 	bl	8005074 <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8006464:	6939      	ldr	r1, [r7, #16]
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fc6e 	bl	8006d48 <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3720      	adds	r7, #32
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop

08006480 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8006480:	b480      	push	{r7}
 8006482:	b087      	sub	sp, #28
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
 800648c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800648e:	2300      	movs	r3, #0
 8006490:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006498:	2b01      	cmp	r3, #1
 800649a:	d101      	bne.n	80064a0 <HAL_ETH_DMATxDescListInit+0x20>
 800649c:	2302      	movs	r3, #2
 800649e:	e051      	b.n	8006544 <HAL_ETH_DMATxDescListInit+0xc4>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2202      	movs	r2, #2
 80064ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0U; i < TxBuffCount; i++)
 80064b6:	2300      	movs	r3, #0
 80064b8:	617b      	str	r3, [r7, #20]
 80064ba:	e030      	b.n	800651e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	015b      	lsls	r3, r3, #5
 80064c0:	68ba      	ldr	r2, [r7, #8]
 80064c2:	4413      	add	r3, r2
 80064c4:	613b      	str	r3, [r7, #16]

    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80064cc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80064d4:	fb02 f303 	mul.w	r3, r2, r3
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	4413      	add	r3, r2
 80064dc:	461a      	mov	r2, r3
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	609a      	str	r2, [r3, #8]

    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	69db      	ldr	r3, [r3, #28]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d105      	bne.n	80064f6 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	601a      	str	r2, [r3, #0]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (TxBuffCount - 1))
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	3b01      	subs	r3, #1
 80064fa:	697a      	ldr	r2, [r7, #20]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d208      	bcs.n	8006512 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1);
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	3301      	adds	r3, #1
 8006504:	015b      	lsls	r3, r3, #5
 8006506:	68ba      	ldr	r2, [r7, #8]
 8006508:	4413      	add	r3, r2
 800650a:	461a      	mov	r2, r3
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	60da      	str	r2, [r3, #12]
 8006510:	e002      	b.n	8006518 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;
 8006512:	68ba      	ldr	r2, [r7, #8]
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < TxBuffCount; i++)
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	3301      	adds	r3, #1
 800651c:	617b      	str	r3, [r7, #20]
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	429a      	cmp	r2, r3
 8006524:	d3ca      	bcc.n	80064bc <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }

  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006530:	6113      	str	r3, [r2, #16]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2201      	movs	r2, #1
 8006536:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	371c      	adds	r7, #28
 8006548:	46bd      	mov	sp, r7
 800654a:	bc80      	pop	{r7}
 800654c:	4770      	bx	lr

0800654e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800654e:	b480      	push	{r7}
 8006550:	b087      	sub	sp, #28
 8006552:	af00      	add	r7, sp, #0
 8006554:	60f8      	str	r0, [r7, #12]
 8006556:	60b9      	str	r1, [r7, #8]
 8006558:	607a      	str	r2, [r7, #4]
 800655a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800655c:	2300      	movs	r3, #0
 800655e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006566:	2b01      	cmp	r3, #1
 8006568:	d101      	bne.n	800656e <HAL_ETH_DMARxDescListInit+0x20>
 800656a:	2302      	movs	r3, #2
 800656c:	e055      	b.n	800661a <HAL_ETH_DMARxDescListInit+0xcc>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2201      	movs	r2, #1
 8006572:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2202      	movs	r2, #2
 800657a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	68ba      	ldr	r2, [r7, #8]
 8006582:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Fill each DMARxDesc descriptor with the right values */
  for (i = 0U; i < RxBuffCount; i++)
 8006584:	2300      	movs	r3, #0
 8006586:	617b      	str	r3, [r7, #20]
 8006588:	e034      	b.n	80065f4 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab + i;
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	015b      	lsls	r3, r3, #5
 800658e:	68ba      	ldr	r2, [r7, #8]
 8006590:	4413      	add	r3, r2
 8006592:	613b      	str	r3, [r7, #16]

    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800659a:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 80065a2:	605a      	str	r2, [r3, #4]

    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80065aa:	fb02 f303 	mul.w	r3, r2, r3
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	4413      	add	r3, r2
 80065b2:	461a      	mov	r2, r3
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	609a      	str	r2, [r3, #8]

    if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d105      	bne.n	80065cc <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	605a      	str	r2, [r3, #4]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (RxBuffCount - 1U))
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	3b01      	subs	r3, #1
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d208      	bcs.n	80065e8 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	3301      	adds	r3, #1
 80065da:	015b      	lsls	r3, r3, #5
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	4413      	add	r3, r2
 80065e0:	461a      	mov	r2, r3
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	60da      	str	r2, [r3, #12]
 80065e6:	e002      	b.n	80065ee <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab);
 80065e8:	68ba      	ldr	r2, [r7, #8]
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < RxBuffCount; i++)
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	3301      	adds	r3, #1
 80065f2:	617b      	str	r3, [r7, #20]
 80065f4:	697a      	ldr	r2, [r7, #20]
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d3c6      	bcc.n	800658a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }

  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006606:	60d3      	str	r3, [r2, #12]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	371c      	adds	r7, #28
 800661e:	46bd      	mov	sp, r7
 8006620:	bc80      	pop	{r7}
 8006622:	4770      	bx	lr

08006624 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8006624:	b480      	push	{r7}
 8006626:	b087      	sub	sp, #28
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800662e:	2300      	movs	r3, #0
 8006630:	617b      	str	r3, [r7, #20]
 8006632:	2300      	movs	r3, #0
 8006634:	60fb      	str	r3, [r7, #12]
 8006636:	2300      	movs	r3, #0
 8006638:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(heth);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006640:	2b01      	cmp	r3, #1
 8006642:	d101      	bne.n	8006648 <HAL_ETH_TransmitFrame+0x24>
 8006644:	2302      	movs	r3, #2
 8006646:	e0cc      	b.n	80067e2 <HAL_ETH_TransmitFrame+0x1be>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2202      	movs	r2, #2
 8006654:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  if (FrameLength == 0U)
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d109      	bne.n	8006672 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2201      	movs	r2, #1
 8006662:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    return  HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e0b7      	b.n	80067e2 <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if (((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	da09      	bge.n	8006690 <HAL_ETH_TransmitFrame+0x6c>
  {
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2212      	movs	r2, #18
 8006680:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e0a8      	b.n	80067e2 <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8006696:	4293      	cmp	r3, r2
 8006698:	d915      	bls.n	80066c6 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength / ETH_TX_BUF_SIZE;
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	4a53      	ldr	r2, [pc, #332]	@ (80067ec <HAL_ETH_TransmitFrame+0x1c8>)
 800669e:	fba2 2303 	umull	r2, r3, r2, r3
 80066a2:	0a9b      	lsrs	r3, r3, #10
 80066a4:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE)
 80066a6:	683a      	ldr	r2, [r7, #0]
 80066a8:	4b50      	ldr	r3, [pc, #320]	@ (80067ec <HAL_ETH_TransmitFrame+0x1c8>)
 80066aa:	fba3 1302 	umull	r1, r3, r3, r2
 80066ae:	0a9b      	lsrs	r3, r3, #10
 80066b0:	f240 51f4 	movw	r1, #1524	@ 0x5f4
 80066b4:	fb01 f303 	mul.w	r3, r1, r3
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d005      	beq.n	80066ca <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	3301      	adds	r3, #1
 80066c2:	617b      	str	r3, [r7, #20]
 80066c4:	e001      	b.n	80066ca <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else
  {
    bufcount = 1U;
 80066c6:	2301      	movs	r3, #1
 80066c8:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d11c      	bne.n	800670a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066da:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
 80066de:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066e4:	683a      	ldr	r2, [r7, #0]
 80066e6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80066ea:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80066fa:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	461a      	mov	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006708:	e04b      	b.n	80067a2 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i = 0U; i < bufcount; i++)
 800670a:	2300      	movs	r3, #0
 800670c:	613b      	str	r3, [r7, #16]
 800670e:	e044      	b.n	800679a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800671a:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800671e:	601a      	str	r2, [r3, #0]

      if (i == 0U)
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d107      	bne.n	8006736 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006730:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8006734:	601a      	str	r2, [r3, #0]
      }

      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800673a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800673e:	605a      	str	r2, [r3, #4]

      if (i == (bufcount - 1U))
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	3b01      	subs	r3, #1
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	429a      	cmp	r2, r3
 8006748:	d116      	bne.n	8006778 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006754:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8006758:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount - 1U) * ETH_TX_BUF_SIZE;
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	4a24      	ldr	r2, [pc, #144]	@ (80067f0 <HAL_ETH_TransmitFrame+0x1cc>)
 800675e:	fb03 f202 	mul.w	r2, r3, r2
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	4413      	add	r3, r2
 8006766:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 800676a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8006776:	605a      	str	r2, [r3, #4]
      }

      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006782:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006786:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	461a      	mov	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	62da      	str	r2, [r3, #44]	@ 0x2c
    for (i = 0U; i < bufcount; i++)
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	3301      	adds	r3, #1
 8006798:	613b      	str	r3, [r7, #16]
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d3b6      	bcc.n	8006710 <HAL_ETH_TransmitFrame+0xec>
    }
  }

  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	f003 0304 	and.w	r3, r3, #4
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00d      	beq.n	80067d0 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067bc:	461a      	mov	r2, r3
 80067be:	2304      	movs	r3, #4
 80067c0:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067ca:	461a      	mov	r2, r3
 80067cc:	2300      	movs	r3, #0
 80067ce:	6053      	str	r3, [r2, #4]
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	371c      	adds	r7, #28
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bc80      	pop	{r7}
 80067ea:	4770      	bx	lr
 80067ec:	ac02b00b 	.word	0xac02b00b
 80067f0:	fffffa0c 	.word	0xfffffa0c

080067f4 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 80067fc:	2300      	movs	r3, #0
 80067fe:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006806:	2b01      	cmp	r3, #1
 8006808:	d101      	bne.n	800680e <HAL_ETH_GetReceivedFrame+0x1a>
 800680a:	2302      	movs	r3, #2
 800680c:	e070      	b.n	80068f0 <HAL_ETH_GetReceivedFrame+0xfc>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2202      	movs	r2, #2
 800681a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	db5a      	blt.n	80068de <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if (((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006832:	2b00      	cmp	r3, #0
 8006834:	d030      	beq.n	8006898 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800683a:	1c5a      	adds	r2, r3, #1
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006844:	2b01      	cmp	r3, #1
 8006846:	d103      	bne.n	8006850 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	0c1b      	lsrs	r3, r3, #16
 8006860:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006864:	3b04      	subs	r3, #4
 8006866:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006872:	689a      	ldr	r2, [r3, #8]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	641a      	str	r2, [r3, #64]	@ 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)((heth->RxDesc)->Buffer2NextDescAddr);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	461a      	mov	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      /* Return function status */
      return HAL_OK;
 8006894:	2300      	movs	r3, #0
 8006896:	e02b      	b.n	80068f0 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d010      	beq.n	80068c8 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	631a      	str	r2, [r3, #48]	@ 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	635a      	str	r2, [r3, #52]	@ 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	461a      	mov	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80068c6:	e00a      	b.n	80068de <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */
    else
    {
      (heth->RxFrameInfos).SegCount++;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068cc:	1c5a      	adds	r2, r3, #1
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	461a      	mov	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3714      	adds	r7, #20
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bc80      	pop	{r7}
 80068f8:	4770      	bx	lr

080068fa <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param  RegValue PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b086      	sub	sp, #24
 80068fe:	af00      	add	r7, sp, #0
 8006900:	60f8      	str	r0, [r7, #12]
 8006902:	460b      	mov	r3, r1
 8006904:	607a      	str	r2, [r7, #4]
 8006906:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8006908:	2300      	movs	r3, #0
 800690a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800690c:	2300      	movs	r3, #0
 800690e:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006916:	b2db      	uxtb	r3, r3
 8006918:	2b82      	cmp	r3, #130	@ 0x82
 800691a:	d101      	bne.n	8006920 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800691c:	2302      	movs	r3, #2
 800691e:	e050      	b.n	80069c2 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2282      	movs	r2, #130	@ 0x82
 8006924:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	f003 031c 	and.w	r3, r3, #28
 8006936:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	8a1b      	ldrh	r3, [r3, #16]
 800693c:	02db      	lsls	r3, r3, #11
 800693e:	b29b      	uxth	r3, r3
 8006940:	697a      	ldr	r2, [r7, #20]
 8006942:	4313      	orrs	r3, r2
 8006944:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8006946:	897b      	ldrh	r3, [r7, #10]
 8006948:	019b      	lsls	r3, r3, #6
 800694a:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	4313      	orrs	r3, r2
 8006952:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	f023 0302 	bic.w	r3, r3, #2
 800695a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	f043 0301 	orr.w	r3, r3, #1
 8006962:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800696c:	f7fe fb78 	bl	8005060 <HAL_GetTick>
 8006970:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8006972:	e015      	b.n	80069a0 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8006974:	f7fe fb74 	bl	8005060 <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006982:	d309      	bcc.n	8006998 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      return HAL_TIMEOUT;
 8006994:	2303      	movs	r3, #3
 8006996:	e014      	b.n	80069c2 <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	f003 0301 	and.w	r3, r3, #1
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1e4      	bne.n	8006974 <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	695b      	ldr	r3, [r3, #20]
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	461a      	mov	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return HAL_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3718      	adds	r7, #24
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b086      	sub	sp, #24
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	60f8      	str	r0, [r7, #12]
 80069d2:	460b      	mov	r3, r1
 80069d4:	607a      	str	r2, [r7, #4]
 80069d6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80069d8:	2300      	movs	r3, #0
 80069da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80069dc:	2300      	movs	r3, #0
 80069de:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	2b42      	cmp	r3, #66	@ 0x42
 80069ea:	d101      	bne.n	80069f0 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80069ec:	2302      	movs	r3, #2
 80069ee:	e04e      	b.n	8006a8e <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2242      	movs	r2, #66	@ 0x42
 80069f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	f003 031c 	and.w	r3, r3, #28
 8006a06:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	8a1b      	ldrh	r3, [r3, #16]
 8006a0c:	02db      	lsls	r3, r3, #11
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	697a      	ldr	r2, [r7, #20]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8006a16:	897b      	ldrh	r3, [r7, #10]
 8006a18:	019b      	lsls	r3, r3, #6
 8006a1a:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8006a1e:	697a      	ldr	r2, [r7, #20]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	f043 0302 	orr.w	r3, r3, #2
 8006a2a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	f043 0301 	orr.w	r3, r3, #1
 8006a32:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	697a      	ldr	r2, [r7, #20]
 8006a44:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a46:	f7fe fb0b 	bl	8005060 <HAL_GetTick>
 8006a4a:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8006a4c:	e015      	b.n	8006a7a <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8006a4e:	f7fe fb07 	bl	8005060 <HAL_GetTick>
 8006a52:	4602      	mov	r2, r0
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a5c:	d309      	bcc.n	8006a72 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2201      	movs	r2, #1
 8006a62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      return HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e00d      	b.n	8006a8e <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	f003 0301 	and.w	r3, r3, #1
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1e4      	bne.n	8006a4e <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3718      	adds	r7, #24
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <HAL_ETH_Start>:
 * @param  heth pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b082      	sub	sp, #8
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d101      	bne.n	8006aac <HAL_ETH_Start+0x16>
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	e01f      	b.n	8006aec <HAL_ETH_Start+0x56>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 fb3f 	bl	8007140 <ETH_MACTransmissionEnable>

  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 fb76 	bl	80071b4 <ETH_MACReceptionEnable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 fc01 	bl	80072d0 <ETH_FlushTransmitFIFO>

  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 fbaa 	bl	8007228 <ETH_DMATransmissionEnable>

  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 fbd1 	bl	800727c <ETH_DMAReceptionEnable>

  /* Set the ETH state to READY*/
  heth->State = HAL_ETH_STATE_READY;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2201      	movs	r2, #1
 8006ade:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3708      	adds	r7, #8
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d101      	bne.n	8006b0a <HAL_ETH_Stop+0x16>
 8006b06:	2302      	movs	r3, #2
 8006b08:	e01f      	b.n	8006b4a <HAL_ETH_Stop+0x56>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2202      	movs	r2, #2
 8006b16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 fb99 	bl	8007252 <ETH_DMATransmissionDisable>

  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 fbc0 	bl	80072a6 <ETH_DMAReceptionDisable>

  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 fb61 	bl	80071ee <ETH_MACReceptionDisable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 fbcf 	bl	80072d0 <ETH_FlushTransmitFIFO>

  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 fb21 	bl	800717a <ETH_MACTransmissionDisable>

  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3708      	adds	r7, #8
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
	...

08006b54 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d101      	bne.n	8006b70 <HAL_ETH_ConfigMAC+0x1c>
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	e0e4      	b.n	8006d3a <HAL_ETH_ConfigMAC+0x1e6>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2202      	movs	r2, #2
 8006b7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

  if (macconf != NULL)
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f000 80b1 	beq.w	8006cea <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));

    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	4b6c      	ldr	r3, [pc, #432]	@ (8006d44 <HAL_ETH_ConfigMAC+0x1f0>)
 8006b94:	4013      	ands	r3, r2
 8006b96:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	681a      	ldr	r2, [r3, #0]
                          macconf->Jabber |
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8006ba0:	431a      	orrs	r2, r3
                          macconf->InterFrameGap |
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	689b      	ldr	r3, [r3, #8]
                          macconf->Jabber |
 8006ba6:	431a      	orrs	r2, r3
                          macconf->CarrierSense |
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	68db      	ldr	r3, [r3, #12]
                          macconf->InterFrameGap |
 8006bac:	431a      	orrs	r2, r3
                          (heth->Init).Speed |
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	689b      	ldr	r3, [r3, #8]
                          macconf->CarrierSense |
 8006bb2:	431a      	orrs	r2, r3
                          macconf->ReceiveOwn |
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	691b      	ldr	r3, [r3, #16]
                          (heth->Init).Speed |
 8006bb8:	431a      	orrs	r2, r3
                          macconf->LoopbackMode |
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	695b      	ldr	r3, [r3, #20]
                          macconf->ReceiveOwn |
 8006bbe:	431a      	orrs	r2, r3
                          (heth->Init).DuplexMode |
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	68db      	ldr	r3, [r3, #12]
                          macconf->LoopbackMode |
 8006bc4:	431a      	orrs	r2, r3
                          macconf->ChecksumOffload |
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	699b      	ldr	r3, [r3, #24]
                          (heth->Init).DuplexMode |
 8006bca:	431a      	orrs	r2, r3
                          macconf->RetryTransmission |
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	69db      	ldr	r3, [r3, #28]
                          macconf->ChecksumOffload |
 8006bd0:	431a      	orrs	r2, r3
                          macconf->AutomaticPadCRCStrip |
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
                          macconf->RetryTransmission |
 8006bd6:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          macconf->AutomaticPadCRCStrip |
 8006bdc:	431a      	orrs	r2, r3
                          macconf->DeferralCheck);
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          macconf->BackOffLimit |
 8006be2:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8006bfa:	2001      	movs	r0, #1
 8006bfc:	f7fe fa3a 	bl	8005074 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	601a      	str	r2, [r3, #0]

    /*----------------------- ETHERNET MACFFR Configuration --------------------*/
    /* Write to ETHERNET MACFFR */
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
                                          macconf->SourceAddrFilter |
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8006c10:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                                          macconf->SourceAddrFilter |
 8006c16:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception |
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                          macconf->PassControlFrames |
 8006c1c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                          macconf->BroadcastFramesReception |
 8006c22:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                                          macconf->DestinationAddrFilter |
 8006c28:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                                          macconf->PromiscuousMode |
 8006c2e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8006c3a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8006c3c:	605a      	str	r2, [r3, #4]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFFR;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8006c46:	2001      	movs	r0, #1
 8006c48:	f7fe fa14 	bl	8005074 <HAL_Delay>
    (heth->Instance)->MACFFR = tmpreg1;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	605a      	str	r2, [r3, #4]

    /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
    /* Write to ETHERNET MACHTHR */
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	683a      	ldr	r2, [r7, #0]
 8006c5a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006c5c:	609a      	str	r2, [r3, #8]

    /* Write to ETHERNET MACHTLR */
    (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	683a      	ldr	r2, [r7, #0]
 8006c64:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006c66:	60da      	str	r2, [r3, #12]
    /*----------------------- ETHERNET MACFCR Configuration --------------------*/

    /* Get the ETHERNET MACFCR value */
    tmpreg1 = (heth->Instance)->MACFCR;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	60fb      	str	r3, [r7, #12]
    /* Clear xx bits */
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8006c76:	4013      	ands	r3, r2
 8006c78:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c7e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8006c84:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                          macconf->ZeroQuantaPause |
 8006c8a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect |
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                          macconf->PauseLowThreshold |
 8006c90:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
                          macconf->UnicastPauseFrameDetect |
 8006c96:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl);
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                          macconf->ReceiveFlowControl |
 8006c9c:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACFCR */
    (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	619a      	str	r2, [r3, #24]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFCR;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	699b      	ldr	r3, [r3, #24]
 8006cb2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8006cb4:	2001      	movs	r0, #1
 8006cb6:	f7fe f9dd 	bl	8005074 <HAL_Delay>
    (heth->Instance)->MACFCR = tmpreg1;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	619a      	str	r2, [r3, #24]

    /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
                                             macconf->VLANTagIdentifier);
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	430a      	orrs	r2, r1
 8006cd0:	61da      	str	r2, [r3, #28]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	69db      	ldr	r3, [r3, #28]
 8006cd8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8006cda:	2001      	movs	r0, #1
 8006cdc:	f7fe f9ca 	bl	8005074 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	61da      	str	r2, [r3, #28]
 8006ce8:	e01e      	b.n	8006d28 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	60fb      	str	r3, [r7, #12]

    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8006cf8:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	689a      	ldr	r2, [r3, #8]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8006d1a:	2001      	movs	r0, #1
 8006d1c:	f7fe f9aa 	bl	8005074 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	601a      	str	r2, [r3, #0]
  }

  /* Set the ETH state to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3710      	adds	r7, #16
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop
 8006d44:	ff20810f 	.word	0xff20810f

08006d48 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b0b0      	sub	sp, #192	@ 0xc0
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8006d52:	2300      	movs	r3, #0
 8006d54:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d007      	beq.n	8006d6e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006d64:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006d6c:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	64bb      	str	r3, [r7, #72]	@ 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8006d72:	2300      	movs	r3, #0
 8006d74:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8006d76:	2300      	movs	r3, #0
 8006d78:	653b      	str	r3, [r7, #80]	@ 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	657b      	str	r3, [r7, #84]	@ 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	65bb      	str	r3, [r7, #88]	@ 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8006d82:	2300      	movs	r3, #0
 8006d84:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	69db      	ldr	r3, [r3, #28]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d103      	bne.n	8006d96 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8006d8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d92:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d94:	e001      	b.n	8006d9a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8006d96:	2300      	movs	r3, #0
 8006d98:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8006d9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006d9e:	667b      	str	r3, [r7, #100]	@ 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8006da0:	2300      	movs	r3, #0
 8006da2:	66bb      	str	r3, [r7, #104]	@ 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8006da4:	2300      	movs	r3, #0
 8006da6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8006da8:	2300      	movs	r3, #0
 8006daa:	673b      	str	r3, [r7, #112]	@ 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8006dac:	2300      	movs	r3, #0
 8006dae:	677b      	str	r3, [r7, #116]	@ 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8006db0:	2300      	movs	r3, #0
 8006db2:	67bb      	str	r3, [r7, #120]	@ 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8006db4:	2340      	movs	r3, #64	@ 0x40
 8006db6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8006db8:	2300      	movs	r3, #0
 8006dba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  macinit.HashTableHigh = 0x0U;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  macinit.HashTableLow = 0x0U;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  macinit.PauseTime = 0x0U;
 8006de2:	2300      	movs	r3, #0
 8006de4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8006de8:	2380      	movs	r3, #128	@ 0x80
 8006dea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8006dee:	2300      	movs	r3, #0
 8006df0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8006df4:	2300      	movs	r3, #0
 8006df6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8006e00:	2300      	movs	r3, #0
 8006e02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8006e06:	2300      	movs	r3, #0
 8006e08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8006e1c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8006e20:	4baa      	ldr	r3, [pc, #680]	@ (80070cc <ETH_MACDMAConfig+0x384>)
 8006e22:	4013      	ands	r3, r2
 8006e24:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8006e28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
                        macinit.Jabber |
 8006e2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8006e2c:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 8006e2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
                        macinit.Jabber |
 8006e30:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 8006e32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
                        macinit.InterFrameGap |
 8006e34:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 8006e3a:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 8006e3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
                        (heth->Init).Speed |
 8006e3e:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 8006e40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
                        macinit.ReceiveOwn |
 8006e42:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 8006e48:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 8006e4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
                        (heth->Init).DuplexMode |
 8006e4c:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 8006e4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
                        macinit.ChecksumOffload |
 8006e50:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 8006e52:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
                        macinit.RetryTransmission |
 8006e54:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 8006e56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
                        macinit.AutomaticPadCRCStrip |
 8006e58:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 8006e5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
                        macinit.BackOffLimit |
 8006e5c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8006e5e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8006e62:	4313      	orrs	r3, r2
 8006e64:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8006e70:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006e7c:	2001      	movs	r0, #1
 8006e7e:	f7fe f8f9 	bl	8005074 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8006e8a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8006e8c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
                                        macinit.SourceAddrFilter |
 8006e8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8006e90:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8006e92:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
                                        macinit.SourceAddrFilter |
 8006e94:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 8006e96:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
                                        macinit.PassControlFrames |
 8006e9a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8006e9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
                                        macinit.BroadcastFramesReception |
 8006ea0:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8006ea2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
                                        macinit.DestinationAddrFilter |
 8006ea6:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8006ea8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
                                        macinit.PromiscuousMode |
 8006eac:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8006eb0:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8006eb8:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8006eba:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006ec6:	2001      	movs	r0, #1
 8006ec8:	f7fe f8d4 	bl	8005074 <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8006ed4:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006ede:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8006ee8:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	699b      	ldr	r3, [r3, #24]
 8006ef0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8006ef4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8006ef8:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8006efc:	4013      	ands	r3, r2
 8006efe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8006f02:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006f06:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8006f08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8006f0c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8006f0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                        macinit.ZeroQuantaPause |
 8006f12:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 8006f14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
                        macinit.PauseLowThreshold |
 8006f18:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8006f1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
                        macinit.UnicastPauseFrameDetect |
 8006f1e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 8006f20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
                        macinit.ReceiveFlowControl |
 8006f24:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8006f26:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8006f38:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006f44:	2001      	movs	r0, #1
 8006f46:	f7fe f895 	bl	8005074 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8006f52:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8006f54:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
                                           macinit.VLANTagIdentifier);
 8006f58:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	430a      	orrs	r2, r1
 8006f62:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	69db      	ldr	r3, [r3, #28]
 8006f6a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006f6e:	2001      	movs	r0, #1
 8006f70:	f7fe f880 	bl	8005074 <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8006f7c:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	60bb      	str	r3, [r7, #8]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8006f82:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006f86:	60fb      	str	r3, [r7, #12]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	613b      	str	r3, [r7, #16]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 8006f8c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8006f90:	617b      	str	r3, [r7, #20]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8006f92:	2300      	movs	r3, #0
 8006f94:	61bb      	str	r3, [r7, #24]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8006f96:	2300      	movs	r3, #0
 8006f98:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	623b      	str	r3, [r7, #32]
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	627b      	str	r3, [r7, #36]	@ 0x24
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8006fa2:	2304      	movs	r3, #4
 8006fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8006fa6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8006fac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006fb0:	633b      	str	r3, [r7, #48]	@ 0x30
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8006fb2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006fb6:	637b      	str	r3, [r7, #52]	@ 0x34
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006fb8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006fbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8006fbe:	2380      	movs	r3, #128	@ 0x80
 8006fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	643b      	str	r3, [r7, #64]	@ 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8006fd8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8006fdc:	4b3c      	ldr	r3, [pc, #240]	@ (80070d0 <ETH_MACDMAConfig+0x388>)
 8006fde:	4013      	ands	r3, r2
 8006fe0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8006fe4:	68ba      	ldr	r2, [r7, #8]
                        dmainit.ReceiveStoreForward |
 8006fe6:	68fb      	ldr	r3, [r7, #12]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8006fe8:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 8006fea:	693b      	ldr	r3, [r7, #16]
                        dmainit.ReceiveStoreForward |
 8006fec:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 8006fee:	697b      	ldr	r3, [r7, #20]
                        dmainit.FlushReceivedFrame |
 8006ff0:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 8006ff2:	69bb      	ldr	r3, [r7, #24]
                        dmainit.TransmitStoreForward |
 8006ff4:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 8006ff6:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitThresholdControl |
 8006ff8:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 8006ffa:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.ForwardErrorFrames |
 8006ffc:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 8006ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                        dmainit.ForwardUndersizedGoodFrames |
 8007000:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 8007002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
                        dmainit.ReceiveThresholdControl |
 8007004:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8007006:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800700a:	4313      	orrs	r3, r2
 800700c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007018:	461a      	mov	r2, r3
 800701a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800701e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800702e:	2001      	movs	r0, #1
 8007030:	f7fe f820 	bl	8005074 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800703c:	461a      	mov	r2, r3
 800703e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007042:	6193      	str	r3, [r2, #24]
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8007044:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
                                        dmainit.FixedBurst |
 8007046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8007048:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800704a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
                                        dmainit.FixedBurst |
 800704c:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 800704e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8007050:	431a      	orrs	r2, r3
                                        dmainit.EnhancedDescriptorFormat |
 8007052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
                                        dmainit.TxDMABurstLength |
 8007054:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 8007056:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007058:	009b      	lsls	r3, r3, #2
                                        dmainit.EnhancedDescriptorFormat |
 800705a:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 800705c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 800705e:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	6812      	ldr	r2, [r2, #0]
 8007064:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007068:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800706c:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800707c:	2001      	movs	r0, #1
 800707e:	f7fd fff9 	bl	8005074 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800708a:	461a      	mov	r2, r3
 800708c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007090:	6013      	str	r3, [r2, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	699b      	ldr	r3, [r3, #24]
 8007096:	2b01      	cmp	r3, #1
 8007098:	d10d      	bne.n	80070b6 <ETH_MACDMAConfig+0x36e>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070a2:	69db      	ldr	r3, [r3, #28]
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	6812      	ldr	r2, [r2, #0]
 80070a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80070b4:	61d3      	str	r3, [r2, #28]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	695b      	ldr	r3, [r3, #20]
 80070ba:	461a      	mov	r2, r3
 80070bc:	2100      	movs	r1, #0
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f808 	bl	80070d4 <ETH_MACAddressConfig>
}
 80070c4:	bf00      	nop
 80070c6:	37c0      	adds	r7, #192	@ 0xc0
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	ff20810f 	.word	0xff20810f
 80070d0:	f8de3f23 	.word	0xf8de3f23

080070d4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b087      	sub	sp, #28
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	3305      	adds	r3, #5
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	021b      	lsls	r3, r3, #8
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	3204      	adds	r2, #4
 80070ec:	7812      	ldrb	r2, [r2, #0]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	4b10      	ldr	r3, [pc, #64]	@ (8007138 <ETH_MACAddressConfig+0x64>)
 80070f6:	4413      	add	r3, r2
 80070f8:	461a      	mov	r2, r3
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	3303      	adds	r3, #3
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	061a      	lsls	r2, r3, #24
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	3302      	adds	r3, #2
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	041b      	lsls	r3, r3, #16
 800710e:	431a      	orrs	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	3301      	adds	r3, #1
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	021b      	lsls	r3, r3, #8
 8007118:	4313      	orrs	r3, r2
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	7812      	ldrb	r2, [r2, #0]
 800711e:	4313      	orrs	r3, r2
 8007120:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8007122:	68ba      	ldr	r2, [r7, #8]
 8007124:	4b05      	ldr	r3, [pc, #20]	@ (800713c <ETH_MACAddressConfig+0x68>)
 8007126:	4413      	add	r3, r2
 8007128:	461a      	mov	r2, r3
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	6013      	str	r3, [r2, #0]
}
 800712e:	bf00      	nop
 8007130:	371c      	adds	r7, #28
 8007132:	46bd      	mov	sp, r7
 8007134:	bc80      	pop	{r7}
 8007136:	4770      	bx	lr
 8007138:	40028040 	.word	0x40028040
 800713c:	40028044 	.word	0x40028044

08007140 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8007148:	2300      	movs	r3, #0
 800714a:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f042 0208 	orr.w	r2, r2, #8
 800715a:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8007164:	2001      	movs	r0, #1
 8007166:	f000 f8d9 	bl	800731c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	601a      	str	r2, [r3, #0]
}
 8007172:	bf00      	nop
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b084      	sub	sp, #16
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8007182:	2300      	movs	r3, #0
 8007184:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f022 0208 	bic.w	r2, r2, #8
 8007194:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800719e:	2001      	movs	r0, #1
 80071a0:	f000 f8bc 	bl	800731c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	601a      	str	r2, [r3, #0]
}
 80071ac:	bf00      	nop
 80071ae:	3710      	adds	r7, #16
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80071bc:	2300      	movs	r3, #0
 80071be:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f042 0204 	orr.w	r2, r2, #4
 80071ce:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80071d8:	2001      	movs	r0, #1
 80071da:	f000 f89f 	bl	800731c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	601a      	str	r2, [r3, #0]
}
 80071e6:	bf00      	nop
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b084      	sub	sp, #16
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80071f6:	2300      	movs	r3, #0
 80071f8:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f022 0204 	bic.w	r2, r2, #4
 8007208:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8007212:	2001      	movs	r0, #1
 8007214:	f000 f882 	bl	800731c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	601a      	str	r2, [r3, #0]
}
 8007220:	bf00      	nop
 8007222:	3710      	adds	r7, #16
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007238:	699b      	ldr	r3, [r3, #24]
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	6812      	ldr	r2, [r2, #0]
 800723e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007242:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007246:	6193      	str	r3, [r2, #24]
}
 8007248:	bf00      	nop
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	bc80      	pop	{r7}
 8007250:	4770      	bx	lr

08007252 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{
 8007252:	b480      	push	{r7}
 8007254:	b083      	sub	sp, #12
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007262:	699b      	ldr	r3, [r3, #24]
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	6812      	ldr	r2, [r2, #0]
 8007268:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800726c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007270:	6193      	str	r3, [r2, #24]
}
 8007272:	bf00      	nop
 8007274:	370c      	adds	r7, #12
 8007276:	46bd      	mov	sp, r7
 8007278:	bc80      	pop	{r7}
 800727a:	4770      	bx	lr

0800727c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800728c:	699b      	ldr	r3, [r3, #24]
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	6812      	ldr	r2, [r2, #0]
 8007292:	f043 0302 	orr.w	r3, r3, #2
 8007296:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800729a:	6193      	str	r3, [r2, #24]
}
 800729c:	bf00      	nop
 800729e:	370c      	adds	r7, #12
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bc80      	pop	{r7}
 80072a4:	4770      	bx	lr

080072a6 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b083      	sub	sp, #12
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	6812      	ldr	r2, [r2, #0]
 80072bc:	f023 0302 	bic.w	r3, r3, #2
 80072c0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80072c4:	6193      	str	r3, [r2, #24]
}
 80072c6:	bf00      	nop
 80072c8:	370c      	adds	r7, #12
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bc80      	pop	{r7}
 80072ce:	4770      	bx	lr

080072d0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80072d8:	2300      	movs	r3, #0
 80072da:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072e4:	699b      	ldr	r3, [r3, #24]
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	6812      	ldr	r2, [r2, #0]
 80072ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072ee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80072f2:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072fc:	699b      	ldr	r3, [r3, #24]
 80072fe:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8007300:	2001      	movs	r0, #1
 8007302:	f000 f80b 	bl	800731c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007310:	6193      	str	r3, [r2, #24]
}
 8007312:	bf00      	nop
 8007314:	3710      	adds	r7, #16
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
	...

0800731c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007324:	4b0a      	ldr	r3, [pc, #40]	@ (8007350 <ETH_Delay+0x34>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a0a      	ldr	r2, [pc, #40]	@ (8007354 <ETH_Delay+0x38>)
 800732a:	fba2 2303 	umull	r2, r3, r2, r3
 800732e:	0a5b      	lsrs	r3, r3, #9
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	fb02 f303 	mul.w	r3, r2, r3
 8007336:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007338:	bf00      	nop
  }
  while (Delay --);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	1e5a      	subs	r2, r3, #1
 800733e:	60fa      	str	r2, [r7, #12]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d1f9      	bne.n	8007338 <ETH_Delay+0x1c>
}
 8007344:	bf00      	nop
 8007346:	bf00      	nop
 8007348:	3714      	adds	r7, #20
 800734a:	46bd      	mov	sp, r7
 800734c:	bc80      	pop	{r7}
 800734e:	4770      	bx	lr
 8007350:	20000070 	.word	0x20000070
 8007354:	10624dd3 	.word	0x10624dd3

08007358 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b086      	sub	sp, #24
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800736a:	4b23      	ldr	r3, [pc, #140]	@ (80073f8 <HAL_FLASH_Program+0xa0>)
 800736c:	7e1b      	ldrb	r3, [r3, #24]
 800736e:	2b01      	cmp	r3, #1
 8007370:	d101      	bne.n	8007376 <HAL_FLASH_Program+0x1e>
 8007372:	2302      	movs	r3, #2
 8007374:	e03b      	b.n	80073ee <HAL_FLASH_Program+0x96>
 8007376:	4b20      	ldr	r3, [pc, #128]	@ (80073f8 <HAL_FLASH_Program+0xa0>)
 8007378:	2201      	movs	r2, #1
 800737a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800737c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8007380:	f000 f870 	bl	8007464 <FLASH_WaitForLastOperation>
 8007384:	4603      	mov	r3, r0
 8007386:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8007388:	7dfb      	ldrb	r3, [r7, #23]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d12b      	bne.n	80073e6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d105      	bne.n	80073a0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8007394:	783b      	ldrb	r3, [r7, #0]
 8007396:	4619      	mov	r1, r3
 8007398:	68b8      	ldr	r0, [r7, #8]
 800739a:	f000 f919 	bl	80075d0 <FLASH_Program_Byte>
 800739e:	e016      	b.n	80073ce <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d105      	bne.n	80073b2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80073a6:	883b      	ldrh	r3, [r7, #0]
 80073a8:	4619      	mov	r1, r3
 80073aa:	68b8      	ldr	r0, [r7, #8]
 80073ac:	f000 f8ee 	bl	800758c <FLASH_Program_HalfWord>
 80073b0:	e00d      	b.n	80073ce <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	d105      	bne.n	80073c4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	4619      	mov	r1, r3
 80073bc:	68b8      	ldr	r0, [r7, #8]
 80073be:	f000 f8c3 	bl	8007548 <FLASH_Program_Word>
 80073c2:	e004      	b.n	80073ce <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80073c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073c8:	68b8      	ldr	r0, [r7, #8]
 80073ca:	f000 f88b 	bl	80074e4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80073ce:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80073d2:	f000 f847 	bl	8007464 <FLASH_WaitForLastOperation>
 80073d6:	4603      	mov	r3, r0
 80073d8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80073da:	4b08      	ldr	r3, [pc, #32]	@ (80073fc <HAL_FLASH_Program+0xa4>)
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	4a07      	ldr	r2, [pc, #28]	@ (80073fc <HAL_FLASH_Program+0xa4>)
 80073e0:	f023 0301 	bic.w	r3, r3, #1
 80073e4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80073e6:	4b04      	ldr	r3, [pc, #16]	@ (80073f8 <HAL_FLASH_Program+0xa0>)
 80073e8:	2200      	movs	r2, #0
 80073ea:	761a      	strb	r2, [r3, #24]
  
  return status;
 80073ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3718      	adds	r7, #24
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	20006f00 	.word	0x20006f00
 80073fc:	40023c00 	.word	0x40023c00

08007400 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007406:	2300      	movs	r3, #0
 8007408:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800740a:	4b0b      	ldr	r3, [pc, #44]	@ (8007438 <HAL_FLASH_Unlock+0x38>)
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	2b00      	cmp	r3, #0
 8007410:	da0b      	bge.n	800742a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007412:	4b09      	ldr	r3, [pc, #36]	@ (8007438 <HAL_FLASH_Unlock+0x38>)
 8007414:	4a09      	ldr	r2, [pc, #36]	@ (800743c <HAL_FLASH_Unlock+0x3c>)
 8007416:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007418:	4b07      	ldr	r3, [pc, #28]	@ (8007438 <HAL_FLASH_Unlock+0x38>)
 800741a:	4a09      	ldr	r2, [pc, #36]	@ (8007440 <HAL_FLASH_Unlock+0x40>)
 800741c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800741e:	4b06      	ldr	r3, [pc, #24]	@ (8007438 <HAL_FLASH_Unlock+0x38>)
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	2b00      	cmp	r3, #0
 8007424:	da01      	bge.n	800742a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800742a:	79fb      	ldrb	r3, [r7, #7]
}
 800742c:	4618      	mov	r0, r3
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	bc80      	pop	{r7}
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop
 8007438:	40023c00 	.word	0x40023c00
 800743c:	45670123 	.word	0x45670123
 8007440:	cdef89ab 	.word	0xcdef89ab

08007444 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007444:	b480      	push	{r7}
 8007446:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8007448:	4b05      	ldr	r3, [pc, #20]	@ (8007460 <HAL_FLASH_Lock+0x1c>)
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	4a04      	ldr	r2, [pc, #16]	@ (8007460 <HAL_FLASH_Lock+0x1c>)
 800744e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007452:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	46bd      	mov	sp, r7
 800745a:	bc80      	pop	{r7}
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	40023c00 	.word	0x40023c00

08007464 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800746c:	2300      	movs	r3, #0
 800746e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007470:	4b1a      	ldr	r3, [pc, #104]	@ (80074dc <FLASH_WaitForLastOperation+0x78>)
 8007472:	2200      	movs	r2, #0
 8007474:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8007476:	f7fd fdf3 	bl	8005060 <HAL_GetTick>
 800747a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800747c:	e010      	b.n	80074a0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007484:	d00c      	beq.n	80074a0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d007      	beq.n	800749c <FLASH_WaitForLastOperation+0x38>
 800748c:	f7fd fde8 	bl	8005060 <HAL_GetTick>
 8007490:	4602      	mov	r2, r0
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	429a      	cmp	r2, r3
 800749a:	d201      	bcs.n	80074a0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800749c:	2303      	movs	r3, #3
 800749e:	e019      	b.n	80074d4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80074a0:	4b0f      	ldr	r3, [pc, #60]	@ (80074e0 <FLASH_WaitForLastOperation+0x7c>)
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d1e8      	bne.n	800747e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80074ac:	4b0c      	ldr	r3, [pc, #48]	@ (80074e0 <FLASH_WaitForLastOperation+0x7c>)
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	f003 0301 	and.w	r3, r3, #1
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d002      	beq.n	80074be <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80074b8:	4b09      	ldr	r3, [pc, #36]	@ (80074e0 <FLASH_WaitForLastOperation+0x7c>)
 80074ba:	2201      	movs	r2, #1
 80074bc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80074be:	4b08      	ldr	r3, [pc, #32]	@ (80074e0 <FLASH_WaitForLastOperation+0x7c>)
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d003      	beq.n	80074d2 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80074ca:	f000 f8a1 	bl	8007610 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	e000      	b.n	80074d4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80074d2:	2300      	movs	r3, #0
  
}  
 80074d4:	4618      	mov	r0, r3
 80074d6:	3710      	adds	r7, #16
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	20006f00 	.word	0x20006f00
 80074e0:	40023c00 	.word	0x40023c00

080074e4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80074f0:	4b14      	ldr	r3, [pc, #80]	@ (8007544 <FLASH_Program_DoubleWord+0x60>)
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	4a13      	ldr	r2, [pc, #76]	@ (8007544 <FLASH_Program_DoubleWord+0x60>)
 80074f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80074fc:	4b11      	ldr	r3, [pc, #68]	@ (8007544 <FLASH_Program_DoubleWord+0x60>)
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	4a10      	ldr	r2, [pc, #64]	@ (8007544 <FLASH_Program_DoubleWord+0x60>)
 8007502:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007506:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007508:	4b0e      	ldr	r3, [pc, #56]	@ (8007544 <FLASH_Program_DoubleWord+0x60>)
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	4a0d      	ldr	r2, [pc, #52]	@ (8007544 <FLASH_Program_DoubleWord+0x60>)
 800750e:	f043 0301 	orr.w	r3, r3, #1
 8007512:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	683a      	ldr	r2, [r7, #0]
 8007518:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800751a:	f3bf 8f6f 	isb	sy
}
 800751e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8007520:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007524:	f04f 0200 	mov.w	r2, #0
 8007528:	f04f 0300 	mov.w	r3, #0
 800752c:	000a      	movs	r2, r1
 800752e:	2300      	movs	r3, #0
 8007530:	68f9      	ldr	r1, [r7, #12]
 8007532:	3104      	adds	r1, #4
 8007534:	4613      	mov	r3, r2
 8007536:	600b      	str	r3, [r1, #0]
}
 8007538:	bf00      	nop
 800753a:	3714      	adds	r7, #20
 800753c:	46bd      	mov	sp, r7
 800753e:	bc80      	pop	{r7}
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	40023c00 	.word	0x40023c00

08007548 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007552:	4b0d      	ldr	r3, [pc, #52]	@ (8007588 <FLASH_Program_Word+0x40>)
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	4a0c      	ldr	r2, [pc, #48]	@ (8007588 <FLASH_Program_Word+0x40>)
 8007558:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800755c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800755e:	4b0a      	ldr	r3, [pc, #40]	@ (8007588 <FLASH_Program_Word+0x40>)
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	4a09      	ldr	r2, [pc, #36]	@ (8007588 <FLASH_Program_Word+0x40>)
 8007564:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007568:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800756a:	4b07      	ldr	r3, [pc, #28]	@ (8007588 <FLASH_Program_Word+0x40>)
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	4a06      	ldr	r2, [pc, #24]	@ (8007588 <FLASH_Program_Word+0x40>)
 8007570:	f043 0301 	orr.w	r3, r3, #1
 8007574:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	683a      	ldr	r2, [r7, #0]
 800757a:	601a      	str	r2, [r3, #0]
}
 800757c:	bf00      	nop
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	bc80      	pop	{r7}
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	40023c00 	.word	0x40023c00

0800758c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	460b      	mov	r3, r1
 8007596:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007598:	4b0c      	ldr	r3, [pc, #48]	@ (80075cc <FLASH_Program_HalfWord+0x40>)
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	4a0b      	ldr	r2, [pc, #44]	@ (80075cc <FLASH_Program_HalfWord+0x40>)
 800759e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80075a4:	4b09      	ldr	r3, [pc, #36]	@ (80075cc <FLASH_Program_HalfWord+0x40>)
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	4a08      	ldr	r2, [pc, #32]	@ (80075cc <FLASH_Program_HalfWord+0x40>)
 80075aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80075b0:	4b06      	ldr	r3, [pc, #24]	@ (80075cc <FLASH_Program_HalfWord+0x40>)
 80075b2:	691b      	ldr	r3, [r3, #16]
 80075b4:	4a05      	ldr	r2, [pc, #20]	@ (80075cc <FLASH_Program_HalfWord+0x40>)
 80075b6:	f043 0301 	orr.w	r3, r3, #1
 80075ba:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	887a      	ldrh	r2, [r7, #2]
 80075c0:	801a      	strh	r2, [r3, #0]
}
 80075c2:	bf00      	nop
 80075c4:	370c      	adds	r7, #12
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bc80      	pop	{r7}
 80075ca:	4770      	bx	lr
 80075cc:	40023c00 	.word	0x40023c00

080075d0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	460b      	mov	r3, r1
 80075da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80075dc:	4b0b      	ldr	r3, [pc, #44]	@ (800760c <FLASH_Program_Byte+0x3c>)
 80075de:	691b      	ldr	r3, [r3, #16]
 80075e0:	4a0a      	ldr	r2, [pc, #40]	@ (800760c <FLASH_Program_Byte+0x3c>)
 80075e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80075e8:	4b08      	ldr	r3, [pc, #32]	@ (800760c <FLASH_Program_Byte+0x3c>)
 80075ea:	4a08      	ldr	r2, [pc, #32]	@ (800760c <FLASH_Program_Byte+0x3c>)
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80075f0:	4b06      	ldr	r3, [pc, #24]	@ (800760c <FLASH_Program_Byte+0x3c>)
 80075f2:	691b      	ldr	r3, [r3, #16]
 80075f4:	4a05      	ldr	r2, [pc, #20]	@ (800760c <FLASH_Program_Byte+0x3c>)
 80075f6:	f043 0301 	orr.w	r3, r3, #1
 80075fa:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	78fa      	ldrb	r2, [r7, #3]
 8007600:	701a      	strb	r2, [r3, #0]
}
 8007602:	bf00      	nop
 8007604:	370c      	adds	r7, #12
 8007606:	46bd      	mov	sp, r7
 8007608:	bc80      	pop	{r7}
 800760a:	4770      	bx	lr
 800760c:	40023c00 	.word	0x40023c00

08007610 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8007610:	b480      	push	{r7}
 8007612:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8007614:	4b27      	ldr	r3, [pc, #156]	@ (80076b4 <FLASH_SetErrorCode+0xa4>)
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	f003 0310 	and.w	r3, r3, #16
 800761c:	2b00      	cmp	r3, #0
 800761e:	d008      	beq.n	8007632 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007620:	4b25      	ldr	r3, [pc, #148]	@ (80076b8 <FLASH_SetErrorCode+0xa8>)
 8007622:	69db      	ldr	r3, [r3, #28]
 8007624:	f043 0308 	orr.w	r3, r3, #8
 8007628:	4a23      	ldr	r2, [pc, #140]	@ (80076b8 <FLASH_SetErrorCode+0xa8>)
 800762a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800762c:	4b21      	ldr	r3, [pc, #132]	@ (80076b4 <FLASH_SetErrorCode+0xa4>)
 800762e:	2210      	movs	r2, #16
 8007630:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8007632:	4b20      	ldr	r3, [pc, #128]	@ (80076b4 <FLASH_SetErrorCode+0xa4>)
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	f003 0320 	and.w	r3, r3, #32
 800763a:	2b00      	cmp	r3, #0
 800763c:	d008      	beq.n	8007650 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800763e:	4b1e      	ldr	r3, [pc, #120]	@ (80076b8 <FLASH_SetErrorCode+0xa8>)
 8007640:	69db      	ldr	r3, [r3, #28]
 8007642:	f043 0304 	orr.w	r3, r3, #4
 8007646:	4a1c      	ldr	r2, [pc, #112]	@ (80076b8 <FLASH_SetErrorCode+0xa8>)
 8007648:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800764a:	4b1a      	ldr	r3, [pc, #104]	@ (80076b4 <FLASH_SetErrorCode+0xa4>)
 800764c:	2220      	movs	r2, #32
 800764e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8007650:	4b18      	ldr	r3, [pc, #96]	@ (80076b4 <FLASH_SetErrorCode+0xa4>)
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007658:	2b00      	cmp	r3, #0
 800765a:	d008      	beq.n	800766e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800765c:	4b16      	ldr	r3, [pc, #88]	@ (80076b8 <FLASH_SetErrorCode+0xa8>)
 800765e:	69db      	ldr	r3, [r3, #28]
 8007660:	f043 0302 	orr.w	r3, r3, #2
 8007664:	4a14      	ldr	r2, [pc, #80]	@ (80076b8 <FLASH_SetErrorCode+0xa8>)
 8007666:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8007668:	4b12      	ldr	r3, [pc, #72]	@ (80076b4 <FLASH_SetErrorCode+0xa4>)
 800766a:	2240      	movs	r2, #64	@ 0x40
 800766c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800766e:	4b11      	ldr	r3, [pc, #68]	@ (80076b4 <FLASH_SetErrorCode+0xa4>)
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007676:	2b00      	cmp	r3, #0
 8007678:	d008      	beq.n	800768c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800767a:	4b0f      	ldr	r3, [pc, #60]	@ (80076b8 <FLASH_SetErrorCode+0xa8>)
 800767c:	69db      	ldr	r3, [r3, #28]
 800767e:	f043 0301 	orr.w	r3, r3, #1
 8007682:	4a0d      	ldr	r2, [pc, #52]	@ (80076b8 <FLASH_SetErrorCode+0xa8>)
 8007684:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8007686:	4b0b      	ldr	r3, [pc, #44]	@ (80076b4 <FLASH_SetErrorCode+0xa4>)
 8007688:	2280      	movs	r2, #128	@ 0x80
 800768a:	60da      	str	r2, [r3, #12]
  }
    
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800768c:	4b09      	ldr	r3, [pc, #36]	@ (80076b4 <FLASH_SetErrorCode+0xa4>)
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	f003 0302 	and.w	r3, r3, #2
 8007694:	2b00      	cmp	r3, #0
 8007696:	d008      	beq.n	80076aa <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8007698:	4b07      	ldr	r3, [pc, #28]	@ (80076b8 <FLASH_SetErrorCode+0xa8>)
 800769a:	69db      	ldr	r3, [r3, #28]
 800769c:	f043 0310 	orr.w	r3, r3, #16
 80076a0:	4a05      	ldr	r2, [pc, #20]	@ (80076b8 <FLASH_SetErrorCode+0xa8>)
 80076a2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80076a4:	4b03      	ldr	r3, [pc, #12]	@ (80076b4 <FLASH_SetErrorCode+0xa4>)
 80076a6:	2202      	movs	r2, #2
 80076a8:	60da      	str	r2, [r3, #12]
  }
}
 80076aa:	bf00      	nop
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bc80      	pop	{r7}
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	40023c00 	.word	0x40023c00
 80076b8:	20006f00 	.word	0x20006f00

080076bc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80076ca:	2300      	movs	r3, #0
 80076cc:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80076ce:	4b31      	ldr	r3, [pc, #196]	@ (8007794 <HAL_FLASHEx_Erase+0xd8>)
 80076d0:	7e1b      	ldrb	r3, [r3, #24]
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d101      	bne.n	80076da <HAL_FLASHEx_Erase+0x1e>
 80076d6:	2302      	movs	r3, #2
 80076d8:	e058      	b.n	800778c <HAL_FLASHEx_Erase+0xd0>
 80076da:	4b2e      	ldr	r3, [pc, #184]	@ (8007794 <HAL_FLASHEx_Erase+0xd8>)
 80076dc:	2201      	movs	r2, #1
 80076de:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80076e0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80076e4:	f7ff febe 	bl	8007464 <FLASH_WaitForLastOperation>
 80076e8:	4603      	mov	r3, r0
 80076ea:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80076ec:	7bfb      	ldrb	r3, [r7, #15]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d148      	bne.n	8007784 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	f04f 32ff 	mov.w	r2, #4294967295
 80076f8:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d115      	bne.n	800772e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	b2da      	uxtb	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	4619      	mov	r1, r3
 800770e:	4610      	mov	r0, r2
 8007710:	f000 f8da 	bl	80078c8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007714:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8007718:	f7ff fea4 	bl	8007464 <FLASH_WaitForLastOperation>
 800771c:	4603      	mov	r3, r0
 800771e:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8007720:	4b1d      	ldr	r3, [pc, #116]	@ (8007798 <HAL_FLASHEx_Erase+0xdc>)
 8007722:	691b      	ldr	r3, [r3, #16]
 8007724:	4a1c      	ldr	r2, [pc, #112]	@ (8007798 <HAL_FLASHEx_Erase+0xdc>)
 8007726:	f023 0304 	bic.w	r3, r3, #4
 800772a:	6113      	str	r3, [r2, #16]
 800772c:	e028      	b.n	8007780 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	60bb      	str	r3, [r7, #8]
 8007734:	e01c      	b.n	8007770 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	b2db      	uxtb	r3, r3
 800773c:	4619      	mov	r1, r3
 800773e:	68b8      	ldr	r0, [r7, #8]
 8007740:	f000 f82c 	bl	800779c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007744:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8007748:	f7ff fe8c 	bl	8007464 <FLASH_WaitForLastOperation>
 800774c:	4603      	mov	r3, r0
 800774e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8007750:	4b11      	ldr	r3, [pc, #68]	@ (8007798 <HAL_FLASHEx_Erase+0xdc>)
 8007752:	691b      	ldr	r3, [r3, #16]
 8007754:	4a10      	ldr	r2, [pc, #64]	@ (8007798 <HAL_FLASHEx_Erase+0xdc>)
 8007756:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 800775a:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 800775c:	7bfb      	ldrb	r3, [r7, #15]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d003      	beq.n	800776a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	601a      	str	r2, [r3, #0]
          break;
 8007768:	e00a      	b.n	8007780 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	3301      	adds	r3, #1
 800776e:	60bb      	str	r3, [r7, #8]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	68da      	ldr	r2, [r3, #12]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	4413      	add	r3, r2
 800777a:	68ba      	ldr	r2, [r7, #8]
 800777c:	429a      	cmp	r2, r3
 800777e:	d3da      	bcc.n	8007736 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8007780:	f000 f85e 	bl	8007840 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007784:	4b03      	ldr	r3, [pc, #12]	@ (8007794 <HAL_FLASHEx_Erase+0xd8>)
 8007786:	2200      	movs	r2, #0
 8007788:	761a      	strb	r2, [r3, #24]

  return status;
 800778a:	7bfb      	ldrb	r3, [r7, #15]
}
 800778c:	4618      	mov	r0, r3
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	20006f00 	.word	0x20006f00
 8007798:	40023c00 	.word	0x40023c00

0800779c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800779c:	b480      	push	{r7}
 800779e:	b087      	sub	sp, #28
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	460b      	mov	r3, r1
 80077a6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80077a8:	2300      	movs	r3, #0
 80077aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80077ac:	78fb      	ldrb	r3, [r7, #3]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d102      	bne.n	80077b8 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80077b2:	2300      	movs	r3, #0
 80077b4:	617b      	str	r3, [r7, #20]
 80077b6:	e010      	b.n	80077da <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80077b8:	78fb      	ldrb	r3, [r7, #3]
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d103      	bne.n	80077c6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80077be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80077c2:	617b      	str	r3, [r7, #20]
 80077c4:	e009      	b.n	80077da <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80077c6:	78fb      	ldrb	r3, [r7, #3]
 80077c8:	2b02      	cmp	r3, #2
 80077ca:	d103      	bne.n	80077d4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80077cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80077d0:	617b      	str	r3, [r7, #20]
 80077d2:	e002      	b.n	80077da <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80077d4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80077d8:	617b      	str	r3, [r7, #20]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80077da:	4b18      	ldr	r3, [pc, #96]	@ (800783c <FLASH_Erase_Sector+0xa0>)
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	4a17      	ldr	r2, [pc, #92]	@ (800783c <FLASH_Erase_Sector+0xa0>)
 80077e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077e4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80077e6:	4b15      	ldr	r3, [pc, #84]	@ (800783c <FLASH_Erase_Sector+0xa0>)
 80077e8:	691a      	ldr	r2, [r3, #16]
 80077ea:	4914      	ldr	r1, [pc, #80]	@ (800783c <FLASH_Erase_Sector+0xa0>)
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80077f2:	4b12      	ldr	r3, [pc, #72]	@ (800783c <FLASH_Erase_Sector+0xa0>)
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	4a11      	ldr	r2, [pc, #68]	@ (800783c <FLASH_Erase_Sector+0xa0>)
 80077f8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80077fc:	6113      	str	r3, [r2, #16]
 80077fe:	23f8      	movs	r3, #248	@ 0xf8
 8007800:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	fa93 f3a3 	rbit	r3, r3
 8007808:	60fb      	str	r3, [r7, #12]
  return result;
 800780a:	68fb      	ldr	r3, [r7, #12]
  FLASH->CR |= FLASH_CR_SER | (Sector << POSITION_VAL(FLASH_CR_SNB));
 800780c:	fab3 f383 	clz	r3, r3
 8007810:	b2db      	uxtb	r3, r3
 8007812:	461a      	mov	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	4093      	lsls	r3, r2
 8007818:	f043 0202 	orr.w	r2, r3, #2
 800781c:	4b07      	ldr	r3, [pc, #28]	@ (800783c <FLASH_Erase_Sector+0xa0>)
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	4906      	ldr	r1, [pc, #24]	@ (800783c <FLASH_Erase_Sector+0xa0>)
 8007822:	4313      	orrs	r3, r2
 8007824:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8007826:	4b05      	ldr	r3, [pc, #20]	@ (800783c <FLASH_Erase_Sector+0xa0>)
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	4a04      	ldr	r2, [pc, #16]	@ (800783c <FLASH_Erase_Sector+0xa0>)
 800782c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007830:	6113      	str	r3, [r2, #16]
}
 8007832:	bf00      	nop
 8007834:	371c      	adds	r7, #28
 8007836:	46bd      	mov	sp, r7
 8007838:	bc80      	pop	{r7}
 800783a:	4770      	bx	lr
 800783c:	40023c00 	.word	0x40023c00

08007840 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8007840:	b480      	push	{r7}
 8007842:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8007844:	4b1f      	ldr	r3, [pc, #124]	@ (80078c4 <FLASH_FlushCaches+0x84>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800784c:	2b00      	cmp	r3, #0
 800784e:	d017      	beq.n	8007880 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007850:	4b1c      	ldr	r3, [pc, #112]	@ (80078c4 <FLASH_FlushCaches+0x84>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a1b      	ldr	r2, [pc, #108]	@ (80078c4 <FLASH_FlushCaches+0x84>)
 8007856:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800785a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800785c:	4b19      	ldr	r3, [pc, #100]	@ (80078c4 <FLASH_FlushCaches+0x84>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a18      	ldr	r2, [pc, #96]	@ (80078c4 <FLASH_FlushCaches+0x84>)
 8007862:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007866:	6013      	str	r3, [r2, #0]
 8007868:	4b16      	ldr	r3, [pc, #88]	@ (80078c4 <FLASH_FlushCaches+0x84>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a15      	ldr	r2, [pc, #84]	@ (80078c4 <FLASH_FlushCaches+0x84>)
 800786e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007872:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007874:	4b13      	ldr	r3, [pc, #76]	@ (80078c4 <FLASH_FlushCaches+0x84>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a12      	ldr	r2, [pc, #72]	@ (80078c4 <FLASH_FlushCaches+0x84>)
 800787a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800787e:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8007880:	4b10      	ldr	r3, [pc, #64]	@ (80078c4 <FLASH_FlushCaches+0x84>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007888:	2b00      	cmp	r3, #0
 800788a:	d017      	beq.n	80078bc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800788c:	4b0d      	ldr	r3, [pc, #52]	@ (80078c4 <FLASH_FlushCaches+0x84>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a0c      	ldr	r2, [pc, #48]	@ (80078c4 <FLASH_FlushCaches+0x84>)
 8007892:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007896:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007898:	4b0a      	ldr	r3, [pc, #40]	@ (80078c4 <FLASH_FlushCaches+0x84>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a09      	ldr	r2, [pc, #36]	@ (80078c4 <FLASH_FlushCaches+0x84>)
 800789e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80078a2:	6013      	str	r3, [r2, #0]
 80078a4:	4b07      	ldr	r3, [pc, #28]	@ (80078c4 <FLASH_FlushCaches+0x84>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a06      	ldr	r2, [pc, #24]	@ (80078c4 <FLASH_FlushCaches+0x84>)
 80078aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80078ae:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80078b0:	4b04      	ldr	r3, [pc, #16]	@ (80078c4 <FLASH_FlushCaches+0x84>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a03      	ldr	r2, [pc, #12]	@ (80078c4 <FLASH_FlushCaches+0x84>)
 80078b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80078ba:	6013      	str	r3, [r2, #0]
  }
}
 80078bc:	bf00      	nop
 80078be:	46bd      	mov	sp, r7
 80078c0:	bc80      	pop	{r7}
 80078c2:	4770      	bx	lr
 80078c4:	40023c00 	.word	0x40023c00

080078c8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{ 
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	4603      	mov	r3, r0
 80078d0:	6039      	str	r1, [r7, #0]
 80078d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80078d4:	4b0c      	ldr	r3, [pc, #48]	@ (8007908 <FLASH_MassErase+0x40>)
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	4a0b      	ldr	r2, [pc, #44]	@ (8007908 <FLASH_MassErase+0x40>)
 80078da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80078e0:	4b09      	ldr	r3, [pc, #36]	@ (8007908 <FLASH_MassErase+0x40>)
 80078e2:	691b      	ldr	r3, [r3, #16]
 80078e4:	4a08      	ldr	r2, [pc, #32]	@ (8007908 <FLASH_MassErase+0x40>)
 80078e6:	f043 0304 	orr.w	r3, r3, #4
 80078ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 80078ec:	4b06      	ldr	r3, [pc, #24]	@ (8007908 <FLASH_MassErase+0x40>)
 80078ee:	691a      	ldr	r2, [r3, #16]
 80078f0:	79fb      	ldrb	r3, [r7, #7]
 80078f2:	021b      	lsls	r3, r3, #8
 80078f4:	4313      	orrs	r3, r2
 80078f6:	4a04      	ldr	r2, [pc, #16]	@ (8007908 <FLASH_MassErase+0x40>)
 80078f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078fc:	6113      	str	r3, [r2, #16]
}
 80078fe:	bf00      	nop
 8007900:	370c      	adds	r7, #12
 8007902:	46bd      	mov	sp, r7
 8007904:	bc80      	pop	{r7}
 8007906:	4770      	bx	lr
 8007908:	40023c00 	.word	0x40023c00

0800790c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800790c:	b480      	push	{r7}
 800790e:	b087      	sub	sp, #28
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007916:	2300      	movs	r3, #0
 8007918:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800791a:	e16f      	b.n	8007bfc <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	2101      	movs	r1, #1
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	fa01 f303 	lsl.w	r3, r1, r3
 8007928:	4013      	ands	r3, r2
 800792a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2b00      	cmp	r3, #0
 8007930:	f000 8161 	beq.w	8007bf6 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	f003 0303 	and.w	r3, r3, #3
 800793c:	2b01      	cmp	r3, #1
 800793e:	d005      	beq.n	800794c <HAL_GPIO_Init+0x40>
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	f003 0303 	and.w	r3, r3, #3
 8007948:	2b02      	cmp	r3, #2
 800794a:	d130      	bne.n	80079ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	005b      	lsls	r3, r3, #1
 8007956:	2203      	movs	r2, #3
 8007958:	fa02 f303 	lsl.w	r3, r2, r3
 800795c:	43db      	mvns	r3, r3
 800795e:	693a      	ldr	r2, [r7, #16]
 8007960:	4013      	ands	r3, r2
 8007962:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	68da      	ldr	r2, [r3, #12]
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	005b      	lsls	r3, r3, #1
 800796c:	fa02 f303 	lsl.w	r3, r2, r3
 8007970:	693a      	ldr	r2, [r7, #16]
 8007972:	4313      	orrs	r3, r2
 8007974:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	693a      	ldr	r2, [r7, #16]
 800797a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007982:	2201      	movs	r2, #1
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	fa02 f303 	lsl.w	r3, r2, r3
 800798a:	43db      	mvns	r3, r3
 800798c:	693a      	ldr	r2, [r7, #16]
 800798e:	4013      	ands	r3, r2
 8007990:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	091b      	lsrs	r3, r3, #4
 8007998:	f003 0201 	and.w	r2, r3, #1
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	fa02 f303 	lsl.w	r3, r2, r3
 80079a2:	693a      	ldr	r2, [r7, #16]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	693a      	ldr	r2, [r7, #16]
 80079ac:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	f003 0303 	and.w	r3, r3, #3
 80079b6:	2b03      	cmp	r3, #3
 80079b8:	d017      	beq.n	80079ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	005b      	lsls	r3, r3, #1
 80079c4:	2203      	movs	r2, #3
 80079c6:	fa02 f303 	lsl.w	r3, r2, r3
 80079ca:	43db      	mvns	r3, r3
 80079cc:	693a      	ldr	r2, [r7, #16]
 80079ce:	4013      	ands	r3, r2
 80079d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	689a      	ldr	r2, [r3, #8]
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	005b      	lsls	r3, r3, #1
 80079da:	fa02 f303 	lsl.w	r3, r2, r3
 80079de:	693a      	ldr	r2, [r7, #16]
 80079e0:	4313      	orrs	r3, r2
 80079e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	693a      	ldr	r2, [r7, #16]
 80079e8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	f003 0303 	and.w	r3, r3, #3
 80079f2:	2b02      	cmp	r3, #2
 80079f4:	d123      	bne.n	8007a3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	08da      	lsrs	r2, r3, #3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	3208      	adds	r2, #8
 80079fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	f003 0307 	and.w	r3, r3, #7
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	220f      	movs	r2, #15
 8007a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a12:	43db      	mvns	r3, r3
 8007a14:	693a      	ldr	r2, [r7, #16]
 8007a16:	4013      	ands	r3, r2
 8007a18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	691a      	ldr	r2, [r3, #16]
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	f003 0307 	and.w	r3, r3, #7
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	fa02 f303 	lsl.w	r3, r2, r3
 8007a2a:	693a      	ldr	r2, [r7, #16]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	08da      	lsrs	r2, r3, #3
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	3208      	adds	r2, #8
 8007a38:	6939      	ldr	r1, [r7, #16]
 8007a3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	005b      	lsls	r3, r3, #1
 8007a48:	2203      	movs	r2, #3
 8007a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a4e:	43db      	mvns	r3, r3
 8007a50:	693a      	ldr	r2, [r7, #16]
 8007a52:	4013      	ands	r3, r2
 8007a54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	f003 0203 	and.w	r2, r3, #3
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	005b      	lsls	r3, r3, #1
 8007a62:	fa02 f303 	lsl.w	r3, r2, r3
 8007a66:	693a      	ldr	r2, [r7, #16]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	693a      	ldr	r2, [r7, #16]
 8007a70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	f000 80bb 	beq.w	8007bf6 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a80:	2300      	movs	r3, #0
 8007a82:	60bb      	str	r3, [r7, #8]
 8007a84:	4b64      	ldr	r3, [pc, #400]	@ (8007c18 <HAL_GPIO_Init+0x30c>)
 8007a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a88:	4a63      	ldr	r2, [pc, #396]	@ (8007c18 <HAL_GPIO_Init+0x30c>)
 8007a8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007a8e:	6453      	str	r3, [r2, #68]	@ 0x44
 8007a90:	4b61      	ldr	r3, [pc, #388]	@ (8007c18 <HAL_GPIO_Init+0x30c>)
 8007a92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a98:	60bb      	str	r3, [r7, #8]
 8007a9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007a9c:	4a5f      	ldr	r2, [pc, #380]	@ (8007c1c <HAL_GPIO_Init+0x310>)
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	089b      	lsrs	r3, r3, #2
 8007aa2:	3302      	adds	r3, #2
 8007aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	f003 0303 	and.w	r3, r3, #3
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	220f      	movs	r2, #15
 8007ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab8:	43db      	mvns	r3, r3
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	4013      	ands	r3, r2
 8007abe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	4a57      	ldr	r2, [pc, #348]	@ (8007c20 <HAL_GPIO_Init+0x314>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d031      	beq.n	8007b2c <HAL_GPIO_Init+0x220>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	4a56      	ldr	r2, [pc, #344]	@ (8007c24 <HAL_GPIO_Init+0x318>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d02b      	beq.n	8007b28 <HAL_GPIO_Init+0x21c>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	4a55      	ldr	r2, [pc, #340]	@ (8007c28 <HAL_GPIO_Init+0x31c>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d025      	beq.n	8007b24 <HAL_GPIO_Init+0x218>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	4a54      	ldr	r2, [pc, #336]	@ (8007c2c <HAL_GPIO_Init+0x320>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d01f      	beq.n	8007b20 <HAL_GPIO_Init+0x214>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	4a53      	ldr	r2, [pc, #332]	@ (8007c30 <HAL_GPIO_Init+0x324>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d019      	beq.n	8007b1c <HAL_GPIO_Init+0x210>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	4a52      	ldr	r2, [pc, #328]	@ (8007c34 <HAL_GPIO_Init+0x328>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d013      	beq.n	8007b18 <HAL_GPIO_Init+0x20c>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	4a51      	ldr	r2, [pc, #324]	@ (8007c38 <HAL_GPIO_Init+0x32c>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d00d      	beq.n	8007b14 <HAL_GPIO_Init+0x208>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4a50      	ldr	r2, [pc, #320]	@ (8007c3c <HAL_GPIO_Init+0x330>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d007      	beq.n	8007b10 <HAL_GPIO_Init+0x204>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a4f      	ldr	r2, [pc, #316]	@ (8007c40 <HAL_GPIO_Init+0x334>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d101      	bne.n	8007b0c <HAL_GPIO_Init+0x200>
 8007b08:	2308      	movs	r3, #8
 8007b0a:	e010      	b.n	8007b2e <HAL_GPIO_Init+0x222>
 8007b0c:	2309      	movs	r3, #9
 8007b0e:	e00e      	b.n	8007b2e <HAL_GPIO_Init+0x222>
 8007b10:	2307      	movs	r3, #7
 8007b12:	e00c      	b.n	8007b2e <HAL_GPIO_Init+0x222>
 8007b14:	2306      	movs	r3, #6
 8007b16:	e00a      	b.n	8007b2e <HAL_GPIO_Init+0x222>
 8007b18:	2305      	movs	r3, #5
 8007b1a:	e008      	b.n	8007b2e <HAL_GPIO_Init+0x222>
 8007b1c:	2304      	movs	r3, #4
 8007b1e:	e006      	b.n	8007b2e <HAL_GPIO_Init+0x222>
 8007b20:	2303      	movs	r3, #3
 8007b22:	e004      	b.n	8007b2e <HAL_GPIO_Init+0x222>
 8007b24:	2302      	movs	r3, #2
 8007b26:	e002      	b.n	8007b2e <HAL_GPIO_Init+0x222>
 8007b28:	2301      	movs	r3, #1
 8007b2a:	e000      	b.n	8007b2e <HAL_GPIO_Init+0x222>
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	697a      	ldr	r2, [r7, #20]
 8007b30:	f002 0203 	and.w	r2, r2, #3
 8007b34:	0092      	lsls	r2, r2, #2
 8007b36:	4093      	lsls	r3, r2
 8007b38:	461a      	mov	r2, r3
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007b40:	4936      	ldr	r1, [pc, #216]	@ (8007c1c <HAL_GPIO_Init+0x310>)
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	089b      	lsrs	r3, r3, #2
 8007b46:	3302      	adds	r3, #2
 8007b48:	693a      	ldr	r2, [r7, #16]
 8007b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007b4e:	4b3d      	ldr	r3, [pc, #244]	@ (8007c44 <HAL_GPIO_Init+0x338>)
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	43db      	mvns	r3, r3
 8007b58:	693a      	ldr	r2, [r7, #16]
 8007b5a:	4013      	ands	r3, r2
 8007b5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d003      	beq.n	8007b72 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007b6a:	693a      	ldr	r2, [r7, #16]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8007b72:	4a34      	ldr	r2, [pc, #208]	@ (8007c44 <HAL_GPIO_Init+0x338>)
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007b78:	4b32      	ldr	r3, [pc, #200]	@ (8007c44 <HAL_GPIO_Init+0x338>)
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	43db      	mvns	r3, r3
 8007b82:	693a      	ldr	r2, [r7, #16]
 8007b84:	4013      	ands	r3, r2
 8007b86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d003      	beq.n	8007b9c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007b94:	693a      	ldr	r2, [r7, #16]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8007b9c:	4a29      	ldr	r2, [pc, #164]	@ (8007c44 <HAL_GPIO_Init+0x338>)
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007ba2:	4b28      	ldr	r3, [pc, #160]	@ (8007c44 <HAL_GPIO_Init+0x338>)
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	43db      	mvns	r3, r3
 8007bac:	693a      	ldr	r2, [r7, #16]
 8007bae:	4013      	ands	r3, r2
 8007bb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d003      	beq.n	8007bc6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007bbe:	693a      	ldr	r2, [r7, #16]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8007bc6:	4a1f      	ldr	r2, [pc, #124]	@ (8007c44 <HAL_GPIO_Init+0x338>)
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8007c44 <HAL_GPIO_Init+0x338>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	43db      	mvns	r3, r3
 8007bd6:	693a      	ldr	r2, [r7, #16]
 8007bd8:	4013      	ands	r3, r2
 8007bda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d003      	beq.n	8007bf0 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8007be8:	693a      	ldr	r2, [r7, #16]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	4313      	orrs	r3, r2
 8007bee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8007bf0:	4a14      	ldr	r2, [pc, #80]	@ (8007c44 <HAL_GPIO_Init+0x338>)
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	fa22 f303 	lsr.w	r3, r2, r3
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	f47f ae88 	bne.w	800791c <HAL_GPIO_Init+0x10>
  }
}
 8007c0c:	bf00      	nop
 8007c0e:	bf00      	nop
 8007c10:	371c      	adds	r7, #28
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bc80      	pop	{r7}
 8007c16:	4770      	bx	lr
 8007c18:	40023800 	.word	0x40023800
 8007c1c:	40013800 	.word	0x40013800
 8007c20:	40020000 	.word	0x40020000
 8007c24:	40020400 	.word	0x40020400
 8007c28:	40020800 	.word	0x40020800
 8007c2c:	40020c00 	.word	0x40020c00
 8007c30:	40021000 	.word	0x40021000
 8007c34:	40021400 	.word	0x40021400
 8007c38:	40021800 	.word	0x40021800
 8007c3c:	40021c00 	.word	0x40021c00
 8007c40:	40022000 	.word	0x40022000
 8007c44:	40013c00 	.word	0x40013c00

08007c48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	460b      	mov	r3, r1
 8007c52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	691a      	ldr	r2, [r3, #16]
 8007c58:	887b      	ldrh	r3, [r7, #2]
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d002      	beq.n	8007c66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007c60:	2301      	movs	r3, #1
 8007c62:	73fb      	strb	r3, [r7, #15]
 8007c64:	e001      	b.n	8007c6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007c66:	2300      	movs	r3, #0
 8007c68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3714      	adds	r7, #20
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bc80      	pop	{r7}
 8007c74:	4770      	bx	lr
	...

08007c78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	4603      	mov	r3, r0
 8007c80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007c82:	4b08      	ldr	r3, [pc, #32]	@ (8007ca4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007c84:	695a      	ldr	r2, [r3, #20]
 8007c86:	88fb      	ldrh	r3, [r7, #6]
 8007c88:	4013      	ands	r3, r2
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d006      	beq.n	8007c9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007c8e:	4a05      	ldr	r2, [pc, #20]	@ (8007ca4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007c90:	88fb      	ldrh	r3, [r7, #6]
 8007c92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007c94:	88fb      	ldrh	r3, [r7, #6]
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7f9 fda8 	bl	80017ec <HAL_GPIO_EXTI_Callback>
  }
}
 8007c9c:	bf00      	nop
 8007c9e:	3708      	adds	r7, #8
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	40013c00 	.word	0x40013c00

08007ca8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d101      	bne.n	8007cba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e12b      	b.n	8007f12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d106      	bne.n	8007cd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f7fb f9a6 	bl	8003020 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2224      	movs	r2, #36	@ 0x24
 8007cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f022 0201 	bic.w	r2, r2, #1
 8007cea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007cfa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007d0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007d0c:	f001 f888 	bl	8008e20 <HAL_RCC_GetPCLK1Freq>
 8007d10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	4a81      	ldr	r2, [pc, #516]	@ (8007f1c <HAL_I2C_Init+0x274>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d807      	bhi.n	8007d2c <HAL_I2C_Init+0x84>
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	4a80      	ldr	r2, [pc, #512]	@ (8007f20 <HAL_I2C_Init+0x278>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	bf94      	ite	ls
 8007d24:	2301      	movls	r3, #1
 8007d26:	2300      	movhi	r3, #0
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	e006      	b.n	8007d3a <HAL_I2C_Init+0x92>
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	4a7d      	ldr	r2, [pc, #500]	@ (8007f24 <HAL_I2C_Init+0x27c>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	bf94      	ite	ls
 8007d34:	2301      	movls	r3, #1
 8007d36:	2300      	movhi	r3, #0
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d001      	beq.n	8007d42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e0e7      	b.n	8007f12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	4a78      	ldr	r2, [pc, #480]	@ (8007f28 <HAL_I2C_Init+0x280>)
 8007d46:	fba2 2303 	umull	r2, r3, r2, r3
 8007d4a:	0c9b      	lsrs	r3, r3, #18
 8007d4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	68ba      	ldr	r2, [r7, #8]
 8007d5e:	430a      	orrs	r2, r1
 8007d60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	6a1b      	ldr	r3, [r3, #32]
 8007d68:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	4a6a      	ldr	r2, [pc, #424]	@ (8007f1c <HAL_I2C_Init+0x274>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d802      	bhi.n	8007d7c <HAL_I2C_Init+0xd4>
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	3301      	adds	r3, #1
 8007d7a:	e009      	b.n	8007d90 <HAL_I2C_Init+0xe8>
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007d82:	fb02 f303 	mul.w	r3, r2, r3
 8007d86:	4a69      	ldr	r2, [pc, #420]	@ (8007f2c <HAL_I2C_Init+0x284>)
 8007d88:	fba2 2303 	umull	r2, r3, r2, r3
 8007d8c:	099b      	lsrs	r3, r3, #6
 8007d8e:	3301      	adds	r3, #1
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	6812      	ldr	r2, [r2, #0]
 8007d94:	430b      	orrs	r3, r1
 8007d96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	69db      	ldr	r3, [r3, #28]
 8007d9e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8007da2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	495c      	ldr	r1, [pc, #368]	@ (8007f1c <HAL_I2C_Init+0x274>)
 8007dac:	428b      	cmp	r3, r1
 8007dae:	d819      	bhi.n	8007de4 <HAL_I2C_Init+0x13c>
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	1e59      	subs	r1, r3, #1
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	005b      	lsls	r3, r3, #1
 8007dba:	fbb1 f3f3 	udiv	r3, r1, r3
 8007dbe:	1c59      	adds	r1, r3, #1
 8007dc0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007dc4:	400b      	ands	r3, r1
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00a      	beq.n	8007de0 <HAL_I2C_Init+0x138>
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	1e59      	subs	r1, r3, #1
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	005b      	lsls	r3, r3, #1
 8007dd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8007dd8:	3301      	adds	r3, #1
 8007dda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007dde:	e051      	b.n	8007e84 <HAL_I2C_Init+0x1dc>
 8007de0:	2304      	movs	r3, #4
 8007de2:	e04f      	b.n	8007e84 <HAL_I2C_Init+0x1dc>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d111      	bne.n	8007e10 <HAL_I2C_Init+0x168>
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	1e58      	subs	r0, r3, #1
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6859      	ldr	r1, [r3, #4]
 8007df4:	460b      	mov	r3, r1
 8007df6:	005b      	lsls	r3, r3, #1
 8007df8:	440b      	add	r3, r1
 8007dfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8007dfe:	3301      	adds	r3, #1
 8007e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	bf0c      	ite	eq
 8007e08:	2301      	moveq	r3, #1
 8007e0a:	2300      	movne	r3, #0
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	e012      	b.n	8007e36 <HAL_I2C_Init+0x18e>
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	1e58      	subs	r0, r3, #1
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6859      	ldr	r1, [r3, #4]
 8007e18:	460b      	mov	r3, r1
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	440b      	add	r3, r1
 8007e1e:	0099      	lsls	r1, r3, #2
 8007e20:	440b      	add	r3, r1
 8007e22:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e26:	3301      	adds	r3, #1
 8007e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	bf0c      	ite	eq
 8007e30:	2301      	moveq	r3, #1
 8007e32:	2300      	movne	r3, #0
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d001      	beq.n	8007e3e <HAL_I2C_Init+0x196>
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e022      	b.n	8007e84 <HAL_I2C_Init+0x1dc>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d10e      	bne.n	8007e64 <HAL_I2C_Init+0x1bc>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	1e58      	subs	r0, r3, #1
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6859      	ldr	r1, [r3, #4]
 8007e4e:	460b      	mov	r3, r1
 8007e50:	005b      	lsls	r3, r3, #1
 8007e52:	440b      	add	r3, r1
 8007e54:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e58:	3301      	adds	r3, #1
 8007e5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e62:	e00f      	b.n	8007e84 <HAL_I2C_Init+0x1dc>
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	1e58      	subs	r0, r3, #1
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6859      	ldr	r1, [r3, #4]
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	440b      	add	r3, r1
 8007e72:	0099      	lsls	r1, r3, #2
 8007e74:	440b      	add	r3, r1
 8007e76:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007e84:	6879      	ldr	r1, [r7, #4]
 8007e86:	6809      	ldr	r1, [r1, #0]
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	69da      	ldr	r2, [r3, #28]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a1b      	ldr	r3, [r3, #32]
 8007e9e:	431a      	orrs	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	430a      	orrs	r2, r1
 8007ea6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007eb2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	6911      	ldr	r1, [r2, #16]
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	68d2      	ldr	r2, [r2, #12]
 8007ebe:	4311      	orrs	r1, r2
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	6812      	ldr	r2, [r2, #0]
 8007ec4:	430b      	orrs	r3, r1
 8007ec6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	695a      	ldr	r2, [r3, #20]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	699b      	ldr	r3, [r3, #24]
 8007eda:	431a      	orrs	r2, r3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	430a      	orrs	r2, r1
 8007ee2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f042 0201 	orr.w	r2, r2, #1
 8007ef2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2220      	movs	r2, #32
 8007efe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	000186a0 	.word	0x000186a0
 8007f20:	001e847f 	.word	0x001e847f
 8007f24:	003d08ff 	.word	0x003d08ff
 8007f28:	431bde83 	.word	0x431bde83
 8007f2c:	10624dd3 	.word	0x10624dd3

08007f30 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b088      	sub	sp, #32
 8007f34:	af02      	add	r7, sp, #8
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	4608      	mov	r0, r1
 8007f3a:	4611      	mov	r1, r2
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	4603      	mov	r3, r0
 8007f40:	817b      	strh	r3, [r7, #10]
 8007f42:	460b      	mov	r3, r1
 8007f44:	813b      	strh	r3, [r7, #8]
 8007f46:	4613      	mov	r3, r2
 8007f48:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007f4a:	f7fd f889 	bl	8005060 <HAL_GetTick>
 8007f4e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	2b20      	cmp	r3, #32
 8007f5a:	f040 80d9 	bne.w	8008110 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	9300      	str	r3, [sp, #0]
 8007f62:	2319      	movs	r3, #25
 8007f64:	2201      	movs	r2, #1
 8007f66:	496d      	ldr	r1, [pc, #436]	@ (800811c <HAL_I2C_Mem_Write+0x1ec>)
 8007f68:	68f8      	ldr	r0, [r7, #12]
 8007f6a:	f000 f971 	bl	8008250 <I2C_WaitOnFlagUntilTimeout>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d001      	beq.n	8007f78 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007f74:	2302      	movs	r3, #2
 8007f76:	e0cc      	b.n	8008112 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d101      	bne.n	8007f86 <HAL_I2C_Mem_Write+0x56>
 8007f82:	2302      	movs	r3, #2
 8007f84:	e0c5      	b.n	8008112 <HAL_I2C_Mem_Write+0x1e2>
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f003 0301 	and.w	r3, r3, #1
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d007      	beq.n	8007fac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f042 0201 	orr.w	r2, r2, #1
 8007faa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007fba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2221      	movs	r2, #33	@ 0x21
 8007fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2240      	movs	r2, #64	@ 0x40
 8007fc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6a3a      	ldr	r2, [r7, #32]
 8007fd6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007fdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fe2:	b29a      	uxth	r2, r3
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	4a4d      	ldr	r2, [pc, #308]	@ (8008120 <HAL_I2C_Mem_Write+0x1f0>)
 8007fec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007fee:	88f8      	ldrh	r0, [r7, #6]
 8007ff0:	893a      	ldrh	r2, [r7, #8]
 8007ff2:	8979      	ldrh	r1, [r7, #10]
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	9301      	str	r3, [sp, #4]
 8007ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ffa:	9300      	str	r3, [sp, #0]
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	68f8      	ldr	r0, [r7, #12]
 8008000:	f000 f890 	bl	8008124 <I2C_RequestMemoryWrite>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d052      	beq.n	80080b0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800800a:	2301      	movs	r3, #1
 800800c:	e081      	b.n	8008112 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800800e:	697a      	ldr	r2, [r7, #20]
 8008010:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f000 fa36 	bl	8008484 <I2C_WaitOnTXEFlagUntilTimeout>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00d      	beq.n	800803a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008022:	2b04      	cmp	r3, #4
 8008024:	d107      	bne.n	8008036 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008034:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	e06b      	b.n	8008112 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800803e:	781a      	ldrb	r2, [r3, #0]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800804a:	1c5a      	adds	r2, r3, #1
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008054:	3b01      	subs	r3, #1
 8008056:	b29a      	uxth	r2, r3
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008060:	b29b      	uxth	r3, r3
 8008062:	3b01      	subs	r3, #1
 8008064:	b29a      	uxth	r2, r3
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	695b      	ldr	r3, [r3, #20]
 8008070:	f003 0304 	and.w	r3, r3, #4
 8008074:	2b04      	cmp	r3, #4
 8008076:	d11b      	bne.n	80080b0 <HAL_I2C_Mem_Write+0x180>
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800807c:	2b00      	cmp	r3, #0
 800807e:	d017      	beq.n	80080b0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008084:	781a      	ldrb	r2, [r3, #0]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008090:	1c5a      	adds	r2, r3, #1
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800809a:	3b01      	subs	r3, #1
 800809c:	b29a      	uxth	r2, r3
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	3b01      	subs	r3, #1
 80080aa:	b29a      	uxth	r2, r3
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d1aa      	bne.n	800800e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80080b8:	697a      	ldr	r2, [r7, #20]
 80080ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f000 fa29 	bl	8008514 <I2C_WaitOnBTFFlagUntilTimeout>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d00d      	beq.n	80080e4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080cc:	2b04      	cmp	r3, #4
 80080ce:	d107      	bne.n	80080e0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80080de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80080e0:	2301      	movs	r3, #1
 80080e2:	e016      	b.n	8008112 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80080f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2220      	movs	r2, #32
 80080f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2200      	movs	r2, #0
 8008100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2200      	movs	r2, #0
 8008108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800810c:	2300      	movs	r3, #0
 800810e:	e000      	b.n	8008112 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008110:	2302      	movs	r3, #2
  }
}
 8008112:	4618      	mov	r0, r3
 8008114:	3718      	adds	r7, #24
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	00100002 	.word	0x00100002
 8008120:	ffff0000 	.word	0xffff0000

08008124 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b088      	sub	sp, #32
 8008128:	af02      	add	r7, sp, #8
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	4608      	mov	r0, r1
 800812e:	4611      	mov	r1, r2
 8008130:	461a      	mov	r2, r3
 8008132:	4603      	mov	r3, r0
 8008134:	817b      	strh	r3, [r7, #10]
 8008136:	460b      	mov	r3, r1
 8008138:	813b      	strh	r3, [r7, #8]
 800813a:	4613      	mov	r3, r2
 800813c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800814c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800814e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008150:	9300      	str	r3, [sp, #0]
 8008152:	6a3b      	ldr	r3, [r7, #32]
 8008154:	2200      	movs	r2, #0
 8008156:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800815a:	68f8      	ldr	r0, [r7, #12]
 800815c:	f000 f878 	bl	8008250 <I2C_WaitOnFlagUntilTimeout>
 8008160:	4603      	mov	r3, r0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00d      	beq.n	8008182 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008170:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008174:	d103      	bne.n	800817e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800817c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800817e:	2303      	movs	r3, #3
 8008180:	e05f      	b.n	8008242 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008182:	897b      	ldrh	r3, [r7, #10]
 8008184:	b2db      	uxtb	r3, r3
 8008186:	461a      	mov	r2, r3
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008190:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008194:	6a3a      	ldr	r2, [r7, #32]
 8008196:	492d      	ldr	r1, [pc, #180]	@ (800824c <I2C_RequestMemoryWrite+0x128>)
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	f000 f8d3 	bl	8008344 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d001      	beq.n	80081a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	e04c      	b.n	8008242 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081a8:	2300      	movs	r3, #0
 80081aa:	617b      	str	r3, [r7, #20]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	695b      	ldr	r3, [r3, #20]
 80081b2:	617b      	str	r3, [r7, #20]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	699b      	ldr	r3, [r3, #24]
 80081ba:	617b      	str	r3, [r7, #20]
 80081bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80081be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081c0:	6a39      	ldr	r1, [r7, #32]
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	f000 f95e 	bl	8008484 <I2C_WaitOnTXEFlagUntilTimeout>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00d      	beq.n	80081ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081d2:	2b04      	cmp	r3, #4
 80081d4:	d107      	bne.n	80081e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80081e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	e02b      	b.n	8008242 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80081ea:	88fb      	ldrh	r3, [r7, #6]
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d105      	bne.n	80081fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80081f0:	893b      	ldrh	r3, [r7, #8]
 80081f2:	b2da      	uxtb	r2, r3
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	611a      	str	r2, [r3, #16]
 80081fa:	e021      	b.n	8008240 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80081fc:	893b      	ldrh	r3, [r7, #8]
 80081fe:	0a1b      	lsrs	r3, r3, #8
 8008200:	b29b      	uxth	r3, r3
 8008202:	b2da      	uxtb	r2, r3
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800820a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800820c:	6a39      	ldr	r1, [r7, #32]
 800820e:	68f8      	ldr	r0, [r7, #12]
 8008210:	f000 f938 	bl	8008484 <I2C_WaitOnTXEFlagUntilTimeout>
 8008214:	4603      	mov	r3, r0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00d      	beq.n	8008236 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800821e:	2b04      	cmp	r3, #4
 8008220:	d107      	bne.n	8008232 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008230:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	e005      	b.n	8008242 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008236:	893b      	ldrh	r3, [r7, #8]
 8008238:	b2da      	uxtb	r2, r3
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008240:	2300      	movs	r3, #0
}
 8008242:	4618      	mov	r0, r3
 8008244:	3718      	adds	r7, #24
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	00010002 	.word	0x00010002

08008250 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	603b      	str	r3, [r7, #0]
 800825c:	4613      	mov	r3, r2
 800825e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008260:	e048      	b.n	80082f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008268:	d044      	beq.n	80082f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800826a:	f7fc fef9 	bl	8005060 <HAL_GetTick>
 800826e:	4602      	mov	r2, r0
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	1ad3      	subs	r3, r2, r3
 8008274:	683a      	ldr	r2, [r7, #0]
 8008276:	429a      	cmp	r2, r3
 8008278:	d302      	bcc.n	8008280 <I2C_WaitOnFlagUntilTimeout+0x30>
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d139      	bne.n	80082f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	0c1b      	lsrs	r3, r3, #16
 8008284:	b2db      	uxtb	r3, r3
 8008286:	2b01      	cmp	r3, #1
 8008288:	d10d      	bne.n	80082a6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	695b      	ldr	r3, [r3, #20]
 8008290:	43da      	mvns	r2, r3
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	4013      	ands	r3, r2
 8008296:	b29b      	uxth	r3, r3
 8008298:	2b00      	cmp	r3, #0
 800829a:	bf0c      	ite	eq
 800829c:	2301      	moveq	r3, #1
 800829e:	2300      	movne	r3, #0
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	461a      	mov	r2, r3
 80082a4:	e00c      	b.n	80082c0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	699b      	ldr	r3, [r3, #24]
 80082ac:	43da      	mvns	r2, r3
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	4013      	ands	r3, r2
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	bf0c      	ite	eq
 80082b8:	2301      	moveq	r3, #1
 80082ba:	2300      	movne	r3, #0
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	461a      	mov	r2, r3
 80082c0:	79fb      	ldrb	r3, [r7, #7]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d116      	bne.n	80082f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2200      	movs	r2, #0
 80082ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2220      	movs	r2, #32
 80082d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2200      	movs	r2, #0
 80082d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082e0:	f043 0220 	orr.w	r2, r3, #32
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2200      	movs	r2, #0
 80082ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80082f0:	2301      	movs	r3, #1
 80082f2:	e023      	b.n	800833c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	0c1b      	lsrs	r3, r3, #16
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d10d      	bne.n	800831a <I2C_WaitOnFlagUntilTimeout+0xca>
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	695b      	ldr	r3, [r3, #20]
 8008304:	43da      	mvns	r2, r3
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	4013      	ands	r3, r2
 800830a:	b29b      	uxth	r3, r3
 800830c:	2b00      	cmp	r3, #0
 800830e:	bf0c      	ite	eq
 8008310:	2301      	moveq	r3, #1
 8008312:	2300      	movne	r3, #0
 8008314:	b2db      	uxtb	r3, r3
 8008316:	461a      	mov	r2, r3
 8008318:	e00c      	b.n	8008334 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	699b      	ldr	r3, [r3, #24]
 8008320:	43da      	mvns	r2, r3
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	4013      	ands	r3, r2
 8008326:	b29b      	uxth	r3, r3
 8008328:	2b00      	cmp	r3, #0
 800832a:	bf0c      	ite	eq
 800832c:	2301      	moveq	r3, #1
 800832e:	2300      	movne	r3, #0
 8008330:	b2db      	uxtb	r3, r3
 8008332:	461a      	mov	r2, r3
 8008334:	79fb      	ldrb	r3, [r7, #7]
 8008336:	429a      	cmp	r2, r3
 8008338:	d093      	beq.n	8008262 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800833a:	2300      	movs	r3, #0
}
 800833c:	4618      	mov	r0, r3
 800833e:	3710      	adds	r7, #16
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b084      	sub	sp, #16
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	607a      	str	r2, [r7, #4]
 8008350:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008352:	e071      	b.n	8008438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	695b      	ldr	r3, [r3, #20]
 800835a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800835e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008362:	d123      	bne.n	80083ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008372:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800837c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2200      	movs	r2, #0
 8008382:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2220      	movs	r2, #32
 8008388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2200      	movs	r2, #0
 8008390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008398:	f043 0204 	orr.w	r2, r3, #4
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80083a8:	2301      	movs	r3, #1
 80083aa:	e067      	b.n	800847c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083b2:	d041      	beq.n	8008438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083b4:	f7fc fe54 	bl	8005060 <HAL_GetTick>
 80083b8:	4602      	mov	r2, r0
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	1ad3      	subs	r3, r2, r3
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d302      	bcc.n	80083ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d136      	bne.n	8008438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	0c1b      	lsrs	r3, r3, #16
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d10c      	bne.n	80083ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	695b      	ldr	r3, [r3, #20]
 80083da:	43da      	mvns	r2, r3
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	4013      	ands	r3, r2
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	bf14      	ite	ne
 80083e6:	2301      	movne	r3, #1
 80083e8:	2300      	moveq	r3, #0
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	e00b      	b.n	8008406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	699b      	ldr	r3, [r3, #24]
 80083f4:	43da      	mvns	r2, r3
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	4013      	ands	r3, r2
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	bf14      	ite	ne
 8008400:	2301      	movne	r3, #1
 8008402:	2300      	moveq	r3, #0
 8008404:	b2db      	uxtb	r3, r3
 8008406:	2b00      	cmp	r3, #0
 8008408:	d016      	beq.n	8008438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2200      	movs	r2, #0
 800840e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2220      	movs	r2, #32
 8008414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2200      	movs	r2, #0
 800841c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008424:	f043 0220 	orr.w	r2, r3, #32
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2200      	movs	r2, #0
 8008430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	e021      	b.n	800847c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	0c1b      	lsrs	r3, r3, #16
 800843c:	b2db      	uxtb	r3, r3
 800843e:	2b01      	cmp	r3, #1
 8008440:	d10c      	bne.n	800845c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	695b      	ldr	r3, [r3, #20]
 8008448:	43da      	mvns	r2, r3
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	4013      	ands	r3, r2
 800844e:	b29b      	uxth	r3, r3
 8008450:	2b00      	cmp	r3, #0
 8008452:	bf14      	ite	ne
 8008454:	2301      	movne	r3, #1
 8008456:	2300      	moveq	r3, #0
 8008458:	b2db      	uxtb	r3, r3
 800845a:	e00b      	b.n	8008474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	699b      	ldr	r3, [r3, #24]
 8008462:	43da      	mvns	r2, r3
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	4013      	ands	r3, r2
 8008468:	b29b      	uxth	r3, r3
 800846a:	2b00      	cmp	r3, #0
 800846c:	bf14      	ite	ne
 800846e:	2301      	movne	r3, #1
 8008470:	2300      	moveq	r3, #0
 8008472:	b2db      	uxtb	r3, r3
 8008474:	2b00      	cmp	r3, #0
 8008476:	f47f af6d 	bne.w	8008354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800847a:	2300      	movs	r3, #0
}
 800847c:	4618      	mov	r0, r3
 800847e:	3710      	adds	r7, #16
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008490:	e034      	b.n	80084fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	f000 f886 	bl	80085a4 <I2C_IsAcknowledgeFailed>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d001      	beq.n	80084a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e034      	b.n	800850c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084a8:	d028      	beq.n	80084fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084aa:	f7fc fdd9 	bl	8005060 <HAL_GetTick>
 80084ae:	4602      	mov	r2, r0
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	1ad3      	subs	r3, r2, r3
 80084b4:	68ba      	ldr	r2, [r7, #8]
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d302      	bcc.n	80084c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d11d      	bne.n	80084fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	695b      	ldr	r3, [r3, #20]
 80084c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084ca:	2b80      	cmp	r3, #128	@ 0x80
 80084cc:	d016      	beq.n	80084fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2200      	movs	r2, #0
 80084d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2220      	movs	r2, #32
 80084d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2200      	movs	r2, #0
 80084e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084e8:	f043 0220 	orr.w	r2, r3, #32
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2200      	movs	r2, #0
 80084f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80084f8:	2301      	movs	r3, #1
 80084fa:	e007      	b.n	800850c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	695b      	ldr	r3, [r3, #20]
 8008502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008506:	2b80      	cmp	r3, #128	@ 0x80
 8008508:	d1c3      	bne.n	8008492 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800850a:	2300      	movs	r3, #0
}
 800850c:	4618      	mov	r0, r3
 800850e:	3710      	adds	r7, #16
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008520:	e034      	b.n	800858c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008522:	68f8      	ldr	r0, [r7, #12]
 8008524:	f000 f83e 	bl	80085a4 <I2C_IsAcknowledgeFailed>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d001      	beq.n	8008532 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	e034      	b.n	800859c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008538:	d028      	beq.n	800858c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800853a:	f7fc fd91 	bl	8005060 <HAL_GetTick>
 800853e:	4602      	mov	r2, r0
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	1ad3      	subs	r3, r2, r3
 8008544:	68ba      	ldr	r2, [r7, #8]
 8008546:	429a      	cmp	r2, r3
 8008548:	d302      	bcc.n	8008550 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d11d      	bne.n	800858c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	695b      	ldr	r3, [r3, #20]
 8008556:	f003 0304 	and.w	r3, r3, #4
 800855a:	2b04      	cmp	r3, #4
 800855c:	d016      	beq.n	800858c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2200      	movs	r2, #0
 8008562:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2220      	movs	r2, #32
 8008568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2200      	movs	r2, #0
 8008570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008578:	f043 0220 	orr.w	r2, r3, #32
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2200      	movs	r2, #0
 8008584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	e007      	b.n	800859c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	695b      	ldr	r3, [r3, #20]
 8008592:	f003 0304 	and.w	r3, r3, #4
 8008596:	2b04      	cmp	r3, #4
 8008598:	d1c3      	bne.n	8008522 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800859a:	2300      	movs	r3, #0
}
 800859c:	4618      	mov	r0, r3
 800859e:	3710      	adds	r7, #16
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	695b      	ldr	r3, [r3, #20]
 80085b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085ba:	d11b      	bne.n	80085f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80085c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2220      	movs	r2, #32
 80085d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085e0:	f043 0204 	orr.w	r2, r3, #4
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80085f0:	2301      	movs	r3, #1
 80085f2:	e000      	b.n	80085f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	370c      	adds	r7, #12
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bc80      	pop	{r7}
 80085fe:	4770      	bx	lr

08008600 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b08a      	sub	sp, #40	@ 0x28
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d101      	bne.n	8008612 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800860e:	2301      	movs	r3, #1
 8008610:	e23b      	b.n	8008a8a <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f003 0301 	and.w	r3, r3, #1
 800861a:	2b00      	cmp	r3, #0
 800861c:	d050      	beq.n	80086c0 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800861e:	4b9e      	ldr	r3, [pc, #632]	@ (8008898 <HAL_RCC_OscConfig+0x298>)
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	f003 030c 	and.w	r3, r3, #12
 8008626:	2b04      	cmp	r3, #4
 8008628:	d00c      	beq.n	8008644 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800862a:	4b9b      	ldr	r3, [pc, #620]	@ (8008898 <HAL_RCC_OscConfig+0x298>)
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008632:	2b08      	cmp	r3, #8
 8008634:	d112      	bne.n	800865c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008636:	4b98      	ldr	r3, [pc, #608]	@ (8008898 <HAL_RCC_OscConfig+0x298>)
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800863e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008642:	d10b      	bne.n	800865c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008644:	4b94      	ldr	r3, [pc, #592]	@ (8008898 <HAL_RCC_OscConfig+0x298>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800864c:	2b00      	cmp	r3, #0
 800864e:	d036      	beq.n	80086be <HAL_RCC_OscConfig+0xbe>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d132      	bne.n	80086be <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	e216      	b.n	8008a8a <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	685a      	ldr	r2, [r3, #4]
 8008660:	4b8e      	ldr	r3, [pc, #568]	@ (800889c <HAL_RCC_OscConfig+0x29c>)
 8008662:	b2d2      	uxtb	r2, r2
 8008664:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d013      	beq.n	8008696 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800866e:	f7fc fcf7 	bl	8005060 <HAL_GetTick>
 8008672:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008674:	e008      	b.n	8008688 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008676:	f7fc fcf3 	bl	8005060 <HAL_GetTick>
 800867a:	4602      	mov	r2, r0
 800867c:	6a3b      	ldr	r3, [r7, #32]
 800867e:	1ad3      	subs	r3, r2, r3
 8008680:	2b64      	cmp	r3, #100	@ 0x64
 8008682:	d901      	bls.n	8008688 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8008684:	2303      	movs	r3, #3
 8008686:	e200      	b.n	8008a8a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008688:	4b83      	ldr	r3, [pc, #524]	@ (8008898 <HAL_RCC_OscConfig+0x298>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008690:	2b00      	cmp	r3, #0
 8008692:	d0f0      	beq.n	8008676 <HAL_RCC_OscConfig+0x76>
 8008694:	e014      	b.n	80086c0 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008696:	f7fc fce3 	bl	8005060 <HAL_GetTick>
 800869a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800869c:	e008      	b.n	80086b0 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800869e:	f7fc fcdf 	bl	8005060 <HAL_GetTick>
 80086a2:	4602      	mov	r2, r0
 80086a4:	6a3b      	ldr	r3, [r7, #32]
 80086a6:	1ad3      	subs	r3, r2, r3
 80086a8:	2b64      	cmp	r3, #100	@ 0x64
 80086aa:	d901      	bls.n	80086b0 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 80086ac:	2303      	movs	r3, #3
 80086ae:	e1ec      	b.n	8008a8a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80086b0:	4b79      	ldr	r3, [pc, #484]	@ (8008898 <HAL_RCC_OscConfig+0x298>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d1f0      	bne.n	800869e <HAL_RCC_OscConfig+0x9e>
 80086bc:	e000      	b.n	80086c0 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086be:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f003 0302 	and.w	r3, r3, #2
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d077      	beq.n	80087bc <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80086cc:	4b72      	ldr	r3, [pc, #456]	@ (8008898 <HAL_RCC_OscConfig+0x298>)
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	f003 030c 	and.w	r3, r3, #12
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00b      	beq.n	80086f0 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80086d8:	4b6f      	ldr	r3, [pc, #444]	@ (8008898 <HAL_RCC_OscConfig+0x298>)
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80086e0:	2b08      	cmp	r3, #8
 80086e2:	d126      	bne.n	8008732 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80086e4:	4b6c      	ldr	r3, [pc, #432]	@ (8008898 <HAL_RCC_OscConfig+0x298>)
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d120      	bne.n	8008732 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80086f0:	4b69      	ldr	r3, [pc, #420]	@ (8008898 <HAL_RCC_OscConfig+0x298>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 0302 	and.w	r3, r3, #2
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d005      	beq.n	8008708 <HAL_RCC_OscConfig+0x108>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	2b01      	cmp	r3, #1
 8008702:	d001      	beq.n	8008708 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008704:	2301      	movs	r3, #1
 8008706:	e1c0      	b.n	8008a8a <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008708:	4b63      	ldr	r3, [pc, #396]	@ (8008898 <HAL_RCC_OscConfig+0x298>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	691b      	ldr	r3, [r3, #16]
 8008714:	21f8      	movs	r1, #248	@ 0xf8
 8008716:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008718:	68f9      	ldr	r1, [r7, #12]
 800871a:	fa91 f1a1 	rbit	r1, r1
 800871e:	6139      	str	r1, [r7, #16]
  return result;
 8008720:	6939      	ldr	r1, [r7, #16]
 8008722:	fab1 f181 	clz	r1, r1
 8008726:	b2c9      	uxtb	r1, r1
 8008728:	408b      	lsls	r3, r1
 800872a:	495b      	ldr	r1, [pc, #364]	@ (8008898 <HAL_RCC_OscConfig+0x298>)
 800872c:	4313      	orrs	r3, r2
 800872e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008730:	e044      	b.n	80087bc <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d02a      	beq.n	8008790 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800873a:	4b59      	ldr	r3, [pc, #356]	@ (80088a0 <HAL_RCC_OscConfig+0x2a0>)
 800873c:	2201      	movs	r2, #1
 800873e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008740:	f7fc fc8e 	bl	8005060 <HAL_GetTick>
 8008744:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008746:	e008      	b.n	800875a <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008748:	f7fc fc8a 	bl	8005060 <HAL_GetTick>
 800874c:	4602      	mov	r2, r0
 800874e:	6a3b      	ldr	r3, [r7, #32]
 8008750:	1ad3      	subs	r3, r2, r3
 8008752:	2b02      	cmp	r3, #2
 8008754:	d901      	bls.n	800875a <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8008756:	2303      	movs	r3, #3
 8008758:	e197      	b.n	8008a8a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800875a:	4b4f      	ldr	r3, [pc, #316]	@ (8008898 <HAL_RCC_OscConfig+0x298>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f003 0302 	and.w	r3, r3, #2
 8008762:	2b00      	cmp	r3, #0
 8008764:	d0f0      	beq.n	8008748 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008766:	4b4c      	ldr	r3, [pc, #304]	@ (8008898 <HAL_RCC_OscConfig+0x298>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	691b      	ldr	r3, [r3, #16]
 8008772:	21f8      	movs	r1, #248	@ 0xf8
 8008774:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008776:	6979      	ldr	r1, [r7, #20]
 8008778:	fa91 f1a1 	rbit	r1, r1
 800877c:	61b9      	str	r1, [r7, #24]
  return result;
 800877e:	69b9      	ldr	r1, [r7, #24]
 8008780:	fab1 f181 	clz	r1, r1
 8008784:	b2c9      	uxtb	r1, r1
 8008786:	408b      	lsls	r3, r1
 8008788:	4943      	ldr	r1, [pc, #268]	@ (8008898 <HAL_RCC_OscConfig+0x298>)
 800878a:	4313      	orrs	r3, r2
 800878c:	600b      	str	r3, [r1, #0]
 800878e:	e015      	b.n	80087bc <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008790:	4b43      	ldr	r3, [pc, #268]	@ (80088a0 <HAL_RCC_OscConfig+0x2a0>)
 8008792:	2200      	movs	r2, #0
 8008794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008796:	f7fc fc63 	bl	8005060 <HAL_GetTick>
 800879a:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800879c:	e008      	b.n	80087b0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800879e:	f7fc fc5f 	bl	8005060 <HAL_GetTick>
 80087a2:	4602      	mov	r2, r0
 80087a4:	6a3b      	ldr	r3, [r7, #32]
 80087a6:	1ad3      	subs	r3, r2, r3
 80087a8:	2b02      	cmp	r3, #2
 80087aa:	d901      	bls.n	80087b0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80087ac:	2303      	movs	r3, #3
 80087ae:	e16c      	b.n	8008a8a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087b0:	4b39      	ldr	r3, [pc, #228]	@ (8008898 <HAL_RCC_OscConfig+0x298>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f003 0302 	and.w	r3, r3, #2
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d1f0      	bne.n	800879e <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f003 0308 	and.w	r3, r3, #8
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d030      	beq.n	800882a <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	695b      	ldr	r3, [r3, #20]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d016      	beq.n	80087fe <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80087d0:	4b34      	ldr	r3, [pc, #208]	@ (80088a4 <HAL_RCC_OscConfig+0x2a4>)
 80087d2:	2201      	movs	r2, #1
 80087d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80087d6:	f7fc fc43 	bl	8005060 <HAL_GetTick>
 80087da:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80087dc:	e008      	b.n	80087f0 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80087de:	f7fc fc3f 	bl	8005060 <HAL_GetTick>
 80087e2:	4602      	mov	r2, r0
 80087e4:	6a3b      	ldr	r3, [r7, #32]
 80087e6:	1ad3      	subs	r3, r2, r3
 80087e8:	2b02      	cmp	r3, #2
 80087ea:	d901      	bls.n	80087f0 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 80087ec:	2303      	movs	r3, #3
 80087ee:	e14c      	b.n	8008a8a <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80087f0:	4b29      	ldr	r3, [pc, #164]	@ (8008898 <HAL_RCC_OscConfig+0x298>)
 80087f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087f4:	f003 0302 	and.w	r3, r3, #2
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d0f0      	beq.n	80087de <HAL_RCC_OscConfig+0x1de>
 80087fc:	e015      	b.n	800882a <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80087fe:	4b29      	ldr	r3, [pc, #164]	@ (80088a4 <HAL_RCC_OscConfig+0x2a4>)
 8008800:	2200      	movs	r2, #0
 8008802:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008804:	f7fc fc2c 	bl	8005060 <HAL_GetTick>
 8008808:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800880a:	e008      	b.n	800881e <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800880c:	f7fc fc28 	bl	8005060 <HAL_GetTick>
 8008810:	4602      	mov	r2, r0
 8008812:	6a3b      	ldr	r3, [r7, #32]
 8008814:	1ad3      	subs	r3, r2, r3
 8008816:	2b02      	cmp	r3, #2
 8008818:	d901      	bls.n	800881e <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 800881a:	2303      	movs	r3, #3
 800881c:	e135      	b.n	8008a8a <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800881e:	4b1e      	ldr	r3, [pc, #120]	@ (8008898 <HAL_RCC_OscConfig+0x298>)
 8008820:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008822:	f003 0302 	and.w	r3, r3, #2
 8008826:	2b00      	cmp	r3, #0
 8008828:	d1f0      	bne.n	800880c <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f003 0304 	and.w	r3, r3, #4
 8008832:	2b00      	cmp	r3, #0
 8008834:	f000 8087 	beq.w	8008946 <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008838:	2300      	movs	r3, #0
 800883a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800883e:	4b16      	ldr	r3, [pc, #88]	@ (8008898 <HAL_RCC_OscConfig+0x298>)
 8008840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008846:	2b00      	cmp	r3, #0
 8008848:	d110      	bne.n	800886c <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800884a:	2300      	movs	r3, #0
 800884c:	60bb      	str	r3, [r7, #8]
 800884e:	4b12      	ldr	r3, [pc, #72]	@ (8008898 <HAL_RCC_OscConfig+0x298>)
 8008850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008852:	4a11      	ldr	r2, [pc, #68]	@ (8008898 <HAL_RCC_OscConfig+0x298>)
 8008854:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008858:	6413      	str	r3, [r2, #64]	@ 0x40
 800885a:	4b0f      	ldr	r3, [pc, #60]	@ (8008898 <HAL_RCC_OscConfig+0x298>)
 800885c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800885e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008862:	60bb      	str	r3, [r7, #8]
 8008864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008866:	2301      	movs	r3, #1
 8008868:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800886c:	4b0e      	ldr	r3, [pc, #56]	@ (80088a8 <HAL_RCC_OscConfig+0x2a8>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a0d      	ldr	r2, [pc, #52]	@ (80088a8 <HAL_RCC_OscConfig+0x2a8>)
 8008872:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008876:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008878:	4b0b      	ldr	r3, [pc, #44]	@ (80088a8 <HAL_RCC_OscConfig+0x2a8>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008880:	2b00      	cmp	r3, #0
 8008882:	d122      	bne.n	80088ca <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008884:	4b08      	ldr	r3, [pc, #32]	@ (80088a8 <HAL_RCC_OscConfig+0x2a8>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a07      	ldr	r2, [pc, #28]	@ (80088a8 <HAL_RCC_OscConfig+0x2a8>)
 800888a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800888e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008890:	f7fc fbe6 	bl	8005060 <HAL_GetTick>
 8008894:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008896:	e012      	b.n	80088be <HAL_RCC_OscConfig+0x2be>
 8008898:	40023800 	.word	0x40023800
 800889c:	40023802 	.word	0x40023802
 80088a0:	42470000 	.word	0x42470000
 80088a4:	42470e80 	.word	0x42470e80
 80088a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088ac:	f7fc fbd8 	bl	8005060 <HAL_GetTick>
 80088b0:	4602      	mov	r2, r0
 80088b2:	6a3b      	ldr	r3, [r7, #32]
 80088b4:	1ad3      	subs	r3, r2, r3
 80088b6:	2b02      	cmp	r3, #2
 80088b8:	d901      	bls.n	80088be <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 80088ba:	2303      	movs	r3, #3
 80088bc:	e0e5      	b.n	8008a8a <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088be:	4b75      	ldr	r3, [pc, #468]	@ (8008a94 <HAL_RCC_OscConfig+0x494>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d0f0      	beq.n	80088ac <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	689a      	ldr	r2, [r3, #8]
 80088ce:	4b72      	ldr	r3, [pc, #456]	@ (8008a98 <HAL_RCC_OscConfig+0x498>)
 80088d0:	b2d2      	uxtb	r2, r2
 80088d2:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d015      	beq.n	8008908 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80088dc:	f7fc fbc0 	bl	8005060 <HAL_GetTick>
 80088e0:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088e2:	e00a      	b.n	80088fa <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80088e4:	f7fc fbbc 	bl	8005060 <HAL_GetTick>
 80088e8:	4602      	mov	r2, r0
 80088ea:	6a3b      	ldr	r3, [r7, #32]
 80088ec:	1ad3      	subs	r3, r2, r3
 80088ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d901      	bls.n	80088fa <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 80088f6:	2303      	movs	r3, #3
 80088f8:	e0c7      	b.n	8008a8a <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088fa:	4b68      	ldr	r3, [pc, #416]	@ (8008a9c <HAL_RCC_OscConfig+0x49c>)
 80088fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088fe:	f003 0302 	and.w	r3, r3, #2
 8008902:	2b00      	cmp	r3, #0
 8008904:	d0ee      	beq.n	80088e4 <HAL_RCC_OscConfig+0x2e4>
 8008906:	e014      	b.n	8008932 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008908:	f7fc fbaa 	bl	8005060 <HAL_GetTick>
 800890c:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800890e:	e00a      	b.n	8008926 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008910:	f7fc fba6 	bl	8005060 <HAL_GetTick>
 8008914:	4602      	mov	r2, r0
 8008916:	6a3b      	ldr	r3, [r7, #32]
 8008918:	1ad3      	subs	r3, r2, r3
 800891a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800891e:	4293      	cmp	r3, r2
 8008920:	d901      	bls.n	8008926 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8008922:	2303      	movs	r3, #3
 8008924:	e0b1      	b.n	8008a8a <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008926:	4b5d      	ldr	r3, [pc, #372]	@ (8008a9c <HAL_RCC_OscConfig+0x49c>)
 8008928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800892a:	f003 0302 	and.w	r3, r3, #2
 800892e:	2b00      	cmp	r3, #0
 8008930:	d1ee      	bne.n	8008910 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008932:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008936:	2b01      	cmp	r3, #1
 8008938:	d105      	bne.n	8008946 <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800893a:	4b58      	ldr	r3, [pc, #352]	@ (8008a9c <HAL_RCC_OscConfig+0x49c>)
 800893c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800893e:	4a57      	ldr	r2, [pc, #348]	@ (8008a9c <HAL_RCC_OscConfig+0x49c>)
 8008940:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008944:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	699b      	ldr	r3, [r3, #24]
 800894a:	2b00      	cmp	r3, #0
 800894c:	f000 809c 	beq.w	8008a88 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008950:	4b52      	ldr	r3, [pc, #328]	@ (8008a9c <HAL_RCC_OscConfig+0x49c>)
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	f003 030c 	and.w	r3, r3, #12
 8008958:	2b08      	cmp	r3, #8
 800895a:	d061      	beq.n	8008a20 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	699b      	ldr	r3, [r3, #24]
 8008960:	2b02      	cmp	r3, #2
 8008962:	d146      	bne.n	80089f2 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008964:	4b4e      	ldr	r3, [pc, #312]	@ (8008aa0 <HAL_RCC_OscConfig+0x4a0>)
 8008966:	2200      	movs	r2, #0
 8008968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800896a:	f7fc fb79 	bl	8005060 <HAL_GetTick>
 800896e:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008970:	e008      	b.n	8008984 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008972:	f7fc fb75 	bl	8005060 <HAL_GetTick>
 8008976:	4602      	mov	r2, r0
 8008978:	6a3b      	ldr	r3, [r7, #32]
 800897a:	1ad3      	subs	r3, r2, r3
 800897c:	2b64      	cmp	r3, #100	@ 0x64
 800897e:	d901      	bls.n	8008984 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8008980:	2303      	movs	r3, #3
 8008982:	e082      	b.n	8008a8a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008984:	4b45      	ldr	r3, [pc, #276]	@ (8008a9c <HAL_RCC_OscConfig+0x49c>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800898c:	2b00      	cmp	r3, #0
 800898e:	d1f0      	bne.n	8008972 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008990:	4b42      	ldr	r3, [pc, #264]	@ (8008a9c <HAL_RCC_OscConfig+0x49c>)
 8008992:	685a      	ldr	r2, [r3, #4]
 8008994:	4b43      	ldr	r3, [pc, #268]	@ (8008aa4 <HAL_RCC_OscConfig+0x4a4>)
 8008996:	4013      	ands	r3, r2
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	69d1      	ldr	r1, [r2, #28]
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	6a12      	ldr	r2, [r2, #32]
 80089a0:	4311      	orrs	r1, r2
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80089a6:	0192      	lsls	r2, r2, #6
 80089a8:	4311      	orrs	r1, r2
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80089ae:	0612      	lsls	r2, r2, #24
 80089b0:	4311      	orrs	r1, r2
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80089b6:	0852      	lsrs	r2, r2, #1
 80089b8:	3a01      	subs	r2, #1
 80089ba:	0412      	lsls	r2, r2, #16
 80089bc:	430a      	orrs	r2, r1
 80089be:	4937      	ldr	r1, [pc, #220]	@ (8008a9c <HAL_RCC_OscConfig+0x49c>)
 80089c0:	4313      	orrs	r3, r2
 80089c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80089c4:	4b36      	ldr	r3, [pc, #216]	@ (8008aa0 <HAL_RCC_OscConfig+0x4a0>)
 80089c6:	2201      	movs	r2, #1
 80089c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089ca:	f7fc fb49 	bl	8005060 <HAL_GetTick>
 80089ce:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089d0:	e008      	b.n	80089e4 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089d2:	f7fc fb45 	bl	8005060 <HAL_GetTick>
 80089d6:	4602      	mov	r2, r0
 80089d8:	6a3b      	ldr	r3, [r7, #32]
 80089da:	1ad3      	subs	r3, r2, r3
 80089dc:	2b64      	cmp	r3, #100	@ 0x64
 80089de:	d901      	bls.n	80089e4 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 80089e0:	2303      	movs	r3, #3
 80089e2:	e052      	b.n	8008a8a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089e4:	4b2d      	ldr	r3, [pc, #180]	@ (8008a9c <HAL_RCC_OscConfig+0x49c>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d0f0      	beq.n	80089d2 <HAL_RCC_OscConfig+0x3d2>
 80089f0:	e04a      	b.n	8008a88 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089f2:	4b2b      	ldr	r3, [pc, #172]	@ (8008aa0 <HAL_RCC_OscConfig+0x4a0>)
 80089f4:	2200      	movs	r2, #0
 80089f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089f8:	f7fc fb32 	bl	8005060 <HAL_GetTick>
 80089fc:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089fe:	e008      	b.n	8008a12 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a00:	f7fc fb2e 	bl	8005060 <HAL_GetTick>
 8008a04:	4602      	mov	r2, r0
 8008a06:	6a3b      	ldr	r3, [r7, #32]
 8008a08:	1ad3      	subs	r3, r2, r3
 8008a0a:	2b64      	cmp	r3, #100	@ 0x64
 8008a0c:	d901      	bls.n	8008a12 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8008a0e:	2303      	movs	r3, #3
 8008a10:	e03b      	b.n	8008a8a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a12:	4b22      	ldr	r3, [pc, #136]	@ (8008a9c <HAL_RCC_OscConfig+0x49c>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d1f0      	bne.n	8008a00 <HAL_RCC_OscConfig+0x400>
 8008a1e:	e033      	b.n	8008a88 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	699b      	ldr	r3, [r3, #24]
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d101      	bne.n	8008a2c <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e02e      	b.n	8008a8a <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8008a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8008a9c <HAL_RCC_OscConfig+0x49c>)
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	69db      	ldr	r3, [r3, #28]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d121      	bne.n	8008a84 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d11a      	bne.n	8008a84 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008a4e:	69fa      	ldr	r2, [r7, #28]
 8008a50:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008a54:	4013      	ands	r3, r2
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008a5a:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d111      	bne.n	8008a84 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a6a:	085b      	lsrs	r3, r3, #1
 8008a6c:	3b01      	subs	r3, #1
 8008a6e:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d107      	bne.n	8008a84 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a7e:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d001      	beq.n	8008a88 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	e000      	b.n	8008a8a <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3728      	adds	r7, #40	@ 0x28
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	40007000 	.word	0x40007000
 8008a98:	40023870 	.word	0x40023870
 8008a9c:	40023800 	.word	0x40023800
 8008aa0:	42470060 	.word	0x42470060
 8008aa4:	f0bc8000 	.word	0xf0bc8000

08008aa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b086      	sub	sp, #24
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d101      	bne.n	8008abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e0d2      	b.n	8008c62 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008abc:	4b6b      	ldr	r3, [pc, #428]	@ (8008c6c <HAL_RCC_ClockConfig+0x1c4>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f003 030f 	and.w	r3, r3, #15
 8008ac4:	683a      	ldr	r2, [r7, #0]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d90c      	bls.n	8008ae4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008aca:	4b68      	ldr	r3, [pc, #416]	@ (8008c6c <HAL_RCC_ClockConfig+0x1c4>)
 8008acc:	683a      	ldr	r2, [r7, #0]
 8008ace:	b2d2      	uxtb	r2, r2
 8008ad0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ad2:	4b66      	ldr	r3, [pc, #408]	@ (8008c6c <HAL_RCC_ClockConfig+0x1c4>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f003 030f 	and.w	r3, r3, #15
 8008ada:	683a      	ldr	r2, [r7, #0]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d001      	beq.n	8008ae4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e0be      	b.n	8008c62 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f003 0302 	and.w	r3, r3, #2
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d020      	beq.n	8008b32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f003 0304 	and.w	r3, r3, #4
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d005      	beq.n	8008b08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008afc:	4b5c      	ldr	r3, [pc, #368]	@ (8008c70 <HAL_RCC_ClockConfig+0x1c8>)
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	4a5b      	ldr	r2, [pc, #364]	@ (8008c70 <HAL_RCC_ClockConfig+0x1c8>)
 8008b02:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008b06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 0308 	and.w	r3, r3, #8
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d005      	beq.n	8008b20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8008b14:	4b56      	ldr	r3, [pc, #344]	@ (8008c70 <HAL_RCC_ClockConfig+0x1c8>)
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	4a55      	ldr	r2, [pc, #340]	@ (8008c70 <HAL_RCC_ClockConfig+0x1c8>)
 8008b1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008b1e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b20:	4b53      	ldr	r3, [pc, #332]	@ (8008c70 <HAL_RCC_ClockConfig+0x1c8>)
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	4950      	ldr	r1, [pc, #320]	@ (8008c70 <HAL_RCC_ClockConfig+0x1c8>)
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f003 0301 	and.w	r3, r3, #1
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d040      	beq.n	8008bc0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d107      	bne.n	8008b56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b46:	4b4a      	ldr	r3, [pc, #296]	@ (8008c70 <HAL_RCC_ClockConfig+0x1c8>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d115      	bne.n	8008b7e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	e085      	b.n	8008c62 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	2b02      	cmp	r3, #2
 8008b5c:	d107      	bne.n	8008b6e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b5e:	4b44      	ldr	r3, [pc, #272]	@ (8008c70 <HAL_RCC_ClockConfig+0x1c8>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d109      	bne.n	8008b7e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e079      	b.n	8008c62 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b6e:	4b40      	ldr	r3, [pc, #256]	@ (8008c70 <HAL_RCC_ClockConfig+0x1c8>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f003 0302 	and.w	r3, r3, #2
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d101      	bne.n	8008b7e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e071      	b.n	8008c62 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008b7e:	4b3c      	ldr	r3, [pc, #240]	@ (8008c70 <HAL_RCC_ClockConfig+0x1c8>)
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	f023 0203 	bic.w	r2, r3, #3
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	4939      	ldr	r1, [pc, #228]	@ (8008c70 <HAL_RCC_ClockConfig+0x1c8>)
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008b90:	f7fc fa66 	bl	8005060 <HAL_GetTick>
 8008b94:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b96:	e00a      	b.n	8008bae <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b98:	f7fc fa62 	bl	8005060 <HAL_GetTick>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	1ad3      	subs	r3, r2, r3
 8008ba2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d901      	bls.n	8008bae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8008baa:	2303      	movs	r3, #3
 8008bac:	e059      	b.n	8008c62 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bae:	4b30      	ldr	r3, [pc, #192]	@ (8008c70 <HAL_RCC_ClockConfig+0x1c8>)
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	f003 020c 	and.w	r2, r3, #12
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d1eb      	bne.n	8008b98 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008bc0:	4b2a      	ldr	r3, [pc, #168]	@ (8008c6c <HAL_RCC_ClockConfig+0x1c4>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f003 030f 	and.w	r3, r3, #15
 8008bc8:	683a      	ldr	r2, [r7, #0]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d20c      	bcs.n	8008be8 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bce:	4b27      	ldr	r3, [pc, #156]	@ (8008c6c <HAL_RCC_ClockConfig+0x1c4>)
 8008bd0:	683a      	ldr	r2, [r7, #0]
 8008bd2:	b2d2      	uxtb	r2, r2
 8008bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bd6:	4b25      	ldr	r3, [pc, #148]	@ (8008c6c <HAL_RCC_ClockConfig+0x1c4>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f003 030f 	and.w	r3, r3, #15
 8008bde:	683a      	ldr	r2, [r7, #0]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d001      	beq.n	8008be8 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8008be4:	2301      	movs	r3, #1
 8008be6:	e03c      	b.n	8008c62 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f003 0304 	and.w	r3, r3, #4
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d008      	beq.n	8008c06 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008bf4:	4b1e      	ldr	r3, [pc, #120]	@ (8008c70 <HAL_RCC_ClockConfig+0x1c8>)
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	491b      	ldr	r1, [pc, #108]	@ (8008c70 <HAL_RCC_ClockConfig+0x1c8>)
 8008c02:	4313      	orrs	r3, r2
 8008c04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f003 0308 	and.w	r3, r3, #8
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d009      	beq.n	8008c26 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008c12:	4b17      	ldr	r3, [pc, #92]	@ (8008c70 <HAL_RCC_ClockConfig+0x1c8>)
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	691b      	ldr	r3, [r3, #16]
 8008c1e:	00db      	lsls	r3, r3, #3
 8008c20:	4913      	ldr	r1, [pc, #76]	@ (8008c70 <HAL_RCC_ClockConfig+0x1c8>)
 8008c22:	4313      	orrs	r3, r2
 8008c24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8008c26:	f000 f82b 	bl	8008c80 <HAL_RCC_GetSysClockFreq>
 8008c2a:	4601      	mov	r1, r0
 8008c2c:	4b10      	ldr	r3, [pc, #64]	@ (8008c70 <HAL_RCC_ClockConfig+0x1c8>)
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008c34:	22f0      	movs	r2, #240	@ 0xf0
 8008c36:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c38:	68fa      	ldr	r2, [r7, #12]
 8008c3a:	fa92 f2a2 	rbit	r2, r2
 8008c3e:	613a      	str	r2, [r7, #16]
  return result;
 8008c40:	693a      	ldr	r2, [r7, #16]
 8008c42:	fab2 f282 	clz	r2, r2
 8008c46:	b2d2      	uxtb	r2, r2
 8008c48:	40d3      	lsrs	r3, r2
 8008c4a:	4a0a      	ldr	r2, [pc, #40]	@ (8008c74 <HAL_RCC_ClockConfig+0x1cc>)
 8008c4c:	5cd3      	ldrb	r3, [r2, r3]
 8008c4e:	fa21 f303 	lsr.w	r3, r1, r3
 8008c52:	4a09      	ldr	r2, [pc, #36]	@ (8008c78 <HAL_RCC_ClockConfig+0x1d0>)
 8008c54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008c56:	4b09      	ldr	r3, [pc, #36]	@ (8008c7c <HAL_RCC_ClockConfig+0x1d4>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f7fc f9be 	bl	8004fdc <HAL_InitTick>

  return HAL_OK;
 8008c60:	2300      	movs	r3, #0
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3718      	adds	r7, #24
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	40023c00 	.word	0x40023c00
 8008c70:	40023800 	.word	0x40023800
 8008c74:	08025fc8 	.word	0x08025fc8
 8008c78:	20000070 	.word	0x20000070
 8008c7c:	200000c0 	.word	0x200000c0

08008c80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c84:	b090      	sub	sp, #64	@ 0x40
 8008c86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c90:	2300      	movs	r3, #0
 8008c92:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8008c94:	2300      	movs	r3, #0
 8008c96:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c98:	4b59      	ldr	r3, [pc, #356]	@ (8008e00 <HAL_RCC_GetSysClockFreq+0x180>)
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	f003 030c 	and.w	r3, r3, #12
 8008ca0:	2b08      	cmp	r3, #8
 8008ca2:	d00d      	beq.n	8008cc0 <HAL_RCC_GetSysClockFreq+0x40>
 8008ca4:	2b08      	cmp	r3, #8
 8008ca6:	f200 80a2 	bhi.w	8008dee <HAL_RCC_GetSysClockFreq+0x16e>
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d002      	beq.n	8008cb4 <HAL_RCC_GetSysClockFreq+0x34>
 8008cae:	2b04      	cmp	r3, #4
 8008cb0:	d003      	beq.n	8008cba <HAL_RCC_GetSysClockFreq+0x3a>
 8008cb2:	e09c      	b.n	8008dee <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008cb4:	4b53      	ldr	r3, [pc, #332]	@ (8008e04 <HAL_RCC_GetSysClockFreq+0x184>)
 8008cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8008cb8:	e09c      	b.n	8008df4 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008cba:	4b53      	ldr	r3, [pc, #332]	@ (8008e08 <HAL_RCC_GetSysClockFreq+0x188>)
 8008cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008cbe:	e099      	b.n	8008df4 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008cc0:	4b4f      	ldr	r3, [pc, #316]	@ (8008e00 <HAL_RCC_GetSysClockFreq+0x180>)
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008cc8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008cca:	4b4d      	ldr	r3, [pc, #308]	@ (8008e00 <HAL_RCC_GetSysClockFreq+0x180>)
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d027      	beq.n	8008d26 <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008cd6:	4b4a      	ldr	r3, [pc, #296]	@ (8008e00 <HAL_RCC_GetSysClockFreq+0x180>)
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	099b      	lsrs	r3, r3, #6
 8008cdc:	2200      	movs	r2, #0
 8008cde:	623b      	str	r3, [r7, #32]
 8008ce0:	627a      	str	r2, [r7, #36]	@ 0x24
 8008ce2:	6a3b      	ldr	r3, [r7, #32]
 8008ce4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008ce8:	2100      	movs	r1, #0
 8008cea:	4b47      	ldr	r3, [pc, #284]	@ (8008e08 <HAL_RCC_GetSysClockFreq+0x188>)
 8008cec:	fb03 f201 	mul.w	r2, r3, r1
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	fb00 f303 	mul.w	r3, r0, r3
 8008cf6:	4413      	add	r3, r2
 8008cf8:	4a43      	ldr	r2, [pc, #268]	@ (8008e08 <HAL_RCC_GetSysClockFreq+0x188>)
 8008cfa:	fba0 2102 	umull	r2, r1, r0, r2
 8008cfe:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8008d00:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008d02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d04:	4413      	add	r3, r2
 8008d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	61bb      	str	r3, [r7, #24]
 8008d0e:	61fa      	str	r2, [r7, #28]
 8008d10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d14:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008d18:	f7f8 fa7c 	bl	8001214 <__aeabi_uldivmod>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	460b      	mov	r3, r1
 8008d20:	4613      	mov	r3, r2
 8008d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d24:	e055      	b.n	8008dd2 <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d26:	4b36      	ldr	r3, [pc, #216]	@ (8008e00 <HAL_RCC_GetSysClockFreq+0x180>)
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	099b      	lsrs	r3, r3, #6
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	613b      	str	r3, [r7, #16]
 8008d30:	617a      	str	r2, [r7, #20]
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008d38:	f04f 0b00 	mov.w	fp, #0
 8008d3c:	4652      	mov	r2, sl
 8008d3e:	465b      	mov	r3, fp
 8008d40:	f04f 0000 	mov.w	r0, #0
 8008d44:	f04f 0100 	mov.w	r1, #0
 8008d48:	0159      	lsls	r1, r3, #5
 8008d4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008d4e:	0150      	lsls	r0, r2, #5
 8008d50:	4602      	mov	r2, r0
 8008d52:	460b      	mov	r3, r1
 8008d54:	ebb2 080a 	subs.w	r8, r2, sl
 8008d58:	eb63 090b 	sbc.w	r9, r3, fp
 8008d5c:	f04f 0200 	mov.w	r2, #0
 8008d60:	f04f 0300 	mov.w	r3, #0
 8008d64:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008d68:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008d6c:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008d70:	ebb2 0408 	subs.w	r4, r2, r8
 8008d74:	eb63 0509 	sbc.w	r5, r3, r9
 8008d78:	f04f 0200 	mov.w	r2, #0
 8008d7c:	f04f 0300 	mov.w	r3, #0
 8008d80:	00eb      	lsls	r3, r5, #3
 8008d82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d86:	00e2      	lsls	r2, r4, #3
 8008d88:	4614      	mov	r4, r2
 8008d8a:	461d      	mov	r5, r3
 8008d8c:	eb14 030a 	adds.w	r3, r4, sl
 8008d90:	603b      	str	r3, [r7, #0]
 8008d92:	eb45 030b 	adc.w	r3, r5, fp
 8008d96:	607b      	str	r3, [r7, #4]
 8008d98:	f04f 0200 	mov.w	r2, #0
 8008d9c:	f04f 0300 	mov.w	r3, #0
 8008da0:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008da4:	4629      	mov	r1, r5
 8008da6:	028b      	lsls	r3, r1, #10
 8008da8:	4620      	mov	r0, r4
 8008daa:	4629      	mov	r1, r5
 8008dac:	4604      	mov	r4, r0
 8008dae:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8008db2:	4601      	mov	r1, r0
 8008db4:	028a      	lsls	r2, r1, #10
 8008db6:	4610      	mov	r0, r2
 8008db8:	4619      	mov	r1, r3
 8008dba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	60bb      	str	r3, [r7, #8]
 8008dc0:	60fa      	str	r2, [r7, #12]
 8008dc2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008dc6:	f7f8 fa25 	bl	8001214 <__aeabi_uldivmod>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	460b      	mov	r3, r1
 8008dce:	4613      	mov	r3, r2
 8008dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8008e00 <HAL_RCC_GetSysClockFreq+0x180>)
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	0c1b      	lsrs	r3, r3, #16
 8008dd8:	f003 0303 	and.w	r3, r3, #3
 8008ddc:	3301      	adds	r3, #1
 8008dde:	005b      	lsls	r3, r3, #1
 8008de0:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8008de2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008dec:	e002      	b.n	8008df4 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008dee:	4b05      	ldr	r3, [pc, #20]	@ (8008e04 <HAL_RCC_GetSysClockFreq+0x184>)
 8008df0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008df2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3740      	adds	r7, #64	@ 0x40
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e00:	40023800 	.word	0x40023800
 8008e04:	00f42400 	.word	0x00f42400
 8008e08:	017d7840 	.word	0x017d7840

08008e0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008e10:	4b02      	ldr	r3, [pc, #8]	@ (8008e1c <HAL_RCC_GetHCLKFreq+0x10>)
 8008e12:	681b      	ldr	r3, [r3, #0]
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bc80      	pop	{r7}
 8008e1a:	4770      	bx	lr
 8008e1c:	20000070 	.word	0x20000070

08008e20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8008e26:	f7ff fff1 	bl	8008e0c <HAL_RCC_GetHCLKFreq>
 8008e2a:	4601      	mov	r1, r0
 8008e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8008e5c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8008e34:	f44f 52e0 	mov.w	r2, #7168	@ 0x1c00
 8008e38:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	fa92 f2a2 	rbit	r2, r2
 8008e40:	603a      	str	r2, [r7, #0]
  return result;
 8008e42:	683a      	ldr	r2, [r7, #0]
 8008e44:	fab2 f282 	clz	r2, r2
 8008e48:	b2d2      	uxtb	r2, r2
 8008e4a:	40d3      	lsrs	r3, r2
 8008e4c:	4a04      	ldr	r2, [pc, #16]	@ (8008e60 <HAL_RCC_GetPCLK1Freq+0x40>)
 8008e4e:	5cd3      	ldrb	r3, [r2, r3]
 8008e50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3708      	adds	r7, #8
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}
 8008e5c:	40023800 	.word	0x40023800
 8008e60:	08025fd8 	.word	0x08025fd8

08008e64 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *              
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b08a      	sub	sp, #40	@ 0x28
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8008e70:	2300      	movs	r3, #0
 8008e72:	623b      	str	r3, [r7, #32]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f003 0301 	and.w	r3, r3, #1
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d103      	bne.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x24>
     (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
  if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
 8008e84:	2b08      	cmp	r3, #8
 8008e86:	d14c      	bne.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008e88:	4b6d      	ldr	r3, [pc, #436]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008e8e:	f7fc f8e7 	bl	8005060 <HAL_GetTick>
 8008e92:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008e94:	e008      	b.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008e96:	f7fc f8e3 	bl	8005060 <HAL_GetTick>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e9e:	1ad3      	subs	r3, r2, r3
 8008ea0:	2b02      	cmp	r3, #2
 8008ea2:	d901      	bls.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x44>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008ea4:	2303      	movs	r3, #3
 8008ea6:	e0c7      	b.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008ea8:	4b66      	ldr	r3, [pc, #408]	@ (8009044 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d1f0      	bne.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0x32>
      } 
    }
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8008ebc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ebe:	697a      	ldr	r2, [r7, #20]
 8008ec0:	fa92 f2a2 	rbit	r2, r2
 8008ec4:	613a      	str	r2, [r7, #16]
  return result;
 8008ec6:	693a      	ldr	r2, [r7, #16]
 8008ec8:	fab2 f282 	clz	r2, r2
 8008ecc:	b2d2      	uxtb	r2, r2
 8008ece:	fa03 f202 	lsl.w	r2, r3, r2
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 8008eda:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008edc:	69f9      	ldr	r1, [r7, #28]
 8008ede:	fa91 f1a1 	rbit	r1, r1
 8008ee2:	61b9      	str	r1, [r7, #24]
  return result;
 8008ee4:	69b9      	ldr	r1, [r7, #24]
 8008ee6:	fab1 f181 	clz	r1, r1
 8008eea:	b2c9      	uxtb	r1, r1
 8008eec:	408b      	lsls	r3, r1
 8008eee:	4955      	ldr	r1, [pc, #340]	@ (8009044 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008ef6:	4b52      	ldr	r3, [pc, #328]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8008ef8:	2201      	movs	r2, #1
 8008efa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008efc:	f7fc f8b0 	bl	8005060 <HAL_GetTick>
 8008f00:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008f02:	e008      	b.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008f04:	f7fc f8ac 	bl	8005060 <HAL_GetTick>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f0c:	1ad3      	subs	r3, r2, r3
 8008f0e:	2b02      	cmp	r3, #2
 8008f10:	d901      	bls.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008f12:	2303      	movs	r3, #3
 8008f14:	e090      	b.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008f16:	4b4b      	ldr	r3, [pc, #300]	@ (8009044 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d0f0      	beq.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
  }
  /*--------------------------------------------------------------------------*/
  
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f003 0304 	and.w	r3, r3, #4
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	f000 8083 	beq.w	8009036 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008f30:	2300      	movs	r3, #0
 8008f32:	60fb      	str	r3, [r7, #12]
 8008f34:	4b43      	ldr	r3, [pc, #268]	@ (8009044 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f38:	4a42      	ldr	r2, [pc, #264]	@ (8009044 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008f3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8008f40:	4b40      	ldr	r3, [pc, #256]	@ (8009044 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f48:	60fb      	str	r3, [r7, #12]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008f4c:	4b3e      	ldr	r3, [pc, #248]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a3d      	ldr	r2, [pc, #244]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8008f52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f56:	6013      	str	r3, [r2, #0]
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8008f58:	f7fc f882 	bl	8005060 <HAL_GetTick>
 8008f5c:	6278      	str	r0, [r7, #36]	@ 0x24
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008f5e:	e008      	b.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008f60:	f7fc f87e 	bl	8005060 <HAL_GetTick>
 8008f64:	4602      	mov	r2, r0
 8008f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f68:	1ad3      	subs	r3, r2, r3
 8008f6a:	2b02      	cmp	r3, #2
 8008f6c:	d901      	bls.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008f6e:	2303      	movs	r3, #3
 8008f70:	e062      	b.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008f72:	4b35      	ldr	r3, [pc, #212]	@ (8009048 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d0f0      	beq.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008f7e:	4b31      	ldr	r3, [pc, #196]	@ (8009044 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f86:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008f88:	6a3b      	ldr	r3, [r7, #32]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d02f      	beq.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	68db      	ldr	r3, [r3, #12]
 8008f92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f96:	6a3a      	ldr	r2, [r7, #32]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d028      	beq.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008f9c:	4b29      	ldr	r3, [pc, #164]	@ (8009044 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008f9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fa0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008fa4:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008fa6:	4b29      	ldr	r3, [pc, #164]	@ (800904c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8008fa8:	2201      	movs	r2, #1
 8008faa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008fac:	4b27      	ldr	r3, [pc, #156]	@ (800904c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8008fae:	2200      	movs	r2, #0
 8008fb0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008fb2:	4a24      	ldr	r2, [pc, #144]	@ (8009044 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008fb4:	6a3b      	ldr	r3, [r7, #32]
 8008fb6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008fb8:	4b22      	ldr	r3, [pc, #136]	@ (8009044 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008fba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fbc:	f003 0301 	and.w	r3, r3, #1
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d114      	bne.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x18a>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008fc4:	f7fc f84c 	bl	8005060 <HAL_GetTick>
 8008fc8:	6278      	str	r0, [r7, #36]	@ 0x24
        
        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008fca:	e00a      	b.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008fcc:	f7fc f848 	bl	8005060 <HAL_GetTick>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fd4:	1ad3      	subs	r3, r2, r3
 8008fd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d901      	bls.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
          {
            return HAL_TIMEOUT;
 8008fde:	2303      	movs	r3, #3
 8008fe0:	e02a      	b.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008fe2:	4b18      	ldr	r3, [pc, #96]	@ (8009044 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fe6:	f003 0302 	and.w	r3, r3, #2
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d0ee      	beq.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x168>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	68db      	ldr	r3, [r3, #12]
 8008ff2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ff6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ffa:	d10d      	bne.n	8009018 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8008ffc:	4b11      	ldr	r3, [pc, #68]	@ (8009044 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800900c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009010:	490c      	ldr	r1, [pc, #48]	@ (8009044 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009012:	4313      	orrs	r3, r2
 8009014:	608b      	str	r3, [r1, #8]
 8009016:	e005      	b.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8009018:	4b0a      	ldr	r3, [pc, #40]	@ (8009044 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	4a09      	ldr	r2, [pc, #36]	@ (8009044 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800901e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8009022:	6093      	str	r3, [r2, #8]
 8009024:	4b07      	ldr	r3, [pc, #28]	@ (8009044 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009026:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	68db      	ldr	r3, [r3, #12]
 800902c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009030:	4904      	ldr	r1, [pc, #16]	@ (8009044 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009032:	4313      	orrs	r3, r2
 8009034:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  return HAL_OK;
 8009036:	2300      	movs	r3, #0
}
 8009038:	4618      	mov	r0, r3
 800903a:	3728      	adds	r7, #40	@ 0x28
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}
 8009040:	42470068 	.word	0x42470068
 8009044:	40023800 	.word	0x40023800
 8009048:	40007000 	.word	0x40007000
 800904c:	42470e40 	.word	0x42470e40

08009050 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009058:	2301      	movs	r3, #1
 800905a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d101      	bne.n	8009066 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8009062:	2301      	movs	r3, #1
 8009064:	e073      	b.n	800914e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	7f5b      	ldrb	r3, [r3, #29]
 800906a:	b2db      	uxtb	r3, r3
 800906c:	2b00      	cmp	r3, #0
 800906e:	d105      	bne.n	800907c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f7fa f81a 	bl	80030b0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2202      	movs	r2, #2
 8009080:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	f003 0310 	and.w	r3, r3, #16
 800908c:	2b10      	cmp	r3, #16
 800908e:	d055      	beq.n	800913c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	22ca      	movs	r2, #202	@ 0xca
 8009096:	625a      	str	r2, [r3, #36]	@ 0x24
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2253      	movs	r2, #83	@ 0x53
 800909e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 fa3c 	bl	800951e <RTC_EnterInitMode>
 80090a6:	4603      	mov	r3, r0
 80090a8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80090aa:	7bfb      	ldrb	r3, [r7, #15]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d12c      	bne.n	800910a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	6812      	ldr	r2, [r2, #0]
 80090ba:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80090be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090c2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	6899      	ldr	r1, [r3, #8]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	685a      	ldr	r2, [r3, #4]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	691b      	ldr	r3, [r3, #16]
 80090d2:	431a      	orrs	r2, r3
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	695b      	ldr	r3, [r3, #20]
 80090d8:	431a      	orrs	r2, r3
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	430a      	orrs	r2, r1
 80090e0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	687a      	ldr	r2, [r7, #4]
 80090e8:	68d2      	ldr	r2, [r2, #12]
 80090ea:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	6919      	ldr	r1, [r3, #16]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	041a      	lsls	r2, r3, #16
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	430a      	orrs	r2, r1
 80090fe:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 fa43 	bl	800958c <RTC_ExitInitMode>
 8009106:	4603      	mov	r3, r0
 8009108:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800910a:	7bfb      	ldrb	r3, [r7, #15]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d110      	bne.n	8009132 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800911e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	699a      	ldr	r2, [r3, #24]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	430a      	orrs	r2, r1
 8009130:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	22ff      	movs	r2, #255	@ 0xff
 8009138:	625a      	str	r2, [r3, #36]	@ 0x24
 800913a:	e001      	b.n	8009140 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800913c:	2300      	movs	r3, #0
 800913e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009140:	7bfb      	ldrb	r3, [r7, #15]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d102      	bne.n	800914c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2201      	movs	r2, #1
 800914a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800914c:	7bfb      	ldrb	r3, [r7, #15]
}
 800914e:	4618      	mov	r0, r3
 8009150:	3710      	adds	r7, #16
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}

08009156 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009156:	b590      	push	{r4, r7, lr}
 8009158:	b087      	sub	sp, #28
 800915a:	af00      	add	r7, sp, #0
 800915c:	60f8      	str	r0, [r7, #12]
 800915e:	60b9      	str	r1, [r7, #8]
 8009160:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009162:	2300      	movs	r3, #0
 8009164:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	7f1b      	ldrb	r3, [r3, #28]
 800916a:	2b01      	cmp	r3, #1
 800916c:	d101      	bne.n	8009172 <HAL_RTC_SetTime+0x1c>
 800916e:	2302      	movs	r3, #2
 8009170:	e087      	b.n	8009282 <HAL_RTC_SetTime+0x12c>
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2201      	movs	r2, #1
 8009176:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2202      	movs	r2, #2
 800917c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d126      	bne.n	80091d2 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800918e:	2b00      	cmp	r3, #0
 8009190:	d102      	bne.n	8009198 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	2200      	movs	r2, #0
 8009196:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	4618      	mov	r0, r3
 800919e:	f000 fa13 	bl	80095c8 <RTC_ByteToBcd2>
 80091a2:	4603      	mov	r3, r0
 80091a4:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	785b      	ldrb	r3, [r3, #1]
 80091aa:	4618      	mov	r0, r3
 80091ac:	f000 fa0c 	bl	80095c8 <RTC_ByteToBcd2>
 80091b0:	4603      	mov	r3, r0
 80091b2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80091b4:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	789b      	ldrb	r3, [r3, #2]
 80091ba:	4618      	mov	r0, r3
 80091bc:	f000 fa04 	bl	80095c8 <RTC_ByteToBcd2>
 80091c0:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80091c2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	78db      	ldrb	r3, [r3, #3]
 80091ca:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80091cc:	4313      	orrs	r3, r2
 80091ce:	617b      	str	r3, [r7, #20]
 80091d0:	e018      	b.n	8009204 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d102      	bne.n	80091e6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	2200      	movs	r2, #0
 80091e4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	785b      	ldrb	r3, [r3, #1]
 80091f0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80091f2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80091f4:	68ba      	ldr	r2, [r7, #8]
 80091f6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80091f8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	78db      	ldrb	r3, [r3, #3]
 80091fe:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009200:	4313      	orrs	r3, r2
 8009202:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	22ca      	movs	r2, #202	@ 0xca
 800920a:	625a      	str	r2, [r3, #36]	@ 0x24
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	2253      	movs	r2, #83	@ 0x53
 8009212:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009214:	68f8      	ldr	r0, [r7, #12]
 8009216:	f000 f982 	bl	800951e <RTC_EnterInitMode>
 800921a:	4603      	mov	r3, r0
 800921c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800921e:	7cfb      	ldrb	r3, [r7, #19]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d120      	bne.n	8009266 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800922e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8009232:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	689a      	ldr	r2, [r3, #8]
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009242:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	6899      	ldr	r1, [r3, #8]
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	685a      	ldr	r2, [r3, #4]
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	689b      	ldr	r3, [r3, #8]
 8009252:	431a      	orrs	r2, r3
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	430a      	orrs	r2, r1
 800925a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800925c:	68f8      	ldr	r0, [r7, #12]
 800925e:	f000 f995 	bl	800958c <RTC_ExitInitMode>
 8009262:	4603      	mov	r3, r0
 8009264:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009266:	7cfb      	ldrb	r3, [r7, #19]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d102      	bne.n	8009272 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2201      	movs	r2, #1
 8009270:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	22ff      	movs	r2, #255	@ 0xff
 8009278:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2200      	movs	r2, #0
 800927e:	771a      	strb	r2, [r3, #28]

  return status;
 8009280:	7cfb      	ldrb	r3, [r7, #19]
}
 8009282:	4618      	mov	r0, r3
 8009284:	371c      	adds	r7, #28
 8009286:	46bd      	mov	sp, r7
 8009288:	bd90      	pop	{r4, r7, pc}

0800928a <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800928a:	b580      	push	{r7, lr}
 800928c:	b086      	sub	sp, #24
 800928e:	af00      	add	r7, sp, #0
 8009290:	60f8      	str	r0, [r7, #12]
 8009292:	60b9      	str	r1, [r7, #8]
 8009294:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009296:	2300      	movs	r3, #0
 8009298:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80092a4:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80092a8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	0c1b      	lsrs	r3, r3, #16
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80092b4:	b2da      	uxtb	r2, r3
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	0a1b      	lsrs	r3, r3, #8
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092c4:	b2da      	uxtb	r2, r3
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092d2:	b2da      	uxtb	r2, r3
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	0d9b      	lsrs	r3, r3, #22
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	f003 0301 	and.w	r3, r3, #1
 80092e2:	b2da      	uxtb	r2, r3
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d11a      	bne.n	8009324 <HAL_RTC_GetTime+0x9a>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	4618      	mov	r0, r3
 80092f4:	f000 f985 	bl	8009602 <RTC_Bcd2ToByte>
 80092f8:	4603      	mov	r3, r0
 80092fa:	461a      	mov	r2, r3
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	785b      	ldrb	r3, [r3, #1]
 8009304:	4618      	mov	r0, r3
 8009306:	f000 f97c 	bl	8009602 <RTC_Bcd2ToByte>
 800930a:	4603      	mov	r3, r0
 800930c:	461a      	mov	r2, r3
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	789b      	ldrb	r3, [r3, #2]
 8009316:	4618      	mov	r0, r3
 8009318:	f000 f973 	bl	8009602 <RTC_Bcd2ToByte>
 800931c:	4603      	mov	r3, r0
 800931e:	461a      	mov	r2, r3
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009324:	2300      	movs	r3, #0
}
 8009326:	4618      	mov	r0, r3
 8009328:	3718      	adds	r7, #24
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}

0800932e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800932e:	b590      	push	{r4, r7, lr}
 8009330:	b087      	sub	sp, #28
 8009332:	af00      	add	r7, sp, #0
 8009334:	60f8      	str	r0, [r7, #12]
 8009336:	60b9      	str	r1, [r7, #8]
 8009338:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800933a:	2300      	movs	r3, #0
 800933c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	7f1b      	ldrb	r3, [r3, #28]
 8009342:	2b01      	cmp	r3, #1
 8009344:	d101      	bne.n	800934a <HAL_RTC_SetDate+0x1c>
 8009346:	2302      	movs	r3, #2
 8009348:	e071      	b.n	800942e <HAL_RTC_SetDate+0x100>
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2201      	movs	r2, #1
 800934e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2202      	movs	r2, #2
 8009354:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d10e      	bne.n	800937a <HAL_RTC_SetDate+0x4c>
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	785b      	ldrb	r3, [r3, #1]
 8009360:	f003 0310 	and.w	r3, r3, #16
 8009364:	2b00      	cmp	r3, #0
 8009366:	d008      	beq.n	800937a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	785b      	ldrb	r3, [r3, #1]
 800936c:	f023 0310 	bic.w	r3, r3, #16
 8009370:	b2db      	uxtb	r3, r3
 8009372:	330a      	adds	r3, #10
 8009374:	b2da      	uxtb	r2, r3
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d11c      	bne.n	80093ba <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	78db      	ldrb	r3, [r3, #3]
 8009384:	4618      	mov	r0, r3
 8009386:	f000 f91f 	bl	80095c8 <RTC_ByteToBcd2>
 800938a:	4603      	mov	r3, r0
 800938c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	785b      	ldrb	r3, [r3, #1]
 8009392:	4618      	mov	r0, r3
 8009394:	f000 f918 	bl	80095c8 <RTC_ByteToBcd2>
 8009398:	4603      	mov	r3, r0
 800939a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800939c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	789b      	ldrb	r3, [r3, #2]
 80093a2:	4618      	mov	r0, r3
 80093a4:	f000 f910 	bl	80095c8 <RTC_ByteToBcd2>
 80093a8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80093aa:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80093b4:	4313      	orrs	r3, r2
 80093b6:	617b      	str	r3, [r7, #20]
 80093b8:	e00e      	b.n	80093d8 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	78db      	ldrb	r3, [r3, #3]
 80093be:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	785b      	ldrb	r3, [r3, #1]
 80093c4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80093c6:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80093c8:	68ba      	ldr	r2, [r7, #8]
 80093ca:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80093cc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	781b      	ldrb	r3, [r3, #0]
 80093d2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80093d4:	4313      	orrs	r3, r2
 80093d6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	22ca      	movs	r2, #202	@ 0xca
 80093de:	625a      	str	r2, [r3, #36]	@ 0x24
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2253      	movs	r2, #83	@ 0x53
 80093e6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80093e8:	68f8      	ldr	r0, [r7, #12]
 80093ea:	f000 f898 	bl	800951e <RTC_EnterInitMode>
 80093ee:	4603      	mov	r3, r0
 80093f0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80093f2:	7cfb      	ldrb	r3, [r7, #19]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d10c      	bne.n	8009412 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009402:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009406:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009408:	68f8      	ldr	r0, [r7, #12]
 800940a:	f000 f8bf 	bl	800958c <RTC_ExitInitMode>
 800940e:	4603      	mov	r3, r0
 8009410:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009412:	7cfb      	ldrb	r3, [r7, #19]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d102      	bne.n	800941e <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2201      	movs	r2, #1
 800941c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	22ff      	movs	r2, #255	@ 0xff
 8009424:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2200      	movs	r2, #0
 800942a:	771a      	strb	r2, [r3, #28]

  return status;
 800942c:	7cfb      	ldrb	r3, [r7, #19]
}
 800942e:	4618      	mov	r0, r3
 8009430:	371c      	adds	r7, #28
 8009432:	46bd      	mov	sp, r7
 8009434:	bd90      	pop	{r4, r7, pc}

08009436 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b086      	sub	sp, #24
 800943a:	af00      	add	r7, sp, #0
 800943c:	60f8      	str	r0, [r7, #12]
 800943e:	60b9      	str	r1, [r7, #8]
 8009440:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009442:	2300      	movs	r3, #0
 8009444:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009450:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009454:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	0c1b      	lsrs	r3, r3, #16
 800945a:	b2da      	uxtb	r2, r3
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	0a1b      	lsrs	r3, r3, #8
 8009464:	b2db      	uxtb	r3, r3
 8009466:	f003 031f 	and.w	r3, r3, #31
 800946a:	b2da      	uxtb	r2, r3
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	b2db      	uxtb	r3, r3
 8009474:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009478:	b2da      	uxtb	r2, r3
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	0b5b      	lsrs	r3, r3, #13
 8009482:	b2db      	uxtb	r3, r3
 8009484:	f003 0307 	and.w	r3, r3, #7
 8009488:	b2da      	uxtb	r2, r3
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d11a      	bne.n	80094ca <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	78db      	ldrb	r3, [r3, #3]
 8009498:	4618      	mov	r0, r3
 800949a:	f000 f8b2 	bl	8009602 <RTC_Bcd2ToByte>
 800949e:	4603      	mov	r3, r0
 80094a0:	461a      	mov	r2, r3
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	785b      	ldrb	r3, [r3, #1]
 80094aa:	4618      	mov	r0, r3
 80094ac:	f000 f8a9 	bl	8009602 <RTC_Bcd2ToByte>
 80094b0:	4603      	mov	r3, r0
 80094b2:	461a      	mov	r2, r3
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	789b      	ldrb	r3, [r3, #2]
 80094bc:	4618      	mov	r0, r3
 80094be:	f000 f8a0 	bl	8009602 <RTC_Bcd2ToByte>
 80094c2:	4603      	mov	r3, r0
 80094c4:	461a      	mov	r2, r3
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80094ca:	2300      	movs	r3, #0
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3718      	adds	r7, #24
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80094dc:	2300      	movs	r3, #0
 80094de:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f643 7257 	movw	r2, #16215	@ 0x3f57
 80094e8:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80094ea:	f7fb fdb9 	bl	8005060 <HAL_GetTick>
 80094ee:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80094f0:	e009      	b.n	8009506 <HAL_RTC_WaitForSynchro+0x32>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80094f2:	f7fb fdb5 	bl	8005060 <HAL_GetTick>
 80094f6:	4602      	mov	r2, r0
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	1ad3      	subs	r3, r2, r3
 80094fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009500:	d901      	bls.n	8009506 <HAL_RTC_WaitForSynchro+0x32>
    {
      return HAL_TIMEOUT;
 8009502:	2303      	movs	r3, #3
 8009504:	e007      	b.n	8009516 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	68db      	ldr	r3, [r3, #12]
 800950c:	f003 0320 	and.w	r3, r3, #32
 8009510:	2b00      	cmp	r3, #0
 8009512:	d0ee      	beq.n	80094f2 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b084      	sub	sp, #16
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009526:	2300      	movs	r3, #0
 8009528:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800952a:	2300      	movs	r3, #0
 800952c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	68db      	ldr	r3, [r3, #12]
 8009534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009538:	2b00      	cmp	r3, #0
 800953a:	d122      	bne.n	8009582 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	68da      	ldr	r2, [r3, #12]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800954a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800954c:	f7fb fd88 	bl	8005060 <HAL_GetTick>
 8009550:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009552:	e00c      	b.n	800956e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009554:	f7fb fd84 	bl	8005060 <HAL_GetTick>
 8009558:	4602      	mov	r2, r0
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	1ad3      	subs	r3, r2, r3
 800955e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009562:	d904      	bls.n	800956e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2204      	movs	r2, #4
 8009568:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800956a:	2301      	movs	r3, #1
 800956c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	68db      	ldr	r3, [r3, #12]
 8009574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009578:	2b00      	cmp	r3, #0
 800957a:	d102      	bne.n	8009582 <RTC_EnterInitMode+0x64>
 800957c:	7bfb      	ldrb	r3, [r7, #15]
 800957e:	2b01      	cmp	r3, #1
 8009580:	d1e8      	bne.n	8009554 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009582:	7bfb      	ldrb	r3, [r7, #15]
}
 8009584:	4618      	mov	r0, r3
 8009586:	3710      	adds	r7, #16
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009594:	2300      	movs	r3, #0
 8009596:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	68da      	ldr	r2, [r3, #12]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80095a6:	60da      	str	r2, [r3, #12]

  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f7ff ff93 	bl	80094d4 <HAL_RTC_WaitForSynchro>
 80095ae:	4603      	mov	r3, r0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d004      	beq.n	80095be <RTC_ExitInitMode+0x32>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2204      	movs	r2, #4
 80095b8:	775a      	strb	r2, [r3, #29]
    status = HAL_ERROR;
 80095ba:	2301      	movs	r3, #1
 80095bc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80095be:	7bfb      	ldrb	r3, [r7, #15]
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3710      	adds	r7, #16
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b085      	sub	sp, #20
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	4603      	mov	r3, r0
 80095d0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80095d2:	2300      	movs	r3, #0
 80095d4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80095d6:	e005      	b.n	80095e4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	3301      	adds	r3, #1
 80095dc:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80095de:	79fb      	ldrb	r3, [r7, #7]
 80095e0:	3b0a      	subs	r3, #10
 80095e2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80095e4:	79fb      	ldrb	r3, [r7, #7]
 80095e6:	2b09      	cmp	r3, #9
 80095e8:	d8f6      	bhi.n	80095d8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	011b      	lsls	r3, r3, #4
 80095f0:	b2da      	uxtb	r2, r3
 80095f2:	79fb      	ldrb	r3, [r7, #7]
 80095f4:	4313      	orrs	r3, r2
 80095f6:	b2db      	uxtb	r3, r3
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3714      	adds	r7, #20
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bc80      	pop	{r7}
 8009600:	4770      	bx	lr

08009602 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8009602:	b480      	push	{r7}
 8009604:	b085      	sub	sp, #20
 8009606:	af00      	add	r7, sp, #0
 8009608:	4603      	mov	r3, r0
 800960a:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800960c:	2300      	movs	r3, #0
 800960e:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8009610:	79fb      	ldrb	r3, [r7, #7]
 8009612:	091b      	lsrs	r3, r3, #4
 8009614:	b2db      	uxtb	r3, r3
 8009616:	461a      	mov	r2, r3
 8009618:	4613      	mov	r3, r2
 800961a:	009b      	lsls	r3, r3, #2
 800961c:	4413      	add	r3, r2
 800961e:	005b      	lsls	r3, r3, #1
 8009620:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	b2da      	uxtb	r2, r3
 8009626:	79fb      	ldrb	r3, [r7, #7]
 8009628:	f003 030f 	and.w	r3, r3, #15
 800962c:	b2db      	uxtb	r3, r3
 800962e:	4413      	add	r3, r2
 8009630:	b2db      	uxtb	r3, r3
}
 8009632:	4618      	mov	r0, r3
 8009634:	3714      	adds	r7, #20
 8009636:	46bd      	mov	sp, r7
 8009638:	bc80      	pop	{r7}
 800963a:	4770      	bx	lr

0800963c <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800963c:	b480      	push	{r7}
 800963e:	b087      	sub	sp, #28
 8009640:	af00      	add	r7, sp, #0
 8009642:	60f8      	str	r0, [r7, #12]
 8009644:	60b9      	str	r1, [r7, #8]
 8009646:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8009648:	2300      	movs	r3, #0
 800964a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	3350      	adds	r3, #80	@ 0x50
 8009652:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	009b      	lsls	r3, r3, #2
 8009658:	697a      	ldr	r2, [r7, #20]
 800965a:	4413      	add	r3, r2
 800965c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	601a      	str	r2, [r3, #0]
}
 8009664:	bf00      	nop
 8009666:	371c      	adds	r7, #28
 8009668:	46bd      	mov	sp, r7
 800966a:	bc80      	pop	{r7}
 800966c:	4770      	bx	lr

0800966e <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800966e:	b480      	push	{r7}
 8009670:	b085      	sub	sp, #20
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
 8009676:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8009678:	2300      	movs	r3, #0
 800967a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	3350      	adds	r3, #80	@ 0x50
 8009682:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	009b      	lsls	r3, r3, #2
 8009688:	68fa      	ldr	r2, [r7, #12]
 800968a:	4413      	add	r3, r2
 800968c:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
}
 8009692:	4618      	mov	r0, r3
 8009694:	3714      	adds	r7, #20
 8009696:	46bd      	mov	sp, r7
 8009698:	bc80      	pop	{r7}
 800969a:	4770      	bx	lr

0800969c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b082      	sub	sp, #8
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d101      	bne.n	80096ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80096aa:	2301      	movs	r3, #1
 80096ac:	e041      	b.n	8009732 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80096b4:	b2db      	uxtb	r3, r3
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d106      	bne.n	80096c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2200      	movs	r2, #0
 80096be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f7f9 fd0a 	bl	80030dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2202      	movs	r2, #2
 80096cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	3304      	adds	r3, #4
 80096d8:	4619      	mov	r1, r3
 80096da:	4610      	mov	r0, r2
 80096dc:	f000 f95c 	bl	8009998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2201      	movs	r2, #1
 80096e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2201      	movs	r2, #1
 80096ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2201      	movs	r2, #1
 80096f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2201      	movs	r2, #1
 80096fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2201      	movs	r2, #1
 8009704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2201      	movs	r2, #1
 800970c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2201      	movs	r2, #1
 8009714:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2201      	movs	r2, #1
 800971c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2201      	movs	r2, #1
 8009724:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2201      	movs	r2, #1
 800972c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009730:	2300      	movs	r3, #0
}
 8009732:	4618      	mov	r0, r3
 8009734:	3708      	adds	r7, #8
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
	...

0800973c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800973c:	b480      	push	{r7}
 800973e:	b085      	sub	sp, #20
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800974a:	b2db      	uxtb	r3, r3
 800974c:	2b01      	cmp	r3, #1
 800974e:	d001      	beq.n	8009754 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009750:	2301      	movs	r3, #1
 8009752:	e046      	b.n	80097e2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2202      	movs	r2, #2
 8009758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a22      	ldr	r2, [pc, #136]	@ (80097ec <HAL_TIM_Base_Start+0xb0>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d022      	beq.n	80097ac <HAL_TIM_Base_Start+0x70>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800976e:	d01d      	beq.n	80097ac <HAL_TIM_Base_Start+0x70>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4a1e      	ldr	r2, [pc, #120]	@ (80097f0 <HAL_TIM_Base_Start+0xb4>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d018      	beq.n	80097ac <HAL_TIM_Base_Start+0x70>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4a1d      	ldr	r2, [pc, #116]	@ (80097f4 <HAL_TIM_Base_Start+0xb8>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d013      	beq.n	80097ac <HAL_TIM_Base_Start+0x70>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4a1b      	ldr	r2, [pc, #108]	@ (80097f8 <HAL_TIM_Base_Start+0xbc>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d00e      	beq.n	80097ac <HAL_TIM_Base_Start+0x70>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4a1a      	ldr	r2, [pc, #104]	@ (80097fc <HAL_TIM_Base_Start+0xc0>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d009      	beq.n	80097ac <HAL_TIM_Base_Start+0x70>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4a18      	ldr	r2, [pc, #96]	@ (8009800 <HAL_TIM_Base_Start+0xc4>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d004      	beq.n	80097ac <HAL_TIM_Base_Start+0x70>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4a17      	ldr	r2, [pc, #92]	@ (8009804 <HAL_TIM_Base_Start+0xc8>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d111      	bne.n	80097d0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	689b      	ldr	r3, [r3, #8]
 80097b2:	f003 0307 	and.w	r3, r3, #7
 80097b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2b06      	cmp	r3, #6
 80097bc:	d010      	beq.n	80097e0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f042 0201 	orr.w	r2, r2, #1
 80097cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097ce:	e007      	b.n	80097e0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f042 0201 	orr.w	r2, r2, #1
 80097de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80097e0:	2300      	movs	r3, #0
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3714      	adds	r7, #20
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bc80      	pop	{r7}
 80097ea:	4770      	bx	lr
 80097ec:	40010000 	.word	0x40010000
 80097f0:	40000400 	.word	0x40000400
 80097f4:	40000800 	.word	0x40000800
 80097f8:	40000c00 	.word	0x40000c00
 80097fc:	40010400 	.word	0x40010400
 8009800:	40014000 	.word	0x40014000
 8009804:	40001800 	.word	0x40001800

08009808 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009812:	2300      	movs	r3, #0
 8009814:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800981c:	2b01      	cmp	r3, #1
 800981e:	d101      	bne.n	8009824 <HAL_TIM_ConfigClockSource+0x1c>
 8009820:	2302      	movs	r3, #2
 8009822:	e0b4      	b.n	800998e <HAL_TIM_ConfigClockSource+0x186>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2201      	movs	r2, #1
 8009828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2202      	movs	r2, #2
 8009830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	689b      	ldr	r3, [r3, #8]
 800983a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009842:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800984a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	68ba      	ldr	r2, [r7, #8]
 8009852:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800985c:	d03e      	beq.n	80098dc <HAL_TIM_ConfigClockSource+0xd4>
 800985e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009862:	f200 8087 	bhi.w	8009974 <HAL_TIM_ConfigClockSource+0x16c>
 8009866:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800986a:	f000 8086 	beq.w	800997a <HAL_TIM_ConfigClockSource+0x172>
 800986e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009872:	d87f      	bhi.n	8009974 <HAL_TIM_ConfigClockSource+0x16c>
 8009874:	2b70      	cmp	r3, #112	@ 0x70
 8009876:	d01a      	beq.n	80098ae <HAL_TIM_ConfigClockSource+0xa6>
 8009878:	2b70      	cmp	r3, #112	@ 0x70
 800987a:	d87b      	bhi.n	8009974 <HAL_TIM_ConfigClockSource+0x16c>
 800987c:	2b60      	cmp	r3, #96	@ 0x60
 800987e:	d050      	beq.n	8009922 <HAL_TIM_ConfigClockSource+0x11a>
 8009880:	2b60      	cmp	r3, #96	@ 0x60
 8009882:	d877      	bhi.n	8009974 <HAL_TIM_ConfigClockSource+0x16c>
 8009884:	2b50      	cmp	r3, #80	@ 0x50
 8009886:	d03c      	beq.n	8009902 <HAL_TIM_ConfigClockSource+0xfa>
 8009888:	2b50      	cmp	r3, #80	@ 0x50
 800988a:	d873      	bhi.n	8009974 <HAL_TIM_ConfigClockSource+0x16c>
 800988c:	2b40      	cmp	r3, #64	@ 0x40
 800988e:	d058      	beq.n	8009942 <HAL_TIM_ConfigClockSource+0x13a>
 8009890:	2b40      	cmp	r3, #64	@ 0x40
 8009892:	d86f      	bhi.n	8009974 <HAL_TIM_ConfigClockSource+0x16c>
 8009894:	2b30      	cmp	r3, #48	@ 0x30
 8009896:	d064      	beq.n	8009962 <HAL_TIM_ConfigClockSource+0x15a>
 8009898:	2b30      	cmp	r3, #48	@ 0x30
 800989a:	d86b      	bhi.n	8009974 <HAL_TIM_ConfigClockSource+0x16c>
 800989c:	2b20      	cmp	r3, #32
 800989e:	d060      	beq.n	8009962 <HAL_TIM_ConfigClockSource+0x15a>
 80098a0:	2b20      	cmp	r3, #32
 80098a2:	d867      	bhi.n	8009974 <HAL_TIM_ConfigClockSource+0x16c>
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d05c      	beq.n	8009962 <HAL_TIM_ConfigClockSource+0x15a>
 80098a8:	2b10      	cmp	r3, #16
 80098aa:	d05a      	beq.n	8009962 <HAL_TIM_ConfigClockSource+0x15a>
 80098ac:	e062      	b.n	8009974 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80098be:	f000 f98c 	bl	8009bda <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	689b      	ldr	r3, [r3, #8]
 80098c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80098d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	68ba      	ldr	r2, [r7, #8]
 80098d8:	609a      	str	r2, [r3, #8]
      break;
 80098da:	e04f      	b.n	800997c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80098ec:	f000 f975 	bl	8009bda <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	689a      	ldr	r2, [r3, #8]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80098fe:	609a      	str	r2, [r3, #8]
      break;
 8009900:	e03c      	b.n	800997c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800990e:	461a      	mov	r2, r3
 8009910:	f000 f8ec 	bl	8009aec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	2150      	movs	r1, #80	@ 0x50
 800991a:	4618      	mov	r0, r3
 800991c:	f000 f943 	bl	8009ba6 <TIM_ITRx_SetConfig>
      break;
 8009920:	e02c      	b.n	800997c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800992e:	461a      	mov	r2, r3
 8009930:	f000 f90a 	bl	8009b48 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	2160      	movs	r1, #96	@ 0x60
 800993a:	4618      	mov	r0, r3
 800993c:	f000 f933 	bl	8009ba6 <TIM_ITRx_SetConfig>
      break;
 8009940:	e01c      	b.n	800997c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800994e:	461a      	mov	r2, r3
 8009950:	f000 f8cc 	bl	8009aec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	2140      	movs	r1, #64	@ 0x40
 800995a:	4618      	mov	r0, r3
 800995c:	f000 f923 	bl	8009ba6 <TIM_ITRx_SetConfig>
      break;
 8009960:	e00c      	b.n	800997c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4619      	mov	r1, r3
 800996c:	4610      	mov	r0, r2
 800996e:	f000 f91a 	bl	8009ba6 <TIM_ITRx_SetConfig>
      break;
 8009972:	e003      	b.n	800997c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009974:	2301      	movs	r3, #1
 8009976:	73fb      	strb	r3, [r7, #15]
      break;
 8009978:	e000      	b.n	800997c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800997a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2201      	movs	r2, #1
 8009980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800998c:	7bfb      	ldrb	r3, [r7, #15]
}
 800998e:	4618      	mov	r0, r3
 8009990:	3710      	adds	r7, #16
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
	...

08009998 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009998:	b480      	push	{r7}
 800999a:	b085      	sub	sp, #20
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	4a45      	ldr	r2, [pc, #276]	@ (8009ac0 <TIM_Base_SetConfig+0x128>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d013      	beq.n	80099d8 <TIM_Base_SetConfig+0x40>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099b6:	d00f      	beq.n	80099d8 <TIM_Base_SetConfig+0x40>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	4a42      	ldr	r2, [pc, #264]	@ (8009ac4 <TIM_Base_SetConfig+0x12c>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d00b      	beq.n	80099d8 <TIM_Base_SetConfig+0x40>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	4a41      	ldr	r2, [pc, #260]	@ (8009ac8 <TIM_Base_SetConfig+0x130>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d007      	beq.n	80099d8 <TIM_Base_SetConfig+0x40>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	4a40      	ldr	r2, [pc, #256]	@ (8009acc <TIM_Base_SetConfig+0x134>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d003      	beq.n	80099d8 <TIM_Base_SetConfig+0x40>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	4a3f      	ldr	r2, [pc, #252]	@ (8009ad0 <TIM_Base_SetConfig+0x138>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d108      	bne.n	80099ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	68fa      	ldr	r2, [r7, #12]
 80099e6:	4313      	orrs	r3, r2
 80099e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	4a34      	ldr	r2, [pc, #208]	@ (8009ac0 <TIM_Base_SetConfig+0x128>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d02b      	beq.n	8009a4a <TIM_Base_SetConfig+0xb2>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099f8:	d027      	beq.n	8009a4a <TIM_Base_SetConfig+0xb2>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	4a31      	ldr	r2, [pc, #196]	@ (8009ac4 <TIM_Base_SetConfig+0x12c>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d023      	beq.n	8009a4a <TIM_Base_SetConfig+0xb2>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	4a30      	ldr	r2, [pc, #192]	@ (8009ac8 <TIM_Base_SetConfig+0x130>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d01f      	beq.n	8009a4a <TIM_Base_SetConfig+0xb2>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	4a2f      	ldr	r2, [pc, #188]	@ (8009acc <TIM_Base_SetConfig+0x134>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d01b      	beq.n	8009a4a <TIM_Base_SetConfig+0xb2>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	4a2e      	ldr	r2, [pc, #184]	@ (8009ad0 <TIM_Base_SetConfig+0x138>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d017      	beq.n	8009a4a <TIM_Base_SetConfig+0xb2>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	4a2d      	ldr	r2, [pc, #180]	@ (8009ad4 <TIM_Base_SetConfig+0x13c>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d013      	beq.n	8009a4a <TIM_Base_SetConfig+0xb2>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	4a2c      	ldr	r2, [pc, #176]	@ (8009ad8 <TIM_Base_SetConfig+0x140>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d00f      	beq.n	8009a4a <TIM_Base_SetConfig+0xb2>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	4a2b      	ldr	r2, [pc, #172]	@ (8009adc <TIM_Base_SetConfig+0x144>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d00b      	beq.n	8009a4a <TIM_Base_SetConfig+0xb2>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	4a2a      	ldr	r2, [pc, #168]	@ (8009ae0 <TIM_Base_SetConfig+0x148>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d007      	beq.n	8009a4a <TIM_Base_SetConfig+0xb2>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	4a29      	ldr	r2, [pc, #164]	@ (8009ae4 <TIM_Base_SetConfig+0x14c>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d003      	beq.n	8009a4a <TIM_Base_SetConfig+0xb2>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	4a28      	ldr	r2, [pc, #160]	@ (8009ae8 <TIM_Base_SetConfig+0x150>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d108      	bne.n	8009a5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	68db      	ldr	r3, [r3, #12]
 8009a56:	68fa      	ldr	r2, [r7, #12]
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	695b      	ldr	r3, [r3, #20]
 8009a66:	4313      	orrs	r3, r2
 8009a68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	68fa      	ldr	r2, [r7, #12]
 8009a6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	689a      	ldr	r2, [r3, #8]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	4a0f      	ldr	r2, [pc, #60]	@ (8009ac0 <TIM_Base_SetConfig+0x128>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d003      	beq.n	8009a90 <TIM_Base_SetConfig+0xf8>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	4a11      	ldr	r2, [pc, #68]	@ (8009ad0 <TIM_Base_SetConfig+0x138>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d103      	bne.n	8009a98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	691a      	ldr	r2, [r3, #16]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	691b      	ldr	r3, [r3, #16]
 8009aa2:	f003 0301 	and.w	r3, r3, #1
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d105      	bne.n	8009ab6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	691b      	ldr	r3, [r3, #16]
 8009aae:	f023 0201 	bic.w	r2, r3, #1
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	611a      	str	r2, [r3, #16]
  }
}
 8009ab6:	bf00      	nop
 8009ab8:	3714      	adds	r7, #20
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bc80      	pop	{r7}
 8009abe:	4770      	bx	lr
 8009ac0:	40010000 	.word	0x40010000
 8009ac4:	40000400 	.word	0x40000400
 8009ac8:	40000800 	.word	0x40000800
 8009acc:	40000c00 	.word	0x40000c00
 8009ad0:	40010400 	.word	0x40010400
 8009ad4:	40014000 	.word	0x40014000
 8009ad8:	40014400 	.word	0x40014400
 8009adc:	40014800 	.word	0x40014800
 8009ae0:	40001800 	.word	0x40001800
 8009ae4:	40001c00 	.word	0x40001c00
 8009ae8:	40002000 	.word	0x40002000

08009aec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b087      	sub	sp, #28
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	60f8      	str	r0, [r7, #12]
 8009af4:	60b9      	str	r1, [r7, #8]
 8009af6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	6a1b      	ldr	r3, [r3, #32]
 8009afc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	6a1b      	ldr	r3, [r3, #32]
 8009b02:	f023 0201 	bic.w	r2, r3, #1
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	699b      	ldr	r3, [r3, #24]
 8009b0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009b16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	011b      	lsls	r3, r3, #4
 8009b1c:	693a      	ldr	r2, [r7, #16]
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	f023 030a 	bic.w	r3, r3, #10
 8009b28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009b2a:	697a      	ldr	r2, [r7, #20]
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	693a      	ldr	r2, [r7, #16]
 8009b36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	697a      	ldr	r2, [r7, #20]
 8009b3c:	621a      	str	r2, [r3, #32]
}
 8009b3e:	bf00      	nop
 8009b40:	371c      	adds	r7, #28
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bc80      	pop	{r7}
 8009b46:	4770      	bx	lr

08009b48 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b087      	sub	sp, #28
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	60f8      	str	r0, [r7, #12]
 8009b50:	60b9      	str	r1, [r7, #8]
 8009b52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	6a1b      	ldr	r3, [r3, #32]
 8009b58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	6a1b      	ldr	r3, [r3, #32]
 8009b5e:	f023 0210 	bic.w	r2, r3, #16
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	699b      	ldr	r3, [r3, #24]
 8009b6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009b72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	031b      	lsls	r3, r3, #12
 8009b78:	693a      	ldr	r2, [r7, #16]
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009b84:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	011b      	lsls	r3, r3, #4
 8009b8a:	697a      	ldr	r2, [r7, #20]
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	693a      	ldr	r2, [r7, #16]
 8009b94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	697a      	ldr	r2, [r7, #20]
 8009b9a:	621a      	str	r2, [r3, #32]
}
 8009b9c:	bf00      	nop
 8009b9e:	371c      	adds	r7, #28
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bc80      	pop	{r7}
 8009ba4:	4770      	bx	lr

08009ba6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009ba6:	b480      	push	{r7}
 8009ba8:	b085      	sub	sp, #20
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
 8009bae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009bbe:	683a      	ldr	r2, [r7, #0]
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	f043 0307 	orr.w	r3, r3, #7
 8009bc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	68fa      	ldr	r2, [r7, #12]
 8009bce:	609a      	str	r2, [r3, #8]
}
 8009bd0:	bf00      	nop
 8009bd2:	3714      	adds	r7, #20
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bc80      	pop	{r7}
 8009bd8:	4770      	bx	lr

08009bda <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009bda:	b480      	push	{r7}
 8009bdc:	b087      	sub	sp, #28
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	60f8      	str	r0, [r7, #12]
 8009be2:	60b9      	str	r1, [r7, #8]
 8009be4:	607a      	str	r2, [r7, #4]
 8009be6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009bf4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	021a      	lsls	r2, r3, #8
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	431a      	orrs	r2, r3
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	4313      	orrs	r3, r2
 8009c02:	697a      	ldr	r2, [r7, #20]
 8009c04:	4313      	orrs	r3, r2
 8009c06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	697a      	ldr	r2, [r7, #20]
 8009c0c:	609a      	str	r2, [r3, #8]
}
 8009c0e:	bf00      	nop
 8009c10:	371c      	adds	r7, #28
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bc80      	pop	{r7}
 8009c16:	4770      	bx	lr

08009c18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b085      	sub	sp, #20
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009c28:	2b01      	cmp	r3, #1
 8009c2a:	d101      	bne.n	8009c30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c2c:	2302      	movs	r3, #2
 8009c2e:	e05a      	b.n	8009ce6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2201      	movs	r2, #1
 8009c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2202      	movs	r2, #2
 8009c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	689b      	ldr	r3, [r3, #8]
 8009c4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	68fa      	ldr	r2, [r7, #12]
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	68fa      	ldr	r2, [r7, #12]
 8009c68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	4a20      	ldr	r2, [pc, #128]	@ (8009cf0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d022      	beq.n	8009cba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c7c:	d01d      	beq.n	8009cba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4a1c      	ldr	r2, [pc, #112]	@ (8009cf4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d018      	beq.n	8009cba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4a1a      	ldr	r2, [pc, #104]	@ (8009cf8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d013      	beq.n	8009cba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4a19      	ldr	r2, [pc, #100]	@ (8009cfc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d00e      	beq.n	8009cba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a17      	ldr	r2, [pc, #92]	@ (8009d00 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d009      	beq.n	8009cba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a16      	ldr	r2, [pc, #88]	@ (8009d04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d004      	beq.n	8009cba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a14      	ldr	r2, [pc, #80]	@ (8009d08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d10c      	bne.n	8009cd4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009cc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	68ba      	ldr	r2, [r7, #8]
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	68ba      	ldr	r2, [r7, #8]
 8009cd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009ce4:	2300      	movs	r3, #0
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3714      	adds	r7, #20
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bc80      	pop	{r7}
 8009cee:	4770      	bx	lr
 8009cf0:	40010000 	.word	0x40010000
 8009cf4:	40000400 	.word	0x40000400
 8009cf8:	40000800 	.word	0x40000800
 8009cfc:	40000c00 	.word	0x40000c00
 8009d00:	40010400 	.word	0x40010400
 8009d04:	40014000 	.word	0x40014000
 8009d08:	40001800 	.word	0x40001800

08009d0c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8009d12:	4b87      	ldr	r3, [pc, #540]	@ (8009f30 <MX_LWIP_Init+0x224>)
 8009d14:	22c0      	movs	r2, #192	@ 0xc0
 8009d16:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8009d18:	4b85      	ldr	r3, [pc, #532]	@ (8009f30 <MX_LWIP_Init+0x224>)
 8009d1a:	22a8      	movs	r2, #168	@ 0xa8
 8009d1c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8009d1e:	4b84      	ldr	r3, [pc, #528]	@ (8009f30 <MX_LWIP_Init+0x224>)
 8009d20:	2201      	movs	r2, #1
 8009d22:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 178;
 8009d24:	4b82      	ldr	r3, [pc, #520]	@ (8009f30 <MX_LWIP_Init+0x224>)
 8009d26:	22b2      	movs	r2, #178	@ 0xb2
 8009d28:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8009d2a:	4b82      	ldr	r3, [pc, #520]	@ (8009f34 <MX_LWIP_Init+0x228>)
 8009d2c:	22ff      	movs	r2, #255	@ 0xff
 8009d2e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8009d30:	4b80      	ldr	r3, [pc, #512]	@ (8009f34 <MX_LWIP_Init+0x228>)
 8009d32:	22ff      	movs	r2, #255	@ 0xff
 8009d34:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8009d36:	4b7f      	ldr	r3, [pc, #508]	@ (8009f34 <MX_LWIP_Init+0x228>)
 8009d38:	22ff      	movs	r2, #255	@ 0xff
 8009d3a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8009d3c:	4b7d      	ldr	r3, [pc, #500]	@ (8009f34 <MX_LWIP_Init+0x228>)
 8009d3e:	2200      	movs	r2, #0
 8009d40:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8009d42:	4b7d      	ldr	r3, [pc, #500]	@ (8009f38 <MX_LWIP_Init+0x22c>)
 8009d44:	22c0      	movs	r2, #192	@ 0xc0
 8009d46:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8009d48:	4b7b      	ldr	r3, [pc, #492]	@ (8009f38 <MX_LWIP_Init+0x22c>)
 8009d4a:	22a8      	movs	r2, #168	@ 0xa8
 8009d4c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8009d4e:	4b7a      	ldr	r3, [pc, #488]	@ (8009f38 <MX_LWIP_Init+0x22c>)
 8009d50:	2201      	movs	r2, #1
 8009d52:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8009d54:	4b78      	ldr	r3, [pc, #480]	@ (8009f38 <MX_LWIP_Init+0x22c>)
 8009d56:	2201      	movs	r2, #1
 8009d58:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 8009d5a:	f009 f9ef 	bl	801313c <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8009d5e:	4b74      	ldr	r3, [pc, #464]	@ (8009f30 <MX_LWIP_Init+0x224>)
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	061a      	lsls	r2, r3, #24
 8009d64:	4b72      	ldr	r3, [pc, #456]	@ (8009f30 <MX_LWIP_Init+0x224>)
 8009d66:	785b      	ldrb	r3, [r3, #1]
 8009d68:	041b      	lsls	r3, r3, #16
 8009d6a:	431a      	orrs	r2, r3
 8009d6c:	4b70      	ldr	r3, [pc, #448]	@ (8009f30 <MX_LWIP_Init+0x224>)
 8009d6e:	789b      	ldrb	r3, [r3, #2]
 8009d70:	021b      	lsls	r3, r3, #8
 8009d72:	4313      	orrs	r3, r2
 8009d74:	4a6e      	ldr	r2, [pc, #440]	@ (8009f30 <MX_LWIP_Init+0x224>)
 8009d76:	78d2      	ldrb	r2, [r2, #3]
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	061a      	lsls	r2, r3, #24
 8009d7c:	4b6c      	ldr	r3, [pc, #432]	@ (8009f30 <MX_LWIP_Init+0x224>)
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	0619      	lsls	r1, r3, #24
 8009d82:	4b6b      	ldr	r3, [pc, #428]	@ (8009f30 <MX_LWIP_Init+0x224>)
 8009d84:	785b      	ldrb	r3, [r3, #1]
 8009d86:	041b      	lsls	r3, r3, #16
 8009d88:	4319      	orrs	r1, r3
 8009d8a:	4b69      	ldr	r3, [pc, #420]	@ (8009f30 <MX_LWIP_Init+0x224>)
 8009d8c:	789b      	ldrb	r3, [r3, #2]
 8009d8e:	021b      	lsls	r3, r3, #8
 8009d90:	430b      	orrs	r3, r1
 8009d92:	4967      	ldr	r1, [pc, #412]	@ (8009f30 <MX_LWIP_Init+0x224>)
 8009d94:	78c9      	ldrb	r1, [r1, #3]
 8009d96:	430b      	orrs	r3, r1
 8009d98:	021b      	lsls	r3, r3, #8
 8009d9a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009d9e:	431a      	orrs	r2, r3
 8009da0:	4b63      	ldr	r3, [pc, #396]	@ (8009f30 <MX_LWIP_Init+0x224>)
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	0619      	lsls	r1, r3, #24
 8009da6:	4b62      	ldr	r3, [pc, #392]	@ (8009f30 <MX_LWIP_Init+0x224>)
 8009da8:	785b      	ldrb	r3, [r3, #1]
 8009daa:	041b      	lsls	r3, r3, #16
 8009dac:	4319      	orrs	r1, r3
 8009dae:	4b60      	ldr	r3, [pc, #384]	@ (8009f30 <MX_LWIP_Init+0x224>)
 8009db0:	789b      	ldrb	r3, [r3, #2]
 8009db2:	021b      	lsls	r3, r3, #8
 8009db4:	430b      	orrs	r3, r1
 8009db6:	495e      	ldr	r1, [pc, #376]	@ (8009f30 <MX_LWIP_Init+0x224>)
 8009db8:	78c9      	ldrb	r1, [r1, #3]
 8009dba:	430b      	orrs	r3, r1
 8009dbc:	0a1b      	lsrs	r3, r3, #8
 8009dbe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009dc2:	431a      	orrs	r2, r3
 8009dc4:	4b5a      	ldr	r3, [pc, #360]	@ (8009f30 <MX_LWIP_Init+0x224>)
 8009dc6:	781b      	ldrb	r3, [r3, #0]
 8009dc8:	0619      	lsls	r1, r3, #24
 8009dca:	4b59      	ldr	r3, [pc, #356]	@ (8009f30 <MX_LWIP_Init+0x224>)
 8009dcc:	785b      	ldrb	r3, [r3, #1]
 8009dce:	041b      	lsls	r3, r3, #16
 8009dd0:	4319      	orrs	r1, r3
 8009dd2:	4b57      	ldr	r3, [pc, #348]	@ (8009f30 <MX_LWIP_Init+0x224>)
 8009dd4:	789b      	ldrb	r3, [r3, #2]
 8009dd6:	021b      	lsls	r3, r3, #8
 8009dd8:	430b      	orrs	r3, r1
 8009dda:	4955      	ldr	r1, [pc, #340]	@ (8009f30 <MX_LWIP_Init+0x224>)
 8009ddc:	78c9      	ldrb	r1, [r1, #3]
 8009dde:	430b      	orrs	r3, r1
 8009de0:	0e1b      	lsrs	r3, r3, #24
 8009de2:	4313      	orrs	r3, r2
 8009de4:	4a55      	ldr	r2, [pc, #340]	@ (8009f3c <MX_LWIP_Init+0x230>)
 8009de6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8009de8:	4b52      	ldr	r3, [pc, #328]	@ (8009f34 <MX_LWIP_Init+0x228>)
 8009dea:	781b      	ldrb	r3, [r3, #0]
 8009dec:	061a      	lsls	r2, r3, #24
 8009dee:	4b51      	ldr	r3, [pc, #324]	@ (8009f34 <MX_LWIP_Init+0x228>)
 8009df0:	785b      	ldrb	r3, [r3, #1]
 8009df2:	041b      	lsls	r3, r3, #16
 8009df4:	431a      	orrs	r2, r3
 8009df6:	4b4f      	ldr	r3, [pc, #316]	@ (8009f34 <MX_LWIP_Init+0x228>)
 8009df8:	789b      	ldrb	r3, [r3, #2]
 8009dfa:	021b      	lsls	r3, r3, #8
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	4a4d      	ldr	r2, [pc, #308]	@ (8009f34 <MX_LWIP_Init+0x228>)
 8009e00:	78d2      	ldrb	r2, [r2, #3]
 8009e02:	4313      	orrs	r3, r2
 8009e04:	061a      	lsls	r2, r3, #24
 8009e06:	4b4b      	ldr	r3, [pc, #300]	@ (8009f34 <MX_LWIP_Init+0x228>)
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	0619      	lsls	r1, r3, #24
 8009e0c:	4b49      	ldr	r3, [pc, #292]	@ (8009f34 <MX_LWIP_Init+0x228>)
 8009e0e:	785b      	ldrb	r3, [r3, #1]
 8009e10:	041b      	lsls	r3, r3, #16
 8009e12:	4319      	orrs	r1, r3
 8009e14:	4b47      	ldr	r3, [pc, #284]	@ (8009f34 <MX_LWIP_Init+0x228>)
 8009e16:	789b      	ldrb	r3, [r3, #2]
 8009e18:	021b      	lsls	r3, r3, #8
 8009e1a:	430b      	orrs	r3, r1
 8009e1c:	4945      	ldr	r1, [pc, #276]	@ (8009f34 <MX_LWIP_Init+0x228>)
 8009e1e:	78c9      	ldrb	r1, [r1, #3]
 8009e20:	430b      	orrs	r3, r1
 8009e22:	021b      	lsls	r3, r3, #8
 8009e24:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009e28:	431a      	orrs	r2, r3
 8009e2a:	4b42      	ldr	r3, [pc, #264]	@ (8009f34 <MX_LWIP_Init+0x228>)
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	0619      	lsls	r1, r3, #24
 8009e30:	4b40      	ldr	r3, [pc, #256]	@ (8009f34 <MX_LWIP_Init+0x228>)
 8009e32:	785b      	ldrb	r3, [r3, #1]
 8009e34:	041b      	lsls	r3, r3, #16
 8009e36:	4319      	orrs	r1, r3
 8009e38:	4b3e      	ldr	r3, [pc, #248]	@ (8009f34 <MX_LWIP_Init+0x228>)
 8009e3a:	789b      	ldrb	r3, [r3, #2]
 8009e3c:	021b      	lsls	r3, r3, #8
 8009e3e:	430b      	orrs	r3, r1
 8009e40:	493c      	ldr	r1, [pc, #240]	@ (8009f34 <MX_LWIP_Init+0x228>)
 8009e42:	78c9      	ldrb	r1, [r1, #3]
 8009e44:	430b      	orrs	r3, r1
 8009e46:	0a1b      	lsrs	r3, r3, #8
 8009e48:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009e4c:	431a      	orrs	r2, r3
 8009e4e:	4b39      	ldr	r3, [pc, #228]	@ (8009f34 <MX_LWIP_Init+0x228>)
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	0619      	lsls	r1, r3, #24
 8009e54:	4b37      	ldr	r3, [pc, #220]	@ (8009f34 <MX_LWIP_Init+0x228>)
 8009e56:	785b      	ldrb	r3, [r3, #1]
 8009e58:	041b      	lsls	r3, r3, #16
 8009e5a:	4319      	orrs	r1, r3
 8009e5c:	4b35      	ldr	r3, [pc, #212]	@ (8009f34 <MX_LWIP_Init+0x228>)
 8009e5e:	789b      	ldrb	r3, [r3, #2]
 8009e60:	021b      	lsls	r3, r3, #8
 8009e62:	430b      	orrs	r3, r1
 8009e64:	4933      	ldr	r1, [pc, #204]	@ (8009f34 <MX_LWIP_Init+0x228>)
 8009e66:	78c9      	ldrb	r1, [r1, #3]
 8009e68:	430b      	orrs	r3, r1
 8009e6a:	0e1b      	lsrs	r3, r3, #24
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	4a34      	ldr	r2, [pc, #208]	@ (8009f40 <MX_LWIP_Init+0x234>)
 8009e70:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8009e72:	4b31      	ldr	r3, [pc, #196]	@ (8009f38 <MX_LWIP_Init+0x22c>)
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	061a      	lsls	r2, r3, #24
 8009e78:	4b2f      	ldr	r3, [pc, #188]	@ (8009f38 <MX_LWIP_Init+0x22c>)
 8009e7a:	785b      	ldrb	r3, [r3, #1]
 8009e7c:	041b      	lsls	r3, r3, #16
 8009e7e:	431a      	orrs	r2, r3
 8009e80:	4b2d      	ldr	r3, [pc, #180]	@ (8009f38 <MX_LWIP_Init+0x22c>)
 8009e82:	789b      	ldrb	r3, [r3, #2]
 8009e84:	021b      	lsls	r3, r3, #8
 8009e86:	4313      	orrs	r3, r2
 8009e88:	4a2b      	ldr	r2, [pc, #172]	@ (8009f38 <MX_LWIP_Init+0x22c>)
 8009e8a:	78d2      	ldrb	r2, [r2, #3]
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	061a      	lsls	r2, r3, #24
 8009e90:	4b29      	ldr	r3, [pc, #164]	@ (8009f38 <MX_LWIP_Init+0x22c>)
 8009e92:	781b      	ldrb	r3, [r3, #0]
 8009e94:	0619      	lsls	r1, r3, #24
 8009e96:	4b28      	ldr	r3, [pc, #160]	@ (8009f38 <MX_LWIP_Init+0x22c>)
 8009e98:	785b      	ldrb	r3, [r3, #1]
 8009e9a:	041b      	lsls	r3, r3, #16
 8009e9c:	4319      	orrs	r1, r3
 8009e9e:	4b26      	ldr	r3, [pc, #152]	@ (8009f38 <MX_LWIP_Init+0x22c>)
 8009ea0:	789b      	ldrb	r3, [r3, #2]
 8009ea2:	021b      	lsls	r3, r3, #8
 8009ea4:	430b      	orrs	r3, r1
 8009ea6:	4924      	ldr	r1, [pc, #144]	@ (8009f38 <MX_LWIP_Init+0x22c>)
 8009ea8:	78c9      	ldrb	r1, [r1, #3]
 8009eaa:	430b      	orrs	r3, r1
 8009eac:	021b      	lsls	r3, r3, #8
 8009eae:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009eb2:	431a      	orrs	r2, r3
 8009eb4:	4b20      	ldr	r3, [pc, #128]	@ (8009f38 <MX_LWIP_Init+0x22c>)
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	0619      	lsls	r1, r3, #24
 8009eba:	4b1f      	ldr	r3, [pc, #124]	@ (8009f38 <MX_LWIP_Init+0x22c>)
 8009ebc:	785b      	ldrb	r3, [r3, #1]
 8009ebe:	041b      	lsls	r3, r3, #16
 8009ec0:	4319      	orrs	r1, r3
 8009ec2:	4b1d      	ldr	r3, [pc, #116]	@ (8009f38 <MX_LWIP_Init+0x22c>)
 8009ec4:	789b      	ldrb	r3, [r3, #2]
 8009ec6:	021b      	lsls	r3, r3, #8
 8009ec8:	430b      	orrs	r3, r1
 8009eca:	491b      	ldr	r1, [pc, #108]	@ (8009f38 <MX_LWIP_Init+0x22c>)
 8009ecc:	78c9      	ldrb	r1, [r1, #3]
 8009ece:	430b      	orrs	r3, r1
 8009ed0:	0a1b      	lsrs	r3, r3, #8
 8009ed2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009ed6:	431a      	orrs	r2, r3
 8009ed8:	4b17      	ldr	r3, [pc, #92]	@ (8009f38 <MX_LWIP_Init+0x22c>)
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	0619      	lsls	r1, r3, #24
 8009ede:	4b16      	ldr	r3, [pc, #88]	@ (8009f38 <MX_LWIP_Init+0x22c>)
 8009ee0:	785b      	ldrb	r3, [r3, #1]
 8009ee2:	041b      	lsls	r3, r3, #16
 8009ee4:	4319      	orrs	r1, r3
 8009ee6:	4b14      	ldr	r3, [pc, #80]	@ (8009f38 <MX_LWIP_Init+0x22c>)
 8009ee8:	789b      	ldrb	r3, [r3, #2]
 8009eea:	021b      	lsls	r3, r3, #8
 8009eec:	430b      	orrs	r3, r1
 8009eee:	4912      	ldr	r1, [pc, #72]	@ (8009f38 <MX_LWIP_Init+0x22c>)
 8009ef0:	78c9      	ldrb	r1, [r1, #3]
 8009ef2:	430b      	orrs	r3, r1
 8009ef4:	0e1b      	lsrs	r3, r3, #24
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	4a12      	ldr	r2, [pc, #72]	@ (8009f44 <MX_LWIP_Init+0x238>)
 8009efa:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8009efc:	4b12      	ldr	r3, [pc, #72]	@ (8009f48 <MX_LWIP_Init+0x23c>)
 8009efe:	9302      	str	r3, [sp, #8]
 8009f00:	4b12      	ldr	r3, [pc, #72]	@ (8009f4c <MX_LWIP_Init+0x240>)
 8009f02:	9301      	str	r3, [sp, #4]
 8009f04:	2300      	movs	r3, #0
 8009f06:	9300      	str	r3, [sp, #0]
 8009f08:	4b0e      	ldr	r3, [pc, #56]	@ (8009f44 <MX_LWIP_Init+0x238>)
 8009f0a:	4a0d      	ldr	r2, [pc, #52]	@ (8009f40 <MX_LWIP_Init+0x234>)
 8009f0c:	490b      	ldr	r1, [pc, #44]	@ (8009f3c <MX_LWIP_Init+0x230>)
 8009f0e:	4810      	ldr	r0, [pc, #64]	@ (8009f50 <MX_LWIP_Init+0x244>)
 8009f10:	f009 fdb2 	bl	8013a78 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009f14:	480e      	ldr	r0, [pc, #56]	@ (8009f50 <MX_LWIP_Init+0x244>)
 8009f16:	f009 fe97 	bl	8013c48 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8009f1a:	480d      	ldr	r0, [pc, #52]	@ (8009f50 <MX_LWIP_Init+0x244>)
 8009f1c:	f009 fea2 	bl	8013c64 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8009f20:	490c      	ldr	r1, [pc, #48]	@ (8009f54 <MX_LWIP_Init+0x248>)
 8009f22:	480b      	ldr	r0, [pc, #44]	@ (8009f50 <MX_LWIP_Init+0x244>)
 8009f24:	f009 ff1c 	bl	8013d60 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8009f28:	bf00      	nop
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	20006f98 	.word	0x20006f98
 8009f34:	20006f9c 	.word	0x20006f9c
 8009f38:	20006fa0 	.word	0x20006fa0
 8009f3c:	20006f8c 	.word	0x20006f8c
 8009f40:	20006f90 	.word	0x20006f90
 8009f44:	20006f94 	.word	0x20006f94
 8009f48:	0801f6ad 	.word	0x0801f6ad
 8009f4c:	0800a4f9 	.word	0x0800a4f9
 8009f50:	20006f20 	.word	0x20006f20
 8009f54:	0800a565 	.word	0x0800a565

08009f58 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8009f5c:	4803      	ldr	r0, [pc, #12]	@ (8009f6c <MX_LWIP_Process+0x14>)
 8009f5e:	f000 faab 	bl	800a4b8 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8009f62:	f010 fa71 	bl	801a448 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8009f66:	bf00      	nop
 8009f68:	bd80      	pop	{r7, pc}
 8009f6a:	bf00      	nop
 8009f6c:	20006f20 	.word	0x20006f20

08009f70 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b08e      	sub	sp, #56	@ 0x38
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	601a      	str	r2, [r3, #0]
 8009f80:	605a      	str	r2, [r3, #4]
 8009f82:	609a      	str	r2, [r3, #8]
 8009f84:	60da      	str	r2, [r3, #12]
 8009f86:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4a46      	ldr	r2, [pc, #280]	@ (800a0a8 <HAL_ETH_MspInit+0x138>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	f040 8085 	bne.w	800a09e <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8009f94:	2300      	movs	r3, #0
 8009f96:	623b      	str	r3, [r7, #32]
 8009f98:	4b44      	ldr	r3, [pc, #272]	@ (800a0ac <HAL_ETH_MspInit+0x13c>)
 8009f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f9c:	4a43      	ldr	r2, [pc, #268]	@ (800a0ac <HAL_ETH_MspInit+0x13c>)
 8009f9e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009fa2:	6313      	str	r3, [r2, #48]	@ 0x30
 8009fa4:	4b41      	ldr	r3, [pc, #260]	@ (800a0ac <HAL_ETH_MspInit+0x13c>)
 8009fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009fac:	623b      	str	r3, [r7, #32]
 8009fae:	6a3b      	ldr	r3, [r7, #32]
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	61fb      	str	r3, [r7, #28]
 8009fb4:	4b3d      	ldr	r3, [pc, #244]	@ (800a0ac <HAL_ETH_MspInit+0x13c>)
 8009fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fb8:	4a3c      	ldr	r2, [pc, #240]	@ (800a0ac <HAL_ETH_MspInit+0x13c>)
 8009fba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009fbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8009fc0:	4b3a      	ldr	r3, [pc, #232]	@ (800a0ac <HAL_ETH_MspInit+0x13c>)
 8009fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fc4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009fc8:	61fb      	str	r3, [r7, #28]
 8009fca:	69fb      	ldr	r3, [r7, #28]
 8009fcc:	2300      	movs	r3, #0
 8009fce:	61bb      	str	r3, [r7, #24]
 8009fd0:	4b36      	ldr	r3, [pc, #216]	@ (800a0ac <HAL_ETH_MspInit+0x13c>)
 8009fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fd4:	4a35      	ldr	r2, [pc, #212]	@ (800a0ac <HAL_ETH_MspInit+0x13c>)
 8009fd6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009fda:	6313      	str	r3, [r2, #48]	@ 0x30
 8009fdc:	4b33      	ldr	r3, [pc, #204]	@ (800a0ac <HAL_ETH_MspInit+0x13c>)
 8009fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fe0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009fe4:	61bb      	str	r3, [r7, #24]
 8009fe6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009fe8:	2300      	movs	r3, #0
 8009fea:	617b      	str	r3, [r7, #20]
 8009fec:	4b2f      	ldr	r3, [pc, #188]	@ (800a0ac <HAL_ETH_MspInit+0x13c>)
 8009fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ff0:	4a2e      	ldr	r2, [pc, #184]	@ (800a0ac <HAL_ETH_MspInit+0x13c>)
 8009ff2:	f043 0304 	orr.w	r3, r3, #4
 8009ff6:	6313      	str	r3, [r2, #48]	@ 0x30
 8009ff8:	4b2c      	ldr	r3, [pc, #176]	@ (800a0ac <HAL_ETH_MspInit+0x13c>)
 8009ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ffc:	f003 0304 	and.w	r3, r3, #4
 800a000:	617b      	str	r3, [r7, #20]
 800a002:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a004:	2300      	movs	r3, #0
 800a006:	613b      	str	r3, [r7, #16]
 800a008:	4b28      	ldr	r3, [pc, #160]	@ (800a0ac <HAL_ETH_MspInit+0x13c>)
 800a00a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a00c:	4a27      	ldr	r2, [pc, #156]	@ (800a0ac <HAL_ETH_MspInit+0x13c>)
 800a00e:	f043 0301 	orr.w	r3, r3, #1
 800a012:	6313      	str	r3, [r2, #48]	@ 0x30
 800a014:	4b25      	ldr	r3, [pc, #148]	@ (800a0ac <HAL_ETH_MspInit+0x13c>)
 800a016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a018:	f003 0301 	and.w	r3, r3, #1
 800a01c:	613b      	str	r3, [r7, #16]
 800a01e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a020:	2300      	movs	r3, #0
 800a022:	60fb      	str	r3, [r7, #12]
 800a024:	4b21      	ldr	r3, [pc, #132]	@ (800a0ac <HAL_ETH_MspInit+0x13c>)
 800a026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a028:	4a20      	ldr	r2, [pc, #128]	@ (800a0ac <HAL_ETH_MspInit+0x13c>)
 800a02a:	f043 0302 	orr.w	r3, r3, #2
 800a02e:	6313      	str	r3, [r2, #48]	@ 0x30
 800a030:	4b1e      	ldr	r3, [pc, #120]	@ (800a0ac <HAL_ETH_MspInit+0x13c>)
 800a032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a034:	f003 0302 	and.w	r3, r3, #2
 800a038:	60fb      	str	r3, [r7, #12]
 800a03a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800a03c:	2332      	movs	r3, #50	@ 0x32
 800a03e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a040:	2302      	movs	r3, #2
 800a042:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a044:	2300      	movs	r3, #0
 800a046:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a048:	2303      	movs	r3, #3
 800a04a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a04c:	230b      	movs	r3, #11
 800a04e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a050:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a054:	4619      	mov	r1, r3
 800a056:	4816      	ldr	r0, [pc, #88]	@ (800a0b0 <HAL_ETH_MspInit+0x140>)
 800a058:	f7fd fc58 	bl	800790c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800a05c:	2386      	movs	r3, #134	@ 0x86
 800a05e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a060:	2302      	movs	r3, #2
 800a062:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a064:	2300      	movs	r3, #0
 800a066:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a068:	2303      	movs	r3, #3
 800a06a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a06c:	230b      	movs	r3, #11
 800a06e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a070:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a074:	4619      	mov	r1, r3
 800a076:	480f      	ldr	r0, [pc, #60]	@ (800a0b4 <HAL_ETH_MspInit+0x144>)
 800a078:	f7fd fc48 	bl	800790c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800a07c:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800a080:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a082:	2302      	movs	r3, #2
 800a084:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a086:	2300      	movs	r3, #0
 800a088:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a08a:	2303      	movs	r3, #3
 800a08c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a08e:	230b      	movs	r3, #11
 800a090:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a092:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a096:	4619      	mov	r1, r3
 800a098:	4807      	ldr	r0, [pc, #28]	@ (800a0b8 <HAL_ETH_MspInit+0x148>)
 800a09a:	f7fd fc37 	bl	800790c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800a09e:	bf00      	nop
 800a0a0:	3738      	adds	r7, #56	@ 0x38
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	bf00      	nop
 800a0a8:	40028000 	.word	0x40028000
 800a0ac:	40023800 	.word	0x40023800
 800a0b0:	40020800 	.word	0x40020800
 800a0b4:	40020000 	.word	0x40020000
 800a0b8:	40020400 	.word	0x40020400

0800a0bc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b086      	sub	sp, #24
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800a0c8:	4b4d      	ldr	r3, [pc, #308]	@ (800a200 <low_level_init+0x144>)
 800a0ca:	4a4e      	ldr	r2, [pc, #312]	@ (800a204 <low_level_init+0x148>)
 800a0cc:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800a0ce:	4b4c      	ldr	r3, [pc, #304]	@ (800a200 <low_level_init+0x144>)
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800a0d4:	4b4a      	ldr	r3, [pc, #296]	@ (800a200 <low_level_init+0x144>)
 800a0d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800a0da:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800a0dc:	4b48      	ldr	r3, [pc, #288]	@ (800a200 <low_level_init+0x144>)
 800a0de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a0e2:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800a0e4:	4b46      	ldr	r3, [pc, #280]	@ (800a200 <low_level_init+0x144>)
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800a0ee:	2380      	movs	r3, #128	@ 0x80
 800a0f0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800a0f2:	23e1      	movs	r3, #225	@ 0xe1
 800a0f4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800a0fe:	2300      	movs	r3, #0
 800a100:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800a102:	4a3f      	ldr	r2, [pc, #252]	@ (800a200 <low_level_init+0x144>)
 800a104:	f107 0308 	add.w	r3, r7, #8
 800a108:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800a10a:	4b3d      	ldr	r3, [pc, #244]	@ (800a200 <low_level_init+0x144>)
 800a10c:	2200      	movs	r2, #0
 800a10e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800a110:	4b3b      	ldr	r3, [pc, #236]	@ (800a200 <low_level_init+0x144>)
 800a112:	2200      	movs	r2, #0
 800a114:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800a116:	4b3a      	ldr	r3, [pc, #232]	@ (800a200 <low_level_init+0x144>)
 800a118:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800a11c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a11e:	4838      	ldr	r0, [pc, #224]	@ (800a200 <low_level_init+0x144>)
 800a120:	f7fc f822 	bl	8006168 <HAL_ETH_Init>
 800a124:	4603      	mov	r3, r0
 800a126:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800a128:	7dfb      	ldrb	r3, [r7, #23]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d108      	bne.n	800a140 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800a134:	f043 0304 	orr.w	r3, r3, #4
 800a138:	b2da      	uxtb	r2, r3
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800a140:	2304      	movs	r3, #4
 800a142:	4a31      	ldr	r2, [pc, #196]	@ (800a208 <low_level_init+0x14c>)
 800a144:	4931      	ldr	r1, [pc, #196]	@ (800a20c <low_level_init+0x150>)
 800a146:	482e      	ldr	r0, [pc, #184]	@ (800a200 <low_level_init+0x144>)
 800a148:	f7fc f99a 	bl	8006480 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800a14c:	2304      	movs	r3, #4
 800a14e:	4a30      	ldr	r2, [pc, #192]	@ (800a210 <low_level_init+0x154>)
 800a150:	4930      	ldr	r1, [pc, #192]	@ (800a214 <low_level_init+0x158>)
 800a152:	482b      	ldr	r0, [pc, #172]	@ (800a200 <low_level_init+0x144>)
 800a154:	f7fc f9fb 	bl	800654e <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2206      	movs	r2, #6
 800a15c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a160:	4b27      	ldr	r3, [pc, #156]	@ (800a200 <low_level_init+0x144>)
 800a162:	695b      	ldr	r3, [r3, #20]
 800a164:	781a      	ldrb	r2, [r3, #0]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a16c:	4b24      	ldr	r3, [pc, #144]	@ (800a200 <low_level_init+0x144>)
 800a16e:	695b      	ldr	r3, [r3, #20]
 800a170:	785a      	ldrb	r2, [r3, #1]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a178:	4b21      	ldr	r3, [pc, #132]	@ (800a200 <low_level_init+0x144>)
 800a17a:	695b      	ldr	r3, [r3, #20]
 800a17c:	789a      	ldrb	r2, [r3, #2]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a184:	4b1e      	ldr	r3, [pc, #120]	@ (800a200 <low_level_init+0x144>)
 800a186:	695b      	ldr	r3, [r3, #20]
 800a188:	78da      	ldrb	r2, [r3, #3]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a190:	4b1b      	ldr	r3, [pc, #108]	@ (800a200 <low_level_init+0x144>)
 800a192:	695b      	ldr	r3, [r3, #20]
 800a194:	791a      	ldrb	r2, [r3, #4]
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a19c:	4b18      	ldr	r3, [pc, #96]	@ (800a200 <low_level_init+0x144>)
 800a19e:	695b      	ldr	r3, [r3, #20]
 800a1a0:	795a      	ldrb	r2, [r3, #5]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  /* maximum transfer unit */
  netif->mtu = 1500;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800a1ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800a1b6:	f043 030a 	orr.w	r3, r3, #10
 800a1ba:	b2da      	uxtb	r2, r3
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800a1c2:	480f      	ldr	r0, [pc, #60]	@ (800a200 <low_level_init+0x144>)
 800a1c4:	f7fc fc67 	bl	8006a96 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800a1c8:	f107 0310 	add.w	r3, r7, #16
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	211d      	movs	r1, #29
 800a1d0:	480b      	ldr	r0, [pc, #44]	@ (800a200 <low_level_init+0x144>)
 800a1d2:	f7fc fb92 	bl	80068fa <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	f043 030b 	orr.w	r3, r3, #11
 800a1dc:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	211d      	movs	r1, #29
 800a1e4:	4806      	ldr	r0, [pc, #24]	@ (800a200 <low_level_init+0x144>)
 800a1e6:	f7fc fbf0 	bl	80069ca <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800a1ea:	f107 0310 	add.w	r3, r7, #16
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	211d      	movs	r1, #29
 800a1f2:	4803      	ldr	r0, [pc, #12]	@ (800a200 <low_level_init+0x144>)
 800a1f4:	f7fc fb81 	bl	80068fa <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800a1f8:	bf00      	nop
 800a1fa:	3718      	adds	r7, #24
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}
 800a200:	2000a044 	.word	0x2000a044
 800a204:	40028000 	.word	0x40028000
 800a208:	20008874 	.word	0x20008874
 800a20c:	20007024 	.word	0x20007024
 800a210:	200070a4 	.word	0x200070a4
 800a214:	20006fa4 	.word	0x20006fa4

0800a218 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b08a      	sub	sp, #40	@ 0x28
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800a222:	4b4b      	ldr	r3, [pc, #300]	@ (800a350 <low_level_output+0x138>)
 800a224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a226:	689b      	ldr	r3, [r3, #8]
 800a228:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800a22a:	2300      	movs	r3, #0
 800a22c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800a22e:	2300      	movs	r3, #0
 800a230:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800a232:	2300      	movs	r3, #0
 800a234:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800a236:	2300      	movs	r3, #0
 800a238:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800a23a:	4b45      	ldr	r3, [pc, #276]	@ (800a350 <low_level_output+0x138>)
 800a23c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a23e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800a240:	2300      	movs	r3, #0
 800a242:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	623b      	str	r3, [r7, #32]
 800a248:	e05a      	b.n	800a300 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800a24a:	69bb      	ldr	r3, [r7, #24]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	da03      	bge.n	800a25a <low_level_output+0x42>
      {
        errval = ERR_USE;
 800a252:	23f8      	movs	r3, #248	@ 0xf8
 800a254:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
 800a258:	e05c      	b.n	800a314 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800a25a:	6a3b      	ldr	r3, [r7, #32]
 800a25c:	895b      	ldrh	r3, [r3, #10]
 800a25e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800a260:	2300      	movs	r3, #0
 800a262:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800a264:	e02f      	b.n	800a2c6 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800a266:	69fa      	ldr	r2, [r7, #28]
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	18d0      	adds	r0, r2, r3
 800a26c:	6a3b      	ldr	r3, [r7, #32]
 800a26e:	685a      	ldr	r2, [r3, #4]
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	18d1      	adds	r1, r2, r3
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	f5c3 63be 	rsb	r3, r3, #1520	@ 0x5f0
 800a27a:	3304      	adds	r3, #4
 800a27c:	461a      	mov	r2, r3
 800a27e:	f016 fba4 	bl	80209ca <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800a282:	69bb      	ldr	r3, [r7, #24]
 800a284:	68db      	ldr	r3, [r3, #12]
 800a286:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800a288:	69bb      	ldr	r3, [r7, #24]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	da03      	bge.n	800a298 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800a290:	23f8      	movs	r3, #248	@ 0xf8
 800a292:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
 800a296:	e03d      	b.n	800a314 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800a298:	69bb      	ldr	r3, [r7, #24]
 800a29a:	689b      	ldr	r3, [r3, #8]
 800a29c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800a29e:	693a      	ldr	r2, [r7, #16]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	4413      	add	r3, r2
 800a2a4:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 800a2a8:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800a2aa:	68ba      	ldr	r2, [r7, #8]
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	1ad3      	subs	r3, r2, r3
 800a2b0:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 800a2b4:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800a2b6:	697a      	ldr	r2, [r7, #20]
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	1ad3      	subs	r3, r2, r3
 800a2bc:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 800a2c0:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800a2c6:	68fa      	ldr	r2, [r7, #12]
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	4413      	add	r3, r2
 800a2cc:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d8c8      	bhi.n	800a266 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800a2d4:	69fa      	ldr	r2, [r7, #28]
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	18d0      	adds	r0, r2, r3
 800a2da:	6a3b      	ldr	r3, [r7, #32]
 800a2dc:	685a      	ldr	r2, [r3, #4]
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	4413      	add	r3, r2
 800a2e2:	68fa      	ldr	r2, [r7, #12]
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	f016 fb70 	bl	80209ca <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800a2ea:	693a      	ldr	r2, [r7, #16]
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	4413      	add	r3, r2
 800a2f0:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800a2f2:	697a      	ldr	r2, [r7, #20]
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	4413      	add	r3, r2
 800a2f8:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800a2fa:	6a3b      	ldr	r3, [r7, #32]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	623b      	str	r3, [r7, #32]
 800a300:	6a3b      	ldr	r3, [r7, #32]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d1a1      	bne.n	800a24a <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800a306:	6979      	ldr	r1, [r7, #20]
 800a308:	4811      	ldr	r0, [pc, #68]	@ (800a350 <low_level_output+0x138>)
 800a30a:	f7fc f98b 	bl	8006624 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800a30e:	2300      	movs	r3, #0
 800a310:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800a314:	4b0e      	ldr	r3, [pc, #56]	@ (800a350 <low_level_output+0x138>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a31c:	695b      	ldr	r3, [r3, #20]
 800a31e:	f003 0320 	and.w	r3, r3, #32
 800a322:	2b00      	cmp	r3, #0
 800a324:	d00d      	beq.n	800a342 <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800a326:	4b0a      	ldr	r3, [pc, #40]	@ (800a350 <low_level_output+0x138>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a32e:	461a      	mov	r2, r3
 800a330:	2320      	movs	r3, #32
 800a332:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800a334:	4b06      	ldr	r3, [pc, #24]	@ (800a350 <low_level_output+0x138>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a33c:	461a      	mov	r2, r3
 800a33e:	2300      	movs	r3, #0
 800a340:	6053      	str	r3, [r2, #4]
  }
  return errval;
 800a342:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800a346:	4618      	mov	r0, r3
 800a348:	3728      	adds	r7, #40	@ 0x28
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
 800a34e:	bf00      	nop
 800a350:	2000a044 	.word	0x2000a044

0800a354 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b08c      	sub	sp, #48	@ 0x30
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a35c:	2300      	movs	r3, #0
 800a35e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct pbuf *q = NULL;
 800a360:	2300      	movs	r3, #0
 800a362:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint16_t len = 0;
 800a364:	2300      	movs	r3, #0
 800a366:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800a368:	2300      	movs	r3, #0
 800a36a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800a36c:	2300      	movs	r3, #0
 800a36e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800a370:	2300      	movs	r3, #0
 800a372:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800a374:	2300      	movs	r3, #0
 800a376:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 800a378:	484e      	ldr	r0, [pc, #312]	@ (800a4b4 <low_level_input+0x160>)
 800a37a:	f7fc fa3b 	bl	80067f4 <HAL_ETH_GetReceivedFrame>
 800a37e:	4603      	mov	r3, r0
 800a380:	2b00      	cmp	r3, #0
 800a382:	d001      	beq.n	800a388 <low_level_input+0x34>

    return NULL;
 800a384:	2300      	movs	r3, #0
 800a386:	e090      	b.n	800a4aa <low_level_input+0x156>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800a388:	4b4a      	ldr	r3, [pc, #296]	@ (800a4b4 <low_level_input+0x160>)
 800a38a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a38c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800a38e:	4b49      	ldr	r3, [pc, #292]	@ (800a4b4 <low_level_input+0x160>)
 800a390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a392:	627b      	str	r3, [r7, #36]	@ 0x24

  if (len > 0)
 800a394:	89fb      	ldrh	r3, [r7, #14]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d006      	beq.n	800a3a8 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800a39a:	89fb      	ldrh	r3, [r7, #14]
 800a39c:	2203      	movs	r2, #3
 800a39e:	4619      	mov	r1, r3
 800a3a0:	2004      	movs	r0, #4
 800a3a2:	f009 fd1d 	bl	8013de0 <pbuf_alloc>
 800a3a6:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  if (p != NULL)
 800a3a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d04b      	beq.n	800a446 <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800a3ae:	4b41      	ldr	r3, [pc, #260]	@ (800a4b4 <low_level_input+0x160>)
 800a3b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3b2:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800a3b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a3bc:	e040      	b.n	800a440 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 800a3be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3c0:	895b      	ldrh	r3, [r3, #10]
 800a3c2:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800a3c8:	e021      	b.n	800a40e <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800a3ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3cc:	685a      	ldr	r2, [r3, #4]
 800a3ce:	69bb      	ldr	r3, [r7, #24]
 800a3d0:	18d0      	adds	r0, r2, r3
 800a3d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3d4:	69fb      	ldr	r3, [r7, #28]
 800a3d6:	18d1      	adds	r1, r2, r3
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	f5c3 63be 	rsb	r3, r3, #1520	@ 0x5f0
 800a3de:	3304      	adds	r3, #4
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	f016 faf2 	bl	80209ca <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800a3e6:	6a3b      	ldr	r3, [r7, #32]
 800a3e8:	68db      	ldr	r3, [r3, #12]
 800a3ea:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800a3ec:	6a3b      	ldr	r3, [r7, #32]
 800a3ee:	689b      	ldr	r3, [r3, #8]
 800a3f0:	627b      	str	r3, [r7, #36]	@ 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800a3f2:	69fa      	ldr	r2, [r7, #28]
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	4413      	add	r3, r2
 800a3f8:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 800a3fc:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800a3fe:	69ba      	ldr	r2, [r7, #24]
 800a400:	69fb      	ldr	r3, [r7, #28]
 800a402:	1ad3      	subs	r3, r2, r3
 800a404:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 800a408:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800a40a:	2300      	movs	r3, #0
 800a40c:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800a40e:	697a      	ldr	r2, [r7, #20]
 800a410:	69fb      	ldr	r3, [r7, #28]
 800a412:	4413      	add	r3, r2
 800a414:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800a418:	4293      	cmp	r3, r2
 800a41a:	d8d6      	bhi.n	800a3ca <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800a41c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a41e:	685a      	ldr	r2, [r3, #4]
 800a420:	69bb      	ldr	r3, [r7, #24]
 800a422:	18d0      	adds	r0, r2, r3
 800a424:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a426:	69fb      	ldr	r3, [r7, #28]
 800a428:	4413      	add	r3, r2
 800a42a:	697a      	ldr	r2, [r7, #20]
 800a42c:	4619      	mov	r1, r3
 800a42e:	f016 facc 	bl	80209ca <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800a432:	69fa      	ldr	r2, [r7, #28]
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	4413      	add	r3, r2
 800a438:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800a43a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a442:	2b00      	cmp	r3, #0
 800a444:	d1bb      	bne.n	800a3be <low_level_input+0x6a>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800a446:	4b1b      	ldr	r3, [pc, #108]	@ (800a4b4 <low_level_input+0x160>)
 800a448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a44a:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800a44c:	2300      	movs	r3, #0
 800a44e:	613b      	str	r3, [r7, #16]
 800a450:	e00b      	b.n	800a46a <low_level_input+0x116>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800a452:	6a3b      	ldr	r3, [r7, #32]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a45a:	6a3b      	ldr	r3, [r7, #32]
 800a45c:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800a45e:	6a3b      	ldr	r3, [r7, #32]
 800a460:	68db      	ldr	r3, [r3, #12]
 800a462:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	3301      	adds	r3, #1
 800a468:	613b      	str	r3, [r7, #16]
 800a46a:	4b12      	ldr	r3, [pc, #72]	@ (800a4b4 <low_level_input+0x160>)
 800a46c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a46e:	693a      	ldr	r2, [r7, #16]
 800a470:	429a      	cmp	r2, r3
 800a472:	d3ee      	bcc.n	800a452 <low_level_input+0xfe>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800a474:	4b0f      	ldr	r3, [pc, #60]	@ (800a4b4 <low_level_input+0x160>)
 800a476:	2200      	movs	r2, #0
 800a478:	639a      	str	r2, [r3, #56]	@ 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800a47a:	4b0e      	ldr	r3, [pc, #56]	@ (800a4b4 <low_level_input+0x160>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a482:	695b      	ldr	r3, [r3, #20]
 800a484:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d00d      	beq.n	800a4a8 <low_level_input+0x154>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800a48c:	4b09      	ldr	r3, [pc, #36]	@ (800a4b4 <low_level_input+0x160>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a494:	461a      	mov	r2, r3
 800a496:	2380      	movs	r3, #128	@ 0x80
 800a498:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800a49a:	4b06      	ldr	r3, [pc, #24]	@ (800a4b4 <low_level_input+0x160>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	6093      	str	r3, [r2, #8]
  }
  return p;
 800a4a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3730      	adds	r7, #48	@ 0x30
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
 800a4b2:	bf00      	nop
 800a4b4:	2000a044 	.word	0x2000a044

0800a4b8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b084      	sub	sp, #16
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f7ff ff47 	bl	800a354 <low_level_input>
 800a4c6:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d010      	beq.n	800a4f0 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	691b      	ldr	r3, [r3, #16]
 800a4d2:	6879      	ldr	r1, [r7, #4]
 800a4d4:	68f8      	ldr	r0, [r7, #12]
 800a4d6:	4798      	blx	r3
 800a4d8:	4603      	mov	r3, r0
 800a4da:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 800a4dc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d006      	beq.n	800a4f2 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800a4e4:	68f8      	ldr	r0, [r7, #12]
 800a4e6:	f009 fff3 	bl	80144d0 <pbuf_free>
    p = NULL;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	60fb      	str	r3, [r7, #12]
 800a4ee:	e000      	b.n	800a4f2 <ethernetif_input+0x3a>
  if (p == NULL) return;
 800a4f0:	bf00      	nop
  }
}
 800a4f2:	3710      	adds	r7, #16
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b082      	sub	sp, #8
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d106      	bne.n	800a514 <ethernetif_init+0x1c>
 800a506:	4b0e      	ldr	r3, [pc, #56]	@ (800a540 <ethernetif_init+0x48>)
 800a508:	f240 220a 	movw	r2, #522	@ 0x20a
 800a50c:	490d      	ldr	r1, [pc, #52]	@ (800a544 <ethernetif_init+0x4c>)
 800a50e:	480e      	ldr	r0, [pc, #56]	@ (800a548 <ethernetif_init+0x50>)
 800a510:	f015 ffc6 	bl	80204a0 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2273      	movs	r2, #115	@ 0x73
 800a518:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->name[1] = IFNAME1;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2274      	movs	r2, #116	@ 0x74
 800a520:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	4a09      	ldr	r2, [pc, #36]	@ (800a54c <ethernetif_init+0x54>)
 800a528:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	4a08      	ldr	r2, [pc, #32]	@ (800a550 <ethernetif_init+0x58>)
 800a52e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f7ff fdc3 	bl	800a0bc <low_level_init>

  return ERR_OK;
 800a536:	2300      	movs	r3, #0
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3708      	adds	r7, #8
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}
 800a540:	080234e4 	.word	0x080234e4
 800a544:	08023500 	.word	0x08023500
 800a548:	08023510 	.word	0x08023510
 800a54c:	0801d405 	.word	0x0801d405
 800a550:	0800a219 	.word	0x0800a219

0800a554 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a558:	f7fa fd82 	bl	8005060 <HAL_GetTick>
 800a55c:	4603      	mov	r3, r0
}
 800a55e:	4618      	mov	r0, r3
 800a560:	bd80      	pop	{r7, pc}
	...

0800a564 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800a56c:	2300      	movs	r3, #0
 800a56e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800a570:	2300      	movs	r3, #0
 800a572:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800a57a:	089b      	lsrs	r3, r3, #2
 800a57c:	f003 0301 	and.w	r3, r3, #1
 800a580:	b2db      	uxtb	r3, r3
 800a582:	2b00      	cmp	r3, #0
 800a584:	d05d      	beq.n	800a642 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800a586:	4b34      	ldr	r3, [pc, #208]	@ (800a658 <ethernetif_update_config+0xf4>)
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d03f      	beq.n	800a60e <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800a58e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a592:	2100      	movs	r1, #0
 800a594:	4830      	ldr	r0, [pc, #192]	@ (800a658 <ethernetif_update_config+0xf4>)
 800a596:	f7fc fa18 	bl	80069ca <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800a59a:	f7fa fd61 	bl	8005060 <HAL_GetTick>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800a5a2:	f107 0308 	add.w	r3, r7, #8
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	2101      	movs	r1, #1
 800a5aa:	482b      	ldr	r0, [pc, #172]	@ (800a658 <ethernetif_update_config+0xf4>)
 800a5ac:	f7fc f9a5 	bl	80068fa <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800a5b0:	f7fa fd56 	bl	8005060 <HAL_GetTick>
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	1ad3      	subs	r3, r2, r3
 800a5ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a5be:	d828      	bhi.n	800a612 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	f003 0320 	and.w	r3, r3, #32
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d0eb      	beq.n	800a5a2 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800a5ca:	f107 0308 	add.w	r3, r7, #8
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	2110      	movs	r1, #16
 800a5d2:	4821      	ldr	r0, [pc, #132]	@ (800a658 <ethernetif_update_config+0xf4>)
 800a5d4:	f7fc f991 	bl	80068fa <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	f003 0304 	and.w	r3, r3, #4
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d004      	beq.n	800a5ec <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800a5e2:	4b1d      	ldr	r3, [pc, #116]	@ (800a658 <ethernetif_update_config+0xf4>)
 800a5e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a5e8:	60da      	str	r2, [r3, #12]
 800a5ea:	e002      	b.n	800a5f2 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800a5ec:	4b1a      	ldr	r3, [pc, #104]	@ (800a658 <ethernetif_update_config+0xf4>)
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	f003 0302 	and.w	r3, r3, #2
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d003      	beq.n	800a604 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800a5fc:	4b16      	ldr	r3, [pc, #88]	@ (800a658 <ethernetif_update_config+0xf4>)
 800a5fe:	2200      	movs	r2, #0
 800a600:	609a      	str	r2, [r3, #8]
 800a602:	e016      	b.n	800a632 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800a604:	4b14      	ldr	r3, [pc, #80]	@ (800a658 <ethernetif_update_config+0xf4>)
 800a606:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800a60a:	609a      	str	r2, [r3, #8]
 800a60c:	e011      	b.n	800a632 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800a60e:	bf00      	nop
 800a610:	e000      	b.n	800a614 <ethernetif_update_config+0xb0>
          goto error;
 800a612:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800a614:	4b10      	ldr	r3, [pc, #64]	@ (800a658 <ethernetif_update_config+0xf4>)
 800a616:	68db      	ldr	r3, [r3, #12]
 800a618:	08db      	lsrs	r3, r3, #3
 800a61a:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800a61c:	4b0e      	ldr	r3, [pc, #56]	@ (800a658 <ethernetif_update_config+0xf4>)
 800a61e:	689b      	ldr	r3, [r3, #8]
 800a620:	085b      	lsrs	r3, r3, #1
 800a622:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800a624:	4313      	orrs	r3, r2
 800a626:	b29b      	uxth	r3, r3
 800a628:	461a      	mov	r2, r3
 800a62a:	2100      	movs	r1, #0
 800a62c:	480a      	ldr	r0, [pc, #40]	@ (800a658 <ethernetif_update_config+0xf4>)
 800a62e:	f7fc f9cc 	bl	80069ca <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800a632:	2100      	movs	r1, #0
 800a634:	4808      	ldr	r0, [pc, #32]	@ (800a658 <ethernetif_update_config+0xf4>)
 800a636:	f7fc fa8d 	bl	8006b54 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800a63a:	4807      	ldr	r0, [pc, #28]	@ (800a658 <ethernetif_update_config+0xf4>)
 800a63c:	f7fc fa2b 	bl	8006a96 <HAL_ETH_Start>
 800a640:	e002      	b.n	800a648 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800a642:	4805      	ldr	r0, [pc, #20]	@ (800a658 <ethernetif_update_config+0xf4>)
 800a644:	f7fc fa56 	bl	8006af4 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f000 f807 	bl	800a65c <ethernetif_notify_conn_changed>
}
 800a64e:	bf00      	nop
 800a650:	3710      	adds	r7, #16
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop
 800a658:	2000a044 	.word	0x2000a044

0800a65c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b083      	sub	sp, #12
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800a664:	bf00      	nop
 800a666:	370c      	adds	r7, #12
 800a668:	46bd      	mov	sp, r7
 800a66a:	bc80      	pop	{r7}
 800a66c:	4770      	bx	lr
	...

0800a670 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b084      	sub	sp, #16
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d002      	beq.n	800a686 <fs_open+0x16>
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d102      	bne.n	800a68c <fs_open+0x1c>
     return ERR_ARG;
 800a686:	f06f 030f 	mvn.w	r3, #15
 800a68a:	e028      	b.n	800a6de <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800a68c:	4b16      	ldr	r3, [pc, #88]	@ (800a6e8 <fs_open+0x78>)
 800a68e:	60fb      	str	r3, [r7, #12]
 800a690:	e020      	b.n	800a6d4 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	4619      	mov	r1, r3
 800a698:	6838      	ldr	r0, [r7, #0]
 800a69a:	f7f5 fd95 	bl	80001c8 <strcmp>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d114      	bne.n	800a6ce <fs_open+0x5e>
      file->data = (const char *)f->data;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	689a      	ldr	r2, [r3, #8]
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	68da      	ldr	r2, [r3, #12]
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	68da      	ldr	r2, [r3, #12]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	7c1a      	ldrb	r2, [r3, #16]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	e007      	b.n	800a6de <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	60fb      	str	r3, [r7, #12]
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d1db      	bne.n	800a692 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800a6da:	f06f 0305 	mvn.w	r3, #5
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3710      	adds	r7, #16
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	0802dff8 	.word	0x0802dff8

0800a6ec <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b083      	sub	sp, #12
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800a6f4:	bf00      	nop
 800a6f6:	370c      	adds	r7, #12
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bc80      	pop	{r7}
 800a6fc:	4770      	bx	lr

0800a6fe <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800a6fe:	b480      	push	{r7}
 800a700:	b083      	sub	sp, #12
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	685a      	ldr	r2, [r3, #4]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	689b      	ldr	r3, [r3, #8]
 800a70e:	1ad3      	subs	r3, r2, r3
}
 800a710:	4618      	mov	r0, r3
 800a712:	370c      	adds	r7, #12
 800a714:	46bd      	mov	sp, r7
 800a716:	bc80      	pop	{r7}
 800a718:	4770      	bx	lr
	...

0800a71c <ssi_handler>:
#include "clock/clock.h"

const char *ssi_tags[] = { "voltage1", "voltage2", "current", "spower", "netip", "netmask", "netgw", "datetime" };

u16_t ssi_handler(int iIndex, char *pcInsert, int iInsertLen)
{
 800a71c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a71e:	b091      	sub	sp, #68	@ 0x44
 800a720:	af06      	add	r7, sp, #24
 800a722:	60f8      	str	r0, [r7, #12]
 800a724:	60b9      	str	r1, [r7, #8]
 800a726:	607a      	str	r2, [r7, #4]
    int len = 0;
 800a728:	2300      	movs	r3, #0
 800a72a:	627b      	str	r3, [r7, #36]	@ 0x24
    RTC_TimeTypeDef sTime;
    RTC_DateTypeDef sDate;

    switch (iIndex)
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2b07      	cmp	r3, #7
 800a730:	f200 80a8 	bhi.w	800a884 <ssi_handler+0x168>
 800a734:	a201      	add	r2, pc, #4	@ (adr r2, 800a73c <ssi_handler+0x20>)
 800a736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a73a:	bf00      	nop
 800a73c:	0800a75d 	.word	0x0800a75d
 800a740:	0800a77f 	.word	0x0800a77f
 800a744:	0800a7a1 	.word	0x0800a7a1
 800a748:	0800a7c3 	.word	0x0800a7c3
 800a74c:	0800a7f3 	.word	0x0800a7f3
 800a750:	0800a80b 	.word	0x0800a80b
 800a754:	0800a823 	.word	0x0800a823
 800a758:	0800a83b 	.word	0x0800a83b
    {
        case 0:
            len = snprintf(pcInsert, iInsertLen, "%.2f", voltage1);
 800a75c:	687c      	ldr	r4, [r7, #4]
 800a75e:	4b50      	ldr	r3, [pc, #320]	@ (800a8a0 <ssi_handler+0x184>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4618      	mov	r0, r3
 800a764:	f7f5 fea6 	bl	80004b4 <__aeabi_f2d>
 800a768:	4602      	mov	r2, r0
 800a76a:	460b      	mov	r3, r1
 800a76c:	e9cd 2300 	strd	r2, r3, [sp]
 800a770:	4a4c      	ldr	r2, [pc, #304]	@ (800a8a4 <ssi_handler+0x188>)
 800a772:	4621      	mov	r1, r4
 800a774:	68b8      	ldr	r0, [r7, #8]
 800a776:	f015 ff03 	bl	8020580 <sniprintf>
 800a77a:	6278      	str	r0, [r7, #36]	@ 0x24
            break;
 800a77c:	e089      	b.n	800a892 <ssi_handler+0x176>
        case 1:
            len = snprintf(pcInsert, iInsertLen, "%.2f", voltage2);
 800a77e:	687c      	ldr	r4, [r7, #4]
 800a780:	4b49      	ldr	r3, [pc, #292]	@ (800a8a8 <ssi_handler+0x18c>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	4618      	mov	r0, r3
 800a786:	f7f5 fe95 	bl	80004b4 <__aeabi_f2d>
 800a78a:	4602      	mov	r2, r0
 800a78c:	460b      	mov	r3, r1
 800a78e:	e9cd 2300 	strd	r2, r3, [sp]
 800a792:	4a44      	ldr	r2, [pc, #272]	@ (800a8a4 <ssi_handler+0x188>)
 800a794:	4621      	mov	r1, r4
 800a796:	68b8      	ldr	r0, [r7, #8]
 800a798:	f015 fef2 	bl	8020580 <sniprintf>
 800a79c:	6278      	str	r0, [r7, #36]	@ 0x24
            break;
 800a79e:	e078      	b.n	800a892 <ssi_handler+0x176>
        case 2:
            len = snprintf(pcInsert, iInsertLen, "%.2f", current);
 800a7a0:	687c      	ldr	r4, [r7, #4]
 800a7a2:	4b42      	ldr	r3, [pc, #264]	@ (800a8ac <ssi_handler+0x190>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f7f5 fe84 	bl	80004b4 <__aeabi_f2d>
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	e9cd 2300 	strd	r2, r3, [sp]
 800a7b4:	4a3b      	ldr	r2, [pc, #236]	@ (800a8a4 <ssi_handler+0x188>)
 800a7b6:	4621      	mov	r1, r4
 800a7b8:	68b8      	ldr	r0, [r7, #8]
 800a7ba:	f015 fee1 	bl	8020580 <sniprintf>
 800a7be:	6278      	str	r0, [r7, #36]	@ 0x24
            break;
 800a7c0:	e067      	b.n	800a892 <ssi_handler+0x176>
        case 3:
            len = snprintf(pcInsert, iInsertLen, "%.2f", selected_voltage * current);
 800a7c2:	687c      	ldr	r4, [r7, #4]
 800a7c4:	4b3a      	ldr	r3, [pc, #232]	@ (800a8b0 <ssi_handler+0x194>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4a38      	ldr	r2, [pc, #224]	@ (800a8ac <ssi_handler+0x190>)
 800a7ca:	6812      	ldr	r2, [r2, #0]
 800a7cc:	4611      	mov	r1, r2
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7f6 fafe 	bl	8000dd0 <__aeabi_fmul>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f7f5 fe6c 	bl	80004b4 <__aeabi_f2d>
 800a7dc:	4602      	mov	r2, r0
 800a7de:	460b      	mov	r3, r1
 800a7e0:	e9cd 2300 	strd	r2, r3, [sp]
 800a7e4:	4a2f      	ldr	r2, [pc, #188]	@ (800a8a4 <ssi_handler+0x188>)
 800a7e6:	4621      	mov	r1, r4
 800a7e8:	68b8      	ldr	r0, [r7, #8]
 800a7ea:	f015 fec9 	bl	8020580 <sniprintf>
 800a7ee:	6278      	str	r0, [r7, #36]	@ 0x24
            break;
 800a7f0:	e04f      	b.n	800a892 <ssi_handler+0x176>
        case 4:
            len = snprintf(pcInsert, iInsertLen, "%s", ipaddr_ntoa(&gnetif.ip_addr));
 800a7f2:	687c      	ldr	r4, [r7, #4]
 800a7f4:	482f      	ldr	r0, [pc, #188]	@ (800a8b4 <ssi_handler+0x198>)
 800a7f6:	f014 f8a7 	bl	801e948 <ip4addr_ntoa>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	4a2e      	ldr	r2, [pc, #184]	@ (800a8b8 <ssi_handler+0x19c>)
 800a7fe:	4621      	mov	r1, r4
 800a800:	68b8      	ldr	r0, [r7, #8]
 800a802:	f015 febd 	bl	8020580 <sniprintf>
 800a806:	6278      	str	r0, [r7, #36]	@ 0x24
            break;
 800a808:	e043      	b.n	800a892 <ssi_handler+0x176>
        case 5:
            len = snprintf(pcInsert, iInsertLen, "%s", ipaddr_ntoa(&gnetif.netmask));
 800a80a:	687c      	ldr	r4, [r7, #4]
 800a80c:	482b      	ldr	r0, [pc, #172]	@ (800a8bc <ssi_handler+0x1a0>)
 800a80e:	f014 f89b 	bl	801e948 <ip4addr_ntoa>
 800a812:	4603      	mov	r3, r0
 800a814:	4a28      	ldr	r2, [pc, #160]	@ (800a8b8 <ssi_handler+0x19c>)
 800a816:	4621      	mov	r1, r4
 800a818:	68b8      	ldr	r0, [r7, #8]
 800a81a:	f015 feb1 	bl	8020580 <sniprintf>
 800a81e:	6278      	str	r0, [r7, #36]	@ 0x24
            break;
 800a820:	e037      	b.n	800a892 <ssi_handler+0x176>
        case 6:
            len = snprintf(pcInsert, iInsertLen, "%s", ipaddr_ntoa(&gnetif.gw));
 800a822:	687c      	ldr	r4, [r7, #4]
 800a824:	4826      	ldr	r0, [pc, #152]	@ (800a8c0 <ssi_handler+0x1a4>)
 800a826:	f014 f88f 	bl	801e948 <ip4addr_ntoa>
 800a82a:	4603      	mov	r3, r0
 800a82c:	4a22      	ldr	r2, [pc, #136]	@ (800a8b8 <ssi_handler+0x19c>)
 800a82e:	4621      	mov	r1, r4
 800a830:	68b8      	ldr	r0, [r7, #8]
 800a832:	f015 fea5 	bl	8020580 <sniprintf>
 800a836:	6278      	str	r0, [r7, #36]	@ 0x24
            break;
 800a838:	e02b      	b.n	800a892 <ssi_handler+0x176>
        case 7:
            // Получаем текущие дату и время
            HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800a83a:	f107 0318 	add.w	r3, r7, #24
 800a83e:	2200      	movs	r2, #0
 800a840:	4619      	mov	r1, r3
 800a842:	4820      	ldr	r0, [pc, #128]	@ (800a8c4 <ssi_handler+0x1a8>)
 800a844:	f7fe fd21 	bl	800928a <HAL_RTC_GetTime>
            HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800a848:	f107 0314 	add.w	r3, r7, #20
 800a84c:	2200      	movs	r2, #0
 800a84e:	4619      	mov	r1, r3
 800a850:	481c      	ldr	r0, [pc, #112]	@ (800a8c4 <ssi_handler+0x1a8>)
 800a852:	f7fe fdf0 	bl	8009436 <HAL_RTC_GetDate>
            len = snprintf(pcInsert, iInsertLen, "%02d.%02d.%04d %02d:%02d:%02d",
 800a856:	6879      	ldr	r1, [r7, #4]
                           sDate.Date, sDate.Month, 2000 + sDate.Year,
 800a858:	7dbb      	ldrb	r3, [r7, #22]
            len = snprintf(pcInsert, iInsertLen, "%02d.%02d.%04d %02d:%02d:%02d",
 800a85a:	461e      	mov	r6, r3
                           sDate.Date, sDate.Month, 2000 + sDate.Year,
 800a85c:	7d7b      	ldrb	r3, [r7, #21]
            len = snprintf(pcInsert, iInsertLen, "%02d.%02d.%04d %02d:%02d:%02d",
 800a85e:	461a      	mov	r2, r3
                           sDate.Date, sDate.Month, 2000 + sDate.Year,
 800a860:	7dfb      	ldrb	r3, [r7, #23]
            len = snprintf(pcInsert, iInsertLen, "%02d.%02d.%04d %02d:%02d:%02d",
 800a862:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
                           sTime.Hours, sTime.Minutes, sTime.Seconds);
 800a866:	7e38      	ldrb	r0, [r7, #24]
 800a868:	7e7c      	ldrb	r4, [r7, #25]
 800a86a:	7ebd      	ldrb	r5, [r7, #26]
            len = snprintf(pcInsert, iInsertLen, "%02d.%02d.%04d %02d:%02d:%02d",
 800a86c:	9504      	str	r5, [sp, #16]
 800a86e:	9403      	str	r4, [sp, #12]
 800a870:	9002      	str	r0, [sp, #8]
 800a872:	9301      	str	r3, [sp, #4]
 800a874:	9200      	str	r2, [sp, #0]
 800a876:	4633      	mov	r3, r6
 800a878:	4a13      	ldr	r2, [pc, #76]	@ (800a8c8 <ssi_handler+0x1ac>)
 800a87a:	68b8      	ldr	r0, [r7, #8]
 800a87c:	f015 fe80 	bl	8020580 <sniprintf>
 800a880:	6278      	str	r0, [r7, #36]	@ 0x24
            break;
 800a882:	e006      	b.n	800a892 <ssi_handler+0x176>
        default:
            len = snprintf(pcInsert, iInsertLen, "---");
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	4a11      	ldr	r2, [pc, #68]	@ (800a8cc <ssi_handler+0x1b0>)
 800a888:	4619      	mov	r1, r3
 800a88a:	68b8      	ldr	r0, [r7, #8]
 800a88c:	f015 fe78 	bl	8020580 <sniprintf>
 800a890:	6278      	str	r0, [r7, #36]	@ 0x24
    }
    return (u16_t)len;
 800a892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a894:	b29b      	uxth	r3, r3
}
 800a896:	4618      	mov	r0, r3
 800a898:	372c      	adds	r7, #44	@ 0x2c
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a89e:	bf00      	nop
 800a8a0:	20006ac0 	.word	0x20006ac0
 800a8a4:	080235a4 	.word	0x080235a4
 800a8a8:	20006ac4 	.word	0x20006ac4
 800a8ac:	20006ac8 	.word	0x20006ac8
 800a8b0:	20006acc 	.word	0x20006acc
 800a8b4:	20006f24 	.word	0x20006f24
 800a8b8:	080235ac 	.word	0x080235ac
 800a8bc:	20006f28 	.word	0x20006f28
 800a8c0:	20006f2c 	.word	0x20006f2c
 800a8c4:	20002a08 	.word	0x20002a08
 800a8c8:	080235b0 	.word	0x080235b0
 800a8cc:	080235d0 	.word	0x080235d0

0800a8d0 <httpd_ssi_init_custom>:

void httpd_ssi_init_custom(void)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	af00      	add	r7, sp, #0
    http_set_ssi_handler(ssi_handler, ssi_tags, sizeof(ssi_tags) / sizeof(char*));
 800a8d4:	2208      	movs	r2, #8
 800a8d6:	4903      	ldr	r1, [pc, #12]	@ (800a8e4 <httpd_ssi_init_custom+0x14>)
 800a8d8:	4803      	ldr	r0, [pc, #12]	@ (800a8e8 <httpd_ssi_init_custom+0x18>)
 800a8da:	f001 fc1f 	bl	800c11c <http_set_ssi_handler>
}
 800a8de:	bf00      	nop
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	200000c8 	.word	0x200000c8
 800a8e8:	0800a71d 	.word	0x0800a71d

0800a8ec <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state*
http_ssi_state_alloc(void)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b082      	sub	sp, #8
 800a8f0:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 800a8f2:	20dc      	movs	r0, #220	@ 0xdc
 800a8f4:	f008 fe90 	bl	8013618 <mem_malloc>
 800a8f8:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d004      	beq.n	800a90a <http_ssi_state_alloc+0x1e>
    memset(ret, 0, sizeof(struct http_ssi_state));
 800a900:	22dc      	movs	r2, #220	@ 0xdc
 800a902:	2100      	movs	r1, #0
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f015 ffa1 	bl	802084c <memset>
  }
  return ret;
 800a90a:	687b      	ldr	r3, [r7, #4]
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3708      	adds	r7, #8
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}

0800a914 <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b082      	sub	sp, #8
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d002      	beq.n	800a928 <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f008 fcfe 	bl	8013324 <mem_free>
  }
}
 800a928:	bf00      	nop
 800a92a:	3708      	adds	r7, #8
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state* hs)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b082      	sub	sp, #8
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800a938:	22b4      	movs	r2, #180	@ 0xb4
 800a93a:	2100      	movs	r1, #0
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f015 ff85 	bl	802084c <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800a942:	bf00      	nop
 800a944:	3708      	adds	r7, #8
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}

0800a94a <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state*
http_state_alloc(void)
{
 800a94a:	b580      	push	{r7, lr}
 800a94c:	b082      	sub	sp, #8
 800a94e:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800a950:	20b4      	movs	r0, #180	@ 0xb4
 800a952:	f008 fe61 	bl	8013618 <mem_malloc>
 800a956:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d002      	beq.n	800a964 <http_state_alloc+0x1a>
    http_state_init(ret);
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f7ff ffe6 	bl	800a930 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800a964:	687b      	ldr	r3, [r7, #4]
}
 800a966:	4618      	mov	r0, r3
 800a968:	3708      	adds	r7, #8
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}

0800a96e <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800a96e:	b580      	push	{r7, lr}
 800a970:	b082      	sub	sp, #8
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
  if(hs->handle) {
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	695b      	ldr	r3, [r3, #20]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d007      	beq.n	800a98e <http_state_eof+0x20>
    u32_t needed = LWIP_MAX(1, (ms_needed/100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
      ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	695b      	ldr	r3, [r3, #20]
 800a982:	4618      	mov	r0, r3
 800a984:	f7ff feb2 	bl	800a6ec <fs_close>
    hs->handle = NULL;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2200      	movs	r2, #0
 800a98c:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a992:	2b00      	cmp	r3, #0
 800a994:	d007      	beq.n	800a9a6 <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a99a:	4618      	mov	r0, r3
 800a99c:	f7ff ffba 	bl	800a914 <http_ssi_state_free>
    hs->ssi = NULL;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6a1b      	ldr	r3, [r3, #32]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d007      	beq.n	800a9be <http_state_eof+0x50>
    pbuf_free(hs->req);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6a1b      	ldr	r3, [r3, #32]
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f009 fd8c 	bl	80144d0 <pbuf_free>
    hs->req = NULL;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800a9be:	bf00      	nop
 800a9c0:	3708      	adds	r7, #8
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}

0800a9c6 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800a9c6:	b580      	push	{r7, lr}
 800a9c8:	b082      	sub	sp, #8
 800a9ca:	af00      	add	r7, sp, #0
 800a9cc:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d005      	beq.n	800a9e0 <http_state_free+0x1a>
    http_state_eof(hs);
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f7ff ffca 	bl	800a96e <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f008 fca2 	bl	8013324 <mem_free>
  }
}
 800a9e0:	bf00      	nop
 800a9e2:	3708      	adds	r7, #8
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct tcp_pcb *pcb, const void* ptr, u16_t *length, u8_t apiflags)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b086      	sub	sp, #24
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	60f8      	str	r0, [r7, #12]
 800a9f0:	60b9      	str	r1, [r7, #8]
 800a9f2:	607a      	str	r2, [r7, #4]
 800a9f4:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d106      	bne.n	800aa0a <http_write+0x22>
 800a9fc:	4b2c      	ldr	r3, [pc, #176]	@ (800aab0 <http_write+0xc8>)
 800a9fe:	f240 2252 	movw	r2, #594	@ 0x252
 800aa02:	492c      	ldr	r1, [pc, #176]	@ (800aab4 <http_write+0xcc>)
 800aa04:	482c      	ldr	r0, [pc, #176]	@ (800aab8 <http_write+0xd0>)
 800aa06:	f015 fd4b 	bl	80204a0 <iprintf>
  len = *length;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	881b      	ldrh	r3, [r3, #0]
 800aa0e:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800aa10:	8afb      	ldrh	r3, [r7, #22]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d101      	bne.n	800aa1a <http_write+0x32>
    return ERR_OK;
 800aa16:	2300      	movs	r3, #0
 800aa18:	e045      	b.n	800aaa6 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = tcp_sndbuf(pcb);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800aa20:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800aa22:	8aba      	ldrh	r2, [r7, #20]
 800aa24:	8afb      	ldrh	r3, [r7, #22]
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d201      	bcs.n	800aa2e <http_write+0x46>
    len = max_len;
 800aa2a:	8abb      	ldrh	r3, [r7, #20]
 800aa2c:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800aa32:	005b      	lsls	r3, r3, #1
 800aa34:	82bb      	strh	r3, [r7, #20]
  if(len > max_len) {
 800aa36:	8afa      	ldrh	r2, [r7, #22]
 800aa38:	8abb      	ldrh	r3, [r7, #20]
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d901      	bls.n	800aa42 <http_write+0x5a>
    len = max_len;
 800aa3e:	8abb      	ldrh	r3, [r7, #20]
 800aa40:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying go send %d bytes\n", len));
    err = tcp_write(pcb, ptr, len, apiflags);
 800aa42:	78fb      	ldrb	r3, [r7, #3]
 800aa44:	8afa      	ldrh	r2, [r7, #22]
 800aa46:	68b9      	ldr	r1, [r7, #8]
 800aa48:	68f8      	ldr	r0, [r7, #12]
 800aa4a:	f00e fa15 	bl	8018e78 <tcp_write>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800aa52:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aa56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa5a:	d10f      	bne.n	800aa7c <http_write+0x94>
      if ((tcp_sndbuf(pcb) == 0) ||
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d004      	beq.n	800aa70 <http_write+0x88>
        (tcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
      if ((tcp_sndbuf(pcb) == 0) ||
 800aa6c:	2b08      	cmp	r3, #8
 800aa6e:	d902      	bls.n	800aa76 <http_write+0x8e>
          /* no need to try smaller sizes */
          len = 1;
 800aa70:	2301      	movs	r3, #1
 800aa72:	82fb      	strh	r3, [r7, #22]
 800aa74:	e002      	b.n	800aa7c <http_write+0x94>
      } else {
        len /= 2;
 800aa76:	8afb      	ldrh	r3, [r7, #22]
 800aa78:	085b      	lsrs	r3, r3, #1
 800aa7a:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, 
        ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800aa7c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aa80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa84:	d102      	bne.n	800aa8c <http_write+0xa4>
 800aa86:	8afb      	ldrh	r3, [r7, #22]
 800aa88:	2b01      	cmp	r3, #1
 800aa8a:	d8da      	bhi.n	800aa42 <http_write+0x5a>

  if (err == ERR_OK) {
 800aa8c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d103      	bne.n	800aa9c <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	8afa      	ldrh	r2, [r7, #22]
 800aa98:	801a      	strh	r2, [r3, #0]
 800aa9a:	e002      	b.n	800aaa2 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	801a      	strh	r2, [r3, #0]
      when all data has been enqueued but the connection stays open for the next
      request */
   tcp_nagle_enable(pcb);
#endif

  return err;
 800aaa2:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3718      	adds	r7, #24
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
 800aaae:	bf00      	nop
 800aab0:	08023620 	.word	0x08023620
 800aab4:	08023658 	.word	0x08023658
 800aab8:	08023668 	.word	0x08023668

0800aabc <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct tcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b086      	sub	sp, #24
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	60f8      	str	r0, [r7, #12]
 800aac4:	60b9      	str	r1, [r7, #8]
 800aac6:	4613      	mov	r3, r2
 800aac8:	71fb      	strb	r3, [r7, #7]
  err_t err;
  LWIP_DEBUGF(HTTPD_DEBUG, ("Closing connection %p\n", (void*)pcb));

#if LWIP_HTTPD_SUPPORT_POST
  if (hs != NULL) {
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d00c      	beq.n	800aaea <http_close_or_abort_conn+0x2e>
    if ((hs->post_content_len_left != 0)
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d007      	beq.n	800aaea <http_close_or_abort_conn+0x2e>
#if LWIP_HTTPD_POST_MANUAL_WND
       || ((hs->no_auto_wnd != 0) && (hs->unrecved_bytes != 0))
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
       ) {
      /* make sure the post code knows that the connection is closed */
      http_uri_buf[0] = 0;
 800aada:	4b1f      	ldr	r3, [pc, #124]	@ (800ab58 <http_close_or_abort_conn+0x9c>)
 800aadc:	2200      	movs	r2, #0
 800aade:	701a      	strb	r2, [r3, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 800aae0:	223f      	movs	r2, #63	@ 0x3f
 800aae2:	491d      	ldr	r1, [pc, #116]	@ (800ab58 <http_close_or_abort_conn+0x9c>)
 800aae4:	68b8      	ldr	r0, [r7, #8]
 800aae6:	f7f7 fc61 	bl	80023ac <httpd_post_finished>
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  tcp_arg(pcb, NULL);
 800aaea:	2100      	movs	r1, #0
 800aaec:	68f8      	ldr	r0, [r7, #12]
 800aaee:	f00b fafd 	bl	80160ec <tcp_arg>
  tcp_recv(pcb, NULL);
 800aaf2:	2100      	movs	r1, #0
 800aaf4:	68f8      	ldr	r0, [r7, #12]
 800aaf6:	f00b fb09 	bl	801610c <tcp_recv>
  tcp_err(pcb, NULL);
 800aafa:	2100      	movs	r1, #0
 800aafc:	68f8      	ldr	r0, [r7, #12]
 800aafe:	f00b fb47 	bl	8016190 <tcp_err>
  tcp_poll(pcb, NULL, 0);
 800ab02:	2200      	movs	r2, #0
 800ab04:	2100      	movs	r1, #0
 800ab06:	68f8      	ldr	r0, [r7, #12]
 800ab08:	f00b fb7a 	bl	8016200 <tcp_poll>
  tcp_sent(pcb, NULL);
 800ab0c:	2100      	movs	r1, #0
 800ab0e:	68f8      	ldr	r0, [r7, #12]
 800ab10:	f00b fb1e 	bl	8016150 <tcp_sent>
  if (hs != NULL) {
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d002      	beq.n	800ab20 <http_close_or_abort_conn+0x64>
    http_state_free(hs);
 800ab1a:	68b8      	ldr	r0, [r7, #8]
 800ab1c:	f7ff ff53 	bl	800a9c6 <http_state_free>
  }

  if (abort_conn) {
 800ab20:	79fb      	ldrb	r3, [r7, #7]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d004      	beq.n	800ab30 <http_close_or_abort_conn+0x74>
    tcp_abort(pcb);
 800ab26:	68f8      	ldr	r0, [r7, #12]
 800ab28:	f00a fb1c 	bl	8015164 <tcp_abort>
    return ERR_OK;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	e00f      	b.n	800ab50 <http_close_or_abort_conn+0x94>
  }
  err = tcp_close(pcb);
 800ab30:	68f8      	ldr	r0, [r7, #12]
 800ab32:	f00a fa4d 	bl	8014fd0 <tcp_close>
 800ab36:	4603      	mov	r3, r0
 800ab38:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800ab3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d004      	beq.n	800ab4c <http_close_or_abort_conn+0x90>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void*)pcb));
    /* error closing, try again later in poll */
    tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800ab42:	2204      	movs	r2, #4
 800ab44:	4905      	ldr	r1, [pc, #20]	@ (800ab5c <http_close_or_abort_conn+0xa0>)
 800ab46:	68f8      	ldr	r0, [r7, #12]
 800ab48:	f00b fb5a 	bl	8016200 <tcp_poll>
  }
  return err;
 800ab4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3718      	adds	r7, #24
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}
 800ab58:	2000a48c 	.word	0x2000a48c
 800ab5c:	0800be43 	.word	0x0800be43

0800ab60 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct tcp_pcb *pcb, struct http_state *hs)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b082      	sub	sp, #8
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	6039      	str	r1, [r7, #0]
   return http_close_or_abort_conn(pcb, hs, 0);
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	6839      	ldr	r1, [r7, #0]
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f7ff ffa4 	bl	800aabc <http_close_or_abort_conn>
 800ab74:	4603      	mov	r3, r0
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3708      	adds	r7, #8
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}

0800ab7e <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct tcp_pcb *pcb, struct http_state *hs)
{
 800ab7e:	b580      	push	{r7, lr}
 800ab80:	b082      	sub	sp, #8
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	6078      	str	r0, [r7, #4]
 800ab86:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    tcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800ab88:	6839      	ldr	r1, [r7, #0]
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f7ff ffe8 	bl	800ab60 <http_close_conn>
  }
}
 800ab90:	bf00      	nop
 800ab92:	3708      	adds	r7, #8
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}

0800ab98 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b086      	sub	sp, #24
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if(!params || (params[0] == '\0')) {
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d003      	beq.n	800abb0 <extract_uri_parameters+0x18>
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d101      	bne.n	800abb4 <extract_uri_parameters+0x1c>
      return(0);
 800abb0:	2300      	movs	r3, #0
 800abb2:	e04b      	b.n	800ac4c <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for(loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800abb8:	2300      	movs	r3, #0
 800abba:	613b      	str	r3, [r7, #16]
 800abbc:	e03f      	b.n	800ac3e <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	693a      	ldr	r2, [r7, #16]
 800abc2:	320c      	adds	r2, #12
 800abc4:	6979      	ldr	r1, [r7, #20]
 800abc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 800abce:	2126      	movs	r1, #38	@ 0x26
 800abd0:	6978      	ldr	r0, [r7, #20]
 800abd2:	f015 fe43 	bl	802085c <strchr>
 800abd6:	6178      	str	r0, [r7, #20]
    if(pair) {
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d006      	beq.n	800abec <extract_uri_parameters+0x54>
      *pair = '\0';
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	2200      	movs	r2, #0
 800abe2:	701a      	strb	r2, [r3, #0]
      pair++;
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	3301      	adds	r3, #1
 800abe8:	617b      	str	r3, [r7, #20]
 800abea:	e00c      	b.n	800ac06 <extract_uri_parameters+0x6e>
    } else {
       /* We didn't find a new parameter so find the end of the URI and
        * replace the space with a '\0' */
        pair = strchr(equals, ' ');
 800abec:	2120      	movs	r1, #32
 800abee:	68f8      	ldr	r0, [r7, #12]
 800abf0:	f015 fe34 	bl	802085c <strchr>
 800abf4:	6178      	str	r0, [r7, #20]
        if(pair) {
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d002      	beq.n	800ac02 <extract_uri_parameters+0x6a>
            *pair = '\0';
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	2200      	movs	r2, #0
 800ac00:	701a      	strb	r2, [r3, #0]
        }

        /* Revert to NULL so that we exit the loop as expected. */
        pair = NULL;
 800ac02:	2300      	movs	r3, #0
 800ac04:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 800ac06:	213d      	movs	r1, #61	@ 0x3d
 800ac08:	68f8      	ldr	r0, [r7, #12]
 800ac0a:	f015 fe27 	bl	802085c <strchr>
 800ac0e:	60f8      	str	r0, [r7, #12]
    if(equals) {
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d00a      	beq.n	800ac2c <extract_uri_parameters+0x94>
      *equals = '\0';
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	1c59      	adds	r1, r3, #1
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	693a      	ldr	r2, [r7, #16]
 800ac24:	321c      	adds	r2, #28
 800ac26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ac2a:	e005      	b.n	800ac38 <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	693a      	ldr	r2, [r7, #16]
 800ac30:	321c      	adds	r2, #28
 800ac32:	2100      	movs	r1, #0
 800ac34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	613b      	str	r3, [r7, #16]
 800ac3e:	693b      	ldr	r3, [r7, #16]
 800ac40:	2b0f      	cmp	r3, #15
 800ac42:	dc02      	bgt.n	800ac4a <extract_uri_parameters+0xb2>
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d1b9      	bne.n	800abbe <extract_uri_parameters+0x26>
    }
  }

  return loop;
 800ac4a:	693b      	ldr	r3, [r7, #16]
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3718      	adds	r7, #24
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}

0800ac54 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b086      	sub	sp, #24
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d106      	bne.n	800ac70 <get_tag_insert+0x1c>
 800ac62:	4b51      	ldr	r3, [pc, #324]	@ (800ada8 <get_tag_insert+0x154>)
 800ac64:	f240 323d 	movw	r2, #829	@ 0x33d
 800ac68:	4950      	ldr	r1, [pc, #320]	@ (800adac <get_tag_insert+0x158>)
 800ac6a:	4851      	ldr	r0, [pc, #324]	@ (800adb0 <get_tag_insert+0x15c>)
 800ac6c:	f015 fc18 	bl	80204a0 <iprintf>
  ssi = hs->ssi;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac74:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d106      	bne.n	800ac8a <get_tag_insert+0x36>
 800ac7c:	4b4a      	ldr	r3, [pc, #296]	@ (800ada8 <get_tag_insert+0x154>)
 800ac7e:	f240 323f 	movw	r2, #831	@ 0x33f
 800ac82:	494c      	ldr	r1, [pc, #304]	@ (800adb4 <get_tag_insert+0x160>)
 800ac84:	484a      	ldr	r0, [pc, #296]	@ (800adb0 <get_tag_insert+0x15c>)
 800ac86:	f015 fc0b 	bl	80204a0 <iprintf>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if(g_pfnSSIHandler
 800ac8a:	4b4b      	ldr	r3, [pc, #300]	@ (800adb8 <get_tag_insert+0x164>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d02e      	beq.n	800acf0 <get_tag_insert+0x9c>
#if !LWIP_HTTPD_SSI_RAW
     && g_ppcTags && g_iNumTags
 800ac92:	4b4a      	ldr	r3, [pc, #296]	@ (800adbc <get_tag_insert+0x168>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d02a      	beq.n	800acf0 <get_tag_insert+0x9c>
 800ac9a:	4b49      	ldr	r3, [pc, #292]	@ (800adc0 <get_tag_insert+0x16c>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d026      	beq.n	800acf0 <get_tag_insert+0x9c>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for(tag = 0; tag < g_iNumTags; tag++) {
 800aca2:	2300      	movs	r3, #0
 800aca4:	617b      	str	r3, [r7, #20]
 800aca6:	e01e      	b.n	800ace6 <get_tag_insert+0x92>
      if(strcmp(ssi->tag_name, g_ppcTags[tag]) == 0)
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	f103 0011 	add.w	r0, r3, #17
 800acae:	4b43      	ldr	r3, [pc, #268]	@ (800adbc <get_tag_insert+0x168>)
 800acb0:	681a      	ldr	r2, [r3, #0]
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	009b      	lsls	r3, r3, #2
 800acb6:	4413      	add	r3, r2
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4619      	mov	r1, r3
 800acbc:	f7f5 fa84 	bl	80001c8 <strcmp>
 800acc0:	4603      	mov	r3, r0
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d10c      	bne.n	800ace0 <get_tag_insert+0x8c>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = g_pfnSSIHandler(tag, ssi->tag_insert,
 800acc6:	4b3c      	ldr	r3, [pc, #240]	@ (800adb8 <get_tag_insert+0x164>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	693a      	ldr	r2, [r7, #16]
 800accc:	f102 011a 	add.w	r1, r2, #26
 800acd0:	22c0      	movs	r2, #192	@ 0xc0
 800acd2:	6978      	ldr	r0, [r7, #20]
 800acd4:	4798      	blx	r3
 800acd6:	4603      	mov	r3, r0
 800acd8:	461a      	mov	r2, r3
 800acda:	693b      	ldr	r3, [r7, #16]
 800acdc:	81da      	strh	r2, [r3, #14]
           );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 800acde:	e060      	b.n	800ada2 <get_tag_insert+0x14e>
    for(tag = 0; tag < g_iNumTags; tag++) {
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	3301      	adds	r3, #1
 800ace4:	617b      	str	r3, [r7, #20]
 800ace6:	4b36      	ldr	r3, [pc, #216]	@ (800adc0 <get_tag_insert+0x16c>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	697a      	ldr	r2, [r7, #20]
 800acec:	429a      	cmp	r2, r3
 800acee:	dbdb      	blt.n	800aca8 <get_tag_insert+0x54>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	3311      	adds	r3, #17
 800acf4:	4618      	mov	r0, r3
 800acf6:	f7f5 fa71 	bl	80001dc <strlen>
 800acfa:	4603      	mov	r3, r0
 800acfc:	2ba6      	cmp	r3, #166	@ 0xa6
 800acfe:	d818      	bhi.n	800ad32 <get_tag_insert+0xde>
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	3311      	adds	r3, #17
 800ad04:	4618      	mov	r0, r3
 800ad06:	f7f5 fa69 	bl	80001dc <strlen>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	2b09      	cmp	r3, #9
 800ad0e:	d810      	bhi.n	800ad32 <get_tag_insert+0xde>
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	3311      	adds	r3, #17
 800ad14:	4618      	mov	r0, r3
 800ad16:	f7f5 fa61 	bl	80001dc <strlen>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2ba6      	cmp	r3, #166	@ 0xa6
 800ad1e:	d806      	bhi.n	800ad2e <get_tag_insert+0xda>
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	3311      	adds	r3, #17
 800ad24:	4618      	mov	r0, r3
 800ad26:	f7f5 fa59 	bl	80001dc <strlen>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	e002      	b.n	800ad34 <get_tag_insert+0xe0>
 800ad2e:	23a7      	movs	r3, #167	@ 0xa7
 800ad30:	e000      	b.n	800ad34 <get_tag_insert+0xe0>
 800ad32:	2309      	movs	r3, #9
 800ad34:	60fb      	str	r3, [r7, #12]
    LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	331a      	adds	r3, #26
 800ad3a:	2212      	movs	r2, #18
 800ad3c:	4921      	ldr	r1, [pc, #132]	@ (800adc4 <get_tag_insert+0x170>)
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f015 fe43 	bl	80209ca <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	f103 002c 	add.w	r0, r3, #44	@ 0x2c
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	3311      	adds	r3, #17
 800ad4e:	68fa      	ldr	r2, [r7, #12]
 800ad50:	4619      	mov	r1, r3
 800ad52:	f015 fe3a 	bl	80209ca <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	3312      	adds	r3, #18
 800ad5a:	3318      	adds	r3, #24
 800ad5c:	693a      	ldr	r2, [r7, #16]
 800ad5e:	4413      	add	r3, r2
 800ad60:	3302      	adds	r3, #2
 800ad62:	2207      	movs	r2, #7
 800ad64:	4918      	ldr	r1, [pc, #96]	@ (800adc8 <get_tag_insert+0x174>)
 800ad66:	4618      	mov	r0, r3
 800ad68:	f015 fe2f 	bl	80209ca <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	3319      	adds	r3, #25
 800ad70:	693a      	ldr	r2, [r7, #16]
 800ad72:	4413      	add	r3, r2
 800ad74:	2200      	movs	r2, #0
 800ad76:	769a      	strb	r2, [r3, #26]

  len = strlen(ssi->tag_insert);
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	331a      	adds	r3, #26
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f7f5 fa2d 	bl	80001dc <strlen>
 800ad82:	60f8      	str	r0, [r7, #12]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad8a:	d306      	bcc.n	800ad9a <get_tag_insert+0x146>
 800ad8c:	4b06      	ldr	r3, [pc, #24]	@ (800ada8 <get_tag_insert+0x154>)
 800ad8e:	f44f 725e 	mov.w	r2, #888	@ 0x378
 800ad92:	490e      	ldr	r1, [pc, #56]	@ (800adcc <get_tag_insert+0x178>)
 800ad94:	4806      	ldr	r0, [pc, #24]	@ (800adb0 <get_tag_insert+0x15c>)
 800ad96:	f015 fb83 	bl	80204a0 <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	b29a      	uxth	r2, r3
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	81da      	strh	r2, [r3, #14]
}
 800ada2:	3718      	adds	r7, #24
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}
 800ada8:	08023620 	.word	0x08023620
 800adac:	08023690 	.word	0x08023690
 800adb0:	08023668 	.word	0x08023668
 800adb4:	0802369c 	.word	0x0802369c
 800adb8:	2000a4cc 	.word	0x2000a4cc
 800adbc:	2000a4d4 	.word	0x2000a4d4
 800adc0:	2000a4d0 	.word	0x2000a4d0
 800adc4:	080236a8 	.word	0x080236a8
 800adc8:	080236bc 	.word	0x080236bc
 800adcc:	080236c4 	.word	0x080236c4

0800add0 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct tcp_pcb *pcb, struct http_state *hs)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b084      	sub	sp, #16
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	695b      	ldr	r3, [r3, #20]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d105      	bne.n	800adee <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800ade2:	6839      	ldr	r1, [r7, #0]
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f7ff feca 	bl	800ab7e <http_eof>
    return 0;
 800adea:	2300      	movs	r3, #0
 800adec:	e016      	b.n	800ae1c <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	695b      	ldr	r3, [r3, #20]
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7ff fc83 	bl	800a6fe <fs_bytes_left>
 800adf8:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	dc05      	bgt.n	800ae0c <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800ae00:	6839      	ldr	r1, [r7, #0]
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f7ff febb 	bl	800ab7e <http_eof>
    return 0;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	e007      	b.n	800ae1c <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800ae0c:	4b05      	ldr	r3, [pc, #20]	@ (800ae24 <http_check_eof+0x54>)
 800ae0e:	f240 42c5 	movw	r2, #1221	@ 0x4c5
 800ae12:	4905      	ldr	r1, [pc, #20]	@ (800ae28 <http_check_eof+0x58>)
 800ae14:	4805      	ldr	r0, [pc, #20]	@ (800ae2c <http_check_eof+0x5c>)
 800ae16:	f015 fb43 	bl	80204a0 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800ae1a:	2301      	movs	r3, #1
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3710      	adds	r7, #16
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}
 800ae24:	08023620 	.word	0x08023620
 800ae28:	080236d4 	.word	0x080236d4
 800ae2c:	08023668 	.word	0x08023668

0800ae30 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct tcp_pcb *pcb, struct http_state *hs)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b084      	sub	sp, #16
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae42:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d803      	bhi.n	800ae52 <http_send_data_nonssi+0x22>
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae4e:	b29b      	uxth	r3, r3
 800ae50:	e001      	b.n	800ae56 <http_send_data_nonssi+0x26>
 800ae52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ae56:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	6999      	ldr	r1, [r3, #24]
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	bf14      	ite	ne
 800ae64:	2301      	movne	r3, #1
 800ae66:	2300      	moveq	r3, #0
 800ae68:	b2db      	uxtb	r3, r3
 800ae6a:	f107 020c 	add.w	r2, r7, #12
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f7ff fdba 	bl	800a9e8 <http_write>
 800ae74:	4603      	mov	r3, r0
 800ae76:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800ae78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d10d      	bne.n	800ae9c <http_send_data_nonssi+0x6c>
    data_to_send = 1;
 800ae80:	2301      	movs	r3, #1
 800ae82:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	699b      	ldr	r3, [r3, #24]
 800ae88:	89ba      	ldrh	r2, [r7, #12]
 800ae8a:	441a      	add	r2, r3
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae94:	89ba      	ldrh	r2, [r7, #12]
 800ae96:	1a9a      	subs	r2, r3, r2
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  return data_to_send;
 800ae9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3710      	adds	r7, #16
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}
	...

0800aea8 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct tcp_pcb *pcb, struct http_state *hs)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b086      	sub	sp, #24
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	75bb      	strb	r3, [r7, #22]

  struct http_ssi_state *ssi = hs->ssi;
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aebe:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d106      	bne.n	800aed4 <http_send_data_ssi+0x2c>
 800aec6:	4b8e      	ldr	r3, [pc, #568]	@ (800b100 <http_send_data_ssi+0x258>)
 800aec8:	f240 42f2 	movw	r2, #1266	@ 0x4f2
 800aecc:	498d      	ldr	r1, [pc, #564]	@ (800b104 <http_send_data_ssi+0x25c>)
 800aece:	488e      	ldr	r0, [pc, #568]	@ (800b108 <http_send_data_ssi+0x260>)
 800aed0:	f015 fae6 	bl	80204a0 <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = tcp_sndbuf(pcb);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800aeda:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if(ssi->parsed > hs->file) {
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	699b      	ldr	r3, [r3, #24]
 800aee4:	429a      	cmp	r2, r3
 800aee6:	f240 824d 	bls.w	800b384 <http_send_data_ssi+0x4dc>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	681a      	ldr	r2, [r3, #0]
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	699b      	ldr	r3, [r3, #24]
 800aef2:	1ad3      	subs	r3, r2, r3
 800aef4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800aef8:	4293      	cmp	r3, r2
 800aefa:	dc06      	bgt.n	800af0a <http_send_data_ssi+0x62>
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	681a      	ldr	r2, [r3, #0]
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	699b      	ldr	r3, [r3, #24]
 800af04:	1ad3      	subs	r3, r2, r3
 800af06:	b29b      	uxth	r3, r3
 800af08:	e001      	b.n	800af0e <http_send_data_ssi+0x66>
 800af0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800af0e:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	6999      	ldr	r1, [r3, #24]
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af18:	2b00      	cmp	r3, #0
 800af1a:	bf14      	ite	ne
 800af1c:	2301      	movne	r3, #1
 800af1e:	2300      	moveq	r3, #0
 800af20:	b2db      	uxtb	r3, r3
 800af22:	f107 020e 	add.w	r2, r7, #14
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f7ff fd5e 	bl	800a9e8 <http_write>
 800af2c:	4603      	mov	r3, r0
 800af2e:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800af30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d10d      	bne.n	800af54 <http_send_data_ssi+0xac>
      data_to_send = 1;
 800af38:	2301      	movs	r3, #1
 800af3a:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	699b      	ldr	r3, [r3, #24]
 800af40:	89fa      	ldrh	r2, [r7, #14]
 800af42:	441a      	add	r2, r3
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af4c:	89fa      	ldrh	r2, [r7, #14]
 800af4e:	1a9a      	subs	r2, r3, r2
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* If the send buffer is full, return now. */
    if(tcp_sndbuf(pcb) == 0) {
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	f040 8212 	bne.w	800b384 <http_send_data_ssi+0x4dc>
      return data_to_send;
 800af60:	7dbb      	ldrb	r3, [r7, #22]
 800af62:	e25b      	b.n	800b41c <http_send_data_ssi+0x574>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while((ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 800af64:	89fb      	ldrh	r3, [r7, #14]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d101      	bne.n	800af6e <http_send_data_ssi+0xc6>
      return data_to_send;
 800af6a:	7dbb      	ldrb	r3, [r7, #22]
 800af6c:	e256      	b.n	800b41c <http_send_data_ssi+0x574>
    }
    switch(ssi->tag_state) {
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	f893 30db 	ldrb.w	r3, [r3, #219]	@ 0xdb
 800af74:	2b04      	cmp	r3, #4
 800af76:	f200 8200 	bhi.w	800b37a <http_send_data_ssi+0x4d2>
 800af7a:	a201      	add	r2, pc, #4	@ (adr r2, 800af80 <http_send_data_ssi+0xd8>)
 800af7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af80:	0800af95 	.word	0x0800af95
 800af84:	0800afc7 	.word	0x0800afc7
 800af88:	0800b01f 	.word	0x0800b01f
 800af8c:	0800b15b 	.word	0x0800b15b
 800af90:	0800b295 	.word	0x0800b295
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        if(*ssi->parsed == g_pcTagLeadIn[0]) {
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	781a      	ldrb	r2, [r3, #0]
 800af9a:	4b5c      	ldr	r3, [pc, #368]	@ (800b10c <http_send_data_ssi+0x264>)
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d106      	bne.n	800afb0 <http_send_data_ssi+0x108>
          /* We found what could be the lead-in for a new tag so change
           * state appropriately. */
          ssi->tag_state = TAG_LEADIN;
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	2201      	movs	r2, #1
 800afa6:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
          ssi->tag_index = 1;
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	2201      	movs	r2, #1
 800afae:	819a      	strh	r2, [r3, #12]
          ssi->tag_started = ssi->parsed;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	689b      	ldr	r3, [r3, #8]
 800afb4:	1e5a      	subs	r2, r3, #1
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	1c5a      	adds	r2, r3, #1
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	601a      	str	r2, [r3, #0]
        break;
 800afc4:	e1de      	b.n	800b384 <http_send_data_ssi+0x4dc>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if(ssi->tag_index == LEN_TAG_LEAD_IN) {
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	899b      	ldrh	r3, [r3, #12]
 800afca:	2b05      	cmp	r3, #5
 800afcc:	d107      	bne.n	800afde <http_send_data_ssi+0x136>
          ssi->tag_index = 0;
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	2200      	movs	r2, #0
 800afd2:	819a      	strh	r2, [r3, #12]
          ssi->tag_state = TAG_FOUND;
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	2202      	movs	r2, #2
 800afd8:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
          ssi->parsed++;
        }
        break;
 800afdc:	e1d2      	b.n	800b384 <http_send_data_ssi+0x4dc>
          if(*ssi->parsed == g_pcTagLeadIn[ssi->tag_index]) {
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	781a      	ldrb	r2, [r3, #0]
 800afe4:	4949      	ldr	r1, [pc, #292]	@ (800b10c <http_send_data_ssi+0x264>)
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	899b      	ldrh	r3, [r3, #12]
 800afea:	440b      	add	r3, r1
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	429a      	cmp	r2, r3
 800aff0:	d106      	bne.n	800b000 <http_send_data_ssi+0x158>
            ssi->tag_index++;
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	899b      	ldrh	r3, [r3, #12]
 800aff6:	3301      	adds	r3, #1
 800aff8:	b29a      	uxth	r2, r3
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	819a      	strh	r2, [r3, #12]
 800affe:	e003      	b.n	800b008 <http_send_data_ssi+0x160>
            ssi->tag_state = TAG_NONE;
 800b000:	693b      	ldr	r3, [r7, #16]
 800b002:	2200      	movs	r2, #0
 800b004:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
          ssi->parse_left--;
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	689b      	ldr	r3, [r3, #8]
 800b00c:	1e5a      	subs	r2, r3, #1
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	1c5a      	adds	r2, r3, #1
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	601a      	str	r2, [r3, #0]
        break;
 800b01c:	e1b2      	b.n	800b384 <http_send_data_ssi+0x4dc>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	899b      	ldrh	r3, [r3, #12]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d11e      	bne.n	800b064 <http_send_data_ssi+0x1bc>
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	781b      	ldrb	r3, [r3, #0]
 800b02c:	2b20      	cmp	r3, #32
 800b02e:	d00e      	beq.n	800b04e <http_send_data_ssi+0x1a6>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	781b      	ldrb	r3, [r3, #0]
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800b036:	2b09      	cmp	r3, #9
 800b038:	d009      	beq.n	800b04e <http_send_data_ssi+0x1a6>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	781b      	ldrb	r3, [r3, #0]
 800b040:	2b0a      	cmp	r3, #10
 800b042:	d004      	beq.n	800b04e <http_send_data_ssi+0x1a6>
           (*ssi->parsed == '\r'))) {
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	781b      	ldrb	r3, [r3, #0]
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800b04a:	2b0d      	cmp	r3, #13
 800b04c:	d10a      	bne.n	800b064 <http_send_data_ssi+0x1bc>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	689b      	ldr	r3, [r3, #8]
 800b052:	1e5a      	subs	r2, r3, #1
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	1c5a      	adds	r2, r3, #1
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	601a      	str	r2, [r3, #0]
          break;
 800b062:	e18f      	b.n	800b384 <http_send_data_ssi+0x4dc>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if((*ssi->parsed == g_pcTagLeadOut[0]) ||
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	781a      	ldrb	r2, [r3, #0]
 800b06a:	4b29      	ldr	r3, [pc, #164]	@ (800b110 <http_send_data_ssi+0x268>)
 800b06c:	781b      	ldrb	r3, [r3, #0]
 800b06e:	429a      	cmp	r2, r3
 800b070:	d013      	beq.n	800b09a <http_send_data_ssi+0x1f2>
           (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	781b      	ldrb	r3, [r3, #0]
        if((*ssi->parsed == g_pcTagLeadOut[0]) ||
 800b078:	2b20      	cmp	r3, #32
 800b07a:	d00e      	beq.n	800b09a <http_send_data_ssi+0x1f2>
           (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800b07c:	693b      	ldr	r3, [r7, #16]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	781b      	ldrb	r3, [r3, #0]
 800b082:	2b09      	cmp	r3, #9
 800b084:	d009      	beq.n	800b09a <http_send_data_ssi+0x1f2>
           (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	781b      	ldrb	r3, [r3, #0]
           (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800b08c:	2b0a      	cmp	r3, #10
 800b08e:	d004      	beq.n	800b09a <http_send_data_ssi+0x1f2>
           (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	781b      	ldrb	r3, [r3, #0]
 800b096:	2b0d      	cmp	r3, #13
 800b098:	d13e      	bne.n	800b118 <http_send_data_ssi+0x270>

          if(ssi->tag_index == 0) {
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	899b      	ldrh	r3, [r3, #12]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d104      	bne.n	800b0ac <http_send_data_ssi+0x204>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
          if(ssi->tag_index == 0) {
 800b0aa:	e04b      	b.n	800b144 <http_send_data_ssi+0x29c>
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	2203      	movs	r2, #3
 800b0b0:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	899b      	ldrh	r3, [r3, #12]
 800b0b8:	2bff      	cmp	r3, #255	@ 0xff
 800b0ba:	d906      	bls.n	800b0ca <http_send_data_ssi+0x222>
 800b0bc:	4b10      	ldr	r3, [pc, #64]	@ (800b100 <http_send_data_ssi+0x258>)
 800b0be:	f240 525d 	movw	r2, #1373	@ 0x55d
 800b0c2:	4914      	ldr	r1, [pc, #80]	@ (800b114 <http_send_data_ssi+0x26c>)
 800b0c4:	4810      	ldr	r0, [pc, #64]	@ (800b108 <http_send_data_ssi+0x260>)
 800b0c6:	f015 f9eb 	bl	80204a0 <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	899b      	ldrh	r3, [r3, #12]
 800b0ce:	b2da      	uxtb	r2, r3
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	741a      	strb	r2, [r3, #16]
            ssi->tag_name[ssi->tag_index] = '\0';
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	899b      	ldrh	r3, [r3, #12]
 800b0d8:	461a      	mov	r2, r3
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	4413      	add	r3, r2
 800b0de:	2200      	movs	r2, #0
 800b0e0:	745a      	strb	r2, [r3, #17]
            if(*ssi->parsed == g_pcTagLeadOut[0]) {
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	781a      	ldrb	r2, [r3, #0]
 800b0e8:	4b09      	ldr	r3, [pc, #36]	@ (800b110 <http_send_data_ssi+0x268>)
 800b0ea:	781b      	ldrb	r3, [r3, #0]
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	d103      	bne.n	800b0f8 <http_send_data_ssi+0x250>
              ssi->tag_index = 1;
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	819a      	strh	r2, [r3, #12]
          if(ssi->tag_index == 0) {
 800b0f6:	e025      	b.n	800b144 <http_send_data_ssi+0x29c>
            } else {
              ssi->tag_index = 0;
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	819a      	strh	r2, [r3, #12]
          if(ssi->tag_index == 0) {
 800b0fe:	e021      	b.n	800b144 <http_send_data_ssi+0x29c>
 800b100:	08023620 	.word	0x08023620
 800b104:	0802369c 	.word	0x0802369c
 800b108:	08023668 	.word	0x08023668
 800b10c:	08023614 	.word	0x08023614
 800b110:	0802361c 	.word	0x0802361c
 800b114:	0802370c 	.word	0x0802370c
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if(ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	899b      	ldrh	r3, [r3, #12]
 800b11c:	2b07      	cmp	r3, #7
 800b11e:	d80d      	bhi.n	800b13c <http_send_data_ssi+0x294>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	681a      	ldr	r2, [r3, #0]
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	899b      	ldrh	r3, [r3, #12]
 800b128:	1c59      	adds	r1, r3, #1
 800b12a:	b288      	uxth	r0, r1
 800b12c:	6939      	ldr	r1, [r7, #16]
 800b12e:	8188      	strh	r0, [r1, #12]
 800b130:	4619      	mov	r1, r3
 800b132:	7812      	ldrb	r2, [r2, #0]
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	440b      	add	r3, r1
 800b138:	745a      	strb	r2, [r3, #17]
 800b13a:	e003      	b.n	800b144 <http_send_data_ssi+0x29c>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	2200      	movs	r2, #0
 800b140:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	689b      	ldr	r3, [r3, #8]
 800b148:	1e5a      	subs	r2, r3, #1
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	1c5a      	adds	r2, r3, #1
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	601a      	str	r2, [r3, #0]

        break;
 800b158:	e114      	b.n	800b384 <http_send_data_ssi+0x4dc>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	899b      	ldrh	r3, [r3, #12]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d11e      	bne.n	800b1a0 <http_send_data_ssi+0x2f8>
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	2b20      	cmp	r3, #32
 800b16a:	d00e      	beq.n	800b18a <http_send_data_ssi+0x2e2>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	781b      	ldrb	r3, [r3, #0]
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800b172:	2b09      	cmp	r3, #9
 800b174:	d009      	beq.n	800b18a <http_send_data_ssi+0x2e2>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	2b0a      	cmp	r3, #10
 800b17e:	d004      	beq.n	800b18a <http_send_data_ssi+0x2e2>
           (*ssi->parsed == '\r'))) {
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	781b      	ldrb	r3, [r3, #0]
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800b186:	2b0d      	cmp	r3, #13
 800b188:	d10a      	bne.n	800b1a0 <http_send_data_ssi+0x2f8>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800b18a:	693b      	ldr	r3, [r7, #16]
 800b18c:	689b      	ldr	r3, [r3, #8]
 800b18e:	1e5a      	subs	r2, r3, #1
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	1c5a      	adds	r2, r3, #1
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	601a      	str	r2, [r3, #0]
          break;
 800b19e:	e0f1      	b.n	800b384 <http_send_data_ssi+0x4dc>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if(*ssi->parsed == g_pcTagLeadOut[ssi->tag_index]) {
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	781a      	ldrb	r2, [r3, #0]
 800b1a6:	4989      	ldr	r1, [pc, #548]	@ (800b3cc <http_send_data_ssi+0x524>)
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	899b      	ldrh	r3, [r3, #12]
 800b1ac:	440b      	add	r3, r1
 800b1ae:	781b      	ldrb	r3, [r3, #0]
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d160      	bne.n	800b276 <http_send_data_ssi+0x3ce>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	689b      	ldr	r3, [r3, #8]
 800b1b8:	1e5a      	subs	r2, r3, #1
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	1c5a      	adds	r2, r3, #1
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	601a      	str	r2, [r3, #0]

          if(ssi->tag_index == (LEN_TAG_LEAD_OUT - 1)) {
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	899b      	ldrh	r3, [r3, #12]
 800b1cc:	2b02      	cmp	r3, #2
 800b1ce:	d14b      	bne.n	800b268 <http_send_data_ssi+0x3c0>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 800b1d0:	6838      	ldr	r0, [r7, #0]
 800b1d2:	f7ff fd3f 	bl	800ac54 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	819a      	strh	r2, [r3, #12]
            ssi->tag_state = TAG_SENDING;
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	2204      	movs	r2, #4
 800b1e0:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
            ssi->tag_end = ssi->parsed;
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	681a      	ldr	r2, [r3, #0]
 800b1e8:	693b      	ldr	r3, [r7, #16]
 800b1ea:	605a      	str	r2, [r3, #4]
            ssi->parsed = ssi->tag_started;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	685a      	ldr	r2, [r3, #4]
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	699b      	ldr	r3, [r3, #24]
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	f240 80c2 	bls.w	800b37e <http_send_data_ssi+0x4d6>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	685a      	ldr	r2, [r3, #4]
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	699b      	ldr	r3, [r3, #24]
 800b202:	1ad3      	subs	r3, r2, r3
 800b204:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b208:	4293      	cmp	r3, r2
 800b20a:	dc06      	bgt.n	800b21a <http_send_data_ssi+0x372>
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	685a      	ldr	r2, [r3, #4]
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	699b      	ldr	r3, [r3, #24]
 800b214:	1ad3      	subs	r3, r2, r3
 800b216:	b29b      	uxth	r3, r3
 800b218:	e001      	b.n	800b21e <http_send_data_ssi+0x376>
 800b21a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b21e:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	6999      	ldr	r1, [r3, #24]
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b228:	2b00      	cmp	r3, #0
 800b22a:	bf14      	ite	ne
 800b22c:	2301      	movne	r3, #1
 800b22e:	2300      	moveq	r3, #0
 800b230:	b2db      	uxtb	r3, r3
 800b232:	f107 020e 	add.w	r2, r7, #14
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f7ff fbd6 	bl	800a9e8 <http_write>
 800b23c:	4603      	mov	r3, r0
 800b23e:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 800b240:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b244:	2b00      	cmp	r3, #0
 800b246:	f040 809a 	bne.w	800b37e <http_send_data_ssi+0x4d6>
                data_to_send = 1;
 800b24a:	2301      	movs	r3, #1
 800b24c:	75bb      	strb	r3, [r7, #22]
                if(ssi->tag_started <= hs->file) {
                  /* pretend to have sent the tag, too */
                  len += ssi->tag_end - ssi->tag_started;
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	699b      	ldr	r3, [r3, #24]
 800b252:	89fa      	ldrh	r2, [r7, #14]
 800b254:	441a      	add	r2, r3
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b25e:	89fa      	ldrh	r2, [r7, #14]
 800b260:	1a9a      	subs	r2, r3, r2
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	625a      	str	r2, [r3, #36]	@ 0x24
           * back to idle state. */
          ssi->parse_left--;
          ssi->parsed++;
          ssi->tag_state = TAG_NONE;
        }
        break;
 800b266:	e08a      	b.n	800b37e <http_send_data_ssi+0x4d6>
            ssi->tag_index++;
 800b268:	693b      	ldr	r3, [r7, #16]
 800b26a:	899b      	ldrh	r3, [r3, #12]
 800b26c:	3301      	adds	r3, #1
 800b26e:	b29a      	uxth	r2, r3
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	819a      	strh	r2, [r3, #12]
        break;
 800b274:	e083      	b.n	800b37e <http_send_data_ssi+0x4d6>
          ssi->parse_left--;
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	689b      	ldr	r3, [r3, #8]
 800b27a:	1e5a      	subs	r2, r3, #1
 800b27c:	693b      	ldr	r3, [r7, #16]
 800b27e:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	1c5a      	adds	r2, r3, #1
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	2200      	movs	r2, #0
 800b28e:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
        break;
 800b292:	e074      	b.n	800b37e <http_send_data_ssi+0x4d6>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if(ssi->tag_end > hs->file) {
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	685a      	ldr	r2, [r3, #4]
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	699b      	ldr	r3, [r3, #24]
 800b29c:	429a      	cmp	r2, r3
 800b29e:	d93b      	bls.n	800b318 <http_send_data_ssi+0x470>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	685a      	ldr	r2, [r3, #4]
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	699b      	ldr	r3, [r3, #24]
 800b2a8:	1ad3      	subs	r3, r2, r3
 800b2aa:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	dc06      	bgt.n	800b2c0 <http_send_data_ssi+0x418>
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	685a      	ldr	r2, [r3, #4]
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	699b      	ldr	r3, [r3, #24]
 800b2ba:	1ad3      	subs	r3, r2, r3
 800b2bc:	b29b      	uxth	r3, r3
 800b2be:	e001      	b.n	800b2c4 <http_send_data_ssi+0x41c>
 800b2c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b2c4:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 800b2c6:	89fb      	ldrh	r3, [r7, #14]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d010      	beq.n	800b2ee <http_send_data_ssi+0x446>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	6999      	ldr	r1, [r3, #24]
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	bf14      	ite	ne
 800b2d8:	2301      	movne	r3, #1
 800b2da:	2300      	moveq	r3, #0
 800b2dc:	b2db      	uxtb	r3, r3
 800b2de:	f107 020e 	add.w	r2, r7, #14
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f7ff fb80 	bl	800a9e8 <http_write>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	75fb      	strb	r3, [r7, #23]
 800b2ec:	e001      	b.n	800b2f2 <http_send_data_ssi+0x44a>
          } else {
            err = ERR_OK;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 800b2f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d144      	bne.n	800b384 <http_send_data_ssi+0x4dc>
            data_to_send = 1;
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	75bb      	strb	r3, [r7, #22]
            if(ssi->tag_started <= hs->file) {
              /* pretend to have sent the tag, too */
              len += ssi->tag_end - ssi->tag_started;
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	699b      	ldr	r3, [r3, #24]
 800b302:	89fa      	ldrh	r2, [r7, #14]
 800b304:	441a      	add	r2, r3
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b30e:	89fa      	ldrh	r2, [r7, #14]
 800b310:	1a9a      	subs	r2, r3, r2
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	625a      	str	r2, [r3, #36]	@ 0x24
 800b316:	e035      	b.n	800b384 <http_send_data_ssi+0x4dc>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if(ssi->tag_index < ssi->tag_insert_len) {
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	899a      	ldrh	r2, [r3, #12]
 800b31c:	693b      	ldr	r3, [r7, #16]
 800b31e:	89db      	ldrh	r3, [r3, #14]
 800b320:	429a      	cmp	r2, r3
 800b322:	d222      	bcs.n	800b36a <http_send_data_ssi+0x4c2>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	89da      	ldrh	r2, [r3, #14]
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	899b      	ldrh	r3, [r3, #12]
 800b32c:	1ad3      	subs	r3, r2, r3
 800b32e:	b29b      	uxth	r3, r3
 800b330:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	899b      	ldrh	r3, [r3, #12]
 800b336:	3318      	adds	r3, #24
 800b338:	693a      	ldr	r2, [r7, #16]
 800b33a:	4413      	add	r3, r2
 800b33c:	1c99      	adds	r1, r3, #2
 800b33e:	f107 020e 	add.w	r2, r7, #14
 800b342:	2301      	movs	r3, #1
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f7ff fb4f 	bl	800a9e8 <http_write>
 800b34a:	4603      	mov	r3, r0
 800b34c:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 800b34e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d115      	bne.n	800b382 <http_send_data_ssi+0x4da>
              data_to_send = 1;
 800b356:	2301      	movs	r3, #1
 800b358:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	899a      	ldrh	r2, [r3, #12]
 800b35e:	89fb      	ldrh	r3, [r7, #14]
 800b360:	4413      	add	r3, r2
 800b362:	b29a      	uxth	r2, r3
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	819a      	strh	r2, [r3, #12]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 800b368:	e00b      	b.n	800b382 <http_send_data_ssi+0x4da>
              ssi->tag_index = 0;
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	2200      	movs	r2, #0
 800b36e:	819a      	strh	r2, [r3, #12]
              ssi->tag_state = TAG_NONE;
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	2200      	movs	r2, #0
 800b374:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
          break;
 800b378:	e003      	b.n	800b382 <http_send_data_ssi+0x4da>
        default:
          break;
 800b37a:	bf00      	nop
 800b37c:	e002      	b.n	800b384 <http_send_data_ssi+0x4dc>
        break;
 800b37e:	bf00      	nop
 800b380:	e000      	b.n	800b384 <http_send_data_ssi+0x4dc>
          break;
 800b382:	bf00      	nop
  while((ssi->parse_left) && (err == ERR_OK)) {
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	689b      	ldr	r3, [r3, #8]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d004      	beq.n	800b396 <http_send_data_ssi+0x4ee>
 800b38c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b390:	2b00      	cmp	r3, #0
 800b392:	f43f ade7 	beq.w	800af64 <http_send_data_ssi+0xbc>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	f893 30db 	ldrb.w	r3, [r3, #219]	@ 0xdb
 800b39c:	2b04      	cmp	r3, #4
 800b39e:	d03c      	beq.n	800b41a <http_send_data_ssi+0x572>
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	681a      	ldr	r2, [r3, #0]
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	699b      	ldr	r3, [r3, #24]
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d936      	bls.n	800b41a <http_send_data_ssi+0x572>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	681a      	ldr	r2, [r3, #0]
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	699b      	ldr	r3, [r3, #24]
 800b3b4:	1ad3      	subs	r3, r2, r3
 800b3b6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	dc08      	bgt.n	800b3d0 <http_send_data_ssi+0x528>
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	681a      	ldr	r2, [r3, #0]
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	699b      	ldr	r3, [r3, #24]
 800b3c6:	1ad3      	subs	r3, r2, r3
 800b3c8:	b29b      	uxth	r3, r3
 800b3ca:	e003      	b.n	800b3d4 <http_send_data_ssi+0x52c>
 800b3cc:	0802361c 	.word	0x0802361c
 800b3d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b3d4:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	6999      	ldr	r1, [r3, #24]
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	bf14      	ite	ne
 800b3e2:	2301      	movne	r3, #1
 800b3e4:	2300      	moveq	r3, #0
 800b3e6:	b2db      	uxtb	r3, r3
 800b3e8:	f107 020e 	add.w	r2, r7, #14
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f7ff fafb 	bl	800a9e8 <http_write>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800b3f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d10d      	bne.n	800b41a <http_send_data_ssi+0x572>
      data_to_send = 1;
 800b3fe:	2301      	movs	r3, #1
 800b400:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	699b      	ldr	r3, [r3, #24]
 800b406:	89fa      	ldrh	r2, [r7, #14]
 800b408:	441a      	add	r2, r3
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b412:	89fa      	ldrh	r2, [r7, #14]
 800b414:	1a9a      	subs	r2, r3, r2
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	625a      	str	r2, [r3, #36]	@ 0x24
    }
  }
  return data_to_send;
 800b41a:	7dbb      	ldrb	r3, [r7, #22]
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3718      	adds	r7, #24
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}

0800b424 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct tcp_pcb *pcb, struct http_state *hs)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b084      	sub	sp, #16
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800b42e:	2300      	movs	r3, #0
 800b430:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d101      	bne.n	800b43c <http_send+0x18>
    return 0;
 800b438:	2300      	movs	r3, #0
 800b43a:	e030      	b.n	800b49e <http_send+0x7a>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b440:	2b00      	cmp	r3, #0
 800b442:	d108      	bne.n	800b456 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800b444:	6839      	ldr	r1, [r7, #0]
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f7ff fcc2 	bl	800add0 <http_check_eof>
 800b44c:	4603      	mov	r3, r0
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d101      	bne.n	800b456 <http_send+0x32>
      return 0;
 800b452:	2300      	movs	r3, #0
 800b454:	e023      	b.n	800b49e <http_send+0x7a>
    }
  }

#if LWIP_HTTPD_SSI
  if(hs->ssi) {
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d006      	beq.n	800b46c <http_send+0x48>
    data_to_send = http_send_data_ssi(pcb, hs);
 800b45e:	6839      	ldr	r1, [r7, #0]
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f7ff fd21 	bl	800aea8 <http_send_data_ssi>
 800b466:	4603      	mov	r3, r0
 800b468:	73fb      	strb	r3, [r7, #15]
 800b46a:	e005      	b.n	800b478 <http_send+0x54>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800b46c:	6839      	ldr	r1, [r7, #0]
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f7ff fcde 	bl	800ae30 <http_send_data_nonssi>
 800b474:	4603      	mov	r3, r0
 800b476:	73fb      	strb	r3, [r7, #15]
  }

  if((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d10d      	bne.n	800b49c <http_send+0x78>
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	695b      	ldr	r3, [r3, #20]
 800b484:	4618      	mov	r0, r3
 800b486:	f7ff f93a 	bl	800a6fe <fs_bytes_left>
 800b48a:	4603      	mov	r3, r0
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	dc05      	bgt.n	800b49c <http_send+0x78>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800b490:	6839      	ldr	r1, [r7, #0]
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f7ff fb73 	bl	800ab7e <http_eof>
    return 0;
 800b498:	2300      	movs	r3, #0
 800b49a:	e000      	b.n	800b49e <http_send+0x7a>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800b49c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3710      	adds	r7, #16
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}
	...

0800b4a8 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b084      	sub	sp, #16
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	4a1c      	ldr	r2, [pc, #112]	@ (800b528 <http_get_404_file+0x80>)
 800b4b6:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800b4b8:	687a      	ldr	r2, [r7, #4]
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	4619      	mov	r1, r3
 800b4c0:	4610      	mov	r0, r2
 800b4c2:	f7ff f8d5 	bl	800a670 <fs_open>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b4ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d024      	beq.n	800b51c <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	4a15      	ldr	r2, [pc, #84]	@ (800b52c <http_get_404_file+0x84>)
 800b4d6:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800b4d8:	687a      	ldr	r2, [r7, #4]
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	4619      	mov	r1, r3
 800b4e0:	4610      	mov	r0, r2
 800b4e2:	f7ff f8c5 	bl	800a670 <fs_open>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800b4ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d014      	beq.n	800b51c <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	4a0e      	ldr	r2, [pc, #56]	@ (800b530 <http_get_404_file+0x88>)
 800b4f6:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800b4f8:	687a      	ldr	r2, [r7, #4]
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4619      	mov	r1, r3
 800b500:	4610      	mov	r0, r2
 800b502:	f7ff f8b5 	bl	800a670 <fs_open>
 800b506:	4603      	mov	r3, r0
 800b508:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800b50a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d004      	beq.n	800b51c <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	2200      	movs	r2, #0
 800b516:	601a      	str	r2, [r3, #0]
        return NULL;
 800b518:	2300      	movs	r3, #0
 800b51a:	e000      	b.n	800b51e <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800b51c:	687b      	ldr	r3, [r7, #4]
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3710      	adds	r7, #16
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}
 800b526:	bf00      	nop
 800b528:	08023724 	.word	0x08023724
 800b52c:	08023730 	.word	0x08023730
 800b530:	0802373c 	.word	0x0802373c

0800b534 <http_handle_post_finished>:

#if LWIP_HTTPD_SUPPORT_POST
static err_t
http_handle_post_finished(struct http_state *hs)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b082      	sub	sp, #8
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  }
  hs->post_finished = 1;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
  /* application error or POST finished */
  /* NULL-terminate the buffer */
  http_uri_buf[0] = 0;
 800b53c:	4b08      	ldr	r3, [pc, #32]	@ (800b560 <http_handle_post_finished+0x2c>)
 800b53e:	2200      	movs	r2, #0
 800b540:	701a      	strb	r2, [r3, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 800b542:	223f      	movs	r2, #63	@ 0x3f
 800b544:	4906      	ldr	r1, [pc, #24]	@ (800b560 <http_handle_post_finished+0x2c>)
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f7f6 ff30 	bl	80023ac <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 800b54c:	2200      	movs	r2, #0
 800b54e:	4904      	ldr	r1, [pc, #16]	@ (800b560 <http_handle_post_finished+0x2c>)
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f000 fa57 	bl	800ba04 <http_find_file>
 800b556:	4603      	mov	r3, r0
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3708      	adds	r7, #8
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}
 800b560:	2000a48c 	.word	0x2000a48c

0800b564 <http_post_rxpbuf>:
 * @return ERR_OK if passed successfully, another err_t if the response file
 *         hasn't been found (after POST finished)
 */
static err_t
http_post_rxpbuf(struct http_state *hs, struct pbuf *p)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b084      	sub	sp, #16
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	6039      	str	r1, [r7, #0]
  err_t err;

  if (p != NULL) {
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d014      	beq.n	800b59e <http_post_rxpbuf+0x3a>
    /* adjust remaining Content-Length */
    if (hs->post_content_len_left < p->tot_len) {
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b57a:	683a      	ldr	r2, [r7, #0]
 800b57c:	8912      	ldrh	r2, [r2, #8]
 800b57e:	4293      	cmp	r3, r2
 800b580:	d204      	bcs.n	800b58c <http_post_rxpbuf+0x28>
      hs->post_content_len_left = 0;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2200      	movs	r2, #0
 800b586:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 800b58a:	e008      	b.n	800b59e <http_post_rxpbuf+0x3a>
    } else {
      hs->post_content_len_left -= p->tot_len;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b592:	683a      	ldr	r2, [r7, #0]
 800b594:	8912      	ldrh	r2, [r2, #8]
 800b596:	1a9a      	subs	r2, r3, r2
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  /* prevent connection being closed if httpd_post_data_recved() is called nested */
  hs->unrecved_bytes++;
#endif
  err = httpd_post_receive_data(hs, p);
 800b59e:	6839      	ldr	r1, [r7, #0]
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f7f6 fea7 	bl	80022f4 <httpd_post_receive_data>
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	73fb      	strb	r3, [r7, #15]
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  hs->unrecved_bytes--;
#endif
  if (err != ERR_OK) {
 800b5aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d003      	beq.n	800b5ba <http_post_rxpbuf+0x56>
    /* Ignore remaining content in case of application error */
    hs->post_content_len_left = 0;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  }
  if (hs->post_content_len_left == 0) {
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d104      	bne.n	800b5ce <http_post_rxpbuf+0x6a>
    if (hs->unrecved_bytes != 0) {
       return ERR_OK;
    }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
    /* application error or POST finished */
    return http_handle_post_finished(hs);
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f7ff ffb5 	bl	800b534 <http_handle_post_finished>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	e000      	b.n	800b5d0 <http_post_rxpbuf+0x6c>
  }

  return ERR_OK;
 800b5ce:	2300      	movs	r3, #0
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3710      	adds	r7, #16
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}

0800b5d8 <http_post_request>:
 *         another err_t: Error parsing POST or denied by the application
 */
static err_t
http_post_request(struct pbuf *inp, struct http_state *hs,
                  char *data, u16_t data_len, char *uri, char *uri_end)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b092      	sub	sp, #72	@ 0x48
 800b5dc:	af04      	add	r7, sp, #16
 800b5de:	60f8      	str	r0, [r7, #12]
 800b5e0:	60b9      	str	r1, [r7, #8]
 800b5e2:	607a      	str	r2, [r7, #4]
 800b5e4:	807b      	strh	r3, [r7, #2]
  err_t err;
  /* search for end-of-header (first double-CRLF) */
  char* crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 800b5e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b5e8:	1c58      	adds	r0, r3, #1
 800b5ea:	887a      	ldrh	r2, [r7, #2]
 800b5ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b5ee:	1c59      	adds	r1, r3, #1
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	1acb      	subs	r3, r1, r3
 800b5f4:	1ad3      	subs	r3, r2, r3
 800b5f6:	461a      	mov	r2, r3
 800b5f8:	4967      	ldr	r1, [pc, #412]	@ (800b798 <http_post_request+0x1c0>)
 800b5fa:	f007 fd36 	bl	801306a <lwip_strnstr>
 800b5fe:	62b8      	str	r0, [r7, #40]	@ 0x28

  if (crlfcrlf != NULL) {
 800b600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b602:	2b00      	cmp	r3, #0
 800b604:	f000 80c1 	beq.w	800b78a <http_post_request+0x1b2>
    /* search for "Content-Length: " */
#define HTTP_HDR_CONTENT_LEN                "Content-Length: "
#define HTTP_HDR_CONTENT_LEN_LEN            16
#define HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN  10
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 800b608:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b60a:	1c58      	adds	r0, r3, #1
 800b60c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b60e:	3301      	adds	r3, #1
 800b610:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b612:	1ad3      	subs	r3, r2, r3
 800b614:	461a      	mov	r2, r3
 800b616:	4961      	ldr	r1, [pc, #388]	@ (800b79c <http_post_request+0x1c4>)
 800b618:	f007 fd27 	bl	801306a <lwip_strnstr>
 800b61c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (scontent_len != NULL) {
 800b61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b620:	2b00      	cmp	r3, #0
 800b622:	f000 80af 	beq.w	800b784 <http_post_request+0x1ac>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 800b626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b628:	3310      	adds	r3, #16
 800b62a:	220a      	movs	r2, #10
 800b62c:	495c      	ldr	r1, [pc, #368]	@ (800b7a0 <http_post_request+0x1c8>)
 800b62e:	4618      	mov	r0, r3
 800b630:	f007 fd1b 	bl	801306a <lwip_strnstr>
 800b634:	6238      	str	r0, [r7, #32]
      if (scontent_len_end != NULL) {
 800b636:	6a3b      	ldr	r3, [r7, #32]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	f000 80a3 	beq.w	800b784 <http_post_request+0x1ac>
        int content_len;
        char *content_len_num = scontent_len + HTTP_HDR_CONTENT_LEN_LEN;
 800b63e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b640:	3310      	adds	r3, #16
 800b642:	61fb      	str	r3, [r7, #28]
        content_len = atoi(content_len_num);
 800b644:	69f8      	ldr	r0, [r7, #28]
 800b646:	f014 f947 	bl	801f8d8 <atoi>
 800b64a:	6378      	str	r0, [r7, #52]	@ 0x34
        if (content_len == 0) {
 800b64c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d10b      	bne.n	800b66a <http_post_request+0x92>
          /* if atoi returns 0 on error, fix this */
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 800b652:	69fb      	ldr	r3, [r7, #28]
 800b654:	781b      	ldrb	r3, [r3, #0]
 800b656:	2b30      	cmp	r3, #48	@ 0x30
 800b658:	d104      	bne.n	800b664 <http_post_request+0x8c>
 800b65a:	69fb      	ldr	r3, [r7, #28]
 800b65c:	3301      	adds	r3, #1
 800b65e:	781b      	ldrb	r3, [r3, #0]
 800b660:	2b0d      	cmp	r3, #13
 800b662:	d002      	beq.n	800b66a <http_post_request+0x92>
            content_len = -1;
 800b664:	f04f 33ff 	mov.w	r3, #4294967295
 800b668:	637b      	str	r3, [r7, #52]	@ 0x34
          }
        }
        if (content_len >= 0) {
 800b66a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	f2c0 8086 	blt.w	800b77e <http_post_request+0x1a6>
          /* adjust length of HTTP header passed to application */
          const char *hdr_start_after_uri = uri_end + 1;
 800b672:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b674:	3301      	adds	r3, #1
 800b676:	61bb      	str	r3, [r7, #24]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 800b678:	887a      	ldrh	r2, [r7, #2]
 800b67a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b67c:	1d19      	adds	r1, r3, #4
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	1acb      	subs	r3, r1, r3
 800b682:	429a      	cmp	r2, r3
 800b684:	db05      	blt.n	800b692 <http_post_request+0xba>
 800b686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b688:	1d1a      	adds	r2, r3, #4
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	1ad3      	subs	r3, r2, r3
 800b68e:	b29b      	uxth	r3, r3
 800b690:	e000      	b.n	800b694 <http_post_request+0xbc>
 800b692:	887b      	ldrh	r3, [r7, #2]
 800b694:	82fb      	strh	r3, [r7, #22]
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 800b696:	887a      	ldrh	r2, [r7, #2]
 800b698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b69a:	1d19      	adds	r1, r3, #4
 800b69c:	69bb      	ldr	r3, [r7, #24]
 800b69e:	1acb      	subs	r3, r1, r3
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	db05      	blt.n	800b6b0 <http_post_request+0xd8>
 800b6a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6a6:	1d1a      	adds	r2, r3, #4
 800b6a8:	69bb      	ldr	r3, [r7, #24]
 800b6aa:	1ad3      	subs	r3, r2, r3
 800b6ac:	b29b      	uxth	r3, r3
 800b6ae:	e000      	b.n	800b6b2 <http_post_request+0xda>
 800b6b0:	887b      	ldrh	r3, [r7, #2]
 800b6b2:	82bb      	strh	r3, [r7, #20]
          u8_t post_auto_wnd = 1;
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	74bb      	strb	r3, [r7, #18]
          http_uri_buf[0] = 0;
 800b6b8:	4b3a      	ldr	r3, [pc, #232]	@ (800b7a4 <http_post_request+0x1cc>)
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	701a      	strb	r2, [r3, #0]
          /* trim http header */
          *crlfcrlf = 0;
 800b6be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	701a      	strb	r2, [r3, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 800b6c4:	8aba      	ldrh	r2, [r7, #20]
 800b6c6:	f107 0312 	add.w	r3, r7, #18
 800b6ca:	9303      	str	r3, [sp, #12]
 800b6cc:	233f      	movs	r3, #63	@ 0x3f
 800b6ce:	9302      	str	r3, [sp, #8]
 800b6d0:	4b34      	ldr	r3, [pc, #208]	@ (800b7a4 <http_post_request+0x1cc>)
 800b6d2:	9301      	str	r3, [sp, #4]
 800b6d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6d6:	9300      	str	r3, [sp, #0]
 800b6d8:	4613      	mov	r3, r2
 800b6da:	69ba      	ldr	r2, [r7, #24]
 800b6dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b6de:	68b8      	ldr	r0, [r7, #8]
 800b6e0:	f7f6 fddc 	bl	800229c <httpd_post_begin>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	74fb      	strb	r3, [r7, #19]
            http_uri_buf, LWIP_HTTPD_URI_BUF_LEN, &post_auto_wnd);
          if (err == ERR_OK) {
 800b6e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d13f      	bne.n	800b770 <http_post_request+0x198>
            /* try to pass in data of the first pbuf(s) */
            struct pbuf *q = inp;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	633b      	str	r3, [r7, #48]	@ 0x30
            u16_t start_offset = hdr_len;
 800b6f4:	8afb      	ldrh	r3, [r7, #22]
 800b6f6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
#if LWIP_HTTPD_POST_MANUAL_WND
            hs->no_auto_wnd = !post_auto_wnd;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
            /* set the Content-Length to be received for this POST */
            hs->post_content_len_left = (u32_t)content_len;
 800b6f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

            /* get to the pbuf where the body starts */
            while((q != NULL) && (q->len <= start_offset)) {
 800b700:	e007      	b.n	800b712 <http_post_request+0x13a>
              start_offset -= q->len;
 800b702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b704:	895b      	ldrh	r3, [r3, #10]
 800b706:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b708:	1ad3      	subs	r3, r2, r3
 800b70a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
              q = q->next;
 800b70c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	633b      	str	r3, [r7, #48]	@ 0x30
            while((q != NULL) && (q->len <= start_offset)) {
 800b712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b714:	2b00      	cmp	r3, #0
 800b716:	d004      	beq.n	800b722 <http_post_request+0x14a>
 800b718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b71a:	895b      	ldrh	r3, [r3, #10]
 800b71c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b71e:	429a      	cmp	r2, r3
 800b720:	d2ef      	bcs.n	800b702 <http_post_request+0x12a>
            }
            if (q != NULL) {
 800b722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b724:	2b00      	cmp	r3, #0
 800b726:	d010      	beq.n	800b74a <http_post_request+0x172>
              /* hide the remaining HTTP header */
              pbuf_header(q, -(s16_t)start_offset);
 800b728:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b72a:	425b      	negs	r3, r3
 800b72c:	b29b      	uxth	r3, r3
 800b72e:	b21b      	sxth	r3, r3
 800b730:	4619      	mov	r1, r3
 800b732:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b734:	f008 fea8 	bl	8014488 <pbuf_header>
              if (!post_auto_wnd) {
                /* already tcp_recved() this data... */
                hs->unrecved_bytes = q->tot_len;
              }
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
              pbuf_ref(q);
 800b738:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b73a:	f008 ff73 	bl	8014624 <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 800b73e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b740:	68b8      	ldr	r0, [r7, #8]
 800b742:	f7ff ff0f 	bl	800b564 <http_post_rxpbuf>
 800b746:	4603      	mov	r3, r0
 800b748:	e021      	b.n	800b78e <http_post_request+0x1b6>
            } else if (hs->post_content_len_left == 0) {
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b750:	2b00      	cmp	r3, #0
 800b752:	d10b      	bne.n	800b76c <http_post_request+0x194>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 800b754:	2202      	movs	r2, #2
 800b756:	2100      	movs	r1, #0
 800b758:	2004      	movs	r0, #4
 800b75a:	f008 fb41 	bl	8013de0 <pbuf_alloc>
 800b75e:	6338      	str	r0, [r7, #48]	@ 0x30
              return http_post_rxpbuf(hs, q);
 800b760:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b762:	68b8      	ldr	r0, [r7, #8]
 800b764:	f7ff fefe 	bl	800b564 <http_post_rxpbuf>
 800b768:	4603      	mov	r3, r0
 800b76a:	e010      	b.n	800b78e <http_post_request+0x1b6>
            } else {
              return ERR_OK;
 800b76c:	2300      	movs	r3, #0
 800b76e:	e00e      	b.n	800b78e <http_post_request+0x1b6>
            }
          } else {
            /* return file passed from application */
            return http_find_file(hs, http_uri_buf, 0);
 800b770:	2200      	movs	r2, #0
 800b772:	490c      	ldr	r1, [pc, #48]	@ (800b7a4 <http_post_request+0x1cc>)
 800b774:	68b8      	ldr	r0, [r7, #8]
 800b776:	f000 f945 	bl	800ba04 <http_find_file>
 800b77a:	4603      	mov	r3, r0
 800b77c:	e007      	b.n	800b78e <http_post_request+0x1b6>
          }
        } else {
          LWIP_DEBUGF(HTTPD_DEBUG, ("POST received invalid Content-Length: %s\n",
            content_len_num));
          return ERR_ARG;
 800b77e:	f06f 030f 	mvn.w	r3, #15
 800b782:	e004      	b.n	800b78e <http_post_request+0x1b6>
    }
    /* If we come here, headers are fully received (double-crlf), but Content-Length
       was not included. Since this is currently the only supported method, we have
       to fail in this case! */
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error when parsing Content-Length\n"));
    return ERR_ARG;
 800b784:	f06f 030f 	mvn.w	r3, #15
 800b788:	e001      	b.n	800b78e <http_post_request+0x1b6>
  }
  /* if we come here, the POST is incomplete */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  return ERR_INPROGRESS;
 800b78a:	f06f 0304 	mvn.w	r3, #4
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  return ERR_ARG;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800b78e:	4618      	mov	r0, r3
 800b790:	3738      	adds	r7, #56	@ 0x38
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}
 800b796:	bf00      	nop
 800b798:	08023748 	.word	0x08023748
 800b79c:	08023750 	.word	0x08023750
 800b7a0:	08023764 	.word	0x08023764
 800b7a4:	2000a48c 	.word	0x2000a48c

0800b7a8 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct tcp_pcb *pcb)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b092      	sub	sp, #72	@ 0x48
 800b7ac:	af02      	add	r7, sp, #8
 800b7ae:	60f8      	str	r0, [r7, #12]
 800b7b0:	60b9      	str	r1, [r7, #8]
 800b7b2:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	627b      	str	r3, [r7, #36]	@ 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800b7b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d106      	bne.n	800b7cc <http_parse_request+0x24>
 800b7be:	4b87      	ldr	r3, [pc, #540]	@ (800b9dc <http_parse_request+0x234>)
 800b7c0:	f44f 62f8 	mov.w	r2, #1984	@ 0x7c0
 800b7c4:	4986      	ldr	r1, [pc, #536]	@ (800b9e0 <http_parse_request+0x238>)
 800b7c6:	4887      	ldr	r0, [pc, #540]	@ (800b9e4 <http_parse_request+0x23c>)
 800b7c8:	f014 fe6a 	bl	80204a0 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d106      	bne.n	800b7e0 <http_parse_request+0x38>
 800b7d2:	4b82      	ldr	r3, [pc, #520]	@ (800b9dc <http_parse_request+0x234>)
 800b7d4:	f240 72c1 	movw	r2, #1985	@ 0x7c1
 800b7d8:	4983      	ldr	r1, [pc, #524]	@ (800b9e8 <http_parse_request+0x240>)
 800b7da:	4882      	ldr	r0, [pc, #520]	@ (800b9e4 <http_parse_request+0x23c>)
 800b7dc:	f014 fe60 	bl	80204a0 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	695b      	ldr	r3, [r3, #20]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d103      	bne.n	800b7f0 <http_parse_request+0x48>
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	699b      	ldr	r3, [r3, #24]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d002      	beq.n	800b7f6 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800b7f0:	f06f 0307 	mvn.w	r3, #7
 800b7f4:	e0ed      	b.n	800b9d2 <http_parse_request+0x22a>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	6a1b      	ldr	r3, [r3, #32]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d103      	bne.n	800b806 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b802:	621a      	str	r2, [r3, #32]
 800b804:	e005      	b.n	800b812 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	6a1b      	ldr	r3, [r3, #32]
 800b80a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b80c:	4618      	mov	r0, r3
 800b80e:	f008 ff2b 	bl	8014668 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800b812:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b814:	f008 ff06 	bl	8014624 <pbuf_ref>

  if (hs->req->next != NULL) {
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	6a1b      	ldr	r3, [r3, #32]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d012      	beq.n	800b848 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	6a1b      	ldr	r3, [r3, #32]
 800b826:	891b      	ldrh	r3, [r3, #8]
 800b828:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800b82c:	4293      	cmp	r3, r2
 800b82e:	bf28      	it	cs
 800b830:	4613      	movcs	r3, r2
 800b832:	877b      	strh	r3, [r7, #58]	@ 0x3a
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	6a18      	ldr	r0, [r3, #32]
 800b838:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800b83a:	2300      	movs	r3, #0
 800b83c:	496b      	ldr	r1, [pc, #428]	@ (800b9ec <http_parse_request+0x244>)
 800b83e:	f009 f845 	bl	80148cc <pbuf_copy_partial>
    data = httpd_req_buf;
 800b842:	4b6a      	ldr	r3, [pc, #424]	@ (800b9ec <http_parse_request+0x244>)
 800b844:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b846:	e005      	b.n	800b854 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800b848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b84a:	685b      	ldr	r3, [r3, #4]
 800b84c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    data_len = p->len;
 800b84e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b850:	895b      	ldrh	r3, [r3, #10]
 800b852:	877b      	strh	r3, [r7, #58]	@ 0x3a
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800b854:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b856:	2b06      	cmp	r3, #6
 800b858:	f240 80a1 	bls.w	800b99e <http_parse_request+0x1f6>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800b85c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b85e:	461a      	mov	r2, r3
 800b860:	4963      	ldr	r1, [pc, #396]	@ (800b9f0 <http_parse_request+0x248>)
 800b862:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b864:	f007 fc01 	bl	801306a <lwip_strnstr>
 800b868:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800b86a:	6a3b      	ldr	r3, [r7, #32]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	f000 8096 	beq.w	800b99e <http_parse_request+0x1f6>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
 800b872:	2300      	movs	r3, #0
 800b874:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800b876:	2300      	movs	r3, #0
 800b878:	633b      	str	r3, [r7, #48]	@ 0x30
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800b87a:	2204      	movs	r2, #4
 800b87c:	495d      	ldr	r1, [pc, #372]	@ (800b9f4 <http_parse_request+0x24c>)
 800b87e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b880:	f014 fff9 	bl	8020876 <strncmp>
 800b884:	4603      	mov	r3, r0
 800b886:	2b00      	cmp	r3, #0
 800b888:	d103      	bne.n	800b892 <http_parse_request+0xea>
        sp1 = data + 3;
 800b88a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b88c:	3303      	adds	r3, #3
 800b88e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b890:	e014      	b.n	800b8bc <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received GET request\"\n"));
#if LWIP_HTTPD_SUPPORT_POST
      } else if (!strncmp(data, "POST ", 5)) {
 800b892:	2205      	movs	r2, #5
 800b894:	4958      	ldr	r1, [pc, #352]	@ (800b9f8 <http_parse_request+0x250>)
 800b896:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b898:	f014 ffed 	bl	8020876 <strncmp>
 800b89c:	4603      	mov	r3, r0
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d105      	bne.n	800b8ae <http_parse_request+0x106>
        /* store request type */
        is_post = 1;
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	637b      	str	r3, [r7, #52]	@ 0x34
        sp1 = data + 4;
 800b8a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8a8:	3304      	adds	r3, #4
 800b8aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b8ac:	e006      	b.n	800b8bc <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received POST request\n"));
#endif /* LWIP_HTTPD_SUPPORT_POST */
      } else {
        /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
        data[4] = 0;
 800b8ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8b0:	3304      	adds	r3, #4
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	701a      	strb	r2, [r3, #0]
        /* unsupported method! */
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
          data));
        return http_find_error_file(hs, 501);
 800b8b6:	f06f 030f 	mvn.w	r3, #15
 800b8ba:	e08a      	b.n	800b9d2 <http_parse_request+0x22a>
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 +1) - data));
 800b8bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8be:	1c5a      	adds	r2, r3, #1
 800b8c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8c2:	1ad3      	subs	r3, r2, r3
 800b8c4:	b29b      	uxth	r3, r3
 800b8c6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800b8c8:	1ad3      	subs	r3, r2, r3
 800b8ca:	83fb      	strh	r3, [r7, #30]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800b8cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8ce:	3301      	adds	r3, #1
 800b8d0:	8bfa      	ldrh	r2, [r7, #30]
 800b8d2:	494a      	ldr	r1, [pc, #296]	@ (800b9fc <http_parse_request+0x254>)
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f007 fbc8 	bl	801306a <lwip_strnstr>
 800b8da:	62b8      	str	r0, [r7, #40]	@ 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800b8dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d10c      	bne.n	800b8fc <http_parse_request+0x154>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800b8e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8e4:	3301      	adds	r3, #1
 800b8e6:	8bfa      	ldrh	r2, [r7, #30]
 800b8e8:	4941      	ldr	r1, [pc, #260]	@ (800b9f0 <http_parse_request+0x248>)
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f007 fbbd 	bl	801306a <lwip_strnstr>
 800b8f0:	62b8      	str	r0, [r7, #40]	@ 0x28
        is_09 = 1;
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	633b      	str	r3, [r7, #48]	@ 0x30
#if LWIP_HTTPD_SUPPORT_POST
        if (is_post) {
 800b8f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d163      	bne.n	800b9c4 <http_parse_request+0x21c>
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800b8fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8fe:	3301      	adds	r3, #1
 800b900:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b902:	1ad3      	subs	r3, r2, r3
 800b904:	83bb      	strh	r3, [r7, #28]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800b906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d048      	beq.n	800b99e <http_parse_request+0x1f6>
 800b90c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b90e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b910:	429a      	cmp	r2, r3
 800b912:	d944      	bls.n	800b99e <http_parse_request+0x1f6>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800b914:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b916:	461a      	mov	r2, r3
 800b918:	4939      	ldr	r1, [pc, #228]	@ (800ba00 <http_parse_request+0x258>)
 800b91a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b91c:	f007 fba5 	bl	801306a <lwip_strnstr>
 800b920:	4603      	mov	r3, r0
 800b922:	2b00      	cmp	r3, #0
 800b924:	d03b      	beq.n	800b99e <http_parse_request+0x1f6>
          char *uri = sp1 + 1;
 800b926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b928:	3301      	adds	r3, #1
 800b92a:	61bb      	str	r3, [r7, #24]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800b92c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b92e:	2200      	movs	r2, #0
 800b930:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800b932:	8bbb      	ldrh	r3, [r7, #28]
 800b934:	69ba      	ldr	r2, [r7, #24]
 800b936:	4413      	add	r3, r2
 800b938:	2200      	movs	r2, #0
 800b93a:	701a      	strb	r2, [r3, #0]
          LWIP_DEBUGF(HTTPD_DEBUG, ("Received \"%s\" request for URI: \"%s\"\n",
                      data, uri));
#if LWIP_HTTPD_SUPPORT_POST
          if (is_post) {
 800b93c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d026      	beq.n	800b990 <http_parse_request+0x1e8>
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
            struct pbuf *q = hs->req;
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	6a1b      	ldr	r3, [r3, #32]
 800b946:	617b      	str	r3, [r7, #20]
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            struct pbuf *q = inp;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            err = http_post_request(q, hs, data, data_len, uri, sp2);
 800b948:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800b94a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b94c:	9301      	str	r3, [sp, #4]
 800b94e:	69bb      	ldr	r3, [r7, #24]
 800b950:	9300      	str	r3, [sp, #0]
 800b952:	4613      	mov	r3, r2
 800b954:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b956:	68b9      	ldr	r1, [r7, #8]
 800b958:	6978      	ldr	r0, [r7, #20]
 800b95a:	f7ff fe3d 	bl	800b5d8 <http_post_request>
 800b95e:	4603      	mov	r3, r0
 800b960:	74fb      	strb	r3, [r7, #19]
            if (err != ERR_OK) {
 800b962:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d00a      	beq.n	800b980 <http_parse_request+0x1d8>
              /* restore header for next try */
              *sp1 = ' ';
 800b96a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b96c:	2220      	movs	r2, #32
 800b96e:	701a      	strb	r2, [r3, #0]
              *sp2 = ' ';
 800b970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b972:	2220      	movs	r2, #32
 800b974:	701a      	strb	r2, [r3, #0]
              uri[uri_len] = ' ';
 800b976:	8bbb      	ldrh	r3, [r7, #28]
 800b978:	69ba      	ldr	r2, [r7, #24]
 800b97a:	4413      	add	r3, r2
 800b97c:	2220      	movs	r2, #32
 800b97e:	701a      	strb	r2, [r3, #0]
            }
            if (err == ERR_ARG) {
 800b980:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b984:	f113 0f10 	cmn.w	r3, #16
 800b988:	d01e      	beq.n	800b9c8 <http_parse_request+0x220>
              goto badrequest;
            }
            return err;
 800b98a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b98e:	e020      	b.n	800b9d2 <http_parse_request+0x22a>
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800b990:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b992:	69b9      	ldr	r1, [r7, #24]
 800b994:	68b8      	ldr	r0, [r7, #8]
 800b996:	f000 f835 	bl	800ba04 <http_find_file>
 800b99a:	4603      	mov	r3, r0
 800b99c:	e019      	b.n	800b9d2 <http_parse_request+0x22a>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	6a1b      	ldr	r3, [r3, #32]
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f008 fe28 	bl	80145f8 <pbuf_clen>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	823b      	strh	r3, [r7, #16]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	6a1b      	ldr	r3, [r3, #32]
 800b9b0:	891b      	ldrh	r3, [r3, #8]
 800b9b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b9b6:	d209      	bcs.n	800b9cc <http_parse_request+0x224>
 800b9b8:	8a3b      	ldrh	r3, [r7, #16]
 800b9ba:	2b05      	cmp	r3, #5
 800b9bc:	d806      	bhi.n	800b9cc <http_parse_request+0x224>
    (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800b9be:	f06f 0304 	mvn.w	r3, #4
 800b9c2:	e006      	b.n	800b9d2 <http_parse_request+0x22a>
          goto badrequest;
 800b9c4:	bf00      	nop
 800b9c6:	e002      	b.n	800b9ce <http_parse_request+0x226>
              goto badrequest;
 800b9c8:	bf00      	nop
 800b9ca:	e000      	b.n	800b9ce <http_parse_request+0x226>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
 800b9cc:	bf00      	nop
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800b9ce:	f06f 030f 	mvn.w	r3, #15
  }
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3740      	adds	r7, #64	@ 0x40
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
 800b9da:	bf00      	nop
 800b9dc:	08023620 	.word	0x08023620
 800b9e0:	08023768 	.word	0x08023768
 800b9e4:	08023668 	.word	0x08023668
 800b9e8:	08023690 	.word	0x08023690
 800b9ec:	2000a08c 	.word	0x2000a08c
 800b9f0:	08023764 	.word	0x08023764
 800b9f4:	08023774 	.word	0x08023774
 800b9f8:	0802377c 	.word	0x0802377c
 800b9fc:	08023784 	.word	0x08023784
 800ba00:	08023748 	.word	0x08023748

0800ba04 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800ba04:	b590      	push	{r4, r7, lr}
 800ba06:	b097      	sub	sp, #92	@ 0x5c
 800ba08:	af02      	add	r7, sp, #8
 800ba0a:	60f8      	str	r0, [r7, #12]
 800ba0c:	60b9      	str	r1, [r7, #8]
 800ba0e:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800ba10:	2300      	movs	r3, #0
 800ba12:	64bb      	str	r3, [r7, #72]	@ 0x48
  char *params = NULL;
 800ba14:	2300      	movs	r3, #0
 800ba16:	647b      	str	r3, [r7, #68]	@ 0x44
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	4618      	mov	r0, r3
 800ba22:	f7f4 fbdb 	bl	80001dc <strlen>
 800ba26:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 800ba28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d06c      	beq.n	800bb08 <http_find_file+0x104>
 800ba2e:	68ba      	ldr	r2, [r7, #8]
 800ba30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba32:	3b01      	subs	r3, #1
 800ba34:	4413      	add	r3, r2
 800ba36:	781b      	ldrb	r3, [r3, #0]
 800ba38:	2b2f      	cmp	r3, #47	@ 0x2f
 800ba3a:	d165      	bne.n	800bb08 <http_find_file+0x104>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800ba3c:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 800ba3e:	4a97      	ldr	r2, [pc, #604]	@ (800bc9c <http_find_file+0x298>)
 800ba40:	4293      	cmp	r3, r2
 800ba42:	d102      	bne.n	800ba4a <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800ba44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba46:	2b01      	cmp	r3, #1
 800ba48:	d15e      	bne.n	800bb08 <http_find_file+0x104>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800ba4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba4c:	3b01      	subs	r3, #1
 800ba4e:	2b3f      	cmp	r3, #63	@ 0x3f
 800ba50:	bf28      	it	cs
 800ba52:	233f      	movcs	r3, #63	@ 0x3f
 800ba54:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (copy_len > 0) {
 800ba56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d00a      	beq.n	800ba72 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ba60:	4619      	mov	r1, r3
 800ba62:	488e      	ldr	r0, [pc, #568]	@ (800bc9c <http_find_file+0x298>)
 800ba64:	f014 ffb1 	bl	80209ca <memcpy>
      http_uri_buf[copy_len] = 0;
 800ba68:	4a8c      	ldr	r2, [pc, #560]	@ (800bc9c <http_find_file+0x298>)
 800ba6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba6c:	4413      	add	r3, r2
 800ba6e:	2200      	movs	r2, #0
 800ba70:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800ba72:	2300      	movs	r3, #0
 800ba74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba76:	e044      	b.n	800bb02 <http_find_file+0xfe>
      const char* file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800ba78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d022      	beq.n	800bac4 <http_find_file+0xc0>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800ba7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba80:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 800ba84:	627b      	str	r3, [r7, #36]	@ 0x24
        if (len_left > 0) {
 800ba86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d018      	beq.n	800babe <http_find_file+0xba>
          size_t name_len = strlen(g_psDefaultFilenames[loop].name);
 800ba8c:	4a84      	ldr	r2, [pc, #528]	@ (800bca0 <http_find_file+0x29c>)
 800ba8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ba94:	4618      	mov	r0, r3
 800ba96:	f7f4 fba1 	bl	80001dc <strlen>
 800ba9a:	6238      	str	r0, [r7, #32]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800ba9c:	6a3a      	ldr	r2, [r7, #32]
 800ba9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baa0:	4293      	cmp	r3, r2
 800baa2:	bf28      	it	cs
 800baa4:	4613      	movcs	r3, r2
 800baa6:	61fb      	str	r3, [r7, #28]
          MEMCPY(&http_uri_buf[copy_len], g_psDefaultFilenames[loop].name, name_copy_len);
 800baa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baaa:	4a7c      	ldr	r2, [pc, #496]	@ (800bc9c <http_find_file+0x298>)
 800baac:	1898      	adds	r0, r3, r2
 800baae:	4a7c      	ldr	r2, [pc, #496]	@ (800bca0 <http_find_file+0x29c>)
 800bab0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bab2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bab6:	69fa      	ldr	r2, [r7, #28]
 800bab8:	4619      	mov	r1, r3
 800baba:	f014 ff86 	bl	80209ca <memcpy>
        }
        file_name = http_uri_buf;
 800babe:	4b77      	ldr	r3, [pc, #476]	@ (800bc9c <http_find_file+0x298>)
 800bac0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bac2:	e004      	b.n	800bace <http_find_file+0xca>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = g_psDefaultFilenames[loop].name;
 800bac4:	4a76      	ldr	r2, [pc, #472]	@ (800bca0 <http_find_file+0x29c>)
 800bac6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bac8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bacc:	63bb      	str	r3, [r7, #56]	@ 0x38
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bad2:	4618      	mov	r0, r3
 800bad4:	f7fe fdcc 	bl	800a670 <fs_open>
 800bad8:	4603      	mov	r3, r0
 800bada:	76fb      	strb	r3, [r7, #27]
      if(err == ERR_OK) {
 800badc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d10b      	bne.n	800bafc <http_find_file+0xf8>
        uri = file_name;
 800bae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bae6:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	64bb      	str	r3, [r7, #72]	@ 0x48
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = g_psDefaultFilenames[loop].shtml;
 800baec:	4a6c      	ldr	r2, [pc, #432]	@ (800bca0 <http_find_file+0x29c>)
 800baee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800baf0:	00db      	lsls	r3, r3, #3
 800baf2:	4413      	add	r3, r2
 800baf4:	791b      	ldrb	r3, [r3, #4]
 800baf6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* LWIP_HTTPD_SSI */
        break;
 800bafa:	e005      	b.n	800bb08 <http_find_file+0x104>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800bafc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bafe:	3301      	adds	r3, #1
 800bb00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bb02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb04:	2b04      	cmp	r3, #4
 800bb06:	d9b7      	bls.n	800ba78 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800bb08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	f040 80ab 	bne.w	800bc66 <http_find_file+0x262>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	213f      	movs	r1, #63	@ 0x3f
 800bb14:	4618      	mov	r0, r3
 800bb16:	f014 fea1 	bl	802085c <strchr>
 800bb1a:	6478      	str	r0, [r7, #68]	@ 0x44
    if (params != NULL) {
 800bb1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d005      	beq.n	800bb2e <http_find_file+0x12a>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800bb22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb24:	2200      	movs	r2, #0
 800bb26:	701a      	strb	r2, [r3, #0]
      params++;
 800bb28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	647b      	str	r3, [r7, #68]	@ 0x44
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 800bb2e:	4b5d      	ldr	r3, [pc, #372]	@ (800bca4 <http_find_file+0x2a0>)
 800bb30:	f04f 32ff 	mov.w	r2, #4294967295
 800bb34:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (g_iNumCGIs && g_pCGIs) {
 800bb36:	4b5c      	ldr	r3, [pc, #368]	@ (800bca8 <http_find_file+0x2a4>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d034      	beq.n	800bba8 <http_find_file+0x1a4>
 800bb3e:	4b5b      	ldr	r3, [pc, #364]	@ (800bcac <http_find_file+0x2a8>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d030      	beq.n	800bba8 <http_find_file+0x1a4>
      for (i = 0; i < g_iNumCGIs; i++) {
 800bb46:	2300      	movs	r3, #0
 800bb48:	643b      	str	r3, [r7, #64]	@ 0x40
 800bb4a:	e028      	b.n	800bb9e <http_find_file+0x19a>
        if (strcmp(uri, g_pCGIs[i].pcCGIName) == 0) {
 800bb4c:	68b8      	ldr	r0, [r7, #8]
 800bb4e:	4b57      	ldr	r3, [pc, #348]	@ (800bcac <http_find_file+0x2a8>)
 800bb50:	681a      	ldr	r2, [r3, #0]
 800bb52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb54:	00db      	lsls	r3, r3, #3
 800bb56:	4413      	add	r3, r2
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	4619      	mov	r1, r3
 800bb5c:	f7f4 fb34 	bl	80001c8 <strcmp>
 800bb60:	4603      	mov	r3, r0
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d118      	bne.n	800bb98 <http_find_file+0x194>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
           http_cgi_paramcount = extract_uri_parameters(hs, params);
 800bb66:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bb68:	68f8      	ldr	r0, [r7, #12]
 800bb6a:	f7ff f815 	bl	800ab98 <extract_uri_parameters>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	4a4c      	ldr	r2, [pc, #304]	@ (800bca4 <http_find_file+0x2a0>)
 800bb72:	6013      	str	r3, [r2, #0]
           uri = g_pCGIs[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800bb74:	4b4d      	ldr	r3, [pc, #308]	@ (800bcac <http_find_file+0x2a8>)
 800bb76:	681a      	ldr	r2, [r3, #0]
 800bb78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb7a:	00db      	lsls	r3, r3, #3
 800bb7c:	4413      	add	r3, r2
 800bb7e:	685c      	ldr	r4, [r3, #4]
 800bb80:	4b48      	ldr	r3, [pc, #288]	@ (800bca4 <http_find_file+0x2a0>)
 800bb82:	6819      	ldr	r1, [r3, #0]
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	f103 0230 	add.w	r2, r3, #48	@ 0x30
                                          hs->param_vals);
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	3370      	adds	r3, #112	@ 0x70
           uri = g_pCGIs[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800bb8e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800bb90:	47a0      	blx	r4
 800bb92:	4603      	mov	r3, r0
 800bb94:	60bb      	str	r3, [r7, #8]
           break;
 800bb96:	e007      	b.n	800bba8 <http_find_file+0x1a4>
      for (i = 0; i < g_iNumCGIs; i++) {
 800bb98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb9a:	3301      	adds	r3, #1
 800bb9c:	643b      	str	r3, [r7, #64]	@ 0x40
 800bb9e:	4b42      	ldr	r3, [pc, #264]	@ (800bca8 <http_find_file+0x2a4>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bba4:	429a      	cmp	r2, r3
 800bba6:	dbd1      	blt.n	800bb4c <http_find_file+0x148>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	68ba      	ldr	r2, [r7, #8]
 800bbac:	4611      	mov	r1, r2
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f7fe fd5e 	bl	800a670 <fs_open>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	76fb      	strb	r3, [r7, #27]
    if (err == ERR_OK) {
 800bbb8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d102      	bne.n	800bbc6 <http_find_file+0x1c2>
       file = &hs->file_handle;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bbc4:	e006      	b.n	800bbd4 <http_find_file+0x1d0>
    } else {
      file = http_get_404_file(hs, &uri);
 800bbc6:	f107 0308 	add.w	r3, r7, #8
 800bbca:	4619      	mov	r1, r3
 800bbcc:	68f8      	ldr	r0, [r7, #12]
 800bbce:	f7ff fc6b 	bl	800b4a8 <http_get_404_file>
 800bbd2:	64b8      	str	r0, [r7, #72]	@ 0x48
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 800bbd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d045      	beq.n	800bc66 <http_find_file+0x262>
      /* See if we have been asked for an shtml file and, if so,
         enable tag checking. */
      const char* ext = NULL, *sub;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	637b      	str	r3, [r7, #52]	@ 0x34
      char* param = (char*)strstr(uri, "?");
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	213f      	movs	r1, #63	@ 0x3f
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f014 fe3a 	bl	802085c <strchr>
 800bbe8:	6178      	str	r0, [r7, #20]
      if (param != NULL) {
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d002      	beq.n	800bbf6 <http_find_file+0x1f2>
         /* separate uri from parameters for now, set back later */
         *param = 0;
 800bbf0:	697b      	ldr	r3, [r7, #20]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	701a      	strb	r2, [r3, #0]
      }
      sub = uri;
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	633b      	str	r3, [r7, #48]	@ 0x30
      ext = uri;
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	637b      	str	r3, [r7, #52]	@ 0x34
      for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, "."))
 800bbfe:	212e      	movs	r1, #46	@ 0x2e
 800bc00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bc02:	f014 fe2b 	bl	802085c <strchr>
 800bc06:	6338      	str	r0, [r7, #48]	@ 0x30
 800bc08:	e009      	b.n	800bc1e <http_find_file+0x21a>
      {
         ext = sub;
 800bc0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc0c:	637b      	str	r3, [r7, #52]	@ 0x34
         sub++;
 800bc0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc10:	3301      	adds	r3, #1
 800bc12:	633b      	str	r3, [r7, #48]	@ 0x30
      for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, "."))
 800bc14:	212e      	movs	r1, #46	@ 0x2e
 800bc16:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bc18:	f014 fe20 	bl	802085c <strchr>
 800bc1c:	6338      	str	r0, [r7, #48]	@ 0x30
 800bc1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d1f2      	bne.n	800bc0a <http_find_file+0x206>
      }
      tag_check = 0;
 800bc24:	2300      	movs	r3, #0
 800bc26:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc2e:	e011      	b.n	800bc54 <http_find_file+0x250>
        if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 800bc30:	4a1f      	ldr	r2, [pc, #124]	@ (800bcb0 <http_find_file+0x2ac>)
 800bc32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc38:	4619      	mov	r1, r3
 800bc3a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800bc3c:	f007 fa4b 	bl	80130d6 <lwip_stricmp>
 800bc40:	4603      	mov	r3, r0
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d103      	bne.n	800bc4e <http_find_file+0x24a>
          tag_check = 1;
 800bc46:	2301      	movs	r3, #1
 800bc48:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
          break;
 800bc4c:	e005      	b.n	800bc5a <http_find_file+0x256>
      for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800bc4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc50:	3301      	adds	r3, #1
 800bc52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc56:	2b03      	cmp	r3, #3
 800bc58:	d9ea      	bls.n	800bc30 <http_find_file+0x22c>
        }
      }
      if (param != NULL) {
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d002      	beq.n	800bc66 <http_find_file+0x262>
         *param = '?';
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	223f      	movs	r2, #63	@ 0x3f
 800bc64:	701a      	strb	r2, [r3, #0]
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800bc66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d106      	bne.n	800bc7a <http_find_file+0x276>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800bc6c:	f107 0308 	add.w	r3, r7, #8
 800bc70:	4619      	mov	r1, r3
 800bc72:	68f8      	ldr	r0, [r7, #12]
 800bc74:	f7ff fc18 	bl	800b4a8 <http_get_404_file>
 800bc78:	64b8      	str	r0, [r7, #72]	@ 0x48
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800bc7a:	68ba      	ldr	r2, [r7, #8]
 800bc7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc7e:	9301      	str	r3, [sp, #4]
 800bc80:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bc84:	9300      	str	r3, [sp, #0]
 800bc86:	4613      	mov	r3, r2
 800bc88:	687a      	ldr	r2, [r7, #4]
 800bc8a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800bc8c:	68f8      	ldr	r0, [r7, #12]
 800bc8e:	f000 f811 	bl	800bcb4 <http_init_file>
 800bc92:	4603      	mov	r3, r0
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	3754      	adds	r7, #84	@ 0x54
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd90      	pop	{r4, r7, pc}
 800bc9c:	2000a48c 	.word	0x2000a48c
 800bca0:	0802e01c 	.word	0x0802e01c
 800bca4:	2000a4e0 	.word	0x2000a4e0
 800bca8:	2000a4dc 	.word	0x2000a4dc
 800bcac:	2000a4d8 	.word	0x2000a4d8
 800bcb0:	0802e00c 	.word	0x0802e00c

0800bcb4 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char* params)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b088      	sub	sp, #32
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	60f8      	str	r0, [r7, #12]
 800bcbc:	60b9      	str	r1, [r7, #8]
 800bcbe:	607a      	str	r2, [r7, #4]
 800bcc0:	603b      	str	r3, [r7, #0]
  if (file != NULL) {
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d072      	beq.n	800bdae <http_init_file+0xfa>
    /* file opened, initialise struct http_state */
#if LWIP_HTTPD_SSI
    if (tag_check) {
 800bcc8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d01c      	beq.n	800bd0a <http_init_file+0x56>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 800bcd0:	f7fe fe0c 	bl	800a8ec <http_ssi_state_alloc>
 800bcd4:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 800bcd6:	69fb      	ldr	r3, [r7, #28]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d016      	beq.n	800bd0a <http_init_file+0x56>
        ssi->tag_index = 0;
 800bcdc:	69fb      	ldr	r3, [r7, #28]
 800bcde:	2200      	movs	r2, #0
 800bce0:	819a      	strh	r2, [r3, #12]
        ssi->tag_state = TAG_NONE;
 800bce2:	69fb      	ldr	r3, [r7, #28]
 800bce4:	2200      	movs	r2, #0
 800bce6:	f883 20db 	strb.w	r2, [r3, #219]	@ 0xdb
        ssi->parsed = file->data;
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	681a      	ldr	r2, [r3, #0]
 800bcee:	69fb      	ldr	r3, [r7, #28]
 800bcf0:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	685b      	ldr	r3, [r3, #4]
 800bcf6:	461a      	mov	r2, r3
 800bcf8:	69fb      	ldr	r3, [r7, #28]
 800bcfa:	609a      	str	r2, [r3, #8]
        ssi->tag_end = file->data;
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	681a      	ldr	r2, [r3, #0]
 800bd00:	69fb      	ldr	r3, [r7, #28]
 800bd02:	605a      	str	r2, [r3, #4]
        hs->ssi = ssi;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	69fa      	ldr	r2, [r7, #28]
 800bd08:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	68ba      	ldr	r2, [r7, #8]
 800bd0e:	615a      	str	r2, [r3, #20]
    hs->file = file->data;
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	681a      	ldr	r2, [r3, #0]
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	685b      	ldr	r3, [r3, #4]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	da06      	bge.n	800bd2e <http_init_file+0x7a>
 800bd20:	4b2c      	ldr	r3, [pc, #176]	@ (800bdd4 <http_init_file+0x120>)
 800bd22:	f640 1211 	movw	r2, #2321	@ 0x911
 800bd26:	492c      	ldr	r1, [pc, #176]	@ (800bdd8 <http_init_file+0x124>)
 800bd28:	482c      	ldr	r0, [pc, #176]	@ (800bddc <http_init_file+0x128>)
 800bd2a:	f014 fbb9 	bl	80204a0 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = file->len;
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	685b      	ldr	r3, [r3, #4]
 800bd32:	461a      	mov	r2, r3
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    hs->retries = 0;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	695b      	ldr	r3, [r3, #20]
 800bd44:	7c1b      	ldrb	r3, [r3, #16]
 800bd46:	f003 0301 	and.w	r3, r3, #1
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d106      	bne.n	800bd5c <http_init_file+0xa8>
 800bd4e:	4b21      	ldr	r3, [pc, #132]	@ (800bdd4 <http_init_file+0x120>)
 800bd50:	f44f 6212 	mov.w	r2, #2336	@ 0x920
 800bd54:	4922      	ldr	r1, [pc, #136]	@ (800bde0 <http_init_file+0x12c>)
 800bd56:	4821      	ldr	r0, [pc, #132]	@ (800bddc <http_init_file+0x128>)
 800bd58:	f014 fba2 	bl	80204a0 <iprintf>
       (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d032      	beq.n	800bdc8 <http_init_file+0x114>
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	695b      	ldr	r3, [r3, #20]
 800bd66:	7c1b      	ldrb	r3, [r3, #16]
 800bd68:	f003 0301 	and.w	r3, r3, #1
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d02b      	beq.n	800bdc8 <http_init_file+0x114>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	6998      	ldr	r0, [r3, #24]
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd78:	461a      	mov	r2, r3
 800bd7a:	491a      	ldr	r1, [pc, #104]	@ (800bde4 <http_init_file+0x130>)
 800bd7c:	f007 f975 	bl	801306a <lwip_strnstr>
 800bd80:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 800bd82:	69bb      	ldr	r3, [r7, #24]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d01f      	beq.n	800bdc8 <http_init_file+0x114>
        size_t diff = file_start + 4 - hs->file;
 800bd88:	69bb      	ldr	r3, [r7, #24]
 800bd8a:	1d1a      	adds	r2, r3, #4
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	699b      	ldr	r3, [r3, #24]
 800bd90:	1ad3      	subs	r3, r2, r3
 800bd92:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	699a      	ldr	r2, [r3, #24]
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	441a      	add	r2, r3
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	1ad2      	subs	r2, r2, r3
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	625a      	str	r2, [r3, #36]	@ 0x24
 800bdac:	e00c      	b.n	800bdc8 <http_init_file+0x114>
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
  } else {
    hs->handle = NULL;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	625a      	str	r2, [r3, #36]	@ 0x24
    hs->retries = 0;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
         hs->keepalive = 0;
       }
     }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800bdc8:	2300      	movs	r3, #0
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3720      	adds	r7, #32
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}
 800bdd2:	bf00      	nop
 800bdd4:	08023620 	.word	0x08023620
 800bdd8:	08023788 	.word	0x08023788
 800bddc:	08023668 	.word	0x08023668
 800bde0:	080237a8 	.word	0x080237a8
 800bde4:	08023748 	.word	0x08023748

0800bde8 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b084      	sub	sp, #16
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	460b      	mov	r3, r1
 800bdf2:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d002      	beq.n	800be04 <http_err+0x1c>
    http_state_free(hs);
 800bdfe:	68f8      	ldr	r0, [r7, #12]
 800be00:	f7fe fde1 	bl	800a9c6 <http_state_free>
  }
}
 800be04:	bf00      	nop
 800be06:	3710      	adds	r7, #16
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd80      	pop	{r7, pc}

0800be0c <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b086      	sub	sp, #24
 800be10:	af00      	add	r7, sp, #0
 800be12:	60f8      	str	r0, [r7, #12]
 800be14:	60b9      	str	r1, [r7, #8]
 800be16:	4613      	mov	r3, r2
 800be18:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void*)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d101      	bne.n	800be28 <http_sent+0x1c>
    return ERR_OK;
 800be24:	2300      	movs	r3, #0
 800be26:	e008      	b.n	800be3a <http_sent+0x2e>
  }

  hs->retries = 0;
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	2200      	movs	r2, #0
 800be2c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  http_send(pcb, hs);
 800be30:	6979      	ldr	r1, [r7, #20]
 800be32:	68b8      	ldr	r0, [r7, #8]
 800be34:	f7ff faf6 	bl	800b424 <http_send>

  return ERR_OK;
 800be38:	2300      	movs	r3, #0
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3718      	adds	r7, #24
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}

0800be42 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct tcp_pcb *pcb)
{
 800be42:	b580      	push	{r7, lr}
 800be44:	b084      	sub	sp, #16
 800be46:	af00      	add	r7, sp, #0
 800be48:	6078      	str	r0, [r7, #4]
 800be4a:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
    (void*)pcb, (void*)hs, tcp_debug_state_str(pcb->state)));

  if (hs == NULL) {
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d107      	bne.n	800be66 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800be56:	2100      	movs	r1, #0
 800be58:	6838      	ldr	r0, [r7, #0]
 800be5a:	f7fe fe81 	bl	800ab60 <http_close_conn>
 800be5e:	4603      	mov	r3, r0
 800be60:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
       tcp_abort(pcb);
       return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800be62:	2300      	movs	r3, #0
 800be64:	e024      	b.n	800beb0 <http_poll+0x6e>
  } else {
    hs->retries++;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800be6c:	3301      	adds	r3, #1
 800be6e:	b2da      	uxtb	r2, r3
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800be7c:	2b04      	cmp	r3, #4
 800be7e:	d105      	bne.n	800be8c <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800be80:	68f9      	ldr	r1, [r7, #12]
 800be82:	6838      	ldr	r0, [r7, #0]
 800be84:	f7fe fe6c 	bl	800ab60 <http_close_conn>
      return ERR_OK;
 800be88:	2300      	movs	r3, #0
 800be8a:	e011      	b.n	800beb0 <http_poll+0x6e>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if(hs && (hs->handle)) {
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d00d      	beq.n	800beae <http_poll+0x6c>
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	695b      	ldr	r3, [r3, #20]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d009      	beq.n	800beae <http_poll+0x6c>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if(http_send(pcb, hs)) {
 800be9a:	68f9      	ldr	r1, [r7, #12]
 800be9c:	6838      	ldr	r0, [r7, #0]
 800be9e:	f7ff fac1 	bl	800b424 <http_send>
 800bea2:	4603      	mov	r3, r0
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d002      	beq.n	800beae <http_poll+0x6c>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        tcp_output(pcb);
 800bea8:	6838      	ldr	r0, [r7, #0]
 800beaa:	f00d fcbb 	bl	8019824 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800beae:	2300      	movs	r3, #0
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	3710      	adds	r7, #16
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}

0800beb8 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b086      	sub	sp, #24
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	60f8      	str	r0, [r7, #12]
 800bec0:	60b9      	str	r1, [r7, #8]
 800bec2:	607a      	str	r2, [r7, #4]
 800bec4:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void*)pcb,
    (void*)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800beca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d105      	bne.n	800bede <http_recv+0x26>
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d002      	beq.n	800bede <http_recv+0x26>
 800bed8:	697b      	ldr	r3, [r7, #20]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d111      	bne.n	800bf02 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d008      	beq.n	800bef6 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      tcp_recved(pcb, p->tot_len);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	891b      	ldrh	r3, [r3, #8]
 800bee8:	4619      	mov	r1, r3
 800beea:	68b8      	ldr	r0, [r7, #8]
 800beec:	f009 fae0 	bl	80154b0 <tcp_recved>
      pbuf_free(p);
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f008 faed 	bl	80144d0 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800bef6:	6979      	ldr	r1, [r7, #20]
 800bef8:	68b8      	ldr	r0, [r7, #8]
 800befa:	f7fe fe31 	bl	800ab60 <http_close_conn>
    return ERR_OK;
 800befe:	2300      	movs	r3, #0
 800bf00:	e072      	b.n	800bfe8 <http_recv+0x130>
     hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    tcp_recved(pcb, p->tot_len);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	891b      	ldrh	r3, [r3, #8]
 800bf06:	4619      	mov	r1, r3
 800bf08:	68b8      	ldr	r0, [r7, #8]
 800bf0a:	f009 fad1 	bl	80154b0 <tcp_recved>
  }

#if LWIP_HTTPD_SUPPORT_POST
  if (hs->post_content_len_left > 0) {
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d012      	beq.n	800bf3e <http_recv+0x86>
    /* reset idle counter when POST data is received */
    hs->retries = 0;
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    /* this is data for a POST, pass the complete pbuf to the application */
    http_post_rxpbuf(hs, p);
 800bf20:	6879      	ldr	r1, [r7, #4]
 800bf22:	6978      	ldr	r0, [r7, #20]
 800bf24:	f7ff fb1e 	bl	800b564 <http_post_rxpbuf>
    /* pbuf is passed to the application, don't free it! */
    if (hs->post_content_len_left == 0) {
 800bf28:	697b      	ldr	r3, [r7, #20]
 800bf2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d103      	bne.n	800bf3a <http_recv+0x82>
      /* all data received, send response or close connection */
      http_send(pcb, hs);
 800bf32:	6979      	ldr	r1, [r7, #20]
 800bf34:	68b8      	ldr	r0, [r7, #8]
 800bf36:	f7ff fa75 	bl	800b424 <http_send>
    }
    return ERR_OK;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	e054      	b.n	800bfe8 <http_recv+0x130>
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	695b      	ldr	r3, [r3, #20]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d14c      	bne.n	800bfe0 <http_recv+0x128>
      err_t parsed = http_parse_request(p, hs, pcb);
 800bf46:	68ba      	ldr	r2, [r7, #8]
 800bf48:	6979      	ldr	r1, [r7, #20]
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f7ff fc2c 	bl	800b7a8 <http_parse_request>
 800bf50:	4603      	mov	r3, r0
 800bf52:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800bf54:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d015      	beq.n	800bf88 <http_recv+0xd0>
 800bf5c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bf60:	f113 0f05 	cmn.w	r3, #5
 800bf64:	d010      	beq.n	800bf88 <http_recv+0xd0>
 800bf66:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bf6a:	f113 0f10 	cmn.w	r3, #16
 800bf6e:	d00b      	beq.n	800bf88 <http_recv+0xd0>
 800bf70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bf74:	f113 0f08 	cmn.w	r3, #8
 800bf78:	d006      	beq.n	800bf88 <http_recv+0xd0>
 800bf7a:	4b1d      	ldr	r3, [pc, #116]	@ (800bff0 <http_recv+0x138>)
 800bf7c:	f640 12f6 	movw	r2, #2550	@ 0x9f6
 800bf80:	491c      	ldr	r1, [pc, #112]	@ (800bff4 <http_recv+0x13c>)
 800bf82:	481d      	ldr	r0, [pc, #116]	@ (800bff8 <http_recv+0x140>)
 800bf84:	f014 fa8c 	bl	80204a0 <iprintf>
        || parsed == ERR_INPROGRESS ||parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800bf88:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bf8c:	f113 0f05 	cmn.w	r3, #5
 800bf90:	d00b      	beq.n	800bfaa <http_recv+0xf2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	6a1b      	ldr	r3, [r3, #32]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d007      	beq.n	800bfaa <http_recv+0xf2>
          pbuf_free(hs->req);
 800bf9a:	697b      	ldr	r3, [r7, #20]
 800bf9c:	6a1b      	ldr	r3, [r3, #32]
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f008 fa96 	bl	80144d0 <pbuf_free>
          hs->req = NULL;
 800bfa4:	697b      	ldr	r3, [r7, #20]
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f008 fa90 	bl	80144d0 <pbuf_free>
      if (parsed == ERR_OK) {
 800bfb0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d109      	bne.n	800bfcc <http_recv+0x114>
#if LWIP_HTTPD_SUPPORT_POST
       if (hs->post_content_len_left == 0)
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d111      	bne.n	800bfe6 <http_recv+0x12e>
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void*)hs->file, hs->left));
          http_send(pcb, hs);
 800bfc2:	6979      	ldr	r1, [r7, #20]
 800bfc4:	68b8      	ldr	r0, [r7, #8]
 800bfc6:	f7ff fa2d 	bl	800b424 <http_send>
 800bfca:	e00c      	b.n	800bfe6 <http_recv+0x12e>
        }
      } else if (parsed == ERR_ARG) {
 800bfcc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bfd0:	f113 0f10 	cmn.w	r3, #16
 800bfd4:	d107      	bne.n	800bfe6 <http_recv+0x12e>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800bfd6:	6979      	ldr	r1, [r7, #20]
 800bfd8:	68b8      	ldr	r0, [r7, #8]
 800bfda:	f7fe fdc1 	bl	800ab60 <http_close_conn>
 800bfde:	e002      	b.n	800bfe6 <http_recv+0x12e>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800bfe0:	6878      	ldr	r0, [r7, #4]
 800bfe2:	f008 fa75 	bl	80144d0 <pbuf_free>
    }
  }
  return ERR_OK;
 800bfe6:	2300      	movs	r3, #0
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3718      	adds	r7, #24
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}
 800bff0:	08023620 	.word	0x08023620
 800bff4:	080237d4 	.word	0x080237d4
 800bff8:	08023668 	.word	0x08023668

0800bffc <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b086      	sub	sp, #24
 800c000:	af00      	add	r7, sp, #0
 800c002:	60f8      	str	r0, [r7, #12]
 800c004:	60b9      	str	r1, [r7, #8]
 800c006:	4613      	mov	r3, r2
 800c008:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void*)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800c00a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d102      	bne.n	800c018 <http_accept+0x1c>
 800c012:	68bb      	ldr	r3, [r7, #8]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d102      	bne.n	800c01e <http_accept+0x22>
    return ERR_VAL;
 800c018:	f06f 0305 	mvn.w	r3, #5
 800c01c:	e025      	b.n	800c06a <http_accept+0x6e>
  }

  /* Set priority */
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 800c01e:	2101      	movs	r1, #1
 800c020:	68b8      	ldr	r0, [r7, #8]
 800c022:	f009 fea1 	bl	8015d68 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800c026:	f7fe fc90 	bl	800a94a <http_state_alloc>
 800c02a:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800c02c:	697b      	ldr	r3, [r7, #20]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d102      	bne.n	800c038 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800c032:	f04f 33ff 	mov.w	r3, #4294967295
 800c036:	e018      	b.n	800c06a <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	68ba      	ldr	r2, [r7, #8]
 800c03c:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  tcp_arg(pcb, hs);
 800c03e:	6979      	ldr	r1, [r7, #20]
 800c040:	68b8      	ldr	r0, [r7, #8]
 800c042:	f00a f853 	bl	80160ec <tcp_arg>

  /* Set up the various callback functions */
  tcp_recv(pcb, http_recv);
 800c046:	490b      	ldr	r1, [pc, #44]	@ (800c074 <http_accept+0x78>)
 800c048:	68b8      	ldr	r0, [r7, #8]
 800c04a:	f00a f85f 	bl	801610c <tcp_recv>
  tcp_err(pcb, http_err);
 800c04e:	490a      	ldr	r1, [pc, #40]	@ (800c078 <http_accept+0x7c>)
 800c050:	68b8      	ldr	r0, [r7, #8]
 800c052:	f00a f89d 	bl	8016190 <tcp_err>
  tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800c056:	2204      	movs	r2, #4
 800c058:	4908      	ldr	r1, [pc, #32]	@ (800c07c <http_accept+0x80>)
 800c05a:	68b8      	ldr	r0, [r7, #8]
 800c05c:	f00a f8d0 	bl	8016200 <tcp_poll>
  tcp_sent(pcb, http_sent);
 800c060:	4907      	ldr	r1, [pc, #28]	@ (800c080 <http_accept+0x84>)
 800c062:	68b8      	ldr	r0, [r7, #8]
 800c064:	f00a f874 	bl	8016150 <tcp_sent>

  return ERR_OK;
 800c068:	2300      	movs	r3, #0
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3718      	adds	r7, #24
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}
 800c072:	bf00      	nop
 800c074:	0800beb9 	.word	0x0800beb9
 800c078:	0800bde9 	.word	0x0800bde9
 800c07c:	0800be43 	.word	0x0800be43
 800c080:	0800be0d 	.word	0x0800be0d

0800c084 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b082      	sub	sp, #8
 800c088:	af00      	add	r7, sp, #0
  LWIP_MEMPOOL_INIT(HTTPD_SSI_STATE);
#endif
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  pcb = tcp_new_ip_type(IPADDR_TYPE_ANY);
 800c08a:	202e      	movs	r0, #46	@ 0x2e
 800c08c:	f00a f820 	bl	80160d0 <tcp_new_ip_type>
 800c090:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d106      	bne.n	800c0a6 <httpd_init+0x22>
 800c098:	4b19      	ldr	r3, [pc, #100]	@ (800c100 <httpd_init+0x7c>)
 800c09a:	f640 2252 	movw	r2, #2642	@ 0xa52
 800c09e:	4919      	ldr	r1, [pc, #100]	@ (800c104 <httpd_init+0x80>)
 800c0a0:	4819      	ldr	r0, [pc, #100]	@ (800c108 <httpd_init+0x84>)
 800c0a2:	f014 f9fd 	bl	80204a0 <iprintf>
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 800c0a6:	2101      	movs	r1, #1
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f009 fe5d 	bl	8015d68 <tcp_setprio>
  /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
  err = tcp_bind(pcb, IP_ANY_TYPE, HTTPD_SERVER_PORT);
 800c0ae:	2250      	movs	r2, #80	@ 0x50
 800c0b0:	4916      	ldr	r1, [pc, #88]	@ (800c10c <httpd_init+0x88>)
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f009 f862 	bl	801517c <tcp_bind>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800c0bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d006      	beq.n	800c0d2 <httpd_init+0x4e>
 800c0c4:	4b0e      	ldr	r3, [pc, #56]	@ (800c100 <httpd_init+0x7c>)
 800c0c6:	f640 2257 	movw	r2, #2647	@ 0xa57
 800c0ca:	4911      	ldr	r1, [pc, #68]	@ (800c110 <httpd_init+0x8c>)
 800c0cc:	480e      	ldr	r0, [pc, #56]	@ (800c108 <httpd_init+0x84>)
 800c0ce:	f014 f9e7 	bl	80204a0 <iprintf>
  pcb = tcp_listen(pcb);
 800c0d2:	21ff      	movs	r1, #255	@ 0xff
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f009 f8f3 	bl	80152c0 <tcp_listen_with_backlog>
 800c0da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d106      	bne.n	800c0f0 <httpd_init+0x6c>
 800c0e2:	4b07      	ldr	r3, [pc, #28]	@ (800c100 <httpd_init+0x7c>)
 800c0e4:	f640 2259 	movw	r2, #2649	@ 0xa59
 800c0e8:	490a      	ldr	r1, [pc, #40]	@ (800c114 <httpd_init+0x90>)
 800c0ea:	4807      	ldr	r0, [pc, #28]	@ (800c108 <httpd_init+0x84>)
 800c0ec:	f014 f9d8 	bl	80204a0 <iprintf>
  tcp_accept(pcb, http_accept);
 800c0f0:	4909      	ldr	r1, [pc, #36]	@ (800c118 <httpd_init+0x94>)
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f00a f86e 	bl	80161d4 <tcp_accept>
}
 800c0f8:	bf00      	nop
 800c0fa:	3708      	adds	r7, #8
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}
 800c100:	08023620 	.word	0x08023620
 800c104:	08023800 	.word	0x08023800
 800c108:	08023668 	.word	0x08023668
 800c10c:	0802f050 	.word	0x0802f050
 800c110:	0802381c 	.word	0x0802381c
 800c114:	08023838 	.word	0x08023838
 800c118:	0800bffd 	.word	0x0800bffd

0800c11c <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b084      	sub	sp, #16
 800c120:	af00      	add	r7, sp, #0
 800c122:	60f8      	str	r0, [r7, #12]
 800c124:	60b9      	str	r1, [r7, #8]
 800c126:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d106      	bne.n	800c13c <http_set_ssi_handler+0x20>
 800c12e:	4b14      	ldr	r3, [pc, #80]	@ (800c180 <http_set_ssi_handler+0x64>)
 800c130:	f640 226a 	movw	r2, #2666	@ 0xa6a
 800c134:	4913      	ldr	r1, [pc, #76]	@ (800c184 <http_set_ssi_handler+0x68>)
 800c136:	4814      	ldr	r0, [pc, #80]	@ (800c188 <http_set_ssi_handler+0x6c>)
 800c138:	f014 f9b2 	bl	80204a0 <iprintf>
  g_pfnSSIHandler = ssi_handler;
 800c13c:	4a13      	ldr	r2, [pc, #76]	@ (800c18c <http_set_ssi_handler+0x70>)
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d106      	bne.n	800c156 <http_set_ssi_handler+0x3a>
 800c148:	4b0d      	ldr	r3, [pc, #52]	@ (800c180 <http_set_ssi_handler+0x64>)
 800c14a:	f640 2271 	movw	r2, #2673	@ 0xa71
 800c14e:	4910      	ldr	r1, [pc, #64]	@ (800c190 <http_set_ssi_handler+0x74>)
 800c150:	480d      	ldr	r0, [pc, #52]	@ (800c188 <http_set_ssi_handler+0x6c>)
 800c152:	f014 f9a5 	bl	80204a0 <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	dc06      	bgt.n	800c16a <http_set_ssi_handler+0x4e>
 800c15c:	4b08      	ldr	r3, [pc, #32]	@ (800c180 <http_set_ssi_handler+0x64>)
 800c15e:	f640 2272 	movw	r2, #2674	@ 0xa72
 800c162:	490c      	ldr	r1, [pc, #48]	@ (800c194 <http_set_ssi_handler+0x78>)
 800c164:	4808      	ldr	r0, [pc, #32]	@ (800c188 <http_set_ssi_handler+0x6c>)
 800c166:	f014 f99b 	bl	80204a0 <iprintf>

  g_ppcTags = tags;
 800c16a:	4a0b      	ldr	r2, [pc, #44]	@ (800c198 <http_set_ssi_handler+0x7c>)
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	6013      	str	r3, [r2, #0]
  g_iNumTags = num_tags;
 800c170:	4a0a      	ldr	r2, [pc, #40]	@ (800c19c <http_set_ssi_handler+0x80>)
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 800c176:	bf00      	nop
 800c178:	3710      	adds	r7, #16
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}
 800c17e:	bf00      	nop
 800c180:	08023620 	.word	0x08023620
 800c184:	08023858 	.word	0x08023858
 800c188:	08023668 	.word	0x08023668
 800c18c:	2000a4cc 	.word	0x2000a4cc
 800c190:	08023870 	.word	0x08023870
 800c194:	08023880 	.word	0x08023880
 800c198:	2000a4d4 	.word	0x2000a4d4
 800c19c:	2000a4d0 	.word	0x2000a4d0

0800c1a0 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b082      	sub	sp, #8
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
 800c1a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d106      	bne.n	800c1be <http_set_cgi_handlers+0x1e>
 800c1b0:	4b0d      	ldr	r3, [pc, #52]	@ (800c1e8 <http_set_cgi_handlers+0x48>)
 800c1b2:	f640 2284 	movw	r2, #2692	@ 0xa84
 800c1b6:	490d      	ldr	r1, [pc, #52]	@ (800c1ec <http_set_cgi_handlers+0x4c>)
 800c1b8:	480d      	ldr	r0, [pc, #52]	@ (800c1f0 <http_set_cgi_handlers+0x50>)
 800c1ba:	f014 f971 	bl	80204a0 <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	dc06      	bgt.n	800c1d2 <http_set_cgi_handlers+0x32>
 800c1c4:	4b08      	ldr	r3, [pc, #32]	@ (800c1e8 <http_set_cgi_handlers+0x48>)
 800c1c6:	f640 2285 	movw	r2, #2693	@ 0xa85
 800c1ca:	490a      	ldr	r1, [pc, #40]	@ (800c1f4 <http_set_cgi_handlers+0x54>)
 800c1cc:	4808      	ldr	r0, [pc, #32]	@ (800c1f0 <http_set_cgi_handlers+0x50>)
 800c1ce:	f014 f967 	bl	80204a0 <iprintf>

  g_pCGIs = cgis;
 800c1d2:	4a09      	ldr	r2, [pc, #36]	@ (800c1f8 <http_set_cgi_handlers+0x58>)
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	6013      	str	r3, [r2, #0]
  g_iNumCGIs = num_handlers;
 800c1d8:	4a08      	ldr	r2, [pc, #32]	@ (800c1fc <http_set_cgi_handlers+0x5c>)
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	6013      	str	r3, [r2, #0]
}
 800c1de:	bf00      	nop
 800c1e0:	3708      	adds	r7, #8
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}
 800c1e6:	bf00      	nop
 800c1e8:	08023620 	.word	0x08023620
 800c1ec:	08023898 	.word	0x08023898
 800c1f0:	08023668 	.word	0x08023668
 800c1f4:	080238a8 	.word	0x080238a8
 800c1f8:	2000a4d8 	.word	0x2000a4d8
 800c1fc:	2000a4dc 	.word	0x2000a4dc

0800c200 <snmp_ans1_enc_tlv>:
 * @param tlv TLV to encode
 * @return ERR_OK if successful, ERR_ARG if we can't (or won't) encode
 */
err_t
snmp_ans1_enc_tlv(struct snmp_pbuf_stream* pbuf_stream, struct snmp_asn1_tlv* tlv)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b084      	sub	sp, #16
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	6039      	str	r1, [r7, #0]
  u8_t data;
  u8_t length_bytes_required;

  /* write type */
  if ((tlv->type & SNMP_ASN1_DATATYPE_MASK) == SNMP_ASN1_DATATYPE_EXTENDED) {
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	781b      	ldrb	r3, [r3, #0]
 800c20e:	f003 031f 	and.w	r3, r3, #31
 800c212:	2b1f      	cmp	r3, #31
 800c214:	d102      	bne.n	800c21c <snmp_ans1_enc_tlv+0x1c>
    /* extended format is not used by SNMP so we do not accept those values */
    return ERR_ARG;
 800c216:	f06f 030f 	mvn.w	r3, #15
 800c21a:	e078      	b.n	800c30e <snmp_ans1_enc_tlv+0x10e>
  }
  if (tlv->type_len != 0) {
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	785b      	ldrb	r3, [r3, #1]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d002      	beq.n	800c22a <snmp_ans1_enc_tlv+0x2a>
    /* any other value as auto is not accepted for type (we always use one byte because extended syntax is prohibited) */
    return ERR_ARG;
 800c224:	f06f 030f 	mvn.w	r3, #15
 800c228:	e071      	b.n	800c30e <snmp_ans1_enc_tlv+0x10e>
  }

  PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, tlv->type));
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	781b      	ldrb	r3, [r3, #0]
 800c22e:	4619      	mov	r1, r3
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f005 fdca 	bl	8011dca <snmp_pbuf_stream_write>
 800c236:	4603      	mov	r3, r0
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d002      	beq.n	800c242 <snmp_ans1_enc_tlv+0x42>
 800c23c:	f06f 0301 	mvn.w	r3, #1
 800c240:	e065      	b.n	800c30e <snmp_ans1_enc_tlv+0x10e>
  tlv->type_len = 1;
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	2201      	movs	r2, #1
 800c246:	705a      	strb	r2, [r3, #1]

  /* write length */
  if (tlv->value_len <= 127) {
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	889b      	ldrh	r3, [r3, #4]
 800c24c:	2b7f      	cmp	r3, #127	@ 0x7f
 800c24e:	d802      	bhi.n	800c256 <snmp_ans1_enc_tlv+0x56>
    length_bytes_required = 1;
 800c250:	2301      	movs	r3, #1
 800c252:	73bb      	strb	r3, [r7, #14]
 800c254:	e008      	b.n	800c268 <snmp_ans1_enc_tlv+0x68>
  } else if (tlv->value_len <= 255) {
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	889b      	ldrh	r3, [r3, #4]
 800c25a:	2bff      	cmp	r3, #255	@ 0xff
 800c25c:	d802      	bhi.n	800c264 <snmp_ans1_enc_tlv+0x64>
    length_bytes_required = 2;
 800c25e:	2302      	movs	r3, #2
 800c260:	73bb      	strb	r3, [r7, #14]
 800c262:	e001      	b.n	800c268 <snmp_ans1_enc_tlv+0x68>
  } else  {
    length_bytes_required = 3;
 800c264:	2303      	movs	r3, #3
 800c266:	73bb      	strb	r3, [r7, #14]
  }

  /* check for forced min length */
  if (tlv->length_len > 0) {
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	789b      	ldrb	r3, [r3, #2]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d00b      	beq.n	800c288 <snmp_ans1_enc_tlv+0x88>
    if (tlv->length_len < length_bytes_required) {
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	789b      	ldrb	r3, [r3, #2]
 800c274:	7bba      	ldrb	r2, [r7, #14]
 800c276:	429a      	cmp	r2, r3
 800c278:	d902      	bls.n	800c280 <snmp_ans1_enc_tlv+0x80>
      /* unable to code requested length in requested number of bytes */
      return ERR_ARG;
 800c27a:	f06f 030f 	mvn.w	r3, #15
 800c27e:	e046      	b.n	800c30e <snmp_ans1_enc_tlv+0x10e>
    }

    length_bytes_required = tlv->length_len;
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	789b      	ldrb	r3, [r3, #2]
 800c284:	73bb      	strb	r3, [r7, #14]
 800c286:	e002      	b.n	800c28e <snmp_ans1_enc_tlv+0x8e>
  } else {
    tlv->length_len = length_bytes_required;
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	7bba      	ldrb	r2, [r7, #14]
 800c28c:	709a      	strb	r2, [r3, #2]
  }

  if (length_bytes_required > 1) {
 800c28e:	7bbb      	ldrb	r3, [r7, #14]
 800c290:	2b01      	cmp	r3, #1
 800c292:	d92d      	bls.n	800c2f0 <snmp_ans1_enc_tlv+0xf0>
    /* multi byte representation required */
    length_bytes_required--;
 800c294:	7bbb      	ldrb	r3, [r7, #14]
 800c296:	3b01      	subs	r3, #1
 800c298:	73bb      	strb	r3, [r7, #14]
    data = 0x80 | length_bytes_required; /* extended length definition, 1 length byte follows */
 800c29a:	7bbb      	ldrb	r3, [r7, #14]
 800c29c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c2a0:	73fb      	strb	r3, [r7, #15]

    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, data));
 800c2a2:	7bfb      	ldrb	r3, [r7, #15]
 800c2a4:	4619      	mov	r1, r3
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f005 fd8f 	bl	8011dca <snmp_pbuf_stream_write>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d01b      	beq.n	800c2ea <snmp_ans1_enc_tlv+0xea>
 800c2b2:	f06f 0301 	mvn.w	r3, #1
 800c2b6:	e02a      	b.n	800c30e <snmp_ans1_enc_tlv+0x10e>

    while (length_bytes_required > 1) {
      if (length_bytes_required == 2) {
 800c2b8:	7bbb      	ldrb	r3, [r7, #14]
 800c2ba:	2b02      	cmp	r3, #2
 800c2bc:	d105      	bne.n	800c2ca <snmp_ans1_enc_tlv+0xca>
        /* append high byte */
        data = (u8_t)(tlv->value_len >> 8);
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	889b      	ldrh	r3, [r3, #4]
 800c2c2:	0a1b      	lsrs	r3, r3, #8
 800c2c4:	b29b      	uxth	r3, r3
 800c2c6:	73fb      	strb	r3, [r7, #15]
 800c2c8:	e001      	b.n	800c2ce <snmp_ans1_enc_tlv+0xce>
      } else {
        /* append leading 0x00 */
        data = 0x00;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	73fb      	strb	r3, [r7, #15]
      }

      PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, data));
 800c2ce:	7bfb      	ldrb	r3, [r7, #15]
 800c2d0:	4619      	mov	r1, r3
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f005 fd79 	bl	8011dca <snmp_pbuf_stream_write>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d002      	beq.n	800c2e4 <snmp_ans1_enc_tlv+0xe4>
 800c2de:	f06f 0301 	mvn.w	r3, #1
 800c2e2:	e014      	b.n	800c30e <snmp_ans1_enc_tlv+0x10e>
      length_bytes_required--;
 800c2e4:	7bbb      	ldrb	r3, [r7, #14]
 800c2e6:	3b01      	subs	r3, #1
 800c2e8:	73bb      	strb	r3, [r7, #14]
    while (length_bytes_required > 1) {
 800c2ea:	7bbb      	ldrb	r3, [r7, #14]
 800c2ec:	2b01      	cmp	r3, #1
 800c2ee:	d8e3      	bhi.n	800c2b8 <snmp_ans1_enc_tlv+0xb8>
    }
  }

  /* append low byte */
  data = (u8_t)(tlv->value_len & 0xFF);
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	889b      	ldrh	r3, [r3, #4]
 800c2f4:	73fb      	strb	r3, [r7, #15]
  PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, data));
 800c2f6:	7bfb      	ldrb	r3, [r7, #15]
 800c2f8:	4619      	mov	r1, r3
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f005 fd65 	bl	8011dca <snmp_pbuf_stream_write>
 800c300:	4603      	mov	r3, r0
 800c302:	2b00      	cmp	r3, #0
 800c304:	d002      	beq.n	800c30c <snmp_ans1_enc_tlv+0x10c>
 800c306:	f06f 0301 	mvn.w	r3, #1
 800c30a:	e000      	b.n	800c30e <snmp_ans1_enc_tlv+0x10e>

  return ERR_OK;
 800c30c:	2300      	movs	r3, #0
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3710      	adds	r7, #16
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}

0800c316 <snmp_asn1_enc_raw>:
 * @param raw points raw data
 * @return ERR_OK if successful, ERR_ARG if we can't (or won't) encode
 */
err_t
snmp_asn1_enc_raw(struct snmp_pbuf_stream* pbuf_stream, const u8_t *raw, u16_t raw_len)
{
 800c316:	b580      	push	{r7, lr}
 800c318:	b084      	sub	sp, #16
 800c31a:	af00      	add	r7, sp, #0
 800c31c:	60f8      	str	r0, [r7, #12]
 800c31e:	60b9      	str	r1, [r7, #8]
 800c320:	4613      	mov	r3, r2
 800c322:	80fb      	strh	r3, [r7, #6]
  PBUF_OP_EXEC(snmp_pbuf_stream_writebuf(pbuf_stream, raw, raw_len));
 800c324:	88fb      	ldrh	r3, [r7, #6]
 800c326:	461a      	mov	r2, r3
 800c328:	68b9      	ldr	r1, [r7, #8]
 800c32a:	68f8      	ldr	r0, [r7, #12]
 800c32c:	f005 fd5e 	bl	8011dec <snmp_pbuf_stream_writebuf>
 800c330:	4603      	mov	r3, r0
 800c332:	2b00      	cmp	r3, #0
 800c334:	d002      	beq.n	800c33c <snmp_asn1_enc_raw+0x26>
 800c336:	f06f 0301 	mvn.w	r3, #1
 800c33a:	e000      	b.n	800c33e <snmp_asn1_enc_raw+0x28>

  return ERR_OK;
 800c33c:	2300      	movs	r3, #0
}
 800c33e:	4618      	mov	r0, r3
 800c340:	3710      	adds	r7, #16
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}

0800c346 <snmp_asn1_enc_u32t>:
 *
 * @see snmp_asn1_enc_u32t_cnt()
 */
err_t
snmp_asn1_enc_u32t(struct snmp_pbuf_stream* pbuf_stream, u16_t octets_needed, u32_t value)
{
 800c346:	b580      	push	{r7, lr}
 800c348:	b084      	sub	sp, #16
 800c34a:	af00      	add	r7, sp, #0
 800c34c:	60f8      	str	r0, [r7, #12]
 800c34e:	460b      	mov	r3, r1
 800c350:	607a      	str	r2, [r7, #4]
 800c352:	817b      	strh	r3, [r7, #10]
  if (octets_needed > 5) {
 800c354:	897b      	ldrh	r3, [r7, #10]
 800c356:	2b05      	cmp	r3, #5
 800c358:	d902      	bls.n	800c360 <snmp_asn1_enc_u32t+0x1a>
    return ERR_ARG;
 800c35a:	f06f 030f 	mvn.w	r3, #15
 800c35e:	e033      	b.n	800c3c8 <snmp_asn1_enc_u32t+0x82>
  }
  if (octets_needed == 5) {
 800c360:	897b      	ldrh	r3, [r7, #10]
 800c362:	2b05      	cmp	r3, #5
 800c364:	d120      	bne.n	800c3a8 <snmp_asn1_enc_u32t+0x62>
    /* not enough bits in 'value' add leading 0x00 */
    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, 0x00));
 800c366:	2100      	movs	r1, #0
 800c368:	68f8      	ldr	r0, [r7, #12]
 800c36a:	f005 fd2e 	bl	8011dca <snmp_pbuf_stream_write>
 800c36e:	4603      	mov	r3, r0
 800c370:	2b00      	cmp	r3, #0
 800c372:	d002      	beq.n	800c37a <snmp_asn1_enc_u32t+0x34>
 800c374:	f06f 0301 	mvn.w	r3, #1
 800c378:	e026      	b.n	800c3c8 <snmp_asn1_enc_u32t+0x82>
    octets_needed--;
 800c37a:	897b      	ldrh	r3, [r7, #10]
 800c37c:	3b01      	subs	r3, #1
 800c37e:	817b      	strh	r3, [r7, #10]
  }

  while (octets_needed > 1) {
 800c380:	e012      	b.n	800c3a8 <snmp_asn1_enc_u32t+0x62>
    octets_needed--;
 800c382:	897b      	ldrh	r3, [r7, #10]
 800c384:	3b01      	subs	r3, #1
 800c386:	817b      	strh	r3, [r7, #10]
    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)(value >> (octets_needed << 3))));
 800c388:	897b      	ldrh	r3, [r7, #10]
 800c38a:	00db      	lsls	r3, r3, #3
 800c38c:	687a      	ldr	r2, [r7, #4]
 800c38e:	fa22 f303 	lsr.w	r3, r2, r3
 800c392:	b2db      	uxtb	r3, r3
 800c394:	4619      	mov	r1, r3
 800c396:	68f8      	ldr	r0, [r7, #12]
 800c398:	f005 fd17 	bl	8011dca <snmp_pbuf_stream_write>
 800c39c:	4603      	mov	r3, r0
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d002      	beq.n	800c3a8 <snmp_asn1_enc_u32t+0x62>
 800c3a2:	f06f 0301 	mvn.w	r3, #1
 800c3a6:	e00f      	b.n	800c3c8 <snmp_asn1_enc_u32t+0x82>
  while (octets_needed > 1) {
 800c3a8:	897b      	ldrh	r3, [r7, #10]
 800c3aa:	2b01      	cmp	r3, #1
 800c3ac:	d8e9      	bhi.n	800c382 <snmp_asn1_enc_u32t+0x3c>
  }

  /* (only) one least significant octet */
  PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)value));
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	b2db      	uxtb	r3, r3
 800c3b2:	4619      	mov	r1, r3
 800c3b4:	68f8      	ldr	r0, [r7, #12]
 800c3b6:	f005 fd08 	bl	8011dca <snmp_pbuf_stream_write>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d002      	beq.n	800c3c6 <snmp_asn1_enc_u32t+0x80>
 800c3c0:	f06f 0301 	mvn.w	r3, #1
 800c3c4:	e000      	b.n	800c3c8 <snmp_asn1_enc_u32t+0x82>

  return ERR_OK;
 800c3c6:	2300      	movs	r3, #0
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3710      	adds	r7, #16
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}

0800c3d0 <snmp_asn1_enc_u64t>:
 *
 * @see snmp_asn1_enc_u64t_cnt()
 */
err_t
snmp_asn1_enc_u64t(struct snmp_pbuf_stream* pbuf_stream, u16_t octets_needed, const u32_t* value)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b084      	sub	sp, #16
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	60f8      	str	r0, [r7, #12]
 800c3d8:	460b      	mov	r3, r1
 800c3da:	607a      	str	r2, [r7, #4]
 800c3dc:	817b      	strh	r3, [r7, #10]
  if (octets_needed > 9) {
 800c3de:	897b      	ldrh	r3, [r7, #10]
 800c3e0:	2b09      	cmp	r3, #9
 800c3e2:	d902      	bls.n	800c3ea <snmp_asn1_enc_u64t+0x1a>
    return ERR_ARG;
 800c3e4:	f06f 030f 	mvn.w	r3, #15
 800c3e8:	e051      	b.n	800c48e <snmp_asn1_enc_u64t+0xbe>
  }
  if (octets_needed == 9) {
 800c3ea:	897b      	ldrh	r3, [r7, #10]
 800c3ec:	2b09      	cmp	r3, #9
 800c3ee:	d122      	bne.n	800c436 <snmp_asn1_enc_u64t+0x66>
    /* not enough bits in 'value' add leading 0x00 */
    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, 0x00));
 800c3f0:	2100      	movs	r1, #0
 800c3f2:	68f8      	ldr	r0, [r7, #12]
 800c3f4:	f005 fce9 	bl	8011dca <snmp_pbuf_stream_write>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d002      	beq.n	800c404 <snmp_asn1_enc_u64t+0x34>
 800c3fe:	f06f 0301 	mvn.w	r3, #1
 800c402:	e044      	b.n	800c48e <snmp_asn1_enc_u64t+0xbe>
    octets_needed--;
 800c404:	897b      	ldrh	r3, [r7, #10]
 800c406:	3b01      	subs	r3, #1
 800c408:	817b      	strh	r3, [r7, #10]
  }

  while (octets_needed > 4) {
 800c40a:	e014      	b.n	800c436 <snmp_asn1_enc_u64t+0x66>
    octets_needed--;
 800c40c:	897b      	ldrh	r3, [r7, #10]
 800c40e:	3b01      	subs	r3, #1
 800c410:	817b      	strh	r3, [r7, #10]
    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)(*value >> ((octets_needed-4) << 3))));
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681a      	ldr	r2, [r3, #0]
 800c416:	897b      	ldrh	r3, [r7, #10]
 800c418:	3b04      	subs	r3, #4
 800c41a:	00db      	lsls	r3, r3, #3
 800c41c:	fa22 f303 	lsr.w	r3, r2, r3
 800c420:	b2db      	uxtb	r3, r3
 800c422:	4619      	mov	r1, r3
 800c424:	68f8      	ldr	r0, [r7, #12]
 800c426:	f005 fcd0 	bl	8011dca <snmp_pbuf_stream_write>
 800c42a:	4603      	mov	r3, r0
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d002      	beq.n	800c436 <snmp_asn1_enc_u64t+0x66>
 800c430:	f06f 0301 	mvn.w	r3, #1
 800c434:	e02b      	b.n	800c48e <snmp_asn1_enc_u64t+0xbe>
  while (octets_needed > 4) {
 800c436:	897b      	ldrh	r3, [r7, #10]
 800c438:	2b04      	cmp	r3, #4
 800c43a:	d8e7      	bhi.n	800c40c <snmp_asn1_enc_u64t+0x3c>
  }

  /* skip to low u32 */
  value++;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	3304      	adds	r3, #4
 800c440:	607b      	str	r3, [r7, #4]

  while (octets_needed > 1) {
 800c442:	e013      	b.n	800c46c <snmp_asn1_enc_u64t+0x9c>
    octets_needed--;
 800c444:	897b      	ldrh	r3, [r7, #10]
 800c446:	3b01      	subs	r3, #1
 800c448:	817b      	strh	r3, [r7, #10]
    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)(*value >> (octets_needed << 3))));
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681a      	ldr	r2, [r3, #0]
 800c44e:	897b      	ldrh	r3, [r7, #10]
 800c450:	00db      	lsls	r3, r3, #3
 800c452:	fa22 f303 	lsr.w	r3, r2, r3
 800c456:	b2db      	uxtb	r3, r3
 800c458:	4619      	mov	r1, r3
 800c45a:	68f8      	ldr	r0, [r7, #12]
 800c45c:	f005 fcb5 	bl	8011dca <snmp_pbuf_stream_write>
 800c460:	4603      	mov	r3, r0
 800c462:	2b00      	cmp	r3, #0
 800c464:	d002      	beq.n	800c46c <snmp_asn1_enc_u64t+0x9c>
 800c466:	f06f 0301 	mvn.w	r3, #1
 800c46a:	e010      	b.n	800c48e <snmp_asn1_enc_u64t+0xbe>
  while (octets_needed > 1) {
 800c46c:	897b      	ldrh	r3, [r7, #10]
 800c46e:	2b01      	cmp	r3, #1
 800c470:	d8e8      	bhi.n	800c444 <snmp_asn1_enc_u64t+0x74>
  }

  /* always write at least one octet (also in case of value == 0) */
  PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)(*value)));
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	b2db      	uxtb	r3, r3
 800c478:	4619      	mov	r1, r3
 800c47a:	68f8      	ldr	r0, [r7, #12]
 800c47c:	f005 fca5 	bl	8011dca <snmp_pbuf_stream_write>
 800c480:	4603      	mov	r3, r0
 800c482:	2b00      	cmp	r3, #0
 800c484:	d002      	beq.n	800c48c <snmp_asn1_enc_u64t+0xbc>
 800c486:	f06f 0301 	mvn.w	r3, #1
 800c48a:	e000      	b.n	800c48e <snmp_asn1_enc_u64t+0xbe>

  return ERR_OK;
 800c48c:	2300      	movs	r3, #0
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3710      	adds	r7, #16
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}

0800c496 <snmp_asn1_enc_s32t>:
 *
 * @see snmp_asn1_enc_s32t_cnt()
 */
err_t
snmp_asn1_enc_s32t(struct snmp_pbuf_stream* pbuf_stream, u16_t octets_needed, s32_t value)
{
 800c496:	b580      	push	{r7, lr}
 800c498:	b084      	sub	sp, #16
 800c49a:	af00      	add	r7, sp, #0
 800c49c:	60f8      	str	r0, [r7, #12]
 800c49e:	460b      	mov	r3, r1
 800c4a0:	607a      	str	r2, [r7, #4]
 800c4a2:	817b      	strh	r3, [r7, #10]
  while (octets_needed > 1) {
 800c4a4:	e012      	b.n	800c4cc <snmp_asn1_enc_s32t+0x36>
    octets_needed--;
 800c4a6:	897b      	ldrh	r3, [r7, #10]
 800c4a8:	3b01      	subs	r3, #1
 800c4aa:	817b      	strh	r3, [r7, #10]

    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)(value >> (octets_needed << 3))));
 800c4ac:	897b      	ldrh	r3, [r7, #10]
 800c4ae:	00db      	lsls	r3, r3, #3
 800c4b0:	687a      	ldr	r2, [r7, #4]
 800c4b2:	fa42 f303 	asr.w	r3, r2, r3
 800c4b6:	b2db      	uxtb	r3, r3
 800c4b8:	4619      	mov	r1, r3
 800c4ba:	68f8      	ldr	r0, [r7, #12]
 800c4bc:	f005 fc85 	bl	8011dca <snmp_pbuf_stream_write>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d002      	beq.n	800c4cc <snmp_asn1_enc_s32t+0x36>
 800c4c6:	f06f 0301 	mvn.w	r3, #1
 800c4ca:	e00f      	b.n	800c4ec <snmp_asn1_enc_s32t+0x56>
  while (octets_needed > 1) {
 800c4cc:	897b      	ldrh	r3, [r7, #10]
 800c4ce:	2b01      	cmp	r3, #1
 800c4d0:	d8e9      	bhi.n	800c4a6 <snmp_asn1_enc_s32t+0x10>
  }

  /* (only) one least significant octet */
  PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)value));
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	b2db      	uxtb	r3, r3
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	68f8      	ldr	r0, [r7, #12]
 800c4da:	f005 fc76 	bl	8011dca <snmp_pbuf_stream_write>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d002      	beq.n	800c4ea <snmp_asn1_enc_s32t+0x54>
 800c4e4:	f06f 0301 	mvn.w	r3, #1
 800c4e8:	e000      	b.n	800c4ec <snmp_asn1_enc_s32t+0x56>

  return ERR_OK;
 800c4ea:	2300      	movs	r3, #0
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	3710      	adds	r7, #16
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}

0800c4f4 <snmp_asn1_enc_oid>:
 * @param oid_len object identifier array length
 * @return ERR_OK if successful, ERR_ARG if we can't (or won't) encode
 */
err_t
snmp_asn1_enc_oid(struct snmp_pbuf_stream* pbuf_stream, const u32_t *oid, u16_t oid_len)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b088      	sub	sp, #32
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	60f8      	str	r0, [r7, #12]
 800c4fc:	60b9      	str	r1, [r7, #8]
 800c4fe:	4613      	mov	r3, r2
 800c500:	80fb      	strh	r3, [r7, #6]
  if (oid_len > 1) {
 800c502:	88fb      	ldrh	r3, [r7, #6]
 800c504:	2b01      	cmp	r3, #1
 800c506:	d91e      	bls.n	800c546 <snmp_asn1_enc_oid+0x52>
    /* write compressed first two sub id's */
    u32_t compressed_byte = ((oid[0] * 40) + oid[1]);
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	681a      	ldr	r2, [r3, #0]
 800c50c:	4613      	mov	r3, r2
 800c50e:	009b      	lsls	r3, r3, #2
 800c510:	4413      	add	r3, r2
 800c512:	00db      	lsls	r3, r3, #3
 800c514:	461a      	mov	r2, r3
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	3304      	adds	r3, #4
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	4413      	add	r3, r2
 800c51e:	61bb      	str	r3, [r7, #24]
    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)compressed_byte));
 800c520:	69bb      	ldr	r3, [r7, #24]
 800c522:	b2db      	uxtb	r3, r3
 800c524:	4619      	mov	r1, r3
 800c526:	68f8      	ldr	r0, [r7, #12]
 800c528:	f005 fc4f 	bl	8011dca <snmp_pbuf_stream_write>
 800c52c:	4603      	mov	r3, r0
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d002      	beq.n	800c538 <snmp_asn1_enc_oid+0x44>
 800c532:	f06f 0301 	mvn.w	r3, #1
 800c536:	e04b      	b.n	800c5d0 <snmp_asn1_enc_oid+0xdc>
    oid_len -= 2;
 800c538:	88fb      	ldrh	r3, [r7, #6]
 800c53a:	3b02      	subs	r3, #2
 800c53c:	80fb      	strh	r3, [r7, #6]
    oid += 2;
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	3308      	adds	r3, #8
 800c542:	60bb      	str	r3, [r7, #8]
    /* @bug:  allow empty varbinds for symmetry (we must decode them for getnext), allow partial compression?? */
    /* ident_len <= 1, at least we need zeroDotZero (0.0) (ident_len == 2) */
    return ERR_ARG;
  }

  while (oid_len > 0) {
 800c544:	e040      	b.n	800c5c8 <snmp_asn1_enc_oid+0xd4>
    return ERR_ARG;
 800c546:	f06f 030f 	mvn.w	r3, #15
 800c54a:	e041      	b.n	800c5d0 <snmp_asn1_enc_oid+0xdc>
    u32_t sub_id;
    u8_t shift, tail;

    oid_len--;
 800c54c:	88fb      	ldrh	r3, [r7, #6]
 800c54e:	3b01      	subs	r3, #1
 800c550:	80fb      	strh	r3, [r7, #6]
    sub_id = *oid;
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	617b      	str	r3, [r7, #20]
    tail = 0;
 800c558:	2300      	movs	r3, #0
 800c55a:	77bb      	strb	r3, [r7, #30]
    shift = 28;
 800c55c:	231c      	movs	r3, #28
 800c55e:	77fb      	strb	r3, [r7, #31]
    while (shift > 0) {
 800c560:	e01d      	b.n	800c59e <snmp_asn1_enc_oid+0xaa>
      u8_t code;

      code = (u8_t)(sub_id >> shift);
 800c562:	7ffb      	ldrb	r3, [r7, #31]
 800c564:	697a      	ldr	r2, [r7, #20]
 800c566:	fa22 f303 	lsr.w	r3, r2, r3
 800c56a:	74fb      	strb	r3, [r7, #19]
      if ((code != 0) || (tail != 0)) {
 800c56c:	7cfb      	ldrb	r3, [r7, #19]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d102      	bne.n	800c578 <snmp_asn1_enc_oid+0x84>
 800c572:	7fbb      	ldrb	r3, [r7, #30]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d00f      	beq.n	800c598 <snmp_asn1_enc_oid+0xa4>
        tail = 1;
 800c578:	2301      	movs	r3, #1
 800c57a:	77bb      	strb	r3, [r7, #30]
        PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, code | 0x80));
 800c57c:	7cfb      	ldrb	r3, [r7, #19]
 800c57e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c582:	b2db      	uxtb	r3, r3
 800c584:	4619      	mov	r1, r3
 800c586:	68f8      	ldr	r0, [r7, #12]
 800c588:	f005 fc1f 	bl	8011dca <snmp_pbuf_stream_write>
 800c58c:	4603      	mov	r3, r0
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d002      	beq.n	800c598 <snmp_asn1_enc_oid+0xa4>
 800c592:	f06f 0301 	mvn.w	r3, #1
 800c596:	e01b      	b.n	800c5d0 <snmp_asn1_enc_oid+0xdc>
      }
      shift -= 7;
 800c598:	7ffb      	ldrb	r3, [r7, #31]
 800c59a:	3b07      	subs	r3, #7
 800c59c:	77fb      	strb	r3, [r7, #31]
    while (shift > 0) {
 800c59e:	7ffb      	ldrb	r3, [r7, #31]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d1de      	bne.n	800c562 <snmp_asn1_enc_oid+0x6e>
    }
    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)sub_id & 0x7F));
 800c5a4:	697b      	ldr	r3, [r7, #20]
 800c5a6:	b2db      	uxtb	r3, r3
 800c5a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c5ac:	b2db      	uxtb	r3, r3
 800c5ae:	4619      	mov	r1, r3
 800c5b0:	68f8      	ldr	r0, [r7, #12]
 800c5b2:	f005 fc0a 	bl	8011dca <snmp_pbuf_stream_write>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d002      	beq.n	800c5c2 <snmp_asn1_enc_oid+0xce>
 800c5bc:	f06f 0301 	mvn.w	r3, #1
 800c5c0:	e006      	b.n	800c5d0 <snmp_asn1_enc_oid+0xdc>

    /* proceed to next sub-identifier */
    oid++;
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	3304      	adds	r3, #4
 800c5c6:	60bb      	str	r3, [r7, #8]
  while (oid_len > 0) {
 800c5c8:	88fb      	ldrh	r3, [r7, #6]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d1be      	bne.n	800c54c <snmp_asn1_enc_oid+0x58>
  }
  return ERR_OK;
 800c5ce:	2300      	movs	r3, #0
}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	3720      	adds	r7, #32
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}

0800c5d8 <snmp_asn1_enc_length_cnt>:
 * @param length parameter length
 * @param octets_needed points to the return value
 */
void
snmp_asn1_enc_length_cnt(u16_t length, u8_t *octets_needed)
{
 800c5d8:	b480      	push	{r7}
 800c5da:	b083      	sub	sp, #12
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	4603      	mov	r3, r0
 800c5e0:	6039      	str	r1, [r7, #0]
 800c5e2:	80fb      	strh	r3, [r7, #6]
  if (length < 0x80U) {
 800c5e4:	88fb      	ldrh	r3, [r7, #6]
 800c5e6:	2b7f      	cmp	r3, #127	@ 0x7f
 800c5e8:	d803      	bhi.n	800c5f2 <snmp_asn1_enc_length_cnt+0x1a>
    *octets_needed = 1;
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	2201      	movs	r2, #1
 800c5ee:	701a      	strb	r2, [r3, #0]
  } else if (length < 0x100U) {
    *octets_needed = 2;
  } else {
    *octets_needed = 3;
  }
}
 800c5f0:	e009      	b.n	800c606 <snmp_asn1_enc_length_cnt+0x2e>
  } else if (length < 0x100U) {
 800c5f2:	88fb      	ldrh	r3, [r7, #6]
 800c5f4:	2bff      	cmp	r3, #255	@ 0xff
 800c5f6:	d803      	bhi.n	800c600 <snmp_asn1_enc_length_cnt+0x28>
    *octets_needed = 2;
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	2202      	movs	r2, #2
 800c5fc:	701a      	strb	r2, [r3, #0]
}
 800c5fe:	e002      	b.n	800c606 <snmp_asn1_enc_length_cnt+0x2e>
    *octets_needed = 3;
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	2203      	movs	r2, #3
 800c604:	701a      	strb	r2, [r3, #0]
}
 800c606:	bf00      	nop
 800c608:	370c      	adds	r7, #12
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bc80      	pop	{r7}
 800c60e:	4770      	bx	lr

0800c610 <snmp_asn1_enc_u32t_cnt>:
 * as 0x00,0xFF,0xFF. Note the leading sign octet. A positive value
 * of 0xFFFFFFFF is preceded with 0x00 and the length is 5 octets!!
 */
void
snmp_asn1_enc_u32t_cnt(u32_t value, u16_t *octets_needed)
{
 800c610:	b480      	push	{r7}
 800c612:	b083      	sub	sp, #12
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	6039      	str	r1, [r7, #0]
  if (value < 0x80UL) {
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2b7f      	cmp	r3, #127	@ 0x7f
 800c61e:	d803      	bhi.n	800c628 <snmp_asn1_enc_u32t_cnt+0x18>
    *octets_needed = 1;
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	2201      	movs	r2, #1
 800c624:	801a      	strh	r2, [r3, #0]
  } else if (value < 0x80000000UL) {
    *octets_needed = 4;
  } else {
    *octets_needed = 5;
  }
}
 800c626:	e019      	b.n	800c65c <snmp_asn1_enc_u32t_cnt+0x4c>
  } else if (value < 0x8000UL) {
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c62e:	d203      	bcs.n	800c638 <snmp_asn1_enc_u32t_cnt+0x28>
    *octets_needed = 2;
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	2202      	movs	r2, #2
 800c634:	801a      	strh	r2, [r3, #0]
}
 800c636:	e011      	b.n	800c65c <snmp_asn1_enc_u32t_cnt+0x4c>
  } else if (value < 0x800000UL) {
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c63e:	d203      	bcs.n	800c648 <snmp_asn1_enc_u32t_cnt+0x38>
    *octets_needed = 3;
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	2203      	movs	r2, #3
 800c644:	801a      	strh	r2, [r3, #0]
}
 800c646:	e009      	b.n	800c65c <snmp_asn1_enc_u32t_cnt+0x4c>
  } else if (value < 0x80000000UL) {
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	db03      	blt.n	800c656 <snmp_asn1_enc_u32t_cnt+0x46>
    *octets_needed = 4;
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	2204      	movs	r2, #4
 800c652:	801a      	strh	r2, [r3, #0]
}
 800c654:	e002      	b.n	800c65c <snmp_asn1_enc_u32t_cnt+0x4c>
    *octets_needed = 5;
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	2205      	movs	r2, #5
 800c65a:	801a      	strh	r2, [r3, #0]
}
 800c65c:	bf00      	nop
 800c65e:	370c      	adds	r7, #12
 800c660:	46bd      	mov	sp, r7
 800c662:	bc80      	pop	{r7}
 800c664:	4770      	bx	lr

0800c666 <snmp_asn1_enc_u64t_cnt>:
 * as 0x00,0xFF,0xFF. Note the leading sign octet. A positive value
 * of 0xFFFFFFFF is preceded with 0x00 and the length is 5 octets!!
 */
void
snmp_asn1_enc_u64t_cnt(const u32_t *value, u16_t *octets_needed)
{
 800c666:	b580      	push	{r7, lr}
 800c668:	b082      	sub	sp, #8
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	6078      	str	r0, [r7, #4]
 800c66e:	6039      	str	r1, [r7, #0]
  /* check if high u32 is 0 */
  if (*value == 0x00) {
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d109      	bne.n	800c68c <snmp_asn1_enc_u64t_cnt+0x26>
    /* only low u32 is important */
    value++;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	3304      	adds	r3, #4
 800c67c:	607b      	str	r3, [r7, #4]
    snmp_asn1_enc_u32t_cnt(*value, octets_needed);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	6839      	ldr	r1, [r7, #0]
 800c684:	4618      	mov	r0, r3
 800c686:	f7ff ffc3 	bl	800c610 <snmp_asn1_enc_u32t_cnt>
  } else {
    /* low u32 does not matter for length determination */
    snmp_asn1_enc_u32t_cnt(*value, octets_needed);
    *octets_needed = *octets_needed + 4; /* add the 4 bytes of low u32 */
  }
}
 800c68a:	e00b      	b.n	800c6a4 <snmp_asn1_enc_u64t_cnt+0x3e>
    snmp_asn1_enc_u32t_cnt(*value, octets_needed);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	6839      	ldr	r1, [r7, #0]
 800c692:	4618      	mov	r0, r3
 800c694:	f7ff ffbc 	bl	800c610 <snmp_asn1_enc_u32t_cnt>
    *octets_needed = *octets_needed + 4; /* add the 4 bytes of low u32 */
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	881b      	ldrh	r3, [r3, #0]
 800c69c:	3304      	adds	r3, #4
 800c69e:	b29a      	uxth	r2, r3
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	801a      	strh	r2, [r3, #0]
}
 800c6a4:	bf00      	nop
 800c6a6:	3708      	adds	r7, #8
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	bd80      	pop	{r7, pc}

0800c6ac <snmp_asn1_enc_s32t_cnt>:
 *
 * @note ASN coded integers are _always_ signed.
 */
void
snmp_asn1_enc_s32t_cnt(s32_t value, u16_t *octets_needed)
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	b083      	sub	sp, #12
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
 800c6b4:	6039      	str	r1, [r7, #0]
  if (value < 0) {
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	da02      	bge.n	800c6c2 <snmp_asn1_enc_s32t_cnt+0x16>
    value = ~value;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	43db      	mvns	r3, r3
 800c6c0:	607b      	str	r3, [r7, #4]
  }
  if (value < 0x80L) {
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2b7f      	cmp	r3, #127	@ 0x7f
 800c6c6:	dc03      	bgt.n	800c6d0 <snmp_asn1_enc_s32t_cnt+0x24>
    *octets_needed = 1;
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	801a      	strh	r2, [r3, #0]
  } else if (value < 0x800000L) {
    *octets_needed = 3;
  } else {
    *octets_needed = 4;
  }
}
 800c6ce:	e012      	b.n	800c6f6 <snmp_asn1_enc_s32t_cnt+0x4a>
  } else if (value < 0x8000L) {
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c6d6:	da03      	bge.n	800c6e0 <snmp_asn1_enc_s32t_cnt+0x34>
    *octets_needed = 2;
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	2202      	movs	r2, #2
 800c6dc:	801a      	strh	r2, [r3, #0]
}
 800c6de:	e00a      	b.n	800c6f6 <snmp_asn1_enc_s32t_cnt+0x4a>
  } else if (value < 0x800000L) {
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c6e6:	da03      	bge.n	800c6f0 <snmp_asn1_enc_s32t_cnt+0x44>
    *octets_needed = 3;
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	2203      	movs	r2, #3
 800c6ec:	801a      	strh	r2, [r3, #0]
}
 800c6ee:	e002      	b.n	800c6f6 <snmp_asn1_enc_s32t_cnt+0x4a>
    *octets_needed = 4;
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	2204      	movs	r2, #4
 800c6f4:	801a      	strh	r2, [r3, #0]
}
 800c6f6:	bf00      	nop
 800c6f8:	370c      	adds	r7, #12
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bc80      	pop	{r7}
 800c6fe:	4770      	bx	lr

0800c700 <snmp_asn1_enc_oid_cnt>:
 * @param oid_len object identifier array length
 * @param octets_needed points to the return value
 */
void
snmp_asn1_enc_oid_cnt(const u32_t *oid, u16_t oid_len, u16_t *octets_needed)
{
 800c700:	b480      	push	{r7}
 800c702:	b087      	sub	sp, #28
 800c704:	af00      	add	r7, sp, #0
 800c706:	60f8      	str	r0, [r7, #12]
 800c708:	460b      	mov	r3, r1
 800c70a:	607a      	str	r2, [r7, #4]
 800c70c:	817b      	strh	r3, [r7, #10]
  u32_t sub_id;

  *octets_needed = 0;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	2200      	movs	r2, #0
 800c712:	801a      	strh	r2, [r3, #0]
  if (oid_len > 1) {
 800c714:	897b      	ldrh	r3, [r7, #10]
 800c716:	2b01      	cmp	r3, #1
 800c718:	d92b      	bls.n	800c772 <snmp_asn1_enc_oid_cnt+0x72>
    /* compressed prefix in one octet */
    (*octets_needed)++;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	881b      	ldrh	r3, [r3, #0]
 800c71e:	3301      	adds	r3, #1
 800c720:	b29a      	uxth	r2, r3
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	801a      	strh	r2, [r3, #0]
    oid_len -= 2;
 800c726:	897b      	ldrh	r3, [r7, #10]
 800c728:	3b02      	subs	r3, #2
 800c72a:	817b      	strh	r3, [r7, #10]
    oid += 2;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	3308      	adds	r3, #8
 800c730:	60fb      	str	r3, [r7, #12]
  }
  while (oid_len > 0) {
 800c732:	e01e      	b.n	800c772 <snmp_asn1_enc_oid_cnt+0x72>
    oid_len--;
 800c734:	897b      	ldrh	r3, [r7, #10]
 800c736:	3b01      	subs	r3, #1
 800c738:	817b      	strh	r3, [r7, #10]
    sub_id = *oid;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	617b      	str	r3, [r7, #20]

    sub_id >>= 7;
 800c740:	697b      	ldr	r3, [r7, #20]
 800c742:	09db      	lsrs	r3, r3, #7
 800c744:	617b      	str	r3, [r7, #20]
    (*octets_needed)++;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	881b      	ldrh	r3, [r3, #0]
 800c74a:	3301      	adds	r3, #1
 800c74c:	b29a      	uxth	r2, r3
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	801a      	strh	r2, [r3, #0]
    while (sub_id > 0) {
 800c752:	e008      	b.n	800c766 <snmp_asn1_enc_oid_cnt+0x66>
      sub_id >>= 7;
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	09db      	lsrs	r3, r3, #7
 800c758:	617b      	str	r3, [r7, #20]
      (*octets_needed)++;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	881b      	ldrh	r3, [r3, #0]
 800c75e:	3301      	adds	r3, #1
 800c760:	b29a      	uxth	r2, r3
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	801a      	strh	r2, [r3, #0]
    while (sub_id > 0) {
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d1f3      	bne.n	800c754 <snmp_asn1_enc_oid_cnt+0x54>
    }
    oid++;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	3304      	adds	r3, #4
 800c770:	60fb      	str	r3, [r7, #12]
  while (oid_len > 0) {
 800c772:	897b      	ldrh	r3, [r7, #10]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d1dd      	bne.n	800c734 <snmp_asn1_enc_oid_cnt+0x34>
  }
}
 800c778:	bf00      	nop
 800c77a:	bf00      	nop
 800c77c:	371c      	adds	r7, #28
 800c77e:	46bd      	mov	sp, r7
 800c780:	bc80      	pop	{r7}
 800c782:	4770      	bx	lr

0800c784 <snmp_asn1_dec_tlv>:
 * @param tlv returns decoded TLV
 * @return ERR_OK if successful, ERR_VAL if we can't decode
 */
err_t
snmp_asn1_dec_tlv(struct snmp_pbuf_stream* pbuf_stream, struct snmp_asn1_tlv* tlv)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b084      	sub	sp, #16
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
 800c78c:	6039      	str	r1, [r7, #0]
  u8_t data;

  /* decode type first */
  PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800c78e:	f107 030e 	add.w	r3, r7, #14
 800c792:	4619      	mov	r1, r3
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	f005 faed 	bl	8011d74 <snmp_pbuf_stream_read>
 800c79a:	4603      	mov	r3, r0
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d002      	beq.n	800c7a6 <snmp_asn1_dec_tlv+0x22>
 800c7a0:	f06f 0301 	mvn.w	r3, #1
 800c7a4:	e069      	b.n	800c87a <snmp_asn1_dec_tlv+0xf6>
  tlv->type = data;
 800c7a6:	7bba      	ldrb	r2, [r7, #14]
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	701a      	strb	r2, [r3, #0]

  if ((tlv->type & SNMP_ASN1_DATATYPE_MASK) == SNMP_ASN1_DATATYPE_EXTENDED) {
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	781b      	ldrb	r3, [r3, #0]
 800c7b0:	f003 031f 	and.w	r3, r3, #31
 800c7b4:	2b1f      	cmp	r3, #31
 800c7b6:	d102      	bne.n	800c7be <snmp_asn1_dec_tlv+0x3a>
    /* extended format is not used by SNMP so we do not accept those values */
    return ERR_VAL;
 800c7b8:	f06f 0305 	mvn.w	r3, #5
 800c7bc:	e05d      	b.n	800c87a <snmp_asn1_dec_tlv+0xf6>
  }
  tlv->type_len = 1;
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	2201      	movs	r2, #1
 800c7c2:	705a      	strb	r2, [r3, #1]

  /* now, decode length */
  PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800c7c4:	f107 030e 	add.w	r3, r7, #14
 800c7c8:	4619      	mov	r1, r3
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f005 fad2 	bl	8011d74 <snmp_pbuf_stream_read>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d002      	beq.n	800c7dc <snmp_asn1_dec_tlv+0x58>
 800c7d6:	f06f 0301 	mvn.w	r3, #1
 800c7da:	e04e      	b.n	800c87a <snmp_asn1_dec_tlv+0xf6>

  if (data < 0x80) { /* short form */
 800c7dc:	7bbb      	ldrb	r3, [r7, #14]
 800c7de:	b25b      	sxtb	r3, r3
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	db07      	blt.n	800c7f4 <snmp_asn1_dec_tlv+0x70>
    tlv->length_len = 1;
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	2201      	movs	r2, #1
 800c7e8:	709a      	strb	r2, [r3, #2]
    tlv->value_len  = data;
 800c7ea:	7bbb      	ldrb	r3, [r7, #14]
 800c7ec:	461a      	mov	r2, r3
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	809a      	strh	r2, [r3, #4]
 800c7f2:	e041      	b.n	800c878 <snmp_asn1_dec_tlv+0xf4>
  } else if (data > 0x80) { /* long form */
 800c7f4:	7bbb      	ldrb	r3, [r7, #14]
 800c7f6:	2b80      	cmp	r3, #128	@ 0x80
 800c7f8:	d93b      	bls.n	800c872 <snmp_asn1_dec_tlv+0xee>
    u8_t length_bytes = data - 0x80;
 800c7fa:	7bbb      	ldrb	r3, [r7, #14]
 800c7fc:	3b80      	subs	r3, #128	@ 0x80
 800c7fe:	73fb      	strb	r3, [r7, #15]
    tlv->length_len = length_bytes + 1; /* this byte + defined number of length bytes following */
 800c800:	7bfb      	ldrb	r3, [r7, #15]
 800c802:	3301      	adds	r3, #1
 800c804:	b2da      	uxtb	r2, r3
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	709a      	strb	r2, [r3, #2]
    tlv->value_len = 0;
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	2200      	movs	r2, #0
 800c80e:	809a      	strh	r2, [r3, #4]

    while (length_bytes > 0) {
 800c810:	e02b      	b.n	800c86a <snmp_asn1_dec_tlv+0xe6>
      /* we only support up to u16.maxvalue-1 (2 bytes) but have to accept leading zero bytes */
      if (tlv->value_len > 0xFF) {
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	889b      	ldrh	r3, [r3, #4]
 800c816:	2bff      	cmp	r3, #255	@ 0xff
 800c818:	d902      	bls.n	800c820 <snmp_asn1_dec_tlv+0x9c>
        return ERR_VAL;
 800c81a:	f06f 0305 	mvn.w	r3, #5
 800c81e:	e02c      	b.n	800c87a <snmp_asn1_dec_tlv+0xf6>
      }
      PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800c820:	f107 030e 	add.w	r3, r7, #14
 800c824:	4619      	mov	r1, r3
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f005 faa4 	bl	8011d74 <snmp_pbuf_stream_read>
 800c82c:	4603      	mov	r3, r0
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d002      	beq.n	800c838 <snmp_asn1_dec_tlv+0xb4>
 800c832:	f06f 0301 	mvn.w	r3, #1
 800c836:	e020      	b.n	800c87a <snmp_asn1_dec_tlv+0xf6>
      tlv->value_len <<= 8;
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	889b      	ldrh	r3, [r3, #4]
 800c83c:	021b      	lsls	r3, r3, #8
 800c83e:	b29a      	uxth	r2, r3
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	809a      	strh	r2, [r3, #4]
      tlv->value_len |= data;
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	889b      	ldrh	r3, [r3, #4]
 800c848:	7bba      	ldrb	r2, [r7, #14]
 800c84a:	4313      	orrs	r3, r2
 800c84c:	b29a      	uxth	r2, r3
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	809a      	strh	r2, [r3, #4]

      /* take care for special value used for indefinite length */
      if (tlv->value_len == 0xFFFF) {
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	889b      	ldrh	r3, [r3, #4]
 800c856:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c85a:	4293      	cmp	r3, r2
 800c85c:	d102      	bne.n	800c864 <snmp_asn1_dec_tlv+0xe0>
        return ERR_VAL;
 800c85e:	f06f 0305 	mvn.w	r3, #5
 800c862:	e00a      	b.n	800c87a <snmp_asn1_dec_tlv+0xf6>
      }

      length_bytes--;
 800c864:	7bfb      	ldrb	r3, [r7, #15]
 800c866:	3b01      	subs	r3, #1
 800c868:	73fb      	strb	r3, [r7, #15]
    while (length_bytes > 0) {
 800c86a:	7bfb      	ldrb	r3, [r7, #15]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d1d0      	bne.n	800c812 <snmp_asn1_dec_tlv+0x8e>
 800c870:	e002      	b.n	800c878 <snmp_asn1_dec_tlv+0xf4>
    }
  } else { /* data == 0x80 indefinite length form */
    /* (not allowed for SNMP; RFC 1157, 3.2.2) */
    return ERR_VAL;
 800c872:	f06f 0305 	mvn.w	r3, #5
 800c876:	e000      	b.n	800c87a <snmp_asn1_dec_tlv+0xf6>
  }

  return ERR_OK;
 800c878:	2300      	movs	r3, #0
}
 800c87a:	4618      	mov	r0, r3
 800c87c:	3710      	adds	r7, #16
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}

0800c882 <snmp_asn1_dec_u32t>:
 * as 0x00,0xFF,0xFF. Note the leading sign octet. A positive value
 * of 0xFFFFFFFF is preceded with 0x00 and the length is 5 octets!!
 */
err_t
snmp_asn1_dec_u32t(struct snmp_pbuf_stream *pbuf_stream, u16_t len, u32_t *value)
{
 800c882:	b580      	push	{r7, lr}
 800c884:	b086      	sub	sp, #24
 800c886:	af00      	add	r7, sp, #0
 800c888:	60f8      	str	r0, [r7, #12]
 800c88a:	460b      	mov	r3, r1
 800c88c:	607a      	str	r2, [r7, #4]
 800c88e:	817b      	strh	r3, [r7, #10]
  u8_t data;

  if ((len > 0) && (len <= 5)) {
 800c890:	897b      	ldrh	r3, [r7, #10]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d042      	beq.n	800c91c <snmp_asn1_dec_u32t+0x9a>
 800c896:	897b      	ldrh	r3, [r7, #10]
 800c898:	2b05      	cmp	r3, #5
 800c89a:	d83f      	bhi.n	800c91c <snmp_asn1_dec_u32t+0x9a>
    PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800c89c:	f107 0317 	add.w	r3, r7, #23
 800c8a0:	4619      	mov	r1, r3
 800c8a2:	68f8      	ldr	r0, [r7, #12]
 800c8a4:	f005 fa66 	bl	8011d74 <snmp_pbuf_stream_read>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d002      	beq.n	800c8b4 <snmp_asn1_dec_u32t+0x32>
 800c8ae:	f06f 0301 	mvn.w	r3, #1
 800c8b2:	e035      	b.n	800c920 <snmp_asn1_dec_u32t+0x9e>

    /* expecting sign bit to be zero, only unsigned please! */
    if (((len == 5) && (data == 0x00)) || ((len < 5) && ((data & 0x80) == 0))) {
 800c8b4:	897b      	ldrh	r3, [r7, #10]
 800c8b6:	2b05      	cmp	r3, #5
 800c8b8:	d102      	bne.n	800c8c0 <snmp_asn1_dec_u32t+0x3e>
 800c8ba:	7dfb      	ldrb	r3, [r7, #23]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d006      	beq.n	800c8ce <snmp_asn1_dec_u32t+0x4c>
 800c8c0:	897b      	ldrh	r3, [r7, #10]
 800c8c2:	2b04      	cmp	r3, #4
 800c8c4:	d82a      	bhi.n	800c91c <snmp_asn1_dec_u32t+0x9a>
 800c8c6:	7dfb      	ldrb	r3, [r7, #23]
 800c8c8:	b25b      	sxtb	r3, r3
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	db26      	blt.n	800c91c <snmp_asn1_dec_u32t+0x9a>
      *value = data;
 800c8ce:	7dfb      	ldrb	r3, [r7, #23]
 800c8d0:	461a      	mov	r2, r3
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	601a      	str	r2, [r3, #0]
      len--;
 800c8d6:	897b      	ldrh	r3, [r7, #10]
 800c8d8:	3b01      	subs	r3, #1
 800c8da:	817b      	strh	r3, [r7, #10]

      while (len > 0) {
 800c8dc:	e019      	b.n	800c912 <snmp_asn1_dec_u32t+0x90>
        PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800c8de:	f107 0317 	add.w	r3, r7, #23
 800c8e2:	4619      	mov	r1, r3
 800c8e4:	68f8      	ldr	r0, [r7, #12]
 800c8e6:	f005 fa45 	bl	8011d74 <snmp_pbuf_stream_read>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d002      	beq.n	800c8f6 <snmp_asn1_dec_u32t+0x74>
 800c8f0:	f06f 0301 	mvn.w	r3, #1
 800c8f4:	e014      	b.n	800c920 <snmp_asn1_dec_u32t+0x9e>
        len--;
 800c8f6:	897b      	ldrh	r3, [r7, #10]
 800c8f8:	3b01      	subs	r3, #1
 800c8fa:	817b      	strh	r3, [r7, #10]

        *value <<= 8;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	021a      	lsls	r2, r3, #8
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	601a      	str	r2, [r3, #0]
        *value |= data;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	7dfa      	ldrb	r2, [r7, #23]
 800c90c:	431a      	orrs	r2, r3
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	601a      	str	r2, [r3, #0]
      while (len > 0) {
 800c912:	897b      	ldrh	r3, [r7, #10]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d1e2      	bne.n	800c8de <snmp_asn1_dec_u32t+0x5c>
      }

      return ERR_OK;
 800c918:	2300      	movs	r3, #0
 800c91a:	e001      	b.n	800c920 <snmp_asn1_dec_u32t+0x9e>
    }
  }

  return ERR_VAL;
 800c91c:	f06f 0305 	mvn.w	r3, #5
}
 800c920:	4618      	mov	r0, r3
 800c922:	3718      	adds	r7, #24
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}

0800c928 <snmp_asn1_dec_u64t>:
 * as 0x00,0xFF,0xFF. Note the leading sign octet. A positive value
 * of 0xFFFFFFFF is preceded with 0x00 and the length is 5 octets!!
 */
err_t
snmp_asn1_dec_u64t(struct snmp_pbuf_stream *pbuf_stream, u16_t len, u32_t *value)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b086      	sub	sp, #24
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	60f8      	str	r0, [r7, #12]
 800c930:	460b      	mov	r3, r1
 800c932:	607a      	str	r2, [r7, #4]
 800c934:	817b      	strh	r3, [r7, #10]
  u8_t data;

  if (len <= 4) {
 800c936:	897b      	ldrh	r3, [r7, #10]
 800c938:	2b04      	cmp	r3, #4
 800c93a:	d805      	bhi.n	800c948 <snmp_asn1_dec_u64t+0x20>
    /* high u32 is 0 */
    *value = 0;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2200      	movs	r2, #0
 800c940:	601a      	str	r2, [r3, #0]
    /* directly skip to low u32 */
    value++;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	3304      	adds	r3, #4
 800c946:	607b      	str	r3, [r7, #4]
  }

  if ((len > 0) && (len <= 9)) {
 800c948:	897b      	ldrh	r3, [r7, #10]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d04c      	beq.n	800c9e8 <snmp_asn1_dec_u64t+0xc0>
 800c94e:	897b      	ldrh	r3, [r7, #10]
 800c950:	2b09      	cmp	r3, #9
 800c952:	d849      	bhi.n	800c9e8 <snmp_asn1_dec_u64t+0xc0>
    PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800c954:	f107 0317 	add.w	r3, r7, #23
 800c958:	4619      	mov	r1, r3
 800c95a:	68f8      	ldr	r0, [r7, #12]
 800c95c:	f005 fa0a 	bl	8011d74 <snmp_pbuf_stream_read>
 800c960:	4603      	mov	r3, r0
 800c962:	2b00      	cmp	r3, #0
 800c964:	d002      	beq.n	800c96c <snmp_asn1_dec_u64t+0x44>
 800c966:	f06f 0301 	mvn.w	r3, #1
 800c96a:	e03f      	b.n	800c9ec <snmp_asn1_dec_u64t+0xc4>

    /* expecting sign bit to be zero, only unsigned please! */
    if (((len == 9) && (data == 0x00)) || ((len < 9) && ((data & 0x80) == 0))) {
 800c96c:	897b      	ldrh	r3, [r7, #10]
 800c96e:	2b09      	cmp	r3, #9
 800c970:	d102      	bne.n	800c978 <snmp_asn1_dec_u64t+0x50>
 800c972:	7dfb      	ldrb	r3, [r7, #23]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d006      	beq.n	800c986 <snmp_asn1_dec_u64t+0x5e>
 800c978:	897b      	ldrh	r3, [r7, #10]
 800c97a:	2b08      	cmp	r3, #8
 800c97c:	d834      	bhi.n	800c9e8 <snmp_asn1_dec_u64t+0xc0>
 800c97e:	7dfb      	ldrb	r3, [r7, #23]
 800c980:	b25b      	sxtb	r3, r3
 800c982:	2b00      	cmp	r3, #0
 800c984:	db30      	blt.n	800c9e8 <snmp_asn1_dec_u64t+0xc0>
      *value = data;
 800c986:	7dfb      	ldrb	r3, [r7, #23]
 800c988:	461a      	mov	r2, r3
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	601a      	str	r2, [r3, #0]
      len--;
 800c98e:	897b      	ldrh	r3, [r7, #10]
 800c990:	3b01      	subs	r3, #1
 800c992:	817b      	strh	r3, [r7, #10]

      while (len > 0) {
 800c994:	e023      	b.n	800c9de <snmp_asn1_dec_u64t+0xb6>
        PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800c996:	f107 0317 	add.w	r3, r7, #23
 800c99a:	4619      	mov	r1, r3
 800c99c:	68f8      	ldr	r0, [r7, #12]
 800c99e:	f005 f9e9 	bl	8011d74 <snmp_pbuf_stream_read>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d002      	beq.n	800c9ae <snmp_asn1_dec_u64t+0x86>
 800c9a8:	f06f 0301 	mvn.w	r3, #1
 800c9ac:	e01e      	b.n	800c9ec <snmp_asn1_dec_u64t+0xc4>

        if (len == 4) {
 800c9ae:	897b      	ldrh	r3, [r7, #10]
 800c9b0:	2b04      	cmp	r3, #4
 800c9b2:	d106      	bne.n	800c9c2 <snmp_asn1_dec_u64t+0x9a>
          /* skip to low u32 */
          value++;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	3304      	adds	r3, #4
 800c9b8:	607b      	str	r3, [r7, #4]
          *value = 0;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2200      	movs	r2, #0
 800c9be:	601a      	str	r2, [r3, #0]
 800c9c0:	e004      	b.n	800c9cc <snmp_asn1_dec_u64t+0xa4>
        } else {
          *value <<= 8;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	021a      	lsls	r2, r3, #8
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	601a      	str	r2, [r3, #0]
        }

        *value |= data;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	7dfa      	ldrb	r2, [r7, #23]
 800c9d2:	431a      	orrs	r2, r3
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	601a      	str	r2, [r3, #0]
        len--;
 800c9d8:	897b      	ldrh	r3, [r7, #10]
 800c9da:	3b01      	subs	r3, #1
 800c9dc:	817b      	strh	r3, [r7, #10]
      while (len > 0) {
 800c9de:	897b      	ldrh	r3, [r7, #10]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d1d8      	bne.n	800c996 <snmp_asn1_dec_u64t+0x6e>
      }

      return ERR_OK;
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	e001      	b.n	800c9ec <snmp_asn1_dec_u64t+0xc4>
    }
  }

  return ERR_VAL;
 800c9e8:	f06f 0305 	mvn.w	r3, #5
}
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	3718      	adds	r7, #24
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}

0800c9f4 <snmp_asn1_dec_s32t>:
 *
 * @note ASN coded integers are _always_ signed!
 */
err_t
snmp_asn1_dec_s32t(struct snmp_pbuf_stream *pbuf_stream, u16_t len, s32_t *value)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b088      	sub	sp, #32
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	60f8      	str	r0, [r7, #12]
 800c9fc:	460b      	mov	r3, r1
 800c9fe:	607a      	str	r2, [r7, #4]
 800ca00:	817b      	strh	r3, [r7, #10]
#if BYTE_ORDER == LITTLE_ENDIAN
  u8_t *lsb_ptr = (u8_t*)value;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	61bb      	str	r3, [r7, #24]
  u8_t *lsb_ptr = (u8_t*)value + sizeof(s32_t) - 1;
#endif
  u8_t sign;
  u8_t data;

  if ((len > 0) && (len < 5)) {
 800ca06:	897b      	ldrh	r3, [r7, #10]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d05e      	beq.n	800caca <snmp_asn1_dec_s32t+0xd6>
 800ca0c:	897b      	ldrh	r3, [r7, #10]
 800ca0e:	2b04      	cmp	r3, #4
 800ca10:	d85b      	bhi.n	800caca <snmp_asn1_dec_s32t+0xd6>
    PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800ca12:	f107 0317 	add.w	r3, r7, #23
 800ca16:	4619      	mov	r1, r3
 800ca18:	68f8      	ldr	r0, [r7, #12]
 800ca1a:	f005 f9ab 	bl	8011d74 <snmp_pbuf_stream_read>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d002      	beq.n	800ca2a <snmp_asn1_dec_s32t+0x36>
 800ca24:	f06f 0301 	mvn.w	r3, #1
 800ca28:	e051      	b.n	800cace <snmp_asn1_dec_s32t+0xda>
    len--;
 800ca2a:	897b      	ldrh	r3, [r7, #10]
 800ca2c:	3b01      	subs	r3, #1
 800ca2e:	817b      	strh	r3, [r7, #10]

    if (data & 0x80) {
 800ca30:	7dfb      	ldrb	r3, [r7, #23]
 800ca32:	b25b      	sxtb	r3, r3
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	da0d      	bge.n	800ca54 <snmp_asn1_dec_s32t+0x60>
      /* negative, start from -1 */
      *value = -1;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f04f 32ff 	mov.w	r2, #4294967295
 800ca3e:	601a      	str	r2, [r3, #0]
      sign = 1;
 800ca40:	2301      	movs	r3, #1
 800ca42:	77fb      	strb	r3, [r7, #31]
      *lsb_ptr &= data;
 800ca44:	69bb      	ldr	r3, [r7, #24]
 800ca46:	781a      	ldrb	r2, [r3, #0]
 800ca48:	7dfb      	ldrb	r3, [r7, #23]
 800ca4a:	4013      	ands	r3, r2
 800ca4c:	b2da      	uxtb	r2, r3
 800ca4e:	69bb      	ldr	r3, [r7, #24]
 800ca50:	701a      	strb	r2, [r3, #0]
 800ca52:	e035      	b.n	800cac0 <snmp_asn1_dec_s32t+0xcc>
    } else {
      /* positive, start from 0 */
      *value = 0;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2200      	movs	r2, #0
 800ca58:	601a      	str	r2, [r3, #0]
      sign = 0;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	77fb      	strb	r3, [r7, #31]
      *lsb_ptr |= data;
 800ca5e:	69bb      	ldr	r3, [r7, #24]
 800ca60:	781a      	ldrb	r2, [r3, #0]
 800ca62:	7dfb      	ldrb	r3, [r7, #23]
 800ca64:	4313      	orrs	r3, r2
 800ca66:	b2da      	uxtb	r2, r3
 800ca68:	69bb      	ldr	r3, [r7, #24]
 800ca6a:	701a      	strb	r2, [r3, #0]
    }

    /* OR/AND octets with value */
    while (len > 0) {
 800ca6c:	e028      	b.n	800cac0 <snmp_asn1_dec_s32t+0xcc>
      PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800ca6e:	f107 0317 	add.w	r3, r7, #23
 800ca72:	4619      	mov	r1, r3
 800ca74:	68f8      	ldr	r0, [r7, #12]
 800ca76:	f005 f97d 	bl	8011d74 <snmp_pbuf_stream_read>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d002      	beq.n	800ca86 <snmp_asn1_dec_s32t+0x92>
 800ca80:	f06f 0301 	mvn.w	r3, #1
 800ca84:	e023      	b.n	800cace <snmp_asn1_dec_s32t+0xda>
      len--;
 800ca86:	897b      	ldrh	r3, [r7, #10]
 800ca88:	3b01      	subs	r3, #1
 800ca8a:	817b      	strh	r3, [r7, #10]

#if BYTE_ORDER == LITTLE_ENDIAN
      *value <<= 8;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	021a      	lsls	r2, r3, #8
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	601a      	str	r2, [r3, #0]
#endif
#if BYTE_ORDER == BIG_ENDIAN
      *value >>= 8;
#endif

      if (sign) {
 800ca96:	7ffb      	ldrb	r3, [r7, #31]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d00a      	beq.n	800cab2 <snmp_asn1_dec_s32t+0xbe>
        *lsb_ptr |= 255;
 800ca9c:	69bb      	ldr	r3, [r7, #24]
 800ca9e:	22ff      	movs	r2, #255	@ 0xff
 800caa0:	701a      	strb	r2, [r3, #0]
        *lsb_ptr &= data;
 800caa2:	69bb      	ldr	r3, [r7, #24]
 800caa4:	781a      	ldrb	r2, [r3, #0]
 800caa6:	7dfb      	ldrb	r3, [r7, #23]
 800caa8:	4013      	ands	r3, r2
 800caaa:	b2da      	uxtb	r2, r3
 800caac:	69bb      	ldr	r3, [r7, #24]
 800caae:	701a      	strb	r2, [r3, #0]
 800cab0:	e006      	b.n	800cac0 <snmp_asn1_dec_s32t+0xcc>
      } else {
        *lsb_ptr |= data;
 800cab2:	69bb      	ldr	r3, [r7, #24]
 800cab4:	781a      	ldrb	r2, [r3, #0]
 800cab6:	7dfb      	ldrb	r3, [r7, #23]
 800cab8:	4313      	orrs	r3, r2
 800caba:	b2da      	uxtb	r2, r3
 800cabc:	69bb      	ldr	r3, [r7, #24]
 800cabe:	701a      	strb	r2, [r3, #0]
    while (len > 0) {
 800cac0:	897b      	ldrh	r3, [r7, #10]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d1d3      	bne.n	800ca6e <snmp_asn1_dec_s32t+0x7a>
      }
    }

    return ERR_OK;
 800cac6:	2300      	movs	r3, #0
 800cac8:	e001      	b.n	800cace <snmp_asn1_dec_s32t+0xda>
  }

  return ERR_VAL;
 800caca:	f06f 0305 	mvn.w	r3, #5
}
 800cace:	4618      	mov	r0, r3
 800cad0:	3720      	adds	r7, #32
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bd80      	pop	{r7, pc}

0800cad6 <snmp_asn1_dec_oid>:
 * @param oid_max_len size of oid buffer
 * @return ERR_OK if successful, ERR_ARG if we can't (or won't) decode
 */
err_t
snmp_asn1_dec_oid(struct snmp_pbuf_stream *pbuf_stream, u16_t len, u32_t* oid, u8_t* oid_len, u8_t oid_max_len)
{
 800cad6:	b580      	push	{r7, lr}
 800cad8:	b088      	sub	sp, #32
 800cada:	af00      	add	r7, sp, #0
 800cadc:	60f8      	str	r0, [r7, #12]
 800cade:	607a      	str	r2, [r7, #4]
 800cae0:	603b      	str	r3, [r7, #0]
 800cae2:	460b      	mov	r3, r1
 800cae4:	817b      	strh	r3, [r7, #10]
  u32_t *oid_ptr;
  u8_t data;

  *oid_len = 0;
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	2200      	movs	r2, #0
 800caea:	701a      	strb	r2, [r3, #0]
  oid_ptr = oid;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	61fb      	str	r3, [r7, #28]
  if (len > 0) {
 800caf0:	897b      	ldrh	r3, [r7, #10]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d05a      	beq.n	800cbac <snmp_asn1_dec_oid+0xd6>
    if (oid_max_len < 2) {
 800caf6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800cafa:	2b01      	cmp	r3, #1
 800cafc:	d802      	bhi.n	800cb04 <snmp_asn1_dec_oid+0x2e>
      return ERR_MEM;
 800cafe:	f04f 33ff 	mov.w	r3, #4294967295
 800cb02:	e0b2      	b.n	800cc6a <snmp_asn1_dec_oid+0x194>
    }

    PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800cb04:	f107 0317 	add.w	r3, r7, #23
 800cb08:	4619      	mov	r1, r3
 800cb0a:	68f8      	ldr	r0, [r7, #12]
 800cb0c:	f005 f932 	bl	8011d74 <snmp_pbuf_stream_read>
 800cb10:	4603      	mov	r3, r0
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d002      	beq.n	800cb1c <snmp_asn1_dec_oid+0x46>
 800cb16:	f06f 0301 	mvn.w	r3, #1
 800cb1a:	e0a6      	b.n	800cc6a <snmp_asn1_dec_oid+0x194>
    len--;
 800cb1c:	897b      	ldrh	r3, [r7, #10]
 800cb1e:	3b01      	subs	r3, #1
 800cb20:	817b      	strh	r3, [r7, #10]

    /* first compressed octet */
    if (data == 0x2B) {
 800cb22:	7dfb      	ldrb	r3, [r7, #23]
 800cb24:	2b2b      	cmp	r3, #43	@ 0x2b
 800cb26:	d10c      	bne.n	800cb42 <snmp_asn1_dec_oid+0x6c>
      /* (most) common case 1.3 (iso.org) */
      *oid_ptr = 1;
 800cb28:	69fb      	ldr	r3, [r7, #28]
 800cb2a:	2201      	movs	r2, #1
 800cb2c:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 800cb2e:	69fb      	ldr	r3, [r7, #28]
 800cb30:	3304      	adds	r3, #4
 800cb32:	61fb      	str	r3, [r7, #28]
      *oid_ptr = 3;
 800cb34:	69fb      	ldr	r3, [r7, #28]
 800cb36:	2203      	movs	r2, #3
 800cb38:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 800cb3a:	69fb      	ldr	r3, [r7, #28]
 800cb3c:	3304      	adds	r3, #4
 800cb3e:	61fb      	str	r3, [r7, #28]
 800cb40:	e030      	b.n	800cba4 <snmp_asn1_dec_oid+0xce>
    } else if (data < 40) {
 800cb42:	7dfb      	ldrb	r3, [r7, #23]
 800cb44:	2b27      	cmp	r3, #39	@ 0x27
 800cb46:	d80d      	bhi.n	800cb64 <snmp_asn1_dec_oid+0x8e>
      *oid_ptr = 0;
 800cb48:	69fb      	ldr	r3, [r7, #28]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 800cb4e:	69fb      	ldr	r3, [r7, #28]
 800cb50:	3304      	adds	r3, #4
 800cb52:	61fb      	str	r3, [r7, #28]
      *oid_ptr = data;
 800cb54:	7dfb      	ldrb	r3, [r7, #23]
 800cb56:	461a      	mov	r2, r3
 800cb58:	69fb      	ldr	r3, [r7, #28]
 800cb5a:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 800cb5c:	69fb      	ldr	r3, [r7, #28]
 800cb5e:	3304      	adds	r3, #4
 800cb60:	61fb      	str	r3, [r7, #28]
 800cb62:	e01f      	b.n	800cba4 <snmp_asn1_dec_oid+0xce>
    } else if (data < 80) {
 800cb64:	7dfb      	ldrb	r3, [r7, #23]
 800cb66:	2b4f      	cmp	r3, #79	@ 0x4f
 800cb68:	d80e      	bhi.n	800cb88 <snmp_asn1_dec_oid+0xb2>
      *oid_ptr = 1;
 800cb6a:	69fb      	ldr	r3, [r7, #28]
 800cb6c:	2201      	movs	r2, #1
 800cb6e:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 800cb70:	69fb      	ldr	r3, [r7, #28]
 800cb72:	3304      	adds	r3, #4
 800cb74:	61fb      	str	r3, [r7, #28]
      *oid_ptr = data - 40;
 800cb76:	7dfb      	ldrb	r3, [r7, #23]
 800cb78:	3b28      	subs	r3, #40	@ 0x28
 800cb7a:	461a      	mov	r2, r3
 800cb7c:	69fb      	ldr	r3, [r7, #28]
 800cb7e:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 800cb80:	69fb      	ldr	r3, [r7, #28]
 800cb82:	3304      	adds	r3, #4
 800cb84:	61fb      	str	r3, [r7, #28]
 800cb86:	e00d      	b.n	800cba4 <snmp_asn1_dec_oid+0xce>
    } else {
      *oid_ptr = 2;
 800cb88:	69fb      	ldr	r3, [r7, #28]
 800cb8a:	2202      	movs	r2, #2
 800cb8c:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 800cb8e:	69fb      	ldr	r3, [r7, #28]
 800cb90:	3304      	adds	r3, #4
 800cb92:	61fb      	str	r3, [r7, #28]
      *oid_ptr = data - 80;
 800cb94:	7dfb      	ldrb	r3, [r7, #23]
 800cb96:	3b50      	subs	r3, #80	@ 0x50
 800cb98:	461a      	mov	r2, r3
 800cb9a:	69fb      	ldr	r3, [r7, #28]
 800cb9c:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 800cb9e:	69fb      	ldr	r3, [r7, #28]
 800cba0:	3304      	adds	r3, #4
 800cba2:	61fb      	str	r3, [r7, #28]
    }
    *oid_len = 2;
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	2202      	movs	r2, #2
 800cba8:	701a      	strb	r2, [r3, #0]
  } else {
    /* accepting zero length identifiers e.g. for getnext operation. uncommon but valid */
    return ERR_OK;
  }

  while ((len > 0) && (*oid_len < oid_max_len)) {
 800cbaa:	e04e      	b.n	800cc4a <snmp_asn1_dec_oid+0x174>
    return ERR_OK;
 800cbac:	2300      	movs	r3, #0
 800cbae:	e05c      	b.n	800cc6a <snmp_asn1_dec_oid+0x194>
    PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800cbb0:	f107 0317 	add.w	r3, r7, #23
 800cbb4:	4619      	mov	r1, r3
 800cbb6:	68f8      	ldr	r0, [r7, #12]
 800cbb8:	f005 f8dc 	bl	8011d74 <snmp_pbuf_stream_read>
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d002      	beq.n	800cbc8 <snmp_asn1_dec_oid+0xf2>
 800cbc2:	f06f 0301 	mvn.w	r3, #1
 800cbc6:	e050      	b.n	800cc6a <snmp_asn1_dec_oid+0x194>
    len--;
 800cbc8:	897b      	ldrh	r3, [r7, #10]
 800cbca:	3b01      	subs	r3, #1
 800cbcc:	817b      	strh	r3, [r7, #10]

    if ((data & 0x80) == 0x00) {
 800cbce:	7dfb      	ldrb	r3, [r7, #23]
 800cbd0:	b25b      	sxtb	r3, r3
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	db04      	blt.n	800cbe0 <snmp_asn1_dec_oid+0x10a>
      /* sub-identifier uses single octet */
      *oid_ptr = data;
 800cbd6:	7dfb      	ldrb	r3, [r7, #23]
 800cbd8:	461a      	mov	r2, r3
 800cbda:	69fb      	ldr	r3, [r7, #28]
 800cbdc:	601a      	str	r2, [r3, #0]
 800cbde:	e02b      	b.n	800cc38 <snmp_asn1_dec_oid+0x162>
    } else {
      /* sub-identifier uses multiple octets */
      u32_t sub_id = (data & ~0x80);
 800cbe0:	7dfb      	ldrb	r3, [r7, #23]
 800cbe2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cbe6:	61bb      	str	r3, [r7, #24]
      while ((len > 0) && ((data & 0x80) != 0)) {
 800cbe8:	e015      	b.n	800cc16 <snmp_asn1_dec_oid+0x140>
        PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800cbea:	f107 0317 	add.w	r3, r7, #23
 800cbee:	4619      	mov	r1, r3
 800cbf0:	68f8      	ldr	r0, [r7, #12]
 800cbf2:	f005 f8bf 	bl	8011d74 <snmp_pbuf_stream_read>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d002      	beq.n	800cc02 <snmp_asn1_dec_oid+0x12c>
 800cbfc:	f06f 0301 	mvn.w	r3, #1
 800cc00:	e033      	b.n	800cc6a <snmp_asn1_dec_oid+0x194>
        len--;
 800cc02:	897b      	ldrh	r3, [r7, #10]
 800cc04:	3b01      	subs	r3, #1
 800cc06:	817b      	strh	r3, [r7, #10]

        sub_id = (sub_id << 7) + (data & ~0x80);
 800cc08:	69bb      	ldr	r3, [r7, #24]
 800cc0a:	01da      	lsls	r2, r3, #7
 800cc0c:	7dfb      	ldrb	r3, [r7, #23]
 800cc0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cc12:	4413      	add	r3, r2
 800cc14:	61bb      	str	r3, [r7, #24]
      while ((len > 0) && ((data & 0x80) != 0)) {
 800cc16:	897b      	ldrh	r3, [r7, #10]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d003      	beq.n	800cc24 <snmp_asn1_dec_oid+0x14e>
 800cc1c:	7dfb      	ldrb	r3, [r7, #23]
 800cc1e:	b25b      	sxtb	r3, r3
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	dbe2      	blt.n	800cbea <snmp_asn1_dec_oid+0x114>
      }

      if ((data & 0x80) != 0) {
 800cc24:	7dfb      	ldrb	r3, [r7, #23]
 800cc26:	b25b      	sxtb	r3, r3
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	da02      	bge.n	800cc32 <snmp_asn1_dec_oid+0x15c>
        /* "more bytes following" bit still set at end of len */
        return ERR_VAL;
 800cc2c:	f06f 0305 	mvn.w	r3, #5
 800cc30:	e01b      	b.n	800cc6a <snmp_asn1_dec_oid+0x194>
      }
      *oid_ptr = sub_id;
 800cc32:	69fb      	ldr	r3, [r7, #28]
 800cc34:	69ba      	ldr	r2, [r7, #24]
 800cc36:	601a      	str	r2, [r3, #0]
    }
    oid_ptr++;
 800cc38:	69fb      	ldr	r3, [r7, #28]
 800cc3a:	3304      	adds	r3, #4
 800cc3c:	61fb      	str	r3, [r7, #28]
    (*oid_len)++;
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	781b      	ldrb	r3, [r3, #0]
 800cc42:	3301      	adds	r3, #1
 800cc44:	b2da      	uxtb	r2, r3
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	701a      	strb	r2, [r3, #0]
  while ((len > 0) && (*oid_len < oid_max_len)) {
 800cc4a:	897b      	ldrh	r3, [r7, #10]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d005      	beq.n	800cc5c <snmp_asn1_dec_oid+0x186>
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	781b      	ldrb	r3, [r3, #0]
 800cc54:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800cc58:	429a      	cmp	r2, r3
 800cc5a:	d8a9      	bhi.n	800cbb0 <snmp_asn1_dec_oid+0xda>
  }

  if (len > 0) {
 800cc5c:	897b      	ldrh	r3, [r7, #10]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d002      	beq.n	800cc68 <snmp_asn1_dec_oid+0x192>
    /* OID to long to fit in our buffer */
    return ERR_MEM;
 800cc62:	f04f 33ff 	mov.w	r3, #4294967295
 800cc66:	e000      	b.n	800cc6a <snmp_asn1_dec_oid+0x194>
  }

  return ERR_OK;
 800cc68:	2300      	movs	r3, #0
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3720      	adds	r7, #32
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}

0800cc72 <snmp_asn1_dec_raw>:
 * @param buf_max_len buffer size
 * @return ERR_OK if successful, ERR_ARG if we can't (or won't) decode
 */
err_t
snmp_asn1_dec_raw(struct snmp_pbuf_stream *pbuf_stream, u16_t len, u8_t *buf, u16_t* buf_len, u16_t buf_max_len)
{
 800cc72:	b580      	push	{r7, lr}
 800cc74:	b084      	sub	sp, #16
 800cc76:	af00      	add	r7, sp, #0
 800cc78:	60f8      	str	r0, [r7, #12]
 800cc7a:	607a      	str	r2, [r7, #4]
 800cc7c:	603b      	str	r3, [r7, #0]
 800cc7e:	460b      	mov	r3, r1
 800cc80:	817b      	strh	r3, [r7, #10]
  if (len > buf_max_len) {
 800cc82:	897a      	ldrh	r2, [r7, #10]
 800cc84:	8b3b      	ldrh	r3, [r7, #24]
 800cc86:	429a      	cmp	r2, r3
 800cc88:	d902      	bls.n	800cc90 <snmp_asn1_dec_raw+0x1e>
    /* not enough dst space */
    return ERR_MEM;
 800cc8a:	f04f 33ff 	mov.w	r3, #4294967295
 800cc8e:	e017      	b.n	800ccc0 <snmp_asn1_dec_raw+0x4e>
  }
  *buf_len = len;
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	897a      	ldrh	r2, [r7, #10]
 800cc94:	801a      	strh	r2, [r3, #0]

  while (len > 0) {
 800cc96:	e00f      	b.n	800ccb8 <snmp_asn1_dec_raw+0x46>
    PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, buf));
 800cc98:	6879      	ldr	r1, [r7, #4]
 800cc9a:	68f8      	ldr	r0, [r7, #12]
 800cc9c:	f005 f86a 	bl	8011d74 <snmp_pbuf_stream_read>
 800cca0:	4603      	mov	r3, r0
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d002      	beq.n	800ccac <snmp_asn1_dec_raw+0x3a>
 800cca6:	f06f 0301 	mvn.w	r3, #1
 800ccaa:	e009      	b.n	800ccc0 <snmp_asn1_dec_raw+0x4e>
    buf++;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	3301      	adds	r3, #1
 800ccb0:	607b      	str	r3, [r7, #4]
    len--;
 800ccb2:	897b      	ldrh	r3, [r7, #10]
 800ccb4:	3b01      	subs	r3, #1
 800ccb6:	817b      	strh	r3, [r7, #10]
  while (len > 0) {
 800ccb8:	897b      	ldrh	r3, [r7, #10]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d1ec      	bne.n	800cc98 <snmp_asn1_dec_raw+0x26>
  }

  return ERR_OK;
 800ccbe:	2300      	movs	r3, #0
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3710      	adds	r7, #16
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}

0800ccc8 <snmp_set_mibs>:
 * };
 * snmp_set_mibs(my_snmp_mibs, LWIP_ARRAYSIZE(my_snmp_mibs));
 */
void
snmp_set_mibs(const struct snmp_mib **mibs, u8_t num_mibs)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b082      	sub	sp, #8
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	460b      	mov	r3, r1
 800ccd2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("mibs pointer must be != NULL", (mibs != NULL));
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d105      	bne.n	800cce6 <snmp_set_mibs+0x1e>
 800ccda:	4b0c      	ldr	r3, [pc, #48]	@ (800cd0c <snmp_set_mibs+0x44>)
 800ccdc:	22de      	movs	r2, #222	@ 0xde
 800ccde:	490c      	ldr	r1, [pc, #48]	@ (800cd10 <snmp_set_mibs+0x48>)
 800cce0:	480c      	ldr	r0, [pc, #48]	@ (800cd14 <snmp_set_mibs+0x4c>)
 800cce2:	f013 fbdd 	bl	80204a0 <iprintf>
  LWIP_ASSERT("num_mibs pointer must be != 0", (num_mibs != 0));
 800cce6:	78fb      	ldrb	r3, [r7, #3]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d105      	bne.n	800ccf8 <snmp_set_mibs+0x30>
 800ccec:	4b07      	ldr	r3, [pc, #28]	@ (800cd0c <snmp_set_mibs+0x44>)
 800ccee:	22df      	movs	r2, #223	@ 0xdf
 800ccf0:	4909      	ldr	r1, [pc, #36]	@ (800cd18 <snmp_set_mibs+0x50>)
 800ccf2:	4808      	ldr	r0, [pc, #32]	@ (800cd14 <snmp_set_mibs+0x4c>)
 800ccf4:	f013 fbd4 	bl	80204a0 <iprintf>
  snmp_mibs     = mibs;
 800ccf8:	4a08      	ldr	r2, [pc, #32]	@ (800cd1c <snmp_set_mibs+0x54>)
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6013      	str	r3, [r2, #0]
  snmp_num_mibs = num_mibs;
 800ccfe:	4a08      	ldr	r2, [pc, #32]	@ (800cd20 <snmp_set_mibs+0x58>)
 800cd00:	78fb      	ldrb	r3, [r7, #3]
 800cd02:	7013      	strb	r3, [r2, #0]
}
 800cd04:	bf00      	nop
 800cd06:	3708      	adds	r7, #8
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}
 800cd0c:	080238c4 	.word	0x080238c4
 800cd10:	08023900 	.word	0x08023900
 800cd14:	08023920 	.word	0x08023920
 800cd18:	08023948 	.word	0x08023948
 800cd1c:	200000f0 	.word	0x200000f0
 800cd20:	200000ec 	.word	0x200000ec

0800cd24 <snmp_get_device_enterprise_oid>:
/**
 * @ingroup snmp_core
 * Get 'device enterprise oid' 
 */
const struct snmp_obj_id* snmp_get_device_enterprise_oid(void)
{
 800cd24:	b480      	push	{r7}
 800cd26:	af00      	add	r7, sp, #0
  return snmp_device_enterprise_oid;
 800cd28:	4b02      	ldr	r3, [pc, #8]	@ (800cd34 <snmp_get_device_enterprise_oid+0x10>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
}
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bc80      	pop	{r7}
 800cd32:	4770      	bx	lr
 800cd34:	200000e8 	.word	0x200000e8

0800cd38 <snmp_oid_to_ip4>:
 * @param oid points to u32_t ident[4] input
 * @param ip points to output struct
 */
u8_t
snmp_oid_to_ip4(const u32_t *oid, ip4_addr_t *ip)
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b083      	sub	sp, #12
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
 800cd40:	6039      	str	r1, [r7, #0]
  if ((oid[0] > 0xFF) ||
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	2bff      	cmp	r3, #255	@ 0xff
 800cd48:	d80e      	bhi.n	800cd68 <snmp_oid_to_ip4+0x30>
      (oid[1] > 0xFF) ||
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	3304      	adds	r3, #4
 800cd4e:	681b      	ldr	r3, [r3, #0]
  if ((oid[0] > 0xFF) ||
 800cd50:	2bff      	cmp	r3, #255	@ 0xff
 800cd52:	d809      	bhi.n	800cd68 <snmp_oid_to_ip4+0x30>
      (oid[2] > 0xFF) ||
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	3308      	adds	r3, #8
 800cd58:	681b      	ldr	r3, [r3, #0]
      (oid[1] > 0xFF) ||
 800cd5a:	2bff      	cmp	r3, #255	@ 0xff
 800cd5c:	d804      	bhi.n	800cd68 <snmp_oid_to_ip4+0x30>
      (oid[3] > 0xFF)) {
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	330c      	adds	r3, #12
 800cd62:	681b      	ldr	r3, [r3, #0]
      (oid[2] > 0xFF) ||
 800cd64:	2bff      	cmp	r3, #255	@ 0xff
 800cd66:	d905      	bls.n	800cd74 <snmp_oid_to_ip4+0x3c>
    ip4_addr_copy(*ip, *IP4_ADDR_ANY4);
 800cd68:	4b36      	ldr	r3, [pc, #216]	@ (800ce44 <snmp_oid_to_ip4+0x10c>)
 800cd6a:	681a      	ldr	r2, [r3, #0]
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	601a      	str	r2, [r3, #0]
    return 0;
 800cd70:	2300      	movs	r3, #0
 800cd72:	e061      	b.n	800ce38 <snmp_oid_to_ip4+0x100>
  }

  IP4_ADDR(ip, oid[0], oid[1], oid[2], oid[3]);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	061a      	lsls	r2, r3, #24
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	3304      	adds	r3, #4
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	041b      	lsls	r3, r3, #16
 800cd82:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cd86:	431a      	orrs	r2, r3
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	3308      	adds	r3, #8
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	021b      	lsls	r3, r3, #8
 800cd90:	b29b      	uxth	r3, r3
 800cd92:	431a      	orrs	r2, r3
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	330c      	adds	r3, #12
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	b2db      	uxtb	r3, r3
 800cd9c:	4313      	orrs	r3, r2
 800cd9e:	061a      	lsls	r2, r3, #24
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	0619      	lsls	r1, r3, #24
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	3304      	adds	r3, #4
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	041b      	lsls	r3, r3, #16
 800cdae:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cdb2:	4319      	orrs	r1, r3
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	3308      	adds	r3, #8
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	021b      	lsls	r3, r3, #8
 800cdbc:	b29b      	uxth	r3, r3
 800cdbe:	4319      	orrs	r1, r3
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	330c      	adds	r3, #12
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	b2db      	uxtb	r3, r3
 800cdc8:	430b      	orrs	r3, r1
 800cdca:	021b      	lsls	r3, r3, #8
 800cdcc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cdd0:	431a      	orrs	r2, r3
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	0619      	lsls	r1, r3, #24
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	3304      	adds	r3, #4
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	041b      	lsls	r3, r3, #16
 800cde0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cde4:	4319      	orrs	r1, r3
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	3308      	adds	r3, #8
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	021b      	lsls	r3, r3, #8
 800cdee:	b29b      	uxth	r3, r3
 800cdf0:	4319      	orrs	r1, r3
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	330c      	adds	r3, #12
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	b2db      	uxtb	r3, r3
 800cdfa:	430b      	orrs	r3, r1
 800cdfc:	0a1b      	lsrs	r3, r3, #8
 800cdfe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ce02:	431a      	orrs	r2, r3
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	0619      	lsls	r1, r3, #24
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	3304      	adds	r3, #4
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	041b      	lsls	r3, r3, #16
 800ce12:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ce16:	4319      	orrs	r1, r3
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	3308      	adds	r3, #8
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	021b      	lsls	r3, r3, #8
 800ce20:	b29b      	uxth	r3, r3
 800ce22:	4319      	orrs	r1, r3
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	330c      	adds	r3, #12
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	b2db      	uxtb	r3, r3
 800ce2c:	430b      	orrs	r3, r1
 800ce2e:	0e1b      	lsrs	r3, r3, #24
 800ce30:	431a      	orrs	r2, r3
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	601a      	str	r2, [r3, #0]
  return 1;
 800ce36:	2301      	movs	r3, #1
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	370c      	adds	r7, #12
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bc80      	pop	{r7}
 800ce40:	4770      	bx	lr
 800ce42:	bf00      	nop
 800ce44:	0802f050 	.word	0x0802f050

0800ce48 <snmp_ip4_to_oid>:
 * @param ip points to input struct
 * @param oid points to u32_t ident[4] output
 */
void
snmp_ip4_to_oid(const ip4_addr_t *ip, u32_t *oid)
{
 800ce48:	b480      	push	{r7}
 800ce4a:	b083      	sub	sp, #12
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	6039      	str	r1, [r7, #0]
  oid[0] = ip4_addr1(ip);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	781b      	ldrb	r3, [r3, #0]
 800ce56:	461a      	mov	r2, r3
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	601a      	str	r2, [r3, #0]
  oid[1] = ip4_addr2(ip);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	3301      	adds	r3, #1
 800ce60:	781a      	ldrb	r2, [r3, #0]
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	3304      	adds	r3, #4
 800ce66:	601a      	str	r2, [r3, #0]
  oid[2] = ip4_addr3(ip);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	3302      	adds	r3, #2
 800ce6c:	781a      	ldrb	r2, [r3, #0]
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	3308      	adds	r3, #8
 800ce72:	601a      	str	r2, [r3, #0]
  oid[3] = ip4_addr4(ip);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	3303      	adds	r3, #3
 800ce78:	781a      	ldrb	r2, [r3, #0]
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	330c      	adds	r3, #12
 800ce7e:	601a      	str	r2, [r3, #0]
}
 800ce80:	bf00      	nop
 800ce82:	370c      	adds	r7, #12
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bc80      	pop	{r7}
 800ce88:	4770      	bx	lr

0800ce8a <snmp_ip_port_to_oid>:
 * @param oid OID
 * @return OID length
 */
u8_t
snmp_ip_port_to_oid(const ip_addr_t *ip, u16_t port, u32_t *oid)
{
 800ce8a:	b580      	push	{r7, lr}
 800ce8c:	b086      	sub	sp, #24
 800ce8e:	af00      	add	r7, sp, #0
 800ce90:	60f8      	str	r0, [r7, #12]
 800ce92:	460b      	mov	r3, r1
 800ce94:	607a      	str	r2, [r7, #4]
 800ce96:	817b      	strh	r3, [r7, #10]
  u8_t idx;

  idx = snmp_ip_to_oid(ip, oid);
 800ce98:	6879      	ldr	r1, [r7, #4]
 800ce9a:	68f8      	ldr	r0, [r7, #12]
 800ce9c:	f000 f810 	bl	800cec0 <snmp_ip_to_oid>
 800cea0:	4603      	mov	r3, r0
 800cea2:	75fb      	strb	r3, [r7, #23]
  oid[idx] = port;
 800cea4:	7dfb      	ldrb	r3, [r7, #23]
 800cea6:	009b      	lsls	r3, r3, #2
 800cea8:	687a      	ldr	r2, [r7, #4]
 800ceaa:	4413      	add	r3, r2
 800ceac:	897a      	ldrh	r2, [r7, #10]
 800ceae:	601a      	str	r2, [r3, #0]
  idx++;
 800ceb0:	7dfb      	ldrb	r3, [r7, #23]
 800ceb2:	3301      	adds	r3, #1
 800ceb4:	75fb      	strb	r3, [r7, #23]

  return idx;
 800ceb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ceb8:	4618      	mov	r0, r3
 800ceba:	3718      	adds	r7, #24
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}

0800cec0 <snmp_ip_to_oid>:
 * @param oid OID
 * @return OID length
 */
u8_t
snmp_ip_to_oid(const ip_addr_t *ip, u32_t *oid)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	6039      	str	r1, [r7, #0]
#else /* LWIP_IPV6 */
    return 0;
#endif /* LWIP_IPV6 */
  } else {
#if LWIP_IPV4
    oid[0] = 1; /* ipv4 */
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	2201      	movs	r2, #1
 800cece:	601a      	str	r2, [r3, #0]
    oid[1] = 4; /* 4 InetAddressIPv4 OIDs follow */
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	3304      	adds	r3, #4
 800ced4:	2204      	movs	r2, #4
 800ced6:	601a      	str	r2, [r3, #0]
    snmp_ip4_to_oid(ip_2_ip4(ip), &oid[2]);
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	3308      	adds	r3, #8
 800cedc:	4619      	mov	r1, r3
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f7ff ffb2 	bl	800ce48 <snmp_ip4_to_oid>
    return 6;
 800cee4:	2306      	movs	r3, #6
#else /* LWIP_IPV4 */
    return 0;
#endif /* LWIP_IPV4 */
  }
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	3708      	adds	r7, #8
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}

0800ceee <snmp_oid_to_ip>:
 * @param ip IP address
 * @return Parsed OID length
 */
u8_t
snmp_oid_to_ip(const u32_t *oid, u8_t oid_len, ip_addr_t *ip)
{
 800ceee:	b580      	push	{r7, lr}
 800cef0:	b084      	sub	sp, #16
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	60f8      	str	r0, [r7, #12]
 800cef6:	460b      	mov	r3, r1
 800cef8:	607a      	str	r2, [r7, #4]
 800cefa:	72fb      	strb	r3, [r7, #11]
  /* InetAddressType */
  if (oid_len < 1) {
 800cefc:	7afb      	ldrb	r3, [r7, #11]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d101      	bne.n	800cf06 <snmp_oid_to_ip+0x18>
    return 0;
 800cf02:	2300      	movs	r3, #0
 800cf04:	e03a      	b.n	800cf7c <snmp_oid_to_ip+0x8e>
  }

  if (oid[0] == 0) { /* any */
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d112      	bne.n	800cf34 <snmp_oid_to_ip+0x46>
    /* 1x InetAddressType, 1x OID len */
    if (oid_len < 2) {
 800cf0e:	7afb      	ldrb	r3, [r7, #11]
 800cf10:	2b01      	cmp	r3, #1
 800cf12:	d801      	bhi.n	800cf18 <snmp_oid_to_ip+0x2a>
      return 0;
 800cf14:	2300      	movs	r3, #0
 800cf16:	e031      	b.n	800cf7c <snmp_oid_to_ip+0x8e>
    }
    if (oid[1] != 0) {
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	3304      	adds	r3, #4
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d001      	beq.n	800cf26 <snmp_oid_to_ip+0x38>
      return 0;
 800cf22:	2300      	movs	r3, #0
 800cf24:	e02a      	b.n	800cf7c <snmp_oid_to_ip+0x8e>
    }

    memset(ip, 0, sizeof(*ip));
 800cf26:	2204      	movs	r2, #4
 800cf28:	2100      	movs	r1, #0
 800cf2a:	6878      	ldr	r0, [r7, #4]
 800cf2c:	f013 fc8e 	bl	802084c <memset>
    IP_SET_TYPE(ip, IPADDR_TYPE_ANY);

    return 2;
 800cf30:	2302      	movs	r3, #2
 800cf32:	e023      	b.n	800cf7c <snmp_oid_to_ip+0x8e>
  } else if (oid[0] == 1) { /* ipv4 */
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	2b01      	cmp	r3, #1
 800cf3a:	d118      	bne.n	800cf6e <snmp_oid_to_ip+0x80>
#if LWIP_IPV4
    /* 1x InetAddressType, 1x OID len, 4x InetAddressIPv4 */
    if (oid_len < 6) {
 800cf3c:	7afb      	ldrb	r3, [r7, #11]
 800cf3e:	2b05      	cmp	r3, #5
 800cf40:	d801      	bhi.n	800cf46 <snmp_oid_to_ip+0x58>
      return 0;
 800cf42:	2300      	movs	r3, #0
 800cf44:	e01a      	b.n	800cf7c <snmp_oid_to_ip+0x8e>
    }

    /* 4x ipv4 OID */
    if (oid[1] != 4) {
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	3304      	adds	r3, #4
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	2b04      	cmp	r3, #4
 800cf4e:	d001      	beq.n	800cf54 <snmp_oid_to_ip+0x66>
      return 0;
 800cf50:	2300      	movs	r3, #0
 800cf52:	e013      	b.n	800cf7c <snmp_oid_to_ip+0x8e>
    }

    IP_SET_TYPE(ip, IPADDR_TYPE_V4);
    if (!snmp_oid_to_ip4(&oid[2], ip_2_ip4(ip))) {
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	3308      	adds	r3, #8
 800cf58:	6879      	ldr	r1, [r7, #4]
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f7ff feec 	bl	800cd38 <snmp_oid_to_ip4>
 800cf60:	4603      	mov	r3, r0
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d101      	bne.n	800cf6a <snmp_oid_to_ip+0x7c>
      return 0;
 800cf66:	2300      	movs	r3, #0
 800cf68:	e008      	b.n	800cf7c <snmp_oid_to_ip+0x8e>
    }

    return 6;
 800cf6a:	2306      	movs	r3, #6
 800cf6c:	e006      	b.n	800cf7c <snmp_oid_to_ip+0x8e>
#else /* LWIP_IPV4 */
    return 0;
#endif /* LWIP_IPV4 */
  } else if (oid[0] == 2) { /* ipv6 */
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	2b02      	cmp	r3, #2
 800cf74:	d101      	bne.n	800cf7a <snmp_oid_to_ip+0x8c>
      return 0;
    }

    return 18;
#else /* LWIP_IPV6 */
    return 0;
 800cf76:	2300      	movs	r3, #0
 800cf78:	e000      	b.n	800cf7c <snmp_oid_to_ip+0x8e>
#endif /* LWIP_IPV6 */
  } else { /* unsupported InetAddressType */
    return 0;
 800cf7a:	2300      	movs	r3, #0
  }
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	3710      	adds	r7, #16
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}

0800cf84 <snmp_oid_to_ip_port>:
 * @param port Port
 * @return Parsed OID length
 */
u8_t
snmp_oid_to_ip_port(const u32_t *oid, u8_t oid_len, ip_addr_t *ip, u16_t *port)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b086      	sub	sp, #24
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	60f8      	str	r0, [r7, #12]
 800cf8c:	607a      	str	r2, [r7, #4]
 800cf8e:	603b      	str	r3, [r7, #0]
 800cf90:	460b      	mov	r3, r1
 800cf92:	72fb      	strb	r3, [r7, #11]
  u8_t idx = 0;
 800cf94:	2300      	movs	r3, #0
 800cf96:	75fb      	strb	r3, [r7, #23]

  /* InetAddressType + InetAddress */
  idx += snmp_oid_to_ip(&oid[idx], oid_len-idx, ip);
 800cf98:	7dfb      	ldrb	r3, [r7, #23]
 800cf9a:	009b      	lsls	r3, r3, #2
 800cf9c:	68fa      	ldr	r2, [r7, #12]
 800cf9e:	18d0      	adds	r0, r2, r3
 800cfa0:	7afa      	ldrb	r2, [r7, #11]
 800cfa2:	7dfb      	ldrb	r3, [r7, #23]
 800cfa4:	1ad3      	subs	r3, r2, r3
 800cfa6:	b2db      	uxtb	r3, r3
 800cfa8:	687a      	ldr	r2, [r7, #4]
 800cfaa:	4619      	mov	r1, r3
 800cfac:	f7ff ff9f 	bl	800ceee <snmp_oid_to_ip>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	461a      	mov	r2, r3
 800cfb4:	7dfb      	ldrb	r3, [r7, #23]
 800cfb6:	4413      	add	r3, r2
 800cfb8:	75fb      	strb	r3, [r7, #23]
  if (idx == 0) {
 800cfba:	7dfb      	ldrb	r3, [r7, #23]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d101      	bne.n	800cfc4 <snmp_oid_to_ip_port+0x40>
    return 0;
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	e01b      	b.n	800cffc <snmp_oid_to_ip_port+0x78>
  }

  /* InetPortNumber */
  if (oid_len < (idx+1)) {
 800cfc4:	7dfa      	ldrb	r2, [r7, #23]
 800cfc6:	7afb      	ldrb	r3, [r7, #11]
 800cfc8:	429a      	cmp	r2, r3
 800cfca:	d301      	bcc.n	800cfd0 <snmp_oid_to_ip_port+0x4c>
    return 0;
 800cfcc:	2300      	movs	r3, #0
 800cfce:	e015      	b.n	800cffc <snmp_oid_to_ip_port+0x78>
  }
  if (oid[idx] > 0xffff) {
 800cfd0:	7dfb      	ldrb	r3, [r7, #23]
 800cfd2:	009b      	lsls	r3, r3, #2
 800cfd4:	68fa      	ldr	r2, [r7, #12]
 800cfd6:	4413      	add	r3, r2
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cfde:	d301      	bcc.n	800cfe4 <snmp_oid_to_ip_port+0x60>
    return 0;
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	e00b      	b.n	800cffc <snmp_oid_to_ip_port+0x78>
  }
  *port = (u16_t)oid[idx];
 800cfe4:	7dfb      	ldrb	r3, [r7, #23]
 800cfe6:	009b      	lsls	r3, r3, #2
 800cfe8:	68fa      	ldr	r2, [r7, #12]
 800cfea:	4413      	add	r3, r2
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	b29a      	uxth	r2, r3
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	801a      	strh	r2, [r3, #0]
  idx++;
 800cff4:	7dfb      	ldrb	r3, [r7, #23]
 800cff6:	3301      	adds	r3, #1
 800cff8:	75fb      	strb	r3, [r7, #23]

  return idx;
 800cffa:	7dfb      	ldrb	r3, [r7, #23]
}
 800cffc:	4618      	mov	r0, r3
 800cffe:	3718      	adds	r7, #24
 800d000:	46bd      	mov	sp, r7
 800d002:	bd80      	pop	{r7, pc}

0800d004 <snmp_oid_assign>:
 * @param oid OID
 * @param oid_len OID length
 */
void
snmp_oid_assign(struct snmp_obj_id* target, const u32_t *oid, u8_t oid_len)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b084      	sub	sp, #16
 800d008:	af00      	add	r7, sp, #0
 800d00a:	60f8      	str	r0, [r7, #12]
 800d00c:	60b9      	str	r1, [r7, #8]
 800d00e:	4613      	mov	r3, r2
 800d010:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("oid_len <= LWIP_SNMP_OBJ_ID_LEN", oid_len <= SNMP_MAX_OBJ_ID_LEN);
 800d012:	79fb      	ldrb	r3, [r7, #7]
 800d014:	2b32      	cmp	r3, #50	@ 0x32
 800d016:	d906      	bls.n	800d026 <snmp_oid_assign+0x22>
 800d018:	4b0c      	ldr	r3, [pc, #48]	@ (800d04c <snmp_oid_assign+0x48>)
 800d01a:	f240 2213 	movw	r2, #531	@ 0x213
 800d01e:	490c      	ldr	r1, [pc, #48]	@ (800d050 <snmp_oid_assign+0x4c>)
 800d020:	480c      	ldr	r0, [pc, #48]	@ (800d054 <snmp_oid_assign+0x50>)
 800d022:	f013 fa3d 	bl	80204a0 <iprintf>

  target->len = oid_len;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	79fa      	ldrb	r2, [r7, #7]
 800d02a:	701a      	strb	r2, [r3, #0]

  if (oid_len > 0) {
 800d02c:	79fb      	ldrb	r3, [r7, #7]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d007      	beq.n	800d042 <snmp_oid_assign+0x3e>
    MEMCPY(target->id, oid, oid_len * sizeof(u32_t));
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	1d18      	adds	r0, r3, #4
 800d036:	79fb      	ldrb	r3, [r7, #7]
 800d038:	009b      	lsls	r3, r3, #2
 800d03a:	461a      	mov	r2, r3
 800d03c:	68b9      	ldr	r1, [r7, #8]
 800d03e:	f013 fcc4 	bl	80209ca <memcpy>
  }
}
 800d042:	bf00      	nop
 800d044:	3710      	adds	r7, #16
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}
 800d04a:	bf00      	nop
 800d04c:	080238c4 	.word	0x080238c4
 800d050:	08023968 	.word	0x08023968
 800d054:	08023920 	.word	0x08023920

0800d058 <snmp_oid_append>:
 * @param oid OID
 * @param oid_len OID length
 */
void
snmp_oid_append(struct snmp_obj_id* target, const u32_t *oid, u8_t oid_len)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b084      	sub	sp, #16
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	60f8      	str	r0, [r7, #12]
 800d060:	60b9      	str	r1, [r7, #8]
 800d062:	4613      	mov	r3, r2
 800d064:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("offset + oid_len <= LWIP_SNMP_OBJ_ID_LEN", (target->len + oid_len) <= SNMP_MAX_OBJ_ID_LEN);
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	781b      	ldrb	r3, [r3, #0]
 800d06a:	461a      	mov	r2, r3
 800d06c:	79fb      	ldrb	r3, [r7, #7]
 800d06e:	4413      	add	r3, r2
 800d070:	2b32      	cmp	r3, #50	@ 0x32
 800d072:	dd06      	ble.n	800d082 <snmp_oid_append+0x2a>
 800d074:	4b10      	ldr	r3, [pc, #64]	@ (800d0b8 <snmp_oid_append+0x60>)
 800d076:	f240 224b 	movw	r2, #587	@ 0x24b
 800d07a:	4910      	ldr	r1, [pc, #64]	@ (800d0bc <snmp_oid_append+0x64>)
 800d07c:	4810      	ldr	r0, [pc, #64]	@ (800d0c0 <snmp_oid_append+0x68>)
 800d07e:	f013 fa0f 	bl	80204a0 <iprintf>

  if (oid_len > 0) {
 800d082:	79fb      	ldrb	r3, [r7, #7]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d012      	beq.n	800d0ae <snmp_oid_append+0x56>
    MEMCPY(&target->id[target->len], oid, oid_len * sizeof(u32_t));
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	781b      	ldrb	r3, [r3, #0]
 800d08c:	009b      	lsls	r3, r3, #2
 800d08e:	68fa      	ldr	r2, [r7, #12]
 800d090:	4413      	add	r3, r2
 800d092:	1d18      	adds	r0, r3, #4
 800d094:	79fb      	ldrb	r3, [r7, #7]
 800d096:	009b      	lsls	r3, r3, #2
 800d098:	461a      	mov	r2, r3
 800d09a:	68b9      	ldr	r1, [r7, #8]
 800d09c:	f013 fc95 	bl	80209ca <memcpy>
    target->len += oid_len;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	781a      	ldrb	r2, [r3, #0]
 800d0a4:	79fb      	ldrb	r3, [r7, #7]
 800d0a6:	4413      	add	r3, r2
 800d0a8:	b2da      	uxtb	r2, r3
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	701a      	strb	r2, [r3, #0]
  }
}
 800d0ae:	bf00      	nop
 800d0b0:	3710      	adds	r7, #16
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	bd80      	pop	{r7, pc}
 800d0b6:	bf00      	nop
 800d0b8:	080238c4 	.word	0x080238c4
 800d0bc:	080239b8 	.word	0x080239b8
 800d0c0:	08023920 	.word	0x08023920

0800d0c4 <snmp_oid_compare>:
 * @param oid2_len OID 2 length
 * @return -1: OID1&lt;OID2  1: OID1 &gt;OID2 0: equal
 */
s8_t
snmp_oid_compare(const u32_t *oid1, u8_t oid1_len, const u32_t *oid2, u8_t oid2_len)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b086      	sub	sp, #24
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	60f8      	str	r0, [r7, #12]
 800d0cc:	607a      	str	r2, [r7, #4]
 800d0ce:	461a      	mov	r2, r3
 800d0d0:	460b      	mov	r3, r1
 800d0d2:	72fb      	strb	r3, [r7, #11]
 800d0d4:	4613      	mov	r3, r2
 800d0d6:	72bb      	strb	r3, [r7, #10]
  u8_t level = 0;
 800d0d8:	2300      	movs	r3, #0
 800d0da:	75fb      	strb	r3, [r7, #23]
  LWIP_ASSERT("'oid1' param must not be NULL or 'oid1_len' param be 0!", (oid1 != NULL) || (oid1_len == 0));
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d109      	bne.n	800d0f6 <snmp_oid_compare+0x32>
 800d0e2:	7afb      	ldrb	r3, [r7, #11]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d006      	beq.n	800d0f6 <snmp_oid_compare+0x32>
 800d0e8:	4b24      	ldr	r3, [pc, #144]	@ (800d17c <snmp_oid_compare+0xb8>)
 800d0ea:	f240 225f 	movw	r2, #607	@ 0x25f
 800d0ee:	4924      	ldr	r1, [pc, #144]	@ (800d180 <snmp_oid_compare+0xbc>)
 800d0f0:	4824      	ldr	r0, [pc, #144]	@ (800d184 <snmp_oid_compare+0xc0>)
 800d0f2:	f013 f9d5 	bl	80204a0 <iprintf>
  LWIP_ASSERT("'oid2' param must not be NULL or 'oid2_len' param be 0!", (oid2 != NULL) || (oid2_len == 0));
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d124      	bne.n	800d146 <snmp_oid_compare+0x82>
 800d0fc:	7abb      	ldrb	r3, [r7, #10]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d021      	beq.n	800d146 <snmp_oid_compare+0x82>
 800d102:	4b1e      	ldr	r3, [pc, #120]	@ (800d17c <snmp_oid_compare+0xb8>)
 800d104:	f44f 7218 	mov.w	r2, #608	@ 0x260
 800d108:	491f      	ldr	r1, [pc, #124]	@ (800d188 <snmp_oid_compare+0xc4>)
 800d10a:	481e      	ldr	r0, [pc, #120]	@ (800d184 <snmp_oid_compare+0xc0>)
 800d10c:	f013 f9c8 	bl	80204a0 <iprintf>

  while ((level < oid1_len) && (level < oid2_len)) {
 800d110:	e019      	b.n	800d146 <snmp_oid_compare+0x82>
    if (*oid1 < *oid2) {
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	681a      	ldr	r2, [r3, #0]
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	429a      	cmp	r2, r3
 800d11c:	d202      	bcs.n	800d124 <snmp_oid_compare+0x60>
      return -1;
 800d11e:	f04f 33ff 	mov.w	r3, #4294967295
 800d122:	e026      	b.n	800d172 <snmp_oid_compare+0xae>
    }
    if (*oid1 > *oid2) {
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	681a      	ldr	r2, [r3, #0]
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	429a      	cmp	r2, r3
 800d12e:	d901      	bls.n	800d134 <snmp_oid_compare+0x70>
      return 1;
 800d130:	2301      	movs	r3, #1
 800d132:	e01e      	b.n	800d172 <snmp_oid_compare+0xae>
    }

    level++;
 800d134:	7dfb      	ldrb	r3, [r7, #23]
 800d136:	3301      	adds	r3, #1
 800d138:	75fb      	strb	r3, [r7, #23]
    oid1++;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	3304      	adds	r3, #4
 800d13e:	60fb      	str	r3, [r7, #12]
    oid2++;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	3304      	adds	r3, #4
 800d144:	607b      	str	r3, [r7, #4]
  while ((level < oid1_len) && (level < oid2_len)) {
 800d146:	7dfa      	ldrb	r2, [r7, #23]
 800d148:	7afb      	ldrb	r3, [r7, #11]
 800d14a:	429a      	cmp	r2, r3
 800d14c:	d203      	bcs.n	800d156 <snmp_oid_compare+0x92>
 800d14e:	7dfa      	ldrb	r2, [r7, #23]
 800d150:	7abb      	ldrb	r3, [r7, #10]
 800d152:	429a      	cmp	r2, r3
 800d154:	d3dd      	bcc.n	800d112 <snmp_oid_compare+0x4e>
  }

  /* common part of both OID's is equal, compare length */
  if (oid1_len < oid2_len) {
 800d156:	7afa      	ldrb	r2, [r7, #11]
 800d158:	7abb      	ldrb	r3, [r7, #10]
 800d15a:	429a      	cmp	r2, r3
 800d15c:	d202      	bcs.n	800d164 <snmp_oid_compare+0xa0>
    return -1;
 800d15e:	f04f 33ff 	mov.w	r3, #4294967295
 800d162:	e006      	b.n	800d172 <snmp_oid_compare+0xae>
  }
  if (oid1_len > oid2_len) {
 800d164:	7afa      	ldrb	r2, [r7, #11]
 800d166:	7abb      	ldrb	r3, [r7, #10]
 800d168:	429a      	cmp	r2, r3
 800d16a:	d901      	bls.n	800d170 <snmp_oid_compare+0xac>
    return 1;
 800d16c:	2301      	movs	r3, #1
 800d16e:	e000      	b.n	800d172 <snmp_oid_compare+0xae>
  }

  /* they are equal */
  return 0;
 800d170:	2300      	movs	r3, #0
}
 800d172:	4618      	mov	r0, r3
 800d174:	3718      	adds	r7, #24
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}
 800d17a:	bf00      	nop
 800d17c:	080238c4 	.word	0x080238c4
 800d180:	080239e4 	.word	0x080239e4
 800d184:	08023920 	.word	0x08023920
 800d188:	08023a1c 	.word	0x08023a1c

0800d18c <netif_to_num>:
 * @param netif netif
 * @return index
 */
u8_t
netif_to_num(const struct netif *netif)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b084      	sub	sp, #16
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
  u8_t result = 0;
 800d194:	2300      	movs	r3, #0
 800d196:	73fb      	strb	r3, [r7, #15]
  struct netif *netif_iterator = netif_list;
 800d198:	4b0f      	ldr	r3, [pc, #60]	@ (800d1d8 <netif_to_num+0x4c>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	60bb      	str	r3, [r7, #8]

  while (netif_iterator != NULL) {
 800d19e:	e00b      	b.n	800d1b8 <netif_to_num+0x2c>
    result++;
 800d1a0:	7bfb      	ldrb	r3, [r7, #15]
 800d1a2:	3301      	adds	r3, #1
 800d1a4:	73fb      	strb	r3, [r7, #15]

    if (netif_iterator == netif) {
 800d1a6:	68ba      	ldr	r2, [r7, #8]
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	429a      	cmp	r2, r3
 800d1ac:	d101      	bne.n	800d1b2 <netif_to_num+0x26>
      return result;
 800d1ae:	7bfb      	ldrb	r3, [r7, #15]
 800d1b0:	e00d      	b.n	800d1ce <netif_to_num+0x42>
    }

    netif_iterator = netif_iterator->next;
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	60bb      	str	r3, [r7, #8]
  while (netif_iterator != NULL) {
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d1f0      	bne.n	800d1a0 <netif_to_num+0x14>
  }

  LWIP_ASSERT("netif not found in netif_list", 0);
 800d1be:	4b07      	ldr	r3, [pc, #28]	@ (800d1dc <netif_to_num+0x50>)
 800d1c0:	f240 229f 	movw	r2, #671	@ 0x29f
 800d1c4:	4906      	ldr	r1, [pc, #24]	@ (800d1e0 <netif_to_num+0x54>)
 800d1c6:	4807      	ldr	r0, [pc, #28]	@ (800d1e4 <netif_to_num+0x58>)
 800d1c8:	f013 f96a 	bl	80204a0 <iprintf>
  return 0;
 800d1cc:	2300      	movs	r3, #0
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	3710      	adds	r7, #16
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}
 800d1d6:	bf00      	nop
 800d1d8:	2000db78 	.word	0x2000db78
 800d1dc:	080238c4 	.word	0x080238c4
 800d1e0:	08023a54 	.word	0x08023a54
 800d1e4:	08023920 	.word	0x08023920

0800d1e8 <snmp_get_mib_from_oid>:

static const struct snmp_mib*
snmp_get_mib_from_oid(const u32_t *oid, u8_t oid_len)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b086      	sub	sp, #24
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
 800d1f0:	460b      	mov	r3, r1
 800d1f2:	70fb      	strb	r3, [r7, #3]
  const u32_t* list_oid;
  const u32_t* searched_oid;
  u8_t i, l;

  u8_t max_match_len = 0;
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	737b      	strb	r3, [r7, #13]
  const struct snmp_mib* matched_mib = NULL;
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	60bb      	str	r3, [r7, #8]

  LWIP_ASSERT("'oid' param must not be NULL!", (oid != NULL));
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d106      	bne.n	800d210 <snmp_get_mib_from_oid+0x28>
 800d202:	4b44      	ldr	r3, [pc, #272]	@ (800d314 <snmp_get_mib_from_oid+0x12c>)
 800d204:	f240 22ad 	movw	r2, #685	@ 0x2ad
 800d208:	4943      	ldr	r1, [pc, #268]	@ (800d318 <snmp_get_mib_from_oid+0x130>)
 800d20a:	4844      	ldr	r0, [pc, #272]	@ (800d31c <snmp_get_mib_from_oid+0x134>)
 800d20c:	f013 f948 	bl	80204a0 <iprintf>

  if (oid_len == 0) {
 800d210:	78fb      	ldrb	r3, [r7, #3]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d101      	bne.n	800d21a <snmp_get_mib_from_oid+0x32>
    return NULL;
 800d216:	2300      	movs	r3, #0
 800d218:	e077      	b.n	800d30a <snmp_get_mib_from_oid+0x122>
  }

  for (i = 0; i < snmp_num_mibs; i++) {
 800d21a:	2300      	movs	r3, #0
 800d21c:	73fb      	strb	r3, [r7, #15]
 800d21e:	e06e      	b.n	800d2fe <snmp_get_mib_from_oid+0x116>
    LWIP_ASSERT("MIB array not initialized correctly", (snmp_mibs[i] != NULL));
 800d220:	4b3f      	ldr	r3, [pc, #252]	@ (800d320 <snmp_get_mib_from_oid+0x138>)
 800d222:	681a      	ldr	r2, [r3, #0]
 800d224:	7bfb      	ldrb	r3, [r7, #15]
 800d226:	009b      	lsls	r3, r3, #2
 800d228:	4413      	add	r3, r2
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d106      	bne.n	800d23e <snmp_get_mib_from_oid+0x56>
 800d230:	4b38      	ldr	r3, [pc, #224]	@ (800d314 <snmp_get_mib_from_oid+0x12c>)
 800d232:	f44f 722d 	mov.w	r2, #692	@ 0x2b4
 800d236:	493b      	ldr	r1, [pc, #236]	@ (800d324 <snmp_get_mib_from_oid+0x13c>)
 800d238:	4838      	ldr	r0, [pc, #224]	@ (800d31c <snmp_get_mib_from_oid+0x134>)
 800d23a:	f013 f931 	bl	80204a0 <iprintf>
    LWIP_ASSERT("MIB array not initialized correctly - base OID is NULL", (snmp_mibs[i]->base_oid != NULL));
 800d23e:	4b38      	ldr	r3, [pc, #224]	@ (800d320 <snmp_get_mib_from_oid+0x138>)
 800d240:	681a      	ldr	r2, [r3, #0]
 800d242:	7bfb      	ldrb	r3, [r7, #15]
 800d244:	009b      	lsls	r3, r3, #2
 800d246:	4413      	add	r3, r2
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d106      	bne.n	800d25e <snmp_get_mib_from_oid+0x76>
 800d250:	4b30      	ldr	r3, [pc, #192]	@ (800d314 <snmp_get_mib_from_oid+0x12c>)
 800d252:	f240 22b5 	movw	r2, #693	@ 0x2b5
 800d256:	4934      	ldr	r1, [pc, #208]	@ (800d328 <snmp_get_mib_from_oid+0x140>)
 800d258:	4830      	ldr	r0, [pc, #192]	@ (800d31c <snmp_get_mib_from_oid+0x134>)
 800d25a:	f013 f921 	bl	80204a0 <iprintf>

    if (oid_len >= snmp_mibs[i]->base_oid_len) {
 800d25e:	4b30      	ldr	r3, [pc, #192]	@ (800d320 <snmp_get_mib_from_oid+0x138>)
 800d260:	681a      	ldr	r2, [r3, #0]
 800d262:	7bfb      	ldrb	r3, [r7, #15]
 800d264:	009b      	lsls	r3, r3, #2
 800d266:	4413      	add	r3, r2
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	791b      	ldrb	r3, [r3, #4]
 800d26c:	78fa      	ldrb	r2, [r7, #3]
 800d26e:	429a      	cmp	r2, r3
 800d270:	d342      	bcc.n	800d2f8 <snmp_get_mib_from_oid+0x110>
      l            = snmp_mibs[i]->base_oid_len;
 800d272:	4b2b      	ldr	r3, [pc, #172]	@ (800d320 <snmp_get_mib_from_oid+0x138>)
 800d274:	681a      	ldr	r2, [r3, #0]
 800d276:	7bfb      	ldrb	r3, [r7, #15]
 800d278:	009b      	lsls	r3, r3, #2
 800d27a:	4413      	add	r3, r2
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	791b      	ldrb	r3, [r3, #4]
 800d280:	73bb      	strb	r3, [r7, #14]
      list_oid     = snmp_mibs[i]->base_oid;
 800d282:	4b27      	ldr	r3, [pc, #156]	@ (800d320 <snmp_get_mib_from_oid+0x138>)
 800d284:	681a      	ldr	r2, [r3, #0]
 800d286:	7bfb      	ldrb	r3, [r7, #15]
 800d288:	009b      	lsls	r3, r3, #2
 800d28a:	4413      	add	r3, r2
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	617b      	str	r3, [r7, #20]
      searched_oid = oid;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	613b      	str	r3, [r7, #16]

      while (l > 0) {
 800d296:	e00e      	b.n	800d2b6 <snmp_get_mib_from_oid+0xce>
        if (*list_oid != *searched_oid) {
 800d298:	697b      	ldr	r3, [r7, #20]
 800d29a:	681a      	ldr	r2, [r3, #0]
 800d29c:	693b      	ldr	r3, [r7, #16]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	429a      	cmp	r2, r3
 800d2a2:	d10c      	bne.n	800d2be <snmp_get_mib_from_oid+0xd6>
          break;
        }

        l--;
 800d2a4:	7bbb      	ldrb	r3, [r7, #14]
 800d2a6:	3b01      	subs	r3, #1
 800d2a8:	73bb      	strb	r3, [r7, #14]
        list_oid++;
 800d2aa:	697b      	ldr	r3, [r7, #20]
 800d2ac:	3304      	adds	r3, #4
 800d2ae:	617b      	str	r3, [r7, #20]
        searched_oid++;
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	3304      	adds	r3, #4
 800d2b4:	613b      	str	r3, [r7, #16]
      while (l > 0) {
 800d2b6:	7bbb      	ldrb	r3, [r7, #14]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d1ed      	bne.n	800d298 <snmp_get_mib_from_oid+0xb0>
 800d2bc:	e000      	b.n	800d2c0 <snmp_get_mib_from_oid+0xd8>
          break;
 800d2be:	bf00      	nop
      }

      if ((l == 0) && (snmp_mibs[i]->base_oid_len > max_match_len)) {
 800d2c0:	7bbb      	ldrb	r3, [r7, #14]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d118      	bne.n	800d2f8 <snmp_get_mib_from_oid+0x110>
 800d2c6:	4b16      	ldr	r3, [pc, #88]	@ (800d320 <snmp_get_mib_from_oid+0x138>)
 800d2c8:	681a      	ldr	r2, [r3, #0]
 800d2ca:	7bfb      	ldrb	r3, [r7, #15]
 800d2cc:	009b      	lsls	r3, r3, #2
 800d2ce:	4413      	add	r3, r2
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	791b      	ldrb	r3, [r3, #4]
 800d2d4:	7b7a      	ldrb	r2, [r7, #13]
 800d2d6:	429a      	cmp	r2, r3
 800d2d8:	d20e      	bcs.n	800d2f8 <snmp_get_mib_from_oid+0x110>
        max_match_len = snmp_mibs[i]->base_oid_len;
 800d2da:	4b11      	ldr	r3, [pc, #68]	@ (800d320 <snmp_get_mib_from_oid+0x138>)
 800d2dc:	681a      	ldr	r2, [r3, #0]
 800d2de:	7bfb      	ldrb	r3, [r7, #15]
 800d2e0:	009b      	lsls	r3, r3, #2
 800d2e2:	4413      	add	r3, r2
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	791b      	ldrb	r3, [r3, #4]
 800d2e8:	737b      	strb	r3, [r7, #13]
        matched_mib = snmp_mibs[i];
 800d2ea:	4b0d      	ldr	r3, [pc, #52]	@ (800d320 <snmp_get_mib_from_oid+0x138>)
 800d2ec:	681a      	ldr	r2, [r3, #0]
 800d2ee:	7bfb      	ldrb	r3, [r7, #15]
 800d2f0:	009b      	lsls	r3, r3, #2
 800d2f2:	4413      	add	r3, r2
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < snmp_num_mibs; i++) {
 800d2f8:	7bfb      	ldrb	r3, [r7, #15]
 800d2fa:	3301      	adds	r3, #1
 800d2fc:	73fb      	strb	r3, [r7, #15]
 800d2fe:	4b0b      	ldr	r3, [pc, #44]	@ (800d32c <snmp_get_mib_from_oid+0x144>)
 800d300:	781b      	ldrb	r3, [r3, #0]
 800d302:	7bfa      	ldrb	r2, [r7, #15]
 800d304:	429a      	cmp	r2, r3
 800d306:	d38b      	bcc.n	800d220 <snmp_get_mib_from_oid+0x38>
      }
    }
  }

  return matched_mib;
 800d308:	68bb      	ldr	r3, [r7, #8]
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	3718      	adds	r7, #24
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}
 800d312:	bf00      	nop
 800d314:	080238c4 	.word	0x080238c4
 800d318:	08023a74 	.word	0x08023a74
 800d31c:	08023920 	.word	0x08023920
 800d320:	200000f0 	.word	0x200000f0
 800d324:	08023a94 	.word	0x08023a94
 800d328:	08023ab8 	.word	0x08023ab8
 800d32c:	200000ec 	.word	0x200000ec

0800d330 <snmp_get_next_mib>:

static const struct snmp_mib*
snmp_get_next_mib(const u32_t *oid, u8_t oid_len)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b084      	sub	sp, #16
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
 800d338:	460b      	mov	r3, r1
 800d33a:	70fb      	strb	r3, [r7, #3]
  u8_t i;
  const struct snmp_mib* next_mib = NULL;
 800d33c:	2300      	movs	r3, #0
 800d33e:	60bb      	str	r3, [r7, #8]

  LWIP_ASSERT("'oid' param must not be NULL!", (oid != NULL));
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d106      	bne.n	800d354 <snmp_get_next_mib+0x24>
 800d346:	4b2d      	ldr	r3, [pc, #180]	@ (800d3fc <snmp_get_next_mib+0xcc>)
 800d348:	f240 22d6 	movw	r2, #726	@ 0x2d6
 800d34c:	492c      	ldr	r1, [pc, #176]	@ (800d400 <snmp_get_next_mib+0xd0>)
 800d34e:	482d      	ldr	r0, [pc, #180]	@ (800d404 <snmp_get_next_mib+0xd4>)
 800d350:	f013 f8a6 	bl	80204a0 <iprintf>

  if (oid_len == 0) {
 800d354:	78fb      	ldrb	r3, [r7, #3]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d101      	bne.n	800d35e <snmp_get_next_mib+0x2e>
    return NULL;
 800d35a:	2300      	movs	r3, #0
 800d35c:	e04a      	b.n	800d3f4 <snmp_get_next_mib+0xc4>
  }

  for (i = 0; i < snmp_num_mibs; i++) {
 800d35e:	2300      	movs	r3, #0
 800d360:	73fb      	strb	r3, [r7, #15]
 800d362:	e041      	b.n	800d3e8 <snmp_get_next_mib+0xb8>
    if (snmp_mibs[i]->base_oid != NULL) {
 800d364:	4b28      	ldr	r3, [pc, #160]	@ (800d408 <snmp_get_next_mib+0xd8>)
 800d366:	681a      	ldr	r2, [r3, #0]
 800d368:	7bfb      	ldrb	r3, [r7, #15]
 800d36a:	009b      	lsls	r3, r3, #2
 800d36c:	4413      	add	r3, r2
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d035      	beq.n	800d3e2 <snmp_get_next_mib+0xb2>
      /* check if mib is located behind starting point */
      if (snmp_oid_compare(snmp_mibs[i]->base_oid, snmp_mibs[i]->base_oid_len, oid, oid_len) > 0) {
 800d376:	4b24      	ldr	r3, [pc, #144]	@ (800d408 <snmp_get_next_mib+0xd8>)
 800d378:	681a      	ldr	r2, [r3, #0]
 800d37a:	7bfb      	ldrb	r3, [r7, #15]
 800d37c:	009b      	lsls	r3, r3, #2
 800d37e:	4413      	add	r3, r2
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	6818      	ldr	r0, [r3, #0]
 800d384:	4b20      	ldr	r3, [pc, #128]	@ (800d408 <snmp_get_next_mib+0xd8>)
 800d386:	681a      	ldr	r2, [r3, #0]
 800d388:	7bfb      	ldrb	r3, [r7, #15]
 800d38a:	009b      	lsls	r3, r3, #2
 800d38c:	4413      	add	r3, r2
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	7919      	ldrb	r1, [r3, #4]
 800d392:	78fb      	ldrb	r3, [r7, #3]
 800d394:	687a      	ldr	r2, [r7, #4]
 800d396:	f7ff fe95 	bl	800d0c4 <snmp_oid_compare>
 800d39a:	4603      	mov	r3, r0
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	dd20      	ble.n	800d3e2 <snmp_get_next_mib+0xb2>
        if ((next_mib == NULL) ||
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d016      	beq.n	800d3d4 <snmp_get_next_mib+0xa4>
            (snmp_oid_compare(snmp_mibs[i]->base_oid, snmp_mibs[i]->base_oid_len,
 800d3a6:	4b18      	ldr	r3, [pc, #96]	@ (800d408 <snmp_get_next_mib+0xd8>)
 800d3a8:	681a      	ldr	r2, [r3, #0]
 800d3aa:	7bfb      	ldrb	r3, [r7, #15]
 800d3ac:	009b      	lsls	r3, r3, #2
 800d3ae:	4413      	add	r3, r2
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	6818      	ldr	r0, [r3, #0]
 800d3b4:	4b14      	ldr	r3, [pc, #80]	@ (800d408 <snmp_get_next_mib+0xd8>)
 800d3b6:	681a      	ldr	r2, [r3, #0]
 800d3b8:	7bfb      	ldrb	r3, [r7, #15]
 800d3ba:	009b      	lsls	r3, r3, #2
 800d3bc:	4413      	add	r3, r2
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	7919      	ldrb	r1, [r3, #4]
                              next_mib->base_oid, next_mib->base_oid_len) < 0)) {
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	681a      	ldr	r2, [r3, #0]
 800d3c6:	68bb      	ldr	r3, [r7, #8]
 800d3c8:	791b      	ldrb	r3, [r3, #4]
            (snmp_oid_compare(snmp_mibs[i]->base_oid, snmp_mibs[i]->base_oid_len,
 800d3ca:	f7ff fe7b 	bl	800d0c4 <snmp_oid_compare>
 800d3ce:	4603      	mov	r3, r0
        if ((next_mib == NULL) ||
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	da06      	bge.n	800d3e2 <snmp_get_next_mib+0xb2>
          next_mib = snmp_mibs[i];
 800d3d4:	4b0c      	ldr	r3, [pc, #48]	@ (800d408 <snmp_get_next_mib+0xd8>)
 800d3d6:	681a      	ldr	r2, [r3, #0]
 800d3d8:	7bfb      	ldrb	r3, [r7, #15]
 800d3da:	009b      	lsls	r3, r3, #2
 800d3dc:	4413      	add	r3, r2
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < snmp_num_mibs; i++) {
 800d3e2:	7bfb      	ldrb	r3, [r7, #15]
 800d3e4:	3301      	adds	r3, #1
 800d3e6:	73fb      	strb	r3, [r7, #15]
 800d3e8:	4b08      	ldr	r3, [pc, #32]	@ (800d40c <snmp_get_next_mib+0xdc>)
 800d3ea:	781b      	ldrb	r3, [r3, #0]
 800d3ec:	7bfa      	ldrb	r2, [r7, #15]
 800d3ee:	429a      	cmp	r2, r3
 800d3f0:	d3b8      	bcc.n	800d364 <snmp_get_next_mib+0x34>
        }
      }
    }
  }

  return next_mib;
 800d3f2:	68bb      	ldr	r3, [r7, #8]
}
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	3710      	adds	r7, #16
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}
 800d3fc:	080238c4 	.word	0x080238c4
 800d400:	08023a74 	.word	0x08023a74
 800d404:	08023920 	.word	0x08023920
 800d408:	200000f0 	.word	0x200000f0
 800d40c:	200000ec 	.word	0x200000ec

0800d410 <snmp_get_mib_between>:

static const struct snmp_mib*
snmp_get_mib_between(const u32_t *oid1, u8_t oid1_len, const u32_t *oid2, u8_t oid2_len)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b086      	sub	sp, #24
 800d414:	af00      	add	r7, sp, #0
 800d416:	60f8      	str	r0, [r7, #12]
 800d418:	607a      	str	r2, [r7, #4]
 800d41a:	461a      	mov	r2, r3
 800d41c:	460b      	mov	r3, r1
 800d41e:	72fb      	strb	r3, [r7, #11]
 800d420:	4613      	mov	r3, r2
 800d422:	72bb      	strb	r3, [r7, #10]
  const struct snmp_mib* next_mib = snmp_get_next_mib(oid1, oid1_len);
 800d424:	7afb      	ldrb	r3, [r7, #11]
 800d426:	4619      	mov	r1, r3
 800d428:	68f8      	ldr	r0, [r7, #12]
 800d42a:	f7ff ff81 	bl	800d330 <snmp_get_next_mib>
 800d42e:	6178      	str	r0, [r7, #20]

  LWIP_ASSERT("'oid2' param must not be NULL!", (oid2 != NULL));
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d106      	bne.n	800d444 <snmp_get_mib_between+0x34>
 800d436:	4b13      	ldr	r3, [pc, #76]	@ (800d484 <snmp_get_mib_between+0x74>)
 800d438:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800d43c:	4912      	ldr	r1, [pc, #72]	@ (800d488 <snmp_get_mib_between+0x78>)
 800d43e:	4813      	ldr	r0, [pc, #76]	@ (800d48c <snmp_get_mib_between+0x7c>)
 800d440:	f013 f82e 	bl	80204a0 <iprintf>
  LWIP_ASSERT("'oid2_len' param must be greater than 0!", (oid2_len > 0));
 800d444:	7abb      	ldrb	r3, [r7, #10]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d106      	bne.n	800d458 <snmp_get_mib_between+0x48>
 800d44a:	4b0e      	ldr	r3, [pc, #56]	@ (800d484 <snmp_get_mib_between+0x74>)
 800d44c:	f240 22f2 	movw	r2, #754	@ 0x2f2
 800d450:	490f      	ldr	r1, [pc, #60]	@ (800d490 <snmp_get_mib_between+0x80>)
 800d452:	480e      	ldr	r0, [pc, #56]	@ (800d48c <snmp_get_mib_between+0x7c>)
 800d454:	f013 f824 	bl	80204a0 <iprintf>

  if (next_mib != NULL) {
 800d458:	697b      	ldr	r3, [r7, #20]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d00c      	beq.n	800d478 <snmp_get_mib_between+0x68>
    if (snmp_oid_compare(next_mib->base_oid, next_mib->base_oid_len, oid2, oid2_len) < 0) {
 800d45e:	697b      	ldr	r3, [r7, #20]
 800d460:	6818      	ldr	r0, [r3, #0]
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	7919      	ldrb	r1, [r3, #4]
 800d466:	7abb      	ldrb	r3, [r7, #10]
 800d468:	687a      	ldr	r2, [r7, #4]
 800d46a:	f7ff fe2b 	bl	800d0c4 <snmp_oid_compare>
 800d46e:	4603      	mov	r3, r0
 800d470:	2b00      	cmp	r3, #0
 800d472:	da01      	bge.n	800d478 <snmp_get_mib_between+0x68>
      return next_mib;
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	e000      	b.n	800d47a <snmp_get_mib_between+0x6a>
    }
  }

  return NULL;
 800d478:	2300      	movs	r3, #0
}
 800d47a:	4618      	mov	r0, r3
 800d47c:	3718      	adds	r7, #24
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}
 800d482:	bf00      	nop
 800d484:	080238c4 	.word	0x080238c4
 800d488:	08023af0 	.word	0x08023af0
 800d48c:	08023920 	.word	0x08023920
 800d490:	08023b10 	.word	0x08023b10

0800d494 <snmp_get_node_instance_from_oid>:

u8_t
snmp_get_node_instance_from_oid(const u32_t *oid, u8_t oid_len, struct snmp_node_instance* node_instance)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b08a      	sub	sp, #40	@ 0x28
 800d498:	af00      	add	r7, sp, #0
 800d49a:	60f8      	str	r0, [r7, #12]
 800d49c:	460b      	mov	r3, r1
 800d49e:	607a      	str	r2, [r7, #4]
 800d4a0:	72fb      	strb	r3, [r7, #11]
  u8_t result = SNMP_ERR_NOSUCHOBJECT;
 800d4a2:	23f0      	movs	r3, #240	@ 0xf0
 800d4a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  const struct snmp_mib *mib;
  const struct snmp_node *mn = NULL;
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	623b      	str	r3, [r7, #32]

  mib = snmp_get_mib_from_oid(oid, oid_len);
 800d4ac:	7afb      	ldrb	r3, [r7, #11]
 800d4ae:	4619      	mov	r1, r3
 800d4b0:	68f8      	ldr	r0, [r7, #12]
 800d4b2:	f7ff fe99 	bl	800d1e8 <snmp_get_mib_from_oid>
 800d4b6:	61f8      	str	r0, [r7, #28]
  if (mib != NULL) {
 800d4b8:	69fb      	ldr	r3, [r7, #28]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d02b      	beq.n	800d516 <snmp_get_node_instance_from_oid+0x82>
    u8_t oid_instance_len;

    mn = snmp_mib_tree_resolve_exact(mib, oid, oid_len, &oid_instance_len);
 800d4be:	f107 0317 	add.w	r3, r7, #23
 800d4c2:	7afa      	ldrb	r2, [r7, #11]
 800d4c4:	68f9      	ldr	r1, [r7, #12]
 800d4c6:	69f8      	ldr	r0, [r7, #28]
 800d4c8:	f000 f981 	bl	800d7ce <snmp_mib_tree_resolve_exact>
 800d4cc:	6238      	str	r0, [r7, #32]
    if ((mn != NULL) && (mn->node_type != SNMP_NODE_TREE)) {
 800d4ce:	6a3b      	ldr	r3, [r7, #32]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d020      	beq.n	800d516 <snmp_get_node_instance_from_oid+0x82>
 800d4d4:	6a3b      	ldr	r3, [r7, #32]
 800d4d6:	781b      	ldrb	r3, [r3, #0]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d01c      	beq.n	800d516 <snmp_get_node_instance_from_oid+0x82>
      /* get instance */
      const struct snmp_leaf_node* leaf_node = (const struct snmp_leaf_node*)(const void*)mn;
 800d4dc:	6a3b      	ldr	r3, [r7, #32]
 800d4de:	61bb      	str	r3, [r7, #24]

      node_instance->node = mn;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	6a3a      	ldr	r2, [r7, #32]
 800d4e4:	601a      	str	r2, [r3, #0]
      snmp_oid_assign(&node_instance->instance_oid, oid + (oid_len - oid_instance_len), oid_instance_len);
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	1d18      	adds	r0, r3, #4
 800d4ea:	7afb      	ldrb	r3, [r7, #11]
 800d4ec:	7dfa      	ldrb	r2, [r7, #23]
 800d4ee:	1a9b      	subs	r3, r3, r2
 800d4f0:	009b      	lsls	r3, r3, #2
 800d4f2:	68fa      	ldr	r2, [r7, #12]
 800d4f4:	4413      	add	r3, r2
 800d4f6:	7dfa      	ldrb	r2, [r7, #23]
 800d4f8:	4619      	mov	r1, r3
 800d4fa:	f7ff fd83 	bl	800d004 <snmp_oid_assign>

      result = leaf_node->get_instance(
 800d4fe:	69bb      	ldr	r3, [r7, #24]
 800d500:	689b      	ldr	r3, [r3, #8]
 800d502:	7dfa      	ldrb	r2, [r7, #23]
 800d504:	7af9      	ldrb	r1, [r7, #11]
 800d506:	1a8a      	subs	r2, r1, r2
 800d508:	b2d1      	uxtb	r1, r2
 800d50a:	687a      	ldr	r2, [r7, #4]
 800d50c:	68f8      	ldr	r0, [r7, #12]
 800d50e:	4798      	blx	r3
 800d510:	4603      	mov	r3, r0
 800d512:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
#endif
    }
  }

  return result;
 800d516:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d51a:	4618      	mov	r0, r3
 800d51c:	3728      	adds	r7, #40	@ 0x28
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}

0800d522 <snmp_get_next_node_instance_from_oid>:

u8_t
snmp_get_next_node_instance_from_oid(const u32_t *oid, u8_t oid_len, snmp_validate_node_instance_method validate_node_instance_method, void* validate_node_instance_arg, struct snmp_obj_id* node_oid, struct snmp_node_instance* node_instance)
{
 800d522:	b580      	push	{r7, lr}
 800d524:	b08c      	sub	sp, #48	@ 0x30
 800d526:	af00      	add	r7, sp, #0
 800d528:	60f8      	str	r0, [r7, #12]
 800d52a:	607a      	str	r2, [r7, #4]
 800d52c:	603b      	str	r3, [r7, #0]
 800d52e:	460b      	mov	r3, r1
 800d530:	72fb      	strb	r3, [r7, #11]
  const struct snmp_mib      *mib;
  const struct snmp_node *mn = NULL;
 800d532:	2300      	movs	r3, #0
 800d534:	62bb      	str	r3, [r7, #40]	@ 0x28
  const u32_t* start_oid     = NULL;
 800d536:	2300      	movs	r3, #0
 800d538:	627b      	str	r3, [r7, #36]	@ 0x24
  u8_t         start_oid_len = 0;
 800d53a:	2300      	movs	r3, #0
 800d53c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* resolve target MIB from passed OID */
  mib = snmp_get_mib_from_oid(oid, oid_len);
 800d540:	7afb      	ldrb	r3, [r7, #11]
 800d542:	4619      	mov	r1, r3
 800d544:	68f8      	ldr	r0, [r7, #12]
 800d546:	f7ff fe4f 	bl	800d1e8 <snmp_get_mib_from_oid>
 800d54a:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (mib == NULL) {
 800d54c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d111      	bne.n	800d576 <snmp_get_next_node_instance_from_oid+0x54>
    /* passed OID does not reference any known MIB, start at the next closest MIB */
    mib = snmp_get_next_mib(oid, oid_len);
 800d552:	7afb      	ldrb	r3, [r7, #11]
 800d554:	4619      	mov	r1, r3
 800d556:	68f8      	ldr	r0, [r7, #12]
 800d558:	f7ff feea 	bl	800d330 <snmp_get_next_mib>
 800d55c:	62f8      	str	r0, [r7, #44]	@ 0x2c

    if (mib != NULL) {
 800d55e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d560:	2b00      	cmp	r3, #0
 800d562:	f000 8123 	beq.w	800d7ac <snmp_get_next_node_instance_from_oid+0x28a>
      start_oid     = mib->base_oid;
 800d566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	627b      	str	r3, [r7, #36]	@ 0x24
      start_oid_len = mib->base_oid_len;
 800d56c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d56e:	791b      	ldrb	r3, [r3, #4]
 800d570:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d574:	e11a      	b.n	800d7ac <snmp_get_next_node_instance_from_oid+0x28a>
    }
  } else {
    start_oid     = oid;
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	627b      	str	r3, [r7, #36]	@ 0x24
    start_oid_len = oid_len;
 800d57a:	7afb      	ldrb	r3, [r7, #11]
 800d57c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  }

  /* resolve target node from MIB, skip to next MIB if no suitable node is found in current MIB */
  while ((mib != NULL) && (mn == NULL)) {
 800d580:	e114      	b.n	800d7ac <snmp_get_next_node_instance_from_oid+0x28a>
    u8_t oid_instance_len;

    /* check if OID directly references a node inside current MIB, in this case we have to ask this node for the next instance */
    mn = snmp_mib_tree_resolve_exact(mib, start_oid, start_oid_len, &oid_instance_len);
 800d582:	f107 0317 	add.w	r3, r7, #23
 800d586:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800d58a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d58c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d58e:	f000 f91e 	bl	800d7ce <snmp_mib_tree_resolve_exact>
 800d592:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (mn != NULL) {
 800d594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d596:	2b00      	cmp	r3, #0
 800d598:	d017      	beq.n	800d5ca <snmp_get_next_node_instance_from_oid+0xa8>
      snmp_oid_assign(node_oid, start_oid, start_oid_len - oid_instance_len); /* set oid to node */
 800d59a:	7dfb      	ldrb	r3, [r7, #23]
 800d59c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800d5a0:	1ad3      	subs	r3, r2, r3
 800d5a2:	b2db      	uxtb	r3, r3
 800d5a4:	461a      	mov	r2, r3
 800d5a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d5a8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d5aa:	f7ff fd2b 	bl	800d004 <snmp_oid_assign>
      snmp_oid_assign(&node_instance->instance_oid, start_oid + (start_oid_len - oid_instance_len), oid_instance_len); /* set (relative) instance oid */
 800d5ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5b0:	1d18      	adds	r0, r3, #4
 800d5b2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d5b6:	7dfa      	ldrb	r2, [r7, #23]
 800d5b8:	1a9b      	subs	r3, r3, r2
 800d5ba:	009b      	lsls	r3, r3, #2
 800d5bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d5be:	4413      	add	r3, r2
 800d5c0:	7dfa      	ldrb	r2, [r7, #23]
 800d5c2:	4619      	mov	r1, r3
 800d5c4:	f7ff fd1e 	bl	800d004 <snmp_oid_assign>
 800d5c8:	e00a      	b.n	800d5e0 <snmp_get_next_node_instance_from_oid+0xbe>
    } else {
      /* OID does not reference a node, search for the next closest node inside MIB; set instance_oid.len to zero because we want the first instance of this node */
      mn = snmp_mib_tree_resolve_next(mib, start_oid, start_oid_len, node_oid);
 800d5ca:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800d5ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d5d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d5d4:	f000 f94d 	bl	800d872 <snmp_mib_tree_resolve_next>
 800d5d8:	62b8      	str	r0, [r7, #40]	@ 0x28
      node_instance->instance_oid.len = 0;
 800d5da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5dc:	2200      	movs	r2, #0
 800d5de:	711a      	strb	r2, [r3, #4]
    }

    /* validate the node; if the node has no further instance or the returned instance is invalid, search for the next in MIB and validate again */
    node_instance->node = mn;
 800d5e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d5e4:	601a      	str	r2, [r3, #0]
    while (mn != NULL) {
 800d5e6:	e073      	b.n	800d6d0 <snmp_get_next_node_instance_from_oid+0x1ae>
       u8_t result;

      /* clear fields which may have values from previous loops */
      node_instance->asn1_type        = 0;
 800d5e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
      node_instance->access           = SNMP_NODE_INSTANCE_NOT_ACCESSIBLE;
 800d5f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
      node_instance->get_value        = NULL;
 800d5f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
      node_instance->set_test         = NULL;
 800d600:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d602:	2200      	movs	r2, #0
 800d604:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
      node_instance->set_value        = NULL;
 800d608:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d60a:	2200      	movs	r2, #0
 800d60c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
      node_instance->release_instance = NULL;
 800d610:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d612:	2200      	movs	r2, #0
 800d614:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
      node_instance->reference.ptr    = NULL;
 800d618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d61a:	2200      	movs	r2, #0
 800d61c:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
      node_instance->reference_len    = 0;
 800d620:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d622:	2200      	movs	r2, #0
 800d624:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8

      result = ((const struct snmp_leaf_node*)(const void*)mn)->get_next_instance(
 800d628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d62a:	68db      	ldr	r3, [r3, #12]
        node_oid->id,
 800d62c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d62e:	1d10      	adds	r0, r2, #4
      result = ((const struct snmp_leaf_node*)(const void*)mn)->get_next_instance(
 800d630:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d632:	7811      	ldrb	r1, [r2, #0]
 800d634:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d636:	4798      	blx	r3
 800d638:	4603      	mov	r3, r0
 800d63a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        node_oid->len,
        node_instance);

      if (result == SNMP_ERR_NOERROR) {
 800d63e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800d642:	2b00      	cmp	r3, #0
 800d644:	d11e      	bne.n	800d684 <snmp_get_next_node_instance_from_oid+0x162>
          LWIP_DEBUGF(SNMP_DEBUG, ("SNMP inconsistent access: node is writable but no set_value function is specified\n"));
        }
#endif

        /* validate node because the node may be not accessible for example (but let the caller decide what is valid */
        if ((validate_node_instance_method == NULL) ||
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d006      	beq.n	800d65a <snmp_get_next_node_instance_from_oid+0x138>
            (validate_node_instance_method(node_instance, validate_node_instance_arg) == SNMP_ERR_NOERROR)) {
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	6839      	ldr	r1, [r7, #0]
 800d650:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d652:	4798      	blx	r3
 800d654:	4603      	mov	r3, r0
        if ((validate_node_instance_method == NULL) ||
 800d656:	2b00      	cmp	r3, #0
 800d658:	d109      	bne.n	800d66e <snmp_get_next_node_instance_from_oid+0x14c>
          /* node_oid "returns" the full result OID (including the instance part) */
          snmp_oid_append(node_oid, node_instance->instance_oid.id, node_instance->instance_oid.len);
 800d65a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d65c:	f103 0108 	add.w	r1, r3, #8
 800d660:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d662:	791b      	ldrb	r3, [r3, #4]
 800d664:	461a      	mov	r2, r3
 800d666:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d668:	f7ff fcf6 	bl	800d058 <snmp_oid_append>
          break;
 800d66c:	e033      	b.n	800d6d6 <snmp_get_next_node_instance_from_oid+0x1b4>
        }

        if (node_instance->release_instance != NULL) {
 800d66e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d674:	2b00      	cmp	r3, #0
 800d676:	d02b      	beq.n	800d6d0 <snmp_get_next_node_instance_from_oid+0x1ae>
          node_instance->release_instance(node_instance);
 800d678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d67a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d67e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d680:	4798      	blx	r3
 800d682:	e025      	b.n	800d6d0 <snmp_get_next_node_instance_from_oid+0x1ae>
        the instance itself is not valid, ask for next instance from same node.
        we don't have to change any variables because node_instance->instance_oid is used as input (starting point)
        as well as output (resulting next OID), so we have to simply call get_next_instance method again
        */
      } else {
        if (node_instance->release_instance != NULL) {
 800d684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d004      	beq.n	800d698 <snmp_get_next_node_instance_from_oid+0x176>
          node_instance->release_instance(node_instance);
 800d68e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d694:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d696:	4798      	blx	r3
        }

        /* the node has no further instance, skip to next node */
        mn = snmp_mib_tree_resolve_next(mib, node_oid->id, node_oid->len, &node_instance->instance_oid); /* misuse node_instance->instance_oid as tmp buffer */
 800d698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d69a:	1d19      	adds	r1, r3, #4
 800d69c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d69e:	781a      	ldrb	r2, [r3, #0]
 800d6a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6a2:	3304      	adds	r3, #4
 800d6a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d6a6:	f000 f8e4 	bl	800d872 <snmp_mib_tree_resolve_next>
 800d6aa:	62b8      	str	r0, [r7, #40]	@ 0x28
        if (mn != NULL) {
 800d6ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d00e      	beq.n	800d6d0 <snmp_get_next_node_instance_from_oid+0x1ae>
          /* prepare for next loop */
          snmp_oid_assign(node_oid, node_instance->instance_oid.id, node_instance->instance_oid.len);
 800d6b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6b4:	f103 0108 	add.w	r1, r3, #8
 800d6b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6ba:	791b      	ldrb	r3, [r3, #4]
 800d6bc:	461a      	mov	r2, r3
 800d6be:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d6c0:	f7ff fca0 	bl	800d004 <snmp_oid_assign>
          node_instance->instance_oid.len = 0;
 800d6c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	711a      	strb	r2, [r3, #4]
          node_instance->node = mn;
 800d6ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d6ce:	601a      	str	r2, [r3, #0]
    while (mn != NULL) {
 800d6d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d188      	bne.n	800d5e8 <snmp_get_next_node_instance_from_oid+0xc6>
        }
      }
    }

    if (mn != NULL) {
 800d6d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d022      	beq.n	800d722 <snmp_get_next_node_instance_from_oid+0x200>
      this is possible because MIB's may be located anywhere in the global tree, that means also in 
      the subtree of another MIB (e.g. if searched OID is .2 and resulting OID is .4, then another
      MIB having .3 as root node may exist)
      */
      const struct snmp_mib *intermediate_mib;
      intermediate_mib = snmp_get_mib_between(start_oid, start_oid_len, node_oid->id, node_oid->len);
 800d6dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6de:	1d1a      	adds	r2, r3, #4
 800d6e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6e2:	781b      	ldrb	r3, [r3, #0]
 800d6e4:	f897 1023 	ldrb.w	r1, [r7, #35]	@ 0x23
 800d6e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d6ea:	f7ff fe91 	bl	800d410 <snmp_get_mib_between>
 800d6ee:	61b8      	str	r0, [r7, #24]

      if (intermediate_mib != NULL) {
 800d6f0:	69bb      	ldr	r3, [r7, #24]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d05a      	beq.n	800d7ac <snmp_get_next_node_instance_from_oid+0x28a>
        /* search for first node inside intermediate mib in next loop */
        if (node_instance->release_instance != NULL) {
 800d6f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d004      	beq.n	800d70a <snmp_get_next_node_instance_from_oid+0x1e8>
          node_instance->release_instance(node_instance);
 800d700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d706:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d708:	4798      	blx	r3
        }

        mn            = NULL;
 800d70a:	2300      	movs	r3, #0
 800d70c:	62bb      	str	r3, [r7, #40]	@ 0x28
        mib           = intermediate_mib;
 800d70e:	69bb      	ldr	r3, [r7, #24]
 800d710:	62fb      	str	r3, [r7, #44]	@ 0x2c
        start_oid     = mib->base_oid;
 800d712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	627b      	str	r3, [r7, #36]	@ 0x24
        start_oid_len = mib->base_oid_len;
 800d718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d71a:	791b      	ldrb	r3, [r3, #4]
 800d71c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d720:	e044      	b.n	800d7ac <snmp_get_next_node_instance_from_oid+0x28a>
      1. search for inner MIB's (whose root is located inside tree of current MIB)
      2. search for surrouding MIB's (where the current MIB is the inner MIB) and continue there if any
      3. take the next closest MIB (not being related to the current MIB)
      */
      const struct snmp_mib *next_mib;
      next_mib = snmp_get_next_mib(start_oid, start_oid_len); /* returns MIB's related to point 1 and 3 */
 800d722:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d726:	4619      	mov	r1, r3
 800d728:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d72a:	f7ff fe01 	bl	800d330 <snmp_get_next_mib>
 800d72e:	61f8      	str	r0, [r7, #28]

      /* is the found MIB an inner MIB? (point 1) */
      if ((next_mib != NULL) && (next_mib->base_oid_len > mib->base_oid_len) &&
 800d730:	69fb      	ldr	r3, [r7, #28]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d01c      	beq.n	800d770 <snmp_get_next_node_instance_from_oid+0x24e>
 800d736:	69fb      	ldr	r3, [r7, #28]
 800d738:	791a      	ldrb	r2, [r3, #4]
 800d73a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d73c:	791b      	ldrb	r3, [r3, #4]
 800d73e:	429a      	cmp	r2, r3
 800d740:	d916      	bls.n	800d770 <snmp_get_next_node_instance_from_oid+0x24e>
          (snmp_oid_compare(next_mib->base_oid, mib->base_oid_len, mib->base_oid, mib->base_oid_len) == 0)) {
 800d742:	69fb      	ldr	r3, [r7, #28]
 800d744:	6818      	ldr	r0, [r3, #0]
 800d746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d748:	7919      	ldrb	r1, [r3, #4]
 800d74a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d74c:	681a      	ldr	r2, [r3, #0]
 800d74e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d750:	791b      	ldrb	r3, [r3, #4]
 800d752:	f7ff fcb7 	bl	800d0c4 <snmp_oid_compare>
 800d756:	4603      	mov	r3, r0
      if ((next_mib != NULL) && (next_mib->base_oid_len > mib->base_oid_len) &&
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d109      	bne.n	800d770 <snmp_get_next_node_instance_from_oid+0x24e>
        /* yes it is -> continue at inner MIB */
        mib = next_mib;
 800d75c:	69fb      	ldr	r3, [r7, #28]
 800d75e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        start_oid     = mib->base_oid;
 800d760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	627b      	str	r3, [r7, #36]	@ 0x24
        start_oid_len = mib->base_oid_len;
 800d766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d768:	791b      	ldrb	r3, [r3, #4]
 800d76a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800d76e:	e01d      	b.n	800d7ac <snmp_get_next_node_instance_from_oid+0x28a>
      } else {
        /* check if there is a surrounding mib where to continue (point 2) (only possible if OID length > 1) */
        if (mib->base_oid_len > 1) {
 800d770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d772:	791b      	ldrb	r3, [r3, #4]
 800d774:	2b01      	cmp	r3, #1
 800d776:	d919      	bls.n	800d7ac <snmp_get_next_node_instance_from_oid+0x28a>
          mib = snmp_get_mib_from_oid(mib->base_oid, mib->base_oid_len - 1);
 800d778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d77a:	681a      	ldr	r2, [r3, #0]
 800d77c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d77e:	791b      	ldrb	r3, [r3, #4]
 800d780:	3b01      	subs	r3, #1
 800d782:	b2db      	uxtb	r3, r3
 800d784:	4619      	mov	r1, r3
 800d786:	4610      	mov	r0, r2
 800d788:	f7ff fd2e 	bl	800d1e8 <snmp_get_mib_from_oid>
 800d78c:	62f8      	str	r0, [r7, #44]	@ 0x2c

          if (mib == NULL) {
 800d78e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d790:	2b00      	cmp	r3, #0
 800d792:	d10b      	bne.n	800d7ac <snmp_get_next_node_instance_from_oid+0x28a>
            /* no surrounding mib, use next mib encountered above (point 3) */
            mib = next_mib;
 800d794:	69fb      	ldr	r3, [r7, #28]
 800d796:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (mib != NULL) {
 800d798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d006      	beq.n	800d7ac <snmp_get_next_node_instance_from_oid+0x28a>
              start_oid     = mib->base_oid;
 800d79e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	627b      	str	r3, [r7, #36]	@ 0x24
              start_oid_len = mib->base_oid_len;
 800d7a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7a6:	791b      	ldrb	r3, [r3, #4]
 800d7a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  while ((mib != NULL) && (mn == NULL)) {
 800d7ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d003      	beq.n	800d7ba <snmp_get_next_node_instance_from_oid+0x298>
 800d7b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	f43f aee4 	beq.w	800d582 <snmp_get_next_node_instance_from_oid+0x60>
        }
      }
    }
  }

  if (mib == NULL) {
 800d7ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d101      	bne.n	800d7c4 <snmp_get_next_node_instance_from_oid+0x2a2>
    /* loop is only left when mib == null (error) or mib_node != NULL (success) */
    return SNMP_ERR_ENDOFMIBVIEW;
 800d7c0:	23f2      	movs	r3, #242	@ 0xf2
 800d7c2:	e000      	b.n	800d7c6 <snmp_get_next_node_instance_from_oid+0x2a4>
  }

  return SNMP_ERR_NOERROR;
 800d7c4:	2300      	movs	r3, #0
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	3730      	adds	r7, #48	@ 0x30
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}

0800d7ce <snmp_mib_tree_resolve_exact>:
 * Searches tree for the supplied object identifier.
 *
 */
const struct snmp_node *
snmp_mib_tree_resolve_exact(const struct snmp_mib *mib, const u32_t *oid, u8_t oid_len, u8_t* oid_instance_len)
{
 800d7ce:	b480      	push	{r7}
 800d7d0:	b089      	sub	sp, #36	@ 0x24
 800d7d2:	af00      	add	r7, sp, #0
 800d7d4:	60f8      	str	r0, [r7, #12]
 800d7d6:	60b9      	str	r1, [r7, #8]
 800d7d8:	603b      	str	r3, [r7, #0]
 800d7da:	4613      	mov	r3, r2
 800d7dc:	71fb      	strb	r3, [r7, #7]
  const struct snmp_node* const* node = &mib->root_node;
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	3308      	adds	r3, #8
 800d7e2:	61fb      	str	r3, [r7, #28]
  u8_t oid_offset = mib->base_oid_len;
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	791b      	ldrb	r3, [r3, #4]
 800d7e8:	76fb      	strb	r3, [r7, #27]

  while ((oid_offset < oid_len) && ((*node)->node_type == SNMP_NODE_TREE)) {
 800d7ea:	e025      	b.n	800d838 <snmp_mib_tree_resolve_exact+0x6a>
    /* search for matching sub node */
    u32_t subnode_oid = *(oid + oid_offset);
 800d7ec:	7efb      	ldrb	r3, [r7, #27]
 800d7ee:	009b      	lsls	r3, r3, #2
 800d7f0:	68ba      	ldr	r2, [r7, #8]
 800d7f2:	4413      	add	r3, r2
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	613b      	str	r3, [r7, #16]

    u32_t i = (*(const struct snmp_tree_node* const*)node)->subnode_count;
 800d7f8:	69fb      	ldr	r3, [r7, #28]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	891b      	ldrh	r3, [r3, #8]
 800d7fe:	617b      	str	r3, [r7, #20]
    node    = (*(const struct snmp_tree_node* const*)node)->subnodes;
 800d800:	69fb      	ldr	r3, [r7, #28]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	68db      	ldr	r3, [r3, #12]
 800d806:	61fb      	str	r3, [r7, #28]
    while ((i > 0) && ((*node)->oid != subnode_oid)) {
 800d808:	e005      	b.n	800d816 <snmp_mib_tree_resolve_exact+0x48>
      node++;
 800d80a:	69fb      	ldr	r3, [r7, #28]
 800d80c:	3304      	adds	r3, #4
 800d80e:	61fb      	str	r3, [r7, #28]
      i--;
 800d810:	697b      	ldr	r3, [r7, #20]
 800d812:	3b01      	subs	r3, #1
 800d814:	617b      	str	r3, [r7, #20]
    while ((i > 0) && ((*node)->oid != subnode_oid)) {
 800d816:	697b      	ldr	r3, [r7, #20]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d005      	beq.n	800d828 <snmp_mib_tree_resolve_exact+0x5a>
 800d81c:	69fb      	ldr	r3, [r7, #28]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	685b      	ldr	r3, [r3, #4]
 800d822:	693a      	ldr	r2, [r7, #16]
 800d824:	429a      	cmp	r2, r3
 800d826:	d1f0      	bne.n	800d80a <snmp_mib_tree_resolve_exact+0x3c>
    }

    if (i == 0) {
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d101      	bne.n	800d832 <snmp_mib_tree_resolve_exact+0x64>
      /* no matching subnode found */
      return NULL;
 800d82e:	2300      	movs	r3, #0
 800d830:	e01a      	b.n	800d868 <snmp_mib_tree_resolve_exact+0x9a>
    }

    oid_offset++;
 800d832:	7efb      	ldrb	r3, [r7, #27]
 800d834:	3301      	adds	r3, #1
 800d836:	76fb      	strb	r3, [r7, #27]
  while ((oid_offset < oid_len) && ((*node)->node_type == SNMP_NODE_TREE)) {
 800d838:	7efa      	ldrb	r2, [r7, #27]
 800d83a:	79fb      	ldrb	r3, [r7, #7]
 800d83c:	429a      	cmp	r2, r3
 800d83e:	d204      	bcs.n	800d84a <snmp_mib_tree_resolve_exact+0x7c>
 800d840:	69fb      	ldr	r3, [r7, #28]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	781b      	ldrb	r3, [r3, #0]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d0d0      	beq.n	800d7ec <snmp_mib_tree_resolve_exact+0x1e>
  }

  if ((*node)->node_type != SNMP_NODE_TREE) {
 800d84a:	69fb      	ldr	r3, [r7, #28]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	781b      	ldrb	r3, [r3, #0]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d008      	beq.n	800d866 <snmp_mib_tree_resolve_exact+0x98>
    /* we found a leaf node */
    *oid_instance_len = oid_len - oid_offset;
 800d854:	79fa      	ldrb	r2, [r7, #7]
 800d856:	7efb      	ldrb	r3, [r7, #27]
 800d858:	1ad3      	subs	r3, r2, r3
 800d85a:	b2da      	uxtb	r2, r3
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	701a      	strb	r2, [r3, #0]
    return (*node);
 800d860:	69fb      	ldr	r3, [r7, #28]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	e000      	b.n	800d868 <snmp_mib_tree_resolve_exact+0x9a>
  }

  return NULL;
 800d866:	2300      	movs	r3, #0
}
 800d868:	4618      	mov	r0, r3
 800d86a:	3724      	adds	r7, #36	@ 0x24
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bc80      	pop	{r7}
 800d870:	4770      	bx	lr

0800d872 <snmp_mib_tree_resolve_next>:

const struct snmp_node*
snmp_mib_tree_resolve_next(const struct snmp_mib *mib, const u32_t *oid, u8_t oid_len, struct snmp_obj_id* oidret)
{
 800d872:	b580      	push	{r7, lr}
 800d874:	b0be      	sub	sp, #248	@ 0xf8
 800d876:	af00      	add	r7, sp, #0
 800d878:	60f8      	str	r0, [r7, #12]
 800d87a:	60b9      	str	r1, [r7, #8]
 800d87c:	603b      	str	r3, [r7, #0]
 800d87e:	4613      	mov	r3, r2
 800d880:	71fb      	strb	r3, [r7, #7]
  u8_t  oid_offset = mib->base_oid_len;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	791b      	ldrb	r3, [r3, #4]
 800d886:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
  const struct snmp_node* const* node;
  const struct snmp_tree_node* node_stack[SNMP_MAX_OBJ_ID_LEN];
  s32_t nsi = 0; /* NodeStackIndex */
 800d88a:	2300      	movs	r3, #0
 800d88c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  u32_t subnode_oid;

  if (mib->root_node->node_type != SNMP_NODE_TREE) {
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	689b      	ldr	r3, [r3, #8]
 800d894:	781b      	ldrb	r3, [r3, #0]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d001      	beq.n	800d89e <snmp_mib_tree_resolve_next+0x2c>
    /* a next operation on a mib with only a leaf node will always return NULL because there is no other node */
    return NULL;
 800d89a:	2300      	movs	r3, #0
 800d89c:	e131      	b.n	800db02 <snmp_mib_tree_resolve_next+0x290>
  }

  /* first build node stack related to passed oid (as far as possible), then go backwards to determine the next node */
  node_stack[nsi] = (const struct snmp_tree_node*)(const void*)mib->root_node;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	689a      	ldr	r2, [r3, #8]
 800d8a2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d8a6:	009b      	lsls	r3, r3, #2
 800d8a8:	33f8      	adds	r3, #248	@ 0xf8
 800d8aa:	443b      	add	r3, r7
 800d8ac:	f843 2ce4 	str.w	r2, [r3, #-228]
  while (oid_offset < oid_len) {
 800d8b0:	e050      	b.n	800d954 <snmp_mib_tree_resolve_next+0xe2>
    /* search for matching sub node */
    u32_t i = node_stack[nsi]->subnode_count;
 800d8b2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d8b6:	009b      	lsls	r3, r3, #2
 800d8b8:	33f8      	adds	r3, #248	@ 0xf8
 800d8ba:	443b      	add	r3, r7
 800d8bc:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 800d8c0:	891b      	ldrh	r3, [r3, #8]
 800d8c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    node    = node_stack[nsi]->subnodes;
 800d8c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d8ca:	009b      	lsls	r3, r3, #2
 800d8cc:	33f8      	adds	r3, #248	@ 0xf8
 800d8ce:	443b      	add	r3, r7
 800d8d0:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 800d8d4:	68db      	ldr	r3, [r3, #12]
 800d8d6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

    subnode_oid = *(oid + oid_offset);
 800d8da:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 800d8de:	009b      	lsls	r3, r3, #2
 800d8e0:	68ba      	ldr	r2, [r7, #8]
 800d8e2:	4413      	add	r3, r2
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

    while ((i > 0) && ((*node)->oid != subnode_oid)) {
 800d8ea:	e009      	b.n	800d900 <snmp_mib_tree_resolve_next+0x8e>
      node++;
 800d8ec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d8f0:	3304      	adds	r3, #4
 800d8f2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
      i--;
 800d8f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d8fa:	3b01      	subs	r3, #1
 800d8fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    while ((i > 0) && ((*node)->oid != subnode_oid)) {
 800d900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d904:	2b00      	cmp	r3, #0
 800d906:	d007      	beq.n	800d918 <snmp_mib_tree_resolve_next+0xa6>
 800d908:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	685b      	ldr	r3, [r3, #4]
 800d910:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800d914:	429a      	cmp	r2, r3
 800d916:	d1e9      	bne.n	800d8ec <snmp_mib_tree_resolve_next+0x7a>
    }

    if ((i == 0) || ((*node)->node_type != SNMP_NODE_TREE)) {
 800d918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d01e      	beq.n	800d95e <snmp_mib_tree_resolve_next+0xec>
 800d920:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	781b      	ldrb	r3, [r3, #0]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d118      	bne.n	800d95e <snmp_mib_tree_resolve_next+0xec>
      /* no (matching) tree-subnode found */
      break;
    }
    nsi++;
 800d92c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d930:	3301      	adds	r3, #1
 800d932:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    node_stack[nsi] = (const struct snmp_tree_node*)(const void*)(*node);
 800d936:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d93a:	681a      	ldr	r2, [r3, #0]
 800d93c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d940:	009b      	lsls	r3, r3, #2
 800d942:	33f8      	adds	r3, #248	@ 0xf8
 800d944:	443b      	add	r3, r7
 800d946:	f843 2ce4 	str.w	r2, [r3, #-228]

    oid_offset++;
 800d94a:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 800d94e:	3301      	adds	r3, #1
 800d950:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
  while (oid_offset < oid_len) {
 800d954:	f897 20f7 	ldrb.w	r2, [r7, #247]	@ 0xf7
 800d958:	79fb      	ldrb	r3, [r7, #7]
 800d95a:	429a      	cmp	r2, r3
 800d95c:	d3a9      	bcc.n	800d8b2 <snmp_mib_tree_resolve_next+0x40>
  }


  if (oid_offset >= oid_len) {
 800d95e:	f897 20f7 	ldrb.w	r2, [r7, #247]	@ 0xf7
 800d962:	79fb      	ldrb	r3, [r7, #7]
 800d964:	429a      	cmp	r2, r3
 800d966:	d303      	bcc.n	800d970 <snmp_mib_tree_resolve_next+0xfe>
    /* passed oid references a tree node -> return first useable sub node of it */
    subnode_oid = 0;
 800d968:	2300      	movs	r3, #0
 800d96a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d96e:	e0c2      	b.n	800daf6 <snmp_mib_tree_resolve_next+0x284>
  } else {
    subnode_oid = *(oid + oid_offset) + 1;
 800d970:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 800d974:	009b      	lsls	r3, r3, #2
 800d976:	68ba      	ldr	r2, [r7, #8]
 800d978:	4413      	add	r3, r2
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	3301      	adds	r3, #1
 800d97e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  }

  while (nsi >= 0) {
 800d982:	e0b8      	b.n	800daf6 <snmp_mib_tree_resolve_next+0x284>
    const struct snmp_node* subnode = NULL;
 800d984:	2300      	movs	r3, #0
 800d986:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

    /* find next node on current level */
    s32_t i        = node_stack[nsi]->subnode_count;
 800d98a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d98e:	009b      	lsls	r3, r3, #2
 800d990:	33f8      	adds	r3, #248	@ 0xf8
 800d992:	443b      	add	r3, r7
 800d994:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 800d998:	891b      	ldrh	r3, [r3, #8]
 800d99a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    node           = node_stack[nsi]->subnodes;
 800d99e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d9a2:	009b      	lsls	r3, r3, #2
 800d9a4:	33f8      	adds	r3, #248	@ 0xf8
 800d9a6:	443b      	add	r3, r7
 800d9a8:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 800d9ac:	68db      	ldr	r3, [r3, #12]
 800d9ae:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    while (i > 0) {
 800d9b2:	e031      	b.n	800da18 <snmp_mib_tree_resolve_next+0x1a6>
      if ((*node)->oid == subnode_oid) {
 800d9b4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	685b      	ldr	r3, [r3, #4]
 800d9bc:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800d9c0:	429a      	cmp	r2, r3
 800d9c2:	d105      	bne.n	800d9d0 <snmp_mib_tree_resolve_next+0x15e>
        subnode = *node;
 800d9c4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
        break;
 800d9ce:	e027      	b.n	800da20 <snmp_mib_tree_resolve_next+0x1ae>
      } else if (((*node)->oid > subnode_oid) && ((subnode == NULL) || ((*node)->oid < subnode->oid))) {
 800d9d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	685b      	ldr	r3, [r3, #4]
 800d9d8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800d9dc:	429a      	cmp	r2, r3
 800d9de:	d211      	bcs.n	800da04 <snmp_mib_tree_resolve_next+0x192>
 800d9e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d008      	beq.n	800d9fa <snmp_mib_tree_resolve_next+0x188>
 800d9e8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	685a      	ldr	r2, [r3, #4]
 800d9f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d9f4:	685b      	ldr	r3, [r3, #4]
 800d9f6:	429a      	cmp	r2, r3
 800d9f8:	d204      	bcs.n	800da04 <snmp_mib_tree_resolve_next+0x192>
        subnode = *node;
 800d9fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      }

      node++;
 800da04:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800da08:	3304      	adds	r3, #4
 800da0a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
      i--;
 800da0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800da12:	3b01      	subs	r3, #1
 800da14:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    while (i > 0) {
 800da18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	dcc9      	bgt.n	800d9b4 <snmp_mib_tree_resolve_next+0x142>
    }

    if (subnode == NULL) {
 800da20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800da24:	2b00      	cmp	r3, #0
 800da26:	d110      	bne.n	800da4a <snmp_mib_tree_resolve_next+0x1d8>
      /* no further node found on this level, go one level up and start searching with index of current node*/
      subnode_oid = node_stack[nsi]->node.oid + 1;
 800da28:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800da2c:	009b      	lsls	r3, r3, #2
 800da2e:	33f8      	adds	r3, #248	@ 0xf8
 800da30:	443b      	add	r3, r7
 800da32:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 800da36:	685b      	ldr	r3, [r3, #4]
 800da38:	3301      	adds	r3, #1
 800da3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
      nsi--;
 800da3e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800da42:	3b01      	subs	r3, #1
 800da44:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800da48:	e055      	b.n	800daf6 <snmp_mib_tree_resolve_next+0x284>
    } else {
      if (subnode->node_type == SNMP_NODE_TREE) {
 800da4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800da4e:	781b      	ldrb	r3, [r3, #0]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d111      	bne.n	800da78 <snmp_mib_tree_resolve_next+0x206>
        /* next is a tree node, go into it and start searching */
        nsi++;
 800da54:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800da58:	3301      	adds	r3, #1
 800da5a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
        node_stack[nsi] = (const struct snmp_tree_node*)(const void*)subnode;
 800da5e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800da62:	009b      	lsls	r3, r3, #2
 800da64:	33f8      	adds	r3, #248	@ 0xf8
 800da66:	443b      	add	r3, r7
 800da68:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800da6c:	f843 2ce4 	str.w	r2, [r3, #-228]
        subnode_oid = 0;
 800da70:	2300      	movs	r3, #0
 800da72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800da76:	e03e      	b.n	800daf6 <snmp_mib_tree_resolve_next+0x284>
      } else {
        /* we found a leaf node -> fill oidret and return it */
        snmp_oid_assign(oidret, mib->base_oid, mib->base_oid_len);
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	6819      	ldr	r1, [r3, #0]
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	791b      	ldrb	r3, [r3, #4]
 800da80:	461a      	mov	r2, r3
 800da82:	6838      	ldr	r0, [r7, #0]
 800da84:	f7ff fabe 	bl	800d004 <snmp_oid_assign>
        i = 1;
 800da88:	2301      	movs	r3, #1
 800da8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        while (i <= nsi) {
 800da8e:	e019      	b.n	800dac4 <snmp_mib_tree_resolve_next+0x252>
          oidret->id[oidret->len] = node_stack[i]->node.oid;
 800da90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800da94:	009b      	lsls	r3, r3, #2
 800da96:	33f8      	adds	r3, #248	@ 0xf8
 800da98:	443b      	add	r3, r7
 800da9a:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 800da9e:	683a      	ldr	r2, [r7, #0]
 800daa0:	7812      	ldrb	r2, [r2, #0]
 800daa2:	4610      	mov	r0, r2
 800daa4:	685a      	ldr	r2, [r3, #4]
 800daa6:	6839      	ldr	r1, [r7, #0]
 800daa8:	0083      	lsls	r3, r0, #2
 800daaa:	440b      	add	r3, r1
 800daac:	605a      	str	r2, [r3, #4]
          oidret->len++;
 800daae:	683b      	ldr	r3, [r7, #0]
 800dab0:	781b      	ldrb	r3, [r3, #0]
 800dab2:	3301      	adds	r3, #1
 800dab4:	b2da      	uxtb	r2, r3
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	701a      	strb	r2, [r3, #0]
          i++;
 800daba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dabe:	3301      	adds	r3, #1
 800dac0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        while (i <= nsi) {
 800dac4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800dac8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800dacc:	429a      	cmp	r2, r3
 800dace:	dddf      	ble.n	800da90 <snmp_mib_tree_resolve_next+0x21e>
        }

        oidret->id[oidret->len] = subnode->oid;
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	781b      	ldrb	r3, [r3, #0]
 800dad4:	4618      	mov	r0, r3
 800dad6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dada:	685a      	ldr	r2, [r3, #4]
 800dadc:	6839      	ldr	r1, [r7, #0]
 800dade:	0083      	lsls	r3, r0, #2
 800dae0:	440b      	add	r3, r1
 800dae2:	605a      	str	r2, [r3, #4]
        oidret->len++;
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	781b      	ldrb	r3, [r3, #0]
 800dae8:	3301      	adds	r3, #1
 800daea:	b2da      	uxtb	r2, r3
 800daec:	683b      	ldr	r3, [r7, #0]
 800daee:	701a      	strb	r2, [r3, #0]

        return subnode;
 800daf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800daf4:	e005      	b.n	800db02 <snmp_mib_tree_resolve_next+0x290>
  while (nsi >= 0) {
 800daf6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	f6bf af42 	bge.w	800d984 <snmp_mib_tree_resolve_next+0x112>
      }
    }
  }

  return NULL;
 800db00:	2300      	movs	r3, #0
}
 800db02:	4618      	mov	r0, r3
 800db04:	37f8      	adds	r7, #248	@ 0xf8
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}

0800db0a <snmp_next_oid_init>:
/** initialize struct next_oid_state using this function before passing it to next_oid_check */
void
snmp_next_oid_init(struct snmp_next_oid_state *state,
  const u32_t *start_oid, u8_t start_oid_len,
  u32_t *next_oid_buf, u8_t next_oid_max_len)
{
 800db0a:	b480      	push	{r7}
 800db0c:	b085      	sub	sp, #20
 800db0e:	af00      	add	r7, sp, #0
 800db10:	60f8      	str	r0, [r7, #12]
 800db12:	60b9      	str	r1, [r7, #8]
 800db14:	603b      	str	r3, [r7, #0]
 800db16:	4613      	mov	r3, r2
 800db18:	71fb      	strb	r3, [r7, #7]
  state->start_oid        = start_oid;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	68ba      	ldr	r2, [r7, #8]
 800db1e:	601a      	str	r2, [r3, #0]
  state->start_oid_len    = start_oid_len;
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	79fa      	ldrb	r2, [r7, #7]
 800db24:	711a      	strb	r2, [r3, #4]
  state->next_oid         = next_oid_buf;
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	683a      	ldr	r2, [r7, #0]
 800db2a:	609a      	str	r2, [r3, #8]
  state->next_oid_len     = 0;
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	2200      	movs	r2, #0
 800db30:	731a      	strb	r2, [r3, #12]
  state->next_oid_max_len = next_oid_max_len;
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	7e3a      	ldrb	r2, [r7, #24]
 800db36:	735a      	strb	r2, [r3, #13]
  state->status           = SNMP_NEXT_OID_STATUS_NO_MATCH;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	2201      	movs	r2, #1
 800db3c:	739a      	strb	r2, [r3, #14]
}
 800db3e:	bf00      	nop
 800db40:	3714      	adds	r7, #20
 800db42:	46bd      	mov	sp, r7
 800db44:	bc80      	pop	{r7}
 800db46:	4770      	bx	lr

0800db48 <snmp_next_oid_check>:
}

/** checks the passed OID if it is a candidate to be the next one (get_next); returns !=0 if passed oid is currently closest, otherwise 0 */
u8_t
snmp_next_oid_check(struct snmp_next_oid_state *state, const u32_t *oid, const u8_t oid_len, void* reference)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b084      	sub	sp, #16
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	60f8      	str	r0, [r7, #12]
 800db50:	60b9      	str	r1, [r7, #8]
 800db52:	603b      	str	r3, [r7, #0]
 800db54:	4613      	mov	r3, r2
 800db56:	71fb      	strb	r3, [r7, #7]
  /* do not overwrite a fail result */
  if (state->status != SNMP_NEXT_OID_STATUS_BUF_TO_SMALL) {
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	7b9b      	ldrb	r3, [r3, #14]
 800db5c:	2b02      	cmp	r3, #2
 800db5e:	d034      	beq.n	800dbca <snmp_next_oid_check+0x82>
    /* check passed OID is located behind start offset */
    if (snmp_oid_compare(oid, oid_len, state->start_oid, state->start_oid_len) > 0) {
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	681a      	ldr	r2, [r3, #0]
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	791b      	ldrb	r3, [r3, #4]
 800db68:	79f9      	ldrb	r1, [r7, #7]
 800db6a:	68b8      	ldr	r0, [r7, #8]
 800db6c:	f7ff faaa 	bl	800d0c4 <snmp_oid_compare>
 800db70:	4603      	mov	r3, r0
 800db72:	2b00      	cmp	r3, #0
 800db74:	dd29      	ble.n	800dbca <snmp_next_oid_check+0x82>
      /* check if new oid is located closer to start oid than current closest oid */
      if ((state->status == SNMP_NEXT_OID_STATUS_NO_MATCH) ||
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	7b9b      	ldrb	r3, [r3, #14]
 800db7a:	2b01      	cmp	r3, #1
 800db7c:	d00a      	beq.n	800db94 <snmp_next_oid_check+0x4c>
        (snmp_oid_compare(oid, oid_len, state->next_oid, state->next_oid_len) < 0)) {
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	689a      	ldr	r2, [r3, #8]
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	7b1b      	ldrb	r3, [r3, #12]
 800db86:	79f9      	ldrb	r1, [r7, #7]
 800db88:	68b8      	ldr	r0, [r7, #8]
 800db8a:	f7ff fa9b 	bl	800d0c4 <snmp_oid_compare>
 800db8e:	4603      	mov	r3, r0
      if ((state->status == SNMP_NEXT_OID_STATUS_NO_MATCH) ||
 800db90:	2b00      	cmp	r3, #0
 800db92:	da1a      	bge.n	800dbca <snmp_next_oid_check+0x82>
        if (oid_len <= state->next_oid_max_len) {
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	7b5b      	ldrb	r3, [r3, #13]
 800db98:	79fa      	ldrb	r2, [r7, #7]
 800db9a:	429a      	cmp	r2, r3
 800db9c:	d812      	bhi.n	800dbc4 <snmp_next_oid_check+0x7c>
          MEMCPY(state->next_oid, oid, oid_len * sizeof(u32_t));
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	6898      	ldr	r0, [r3, #8]
 800dba2:	79fb      	ldrb	r3, [r7, #7]
 800dba4:	009b      	lsls	r3, r3, #2
 800dba6:	461a      	mov	r2, r3
 800dba8:	68b9      	ldr	r1, [r7, #8]
 800dbaa:	f012 ff0e 	bl	80209ca <memcpy>
          state->next_oid_len = oid_len;
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	79fa      	ldrb	r2, [r7, #7]
 800dbb2:	731a      	strb	r2, [r3, #12]
          state->status       = SNMP_NEXT_OID_STATUS_SUCCESS;
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	739a      	strb	r2, [r3, #14]
          state->reference    = reference;
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	683a      	ldr	r2, [r7, #0]
 800dbbe:	611a      	str	r2, [r3, #16]
          return 1;
 800dbc0:	2301      	movs	r3, #1
 800dbc2:	e003      	b.n	800dbcc <snmp_next_oid_check+0x84>
        } else {
          state->status = SNMP_NEXT_OID_STATUS_BUF_TO_SMALL;
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	2202      	movs	r2, #2
 800dbc8:	739a      	strb	r2, [r3, #14]
        }
      }
    }
  }

  return 0;
 800dbca:	2300      	movs	r3, #0
}
 800dbcc:	4618      	mov	r0, r3
 800dbce:	3710      	adds	r7, #16
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd80      	pop	{r7, pc}

0800dbd4 <snmp_oid_in_range>:

u8_t
snmp_oid_in_range(const u32_t *oid_in, u8_t oid_len, const struct snmp_oid_range *oid_ranges, u8_t oid_ranges_len)
{
 800dbd4:	b480      	push	{r7}
 800dbd6:	b087      	sub	sp, #28
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	60f8      	str	r0, [r7, #12]
 800dbdc:	607a      	str	r2, [r7, #4]
 800dbde:	461a      	mov	r2, r3
 800dbe0:	460b      	mov	r3, r1
 800dbe2:	72fb      	strb	r3, [r7, #11]
 800dbe4:	4613      	mov	r3, r2
 800dbe6:	72bb      	strb	r3, [r7, #10]
  u8_t i;

  if (oid_len != oid_ranges_len) {
 800dbe8:	7afa      	ldrb	r2, [r7, #11]
 800dbea:	7abb      	ldrb	r3, [r7, #10]
 800dbec:	429a      	cmp	r2, r3
 800dbee:	d001      	beq.n	800dbf4 <snmp_oid_in_range+0x20>
    return 0;
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	e024      	b.n	800dc3e <snmp_oid_in_range+0x6a>
  }

  for (i = 0; i < oid_ranges_len; i++) {
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	75fb      	strb	r3, [r7, #23]
 800dbf8:	e01c      	b.n	800dc34 <snmp_oid_in_range+0x60>
    if ((oid_in[i] < oid_ranges[i].min) || (oid_in[i] > oid_ranges[i].max)) {
 800dbfa:	7dfb      	ldrb	r3, [r7, #23]
 800dbfc:	009b      	lsls	r3, r3, #2
 800dbfe:	68fa      	ldr	r2, [r7, #12]
 800dc00:	4413      	add	r3, r2
 800dc02:	681a      	ldr	r2, [r3, #0]
 800dc04:	7dfb      	ldrb	r3, [r7, #23]
 800dc06:	00db      	lsls	r3, r3, #3
 800dc08:	6879      	ldr	r1, [r7, #4]
 800dc0a:	440b      	add	r3, r1
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	429a      	cmp	r2, r3
 800dc10:	d30b      	bcc.n	800dc2a <snmp_oid_in_range+0x56>
 800dc12:	7dfb      	ldrb	r3, [r7, #23]
 800dc14:	009b      	lsls	r3, r3, #2
 800dc16:	68fa      	ldr	r2, [r7, #12]
 800dc18:	4413      	add	r3, r2
 800dc1a:	681a      	ldr	r2, [r3, #0]
 800dc1c:	7dfb      	ldrb	r3, [r7, #23]
 800dc1e:	00db      	lsls	r3, r3, #3
 800dc20:	6879      	ldr	r1, [r7, #4]
 800dc22:	440b      	add	r3, r1
 800dc24:	685b      	ldr	r3, [r3, #4]
 800dc26:	429a      	cmp	r2, r3
 800dc28:	d901      	bls.n	800dc2e <snmp_oid_in_range+0x5a>
      return 0;
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	e007      	b.n	800dc3e <snmp_oid_in_range+0x6a>
  for (i = 0; i < oid_ranges_len; i++) {
 800dc2e:	7dfb      	ldrb	r3, [r7, #23]
 800dc30:	3301      	adds	r3, #1
 800dc32:	75fb      	strb	r3, [r7, #23]
 800dc34:	7dfa      	ldrb	r2, [r7, #23]
 800dc36:	7abb      	ldrb	r3, [r7, #10]
 800dc38:	429a      	cmp	r2, r3
 800dc3a:	d3de      	bcc.n	800dbfa <snmp_oid_in_range+0x26>
    }
  }

  return 1;
 800dc3c:	2301      	movs	r3, #1
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	371c      	adds	r7, #28
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bc80      	pop	{r7}
 800dc46:	4770      	bx	lr

0800dc48 <icmp_get_value>:

/* --- icmp .1.3.6.1.2.1.5 ----------------------------------------------------- */

static s16_t
icmp_get_value(const struct snmp_scalar_array_node_def *node, void *value)
{
 800dc48:	b480      	push	{r7}
 800dc4a:	b085      	sub	sp, #20
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
 800dc50:	6039      	str	r1, [r7, #0]
  u32_t *uint_ptr = (u32_t*)value;
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	60fb      	str	r3, [r7, #12]

  switch (node->oid) {
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	3b01      	subs	r3, #1
 800dc5c:	2b19      	cmp	r3, #25
 800dc5e:	f200 80df 	bhi.w	800de20 <icmp_get_value+0x1d8>
 800dc62:	a201      	add	r2, pc, #4	@ (adr r2, 800dc68 <icmp_get_value+0x20>)
 800dc64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc68:	0800dcd1 	.word	0x0800dcd1
 800dc6c:	0800dcdf 	.word	0x0800dcdf
 800dc70:	0800dced 	.word	0x0800dced
 800dc74:	0800dcfb 	.word	0x0800dcfb
 800dc78:	0800dd09 	.word	0x0800dd09
 800dc7c:	0800dd17 	.word	0x0800dd17
 800dc80:	0800dd25 	.word	0x0800dd25
 800dc84:	0800dd33 	.word	0x0800dd33
 800dc88:	0800dd41 	.word	0x0800dd41
 800dc8c:	0800dd4f 	.word	0x0800dd4f
 800dc90:	0800dd5d 	.word	0x0800dd5d
 800dc94:	0800dd6b 	.word	0x0800dd6b
 800dc98:	0800dd79 	.word	0x0800dd79
 800dc9c:	0800dd87 	.word	0x0800dd87
 800dca0:	0800dd95 	.word	0x0800dd95
 800dca4:	0800dda3 	.word	0x0800dda3
 800dca8:	0800ddb1 	.word	0x0800ddb1
 800dcac:	0800ddbf 	.word	0x0800ddbf
 800dcb0:	0800ddc9 	.word	0x0800ddc9
 800dcb4:	0800ddd3 	.word	0x0800ddd3
 800dcb8:	0800dddd 	.word	0x0800dddd
 800dcbc:	0800ddeb 	.word	0x0800ddeb
 800dcc0:	0800ddf9 	.word	0x0800ddf9
 800dcc4:	0800de03 	.word	0x0800de03
 800dcc8:	0800de0d 	.word	0x0800de0d
 800dccc:	0800de17 	.word	0x0800de17
  case 1: /* icmpInMsgs */
    *uint_ptr = STATS_GET(mib2.icmpinmsgs);
 800dcd0:	4b57      	ldr	r3, [pc, #348]	@ (800de30 <icmp_get_value+0x1e8>)
 800dcd2:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800dcda:	2304      	movs	r3, #4
 800dcdc:	e0a2      	b.n	800de24 <icmp_get_value+0x1dc>
  case 2: /* icmpInErrors */
    *uint_ptr = STATS_GET(mib2.icmpinerrors);
 800dcde:	4b54      	ldr	r3, [pc, #336]	@ (800de30 <icmp_get_value+0x1e8>)
 800dce0:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800dce8:	2304      	movs	r3, #4
 800dcea:	e09b      	b.n	800de24 <icmp_get_value+0x1dc>
  case 3: /* icmpInDestUnreachs */
    *uint_ptr = STATS_GET(mib2.icmpindestunreachs);
 800dcec:	4b50      	ldr	r3, [pc, #320]	@ (800de30 <icmp_get_value+0x1e8>)
 800dcee:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800dcf6:	2304      	movs	r3, #4
 800dcf8:	e094      	b.n	800de24 <icmp_get_value+0x1dc>
  case 4: /* icmpInTimeExcds */
    *uint_ptr = STATS_GET(mib2.icmpintimeexcds);
 800dcfa:	4b4d      	ldr	r3, [pc, #308]	@ (800de30 <icmp_get_value+0x1e8>)
 800dcfc:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800dd04:	2304      	movs	r3, #4
 800dd06:	e08d      	b.n	800de24 <icmp_get_value+0x1dc>
  case 5: /* icmpInParmProbs */
    *uint_ptr = STATS_GET(mib2.icmpinparmprobs);
 800dd08:	4b49      	ldr	r3, [pc, #292]	@ (800de30 <icmp_get_value+0x1e8>)
 800dd0a:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800dd12:	2304      	movs	r3, #4
 800dd14:	e086      	b.n	800de24 <icmp_get_value+0x1dc>
  case 6: /* icmpInSrcQuenchs */
    *uint_ptr = STATS_GET(mib2.icmpinsrcquenchs);
 800dd16:	4b46      	ldr	r3, [pc, #280]	@ (800de30 <icmp_get_value+0x1e8>)
 800dd18:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800dd20:	2304      	movs	r3, #4
 800dd22:	e07f      	b.n	800de24 <icmp_get_value+0x1dc>
  case 7: /* icmpInRedirects */
    *uint_ptr = STATS_GET(mib2.icmpinredirects);
 800dd24:	4b42      	ldr	r3, [pc, #264]	@ (800de30 <icmp_get_value+0x1e8>)
 800dd26:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800dd2e:	2304      	movs	r3, #4
 800dd30:	e078      	b.n	800de24 <icmp_get_value+0x1dc>
  case 8: /* icmpInEchos */
    *uint_ptr = STATS_GET(mib2.icmpinechos);
 800dd32:	4b3f      	ldr	r3, [pc, #252]	@ (800de30 <icmp_get_value+0x1e8>)
 800dd34:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800dd3c:	2304      	movs	r3, #4
 800dd3e:	e071      	b.n	800de24 <icmp_get_value+0x1dc>
  case 9: /* icmpInEchoReps */
    *uint_ptr = STATS_GET(mib2.icmpinechoreps);
 800dd40:	4b3b      	ldr	r3, [pc, #236]	@ (800de30 <icmp_get_value+0x1e8>)
 800dd42:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800dd4a:	2304      	movs	r3, #4
 800dd4c:	e06a      	b.n	800de24 <icmp_get_value+0x1dc>
  case 10: /* icmpInTimestamps */
    *uint_ptr = STATS_GET(mib2.icmpintimestamps);
 800dd4e:	4b38      	ldr	r3, [pc, #224]	@ (800de30 <icmp_get_value+0x1e8>)
 800dd50:	f8d3 2170 	ldr.w	r2, [r3, #368]	@ 0x170
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800dd58:	2304      	movs	r3, #4
 800dd5a:	e063      	b.n	800de24 <icmp_get_value+0x1dc>
  case 11: /* icmpInTimestampReps */
    *uint_ptr = STATS_GET(mib2.icmpintimestampreps);
 800dd5c:	4b34      	ldr	r3, [pc, #208]	@ (800de30 <icmp_get_value+0x1e8>)
 800dd5e:	f8d3 2174 	ldr.w	r2, [r3, #372]	@ 0x174
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800dd66:	2304      	movs	r3, #4
 800dd68:	e05c      	b.n	800de24 <icmp_get_value+0x1dc>
  case 12: /* icmpInAddrMasks */
    *uint_ptr = STATS_GET(mib2.icmpinaddrmasks);
 800dd6a:	4b31      	ldr	r3, [pc, #196]	@ (800de30 <icmp_get_value+0x1e8>)
 800dd6c:	f8d3 2178 	ldr.w	r2, [r3, #376]	@ 0x178
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800dd74:	2304      	movs	r3, #4
 800dd76:	e055      	b.n	800de24 <icmp_get_value+0x1dc>
  case 13: /* icmpInAddrMaskReps */
    *uint_ptr = STATS_GET(mib2.icmpinaddrmaskreps);
 800dd78:	4b2d      	ldr	r3, [pc, #180]	@ (800de30 <icmp_get_value+0x1e8>)
 800dd7a:	f8d3 217c 	ldr.w	r2, [r3, #380]	@ 0x17c
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800dd82:	2304      	movs	r3, #4
 800dd84:	e04e      	b.n	800de24 <icmp_get_value+0x1dc>
  case 14: /* icmpOutMsgs */
    *uint_ptr = STATS_GET(mib2.icmpoutmsgs);
 800dd86:	4b2a      	ldr	r3, [pc, #168]	@ (800de30 <icmp_get_value+0x1e8>)
 800dd88:	f8d3 2180 	ldr.w	r2, [r3, #384]	@ 0x180
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800dd90:	2304      	movs	r3, #4
 800dd92:	e047      	b.n	800de24 <icmp_get_value+0x1dc>
  case 15: /* icmpOutErrors */
    *uint_ptr = STATS_GET(mib2.icmpouterrors);
 800dd94:	4b26      	ldr	r3, [pc, #152]	@ (800de30 <icmp_get_value+0x1e8>)
 800dd96:	f8d3 2184 	ldr.w	r2, [r3, #388]	@ 0x184
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800dd9e:	2304      	movs	r3, #4
 800dda0:	e040      	b.n	800de24 <icmp_get_value+0x1dc>
  case 16: /* icmpOutDestUnreachs */
    *uint_ptr = STATS_GET(mib2.icmpoutdestunreachs);
 800dda2:	4b23      	ldr	r3, [pc, #140]	@ (800de30 <icmp_get_value+0x1e8>)
 800dda4:	f8d3 2188 	ldr.w	r2, [r3, #392]	@ 0x188
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ddac:	2304      	movs	r3, #4
 800ddae:	e039      	b.n	800de24 <icmp_get_value+0x1dc>
  case 17: /* icmpOutTimeExcds */
    *uint_ptr = STATS_GET(mib2.icmpouttimeexcds);
 800ddb0:	4b1f      	ldr	r3, [pc, #124]	@ (800de30 <icmp_get_value+0x1e8>)
 800ddb2:	f8d3 218c 	ldr.w	r2, [r3, #396]	@ 0x18c
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ddba:	2304      	movs	r3, #4
 800ddbc:	e032      	b.n	800de24 <icmp_get_value+0x1dc>
  case 18: /* icmpOutParmProbs: not supported -> always 0 */
    *uint_ptr = 0;
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ddc4:	2304      	movs	r3, #4
 800ddc6:	e02d      	b.n	800de24 <icmp_get_value+0x1dc>
  case 19: /* icmpOutSrcQuenchs: not supported -> always 0 */
    *uint_ptr = 0;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	2200      	movs	r2, #0
 800ddcc:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ddce:	2304      	movs	r3, #4
 800ddd0:	e028      	b.n	800de24 <icmp_get_value+0x1dc>
  case 20: /* icmpOutRedirects: not supported -> always 0 */
    *uint_ptr = 0;
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ddd8:	2304      	movs	r3, #4
 800ddda:	e023      	b.n	800de24 <icmp_get_value+0x1dc>
  case 21: /* icmpOutEchos */
    *uint_ptr = STATS_GET(mib2.icmpoutechos);
 800dddc:	4b14      	ldr	r3, [pc, #80]	@ (800de30 <icmp_get_value+0x1e8>)
 800ddde:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800dde6:	2304      	movs	r3, #4
 800dde8:	e01c      	b.n	800de24 <icmp_get_value+0x1dc>
  case 22: /* icmpOutEchoReps */
    *uint_ptr = STATS_GET(mib2.icmpoutechoreps);
 800ddea:	4b11      	ldr	r3, [pc, #68]	@ (800de30 <icmp_get_value+0x1e8>)
 800ddec:	f8d3 2194 	ldr.w	r2, [r3, #404]	@ 0x194
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ddf4:	2304      	movs	r3, #4
 800ddf6:	e015      	b.n	800de24 <icmp_get_value+0x1dc>
  case 23: /* icmpOutTimestamps: not supported -> always 0 */
    *uint_ptr = 0;
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800ddfe:	2304      	movs	r3, #4
 800de00:	e010      	b.n	800de24 <icmp_get_value+0x1dc>
  case 24: /* icmpOutTimestampReps: not supported -> always 0 */
    *uint_ptr = 0;
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	2200      	movs	r2, #0
 800de06:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800de08:	2304      	movs	r3, #4
 800de0a:	e00b      	b.n	800de24 <icmp_get_value+0x1dc>
  case 25: /* icmpOutAddrMasks: not supported -> always 0 */
    *uint_ptr = 0;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	2200      	movs	r2, #0
 800de10:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800de12:	2304      	movs	r3, #4
 800de14:	e006      	b.n	800de24 <icmp_get_value+0x1dc>
  case 26: /* icmpOutAddrMaskReps: not supported -> always 0 */
    *uint_ptr = 0;
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	2200      	movs	r2, #0
 800de1a:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800de1c:	2304      	movs	r3, #4
 800de1e:	e001      	b.n	800de24 <icmp_get_value+0x1dc>
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("icmp_get_value(): unknown id: %"S32_F"\n", node->oid));
    break;
 800de20:	bf00      	nop
  }

  return 0;
 800de22:	2300      	movs	r3, #0
}
 800de24:	4618      	mov	r0, r3
 800de26:	3714      	adds	r7, #20
 800de28:	46bd      	mov	sp, r7
 800de2a:	bc80      	pop	{r7}
 800de2c:	4770      	bx	lr
 800de2e:	bf00      	nop
 800de30:	2000db84 	.word	0x2000db84

0800de34 <interfaces_get_value>:

/* --- interfaces .1.3.6.1.2.1.2 ----------------------------------------------------- */

static s16_t
interfaces_get_value(struct snmp_node_instance* instance, void* value)
{
 800de34:	b480      	push	{r7}
 800de36:	b087      	sub	sp, #28
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
 800de3c:	6039      	str	r1, [r7, #0]
  if (instance->node->oid == 1) {
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	685b      	ldr	r3, [r3, #4]
 800de44:	2b01      	cmp	r3, #1
 800de46:	d115      	bne.n	800de74 <interfaces_get_value+0x40>
    s32_t *sint_ptr = (s32_t*)value;
 800de48:	683b      	ldr	r3, [r7, #0]
 800de4a:	60fb      	str	r3, [r7, #12]
    s32_t num_netifs = 0;
 800de4c:	2300      	movs	r3, #0
 800de4e:	617b      	str	r3, [r7, #20]

    struct netif *netif = netif_list;
 800de50:	4b0b      	ldr	r3, [pc, #44]	@ (800de80 <interfaces_get_value+0x4c>)
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	613b      	str	r3, [r7, #16]
    while (netif != NULL) {
 800de56:	e005      	b.n	800de64 <interfaces_get_value+0x30>
      num_netifs++;
 800de58:	697b      	ldr	r3, [r7, #20]
 800de5a:	3301      	adds	r3, #1
 800de5c:	617b      	str	r3, [r7, #20]
      netif = netif->next;
 800de5e:	693b      	ldr	r3, [r7, #16]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	613b      	str	r3, [r7, #16]
    while (netif != NULL) {
 800de64:	693b      	ldr	r3, [r7, #16]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d1f6      	bne.n	800de58 <interfaces_get_value+0x24>
    }

    *sint_ptr = num_netifs;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	697a      	ldr	r2, [r7, #20]
 800de6e:	601a      	str	r2, [r3, #0]
    return sizeof(*sint_ptr);
 800de70:	2304      	movs	r3, #4
 800de72:	e000      	b.n	800de76 <interfaces_get_value+0x42>
  }

  return 0;
 800de74:	2300      	movs	r3, #0
}
 800de76:	4618      	mov	r0, r3
 800de78:	371c      	adds	r7, #28
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bc80      	pop	{r7}
 800de7e:	4770      	bx	lr
 800de80:	2000db78 	.word	0x2000db78

0800de84 <interfaces_Table_get_cell_instance>:
static const u8_t iftable_ifAdminStatus_lowerLayerDown = 7;
static const u8_t iftable_ifAdminStatus_down           = 2;

static snmp_err_t
interfaces_Table_get_cell_instance(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, struct snmp_node_instance* cell_instance)
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b086      	sub	sp, #24
 800de88:	af00      	add	r7, sp, #0
 800de8a:	60f8      	str	r0, [r7, #12]
 800de8c:	60b9      	str	r1, [r7, #8]
 800de8e:	603b      	str	r3, [r7, #0]
 800de90:	4613      	mov	r3, r2
 800de92:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_UNUSED_ARG(column);

  /* check if incoming OID length and if values are in plausible range */
  if (!snmp_oid_in_range(row_oid, row_oid_len, interfaces_Table_oid_ranges, LWIP_ARRAYSIZE(interfaces_Table_oid_ranges))) {
 800de94:	79f9      	ldrb	r1, [r7, #7]
 800de96:	2301      	movs	r3, #1
 800de98:	4a14      	ldr	r2, [pc, #80]	@ (800deec <interfaces_Table_get_cell_instance+0x68>)
 800de9a:	68b8      	ldr	r0, [r7, #8]
 800de9c:	f7ff fe9a 	bl	800dbd4 <snmp_oid_in_range>
 800dea0:	4603      	mov	r3, r0
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d101      	bne.n	800deaa <interfaces_Table_get_cell_instance+0x26>
    return SNMP_ERR_NOSUCHINSTANCE;
 800dea6:	23f1      	movs	r3, #241	@ 0xf1
 800dea8:	e01b      	b.n	800dee2 <interfaces_Table_get_cell_instance+0x5e>
  }

  /* get netif index from incoming OID */
  ifIndex = row_oid[0];
 800deaa:	68bb      	ldr	r3, [r7, #8]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	613b      	str	r3, [r7, #16]

  /* find netif with index */
  netif = netif_list;
 800deb0:	4b0f      	ldr	r3, [pc, #60]	@ (800def0 <interfaces_Table_get_cell_instance+0x6c>)
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	617b      	str	r3, [r7, #20]
  while (netif != NULL) {
 800deb6:	e010      	b.n	800deda <interfaces_Table_get_cell_instance+0x56>
    if (netif_to_num(netif) == ifIndex) {
 800deb8:	6978      	ldr	r0, [r7, #20]
 800deba:	f7ff f967 	bl	800d18c <netif_to_num>
 800debe:	4603      	mov	r3, r0
 800dec0:	461a      	mov	r2, r3
 800dec2:	693b      	ldr	r3, [r7, #16]
 800dec4:	4293      	cmp	r3, r2
 800dec6:	d105      	bne.n	800ded4 <interfaces_Table_get_cell_instance+0x50>
      /* store netif pointer for subsequent operations (get/test/set) */
      cell_instance->reference.ptr = netif;
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	697a      	ldr	r2, [r7, #20]
 800decc:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
      return SNMP_ERR_NOERROR;
 800ded0:	2300      	movs	r3, #0
 800ded2:	e006      	b.n	800dee2 <interfaces_Table_get_cell_instance+0x5e>
    }
    netif = netif->next;
 800ded4:	697b      	ldr	r3, [r7, #20]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	617b      	str	r3, [r7, #20]
  while (netif != NULL) {
 800deda:	697b      	ldr	r3, [r7, #20]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d1eb      	bne.n	800deb8 <interfaces_Table_get_cell_instance+0x34>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 800dee0:	23f1      	movs	r3, #241	@ 0xf1
}
 800dee2:	4618      	mov	r0, r3
 800dee4:	3718      	adds	r7, #24
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}
 800deea:	bf00      	nop
 800deec:	0802e26c 	.word	0x0802e26c
 800def0:	2000db78 	.word	0x2000db78

0800def4 <interfaces_Table_get_next_cell_instance>:

static snmp_err_t
interfaces_Table_get_next_cell_instance(const u32_t* column, struct snmp_obj_id* row_oid, struct snmp_node_instance* cell_instance)
{
 800def4:	b590      	push	{r4, r7, lr}
 800def6:	b08f      	sub	sp, #60	@ 0x3c
 800def8:	af02      	add	r7, sp, #8
 800defa:	60f8      	str	r0, [r7, #12]
 800defc:	60b9      	str	r1, [r7, #8]
 800defe:	607a      	str	r2, [r7, #4]
  u32_t result_temp[LWIP_ARRAYSIZE(interfaces_Table_oid_ranges)];

  LWIP_UNUSED_ARG(column);

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(interfaces_Table_oid_ranges));
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	1d19      	adds	r1, r3, #4
 800df04:	68bb      	ldr	r3, [r7, #8]
 800df06:	781a      	ldrb	r2, [r3, #0]
 800df08:	f107 0314 	add.w	r3, r7, #20
 800df0c:	f107 0018 	add.w	r0, r7, #24
 800df10:	2401      	movs	r4, #1
 800df12:	9400      	str	r4, [sp, #0]
 800df14:	f7ff fdf9 	bl	800db0a <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  netif = netif_list;
 800df18:	4b16      	ldr	r3, [pc, #88]	@ (800df74 <interfaces_Table_get_next_cell_instance+0x80>)
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (netif != NULL) {
 800df1e:	e00f      	b.n	800df40 <interfaces_Table_get_next_cell_instance+0x4c>
    u32_t test_oid[LWIP_ARRAYSIZE(interfaces_Table_oid_ranges)];
    test_oid[0] = netif_to_num(netif);
 800df20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800df22:	f7ff f933 	bl	800d18c <netif_to_num>
 800df26:	4603      	mov	r3, r0
 800df28:	613b      	str	r3, [r7, #16]

    /* check generated OID: is it a candidate for the next one? */
    snmp_next_oid_check(&state, test_oid, LWIP_ARRAYSIZE(interfaces_Table_oid_ranges), netif);
 800df2a:	f107 0110 	add.w	r1, r7, #16
 800df2e:	f107 0018 	add.w	r0, r7, #24
 800df32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df34:	2201      	movs	r2, #1
 800df36:	f7ff fe07 	bl	800db48 <snmp_next_oid_check>

    netif = netif->next;
 800df3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (netif != NULL) {
 800df40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df42:	2b00      	cmp	r3, #0
 800df44:	d1ec      	bne.n	800df20 <interfaces_Table_get_next_cell_instance+0x2c>
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 800df46:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d10c      	bne.n	800df68 <interfaces_Table_get_next_cell_instance+0x74>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 800df4e:	6a3b      	ldr	r3, [r7, #32]
 800df50:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800df54:	4619      	mov	r1, r3
 800df56:	68b8      	ldr	r0, [r7, #8]
 800df58:	f7ff f854 	bl	800d004 <snmp_oid_assign>
    /* store netif pointer for subsequent operations (get/test/set) */
    cell_instance->reference.ptr = /* (struct netif*) */state.reference;
 800df5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    return SNMP_ERR_NOERROR;
 800df64:	2300      	movs	r3, #0
 800df66:	e000      	b.n	800df6a <interfaces_Table_get_next_cell_instance+0x76>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 800df68:	23f1      	movs	r3, #241	@ 0xf1
}
 800df6a:	4618      	mov	r0, r3
 800df6c:	3734      	adds	r7, #52	@ 0x34
 800df6e:	46bd      	mov	sp, r7
 800df70:	bd90      	pop	{r4, r7, pc}
 800df72:	bf00      	nop
 800df74:	2000db78 	.word	0x2000db78

0800df78 <interfaces_Table_get_value>:

static s16_t
interfaces_Table_get_value(struct snmp_node_instance* instance, void* value)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b086      	sub	sp, #24
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
 800df80:	6039      	str	r1, [r7, #0]
  struct netif *netif = (struct netif*)instance->reference.ptr;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800df88:	613b      	str	r3, [r7, #16]
  u32_t* value_u32 = (u32_t*)value;
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	60fb      	str	r3, [r7, #12]
  s32_t* value_s32 = (s32_t*)value;
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	60bb      	str	r3, [r7, #8]
  u16_t value_len;

  switch (SNMP_TABLE_GET_COLUMN_FROM_OID(instance->instance_oid.id))
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	68db      	ldr	r3, [r3, #12]
 800df96:	3b01      	subs	r3, #1
 800df98:	2b15      	cmp	r3, #21
 800df9a:	f200 8102 	bhi.w	800e1a2 <interfaces_Table_get_value+0x22a>
 800df9e:	a201      	add	r2, pc, #4	@ (adr r2, 800dfa4 <interfaces_Table_get_value+0x2c>)
 800dfa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfa4:	0800dffd 	.word	0x0800dffd
 800dfa8:	0800e011 	.word	0x0800e011
 800dfac:	0800e025 	.word	0x0800e025
 800dfb0:	0800e037 	.word	0x0800e037
 800dfb4:	0800e047 	.word	0x0800e047
 800dfb8:	0800e055 	.word	0x0800e055
 800dfbc:	0800e069 	.word	0x0800e069
 800dfc0:	0800e091 	.word	0x0800e091
 800dfc4:	0800e0d5 	.word	0x0800e0d5
 800dfc8:	0800e0e3 	.word	0x0800e0e3
 800dfcc:	0800e0f1 	.word	0x0800e0f1
 800dfd0:	0800e0ff 	.word	0x0800e0ff
 800dfd4:	0800e10d 	.word	0x0800e10d
 800dfd8:	0800e11b 	.word	0x0800e11b
 800dfdc:	0800e129 	.word	0x0800e129
 800dfe0:	0800e137 	.word	0x0800e137
 800dfe4:	0800e145 	.word	0x0800e145
 800dfe8:	0800e153 	.word	0x0800e153
 800dfec:	0800e161 	.word	0x0800e161
 800dff0:	0800e16f 	.word	0x0800e16f
 800dff4:	0800e17d 	.word	0x0800e17d
 800dff8:	0800e18b 	.word	0x0800e18b
  {
  case 1: /* ifIndex */
    *value_s32 = netif_to_num(netif);
 800dffc:	6938      	ldr	r0, [r7, #16]
 800dffe:	f7ff f8c5 	bl	800d18c <netif_to_num>
 800e002:	4603      	mov	r3, r0
 800e004:	461a      	mov	r2, r3
 800e006:	68bb      	ldr	r3, [r7, #8]
 800e008:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_s32);
 800e00a:	2304      	movs	r3, #4
 800e00c:	82fb      	strh	r3, [r7, #22]
    break;
 800e00e:	e0ca      	b.n	800e1a6 <interfaces_Table_get_value+0x22e>
  case 2: /* ifDescr */
    value_len = sizeof(netif->name);
 800e010:	2302      	movs	r3, #2
 800e012:	82fb      	strh	r3, [r7, #22]
    MEMCPY(value, netif->name, value_len);
 800e014:	693b      	ldr	r3, [r7, #16]
 800e016:	3334      	adds	r3, #52	@ 0x34
 800e018:	8afa      	ldrh	r2, [r7, #22]
 800e01a:	4619      	mov	r1, r3
 800e01c:	6838      	ldr	r0, [r7, #0]
 800e01e:	f012 fcd4 	bl	80209ca <memcpy>
    break;
 800e022:	e0c0      	b.n	800e1a6 <interfaces_Table_get_value+0x22e>
  case 3: /* ifType */
    *value_s32 = netif->link_type;
 800e024:	693b      	ldr	r3, [r7, #16]
 800e026:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 800e02a:	461a      	mov	r2, r3
 800e02c:	68bb      	ldr	r3, [r7, #8]
 800e02e:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_s32);
 800e030:	2304      	movs	r3, #4
 800e032:	82fb      	strh	r3, [r7, #22]
    break;
 800e034:	e0b7      	b.n	800e1a6 <interfaces_Table_get_value+0x22e>
  case 4: /* ifMtu */
    *value_s32 = netif->mtu;
 800e036:	693b      	ldr	r3, [r7, #16]
 800e038:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e03a:	461a      	mov	r2, r3
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_s32);
 800e040:	2304      	movs	r3, #4
 800e042:	82fb      	strh	r3, [r7, #22]
    break;
 800e044:	e0af      	b.n	800e1a6 <interfaces_Table_get_value+0x22e>
  case 5: /* ifSpeed */
    *value_u32 = netif->link_speed;
 800e046:	693b      	ldr	r3, [r7, #16]
 800e048:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800e04e:	2304      	movs	r3, #4
 800e050:	82fb      	strh	r3, [r7, #22]
    break;
 800e052:	e0a8      	b.n	800e1a6 <interfaces_Table_get_value+0x22e>
  case 6: /* ifPhysAddress */
    value_len = sizeof(netif->hwaddr);
 800e054:	2306      	movs	r3, #6
 800e056:	82fb      	strh	r3, [r7, #22]
    MEMCPY(value, &netif->hwaddr, value_len);
 800e058:	693b      	ldr	r3, [r7, #16]
 800e05a:	332d      	adds	r3, #45	@ 0x2d
 800e05c:	8afa      	ldrh	r2, [r7, #22]
 800e05e:	4619      	mov	r1, r3
 800e060:	6838      	ldr	r0, [r7, #0]
 800e062:	f012 fcb2 	bl	80209ca <memcpy>
    break;
 800e066:	e09e      	b.n	800e1a6 <interfaces_Table_get_value+0x22e>
  case 7: /* ifAdminStatus */
    if (netif_is_up(netif)) {
 800e068:	693b      	ldr	r3, [r7, #16]
 800e06a:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800e06e:	f003 0301 	and.w	r3, r3, #1
 800e072:	b2db      	uxtb	r3, r3
 800e074:	2b00      	cmp	r3, #0
 800e076:	d004      	beq.n	800e082 <interfaces_Table_get_value+0x10a>
      *value_s32 = iftable_ifOperStatus_up;
 800e078:	2301      	movs	r3, #1
 800e07a:	461a      	mov	r2, r3
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	601a      	str	r2, [r3, #0]
 800e080:	e003      	b.n	800e08a <interfaces_Table_get_value+0x112>
    } else {
      *value_s32 = iftable_ifOperStatus_down;
 800e082:	2302      	movs	r3, #2
 800e084:	461a      	mov	r2, r3
 800e086:	68bb      	ldr	r3, [r7, #8]
 800e088:	601a      	str	r2, [r3, #0]
    }
    value_len = sizeof(*value_s32);
 800e08a:	2304      	movs	r3, #4
 800e08c:	82fb      	strh	r3, [r7, #22]
    break;
 800e08e:	e08a      	b.n	800e1a6 <interfaces_Table_get_value+0x22e>
  case 8: /* ifOperStatus */
    if (netif_is_up(netif)) {
 800e090:	693b      	ldr	r3, [r7, #16]
 800e092:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800e096:	f003 0301 	and.w	r3, r3, #1
 800e09a:	b2db      	uxtb	r3, r3
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d012      	beq.n	800e0c6 <interfaces_Table_get_value+0x14e>
      if (netif_is_link_up(netif)) {
 800e0a0:	693b      	ldr	r3, [r7, #16]
 800e0a2:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800e0a6:	089b      	lsrs	r3, r3, #2
 800e0a8:	f003 0301 	and.w	r3, r3, #1
 800e0ac:	b2db      	uxtb	r3, r3
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d004      	beq.n	800e0bc <interfaces_Table_get_value+0x144>
        *value_s32 = iftable_ifAdminStatus_up;
 800e0b2:	2301      	movs	r3, #1
 800e0b4:	461a      	mov	r2, r3
 800e0b6:	68bb      	ldr	r3, [r7, #8]
 800e0b8:	601a      	str	r2, [r3, #0]
 800e0ba:	e008      	b.n	800e0ce <interfaces_Table_get_value+0x156>
      } else {
        *value_s32 = iftable_ifAdminStatus_lowerLayerDown;
 800e0bc:	2307      	movs	r3, #7
 800e0be:	461a      	mov	r2, r3
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	601a      	str	r2, [r3, #0]
 800e0c4:	e003      	b.n	800e0ce <interfaces_Table_get_value+0x156>
      }
    } else {
      *value_s32 = iftable_ifAdminStatus_down;
 800e0c6:	2302      	movs	r3, #2
 800e0c8:	461a      	mov	r2, r3
 800e0ca:	68bb      	ldr	r3, [r7, #8]
 800e0cc:	601a      	str	r2, [r3, #0]
    }
    value_len = sizeof(*value_s32);
 800e0ce:	2304      	movs	r3, #4
 800e0d0:	82fb      	strh	r3, [r7, #22]
    break;
 800e0d2:	e068      	b.n	800e1a6 <interfaces_Table_get_value+0x22e>
  case 9: /* ifLastChange */
    *value_u32 = netif->ts;
 800e0d4:	693b      	ldr	r3, [r7, #16]
 800e0d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800e0dc:	2304      	movs	r3, #4
 800e0de:	82fb      	strh	r3, [r7, #22]
    break;
 800e0e0:	e061      	b.n	800e1a6 <interfaces_Table_get_value+0x22e>
  case 10: /* ifInOctets */
    *value_u32 = netif->mib2_counters.ifinoctets;
 800e0e2:	693b      	ldr	r3, [r7, #16]
 800e0e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800e0ea:	2304      	movs	r3, #4
 800e0ec:	82fb      	strh	r3, [r7, #22]
    break;
 800e0ee:	e05a      	b.n	800e1a6 <interfaces_Table_get_value+0x22e>
  case 11: /* ifInUcastPkts */
    *value_u32 = netif->mib2_counters.ifinucastpkts;
 800e0f0:	693b      	ldr	r3, [r7, #16]
 800e0f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800e0f8:	2304      	movs	r3, #4
 800e0fa:	82fb      	strh	r3, [r7, #22]
    break;
 800e0fc:	e053      	b.n	800e1a6 <interfaces_Table_get_value+0x22e>
  case 12: /* ifInNUcastPkts */
    *value_u32 = netif->mib2_counters.ifinnucastpkts;
 800e0fe:	693b      	ldr	r3, [r7, #16]
 800e100:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800e106:	2304      	movs	r3, #4
 800e108:	82fb      	strh	r3, [r7, #22]
    break;
 800e10a:	e04c      	b.n	800e1a6 <interfaces_Table_get_value+0x22e>
  case 13: /* ifInDiscards */
    *value_u32 = netif->mib2_counters.ifindiscards;
 800e10c:	693b      	ldr	r3, [r7, #16]
 800e10e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800e114:	2304      	movs	r3, #4
 800e116:	82fb      	strh	r3, [r7, #22]
    break;
 800e118:	e045      	b.n	800e1a6 <interfaces_Table_get_value+0x22e>
  case 14: /* ifInErrors */
    *value_u32 = netif->mib2_counters.ifinerrors;
 800e11a:	693b      	ldr	r3, [r7, #16]
 800e11c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800e122:	2304      	movs	r3, #4
 800e124:	82fb      	strh	r3, [r7, #22]
    break;
 800e126:	e03e      	b.n	800e1a6 <interfaces_Table_get_value+0x22e>
  case 15: /* ifInUnkownProtos */
    *value_u32 = netif->mib2_counters.ifinunknownprotos;
 800e128:	693b      	ldr	r3, [r7, #16]
 800e12a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800e130:	2304      	movs	r3, #4
 800e132:	82fb      	strh	r3, [r7, #22]
    break;
 800e134:	e037      	b.n	800e1a6 <interfaces_Table_get_value+0x22e>
  case 16: /* ifOutOctets */
    *value_u32 = netif->mib2_counters.ifoutoctets;
 800e136:	693b      	ldr	r3, [r7, #16]
 800e138:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800e13e:	2304      	movs	r3, #4
 800e140:	82fb      	strh	r3, [r7, #22]
    break;
 800e142:	e030      	b.n	800e1a6 <interfaces_Table_get_value+0x22e>
  case 17: /* ifOutUcastPkts */
    *value_u32 = netif->mib2_counters.ifoutucastpkts;
 800e144:	693b      	ldr	r3, [r7, #16]
 800e146:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800e14c:	2304      	movs	r3, #4
 800e14e:	82fb      	strh	r3, [r7, #22]
    break;
 800e150:	e029      	b.n	800e1a6 <interfaces_Table_get_value+0x22e>
  case 18: /* ifOutNUcastPkts */
    *value_u32 = netif->mib2_counters.ifoutnucastpkts;
 800e152:	693b      	ldr	r3, [r7, #16]
 800e154:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800e15a:	2304      	movs	r3, #4
 800e15c:	82fb      	strh	r3, [r7, #22]
    break;
 800e15e:	e022      	b.n	800e1a6 <interfaces_Table_get_value+0x22e>
  case 19: /* ifOutDiscarts */
    *value_u32 = netif->mib2_counters.ifoutdiscards;
 800e160:	693b      	ldr	r3, [r7, #16]
 800e162:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800e168:	2304      	movs	r3, #4
 800e16a:	82fb      	strh	r3, [r7, #22]
    break;
 800e16c:	e01b      	b.n	800e1a6 <interfaces_Table_get_value+0x22e>
  case 20: /* ifOutErrors */
    *value_u32 = netif->mib2_counters.ifouterrors;
 800e16e:	693b      	ldr	r3, [r7, #16]
 800e170:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800e176:	2304      	movs	r3, #4
 800e178:	82fb      	strh	r3, [r7, #22]
    break;
 800e17a:	e014      	b.n	800e1a6 <interfaces_Table_get_value+0x22e>
  case 21: /* ifOutQLen */
    *value_u32 = iftable_ifOutQLen;
 800e17c:	2300      	movs	r3, #0
 800e17e:	461a      	mov	r2, r3
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	601a      	str	r2, [r3, #0]
    value_len = sizeof(*value_u32);
 800e184:	2304      	movs	r3, #4
 800e186:	82fb      	strh	r3, [r7, #22]
    break;
 800e188:	e00d      	b.n	800e1a6 <interfaces_Table_get_value+0x22e>
  /** @note returning zeroDotZero (0.0) no media specific MIB support */
  case 22: /* ifSpecific */
    value_len = snmp_zero_dot_zero.len * sizeof(u32_t);
 800e18a:	4b0a      	ldr	r3, [pc, #40]	@ (800e1b4 <interfaces_Table_get_value+0x23c>)
 800e18c:	781b      	ldrb	r3, [r3, #0]
 800e18e:	009b      	lsls	r3, r3, #2
 800e190:	82fb      	strh	r3, [r7, #22]
    MEMCPY(value, snmp_zero_dot_zero.id, value_len);
 800e192:	4b08      	ldr	r3, [pc, #32]	@ (800e1b4 <interfaces_Table_get_value+0x23c>)
 800e194:	685b      	ldr	r3, [r3, #4]
 800e196:	8afa      	ldrh	r2, [r7, #22]
 800e198:	4619      	mov	r1, r3
 800e19a:	6838      	ldr	r0, [r7, #0]
 800e19c:	f012 fc15 	bl	80209ca <memcpy>
    break;
 800e1a0:	e001      	b.n	800e1a6 <interfaces_Table_get_value+0x22e>
  default:
    return 0;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	e001      	b.n	800e1aa <interfaces_Table_get_value+0x232>
  }

  return value_len;
 800e1a6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	3718      	adds	r7, #24
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bd80      	pop	{r7, pc}
 800e1b2:	bf00      	nop
 800e1b4:	0802e118 	.word	0x0802e118

0800e1b8 <ip_get_value>:
#if LWIP_IPV4
/* --- ip .1.3.6.1.2.1.4 ----------------------------------------------------- */

static s16_t
ip_get_value(struct snmp_node_instance* instance, void* value)
{
 800e1b8:	b480      	push	{r7}
 800e1ba:	b085      	sub	sp, #20
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
 800e1c0:	6039      	str	r1, [r7, #0]
  s32_t* sint_ptr = (s32_t*)value;
 800e1c2:	683b      	ldr	r3, [r7, #0]
 800e1c4:	60fb      	str	r3, [r7, #12]
  u32_t* uint_ptr = (u32_t*)value;
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	60bb      	str	r3, [r7, #8]

  switch (instance->node->oid) {
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	685b      	ldr	r3, [r3, #4]
 800e1d0:	3b01      	subs	r3, #1
 800e1d2:	2b16      	cmp	r3, #22
 800e1d4:	f200 80b6 	bhi.w	800e344 <ip_get_value+0x18c>
 800e1d8:	a201      	add	r2, pc, #4	@ (adr r2, 800e1e0 <ip_get_value+0x28>)
 800e1da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1de:	bf00      	nop
 800e1e0:	0800e23d 	.word	0x0800e23d
 800e1e4:	0800e247 	.word	0x0800e247
 800e1e8:	0800e251 	.word	0x0800e251
 800e1ec:	0800e25f 	.word	0x0800e25f
 800e1f0:	0800e26d 	.word	0x0800e26d
 800e1f4:	0800e27b 	.word	0x0800e27b
 800e1f8:	0800e289 	.word	0x0800e289
 800e1fc:	0800e297 	.word	0x0800e297
 800e200:	0800e2a5 	.word	0x0800e2a5
 800e204:	0800e2b3 	.word	0x0800e2b3
 800e208:	0800e2c1 	.word	0x0800e2c1
 800e20c:	0800e2cf 	.word	0x0800e2cf
 800e210:	0800e2dd 	.word	0x0800e2dd
 800e214:	0800e2e7 	.word	0x0800e2e7
 800e218:	0800e2f5 	.word	0x0800e2f5
 800e21c:	0800e303 	.word	0x0800e303
 800e220:	0800e311 	.word	0x0800e311
 800e224:	0800e31f 	.word	0x0800e31f
 800e228:	0800e32d 	.word	0x0800e32d
 800e22c:	0800e345 	.word	0x0800e345
 800e230:	0800e345 	.word	0x0800e345
 800e234:	0800e345 	.word	0x0800e345
 800e238:	0800e33b 	.word	0x0800e33b
#if IP_FORWARD
    /* forwarding */
    *sint_ptr = 1;
#else
    /* not-forwarding */
    *sint_ptr = 2;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	2202      	movs	r2, #2
 800e240:	601a      	str	r2, [r3, #0]
#endif
    return sizeof(*sint_ptr);
 800e242:	2304      	movs	r3, #4
 800e244:	e080      	b.n	800e348 <ip_get_value+0x190>
  case 2: /* ipDefaultTTL */
    *sint_ptr = IP_DEFAULT_TTL;
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	22ff      	movs	r2, #255	@ 0xff
 800e24a:	601a      	str	r2, [r3, #0]
    return sizeof(*sint_ptr);
 800e24c:	2304      	movs	r3, #4
 800e24e:	e07b      	b.n	800e348 <ip_get_value+0x190>
  case 3: /* ipInReceives */
    *uint_ptr = STATS_GET(mib2.ipinreceives);
 800e250:	4b40      	ldr	r3, [pc, #256]	@ (800e354 <ip_get_value+0x19c>)
 800e252:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800e256:	68bb      	ldr	r3, [r7, #8]
 800e258:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800e25a:	2304      	movs	r3, #4
 800e25c:	e074      	b.n	800e348 <ip_get_value+0x190>
  case 4: /* ipInHdrErrors */
    *uint_ptr = STATS_GET(mib2.ipinhdrerrors);
 800e25e:	4b3d      	ldr	r3, [pc, #244]	@ (800e354 <ip_get_value+0x19c>)
 800e260:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 800e264:	68bb      	ldr	r3, [r7, #8]
 800e266:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800e268:	2304      	movs	r3, #4
 800e26a:	e06d      	b.n	800e348 <ip_get_value+0x190>
  case 5: /* ipInAddrErrors */
    *uint_ptr = STATS_GET(mib2.ipinaddrerrors);
 800e26c:	4b39      	ldr	r3, [pc, #228]	@ (800e354 <ip_get_value+0x19c>)
 800e26e:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 800e272:	68bb      	ldr	r3, [r7, #8]
 800e274:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800e276:	2304      	movs	r3, #4
 800e278:	e066      	b.n	800e348 <ip_get_value+0x190>
  case 6: /* ipForwDatagrams */
    *uint_ptr = STATS_GET(mib2.ipforwdatagrams);
 800e27a:	4b36      	ldr	r3, [pc, #216]	@ (800e354 <ip_get_value+0x19c>)
 800e27c:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800e280:	68bb      	ldr	r3, [r7, #8]
 800e282:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800e284:	2304      	movs	r3, #4
 800e286:	e05f      	b.n	800e348 <ip_get_value+0x190>
  case 7: /* ipInUnknownProtos */
    *uint_ptr = STATS_GET(mib2.ipinunknownprotos);
 800e288:	4b32      	ldr	r3, [pc, #200]	@ (800e354 <ip_get_value+0x19c>)
 800e28a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800e28e:	68bb      	ldr	r3, [r7, #8]
 800e290:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800e292:	2304      	movs	r3, #4
 800e294:	e058      	b.n	800e348 <ip_get_value+0x190>
  case 8: /* ipInDiscards */
    *uint_ptr = STATS_GET(mib2.ipindiscards);
 800e296:	4b2f      	ldr	r3, [pc, #188]	@ (800e354 <ip_get_value+0x19c>)
 800e298:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 800e29c:	68bb      	ldr	r3, [r7, #8]
 800e29e:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800e2a0:	2304      	movs	r3, #4
 800e2a2:	e051      	b.n	800e348 <ip_get_value+0x190>
  case 9: /* ipInDelivers */
    *uint_ptr = STATS_GET(mib2.ipindelivers);
 800e2a4:	4b2b      	ldr	r3, [pc, #172]	@ (800e354 <ip_get_value+0x19c>)
 800e2a6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800e2aa:	68bb      	ldr	r3, [r7, #8]
 800e2ac:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800e2ae:	2304      	movs	r3, #4
 800e2b0:	e04a      	b.n	800e348 <ip_get_value+0x190>
  case 10: /* ipOutRequests */
    *uint_ptr = STATS_GET(mib2.ipoutrequests);
 800e2b2:	4b28      	ldr	r3, [pc, #160]	@ (800e354 <ip_get_value+0x19c>)
 800e2b4:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 800e2b8:	68bb      	ldr	r3, [r7, #8]
 800e2ba:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800e2bc:	2304      	movs	r3, #4
 800e2be:	e043      	b.n	800e348 <ip_get_value+0x190>
  case 11: /* ipOutDiscards */
    *uint_ptr = STATS_GET(mib2.ipoutdiscards);
 800e2c0:	4b24      	ldr	r3, [pc, #144]	@ (800e354 <ip_get_value+0x19c>)
 800e2c2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800e2c6:	68bb      	ldr	r3, [r7, #8]
 800e2c8:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800e2ca:	2304      	movs	r3, #4
 800e2cc:	e03c      	b.n	800e348 <ip_get_value+0x190>
  case 12: /* ipOutNoRoutes */
    *uint_ptr = STATS_GET(mib2.ipoutnoroutes);
 800e2ce:	4b21      	ldr	r3, [pc, #132]	@ (800e354 <ip_get_value+0x19c>)
 800e2d0:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 800e2d4:	68bb      	ldr	r3, [r7, #8]
 800e2d6:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800e2d8:	2304      	movs	r3, #4
 800e2da:	e035      	b.n	800e348 <ip_get_value+0x190>
  case 13: /* ipReasmTimeout */
#if IP_REASSEMBLY
    *sint_ptr = IP_REASS_MAXAGE;
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	2203      	movs	r2, #3
 800e2e0:	601a      	str	r2, [r3, #0]
#else
    *sint_ptr = 0;
#endif
    return sizeof(*sint_ptr);
 800e2e2:	2304      	movs	r3, #4
 800e2e4:	e030      	b.n	800e348 <ip_get_value+0x190>
  case 14: /* ipReasmReqds */
    *uint_ptr = STATS_GET(mib2.ipreasmreqds);
 800e2e6:	4b1b      	ldr	r3, [pc, #108]	@ (800e354 <ip_get_value+0x19c>)
 800e2e8:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 800e2ec:	68bb      	ldr	r3, [r7, #8]
 800e2ee:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800e2f0:	2304      	movs	r3, #4
 800e2f2:	e029      	b.n	800e348 <ip_get_value+0x190>
  case 15: /* ipReasmOKs */
    *uint_ptr = STATS_GET(mib2.ipreasmoks);
 800e2f4:	4b17      	ldr	r3, [pc, #92]	@ (800e354 <ip_get_value+0x19c>)
 800e2f6:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 800e2fa:	68bb      	ldr	r3, [r7, #8]
 800e2fc:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800e2fe:	2304      	movs	r3, #4
 800e300:	e022      	b.n	800e348 <ip_get_value+0x190>
  case 16: /* ipReasmFails */
    *uint_ptr = STATS_GET(mib2.ipreasmfails);
 800e302:	4b14      	ldr	r3, [pc, #80]	@ (800e354 <ip_get_value+0x19c>)
 800e304:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
 800e308:	68bb      	ldr	r3, [r7, #8]
 800e30a:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800e30c:	2304      	movs	r3, #4
 800e30e:	e01b      	b.n	800e348 <ip_get_value+0x190>
  case 17: /* ipFragOKs */
    *uint_ptr = STATS_GET(mib2.ipfragoks);
 800e310:	4b10      	ldr	r3, [pc, #64]	@ (800e354 <ip_get_value+0x19c>)
 800e312:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 800e316:	68bb      	ldr	r3, [r7, #8]
 800e318:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800e31a:	2304      	movs	r3, #4
 800e31c:	e014      	b.n	800e348 <ip_get_value+0x190>
  case 18: /* ipFragFails */
    *uint_ptr = STATS_GET(mib2.ipfragfails);
 800e31e:	4b0d      	ldr	r3, [pc, #52]	@ (800e354 <ip_get_value+0x19c>)
 800e320:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800e324:	68bb      	ldr	r3, [r7, #8]
 800e326:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800e328:	2304      	movs	r3, #4
 800e32a:	e00d      	b.n	800e348 <ip_get_value+0x190>
  case 19: /* ipFragCreates */
    *uint_ptr = STATS_GET(mib2.ipfragcreates);
 800e32c:	4b09      	ldr	r3, [pc, #36]	@ (800e354 <ip_get_value+0x19c>)
 800e32e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800e332:	68bb      	ldr	r3, [r7, #8]
 800e334:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800e336:	2304      	movs	r3, #4
 800e338:	e006      	b.n	800e348 <ip_get_value+0x190>
  case 23: /* ipRoutingDiscards: not supported -> always 0 */
    *uint_ptr = 0;
 800e33a:	68bb      	ldr	r3, [r7, #8]
 800e33c:	2200      	movs	r2, #0
 800e33e:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800e340:	2304      	movs	r3, #4
 800e342:	e001      	b.n	800e348 <ip_get_value+0x190>
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("ip_get_value(): unknown id: %"S32_F"\n", instance->node->oid));
    break;
 800e344:	bf00      	nop
  }

  return 0;
 800e346:	2300      	movs	r3, #0
}
 800e348:	4618      	mov	r0, r3
 800e34a:	3714      	adds	r7, #20
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bc80      	pop	{r7}
 800e350:	4770      	bx	lr
 800e352:	bf00      	nop
 800e354:	2000db84 	.word	0x2000db84

0800e358 <ip_set_test>:
 * @note we allow set if the value matches the hardwired value,
 *   otherwise return badvalue.
 */
static snmp_err_t
ip_set_test(struct snmp_node_instance* instance, u16_t len, void *value)
{
 800e358:	b480      	push	{r7}
 800e35a:	b087      	sub	sp, #28
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	60f8      	str	r0, [r7, #12]
 800e360:	460b      	mov	r3, r1
 800e362:	607a      	str	r2, [r7, #4]
 800e364:	817b      	strh	r3, [r7, #10]
  snmp_err_t ret = SNMP_ERR_WRONGVALUE;
 800e366:	230a      	movs	r3, #10
 800e368:	75fb      	strb	r3, [r7, #23]
  s32_t *sint_ptr = (s32_t*)value;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	613b      	str	r3, [r7, #16]

  LWIP_UNUSED_ARG(len);
  switch (instance->node->oid) {
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	685b      	ldr	r3, [r3, #4]
 800e374:	2b01      	cmp	r3, #1
 800e376:	d002      	beq.n	800e37e <ip_set_test+0x26>
 800e378:	2b02      	cmp	r3, #2
 800e37a:	d007      	beq.n	800e38c <ip_set_test+0x34>
      ret = SNMP_ERR_NOERROR;
    }
    break;
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("ip_set_test(): unknown id: %"S32_F"\n", instance->node->oid));
    break;
 800e37c:	e010      	b.n	800e3a0 <ip_set_test+0x48>
    if (*sint_ptr == 2)
 800e37e:	693b      	ldr	r3, [r7, #16]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	2b02      	cmp	r3, #2
 800e384:	d109      	bne.n	800e39a <ip_set_test+0x42>
      ret = SNMP_ERR_NOERROR;
 800e386:	2300      	movs	r3, #0
 800e388:	75fb      	strb	r3, [r7, #23]
    break;
 800e38a:	e006      	b.n	800e39a <ip_set_test+0x42>
    if (*sint_ptr == IP_DEFAULT_TTL) {
 800e38c:	693b      	ldr	r3, [r7, #16]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	2bff      	cmp	r3, #255	@ 0xff
 800e392:	d104      	bne.n	800e39e <ip_set_test+0x46>
      ret = SNMP_ERR_NOERROR;
 800e394:	2300      	movs	r3, #0
 800e396:	75fb      	strb	r3, [r7, #23]
    break;
 800e398:	e001      	b.n	800e39e <ip_set_test+0x46>
    break;
 800e39a:	bf00      	nop
 800e39c:	e000      	b.n	800e3a0 <ip_set_test+0x48>
    break;
 800e39e:	bf00      	nop
  }

  return ret;
 800e3a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	371c      	adds	r7, #28
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bc80      	pop	{r7}
 800e3aa:	4770      	bx	lr

0800e3ac <ip_set_value>:

static snmp_err_t
ip_set_value(struct snmp_node_instance* instance, u16_t len, void *value)
{
 800e3ac:	b480      	push	{r7}
 800e3ae:	b085      	sub	sp, #20
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	60f8      	str	r0, [r7, #12]
 800e3b4:	460b      	mov	r3, r1
 800e3b6:	607a      	str	r2, [r7, #4]
 800e3b8:	817b      	strh	r3, [r7, #10]
  LWIP_UNUSED_ARG(instance);
  LWIP_UNUSED_ARG(len);
  LWIP_UNUSED_ARG(value);
  /* nothing to do here because in set_test we only accept values being the same as our own stored value -> no need to store anything */
  return SNMP_ERR_NOERROR;
 800e3ba:	2300      	movs	r3, #0
}
 800e3bc:	4618      	mov	r0, r3
 800e3be:	3714      	adds	r7, #20
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bc80      	pop	{r7}
 800e3c4:	4770      	bx	lr
	...

0800e3c8 <ip_AddrTable_get_cell_value_core>:
  { 0, 0xff }  /* IP D */
};

static snmp_err_t
ip_AddrTable_get_cell_value_core(struct netif *netif, const u32_t* column, union snmp_variant_value* value, u32_t* value_len)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b084      	sub	sp, #16
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	60f8      	str	r0, [r7, #12]
 800e3d0:	60b9      	str	r1, [r7, #8]
 800e3d2:	607a      	str	r2, [r7, #4]
 800e3d4:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(value_len);

  switch (*column) {
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	3b01      	subs	r3, #1
 800e3dc:	2b04      	cmp	r3, #4
 800e3de:	d82a      	bhi.n	800e436 <ip_AddrTable_get_cell_value_core+0x6e>
 800e3e0:	a201      	add	r2, pc, #4	@ (adr r2, 800e3e8 <ip_AddrTable_get_cell_value_core+0x20>)
 800e3e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3e6:	bf00      	nop
 800e3e8:	0800e3fd 	.word	0x0800e3fd
 800e3ec:	0800e409 	.word	0x0800e409
 800e3f0:	0800e419 	.word	0x0800e419
 800e3f4:	0800e425 	.word	0x0800e425
 800e3f8:	0800e42d 	.word	0x0800e42d
  case 1: /* ipAdEntAddr */
    value->u32 = netif_ip4_addr(netif)->addr;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	3304      	adds	r3, #4
 800e400:	681a      	ldr	r2, [r3, #0]
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	601a      	str	r2, [r3, #0]
    break;
 800e406:	e018      	b.n	800e43a <ip_AddrTable_get_cell_value_core+0x72>
  case 2: /* ipAdEntIfIndex */
    value->u32 = netif_to_num(netif);
 800e408:	68f8      	ldr	r0, [r7, #12]
 800e40a:	f7fe febf 	bl	800d18c <netif_to_num>
 800e40e:	4603      	mov	r3, r0
 800e410:	461a      	mov	r2, r3
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	601a      	str	r2, [r3, #0]
    break;
 800e416:	e010      	b.n	800e43a <ip_AddrTable_get_cell_value_core+0x72>
  case 3: /* ipAdEntNetMask */
    value->u32 = netif_ip4_netmask(netif)->addr;
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	3308      	adds	r3, #8
 800e41c:	681a      	ldr	r2, [r3, #0]
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	601a      	str	r2, [r3, #0]
    break;
 800e422:	e00a      	b.n	800e43a <ip_AddrTable_get_cell_value_core+0x72>
  case 4: /* ipAdEntBcastAddr */
    /* lwIP oddity, there's no broadcast
       address in the netif we can rely on */
    value->u32 = IPADDR_BROADCAST & 1;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2201      	movs	r2, #1
 800e428:	601a      	str	r2, [r3, #0]
    break;
 800e42a:	e006      	b.n	800e43a <ip_AddrTable_get_cell_value_core+0x72>
#if IP_REASSEMBLY
    /* @todo The theoretical maximum is IP_REASS_MAX_PBUFS * size of the pbufs,
     * but only if receiving one fragmented packet at a time.
     * The current solution is to calculate for 2 simultaneous packets...
     */
    value->u32 = (IP_HLEN + ((IP_REASS_MAX_PBUFS/2) *
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f640 22fa 	movw	r2, #2810	@ 0xafa
 800e432:	601a      	str	r2, [r3, #0]
#else
    /** @todo returning MTU would be a bad thing and
        returning a wild guess like '576' isn't good either */
    value->u32 = 0;
#endif
    break;
 800e434:	e001      	b.n	800e43a <ip_AddrTable_get_cell_value_core+0x72>
  default:
    return SNMP_ERR_NOSUCHINSTANCE;
 800e436:	23f1      	movs	r3, #241	@ 0xf1
 800e438:	e000      	b.n	800e43c <ip_AddrTable_get_cell_value_core+0x74>
  }

  return SNMP_ERR_NOERROR;
 800e43a:	2300      	movs	r3, #0
}
 800e43c:	4618      	mov	r0, r3
 800e43e:	3710      	adds	r7, #16
 800e440:	46bd      	mov	sp, r7
 800e442:	bd80      	pop	{r7, pc}

0800e444 <ip_AddrTable_get_cell_value>:

static snmp_err_t
ip_AddrTable_get_cell_value(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, union snmp_variant_value* value, u32_t* value_len)
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b086      	sub	sp, #24
 800e448:	af00      	add	r7, sp, #0
 800e44a:	60f8      	str	r0, [r7, #12]
 800e44c:	60b9      	str	r1, [r7, #8]
 800e44e:	603b      	str	r3, [r7, #0]
 800e450:	4613      	mov	r3, r2
 800e452:	71fb      	strb	r3, [r7, #7]
  ip4_addr_t ip;
  struct netif *netif;

  /* check if incoming OID length and if values are in plausible range */
  if (!snmp_oid_in_range(row_oid, row_oid_len, ip_AddrTable_oid_ranges, LWIP_ARRAYSIZE(ip_AddrTable_oid_ranges))) {
 800e454:	79f9      	ldrb	r1, [r7, #7]
 800e456:	2304      	movs	r3, #4
 800e458:	4a15      	ldr	r2, [pc, #84]	@ (800e4b0 <ip_AddrTable_get_cell_value+0x6c>)
 800e45a:	68b8      	ldr	r0, [r7, #8]
 800e45c:	f7ff fbba 	bl	800dbd4 <snmp_oid_in_range>
 800e460:	4603      	mov	r3, r0
 800e462:	2b00      	cmp	r3, #0
 800e464:	d101      	bne.n	800e46a <ip_AddrTable_get_cell_value+0x26>
    return SNMP_ERR_NOSUCHINSTANCE;
 800e466:	23f1      	movs	r3, #241	@ 0xf1
 800e468:	e01e      	b.n	800e4a8 <ip_AddrTable_get_cell_value+0x64>
  }

  /* get IP from incoming OID */
  snmp_oid_to_ip4(&row_oid[0], &ip); /* we know it succeeds because of oid_in_range check above */
 800e46a:	f107 0310 	add.w	r3, r7, #16
 800e46e:	4619      	mov	r1, r3
 800e470:	68b8      	ldr	r0, [r7, #8]
 800e472:	f7fe fc61 	bl	800cd38 <snmp_oid_to_ip4>

  /* find netif with requested ip */
  netif = netif_list;
 800e476:	4b0f      	ldr	r3, [pc, #60]	@ (800e4b4 <ip_AddrTable_get_cell_value+0x70>)
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	617b      	str	r3, [r7, #20]
  while (netif != NULL) {
 800e47c:	e010      	b.n	800e4a0 <ip_AddrTable_get_cell_value+0x5c>
    if (ip4_addr_cmp(&ip, netif_ip4_addr(netif))) {
 800e47e:	693a      	ldr	r2, [r7, #16]
 800e480:	697b      	ldr	r3, [r7, #20]
 800e482:	3304      	adds	r3, #4
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	429a      	cmp	r2, r3
 800e488:	d107      	bne.n	800e49a <ip_AddrTable_get_cell_value+0x56>
      /* fill in object properties */
      return ip_AddrTable_get_cell_value_core(netif, column, value, value_len);
 800e48a:	6a3b      	ldr	r3, [r7, #32]
 800e48c:	683a      	ldr	r2, [r7, #0]
 800e48e:	68f9      	ldr	r1, [r7, #12]
 800e490:	6978      	ldr	r0, [r7, #20]
 800e492:	f7ff ff99 	bl	800e3c8 <ip_AddrTable_get_cell_value_core>
 800e496:	4603      	mov	r3, r0
 800e498:	e006      	b.n	800e4a8 <ip_AddrTable_get_cell_value+0x64>
    }

    netif = netif->next;
 800e49a:	697b      	ldr	r3, [r7, #20]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	617b      	str	r3, [r7, #20]
  while (netif != NULL) {
 800e4a0:	697b      	ldr	r3, [r7, #20]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d1eb      	bne.n	800e47e <ip_AddrTable_get_cell_value+0x3a>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 800e4a6:	23f1      	movs	r3, #241	@ 0xf1
}
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	3718      	adds	r7, #24
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd80      	pop	{r7, pc}
 800e4b0:	0802e388 	.word	0x0802e388
 800e4b4:	2000db78 	.word	0x2000db78

0800e4b8 <ip_AddrTable_get_next_cell_instance_and_value>:

static snmp_err_t
ip_AddrTable_get_next_cell_instance_and_value(const u32_t* column, struct snmp_obj_id* row_oid, union snmp_variant_value* value, u32_t* value_len)
{
 800e4b8:	b590      	push	{r4, r7, lr}
 800e4ba:	b095      	sub	sp, #84	@ 0x54
 800e4bc:	af02      	add	r7, sp, #8
 800e4be:	60f8      	str	r0, [r7, #12]
 800e4c0:	60b9      	str	r1, [r7, #8]
 800e4c2:	607a      	str	r2, [r7, #4]
 800e4c4:	603b      	str	r3, [r7, #0]
  struct netif *netif;
  struct snmp_next_oid_state state;
  u32_t result_temp[LWIP_ARRAYSIZE(ip_AddrTable_oid_ranges)];

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(ip_AddrTable_oid_ranges));
 800e4c6:	68bb      	ldr	r3, [r7, #8]
 800e4c8:	1d19      	adds	r1, r3, #4
 800e4ca:	68bb      	ldr	r3, [r7, #8]
 800e4cc:	781a      	ldrb	r2, [r3, #0]
 800e4ce:	f107 0320 	add.w	r3, r7, #32
 800e4d2:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800e4d6:	2404      	movs	r4, #4
 800e4d8:	9400      	str	r4, [sp, #0]
 800e4da:	f7ff fb16 	bl	800db0a <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  netif = netif_list;
 800e4de:	4b19      	ldr	r3, [pc, #100]	@ (800e544 <ip_AddrTable_get_next_cell_instance_and_value+0x8c>)
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	647b      	str	r3, [r7, #68]	@ 0x44
  while (netif != NULL) {
 800e4e4:	e012      	b.n	800e50c <ip_AddrTable_get_next_cell_instance_and_value+0x54>
    u32_t test_oid[LWIP_ARRAYSIZE(ip_AddrTable_oid_ranges)];
    snmp_ip4_to_oid(netif_ip4_addr(netif), &test_oid[0]);
 800e4e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e4e8:	3304      	adds	r3, #4
 800e4ea:	f107 0210 	add.w	r2, r7, #16
 800e4ee:	4611      	mov	r1, r2
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f7fe fca9 	bl	800ce48 <snmp_ip4_to_oid>

    /* check generated OID: is it a candidate for the next one? */
    snmp_next_oid_check(&state, test_oid, LWIP_ARRAYSIZE(ip_AddrTable_oid_ranges), netif);
 800e4f6:	f107 0110 	add.w	r1, r7, #16
 800e4fa:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800e4fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e500:	2204      	movs	r2, #4
 800e502:	f7ff fb21 	bl	800db48 <snmp_next_oid_check>

    netif = netif->next;
 800e506:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	647b      	str	r3, [r7, #68]	@ 0x44
  while (netif != NULL) {
 800e50c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d1e9      	bne.n	800e4e6 <ip_AddrTable_get_next_cell_instance_and_value+0x2e>
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 800e512:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800e516:	2b00      	cmp	r3, #0
 800e518:	d10e      	bne.n	800e538 <ip_AddrTable_get_next_cell_instance_and_value+0x80>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 800e51a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e51c:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 800e520:	4619      	mov	r1, r3
 800e522:	68b8      	ldr	r0, [r7, #8]
 800e524:	f7fe fd6e 	bl	800d004 <snmp_oid_assign>
    /* fill in object properties */
    return ip_AddrTable_get_cell_value_core((struct netif*)state.reference, column, value, value_len);
 800e528:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800e52a:	683b      	ldr	r3, [r7, #0]
 800e52c:	687a      	ldr	r2, [r7, #4]
 800e52e:	68f9      	ldr	r1, [r7, #12]
 800e530:	f7ff ff4a 	bl	800e3c8 <ip_AddrTable_get_cell_value_core>
 800e534:	4603      	mov	r3, r0
 800e536:	e000      	b.n	800e53a <ip_AddrTable_get_next_cell_instance_and_value+0x82>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 800e538:	23f1      	movs	r3, #241	@ 0xf1
}
 800e53a:	4618      	mov	r0, r3
 800e53c:	374c      	adds	r7, #76	@ 0x4c
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd90      	pop	{r4, r7, pc}
 800e542:	bf00      	nop
 800e544:	2000db78 	.word	0x2000db78

0800e548 <ip_RouteTable_get_cell_value_core>:
  { 0, 0xff }, /* IP D */
};

static snmp_err_t
ip_RouteTable_get_cell_value_core(struct netif *netif, u8_t default_route, const u32_t* column, union snmp_variant_value* value, u32_t* value_len)
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b086      	sub	sp, #24
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	60f8      	str	r0, [r7, #12]
 800e550:	607a      	str	r2, [r7, #4]
 800e552:	603b      	str	r3, [r7, #0]
 800e554:	460b      	mov	r3, r1
 800e556:	72fb      	strb	r3, [r7, #11]
  switch (*column) {
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	3b01      	subs	r3, #1
 800e55e:	2b0c      	cmp	r3, #12
 800e560:	f200 8089 	bhi.w	800e676 <ip_RouteTable_get_cell_value_core+0x12e>
 800e564:	a201      	add	r2, pc, #4	@ (adr r2, 800e56c <ip_RouteTable_get_cell_value_core+0x24>)
 800e566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e56a:	bf00      	nop
 800e56c:	0800e5a1 	.word	0x0800e5a1
 800e570:	0800e5c9 	.word	0x0800e5c9
 800e574:	0800e5d9 	.word	0x0800e5d9
 800e578:	0800e5ef 	.word	0x0800e5ef
 800e57c:	0800e5ef 	.word	0x0800e5ef
 800e580:	0800e5ef 	.word	0x0800e5ef
 800e584:	0800e5f9 	.word	0x0800e5f9
 800e588:	0800e617 	.word	0x0800e617
 800e58c:	0800e62d 	.word	0x0800e62d
 800e590:	0800e635 	.word	0x0800e635
 800e594:	0800e63d 	.word	0x0800e63d
 800e598:	0800e659 	.word	0x0800e659
 800e59c:	0800e663 	.word	0x0800e663
  case 1: /* ipRouteDest */
    if (default_route) {
 800e5a0:	7afb      	ldrb	r3, [r7, #11]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d004      	beq.n	800e5b0 <ip_RouteTable_get_cell_value_core+0x68>
       /* default rte has 0.0.0.0 dest */
      value->u32 = IP4_ADDR_ANY4->addr;
 800e5a6:	4b37      	ldr	r3, [pc, #220]	@ (800e684 <ip_RouteTable_get_cell_value_core+0x13c>)
 800e5a8:	681a      	ldr	r2, [r3, #0]
 800e5aa:	683b      	ldr	r3, [r7, #0]
 800e5ac:	601a      	str	r2, [r3, #0]
      /* netifs have netaddress dest */
      ip4_addr_t tmp;
      ip4_addr_get_network(&tmp, netif_ip4_addr(netif), netif_ip4_netmask(netif));
      value->u32 = tmp.addr;
    }
    break;
 800e5ae:	e064      	b.n	800e67a <ip_RouteTable_get_cell_value_core+0x132>
      ip4_addr_get_network(&tmp, netif_ip4_addr(netif), netif_ip4_netmask(netif));
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	3304      	adds	r3, #4
 800e5b4:	681a      	ldr	r2, [r3, #0]
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	3308      	adds	r3, #8
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	4013      	ands	r3, r2
 800e5be:	617b      	str	r3, [r7, #20]
      value->u32 = tmp.addr;
 800e5c0:	697a      	ldr	r2, [r7, #20]
 800e5c2:	683b      	ldr	r3, [r7, #0]
 800e5c4:	601a      	str	r2, [r3, #0]
    break;
 800e5c6:	e058      	b.n	800e67a <ip_RouteTable_get_cell_value_core+0x132>
  case 2: /* ipRouteIfIndex */
    value->u32 = netif_to_num(netif);
 800e5c8:	68f8      	ldr	r0, [r7, #12]
 800e5ca:	f7fe fddf 	bl	800d18c <netif_to_num>
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	461a      	mov	r2, r3
 800e5d2:	683b      	ldr	r3, [r7, #0]
 800e5d4:	601a      	str	r2, [r3, #0]
    break;
 800e5d6:	e050      	b.n	800e67a <ip_RouteTable_get_cell_value_core+0x132>
  case 3: /* ipRouteMetric1 */
    if (default_route) {
 800e5d8:	7afb      	ldrb	r3, [r7, #11]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d003      	beq.n	800e5e6 <ip_RouteTable_get_cell_value_core+0x9e>
      value->s32 = 1; /* default */
 800e5de:	683b      	ldr	r3, [r7, #0]
 800e5e0:	2201      	movs	r2, #1
 800e5e2:	601a      	str	r2, [r3, #0]
    } else {
      value->s32 = 0; /* normal */
    }
    break;
 800e5e4:	e049      	b.n	800e67a <ip_RouteTable_get_cell_value_core+0x132>
      value->s32 = 0; /* normal */
 800e5e6:	683b      	ldr	r3, [r7, #0]
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	601a      	str	r2, [r3, #0]
    break;
 800e5ec:	e045      	b.n	800e67a <ip_RouteTable_get_cell_value_core+0x132>
  case 4: /* ipRouteMetric2 */
  case 5: /* ipRouteMetric3 */
  case 6: /* ipRouteMetric4 */
    value->s32 = -1; /* none */
 800e5ee:	683b      	ldr	r3, [r7, #0]
 800e5f0:	f04f 32ff 	mov.w	r2, #4294967295
 800e5f4:	601a      	str	r2, [r3, #0]
    break;
 800e5f6:	e040      	b.n	800e67a <ip_RouteTable_get_cell_value_core+0x132>
  case 7: /* ipRouteNextHop */
    if (default_route) {
 800e5f8:	7afb      	ldrb	r3, [r7, #11]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d005      	beq.n	800e60a <ip_RouteTable_get_cell_value_core+0xc2>
      /* default rte: gateway */
      value->u32 = netif_ip4_gw(netif)->addr;
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	330c      	adds	r3, #12
 800e602:	681a      	ldr	r2, [r3, #0]
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	601a      	str	r2, [r3, #0]
    } else {
      /* other rtes: netif ip_addr  */
      value->u32 = netif_ip4_addr(netif)->addr;
    }
    break;
 800e608:	e037      	b.n	800e67a <ip_RouteTable_get_cell_value_core+0x132>
      value->u32 = netif_ip4_addr(netif)->addr;
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	3304      	adds	r3, #4
 800e60e:	681a      	ldr	r2, [r3, #0]
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	601a      	str	r2, [r3, #0]
    break;
 800e614:	e031      	b.n	800e67a <ip_RouteTable_get_cell_value_core+0x132>
  case 8: /* ipRouteType */
    if (default_route) {
 800e616:	7afb      	ldrb	r3, [r7, #11]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d003      	beq.n	800e624 <ip_RouteTable_get_cell_value_core+0xdc>
      /* default rte is indirect */
      value->u32 = 4; /* indirect */
 800e61c:	683b      	ldr	r3, [r7, #0]
 800e61e:	2204      	movs	r2, #4
 800e620:	601a      	str	r2, [r3, #0]
    } else {
      /* other rtes are direct */
      value->u32 = 3; /* direct */
    }
    break;
 800e622:	e02a      	b.n	800e67a <ip_RouteTable_get_cell_value_core+0x132>
      value->u32 = 3; /* direct */
 800e624:	683b      	ldr	r3, [r7, #0]
 800e626:	2203      	movs	r2, #3
 800e628:	601a      	str	r2, [r3, #0]
    break;
 800e62a:	e026      	b.n	800e67a <ip_RouteTable_get_cell_value_core+0x132>
  case 9: /* ipRouteProto */
    /* locally defined routes */
    value->u32 = 2; /* local */
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	2202      	movs	r2, #2
 800e630:	601a      	str	r2, [r3, #0]
    break;
 800e632:	e022      	b.n	800e67a <ip_RouteTable_get_cell_value_core+0x132>
  case 10: /* ipRouteAge */
    /* @todo (sysuptime - timestamp last change) / 100 */
    value->u32 = 0;
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	2200      	movs	r2, #0
 800e638:	601a      	str	r2, [r3, #0]
    break;
 800e63a:	e01e      	b.n	800e67a <ip_RouteTable_get_cell_value_core+0x132>
  case 11: /* ipRouteMask */
    if (default_route) {
 800e63c:	7afb      	ldrb	r3, [r7, #11]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d004      	beq.n	800e64c <ip_RouteTable_get_cell_value_core+0x104>
      /* default rte use 0.0.0.0 mask */
      value->u32 = IP4_ADDR_ANY4->addr;
 800e642:	4b10      	ldr	r3, [pc, #64]	@ (800e684 <ip_RouteTable_get_cell_value_core+0x13c>)
 800e644:	681a      	ldr	r2, [r3, #0]
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	601a      	str	r2, [r3, #0]
    } else {
      /* other rtes use netmask */
      value->u32 = netif_ip4_netmask(netif)->addr;
    }
    break;
 800e64a:	e016      	b.n	800e67a <ip_RouteTable_get_cell_value_core+0x132>
      value->u32 = netif_ip4_netmask(netif)->addr;
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	3308      	adds	r3, #8
 800e650:	681a      	ldr	r2, [r3, #0]
 800e652:	683b      	ldr	r3, [r7, #0]
 800e654:	601a      	str	r2, [r3, #0]
    break;
 800e656:	e010      	b.n	800e67a <ip_RouteTable_get_cell_value_core+0x132>
  case 12: /* ipRouteMetric5 */
    value->s32 = -1; /* none */
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	f04f 32ff 	mov.w	r2, #4294967295
 800e65e:	601a      	str	r2, [r3, #0]
    break;
 800e660:	e00b      	b.n	800e67a <ip_RouteTable_get_cell_value_core+0x132>
  case 13: /* ipRouteInfo */
    value->const_ptr = snmp_zero_dot_zero.id;
 800e662:	4b09      	ldr	r3, [pc, #36]	@ (800e688 <ip_RouteTable_get_cell_value_core+0x140>)
 800e664:	685a      	ldr	r2, [r3, #4]
 800e666:	683b      	ldr	r3, [r7, #0]
 800e668:	601a      	str	r2, [r3, #0]
    *value_len = snmp_zero_dot_zero.len * sizeof(u32_t);
 800e66a:	4b07      	ldr	r3, [pc, #28]	@ (800e688 <ip_RouteTable_get_cell_value_core+0x140>)
 800e66c:	781b      	ldrb	r3, [r3, #0]
 800e66e:	009a      	lsls	r2, r3, #2
 800e670:	6a3b      	ldr	r3, [r7, #32]
 800e672:	601a      	str	r2, [r3, #0]
    break;
 800e674:	e001      	b.n	800e67a <ip_RouteTable_get_cell_value_core+0x132>
  default:
    return SNMP_ERR_NOSUCHINSTANCE;
 800e676:	23f1      	movs	r3, #241	@ 0xf1
 800e678:	e000      	b.n	800e67c <ip_RouteTable_get_cell_value_core+0x134>
  }

  return SNMP_ERR_NOERROR;
 800e67a:	2300      	movs	r3, #0
}
 800e67c:	4618      	mov	r0, r3
 800e67e:	3718      	adds	r7, #24
 800e680:	46bd      	mov	sp, r7
 800e682:	bd80      	pop	{r7, pc}
 800e684:	0802f050 	.word	0x0802f050
 800e688:	0802e118 	.word	0x0802e118

0800e68c <ip_RouteTable_get_cell_value>:

static snmp_err_t
ip_RouteTable_get_cell_value(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, union snmp_variant_value* value, u32_t* value_len)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b08a      	sub	sp, #40	@ 0x28
 800e690:	af02      	add	r7, sp, #8
 800e692:	60f8      	str	r0, [r7, #12]
 800e694:	60b9      	str	r1, [r7, #8]
 800e696:	603b      	str	r3, [r7, #0]
 800e698:	4613      	mov	r3, r2
 800e69a:	71fb      	strb	r3, [r7, #7]
  ip4_addr_t test_ip;
  struct netif *netif;

  /* check if incoming OID length and if values are in plausible range */
  if (!snmp_oid_in_range(row_oid, row_oid_len, ip_RouteTable_oid_ranges, LWIP_ARRAYSIZE(ip_RouteTable_oid_ranges))) {
 800e69c:	79f9      	ldrb	r1, [r7, #7]
 800e69e:	2304      	movs	r3, #4
 800e6a0:	4a22      	ldr	r2, [pc, #136]	@ (800e72c <ip_RouteTable_get_cell_value+0xa0>)
 800e6a2:	68b8      	ldr	r0, [r7, #8]
 800e6a4:	f7ff fa96 	bl	800dbd4 <snmp_oid_in_range>
 800e6a8:	4603      	mov	r3, r0
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d101      	bne.n	800e6b2 <ip_RouteTable_get_cell_value+0x26>
    return SNMP_ERR_NOSUCHINSTANCE;
 800e6ae:	23f1      	movs	r3, #241	@ 0xf1
 800e6b0:	e038      	b.n	800e724 <ip_RouteTable_get_cell_value+0x98>
  }

  /* get IP and port from incoming OID */
  snmp_oid_to_ip4(&row_oid[0], &test_ip); /* we know it succeeds because of oid_in_range check above */
 800e6b2:	f107 0318 	add.w	r3, r7, #24
 800e6b6:	4619      	mov	r1, r3
 800e6b8:	68b8      	ldr	r0, [r7, #8]
 800e6ba:	f7fe fb3d 	bl	800cd38 <snmp_oid_to_ip4>

  /* default route is on default netif */
  if (ip4_addr_isany_val(test_ip) && (netif_default != NULL)) {
 800e6be:	69bb      	ldr	r3, [r7, #24]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d10e      	bne.n	800e6e2 <ip_RouteTable_get_cell_value+0x56>
 800e6c4:	4b1a      	ldr	r3, [pc, #104]	@ (800e730 <ip_RouteTable_get_cell_value+0xa4>)
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d00a      	beq.n	800e6e2 <ip_RouteTable_get_cell_value+0x56>
    /* fill in object properties */
    return ip_RouteTable_get_cell_value_core(netif_default, 1, column, value, value_len);
 800e6cc:	4b18      	ldr	r3, [pc, #96]	@ (800e730 <ip_RouteTable_get_cell_value+0xa4>)
 800e6ce:	6818      	ldr	r0, [r3, #0]
 800e6d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6d2:	9300      	str	r3, [sp, #0]
 800e6d4:	683b      	ldr	r3, [r7, #0]
 800e6d6:	68fa      	ldr	r2, [r7, #12]
 800e6d8:	2101      	movs	r1, #1
 800e6da:	f7ff ff35 	bl	800e548 <ip_RouteTable_get_cell_value_core>
 800e6de:	4603      	mov	r3, r0
 800e6e0:	e020      	b.n	800e724 <ip_RouteTable_get_cell_value+0x98>
  }

  /* find netif with requested route */
  netif = netif_list;
 800e6e2:	4b14      	ldr	r3, [pc, #80]	@ (800e734 <ip_RouteTable_get_cell_value+0xa8>)
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	61fb      	str	r3, [r7, #28]
  while (netif != NULL) {
 800e6e8:	e018      	b.n	800e71c <ip_RouteTable_get_cell_value+0x90>
    ip4_addr_t dst;
    ip4_addr_get_network(&dst, netif_ip4_addr(netif), netif_ip4_netmask(netif));
 800e6ea:	69fb      	ldr	r3, [r7, #28]
 800e6ec:	3304      	adds	r3, #4
 800e6ee:	681a      	ldr	r2, [r3, #0]
 800e6f0:	69fb      	ldr	r3, [r7, #28]
 800e6f2:	3308      	adds	r3, #8
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	4013      	ands	r3, r2
 800e6f8:	617b      	str	r3, [r7, #20]

    if (ip4_addr_cmp(&dst, &test_ip)) {
 800e6fa:	697a      	ldr	r2, [r7, #20]
 800e6fc:	69bb      	ldr	r3, [r7, #24]
 800e6fe:	429a      	cmp	r2, r3
 800e700:	d109      	bne.n	800e716 <ip_RouteTable_get_cell_value+0x8a>
      /* fill in object properties */
      return ip_RouteTable_get_cell_value_core(netif, 0, column, value, value_len);
 800e702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e704:	9300      	str	r3, [sp, #0]
 800e706:	683b      	ldr	r3, [r7, #0]
 800e708:	68fa      	ldr	r2, [r7, #12]
 800e70a:	2100      	movs	r1, #0
 800e70c:	69f8      	ldr	r0, [r7, #28]
 800e70e:	f7ff ff1b 	bl	800e548 <ip_RouteTable_get_cell_value_core>
 800e712:	4603      	mov	r3, r0
 800e714:	e006      	b.n	800e724 <ip_RouteTable_get_cell_value+0x98>
    }

    netif = netif->next;
 800e716:	69fb      	ldr	r3, [r7, #28]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	61fb      	str	r3, [r7, #28]
  while (netif != NULL) {
 800e71c:	69fb      	ldr	r3, [r7, #28]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d1e3      	bne.n	800e6ea <ip_RouteTable_get_cell_value+0x5e>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 800e722:	23f1      	movs	r3, #241	@ 0xf1
}
 800e724:	4618      	mov	r0, r3
 800e726:	3720      	adds	r7, #32
 800e728:	46bd      	mov	sp, r7
 800e72a:	bd80      	pop	{r7, pc}
 800e72c:	0802e3a8 	.word	0x0802e3a8
 800e730:	2000db7c 	.word	0x2000db7c
 800e734:	2000db78 	.word	0x2000db78

0800e738 <ip_RouteTable_get_next_cell_instance_and_value>:

static snmp_err_t
ip_RouteTable_get_next_cell_instance_and_value(const u32_t* column, struct snmp_obj_id* row_oid, union snmp_variant_value* value, u32_t* value_len)
{
 800e738:	b590      	push	{r4, r7, lr}
 800e73a:	b097      	sub	sp, #92	@ 0x5c
 800e73c:	af02      	add	r7, sp, #8
 800e73e:	60f8      	str	r0, [r7, #12]
 800e740:	60b9      	str	r1, [r7, #8]
 800e742:	607a      	str	r2, [r7, #4]
 800e744:	603b      	str	r3, [r7, #0]
  struct snmp_next_oid_state state;
  u32_t result_temp[LWIP_ARRAYSIZE(ip_RouteTable_oid_ranges)];
  u32_t test_oid[LWIP_ARRAYSIZE(ip_RouteTable_oid_ranges)];

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(ip_RouteTable_oid_ranges));
 800e746:	68bb      	ldr	r3, [r7, #8]
 800e748:	1d19      	adds	r1, r3, #4
 800e74a:	68bb      	ldr	r3, [r7, #8]
 800e74c:	781a      	ldrb	r2, [r3, #0]
 800e74e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e752:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800e756:	2404      	movs	r4, #4
 800e758:	9400      	str	r4, [sp, #0]
 800e75a:	f7ff f9d6 	bl	800db0a <snmp_next_oid_init>

  /* check default route */
  if (netif_default != NULL) {
 800e75e:	4b30      	ldr	r3, [pc, #192]	@ (800e820 <ip_RouteTable_get_next_cell_instance_and_value+0xe8>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d00e      	beq.n	800e784 <ip_RouteTable_get_next_cell_instance_and_value+0x4c>
    snmp_ip4_to_oid(IP4_ADDR_ANY4, &test_oid[0]);
 800e766:	f107 0318 	add.w	r3, r7, #24
 800e76a:	4619      	mov	r1, r3
 800e76c:	482d      	ldr	r0, [pc, #180]	@ (800e824 <ip_RouteTable_get_next_cell_instance_and_value+0xec>)
 800e76e:	f7fe fb6b 	bl	800ce48 <snmp_ip4_to_oid>
    snmp_next_oid_check(&state, test_oid, LWIP_ARRAYSIZE(ip_RouteTable_oid_ranges), netif_default);
 800e772:	4b2b      	ldr	r3, [pc, #172]	@ (800e820 <ip_RouteTable_get_next_cell_instance_and_value+0xe8>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	f107 0118 	add.w	r1, r7, #24
 800e77a:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800e77e:	2204      	movs	r2, #4
 800e780:	f7ff f9e2 	bl	800db48 <snmp_next_oid_check>
  }

  /* iterate over all possible OIDs to find the next one */
  netif = netif_list;
 800e784:	4b28      	ldr	r3, [pc, #160]	@ (800e828 <ip_RouteTable_get_next_cell_instance_and_value+0xf0>)
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while (netif != NULL) {
 800e78a:	e01d      	b.n	800e7c8 <ip_RouteTable_get_next_cell_instance_and_value+0x90>
    ip4_addr_t dst;
    ip4_addr_get_network(&dst, netif_ip4_addr(netif), netif_ip4_netmask(netif));
 800e78c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e78e:	3304      	adds	r3, #4
 800e790:	681a      	ldr	r2, [r3, #0]
 800e792:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e794:	3308      	adds	r3, #8
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	4013      	ands	r3, r2
 800e79a:	617b      	str	r3, [r7, #20]

    /* check generated OID: is it a candidate for the next one? */
    if (!ip4_addr_isany_val(dst)) {
 800e79c:	697b      	ldr	r3, [r7, #20]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d00f      	beq.n	800e7c2 <ip_RouteTable_get_next_cell_instance_and_value+0x8a>
      snmp_ip4_to_oid(&dst, &test_oid[0]);
 800e7a2:	f107 0218 	add.w	r2, r7, #24
 800e7a6:	f107 0314 	add.w	r3, r7, #20
 800e7aa:	4611      	mov	r1, r2
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	f7fe fb4b 	bl	800ce48 <snmp_ip4_to_oid>
      snmp_next_oid_check(&state, test_oid, LWIP_ARRAYSIZE(ip_RouteTable_oid_ranges), netif);
 800e7b2:	f107 0118 	add.w	r1, r7, #24
 800e7b6:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800e7ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e7bc:	2204      	movs	r2, #4
 800e7be:	f7ff f9c3 	bl	800db48 <snmp_next_oid_check>
    }

    netif = netif->next;
 800e7c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while (netif != NULL) {
 800e7c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d1de      	bne.n	800e78c <ip_RouteTable_get_next_cell_instance_and_value+0x54>
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 800e7ce:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d11e      	bne.n	800e814 <ip_RouteTable_get_next_cell_instance_and_value+0xdc>
    ip4_addr_t dst;
    snmp_oid_to_ip4(&result_temp[0], &dst);
 800e7d6:	f107 0210 	add.w	r2, r7, #16
 800e7da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e7de:	4611      	mov	r1, r2
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f7fe faa9 	bl	800cd38 <snmp_oid_to_ip4>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 800e7e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e7e8:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 800e7ec:	4619      	mov	r1, r3
 800e7ee:	68b8      	ldr	r0, [r7, #8]
 800e7f0:	f7fe fc08 	bl	800d004 <snmp_oid_assign>
    /* fill in object properties */
    return ip_RouteTable_get_cell_value_core((struct netif*)state.reference, ip4_addr_isany_val(dst), column, value, value_len);
 800e7f4:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800e7f6:	693b      	ldr	r3, [r7, #16]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	bf0c      	ite	eq
 800e7fc:	2301      	moveq	r3, #1
 800e7fe:	2300      	movne	r3, #0
 800e800:	b2db      	uxtb	r3, r3
 800e802:	4619      	mov	r1, r3
 800e804:	683b      	ldr	r3, [r7, #0]
 800e806:	9300      	str	r3, [sp, #0]
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	68fa      	ldr	r2, [r7, #12]
 800e80c:	f7ff fe9c 	bl	800e548 <ip_RouteTable_get_cell_value_core>
 800e810:	4603      	mov	r3, r0
 800e812:	e000      	b.n	800e816 <ip_RouteTable_get_next_cell_instance_and_value+0xde>
  } else {
    /* not found */
    return SNMP_ERR_NOSUCHINSTANCE;
 800e814:	23f1      	movs	r3, #241	@ 0xf1
  }
}
 800e816:	4618      	mov	r0, r3
 800e818:	3754      	adds	r7, #84	@ 0x54
 800e81a:	46bd      	mov	sp, r7
 800e81c:	bd90      	pop	{r4, r7, pc}
 800e81e:	bf00      	nop
 800e820:	2000db7c 	.word	0x2000db7c
 800e824:	0802f050 	.word	0x0802f050
 800e828:	2000db78 	.word	0x2000db78

0800e82c <ip_NetToMediaTable_get_cell_value_core>:
  { 0, 0xff }  /* IP D    */
};

static snmp_err_t
ip_NetToMediaTable_get_cell_value_core(u8_t arp_table_index, const u32_t* column, union snmp_variant_value* value, u32_t* value_len)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b088      	sub	sp, #32
 800e830:	af00      	add	r7, sp, #0
 800e832:	60b9      	str	r1, [r7, #8]
 800e834:	607a      	str	r2, [r7, #4]
 800e836:	603b      	str	r3, [r7, #0]
 800e838:	4603      	mov	r3, r0
 800e83a:	73fb      	strb	r3, [r7, #15]
  ip4_addr_t *ip;
  struct netif *netif;
  struct eth_addr *ethaddr;

  etharp_get_entry(arp_table_index, &ip, &netif, &ethaddr);
 800e83c:	f107 0314 	add.w	r3, r7, #20
 800e840:	f107 0218 	add.w	r2, r7, #24
 800e844:	f107 011c 	add.w	r1, r7, #28
 800e848:	7bf8      	ldrb	r0, [r7, #15]
 800e84a:	f00e fc2f 	bl	801d0ac <etharp_get_entry>

  /* value */
  switch (*column) {
 800e84e:	68bb      	ldr	r3, [r7, #8]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	3b01      	subs	r3, #1
 800e854:	2b03      	cmp	r3, #3
 800e856:	d824      	bhi.n	800e8a2 <ip_NetToMediaTable_get_cell_value_core+0x76>
 800e858:	a201      	add	r2, pc, #4	@ (adr r2, 800e860 <ip_NetToMediaTable_get_cell_value_core+0x34>)
 800e85a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e85e:	bf00      	nop
 800e860:	0800e871 	.word	0x0800e871
 800e864:	0800e883 	.word	0x0800e883
 800e868:	0800e891 	.word	0x0800e891
 800e86c:	0800e89b 	.word	0x0800e89b
  case 1: /* atIfIndex / ipNetToMediaIfIndex */
    value->u32 = netif_to_num(netif);
 800e870:	69bb      	ldr	r3, [r7, #24]
 800e872:	4618      	mov	r0, r3
 800e874:	f7fe fc8a 	bl	800d18c <netif_to_num>
 800e878:	4603      	mov	r3, r0
 800e87a:	461a      	mov	r2, r3
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	601a      	str	r2, [r3, #0]
    break;
 800e880:	e011      	b.n	800e8a6 <ip_NetToMediaTable_get_cell_value_core+0x7a>
  case 2: /* atPhysAddress / ipNetToMediaPhysAddress */
    value->ptr = ethaddr;
 800e882:	697a      	ldr	r2, [r7, #20]
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	601a      	str	r2, [r3, #0]
    *value_len = sizeof(*ethaddr);
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	2206      	movs	r2, #6
 800e88c:	601a      	str	r2, [r3, #0]
    break;
 800e88e:	e00a      	b.n	800e8a6 <ip_NetToMediaTable_get_cell_value_core+0x7a>
  case 3: /* atNetAddress / ipNetToMediaNetAddress */
    value->u32 = ip->addr;
 800e890:	69fb      	ldr	r3, [r7, #28]
 800e892:	681a      	ldr	r2, [r3, #0]
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	601a      	str	r2, [r3, #0]
    break;
 800e898:	e005      	b.n	800e8a6 <ip_NetToMediaTable_get_cell_value_core+0x7a>
  case 4: /* ipNetToMediaType */
    value->u32 = 3; /* dynamic*/
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2203      	movs	r2, #3
 800e89e:	601a      	str	r2, [r3, #0]
    break;
 800e8a0:	e001      	b.n	800e8a6 <ip_NetToMediaTable_get_cell_value_core+0x7a>
  default:
    return SNMP_ERR_NOSUCHINSTANCE;
 800e8a2:	23f1      	movs	r3, #241	@ 0xf1
 800e8a4:	e000      	b.n	800e8a8 <ip_NetToMediaTable_get_cell_value_core+0x7c>
  }

  return SNMP_ERR_NOERROR;
 800e8a6:	2300      	movs	r3, #0
}
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	3720      	adds	r7, #32
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	bd80      	pop	{r7, pc}

0800e8b0 <ip_NetToMediaTable_get_cell_value>:

static snmp_err_t
ip_NetToMediaTable_get_cell_value(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, union snmp_variant_value* value, u32_t* value_len)
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b08a      	sub	sp, #40	@ 0x28
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	60f8      	str	r0, [r7, #12]
 800e8b8:	60b9      	str	r1, [r7, #8]
 800e8ba:	603b      	str	r3, [r7, #0]
 800e8bc:	4613      	mov	r3, r2
 800e8be:	71fb      	strb	r3, [r7, #7]
  ip4_addr_t ip_in;
  u8_t netif_index;
  u8_t i;

  /* check if incoming OID length and if values are in plausible range */
  if (!snmp_oid_in_range(row_oid, row_oid_len, ip_NetToMediaTable_oid_ranges, LWIP_ARRAYSIZE(ip_NetToMediaTable_oid_ranges))) {
 800e8c0:	79f9      	ldrb	r1, [r7, #7]
 800e8c2:	2305      	movs	r3, #5
 800e8c4:	4a25      	ldr	r2, [pc, #148]	@ (800e95c <ip_NetToMediaTable_get_cell_value+0xac>)
 800e8c6:	68b8      	ldr	r0, [r7, #8]
 800e8c8:	f7ff f984 	bl	800dbd4 <snmp_oid_in_range>
 800e8cc:	4603      	mov	r3, r0
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d101      	bne.n	800e8d6 <ip_NetToMediaTable_get_cell_value+0x26>
    return SNMP_ERR_NOSUCHINSTANCE;
 800e8d2:	23f1      	movs	r3, #241	@ 0xf1
 800e8d4:	e03e      	b.n	800e954 <ip_NetToMediaTable_get_cell_value+0xa4>
  }

  /* get IP from incoming OID */
  netif_index = (u8_t)row_oid[0];
 800e8d6:	68bb      	ldr	r3, [r7, #8]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  snmp_oid_to_ip4(&row_oid[1], &ip_in); /* we know it succeeds because of oid_in_range check above */
 800e8de:	68bb      	ldr	r3, [r7, #8]
 800e8e0:	3304      	adds	r3, #4
 800e8e2:	f107 0220 	add.w	r2, r7, #32
 800e8e6:	4611      	mov	r1, r2
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	f7fe fa25 	bl	800cd38 <snmp_oid_to_ip4>

  /* find requested entry */
  for (i=0; i<ARP_TABLE_SIZE; i++) {
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e8f4:	e029      	b.n	800e94a <ip_NetToMediaTable_get_cell_value+0x9a>
    ip4_addr_t *ip;
    struct netif *netif;
    struct eth_addr *ethaddr;

    if (etharp_get_entry(i, &ip, &netif, &ethaddr)) {
 800e8f6:	f107 0314 	add.w	r3, r7, #20
 800e8fa:	f107 0218 	add.w	r2, r7, #24
 800e8fe:	f107 011c 	add.w	r1, r7, #28
 800e902:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 800e906:	f00e fbd1 	bl	801d0ac <etharp_get_entry>
 800e90a:	4603      	mov	r3, r0
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d017      	beq.n	800e940 <ip_NetToMediaTable_get_cell_value+0x90>
      if ((netif_index == netif_to_num(netif)) && ip4_addr_cmp(&ip_in, ip)) {
 800e910:	69bb      	ldr	r3, [r7, #24]
 800e912:	4618      	mov	r0, r3
 800e914:	f7fe fc3a 	bl	800d18c <netif_to_num>
 800e918:	4603      	mov	r3, r0
 800e91a:	461a      	mov	r2, r3
 800e91c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e920:	4293      	cmp	r3, r2
 800e922:	d10d      	bne.n	800e940 <ip_NetToMediaTable_get_cell_value+0x90>
 800e924:	6a3a      	ldr	r2, [r7, #32]
 800e926:	69fb      	ldr	r3, [r7, #28]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	429a      	cmp	r2, r3
 800e92c:	d108      	bne.n	800e940 <ip_NetToMediaTable_get_cell_value+0x90>
        /* fill in object properties */
        return ip_NetToMediaTable_get_cell_value_core(i, column, value, value_len);
 800e92e:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 800e932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e934:	683a      	ldr	r2, [r7, #0]
 800e936:	68f9      	ldr	r1, [r7, #12]
 800e938:	f7ff ff78 	bl	800e82c <ip_NetToMediaTable_get_cell_value_core>
 800e93c:	4603      	mov	r3, r0
 800e93e:	e009      	b.n	800e954 <ip_NetToMediaTable_get_cell_value+0xa4>
  for (i=0; i<ARP_TABLE_SIZE; i++) {
 800e940:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e944:	3301      	adds	r3, #1
 800e946:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e94a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e94e:	2b09      	cmp	r3, #9
 800e950:	d9d1      	bls.n	800e8f6 <ip_NetToMediaTable_get_cell_value+0x46>
      }
    }
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 800e952:	23f1      	movs	r3, #241	@ 0xf1
}
 800e954:	4618      	mov	r0, r3
 800e956:	3728      	adds	r7, #40	@ 0x28
 800e958:	46bd      	mov	sp, r7
 800e95a:	bd80      	pop	{r7, pc}
 800e95c:	0802e3c8 	.word	0x0802e3c8

0800e960 <ip_NetToMediaTable_get_next_cell_instance_and_value>:

static snmp_err_t
ip_NetToMediaTable_get_next_cell_instance_and_value(const u32_t* column, struct snmp_obj_id* row_oid, union snmp_variant_value* value, u32_t* value_len)
{
 800e960:	b590      	push	{r4, r7, lr}
 800e962:	b09b      	sub	sp, #108	@ 0x6c
 800e964:	af02      	add	r7, sp, #8
 800e966:	60f8      	str	r0, [r7, #12]
 800e968:	60b9      	str	r1, [r7, #8]
 800e96a:	607a      	str	r2, [r7, #4]
 800e96c:	603b      	str	r3, [r7, #0]
  u8_t i;
  struct snmp_next_oid_state state;
  u32_t result_temp[LWIP_ARRAYSIZE(ip_NetToMediaTable_oid_ranges)];

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(ip_NetToMediaTable_oid_ranges));
 800e96e:	68bb      	ldr	r3, [r7, #8]
 800e970:	1d19      	adds	r1, r3, #4
 800e972:	68bb      	ldr	r3, [r7, #8]
 800e974:	781a      	ldrb	r2, [r3, #0]
 800e976:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800e97a:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800e97e:	2405      	movs	r4, #5
 800e980:	9400      	str	r4, [sp, #0]
 800e982:	f7ff f8c2 	bl	800db0a <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  for (i=0; i<ARP_TABLE_SIZE; i++) {
 800e986:	2300      	movs	r3, #0
 800e988:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e98c:	e028      	b.n	800e9e0 <ip_NetToMediaTable_get_next_cell_instance_and_value+0x80>
    ip4_addr_t *ip;
    struct netif *netif;
    struct eth_addr *ethaddr;

    if (etharp_get_entry(i, &ip, &netif, &ethaddr)) {
 800e98e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e992:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800e996:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800e99a:	f897 005f 	ldrb.w	r0, [r7, #95]	@ 0x5f
 800e99e:	f00e fb85 	bl	801d0ac <etharp_get_entry>
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d016      	beq.n	800e9d6 <ip_NetToMediaTable_get_next_cell_instance_and_value+0x76>
      u32_t test_oid[LWIP_ARRAYSIZE(ip_NetToMediaTable_oid_ranges)];

      test_oid[0] = netif_to_num(netif);
 800e9a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	f7fe fbee 	bl	800d18c <netif_to_num>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	617b      	str	r3, [r7, #20]
      snmp_ip4_to_oid(ip, &test_oid[1]);
 800e9b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e9b6:	f107 0314 	add.w	r3, r7, #20
 800e9ba:	3304      	adds	r3, #4
 800e9bc:	4619      	mov	r1, r3
 800e9be:	4610      	mov	r0, r2
 800e9c0:	f7fe fa42 	bl	800ce48 <snmp_ip4_to_oid>

      /* check generated OID: is it a candidate for the next one? */
      snmp_next_oid_check(&state, test_oid, LWIP_ARRAYSIZE(ip_NetToMediaTable_oid_ranges), LWIP_PTR_NUMERIC_CAST(void*, i));
 800e9c4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e9c8:	f107 0114 	add.w	r1, r7, #20
 800e9cc:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800e9d0:	2205      	movs	r2, #5
 800e9d2:	f7ff f8b9 	bl	800db48 <snmp_next_oid_check>
  for (i=0; i<ARP_TABLE_SIZE; i++) {
 800e9d6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e9da:	3301      	adds	r3, #1
 800e9dc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e9e0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e9e4:	2b09      	cmp	r3, #9
 800e9e6:	d9d2      	bls.n	800e98e <ip_NetToMediaTable_get_next_cell_instance_and_value+0x2e>
    }
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 800e9e8:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d10f      	bne.n	800ea10 <ip_NetToMediaTable_get_next_cell_instance_and_value+0xb0>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 800e9f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e9f2:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800e9f6:	4619      	mov	r1, r3
 800e9f8:	68b8      	ldr	r0, [r7, #8]
 800e9fa:	f7fe fb03 	bl	800d004 <snmp_oid_assign>
    /* fill in object properties */
    return ip_NetToMediaTable_get_cell_value_core(LWIP_PTR_NUMERIC_CAST(u8_t, state.reference), column, value, value_len);
 800e9fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ea00:	b2d8      	uxtb	r0, r3
 800ea02:	683b      	ldr	r3, [r7, #0]
 800ea04:	687a      	ldr	r2, [r7, #4]
 800ea06:	68f9      	ldr	r1, [r7, #12]
 800ea08:	f7ff ff10 	bl	800e82c <ip_NetToMediaTable_get_cell_value_core>
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	e000      	b.n	800ea12 <ip_NetToMediaTable_get_next_cell_instance_and_value+0xb2>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 800ea10:	23f1      	movs	r3, #241	@ 0xf1
}
 800ea12:	4618      	mov	r0, r3
 800ea14:	3764      	adds	r7, #100	@ 0x64
 800ea16:	46bd      	mov	sp, r7
 800ea18:	bd90      	pop	{r4, r7, pc}
	...

0800ea1c <snmp_get_value>:
#define MIB2_AUTH_TRAPS_DISABLED 2

/* --- snmp .1.3.6.1.2.1.11 ----------------------------------------------------- */
static s16_t
snmp_get_value(const struct snmp_scalar_array_node_def *node, void *value)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b084      	sub	sp, #16
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
 800ea24:	6039      	str	r1, [r7, #0]
  u32_t *uint_ptr = (u32_t*)value;
 800ea26:	683b      	ldr	r3, [r7, #0]
 800ea28:	60fb      	str	r3, [r7, #12]
  switch (node->oid) {
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	3b01      	subs	r3, #1
 800ea30:	2b1f      	cmp	r3, #31
 800ea32:	f200 80df 	bhi.w	800ebf4 <snmp_get_value+0x1d8>
 800ea36:	a201      	add	r2, pc, #4	@ (adr r2, 800ea3c <snmp_get_value+0x20>)
 800ea38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea3c:	0800eabd 	.word	0x0800eabd
 800ea40:	0800eac7 	.word	0x0800eac7
 800ea44:	0800ead1 	.word	0x0800ead1
 800ea48:	0800eadb 	.word	0x0800eadb
 800ea4c:	0800eae5 	.word	0x0800eae5
 800ea50:	0800eaef 	.word	0x0800eaef
 800ea54:	0800ebf5 	.word	0x0800ebf5
 800ea58:	0800eaf9 	.word	0x0800eaf9
 800ea5c:	0800eb03 	.word	0x0800eb03
 800ea60:	0800eb0d 	.word	0x0800eb0d
 800ea64:	0800eb17 	.word	0x0800eb17
 800ea68:	0800eb21 	.word	0x0800eb21
 800ea6c:	0800eb2b 	.word	0x0800eb2b
 800ea70:	0800eb35 	.word	0x0800eb35
 800ea74:	0800eb3f 	.word	0x0800eb3f
 800ea78:	0800eb49 	.word	0x0800eb49
 800ea7c:	0800eb53 	.word	0x0800eb53
 800ea80:	0800eb5d 	.word	0x0800eb5d
 800ea84:	0800eb67 	.word	0x0800eb67
 800ea88:	0800eb71 	.word	0x0800eb71
 800ea8c:	0800eb7b 	.word	0x0800eb7b
 800ea90:	0800eb85 	.word	0x0800eb85
 800ea94:	0800ebf5 	.word	0x0800ebf5
 800ea98:	0800eb8f 	.word	0x0800eb8f
 800ea9c:	0800eb99 	.word	0x0800eb99
 800eaa0:	0800eba3 	.word	0x0800eba3
 800eaa4:	0800ebad 	.word	0x0800ebad
 800eaa8:	0800ebb7 	.word	0x0800ebb7
 800eaac:	0800ebc1 	.word	0x0800ebc1
 800eab0:	0800ebcb 	.word	0x0800ebcb
 800eab4:	0800ebe5 	.word	0x0800ebe5
 800eab8:	0800ebed 	.word	0x0800ebed
  case 1: /* snmpInPkts */
    *uint_ptr = snmp_stats.inpkts;
 800eabc:	4b51      	ldr	r3, [pc, #324]	@ (800ec04 <snmp_get_value+0x1e8>)
 800eabe:	681a      	ldr	r2, [r3, #0]
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	601a      	str	r2, [r3, #0]
    break;
 800eac4:	e098      	b.n	800ebf8 <snmp_get_value+0x1dc>
  case 2: /* snmpOutPkts */
    *uint_ptr = snmp_stats.outpkts;
 800eac6:	4b4f      	ldr	r3, [pc, #316]	@ (800ec04 <snmp_get_value+0x1e8>)
 800eac8:	685a      	ldr	r2, [r3, #4]
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	601a      	str	r2, [r3, #0]
    break;
 800eace:	e093      	b.n	800ebf8 <snmp_get_value+0x1dc>
  case 3: /* snmpInBadVersions */
    *uint_ptr = snmp_stats.inbadversions;
 800ead0:	4b4c      	ldr	r3, [pc, #304]	@ (800ec04 <snmp_get_value+0x1e8>)
 800ead2:	689a      	ldr	r2, [r3, #8]
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	601a      	str	r2, [r3, #0]
    break;
 800ead8:	e08e      	b.n	800ebf8 <snmp_get_value+0x1dc>
  case 4: /* snmpInBadCommunityNames */
    *uint_ptr = snmp_stats.inbadcommunitynames;
 800eada:	4b4a      	ldr	r3, [pc, #296]	@ (800ec04 <snmp_get_value+0x1e8>)
 800eadc:	68da      	ldr	r2, [r3, #12]
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	601a      	str	r2, [r3, #0]
    break;
 800eae2:	e089      	b.n	800ebf8 <snmp_get_value+0x1dc>
  case 5: /* snmpInBadCommunityUses */
    *uint_ptr = snmp_stats.inbadcommunityuses;
 800eae4:	4b47      	ldr	r3, [pc, #284]	@ (800ec04 <snmp_get_value+0x1e8>)
 800eae6:	691a      	ldr	r2, [r3, #16]
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	601a      	str	r2, [r3, #0]
    break;
 800eaec:	e084      	b.n	800ebf8 <snmp_get_value+0x1dc>
  case 6: /* snmpInASNParseErrs */
    *uint_ptr = snmp_stats.inasnparseerrs;
 800eaee:	4b45      	ldr	r3, [pc, #276]	@ (800ec04 <snmp_get_value+0x1e8>)
 800eaf0:	695a      	ldr	r2, [r3, #20]
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	601a      	str	r2, [r3, #0]
    break;
 800eaf6:	e07f      	b.n	800ebf8 <snmp_get_value+0x1dc>
  case 8: /* snmpInTooBigs */
    *uint_ptr = snmp_stats.intoobigs;
 800eaf8:	4b42      	ldr	r3, [pc, #264]	@ (800ec04 <snmp_get_value+0x1e8>)
 800eafa:	699a      	ldr	r2, [r3, #24]
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	601a      	str	r2, [r3, #0]
    break;
 800eb00:	e07a      	b.n	800ebf8 <snmp_get_value+0x1dc>
  case 9: /* snmpInNoSuchNames */
    *uint_ptr = snmp_stats.innosuchnames;
 800eb02:	4b40      	ldr	r3, [pc, #256]	@ (800ec04 <snmp_get_value+0x1e8>)
 800eb04:	69da      	ldr	r2, [r3, #28]
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	601a      	str	r2, [r3, #0]
    break;
 800eb0a:	e075      	b.n	800ebf8 <snmp_get_value+0x1dc>
  case 10: /* snmpInBadValues */
    *uint_ptr = snmp_stats.inbadvalues;
 800eb0c:	4b3d      	ldr	r3, [pc, #244]	@ (800ec04 <snmp_get_value+0x1e8>)
 800eb0e:	6a1a      	ldr	r2, [r3, #32]
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	601a      	str	r2, [r3, #0]
    break;
 800eb14:	e070      	b.n	800ebf8 <snmp_get_value+0x1dc>
  case 11: /* snmpInReadOnlys */
    *uint_ptr = snmp_stats.inreadonlys;
 800eb16:	4b3b      	ldr	r3, [pc, #236]	@ (800ec04 <snmp_get_value+0x1e8>)
 800eb18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	601a      	str	r2, [r3, #0]
    break;
 800eb1e:	e06b      	b.n	800ebf8 <snmp_get_value+0x1dc>
  case 12: /* snmpInGenErrs */
    *uint_ptr = snmp_stats.ingenerrs;
 800eb20:	4b38      	ldr	r3, [pc, #224]	@ (800ec04 <snmp_get_value+0x1e8>)
 800eb22:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	601a      	str	r2, [r3, #0]
    break;
 800eb28:	e066      	b.n	800ebf8 <snmp_get_value+0x1dc>
  case 13: /* snmpInTotalReqVars */
    *uint_ptr = snmp_stats.intotalreqvars;
 800eb2a:	4b36      	ldr	r3, [pc, #216]	@ (800ec04 <snmp_get_value+0x1e8>)
 800eb2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	601a      	str	r2, [r3, #0]
    break;
 800eb32:	e061      	b.n	800ebf8 <snmp_get_value+0x1dc>
  case 14: /* snmpInTotalSetVars */
    *uint_ptr = snmp_stats.intotalsetvars;
 800eb34:	4b33      	ldr	r3, [pc, #204]	@ (800ec04 <snmp_get_value+0x1e8>)
 800eb36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	601a      	str	r2, [r3, #0]
    break;
 800eb3c:	e05c      	b.n	800ebf8 <snmp_get_value+0x1dc>
  case 15: /* snmpInGetRequests */
    *uint_ptr = snmp_stats.ingetrequests;
 800eb3e:	4b31      	ldr	r3, [pc, #196]	@ (800ec04 <snmp_get_value+0x1e8>)
 800eb40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	601a      	str	r2, [r3, #0]
    break;
 800eb46:	e057      	b.n	800ebf8 <snmp_get_value+0x1dc>
  case 16: /* snmpInGetNexts */
    *uint_ptr = snmp_stats.ingetnexts;
 800eb48:	4b2e      	ldr	r3, [pc, #184]	@ (800ec04 <snmp_get_value+0x1e8>)
 800eb4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	601a      	str	r2, [r3, #0]
    break;
 800eb50:	e052      	b.n	800ebf8 <snmp_get_value+0x1dc>
  case 17: /* snmpInSetRequests */
    *uint_ptr = snmp_stats.insetrequests;
 800eb52:	4b2c      	ldr	r3, [pc, #176]	@ (800ec04 <snmp_get_value+0x1e8>)
 800eb54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	601a      	str	r2, [r3, #0]
    break;
 800eb5a:	e04d      	b.n	800ebf8 <snmp_get_value+0x1dc>
  case 18: /* snmpInGetResponses */
    *uint_ptr = snmp_stats.ingetresponses;
 800eb5c:	4b29      	ldr	r3, [pc, #164]	@ (800ec04 <snmp_get_value+0x1e8>)
 800eb5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	601a      	str	r2, [r3, #0]
    break;
 800eb64:	e048      	b.n	800ebf8 <snmp_get_value+0x1dc>
  case 19: /* snmpInTraps */
    *uint_ptr = snmp_stats.intraps;
 800eb66:	4b27      	ldr	r3, [pc, #156]	@ (800ec04 <snmp_get_value+0x1e8>)
 800eb68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	601a      	str	r2, [r3, #0]
    break;
 800eb6e:	e043      	b.n	800ebf8 <snmp_get_value+0x1dc>
  case 20: /* snmpOutTooBigs */
    *uint_ptr = snmp_stats.outtoobigs;
 800eb70:	4b24      	ldr	r3, [pc, #144]	@ (800ec04 <snmp_get_value+0x1e8>)
 800eb72:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	601a      	str	r2, [r3, #0]
    break;
 800eb78:	e03e      	b.n	800ebf8 <snmp_get_value+0x1dc>
  case 21: /* snmpOutNoSuchNames */
    *uint_ptr = snmp_stats.outnosuchnames;
 800eb7a:	4b22      	ldr	r3, [pc, #136]	@ (800ec04 <snmp_get_value+0x1e8>)
 800eb7c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	601a      	str	r2, [r3, #0]
    break;
 800eb82:	e039      	b.n	800ebf8 <snmp_get_value+0x1dc>
  case 22: /* snmpOutBadValues */
    *uint_ptr = snmp_stats.outbadvalues;
 800eb84:	4b1f      	ldr	r3, [pc, #124]	@ (800ec04 <snmp_get_value+0x1e8>)
 800eb86:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	601a      	str	r2, [r3, #0]
    break;
 800eb8c:	e034      	b.n	800ebf8 <snmp_get_value+0x1dc>
  case 24: /* snmpOutGenErrs */
    *uint_ptr = snmp_stats.outgenerrs;
 800eb8e:	4b1d      	ldr	r3, [pc, #116]	@ (800ec04 <snmp_get_value+0x1e8>)
 800eb90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	601a      	str	r2, [r3, #0]
    break;
 800eb96:	e02f      	b.n	800ebf8 <snmp_get_value+0x1dc>
  case 25: /* snmpOutGetRequests */
    *uint_ptr = snmp_stats.outgetrequests;
 800eb98:	4b1a      	ldr	r3, [pc, #104]	@ (800ec04 <snmp_get_value+0x1e8>)
 800eb9a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	601a      	str	r2, [r3, #0]
    break;
 800eba0:	e02a      	b.n	800ebf8 <snmp_get_value+0x1dc>
  case 26: /* snmpOutGetNexts */
    *uint_ptr = snmp_stats.outgetnexts;
 800eba2:	4b18      	ldr	r3, [pc, #96]	@ (800ec04 <snmp_get_value+0x1e8>)
 800eba4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	601a      	str	r2, [r3, #0]
    break;
 800ebaa:	e025      	b.n	800ebf8 <snmp_get_value+0x1dc>
  case 27: /* snmpOutSetRequests */
    *uint_ptr = snmp_stats.outsetrequests;
 800ebac:	4b15      	ldr	r3, [pc, #84]	@ (800ec04 <snmp_get_value+0x1e8>)
 800ebae:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	601a      	str	r2, [r3, #0]
    break;
 800ebb4:	e020      	b.n	800ebf8 <snmp_get_value+0x1dc>
  case 28: /* snmpOutGetResponses */
    *uint_ptr = snmp_stats.outgetresponses;
 800ebb6:	4b13      	ldr	r3, [pc, #76]	@ (800ec04 <snmp_get_value+0x1e8>)
 800ebb8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	601a      	str	r2, [r3, #0]
    break;
 800ebbe:	e01b      	b.n	800ebf8 <snmp_get_value+0x1dc>
  case 29: /* snmpOutTraps */
    *uint_ptr = snmp_stats.outtraps;
 800ebc0:	4b10      	ldr	r3, [pc, #64]	@ (800ec04 <snmp_get_value+0x1e8>)
 800ebc2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	601a      	str	r2, [r3, #0]
    break;
 800ebc8:	e016      	b.n	800ebf8 <snmp_get_value+0x1dc>
  case 30: /* snmpEnableAuthenTraps */
    if (snmp_get_auth_traps_enabled() == SNMP_AUTH_TRAPS_DISABLED) {
 800ebca:	f003 ff05 	bl	80129d8 <snmp_get_auth_traps_enabled>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d103      	bne.n	800ebdc <snmp_get_value+0x1c0>
      *uint_ptr = MIB2_AUTH_TRAPS_DISABLED;
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	2202      	movs	r2, #2
 800ebd8:	601a      	str	r2, [r3, #0]
    } else {
      *uint_ptr = MIB2_AUTH_TRAPS_ENABLED;
    }
    break;
 800ebda:	e00d      	b.n	800ebf8 <snmp_get_value+0x1dc>
      *uint_ptr = MIB2_AUTH_TRAPS_ENABLED;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	2201      	movs	r2, #1
 800ebe0:	601a      	str	r2, [r3, #0]
    break;
 800ebe2:	e009      	b.n	800ebf8 <snmp_get_value+0x1dc>
  case 31: /* snmpSilentDrops */
    *uint_ptr = 0; /* not supported */
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	601a      	str	r2, [r3, #0]
    break;
 800ebea:	e005      	b.n	800ebf8 <snmp_get_value+0x1dc>
  case 32: /* snmpProxyDrops */
    *uint_ptr = 0; /* not supported */
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	2200      	movs	r2, #0
 800ebf0:	601a      	str	r2, [r3, #0]
    break;
 800ebf2:	e001      	b.n	800ebf8 <snmp_get_value+0x1dc>
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("snmp_get_value(): unknown id: %"S32_F"\n", node->oid));
    return 0;
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	e000      	b.n	800ebfa <snmp_get_value+0x1de>
  }

  return sizeof(*uint_ptr);
 800ebf8:	2304      	movs	r3, #4
}
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	3710      	adds	r7, #16
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	bd80      	pop	{r7, pc}
 800ec02:	bf00      	nop
 800ec04:	2000a4e4 	.word	0x2000a4e4

0800ec08 <snmp_set_test>:

static snmp_err_t
snmp_set_test(const struct snmp_scalar_array_node_def *node, u16_t len, void *value)
{
 800ec08:	b480      	push	{r7}
 800ec0a:	b087      	sub	sp, #28
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	60f8      	str	r0, [r7, #12]
 800ec10:	460b      	mov	r3, r1
 800ec12:	607a      	str	r2, [r7, #4]
 800ec14:	817b      	strh	r3, [r7, #10]
  snmp_err_t ret = SNMP_ERR_WRONGVALUE;
 800ec16:	230a      	movs	r3, #10
 800ec18:	75fb      	strb	r3, [r7, #23]
  LWIP_UNUSED_ARG(len);

  if (node->oid == 30) {
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	2b1e      	cmp	r3, #30
 800ec20:	d10b      	bne.n	800ec3a <snmp_set_test+0x32>
    /* snmpEnableAuthenTraps */
    s32_t *sint_ptr = (s32_t*)value;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	613b      	str	r3, [r7, #16]

    /* we should have writable non-volatile mem here */
    if ((*sint_ptr == MIB2_AUTH_TRAPS_DISABLED) || (*sint_ptr == MIB2_AUTH_TRAPS_ENABLED)) {
 800ec26:	693b      	ldr	r3, [r7, #16]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	2b02      	cmp	r3, #2
 800ec2c:	d003      	beq.n	800ec36 <snmp_set_test+0x2e>
 800ec2e:	693b      	ldr	r3, [r7, #16]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	2b01      	cmp	r3, #1
 800ec34:	d101      	bne.n	800ec3a <snmp_set_test+0x32>
      ret = SNMP_ERR_NOERROR;
 800ec36:	2300      	movs	r3, #0
 800ec38:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 800ec3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	371c      	adds	r7, #28
 800ec40:	46bd      	mov	sp, r7
 800ec42:	bc80      	pop	{r7}
 800ec44:	4770      	bx	lr

0800ec46 <snmp_set_value>:

static snmp_err_t
snmp_set_value(const struct snmp_scalar_array_node_def *node, u16_t len, void *value)
{
 800ec46:	b580      	push	{r7, lr}
 800ec48:	b086      	sub	sp, #24
 800ec4a:	af00      	add	r7, sp, #0
 800ec4c:	60f8      	str	r0, [r7, #12]
 800ec4e:	460b      	mov	r3, r1
 800ec50:	607a      	str	r2, [r7, #4]
 800ec52:	817b      	strh	r3, [r7, #10]
  LWIP_UNUSED_ARG(len);

  if (node->oid == 30) {
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	2b1e      	cmp	r3, #30
 800ec5a:	d10c      	bne.n	800ec76 <snmp_set_value+0x30>
    /* snmpEnableAuthenTraps */
    s32_t *sint_ptr = (s32_t*)value;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	617b      	str	r3, [r7, #20]
    if (*sint_ptr == MIB2_AUTH_TRAPS_DISABLED) {
 800ec60:	697b      	ldr	r3, [r7, #20]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	2b02      	cmp	r3, #2
 800ec66:	d103      	bne.n	800ec70 <snmp_set_value+0x2a>
      snmp_set_auth_traps_enabled(SNMP_AUTH_TRAPS_DISABLED);
 800ec68:	2000      	movs	r0, #0
 800ec6a:	f003 fea5 	bl	80129b8 <snmp_set_auth_traps_enabled>
 800ec6e:	e002      	b.n	800ec76 <snmp_set_value+0x30>
    } else {
      snmp_set_auth_traps_enabled(SNMP_AUTH_TRAPS_ENABLED);
 800ec70:	2001      	movs	r0, #1
 800ec72:	f003 fea1 	bl	80129b8 <snmp_set_auth_traps_enabled>
    }
  }

  return SNMP_ERR_NOERROR;
 800ec76:	2300      	movs	r3, #0
}
 800ec78:	4618      	mov	r0, r3
 800ec7a:	3718      	adds	r7, #24
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	bd80      	pop	{r7, pc}

0800ec80 <system_get_value>:
}


static s16_t
system_get_value(const struct snmp_scalar_array_node_def *node, void *value)
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b086      	sub	sp, #24
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
 800ec88:	6039      	str	r1, [r7, #0]
  const u8_t*  var = NULL;
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	617b      	str	r3, [r7, #20]
  const s16_t* var_len;
  u16_t result;

  switch (node->oid) {
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	3b01      	subs	r3, #1
 800ec94:	2b06      	cmp	r3, #6
 800ec96:	d84f      	bhi.n	800ed38 <system_get_value+0xb8>
 800ec98:	a201      	add	r2, pc, #4	@ (adr r2, 800eca0 <system_get_value+0x20>)
 800ec9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec9e:	bf00      	nop
 800eca0:	0800ecbd 	.word	0x0800ecbd
 800eca4:	0800eccb 	.word	0x0800eccb
 800eca8:	0800ecef 	.word	0x0800ecef
 800ecac:	0800ed05 	.word	0x0800ed05
 800ecb0:	0800ed13 	.word	0x0800ed13
 800ecb4:	0800ed21 	.word	0x0800ed21
 800ecb8:	0800ed2f 	.word	0x0800ed2f
  case 1: /* sysDescr */
    var     = sysdescr;
 800ecbc:	4b31      	ldr	r3, [pc, #196]	@ (800ed84 <system_get_value+0x104>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	617b      	str	r3, [r7, #20]
    var_len = (const s16_t*)sysdescr_len;
 800ecc2:	4b31      	ldr	r3, [pc, #196]	@ (800ed88 <system_get_value+0x108>)
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	613b      	str	r3, [r7, #16]
    break;
 800ecc8:	e038      	b.n	800ed3c <system_get_value+0xbc>
  case 2: /* sysObjectID */
    {
      const struct snmp_obj_id* dev_enterprise_oid = snmp_get_device_enterprise_oid();
 800ecca:	f7fe f82b 	bl	800cd24 <snmp_get_device_enterprise_oid>
 800ecce:	60b8      	str	r0, [r7, #8]
      MEMCPY(value, dev_enterprise_oid->id, dev_enterprise_oid->len * sizeof(u32_t));
 800ecd0:	68bb      	ldr	r3, [r7, #8]
 800ecd2:	1d19      	adds	r1, r3, #4
 800ecd4:	68bb      	ldr	r3, [r7, #8]
 800ecd6:	781b      	ldrb	r3, [r3, #0]
 800ecd8:	009b      	lsls	r3, r3, #2
 800ecda:	461a      	mov	r2, r3
 800ecdc:	6838      	ldr	r0, [r7, #0]
 800ecde:	f011 fe74 	bl	80209ca <memcpy>
      return dev_enterprise_oid->len * sizeof(u32_t);
 800ece2:	68bb      	ldr	r3, [r7, #8]
 800ece4:	781b      	ldrb	r3, [r3, #0]
 800ece6:	009b      	lsls	r3, r3, #2
 800ece8:	b29b      	uxth	r3, r3
 800ecea:	b21b      	sxth	r3, r3
 800ecec:	e045      	b.n	800ed7a <system_get_value+0xfa>
    }
  case 3: /* sysUpTime */
    MIB2_COPY_SYSUPTIME_TO((u32_t*)value);
 800ecee:	f7fb fc31 	bl	800a554 <sys_now>
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	4a25      	ldr	r2, [pc, #148]	@ (800ed8c <system_get_value+0x10c>)
 800ecf6:	fba2 2303 	umull	r2, r3, r2, r3
 800ecfa:	08da      	lsrs	r2, r3, #3
 800ecfc:	683b      	ldr	r3, [r7, #0]
 800ecfe:	601a      	str	r2, [r3, #0]
    return sizeof(u32_t);
 800ed00:	2304      	movs	r3, #4
 800ed02:	e03a      	b.n	800ed7a <system_get_value+0xfa>
  case 4: /* sysContact */
    var     = syscontact;
 800ed04:	4b22      	ldr	r3, [pc, #136]	@ (800ed90 <system_get_value+0x110>)
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	617b      	str	r3, [r7, #20]
    var_len = (const s16_t*)syscontact_len;
 800ed0a:	4b22      	ldr	r3, [pc, #136]	@ (800ed94 <system_get_value+0x114>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	613b      	str	r3, [r7, #16]
    break;
 800ed10:	e014      	b.n	800ed3c <system_get_value+0xbc>
  case 5: /* sysName */
    var     = sysname;
 800ed12:	4b21      	ldr	r3, [pc, #132]	@ (800ed98 <system_get_value+0x118>)
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	617b      	str	r3, [r7, #20]
    var_len = (const s16_t*)sysname_len;
 800ed18:	4b20      	ldr	r3, [pc, #128]	@ (800ed9c <system_get_value+0x11c>)
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	613b      	str	r3, [r7, #16]
    break;
 800ed1e:	e00d      	b.n	800ed3c <system_get_value+0xbc>
  case 6: /* sysLocation */
    var     = syslocation;
 800ed20:	4b1f      	ldr	r3, [pc, #124]	@ (800eda0 <system_get_value+0x120>)
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	617b      	str	r3, [r7, #20]
    var_len = (const s16_t*)syslocation_len;
 800ed26:	4b1f      	ldr	r3, [pc, #124]	@ (800eda4 <system_get_value+0x124>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	613b      	str	r3, [r7, #16]
    break;
 800ed2c:	e006      	b.n	800ed3c <system_get_value+0xbc>
  case 7: /* sysServices */
    *(s32_t*)value = SNMP_SYSSERVICES;
 800ed2e:	683b      	ldr	r3, [r7, #0]
 800ed30:	2248      	movs	r2, #72	@ 0x48
 800ed32:	601a      	str	r2, [r3, #0]
    return sizeof(s32_t);
 800ed34:	2304      	movs	r3, #4
 800ed36:	e020      	b.n	800ed7a <system_get_value+0xfa>
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("system_get_value(): unknown id: %"S32_F"\n", node->oid));
    return 0;
 800ed38:	2300      	movs	r3, #0
 800ed3a:	e01e      	b.n	800ed7a <system_get_value+0xfa>
  }

  /* handle string values (OID 1,4,5 and 6) */
  LWIP_ASSERT("", (value != NULL));
 800ed3c:	683b      	ldr	r3, [r7, #0]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d106      	bne.n	800ed50 <system_get_value+0xd0>
 800ed42:	4b19      	ldr	r3, [pc, #100]	@ (800eda8 <system_get_value+0x128>)
 800ed44:	f240 120f 	movw	r2, #271	@ 0x10f
 800ed48:	4918      	ldr	r1, [pc, #96]	@ (800edac <system_get_value+0x12c>)
 800ed4a:	4819      	ldr	r0, [pc, #100]	@ (800edb0 <system_get_value+0x130>)
 800ed4c:	f011 fba8 	bl	80204a0 <iprintf>
  if (var_len == NULL) {
 800ed50:	693b      	ldr	r3, [r7, #16]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d105      	bne.n	800ed62 <system_get_value+0xe2>
    result = (s16_t)strlen((const char*)var);
 800ed56:	6978      	ldr	r0, [r7, #20]
 800ed58:	f7f1 fa40 	bl	80001dc <strlen>
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	81fb      	strh	r3, [r7, #14]
 800ed60:	e003      	b.n	800ed6a <system_get_value+0xea>
  } else {
    result = *var_len;
 800ed62:	693b      	ldr	r3, [r7, #16]
 800ed64:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ed68:	81fb      	strh	r3, [r7, #14]
  }
  MEMCPY(value, var, result);
 800ed6a:	89fb      	ldrh	r3, [r7, #14]
 800ed6c:	461a      	mov	r2, r3
 800ed6e:	6979      	ldr	r1, [r7, #20]
 800ed70:	6838      	ldr	r0, [r7, #0]
 800ed72:	f011 fe2a 	bl	80209ca <memcpy>
  return result;
 800ed76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	3718      	adds	r7, #24
 800ed7e:	46bd      	mov	sp, r7
 800ed80:	bd80      	pop	{r7, pc}
 800ed82:	bf00      	nop
 800ed84:	200000f4 	.word	0x200000f4
 800ed88:	2000a550 	.word	0x2000a550
 800ed8c:	cccccccd 	.word	0xcccccccd
 800ed90:	200000f8 	.word	0x200000f8
 800ed94:	2000a554 	.word	0x2000a554
 800ed98:	200000fc 	.word	0x200000fc
 800ed9c:	2000a564 	.word	0x2000a564
 800eda0:	20000100 	.word	0x20000100
 800eda4:	2000a574 	.word	0x2000a574
 800eda8:	08023b3c 	.word	0x08023b3c
 800edac:	08023b80 	.word	0x08023b80
 800edb0:	08023b84 	.word	0x08023b84

0800edb4 <system_set_test>:

static snmp_err_t
system_set_test(const struct snmp_scalar_array_node_def *node, u16_t len, void *value)
{
 800edb4:	b480      	push	{r7}
 800edb6:	b089      	sub	sp, #36	@ 0x24
 800edb8:	af00      	add	r7, sp, #0
 800edba:	60f8      	str	r0, [r7, #12]
 800edbc:	460b      	mov	r3, r1
 800edbe:	607a      	str	r2, [r7, #4]
 800edc0:	817b      	strh	r3, [r7, #10]
  snmp_err_t ret = SNMP_ERR_WRONGVALUE;
 800edc2:	230a      	movs	r3, #10
 800edc4:	77fb      	strb	r3, [r7, #31]
  const u16_t* var_bufsize  = NULL;
 800edc6:	2300      	movs	r3, #0
 800edc8:	61bb      	str	r3, [r7, #24]
  const u16_t* var_wr_len;

  LWIP_UNUSED_ARG(value);

  switch (node->oid) {
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	2b06      	cmp	r3, #6
 800edd0:	d012      	beq.n	800edf8 <system_set_test+0x44>
 800edd2:	2b06      	cmp	r3, #6
 800edd4:	d816      	bhi.n	800ee04 <system_set_test+0x50>
 800edd6:	2b04      	cmp	r3, #4
 800edd8:	d002      	beq.n	800ede0 <system_set_test+0x2c>
 800edda:	2b05      	cmp	r3, #5
 800eddc:	d006      	beq.n	800edec <system_set_test+0x38>
 800edde:	e011      	b.n	800ee04 <system_set_test+0x50>
  case 4: /* sysContact */
    var_bufsize  = &syscontact_bufsize;
 800ede0:	4b19      	ldr	r3, [pc, #100]	@ (800ee48 <system_set_test+0x94>)
 800ede2:	61bb      	str	r3, [r7, #24]
    var_wr_len   = syscontact_wr_len;
 800ede4:	4b19      	ldr	r3, [pc, #100]	@ (800ee4c <system_set_test+0x98>)
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	617b      	str	r3, [r7, #20]
    break;
 800edea:	e00d      	b.n	800ee08 <system_set_test+0x54>
  case 5: /* sysName */
    var_bufsize  = &sysname_bufsize;
 800edec:	4b18      	ldr	r3, [pc, #96]	@ (800ee50 <system_set_test+0x9c>)
 800edee:	61bb      	str	r3, [r7, #24]
    var_wr_len   = sysname_wr_len;
 800edf0:	4b18      	ldr	r3, [pc, #96]	@ (800ee54 <system_set_test+0xa0>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	617b      	str	r3, [r7, #20]
    break;
 800edf6:	e007      	b.n	800ee08 <system_set_test+0x54>
  case 6: /* sysLocation */
    var_bufsize  = &syslocation_bufsize;
 800edf8:	4b17      	ldr	r3, [pc, #92]	@ (800ee58 <system_set_test+0xa4>)
 800edfa:	61bb      	str	r3, [r7, #24]
    var_wr_len   = syslocation_wr_len;
 800edfc:	4b17      	ldr	r3, [pc, #92]	@ (800ee5c <system_set_test+0xa8>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	617b      	str	r3, [r7, #20]
    break;
 800ee02:	e001      	b.n	800ee08 <system_set_test+0x54>
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("system_set_test(): unknown id: %"S32_F"\n", node->oid));
    return ret;
 800ee04:	7ffb      	ldrb	r3, [r7, #31]
 800ee06:	e019      	b.n	800ee3c <system_set_test+0x88>
  }

  /* check if value is writable at all */
  if (*var_bufsize > 0) {
 800ee08:	69bb      	ldr	r3, [r7, #24]
 800ee0a:	881b      	ldrh	r3, [r3, #0]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d012      	beq.n	800ee36 <system_set_test+0x82>
    if (var_wr_len == NULL) {
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d107      	bne.n	800ee26 <system_set_test+0x72>
      /* we have to take the terminating 0 into account */
      if (len < *var_bufsize) {
 800ee16:	69bb      	ldr	r3, [r7, #24]
 800ee18:	881b      	ldrh	r3, [r3, #0]
 800ee1a:	897a      	ldrh	r2, [r7, #10]
 800ee1c:	429a      	cmp	r2, r3
 800ee1e:	d20c      	bcs.n	800ee3a <system_set_test+0x86>
        ret = SNMP_ERR_NOERROR;
 800ee20:	2300      	movs	r3, #0
 800ee22:	77fb      	strb	r3, [r7, #31]
 800ee24:	e009      	b.n	800ee3a <system_set_test+0x86>
      }
    } else {
      if (len <= *var_bufsize) {
 800ee26:	69bb      	ldr	r3, [r7, #24]
 800ee28:	881b      	ldrh	r3, [r3, #0]
 800ee2a:	897a      	ldrh	r2, [r7, #10]
 800ee2c:	429a      	cmp	r2, r3
 800ee2e:	d804      	bhi.n	800ee3a <system_set_test+0x86>
        ret = SNMP_ERR_NOERROR;
 800ee30:	2300      	movs	r3, #0
 800ee32:	77fb      	strb	r3, [r7, #31]
 800ee34:	e001      	b.n	800ee3a <system_set_test+0x86>
      }
    }
  } else {
    ret = SNMP_ERR_NOTWRITABLE;
 800ee36:	2311      	movs	r3, #17
 800ee38:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 800ee3a:	7ffb      	ldrb	r3, [r7, #31]
}
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	3724      	adds	r7, #36	@ 0x24
 800ee40:	46bd      	mov	sp, r7
 800ee42:	bc80      	pop	{r7}
 800ee44:	4770      	bx	lr
 800ee46:	bf00      	nop
 800ee48:	2000a560 	.word	0x2000a560
 800ee4c:	2000a55c 	.word	0x2000a55c
 800ee50:	2000a570 	.word	0x2000a570
 800ee54:	2000a56c 	.word	0x2000a56c
 800ee58:	2000a580 	.word	0x2000a580
 800ee5c:	2000a57c 	.word	0x2000a57c

0800ee60 <system_set_value>:

static snmp_err_t
system_set_value(const struct snmp_scalar_array_node_def *node, u16_t len, void *value)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b086      	sub	sp, #24
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	60f8      	str	r0, [r7, #12]
 800ee68:	460b      	mov	r3, r1
 800ee6a:	607a      	str	r2, [r7, #4]
 800ee6c:	817b      	strh	r3, [r7, #10]
  u8_t*  var_wr = NULL;
 800ee6e:	2300      	movs	r3, #0
 800ee70:	617b      	str	r3, [r7, #20]
  u16_t* var_wr_len;

  switch (node->oid) {
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	2b06      	cmp	r3, #6
 800ee78:	d014      	beq.n	800eea4 <system_set_value+0x44>
 800ee7a:	2b06      	cmp	r3, #6
 800ee7c:	d819      	bhi.n	800eeb2 <system_set_value+0x52>
 800ee7e:	2b04      	cmp	r3, #4
 800ee80:	d002      	beq.n	800ee88 <system_set_value+0x28>
 800ee82:	2b05      	cmp	r3, #5
 800ee84:	d007      	beq.n	800ee96 <system_set_value+0x36>
 800ee86:	e014      	b.n	800eeb2 <system_set_value+0x52>
  case 4: /* sysContact */
    var_wr     = syscontact_wr;
 800ee88:	4b1b      	ldr	r3, [pc, #108]	@ (800eef8 <system_set_value+0x98>)
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	617b      	str	r3, [r7, #20]
    var_wr_len = syscontact_wr_len;
 800ee8e:	4b1b      	ldr	r3, [pc, #108]	@ (800eefc <system_set_value+0x9c>)
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	613b      	str	r3, [r7, #16]
    break;
 800ee94:	e00f      	b.n	800eeb6 <system_set_value+0x56>
  case 5: /* sysName */
    var_wr     = sysname_wr;
 800ee96:	4b1a      	ldr	r3, [pc, #104]	@ (800ef00 <system_set_value+0xa0>)
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	617b      	str	r3, [r7, #20]
    var_wr_len = sysname_wr_len;
 800ee9c:	4b19      	ldr	r3, [pc, #100]	@ (800ef04 <system_set_value+0xa4>)
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	613b      	str	r3, [r7, #16]
    break;
 800eea2:	e008      	b.n	800eeb6 <system_set_value+0x56>
  case 6: /* sysLocation */
    var_wr     = syslocation_wr;
 800eea4:	4b18      	ldr	r3, [pc, #96]	@ (800ef08 <system_set_value+0xa8>)
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	617b      	str	r3, [r7, #20]
    var_wr_len = syslocation_wr_len;
 800eeaa:	4b18      	ldr	r3, [pc, #96]	@ (800ef0c <system_set_value+0xac>)
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	613b      	str	r3, [r7, #16]
    break;
 800eeb0:	e001      	b.n	800eeb6 <system_set_value+0x56>
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("system_set_value(): unknown id: %"S32_F"\n", node->oid));
    return SNMP_ERR_GENERROR;
 800eeb2:	2305      	movs	r3, #5
 800eeb4:	e01c      	b.n	800eef0 <system_set_value+0x90>
  }

  /* no need to check size of target buffer, this was already done in set_test method */
  LWIP_ASSERT("", var_wr != NULL);
 800eeb6:	697b      	ldr	r3, [r7, #20]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d106      	bne.n	800eeca <system_set_value+0x6a>
 800eebc:	4b14      	ldr	r3, [pc, #80]	@ (800ef10 <system_set_value+0xb0>)
 800eebe:	f44f 72b0 	mov.w	r2, #352	@ 0x160
 800eec2:	4914      	ldr	r1, [pc, #80]	@ (800ef14 <system_set_value+0xb4>)
 800eec4:	4814      	ldr	r0, [pc, #80]	@ (800ef18 <system_set_value+0xb8>)
 800eec6:	f011 faeb 	bl	80204a0 <iprintf>
  MEMCPY(var_wr, value, len);
 800eeca:	897b      	ldrh	r3, [r7, #10]
 800eecc:	461a      	mov	r2, r3
 800eece:	6879      	ldr	r1, [r7, #4]
 800eed0:	6978      	ldr	r0, [r7, #20]
 800eed2:	f011 fd7a 	bl	80209ca <memcpy>
  
  if (var_wr_len == NULL) {
 800eed6:	693b      	ldr	r3, [r7, #16]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d105      	bne.n	800eee8 <system_set_value+0x88>
    /* add terminating 0 */
    var_wr[len] = 0;
 800eedc:	897b      	ldrh	r3, [r7, #10]
 800eede:	697a      	ldr	r2, [r7, #20]
 800eee0:	4413      	add	r3, r2
 800eee2:	2200      	movs	r2, #0
 800eee4:	701a      	strb	r2, [r3, #0]
 800eee6:	e002      	b.n	800eeee <system_set_value+0x8e>
  } else {
    *var_wr_len = len;
 800eee8:	693b      	ldr	r3, [r7, #16]
 800eeea:	897a      	ldrh	r2, [r7, #10]
 800eeec:	801a      	strh	r2, [r3, #0]
  }

  return SNMP_ERR_NOERROR;
 800eeee:	2300      	movs	r3, #0
}
 800eef0:	4618      	mov	r0, r3
 800eef2:	3718      	adds	r7, #24
 800eef4:	46bd      	mov	sp, r7
 800eef6:	bd80      	pop	{r7, pc}
 800eef8:	2000a558 	.word	0x2000a558
 800eefc:	2000a55c 	.word	0x2000a55c
 800ef00:	2000a568 	.word	0x2000a568
 800ef04:	2000a56c 	.word	0x2000a56c
 800ef08:	2000a578 	.word	0x2000a578
 800ef0c:	2000a57c 	.word	0x2000a57c
 800ef10:	08023b3c 	.word	0x08023b3c
 800ef14:	08023b80 	.word	0x08023b80
 800ef18:	08023b84 	.word	0x08023b84

0800ef1c <tcp_get_value>:

/* --- tcp .1.3.6.1.2.1.6 ----------------------------------------------------- */

static s16_t
tcp_get_value(struct snmp_node_instance* instance, void* value)
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b086      	sub	sp, #24
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
 800ef24:	6039      	str	r1, [r7, #0]
  u32_t *uint_ptr = (u32_t*)value;
 800ef26:	683b      	ldr	r3, [r7, #0]
 800ef28:	60fb      	str	r3, [r7, #12]
  s32_t *sint_ptr = (s32_t*)value;
 800ef2a:	683b      	ldr	r3, [r7, #0]
 800ef2c:	60bb      	str	r3, [r7, #8]

  switch (instance->node->oid) {
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	685b      	ldr	r3, [r3, #4]
 800ef34:	3b01      	subs	r3, #1
 800ef36:	2b11      	cmp	r3, #17
 800ef38:	f200 80a7 	bhi.w	800f08a <tcp_get_value+0x16e>
 800ef3c:	a201      	add	r2, pc, #4	@ (adr r2, 800ef44 <tcp_get_value+0x28>)
 800ef3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef42:	bf00      	nop
 800ef44:	0800ef8d 	.word	0x0800ef8d
 800ef48:	0800ef97 	.word	0x0800ef97
 800ef4c:	0800efa3 	.word	0x0800efa3
 800ef50:	0800efaf 	.word	0x0800efaf
 800ef54:	0800efb9 	.word	0x0800efb9
 800ef58:	0800efc7 	.word	0x0800efc7
 800ef5c:	0800efd5 	.word	0x0800efd5
 800ef60:	0800efe3 	.word	0x0800efe3
 800ef64:	0800eff1 	.word	0x0800eff1
 800ef68:	0800f029 	.word	0x0800f029
 800ef6c:	0800f037 	.word	0x0800f037
 800ef70:	0800f045 	.word	0x0800f045
 800ef74:	0800f08b 	.word	0x0800f08b
 800ef78:	0800f053 	.word	0x0800f053
 800ef7c:	0800f061 	.word	0x0800f061
 800ef80:	0800f08b 	.word	0x0800f08b
 800ef84:	0800f06f 	.word	0x0800f06f
 800ef88:	0800f07d 	.word	0x0800f07d
  case 1: /* tcpRtoAlgorithm, vanj(4) */
    *sint_ptr = 4;
 800ef8c:	68bb      	ldr	r3, [r7, #8]
 800ef8e:	2204      	movs	r2, #4
 800ef90:	601a      	str	r2, [r3, #0]
    return sizeof(*sint_ptr);
 800ef92:	2304      	movs	r3, #4
 800ef94:	e07b      	b.n	800f08e <tcp_get_value+0x172>
  case 2: /* tcpRtoMin */
    /* @todo not the actual value, a guess,
        needs to be calculated */
    *sint_ptr = 1000;
 800ef96:	68bb      	ldr	r3, [r7, #8]
 800ef98:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ef9c:	601a      	str	r2, [r3, #0]
    return sizeof(*sint_ptr);
 800ef9e:	2304      	movs	r3, #4
 800efa0:	e075      	b.n	800f08e <tcp_get_value+0x172>
  case 3: /* tcpRtoMax */
    /* @todo not the actual value, a guess,
        needs to be calculated */
    *sint_ptr = 60000;
 800efa2:	68bb      	ldr	r3, [r7, #8]
 800efa4:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800efa8:	601a      	str	r2, [r3, #0]
    return sizeof(*sint_ptr);
 800efaa:	2304      	movs	r3, #4
 800efac:	e06f      	b.n	800f08e <tcp_get_value+0x172>
  case 4: /* tcpMaxConn */
    *sint_ptr = MEMP_NUM_TCP_PCB;
 800efae:	68bb      	ldr	r3, [r7, #8]
 800efb0:	2205      	movs	r2, #5
 800efb2:	601a      	str	r2, [r3, #0]
    return sizeof(*sint_ptr);
 800efb4:	2304      	movs	r3, #4
 800efb6:	e06a      	b.n	800f08e <tcp_get_value+0x172>
  case 5: /* tcpActiveOpens */
    *uint_ptr = STATS_GET(mib2.tcpactiveopens);
 800efb8:	4b37      	ldr	r3, [pc, #220]	@ (800f098 <tcp_get_value+0x17c>)
 800efba:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800efc2:	2304      	movs	r3, #4
 800efc4:	e063      	b.n	800f08e <tcp_get_value+0x172>
  case 6: /* tcpPassiveOpens */
    *uint_ptr = STATS_GET(mib2.tcppassiveopens);
 800efc6:	4b34      	ldr	r3, [pc, #208]	@ (800f098 <tcp_get_value+0x17c>)
 800efc8:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800efd0:	2304      	movs	r3, #4
 800efd2:	e05c      	b.n	800f08e <tcp_get_value+0x172>
  case 7: /* tcpAttemptFails */
    *uint_ptr = STATS_GET(mib2.tcpattemptfails);
 800efd4:	4b30      	ldr	r3, [pc, #192]	@ (800f098 <tcp_get_value+0x17c>)
 800efd6:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800efde:	2304      	movs	r3, #4
 800efe0:	e055      	b.n	800f08e <tcp_get_value+0x172>
  case 8: /* tcpEstabResets */
    *uint_ptr = STATS_GET(mib2.tcpestabresets);
 800efe2:	4b2d      	ldr	r3, [pc, #180]	@ (800f098 <tcp_get_value+0x17c>)
 800efe4:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800efec:	2304      	movs	r3, #4
 800efee:	e04e      	b.n	800f08e <tcp_get_value+0x172>
  case 9: /* tcpCurrEstab */
    {
      u16_t tcpcurrestab = 0;
 800eff0:	2300      	movs	r3, #0
 800eff2:	82fb      	strh	r3, [r7, #22]
      struct tcp_pcb *pcb = tcp_active_pcbs;
 800eff4:	4b29      	ldr	r3, [pc, #164]	@ (800f09c <tcp_get_value+0x180>)
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	613b      	str	r3, [r7, #16]
      while (pcb != NULL) {
 800effa:	e00d      	b.n	800f018 <tcp_get_value+0xfc>
        if ((pcb->state == ESTABLISHED) ||
 800effc:	693b      	ldr	r3, [r7, #16]
 800effe:	7d1b      	ldrb	r3, [r3, #20]
 800f000:	2b04      	cmp	r3, #4
 800f002:	d003      	beq.n	800f00c <tcp_get_value+0xf0>
            (pcb->state == CLOSE_WAIT)) {
 800f004:	693b      	ldr	r3, [r7, #16]
 800f006:	7d1b      	ldrb	r3, [r3, #20]
        if ((pcb->state == ESTABLISHED) ||
 800f008:	2b07      	cmp	r3, #7
 800f00a:	d102      	bne.n	800f012 <tcp_get_value+0xf6>
          tcpcurrestab++;
 800f00c:	8afb      	ldrh	r3, [r7, #22]
 800f00e:	3301      	adds	r3, #1
 800f010:	82fb      	strh	r3, [r7, #22]
        }
        pcb = pcb->next;
 800f012:	693b      	ldr	r3, [r7, #16]
 800f014:	68db      	ldr	r3, [r3, #12]
 800f016:	613b      	str	r3, [r7, #16]
      while (pcb != NULL) {
 800f018:	693b      	ldr	r3, [r7, #16]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d1ee      	bne.n	800effc <tcp_get_value+0xe0>
      }
      *uint_ptr = tcpcurrestab;
 800f01e:	8afa      	ldrh	r2, [r7, #22]
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	601a      	str	r2, [r3, #0]
    }
    return sizeof(*uint_ptr);
 800f024:	2304      	movs	r3, #4
 800f026:	e032      	b.n	800f08e <tcp_get_value+0x172>
  case 10: /* tcpInSegs */
    *uint_ptr = STATS_GET(mib2.tcpinsegs);
 800f028:	4b1b      	ldr	r3, [pc, #108]	@ (800f098 <tcp_get_value+0x17c>)
 800f02a:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f032:	2304      	movs	r3, #4
 800f034:	e02b      	b.n	800f08e <tcp_get_value+0x172>
  case 11: /* tcpOutSegs */
    *uint_ptr = STATS_GET(mib2.tcpoutsegs);
 800f036:	4b18      	ldr	r3, [pc, #96]	@ (800f098 <tcp_get_value+0x17c>)
 800f038:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f040:	2304      	movs	r3, #4
 800f042:	e024      	b.n	800f08e <tcp_get_value+0x172>
  case 12: /* tcpRetransSegs */
    *uint_ptr = STATS_GET(mib2.tcpretranssegs);
 800f044:	4b14      	ldr	r3, [pc, #80]	@ (800f098 <tcp_get_value+0x17c>)
 800f046:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f04e:	2304      	movs	r3, #4
 800f050:	e01d      	b.n	800f08e <tcp_get_value+0x172>
  case 14: /* tcpInErrs */
    *uint_ptr = STATS_GET(mib2.tcpinerrs);
 800f052:	4b11      	ldr	r3, [pc, #68]	@ (800f098 <tcp_get_value+0x17c>)
 800f054:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f05c:	2304      	movs	r3, #4
 800f05e:	e016      	b.n	800f08e <tcp_get_value+0x172>
  case 15: /* tcpOutRsts */
    *uint_ptr = STATS_GET(mib2.tcpoutrsts);
 800f060:	4b0d      	ldr	r3, [pc, #52]	@ (800f098 <tcp_get_value+0x17c>)
 800f062:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f06a:	2304      	movs	r3, #4
 800f06c:	e00f      	b.n	800f08e <tcp_get_value+0x172>
  case 17: /* tcpHCInSegs */
    memset(value, 0, 2*sizeof(u32_t)); /* not supported */
 800f06e:	2208      	movs	r2, #8
 800f070:	2100      	movs	r1, #0
 800f072:	6838      	ldr	r0, [r7, #0]
 800f074:	f011 fbea 	bl	802084c <memset>
    return 2*sizeof(u32_t);
 800f078:	2308      	movs	r3, #8
 800f07a:	e008      	b.n	800f08e <tcp_get_value+0x172>
  case 18: /* tcpHCOutSegs */
    memset(value, 0, 2*sizeof(u32_t)); /* not supported */
 800f07c:	2208      	movs	r2, #8
 800f07e:	2100      	movs	r1, #0
 800f080:	6838      	ldr	r0, [r7, #0]
 800f082:	f011 fbe3 	bl	802084c <memset>
    return 2*sizeof(u32_t);
 800f086:	2308      	movs	r3, #8
 800f088:	e001      	b.n	800f08e <tcp_get_value+0x172>
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("tcp_get_value(): unknown id: %"S32_F"\n", instance->node->oid));
    break;
 800f08a:	bf00      	nop
  }

  return 0;
 800f08c:	2300      	movs	r3, #0
}
 800f08e:	4618      	mov	r0, r3
 800f090:	3718      	adds	r7, #24
 800f092:	46bd      	mov	sp, r7
 800f094:	bd80      	pop	{r7, pc}
 800f096:	bf00      	nop
 800f098:	2000db84 	.word	0x2000db84
 800f09c:	2000dd28 	.word	0x2000dd28

0800f0a0 <tcp_ConnTable_get_cell_value_core>:
  { 0, 0xffff }  /* Port */
};

static snmp_err_t
tcp_ConnTable_get_cell_value_core(struct tcp_pcb *pcb, const u32_t* column, union snmp_variant_value* value, u32_t* value_len)
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b084      	sub	sp, #16
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	60f8      	str	r0, [r7, #12]
 800f0a8:	60b9      	str	r1, [r7, #8]
 800f0aa:	607a      	str	r2, [r7, #4]
 800f0ac:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(value_len);

  /* value */
  switch (*column) {
 800f0ae:	68bb      	ldr	r3, [r7, #8]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	3b01      	subs	r3, #1
 800f0b4:	2b04      	cmp	r3, #4
 800f0b6:	d83b      	bhi.n	800f130 <tcp_ConnTable_get_cell_value_core+0x90>
 800f0b8:	a201      	add	r2, pc, #4	@ (adr r2, 800f0c0 <tcp_ConnTable_get_cell_value_core+0x20>)
 800f0ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0be:	bf00      	nop
 800f0c0:	0800f0d5 	.word	0x0800f0d5
 800f0c4:	0800f0e3 	.word	0x0800f0e3
 800f0c8:	0800f0ed 	.word	0x0800f0ed
 800f0cc:	0800f0f9 	.word	0x0800f0f9
 800f0d0:	0800f115 	.word	0x0800f115
  case 1: /* tcpConnState */
    value->u32 = pcb->state + 1;
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	7d1b      	ldrb	r3, [r3, #20]
 800f0d8:	3301      	adds	r3, #1
 800f0da:	461a      	mov	r2, r3
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	601a      	str	r2, [r3, #0]
    break;
 800f0e0:	e02e      	b.n	800f140 <tcp_ConnTable_get_cell_value_core+0xa0>
  case 2: /* tcpConnLocalAddress */
    value->u32 = ip_2_ip4(&pcb->local_ip)->addr;
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	681a      	ldr	r2, [r3, #0]
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	601a      	str	r2, [r3, #0]
    break;
 800f0ea:	e029      	b.n	800f140 <tcp_ConnTable_get_cell_value_core+0xa0>
  case 3: /* tcpConnLocalPort */
    value->u32 = pcb->local_port;
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	8adb      	ldrh	r3, [r3, #22]
 800f0f0:	461a      	mov	r2, r3
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	601a      	str	r2, [r3, #0]
    break;
 800f0f6:	e023      	b.n	800f140 <tcp_ConnTable_get_cell_value_core+0xa0>
  case 4: /* tcpConnRemAddress */
    if (pcb->state == LISTEN) {
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	7d1b      	ldrb	r3, [r3, #20]
 800f0fc:	2b01      	cmp	r3, #1
 800f0fe:	d104      	bne.n	800f10a <tcp_ConnTable_get_cell_value_core+0x6a>
      value->u32 = IP4_ADDR_ANY4->addr;
 800f100:	4b12      	ldr	r3, [pc, #72]	@ (800f14c <tcp_ConnTable_get_cell_value_core+0xac>)
 800f102:	681a      	ldr	r2, [r3, #0]
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	601a      	str	r2, [r3, #0]
    } else {
      value->u32 = ip_2_ip4(&pcb->remote_ip)->addr;
    }
    break;
 800f108:	e01a      	b.n	800f140 <tcp_ConnTable_get_cell_value_core+0xa0>
      value->u32 = ip_2_ip4(&pcb->remote_ip)->addr;
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	685a      	ldr	r2, [r3, #4]
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	601a      	str	r2, [r3, #0]
    break;
 800f112:	e015      	b.n	800f140 <tcp_ConnTable_get_cell_value_core+0xa0>
  case 5: /* tcpConnRemPort */
    if (pcb->state == LISTEN) {
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	7d1b      	ldrb	r3, [r3, #20]
 800f118:	2b01      	cmp	r3, #1
 800f11a:	d103      	bne.n	800f124 <tcp_ConnTable_get_cell_value_core+0x84>
      value->u32 = 0;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	2200      	movs	r2, #0
 800f120:	601a      	str	r2, [r3, #0]
    } else {
      value->u32 = pcb->remote_port;
    }
    break;
 800f122:	e00d      	b.n	800f140 <tcp_ConnTable_get_cell_value_core+0xa0>
      value->u32 = pcb->remote_port;
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	8b1b      	ldrh	r3, [r3, #24]
 800f128:	461a      	mov	r2, r3
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	601a      	str	r2, [r3, #0]
    break;
 800f12e:	e007      	b.n	800f140 <tcp_ConnTable_get_cell_value_core+0xa0>
  default:
    LWIP_ASSERT("invalid id", 0);
 800f130:	4b07      	ldr	r3, [pc, #28]	@ (800f150 <tcp_ConnTable_get_cell_value_core+0xb0>)
 800f132:	22bc      	movs	r2, #188	@ 0xbc
 800f134:	4907      	ldr	r1, [pc, #28]	@ (800f154 <tcp_ConnTable_get_cell_value_core+0xb4>)
 800f136:	4808      	ldr	r0, [pc, #32]	@ (800f158 <tcp_ConnTable_get_cell_value_core+0xb8>)
 800f138:	f011 f9b2 	bl	80204a0 <iprintf>
    return SNMP_ERR_NOSUCHINSTANCE;
 800f13c:	23f1      	movs	r3, #241	@ 0xf1
 800f13e:	e000      	b.n	800f142 <tcp_ConnTable_get_cell_value_core+0xa2>
  }

  return SNMP_ERR_NOERROR;
 800f140:	2300      	movs	r3, #0
}
 800f142:	4618      	mov	r0, r3
 800f144:	3710      	adds	r7, #16
 800f146:	46bd      	mov	sp, r7
 800f148:	bd80      	pop	{r7, pc}
 800f14a:	bf00      	nop
 800f14c:	0802f050 	.word	0x0802f050
 800f150:	08023bac 	.word	0x08023bac
 800f154:	08023bec 	.word	0x08023bec
 800f158:	08023bf8 	.word	0x08023bf8

0800f15c <tcp_ConnTable_get_cell_value>:

static snmp_err_t
tcp_ConnTable_get_cell_value(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, union snmp_variant_value* value, u32_t* value_len)
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b08a      	sub	sp, #40	@ 0x28
 800f160:	af00      	add	r7, sp, #0
 800f162:	60f8      	str	r0, [r7, #12]
 800f164:	60b9      	str	r1, [r7, #8]
 800f166:	603b      	str	r3, [r7, #0]
 800f168:	4613      	mov	r3, r2
 800f16a:	71fb      	strb	r3, [r7, #7]
  u16_t local_port;
  u16_t remote_port;
  struct tcp_pcb *pcb;

  /* check if incoming OID length and if values are in plausible range */
  if (!snmp_oid_in_range(row_oid, row_oid_len, tcp_ConnTable_oid_ranges, LWIP_ARRAYSIZE(tcp_ConnTable_oid_ranges))) {
 800f16c:	79f9      	ldrb	r1, [r7, #7]
 800f16e:	230a      	movs	r3, #10
 800f170:	4a37      	ldr	r2, [pc, #220]	@ (800f250 <tcp_ConnTable_get_cell_value+0xf4>)
 800f172:	68b8      	ldr	r0, [r7, #8]
 800f174:	f7fe fd2e 	bl	800dbd4 <snmp_oid_in_range>
 800f178:	4603      	mov	r3, r0
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d101      	bne.n	800f182 <tcp_ConnTable_get_cell_value+0x26>
    return SNMP_ERR_NOSUCHINSTANCE;
 800f17e:	23f1      	movs	r3, #241	@ 0xf1
 800f180:	e061      	b.n	800f246 <tcp_ConnTable_get_cell_value+0xea>
  }

  /* get IPs and ports from incoming OID */
  snmp_oid_to_ip4(&row_oid[0], &local_ip); /* we know it succeeds because of oid_in_range check above */
 800f182:	f107 0318 	add.w	r3, r7, #24
 800f186:	4619      	mov	r1, r3
 800f188:	68b8      	ldr	r0, [r7, #8]
 800f18a:	f7fd fdd5 	bl	800cd38 <snmp_oid_to_ip4>
  local_port = (u16_t)row_oid[4];
 800f18e:	68bb      	ldr	r3, [r7, #8]
 800f190:	3310      	adds	r3, #16
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	83fb      	strh	r3, [r7, #30]
  snmp_oid_to_ip4(&row_oid[5], &remote_ip); /* we know it succeeds because of oid_in_range check above */
 800f196:	68bb      	ldr	r3, [r7, #8]
 800f198:	3314      	adds	r3, #20
 800f19a:	f107 0214 	add.w	r2, r7, #20
 800f19e:	4611      	mov	r1, r2
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	f7fd fdc9 	bl	800cd38 <snmp_oid_to_ip4>
  remote_port = (u16_t)row_oid[9];
 800f1a6:	68bb      	ldr	r3, [r7, #8]
 800f1a8:	3324      	adds	r3, #36	@ 0x24
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	83bb      	strh	r3, [r7, #28]

  /* find tcp_pcb with requested ips and ports */
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f1b4:	e042      	b.n	800f23c <tcp_ConnTable_get_cell_value+0xe0>
    pcb = *tcp_pcb_lists[i];
 800f1b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f1ba:	4a26      	ldr	r2, [pc, #152]	@ (800f254 <tcp_ConnTable_get_cell_value+0xf8>)
 800f1bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	623b      	str	r3, [r7, #32]

    while (pcb != NULL) {
 800f1c4:	e032      	b.n	800f22c <tcp_ConnTable_get_cell_value+0xd0>
      /* do local IP and local port match? */
      if (IP_IS_V4_VAL(pcb->local_ip) &&
         ip4_addr_cmp(&local_ip, ip_2_ip4(&pcb->local_ip)) && (local_port == pcb->local_port)) {
 800f1c6:	69ba      	ldr	r2, [r7, #24]
 800f1c8:	6a3b      	ldr	r3, [r7, #32]
 800f1ca:	681b      	ldr	r3, [r3, #0]
      if (IP_IS_V4_VAL(pcb->local_ip) &&
 800f1cc:	429a      	cmp	r2, r3
 800f1ce:	d12a      	bne.n	800f226 <tcp_ConnTable_get_cell_value+0xca>
         ip4_addr_cmp(&local_ip, ip_2_ip4(&pcb->local_ip)) && (local_port == pcb->local_port)) {
 800f1d0:	6a3b      	ldr	r3, [r7, #32]
 800f1d2:	8adb      	ldrh	r3, [r3, #22]
 800f1d4:	8bfa      	ldrh	r2, [r7, #30]
 800f1d6:	429a      	cmp	r2, r3
 800f1d8:	d125      	bne.n	800f226 <tcp_ConnTable_get_cell_value+0xca>

        /* PCBs in state LISTEN are not connected and have no remote_ip or remote_port */
        if (pcb->state == LISTEN) {
 800f1da:	6a3b      	ldr	r3, [r7, #32]
 800f1dc:	7d1b      	ldrb	r3, [r3, #20]
 800f1de:	2b01      	cmp	r3, #1
 800f1e0:	d10f      	bne.n	800f202 <tcp_ConnTable_get_cell_value+0xa6>
          if (ip4_addr_cmp(&remote_ip, IP4_ADDR_ANY4) && (remote_port == 0)) {
 800f1e2:	697a      	ldr	r2, [r7, #20]
 800f1e4:	4b1c      	ldr	r3, [pc, #112]	@ (800f258 <tcp_ConnTable_get_cell_value+0xfc>)
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	429a      	cmp	r2, r3
 800f1ea:	d11c      	bne.n	800f226 <tcp_ConnTable_get_cell_value+0xca>
 800f1ec:	8bbb      	ldrh	r3, [r7, #28]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d119      	bne.n	800f226 <tcp_ConnTable_get_cell_value+0xca>
            /* fill in object properties */
            return tcp_ConnTable_get_cell_value_core(pcb, column, value, value_len);
 800f1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1f4:	683a      	ldr	r2, [r7, #0]
 800f1f6:	68f9      	ldr	r1, [r7, #12]
 800f1f8:	6a38      	ldr	r0, [r7, #32]
 800f1fa:	f7ff ff51 	bl	800f0a0 <tcp_ConnTable_get_cell_value_core>
 800f1fe:	4603      	mov	r3, r0
 800f200:	e021      	b.n	800f246 <tcp_ConnTable_get_cell_value+0xea>
          }
        } else {
          if (IP_IS_V4_VAL(pcb->remote_ip) &&
             ip4_addr_cmp(&remote_ip, ip_2_ip4(&pcb->remote_ip)) && (remote_port == pcb->remote_port)) {
 800f202:	697a      	ldr	r2, [r7, #20]
 800f204:	6a3b      	ldr	r3, [r7, #32]
 800f206:	685b      	ldr	r3, [r3, #4]
          if (IP_IS_V4_VAL(pcb->remote_ip) &&
 800f208:	429a      	cmp	r2, r3
 800f20a:	d10c      	bne.n	800f226 <tcp_ConnTable_get_cell_value+0xca>
             ip4_addr_cmp(&remote_ip, ip_2_ip4(&pcb->remote_ip)) && (remote_port == pcb->remote_port)) {
 800f20c:	6a3b      	ldr	r3, [r7, #32]
 800f20e:	8b1b      	ldrh	r3, [r3, #24]
 800f210:	8bba      	ldrh	r2, [r7, #28]
 800f212:	429a      	cmp	r2, r3
 800f214:	d107      	bne.n	800f226 <tcp_ConnTable_get_cell_value+0xca>
            /* fill in object properties */
            return tcp_ConnTable_get_cell_value_core(pcb, column, value, value_len);
 800f216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f218:	683a      	ldr	r2, [r7, #0]
 800f21a:	68f9      	ldr	r1, [r7, #12]
 800f21c:	6a38      	ldr	r0, [r7, #32]
 800f21e:	f7ff ff3f 	bl	800f0a0 <tcp_ConnTable_get_cell_value_core>
 800f222:	4603      	mov	r3, r0
 800f224:	e00f      	b.n	800f246 <tcp_ConnTable_get_cell_value+0xea>
          }
        }
      }

      pcb = pcb->next;
 800f226:	6a3b      	ldr	r3, [r7, #32]
 800f228:	68db      	ldr	r3, [r3, #12]
 800f22a:	623b      	str	r3, [r7, #32]
    while (pcb != NULL) {
 800f22c:	6a3b      	ldr	r3, [r7, #32]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d1c9      	bne.n	800f1c6 <tcp_ConnTable_get_cell_value+0x6a>
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f232:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f236:	3301      	adds	r3, #1
 800f238:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f23c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f240:	2b03      	cmp	r3, #3
 800f242:	d9b8      	bls.n	800f1b6 <tcp_ConnTable_get_cell_value+0x5a>
    }
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 800f244:	23f1      	movs	r3, #241	@ 0xf1
}
 800f246:	4618      	mov	r0, r3
 800f248:	3728      	adds	r7, #40	@ 0x28
 800f24a:	46bd      	mov	sp, r7
 800f24c:	bd80      	pop	{r7, pc}
 800f24e:	bf00      	nop
 800f250:	0802e9c4 	.word	0x0802e9c4
 800f254:	0802f018 	.word	0x0802f018
 800f258:	0802f050 	.word	0x0802f050

0800f25c <tcp_ConnTable_get_next_cell_instance_and_value>:

static snmp_err_t
tcp_ConnTable_get_next_cell_instance_and_value(const u32_t* column, struct snmp_obj_id* row_oid, union snmp_variant_value* value, u32_t* value_len)
{
 800f25c:	b590      	push	{r4, r7, lr}
 800f25e:	b0a3      	sub	sp, #140	@ 0x8c
 800f260:	af02      	add	r7, sp, #8
 800f262:	60f8      	str	r0, [r7, #12]
 800f264:	60b9      	str	r1, [r7, #8]
 800f266:	607a      	str	r2, [r7, #4]
 800f268:	603b      	str	r3, [r7, #0]
  struct tcp_pcb *pcb;
  struct snmp_next_oid_state state;
  u32_t result_temp[LWIP_ARRAYSIZE(tcp_ConnTable_oid_ranges)];

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(tcp_ConnTable_oid_ranges));
 800f26a:	68bb      	ldr	r3, [r7, #8]
 800f26c:	1d19      	adds	r1, r3, #4
 800f26e:	68bb      	ldr	r3, [r7, #8]
 800f270:	781a      	ldrb	r2, [r3, #0]
 800f272:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800f276:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 800f27a:	240a      	movs	r4, #10
 800f27c:	9400      	str	r4, [sp, #0]
 800f27e:	f7fe fc44 	bl	800db0a <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f282:	2300      	movs	r3, #0
 800f284:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800f288:	e03e      	b.n	800f308 <tcp_ConnTable_get_next_cell_instance_and_value+0xac>
    pcb = *tcp_pcb_lists[i];
 800f28a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800f28e:	4a2c      	ldr	r2, [pc, #176]	@ (800f340 <tcp_ConnTable_get_next_cell_instance_and_value+0xe4>)
 800f290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	67bb      	str	r3, [r7, #120]	@ 0x78
    while (pcb != NULL) {
 800f298:	e02e      	b.n	800f2f8 <tcp_ConnTable_get_next_cell_instance_and_value+0x9c>
      u32_t test_oid[LWIP_ARRAYSIZE(tcp_ConnTable_oid_ranges)];

      if (IP_IS_V4_VAL(pcb->local_ip)) {
        snmp_ip4_to_oid(ip_2_ip4(&pcb->local_ip), &test_oid[0]);
 800f29a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f29c:	f107 0214 	add.w	r2, r7, #20
 800f2a0:	4611      	mov	r1, r2
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	f7fd fdd0 	bl	800ce48 <snmp_ip4_to_oid>
        test_oid[4] = pcb->local_port;
 800f2a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f2aa:	8adb      	ldrh	r3, [r3, #22]
 800f2ac:	627b      	str	r3, [r7, #36]	@ 0x24

        /* PCBs in state LISTEN are not connected and have no remote_ip or remote_port */
        if (pcb->state == LISTEN) {
 800f2ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f2b0:	7d1b      	ldrb	r3, [r3, #20]
 800f2b2:	2b01      	cmp	r3, #1
 800f2b4:	d109      	bne.n	800f2ca <tcp_ConnTable_get_next_cell_instance_and_value+0x6e>
          snmp_ip4_to_oid(IP4_ADDR_ANY4, &test_oid[5]);
 800f2b6:	f107 0314 	add.w	r3, r7, #20
 800f2ba:	3314      	adds	r3, #20
 800f2bc:	4619      	mov	r1, r3
 800f2be:	4821      	ldr	r0, [pc, #132]	@ (800f344 <tcp_ConnTable_get_next_cell_instance_and_value+0xe8>)
 800f2c0:	f7fd fdc2 	bl	800ce48 <snmp_ip4_to_oid>
          test_oid[9] = 0;
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f2c8:	e00b      	b.n	800f2e2 <tcp_ConnTable_get_next_cell_instance_and_value+0x86>
        } else {
          if (IP_IS_V6_VAL(pcb->remote_ip)) { /* should never happen */
            continue;
          }
          snmp_ip4_to_oid(ip_2_ip4(&pcb->remote_ip), &test_oid[5]);
 800f2ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f2cc:	1d1a      	adds	r2, r3, #4
 800f2ce:	f107 0314 	add.w	r3, r7, #20
 800f2d2:	3314      	adds	r3, #20
 800f2d4:	4619      	mov	r1, r3
 800f2d6:	4610      	mov	r0, r2
 800f2d8:	f7fd fdb6 	bl	800ce48 <snmp_ip4_to_oid>
          test_oid[9] = pcb->remote_port;
 800f2dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f2de:	8b1b      	ldrh	r3, [r3, #24]
 800f2e0:	63bb      	str	r3, [r7, #56]	@ 0x38
        }

        /* check generated OID: is it a candidate for the next one? */
        snmp_next_oid_check(&state, test_oid, LWIP_ARRAYSIZE(tcp_ConnTable_oid_ranges), pcb);
 800f2e2:	f107 0114 	add.w	r1, r7, #20
 800f2e6:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 800f2ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f2ec:	220a      	movs	r2, #10
 800f2ee:	f7fe fc2b 	bl	800db48 <snmp_next_oid_check>
      }

      pcb = pcb->next;
 800f2f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f2f4:	68db      	ldr	r3, [r3, #12]
 800f2f6:	67bb      	str	r3, [r7, #120]	@ 0x78
    while (pcb != NULL) {
 800f2f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d1cd      	bne.n	800f29a <tcp_ConnTable_get_next_cell_instance_and_value+0x3e>
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f2fe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800f302:	3301      	adds	r3, #1
 800f304:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800f308:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800f30c:	2b03      	cmp	r3, #3
 800f30e:	d9bc      	bls.n	800f28a <tcp_ConnTable_get_next_cell_instance_and_value+0x2e>
    }
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 800f310:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800f314:	2b00      	cmp	r3, #0
 800f316:	d10e      	bne.n	800f336 <tcp_ConnTable_get_next_cell_instance_and_value+0xda>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 800f318:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f31a:	f897 2070 	ldrb.w	r2, [r7, #112]	@ 0x70
 800f31e:	4619      	mov	r1, r3
 800f320:	68b8      	ldr	r0, [r7, #8]
 800f322:	f7fd fe6f 	bl	800d004 <snmp_oid_assign>
    /* fill in object properties */
    return tcp_ConnTable_get_cell_value_core((struct tcp_pcb*)state.reference, column, value, value_len);
 800f326:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800f328:	683b      	ldr	r3, [r7, #0]
 800f32a:	687a      	ldr	r2, [r7, #4]
 800f32c:	68f9      	ldr	r1, [r7, #12]
 800f32e:	f7ff feb7 	bl	800f0a0 <tcp_ConnTable_get_cell_value_core>
 800f332:	4603      	mov	r3, r0
 800f334:	e000      	b.n	800f338 <tcp_ConnTable_get_next_cell_instance_and_value+0xdc>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 800f336:	23f1      	movs	r3, #241	@ 0xf1
}
 800f338:	4618      	mov	r0, r3
 800f33a:	3784      	adds	r7, #132	@ 0x84
 800f33c:	46bd      	mov	sp, r7
 800f33e:	bd90      	pop	{r4, r7, pc}
 800f340:	0802f018 	.word	0x0802f018
 800f344:	0802f050 	.word	0x0802f050

0800f348 <tcp_ConnectionTable_get_cell_value_core>:

/* --- tcpConnectionTable --- */

static snmp_err_t
tcp_ConnectionTable_get_cell_value_core(const u32_t* column, struct tcp_pcb *pcb, union snmp_variant_value* value)
{
 800f348:	b480      	push	{r7}
 800f34a:	b085      	sub	sp, #20
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	60f8      	str	r0, [r7, #12]
 800f350:	60b9      	str	r1, [r7, #8]
 800f352:	607a      	str	r2, [r7, #4]
  /* all items except tcpConnectionState and tcpConnectionProcess are declared as not-accessible */
  switch (*column) {
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	2b07      	cmp	r3, #7
 800f35a:	d002      	beq.n	800f362 <tcp_ConnectionTable_get_cell_value_core+0x1a>
 800f35c:	2b08      	cmp	r3, #8
 800f35e:	d007      	beq.n	800f370 <tcp_ConnectionTable_get_cell_value_core+0x28>
 800f360:	e00a      	b.n	800f378 <tcp_ConnectionTable_get_cell_value_core+0x30>
  case 7: /* tcpConnectionState */
    value->u32 = pcb->state + 1;
 800f362:	68bb      	ldr	r3, [r7, #8]
 800f364:	7d1b      	ldrb	r3, [r3, #20]
 800f366:	3301      	adds	r3, #1
 800f368:	461a      	mov	r2, r3
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	601a      	str	r2, [r3, #0]
    break;
 800f36e:	e005      	b.n	800f37c <tcp_ConnectionTable_get_cell_value_core+0x34>
  case 8: /* tcpConnectionProcess */
    value->u32 = 0; /* not supported */
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	2200      	movs	r2, #0
 800f374:	601a      	str	r2, [r3, #0]
    break;
 800f376:	e001      	b.n	800f37c <tcp_ConnectionTable_get_cell_value_core+0x34>
  default:
    return SNMP_ERR_NOSUCHINSTANCE;
 800f378:	23f1      	movs	r3, #241	@ 0xf1
 800f37a:	e000      	b.n	800f37e <tcp_ConnectionTable_get_cell_value_core+0x36>
  }

  return SNMP_ERR_NOERROR;
 800f37c:	2300      	movs	r3, #0
}
 800f37e:	4618      	mov	r0, r3
 800f380:	3714      	adds	r7, #20
 800f382:	46bd      	mov	sp, r7
 800f384:	bc80      	pop	{r7}
 800f386:	4770      	bx	lr

0800f388 <tcp_ConnectionTable_get_cell_value>:

static snmp_err_t
tcp_ConnectionTable_get_cell_value(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, union snmp_variant_value* value, u32_t* value_len)
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b08c      	sub	sp, #48	@ 0x30
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	60f8      	str	r0, [r7, #12]
 800f390:	60b9      	str	r1, [r7, #8]
 800f392:	603b      	str	r3, [r7, #0]
 800f394:	4613      	mov	r3, r2
 800f396:	71fb      	strb	r3, [r7, #7]
  ip_addr_t local_ip, remote_ip;
  u16_t local_port, remote_port;
  struct tcp_pcb *pcb;
  u8_t idx = 0;
 800f398:	2300      	movs	r3, #0
 800f39a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  u8_t i;
  struct tcp_pcb ** const tcp_pcb_nonlisten_lists[] = {&tcp_bound_pcbs, &tcp_active_pcbs, &tcp_tw_pcbs};
 800f39e:	4a3e      	ldr	r2, [pc, #248]	@ (800f498 <tcp_ConnectionTable_get_cell_value+0x110>)
 800f3a0:	f107 0310 	add.w	r3, r7, #16
 800f3a4:	ca07      	ldmia	r2, {r0, r1, r2}
 800f3a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  LWIP_UNUSED_ARG(value_len);

  /* tcpConnectionLocalAddressType + tcpConnectionLocalAddress + tcpConnectionLocalPort */
  idx += snmp_oid_to_ip_port(&row_oid[idx], row_oid_len-idx, &local_ip, &local_port);
 800f3aa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800f3ae:	009b      	lsls	r3, r3, #2
 800f3b0:	68ba      	ldr	r2, [r7, #8]
 800f3b2:	18d0      	adds	r0, r2, r3
 800f3b4:	79fa      	ldrb	r2, [r7, #7]
 800f3b6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800f3ba:	1ad3      	subs	r3, r2, r3
 800f3bc:	b2d9      	uxtb	r1, r3
 800f3be:	f107 031e 	add.w	r3, r7, #30
 800f3c2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800f3c6:	f7fd fddd 	bl	800cf84 <snmp_oid_to_ip_port>
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	461a      	mov	r2, r3
 800f3ce:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800f3d2:	4413      	add	r3, r2
 800f3d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  if (idx == 0) {
 800f3d8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d101      	bne.n	800f3e4 <tcp_ConnectionTable_get_cell_value+0x5c>
    return SNMP_ERR_NOSUCHINSTANCE;
 800f3e0:	23f1      	movs	r3, #241	@ 0xf1
 800f3e2:	e055      	b.n	800f490 <tcp_ConnectionTable_get_cell_value+0x108>
  }

  /* tcpConnectionRemAddressType + tcpConnectionRemAddress + tcpConnectionRemPort */
  idx += snmp_oid_to_ip_port(&row_oid[idx], row_oid_len-idx, &remote_ip, &remote_port);
 800f3e4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800f3e8:	009b      	lsls	r3, r3, #2
 800f3ea:	68ba      	ldr	r2, [r7, #8]
 800f3ec:	18d0      	adds	r0, r2, r3
 800f3ee:	79fa      	ldrb	r2, [r7, #7]
 800f3f0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800f3f4:	1ad3      	subs	r3, r2, r3
 800f3f6:	b2d9      	uxtb	r1, r3
 800f3f8:	f107 031c 	add.w	r3, r7, #28
 800f3fc:	f107 0220 	add.w	r2, r7, #32
 800f400:	f7fd fdc0 	bl	800cf84 <snmp_oid_to_ip_port>
 800f404:	4603      	mov	r3, r0
 800f406:	461a      	mov	r2, r3
 800f408:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800f40c:	4413      	add	r3, r2
 800f40e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  if (idx == 0) {
 800f412:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800f416:	2b00      	cmp	r3, #0
 800f418:	d101      	bne.n	800f41e <tcp_ConnectionTable_get_cell_value+0x96>
    return SNMP_ERR_NOSUCHINSTANCE;
 800f41a:	23f1      	movs	r3, #241	@ 0xf1
 800f41c:	e038      	b.n	800f490 <tcp_ConnectionTable_get_cell_value+0x108>
  }

  /* find tcp_pcb with requested ip and port*/
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_nonlisten_lists); i++) {
 800f41e:	2300      	movs	r3, #0
 800f420:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f424:	e02f      	b.n	800f486 <tcp_ConnectionTable_get_cell_value+0xfe>
    pcb = *tcp_pcb_nonlisten_lists[i];
 800f426:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f42a:	009b      	lsls	r3, r3, #2
 800f42c:	3330      	adds	r3, #48	@ 0x30
 800f42e:	443b      	add	r3, r7
 800f430:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while (pcb != NULL) {
 800f438:	e01d      	b.n	800f476 <tcp_ConnectionTable_get_cell_value+0xee>
      if (ip_addr_cmp(&local_ip, &pcb->local_ip) &&
 800f43a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f43c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	429a      	cmp	r2, r3
 800f442:	d115      	bne.n	800f470 <tcp_ConnectionTable_get_cell_value+0xe8>
         (local_port == pcb->local_port) &&
 800f444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f446:	8ada      	ldrh	r2, [r3, #22]
 800f448:	8bfb      	ldrh	r3, [r7, #30]
      if (ip_addr_cmp(&local_ip, &pcb->local_ip) &&
 800f44a:	429a      	cmp	r2, r3
 800f44c:	d110      	bne.n	800f470 <tcp_ConnectionTable_get_cell_value+0xe8>
         ip_addr_cmp(&remote_ip, &pcb->remote_ip) &&
 800f44e:	6a3a      	ldr	r2, [r7, #32]
 800f450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f452:	685b      	ldr	r3, [r3, #4]
         (local_port == pcb->local_port) &&
 800f454:	429a      	cmp	r2, r3
 800f456:	d10b      	bne.n	800f470 <tcp_ConnectionTable_get_cell_value+0xe8>
         (remote_port == pcb->remote_port)) {
 800f458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f45a:	8b1a      	ldrh	r2, [r3, #24]
 800f45c:	8bbb      	ldrh	r3, [r7, #28]
         ip_addr_cmp(&remote_ip, &pcb->remote_ip) &&
 800f45e:	429a      	cmp	r2, r3
 800f460:	d106      	bne.n	800f470 <tcp_ConnectionTable_get_cell_value+0xe8>
        /* fill in object properties */
        return tcp_ConnectionTable_get_cell_value_core(column, pcb, value);
 800f462:	683a      	ldr	r2, [r7, #0]
 800f464:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f466:	68f8      	ldr	r0, [r7, #12]
 800f468:	f7ff ff6e 	bl	800f348 <tcp_ConnectionTable_get_cell_value_core>
 800f46c:	4603      	mov	r3, r0
 800f46e:	e00f      	b.n	800f490 <tcp_ConnectionTable_get_cell_value+0x108>
      }
      pcb = pcb->next;
 800f470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f472:	68db      	ldr	r3, [r3, #12]
 800f474:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (pcb != NULL) {
 800f476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d1de      	bne.n	800f43a <tcp_ConnectionTable_get_cell_value+0xb2>
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_nonlisten_lists); i++) {
 800f47c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f480:	3301      	adds	r3, #1
 800f482:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f486:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f48a:	2b02      	cmp	r3, #2
 800f48c:	d9cb      	bls.n	800f426 <tcp_ConnectionTable_get_cell_value+0x9e>
    }
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 800f48e:	23f1      	movs	r3, #241	@ 0xf1
}
 800f490:	4618      	mov	r0, r3
 800f492:	3730      	adds	r7, #48	@ 0x30
 800f494:	46bd      	mov	sp, r7
 800f496:	bd80      	pop	{r7, pc}
 800f498:	08023c20 	.word	0x08023c20

0800f49c <tcp_ConnectionTable_get_next_cell_instance_and_value>:

static snmp_err_t
tcp_ConnectionTable_get_next_cell_instance_and_value(const u32_t* column, struct snmp_obj_id* row_oid, union snmp_variant_value* value, u32_t* value_len)
{
 800f49c:	b590      	push	{r4, r7, lr}
 800f49e:	b0dd      	sub	sp, #372	@ 0x174
 800f4a0:	af02      	add	r7, sp, #8
 800f4a2:	f507 74b4 	add.w	r4, r7, #360	@ 0x168
 800f4a6:	f5a4 74ae 	sub.w	r4, r4, #348	@ 0x15c
 800f4aa:	6020      	str	r0, [r4, #0]
 800f4ac:	f507 70b4 	add.w	r0, r7, #360	@ 0x168
 800f4b0:	f5a0 70b0 	sub.w	r0, r0, #352	@ 0x160
 800f4b4:	6001      	str	r1, [r0, #0]
 800f4b6:	f507 71b4 	add.w	r1, r7, #360	@ 0x168
 800f4ba:	f5a1 71b2 	sub.w	r1, r1, #356	@ 0x164
 800f4be:	600a      	str	r2, [r1, #0]
 800f4c0:	f507 72b4 	add.w	r2, r7, #360	@ 0x168
 800f4c4:	f5a2 72b4 	sub.w	r2, r2, #360	@ 0x168
 800f4c8:	6013      	str	r3, [r2, #0]
  struct snmp_next_oid_state state;
  /* 1x tcpConnectionLocalAddressType + 1x OID len + 16x tcpConnectionLocalAddress  + 1x tcpConnectionLocalPort
   * 1x tcpConnectionRemAddressType   + 1x OID len + 16x tcpConnectionRemAddress    + 1x tcpConnectionRemPort */
  u32_t  result_temp[38];
  u8_t i;
  struct tcp_pcb ** const tcp_pcb_nonlisten_lists[] = {&tcp_bound_pcbs, &tcp_active_pcbs, &tcp_tw_pcbs};
 800f4ca:	4a4c      	ldr	r2, [pc, #304]	@ (800f5fc <tcp_ConnectionTable_get_next_cell_instance_and_value+0x160>)
 800f4cc:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800f4d0:	ca07      	ldmia	r2, {r0, r1, r2}
 800f4d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  LWIP_UNUSED_ARG(value_len);

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(result_temp));
 800f4d6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800f4da:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	1d19      	adds	r1, r3, #4
 800f4e2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800f4e6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	781a      	ldrb	r2, [r3, #0]
 800f4ee:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800f4f2:	f507 70a6 	add.w	r0, r7, #332	@ 0x14c
 800f4f6:	2426      	movs	r4, #38	@ 0x26
 800f4f8:	9400      	str	r4, [sp, #0]
 800f4fa:	f7fe fb06 	bl	800db0a <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_nonlisten_lists); i++) {
 800f4fe:	2300      	movs	r3, #0
 800f500:	f887 3163 	strb.w	r3, [r7, #355]	@ 0x163
 800f504:	e051      	b.n	800f5aa <tcp_ConnectionTable_get_next_cell_instance_and_value+0x10e>
    pcb = *tcp_pcb_nonlisten_lists[i];
 800f506:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 800f50a:	009b      	lsls	r3, r3, #2
 800f50c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800f510:	443b      	add	r3, r7
 800f512:	f853 3cc0 	ldr.w	r3, [r3, #-192]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164

    while (pcb != NULL) {
 800f51c:	e03c      	b.n	800f598 <tcp_ConnectionTable_get_next_cell_instance_and_value+0xfc>
      u8_t idx = 0;
 800f51e:	2300      	movs	r3, #0
 800f520:	f887 3162 	strb.w	r3, [r7, #354]	@ 0x162
      u32_t test_oid[LWIP_ARRAYSIZE(result_temp)];

      /* tcpConnectionLocalAddressType + tcpConnectionLocalAddress + tcpConnectionLocalPort */
      idx += snmp_ip_port_to_oid(&pcb->local_ip, pcb->local_port, &test_oid[idx]);
 800f524:	f8d7 0164 	ldr.w	r0, [r7, #356]	@ 0x164
 800f528:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800f52c:	8ad9      	ldrh	r1, [r3, #22]
 800f52e:	f897 3162 	ldrb.w	r3, [r7, #354]	@ 0x162
 800f532:	f107 0210 	add.w	r2, r7, #16
 800f536:	009b      	lsls	r3, r3, #2
 800f538:	4413      	add	r3, r2
 800f53a:	461a      	mov	r2, r3
 800f53c:	f7fd fca5 	bl	800ce8a <snmp_ip_port_to_oid>
 800f540:	4603      	mov	r3, r0
 800f542:	461a      	mov	r2, r3
 800f544:	f897 3162 	ldrb.w	r3, [r7, #354]	@ 0x162
 800f548:	4413      	add	r3, r2
 800f54a:	f887 3162 	strb.w	r3, [r7, #354]	@ 0x162

      /* tcpConnectionRemAddressType + tcpConnectionRemAddress + tcpConnectionRemPort */
      idx += snmp_ip_port_to_oid(&pcb->remote_ip, pcb->remote_port, &test_oid[idx]);
 800f54e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800f552:	1d18      	adds	r0, r3, #4
 800f554:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800f558:	8b19      	ldrh	r1, [r3, #24]
 800f55a:	f897 3162 	ldrb.w	r3, [r7, #354]	@ 0x162
 800f55e:	f107 0210 	add.w	r2, r7, #16
 800f562:	009b      	lsls	r3, r3, #2
 800f564:	4413      	add	r3, r2
 800f566:	461a      	mov	r2, r3
 800f568:	f7fd fc8f 	bl	800ce8a <snmp_ip_port_to_oid>
 800f56c:	4603      	mov	r3, r0
 800f56e:	461a      	mov	r2, r3
 800f570:	f897 3162 	ldrb.w	r3, [r7, #354]	@ 0x162
 800f574:	4413      	add	r3, r2
 800f576:	f887 3162 	strb.w	r3, [r7, #354]	@ 0x162

      /* check generated OID: is it a candidate for the next one? */
      snmp_next_oid_check(&state, test_oid, idx, pcb);
 800f57a:	f897 2162 	ldrb.w	r2, [r7, #354]	@ 0x162
 800f57e:	f107 0110 	add.w	r1, r7, #16
 800f582:	f507 70a6 	add.w	r0, r7, #332	@ 0x14c
 800f586:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800f58a:	f7fe fadd 	bl	800db48 <snmp_next_oid_check>

      pcb = pcb->next;
 800f58e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800f592:	68db      	ldr	r3, [r3, #12]
 800f594:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    while (pcb != NULL) {
 800f598:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d1be      	bne.n	800f51e <tcp_ConnectionTable_get_next_cell_instance_and_value+0x82>
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_nonlisten_lists); i++) {
 800f5a0:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 800f5a4:	3301      	adds	r3, #1
 800f5a6:	f887 3163 	strb.w	r3, [r7, #355]	@ 0x163
 800f5aa:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 800f5ae:	2b02      	cmp	r3, #2
 800f5b0:	d9a9      	bls.n	800f506 <tcp_ConnectionTable_get_next_cell_instance_and_value+0x6a>
    }
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 800f5b2:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d11a      	bne.n	800f5f0 <tcp_ConnectionTable_get_next_cell_instance_and_value+0x154>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 800f5ba:	f8d7 1154 	ldr.w	r1, [r7, #340]	@ 0x154
 800f5be:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 800f5c2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800f5c6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800f5ca:	6818      	ldr	r0, [r3, #0]
 800f5cc:	f7fd fd1a 	bl	800d004 <snmp_oid_assign>
    /* fill in object properties */
    return tcp_ConnectionTable_get_cell_value_core(column, (struct tcp_pcb*)state.reference, value);
 800f5d0:	f8d7 115c 	ldr.w	r1, [r7, #348]	@ 0x15c
 800f5d4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800f5d8:	f5a3 72b2 	sub.w	r2, r3, #356	@ 0x164
 800f5dc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800f5e0:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800f5e4:	6812      	ldr	r2, [r2, #0]
 800f5e6:	6818      	ldr	r0, [r3, #0]
 800f5e8:	f7ff feae 	bl	800f348 <tcp_ConnectionTable_get_cell_value_core>
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	e000      	b.n	800f5f2 <tcp_ConnectionTable_get_next_cell_instance_and_value+0x156>
  } else {
    /* not found */
    return SNMP_ERR_NOSUCHINSTANCE;
 800f5f0:	23f1      	movs	r3, #241	@ 0xf1
  }
}
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	f507 77b6 	add.w	r7, r7, #364	@ 0x16c
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	bd90      	pop	{r4, r7, pc}
 800f5fc:	08023c20 	.word	0x08023c20

0800f600 <tcp_ListenerTable_get_cell_value_core>:

/* --- tcpListenerTable --- */

static snmp_err_t
tcp_ListenerTable_get_cell_value_core(const u32_t* column, union snmp_variant_value* value)
{
 800f600:	b480      	push	{r7}
 800f602:	b083      	sub	sp, #12
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]
 800f608:	6039      	str	r1, [r7, #0]
  /* all items except tcpListenerProcess are declared as not-accessible */
  switch (*column) {
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	2b04      	cmp	r3, #4
 800f610:	d105      	bne.n	800f61e <tcp_ListenerTable_get_cell_value_core+0x1e>
  case 4: /* tcpListenerProcess */
    value->u32 = 0; /* not supported */
 800f612:	683b      	ldr	r3, [r7, #0]
 800f614:	2200      	movs	r2, #0
 800f616:	601a      	str	r2, [r3, #0]
    break;
 800f618:	bf00      	nop
  default:
    return SNMP_ERR_NOSUCHINSTANCE;
  }

  return SNMP_ERR_NOERROR;
 800f61a:	2300      	movs	r3, #0
 800f61c:	e000      	b.n	800f620 <tcp_ListenerTable_get_cell_value_core+0x20>
    return SNMP_ERR_NOSUCHINSTANCE;
 800f61e:	23f1      	movs	r3, #241	@ 0xf1
}
 800f620:	4618      	mov	r0, r3
 800f622:	370c      	adds	r7, #12
 800f624:	46bd      	mov	sp, r7
 800f626:	bc80      	pop	{r7}
 800f628:	4770      	bx	lr
	...

0800f62c <tcp_ListenerTable_get_cell_value>:

static snmp_err_t
tcp_ListenerTable_get_cell_value(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, union snmp_variant_value* value, u32_t* value_len)
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b088      	sub	sp, #32
 800f630:	af00      	add	r7, sp, #0
 800f632:	60f8      	str	r0, [r7, #12]
 800f634:	60b9      	str	r1, [r7, #8]
 800f636:	603b      	str	r3, [r7, #0]
 800f638:	4613      	mov	r3, r2
 800f63a:	71fb      	strb	r3, [r7, #7]
  ip_addr_t local_ip;
  u16_t local_port;
  struct tcp_pcb_listen *pcb;
  u8_t idx = 0;
 800f63c:	2300      	movs	r3, #0
 800f63e:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(value_len);

  /* tcpListenerLocalAddressType + tcpListenerLocalAddress + tcpListenerLocalPort */
  idx += snmp_oid_to_ip_port(&row_oid[idx], row_oid_len-idx, &local_ip, &local_port);
 800f640:	7efb      	ldrb	r3, [r7, #27]
 800f642:	009b      	lsls	r3, r3, #2
 800f644:	68ba      	ldr	r2, [r7, #8]
 800f646:	18d0      	adds	r0, r2, r3
 800f648:	79fa      	ldrb	r2, [r7, #7]
 800f64a:	7efb      	ldrb	r3, [r7, #27]
 800f64c:	1ad3      	subs	r3, r2, r3
 800f64e:	b2d9      	uxtb	r1, r3
 800f650:	f107 0312 	add.w	r3, r7, #18
 800f654:	f107 0214 	add.w	r2, r7, #20
 800f658:	f7fd fc94 	bl	800cf84 <snmp_oid_to_ip_port>
 800f65c:	4603      	mov	r3, r0
 800f65e:	461a      	mov	r2, r3
 800f660:	7efb      	ldrb	r3, [r7, #27]
 800f662:	4413      	add	r3, r2
 800f664:	76fb      	strb	r3, [r7, #27]
  if (idx == 0) {
 800f666:	7efb      	ldrb	r3, [r7, #27]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d101      	bne.n	800f670 <tcp_ListenerTable_get_cell_value+0x44>
    return SNMP_ERR_NOSUCHINSTANCE;
 800f66c:	23f1      	movs	r3, #241	@ 0xf1
 800f66e:	e01a      	b.n	800f6a6 <tcp_ListenerTable_get_cell_value+0x7a>
  }

  /* find tcp_pcb with requested ip and port*/
  pcb = tcp_listen_pcbs.listen_pcbs;
 800f670:	4b0f      	ldr	r3, [pc, #60]	@ (800f6b0 <tcp_ListenerTable_get_cell_value+0x84>)
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
 800f676:	e012      	b.n	800f69e <tcp_ListenerTable_get_cell_value+0x72>
    if (ip_addr_cmp(&local_ip, &pcb->local_ip) &&
 800f678:	697a      	ldr	r2, [r7, #20]
 800f67a:	69fb      	ldr	r3, [r7, #28]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	429a      	cmp	r2, r3
 800f680:	d10a      	bne.n	800f698 <tcp_ListenerTable_get_cell_value+0x6c>
       (local_port == pcb->local_port)) {
 800f682:	69fb      	ldr	r3, [r7, #28]
 800f684:	8ada      	ldrh	r2, [r3, #22]
 800f686:	8a7b      	ldrh	r3, [r7, #18]
    if (ip_addr_cmp(&local_ip, &pcb->local_ip) &&
 800f688:	429a      	cmp	r2, r3
 800f68a:	d105      	bne.n	800f698 <tcp_ListenerTable_get_cell_value+0x6c>
      /* fill in object properties */
      return tcp_ListenerTable_get_cell_value_core(column, value);
 800f68c:	6839      	ldr	r1, [r7, #0]
 800f68e:	68f8      	ldr	r0, [r7, #12]
 800f690:	f7ff ffb6 	bl	800f600 <tcp_ListenerTable_get_cell_value_core>
 800f694:	4603      	mov	r3, r0
 800f696:	e006      	b.n	800f6a6 <tcp_ListenerTable_get_cell_value+0x7a>
    }
    pcb = pcb->next;
 800f698:	69fb      	ldr	r3, [r7, #28]
 800f69a:	68db      	ldr	r3, [r3, #12]
 800f69c:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
 800f69e:	69fb      	ldr	r3, [r7, #28]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d1e9      	bne.n	800f678 <tcp_ListenerTable_get_cell_value+0x4c>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 800f6a4:	23f1      	movs	r3, #241	@ 0xf1
}
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	3720      	adds	r7, #32
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	bd80      	pop	{r7, pc}
 800f6ae:	bf00      	nop
 800f6b0:	2000dd24 	.word	0x2000dd24

0800f6b4 <tcp_ListenerTable_get_next_cell_instance_and_value>:

static snmp_err_t
tcp_ListenerTable_get_next_cell_instance_and_value(const u32_t* column, struct snmp_obj_id* row_oid, union snmp_variant_value* value, u32_t* value_len)
{
 800f6b4:	b590      	push	{r4, r7, lr}
 800f6b6:	b0b5      	sub	sp, #212	@ 0xd4
 800f6b8:	af02      	add	r7, sp, #8
 800f6ba:	60f8      	str	r0, [r7, #12]
 800f6bc:	60b9      	str	r1, [r7, #8]
 800f6be:	607a      	str	r2, [r7, #4]
 800f6c0:	603b      	str	r3, [r7, #0]
  u32_t  result_temp[19];

  LWIP_UNUSED_ARG(value_len);

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(result_temp));
 800f6c2:	68bb      	ldr	r3, [r7, #8]
 800f6c4:	1d19      	adds	r1, r3, #4
 800f6c6:	68bb      	ldr	r3, [r7, #8]
 800f6c8:	781a      	ldrb	r2, [r3, #0]
 800f6ca:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800f6ce:	f107 00ac 	add.w	r0, r7, #172	@ 0xac
 800f6d2:	2413      	movs	r4, #19
 800f6d4:	9400      	str	r4, [sp, #0]
 800f6d6:	f7fe fa18 	bl	800db0a <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  pcb = tcp_listen_pcbs.listen_pcbs;
 800f6da:	4b23      	ldr	r3, [pc, #140]	@ (800f768 <tcp_ListenerTable_get_next_cell_instance_and_value+0xb4>)
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  while (pcb != NULL) {
 800f6e2:	e025      	b.n	800f730 <tcp_ListenerTable_get_next_cell_instance_and_value+0x7c>
    u8_t idx = 0;
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    u32_t test_oid[LWIP_ARRAYSIZE(result_temp)];

    /* tcpListenerLocalAddressType + tcpListenerLocalAddress + tcpListenerLocalPort */
    idx += snmp_ip_port_to_oid(&pcb->local_ip, pcb->local_port, &test_oid[idx]);
 800f6ea:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 800f6ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f6f2:	8ad9      	ldrh	r1, [r3, #22]
 800f6f4:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 800f6f8:	f107 0214 	add.w	r2, r7, #20
 800f6fc:	009b      	lsls	r3, r3, #2
 800f6fe:	4413      	add	r3, r2
 800f700:	461a      	mov	r2, r3
 800f702:	f7fd fbc2 	bl	800ce8a <snmp_ip_port_to_oid>
 800f706:	4603      	mov	r3, r0
 800f708:	461a      	mov	r2, r3
 800f70a:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 800f70e:	4413      	add	r3, r2
 800f710:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    /* check generated OID: is it a candidate for the next one? */
    snmp_next_oid_check(&state, test_oid, idx, NULL);
 800f714:	f897 20c3 	ldrb.w	r2, [r7, #195]	@ 0xc3
 800f718:	f107 0114 	add.w	r1, r7, #20
 800f71c:	f107 00ac 	add.w	r0, r7, #172	@ 0xac
 800f720:	2300      	movs	r3, #0
 800f722:	f7fe fa11 	bl	800db48 <snmp_next_oid_check>

    pcb = pcb->next;
 800f726:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f72a:	68db      	ldr	r3, [r3, #12]
 800f72c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  while (pcb != NULL) {
 800f730:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f734:	2b00      	cmp	r3, #0
 800f736:	d1d5      	bne.n	800f6e4 <tcp_ListenerTable_get_next_cell_instance_and_value+0x30>
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 800f738:	f897 30ba 	ldrb.w	r3, [r7, #186]	@ 0xba
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d10d      	bne.n	800f75c <tcp_ListenerTable_get_next_cell_instance_and_value+0xa8>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 800f740:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f744:	f897 20b8 	ldrb.w	r2, [r7, #184]	@ 0xb8
 800f748:	4619      	mov	r1, r3
 800f74a:	68b8      	ldr	r0, [r7, #8]
 800f74c:	f7fd fc5a 	bl	800d004 <snmp_oid_assign>
    /* fill in object properties */
    return tcp_ListenerTable_get_cell_value_core(column, value);
 800f750:	6879      	ldr	r1, [r7, #4]
 800f752:	68f8      	ldr	r0, [r7, #12]
 800f754:	f7ff ff54 	bl	800f600 <tcp_ListenerTable_get_cell_value_core>
 800f758:	4603      	mov	r3, r0
 800f75a:	e000      	b.n	800f75e <tcp_ListenerTable_get_next_cell_instance_and_value+0xaa>
  } else {
    /* not found */
    return SNMP_ERR_NOSUCHINSTANCE;
 800f75c:	23f1      	movs	r3, #241	@ 0xf1
  }
}
 800f75e:	4618      	mov	r0, r3
 800f760:	37cc      	adds	r7, #204	@ 0xcc
 800f762:	46bd      	mov	sp, r7
 800f764:	bd90      	pop	{r4, r7, pc}
 800f766:	bf00      	nop
 800f768:	2000dd24 	.word	0x2000dd24

0800f76c <udp_get_value>:

/* --- udp .1.3.6.1.2.1.7 ----------------------------------------------------- */

static s16_t
udp_get_value(struct snmp_node_instance* instance, void* value)
{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b084      	sub	sp, #16
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
 800f774:	6039      	str	r1, [r7, #0]
  u32_t *uint_ptr = (u32_t*)value;
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	60fb      	str	r3, [r7, #12]

  switch (instance->node->oid) {
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	685b      	ldr	r3, [r3, #4]
 800f780:	3b01      	subs	r3, #1
 800f782:	2b08      	cmp	r3, #8
 800f784:	d83e      	bhi.n	800f804 <udp_get_value+0x98>
 800f786:	a201      	add	r2, pc, #4	@ (adr r2, 800f78c <udp_get_value+0x20>)
 800f788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f78c:	0800f7b1 	.word	0x0800f7b1
 800f790:	0800f7bf 	.word	0x0800f7bf
 800f794:	0800f7cd 	.word	0x0800f7cd
 800f798:	0800f7db 	.word	0x0800f7db
 800f79c:	0800f805 	.word	0x0800f805
 800f7a0:	0800f805 	.word	0x0800f805
 800f7a4:	0800f805 	.word	0x0800f805
 800f7a8:	0800f7e9 	.word	0x0800f7e9
 800f7ac:	0800f7f7 	.word	0x0800f7f7
  case 1: /* udpInDatagrams */
    *uint_ptr = STATS_GET(mib2.udpindatagrams);
 800f7b0:	4b17      	ldr	r3, [pc, #92]	@ (800f810 <udp_get_value+0xa4>)
 800f7b2:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f7ba:	2304      	movs	r3, #4
 800f7bc:	e024      	b.n	800f808 <udp_get_value+0x9c>
  case 2: /* udpNoPorts */
    *uint_ptr = STATS_GET(mib2.udpnoports);
 800f7be:	4b14      	ldr	r3, [pc, #80]	@ (800f810 <udp_get_value+0xa4>)
 800f7c0:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f7c8:	2304      	movs	r3, #4
 800f7ca:	e01d      	b.n	800f808 <udp_get_value+0x9c>
  case 3: /* udpInErrors */
    *uint_ptr = STATS_GET(mib2.udpinerrors);
 800f7cc:	4b10      	ldr	r3, [pc, #64]	@ (800f810 <udp_get_value+0xa4>)
 800f7ce:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f7d6:	2304      	movs	r3, #4
 800f7d8:	e016      	b.n	800f808 <udp_get_value+0x9c>
  case 4: /* udpOutDatagrams */
    *uint_ptr = STATS_GET(mib2.udpoutdatagrams);
 800f7da:	4b0d      	ldr	r3, [pc, #52]	@ (800f810 <udp_get_value+0xa4>)
 800f7dc:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	601a      	str	r2, [r3, #0]
    return sizeof(*uint_ptr);
 800f7e4:	2304      	movs	r3, #4
 800f7e6:	e00f      	b.n	800f808 <udp_get_value+0x9c>
  case 8: /* udpHCInDatagrams */
    memset(value, 0, 2*sizeof(u32_t)); /* not supported */
 800f7e8:	2208      	movs	r2, #8
 800f7ea:	2100      	movs	r1, #0
 800f7ec:	6838      	ldr	r0, [r7, #0]
 800f7ee:	f011 f82d 	bl	802084c <memset>
    return 2*sizeof(u32_t);
 800f7f2:	2308      	movs	r3, #8
 800f7f4:	e008      	b.n	800f808 <udp_get_value+0x9c>
  case 9: /* udpHCOutDatagrams */
    memset(value, 0, 2*sizeof(u32_t)); /* not supported */
 800f7f6:	2208      	movs	r2, #8
 800f7f8:	2100      	movs	r1, #0
 800f7fa:	6838      	ldr	r0, [r7, #0]
 800f7fc:	f011 f826 	bl	802084c <memset>
    return 2*sizeof(u32_t);
 800f800:	2308      	movs	r3, #8
 800f802:	e001      	b.n	800f808 <udp_get_value+0x9c>
  default:
    LWIP_DEBUGF(SNMP_MIB_DEBUG,("udp_get_value(): unknown id: %"S32_F"\n", instance->node->oid));
    break;
 800f804:	bf00      	nop
  }

  return 0;
 800f806:	2300      	movs	r3, #0
}
 800f808:	4618      	mov	r0, r3
 800f80a:	3710      	adds	r7, #16
 800f80c:	46bd      	mov	sp, r7
 800f80e:	bd80      	pop	{r7, pc}
 800f810:	2000db84 	.word	0x2000db84

0800f814 <udp_endpointTable_get_cell_value_core>:

/* --- udpEndpointTable --- */

static snmp_err_t
udp_endpointTable_get_cell_value_core(const u32_t* column, union snmp_variant_value* value)
{
 800f814:	b480      	push	{r7}
 800f816:	b083      	sub	sp, #12
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
 800f81c:	6039      	str	r1, [r7, #0]
  /* all items except udpEndpointProcess are declared as not-accessible */
  switch (*column) {
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	2b08      	cmp	r3, #8
 800f824:	d105      	bne.n	800f832 <udp_endpointTable_get_cell_value_core+0x1e>
  case 8: /* udpEndpointProcess */
    value->u32 = 0; /* not supported */
 800f826:	683b      	ldr	r3, [r7, #0]
 800f828:	2200      	movs	r2, #0
 800f82a:	601a      	str	r2, [r3, #0]
    break;
 800f82c:	bf00      	nop
  default:
    return SNMP_ERR_NOSUCHINSTANCE;
  }

  return SNMP_ERR_NOERROR;
 800f82e:	2300      	movs	r3, #0
 800f830:	e000      	b.n	800f834 <udp_endpointTable_get_cell_value_core+0x20>
    return SNMP_ERR_NOSUCHINSTANCE;
 800f832:	23f1      	movs	r3, #241	@ 0xf1
}
 800f834:	4618      	mov	r0, r3
 800f836:	370c      	adds	r7, #12
 800f838:	46bd      	mov	sp, r7
 800f83a:	bc80      	pop	{r7}
 800f83c:	4770      	bx	lr
	...

0800f840 <udp_endpointTable_get_cell_value>:

static snmp_err_t
udp_endpointTable_get_cell_value(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, union snmp_variant_value* value, u32_t* value_len)
{
 800f840:	b580      	push	{r7, lr}
 800f842:	b08a      	sub	sp, #40	@ 0x28
 800f844:	af00      	add	r7, sp, #0
 800f846:	60f8      	str	r0, [r7, #12]
 800f848:	60b9      	str	r1, [r7, #8]
 800f84a:	603b      	str	r3, [r7, #0]
 800f84c:	4613      	mov	r3, r2
 800f84e:	71fb      	strb	r3, [r7, #7]
  ip_addr_t local_ip, remote_ip;
  u16_t local_port, remote_port;
  struct udp_pcb *pcb;
  u8_t idx = 0;
 800f850:	2300      	movs	r3, #0
 800f852:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  LWIP_UNUSED_ARG(value_len);

  /* udpEndpointLocalAddressType + udpEndpointLocalAddress + udpEndpointLocalPort */
  idx += snmp_oid_to_ip_port(&row_oid[idx], row_oid_len-idx, &local_ip, &local_port);
 800f856:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f85a:	009b      	lsls	r3, r3, #2
 800f85c:	68ba      	ldr	r2, [r7, #8]
 800f85e:	18d0      	adds	r0, r2, r3
 800f860:	79fa      	ldrb	r2, [r7, #7]
 800f862:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f866:	1ad3      	subs	r3, r2, r3
 800f868:	b2d9      	uxtb	r1, r3
 800f86a:	f107 0316 	add.w	r3, r7, #22
 800f86e:	f107 021c 	add.w	r2, r7, #28
 800f872:	f7fd fb87 	bl	800cf84 <snmp_oid_to_ip_port>
 800f876:	4603      	mov	r3, r0
 800f878:	461a      	mov	r2, r3
 800f87a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f87e:	4413      	add	r3, r2
 800f880:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (idx == 0) {
 800f884:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d101      	bne.n	800f890 <udp_endpointTable_get_cell_value+0x50>
    return SNMP_ERR_NOSUCHINSTANCE;
 800f88c:	23f1      	movs	r3, #241	@ 0xf1
 800f88e:	e052      	b.n	800f936 <udp_endpointTable_get_cell_value+0xf6>
  }

  /* udpEndpointRemoteAddressType + udpEndpointRemoteAddress + udpEndpointRemotePort */
  idx += snmp_oid_to_ip_port(&row_oid[idx], row_oid_len-idx, &remote_ip, &remote_port);
 800f890:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f894:	009b      	lsls	r3, r3, #2
 800f896:	68ba      	ldr	r2, [r7, #8]
 800f898:	18d0      	adds	r0, r2, r3
 800f89a:	79fa      	ldrb	r2, [r7, #7]
 800f89c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f8a0:	1ad3      	subs	r3, r2, r3
 800f8a2:	b2d9      	uxtb	r1, r3
 800f8a4:	f107 0314 	add.w	r3, r7, #20
 800f8a8:	f107 0218 	add.w	r2, r7, #24
 800f8ac:	f7fd fb6a 	bl	800cf84 <snmp_oid_to_ip_port>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	461a      	mov	r2, r3
 800f8b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f8b8:	4413      	add	r3, r2
 800f8ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (idx == 0) {
 800f8be:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d101      	bne.n	800f8ca <udp_endpointTable_get_cell_value+0x8a>
    return SNMP_ERR_NOSUCHINSTANCE;
 800f8c6:	23f1      	movs	r3, #241	@ 0xf1
 800f8c8:	e035      	b.n	800f936 <udp_endpointTable_get_cell_value+0xf6>
  }

  /* udpEndpointInstance */
  if (row_oid_len < (idx+1)) {
 800f8ca:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800f8ce:	79fb      	ldrb	r3, [r7, #7]
 800f8d0:	429a      	cmp	r2, r3
 800f8d2:	d301      	bcc.n	800f8d8 <udp_endpointTable_get_cell_value+0x98>
    return SNMP_ERR_NOSUCHINSTANCE;
 800f8d4:	23f1      	movs	r3, #241	@ 0xf1
 800f8d6:	e02e      	b.n	800f936 <udp_endpointTable_get_cell_value+0xf6>
  }
  if (row_oid[idx] != 0) {
 800f8d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f8dc:	009b      	lsls	r3, r3, #2
 800f8de:	68ba      	ldr	r2, [r7, #8]
 800f8e0:	4413      	add	r3, r2
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d001      	beq.n	800f8ec <udp_endpointTable_get_cell_value+0xac>
    return SNMP_ERR_NOSUCHINSTANCE;
 800f8e8:	23f1      	movs	r3, #241	@ 0xf1
 800f8ea:	e024      	b.n	800f936 <udp_endpointTable_get_cell_value+0xf6>
  }
  
  /* find udp_pcb with requested ip and port*/
  pcb = udp_pcbs;
 800f8ec:	4b14      	ldr	r3, [pc, #80]	@ (800f940 <udp_endpointTable_get_cell_value+0x100>)
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 800f8f2:	e01c      	b.n	800f92e <udp_endpointTable_get_cell_value+0xee>
    if (ip_addr_cmp(&local_ip, &pcb->local_ip) &&
 800f8f4:	69fa      	ldr	r2, [r7, #28]
 800f8f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	429a      	cmp	r2, r3
 800f8fc:	d114      	bne.n	800f928 <udp_endpointTable_get_cell_value+0xe8>
       (local_port == pcb->local_port) &&
 800f8fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f900:	8a5a      	ldrh	r2, [r3, #18]
 800f902:	8afb      	ldrh	r3, [r7, #22]
    if (ip_addr_cmp(&local_ip, &pcb->local_ip) &&
 800f904:	429a      	cmp	r2, r3
 800f906:	d10f      	bne.n	800f928 <udp_endpointTable_get_cell_value+0xe8>
       ip_addr_cmp(&remote_ip, &pcb->remote_ip) &&
 800f908:	69ba      	ldr	r2, [r7, #24]
 800f90a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f90c:	685b      	ldr	r3, [r3, #4]
       (local_port == pcb->local_port) &&
 800f90e:	429a      	cmp	r2, r3
 800f910:	d10a      	bne.n	800f928 <udp_endpointTable_get_cell_value+0xe8>
       (remote_port == pcb->remote_port)) {
 800f912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f914:	8a9a      	ldrh	r2, [r3, #20]
 800f916:	8abb      	ldrh	r3, [r7, #20]
       ip_addr_cmp(&remote_ip, &pcb->remote_ip) &&
 800f918:	429a      	cmp	r2, r3
 800f91a:	d105      	bne.n	800f928 <udp_endpointTable_get_cell_value+0xe8>
      /* fill in object properties */
      return udp_endpointTable_get_cell_value_core(column, value);
 800f91c:	6839      	ldr	r1, [r7, #0]
 800f91e:	68f8      	ldr	r0, [r7, #12]
 800f920:	f7ff ff78 	bl	800f814 <udp_endpointTable_get_cell_value_core>
 800f924:	4603      	mov	r3, r0
 800f926:	e006      	b.n	800f936 <udp_endpointTable_get_cell_value+0xf6>
    }
    pcb = pcb->next;
 800f928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f92a:	68db      	ldr	r3, [r3, #12]
 800f92c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 800f92e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f930:	2b00      	cmp	r3, #0
 800f932:	d1df      	bne.n	800f8f4 <udp_endpointTable_get_cell_value+0xb4>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 800f934:	23f1      	movs	r3, #241	@ 0xf1
}
 800f936:	4618      	mov	r0, r3
 800f938:	3728      	adds	r7, #40	@ 0x28
 800f93a:	46bd      	mov	sp, r7
 800f93c:	bd80      	pop	{r7, pc}
 800f93e:	bf00      	nop
 800f940:	2000dd78 	.word	0x2000dd78

0800f944 <udp_endpointTable_get_next_cell_instance_and_value>:

static snmp_err_t 
udp_endpointTable_get_next_cell_instance_and_value(const u32_t* column, struct snmp_obj_id* row_oid, union snmp_variant_value* value, u32_t* value_len)
{
 800f944:	b590      	push	{r4, r7, lr}
 800f946:	b0dd      	sub	sp, #372	@ 0x174
 800f948:	af02      	add	r7, sp, #8
 800f94a:	f507 74b4 	add.w	r4, r7, #360	@ 0x168
 800f94e:	f5a4 74ae 	sub.w	r4, r4, #348	@ 0x15c
 800f952:	6020      	str	r0, [r4, #0]
 800f954:	f507 70b4 	add.w	r0, r7, #360	@ 0x168
 800f958:	f5a0 70b0 	sub.w	r0, r0, #352	@ 0x160
 800f95c:	6001      	str	r1, [r0, #0]
 800f95e:	f507 71b4 	add.w	r1, r7, #360	@ 0x168
 800f962:	f5a1 71b2 	sub.w	r1, r1, #356	@ 0x164
 800f966:	600a      	str	r2, [r1, #0]
 800f968:	f507 72b4 	add.w	r2, r7, #360	@ 0x168
 800f96c:	f5a2 72b4 	sub.w	r2, r2, #360	@ 0x168
 800f970:	6013      	str	r3, [r2, #0]
  u32_t  result_temp[39];

  LWIP_UNUSED_ARG(value_len);

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(result_temp));
 800f972:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800f976:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	1d19      	adds	r1, r3, #4
 800f97e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800f982:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	781a      	ldrb	r2, [r3, #0]
 800f98a:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800f98e:	f507 70a6 	add.w	r0, r7, #332	@ 0x14c
 800f992:	2427      	movs	r4, #39	@ 0x27
 800f994:	9400      	str	r4, [sp, #0]
 800f996:	f7fe f8b8 	bl	800db0a <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  pcb = udp_pcbs;
 800f99a:	4b3b      	ldr	r3, [pc, #236]	@ (800fa88 <udp_endpointTable_get_next_cell_instance_and_value+0x144>)
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  while (pcb != NULL) {
 800f9a2:	e049      	b.n	800fa38 <udp_endpointTable_get_next_cell_instance_and_value+0xf4>
    u32_t test_oid[LWIP_ARRAYSIZE(result_temp)];
    u8_t idx = 0;
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	f887 3163 	strb.w	r3, [r7, #355]	@ 0x163

    /* udpEndpointLocalAddressType + udpEndpointLocalAddress + udpEndpointLocalPort */
    idx += snmp_ip_port_to_oid(&pcb->local_ip, pcb->local_port, &test_oid[idx]);
 800f9aa:	f8d7 0164 	ldr.w	r0, [r7, #356]	@ 0x164
 800f9ae:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800f9b2:	8a59      	ldrh	r1, [r3, #18]
 800f9b4:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 800f9b8:	f107 0214 	add.w	r2, r7, #20
 800f9bc:	009b      	lsls	r3, r3, #2
 800f9be:	4413      	add	r3, r2
 800f9c0:	461a      	mov	r2, r3
 800f9c2:	f7fd fa62 	bl	800ce8a <snmp_ip_port_to_oid>
 800f9c6:	4603      	mov	r3, r0
 800f9c8:	461a      	mov	r2, r3
 800f9ca:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 800f9ce:	4413      	add	r3, r2
 800f9d0:	f887 3163 	strb.w	r3, [r7, #355]	@ 0x163

    /* udpEndpointRemoteAddressType + udpEndpointRemoteAddress + udpEndpointRemotePort */
    idx += snmp_ip_port_to_oid(&pcb->remote_ip, pcb->remote_port, &test_oid[idx]);
 800f9d4:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800f9d8:	1d18      	adds	r0, r3, #4
 800f9da:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800f9de:	8a99      	ldrh	r1, [r3, #20]
 800f9e0:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 800f9e4:	f107 0214 	add.w	r2, r7, #20
 800f9e8:	009b      	lsls	r3, r3, #2
 800f9ea:	4413      	add	r3, r2
 800f9ec:	461a      	mov	r2, r3
 800f9ee:	f7fd fa4c 	bl	800ce8a <snmp_ip_port_to_oid>
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	461a      	mov	r2, r3
 800f9f6:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 800f9fa:	4413      	add	r3, r2
 800f9fc:	f887 3163 	strb.w	r3, [r7, #355]	@ 0x163

    test_oid[idx] = 0; /* udpEndpointInstance */    
 800fa00:	f897 2163 	ldrb.w	r2, [r7, #355]	@ 0x163
 800fa04:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800fa08:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800fa0c:	2100      	movs	r1, #0
 800fa0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    idx++;
 800fa12:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 800fa16:	3301      	adds	r3, #1
 800fa18:	f887 3163 	strb.w	r3, [r7, #355]	@ 0x163
    
    /* check generated OID: is it a candidate for the next one? */
    snmp_next_oid_check(&state, test_oid, idx, NULL);
 800fa1c:	f897 2163 	ldrb.w	r2, [r7, #355]	@ 0x163
 800fa20:	f107 0114 	add.w	r1, r7, #20
 800fa24:	f507 70a6 	add.w	r0, r7, #332	@ 0x14c
 800fa28:	2300      	movs	r3, #0
 800fa2a:	f7fe f88d 	bl	800db48 <snmp_next_oid_check>
    
    pcb = pcb->next;
 800fa2e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800fa32:	68db      	ldr	r3, [r3, #12]
 800fa34:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  while (pcb != NULL) {
 800fa38:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d1b1      	bne.n	800f9a4 <udp_endpointTable_get_next_cell_instance_and_value+0x60>
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 800fa40:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d118      	bne.n	800fa7a <udp_endpointTable_get_next_cell_instance_and_value+0x136>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 800fa48:	f8d7 1154 	ldr.w	r1, [r7, #340]	@ 0x154
 800fa4c:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 800fa50:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800fa54:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800fa58:	6818      	ldr	r0, [r3, #0]
 800fa5a:	f7fd fad3 	bl	800d004 <snmp_oid_assign>
    /* fill in object properties */
    return udp_endpointTable_get_cell_value_core(column, value);
 800fa5e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800fa62:	f5a3 72b2 	sub.w	r2, r3, #356	@ 0x164
 800fa66:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800fa6a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800fa6e:	6811      	ldr	r1, [r2, #0]
 800fa70:	6818      	ldr	r0, [r3, #0]
 800fa72:	f7ff fecf 	bl	800f814 <udp_endpointTable_get_cell_value_core>
 800fa76:	4603      	mov	r3, r0
 800fa78:	e000      	b.n	800fa7c <udp_endpointTable_get_next_cell_instance_and_value+0x138>
  } else {
    /* not found */
    return SNMP_ERR_NOSUCHINSTANCE;
 800fa7a:	23f1      	movs	r3, #241	@ 0xf1
  }
}
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	f507 77b6 	add.w	r7, r7, #364	@ 0x16c
 800fa82:	46bd      	mov	sp, r7
 800fa84:	bd90      	pop	{r4, r7, pc}
 800fa86:	bf00      	nop
 800fa88:	2000dd78 	.word	0x2000dd78

0800fa8c <udp_Table_get_cell_value_core>:
  { 1, 0xffff }  /* Port        */
};

static snmp_err_t 
udp_Table_get_cell_value_core(struct udp_pcb *pcb, const u32_t* column, union snmp_variant_value* value, u32_t* value_len)
{
 800fa8c:	b480      	push	{r7}
 800fa8e:	b085      	sub	sp, #20
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	60f8      	str	r0, [r7, #12]
 800fa94:	60b9      	str	r1, [r7, #8]
 800fa96:	607a      	str	r2, [r7, #4]
 800fa98:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(value_len);

  switch (*column) {
 800fa9a:	68bb      	ldr	r3, [r7, #8]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	2b01      	cmp	r3, #1
 800faa0:	d002      	beq.n	800faa8 <udp_Table_get_cell_value_core+0x1c>
 800faa2:	2b02      	cmp	r3, #2
 800faa4:	d005      	beq.n	800fab2 <udp_Table_get_cell_value_core+0x26>
 800faa6:	e00a      	b.n	800fabe <udp_Table_get_cell_value_core+0x32>
  case 1: /* udpLocalAddress */
    /* set reference to PCB local IP and return a generic node that copies IP4 addresses */
    value->u32 = ip_2_ip4(&pcb->local_ip)->addr;
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	681a      	ldr	r2, [r3, #0]
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	601a      	str	r2, [r3, #0]
    break;
 800fab0:	e007      	b.n	800fac2 <udp_Table_get_cell_value_core+0x36>
  case 2: /* udpLocalPort */
    /* set reference to PCB local port and return a generic node that copies u16_t values */
    value->u32 = pcb->local_port;
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	8a5b      	ldrh	r3, [r3, #18]
 800fab6:	461a      	mov	r2, r3
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	601a      	str	r2, [r3, #0]
    break;
 800fabc:	e001      	b.n	800fac2 <udp_Table_get_cell_value_core+0x36>
  default:
    return SNMP_ERR_NOSUCHINSTANCE;
 800fabe:	23f1      	movs	r3, #241	@ 0xf1
 800fac0:	e000      	b.n	800fac4 <udp_Table_get_cell_value_core+0x38>
  }

  return SNMP_ERR_NOERROR;
 800fac2:	2300      	movs	r3, #0
}
 800fac4:	4618      	mov	r0, r3
 800fac6:	3714      	adds	r7, #20
 800fac8:	46bd      	mov	sp, r7
 800faca:	bc80      	pop	{r7}
 800facc:	4770      	bx	lr
	...

0800fad0 <udp_Table_get_cell_value>:

static snmp_err_t 
udp_Table_get_cell_value(const u32_t* column, const u32_t* row_oid, u8_t row_oid_len, union snmp_variant_value* value, u32_t* value_len)
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b088      	sub	sp, #32
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	60f8      	str	r0, [r7, #12]
 800fad8:	60b9      	str	r1, [r7, #8]
 800fada:	603b      	str	r3, [r7, #0]
 800fadc:	4613      	mov	r3, r2
 800fade:	71fb      	strb	r3, [r7, #7]
  ip4_addr_t ip;
  u16_t port;
  struct udp_pcb *pcb;

  /* check if incoming OID length and if values are in plausible range */
  if (!snmp_oid_in_range(row_oid, row_oid_len, udp_Table_oid_ranges, LWIP_ARRAYSIZE(udp_Table_oid_ranges))) {
 800fae0:	79f9      	ldrb	r1, [r7, #7]
 800fae2:	2305      	movs	r3, #5
 800fae4:	4a19      	ldr	r2, [pc, #100]	@ (800fb4c <udp_Table_get_cell_value+0x7c>)
 800fae6:	68b8      	ldr	r0, [r7, #8]
 800fae8:	f7fe f874 	bl	800dbd4 <snmp_oid_in_range>
 800faec:	4603      	mov	r3, r0
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d101      	bne.n	800faf6 <udp_Table_get_cell_value+0x26>
    return SNMP_ERR_NOSUCHINSTANCE;
 800faf2:	23f1      	movs	r3, #241	@ 0xf1
 800faf4:	e026      	b.n	800fb44 <udp_Table_get_cell_value+0x74>
  }

  /* get IP and port from incoming OID */
  snmp_oid_to_ip4(&row_oid[0], &ip); /* we know it succeeds because of oid_in_range check above */
 800faf6:	f107 0314 	add.w	r3, r7, #20
 800fafa:	4619      	mov	r1, r3
 800fafc:	68b8      	ldr	r0, [r7, #8]
 800fafe:	f7fd f91b 	bl	800cd38 <snmp_oid_to_ip4>
  port = (u16_t)row_oid[4];
 800fb02:	68bb      	ldr	r3, [r7, #8]
 800fb04:	3310      	adds	r3, #16
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	837b      	strh	r3, [r7, #26]

  /* find udp_pcb with requested ip and port*/
  pcb = udp_pcbs;
 800fb0a:	4b11      	ldr	r3, [pc, #68]	@ (800fb50 <udp_Table_get_cell_value+0x80>)
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
 800fb10:	e014      	b.n	800fb3c <udp_Table_get_cell_value+0x6c>
    if (IP_IS_V4_VAL(pcb->local_ip)) {
      if (ip4_addr_cmp(&ip, ip_2_ip4(&pcb->local_ip)) && (port == pcb->local_port)) {
 800fb12:	697a      	ldr	r2, [r7, #20]
 800fb14:	69fb      	ldr	r3, [r7, #28]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	429a      	cmp	r2, r3
 800fb1a:	d10c      	bne.n	800fb36 <udp_Table_get_cell_value+0x66>
 800fb1c:	69fb      	ldr	r3, [r7, #28]
 800fb1e:	8a5b      	ldrh	r3, [r3, #18]
 800fb20:	8b7a      	ldrh	r2, [r7, #26]
 800fb22:	429a      	cmp	r2, r3
 800fb24:	d107      	bne.n	800fb36 <udp_Table_get_cell_value+0x66>
        /* fill in object properties */
        return udp_Table_get_cell_value_core(pcb, column, value, value_len);
 800fb26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb28:	683a      	ldr	r2, [r7, #0]
 800fb2a:	68f9      	ldr	r1, [r7, #12]
 800fb2c:	69f8      	ldr	r0, [r7, #28]
 800fb2e:	f7ff ffad 	bl	800fa8c <udp_Table_get_cell_value_core>
 800fb32:	4603      	mov	r3, r0
 800fb34:	e006      	b.n	800fb44 <udp_Table_get_cell_value+0x74>
      }
    }
    pcb = pcb->next;
 800fb36:	69fb      	ldr	r3, [r7, #28]
 800fb38:	68db      	ldr	r3, [r3, #12]
 800fb3a:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
 800fb3c:	69fb      	ldr	r3, [r7, #28]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d1e7      	bne.n	800fb12 <udp_Table_get_cell_value+0x42>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 800fb42:	23f1      	movs	r3, #241	@ 0xf1
}
 800fb44:	4618      	mov	r0, r3
 800fb46:	3720      	adds	r7, #32
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	bd80      	pop	{r7, pc}
 800fb4c:	0802ed10 	.word	0x0802ed10
 800fb50:	2000dd78 	.word	0x2000dd78

0800fb54 <udp_Table_get_next_cell_instance_and_value>:

static snmp_err_t 
udp_Table_get_next_cell_instance_and_value(const u32_t* column, struct snmp_obj_id* row_oid, union snmp_variant_value* value, u32_t* value_len)
{
 800fb54:	b590      	push	{r4, r7, lr}
 800fb56:	b097      	sub	sp, #92	@ 0x5c
 800fb58:	af02      	add	r7, sp, #8
 800fb5a:	60f8      	str	r0, [r7, #12]
 800fb5c:	60b9      	str	r1, [r7, #8]
 800fb5e:	607a      	str	r2, [r7, #4]
 800fb60:	603b      	str	r3, [r7, #0]
  struct udp_pcb *pcb;
  struct snmp_next_oid_state state;
  u32_t  result_temp[LWIP_ARRAYSIZE(udp_Table_oid_ranges)];

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(udp_Table_oid_ranges));
 800fb62:	68bb      	ldr	r3, [r7, #8]
 800fb64:	1d19      	adds	r1, r3, #4
 800fb66:	68bb      	ldr	r3, [r7, #8]
 800fb68:	781a      	ldrb	r2, [r3, #0]
 800fb6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fb6e:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800fb72:	2405      	movs	r4, #5
 800fb74:	9400      	str	r4, [sp, #0]
 800fb76:	f7fd ffc8 	bl	800db0a <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  pcb = udp_pcbs;
 800fb7a:	4b1a      	ldr	r3, [pc, #104]	@ (800fbe4 <udp_Table_get_next_cell_instance_and_value+0x90>)
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while (pcb != NULL) {
 800fb80:	e014      	b.n	800fbac <udp_Table_get_next_cell_instance_and_value+0x58>
    u32_t test_oid[LWIP_ARRAYSIZE(udp_Table_oid_ranges)];

    if (IP_IS_V4_VAL(pcb->local_ip)) {
      snmp_ip4_to_oid(ip_2_ip4(&pcb->local_ip), &test_oid[0]);
 800fb82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fb84:	f107 0210 	add.w	r2, r7, #16
 800fb88:	4611      	mov	r1, r2
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	f7fd f95c 	bl	800ce48 <snmp_ip4_to_oid>
      test_oid[4] = pcb->local_port;
 800fb90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fb92:	8a5b      	ldrh	r3, [r3, #18]
 800fb94:	623b      	str	r3, [r7, #32]

      /* check generated OID: is it a candidate for the next one? */
      snmp_next_oid_check(&state, test_oid, LWIP_ARRAYSIZE(udp_Table_oid_ranges), pcb);
 800fb96:	f107 0110 	add.w	r1, r7, #16
 800fb9a:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800fb9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fba0:	2205      	movs	r2, #5
 800fba2:	f7fd ffd1 	bl	800db48 <snmp_next_oid_check>
    }
    
    pcb = pcb->next;
 800fba6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fba8:	68db      	ldr	r3, [r3, #12]
 800fbaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while (pcb != NULL) {
 800fbac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d1e7      	bne.n	800fb82 <udp_Table_get_next_cell_instance_and_value+0x2e>
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 800fbb2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d10e      	bne.n	800fbd8 <udp_Table_get_next_cell_instance_and_value+0x84>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 800fbba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fbbc:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 800fbc0:	4619      	mov	r1, r3
 800fbc2:	68b8      	ldr	r0, [r7, #8]
 800fbc4:	f7fd fa1e 	bl	800d004 <snmp_oid_assign>
    /* fill in object properties */
    return udp_Table_get_cell_value_core((struct udp_pcb*)state.reference, column, value, value_len);
 800fbc8:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800fbca:	683b      	ldr	r3, [r7, #0]
 800fbcc:	687a      	ldr	r2, [r7, #4]
 800fbce:	68f9      	ldr	r1, [r7, #12]
 800fbd0:	f7ff ff5c 	bl	800fa8c <udp_Table_get_cell_value_core>
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	e000      	b.n	800fbda <udp_Table_get_next_cell_instance_and_value+0x86>
  } else {
    /* not found */
    return SNMP_ERR_NOSUCHINSTANCE;
 800fbd8:	23f1      	movs	r3, #241	@ 0xf1
  }
}
 800fbda:	4618      	mov	r0, r3
 800fbdc:	3754      	adds	r7, #84	@ 0x54
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	bd90      	pop	{r4, r7, pc}
 800fbe2:	bf00      	nop
 800fbe4:	2000dd78 	.word	0x2000dd78

0800fbe8 <snmp_set_community_trap>:
 *
 * @param community is a pointer to new trap community string
 */
void
snmp_set_community_trap(const char * const community)
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b082      	sub	sp, #8
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("community string is too long!", strlen(community) <= SNMP_MAX_COMMUNITY_STR_LEN);
 800fbf0:	6878      	ldr	r0, [r7, #4]
 800fbf2:	f7f0 faf3 	bl	80001dc <strlen>
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	2b08      	cmp	r3, #8
 800fbfa:	d905      	bls.n	800fc08 <snmp_set_community_trap+0x20>
 800fbfc:	4b06      	ldr	r3, [pc, #24]	@ (800fc18 <snmp_set_community_trap+0x30>)
 800fbfe:	2290      	movs	r2, #144	@ 0x90
 800fc00:	4906      	ldr	r1, [pc, #24]	@ (800fc1c <snmp_set_community_trap+0x34>)
 800fc02:	4807      	ldr	r0, [pc, #28]	@ (800fc20 <snmp_set_community_trap+0x38>)
 800fc04:	f010 fc4c 	bl	80204a0 <iprintf>
  snmp_community_trap = community;
 800fc08:	4a06      	ldr	r2, [pc, #24]	@ (800fc24 <snmp_set_community_trap+0x3c>)
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	6013      	str	r3, [r2, #0]
}
 800fc0e:	bf00      	nop
 800fc10:	3708      	adds	r7, #8
 800fc12:	46bd      	mov	sp, r7
 800fc14:	bd80      	pop	{r7, pc}
 800fc16:	bf00      	nop
 800fc18:	08023c3c 	.word	0x08023c3c
 800fc1c:	08023c78 	.word	0x08023c78
 800fc20:	08023c98 	.word	0x08023c98
 800fc24:	2000010c 	.word	0x2000010c

0800fc28 <snmp_receive>:
/* implementation */
/* ----------------------------------------------------------------------- */

void
snmp_receive(void *handle, struct pbuf *p, const ip_addr_t *source_ip, u16_t port)
{
 800fc28:	b590      	push	{r4, r7, lr}
 800fc2a:	b0cf      	sub	sp, #316	@ 0x13c
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	f507 749c 	add.w	r4, r7, #312	@ 0x138
 800fc32:	f5a4 7496 	sub.w	r4, r4, #300	@ 0x12c
 800fc36:	6020      	str	r0, [r4, #0]
 800fc38:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800fc3c:	f5a0 7098 	sub.w	r0, r0, #304	@ 0x130
 800fc40:	6001      	str	r1, [r0, #0]
 800fc42:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800fc46:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 800fc4a:	600a      	str	r2, [r1, #0]
 800fc4c:	461a      	mov	r2, r3
 800fc4e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800fc52:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800fc56:	801a      	strh	r2, [r3, #0]
  err_t err;
  struct snmp_request request;
   
  memset(&request, 0, sizeof(request));
 800fc58:	f107 0314 	add.w	r3, r7, #20
 800fc5c:	f44f 7290 	mov.w	r2, #288	@ 0x120
 800fc60:	2100      	movs	r1, #0
 800fc62:	4618      	mov	r0, r3
 800fc64:	f010 fdf2 	bl	802084c <memset>
  request.handle       = handle;
 800fc68:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800fc6c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800fc70:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800fc74:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800fc78:	6812      	ldr	r2, [r2, #0]
 800fc7a:	601a      	str	r2, [r3, #0]
  request.source_ip    = source_ip;
 800fc7c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800fc80:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800fc84:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800fc88:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800fc8c:	6812      	ldr	r2, [r2, #0]
 800fc8e:	605a      	str	r2, [r3, #4]
  request.source_port  = port;
 800fc90:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800fc94:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800fc98:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800fc9c:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 800fca0:	8812      	ldrh	r2, [r2, #0]
 800fca2:	811a      	strh	r2, [r3, #8]
  request.inbound_pbuf = p;
 800fca4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800fca8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800fcac:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800fcb0:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800fcb4:	6812      	ldr	r2, [r2, #0]
 800fcb6:	62da      	str	r2, [r3, #44]	@ 0x2c

  snmp_stats.inpkts++;
 800fcb8:	4b5c      	ldr	r3, [pc, #368]	@ (800fe2c <snmp_receive+0x204>)
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	3301      	adds	r3, #1
 800fcbe:	4a5b      	ldr	r2, [pc, #364]	@ (800fe2c <snmp_receive+0x204>)
 800fcc0:	6013      	str	r3, [r2, #0]

  err = snmp_parse_inbound_frame(&request);
 800fcc2:	f107 0314 	add.w	r3, r7, #20
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	f000 fd62 	bl	8010790 <snmp_parse_inbound_frame>
 800fccc:	4603      	mov	r3, r0
 800fcce:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
  if (err == ERR_OK) {
 800fcd2:	f997 3137 	ldrsb.w	r3, [r7, #311]	@ 0x137
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	f040 80a2 	bne.w	800fe20 <snmp_receive+0x1f8>
    err = snmp_prepare_outbound_frame(&request);
 800fcdc:	f107 0314 	add.w	r3, r7, #20
 800fce0:	4618      	mov	r0, r3
 800fce2:	f001 f863 	bl	8010dac <snmp_prepare_outbound_frame>
 800fce6:	4603      	mov	r3, r0
 800fce8:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
    if (err == ERR_OK) {
 800fcec:	f997 3137 	ldrsb.w	r3, [r7, #311]	@ 0x137
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	f040 8086 	bne.w	800fe02 <snmp_receive+0x1da>

      if (request.error_status == SNMP_ERR_NOERROR) {
 800fcf6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800fcfa:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800fcfe:	69db      	ldr	r3, [r3, #28]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d13e      	bne.n	800fd82 <snmp_receive+0x15a>
        /* only process frame if we do not already have an error to return (e.g. all readonly) */
        if (request.request_type == SNMP_ASN1_CONTEXT_PDU_GET_REQ) {
 800fd04:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800fd08:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800fd0c:	7d9b      	ldrb	r3, [r3, #22]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d108      	bne.n	800fd24 <snmp_receive+0xfc>
          err = snmp_process_get_request(&request);
 800fd12:	f107 0314 	add.w	r3, r7, #20
 800fd16:	4618      	mov	r0, r3
 800fd18:	f000 fa4e 	bl	80101b8 <snmp_process_get_request>
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800fd22:	e02e      	b.n	800fd82 <snmp_receive+0x15a>
        } else if (request.request_type == SNMP_ASN1_CONTEXT_PDU_GET_NEXT_REQ) {
 800fd24:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800fd28:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800fd2c:	7d9b      	ldrb	r3, [r3, #22]
 800fd2e:	2b01      	cmp	r3, #1
 800fd30:	d108      	bne.n	800fd44 <snmp_receive+0x11c>
          err = snmp_process_getnext_request(&request);
 800fd32:	f107 0314 	add.w	r3, r7, #20
 800fd36:	4618      	mov	r0, r3
 800fd38:	f000 fa83 	bl	8010242 <snmp_process_getnext_request>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800fd42:	e01e      	b.n	800fd82 <snmp_receive+0x15a>
        } else if (request.request_type == SNMP_ASN1_CONTEXT_PDU_GET_BULK_REQ) {
 800fd44:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800fd48:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800fd4c:	7d9b      	ldrb	r3, [r3, #22]
 800fd4e:	2b05      	cmp	r3, #5
 800fd50:	d108      	bne.n	800fd64 <snmp_receive+0x13c>
          err = snmp_process_getbulk_request(&request);
 800fd52:	f107 0314 	add.w	r3, r7, #20
 800fd56:	4618      	mov	r0, r3
 800fd58:	f000 fab8 	bl	80102cc <snmp_process_getbulk_request>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800fd62:	e00e      	b.n	800fd82 <snmp_receive+0x15a>
        } else if (request.request_type == SNMP_ASN1_CONTEXT_PDU_SET_REQ) {
 800fd64:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800fd68:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800fd6c:	7d9b      	ldrb	r3, [r3, #22]
 800fd6e:	2b03      	cmp	r3, #3
 800fd70:	d107      	bne.n	800fd82 <snmp_receive+0x15a>
          err = snmp_process_set_request(&request);
 800fd72:	f107 0314 	add.w	r3, r7, #20
 800fd76:	4618      	mov	r0, r3
 800fd78:	f000 fb91 	bl	801049e <snmp_process_set_request>
 800fd7c:	4603      	mov	r3, r0
 800fd7e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
        }
      }

      if (err == ERR_OK) {
 800fd82:	f997 3137 	ldrsb.w	r3, [r7, #311]	@ 0x137
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d13b      	bne.n	800fe02 <snmp_receive+0x1da>
        err = snmp_complete_outbound_frame(&request);
 800fd8a:	f107 0314 	add.w	r3, r7, #20
 800fd8e:	4618      	mov	r0, r3
 800fd90:	f001 fb9c 	bl	80114cc <snmp_complete_outbound_frame>
 800fd94:	4603      	mov	r3, r0
 800fd96:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
      
        if (err == ERR_OK) {
 800fd9a:	f997 3137 	ldrsb.w	r3, [r7, #311]	@ 0x137
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d12f      	bne.n	800fe02 <snmp_receive+0x1da>
          err = snmp_sendto(request.handle, request.outbound_pbuf, request.source_ip, request.source_port);
 800fda2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800fda6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800fdaa:	6818      	ldr	r0, [r3, #0]
 800fdac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800fdb0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800fdb4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800fdb6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800fdba:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800fdbe:	685a      	ldr	r2, [r3, #4]
 800fdc0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800fdc4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800fdc8:	891b      	ldrh	r3, [r3, #8]
 800fdca:	f002 f8fe 	bl	8011fca <snmp_sendto>
 800fdce:	4603      	mov	r3, r0
 800fdd0:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137

          if ((request.request_type == SNMP_ASN1_CONTEXT_PDU_SET_REQ) 
 800fdd4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800fdd8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800fddc:	7d9b      	ldrb	r3, [r3, #22]
 800fdde:	2b03      	cmp	r3, #3
 800fde0:	d10f      	bne.n	800fe02 <snmp_receive+0x1da>
            && (request.error_status == SNMP_ERR_NOERROR) 
 800fde2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800fde6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800fdea:	69db      	ldr	r3, [r3, #28]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d108      	bne.n	800fe02 <snmp_receive+0x1da>
            && (snmp_write_callback != NULL)) {
 800fdf0:	4b0f      	ldr	r3, [pc, #60]	@ (800fe30 <snmp_receive+0x208>)
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d004      	beq.n	800fe02 <snmp_receive+0x1da>
            /* raise write notification for all written objects */
            snmp_execute_write_callbacks(&request);
 800fdf8:	f107 0314 	add.w	r3, r7, #20
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	f001 fd47 	bl	8011890 <snmp_execute_write_callbacks>
          }
        }
      }
    }
  
    if (request.outbound_pbuf != NULL) {
 800fe02:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800fe06:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800fe0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d007      	beq.n	800fe20 <snmp_receive+0x1f8>
      pbuf_free(request.outbound_pbuf);
 800fe10:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800fe14:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800fe18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	f004 fb58 	bl	80144d0 <pbuf_free>
    }
  }
}
 800fe20:	bf00      	nop
 800fe22:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800fe26:	46bd      	mov	sp, r7
 800fe28:	bd90      	pop	{r4, r7, pc}
 800fe2a:	bf00      	nop
 800fe2c:	2000a4e4 	.word	0x2000a4e4
 800fe30:	2000a584 	.word	0x2000a584

0800fe34 <snmp_msg_getnext_validate_node_inst>:

static u8_t
snmp_msg_getnext_validate_node_inst(struct snmp_node_instance* node_instance, void* validate_arg)
{
 800fe34:	b480      	push	{r7}
 800fe36:	b083      	sub	sp, #12
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
 800fe3c:	6039      	str	r1, [r7, #0]
  if (((node_instance->access & SNMP_NODE_INSTANCE_ACCESS_READ) != SNMP_NODE_INSTANCE_ACCESS_READ) || (node_instance->get_value == NULL)) {
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	f893 30d1 	ldrb.w	r3, [r3, #209]	@ 0xd1
 800fe44:	f003 0301 	and.w	r3, r3, #1
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d004      	beq.n	800fe56 <snmp_msg_getnext_validate_node_inst+0x22>
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d101      	bne.n	800fe5a <snmp_msg_getnext_validate_node_inst+0x26>
    return SNMP_ERR_NOSUCHINSTANCE;
 800fe56:	23f1      	movs	r3, #241	@ 0xf1
 800fe58:	e00b      	b.n	800fe72 <snmp_msg_getnext_validate_node_inst+0x3e>
  }

  if ((node_instance->asn1_type == SNMP_ASN1_TYPE_COUNTER64) && (((struct snmp_request*)validate_arg)->version == SNMP_VERSION_1)) {
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 800fe60:	2b46      	cmp	r3, #70	@ 0x46
 800fe62:	d105      	bne.n	800fe70 <snmp_msg_getnext_validate_node_inst+0x3c>
 800fe64:	683b      	ldr	r3, [r7, #0]
 800fe66:	7a9b      	ldrb	r3, [r3, #10]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d101      	bne.n	800fe70 <snmp_msg_getnext_validate_node_inst+0x3c>
    /* according to RFC 2089 skip Counter64 objects in GetNext requests from v1 clients */
    return SNMP_ERR_NOSUCHINSTANCE;
 800fe6c:	23f1      	movs	r3, #241	@ 0xf1
 800fe6e:	e000      	b.n	800fe72 <snmp_msg_getnext_validate_node_inst+0x3e>
  }

  return SNMP_ERR_NOERROR;
 800fe70:	2300      	movs	r3, #0
}
 800fe72:	4618      	mov	r0, r3
 800fe74:	370c      	adds	r7, #12
 800fe76:	46bd      	mov	sp, r7
 800fe78:	bc80      	pop	{r7}
 800fe7a:	4770      	bx	lr

0800fe7c <snmp_process_varbind>:

static void 
snmp_process_varbind(struct snmp_request *request, struct snmp_varbind *vb, u8_t get_next)
{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b0f6      	sub	sp, #472	@ 0x1d8
 800fe80:	af02      	add	r7, sp, #8
 800fe82:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 800fe86:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800fe8a:	6018      	str	r0, [r3, #0]
 800fe8c:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 800fe90:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 800fe94:	6019      	str	r1, [r3, #0]
 800fe96:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 800fe9a:	f2a3 13c9 	subw	r3, r3, #457	@ 0x1c9
 800fe9e:	701a      	strb	r2, [r3, #0]
  err_t err;
  struct snmp_node_instance node_instance;
  memset(&node_instance, 0, sizeof(node_instance));
 800fea0:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800fea4:	22ec      	movs	r2, #236	@ 0xec
 800fea6:	2100      	movs	r1, #0
 800fea8:	4618      	mov	r0, r3
 800feaa:	f010 fccf 	bl	802084c <memset>

  if (get_next) {
 800feae:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 800feb2:	f2a3 13c9 	subw	r3, r3, #457	@ 0x1c9
 800feb6:	781b      	ldrb	r3, [r3, #0]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d03d      	beq.n	800ff38 <snmp_process_varbind+0xbc>
    struct snmp_obj_id result_oid;
    request->error_status = snmp_get_next_node_instance_from_oid(vb->oid.id, vb->oid.len, snmp_msg_getnext_validate_node_inst, request,  &result_oid, &node_instance);
 800febc:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 800fec0:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	f103 000c 	add.w	r0, r3, #12
 800feca:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 800fece:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	7a19      	ldrb	r1, [r3, #8]
 800fed6:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 800feda:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800fede:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 800fee2:	9201      	str	r2, [sp, #4]
 800fee4:	f107 0214 	add.w	r2, r7, #20
 800fee8:	9200      	str	r2, [sp, #0]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	4aae      	ldr	r2, [pc, #696]	@ (80101a8 <snmp_process_varbind+0x32c>)
 800feee:	f7fd fb18 	bl	800d522 <snmp_get_next_node_instance_from_oid>
 800fef2:	4603      	mov	r3, r0
 800fef4:	461a      	mov	r2, r3
 800fef6:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 800fefa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	61da      	str	r2, [r3, #28]

    if (request->error_status == SNMP_ERR_NOERROR) {
 800ff02:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 800ff06:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	69db      	ldr	r3, [r3, #28]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d158      	bne.n	800ffc4 <snmp_process_varbind+0x148>
      snmp_oid_assign(&vb->oid, result_oid.id, result_oid.len);
 800ff12:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 800ff16:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	f103 0008 	add.w	r0, r3, #8
 800ff20:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 800ff24:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800ff28:	781a      	ldrb	r2, [r3, #0]
 800ff2a:	f107 0314 	add.w	r3, r7, #20
 800ff2e:	3304      	adds	r3, #4
 800ff30:	4619      	mov	r1, r3
 800ff32:	f7fd f867 	bl	800d004 <snmp_oid_assign>
 800ff36:	e045      	b.n	800ffc4 <snmp_process_varbind+0x148>
    }
  } else {
    request->error_status = snmp_get_node_instance_from_oid(vb->oid.id, vb->oid.len, &node_instance);
 800ff38:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 800ff3c:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	f103 000c 	add.w	r0, r3, #12
 800ff46:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 800ff4a:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	7a1b      	ldrb	r3, [r3, #8]
 800ff52:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 800ff56:	4619      	mov	r1, r3
 800ff58:	f7fd fa9c 	bl	800d494 <snmp_get_node_instance_from_oid>
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	461a      	mov	r2, r3
 800ff60:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 800ff64:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	61da      	str	r2, [r3, #28]

    if (request->error_status == SNMP_ERR_NOERROR) {
 800ff6c:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 800ff70:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	69db      	ldr	r3, [r3, #28]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d123      	bne.n	800ffc4 <snmp_process_varbind+0x148>
      /* use 'getnext_validate' method for validation to avoid code duplication (some checks have to be executed here) */
      request->error_status = snmp_msg_getnext_validate_node_inst(&node_instance, request);
 800ff7c:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 800ff80:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800ff84:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 800ff88:	6819      	ldr	r1, [r3, #0]
 800ff8a:	4610      	mov	r0, r2
 800ff8c:	f7ff ff52 	bl	800fe34 <snmp_msg_getnext_validate_node_inst>
 800ff90:	4603      	mov	r3, r0
 800ff92:	461a      	mov	r2, r3
 800ff94:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 800ff98:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	61da      	str	r2, [r3, #28]

      if (request->error_status != SNMP_ERR_NOERROR) {
 800ffa0:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 800ffa4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	69db      	ldr	r3, [r3, #28]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d009      	beq.n	800ffc4 <snmp_process_varbind+0x148>
        if (node_instance.release_instance != NULL) {
 800ffb0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d005      	beq.n	800ffc4 <snmp_process_varbind+0x148>
          node_instance.release_instance(&node_instance);
 800ffb8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800ffbc:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 800ffc0:	4610      	mov	r0, r2
 800ffc2:	4798      	blx	r3
        }
      }
    }
  }

  if (request->error_status != SNMP_ERR_NOERROR)  {
 800ffc4:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 800ffc8:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	69db      	ldr	r3, [r3, #28]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d070      	beq.n	80100b6 <snmp_process_varbind+0x23a>
    if (request->error_status >= SNMP_VARBIND_EXCEPTION_OFFSET) {
 800ffd4:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 800ffd8:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	69db      	ldr	r3, [r3, #28]
 800ffe0:	2bef      	cmp	r3, #239	@ 0xef
 800ffe2:	dd60      	ble.n	80100a6 <snmp_process_varbind+0x22a>
      if ((request->version == SNMP_VERSION_2c) || request->version == SNMP_VERSION_3) {
 800ffe4:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 800ffe8:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	7a9b      	ldrb	r3, [r3, #10]
 800fff0:	2b01      	cmp	r3, #1
 800fff2:	d008      	beq.n	8010006 <snmp_process_varbind+0x18a>
 800fff4:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 800fff8:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	7a9b      	ldrb	r3, [r3, #10]
 8010000:	2b03      	cmp	r3, #3
 8010002:	f040 80cc 	bne.w	801019e <snmp_process_varbind+0x322>
        /* in SNMP v2c a varbind related exception is stored in varbind and not in frame header */
        vb->type = (SNMP_ASN1_CONTENTTYPE_PRIMITIVE | SNMP_ASN1_CLASS_CONTEXT | (request->error_status & SNMP_VARBIND_EXCEPTION_MASK));
 8010006:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 801000a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	69db      	ldr	r3, [r3, #28]
 8010012:	b25b      	sxtb	r3, r3
 8010014:	f003 030f 	and.w	r3, r3, #15
 8010018:	b25b      	sxtb	r3, r3
 801001a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801001e:	b25b      	sxtb	r3, r3
 8010020:	b2da      	uxtb	r2, r3
 8010022:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8010026:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
        vb->value_len = 0;
 8010030:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8010034:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	2200      	movs	r2, #0
 801003c:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6

        err = snmp_append_outbound_varbind(&(request->outbound_pbuf_stream), vb);
 8010040:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8010044:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 801004e:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8010052:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8010056:	6819      	ldr	r1, [r3, #0]
 8010058:	4610      	mov	r0, r2
 801005a:	f001 f921 	bl	80112a0 <snmp_append_outbound_varbind>
 801005e:	4603      	mov	r3, r0
 8010060:	f887 31cd 	strb.w	r3, [r7, #461]	@ 0x1cd
        if (err == ERR_OK) {
 8010064:	f997 31cd 	ldrsb.w	r3, [r7, #461]	@ 0x1cd
 8010068:	2b00      	cmp	r3, #0
 801006a:	d107      	bne.n	801007c <snmp_process_varbind+0x200>
          /* we stored the exception in varbind -> go on */
          request->error_status = SNMP_ERR_NOERROR;
 801006c:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8010070:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	2200      	movs	r2, #0
 8010078:	61da      	str	r2, [r3, #28]

    if (node_instance.release_instance != NULL) {
      node_instance.release_instance(&node_instance);
    }
  }
}
 801007a:	e090      	b.n	801019e <snmp_process_varbind+0x322>
        } else if (err == ERR_BUF) {
 801007c:	f997 31cd 	ldrsb.w	r3, [r7, #461]	@ 0x1cd
 8010080:	f113 0f02 	cmn.w	r3, #2
 8010084:	d107      	bne.n	8010096 <snmp_process_varbind+0x21a>
          request->error_status = SNMP_ERR_TOOBIG;
 8010086:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 801008a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	2201      	movs	r2, #1
 8010092:	61da      	str	r2, [r3, #28]
}
 8010094:	e083      	b.n	801019e <snmp_process_varbind+0x322>
          request->error_status = SNMP_ERR_GENERROR;
 8010096:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 801009a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	2205      	movs	r2, #5
 80100a2:	61da      	str	r2, [r3, #28]
}
 80100a4:	e07b      	b.n	801019e <snmp_process_varbind+0x322>
      request->error_status = SNMP_ERR_GENERROR;
 80100a6:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80100aa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	2205      	movs	r2, #5
 80100b2:	61da      	str	r2, [r3, #28]
}
 80100b4:	e073      	b.n	801019e <snmp_process_varbind+0x322>
    s16_t len = node_instance.get_value(&node_instance, vb->value);
 80100b6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80100ba:	f507 72e8 	add.w	r2, r7, #464	@ 0x1d0
 80100be:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80100c2:	6812      	ldr	r2, [r2, #0]
 80100c4:	f8d2 10d8 	ldr.w	r1, [r2, #216]	@ 0xd8
 80100c8:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 80100cc:	4610      	mov	r0, r2
 80100ce:	4798      	blx	r3
 80100d0:	4603      	mov	r3, r0
 80100d2:	f8a7 31ce 	strh.w	r3, [r7, #462]	@ 0x1ce
    vb->type = node_instance.asn1_type;
 80100d6:	f897 21b0 	ldrb.w	r2, [r7, #432]	@ 0x1b0
 80100da:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80100de:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
    if(len >= 0) {
 80100e8:	f9b7 31ce 	ldrsh.w	r3, [r7, #462]	@ 0x1ce
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	db45      	blt.n	801017c <snmp_process_varbind+0x300>
      vb->value_len = (u16_t)len; /* cast is OK because we checked >= 0 above */
 80100f0:	f8b7 21ce 	ldrh.w	r2, [r7, #462]	@ 0x1ce
 80100f4:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80100f8:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
      LWIP_ASSERT("SNMP_MAX_VALUE_SIZE is configured too low", (vb->value_len & ~SNMP_GET_VALUE_RAW_DATA) <= SNMP_MAX_VALUE_SIZE);
 8010102:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8010106:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 8010110:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8010114:	2bc8      	cmp	r3, #200	@ 0xc8
 8010116:	d906      	bls.n	8010126 <snmp_process_varbind+0x2aa>
 8010118:	4b24      	ldr	r3, [pc, #144]	@ (80101ac <snmp_process_varbind+0x330>)
 801011a:	f44f 7298 	mov.w	r2, #304	@ 0x130
 801011e:	4924      	ldr	r1, [pc, #144]	@ (80101b0 <snmp_process_varbind+0x334>)
 8010120:	4824      	ldr	r0, [pc, #144]	@ (80101b4 <snmp_process_varbind+0x338>)
 8010122:	f010 f9bd 	bl	80204a0 <iprintf>
      err = snmp_append_outbound_varbind(&request->outbound_pbuf_stream, vb);
 8010126:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 801012a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8010134:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8010138:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 801013c:	6819      	ldr	r1, [r3, #0]
 801013e:	4610      	mov	r0, r2
 8010140:	f001 f8ae 	bl	80112a0 <snmp_append_outbound_varbind>
 8010144:	4603      	mov	r3, r0
 8010146:	f887 31cd 	strb.w	r3, [r7, #461]	@ 0x1cd
      if (err == ERR_BUF) {
 801014a:	f997 31cd 	ldrsb.w	r3, [r7, #461]	@ 0x1cd
 801014e:	f113 0f02 	cmn.w	r3, #2
 8010152:	d107      	bne.n	8010164 <snmp_process_varbind+0x2e8>
        request->error_status = SNMP_ERR_TOOBIG;
 8010154:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8010158:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	2201      	movs	r2, #1
 8010160:	61da      	str	r2, [r3, #28]
 8010162:	e012      	b.n	801018a <snmp_process_varbind+0x30e>
      } else if (err != ERR_OK) {
 8010164:	f997 31cd 	ldrsb.w	r3, [r7, #461]	@ 0x1cd
 8010168:	2b00      	cmp	r3, #0
 801016a:	d00e      	beq.n	801018a <snmp_process_varbind+0x30e>
        request->error_status = SNMP_ERR_GENERROR;
 801016c:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8010170:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	2205      	movs	r2, #5
 8010178:	61da      	str	r2, [r3, #28]
 801017a:	e006      	b.n	801018a <snmp_process_varbind+0x30e>
      request->error_status = SNMP_ERR_GENERROR;
 801017c:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8010180:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	2205      	movs	r2, #5
 8010188:	61da      	str	r2, [r3, #28]
    if (node_instance.release_instance != NULL) {
 801018a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 801018e:	2b00      	cmp	r3, #0
 8010190:	d005      	beq.n	801019e <snmp_process_varbind+0x322>
      node_instance.release_instance(&node_instance);
 8010192:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8010196:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 801019a:	4610      	mov	r0, r2
 801019c:	4798      	blx	r3
}
 801019e:	bf00      	nop
 80101a0:	f507 77e8 	add.w	r7, r7, #464	@ 0x1d0
 80101a4:	46bd      	mov	sp, r7
 80101a6:	bd80      	pop	{r7, pc}
 80101a8:	0800fe35 	.word	0x0800fe35
 80101ac:	08023c3c 	.word	0x08023c3c
 80101b0:	08023ce4 	.word	0x08023ce4
 80101b4:	08023c98 	.word	0x08023c98

080101b8 <snmp_process_get_request>:
 *
 * @param request points to the associated message process state
 */
static err_t
snmp_process_get_request(struct snmp_request *request)
{
 80101b8:	b580      	push	{r7, lr}
 80101ba:	b0ba      	sub	sp, #232	@ 0xe8
 80101bc:	af00      	add	r7, sp, #0
 80101be:	6078      	str	r0, [r7, #4]
  snmp_vb_enumerator_err_t err;
  struct snmp_varbind vb;
  vb.value = request->value_buffer;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	3358      	adds	r3, #88	@ 0x58
 80101c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

  LWIP_DEBUGF(SNMP_DEBUG, ("SNMP get request\n"));

  while (request->error_status == SNMP_ERR_NOERROR) {
 80101c8:	e030      	b.n	801022c <snmp_process_get_request+0x74>
    err = snmp_vb_enumerator_get_next(&request->inbound_varbind_enumerator, &vb);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	3330      	adds	r3, #48	@ 0x30
 80101ce:	f107 0208 	add.w	r2, r7, #8
 80101d2:	4611      	mov	r1, r2
 80101d4:	4618      	mov	r0, r3
 80101d6:	f001 fba5 	bl	8011924 <snmp_vb_enumerator_get_next>
 80101da:	4603      	mov	r3, r0
 80101dc:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
    if (err == SNMP_VB_ENUMERATOR_ERR_OK) {
 80101e0:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d113      	bne.n	8010210 <snmp_process_get_request+0x58>
      if ((vb.type == SNMP_ASN1_TYPE_NULL) && (vb.value_len == 0)) {
 80101e8:	f897 30dc 	ldrb.w	r3, [r7, #220]	@ 0xdc
 80101ec:	2b05      	cmp	r3, #5
 80101ee:	d10b      	bne.n	8010208 <snmp_process_get_request+0x50>
 80101f0:	f8b7 30de 	ldrh.w	r3, [r7, #222]	@ 0xde
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d107      	bne.n	8010208 <snmp_process_get_request+0x50>
        snmp_process_varbind(request, &vb, 0);
 80101f8:	f107 0308 	add.w	r3, r7, #8
 80101fc:	2200      	movs	r2, #0
 80101fe:	4619      	mov	r1, r3
 8010200:	6878      	ldr	r0, [r7, #4]
 8010202:	f7ff fe3b 	bl	800fe7c <snmp_process_varbind>
 8010206:	e011      	b.n	801022c <snmp_process_get_request+0x74>
      } else {
        request->error_status = SNMP_ERR_GENERROR;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	2205      	movs	r2, #5
 801020c:	61da      	str	r2, [r3, #28]
 801020e:	e00d      	b.n	801022c <snmp_process_get_request+0x74>
      }
    } else if (err == SNMP_VB_ENUMERATOR_ERR_EOVB) {
 8010210:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 8010214:	2b01      	cmp	r3, #1
 8010216:	d00e      	beq.n	8010236 <snmp_process_get_request+0x7e>
      /* no more varbinds in request */
      break;
    } else if (err == SNMP_VB_ENUMERATOR_ERR_ASN1ERROR) {
 8010218:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 801021c:	2b02      	cmp	r3, #2
 801021e:	d102      	bne.n	8010226 <snmp_process_get_request+0x6e>
      /* malformed ASN.1, don't answer */
      return ERR_ARG;
 8010220:	f06f 030f 	mvn.w	r3, #15
 8010224:	e009      	b.n	801023a <snmp_process_get_request+0x82>
    } else {
      request->error_status = SNMP_ERR_GENERROR;
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	2205      	movs	r2, #5
 801022a:	61da      	str	r2, [r3, #28]
  while (request->error_status == SNMP_ERR_NOERROR) {
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	69db      	ldr	r3, [r3, #28]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d0ca      	beq.n	80101ca <snmp_process_get_request+0x12>
 8010234:	e000      	b.n	8010238 <snmp_process_get_request+0x80>
      break;
 8010236:	bf00      	nop
    }
  }

  return ERR_OK;
 8010238:	2300      	movs	r3, #0
}
 801023a:	4618      	mov	r0, r3
 801023c:	37e8      	adds	r7, #232	@ 0xe8
 801023e:	46bd      	mov	sp, r7
 8010240:	bd80      	pop	{r7, pc}

08010242 <snmp_process_getnext_request>:
 *
 * @param request points to the associated message process state
 */
static err_t
snmp_process_getnext_request(struct snmp_request *request)
{
 8010242:	b580      	push	{r7, lr}
 8010244:	b0ba      	sub	sp, #232	@ 0xe8
 8010246:	af00      	add	r7, sp, #0
 8010248:	6078      	str	r0, [r7, #4]
  snmp_vb_enumerator_err_t err;
  struct snmp_varbind vb;
  vb.value = request->value_buffer;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	3358      	adds	r3, #88	@ 0x58
 801024e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

  LWIP_DEBUGF(SNMP_DEBUG, ("SNMP get-next request\n"));

  while (request->error_status == SNMP_ERR_NOERROR) {
 8010252:	e030      	b.n	80102b6 <snmp_process_getnext_request+0x74>
    err = snmp_vb_enumerator_get_next(&request->inbound_varbind_enumerator, &vb);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	3330      	adds	r3, #48	@ 0x30
 8010258:	f107 0208 	add.w	r2, r7, #8
 801025c:	4611      	mov	r1, r2
 801025e:	4618      	mov	r0, r3
 8010260:	f001 fb60 	bl	8011924 <snmp_vb_enumerator_get_next>
 8010264:	4603      	mov	r3, r0
 8010266:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
    if (err == SNMP_VB_ENUMERATOR_ERR_OK) {
 801026a:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 801026e:	2b00      	cmp	r3, #0
 8010270:	d113      	bne.n	801029a <snmp_process_getnext_request+0x58>
      if ((vb.type == SNMP_ASN1_TYPE_NULL) && (vb.value_len == 0)) {
 8010272:	f897 30dc 	ldrb.w	r3, [r7, #220]	@ 0xdc
 8010276:	2b05      	cmp	r3, #5
 8010278:	d10b      	bne.n	8010292 <snmp_process_getnext_request+0x50>
 801027a:	f8b7 30de 	ldrh.w	r3, [r7, #222]	@ 0xde
 801027e:	2b00      	cmp	r3, #0
 8010280:	d107      	bne.n	8010292 <snmp_process_getnext_request+0x50>
        snmp_process_varbind(request, &vb, 1);
 8010282:	f107 0308 	add.w	r3, r7, #8
 8010286:	2201      	movs	r2, #1
 8010288:	4619      	mov	r1, r3
 801028a:	6878      	ldr	r0, [r7, #4]
 801028c:	f7ff fdf6 	bl	800fe7c <snmp_process_varbind>
 8010290:	e011      	b.n	80102b6 <snmp_process_getnext_request+0x74>
      } else {
        request->error_status = SNMP_ERR_GENERROR;
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	2205      	movs	r2, #5
 8010296:	61da      	str	r2, [r3, #28]
 8010298:	e00d      	b.n	80102b6 <snmp_process_getnext_request+0x74>
      }
    } else if (err == SNMP_VB_ENUMERATOR_ERR_EOVB) {
 801029a:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 801029e:	2b01      	cmp	r3, #1
 80102a0:	d00e      	beq.n	80102c0 <snmp_process_getnext_request+0x7e>
      /* no more varbinds in request */
      break;
    } else if (err == SNMP_VB_ENUMERATOR_ERR_ASN1ERROR) {
 80102a2:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 80102a6:	2b02      	cmp	r3, #2
 80102a8:	d102      	bne.n	80102b0 <snmp_process_getnext_request+0x6e>
      /* malformed ASN.1, don't answer */
      return ERR_ARG;
 80102aa:	f06f 030f 	mvn.w	r3, #15
 80102ae:	e009      	b.n	80102c4 <snmp_process_getnext_request+0x82>
    } else {
      request->error_status = SNMP_ERR_GENERROR;
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	2205      	movs	r2, #5
 80102b4:	61da      	str	r2, [r3, #28]
  while (request->error_status == SNMP_ERR_NOERROR) {
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	69db      	ldr	r3, [r3, #28]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d0ca      	beq.n	8010254 <snmp_process_getnext_request+0x12>
 80102be:	e000      	b.n	80102c2 <snmp_process_getnext_request+0x80>
      break;
 80102c0:	bf00      	nop
    }
  }
  
  return ERR_OK;
 80102c2:	2300      	movs	r3, #0
}
 80102c4:	4618      	mov	r0, r3
 80102c6:	37e8      	adds	r7, #232	@ 0xe8
 80102c8:	46bd      	mov	sp, r7
 80102ca:	bd80      	pop	{r7, pc}

080102cc <snmp_process_getbulk_request>:
 *
 * @param request points to the associated message process state
 */
static err_t
snmp_process_getbulk_request(struct snmp_request *request)
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b0c0      	sub	sp, #256	@ 0x100
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
  snmp_vb_enumerator_err_t err;
  s32_t non_repeaters     = request->non_repeaters;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102d8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  s32_t repetitions;
  u16_t repetition_offset = 0;
 80102dc:	2300      	movs	r3, #0
 80102de:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6
  struct snmp_varbind_enumerator repetition_varbind_enumerator;
  struct snmp_varbind vb;
  vb.value = request->value_buffer;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	3358      	adds	r3, #88	@ 0x58
 80102e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

  if (SNMP_LWIP_GETBULK_MAX_REPETITIONS > 0) {
    repetitions = LWIP_MIN(request->max_repetitions, SNMP_LWIP_GETBULK_MAX_REPETITIONS);
  } else {
    repetitions = request->max_repetitions;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80102ee:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  }

  LWIP_DEBUGF(SNMP_DEBUG, ("SNMP get-bulk request\n"));

  /* process non repeaters and first repetition */
  while (request->error_status == SNMP_ERR_NOERROR) {
 80102f2:	e043      	b.n	801037c <snmp_process_getbulk_request+0xb0>
    if (non_repeaters == 0) {
 80102f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d10d      	bne.n	8010318 <snmp_process_getbulk_request+0x4c>
      repetition_offset = request->outbound_pbuf_stream.offset;
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8010302:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6

      if (repetitions == 0) {
 8010306:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801030a:	2b00      	cmp	r3, #0
 801030c:	d03b      	beq.n	8010386 <snmp_process_getbulk_request+0xba>
        /* do not resolve repeaters when repetitions is set to 0 */
        break;
      }
      repetitions--;
 801030e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8010312:	3b01      	subs	r3, #1
 8010314:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    }

    err = snmp_vb_enumerator_get_next(&request->inbound_varbind_enumerator, &vb);
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	3330      	adds	r3, #48	@ 0x30
 801031c:	f107 020c 	add.w	r2, r7, #12
 8010320:	4611      	mov	r1, r2
 8010322:	4618      	mov	r0, r3
 8010324:	f001 fafe 	bl	8011924 <snmp_vb_enumerator_get_next>
 8010328:	4603      	mov	r3, r0
 801032a:	f887 30f4 	strb.w	r3, [r7, #244]	@ 0xf4
    if (err == SNMP_VB_ENUMERATOR_ERR_EOVB) {
 801032e:	f897 30f4 	ldrb.w	r3, [r7, #244]	@ 0xf4
 8010332:	2b01      	cmp	r3, #1
 8010334:	d029      	beq.n	801038a <snmp_process_getbulk_request+0xbe>
      /* no more varbinds in request */
      break;
    } else if (err == SNMP_VB_ENUMERATOR_ERR_ASN1ERROR) {
 8010336:	f897 30f4 	ldrb.w	r3, [r7, #244]	@ 0xf4
 801033a:	2b02      	cmp	r3, #2
 801033c:	d102      	bne.n	8010344 <snmp_process_getbulk_request+0x78>
      /* malformed ASN.1, don't answer */
      return ERR_ARG;
 801033e:	f06f 030f 	mvn.w	r3, #15
 8010342:	e0a7      	b.n	8010494 <snmp_process_getbulk_request+0x1c8>
    } else if ((err != SNMP_VB_ENUMERATOR_ERR_OK) || (vb.type != SNMP_ASN1_TYPE_NULL) || (vb.value_len != 0)) {
 8010344:	f897 30f4 	ldrb.w	r3, [r7, #244]	@ 0xf4
 8010348:	2b00      	cmp	r3, #0
 801034a:	d107      	bne.n	801035c <snmp_process_getbulk_request+0x90>
 801034c:	f897 30e0 	ldrb.w	r3, [r7, #224]	@ 0xe0
 8010350:	2b05      	cmp	r3, #5
 8010352:	d103      	bne.n	801035c <snmp_process_getbulk_request+0x90>
 8010354:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	@ 0xe2
 8010358:	2b00      	cmp	r3, #0
 801035a:	d003      	beq.n	8010364 <snmp_process_getbulk_request+0x98>
      request->error_status = SNMP_ERR_GENERROR;
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	2205      	movs	r2, #5
 8010360:	61da      	str	r2, [r3, #28]
 8010362:	e00b      	b.n	801037c <snmp_process_getbulk_request+0xb0>
    } else {
      snmp_process_varbind(request, &vb, 1);
 8010364:	f107 030c 	add.w	r3, r7, #12
 8010368:	2201      	movs	r2, #1
 801036a:	4619      	mov	r1, r3
 801036c:	6878      	ldr	r0, [r7, #4]
 801036e:	f7ff fd85 	bl	800fe7c <snmp_process_varbind>
      non_repeaters--;
 8010372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010376:	3b01      	subs	r3, #1
 8010378:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  while (request->error_status == SNMP_ERR_NOERROR) {
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	69db      	ldr	r3, [r3, #28]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d0b7      	beq.n	80102f4 <snmp_process_getbulk_request+0x28>
 8010384:	e06d      	b.n	8010462 <snmp_process_getbulk_request+0x196>
        break;
 8010386:	bf00      	nop
 8010388:	e06b      	b.n	8010462 <snmp_process_getbulk_request+0x196>
      break;
 801038a:	bf00      	nop
    }
  }

  /* process repetitions > 1 */
  while ((request->error_status == SNMP_ERR_NOERROR) && (repetitions > 0) && (request->outbound_pbuf_stream.offset != repetition_offset)) {
 801038c:	e069      	b.n	8010462 <snmp_process_getbulk_request+0x196>

    u8_t all_endofmibview = 1;
 801038e:	2301      	movs	r3, #1
 8010390:	f887 30f5 	strb.w	r3, [r7, #245]	@ 0xf5
    
    snmp_vb_enumerator_init(&repetition_varbind_enumerator, request->outbound_pbuf, repetition_offset, request->outbound_pbuf_stream.offset - repetition_offset);
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 801039e:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	@ 0xf6
 80103a2:	1ad3      	subs	r3, r2, r3
 80103a4:	b29b      	uxth	r3, r3
 80103a6:	f8b7 20f6 	ldrh.w	r2, [r7, #246]	@ 0xf6
 80103aa:	f107 00e8 	add.w	r0, r7, #232	@ 0xe8
 80103ae:	f001 faa1 	bl	80118f4 <snmp_vb_enumerator_init>
    repetition_offset = request->outbound_pbuf_stream.offset; /* for next loop */
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 80103b8:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6

    while (request->error_status == SNMP_ERR_NOERROR) {
 80103bc:	e03e      	b.n	801043c <snmp_process_getbulk_request+0x170>
      vb.value = NULL; /* do NOT decode value (we enumerate outbound buffer here, so all varbinds have values assigned) */
 80103be:	2300      	movs	r3, #0
 80103c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      err = snmp_vb_enumerator_get_next(&repetition_varbind_enumerator, &vb);
 80103c4:	f107 020c 	add.w	r2, r7, #12
 80103c8:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 80103cc:	4611      	mov	r1, r2
 80103ce:	4618      	mov	r0, r3
 80103d0:	f001 faa8 	bl	8011924 <snmp_vb_enumerator_get_next>
 80103d4:	4603      	mov	r3, r0
 80103d6:	f887 30f4 	strb.w	r3, [r7, #244]	@ 0xf4
      if (err == SNMP_VB_ENUMERATOR_ERR_OK) {
 80103da:	f897 30f4 	ldrb.w	r3, [r7, #244]	@ 0xf4
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d11e      	bne.n	8010420 <snmp_process_getbulk_request+0x154>
        vb.value = request->value_buffer;
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	3358      	adds	r3, #88	@ 0x58
 80103e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        snmp_process_varbind(request, &vb, 1);
 80103ea:	f107 030c 	add.w	r3, r7, #12
 80103ee:	2201      	movs	r2, #1
 80103f0:	4619      	mov	r1, r3
 80103f2:	6878      	ldr	r0, [r7, #4]
 80103f4:	f7ff fd42 	bl	800fe7c <snmp_process_varbind>

        if (request->error_status != SNMP_ERR_NOERROR) {
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	69db      	ldr	r3, [r3, #28]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d007      	beq.n	8010410 <snmp_process_getbulk_request+0x144>
          /* already set correct error-index (here it cannot be taken from inbound varbind enumerator) */
          request->error_index = request->non_repeaters + repetition_varbind_enumerator.varbind_count;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010404:	f8b7 20f0 	ldrh.w	r2, [r7, #240]	@ 0xf0
 8010408:	441a      	add	r2, r3
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	621a      	str	r2, [r3, #32]
 801040e:	e015      	b.n	801043c <snmp_process_getbulk_request+0x170>
        } else if (vb.type != (SNMP_ASN1_CONTENTTYPE_PRIMITIVE | SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTEXT_VARBIND_END_OF_MIB_VIEW)) {
 8010410:	f897 30e0 	ldrb.w	r3, [r7, #224]	@ 0xe0
 8010414:	2b82      	cmp	r3, #130	@ 0x82
 8010416:	d011      	beq.n	801043c <snmp_process_getbulk_request+0x170>
          all_endofmibview = 0;
 8010418:	2300      	movs	r3, #0
 801041a:	f887 30f5 	strb.w	r3, [r7, #245]	@ 0xf5
 801041e:	e00d      	b.n	801043c <snmp_process_getbulk_request+0x170>
        }
      } else if (err == SNMP_VB_ENUMERATOR_ERR_EOVB) {
 8010420:	f897 30f4 	ldrb.w	r3, [r7, #244]	@ 0xf4
 8010424:	2b01      	cmp	r3, #1
 8010426:	d00e      	beq.n	8010446 <snmp_process_getbulk_request+0x17a>
        /* no more varbinds in request */
        break;
      } else {
        LWIP_DEBUGF(SNMP_DEBUG, ("Very strange, we cannot parse the varbind output that we created just before!"));
        request->error_status = SNMP_ERR_GENERROR;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	2205      	movs	r2, #5
 801042c:	61da      	str	r2, [r3, #28]
        request->error_index  = request->non_repeaters + repetition_varbind_enumerator.varbind_count;
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010432:	f8b7 20f0 	ldrh.w	r2, [r7, #240]	@ 0xf0
 8010436:	441a      	add	r2, r3
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	621a      	str	r2, [r3, #32]
    while (request->error_status == SNMP_ERR_NOERROR) {
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	69db      	ldr	r3, [r3, #28]
 8010440:	2b00      	cmp	r3, #0
 8010442:	d0bc      	beq.n	80103be <snmp_process_getbulk_request+0xf2>
 8010444:	e000      	b.n	8010448 <snmp_process_getbulk_request+0x17c>
        break;
 8010446:	bf00      	nop
      }
    }

    if ((request->error_status == SNMP_ERR_NOERROR) && all_endofmibview) {
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	69db      	ldr	r3, [r3, #28]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d103      	bne.n	8010458 <snmp_process_getbulk_request+0x18c>
 8010450:	f897 30f5 	ldrb.w	r3, [r7, #245]	@ 0xf5
 8010454:	2b00      	cmp	r3, #0
 8010456:	d114      	bne.n	8010482 <snmp_process_getbulk_request+0x1b6>
      /* stop when all varbinds in a loop return EndOfMibView */
      break;
    }
    
    repetitions--;
 8010458:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801045c:	3b01      	subs	r3, #1
 801045e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  while ((request->error_status == SNMP_ERR_NOERROR) && (repetitions > 0) && (request->outbound_pbuf_stream.offset != repetition_offset)) {
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	69db      	ldr	r3, [r3, #28]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d10c      	bne.n	8010484 <snmp_process_getbulk_request+0x1b8>
 801046a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801046e:	2b00      	cmp	r3, #0
 8010470:	dd08      	ble.n	8010484 <snmp_process_getbulk_request+0x1b8>
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8010478:	f8b7 20f6 	ldrh.w	r2, [r7, #246]	@ 0xf6
 801047c:	429a      	cmp	r2, r3
 801047e:	d186      	bne.n	801038e <snmp_process_getbulk_request+0xc2>
 8010480:	e000      	b.n	8010484 <snmp_process_getbulk_request+0x1b8>
      break;
 8010482:	bf00      	nop
  }

  if (request->error_status == SNMP_ERR_TOOBIG) {
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	69db      	ldr	r3, [r3, #28]
 8010488:	2b01      	cmp	r3, #1
 801048a:	d102      	bne.n	8010492 <snmp_process_getbulk_request+0x1c6>
    /* for GetBulk it is ok, if not all requested variables fit into the response -> just return the varbinds added so far */
    request->error_status = SNMP_ERR_NOERROR;
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	2200      	movs	r2, #0
 8010490:	61da      	str	r2, [r3, #28]
  }

  return ERR_OK;
 8010492:	2300      	movs	r3, #0
}
 8010494:	4618      	mov	r0, r3
 8010496:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 801049a:	46bd      	mov	sp, r7
 801049c:	bd80      	pop	{r7, pc}

0801049e <snmp_process_set_request>:
 *
 * @param request points to the associated message process state
 */
static err_t
snmp_process_set_request(struct snmp_request *request)
{
 801049e:	b580      	push	{r7, lr}
 80104a0:	b0f6      	sub	sp, #472	@ 0x1d8
 80104a2:	af00      	add	r7, sp, #0
 80104a4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80104a8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80104ac:	6018      	str	r0, [r3, #0]
  snmp_vb_enumerator_err_t err;
  struct snmp_varbind vb;
  vb.value = request->value_buffer;
 80104ae:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80104b2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	3358      	adds	r3, #88	@ 0x58
 80104ba:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0

  LWIP_DEBUGF(SNMP_DEBUG, ("SNMP set request\n"));

  /* perform set test on all objects */
  while (request->error_status == SNMP_ERR_NOERROR) {
 80104be:	e0ad      	b.n	801061c <snmp_process_set_request+0x17e>
    err = snmp_vb_enumerator_get_next(&request->inbound_varbind_enumerator, &vb);
 80104c0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80104c4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	3330      	adds	r3, #48	@ 0x30
 80104cc:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 80104d0:	4611      	mov	r1, r2
 80104d2:	4618      	mov	r0, r3
 80104d4:	f001 fa26 	bl	8011924 <snmp_vb_enumerator_get_next>
 80104d8:	4603      	mov	r3, r0
 80104da:	f887 31d7 	strb.w	r3, [r7, #471]	@ 0x1d7
    if (err == SNMP_VB_ENUMERATOR_ERR_OK) {
 80104de:	f897 31d7 	ldrb.w	r3, [r7, #471]	@ 0x1d7
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d17c      	bne.n	80105e0 <snmp_process_set_request+0x142>
      struct snmp_node_instance node_instance;
      memset(&node_instance, 0, sizeof(node_instance));
 80104e6:	f107 030c 	add.w	r3, r7, #12
 80104ea:	22ec      	movs	r2, #236	@ 0xec
 80104ec:	2100      	movs	r1, #0
 80104ee:	4618      	mov	r0, r3
 80104f0:	f010 f9ac 	bl	802084c <memset>
      
      request->error_status = snmp_get_node_instance_from_oid(vb.oid.id, vb.oid.len, &node_instance);
 80104f4:	f897 1100 	ldrb.w	r1, [r7, #256]	@ 0x100
 80104f8:	f107 020c 	add.w	r2, r7, #12
 80104fc:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8010500:	330c      	adds	r3, #12
 8010502:	4618      	mov	r0, r3
 8010504:	f7fc ffc6 	bl	800d494 <snmp_get_node_instance_from_oid>
 8010508:	4603      	mov	r3, r0
 801050a:	461a      	mov	r2, r3
 801050c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010510:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	61da      	str	r2, [r3, #28]
      if (request->error_status == SNMP_ERR_NOERROR) {
 8010518:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 801051c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	69db      	ldr	r3, [r3, #28]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d179      	bne.n	801061c <snmp_process_set_request+0x17e>
        if (node_instance.asn1_type != vb.type) {
 8010528:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 801052c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8010530:	f893 20d0 	ldrb.w	r2, [r3, #208]	@ 0xd0
 8010534:	f897 31cc 	ldrb.w	r3, [r7, #460]	@ 0x1cc
 8010538:	429a      	cmp	r2, r3
 801053a:	d007      	beq.n	801054c <snmp_process_set_request+0xae>
          request->error_status = SNMP_ERR_WRONGTYPE;
 801053c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010540:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	2207      	movs	r2, #7
 8010548:	61da      	str	r2, [r3, #28]
 801054a:	e036      	b.n	80105ba <snmp_process_set_request+0x11c>
        } else if (((node_instance.access & SNMP_NODE_INSTANCE_ACCESS_WRITE) != SNMP_NODE_INSTANCE_ACCESS_WRITE) || (node_instance.set_value == NULL)) {
 801054c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010550:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8010554:	f893 30d1 	ldrb.w	r3, [r3, #209]	@ 0xd1
 8010558:	f003 0302 	and.w	r3, r3, #2
 801055c:	2b00      	cmp	r3, #0
 801055e:	d007      	beq.n	8010570 <snmp_process_set_request+0xd2>
 8010560:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010564:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8010568:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 801056c:	2b00      	cmp	r3, #0
 801056e:	d107      	bne.n	8010580 <snmp_process_set_request+0xe2>
          request->error_status = SNMP_ERR_NOTWRITABLE;
 8010570:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010574:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	2211      	movs	r2, #17
 801057c:	61da      	str	r2, [r3, #28]
 801057e:	e01c      	b.n	80105ba <snmp_process_set_request+0x11c>
        } else {
          if (node_instance.set_test != NULL) {
 8010580:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010584:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8010588:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801058c:	2b00      	cmp	r3, #0
 801058e:	d014      	beq.n	80105ba <snmp_process_set_request+0x11c>
            request->error_status = node_instance.set_test(&node_instance, vb.value_len, vb.value);
 8010590:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010594:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8010598:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801059c:	f8b7 11ce 	ldrh.w	r1, [r7, #462]	@ 0x1ce
 80105a0:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 80105a4:	f107 000c 	add.w	r0, r7, #12
 80105a8:	4798      	blx	r3
 80105aa:	4603      	mov	r3, r0
 80105ac:	461a      	mov	r2, r3
 80105ae:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80105b2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	61da      	str	r2, [r3, #28]
          }
        }

        if (node_instance.release_instance != NULL) {
 80105ba:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80105be:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80105c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d028      	beq.n	801061c <snmp_process_set_request+0x17e>
          node_instance.release_instance(&node_instance);
 80105ca:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80105ce:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80105d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80105d6:	f107 020c 	add.w	r2, r7, #12
 80105da:	4610      	mov	r0, r2
 80105dc:	4798      	blx	r3
 80105de:	e01d      	b.n	801061c <snmp_process_set_request+0x17e>
        }
      }
    } else if (err == SNMP_VB_ENUMERATOR_ERR_EOVB) {
 80105e0:	f897 31d7 	ldrb.w	r3, [r7, #471]	@ 0x1d7
 80105e4:	2b01      	cmp	r3, #1
 80105e6:	d023      	beq.n	8010630 <snmp_process_set_request+0x192>
      /* no more varbinds in request */
      break;
    } else if (err == SNMP_VB_ENUMERATOR_ERR_INVALIDLENGTH) {
 80105e8:	f897 31d7 	ldrb.w	r3, [r7, #471]	@ 0x1d7
 80105ec:	2b03      	cmp	r3, #3
 80105ee:	d107      	bne.n	8010600 <snmp_process_set_request+0x162>
      request->error_status = SNMP_ERR_WRONGLENGTH;
 80105f0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80105f4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	2208      	movs	r2, #8
 80105fc:	61da      	str	r2, [r3, #28]
 80105fe:	e00d      	b.n	801061c <snmp_process_set_request+0x17e>
    } else if (err == SNMP_VB_ENUMERATOR_ERR_ASN1ERROR) {
 8010600:	f897 31d7 	ldrb.w	r3, [r7, #471]	@ 0x1d7
 8010604:	2b02      	cmp	r3, #2
 8010606:	d102      	bne.n	801060e <snmp_process_set_request+0x170>
      /* malformed ASN.1, don't answer */
      return ERR_ARG;
 8010608:	f06f 030f 	mvn.w	r3, #15
 801060c:	e0bb      	b.n	8010786 <snmp_process_set_request+0x2e8>
    } else {
      request->error_status = SNMP_ERR_GENERROR;
 801060e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010612:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	2205      	movs	r2, #5
 801061a:	61da      	str	r2, [r3, #28]
  while (request->error_status == SNMP_ERR_NOERROR) {
 801061c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010620:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	69db      	ldr	r3, [r3, #28]
 8010628:	2b00      	cmp	r3, #0
 801062a:	f43f af49 	beq.w	80104c0 <snmp_process_set_request+0x22>
 801062e:	e000      	b.n	8010632 <snmp_process_set_request+0x194>
      break;
 8010630:	bf00      	nop
    }
  }

  /* perform real set operation on all objects */
  if (request->error_status == SNMP_ERR_NOERROR) {
 8010632:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010636:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	69db      	ldr	r3, [r3, #28]
 801063e:	2b00      	cmp	r3, #0
 8010640:	f040 80a0 	bne.w	8010784 <snmp_process_set_request+0x2e6>
    snmp_vb_enumerator_init(&request->inbound_varbind_enumerator, request->inbound_pbuf, request->inbound_varbind_offset, request->inbound_varbind_len);
 8010644:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010648:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8010652:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010656:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801065e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010662:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 801066a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 801066e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010676:	f001 f93d 	bl	80118f4 <snmp_vb_enumerator_init>
    while (request->error_status == SNMP_ERR_NOERROR) {
 801067a:	e078      	b.n	801076e <snmp_process_set_request+0x2d0>
      err = snmp_vb_enumerator_get_next(&request->inbound_varbind_enumerator, &vb);
 801067c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010680:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	3330      	adds	r3, #48	@ 0x30
 8010688:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 801068c:	4611      	mov	r1, r2
 801068e:	4618      	mov	r0, r3
 8010690:	f001 f948 	bl	8011924 <snmp_vb_enumerator_get_next>
 8010694:	4603      	mov	r3, r0
 8010696:	f887 31d7 	strb.w	r3, [r7, #471]	@ 0x1d7
      if (err == SNMP_VB_ENUMERATOR_ERR_OK) {
 801069a:	f897 31d7 	ldrb.w	r3, [r7, #471]	@ 0x1d7
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d15a      	bne.n	8010758 <snmp_process_set_request+0x2ba>
        struct snmp_node_instance node_instance;
        memset(&node_instance, 0, sizeof(node_instance));
 80106a2:	f107 030c 	add.w	r3, r7, #12
 80106a6:	22ec      	movs	r2, #236	@ 0xec
 80106a8:	2100      	movs	r1, #0
 80106aa:	4618      	mov	r0, r3
 80106ac:	f010 f8ce 	bl	802084c <memset>
        request->error_status = snmp_get_node_instance_from_oid(vb.oid.id, vb.oid.len, &node_instance);
 80106b0:	f897 1100 	ldrb.w	r1, [r7, #256]	@ 0x100
 80106b4:	f107 020c 	add.w	r2, r7, #12
 80106b8:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 80106bc:	330c      	adds	r3, #12
 80106be:	4618      	mov	r0, r3
 80106c0:	f7fc fee8 	bl	800d494 <snmp_get_node_instance_from_oid>
 80106c4:	4603      	mov	r3, r0
 80106c6:	461a      	mov	r2, r3
 80106c8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80106cc:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	61da      	str	r2, [r3, #28]
        if (request->error_status == SNMP_ERR_NOERROR) {
 80106d4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80106d8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	69db      	ldr	r3, [r3, #28]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d144      	bne.n	801076e <snmp_process_set_request+0x2d0>
          if (node_instance.set_value(&node_instance, vb.value_len, vb.value) != SNMP_ERR_NOERROR) {
 80106e4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80106e8:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80106ec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80106f0:	f8b7 11ce 	ldrh.w	r1, [r7, #462]	@ 0x1ce
 80106f4:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 80106f8:	f107 000c 	add.w	r0, r7, #12
 80106fc:	4798      	blx	r3
 80106fe:	4603      	mov	r3, r0
 8010700:	2b00      	cmp	r3, #0
 8010702:	d016      	beq.n	8010732 <snmp_process_set_request+0x294>
            if (request->inbound_varbind_enumerator.varbind_count == 1) {
 8010704:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010708:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010710:	2b01      	cmp	r3, #1
 8010712:	d107      	bne.n	8010724 <snmp_process_set_request+0x286>
              request->error_status = SNMP_ERR_COMMITFAILED;
 8010714:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010718:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	220e      	movs	r2, #14
 8010720:	61da      	str	r2, [r3, #28]
 8010722:	e006      	b.n	8010732 <snmp_process_set_request+0x294>
            } else {
              /* we cannot undo the set operations done so far */
              request->error_status = SNMP_ERR_UNDOFAILED;
 8010724:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010728:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	220f      	movs	r2, #15
 8010730:	61da      	str	r2, [r3, #28]
            }
          }

          if (node_instance.release_instance != NULL) {
 8010732:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010736:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 801073a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801073e:	2b00      	cmp	r3, #0
 8010740:	d015      	beq.n	801076e <snmp_process_set_request+0x2d0>
            node_instance.release_instance(&node_instance);
 8010742:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010746:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 801074a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801074e:	f107 020c 	add.w	r2, r7, #12
 8010752:	4610      	mov	r0, r2
 8010754:	4798      	blx	r3
 8010756:	e00a      	b.n	801076e <snmp_process_set_request+0x2d0>
          }
        }
      } else if (err == SNMP_VB_ENUMERATOR_ERR_EOVB) {
 8010758:	f897 31d7 	ldrb.w	r3, [r7, #471]	@ 0x1d7
 801075c:	2b01      	cmp	r3, #1
 801075e:	d010      	beq.n	8010782 <snmp_process_set_request+0x2e4>
        /* no more varbinds in request */
        break;
      } else {
        /* first time enumerating varbinds work but second time not, although nothing should have changed in between ??? */
        request->error_status = SNMP_ERR_GENERROR;
 8010760:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010764:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	2205      	movs	r2, #5
 801076c:	61da      	str	r2, [r3, #28]
    while (request->error_status == SNMP_ERR_NOERROR) {
 801076e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8010772:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	69db      	ldr	r3, [r3, #28]
 801077a:	2b00      	cmp	r3, #0
 801077c:	f43f af7e 	beq.w	801067c <snmp_process_set_request+0x1de>
 8010780:	e000      	b.n	8010784 <snmp_process_set_request+0x2e6>
        break;
 8010782:	bf00      	nop
      }
    }
  }

  return ERR_OK;
 8010784:	2300      	movs	r3, #0
}
 8010786:	4618      	mov	r0, r3
 8010788:	f507 77ec 	add.w	r7, r7, #472	@ 0x1d8
 801078c:	46bd      	mov	sp, r7
 801078e:	bd80      	pop	{r7, pc}

08010790 <snmp_parse_inbound_frame>:
 * - ERR_OK SNMP header is sane and accepted
 * - ERR_VAL SNMP header is either malformed or rejected
 */
static err_t
snmp_parse_inbound_frame(struct snmp_request *request)
{
 8010790:	b590      	push	{r4, r7, lr}
 8010792:	b08d      	sub	sp, #52	@ 0x34
 8010794:	af02      	add	r7, sp, #8
 8010796:	6078      	str	r0, [r7, #4]
  struct snmp_asn1_tlv tlv;
  s32_t parent_tlv_value_len;
  s32_t s32_value;
  err_t err;

  IF_PARSE_EXEC(snmp_pbuf_stream_init(&pbuf_stream, request->inbound_pbuf, 0, request->inbound_pbuf->tot_len));
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80107a0:	891b      	ldrh	r3, [r3, #8]
 80107a2:	f107 0018 	add.w	r0, r7, #24
 80107a6:	2200      	movs	r2, #0
 80107a8:	f001 faca 	bl	8011d40 <snmp_pbuf_stream_init>
 80107ac:	4603      	mov	r3, r0
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d007      	beq.n	80107c2 <snmp_parse_inbound_frame+0x32>
 80107b2:	4b9f      	ldr	r3, [pc, #636]	@ (8010a30 <snmp_parse_inbound_frame+0x2a0>)
 80107b4:	695b      	ldr	r3, [r3, #20]
 80107b6:	3301      	adds	r3, #1
 80107b8:	4a9d      	ldr	r2, [pc, #628]	@ (8010a30 <snmp_parse_inbound_frame+0x2a0>)
 80107ba:	6153      	str	r3, [r2, #20]
 80107bc:	f06f 030f 	mvn.w	r3, #15
 80107c0:	e2ee      	b.n	8010da0 <snmp_parse_inbound_frame+0x610>
  
  /* decode main container consisting of version, community and PDU */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 80107c2:	f107 0210 	add.w	r2, r7, #16
 80107c6:	f107 0318 	add.w	r3, r7, #24
 80107ca:	4611      	mov	r1, r2
 80107cc:	4618      	mov	r0, r3
 80107ce:	f7fb ffd9 	bl	800c784 <snmp_asn1_dec_tlv>
 80107d2:	4603      	mov	r3, r0
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d007      	beq.n	80107e8 <snmp_parse_inbound_frame+0x58>
 80107d8:	4b95      	ldr	r3, [pc, #596]	@ (8010a30 <snmp_parse_inbound_frame+0x2a0>)
 80107da:	695b      	ldr	r3, [r3, #20]
 80107dc:	3301      	adds	r3, #1
 80107de:	4a94      	ldr	r2, [pc, #592]	@ (8010a30 <snmp_parse_inbound_frame+0x2a0>)
 80107e0:	6153      	str	r3, [r2, #20]
 80107e2:	f06f 030f 	mvn.w	r3, #15
 80107e6:	e2db      	b.n	8010da0 <snmp_parse_inbound_frame+0x610>
  IF_PARSE_ASSERT((tlv.type == SNMP_ASN1_TYPE_SEQUENCE) && (tlv.value_len == pbuf_stream.length));
 80107e8:	7c3b      	ldrb	r3, [r7, #16]
 80107ea:	2b30      	cmp	r3, #48	@ 0x30
 80107ec:	d103      	bne.n	80107f6 <snmp_parse_inbound_frame+0x66>
 80107ee:	8aba      	ldrh	r2, [r7, #20]
 80107f0:	8bfb      	ldrh	r3, [r7, #30]
 80107f2:	429a      	cmp	r2, r3
 80107f4:	d007      	beq.n	8010806 <snmp_parse_inbound_frame+0x76>
 80107f6:	4b8e      	ldr	r3, [pc, #568]	@ (8010a30 <snmp_parse_inbound_frame+0x2a0>)
 80107f8:	695b      	ldr	r3, [r3, #20]
 80107fa:	3301      	adds	r3, #1
 80107fc:	4a8c      	ldr	r2, [pc, #560]	@ (8010a30 <snmp_parse_inbound_frame+0x2a0>)
 80107fe:	6153      	str	r3, [r2, #20]
 8010800:	f06f 030f 	mvn.w	r3, #15
 8010804:	e2cc      	b.n	8010da0 <snmp_parse_inbound_frame+0x610>
  parent_tlv_value_len = tlv.value_len;
 8010806:	8abb      	ldrh	r3, [r7, #20]
 8010808:	627b      	str	r3, [r7, #36]	@ 0x24

  /* decode version */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 801080a:	f107 0210 	add.w	r2, r7, #16
 801080e:	f107 0318 	add.w	r3, r7, #24
 8010812:	4611      	mov	r1, r2
 8010814:	4618      	mov	r0, r3
 8010816:	f7fb ffb5 	bl	800c784 <snmp_asn1_dec_tlv>
 801081a:	4603      	mov	r3, r0
 801081c:	2b00      	cmp	r3, #0
 801081e:	d007      	beq.n	8010830 <snmp_parse_inbound_frame+0xa0>
 8010820:	4b83      	ldr	r3, [pc, #524]	@ (8010a30 <snmp_parse_inbound_frame+0x2a0>)
 8010822:	695b      	ldr	r3, [r3, #20]
 8010824:	3301      	adds	r3, #1
 8010826:	4a82      	ldr	r2, [pc, #520]	@ (8010a30 <snmp_parse_inbound_frame+0x2a0>)
 8010828:	6153      	str	r3, [r2, #20]
 801082a:	f06f 030f 	mvn.w	r3, #15
 801082e:	e2b7      	b.n	8010da0 <snmp_parse_inbound_frame+0x610>
  IF_PARSE_ASSERT(tlv.type == SNMP_ASN1_TYPE_INTEGER);
 8010830:	7c3b      	ldrb	r3, [r7, #16]
 8010832:	2b02      	cmp	r3, #2
 8010834:	d007      	beq.n	8010846 <snmp_parse_inbound_frame+0xb6>
 8010836:	4b7e      	ldr	r3, [pc, #504]	@ (8010a30 <snmp_parse_inbound_frame+0x2a0>)
 8010838:	695b      	ldr	r3, [r3, #20]
 801083a:	3301      	adds	r3, #1
 801083c:	4a7c      	ldr	r2, [pc, #496]	@ (8010a30 <snmp_parse_inbound_frame+0x2a0>)
 801083e:	6153      	str	r3, [r2, #20]
 8010840:	f06f 030f 	mvn.w	r3, #15
 8010844:	e2ac      	b.n	8010da0 <snmp_parse_inbound_frame+0x610>
  parent_tlv_value_len -= SNMP_ASN1_TLV_LENGTH(tlv);
 8010846:	7c7b      	ldrb	r3, [r7, #17]
 8010848:	461a      	mov	r2, r3
 801084a:	7cbb      	ldrb	r3, [r7, #18]
 801084c:	4413      	add	r3, r2
 801084e:	8aba      	ldrh	r2, [r7, #20]
 8010850:	4413      	add	r3, r2
 8010852:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010854:	1ad3      	subs	r3, r2, r3
 8010856:	627b      	str	r3, [r7, #36]	@ 0x24
  IF_PARSE_ASSERT(parent_tlv_value_len > 0);
 8010858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801085a:	2b00      	cmp	r3, #0
 801085c:	dc07      	bgt.n	801086e <snmp_parse_inbound_frame+0xde>
 801085e:	4b74      	ldr	r3, [pc, #464]	@ (8010a30 <snmp_parse_inbound_frame+0x2a0>)
 8010860:	695b      	ldr	r3, [r3, #20]
 8010862:	3301      	adds	r3, #1
 8010864:	4a72      	ldr	r2, [pc, #456]	@ (8010a30 <snmp_parse_inbound_frame+0x2a0>)
 8010866:	6153      	str	r3, [r2, #20]
 8010868:	f06f 030f 	mvn.w	r3, #15
 801086c:	e298      	b.n	8010da0 <snmp_parse_inbound_frame+0x610>
  
  IF_PARSE_EXEC(snmp_asn1_dec_s32t(&pbuf_stream, tlv.value_len, &s32_value));
 801086e:	8ab9      	ldrh	r1, [r7, #20]
 8010870:	f107 020c 	add.w	r2, r7, #12
 8010874:	f107 0318 	add.w	r3, r7, #24
 8010878:	4618      	mov	r0, r3
 801087a:	f7fc f8bb 	bl	800c9f4 <snmp_asn1_dec_s32t>
 801087e:	4603      	mov	r3, r0
 8010880:	2b00      	cmp	r3, #0
 8010882:	d007      	beq.n	8010894 <snmp_parse_inbound_frame+0x104>
 8010884:	4b6a      	ldr	r3, [pc, #424]	@ (8010a30 <snmp_parse_inbound_frame+0x2a0>)
 8010886:	695b      	ldr	r3, [r3, #20]
 8010888:	3301      	adds	r3, #1
 801088a:	4a69      	ldr	r2, [pc, #420]	@ (8010a30 <snmp_parse_inbound_frame+0x2a0>)
 801088c:	6153      	str	r3, [r2, #20]
 801088e:	f06f 030f 	mvn.w	r3, #15
 8010892:	e285      	b.n	8010da0 <snmp_parse_inbound_frame+0x610>
  if ((s32_value != SNMP_VERSION_1) &&
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d00a      	beq.n	80108b0 <snmp_parse_inbound_frame+0x120>
      (s32_value != SNMP_VERSION_2c)
 801089a:	68fb      	ldr	r3, [r7, #12]
  if ((s32_value != SNMP_VERSION_1) &&
 801089c:	2b01      	cmp	r3, #1
 801089e:	d007      	beq.n	80108b0 <snmp_parse_inbound_frame+0x120>
      && (s32_value != SNMP_VERSION_3)
#endif
     )
  {
    /* unsupported SNMP version */
    snmp_stats.inbadversions++;
 80108a0:	4b63      	ldr	r3, [pc, #396]	@ (8010a30 <snmp_parse_inbound_frame+0x2a0>)
 80108a2:	689b      	ldr	r3, [r3, #8]
 80108a4:	3301      	adds	r3, #1
 80108a6:	4a62      	ldr	r2, [pc, #392]	@ (8010a30 <snmp_parse_inbound_frame+0x2a0>)
 80108a8:	6093      	str	r3, [r2, #8]
    return ERR_ARG;
 80108aa:	f06f 030f 	mvn.w	r3, #15
 80108ae:	e277      	b.n	8010da0 <snmp_parse_inbound_frame+0x610>
  }
  request->version = (u8_t)s32_value;
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	b2da      	uxtb	r2, r3
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	729a      	strb	r2, [r3, #10]
    request->context_name_len = (u8_t)u16_value;
  } else
#endif
  {
  /* decode community */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 80108b8:	f107 0210 	add.w	r2, r7, #16
 80108bc:	f107 0318 	add.w	r3, r7, #24
 80108c0:	4611      	mov	r1, r2
 80108c2:	4618      	mov	r0, r3
 80108c4:	f7fb ff5e 	bl	800c784 <snmp_asn1_dec_tlv>
 80108c8:	4603      	mov	r3, r0
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d007      	beq.n	80108de <snmp_parse_inbound_frame+0x14e>
 80108ce:	4b58      	ldr	r3, [pc, #352]	@ (8010a30 <snmp_parse_inbound_frame+0x2a0>)
 80108d0:	695b      	ldr	r3, [r3, #20]
 80108d2:	3301      	adds	r3, #1
 80108d4:	4a56      	ldr	r2, [pc, #344]	@ (8010a30 <snmp_parse_inbound_frame+0x2a0>)
 80108d6:	6153      	str	r3, [r2, #20]
 80108d8:	f06f 030f 	mvn.w	r3, #15
 80108dc:	e260      	b.n	8010da0 <snmp_parse_inbound_frame+0x610>
  IF_PARSE_ASSERT(tlv.type == SNMP_ASN1_TYPE_OCTET_STRING);
 80108de:	7c3b      	ldrb	r3, [r7, #16]
 80108e0:	2b04      	cmp	r3, #4
 80108e2:	d007      	beq.n	80108f4 <snmp_parse_inbound_frame+0x164>
 80108e4:	4b52      	ldr	r3, [pc, #328]	@ (8010a30 <snmp_parse_inbound_frame+0x2a0>)
 80108e6:	695b      	ldr	r3, [r3, #20]
 80108e8:	3301      	adds	r3, #1
 80108ea:	4a51      	ldr	r2, [pc, #324]	@ (8010a30 <snmp_parse_inbound_frame+0x2a0>)
 80108ec:	6153      	str	r3, [r2, #20]
 80108ee:	f06f 030f 	mvn.w	r3, #15
 80108f2:	e255      	b.n	8010da0 <snmp_parse_inbound_frame+0x610>
  parent_tlv_value_len -= SNMP_ASN1_TLV_LENGTH(tlv);
 80108f4:	7c7b      	ldrb	r3, [r7, #17]
 80108f6:	461a      	mov	r2, r3
 80108f8:	7cbb      	ldrb	r3, [r7, #18]
 80108fa:	4413      	add	r3, r2
 80108fc:	8aba      	ldrh	r2, [r7, #20]
 80108fe:	4413      	add	r3, r2
 8010900:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010902:	1ad3      	subs	r3, r2, r3
 8010904:	627b      	str	r3, [r7, #36]	@ 0x24
  IF_PARSE_ASSERT(parent_tlv_value_len > 0);
 8010906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010908:	2b00      	cmp	r3, #0
 801090a:	dc07      	bgt.n	801091c <snmp_parse_inbound_frame+0x18c>
 801090c:	4b48      	ldr	r3, [pc, #288]	@ (8010a30 <snmp_parse_inbound_frame+0x2a0>)
 801090e:	695b      	ldr	r3, [r3, #20]
 8010910:	3301      	adds	r3, #1
 8010912:	4a47      	ldr	r2, [pc, #284]	@ (8010a30 <snmp_parse_inbound_frame+0x2a0>)
 8010914:	6153      	str	r3, [r2, #20]
 8010916:	f06f 030f 	mvn.w	r3, #15
 801091a:	e241      	b.n	8010da0 <snmp_parse_inbound_frame+0x610>

  err = snmp_asn1_dec_raw(&pbuf_stream, tlv.value_len, request->community, &request->community_strlen, SNMP_MAX_COMMUNITY_STR_LEN);
 801091c:	8ab9      	ldrh	r1, [r7, #20]
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	f103 020b 	add.w	r2, r3, #11
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	3314      	adds	r3, #20
 8010928:	f107 0018 	add.w	r0, r7, #24
 801092c:	2408      	movs	r4, #8
 801092e:	9400      	str	r4, [sp, #0]
 8010930:	f7fc f99f 	bl	800cc72 <snmp_asn1_dec_raw>
 8010934:	4603      	mov	r3, r0
 8010936:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err == ERR_MEM) {
 801093a:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 801093e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010942:	d10b      	bne.n	801095c <snmp_parse_inbound_frame+0x1cc>
    /* community string does not fit in our buffer -> its too long -> its invalid */
    request->community_strlen = 0;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	2200      	movs	r2, #0
 8010948:	829a      	strh	r2, [r3, #20]
    snmp_pbuf_stream_seek(&pbuf_stream, tlv.value_len);
 801094a:	8abb      	ldrh	r3, [r7, #20]
 801094c:	461a      	mov	r2, r3
 801094e:	f107 0318 	add.w	r3, r7, #24
 8010952:	4611      	mov	r1, r2
 8010954:	4618      	mov	r0, r3
 8010956:	f001 fae9 	bl	8011f2c <snmp_pbuf_stream_seek>
 801095a:	e00b      	b.n	8010974 <snmp_parse_inbound_frame+0x1e4>
  } else {
    IF_PARSE_ASSERT(err == ERR_OK);
 801095c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8010960:	2b00      	cmp	r3, #0
 8010962:	d007      	beq.n	8010974 <snmp_parse_inbound_frame+0x1e4>
 8010964:	4b32      	ldr	r3, [pc, #200]	@ (8010a30 <snmp_parse_inbound_frame+0x2a0>)
 8010966:	695b      	ldr	r3, [r3, #20]
 8010968:	3301      	adds	r3, #1
 801096a:	4a31      	ldr	r2, [pc, #196]	@ (8010a30 <snmp_parse_inbound_frame+0x2a0>)
 801096c:	6153      	str	r3, [r2, #20]
 801096e:	f06f 030f 	mvn.w	r3, #15
 8010972:	e215      	b.n	8010da0 <snmp_parse_inbound_frame+0x610>
  }
  /* add zero terminator */
  request->community[request->community_strlen] = 0;
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	8a9b      	ldrh	r3, [r3, #20]
 8010978:	461a      	mov	r2, r3
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	4413      	add	r3, r2
 801097e:	2200      	movs	r2, #0
 8010980:	72da      	strb	r2, [r3, #11]
  }

  /* decode PDU type (next container level) */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 8010982:	f107 0210 	add.w	r2, r7, #16
 8010986:	f107 0318 	add.w	r3, r7, #24
 801098a:	4611      	mov	r1, r2
 801098c:	4618      	mov	r0, r3
 801098e:	f7fb fef9 	bl	800c784 <snmp_asn1_dec_tlv>
 8010992:	4603      	mov	r3, r0
 8010994:	2b00      	cmp	r3, #0
 8010996:	d007      	beq.n	80109a8 <snmp_parse_inbound_frame+0x218>
 8010998:	4b25      	ldr	r3, [pc, #148]	@ (8010a30 <snmp_parse_inbound_frame+0x2a0>)
 801099a:	695b      	ldr	r3, [r3, #20]
 801099c:	3301      	adds	r3, #1
 801099e:	4a24      	ldr	r2, [pc, #144]	@ (8010a30 <snmp_parse_inbound_frame+0x2a0>)
 80109a0:	6153      	str	r3, [r2, #20]
 80109a2:	f06f 030f 	mvn.w	r3, #15
 80109a6:	e1fb      	b.n	8010da0 <snmp_parse_inbound_frame+0x610>
  IF_PARSE_ASSERT(tlv.value_len <= pbuf_stream.length);
 80109a8:	8aba      	ldrh	r2, [r7, #20]
 80109aa:	8bfb      	ldrh	r3, [r7, #30]
 80109ac:	429a      	cmp	r2, r3
 80109ae:	d907      	bls.n	80109c0 <snmp_parse_inbound_frame+0x230>
 80109b0:	4b1f      	ldr	r3, [pc, #124]	@ (8010a30 <snmp_parse_inbound_frame+0x2a0>)
 80109b2:	695b      	ldr	r3, [r3, #20]
 80109b4:	3301      	adds	r3, #1
 80109b6:	4a1e      	ldr	r2, [pc, #120]	@ (8010a30 <snmp_parse_inbound_frame+0x2a0>)
 80109b8:	6153      	str	r3, [r2, #20]
 80109ba:	f06f 030f 	mvn.w	r3, #15
 80109be:	e1ef      	b.n	8010da0 <snmp_parse_inbound_frame+0x610>
  request->inbound_padding_len = pbuf_stream.length - tlv.value_len;
 80109c0:	8bfa      	ldrh	r2, [r7, #30]
 80109c2:	8abb      	ldrh	r3, [r7, #20]
 80109c4:	1ad3      	subs	r3, r2, r3
 80109c6:	b29a      	uxth	r2, r3
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  parent_tlv_value_len = tlv.value_len;
 80109ce:	8abb      	ldrh	r3, [r7, #20]
 80109d0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* validate PDU type */
  switch(tlv.type) {
 80109d2:	7c3b      	ldrb	r3, [r7, #16]
 80109d4:	3ba0      	subs	r3, #160	@ 0xa0
 80109d6:	2b05      	cmp	r3, #5
 80109d8:	d827      	bhi.n	8010a2a <snmp_parse_inbound_frame+0x29a>
 80109da:	a201      	add	r2, pc, #4	@ (adr r2, 80109e0 <snmp_parse_inbound_frame+0x250>)
 80109dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109e0:	080109f9 	.word	0x080109f9
 80109e4:	08010a05 	.word	0x08010a05
 80109e8:	08010a2b 	.word	0x08010a2b
 80109ec:	08010a1f 	.word	0x08010a1f
 80109f0:	08010a2b 	.word	0x08010a2b
 80109f4:	08010a11 	.word	0x08010a11
    case (SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTENTTYPE_CONSTRUCTED | SNMP_ASN1_CONTEXT_PDU_GET_REQ):
      /* GetRequest PDU */
      snmp_stats.ingetrequests++;
 80109f8:	4b0d      	ldr	r3, [pc, #52]	@ (8010a30 <snmp_parse_inbound_frame+0x2a0>)
 80109fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80109fc:	3301      	adds	r3, #1
 80109fe:	4a0c      	ldr	r2, [pc, #48]	@ (8010a30 <snmp_parse_inbound_frame+0x2a0>)
 8010a00:	6353      	str	r3, [r2, #52]	@ 0x34
      break;
 8010a02:	e018      	b.n	8010a36 <snmp_parse_inbound_frame+0x2a6>
    case (SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTENTTYPE_CONSTRUCTED | SNMP_ASN1_CONTEXT_PDU_GET_NEXT_REQ):
      /* GetNextRequest PDU */
      snmp_stats.ingetnexts++;
 8010a04:	4b0a      	ldr	r3, [pc, #40]	@ (8010a30 <snmp_parse_inbound_frame+0x2a0>)
 8010a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a08:	3301      	adds	r3, #1
 8010a0a:	4a09      	ldr	r2, [pc, #36]	@ (8010a30 <snmp_parse_inbound_frame+0x2a0>)
 8010a0c:	6393      	str	r3, [r2, #56]	@ 0x38
      break;
 8010a0e:	e012      	b.n	8010a36 <snmp_parse_inbound_frame+0x2a6>
    case (SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTENTTYPE_CONSTRUCTED | SNMP_ASN1_CONTEXT_PDU_GET_BULK_REQ):
      /* GetBulkRequest PDU */
      if (request->version < SNMP_VERSION_2c) {
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	7a9b      	ldrb	r3, [r3, #10]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d10d      	bne.n	8010a34 <snmp_parse_inbound_frame+0x2a4>
        /* RFC2089: invalid, drop packet */
        return ERR_ARG;
 8010a18:	f06f 030f 	mvn.w	r3, #15
 8010a1c:	e1c0      	b.n	8010da0 <snmp_parse_inbound_frame+0x610>
      }
      break;
    case (SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTENTTYPE_CONSTRUCTED | SNMP_ASN1_CONTEXT_PDU_SET_REQ):
      /* SetRequest PDU */
      snmp_stats.insetrequests++;
 8010a1e:	4b04      	ldr	r3, [pc, #16]	@ (8010a30 <snmp_parse_inbound_frame+0x2a0>)
 8010a20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a22:	3301      	adds	r3, #1
 8010a24:	4a02      	ldr	r2, [pc, #8]	@ (8010a30 <snmp_parse_inbound_frame+0x2a0>)
 8010a26:	63d3      	str	r3, [r2, #60]	@ 0x3c
      break;
 8010a28:	e005      	b.n	8010a36 <snmp_parse_inbound_frame+0x2a6>
    default:
      /* unsupported input PDU for this agent (no parse error) */
      LWIP_DEBUGF(SNMP_DEBUG, ("Unknown/Invalid SNMP PDU type received: %d", tlv.type)); \
      return ERR_ARG;
 8010a2a:	f06f 030f 	mvn.w	r3, #15
 8010a2e:	e1b7      	b.n	8010da0 <snmp_parse_inbound_frame+0x610>
 8010a30:	2000a4e4 	.word	0x2000a4e4
      break;
 8010a34:	bf00      	nop
      break;
  }
  request->request_type = tlv.type & SNMP_ASN1_DATATYPE_MASK;
 8010a36:	7c3b      	ldrb	r3, [r7, #16]
 8010a38:	f003 031f 	and.w	r3, r3, #31
 8010a3c:	b2da      	uxtb	r2, r3
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	759a      	strb	r2, [r3, #22]

  /* validate community (do this after decoding PDU type because we don't want to increase 'inbadcommunitynames' for wrong frame types */
  if (request->community_strlen == 0) {
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	8a9b      	ldrh	r3, [r3, #20]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d109      	bne.n	8010a5e <snmp_parse_inbound_frame+0x2ce>
    /* community string was too long or really empty*/
    snmp_stats.inbadcommunitynames++;
 8010a4a:	4ba2      	ldr	r3, [pc, #648]	@ (8010cd4 <snmp_parse_inbound_frame+0x544>)
 8010a4c:	68db      	ldr	r3, [r3, #12]
 8010a4e:	3301      	adds	r3, #1
 8010a50:	4aa0      	ldr	r2, [pc, #640]	@ (8010cd4 <snmp_parse_inbound_frame+0x544>)
 8010a52:	60d3      	str	r3, [r2, #12]
    snmp_authfail_trap();
 8010a54:	f002 f88a 	bl	8012b6c <snmp_authfail_trap>
    return ERR_ARG;
 8010a58:	f06f 030f 	mvn.w	r3, #15
 8010a5c:	e1a0      	b.n	8010da0 <snmp_parse_inbound_frame+0x610>
  } else if (request->request_type == SNMP_ASN1_CONTEXT_PDU_SET_REQ) {
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	7d9b      	ldrb	r3, [r3, #22]
 8010a62:	2b03      	cmp	r3, #3
 8010a64:	d120      	bne.n	8010aa8 <snmp_parse_inbound_frame+0x318>
    if (snmp_community_write[0] == 0) {
 8010a66:	4b9c      	ldr	r3, [pc, #624]	@ (8010cd8 <snmp_parse_inbound_frame+0x548>)
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	781b      	ldrb	r3, [r3, #0]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d106      	bne.n	8010a7e <snmp_parse_inbound_frame+0x2ee>
      /* our write community is empty, that means all our objects are readonly */
      request->error_status = SNMP_ERR_NOTWRITABLE;
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	2211      	movs	r2, #17
 8010a74:	61da      	str	r2, [r3, #28]
      request->error_index  = 1;
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	2201      	movs	r2, #1
 8010a7a:	621a      	str	r2, [r3, #32]
 8010a7c:	e029      	b.n	8010ad2 <snmp_parse_inbound_frame+0x342>
    } else if (strncmp(snmp_community_write, (const char*)request->community, SNMP_MAX_COMMUNITY_STR_LEN) != 0) {
 8010a7e:	4b96      	ldr	r3, [pc, #600]	@ (8010cd8 <snmp_parse_inbound_frame+0x548>)
 8010a80:	6818      	ldr	r0, [r3, #0]
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	330b      	adds	r3, #11
 8010a86:	2208      	movs	r2, #8
 8010a88:	4619      	mov	r1, r3
 8010a8a:	f00f fef4 	bl	8020876 <strncmp>
 8010a8e:	4603      	mov	r3, r0
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d01e      	beq.n	8010ad2 <snmp_parse_inbound_frame+0x342>
      /* community name does not match */
      snmp_stats.inbadcommunitynames++;
 8010a94:	4b8f      	ldr	r3, [pc, #572]	@ (8010cd4 <snmp_parse_inbound_frame+0x544>)
 8010a96:	68db      	ldr	r3, [r3, #12]
 8010a98:	3301      	adds	r3, #1
 8010a9a:	4a8e      	ldr	r2, [pc, #568]	@ (8010cd4 <snmp_parse_inbound_frame+0x544>)
 8010a9c:	60d3      	str	r3, [r2, #12]
      snmp_authfail_trap();
 8010a9e:	f002 f865 	bl	8012b6c <snmp_authfail_trap>
      return ERR_ARG;
 8010aa2:	f06f 030f 	mvn.w	r3, #15
 8010aa6:	e17b      	b.n	8010da0 <snmp_parse_inbound_frame+0x610>
    }
  } else { 
    if (strncmp(snmp_community, (const char*)request->community, SNMP_MAX_COMMUNITY_STR_LEN) != 0) {
 8010aa8:	4b8c      	ldr	r3, [pc, #560]	@ (8010cdc <snmp_parse_inbound_frame+0x54c>)
 8010aaa:	6818      	ldr	r0, [r3, #0]
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	330b      	adds	r3, #11
 8010ab0:	2208      	movs	r2, #8
 8010ab2:	4619      	mov	r1, r3
 8010ab4:	f00f fedf 	bl	8020876 <strncmp>
 8010ab8:	4603      	mov	r3, r0
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d009      	beq.n	8010ad2 <snmp_parse_inbound_frame+0x342>
      /* community name does not match */
      snmp_stats.inbadcommunitynames++;
 8010abe:	4b85      	ldr	r3, [pc, #532]	@ (8010cd4 <snmp_parse_inbound_frame+0x544>)
 8010ac0:	68db      	ldr	r3, [r3, #12]
 8010ac2:	3301      	adds	r3, #1
 8010ac4:	4a83      	ldr	r2, [pc, #524]	@ (8010cd4 <snmp_parse_inbound_frame+0x544>)
 8010ac6:	60d3      	str	r3, [r2, #12]
      snmp_authfail_trap();
 8010ac8:	f002 f850 	bl	8012b6c <snmp_authfail_trap>
      return ERR_ARG;
 8010acc:	f06f 030f 	mvn.w	r3, #15
 8010ad0:	e166      	b.n	8010da0 <snmp_parse_inbound_frame+0x610>
    }
  }
  
  /* decode request ID */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 8010ad2:	f107 0210 	add.w	r2, r7, #16
 8010ad6:	f107 0318 	add.w	r3, r7, #24
 8010ada:	4611      	mov	r1, r2
 8010adc:	4618      	mov	r0, r3
 8010ade:	f7fb fe51 	bl	800c784 <snmp_asn1_dec_tlv>
 8010ae2:	4603      	mov	r3, r0
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d007      	beq.n	8010af8 <snmp_parse_inbound_frame+0x368>
 8010ae8:	4b7a      	ldr	r3, [pc, #488]	@ (8010cd4 <snmp_parse_inbound_frame+0x544>)
 8010aea:	695b      	ldr	r3, [r3, #20]
 8010aec:	3301      	adds	r3, #1
 8010aee:	4a79      	ldr	r2, [pc, #484]	@ (8010cd4 <snmp_parse_inbound_frame+0x544>)
 8010af0:	6153      	str	r3, [r2, #20]
 8010af2:	f06f 030f 	mvn.w	r3, #15
 8010af6:	e153      	b.n	8010da0 <snmp_parse_inbound_frame+0x610>
  IF_PARSE_ASSERT(tlv.type == SNMP_ASN1_TYPE_INTEGER);
 8010af8:	7c3b      	ldrb	r3, [r7, #16]
 8010afa:	2b02      	cmp	r3, #2
 8010afc:	d007      	beq.n	8010b0e <snmp_parse_inbound_frame+0x37e>
 8010afe:	4b75      	ldr	r3, [pc, #468]	@ (8010cd4 <snmp_parse_inbound_frame+0x544>)
 8010b00:	695b      	ldr	r3, [r3, #20]
 8010b02:	3301      	adds	r3, #1
 8010b04:	4a73      	ldr	r2, [pc, #460]	@ (8010cd4 <snmp_parse_inbound_frame+0x544>)
 8010b06:	6153      	str	r3, [r2, #20]
 8010b08:	f06f 030f 	mvn.w	r3, #15
 8010b0c:	e148      	b.n	8010da0 <snmp_parse_inbound_frame+0x610>
  parent_tlv_value_len -= SNMP_ASN1_TLV_LENGTH(tlv);
 8010b0e:	7c7b      	ldrb	r3, [r7, #17]
 8010b10:	461a      	mov	r2, r3
 8010b12:	7cbb      	ldrb	r3, [r7, #18]
 8010b14:	4413      	add	r3, r2
 8010b16:	8aba      	ldrh	r2, [r7, #20]
 8010b18:	4413      	add	r3, r2
 8010b1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010b1c:	1ad3      	subs	r3, r2, r3
 8010b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  IF_PARSE_ASSERT(parent_tlv_value_len > 0);
 8010b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	dc07      	bgt.n	8010b36 <snmp_parse_inbound_frame+0x3a6>
 8010b26:	4b6b      	ldr	r3, [pc, #428]	@ (8010cd4 <snmp_parse_inbound_frame+0x544>)
 8010b28:	695b      	ldr	r3, [r3, #20]
 8010b2a:	3301      	adds	r3, #1
 8010b2c:	4a69      	ldr	r2, [pc, #420]	@ (8010cd4 <snmp_parse_inbound_frame+0x544>)
 8010b2e:	6153      	str	r3, [r2, #20]
 8010b30:	f06f 030f 	mvn.w	r3, #15
 8010b34:	e134      	b.n	8010da0 <snmp_parse_inbound_frame+0x610>
  
  IF_PARSE_EXEC(snmp_asn1_dec_s32t(&pbuf_stream, tlv.value_len, &request->request_id));
 8010b36:	8ab9      	ldrh	r1, [r7, #20]
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f103 0218 	add.w	r2, r3, #24
 8010b3e:	f107 0318 	add.w	r3, r7, #24
 8010b42:	4618      	mov	r0, r3
 8010b44:	f7fb ff56 	bl	800c9f4 <snmp_asn1_dec_s32t>
 8010b48:	4603      	mov	r3, r0
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d007      	beq.n	8010b5e <snmp_parse_inbound_frame+0x3ce>
 8010b4e:	4b61      	ldr	r3, [pc, #388]	@ (8010cd4 <snmp_parse_inbound_frame+0x544>)
 8010b50:	695b      	ldr	r3, [r3, #20]
 8010b52:	3301      	adds	r3, #1
 8010b54:	4a5f      	ldr	r2, [pc, #380]	@ (8010cd4 <snmp_parse_inbound_frame+0x544>)
 8010b56:	6153      	str	r3, [r2, #20]
 8010b58:	f06f 030f 	mvn.w	r3, #15
 8010b5c:	e120      	b.n	8010da0 <snmp_parse_inbound_frame+0x610>

  /* decode error status / non-repeaters */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 8010b5e:	f107 0210 	add.w	r2, r7, #16
 8010b62:	f107 0318 	add.w	r3, r7, #24
 8010b66:	4611      	mov	r1, r2
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f7fb fe0b 	bl	800c784 <snmp_asn1_dec_tlv>
 8010b6e:	4603      	mov	r3, r0
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d007      	beq.n	8010b84 <snmp_parse_inbound_frame+0x3f4>
 8010b74:	4b57      	ldr	r3, [pc, #348]	@ (8010cd4 <snmp_parse_inbound_frame+0x544>)
 8010b76:	695b      	ldr	r3, [r3, #20]
 8010b78:	3301      	adds	r3, #1
 8010b7a:	4a56      	ldr	r2, [pc, #344]	@ (8010cd4 <snmp_parse_inbound_frame+0x544>)
 8010b7c:	6153      	str	r3, [r2, #20]
 8010b7e:	f06f 030f 	mvn.w	r3, #15
 8010b82:	e10d      	b.n	8010da0 <snmp_parse_inbound_frame+0x610>
  IF_PARSE_ASSERT(tlv.type == SNMP_ASN1_TYPE_INTEGER);
 8010b84:	7c3b      	ldrb	r3, [r7, #16]
 8010b86:	2b02      	cmp	r3, #2
 8010b88:	d007      	beq.n	8010b9a <snmp_parse_inbound_frame+0x40a>
 8010b8a:	4b52      	ldr	r3, [pc, #328]	@ (8010cd4 <snmp_parse_inbound_frame+0x544>)
 8010b8c:	695b      	ldr	r3, [r3, #20]
 8010b8e:	3301      	adds	r3, #1
 8010b90:	4a50      	ldr	r2, [pc, #320]	@ (8010cd4 <snmp_parse_inbound_frame+0x544>)
 8010b92:	6153      	str	r3, [r2, #20]
 8010b94:	f06f 030f 	mvn.w	r3, #15
 8010b98:	e102      	b.n	8010da0 <snmp_parse_inbound_frame+0x610>
  parent_tlv_value_len -= SNMP_ASN1_TLV_LENGTH(tlv);
 8010b9a:	7c7b      	ldrb	r3, [r7, #17]
 8010b9c:	461a      	mov	r2, r3
 8010b9e:	7cbb      	ldrb	r3, [r7, #18]
 8010ba0:	4413      	add	r3, r2
 8010ba2:	8aba      	ldrh	r2, [r7, #20]
 8010ba4:	4413      	add	r3, r2
 8010ba6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010ba8:	1ad3      	subs	r3, r2, r3
 8010baa:	627b      	str	r3, [r7, #36]	@ 0x24
  IF_PARSE_ASSERT(parent_tlv_value_len > 0);
 8010bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	dc07      	bgt.n	8010bc2 <snmp_parse_inbound_frame+0x432>
 8010bb2:	4b48      	ldr	r3, [pc, #288]	@ (8010cd4 <snmp_parse_inbound_frame+0x544>)
 8010bb4:	695b      	ldr	r3, [r3, #20]
 8010bb6:	3301      	adds	r3, #1
 8010bb8:	4a46      	ldr	r2, [pc, #280]	@ (8010cd4 <snmp_parse_inbound_frame+0x544>)
 8010bba:	6153      	str	r3, [r2, #20]
 8010bbc:	f06f 030f 	mvn.w	r3, #15
 8010bc0:	e0ee      	b.n	8010da0 <snmp_parse_inbound_frame+0x610>

  if (request->request_type == SNMP_ASN1_CONTEXT_PDU_GET_BULK_REQ) {
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	7d9b      	ldrb	r3, [r3, #22]
 8010bc6:	2b05      	cmp	r3, #5
 8010bc8:	d11b      	bne.n	8010c02 <snmp_parse_inbound_frame+0x472>
    IF_PARSE_EXEC(snmp_asn1_dec_s32t(&pbuf_stream, tlv.value_len, &request->non_repeaters));
 8010bca:	8ab9      	ldrh	r1, [r7, #20]
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8010bd2:	f107 0318 	add.w	r3, r7, #24
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	f7fb ff0c 	bl	800c9f4 <snmp_asn1_dec_s32t>
 8010bdc:	4603      	mov	r3, r0
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d007      	beq.n	8010bf2 <snmp_parse_inbound_frame+0x462>
 8010be2:	4b3c      	ldr	r3, [pc, #240]	@ (8010cd4 <snmp_parse_inbound_frame+0x544>)
 8010be4:	695b      	ldr	r3, [r3, #20]
 8010be6:	3301      	adds	r3, #1
 8010be8:	4a3a      	ldr	r2, [pc, #232]	@ (8010cd4 <snmp_parse_inbound_frame+0x544>)
 8010bea:	6153      	str	r3, [r2, #20]
 8010bec:	f06f 030f 	mvn.w	r3, #15
 8010bf0:	e0d6      	b.n	8010da0 <snmp_parse_inbound_frame+0x610>
    if (request->non_repeaters < 0) {
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	da21      	bge.n	8010c3e <snmp_parse_inbound_frame+0x4ae>
      /* RFC 1905, 4.2.3 */
      request->non_repeaters = 0;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	2200      	movs	r2, #0
 8010bfe:	625a      	str	r2, [r3, #36]	@ 0x24
 8010c00:	e01d      	b.n	8010c3e <snmp_parse_inbound_frame+0x4ae>
    }
  } else {
    /* only check valid value, don't touch 'request->error_status', maybe a response error status was already set to above; */
    IF_PARSE_EXEC(snmp_asn1_dec_s32t(&pbuf_stream, tlv.value_len, &s32_value));
 8010c02:	8ab9      	ldrh	r1, [r7, #20]
 8010c04:	f107 020c 	add.w	r2, r7, #12
 8010c08:	f107 0318 	add.w	r3, r7, #24
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	f7fb fef1 	bl	800c9f4 <snmp_asn1_dec_s32t>
 8010c12:	4603      	mov	r3, r0
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d007      	beq.n	8010c28 <snmp_parse_inbound_frame+0x498>
 8010c18:	4b2e      	ldr	r3, [pc, #184]	@ (8010cd4 <snmp_parse_inbound_frame+0x544>)
 8010c1a:	695b      	ldr	r3, [r3, #20]
 8010c1c:	3301      	adds	r3, #1
 8010c1e:	4a2d      	ldr	r2, [pc, #180]	@ (8010cd4 <snmp_parse_inbound_frame+0x544>)
 8010c20:	6153      	str	r3, [r2, #20]
 8010c22:	f06f 030f 	mvn.w	r3, #15
 8010c26:	e0bb      	b.n	8010da0 <snmp_parse_inbound_frame+0x610>
    IF_PARSE_ASSERT(s32_value == SNMP_ERR_NOERROR);
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d007      	beq.n	8010c3e <snmp_parse_inbound_frame+0x4ae>
 8010c2e:	4b29      	ldr	r3, [pc, #164]	@ (8010cd4 <snmp_parse_inbound_frame+0x544>)
 8010c30:	695b      	ldr	r3, [r3, #20]
 8010c32:	3301      	adds	r3, #1
 8010c34:	4a27      	ldr	r2, [pc, #156]	@ (8010cd4 <snmp_parse_inbound_frame+0x544>)
 8010c36:	6153      	str	r3, [r2, #20]
 8010c38:	f06f 030f 	mvn.w	r3, #15
 8010c3c:	e0b0      	b.n	8010da0 <snmp_parse_inbound_frame+0x610>
  }

  /* decode error index / max-repetitions */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 8010c3e:	f107 0210 	add.w	r2, r7, #16
 8010c42:	f107 0318 	add.w	r3, r7, #24
 8010c46:	4611      	mov	r1, r2
 8010c48:	4618      	mov	r0, r3
 8010c4a:	f7fb fd9b 	bl	800c784 <snmp_asn1_dec_tlv>
 8010c4e:	4603      	mov	r3, r0
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d007      	beq.n	8010c64 <snmp_parse_inbound_frame+0x4d4>
 8010c54:	4b1f      	ldr	r3, [pc, #124]	@ (8010cd4 <snmp_parse_inbound_frame+0x544>)
 8010c56:	695b      	ldr	r3, [r3, #20]
 8010c58:	3301      	adds	r3, #1
 8010c5a:	4a1e      	ldr	r2, [pc, #120]	@ (8010cd4 <snmp_parse_inbound_frame+0x544>)
 8010c5c:	6153      	str	r3, [r2, #20]
 8010c5e:	f06f 030f 	mvn.w	r3, #15
 8010c62:	e09d      	b.n	8010da0 <snmp_parse_inbound_frame+0x610>
  IF_PARSE_ASSERT(tlv.type == SNMP_ASN1_TYPE_INTEGER);
 8010c64:	7c3b      	ldrb	r3, [r7, #16]
 8010c66:	2b02      	cmp	r3, #2
 8010c68:	d007      	beq.n	8010c7a <snmp_parse_inbound_frame+0x4ea>
 8010c6a:	4b1a      	ldr	r3, [pc, #104]	@ (8010cd4 <snmp_parse_inbound_frame+0x544>)
 8010c6c:	695b      	ldr	r3, [r3, #20]
 8010c6e:	3301      	adds	r3, #1
 8010c70:	4a18      	ldr	r2, [pc, #96]	@ (8010cd4 <snmp_parse_inbound_frame+0x544>)
 8010c72:	6153      	str	r3, [r2, #20]
 8010c74:	f06f 030f 	mvn.w	r3, #15
 8010c78:	e092      	b.n	8010da0 <snmp_parse_inbound_frame+0x610>
  parent_tlv_value_len -= SNMP_ASN1_TLV_LENGTH(tlv);
 8010c7a:	7c7b      	ldrb	r3, [r7, #17]
 8010c7c:	461a      	mov	r2, r3
 8010c7e:	7cbb      	ldrb	r3, [r7, #18]
 8010c80:	4413      	add	r3, r2
 8010c82:	8aba      	ldrh	r2, [r7, #20]
 8010c84:	4413      	add	r3, r2
 8010c86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010c88:	1ad3      	subs	r3, r2, r3
 8010c8a:	627b      	str	r3, [r7, #36]	@ 0x24
  IF_PARSE_ASSERT(parent_tlv_value_len > 0);
 8010c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	dc07      	bgt.n	8010ca2 <snmp_parse_inbound_frame+0x512>
 8010c92:	4b10      	ldr	r3, [pc, #64]	@ (8010cd4 <snmp_parse_inbound_frame+0x544>)
 8010c94:	695b      	ldr	r3, [r3, #20]
 8010c96:	3301      	adds	r3, #1
 8010c98:	4a0e      	ldr	r2, [pc, #56]	@ (8010cd4 <snmp_parse_inbound_frame+0x544>)
 8010c9a:	6153      	str	r3, [r2, #20]
 8010c9c:	f06f 030f 	mvn.w	r3, #15
 8010ca0:	e07e      	b.n	8010da0 <snmp_parse_inbound_frame+0x610>

  if (request->request_type == SNMP_ASN1_CONTEXT_PDU_GET_BULK_REQ) {
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	7d9b      	ldrb	r3, [r3, #22]
 8010ca6:	2b05      	cmp	r3, #5
 8010ca8:	d122      	bne.n	8010cf0 <snmp_parse_inbound_frame+0x560>
    IF_PARSE_EXEC(snmp_asn1_dec_s32t(&pbuf_stream, tlv.value_len, &request->max_repetitions));
 8010caa:	8ab9      	ldrh	r1, [r7, #20]
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8010cb2:	f107 0318 	add.w	r3, r7, #24
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	f7fb fe9c 	bl	800c9f4 <snmp_asn1_dec_s32t>
 8010cbc:	4603      	mov	r3, r0
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d00e      	beq.n	8010ce0 <snmp_parse_inbound_frame+0x550>
 8010cc2:	4b04      	ldr	r3, [pc, #16]	@ (8010cd4 <snmp_parse_inbound_frame+0x544>)
 8010cc4:	695b      	ldr	r3, [r3, #20]
 8010cc6:	3301      	adds	r3, #1
 8010cc8:	4a02      	ldr	r2, [pc, #8]	@ (8010cd4 <snmp_parse_inbound_frame+0x544>)
 8010cca:	6153      	str	r3, [r2, #20]
 8010ccc:	f06f 030f 	mvn.w	r3, #15
 8010cd0:	e066      	b.n	8010da0 <snmp_parse_inbound_frame+0x610>
 8010cd2:	bf00      	nop
 8010cd4:	2000a4e4 	.word	0x2000a4e4
 8010cd8:	20000108 	.word	0x20000108
 8010cdc:	20000104 	.word	0x20000104
    if (request->max_repetitions < 0) {
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	da22      	bge.n	8010d2e <snmp_parse_inbound_frame+0x59e>
      /* RFC 1905, 4.2.3 */
      request->max_repetitions = 0;
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	2200      	movs	r2, #0
 8010cec:	629a      	str	r2, [r3, #40]	@ 0x28
 8010cee:	e01e      	b.n	8010d2e <snmp_parse_inbound_frame+0x59e>
    }
  } else {
    IF_PARSE_EXEC(snmp_asn1_dec_s32t(&pbuf_stream, tlv.value_len, &request->error_index));
 8010cf0:	8ab9      	ldrh	r1, [r7, #20]
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	f103 0220 	add.w	r2, r3, #32
 8010cf8:	f107 0318 	add.w	r3, r7, #24
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	f7fb fe79 	bl	800c9f4 <snmp_asn1_dec_s32t>
 8010d02:	4603      	mov	r3, r0
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d007      	beq.n	8010d18 <snmp_parse_inbound_frame+0x588>
 8010d08:	4b27      	ldr	r3, [pc, #156]	@ (8010da8 <snmp_parse_inbound_frame+0x618>)
 8010d0a:	695b      	ldr	r3, [r3, #20]
 8010d0c:	3301      	adds	r3, #1
 8010d0e:	4a26      	ldr	r2, [pc, #152]	@ (8010da8 <snmp_parse_inbound_frame+0x618>)
 8010d10:	6153      	str	r3, [r2, #20]
 8010d12:	f06f 030f 	mvn.w	r3, #15
 8010d16:	e043      	b.n	8010da0 <snmp_parse_inbound_frame+0x610>
    IF_PARSE_ASSERT(s32_value == 0);
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d007      	beq.n	8010d2e <snmp_parse_inbound_frame+0x59e>
 8010d1e:	4b22      	ldr	r3, [pc, #136]	@ (8010da8 <snmp_parse_inbound_frame+0x618>)
 8010d20:	695b      	ldr	r3, [r3, #20]
 8010d22:	3301      	adds	r3, #1
 8010d24:	4a20      	ldr	r2, [pc, #128]	@ (8010da8 <snmp_parse_inbound_frame+0x618>)
 8010d26:	6153      	str	r3, [r2, #20]
 8010d28:	f06f 030f 	mvn.w	r3, #15
 8010d2c:	e038      	b.n	8010da0 <snmp_parse_inbound_frame+0x610>
  }

  /* decode varbind-list type (next container level) */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 8010d2e:	f107 0210 	add.w	r2, r7, #16
 8010d32:	f107 0318 	add.w	r3, r7, #24
 8010d36:	4611      	mov	r1, r2
 8010d38:	4618      	mov	r0, r3
 8010d3a:	f7fb fd23 	bl	800c784 <snmp_asn1_dec_tlv>
 8010d3e:	4603      	mov	r3, r0
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d007      	beq.n	8010d54 <snmp_parse_inbound_frame+0x5c4>
 8010d44:	4b18      	ldr	r3, [pc, #96]	@ (8010da8 <snmp_parse_inbound_frame+0x618>)
 8010d46:	695b      	ldr	r3, [r3, #20]
 8010d48:	3301      	adds	r3, #1
 8010d4a:	4a17      	ldr	r2, [pc, #92]	@ (8010da8 <snmp_parse_inbound_frame+0x618>)
 8010d4c:	6153      	str	r3, [r2, #20]
 8010d4e:	f06f 030f 	mvn.w	r3, #15
 8010d52:	e025      	b.n	8010da0 <snmp_parse_inbound_frame+0x610>
  IF_PARSE_ASSERT((tlv.type == SNMP_ASN1_TYPE_SEQUENCE) && (tlv.value_len <= pbuf_stream.length));
 8010d54:	7c3b      	ldrb	r3, [r7, #16]
 8010d56:	2b30      	cmp	r3, #48	@ 0x30
 8010d58:	d103      	bne.n	8010d62 <snmp_parse_inbound_frame+0x5d2>
 8010d5a:	8aba      	ldrh	r2, [r7, #20]
 8010d5c:	8bfb      	ldrh	r3, [r7, #30]
 8010d5e:	429a      	cmp	r2, r3
 8010d60:	d907      	bls.n	8010d72 <snmp_parse_inbound_frame+0x5e2>
 8010d62:	4b11      	ldr	r3, [pc, #68]	@ (8010da8 <snmp_parse_inbound_frame+0x618>)
 8010d64:	695b      	ldr	r3, [r3, #20]
 8010d66:	3301      	adds	r3, #1
 8010d68:	4a0f      	ldr	r2, [pc, #60]	@ (8010da8 <snmp_parse_inbound_frame+0x618>)
 8010d6a:	6153      	str	r3, [r2, #20]
 8010d6c:	f06f 030f 	mvn.w	r3, #15
 8010d70:	e016      	b.n	8010da0 <snmp_parse_inbound_frame+0x610>
  
  request->inbound_varbind_offset = pbuf_stream.offset;
 8010d72:	8bba      	ldrh	r2, [r7, #28]
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	879a      	strh	r2, [r3, #60]	@ 0x3c
  request->inbound_varbind_len    = pbuf_stream.length - request->inbound_padding_len;
 8010d78:	8bfa      	ldrh	r2, [r7, #30]
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8010d80:	1ad3      	subs	r3, r2, r3
 8010d82:	b29a      	uxth	r2, r3
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	87da      	strh	r2, [r3, #62]	@ 0x3e
  snmp_vb_enumerator_init(&(request->inbound_varbind_enumerator), request->inbound_pbuf, request->inbound_varbind_offset, request->inbound_varbind_len);
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8010d9a:	f000 fdab 	bl	80118f4 <snmp_vb_enumerator_init>

  return ERR_OK;
 8010d9e:	2300      	movs	r3, #0
}
 8010da0:	4618      	mov	r0, r3
 8010da2:	372c      	adds	r7, #44	@ 0x2c
 8010da4:	46bd      	mov	sp, r7
 8010da6:	bd90      	pop	{r4, r7, pc}
 8010da8:	2000a4e4 	.word	0x2000a4e4

08010dac <snmp_prepare_outbound_frame>:

#define OF_BUILD_EXEC(code) BUILD_EXEC(code, ERR_ARG)

static err_t
snmp_prepare_outbound_frame(struct snmp_request *request)
{
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b086      	sub	sp, #24
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
  struct snmp_asn1_tlv tlv;
  struct snmp_pbuf_stream* pbuf_stream = &(request->outbound_pbuf_stream);
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	3348      	adds	r3, #72	@ 0x48
 8010db8:	617b      	str	r3, [r7, #20]

  /* try allocating pbuf(s) for maximum response size */
  request->outbound_pbuf = pbuf_alloc(PBUF_TRANSPORT, 1472, PBUF_RAM);
 8010dba:	2200      	movs	r2, #0
 8010dbc:	f44f 61b8 	mov.w	r1, #1472	@ 0x5c0
 8010dc0:	2000      	movs	r0, #0
 8010dc2:	f003 f80d 	bl	8013de0 <pbuf_alloc>
 8010dc6:	4602      	mov	r2, r0
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	645a      	str	r2, [r3, #68]	@ 0x44
  if (request->outbound_pbuf == NULL) {
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d102      	bne.n	8010dda <snmp_prepare_outbound_frame+0x2e>
    return ERR_MEM;
 8010dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8010dd8:	e10e      	b.n	8010ff8 <snmp_prepare_outbound_frame+0x24c>
  }

  snmp_pbuf_stream_init(pbuf_stream, request->outbound_pbuf, 0, request->outbound_pbuf->tot_len);
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010de2:	891b      	ldrh	r3, [r3, #8]
 8010de4:	2200      	movs	r2, #0
 8010de6:	6978      	ldr	r0, [r7, #20]
 8010de8:	f000 ffaa 	bl	8011d40 <snmp_pbuf_stream_init>

  /* 'Message' sequence */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_SEQUENCE, 3, 0);
 8010dec:	2330      	movs	r3, #48	@ 0x30
 8010dee:	733b      	strb	r3, [r7, #12]
 8010df0:	2300      	movs	r3, #0
 8010df2:	737b      	strb	r3, [r7, #13]
 8010df4:	2303      	movs	r3, #3
 8010df6:	73bb      	strb	r3, [r7, #14]
 8010df8:	2300      	movs	r3, #0
 8010dfa:	823b      	strh	r3, [r7, #16]
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 8010dfc:	f107 030c 	add.w	r3, r7, #12
 8010e00:	4619      	mov	r1, r3
 8010e02:	6978      	ldr	r0, [r7, #20]
 8010e04:	f7fb f9fc 	bl	800c200 <snmp_ans1_enc_tlv>
 8010e08:	4603      	mov	r3, r0
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d002      	beq.n	8010e14 <snmp_prepare_outbound_frame+0x68>
 8010e0e:	f06f 030f 	mvn.w	r3, #15
 8010e12:	e0f1      	b.n	8010ff8 <snmp_prepare_outbound_frame+0x24c>

  /* version */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_INTEGER, 0, 0);
 8010e14:	2302      	movs	r3, #2
 8010e16:	733b      	strb	r3, [r7, #12]
 8010e18:	2300      	movs	r3, #0
 8010e1a:	737b      	strb	r3, [r7, #13]
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	73bb      	strb	r3, [r7, #14]
 8010e20:	2300      	movs	r3, #0
 8010e22:	823b      	strh	r3, [r7, #16]
  snmp_asn1_enc_s32t_cnt(request->version, &tlv.value_len);
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	7a9b      	ldrb	r3, [r3, #10]
 8010e28:	461a      	mov	r2, r3
 8010e2a:	f107 030c 	add.w	r3, r7, #12
 8010e2e:	3304      	adds	r3, #4
 8010e30:	4619      	mov	r1, r3
 8010e32:	4610      	mov	r0, r2
 8010e34:	f7fb fc3a 	bl	800c6ac <snmp_asn1_enc_s32t_cnt>
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 8010e38:	f107 030c 	add.w	r3, r7, #12
 8010e3c:	4619      	mov	r1, r3
 8010e3e:	6978      	ldr	r0, [r7, #20]
 8010e40:	f7fb f9de 	bl	800c200 <snmp_ans1_enc_tlv>
 8010e44:	4603      	mov	r3, r0
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d002      	beq.n	8010e50 <snmp_prepare_outbound_frame+0xa4>
 8010e4a:	f06f 030f 	mvn.w	r3, #15
 8010e4e:	e0d3      	b.n	8010ff8 <snmp_prepare_outbound_frame+0x24c>
  OF_BUILD_EXEC( snmp_asn1_enc_s32t(pbuf_stream, tlv.value_len, request->version) );
 8010e50:	8a39      	ldrh	r1, [r7, #16]
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	7a9b      	ldrb	r3, [r3, #10]
 8010e56:	461a      	mov	r2, r3
 8010e58:	6978      	ldr	r0, [r7, #20]
 8010e5a:	f7fb fb1c 	bl	800c496 <snmp_asn1_enc_s32t>
 8010e5e:	4603      	mov	r3, r0
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d002      	beq.n	8010e6a <snmp_prepare_outbound_frame+0xbe>
 8010e64:	f06f 030f 	mvn.w	r3, #15
 8010e68:	e0c6      	b.n	8010ff8 <snmp_prepare_outbound_frame+0x24c>

#if LWIP_SNMP_V3
  if (request->version < SNMP_VERSION_3) {
#endif
  /* community */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_OCTET_STRING, 0, request->community_strlen);
 8010e6a:	2304      	movs	r3, #4
 8010e6c:	733b      	strb	r3, [r7, #12]
 8010e6e:	2300      	movs	r3, #0
 8010e70:	737b      	strb	r3, [r7, #13]
 8010e72:	2300      	movs	r3, #0
 8010e74:	73bb      	strb	r3, [r7, #14]
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	8a9b      	ldrh	r3, [r3, #20]
 8010e7a:	823b      	strh	r3, [r7, #16]
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 8010e7c:	f107 030c 	add.w	r3, r7, #12
 8010e80:	4619      	mov	r1, r3
 8010e82:	6978      	ldr	r0, [r7, #20]
 8010e84:	f7fb f9bc 	bl	800c200 <snmp_ans1_enc_tlv>
 8010e88:	4603      	mov	r3, r0
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d002      	beq.n	8010e94 <snmp_prepare_outbound_frame+0xe8>
 8010e8e:	f06f 030f 	mvn.w	r3, #15
 8010e92:	e0b1      	b.n	8010ff8 <snmp_prepare_outbound_frame+0x24c>
  OF_BUILD_EXEC( snmp_asn1_enc_raw(pbuf_stream, request->community, request->community_strlen) );
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	f103 010b 	add.w	r1, r3, #11
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	8a9b      	ldrh	r3, [r3, #20]
 8010e9e:	461a      	mov	r2, r3
 8010ea0:	6978      	ldr	r0, [r7, #20]
 8010ea2:	f7fb fa38 	bl	800c316 <snmp_asn1_enc_raw>
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d002      	beq.n	8010eb2 <snmp_prepare_outbound_frame+0x106>
 8010eac:	f06f 030f 	mvn.w	r3, #15
 8010eb0:	e0a2      	b.n	8010ff8 <snmp_prepare_outbound_frame+0x24c>
    OF_BUILD_EXEC(snmp_asn1_enc_raw(pbuf_stream, request->context_name, request->context_name_len));
  }
#endif

  /* 'PDU' sequence */
  request->outbound_pdu_offset = pbuf_stream->offset;
 8010eb2:	697b      	ldr	r3, [r7, #20]
 8010eb4:	889a      	ldrh	r2, [r3, #4]
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  SNMP_ASN1_SET_TLV_PARAMS(tlv, (SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTENTTYPE_CONSTRUCTED | SNMP_ASN1_CONTEXT_PDU_GET_RESP), 3, 0);
 8010ebc:	23a2      	movs	r3, #162	@ 0xa2
 8010ebe:	733b      	strb	r3, [r7, #12]
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	737b      	strb	r3, [r7, #13]
 8010ec4:	2303      	movs	r3, #3
 8010ec6:	73bb      	strb	r3, [r7, #14]
 8010ec8:	2300      	movs	r3, #0
 8010eca:	823b      	strh	r3, [r7, #16]
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 8010ecc:	f107 030c 	add.w	r3, r7, #12
 8010ed0:	4619      	mov	r1, r3
 8010ed2:	6978      	ldr	r0, [r7, #20]
 8010ed4:	f7fb f994 	bl	800c200 <snmp_ans1_enc_tlv>
 8010ed8:	4603      	mov	r3, r0
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d002      	beq.n	8010ee4 <snmp_prepare_outbound_frame+0x138>
 8010ede:	f06f 030f 	mvn.w	r3, #15
 8010ee2:	e089      	b.n	8010ff8 <snmp_prepare_outbound_frame+0x24c>

  /* request ID */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_INTEGER, 0, 0);
 8010ee4:	2302      	movs	r3, #2
 8010ee6:	733b      	strb	r3, [r7, #12]
 8010ee8:	2300      	movs	r3, #0
 8010eea:	737b      	strb	r3, [r7, #13]
 8010eec:	2300      	movs	r3, #0
 8010eee:	73bb      	strb	r3, [r7, #14]
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	823b      	strh	r3, [r7, #16]
  snmp_asn1_enc_s32t_cnt(request->request_id, &tlv.value_len);
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	699a      	ldr	r2, [r3, #24]
 8010ef8:	f107 030c 	add.w	r3, r7, #12
 8010efc:	3304      	adds	r3, #4
 8010efe:	4619      	mov	r1, r3
 8010f00:	4610      	mov	r0, r2
 8010f02:	f7fb fbd3 	bl	800c6ac <snmp_asn1_enc_s32t_cnt>
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 8010f06:	f107 030c 	add.w	r3, r7, #12
 8010f0a:	4619      	mov	r1, r3
 8010f0c:	6978      	ldr	r0, [r7, #20]
 8010f0e:	f7fb f977 	bl	800c200 <snmp_ans1_enc_tlv>
 8010f12:	4603      	mov	r3, r0
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d002      	beq.n	8010f1e <snmp_prepare_outbound_frame+0x172>
 8010f18:	f06f 030f 	mvn.w	r3, #15
 8010f1c:	e06c      	b.n	8010ff8 <snmp_prepare_outbound_frame+0x24c>
  OF_BUILD_EXEC( snmp_asn1_enc_s32t(pbuf_stream, tlv.value_len, request->request_id) );
 8010f1e:	8a39      	ldrh	r1, [r7, #16]
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	699b      	ldr	r3, [r3, #24]
 8010f24:	461a      	mov	r2, r3
 8010f26:	6978      	ldr	r0, [r7, #20]
 8010f28:	f7fb fab5 	bl	800c496 <snmp_asn1_enc_s32t>
 8010f2c:	4603      	mov	r3, r0
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d002      	beq.n	8010f38 <snmp_prepare_outbound_frame+0x18c>
 8010f32:	f06f 030f 	mvn.w	r3, #15
 8010f36:	e05f      	b.n	8010ff8 <snmp_prepare_outbound_frame+0x24c>

  /* error status */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_INTEGER, 0, 1);
 8010f38:	2302      	movs	r3, #2
 8010f3a:	733b      	strb	r3, [r7, #12]
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	737b      	strb	r3, [r7, #13]
 8010f40:	2300      	movs	r3, #0
 8010f42:	73bb      	strb	r3, [r7, #14]
 8010f44:	2301      	movs	r3, #1
 8010f46:	823b      	strh	r3, [r7, #16]
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 8010f48:	f107 030c 	add.w	r3, r7, #12
 8010f4c:	4619      	mov	r1, r3
 8010f4e:	6978      	ldr	r0, [r7, #20]
 8010f50:	f7fb f956 	bl	800c200 <snmp_ans1_enc_tlv>
 8010f54:	4603      	mov	r3, r0
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d002      	beq.n	8010f60 <snmp_prepare_outbound_frame+0x1b4>
 8010f5a:	f06f 030f 	mvn.w	r3, #15
 8010f5e:	e04b      	b.n	8010ff8 <snmp_prepare_outbound_frame+0x24c>
  request->outbound_error_status_offset = pbuf_stream->offset;
 8010f60:	697b      	ldr	r3, [r7, #20]
 8010f62:	889a      	ldrh	r2, [r3, #4]
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  OF_BUILD_EXEC( snmp_pbuf_stream_write(pbuf_stream, 0) );
 8010f6a:	2100      	movs	r1, #0
 8010f6c:	6978      	ldr	r0, [r7, #20]
 8010f6e:	f000 ff2c 	bl	8011dca <snmp_pbuf_stream_write>
 8010f72:	4603      	mov	r3, r0
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d002      	beq.n	8010f7e <snmp_prepare_outbound_frame+0x1d2>
 8010f78:	f06f 030f 	mvn.w	r3, #15
 8010f7c:	e03c      	b.n	8010ff8 <snmp_prepare_outbound_frame+0x24c>

  /* error index */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_INTEGER, 0, 1);
 8010f7e:	2302      	movs	r3, #2
 8010f80:	733b      	strb	r3, [r7, #12]
 8010f82:	2300      	movs	r3, #0
 8010f84:	737b      	strb	r3, [r7, #13]
 8010f86:	2300      	movs	r3, #0
 8010f88:	73bb      	strb	r3, [r7, #14]
 8010f8a:	2301      	movs	r3, #1
 8010f8c:	823b      	strh	r3, [r7, #16]
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 8010f8e:	f107 030c 	add.w	r3, r7, #12
 8010f92:	4619      	mov	r1, r3
 8010f94:	6978      	ldr	r0, [r7, #20]
 8010f96:	f7fb f933 	bl	800c200 <snmp_ans1_enc_tlv>
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d002      	beq.n	8010fa6 <snmp_prepare_outbound_frame+0x1fa>
 8010fa0:	f06f 030f 	mvn.w	r3, #15
 8010fa4:	e028      	b.n	8010ff8 <snmp_prepare_outbound_frame+0x24c>
  request->outbound_error_index_offset = pbuf_stream->offset;
 8010fa6:	697b      	ldr	r3, [r7, #20]
 8010fa8:	889a      	ldrh	r2, [r3, #4]
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  OF_BUILD_EXEC( snmp_pbuf_stream_write(pbuf_stream, 0) );
 8010fb0:	2100      	movs	r1, #0
 8010fb2:	6978      	ldr	r0, [r7, #20]
 8010fb4:	f000 ff09 	bl	8011dca <snmp_pbuf_stream_write>
 8010fb8:	4603      	mov	r3, r0
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d002      	beq.n	8010fc4 <snmp_prepare_outbound_frame+0x218>
 8010fbe:	f06f 030f 	mvn.w	r3, #15
 8010fc2:	e019      	b.n	8010ff8 <snmp_prepare_outbound_frame+0x24c>

  /* 'VarBindList' sequence */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_SEQUENCE, 3, 0);
 8010fc4:	2330      	movs	r3, #48	@ 0x30
 8010fc6:	733b      	strb	r3, [r7, #12]
 8010fc8:	2300      	movs	r3, #0
 8010fca:	737b      	strb	r3, [r7, #13]
 8010fcc:	2303      	movs	r3, #3
 8010fce:	73bb      	strb	r3, [r7, #14]
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	823b      	strh	r3, [r7, #16]
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 8010fd4:	f107 030c 	add.w	r3, r7, #12
 8010fd8:	4619      	mov	r1, r3
 8010fda:	6978      	ldr	r0, [r7, #20]
 8010fdc:	f7fb f910 	bl	800c200 <snmp_ans1_enc_tlv>
 8010fe0:	4603      	mov	r3, r0
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d002      	beq.n	8010fec <snmp_prepare_outbound_frame+0x240>
 8010fe6:	f06f 030f 	mvn.w	r3, #15
 8010fea:	e005      	b.n	8010ff8 <snmp_prepare_outbound_frame+0x24c>

  request->outbound_varbind_offset = pbuf_stream->offset;
 8010fec:	697b      	ldr	r3, [r7, #20]
 8010fee:	889a      	ldrh	r2, [r3, #4]
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

  return ERR_OK;
 8010ff6:	2300      	movs	r3, #0
}
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	3718      	adds	r7, #24
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	bd80      	pop	{r7, pc}

08011000 <snmp_varbind_length>:

/** Calculate the length of a varbind list */
err_t
snmp_varbind_length(struct snmp_varbind *varbind, struct snmp_varbind_len *len)
{
 8011000:	b580      	push	{r7, lr}
 8011002:	b082      	sub	sp, #8
 8011004:	af00      	add	r7, sp, #0
 8011006:	6078      	str	r0, [r7, #4]
 8011008:	6039      	str	r1, [r7, #0]
  /* calculate required lengths */
  snmp_asn1_enc_oid_cnt(varbind->oid.id, varbind->oid.len, &len->oid_value_len);
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	f103 000c 	add.w	r0, r3, #12
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	7a1b      	ldrb	r3, [r3, #8]
 8011014:	4619      	mov	r1, r3
 8011016:	683b      	ldr	r3, [r7, #0]
 8011018:	3306      	adds	r3, #6
 801101a:	461a      	mov	r2, r3
 801101c:	f7fb fb70 	bl	800c700 <snmp_asn1_enc_oid_cnt>
  snmp_asn1_enc_length_cnt(len->oid_value_len, &len->oid_len_len);
 8011020:	683b      	ldr	r3, [r7, #0]
 8011022:	88da      	ldrh	r2, [r3, #6]
 8011024:	683b      	ldr	r3, [r7, #0]
 8011026:	3304      	adds	r3, #4
 8011028:	4619      	mov	r1, r3
 801102a:	4610      	mov	r0, r2
 801102c:	f7fb fad4 	bl	800c5d8 <snmp_asn1_enc_length_cnt>

  if (varbind->value_len == 0) {
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 8011036:	2b00      	cmp	r3, #0
 8011038:	d103      	bne.n	8011042 <snmp_varbind_length+0x42>
    len->value_value_len = 0;
 801103a:	683b      	ldr	r3, [r7, #0]
 801103c:	2200      	movs	r2, #0
 801103e:	815a      	strh	r2, [r3, #10]
 8011040:	e107      	b.n	8011252 <snmp_varbind_length+0x252>
  } else if (varbind->value_len & SNMP_GET_VALUE_RAW_DATA) {
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 8011048:	b21b      	sxth	r3, r3
 801104a:	2b00      	cmp	r3, #0
 801104c:	da08      	bge.n	8011060 <snmp_varbind_length+0x60>
    len->value_value_len = varbind->value_len & (~SNMP_GET_VALUE_RAW_DATA);
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 8011054:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8011058:	b29a      	uxth	r2, r3
 801105a:	683b      	ldr	r3, [r7, #0]
 801105c:	815a      	strh	r2, [r3, #10]
 801105e:	e0f8      	b.n	8011252 <snmp_varbind_length+0x252>
  } else {
    switch (varbind->type) {
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8011066:	3b02      	subs	r3, #2
 8011068:	2b44      	cmp	r3, #68	@ 0x44
 801106a:	f200 80ef 	bhi.w	801124c <snmp_varbind_length+0x24c>
 801106e:	a201      	add	r2, pc, #4	@ (adr r2, 8011074 <snmp_varbind_length+0x74>)
 8011070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011074:	08011189 	.word	0x08011189
 8011078:	0801124d 	.word	0x0801124d
 801107c:	080111d5 	.word	0x080111d5
 8011080:	080111e1 	.word	0x080111e1
 8011084:	080111f9 	.word	0x080111f9
 8011088:	0801124d 	.word	0x0801124d
 801108c:	0801124d 	.word	0x0801124d
 8011090:	0801124d 	.word	0x0801124d
 8011094:	0801124d 	.word	0x0801124d
 8011098:	0801124d 	.word	0x0801124d
 801109c:	0801124d 	.word	0x0801124d
 80110a0:	0801124d 	.word	0x0801124d
 80110a4:	0801124d 	.word	0x0801124d
 80110a8:	0801124d 	.word	0x0801124d
 80110ac:	0801124d 	.word	0x0801124d
 80110b0:	0801124d 	.word	0x0801124d
 80110b4:	0801124d 	.word	0x0801124d
 80110b8:	0801124d 	.word	0x0801124d
 80110bc:	0801124d 	.word	0x0801124d
 80110c0:	0801124d 	.word	0x0801124d
 80110c4:	0801124d 	.word	0x0801124d
 80110c8:	0801124d 	.word	0x0801124d
 80110cc:	0801124d 	.word	0x0801124d
 80110d0:	0801124d 	.word	0x0801124d
 80110d4:	0801124d 	.word	0x0801124d
 80110d8:	0801124d 	.word	0x0801124d
 80110dc:	0801124d 	.word	0x0801124d
 80110e0:	0801124d 	.word	0x0801124d
 80110e4:	0801124d 	.word	0x0801124d
 80110e8:	0801124d 	.word	0x0801124d
 80110ec:	0801124d 	.word	0x0801124d
 80110f0:	0801124d 	.word	0x0801124d
 80110f4:	0801124d 	.word	0x0801124d
 80110f8:	0801124d 	.word	0x0801124d
 80110fc:	0801124d 	.word	0x0801124d
 8011100:	0801124d 	.word	0x0801124d
 8011104:	0801124d 	.word	0x0801124d
 8011108:	0801124d 	.word	0x0801124d
 801110c:	0801124d 	.word	0x0801124d
 8011110:	0801124d 	.word	0x0801124d
 8011114:	0801124d 	.word	0x0801124d
 8011118:	0801124d 	.word	0x0801124d
 801111c:	0801124d 	.word	0x0801124d
 8011120:	0801124d 	.word	0x0801124d
 8011124:	0801124d 	.word	0x0801124d
 8011128:	0801124d 	.word	0x0801124d
 801112c:	0801124d 	.word	0x0801124d
 8011130:	0801124d 	.word	0x0801124d
 8011134:	0801124d 	.word	0x0801124d
 8011138:	0801124d 	.word	0x0801124d
 801113c:	0801124d 	.word	0x0801124d
 8011140:	0801124d 	.word	0x0801124d
 8011144:	0801124d 	.word	0x0801124d
 8011148:	0801124d 	.word	0x0801124d
 801114c:	0801124d 	.word	0x0801124d
 8011150:	0801124d 	.word	0x0801124d
 8011154:	0801124d 	.word	0x0801124d
 8011158:	0801124d 	.word	0x0801124d
 801115c:	0801124d 	.word	0x0801124d
 8011160:	0801124d 	.word	0x0801124d
 8011164:	0801124d 	.word	0x0801124d
 8011168:	0801124d 	.word	0x0801124d
 801116c:	080111d5 	.word	0x080111d5
 8011170:	080111af 	.word	0x080111af
 8011174:	080111af 	.word	0x080111af
 8011178:	080111af 	.word	0x080111af
 801117c:	080111d5 	.word	0x080111d5
 8011180:	0801124d 	.word	0x0801124d
 8011184:	08011229 	.word	0x08011229
      case SNMP_ASN1_TYPE_INTEGER:
        if (varbind->value_len != sizeof (s32_t)) {
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 801118e:	2b04      	cmp	r3, #4
 8011190:	d002      	beq.n	8011198 <snmp_varbind_length+0x198>
          return ERR_VAL;
 8011192:	f06f 0305 	mvn.w	r3, #5
 8011196:	e07f      	b.n	8011298 <snmp_varbind_length+0x298>
        }
        snmp_asn1_enc_s32t_cnt(*((s32_t*) varbind->value), &len->value_value_len);
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801119e:	681a      	ldr	r2, [r3, #0]
 80111a0:	683b      	ldr	r3, [r7, #0]
 80111a2:	330a      	adds	r3, #10
 80111a4:	4619      	mov	r1, r3
 80111a6:	4610      	mov	r0, r2
 80111a8:	f7fb fa80 	bl	800c6ac <snmp_asn1_enc_s32t_cnt>
        break;
 80111ac:	e051      	b.n	8011252 <snmp_varbind_length+0x252>
      case SNMP_ASN1_TYPE_COUNTER:
      case SNMP_ASN1_TYPE_GAUGE:
      case SNMP_ASN1_TYPE_TIMETICKS:
        if (varbind->value_len != sizeof (u32_t)) {
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 80111b4:	2b04      	cmp	r3, #4
 80111b6:	d002      	beq.n	80111be <snmp_varbind_length+0x1be>
          return ERR_VAL;
 80111b8:	f06f 0305 	mvn.w	r3, #5
 80111bc:	e06c      	b.n	8011298 <snmp_varbind_length+0x298>
        }
        snmp_asn1_enc_u32t_cnt(*((u32_t*) varbind->value), &len->value_value_len);
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80111c4:	681a      	ldr	r2, [r3, #0]
 80111c6:	683b      	ldr	r3, [r7, #0]
 80111c8:	330a      	adds	r3, #10
 80111ca:	4619      	mov	r1, r3
 80111cc:	4610      	mov	r0, r2
 80111ce:	f7fb fa1f 	bl	800c610 <snmp_asn1_enc_u32t_cnt>
        break;
 80111d2:	e03e      	b.n	8011252 <snmp_varbind_length+0x252>
      case SNMP_ASN1_TYPE_OCTET_STRING:
      case SNMP_ASN1_TYPE_IPADDR:
      case SNMP_ASN1_TYPE_OPAQUE:
        len->value_value_len = varbind->value_len;
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	f8b3 20d6 	ldrh.w	r2, [r3, #214]	@ 0xd6
 80111da:	683b      	ldr	r3, [r7, #0]
 80111dc:	815a      	strh	r2, [r3, #10]
        break;
 80111de:	e038      	b.n	8011252 <snmp_varbind_length+0x252>
      case SNMP_ASN1_TYPE_NULL:
        if (varbind->value_len != 0) {
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d002      	beq.n	80111f0 <snmp_varbind_length+0x1f0>
          return ERR_VAL;
 80111ea:	f06f 0305 	mvn.w	r3, #5
 80111ee:	e053      	b.n	8011298 <snmp_varbind_length+0x298>
        }
        len->value_value_len = 0;
 80111f0:	683b      	ldr	r3, [r7, #0]
 80111f2:	2200      	movs	r2, #0
 80111f4:	815a      	strh	r2, [r3, #10]
        break;
 80111f6:	e02c      	b.n	8011252 <snmp_varbind_length+0x252>
      case SNMP_ASN1_TYPE_OBJECT_ID:
        if ((varbind->value_len & 0x03) != 0) {
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 80111fe:	f003 0303 	and.w	r3, r3, #3
 8011202:	2b00      	cmp	r3, #0
 8011204:	d002      	beq.n	801120c <snmp_varbind_length+0x20c>
          return ERR_VAL;
 8011206:	f06f 0305 	mvn.w	r3, #5
 801120a:	e045      	b.n	8011298 <snmp_varbind_length+0x298>
        }
        snmp_asn1_enc_oid_cnt((u32_t*) varbind->value, varbind->value_len >> 2, &len->value_value_len);
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	f8d3 00d8 	ldr.w	r0, [r3, #216]	@ 0xd8
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 8011218:	089b      	lsrs	r3, r3, #2
 801121a:	b299      	uxth	r1, r3
 801121c:	683b      	ldr	r3, [r7, #0]
 801121e:	330a      	adds	r3, #10
 8011220:	461a      	mov	r2, r3
 8011222:	f7fb fa6d 	bl	800c700 <snmp_asn1_enc_oid_cnt>
        break;
 8011226:	e014      	b.n	8011252 <snmp_varbind_length+0x252>
      case SNMP_ASN1_TYPE_COUNTER64:
        if (varbind->value_len != (2 * sizeof (u32_t))) {
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 801122e:	2b08      	cmp	r3, #8
 8011230:	d002      	beq.n	8011238 <snmp_varbind_length+0x238>
          return ERR_VAL;
 8011232:	f06f 0305 	mvn.w	r3, #5
 8011236:	e02f      	b.n	8011298 <snmp_varbind_length+0x298>
        }
        snmp_asn1_enc_u64t_cnt((u32_t*) varbind->value, &len->value_value_len);
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 801123e:	683b      	ldr	r3, [r7, #0]
 8011240:	330a      	adds	r3, #10
 8011242:	4619      	mov	r1, r3
 8011244:	4610      	mov	r0, r2
 8011246:	f7fb fa0e 	bl	800c666 <snmp_asn1_enc_u64t_cnt>
        break;
 801124a:	e002      	b.n	8011252 <snmp_varbind_length+0x252>
      default:
        /* unsupported type */
        return ERR_VAL;
 801124c:	f06f 0305 	mvn.w	r3, #5
 8011250:	e022      	b.n	8011298 <snmp_varbind_length+0x298>
    }
  }
  snmp_asn1_enc_length_cnt(len->value_value_len, &len->value_len_len);
 8011252:	683b      	ldr	r3, [r7, #0]
 8011254:	895a      	ldrh	r2, [r3, #10]
 8011256:	683b      	ldr	r3, [r7, #0]
 8011258:	3308      	adds	r3, #8
 801125a:	4619      	mov	r1, r3
 801125c:	4610      	mov	r0, r2
 801125e:	f7fb f9bb 	bl	800c5d8 <snmp_asn1_enc_length_cnt>

  len->vb_value_len = 1 + len->oid_len_len + len->oid_value_len + 1 + len->value_len_len + len->value_value_len;
 8011262:	683b      	ldr	r3, [r7, #0]
 8011264:	791b      	ldrb	r3, [r3, #4]
 8011266:	461a      	mov	r2, r3
 8011268:	683b      	ldr	r3, [r7, #0]
 801126a:	88db      	ldrh	r3, [r3, #6]
 801126c:	4413      	add	r3, r2
 801126e:	b29b      	uxth	r3, r3
 8011270:	683a      	ldr	r2, [r7, #0]
 8011272:	7a12      	ldrb	r2, [r2, #8]
 8011274:	4413      	add	r3, r2
 8011276:	b29a      	uxth	r2, r3
 8011278:	683b      	ldr	r3, [r7, #0]
 801127a:	895b      	ldrh	r3, [r3, #10]
 801127c:	4413      	add	r3, r2
 801127e:	b29b      	uxth	r3, r3
 8011280:	3302      	adds	r3, #2
 8011282:	b29a      	uxth	r2, r3
 8011284:	683b      	ldr	r3, [r7, #0]
 8011286:	805a      	strh	r2, [r3, #2]
  snmp_asn1_enc_length_cnt(len->vb_value_len, &len->vb_len_len);
 8011288:	683b      	ldr	r3, [r7, #0]
 801128a:	885b      	ldrh	r3, [r3, #2]
 801128c:	683a      	ldr	r2, [r7, #0]
 801128e:	4611      	mov	r1, r2
 8011290:	4618      	mov	r0, r3
 8011292:	f7fb f9a1 	bl	800c5d8 <snmp_asn1_enc_length_cnt>

  return ERR_OK;
 8011296:	2300      	movs	r3, #0
}
 8011298:	4618      	mov	r0, r3
 801129a:	3708      	adds	r7, #8
 801129c:	46bd      	mov	sp, r7
 801129e:	bd80      	pop	{r7, pc}

080112a0 <snmp_append_outbound_varbind>:

#define OVB_BUILD_EXEC(code) BUILD_EXEC(code, ERR_ARG)

err_t
snmp_append_outbound_varbind(struct snmp_pbuf_stream *pbuf_stream, struct snmp_varbind* varbind)
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b088      	sub	sp, #32
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]
 80112a8:	6039      	str	r1, [r7, #0]
  struct snmp_asn1_tlv tlv;
  struct snmp_varbind_len len;
  err_t err;

  err = snmp_varbind_length(varbind, &len);
 80112aa:	f107 030c 	add.w	r3, r7, #12
 80112ae:	4619      	mov	r1, r3
 80112b0:	6838      	ldr	r0, [r7, #0]
 80112b2:	f7ff fea5 	bl	8011000 <snmp_varbind_length>
 80112b6:	4603      	mov	r3, r0
 80112b8:	77fb      	strb	r3, [r7, #31]

  if (err != ERR_OK) {
 80112ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d002      	beq.n	80112c8 <snmp_append_outbound_varbind+0x28>
    return err;
 80112c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80112c6:	e0f6      	b.n	80114b6 <snmp_append_outbound_varbind+0x216>
  }

  /* check length already before adding first data because in case of GetBulk,
   *  data added so far is returned and therefore no partial data shall be added
   */
  if ((1 + len.vb_len_len + len.vb_value_len) > pbuf_stream->length) {
 80112c8:	7b3b      	ldrb	r3, [r7, #12]
 80112ca:	3301      	adds	r3, #1
 80112cc:	89fa      	ldrh	r2, [r7, #14]
 80112ce:	4413      	add	r3, r2
 80112d0:	687a      	ldr	r2, [r7, #4]
 80112d2:	88d2      	ldrh	r2, [r2, #6]
 80112d4:	4293      	cmp	r3, r2
 80112d6:	dd02      	ble.n	80112de <snmp_append_outbound_varbind+0x3e>
    return ERR_BUF;
 80112d8:	f06f 0301 	mvn.w	r3, #1
 80112dc:	e0eb      	b.n	80114b6 <snmp_append_outbound_varbind+0x216>
  }

  /* 'VarBind' sequence */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_SEQUENCE, len.vb_len_len, len.vb_value_len);
 80112de:	2330      	movs	r3, #48	@ 0x30
 80112e0:	763b      	strb	r3, [r7, #24]
 80112e2:	2300      	movs	r3, #0
 80112e4:	767b      	strb	r3, [r7, #25]
 80112e6:	7b3b      	ldrb	r3, [r7, #12]
 80112e8:	76bb      	strb	r3, [r7, #26]
 80112ea:	89fb      	ldrh	r3, [r7, #14]
 80112ec:	83bb      	strh	r3, [r7, #28]
  OVB_BUILD_EXEC(snmp_ans1_enc_tlv(pbuf_stream, &tlv));
 80112ee:	f107 0318 	add.w	r3, r7, #24
 80112f2:	4619      	mov	r1, r3
 80112f4:	6878      	ldr	r0, [r7, #4]
 80112f6:	f7fa ff83 	bl	800c200 <snmp_ans1_enc_tlv>
 80112fa:	4603      	mov	r3, r0
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d002      	beq.n	8011306 <snmp_append_outbound_varbind+0x66>
 8011300:	f06f 030f 	mvn.w	r3, #15
 8011304:	e0d7      	b.n	80114b6 <snmp_append_outbound_varbind+0x216>

  /* VarBind OID */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_OBJECT_ID, len.oid_len_len, len.oid_value_len);
 8011306:	2306      	movs	r3, #6
 8011308:	763b      	strb	r3, [r7, #24]
 801130a:	2300      	movs	r3, #0
 801130c:	767b      	strb	r3, [r7, #25]
 801130e:	7c3b      	ldrb	r3, [r7, #16]
 8011310:	76bb      	strb	r3, [r7, #26]
 8011312:	8a7b      	ldrh	r3, [r7, #18]
 8011314:	83bb      	strh	r3, [r7, #28]
  OVB_BUILD_EXEC(snmp_ans1_enc_tlv(pbuf_stream, &tlv));
 8011316:	f107 0318 	add.w	r3, r7, #24
 801131a:	4619      	mov	r1, r3
 801131c:	6878      	ldr	r0, [r7, #4]
 801131e:	f7fa ff6f 	bl	800c200 <snmp_ans1_enc_tlv>
 8011322:	4603      	mov	r3, r0
 8011324:	2b00      	cmp	r3, #0
 8011326:	d002      	beq.n	801132e <snmp_append_outbound_varbind+0x8e>
 8011328:	f06f 030f 	mvn.w	r3, #15
 801132c:	e0c3      	b.n	80114b6 <snmp_append_outbound_varbind+0x216>
  OVB_BUILD_EXEC(snmp_asn1_enc_oid(pbuf_stream, varbind->oid.id, varbind->oid.len));
 801132e:	683b      	ldr	r3, [r7, #0]
 8011330:	f103 010c 	add.w	r1, r3, #12
 8011334:	683b      	ldr	r3, [r7, #0]
 8011336:	7a1b      	ldrb	r3, [r3, #8]
 8011338:	461a      	mov	r2, r3
 801133a:	6878      	ldr	r0, [r7, #4]
 801133c:	f7fb f8da 	bl	800c4f4 <snmp_asn1_enc_oid>
 8011340:	4603      	mov	r3, r0
 8011342:	2b00      	cmp	r3, #0
 8011344:	d002      	beq.n	801134c <snmp_append_outbound_varbind+0xac>
 8011346:	f06f 030f 	mvn.w	r3, #15
 801134a:	e0b4      	b.n	80114b6 <snmp_append_outbound_varbind+0x216>

  /* VarBind value */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, varbind->type, len.value_len_len, len.value_value_len);
 801134c:	683b      	ldr	r3, [r7, #0]
 801134e:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8011352:	763b      	strb	r3, [r7, #24]
 8011354:	2300      	movs	r3, #0
 8011356:	767b      	strb	r3, [r7, #25]
 8011358:	7d3b      	ldrb	r3, [r7, #20]
 801135a:	76bb      	strb	r3, [r7, #26]
 801135c:	8afb      	ldrh	r3, [r7, #22]
 801135e:	83bb      	strh	r3, [r7, #28]
  OVB_BUILD_EXEC(snmp_ans1_enc_tlv(pbuf_stream, &tlv));
 8011360:	f107 0318 	add.w	r3, r7, #24
 8011364:	4619      	mov	r1, r3
 8011366:	6878      	ldr	r0, [r7, #4]
 8011368:	f7fa ff4a 	bl	800c200 <snmp_ans1_enc_tlv>
 801136c:	4603      	mov	r3, r0
 801136e:	2b00      	cmp	r3, #0
 8011370:	d002      	beq.n	8011378 <snmp_append_outbound_varbind+0xd8>
 8011372:	f06f 030f 	mvn.w	r3, #15
 8011376:	e09e      	b.n	80114b6 <snmp_append_outbound_varbind+0x216>

  if (len.value_value_len > 0) {
 8011378:	8afb      	ldrh	r3, [r7, #22]
 801137a:	2b00      	cmp	r3, #0
 801137c:	f000 809a 	beq.w	80114b4 <snmp_append_outbound_varbind+0x214>
    if (varbind->value_len & SNMP_GET_VALUE_RAW_DATA) {
 8011380:	683b      	ldr	r3, [r7, #0]
 8011382:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 8011386:	b21b      	sxth	r3, r3
 8011388:	2b00      	cmp	r3, #0
 801138a:	da0e      	bge.n	80113aa <snmp_append_outbound_varbind+0x10a>
      OVB_BUILD_EXEC(snmp_asn1_enc_raw(pbuf_stream, (u8_t*) varbind->value, len.value_value_len));
 801138c:	683b      	ldr	r3, [r7, #0]
 801138e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011392:	8afa      	ldrh	r2, [r7, #22]
 8011394:	4619      	mov	r1, r3
 8011396:	6878      	ldr	r0, [r7, #4]
 8011398:	f7fa ffbd 	bl	800c316 <snmp_asn1_enc_raw>
 801139c:	4603      	mov	r3, r0
 801139e:	2b00      	cmp	r3, #0
 80113a0:	f000 8088 	beq.w	80114b4 <snmp_append_outbound_varbind+0x214>
 80113a4:	f06f 030f 	mvn.w	r3, #15
 80113a8:	e085      	b.n	80114b6 <snmp_append_outbound_varbind+0x216>
    } else {
      switch (varbind->type) {
 80113aa:	683b      	ldr	r3, [r7, #0]
 80113ac:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 80113b0:	2b46      	cmp	r3, #70	@ 0x46
 80113b2:	dc70      	bgt.n	8011496 <snmp_append_outbound_varbind+0x1f6>
 80113b4:	2b40      	cmp	r3, #64	@ 0x40
 80113b6:	da08      	bge.n	80113ca <snmp_append_outbound_varbind+0x12a>
 80113b8:	2b06      	cmp	r3, #6
 80113ba:	d04c      	beq.n	8011456 <snmp_append_outbound_varbind+0x1b6>
 80113bc:	2b06      	cmp	r3, #6
 80113be:	dc6a      	bgt.n	8011496 <snmp_append_outbound_varbind+0x1f6>
 80113c0:	2b02      	cmp	r3, #2
 80113c2:	d017      	beq.n	80113f4 <snmp_append_outbound_varbind+0x154>
 80113c4:	2b04      	cmp	r3, #4
 80113c6:	d033      	beq.n	8011430 <snmp_append_outbound_varbind+0x190>
 80113c8:	e065      	b.n	8011496 <snmp_append_outbound_varbind+0x1f6>
 80113ca:	3b40      	subs	r3, #64	@ 0x40
 80113cc:	2b06      	cmp	r3, #6
 80113ce:	d862      	bhi.n	8011496 <snmp_append_outbound_varbind+0x1f6>
 80113d0:	a201      	add	r2, pc, #4	@ (adr r2, 80113d8 <snmp_append_outbound_varbind+0x138>)
 80113d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113d6:	bf00      	nop
 80113d8:	08011431 	.word	0x08011431
 80113dc:	08011413 	.word	0x08011413
 80113e0:	08011413 	.word	0x08011413
 80113e4:	08011413 	.word	0x08011413
 80113e8:	08011431 	.word	0x08011431
 80113ec:	08011497 	.word	0x08011497
 80113f0:	0801147b 	.word	0x0801147b
        case SNMP_ASN1_TYPE_INTEGER:
          OVB_BUILD_EXEC(snmp_asn1_enc_s32t(pbuf_stream, len.value_value_len, *((s32_t*) varbind->value)));
 80113f4:	8af9      	ldrh	r1, [r7, #22]
 80113f6:	683b      	ldr	r3, [r7, #0]
 80113f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	461a      	mov	r2, r3
 8011400:	6878      	ldr	r0, [r7, #4]
 8011402:	f7fb f848 	bl	800c496 <snmp_asn1_enc_s32t>
 8011406:	4603      	mov	r3, r0
 8011408:	2b00      	cmp	r3, #0
 801140a:	d04c      	beq.n	80114a6 <snmp_append_outbound_varbind+0x206>
 801140c:	f06f 030f 	mvn.w	r3, #15
 8011410:	e051      	b.n	80114b6 <snmp_append_outbound_varbind+0x216>
          break;
        case SNMP_ASN1_TYPE_COUNTER:
        case SNMP_ASN1_TYPE_GAUGE:
        case SNMP_ASN1_TYPE_TIMETICKS:
          OVB_BUILD_EXEC(snmp_asn1_enc_u32t(pbuf_stream, len.value_value_len, *((u32_t*) varbind->value)));
 8011412:	8af9      	ldrh	r1, [r7, #22]
 8011414:	683b      	ldr	r3, [r7, #0]
 8011416:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	461a      	mov	r2, r3
 801141e:	6878      	ldr	r0, [r7, #4]
 8011420:	f7fa ff91 	bl	800c346 <snmp_asn1_enc_u32t>
 8011424:	4603      	mov	r3, r0
 8011426:	2b00      	cmp	r3, #0
 8011428:	d03f      	beq.n	80114aa <snmp_append_outbound_varbind+0x20a>
 801142a:	f06f 030f 	mvn.w	r3, #15
 801142e:	e042      	b.n	80114b6 <snmp_append_outbound_varbind+0x216>
          break;
        case SNMP_ASN1_TYPE_OCTET_STRING:
        case SNMP_ASN1_TYPE_IPADDR:
        case SNMP_ASN1_TYPE_OPAQUE:
          OVB_BUILD_EXEC(snmp_asn1_enc_raw(pbuf_stream, (u8_t*) varbind->value, len.value_value_len));
 8011430:	683b      	ldr	r3, [r7, #0]
 8011432:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011436:	8afa      	ldrh	r2, [r7, #22]
 8011438:	4619      	mov	r1, r3
 801143a:	6878      	ldr	r0, [r7, #4]
 801143c:	f7fa ff6b 	bl	800c316 <snmp_asn1_enc_raw>
 8011440:	4603      	mov	r3, r0
 8011442:	2b00      	cmp	r3, #0
 8011444:	d002      	beq.n	801144c <snmp_append_outbound_varbind+0x1ac>
 8011446:	f06f 030f 	mvn.w	r3, #15
 801144a:	e034      	b.n	80114b6 <snmp_append_outbound_varbind+0x216>
          len.value_value_len = varbind->value_len;
 801144c:	683b      	ldr	r3, [r7, #0]
 801144e:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 8011452:	82fb      	strh	r3, [r7, #22]
          break;
 8011454:	e02e      	b.n	80114b4 <snmp_append_outbound_varbind+0x214>
        case SNMP_ASN1_TYPE_OBJECT_ID:
          OVB_BUILD_EXEC(snmp_asn1_enc_oid(pbuf_stream, (u32_t*) varbind->value, varbind->value_len / sizeof (u32_t)));
 8011456:	683b      	ldr	r3, [r7, #0]
 8011458:	f8d3 10d8 	ldr.w	r1, [r3, #216]	@ 0xd8
 801145c:	683b      	ldr	r3, [r7, #0]
 801145e:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	@ 0xd6
 8011462:	089b      	lsrs	r3, r3, #2
 8011464:	b29b      	uxth	r3, r3
 8011466:	461a      	mov	r2, r3
 8011468:	6878      	ldr	r0, [r7, #4]
 801146a:	f7fb f843 	bl	800c4f4 <snmp_asn1_enc_oid>
 801146e:	4603      	mov	r3, r0
 8011470:	2b00      	cmp	r3, #0
 8011472:	d01c      	beq.n	80114ae <snmp_append_outbound_varbind+0x20e>
 8011474:	f06f 030f 	mvn.w	r3, #15
 8011478:	e01d      	b.n	80114b6 <snmp_append_outbound_varbind+0x216>
          break;
        case SNMP_ASN1_TYPE_COUNTER64:
          OVB_BUILD_EXEC(snmp_asn1_enc_u64t(pbuf_stream, len.value_value_len, (u32_t*) varbind->value));
 801147a:	8af9      	ldrh	r1, [r7, #22]
 801147c:	683b      	ldr	r3, [r7, #0]
 801147e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011482:	461a      	mov	r2, r3
 8011484:	6878      	ldr	r0, [r7, #4]
 8011486:	f7fa ffa3 	bl	800c3d0 <snmp_asn1_enc_u64t>
 801148a:	4603      	mov	r3, r0
 801148c:	2b00      	cmp	r3, #0
 801148e:	d010      	beq.n	80114b2 <snmp_append_outbound_varbind+0x212>
 8011490:	f06f 030f 	mvn.w	r3, #15
 8011494:	e00f      	b.n	80114b6 <snmp_append_outbound_varbind+0x216>
          break;
        default:
          LWIP_ASSERT("Unknown variable type", 0);
 8011496:	4b0a      	ldr	r3, [pc, #40]	@ (80114c0 <snmp_append_outbound_varbind+0x220>)
 8011498:	f240 521e 	movw	r2, #1310	@ 0x51e
 801149c:	4909      	ldr	r1, [pc, #36]	@ (80114c4 <snmp_append_outbound_varbind+0x224>)
 801149e:	480a      	ldr	r0, [pc, #40]	@ (80114c8 <snmp_append_outbound_varbind+0x228>)
 80114a0:	f00e fffe 	bl	80204a0 <iprintf>
          break;
 80114a4:	e006      	b.n	80114b4 <snmp_append_outbound_varbind+0x214>
          break;
 80114a6:	bf00      	nop
 80114a8:	e004      	b.n	80114b4 <snmp_append_outbound_varbind+0x214>
          break;
 80114aa:	bf00      	nop
 80114ac:	e002      	b.n	80114b4 <snmp_append_outbound_varbind+0x214>
          break;
 80114ae:	bf00      	nop
 80114b0:	e000      	b.n	80114b4 <snmp_append_outbound_varbind+0x214>
          break;
 80114b2:	bf00      	nop
      }
    }
  }

  return ERR_OK;
 80114b4:	2300      	movs	r3, #0
}
 80114b6:	4618      	mov	r0, r3
 80114b8:	3720      	adds	r7, #32
 80114ba:	46bd      	mov	sp, r7
 80114bc:	bd80      	pop	{r7, pc}
 80114be:	bf00      	nop
 80114c0:	08023c3c 	.word	0x08023c3c
 80114c4:	08023d10 	.word	0x08023d10
 80114c8:	08023c98 	.word	0x08023c98

080114cc <snmp_complete_outbound_frame>:

static err_t
snmp_complete_outbound_frame(struct snmp_request *request)
{
 80114cc:	b590      	push	{r4, r7, lr}
 80114ce:	b089      	sub	sp, #36	@ 0x24
 80114d0:	af00      	add	r7, sp, #0
 80114d2:	6078      	str	r0, [r7, #4]
  struct snmp_asn1_tlv tlv;
  u16_t frame_size;
  u8_t outbound_padding = 0;
 80114d4:	2300      	movs	r3, #0
 80114d6:	77fb      	strb	r3, [r7, #31]

  if (request->version == SNMP_VERSION_1) {
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	7a9b      	ldrb	r3, [r3, #10]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d133      	bne.n	8011548 <snmp_complete_outbound_frame+0x7c>
    if (request->error_status != SNMP_ERR_NOERROR) {
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	69db      	ldr	r3, [r3, #28]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d044      	beq.n	8011572 <snmp_complete_outbound_frame+0xa6>
      /* map v2c error codes to v1 compliant error code (according to RFC 2089) */
      switch (request->error_status) {
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	69db      	ldr	r3, [r3, #28]
 80114ec:	2b12      	cmp	r3, #18
 80114ee:	dc18      	bgt.n	8011522 <snmp_complete_outbound_frame+0x56>
 80114f0:	2b06      	cmp	r3, #6
 80114f2:	db25      	blt.n	8011540 <snmp_complete_outbound_frame+0x74>
 80114f4:	461a      	mov	r2, r3
 80114f6:	2301      	movs	r3, #1
 80114f8:	fa03 f202 	lsl.w	r2, r3, r2
 80114fc:	4b9c      	ldr	r3, [pc, #624]	@ (8011770 <snmp_complete_outbound_frame+0x2a4>)
 80114fe:	4013      	ands	r3, r2
 8011500:	2b00      	cmp	r3, #0
 8011502:	bf14      	ite	ne
 8011504:	2301      	movne	r3, #1
 8011506:	2300      	moveq	r3, #0
 8011508:	b2db      	uxtb	r3, r3
 801150a:	2b00      	cmp	r3, #0
 801150c:	d114      	bne.n	8011538 <snmp_complete_outbound_frame+0x6c>
 801150e:	f402 53bc 	and.w	r3, r2, #6016	@ 0x1780
 8011512:	2b00      	cmp	r3, #0
 8011514:	bf14      	ite	ne
 8011516:	2301      	movne	r3, #1
 8011518:	2300      	moveq	r3, #0
 801151a:	b2db      	uxtb	r3, r3
 801151c:	2b00      	cmp	r3, #0
 801151e:	d107      	bne.n	8011530 <snmp_complete_outbound_frame+0x64>
 8011520:	e00e      	b.n	8011540 <snmp_complete_outbound_frame+0x74>
 8011522:	3bf0      	subs	r3, #240	@ 0xf0
 8011524:	2b02      	cmp	r3, #2
 8011526:	d80b      	bhi.n	8011540 <snmp_complete_outbound_frame+0x74>
         * (during processing of frame we already stored them in error_status field, 
         * so no need to check all varbinds here for those exceptions as suggested by RFC) */
        case SNMP_ERR_NOSUCHINSTANCE:
        case SNMP_ERR_NOSUCHOBJECT:
        case SNMP_ERR_ENDOFMIBVIEW:
          request->error_status = SNMP_ERR_NOSUCHNAME;
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	2202      	movs	r2, #2
 801152c:	61da      	str	r2, [r3, #28]
          break;
 801152e:	e020      	b.n	8011572 <snmp_complete_outbound_frame+0xa6>
        case SNMP_ERR_WRONGVALUE:
        case SNMP_ERR_WRONGENCODING:
        case SNMP_ERR_WRONGTYPE:
        case SNMP_ERR_WRONGLENGTH:
        case SNMP_ERR_INCONSISTENTVALUE:
          request->error_status = SNMP_ERR_BADVALUE;
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	2203      	movs	r2, #3
 8011534:	61da      	str	r2, [r3, #28]
          break;
 8011536:	e01c      	b.n	8011572 <snmp_complete_outbound_frame+0xa6>
        case SNMP_ERR_NOACCESS:
        case SNMP_ERR_NOTWRITABLE:
        case SNMP_ERR_NOCREATION:
        case SNMP_ERR_INCONSISTENTNAME:
        case SNMP_ERR_AUTHORIZATIONERROR:
          request->error_status = SNMP_ERR_NOSUCHNAME;
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	2202      	movs	r2, #2
 801153c:	61da      	str	r2, [r3, #28]
          break;
 801153e:	e018      	b.n	8011572 <snmp_complete_outbound_frame+0xa6>
        case SNMP_ERR_RESOURCEUNAVAILABLE:
        case SNMP_ERR_COMMITFAILED:
        case SNMP_ERR_UNDOFAILED:
        default:
          request->error_status = SNMP_ERR_GENERROR;
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	2205      	movs	r2, #5
 8011544:	61da      	str	r2, [r3, #28]
          break;
 8011546:	e014      	b.n	8011572 <snmp_complete_outbound_frame+0xa6>
       }
    }
  } else {
    if (request->request_type == SNMP_ASN1_CONTEXT_PDU_SET_REQ) {
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	7d9b      	ldrb	r3, [r3, #22]
 801154c:	2b03      	cmp	r3, #3
 801154e:	d109      	bne.n	8011564 <snmp_complete_outbound_frame+0x98>
      /* map error codes to according to RFC 1905 (4.2.5.  The SetRequest-PDU) return 'NotWritable' for unknown OIDs) */
      switch (request->error_status) {
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	69db      	ldr	r3, [r3, #28]
 8011554:	3bf0      	subs	r3, #240	@ 0xf0
 8011556:	2b02      	cmp	r3, #2
 8011558:	d803      	bhi.n	8011562 <snmp_complete_outbound_frame+0x96>
        case SNMP_ERR_NOSUCHINSTANCE:
        case SNMP_ERR_NOSUCHOBJECT:
        case SNMP_ERR_ENDOFMIBVIEW:
          request->error_status = SNMP_ERR_NOTWRITABLE;
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	2211      	movs	r2, #17
 801155e:	61da      	str	r2, [r3, #28]
          break;
 8011560:	e000      	b.n	8011564 <snmp_complete_outbound_frame+0x98>
        default:
          break;
 8011562:	bf00      	nop
      }
    }

    if (request->error_status >= SNMP_VARBIND_EXCEPTION_OFFSET) {
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	69db      	ldr	r3, [r3, #28]
 8011568:	2bef      	cmp	r3, #239	@ 0xef
 801156a:	dd02      	ble.n	8011572 <snmp_complete_outbound_frame+0xa6>
      /* should never occur because v2 frames store exceptions directly inside varbinds and not as frame error_status */
      LWIP_DEBUGF(SNMP_DEBUG, ("snmp_complete_outbound_frame() > Found v2 request with varbind exception code stored as error status!\n"));
      return ERR_ARG;
 801156c:	f06f 030f 	mvn.w	r3, #15
 8011570:	e187      	b.n	8011882 <snmp_complete_outbound_frame+0x3b6>
    }
  }

  if ((request->error_status != SNMP_ERR_NOERROR) || (request->request_type == SNMP_ASN1_CONTEXT_PDU_SET_REQ)) {
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	69db      	ldr	r3, [r3, #28]
 8011576:	2b00      	cmp	r3, #0
 8011578:	d103      	bne.n	8011582 <snmp_complete_outbound_frame+0xb6>
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	7d9b      	ldrb	r3, [r3, #22]
 801157e:	2b03      	cmp	r3, #3
 8011580:	d131      	bne.n	80115e6 <snmp_complete_outbound_frame+0x11a>
    /* all inbound vars are returned in response without any modification for error responses and successful set requests*/
    struct snmp_pbuf_stream inbound_stream;
    OF_BUILD_EXEC( snmp_pbuf_stream_init(&inbound_stream, request->inbound_pbuf, request->inbound_varbind_offset, request->inbound_varbind_len) );
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801158e:	f107 000c 	add.w	r0, r7, #12
 8011592:	f000 fbd5 	bl	8011d40 <snmp_pbuf_stream_init>
 8011596:	4603      	mov	r3, r0
 8011598:	2b00      	cmp	r3, #0
 801159a:	d002      	beq.n	80115a2 <snmp_complete_outbound_frame+0xd6>
 801159c:	f06f 030f 	mvn.w	r3, #15
 80115a0:	e16f      	b.n	8011882 <snmp_complete_outbound_frame+0x3b6>
    OF_BUILD_EXEC( snmp_pbuf_stream_init(&(request->outbound_pbuf_stream), request->outbound_pbuf, request->outbound_varbind_offset, request->outbound_pbuf->tot_len - request->outbound_varbind_offset) );
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	f8b3 4056 	ldrh.w	r4, [r3, #86]	@ 0x56
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80115b6:	891a      	ldrh	r2, [r3, #8]
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80115be:	1ad3      	subs	r3, r2, r3
 80115c0:	b29b      	uxth	r3, r3
 80115c2:	4622      	mov	r2, r4
 80115c4:	f000 fbbc 	bl	8011d40 <snmp_pbuf_stream_init>
 80115c8:	4603      	mov	r3, r0
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d002      	beq.n	80115d4 <snmp_complete_outbound_frame+0x108>
 80115ce:	f06f 030f 	mvn.w	r3, #15
 80115d2:	e156      	b.n	8011882 <snmp_complete_outbound_frame+0x3b6>
    snmp_pbuf_stream_writeto(&inbound_stream, &(request->outbound_pbuf_stream), 0);
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 80115da:	f107 030c 	add.w	r3, r7, #12
 80115de:	2200      	movs	r2, #0
 80115e0:	4618      	mov	r0, r3
 80115e2:	f000 fc33 	bl	8011e4c <snmp_pbuf_stream_writeto>
  }

  frame_size = request->outbound_pbuf_stream.offset;
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 80115ec:	83bb      	strh	r3, [r7, #28]
    }
  }
#endif

  /* complete missing length in 'Message' sequence ; 'Message' tlv is located at the beginning (offset 0) */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_SEQUENCE, 3, frame_size + outbound_padding - 1 - 3); /* - type - length_len(fixed, see snmp_prepare_outbound_frame()) */
 80115ee:	2330      	movs	r3, #48	@ 0x30
 80115f0:	753b      	strb	r3, [r7, #20]
 80115f2:	2300      	movs	r3, #0
 80115f4:	757b      	strb	r3, [r7, #21]
 80115f6:	2303      	movs	r3, #3
 80115f8:	75bb      	strb	r3, [r7, #22]
 80115fa:	7ffb      	ldrb	r3, [r7, #31]
 80115fc:	b29a      	uxth	r2, r3
 80115fe:	8bbb      	ldrh	r3, [r7, #28]
 8011600:	4413      	add	r3, r2
 8011602:	b29b      	uxth	r3, r3
 8011604:	3b04      	subs	r3, #4
 8011606:	b29b      	uxth	r3, r3
 8011608:	833b      	strh	r3, [r7, #24]
  OF_BUILD_EXEC( snmp_pbuf_stream_init(&(request->outbound_pbuf_stream), request->outbound_pbuf, 0, request->outbound_pbuf->tot_len) );
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011618:	891b      	ldrh	r3, [r3, #8]
 801161a:	2200      	movs	r2, #0
 801161c:	f000 fb90 	bl	8011d40 <snmp_pbuf_stream_init>
 8011620:	4603      	mov	r3, r0
 8011622:	2b00      	cmp	r3, #0
 8011624:	d002      	beq.n	801162c <snmp_complete_outbound_frame+0x160>
 8011626:	f06f 030f 	mvn.w	r3, #15
 801162a:	e12a      	b.n	8011882 <snmp_complete_outbound_frame+0x3b6>
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(&(request->outbound_pbuf_stream), &tlv) );
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	3348      	adds	r3, #72	@ 0x48
 8011630:	f107 0214 	add.w	r2, r7, #20
 8011634:	4611      	mov	r1, r2
 8011636:	4618      	mov	r0, r3
 8011638:	f7fa fde2 	bl	800c200 <snmp_ans1_enc_tlv>
 801163c:	4603      	mov	r3, r0
 801163e:	2b00      	cmp	r3, #0
 8011640:	d002      	beq.n	8011648 <snmp_complete_outbound_frame+0x17c>
 8011642:	f06f 030f 	mvn.w	r3, #15
 8011646:	e11c      	b.n	8011882 <snmp_complete_outbound_frame+0x3b6>
    OF_BUILD_EXEC(snmp_ans1_enc_tlv(&(request->outbound_pbuf_stream), &tlv));
  }
#endif

  /* complete missing length in 'PDU' sequence */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, (SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTENTTYPE_CONSTRUCTED | SNMP_ASN1_CONTEXT_PDU_GET_RESP), 3,
 8011648:	23a2      	movs	r3, #162	@ 0xa2
 801164a:	753b      	strb	r3, [r7, #20]
 801164c:	2300      	movs	r3, #0
 801164e:	757b      	strb	r3, [r7, #21]
 8011650:	2303      	movs	r3, #3
 8011652:	75bb      	strb	r3, [r7, #22]
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801165a:	8bba      	ldrh	r2, [r7, #28]
 801165c:	1ad3      	subs	r3, r2, r3
 801165e:	b29b      	uxth	r3, r3
 8011660:	3b04      	subs	r3, #4
 8011662:	b29b      	uxth	r3, r3
 8011664:	833b      	strh	r3, [r7, #24]
      frame_size - request->outbound_pdu_offset - 1 - 3); /* - type - length_len(fixed, see snmp_prepare_outbound_frame()) */
  OF_BUILD_EXEC( snmp_pbuf_stream_seek_abs(&(request->outbound_pbuf_stream), request->outbound_pdu_offset) );
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011672:	4619      	mov	r1, r3
 8011674:	4610      	mov	r0, r2
 8011676:	f000 fc80 	bl	8011f7a <snmp_pbuf_stream_seek_abs>
 801167a:	4603      	mov	r3, r0
 801167c:	2b00      	cmp	r3, #0
 801167e:	d002      	beq.n	8011686 <snmp_complete_outbound_frame+0x1ba>
 8011680:	f06f 030f 	mvn.w	r3, #15
 8011684:	e0fd      	b.n	8011882 <snmp_complete_outbound_frame+0x3b6>
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(&(request->outbound_pbuf_stream), &tlv) );
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	3348      	adds	r3, #72	@ 0x48
 801168a:	f107 0214 	add.w	r2, r7, #20
 801168e:	4611      	mov	r1, r2
 8011690:	4618      	mov	r0, r3
 8011692:	f7fa fdb5 	bl	800c200 <snmp_ans1_enc_tlv>
 8011696:	4603      	mov	r3, r0
 8011698:	2b00      	cmp	r3, #0
 801169a:	d002      	beq.n	80116a2 <snmp_complete_outbound_frame+0x1d6>
 801169c:	f06f 030f 	mvn.w	r3, #15
 80116a0:	e0ef      	b.n	8011882 <snmp_complete_outbound_frame+0x3b6>

  /* process and encode final error status */
  if (request->error_status != 0) {
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	69db      	ldr	r3, [r3, #28]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d066      	beq.n	8011778 <snmp_complete_outbound_frame+0x2ac>
    u16_t len;
    snmp_asn1_enc_s32t_cnt(request->error_status, &len);
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	69db      	ldr	r3, [r3, #28]
 80116ae:	f107 020a 	add.w	r2, r7, #10
 80116b2:	4611      	mov	r1, r2
 80116b4:	4618      	mov	r0, r3
 80116b6:	f7fa fff9 	bl	800c6ac <snmp_asn1_enc_s32t_cnt>
    if (len != 1) {
 80116ba:	897b      	ldrh	r3, [r7, #10]
 80116bc:	2b01      	cmp	r3, #1
 80116be:	d002      	beq.n	80116c6 <snmp_complete_outbound_frame+0x1fa>
      /* error, we only reserved one byte for it */
      return ERR_ARG;
 80116c0:	f06f 030f 	mvn.w	r3, #15
 80116c4:	e0dd      	b.n	8011882 <snmp_complete_outbound_frame+0x3b6>
    }
    OF_BUILD_EXEC( snmp_pbuf_stream_seek_abs(&(request->outbound_pbuf_stream), request->outbound_error_status_offset) );
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80116d2:	4619      	mov	r1, r3
 80116d4:	4610      	mov	r0, r2
 80116d6:	f000 fc50 	bl	8011f7a <snmp_pbuf_stream_seek_abs>
 80116da:	4603      	mov	r3, r0
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d002      	beq.n	80116e6 <snmp_complete_outbound_frame+0x21a>
 80116e0:	f06f 030f 	mvn.w	r3, #15
 80116e4:	e0cd      	b.n	8011882 <snmp_complete_outbound_frame+0x3b6>
    OF_BUILD_EXEC( snmp_asn1_enc_s32t(&(request->outbound_pbuf_stream), len, request->error_status) );
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 80116ec:	8979      	ldrh	r1, [r7, #10]
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	69db      	ldr	r3, [r3, #28]
 80116f2:	461a      	mov	r2, r3
 80116f4:	f7fa fecf 	bl	800c496 <snmp_asn1_enc_s32t>
 80116f8:	4603      	mov	r3, r0
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d002      	beq.n	8011704 <snmp_complete_outbound_frame+0x238>
 80116fe:	f06f 030f 	mvn.w	r3, #15
 8011702:	e0be      	b.n	8011882 <snmp_complete_outbound_frame+0x3b6>

    /* for compatibility to v1, log statistics; in v2 (RFC 1907) these statistics are obsoleted */
    switch (request->error_status) {
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	69db      	ldr	r3, [r3, #28]
 8011708:	2b03      	cmp	r3, #3
 801170a:	d012      	beq.n	8011732 <snmp_complete_outbound_frame+0x266>
 801170c:	2b03      	cmp	r3, #3
 801170e:	dc16      	bgt.n	801173e <snmp_complete_outbound_frame+0x272>
 8011710:	2b01      	cmp	r3, #1
 8011712:	d002      	beq.n	801171a <snmp_complete_outbound_frame+0x24e>
 8011714:	2b02      	cmp	r3, #2
 8011716:	d006      	beq.n	8011726 <snmp_complete_outbound_frame+0x25a>
 8011718:	e011      	b.n	801173e <snmp_complete_outbound_frame+0x272>
      case SNMP_ERR_TOOBIG:
        snmp_stats.outtoobigs++;
 801171a:	4b16      	ldr	r3, [pc, #88]	@ (8011774 <snmp_complete_outbound_frame+0x2a8>)
 801171c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801171e:	3301      	adds	r3, #1
 8011720:	4a14      	ldr	r2, [pc, #80]	@ (8011774 <snmp_complete_outbound_frame+0x2a8>)
 8011722:	6493      	str	r3, [r2, #72]	@ 0x48
        break;
 8011724:	e011      	b.n	801174a <snmp_complete_outbound_frame+0x27e>
      case SNMP_ERR_NOSUCHNAME:
        snmp_stats.outnosuchnames++;
 8011726:	4b13      	ldr	r3, [pc, #76]	@ (8011774 <snmp_complete_outbound_frame+0x2a8>)
 8011728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801172a:	3301      	adds	r3, #1
 801172c:	4a11      	ldr	r2, [pc, #68]	@ (8011774 <snmp_complete_outbound_frame+0x2a8>)
 801172e:	64d3      	str	r3, [r2, #76]	@ 0x4c
        break;
 8011730:	e00b      	b.n	801174a <snmp_complete_outbound_frame+0x27e>
      case SNMP_ERR_BADVALUE:
        snmp_stats.outbadvalues++;
 8011732:	4b10      	ldr	r3, [pc, #64]	@ (8011774 <snmp_complete_outbound_frame+0x2a8>)
 8011734:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011736:	3301      	adds	r3, #1
 8011738:	4a0e      	ldr	r2, [pc, #56]	@ (8011774 <snmp_complete_outbound_frame+0x2a8>)
 801173a:	6513      	str	r3, [r2, #80]	@ 0x50
        break;
 801173c:	e005      	b.n	801174a <snmp_complete_outbound_frame+0x27e>
      case SNMP_ERR_GENERROR:
      default:
        snmp_stats.outgenerrs++;
 801173e:	4b0d      	ldr	r3, [pc, #52]	@ (8011774 <snmp_complete_outbound_frame+0x2a8>)
 8011740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011742:	3301      	adds	r3, #1
 8011744:	4a0b      	ldr	r2, [pc, #44]	@ (8011774 <snmp_complete_outbound_frame+0x2a8>)
 8011746:	6553      	str	r3, [r2, #84]	@ 0x54
        break;
 8011748:	bf00      	nop
    }

    if (request->error_status == SNMP_ERR_TOOBIG) {
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	69db      	ldr	r3, [r3, #28]
 801174e:	2b01      	cmp	r3, #1
 8011750:	d103      	bne.n	801175a <snmp_complete_outbound_frame+0x28e>
      request->error_index = 0; /* defined by RFC 1157 */
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	2200      	movs	r2, #0
 8011756:	621a      	str	r2, [r3, #32]
 8011758:	e021      	b.n	801179e <snmp_complete_outbound_frame+0x2d2>
    } else if (request->error_index == 0) {
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	6a1b      	ldr	r3, [r3, #32]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d11d      	bne.n	801179e <snmp_complete_outbound_frame+0x2d2>
      /* set index to varbind where error occured (if not already set before, e.g. during GetBulk processing) */
      request->error_index = request->inbound_varbind_enumerator.varbind_count;
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011766:	461a      	mov	r2, r3
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	621a      	str	r2, [r3, #32]
 801176c:	e017      	b.n	801179e <snmp_complete_outbound_frame+0x2d2>
 801176e:	bf00      	nop
 8011770:	00070840 	.word	0x00070840
 8011774:	2000a4e4 	.word	0x2000a4e4
    }
  } else {
    if (request->request_type == SNMP_ASN1_CONTEXT_PDU_SET_REQ) {
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	7d9b      	ldrb	r3, [r3, #22]
 801177c:	2b03      	cmp	r3, #3
 801177e:	d107      	bne.n	8011790 <snmp_complete_outbound_frame+0x2c4>
      snmp_stats.intotalsetvars += request->inbound_varbind_enumerator.varbind_count;
 8011780:	4b42      	ldr	r3, [pc, #264]	@ (801188c <snmp_complete_outbound_frame+0x3c0>)
 8011782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011784:	687a      	ldr	r2, [r7, #4]
 8011786:	8f12      	ldrh	r2, [r2, #56]	@ 0x38
 8011788:	4413      	add	r3, r2
 801178a:	4a40      	ldr	r2, [pc, #256]	@ (801188c <snmp_complete_outbound_frame+0x3c0>)
 801178c:	6313      	str	r3, [r2, #48]	@ 0x30
 801178e:	e006      	b.n	801179e <snmp_complete_outbound_frame+0x2d2>
    } else {
      snmp_stats.intotalreqvars += request->inbound_varbind_enumerator.varbind_count;
 8011790:	4b3e      	ldr	r3, [pc, #248]	@ (801188c <snmp_complete_outbound_frame+0x3c0>)
 8011792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011794:	687a      	ldr	r2, [r7, #4]
 8011796:	8f12      	ldrh	r2, [r2, #56]	@ 0x38
 8011798:	4413      	add	r3, r2
 801179a:	4a3c      	ldr	r2, [pc, #240]	@ (801188c <snmp_complete_outbound_frame+0x3c0>)
 801179c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }
  }

  /* encode final error index*/
  if (request->error_index != 0) {
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	6a1b      	ldr	r3, [r3, #32]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d02c      	beq.n	8011800 <snmp_complete_outbound_frame+0x334>
    u16_t len;
    snmp_asn1_enc_s32t_cnt(request->error_index, &len);
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	6a1b      	ldr	r3, [r3, #32]
 80117aa:	f107 0208 	add.w	r2, r7, #8
 80117ae:	4611      	mov	r1, r2
 80117b0:	4618      	mov	r0, r3
 80117b2:	f7fa ff7b 	bl	800c6ac <snmp_asn1_enc_s32t_cnt>
    if (len != 1) {
 80117b6:	893b      	ldrh	r3, [r7, #8]
 80117b8:	2b01      	cmp	r3, #1
 80117ba:	d002      	beq.n	80117c2 <snmp_complete_outbound_frame+0x2f6>
      /* error, we only reserved one byte for it */
      return ERR_VAL;
 80117bc:	f06f 0305 	mvn.w	r3, #5
 80117c0:	e05f      	b.n	8011882 <snmp_complete_outbound_frame+0x3b6>
    }
    OF_BUILD_EXEC( snmp_pbuf_stream_seek_abs(&(request->outbound_pbuf_stream), request->outbound_error_index_offset) );
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80117ce:	4619      	mov	r1, r3
 80117d0:	4610      	mov	r0, r2
 80117d2:	f000 fbd2 	bl	8011f7a <snmp_pbuf_stream_seek_abs>
 80117d6:	4603      	mov	r3, r0
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d002      	beq.n	80117e2 <snmp_complete_outbound_frame+0x316>
 80117dc:	f06f 030f 	mvn.w	r3, #15
 80117e0:	e04f      	b.n	8011882 <snmp_complete_outbound_frame+0x3b6>
    OF_BUILD_EXEC( snmp_asn1_enc_s32t(&(request->outbound_pbuf_stream), len, request->error_index) );
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 80117e8:	8939      	ldrh	r1, [r7, #8]
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	6a1b      	ldr	r3, [r3, #32]
 80117ee:	461a      	mov	r2, r3
 80117f0:	f7fa fe51 	bl	800c496 <snmp_asn1_enc_s32t>
 80117f4:	4603      	mov	r3, r0
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d002      	beq.n	8011800 <snmp_complete_outbound_frame+0x334>
 80117fa:	f06f 030f 	mvn.w	r3, #15
 80117fe:	e040      	b.n	8011882 <snmp_complete_outbound_frame+0x3b6>
  }

  /* complete missing length in 'VarBindList' sequence ; 'VarBindList' tlv is located directly before varbind offset */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_SEQUENCE, 3, frame_size - request->outbound_varbind_offset);
 8011800:	2330      	movs	r3, #48	@ 0x30
 8011802:	753b      	strb	r3, [r7, #20]
 8011804:	2300      	movs	r3, #0
 8011806:	757b      	strb	r3, [r7, #21]
 8011808:	2303      	movs	r3, #3
 801180a:	75bb      	strb	r3, [r7, #22]
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011812:	8bba      	ldrh	r2, [r7, #28]
 8011814:	1ad3      	subs	r3, r2, r3
 8011816:	b29b      	uxth	r3, r3
 8011818:	833b      	strh	r3, [r7, #24]
  OF_BUILD_EXEC( snmp_pbuf_stream_seek_abs(&(request->outbound_pbuf_stream), request->outbound_varbind_offset - 1 - 3) ); /* - type - length_len(fixed, see snmp_prepare_outbound_frame()) */
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011826:	3b04      	subs	r3, #4
 8011828:	4619      	mov	r1, r3
 801182a:	4610      	mov	r0, r2
 801182c:	f000 fba5 	bl	8011f7a <snmp_pbuf_stream_seek_abs>
 8011830:	4603      	mov	r3, r0
 8011832:	2b00      	cmp	r3, #0
 8011834:	d002      	beq.n	801183c <snmp_complete_outbound_frame+0x370>
 8011836:	f06f 030f 	mvn.w	r3, #15
 801183a:	e022      	b.n	8011882 <snmp_complete_outbound_frame+0x3b6>
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(&(request->outbound_pbuf_stream), &tlv) );
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	3348      	adds	r3, #72	@ 0x48
 8011840:	f107 0214 	add.w	r2, r7, #20
 8011844:	4611      	mov	r1, r2
 8011846:	4618      	mov	r0, r3
 8011848:	f7fa fcda 	bl	800c200 <snmp_ans1_enc_tlv>
 801184c:	4603      	mov	r3, r0
 801184e:	2b00      	cmp	r3, #0
 8011850:	d002      	beq.n	8011858 <snmp_complete_outbound_frame+0x38c>
 8011852:	f06f 030f 	mvn.w	r3, #15
 8011856:	e014      	b.n	8011882 <snmp_complete_outbound_frame+0x3b6>
    OF_BUILD_EXEC(snmp_asn1_enc_raw(&request->outbound_pbuf_stream,
                  request->msg_authentication_parameters, SNMP_V3_MAX_AUTH_PARAM_LENGTH));
  }
#endif

  pbuf_realloc(request->outbound_pbuf, frame_size + outbound_padding);
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 801185c:	7ffb      	ldrb	r3, [r7, #31]
 801185e:	b29a      	uxth	r2, r3
 8011860:	8bbb      	ldrh	r3, [r7, #28]
 8011862:	4413      	add	r3, r2
 8011864:	b29b      	uxth	r3, r3
 8011866:	4619      	mov	r1, r3
 8011868:	f002 fcbe 	bl	80141e8 <pbuf_realloc>

  snmp_stats.outgetresponses++;
 801186c:	4b07      	ldr	r3, [pc, #28]	@ (801188c <snmp_complete_outbound_frame+0x3c0>)
 801186e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011870:	3301      	adds	r3, #1
 8011872:	4a06      	ldr	r2, [pc, #24]	@ (801188c <snmp_complete_outbound_frame+0x3c0>)
 8011874:	6653      	str	r3, [r2, #100]	@ 0x64
  snmp_stats.outpkts++;
 8011876:	4b05      	ldr	r3, [pc, #20]	@ (801188c <snmp_complete_outbound_frame+0x3c0>)
 8011878:	685b      	ldr	r3, [r3, #4]
 801187a:	3301      	adds	r3, #1
 801187c:	4a03      	ldr	r2, [pc, #12]	@ (801188c <snmp_complete_outbound_frame+0x3c0>)
 801187e:	6053      	str	r3, [r2, #4]

  return ERR_OK;
 8011880:	2300      	movs	r3, #0
}
 8011882:	4618      	mov	r0, r3
 8011884:	3724      	adds	r7, #36	@ 0x24
 8011886:	46bd      	mov	sp, r7
 8011888:	bd90      	pop	{r4, r7, pc}
 801188a:	bf00      	nop
 801188c:	2000a4e4 	.word	0x2000a4e4

08011890 <snmp_execute_write_callbacks>:

static void 
snmp_execute_write_callbacks(struct snmp_request *request)
{
 8011890:	b590      	push	{r4, r7, lr}
 8011892:	b0bd      	sub	sp, #244	@ 0xf4
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]
  struct snmp_varbind_enumerator inbound_varbind_enumerator;
  struct snmp_varbind vb;

  snmp_vb_enumerator_init(&inbound_varbind_enumerator, request->inbound_pbuf, request->inbound_varbind_offset, request->inbound_varbind_len);
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80118a4:	f107 00e4 	add.w	r0, r7, #228	@ 0xe4
 80118a8:	f000 f824 	bl	80118f4 <snmp_vb_enumerator_init>
  vb.value = NULL; /* do NOT decode value (we enumerate outbound buffer here, so all varbinds have values assigned, which we don't need here) */
 80118ac:	2300      	movs	r3, #0
 80118ae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

  while (snmp_vb_enumerator_get_next(&inbound_varbind_enumerator, &vb) == SNMP_VB_ENUMERATOR_ERR_OK) {
 80118b2:	e00a      	b.n	80118ca <snmp_execute_write_callbacks+0x3a>
    snmp_write_callback(vb.oid.id, vb.oid.len, snmp_write_callback_arg);
 80118b4:	4b0d      	ldr	r3, [pc, #52]	@ (80118ec <snmp_execute_write_callbacks+0x5c>)
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	7c39      	ldrb	r1, [r7, #16]
 80118ba:	4a0d      	ldr	r2, [pc, #52]	@ (80118f0 <snmp_execute_write_callbacks+0x60>)
 80118bc:	6814      	ldr	r4, [r2, #0]
 80118be:	f107 0208 	add.w	r2, r7, #8
 80118c2:	f102 000c 	add.w	r0, r2, #12
 80118c6:	4622      	mov	r2, r4
 80118c8:	4798      	blx	r3
  while (snmp_vb_enumerator_get_next(&inbound_varbind_enumerator, &vb) == SNMP_VB_ENUMERATOR_ERR_OK) {
 80118ca:	f107 0208 	add.w	r2, r7, #8
 80118ce:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80118d2:	4611      	mov	r1, r2
 80118d4:	4618      	mov	r0, r3
 80118d6:	f000 f825 	bl	8011924 <snmp_vb_enumerator_get_next>
 80118da:	4603      	mov	r3, r0
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d0e9      	beq.n	80118b4 <snmp_execute_write_callbacks+0x24>
  }
}
 80118e0:	bf00      	nop
 80118e2:	bf00      	nop
 80118e4:	37f4      	adds	r7, #244	@ 0xf4
 80118e6:	46bd      	mov	sp, r7
 80118e8:	bd90      	pop	{r4, r7, pc}
 80118ea:	bf00      	nop
 80118ec:	2000a584 	.word	0x2000a584
 80118f0:	2000a588 	.word	0x2000a588

080118f4 <snmp_vb_enumerator_init>:
/* VarBind enumerator methods */
/* ----------------------------------------------------------------------- */

void
snmp_vb_enumerator_init(struct snmp_varbind_enumerator* enumerator, struct pbuf* p, u16_t offset, u16_t length)
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b084      	sub	sp, #16
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	60f8      	str	r0, [r7, #12]
 80118fc:	60b9      	str	r1, [r7, #8]
 80118fe:	4611      	mov	r1, r2
 8011900:	461a      	mov	r2, r3
 8011902:	460b      	mov	r3, r1
 8011904:	80fb      	strh	r3, [r7, #6]
 8011906:	4613      	mov	r3, r2
 8011908:	80bb      	strh	r3, [r7, #4]
  snmp_pbuf_stream_init(&(enumerator->pbuf_stream), p, offset, length);
 801190a:	68f8      	ldr	r0, [r7, #12]
 801190c:	88bb      	ldrh	r3, [r7, #4]
 801190e:	88fa      	ldrh	r2, [r7, #6]
 8011910:	68b9      	ldr	r1, [r7, #8]
 8011912:	f000 fa15 	bl	8011d40 <snmp_pbuf_stream_init>
  enumerator->varbind_count = 0;
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	2200      	movs	r2, #0
 801191a:	811a      	strh	r2, [r3, #8]
}
 801191c:	bf00      	nop
 801191e:	3710      	adds	r7, #16
 8011920:	46bd      	mov	sp, r7
 8011922:	bd80      	pop	{r7, pc}

08011924 <snmp_vb_enumerator_get_next>:
#define VB_PARSE_EXEC(code)   PARSE_EXEC(code, SNMP_VB_ENUMERATOR_ERR_ASN1ERROR)
#define VB_PARSE_ASSERT(code) PARSE_ASSERT(code, SNMP_VB_ENUMERATOR_ERR_ASN1ERROR)

snmp_vb_enumerator_err_t
snmp_vb_enumerator_get_next(struct snmp_varbind_enumerator* enumerator, struct snmp_varbind* varbind)
{
 8011924:	b590      	push	{r4, r7, lr}
 8011926:	b089      	sub	sp, #36	@ 0x24
 8011928:	af02      	add	r7, sp, #8
 801192a:	6078      	str	r0, [r7, #4]
 801192c:	6039      	str	r1, [r7, #0]
  struct snmp_asn1_tlv tlv;
  u16_t  varbind_len;
  err_t  err;
  
  if (enumerator->pbuf_stream.length == 0)
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	88db      	ldrh	r3, [r3, #6]
 8011932:	2b00      	cmp	r3, #0
 8011934:	d101      	bne.n	801193a <snmp_vb_enumerator_get_next+0x16>
  {
    return SNMP_VB_ENUMERATOR_ERR_EOVB;
 8011936:	2301      	movs	r3, #1
 8011938:	e1fc      	b.n	8011d34 <snmp_vb_enumerator_get_next+0x410>
  }
  enumerator->varbind_count++;
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	891b      	ldrh	r3, [r3, #8]
 801193e:	3301      	adds	r3, #1
 8011940:	b29a      	uxth	r2, r3
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	811a      	strh	r2, [r3, #8]

  /* decode varbind itself (parent container of a varbind) */
  VB_PARSE_EXEC(snmp_asn1_dec_tlv(&(enumerator->pbuf_stream), &tlv));
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	f107 020c 	add.w	r2, r7, #12
 801194c:	4611      	mov	r1, r2
 801194e:	4618      	mov	r0, r3
 8011950:	f7fa ff18 	bl	800c784 <snmp_asn1_dec_tlv>
 8011954:	4603      	mov	r3, r0
 8011956:	2b00      	cmp	r3, #0
 8011958:	d006      	beq.n	8011968 <snmp_vb_enumerator_get_next+0x44>
 801195a:	4bb9      	ldr	r3, [pc, #740]	@ (8011c40 <snmp_vb_enumerator_get_next+0x31c>)
 801195c:	695b      	ldr	r3, [r3, #20]
 801195e:	3301      	adds	r3, #1
 8011960:	4ab7      	ldr	r2, [pc, #732]	@ (8011c40 <snmp_vb_enumerator_get_next+0x31c>)
 8011962:	6153      	str	r3, [r2, #20]
 8011964:	2302      	movs	r3, #2
 8011966:	e1e5      	b.n	8011d34 <snmp_vb_enumerator_get_next+0x410>
  VB_PARSE_ASSERT((tlv.type == SNMP_ASN1_TYPE_SEQUENCE) && (tlv.value_len <= enumerator->pbuf_stream.length));
 8011968:	7b3b      	ldrb	r3, [r7, #12]
 801196a:	2b30      	cmp	r3, #48	@ 0x30
 801196c:	d104      	bne.n	8011978 <snmp_vb_enumerator_get_next+0x54>
 801196e:	8a3a      	ldrh	r2, [r7, #16]
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	88db      	ldrh	r3, [r3, #6]
 8011974:	429a      	cmp	r2, r3
 8011976:	d906      	bls.n	8011986 <snmp_vb_enumerator_get_next+0x62>
 8011978:	4bb1      	ldr	r3, [pc, #708]	@ (8011c40 <snmp_vb_enumerator_get_next+0x31c>)
 801197a:	695b      	ldr	r3, [r3, #20]
 801197c:	3301      	adds	r3, #1
 801197e:	4ab0      	ldr	r2, [pc, #704]	@ (8011c40 <snmp_vb_enumerator_get_next+0x31c>)
 8011980:	6153      	str	r3, [r2, #20]
 8011982:	2302      	movs	r3, #2
 8011984:	e1d6      	b.n	8011d34 <snmp_vb_enumerator_get_next+0x410>
  varbind_len = tlv.value_len;
 8011986:	8a3b      	ldrh	r3, [r7, #16]
 8011988:	82fb      	strh	r3, [r7, #22]

  /* decode varbind name (object id) */
  VB_PARSE_EXEC(snmp_asn1_dec_tlv(&(enumerator->pbuf_stream), &tlv));
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	f107 020c 	add.w	r2, r7, #12
 8011990:	4611      	mov	r1, r2
 8011992:	4618      	mov	r0, r3
 8011994:	f7fa fef6 	bl	800c784 <snmp_asn1_dec_tlv>
 8011998:	4603      	mov	r3, r0
 801199a:	2b00      	cmp	r3, #0
 801199c:	d006      	beq.n	80119ac <snmp_vb_enumerator_get_next+0x88>
 801199e:	4ba8      	ldr	r3, [pc, #672]	@ (8011c40 <snmp_vb_enumerator_get_next+0x31c>)
 80119a0:	695b      	ldr	r3, [r3, #20]
 80119a2:	3301      	adds	r3, #1
 80119a4:	4aa6      	ldr	r2, [pc, #664]	@ (8011c40 <snmp_vb_enumerator_get_next+0x31c>)
 80119a6:	6153      	str	r3, [r2, #20]
 80119a8:	2302      	movs	r3, #2
 80119aa:	e1c3      	b.n	8011d34 <snmp_vb_enumerator_get_next+0x410>
  VB_PARSE_ASSERT((tlv.type == SNMP_ASN1_TYPE_OBJECT_ID) && (SNMP_ASN1_TLV_LENGTH(tlv) < varbind_len) && (tlv.value_len < enumerator->pbuf_stream.length));
 80119ac:	7b3b      	ldrb	r3, [r7, #12]
 80119ae:	2b06      	cmp	r3, #6
 80119b0:	d10d      	bne.n	80119ce <snmp_vb_enumerator_get_next+0xaa>
 80119b2:	7b7b      	ldrb	r3, [r7, #13]
 80119b4:	461a      	mov	r2, r3
 80119b6:	7bbb      	ldrb	r3, [r7, #14]
 80119b8:	4413      	add	r3, r2
 80119ba:	8a3a      	ldrh	r2, [r7, #16]
 80119bc:	441a      	add	r2, r3
 80119be:	8afb      	ldrh	r3, [r7, #22]
 80119c0:	429a      	cmp	r2, r3
 80119c2:	da04      	bge.n	80119ce <snmp_vb_enumerator_get_next+0xaa>
 80119c4:	8a3a      	ldrh	r2, [r7, #16]
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	88db      	ldrh	r3, [r3, #6]
 80119ca:	429a      	cmp	r2, r3
 80119cc:	d306      	bcc.n	80119dc <snmp_vb_enumerator_get_next+0xb8>
 80119ce:	4b9c      	ldr	r3, [pc, #624]	@ (8011c40 <snmp_vb_enumerator_get_next+0x31c>)
 80119d0:	695b      	ldr	r3, [r3, #20]
 80119d2:	3301      	adds	r3, #1
 80119d4:	4a9a      	ldr	r2, [pc, #616]	@ (8011c40 <snmp_vb_enumerator_get_next+0x31c>)
 80119d6:	6153      	str	r3, [r2, #20]
 80119d8:	2302      	movs	r3, #2
 80119da:	e1ab      	b.n	8011d34 <snmp_vb_enumerator_get_next+0x410>
   
  VB_PARSE_EXEC(snmp_asn1_dec_oid(&(enumerator->pbuf_stream), tlv.value_len, varbind->oid.id, &(varbind->oid.len), SNMP_MAX_OBJ_ID_LEN));
 80119dc:	6878      	ldr	r0, [r7, #4]
 80119de:	8a39      	ldrh	r1, [r7, #16]
 80119e0:	683b      	ldr	r3, [r7, #0]
 80119e2:	f103 020c 	add.w	r2, r3, #12
 80119e6:	683b      	ldr	r3, [r7, #0]
 80119e8:	3308      	adds	r3, #8
 80119ea:	2432      	movs	r4, #50	@ 0x32
 80119ec:	9400      	str	r4, [sp, #0]
 80119ee:	f7fb f872 	bl	800cad6 <snmp_asn1_dec_oid>
 80119f2:	4603      	mov	r3, r0
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d006      	beq.n	8011a06 <snmp_vb_enumerator_get_next+0xe2>
 80119f8:	4b91      	ldr	r3, [pc, #580]	@ (8011c40 <snmp_vb_enumerator_get_next+0x31c>)
 80119fa:	695b      	ldr	r3, [r3, #20]
 80119fc:	3301      	adds	r3, #1
 80119fe:	4a90      	ldr	r2, [pc, #576]	@ (8011c40 <snmp_vb_enumerator_get_next+0x31c>)
 8011a00:	6153      	str	r3, [r2, #20]
 8011a02:	2302      	movs	r3, #2
 8011a04:	e196      	b.n	8011d34 <snmp_vb_enumerator_get_next+0x410>
  varbind_len -= SNMP_ASN1_TLV_LENGTH(tlv);
 8011a06:	7b7b      	ldrb	r3, [r7, #13]
 8011a08:	461a      	mov	r2, r3
 8011a0a:	7bbb      	ldrb	r3, [r7, #14]
 8011a0c:	4413      	add	r3, r2
 8011a0e:	b29a      	uxth	r2, r3
 8011a10:	8a3b      	ldrh	r3, [r7, #16]
 8011a12:	4413      	add	r3, r2
 8011a14:	b29b      	uxth	r3, r3
 8011a16:	8afa      	ldrh	r2, [r7, #22]
 8011a18:	1ad3      	subs	r3, r2, r3
 8011a1a:	82fb      	strh	r3, [r7, #22]

  /* decode varbind value (object id) */
  VB_PARSE_EXEC(snmp_asn1_dec_tlv(&(enumerator->pbuf_stream), &tlv));
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	f107 020c 	add.w	r2, r7, #12
 8011a22:	4611      	mov	r1, r2
 8011a24:	4618      	mov	r0, r3
 8011a26:	f7fa fead 	bl	800c784 <snmp_asn1_dec_tlv>
 8011a2a:	4603      	mov	r3, r0
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d006      	beq.n	8011a3e <snmp_vb_enumerator_get_next+0x11a>
 8011a30:	4b83      	ldr	r3, [pc, #524]	@ (8011c40 <snmp_vb_enumerator_get_next+0x31c>)
 8011a32:	695b      	ldr	r3, [r3, #20]
 8011a34:	3301      	adds	r3, #1
 8011a36:	4a82      	ldr	r2, [pc, #520]	@ (8011c40 <snmp_vb_enumerator_get_next+0x31c>)
 8011a38:	6153      	str	r3, [r2, #20]
 8011a3a:	2302      	movs	r3, #2
 8011a3c:	e17a      	b.n	8011d34 <snmp_vb_enumerator_get_next+0x410>
  VB_PARSE_ASSERT((SNMP_ASN1_TLV_LENGTH(tlv) == varbind_len) && (tlv.value_len <= enumerator->pbuf_stream.length));
 8011a3e:	7b7b      	ldrb	r3, [r7, #13]
 8011a40:	461a      	mov	r2, r3
 8011a42:	7bbb      	ldrb	r3, [r7, #14]
 8011a44:	4413      	add	r3, r2
 8011a46:	8a3a      	ldrh	r2, [r7, #16]
 8011a48:	441a      	add	r2, r3
 8011a4a:	8afb      	ldrh	r3, [r7, #22]
 8011a4c:	429a      	cmp	r2, r3
 8011a4e:	d104      	bne.n	8011a5a <snmp_vb_enumerator_get_next+0x136>
 8011a50:	8a3a      	ldrh	r2, [r7, #16]
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	88db      	ldrh	r3, [r3, #6]
 8011a56:	429a      	cmp	r2, r3
 8011a58:	d906      	bls.n	8011a68 <snmp_vb_enumerator_get_next+0x144>
 8011a5a:	4b79      	ldr	r3, [pc, #484]	@ (8011c40 <snmp_vb_enumerator_get_next+0x31c>)
 8011a5c:	695b      	ldr	r3, [r3, #20]
 8011a5e:	3301      	adds	r3, #1
 8011a60:	4a77      	ldr	r2, [pc, #476]	@ (8011c40 <snmp_vb_enumerator_get_next+0x31c>)
 8011a62:	6153      	str	r3, [r2, #20]
 8011a64:	2302      	movs	r3, #2
 8011a66:	e165      	b.n	8011d34 <snmp_vb_enumerator_get_next+0x410>
  varbind->type = tlv.type;
 8011a68:	7b3a      	ldrb	r2, [r7, #12]
 8011a6a:	683b      	ldr	r3, [r7, #0]
 8011a6c:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4

  /* shall the value be decoded ? */
  if (varbind->value != NULL) {
 8011a70:	683b      	ldr	r3, [r7, #0]
 8011a72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	f000 814d 	beq.w	8011d16 <snmp_vb_enumerator_get_next+0x3f2>
    switch (varbind->type) {
 8011a7c:	683b      	ldr	r3, [r7, #0]
 8011a7e:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 8011a82:	3b02      	subs	r3, #2
 8011a84:	2b44      	cmp	r3, #68	@ 0x44
 8011a86:	f200 813f 	bhi.w	8011d08 <snmp_vb_enumerator_get_next+0x3e4>
 8011a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8011a90 <snmp_vb_enumerator_get_next+0x16c>)
 8011a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a90:	08011ba5 	.word	0x08011ba5
 8011a94:	08011d09 	.word	0x08011d09
 8011a98:	08011c01 	.word	0x08011c01
 8011a9c:	08011c45 	.word	0x08011c45
 8011aa0:	08011c4f 	.word	0x08011c4f
 8011aa4:	08011d09 	.word	0x08011d09
 8011aa8:	08011d09 	.word	0x08011d09
 8011aac:	08011d09 	.word	0x08011d09
 8011ab0:	08011d09 	.word	0x08011d09
 8011ab4:	08011d09 	.word	0x08011d09
 8011ab8:	08011d09 	.word	0x08011d09
 8011abc:	08011d09 	.word	0x08011d09
 8011ac0:	08011d09 	.word	0x08011d09
 8011ac4:	08011d09 	.word	0x08011d09
 8011ac8:	08011d09 	.word	0x08011d09
 8011acc:	08011d09 	.word	0x08011d09
 8011ad0:	08011d09 	.word	0x08011d09
 8011ad4:	08011d09 	.word	0x08011d09
 8011ad8:	08011d09 	.word	0x08011d09
 8011adc:	08011d09 	.word	0x08011d09
 8011ae0:	08011d09 	.word	0x08011d09
 8011ae4:	08011d09 	.word	0x08011d09
 8011ae8:	08011d09 	.word	0x08011d09
 8011aec:	08011d09 	.word	0x08011d09
 8011af0:	08011d09 	.word	0x08011d09
 8011af4:	08011d09 	.word	0x08011d09
 8011af8:	08011d09 	.word	0x08011d09
 8011afc:	08011d09 	.word	0x08011d09
 8011b00:	08011d09 	.word	0x08011d09
 8011b04:	08011d09 	.word	0x08011d09
 8011b08:	08011d09 	.word	0x08011d09
 8011b0c:	08011d09 	.word	0x08011d09
 8011b10:	08011d09 	.word	0x08011d09
 8011b14:	08011d09 	.word	0x08011d09
 8011b18:	08011d09 	.word	0x08011d09
 8011b1c:	08011d09 	.word	0x08011d09
 8011b20:	08011d09 	.word	0x08011d09
 8011b24:	08011d09 	.word	0x08011d09
 8011b28:	08011d09 	.word	0x08011d09
 8011b2c:	08011d09 	.word	0x08011d09
 8011b30:	08011d09 	.word	0x08011d09
 8011b34:	08011d09 	.word	0x08011d09
 8011b38:	08011d09 	.word	0x08011d09
 8011b3c:	08011d09 	.word	0x08011d09
 8011b40:	08011d09 	.word	0x08011d09
 8011b44:	08011d09 	.word	0x08011d09
 8011b48:	08011d09 	.word	0x08011d09
 8011b4c:	08011d09 	.word	0x08011d09
 8011b50:	08011d09 	.word	0x08011d09
 8011b54:	08011d09 	.word	0x08011d09
 8011b58:	08011d09 	.word	0x08011d09
 8011b5c:	08011d09 	.word	0x08011d09
 8011b60:	08011d09 	.word	0x08011d09
 8011b64:	08011d09 	.word	0x08011d09
 8011b68:	08011d09 	.word	0x08011d09
 8011b6c:	08011d09 	.word	0x08011d09
 8011b70:	08011d09 	.word	0x08011d09
 8011b74:	08011d09 	.word	0x08011d09
 8011b78:	08011d09 	.word	0x08011d09
 8011b7c:	08011d09 	.word	0x08011d09
 8011b80:	08011d09 	.word	0x08011d09
 8011b84:	08011d09 	.word	0x08011d09
 8011b88:	08011c9d 	.word	0x08011c9d
 8011b8c:	08011bd3 	.word	0x08011bd3
 8011b90:	08011bd3 	.word	0x08011bd3
 8011b94:	08011bd3 	.word	0x08011bd3
 8011b98:	08011c01 	.word	0x08011c01
 8011b9c:	08011d09 	.word	0x08011d09
 8011ba0:	08011cdb 	.word	0x08011cdb
      case SNMP_ASN1_TYPE_INTEGER:
        VB_PARSE_EXEC(snmp_asn1_dec_s32t(&(enumerator->pbuf_stream), tlv.value_len, (s32_t*)varbind->value));
 8011ba4:	6878      	ldr	r0, [r7, #4]
 8011ba6:	8a39      	ldrh	r1, [r7, #16]
 8011ba8:	683b      	ldr	r3, [r7, #0]
 8011baa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011bae:	461a      	mov	r2, r3
 8011bb0:	f7fa ff20 	bl	800c9f4 <snmp_asn1_dec_s32t>
 8011bb4:	4603      	mov	r3, r0
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d006      	beq.n	8011bc8 <snmp_vb_enumerator_get_next+0x2a4>
 8011bba:	4b21      	ldr	r3, [pc, #132]	@ (8011c40 <snmp_vb_enumerator_get_next+0x31c>)
 8011bbc:	695b      	ldr	r3, [r3, #20]
 8011bbe:	3301      	adds	r3, #1
 8011bc0:	4a1f      	ldr	r2, [pc, #124]	@ (8011c40 <snmp_vb_enumerator_get_next+0x31c>)
 8011bc2:	6153      	str	r3, [r2, #20]
 8011bc4:	2302      	movs	r3, #2
 8011bc6:	e0b5      	b.n	8011d34 <snmp_vb_enumerator_get_next+0x410>
        varbind->value_len = sizeof(s32_t*);
 8011bc8:	683b      	ldr	r3, [r7, #0]
 8011bca:	2204      	movs	r2, #4
 8011bcc:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
        break;
 8011bd0:	e0af      	b.n	8011d32 <snmp_vb_enumerator_get_next+0x40e>
      case SNMP_ASN1_TYPE_COUNTER:
      case SNMP_ASN1_TYPE_GAUGE:
      case SNMP_ASN1_TYPE_TIMETICKS:
        VB_PARSE_EXEC(snmp_asn1_dec_u32t(&(enumerator->pbuf_stream), tlv.value_len, (u32_t*)varbind->value));
 8011bd2:	6878      	ldr	r0, [r7, #4]
 8011bd4:	8a39      	ldrh	r1, [r7, #16]
 8011bd6:	683b      	ldr	r3, [r7, #0]
 8011bd8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011bdc:	461a      	mov	r2, r3
 8011bde:	f7fa fe50 	bl	800c882 <snmp_asn1_dec_u32t>
 8011be2:	4603      	mov	r3, r0
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d006      	beq.n	8011bf6 <snmp_vb_enumerator_get_next+0x2d2>
 8011be8:	4b15      	ldr	r3, [pc, #84]	@ (8011c40 <snmp_vb_enumerator_get_next+0x31c>)
 8011bea:	695b      	ldr	r3, [r3, #20]
 8011bec:	3301      	adds	r3, #1
 8011bee:	4a14      	ldr	r2, [pc, #80]	@ (8011c40 <snmp_vb_enumerator_get_next+0x31c>)
 8011bf0:	6153      	str	r3, [r2, #20]
 8011bf2:	2302      	movs	r3, #2
 8011bf4:	e09e      	b.n	8011d34 <snmp_vb_enumerator_get_next+0x410>
        varbind->value_len = sizeof(u32_t*);
 8011bf6:	683b      	ldr	r3, [r7, #0]
 8011bf8:	2204      	movs	r2, #4
 8011bfa:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
        break;
 8011bfe:	e098      	b.n	8011d32 <snmp_vb_enumerator_get_next+0x40e>
      case SNMP_ASN1_TYPE_OCTET_STRING:
      case SNMP_ASN1_TYPE_OPAQUE:
        err = snmp_asn1_dec_raw(&(enumerator->pbuf_stream), tlv.value_len, (u8_t*)varbind->value, &varbind->value_len, SNMP_MAX_VALUE_SIZE);
 8011c00:	6878      	ldr	r0, [r7, #4]
 8011c02:	8a39      	ldrh	r1, [r7, #16]
 8011c04:	683b      	ldr	r3, [r7, #0]
 8011c06:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8011c0a:	683b      	ldr	r3, [r7, #0]
 8011c0c:	33d6      	adds	r3, #214	@ 0xd6
 8011c0e:	24c8      	movs	r4, #200	@ 0xc8
 8011c10:	9400      	str	r4, [sp, #0]
 8011c12:	f7fb f82e 	bl	800cc72 <snmp_asn1_dec_raw>
 8011c16:	4603      	mov	r3, r0
 8011c18:	757b      	strb	r3, [r7, #21]
        if (err == ERR_MEM) {
 8011c1a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8011c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c22:	d101      	bne.n	8011c28 <snmp_vb_enumerator_get_next+0x304>
          return SNMP_VB_ENUMERATOR_ERR_INVALIDLENGTH;
 8011c24:	2303      	movs	r3, #3
 8011c26:	e085      	b.n	8011d34 <snmp_vb_enumerator_get_next+0x410>
        }
        VB_PARSE_ASSERT(err == ERR_OK);
 8011c28:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d07d      	beq.n	8011d2c <snmp_vb_enumerator_get_next+0x408>
 8011c30:	4b03      	ldr	r3, [pc, #12]	@ (8011c40 <snmp_vb_enumerator_get_next+0x31c>)
 8011c32:	695b      	ldr	r3, [r3, #20]
 8011c34:	3301      	adds	r3, #1
 8011c36:	4a02      	ldr	r2, [pc, #8]	@ (8011c40 <snmp_vb_enumerator_get_next+0x31c>)
 8011c38:	6153      	str	r3, [r2, #20]
 8011c3a:	2302      	movs	r3, #2
 8011c3c:	e07a      	b.n	8011d34 <snmp_vb_enumerator_get_next+0x410>
 8011c3e:	bf00      	nop
 8011c40:	2000a4e4 	.word	0x2000a4e4
        break;
      case SNMP_ASN1_TYPE_NULL:
        varbind->value_len = 0;
 8011c44:	683b      	ldr	r3, [r7, #0]
 8011c46:	2200      	movs	r2, #0
 8011c48:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
        break;
 8011c4c:	e071      	b.n	8011d32 <snmp_vb_enumerator_get_next+0x40e>
      case SNMP_ASN1_TYPE_OBJECT_ID:
        /* misuse tlv.length_len as OID_length transporter */
        err = snmp_asn1_dec_oid(&(enumerator->pbuf_stream), tlv.value_len, (u32_t*)varbind->value, &tlv.length_len, SNMP_MAX_OBJ_ID_LEN);
 8011c4e:	6878      	ldr	r0, [r7, #4]
 8011c50:	8a39      	ldrh	r1, [r7, #16]
 8011c52:	683b      	ldr	r3, [r7, #0]
 8011c54:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8011c58:	f107 030c 	add.w	r3, r7, #12
 8011c5c:	3302      	adds	r3, #2
 8011c5e:	2432      	movs	r4, #50	@ 0x32
 8011c60:	9400      	str	r4, [sp, #0]
 8011c62:	f7fa ff38 	bl	800cad6 <snmp_asn1_dec_oid>
 8011c66:	4603      	mov	r3, r0
 8011c68:	757b      	strb	r3, [r7, #21]
        if (err == ERR_MEM) {
 8011c6a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8011c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c72:	d101      	bne.n	8011c78 <snmp_vb_enumerator_get_next+0x354>
          return SNMP_VB_ENUMERATOR_ERR_INVALIDLENGTH;
 8011c74:	2303      	movs	r3, #3
 8011c76:	e05d      	b.n	8011d34 <snmp_vb_enumerator_get_next+0x410>
        }
        VB_PARSE_ASSERT(err == ERR_OK);
 8011c78:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d006      	beq.n	8011c8e <snmp_vb_enumerator_get_next+0x36a>
 8011c80:	4b2e      	ldr	r3, [pc, #184]	@ (8011d3c <snmp_vb_enumerator_get_next+0x418>)
 8011c82:	695b      	ldr	r3, [r3, #20]
 8011c84:	3301      	adds	r3, #1
 8011c86:	4a2d      	ldr	r2, [pc, #180]	@ (8011d3c <snmp_vb_enumerator_get_next+0x418>)
 8011c88:	6153      	str	r3, [r2, #20]
 8011c8a:	2302      	movs	r3, #2
 8011c8c:	e052      	b.n	8011d34 <snmp_vb_enumerator_get_next+0x410>
        varbind->value_len = tlv.length_len * sizeof(u32_t);
 8011c8e:	7bbb      	ldrb	r3, [r7, #14]
 8011c90:	009b      	lsls	r3, r3, #2
 8011c92:	b29a      	uxth	r2, r3
 8011c94:	683b      	ldr	r3, [r7, #0]
 8011c96:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
        break;
 8011c9a:	e04a      	b.n	8011d32 <snmp_vb_enumerator_get_next+0x40e>
      case SNMP_ASN1_TYPE_IPADDR:
        if (tlv.value_len == 4) {
 8011c9c:	8a3b      	ldrh	r3, [r7, #16]
 8011c9e:	2b04      	cmp	r3, #4
 8011ca0:	d114      	bne.n	8011ccc <snmp_vb_enumerator_get_next+0x3a8>
          /* must be exactly 4 octets! */
          VB_PARSE_EXEC(snmp_asn1_dec_raw(&(enumerator->pbuf_stream), tlv.value_len, (u8_t*)varbind->value, &varbind->value_len, SNMP_MAX_VALUE_SIZE));
 8011ca2:	6878      	ldr	r0, [r7, #4]
 8011ca4:	8a39      	ldrh	r1, [r7, #16]
 8011ca6:	683b      	ldr	r3, [r7, #0]
 8011ca8:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8011cac:	683b      	ldr	r3, [r7, #0]
 8011cae:	33d6      	adds	r3, #214	@ 0xd6
 8011cb0:	24c8      	movs	r4, #200	@ 0xc8
 8011cb2:	9400      	str	r4, [sp, #0]
 8011cb4:	f7fa ffdd 	bl	800cc72 <snmp_asn1_dec_raw>
 8011cb8:	4603      	mov	r3, r0
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d038      	beq.n	8011d30 <snmp_vb_enumerator_get_next+0x40c>
 8011cbe:	4b1f      	ldr	r3, [pc, #124]	@ (8011d3c <snmp_vb_enumerator_get_next+0x418>)
 8011cc0:	695b      	ldr	r3, [r3, #20]
 8011cc2:	3301      	adds	r3, #1
 8011cc4:	4a1d      	ldr	r2, [pc, #116]	@ (8011d3c <snmp_vb_enumerator_get_next+0x418>)
 8011cc6:	6153      	str	r3, [r2, #20]
 8011cc8:	2302      	movs	r3, #2
 8011cca:	e033      	b.n	8011d34 <snmp_vb_enumerator_get_next+0x410>
        } else {
          VB_PARSE_ASSERT(0);
 8011ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8011d3c <snmp_vb_enumerator_get_next+0x418>)
 8011cce:	695b      	ldr	r3, [r3, #20]
 8011cd0:	3301      	adds	r3, #1
 8011cd2:	4a1a      	ldr	r2, [pc, #104]	@ (8011d3c <snmp_vb_enumerator_get_next+0x418>)
 8011cd4:	6153      	str	r3, [r2, #20]
 8011cd6:	2302      	movs	r3, #2
 8011cd8:	e02c      	b.n	8011d34 <snmp_vb_enumerator_get_next+0x410>
        }
        break;
      case SNMP_ASN1_TYPE_COUNTER64:
        VB_PARSE_EXEC(snmp_asn1_dec_u64t(&(enumerator->pbuf_stream), tlv.value_len, (u32_t*)varbind->value));
 8011cda:	6878      	ldr	r0, [r7, #4]
 8011cdc:	8a39      	ldrh	r1, [r7, #16]
 8011cde:	683b      	ldr	r3, [r7, #0]
 8011ce0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011ce4:	461a      	mov	r2, r3
 8011ce6:	f7fa fe1f 	bl	800c928 <snmp_asn1_dec_u64t>
 8011cea:	4603      	mov	r3, r0
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d006      	beq.n	8011cfe <snmp_vb_enumerator_get_next+0x3da>
 8011cf0:	4b12      	ldr	r3, [pc, #72]	@ (8011d3c <snmp_vb_enumerator_get_next+0x418>)
 8011cf2:	695b      	ldr	r3, [r3, #20]
 8011cf4:	3301      	adds	r3, #1
 8011cf6:	4a11      	ldr	r2, [pc, #68]	@ (8011d3c <snmp_vb_enumerator_get_next+0x418>)
 8011cf8:	6153      	str	r3, [r2, #20]
 8011cfa:	2302      	movs	r3, #2
 8011cfc:	e01a      	b.n	8011d34 <snmp_vb_enumerator_get_next+0x410>
        varbind->value_len = 2 * sizeof(u32_t*);
 8011cfe:	683b      	ldr	r3, [r7, #0]
 8011d00:	2208      	movs	r2, #8
 8011d02:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
        break;
 8011d06:	e014      	b.n	8011d32 <snmp_vb_enumerator_get_next+0x40e>
      default:
        VB_PARSE_ASSERT(0);
 8011d08:	4b0c      	ldr	r3, [pc, #48]	@ (8011d3c <snmp_vb_enumerator_get_next+0x418>)
 8011d0a:	695b      	ldr	r3, [r3, #20]
 8011d0c:	3301      	adds	r3, #1
 8011d0e:	4a0b      	ldr	r2, [pc, #44]	@ (8011d3c <snmp_vb_enumerator_get_next+0x418>)
 8011d10:	6153      	str	r3, [r2, #20]
 8011d12:	2302      	movs	r3, #2
 8011d14:	e00e      	b.n	8011d34 <snmp_vb_enumerator_get_next+0x410>
        break;
    }
  } else {
    snmp_pbuf_stream_seek(&(enumerator->pbuf_stream), tlv.value_len);
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	8a3a      	ldrh	r2, [r7, #16]
 8011d1a:	4611      	mov	r1, r2
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	f000 f905 	bl	8011f2c <snmp_pbuf_stream_seek>
    varbind->value_len = tlv.value_len;
 8011d22:	8a3a      	ldrh	r2, [r7, #16]
 8011d24:	683b      	ldr	r3, [r7, #0]
 8011d26:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
 8011d2a:	e002      	b.n	8011d32 <snmp_vb_enumerator_get_next+0x40e>
        break;
 8011d2c:	bf00      	nop
 8011d2e:	e000      	b.n	8011d32 <snmp_vb_enumerator_get_next+0x40e>
        break;
 8011d30:	bf00      	nop
  }

  return SNMP_VB_ENUMERATOR_ERR_OK;
 8011d32:	2300      	movs	r3, #0
}
 8011d34:	4618      	mov	r0, r3
 8011d36:	371c      	adds	r7, #28
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	bd90      	pop	{r4, r7, pc}
 8011d3c:	2000a4e4 	.word	0x2000a4e4

08011d40 <snmp_pbuf_stream_init>:
#include "lwip/def.h"
#include <string.h>

err_t
snmp_pbuf_stream_init(struct snmp_pbuf_stream* pbuf_stream, struct pbuf* p, u16_t offset, u16_t length)
{
 8011d40:	b480      	push	{r7}
 8011d42:	b085      	sub	sp, #20
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	60f8      	str	r0, [r7, #12]
 8011d48:	60b9      	str	r1, [r7, #8]
 8011d4a:	4611      	mov	r1, r2
 8011d4c:	461a      	mov	r2, r3
 8011d4e:	460b      	mov	r3, r1
 8011d50:	80fb      	strh	r3, [r7, #6]
 8011d52:	4613      	mov	r3, r2
 8011d54:	80bb      	strh	r3, [r7, #4]
  pbuf_stream->offset = offset;
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	88fa      	ldrh	r2, [r7, #6]
 8011d5a:	809a      	strh	r2, [r3, #4]
  pbuf_stream->length = length;
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	88ba      	ldrh	r2, [r7, #4]
 8011d60:	80da      	strh	r2, [r3, #6]
  pbuf_stream->pbuf   = p;
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	68ba      	ldr	r2, [r7, #8]
 8011d66:	601a      	str	r2, [r3, #0]

  return ERR_OK;
 8011d68:	2300      	movs	r3, #0
}
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	3714      	adds	r7, #20
 8011d6e:	46bd      	mov	sp, r7
 8011d70:	bc80      	pop	{r7}
 8011d72:	4770      	bx	lr

08011d74 <snmp_pbuf_stream_read>:

err_t
snmp_pbuf_stream_read(struct snmp_pbuf_stream* pbuf_stream, u8_t* data)
{
 8011d74:	b580      	push	{r7, lr}
 8011d76:	b082      	sub	sp, #8
 8011d78:	af00      	add	r7, sp, #0
 8011d7a:	6078      	str	r0, [r7, #4]
 8011d7c:	6039      	str	r1, [r7, #0]
  if (pbuf_stream->length == 0) {
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	88db      	ldrh	r3, [r3, #6]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d102      	bne.n	8011d8c <snmp_pbuf_stream_read+0x18>
    return ERR_BUF;
 8011d86:	f06f 0301 	mvn.w	r3, #1
 8011d8a:	e01a      	b.n	8011dc2 <snmp_pbuf_stream_read+0x4e>
  }

  if (pbuf_copy_partial(pbuf_stream->pbuf, data, 1, pbuf_stream->offset) == 0) {
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	6818      	ldr	r0, [r3, #0]
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	889b      	ldrh	r3, [r3, #4]
 8011d94:	2201      	movs	r2, #1
 8011d96:	6839      	ldr	r1, [r7, #0]
 8011d98:	f002 fd98 	bl	80148cc <pbuf_copy_partial>
 8011d9c:	4603      	mov	r3, r0
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d102      	bne.n	8011da8 <snmp_pbuf_stream_read+0x34>
    return ERR_BUF;
 8011da2:	f06f 0301 	mvn.w	r3, #1
 8011da6:	e00c      	b.n	8011dc2 <snmp_pbuf_stream_read+0x4e>
  }

  pbuf_stream->offset++;
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	889b      	ldrh	r3, [r3, #4]
 8011dac:	3301      	adds	r3, #1
 8011dae:	b29a      	uxth	r2, r3
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	809a      	strh	r2, [r3, #4]
  pbuf_stream->length--;
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	88db      	ldrh	r3, [r3, #6]
 8011db8:	3b01      	subs	r3, #1
 8011dba:	b29a      	uxth	r2, r3
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	80da      	strh	r2, [r3, #6]

  return ERR_OK;
 8011dc0:	2300      	movs	r3, #0
}
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	3708      	adds	r7, #8
 8011dc6:	46bd      	mov	sp, r7
 8011dc8:	bd80      	pop	{r7, pc}

08011dca <snmp_pbuf_stream_write>:

err_t
snmp_pbuf_stream_write(struct snmp_pbuf_stream* pbuf_stream, u8_t data)
{
 8011dca:	b580      	push	{r7, lr}
 8011dcc:	b082      	sub	sp, #8
 8011dce:	af00      	add	r7, sp, #0
 8011dd0:	6078      	str	r0, [r7, #4]
 8011dd2:	460b      	mov	r3, r1
 8011dd4:	70fb      	strb	r3, [r7, #3]
  return snmp_pbuf_stream_writebuf(pbuf_stream, &data, 1);
 8011dd6:	1cfb      	adds	r3, r7, #3
 8011dd8:	2201      	movs	r2, #1
 8011dda:	4619      	mov	r1, r3
 8011ddc:	6878      	ldr	r0, [r7, #4]
 8011dde:	f000 f805 	bl	8011dec <snmp_pbuf_stream_writebuf>
 8011de2:	4603      	mov	r3, r0
}
 8011de4:	4618      	mov	r0, r3
 8011de6:	3708      	adds	r7, #8
 8011de8:	46bd      	mov	sp, r7
 8011dea:	bd80      	pop	{r7, pc}

08011dec <snmp_pbuf_stream_writebuf>:

err_t
snmp_pbuf_stream_writebuf(struct snmp_pbuf_stream* pbuf_stream, const void* buf, u16_t buf_len)
{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b084      	sub	sp, #16
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	60f8      	str	r0, [r7, #12]
 8011df4:	60b9      	str	r1, [r7, #8]
 8011df6:	4613      	mov	r3, r2
 8011df8:	80fb      	strh	r3, [r7, #6]
  if (pbuf_stream->length < buf_len) {
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	88db      	ldrh	r3, [r3, #6]
 8011dfe:	88fa      	ldrh	r2, [r7, #6]
 8011e00:	429a      	cmp	r2, r3
 8011e02:	d902      	bls.n	8011e0a <snmp_pbuf_stream_writebuf+0x1e>
    return ERR_BUF;
 8011e04:	f06f 0301 	mvn.w	r3, #1
 8011e08:	e01c      	b.n	8011e44 <snmp_pbuf_stream_writebuf+0x58>
  }

  if (pbuf_take_at(pbuf_stream->pbuf, buf, buf_len, pbuf_stream->offset) != ERR_OK) {
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	6818      	ldr	r0, [r3, #0]
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	889b      	ldrh	r3, [r3, #4]
 8011e12:	88fa      	ldrh	r2, [r7, #6]
 8011e14:	68b9      	ldr	r1, [r7, #8]
 8011e16:	f002 fea1 	bl	8014b5c <pbuf_take_at>
 8011e1a:	4603      	mov	r3, r0
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d002      	beq.n	8011e26 <snmp_pbuf_stream_writebuf+0x3a>
    return ERR_BUF;
 8011e20:	f06f 0301 	mvn.w	r3, #1
 8011e24:	e00e      	b.n	8011e44 <snmp_pbuf_stream_writebuf+0x58>
  }

  pbuf_stream->offset += buf_len;
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	889a      	ldrh	r2, [r3, #4]
 8011e2a:	88fb      	ldrh	r3, [r7, #6]
 8011e2c:	4413      	add	r3, r2
 8011e2e:	b29a      	uxth	r2, r3
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	809a      	strh	r2, [r3, #4]
  pbuf_stream->length -= buf_len;
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	88da      	ldrh	r2, [r3, #6]
 8011e38:	88fb      	ldrh	r3, [r7, #6]
 8011e3a:	1ad3      	subs	r3, r2, r3
 8011e3c:	b29a      	uxth	r2, r3
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	80da      	strh	r2, [r3, #6]

  return ERR_OK;
 8011e42:	2300      	movs	r3, #0
}
 8011e44:	4618      	mov	r0, r3
 8011e46:	3710      	adds	r7, #16
 8011e48:	46bd      	mov	sp, r7
 8011e4a:	bd80      	pop	{r7, pc}

08011e4c <snmp_pbuf_stream_writeto>:

err_t
snmp_pbuf_stream_writeto(struct snmp_pbuf_stream* pbuf_stream, struct snmp_pbuf_stream* target_pbuf_stream, u16_t len)
{
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	b088      	sub	sp, #32
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	60f8      	str	r0, [r7, #12]
 8011e54:	60b9      	str	r1, [r7, #8]
 8011e56:	4613      	mov	r3, r2
 8011e58:	80fb      	strh	r3, [r7, #6]

  if ((pbuf_stream == NULL) || (target_pbuf_stream == NULL)) {
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d002      	beq.n	8011e66 <snmp_pbuf_stream_writeto+0x1a>
 8011e60:	68bb      	ldr	r3, [r7, #8]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d102      	bne.n	8011e6c <snmp_pbuf_stream_writeto+0x20>
    return ERR_ARG;
 8011e66:	f06f 030f 	mvn.w	r3, #15
 8011e6a:	e05b      	b.n	8011f24 <snmp_pbuf_stream_writeto+0xd8>
  }
  if ((len > pbuf_stream->length) || (len > target_pbuf_stream->length)) {
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	88db      	ldrh	r3, [r3, #6]
 8011e70:	88fa      	ldrh	r2, [r7, #6]
 8011e72:	429a      	cmp	r2, r3
 8011e74:	d804      	bhi.n	8011e80 <snmp_pbuf_stream_writeto+0x34>
 8011e76:	68bb      	ldr	r3, [r7, #8]
 8011e78:	88db      	ldrh	r3, [r3, #6]
 8011e7a:	88fa      	ldrh	r2, [r7, #6]
 8011e7c:	429a      	cmp	r2, r3
 8011e7e:	d902      	bls.n	8011e86 <snmp_pbuf_stream_writeto+0x3a>
    return ERR_ARG;
 8011e80:	f06f 030f 	mvn.w	r3, #15
 8011e84:	e04e      	b.n	8011f24 <snmp_pbuf_stream_writeto+0xd8>
  }

  if (len == 0) {
 8011e86:	88fb      	ldrh	r3, [r7, #6]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d147      	bne.n	8011f1c <snmp_pbuf_stream_writeto+0xd0>
    len = LWIP_MIN(pbuf_stream->length, target_pbuf_stream->length);
 8011e8c:	68bb      	ldr	r3, [r7, #8]
 8011e8e:	88da      	ldrh	r2, [r3, #6]
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	88db      	ldrh	r3, [r3, #6]
 8011e94:	4293      	cmp	r3, r2
 8011e96:	bf28      	it	cs
 8011e98:	4613      	movcs	r3, r2
 8011e9a:	80fb      	strh	r3, [r7, #6]
  }

  while (len > 0) {
 8011e9c:	e03e      	b.n	8011f1c <snmp_pbuf_stream_writeto+0xd0>
    u16_t chunk_len;
    err_t err;
    u16_t target_offset;
    struct pbuf* pbuf = pbuf_skip(pbuf_stream->pbuf, pbuf_stream->offset, &target_offset);
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	6818      	ldr	r0, [r3, #0]
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	889b      	ldrh	r3, [r3, #4]
 8011ea6:	f107 0216 	add.w	r2, r7, #22
 8011eaa:	4619      	mov	r1, r3
 8011eac:	f002 fdb0 	bl	8014a10 <pbuf_skip>
 8011eb0:	61f8      	str	r0, [r7, #28]

    if ((pbuf == NULL) || (pbuf->len == 0)) {
 8011eb2:	69fb      	ldr	r3, [r7, #28]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d003      	beq.n	8011ec0 <snmp_pbuf_stream_writeto+0x74>
 8011eb8:	69fb      	ldr	r3, [r7, #28]
 8011eba:	895b      	ldrh	r3, [r3, #10]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d102      	bne.n	8011ec6 <snmp_pbuf_stream_writeto+0x7a>
      return ERR_BUF;
 8011ec0:	f06f 0301 	mvn.w	r3, #1
 8011ec4:	e02e      	b.n	8011f24 <snmp_pbuf_stream_writeto+0xd8>
    }

    chunk_len = LWIP_MIN(len, pbuf->len);
 8011ec6:	69fb      	ldr	r3, [r7, #28]
 8011ec8:	895b      	ldrh	r3, [r3, #10]
 8011eca:	88fa      	ldrh	r2, [r7, #6]
 8011ecc:	4293      	cmp	r3, r2
 8011ece:	bf28      	it	cs
 8011ed0:	4613      	movcs	r3, r2
 8011ed2:	837b      	strh	r3, [r7, #26]
    err = snmp_pbuf_stream_writebuf(target_pbuf_stream, &((u8_t*)pbuf->payload)[target_offset], chunk_len);
 8011ed4:	69fb      	ldr	r3, [r7, #28]
 8011ed6:	685b      	ldr	r3, [r3, #4]
 8011ed8:	8afa      	ldrh	r2, [r7, #22]
 8011eda:	4413      	add	r3, r2
 8011edc:	8b7a      	ldrh	r2, [r7, #26]
 8011ede:	4619      	mov	r1, r3
 8011ee0:	68b8      	ldr	r0, [r7, #8]
 8011ee2:	f7ff ff83 	bl	8011dec <snmp_pbuf_stream_writebuf>
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	767b      	strb	r3, [r7, #25]
    if (err != ERR_OK) {
 8011eea:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d002      	beq.n	8011ef8 <snmp_pbuf_stream_writeto+0xac>
      return err;
 8011ef2:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8011ef6:	e015      	b.n	8011f24 <snmp_pbuf_stream_writeto+0xd8>
    }

    pbuf_stream->offset   += chunk_len;
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	889a      	ldrh	r2, [r3, #4]
 8011efc:	8b7b      	ldrh	r3, [r7, #26]
 8011efe:	4413      	add	r3, r2
 8011f00:	b29a      	uxth	r2, r3
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	809a      	strh	r2, [r3, #4]
    pbuf_stream->length   -= chunk_len;
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	88da      	ldrh	r2, [r3, #6]
 8011f0a:	8b7b      	ldrh	r3, [r7, #26]
 8011f0c:	1ad3      	subs	r3, r2, r3
 8011f0e:	b29a      	uxth	r2, r3
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	80da      	strh	r2, [r3, #6]
    len -= chunk_len;
 8011f14:	88fa      	ldrh	r2, [r7, #6]
 8011f16:	8b7b      	ldrh	r3, [r7, #26]
 8011f18:	1ad3      	subs	r3, r2, r3
 8011f1a:	80fb      	strh	r3, [r7, #6]
  while (len > 0) {
 8011f1c:	88fb      	ldrh	r3, [r7, #6]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d1bd      	bne.n	8011e9e <snmp_pbuf_stream_writeto+0x52>
  }

  return ERR_OK;
 8011f22:	2300      	movs	r3, #0
}
 8011f24:	4618      	mov	r0, r3
 8011f26:	3720      	adds	r7, #32
 8011f28:	46bd      	mov	sp, r7
 8011f2a:	bd80      	pop	{r7, pc}

08011f2c <snmp_pbuf_stream_seek>:

err_t
snmp_pbuf_stream_seek(struct snmp_pbuf_stream* pbuf_stream, s32_t offset)
{
 8011f2c:	b480      	push	{r7}
 8011f2e:	b083      	sub	sp, #12
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	6078      	str	r0, [r7, #4]
 8011f34:	6039      	str	r1, [r7, #0]
  if ((offset < 0) || (offset > pbuf_stream->length)) {
 8011f36:	683b      	ldr	r3, [r7, #0]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	db05      	blt.n	8011f48 <snmp_pbuf_stream_seek+0x1c>
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	88db      	ldrh	r3, [r3, #6]
 8011f40:	461a      	mov	r2, r3
 8011f42:	683b      	ldr	r3, [r7, #0]
 8011f44:	4293      	cmp	r3, r2
 8011f46:	dd02      	ble.n	8011f4e <snmp_pbuf_stream_seek+0x22>
    /* we cannot seek backwards or forward behind stream end */
    return ERR_ARG;
 8011f48:	f06f 030f 	mvn.w	r3, #15
 8011f4c:	e010      	b.n	8011f70 <snmp_pbuf_stream_seek+0x44>
  }

  pbuf_stream->offset += (u16_t)offset;
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	889a      	ldrh	r2, [r3, #4]
 8011f52:	683b      	ldr	r3, [r7, #0]
 8011f54:	b29b      	uxth	r3, r3
 8011f56:	4413      	add	r3, r2
 8011f58:	b29a      	uxth	r2, r3
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	809a      	strh	r2, [r3, #4]
  pbuf_stream->length -= (u16_t)offset;
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	88da      	ldrh	r2, [r3, #6]
 8011f62:	683b      	ldr	r3, [r7, #0]
 8011f64:	b29b      	uxth	r3, r3
 8011f66:	1ad3      	subs	r3, r2, r3
 8011f68:	b29a      	uxth	r2, r3
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	80da      	strh	r2, [r3, #6]

  return ERR_OK;
 8011f6e:	2300      	movs	r3, #0
}
 8011f70:	4618      	mov	r0, r3
 8011f72:	370c      	adds	r7, #12
 8011f74:	46bd      	mov	sp, r7
 8011f76:	bc80      	pop	{r7}
 8011f78:	4770      	bx	lr

08011f7a <snmp_pbuf_stream_seek_abs>:

err_t
snmp_pbuf_stream_seek_abs(struct snmp_pbuf_stream* pbuf_stream, u32_t offset)
{
 8011f7a:	b580      	push	{r7, lr}
 8011f7c:	b084      	sub	sp, #16
 8011f7e:	af00      	add	r7, sp, #0
 8011f80:	6078      	str	r0, [r7, #4]
 8011f82:	6039      	str	r1, [r7, #0]
  s32_t rel_offset = offset - pbuf_stream->offset;
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	889b      	ldrh	r3, [r3, #4]
 8011f88:	461a      	mov	r2, r3
 8011f8a:	683b      	ldr	r3, [r7, #0]
 8011f8c:	1a9b      	subs	r3, r3, r2
 8011f8e:	60fb      	str	r3, [r7, #12]
  return snmp_pbuf_stream_seek(pbuf_stream, rel_offset);
 8011f90:	68f9      	ldr	r1, [r7, #12]
 8011f92:	6878      	ldr	r0, [r7, #4]
 8011f94:	f7ff ffca 	bl	8011f2c <snmp_pbuf_stream_seek>
 8011f98:	4603      	mov	r3, r0
}
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	3710      	adds	r7, #16
 8011f9e:	46bd      	mov	sp, r7
 8011fa0:	bd80      	pop	{r7, pc}

08011fa2 <snmp_recv>:
#include "snmp_msg.h"

/* lwIP UDP receive callback function */
static void
snmp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8011fa2:	b580      	push	{r7, lr}
 8011fa4:	b084      	sub	sp, #16
 8011fa6:	af00      	add	r7, sp, #0
 8011fa8:	60f8      	str	r0, [r7, #12]
 8011faa:	60b9      	str	r1, [r7, #8]
 8011fac:	607a      	str	r2, [r7, #4]
 8011fae:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(arg);

  snmp_receive(pcb, p, addr, port);
 8011fb0:	8b3b      	ldrh	r3, [r7, #24]
 8011fb2:	683a      	ldr	r2, [r7, #0]
 8011fb4:	6879      	ldr	r1, [r7, #4]
 8011fb6:	68b8      	ldr	r0, [r7, #8]
 8011fb8:	f7fd fe36 	bl	800fc28 <snmp_receive>

  pbuf_free(p);
 8011fbc:	6878      	ldr	r0, [r7, #4]
 8011fbe:	f002 fa87 	bl	80144d0 <pbuf_free>
}
 8011fc2:	bf00      	nop
 8011fc4:	3710      	adds	r7, #16
 8011fc6:	46bd      	mov	sp, r7
 8011fc8:	bd80      	pop	{r7, pc}

08011fca <snmp_sendto>:

err_t 
snmp_sendto(void *handle, struct pbuf *p, const ip_addr_t *dst, u16_t port)
{
 8011fca:	b580      	push	{r7, lr}
 8011fcc:	b084      	sub	sp, #16
 8011fce:	af00      	add	r7, sp, #0
 8011fd0:	60f8      	str	r0, [r7, #12]
 8011fd2:	60b9      	str	r1, [r7, #8]
 8011fd4:	607a      	str	r2, [r7, #4]
 8011fd6:	807b      	strh	r3, [r7, #2]
  return udp_sendto((struct udp_pcb*)handle, p, dst, port);
 8011fd8:	887b      	ldrh	r3, [r7, #2]
 8011fda:	687a      	ldr	r2, [r7, #4]
 8011fdc:	68b9      	ldr	r1, [r7, #8]
 8011fde:	68f8      	ldr	r0, [r7, #12]
 8011fe0:	f008 fc38 	bl	801a854 <udp_sendto>
 8011fe4:	4603      	mov	r3, r0
}
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	3710      	adds	r7, #16
 8011fea:	46bd      	mov	sp, r7
 8011fec:	bd80      	pop	{r7, pc}

08011fee <snmp_get_local_ip_for_dst>:

u8_t
snmp_get_local_ip_for_dst(void* handle, const ip_addr_t *dst, ip_addr_t *result)
{
 8011fee:	b580      	push	{r7, lr}
 8011ff0:	b088      	sub	sp, #32
 8011ff2:	af00      	add	r7, sp, #0
 8011ff4:	60f8      	str	r0, [r7, #12]
 8011ff6:	60b9      	str	r1, [r7, #8]
 8011ff8:	607a      	str	r2, [r7, #4]
  struct udp_pcb* udp_pcb = (struct udp_pcb*)handle;
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	61fb      	str	r3, [r7, #28]
  struct netif *dst_if;
  const ip_addr_t* dst_ip;

  LWIP_UNUSED_ARG(udp_pcb); /* unused in case of IPV4 only configuration */

  ip_route_get_local_ip(&udp_pcb->local_ip, dst, dst_if, dst_ip);
 8011ffe:	68b8      	ldr	r0, [r7, #8]
 8012000:	f00b ffa8 	bl	801df54 <ip4_route>
 8012004:	61b8      	str	r0, [r7, #24]
 8012006:	69bb      	ldr	r3, [r7, #24]
 8012008:	2b00      	cmp	r3, #0
 801200a:	d002      	beq.n	8012012 <snmp_get_local_ip_for_dst+0x24>
 801200c:	69bb      	ldr	r3, [r7, #24]
 801200e:	3304      	adds	r3, #4
 8012010:	e000      	b.n	8012014 <snmp_get_local_ip_for_dst+0x26>
 8012012:	2300      	movs	r3, #0
 8012014:	617b      	str	r3, [r7, #20]

  if ((dst_if != NULL) && (dst_ip != NULL)) {
 8012016:	69bb      	ldr	r3, [r7, #24]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d008      	beq.n	801202e <snmp_get_local_ip_for_dst+0x40>
 801201c:	697b      	ldr	r3, [r7, #20]
 801201e:	2b00      	cmp	r3, #0
 8012020:	d005      	beq.n	801202e <snmp_get_local_ip_for_dst+0x40>
    ip_addr_copy(*result, *dst_ip);
 8012022:	697b      	ldr	r3, [r7, #20]
 8012024:	681a      	ldr	r2, [r3, #0]
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	601a      	str	r2, [r3, #0]
    return 1;
 801202a:	2301      	movs	r3, #1
 801202c:	e000      	b.n	8012030 <snmp_get_local_ip_for_dst+0x42>
  } else {
    return 0;
 801202e:	2300      	movs	r3, #0
  }
}
 8012030:	4618      	mov	r0, r3
 8012032:	3720      	adds	r7, #32
 8012034:	46bd      	mov	sp, r7
 8012036:	bd80      	pop	{r7, pc}

08012038 <snmp_init>:
 * Starts SNMP Agent.
 * Allocates UDP pcb and binds it to IP_ANY_TYPE port 161.
 */
void
snmp_init(void)
{
 8012038:	b580      	push	{r7, lr}
 801203a:	b082      	sub	sp, #8
 801203c:	af00      	add	r7, sp, #0
  err_t err;
  
  struct udp_pcb *snmp_pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 801203e:	202e      	movs	r0, #46	@ 0x2e
 8012040:	f008 fe45 	bl	801acce <udp_new_ip_type>
 8012044:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("snmp_raw: no PCB", (snmp_pcb != NULL), return;);
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	2b00      	cmp	r3, #0
 801204a:	d106      	bne.n	801205a <snmp_init+0x22>
 801204c:	4b11      	ldr	r3, [pc, #68]	@ (8012094 <snmp_init+0x5c>)
 801204e:	225b      	movs	r2, #91	@ 0x5b
 8012050:	4911      	ldr	r1, [pc, #68]	@ (8012098 <snmp_init+0x60>)
 8012052:	4812      	ldr	r0, [pc, #72]	@ (801209c <snmp_init+0x64>)
 8012054:	f00e fa24 	bl	80204a0 <iprintf>
 8012058:	e018      	b.n	801208c <snmp_init+0x54>

  snmp_traps_handle = snmp_pcb;
 801205a:	4a11      	ldr	r2, [pc, #68]	@ (80120a0 <snmp_init+0x68>)
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	6013      	str	r3, [r2, #0]

  udp_recv(snmp_pcb, snmp_recv, (void *)SNMP_IN_PORT);
 8012060:	22a1      	movs	r2, #161	@ 0xa1
 8012062:	4910      	ldr	r1, [pc, #64]	@ (80120a4 <snmp_init+0x6c>)
 8012064:	6878      	ldr	r0, [r7, #4]
 8012066:	f008 fdd7 	bl	801ac18 <udp_recv>
  err = udp_bind(snmp_pcb, IP_ANY_TYPE, SNMP_IN_PORT);
 801206a:	22a1      	movs	r2, #161	@ 0xa1
 801206c:	490e      	ldr	r1, [pc, #56]	@ (80120a8 <snmp_init+0x70>)
 801206e:	6878      	ldr	r0, [r7, #4]
 8012070:	f008 fd0c 	bl	801aa8c <udp_bind>
 8012074:	4603      	mov	r3, r0
 8012076:	70fb      	strb	r3, [r7, #3]
  LWIP_ERROR("snmp_raw: Unable to bind PCB", (err == ERR_OK), return;);
 8012078:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d005      	beq.n	801208c <snmp_init+0x54>
 8012080:	4b04      	ldr	r3, [pc, #16]	@ (8012094 <snmp_init+0x5c>)
 8012082:	2261      	movs	r2, #97	@ 0x61
 8012084:	4909      	ldr	r1, [pc, #36]	@ (80120ac <snmp_init+0x74>)
 8012086:	4805      	ldr	r0, [pc, #20]	@ (801209c <snmp_init+0x64>)
 8012088:	f00e fa0a 	bl	80204a0 <iprintf>
}
 801208c:	3708      	adds	r7, #8
 801208e:	46bd      	mov	sp, r7
 8012090:	bd80      	pop	{r7, pc}
 8012092:	bf00      	nop
 8012094:	08023d28 	.word	0x08023d28
 8012098:	08023d64 	.word	0x08023d64
 801209c:	08023d78 	.word	0x08023d78
 80120a0:	2000a58c 	.word	0x2000a58c
 80120a4:	08011fa3 	.word	0x08011fa3
 80120a8:	0802f050 	.word	0x0802f050
 80120ac:	08023da0 	.word	0x08023da0

080120b0 <snmp_scalar_get_instance>:
static snmp_err_t  snmp_scalar_array_set_test(struct snmp_node_instance* instance, u16_t value_len, void* value);
static snmp_err_t  snmp_scalar_array_set_value(struct snmp_node_instance* instance, u16_t value_len, void* value);

snmp_err_t 
snmp_scalar_get_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance* instance)
{
 80120b0:	b480      	push	{r7}
 80120b2:	b087      	sub	sp, #28
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	60f8      	str	r0, [r7, #12]
 80120b8:	460b      	mov	r3, r1
 80120ba:	607a      	str	r2, [r7, #4]
 80120bc:	72fb      	strb	r3, [r7, #11]
  const struct snmp_scalar_node* scalar_node = (const struct snmp_scalar_node*)(const void*)instance->node;
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(root_oid);
  LWIP_UNUSED_ARG(root_oid_len);

  /* scalar only has one dedicated instance: .0 */
  if ((instance->instance_oid.len != 1) || (instance->instance_oid.id[0] != 0)) {
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	791b      	ldrb	r3, [r3, #4]
 80120c8:	2b01      	cmp	r3, #1
 80120ca:	d103      	bne.n	80120d4 <snmp_scalar_get_instance+0x24>
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	689b      	ldr	r3, [r3, #8]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d001      	beq.n	80120d8 <snmp_scalar_get_instance+0x28>
    return SNMP_ERR_NOSUCHINSTANCE;
 80120d4:	23f1      	movs	r3, #241	@ 0xf1
 80120d6:	e019      	b.n	801210c <snmp_scalar_get_instance+0x5c>
  }

  instance->access    = scalar_node->access;
 80120d8:	697b      	ldr	r3, [r7, #20]
 80120da:	7c5a      	ldrb	r2, [r3, #17]
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
  instance->asn1_type = scalar_node->asn1_type;
 80120e2:	697b      	ldr	r3, [r7, #20]
 80120e4:	7c1a      	ldrb	r2, [r3, #16]
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
  instance->get_value = scalar_node->get_value;
 80120ec:	697b      	ldr	r3, [r7, #20]
 80120ee:	695a      	ldr	r2, [r3, #20]
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  instance->set_test  = scalar_node->set_test;
 80120f6:	697b      	ldr	r3, [r7, #20]
 80120f8:	699a      	ldr	r2, [r3, #24]
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  instance->set_value = scalar_node->set_value;
 8012100:	697b      	ldr	r3, [r7, #20]
 8012102:	69da      	ldr	r2, [r3, #28]
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  return SNMP_ERR_NOERROR;
 801210a:	2300      	movs	r3, #0
}
 801210c:	4618      	mov	r0, r3
 801210e:	371c      	adds	r7, #28
 8012110:	46bd      	mov	sp, r7
 8012112:	bc80      	pop	{r7}
 8012114:	4770      	bx	lr

08012116 <snmp_scalar_get_next_instance>:

snmp_err_t 
snmp_scalar_get_next_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance* instance)
{
 8012116:	b580      	push	{r7, lr}
 8012118:	b084      	sub	sp, #16
 801211a:	af00      	add	r7, sp, #0
 801211c:	60f8      	str	r0, [r7, #12]
 801211e:	460b      	mov	r3, r1
 8012120:	607a      	str	r2, [r7, #4]
 8012122:	72fb      	strb	r3, [r7, #11]
  /* because our only instance is .0 we can only return a next instance if no instance oid is passed */
  if (instance->instance_oid.len == 0) {
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	791b      	ldrb	r3, [r3, #4]
 8012128:	2b00      	cmp	r3, #0
 801212a:	d10d      	bne.n	8012148 <snmp_scalar_get_next_instance+0x32>
    instance->instance_oid.len   = 1;
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	2201      	movs	r2, #1
 8012130:	711a      	strb	r2, [r3, #4]
    instance->instance_oid.id[0] = 0;
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	2200      	movs	r2, #0
 8012136:	609a      	str	r2, [r3, #8]

    return snmp_scalar_get_instance(root_oid, root_oid_len, instance);
 8012138:	7afb      	ldrb	r3, [r7, #11]
 801213a:	687a      	ldr	r2, [r7, #4]
 801213c:	4619      	mov	r1, r3
 801213e:	68f8      	ldr	r0, [r7, #12]
 8012140:	f7ff ffb6 	bl	80120b0 <snmp_scalar_get_instance>
 8012144:	4603      	mov	r3, r0
 8012146:	e000      	b.n	801214a <snmp_scalar_get_next_instance+0x34>
  }

  return SNMP_ERR_NOSUCHINSTANCE;
 8012148:	23f1      	movs	r3, #241	@ 0xf1
}
 801214a:	4618      	mov	r0, r3
 801214c:	3710      	adds	r7, #16
 801214e:	46bd      	mov	sp, r7
 8012150:	bd80      	pop	{r7, pc}
	...

08012154 <snmp_scalar_array_get_instance>:


snmp_err_t
snmp_scalar_array_get_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance* instance)
{
 8012154:	b480      	push	{r7}
 8012156:	b089      	sub	sp, #36	@ 0x24
 8012158:	af00      	add	r7, sp, #0
 801215a:	60f8      	str	r0, [r7, #12]
 801215c:	460b      	mov	r3, r1
 801215e:	607a      	str	r2, [r7, #4]
 8012160:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(root_oid);
  LWIP_UNUSED_ARG(root_oid_len);

  if ((instance->instance_oid.len == 2) && (instance->instance_oid.id[1] == 0)) {
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	791b      	ldrb	r3, [r3, #4]
 8012166:	2b02      	cmp	r3, #2
 8012168:	d142      	bne.n	80121f0 <snmp_scalar_array_get_instance+0x9c>
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	68db      	ldr	r3, [r3, #12]
 801216e:	2b00      	cmp	r3, #0
 8012170:	d13e      	bne.n	80121f0 <snmp_scalar_array_get_instance+0x9c>
    const struct snmp_scalar_array_node* array_node = (const struct snmp_scalar_array_node*)(const void*)instance->node;
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	617b      	str	r3, [r7, #20]
    const struct snmp_scalar_array_node_def* array_node_def = array_node->array_nodes;
 8012178:	697b      	ldr	r3, [r7, #20]
 801217a:	695b      	ldr	r3, [r3, #20]
 801217c:	61fb      	str	r3, [r7, #28]
    u32_t i = 0;
 801217e:	2300      	movs	r3, #0
 8012180:	61bb      	str	r3, [r7, #24]

    while (i < array_node->array_node_count) {
 8012182:	e00b      	b.n	801219c <snmp_scalar_array_get_instance+0x48>
      if (array_node_def->oid == instance->instance_oid.id[0]) {
 8012184:	69fb      	ldr	r3, [r7, #28]
 8012186:	681a      	ldr	r2, [r3, #0]
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	689b      	ldr	r3, [r3, #8]
 801218c:	429a      	cmp	r2, r3
 801218e:	d00c      	beq.n	80121aa <snmp_scalar_array_get_instance+0x56>
        break;
      }

      array_node_def++;
 8012190:	69fb      	ldr	r3, [r7, #28]
 8012192:	3308      	adds	r3, #8
 8012194:	61fb      	str	r3, [r7, #28]
      i++;
 8012196:	69bb      	ldr	r3, [r7, #24]
 8012198:	3301      	adds	r3, #1
 801219a:	61bb      	str	r3, [r7, #24]
    while (i < array_node->array_node_count) {
 801219c:	697b      	ldr	r3, [r7, #20]
 801219e:	8a1b      	ldrh	r3, [r3, #16]
 80121a0:	461a      	mov	r2, r3
 80121a2:	69bb      	ldr	r3, [r7, #24]
 80121a4:	4293      	cmp	r3, r2
 80121a6:	d3ed      	bcc.n	8012184 <snmp_scalar_array_get_instance+0x30>
 80121a8:	e000      	b.n	80121ac <snmp_scalar_array_get_instance+0x58>
        break;
 80121aa:	bf00      	nop
    }

    if (i < array_node->array_node_count) {
 80121ac:	697b      	ldr	r3, [r7, #20]
 80121ae:	8a1b      	ldrh	r3, [r3, #16]
 80121b0:	461a      	mov	r2, r3
 80121b2:	69bb      	ldr	r3, [r7, #24]
 80121b4:	4293      	cmp	r3, r2
 80121b6:	d21b      	bcs.n	80121f0 <snmp_scalar_array_get_instance+0x9c>
      instance->access              = array_node_def->access;
 80121b8:	69fb      	ldr	r3, [r7, #28]
 80121ba:	795a      	ldrb	r2, [r3, #5]
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
      instance->asn1_type           = array_node_def->asn1_type;
 80121c2:	69fb      	ldr	r3, [r7, #28]
 80121c4:	791a      	ldrb	r2, [r3, #4]
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
      instance->get_value           = snmp_scalar_array_get_value;
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	4a0b      	ldr	r2, [pc, #44]	@ (80121fc <snmp_scalar_array_get_instance+0xa8>)
 80121d0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
      instance->set_test            = snmp_scalar_array_set_test;
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	4a0a      	ldr	r2, [pc, #40]	@ (8012200 <snmp_scalar_array_get_instance+0xac>)
 80121d8:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
      instance->set_value           = snmp_scalar_array_set_value;
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	4a09      	ldr	r2, [pc, #36]	@ (8012204 <snmp_scalar_array_get_instance+0xb0>)
 80121e0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
      instance->reference.const_ptr = array_node_def;
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	69fa      	ldr	r2, [r7, #28]
 80121e8:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4

      return SNMP_ERR_NOERROR;
 80121ec:	2300      	movs	r3, #0
 80121ee:	e000      	b.n	80121f2 <snmp_scalar_array_get_instance+0x9e>
    }
  }

  return SNMP_ERR_NOSUCHINSTANCE;
 80121f0:	23f1      	movs	r3, #241	@ 0xf1
}
 80121f2:	4618      	mov	r0, r3
 80121f4:	3724      	adds	r7, #36	@ 0x24
 80121f6:	46bd      	mov	sp, r7
 80121f8:	bc80      	pop	{r7}
 80121fa:	4770      	bx	lr
 80121fc:	08012375 	.word	0x08012375
 8012200:	080123a1 	.word	0x080123a1
 8012204:	080123d3 	.word	0x080123d3

08012208 <snmp_scalar_array_get_next_instance>:

snmp_err_t
snmp_scalar_array_get_next_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance* instance)
{
 8012208:	b480      	push	{r7}
 801220a:	b08b      	sub	sp, #44	@ 0x2c
 801220c:	af00      	add	r7, sp, #0
 801220e:	60f8      	str	r0, [r7, #12]
 8012210:	460b      	mov	r3, r1
 8012212:	607a      	str	r2, [r7, #4]
 8012214:	72fb      	strb	r3, [r7, #11]
  const struct snmp_scalar_array_node* array_node = (const struct snmp_scalar_array_node*)(const void*)instance->node;
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	613b      	str	r3, [r7, #16]
  const struct snmp_scalar_array_node_def* array_node_def = array_node->array_nodes;
 801221c:	693b      	ldr	r3, [r7, #16]
 801221e:	695b      	ldr	r3, [r3, #20]
 8012220:	627b      	str	r3, [r7, #36]	@ 0x24
  const struct snmp_scalar_array_node_def* result = NULL;
 8012222:	2300      	movs	r3, #0
 8012224:	623b      	str	r3, [r7, #32]

  LWIP_UNUSED_ARG(root_oid);
  LWIP_UNUSED_ARG(root_oid_len);

  if ((instance->instance_oid.len == 0) && (array_node->array_node_count > 0)) {
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	791b      	ldrb	r3, [r3, #4]
 801222a:	2b00      	cmp	r3, #0
 801222c:	d121      	bne.n	8012272 <snmp_scalar_array_get_next_instance+0x6a>
 801222e:	693b      	ldr	r3, [r7, #16]
 8012230:	8a1b      	ldrh	r3, [r3, #16]
 8012232:	2b00      	cmp	r3, #0
 8012234:	d01d      	beq.n	8012272 <snmp_scalar_array_get_next_instance+0x6a>
    /* return node with lowest OID */
    u16_t i = 0;
 8012236:	2300      	movs	r3, #0
 8012238:	83fb      	strh	r3, [r7, #30]
    
    result = array_node_def;
 801223a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801223c:	623b      	str	r3, [r7, #32]
    array_node_def++;
 801223e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012240:	3308      	adds	r3, #8
 8012242:	627b      	str	r3, [r7, #36]	@ 0x24

    for (i = 1; i < array_node->array_node_count; i++) {
 8012244:	2301      	movs	r3, #1
 8012246:	83fb      	strh	r3, [r7, #30]
 8012248:	e00d      	b.n	8012266 <snmp_scalar_array_get_next_instance+0x5e>
      if (array_node_def->oid < result->oid) {
 801224a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801224c:	681a      	ldr	r2, [r3, #0]
 801224e:	6a3b      	ldr	r3, [r7, #32]
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	429a      	cmp	r2, r3
 8012254:	d201      	bcs.n	801225a <snmp_scalar_array_get_next_instance+0x52>
        result = array_node_def;
 8012256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012258:	623b      	str	r3, [r7, #32]
      }
      array_node_def++;
 801225a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801225c:	3308      	adds	r3, #8
 801225e:	627b      	str	r3, [r7, #36]	@ 0x24
    for (i = 1; i < array_node->array_node_count; i++) {
 8012260:	8bfb      	ldrh	r3, [r7, #30]
 8012262:	3301      	adds	r3, #1
 8012264:	83fb      	strh	r3, [r7, #30]
 8012266:	693b      	ldr	r3, [r7, #16]
 8012268:	8a1b      	ldrh	r3, [r3, #16]
 801226a:	8bfa      	ldrh	r2, [r7, #30]
 801226c:	429a      	cmp	r2, r3
 801226e:	d3ec      	bcc.n	801224a <snmp_scalar_array_get_next_instance+0x42>
  if ((instance->instance_oid.len == 0) && (array_node->array_node_count > 0)) {
 8012270:	e04b      	b.n	801230a <snmp_scalar_array_get_next_instance+0x102>
    }
  } else if (instance->instance_oid.len >= 1) {
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	791b      	ldrb	r3, [r3, #4]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d047      	beq.n	801230a <snmp_scalar_array_get_next_instance+0x102>
    if (instance->instance_oid.len == 1) {
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	791b      	ldrb	r3, [r3, #4]
 801227e:	2b01      	cmp	r3, #1
 8012280:	d116      	bne.n	80122b0 <snmp_scalar_array_get_next_instance+0xa8>
      /* if we have the requested OID we return its instance, otherwise we search for the next available */    
      u16_t i = 0;
 8012282:	2300      	movs	r3, #0
 8012284:	83bb      	strh	r3, [r7, #28]
      while (i < array_node->array_node_count) {
 8012286:	e00e      	b.n	80122a6 <snmp_scalar_array_get_next_instance+0x9e>
        if (array_node_def->oid == instance->instance_oid.id[0]) {
 8012288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801228a:	681a      	ldr	r2, [r3, #0]
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	689b      	ldr	r3, [r3, #8]
 8012290:	429a      	cmp	r2, r3
 8012292:	d102      	bne.n	801229a <snmp_scalar_array_get_next_instance+0x92>
          result = array_node_def;
 8012294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012296:	623b      	str	r3, [r7, #32]
          break;
 8012298:	e00a      	b.n	80122b0 <snmp_scalar_array_get_next_instance+0xa8>
        }

        array_node_def++;
 801229a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801229c:	3308      	adds	r3, #8
 801229e:	627b      	str	r3, [r7, #36]	@ 0x24
        i++;
 80122a0:	8bbb      	ldrh	r3, [r7, #28]
 80122a2:	3301      	adds	r3, #1
 80122a4:	83bb      	strh	r3, [r7, #28]
      while (i < array_node->array_node_count) {
 80122a6:	693b      	ldr	r3, [r7, #16]
 80122a8:	8a1b      	ldrh	r3, [r3, #16]
 80122aa:	8bba      	ldrh	r2, [r7, #28]
 80122ac:	429a      	cmp	r2, r3
 80122ae:	d3eb      	bcc.n	8012288 <snmp_scalar_array_get_next_instance+0x80>
      }
    }
    if (result == NULL) {
 80122b0:	6a3b      	ldr	r3, [r7, #32]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d129      	bne.n	801230a <snmp_scalar_array_get_next_instance+0x102>
      u32_t oid_dist = 0xFFFFFFFFUL;
 80122b6:	f04f 33ff 	mov.w	r3, #4294967295
 80122ba:	61bb      	str	r3, [r7, #24]
      u16_t i        = 0;
 80122bc:	2300      	movs	r3, #0
 80122be:	82fb      	strh	r3, [r7, #22]
      array_node_def = array_node->array_nodes; /* may be already at the end when if case before was executed without result -> reinitialize to start */
 80122c0:	693b      	ldr	r3, [r7, #16]
 80122c2:	695b      	ldr	r3, [r3, #20]
 80122c4:	627b      	str	r3, [r7, #36]	@ 0x24
      while (i < array_node->array_node_count) {
 80122c6:	e01b      	b.n	8012300 <snmp_scalar_array_get_next_instance+0xf8>
        if ((array_node_def->oid > instance->instance_oid.id[0]) &&
 80122c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122ca:	681a      	ldr	r2, [r3, #0]
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	689b      	ldr	r3, [r3, #8]
 80122d0:	429a      	cmp	r2, r3
 80122d2:	d90f      	bls.n	80122f4 <snmp_scalar_array_get_next_instance+0xec>
            ((u32_t)(array_node_def->oid - instance->instance_oid.id[0]) < oid_dist)) {
 80122d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122d6:	681a      	ldr	r2, [r3, #0]
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	689b      	ldr	r3, [r3, #8]
 80122dc:	1ad3      	subs	r3, r2, r3
        if ((array_node_def->oid > instance->instance_oid.id[0]) &&
 80122de:	69ba      	ldr	r2, [r7, #24]
 80122e0:	429a      	cmp	r2, r3
 80122e2:	d907      	bls.n	80122f4 <snmp_scalar_array_get_next_instance+0xec>
          result   = array_node_def;
 80122e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122e6:	623b      	str	r3, [r7, #32]
          oid_dist = array_node_def->oid - instance->instance_oid.id[0];
 80122e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122ea:	681a      	ldr	r2, [r3, #0]
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	689b      	ldr	r3, [r3, #8]
 80122f0:	1ad3      	subs	r3, r2, r3
 80122f2:	61bb      	str	r3, [r7, #24]
        }

        array_node_def++;
 80122f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122f6:	3308      	adds	r3, #8
 80122f8:	627b      	str	r3, [r7, #36]	@ 0x24
        i++;
 80122fa:	8afb      	ldrh	r3, [r7, #22]
 80122fc:	3301      	adds	r3, #1
 80122fe:	82fb      	strh	r3, [r7, #22]
      while (i < array_node->array_node_count) {
 8012300:	693b      	ldr	r3, [r7, #16]
 8012302:	8a1b      	ldrh	r3, [r3, #16]
 8012304:	8afa      	ldrh	r2, [r7, #22]
 8012306:	429a      	cmp	r2, r3
 8012308:	d3de      	bcc.n	80122c8 <snmp_scalar_array_get_next_instance+0xc0>
      }
    }
  }

  if (result == NULL) {
 801230a:	6a3b      	ldr	r3, [r7, #32]
 801230c:	2b00      	cmp	r3, #0
 801230e:	d101      	bne.n	8012314 <snmp_scalar_array_get_next_instance+0x10c>
    /* nothing to return */
    return SNMP_ERR_NOSUCHINSTANCE;
 8012310:	23f1      	movs	r3, #241	@ 0xf1
 8012312:	e024      	b.n	801235e <snmp_scalar_array_get_next_instance+0x156>
  }

  instance->instance_oid.len   = 2;
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	2202      	movs	r2, #2
 8012318:	711a      	strb	r2, [r3, #4]
  instance->instance_oid.id[0] = result->oid;
 801231a:	6a3b      	ldr	r3, [r7, #32]
 801231c:	681a      	ldr	r2, [r3, #0]
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	609a      	str	r2, [r3, #8]
  instance->instance_oid.id[1] = 0;
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	2200      	movs	r2, #0
 8012326:	60da      	str	r2, [r3, #12]
  
  instance->access              = result->access;
 8012328:	6a3b      	ldr	r3, [r7, #32]
 801232a:	795a      	ldrb	r2, [r3, #5]
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
  instance->asn1_type           = result->asn1_type;
 8012332:	6a3b      	ldr	r3, [r7, #32]
 8012334:	791a      	ldrb	r2, [r3, #4]
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
  instance->get_value           = snmp_scalar_array_get_value;
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	4a0a      	ldr	r2, [pc, #40]	@ (8012368 <snmp_scalar_array_get_next_instance+0x160>)
 8012340:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  instance->set_test            = snmp_scalar_array_set_test;
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	4a09      	ldr	r2, [pc, #36]	@ (801236c <snmp_scalar_array_get_next_instance+0x164>)
 8012348:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  instance->set_value           = snmp_scalar_array_set_value;
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	4a08      	ldr	r2, [pc, #32]	@ (8012370 <snmp_scalar_array_get_next_instance+0x168>)
 8012350:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  instance->reference.const_ptr = result;
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	6a3a      	ldr	r2, [r7, #32]
 8012358:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4

  return SNMP_ERR_NOERROR;
 801235c:	2300      	movs	r3, #0
}
 801235e:	4618      	mov	r0, r3
 8012360:	372c      	adds	r7, #44	@ 0x2c
 8012362:	46bd      	mov	sp, r7
 8012364:	bc80      	pop	{r7}
 8012366:	4770      	bx	lr
 8012368:	08012375 	.word	0x08012375
 801236c:	080123a1 	.word	0x080123a1
 8012370:	080123d3 	.word	0x080123d3

08012374 <snmp_scalar_array_get_value>:

static s16_t
snmp_scalar_array_get_value(struct snmp_node_instance* instance, void* value)
{
 8012374:	b580      	push	{r7, lr}
 8012376:	b084      	sub	sp, #16
 8012378:	af00      	add	r7, sp, #0
 801237a:	6078      	str	r0, [r7, #4]
 801237c:	6039      	str	r1, [r7, #0]
  const struct snmp_scalar_array_node* array_node = (const struct snmp_scalar_array_node*)(const void*)instance->node;
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	60fb      	str	r3, [r7, #12]
  const struct snmp_scalar_array_node_def* array_node_def = (const struct snmp_scalar_array_node_def*)instance->reference.const_ptr;
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801238a:	60bb      	str	r3, [r7, #8]

  return array_node->get_value(array_node_def, value);
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	699b      	ldr	r3, [r3, #24]
 8012390:	6839      	ldr	r1, [r7, #0]
 8012392:	68b8      	ldr	r0, [r7, #8]
 8012394:	4798      	blx	r3
 8012396:	4603      	mov	r3, r0
}
 8012398:	4618      	mov	r0, r3
 801239a:	3710      	adds	r7, #16
 801239c:	46bd      	mov	sp, r7
 801239e:	bd80      	pop	{r7, pc}

080123a0 <snmp_scalar_array_set_test>:

static snmp_err_t
snmp_scalar_array_set_test(struct snmp_node_instance* instance, u16_t value_len, void* value)
{
 80123a0:	b580      	push	{r7, lr}
 80123a2:	b086      	sub	sp, #24
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	60f8      	str	r0, [r7, #12]
 80123a8:	460b      	mov	r3, r1
 80123aa:	607a      	str	r2, [r7, #4]
 80123ac:	817b      	strh	r3, [r7, #10]
  const struct snmp_scalar_array_node* array_node = (const struct snmp_scalar_array_node*)(const void*)instance->node;
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	617b      	str	r3, [r7, #20]
  const struct snmp_scalar_array_node_def* array_node_def = (const struct snmp_scalar_array_node_def*)instance->reference.const_ptr;
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80123ba:	613b      	str	r3, [r7, #16]

  return array_node->set_test(array_node_def, value_len, value);
 80123bc:	697b      	ldr	r3, [r7, #20]
 80123be:	69db      	ldr	r3, [r3, #28]
 80123c0:	8979      	ldrh	r1, [r7, #10]
 80123c2:	687a      	ldr	r2, [r7, #4]
 80123c4:	6938      	ldr	r0, [r7, #16]
 80123c6:	4798      	blx	r3
 80123c8:	4603      	mov	r3, r0
}
 80123ca:	4618      	mov	r0, r3
 80123cc:	3718      	adds	r7, #24
 80123ce:	46bd      	mov	sp, r7
 80123d0:	bd80      	pop	{r7, pc}

080123d2 <snmp_scalar_array_set_value>:

static snmp_err_t
snmp_scalar_array_set_value(struct snmp_node_instance* instance, u16_t value_len, void* value)
{
 80123d2:	b580      	push	{r7, lr}
 80123d4:	b086      	sub	sp, #24
 80123d6:	af00      	add	r7, sp, #0
 80123d8:	60f8      	str	r0, [r7, #12]
 80123da:	460b      	mov	r3, r1
 80123dc:	607a      	str	r2, [r7, #4]
 80123de:	817b      	strh	r3, [r7, #10]
  const struct snmp_scalar_array_node* array_node = (const struct snmp_scalar_array_node*)(const void*)instance->node;
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	617b      	str	r3, [r7, #20]
  const struct snmp_scalar_array_node_def* array_node_def = (const struct snmp_scalar_array_node_def*)instance->reference.const_ptr;
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80123ec:	613b      	str	r3, [r7, #16]

  return array_node->set_value(array_node_def, value_len, value);
 80123ee:	697b      	ldr	r3, [r7, #20]
 80123f0:	6a1b      	ldr	r3, [r3, #32]
 80123f2:	8979      	ldrh	r1, [r7, #10]
 80123f4:	687a      	ldr	r2, [r7, #4]
 80123f6:	6938      	ldr	r0, [r7, #16]
 80123f8:	4798      	blx	r3
 80123fa:	4603      	mov	r3, r0
}
 80123fc:	4618      	mov	r0, r3
 80123fe:	3718      	adds	r7, #24
 8012400:	46bd      	mov	sp, r7
 8012402:	bd80      	pop	{r7, pc}

08012404 <snmp_table_get_instance>:
#include "lwip/apps/snmp_core.h"
#include "lwip/apps/snmp_table.h"
#include <string.h>

snmp_err_t snmp_table_get_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance* instance)
{
 8012404:	b590      	push	{r4, r7, lr}
 8012406:	b089      	sub	sp, #36	@ 0x24
 8012408:	af00      	add	r7, sp, #0
 801240a:	60f8      	str	r0, [r7, #12]
 801240c:	460b      	mov	r3, r1
 801240e:	607a      	str	r2, [r7, #4]
 8012410:	72fb      	strb	r3, [r7, #11]
  snmp_err_t ret = SNMP_ERR_NOSUCHINSTANCE;
 8012412:	23f1      	movs	r3, #241	@ 0xf1
 8012414:	77fb      	strb	r3, [r7, #31]
  const struct snmp_table_node* table_node = (const struct snmp_table_node*)(const void*)instance->node;
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	613b      	str	r3, [r7, #16]
  LWIP_UNUSED_ARG(root_oid);
  LWIP_UNUSED_ARG(root_oid_len);

  /* check min. length (fixed row entry definition, column, row instance oid with at least one entry */
  /* fixed row entry always has oid 1 */
  if ((instance->instance_oid.len >= 3) && (instance->instance_oid.id[0] == 1)) {
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	791b      	ldrb	r3, [r3, #4]
 8012420:	2b02      	cmp	r3, #2
 8012422:	d947      	bls.n	80124b4 <snmp_table_get_instance+0xb0>
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	689b      	ldr	r3, [r3, #8]
 8012428:	2b01      	cmp	r3, #1
 801242a:	d143      	bne.n	80124b4 <snmp_table_get_instance+0xb0>
    /* search column */
    const struct snmp_table_col_def* col_def = table_node->columns;
 801242c:	693b      	ldr	r3, [r7, #16]
 801242e:	695b      	ldr	r3, [r3, #20]
 8012430:	61bb      	str	r3, [r7, #24]
    u16_t i = table_node->column_count;
 8012432:	693b      	ldr	r3, [r7, #16]
 8012434:	8a1b      	ldrh	r3, [r3, #16]
 8012436:	82fb      	strh	r3, [r7, #22]
    while (i > 0) {
 8012438:	e00b      	b.n	8012452 <snmp_table_get_instance+0x4e>
      if (col_def->index == instance->instance_oid.id[1]) {
 801243a:	69bb      	ldr	r3, [r7, #24]
 801243c:	681a      	ldr	r2, [r3, #0]
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	68db      	ldr	r3, [r3, #12]
 8012442:	429a      	cmp	r2, r3
 8012444:	d009      	beq.n	801245a <snmp_table_get_instance+0x56>
        break;
      }
      
      col_def++;
 8012446:	69bb      	ldr	r3, [r7, #24]
 8012448:	3308      	adds	r3, #8
 801244a:	61bb      	str	r3, [r7, #24]
      i--;
 801244c:	8afb      	ldrh	r3, [r7, #22]
 801244e:	3b01      	subs	r3, #1
 8012450:	82fb      	strh	r3, [r7, #22]
    while (i > 0) {
 8012452:	8afb      	ldrh	r3, [r7, #22]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d1f0      	bne.n	801243a <snmp_table_get_instance+0x36>
 8012458:	e000      	b.n	801245c <snmp_table_get_instance+0x58>
        break;
 801245a:	bf00      	nop
    }

    if (i > 0) {
 801245c:	8afb      	ldrh	r3, [r7, #22]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d028      	beq.n	80124b4 <snmp_table_get_instance+0xb0>
      /* everything may be overwritten by get_cell_instance_method() in order to implement special handling for single columns/cells */
      instance->asn1_type = col_def->asn1_type;
 8012462:	69bb      	ldr	r3, [r7, #24]
 8012464:	791a      	ldrb	r2, [r3, #4]
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
      instance->access    = col_def->access;
 801246c:	69bb      	ldr	r3, [r7, #24]
 801246e:	795a      	ldrb	r2, [r3, #5]
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
      instance->get_value = table_node->get_value;
 8012476:	693b      	ldr	r3, [r7, #16]
 8012478:	6a1a      	ldr	r2, [r3, #32]
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
      instance->set_test  = table_node->set_test;
 8012480:	693b      	ldr	r3, [r7, #16]
 8012482:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
      instance->set_value = table_node->set_value;
 801248a:	693b      	ldr	r3, [r7, #16]
 801248c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

      ret = table_node->get_cell_instance(
 8012494:	693b      	ldr	r3, [r7, #16]
 8012496:	699c      	ldr	r4, [r3, #24]
        &(instance->instance_oid.id[1]),
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	f103 000c 	add.w	r0, r3, #12
        &(instance->instance_oid.id[2]),
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	f103 0110 	add.w	r1, r3, #16
        instance->instance_oid.len-2,
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	791b      	ldrb	r3, [r3, #4]
      ret = table_node->get_cell_instance(
 80124a8:	3b02      	subs	r3, #2
 80124aa:	b2da      	uxtb	r2, r3
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	47a0      	blx	r4
 80124b0:	4603      	mov	r3, r0
 80124b2:	77fb      	strb	r3, [r7, #31]
        instance);
    }
  }

  return ret;
 80124b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80124b6:	4618      	mov	r0, r3
 80124b8:	3724      	adds	r7, #36	@ 0x24
 80124ba:	46bd      	mov	sp, r7
 80124bc:	bd90      	pop	{r4, r7, pc}

080124be <snmp_table_get_next_instance>:

snmp_err_t snmp_table_get_next_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance* instance)
{
 80124be:	b580      	push	{r7, lr}
 80124c0:	b0be      	sub	sp, #248	@ 0xf8
 80124c2:	af00      	add	r7, sp, #0
 80124c4:	60f8      	str	r0, [r7, #12]
 80124c6:	460b      	mov	r3, r1
 80124c8:	607a      	str	r2, [r7, #4]
 80124ca:	72fb      	strb	r3, [r7, #11]
  const struct snmp_table_node* table_node = (const struct snmp_table_node*)(const void*)instance->node;
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  const struct snmp_table_col_def* col_def;
  struct snmp_obj_id row_oid;
  u32_t column = 0;
 80124d4:	2300      	movs	r3, #0
 80124d6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

  LWIP_UNUSED_ARG(root_oid);
  LWIP_UNUSED_ARG(root_oid_len);

  /* check that first part of id is 0 or 1, referencing fixed row entry */
  if ((instance->instance_oid.len > 0) && (instance->instance_oid.id[0] > 1)) {
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	791b      	ldrb	r3, [r3, #4]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d005      	beq.n	80124ee <snmp_table_get_next_instance+0x30>
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	689b      	ldr	r3, [r3, #8]
 80124e6:	2b01      	cmp	r3, #1
 80124e8:	d901      	bls.n	80124ee <snmp_table_get_next_instance+0x30>
    return SNMP_ERR_NOSUCHINSTANCE;
 80124ea:	23f1      	movs	r3, #241	@ 0xf1
 80124ec:	e0b2      	b.n	8012654 <snmp_table_get_next_instance+0x196>
  }
  if (instance->instance_oid.len > 1) {
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	791b      	ldrb	r3, [r3, #4]
 80124f2:	2b01      	cmp	r3, #1
 80124f4:	d903      	bls.n	80124fe <snmp_table_get_next_instance+0x40>
    column = instance->instance_oid.id[1];
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	68db      	ldr	r3, [r3, #12]
 80124fa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  }
  if (instance->instance_oid.len > 2) {
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	791b      	ldrb	r3, [r3, #4]
 8012502:	2b02      	cmp	r3, #2
 8012504:	d90c      	bls.n	8012520 <snmp_table_get_next_instance+0x62>
    snmp_oid_assign(&row_oid, &(instance->instance_oid.id[2]), instance->instance_oid.len - 2);
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	f103 0110 	add.w	r1, r3, #16
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	791b      	ldrb	r3, [r3, #4]
 8012510:	3b02      	subs	r3, #2
 8012512:	b2da      	uxtb	r2, r3
 8012514:	f107 0314 	add.w	r3, r7, #20
 8012518:	4618      	mov	r0, r3
 801251a:	f7fa fd73 	bl	800d004 <snmp_oid_assign>
 801251e:	e001      	b.n	8012524 <snmp_table_get_next_instance+0x66>
  } else {
    row_oid.len = 0;
 8012520:	2300      	movs	r3, #0
 8012522:	753b      	strb	r3, [r7, #20]
  }

  instance->get_value    = table_node->get_value;
 8012524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012528:	6a1a      	ldr	r2, [r3, #32]
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  instance->set_test     = table_node->set_test;
 8012530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012534:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  instance->set_value    = table_node->set_value;
 801253c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012540:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /* resolve column and value */
  do {
    u16_t i;
    const struct snmp_table_col_def* next_col_def = NULL;
 8012548:	2300      	movs	r3, #0
 801254a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    col_def = table_node->columns;
 801254e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012552:	695b      	ldr	r3, [r3, #20]
 8012554:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

    for (i = 0; i < table_node->column_count; i++) {
 8012558:	2300      	movs	r3, #0
 801255a:	f8a7 30ee 	strh.w	r3, [r7, #238]	@ 0xee
 801255e:	e02c      	b.n	80125ba <snmp_table_get_next_instance+0xfc>
      if (col_def->index == column) {
 8012560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 801256a:	429a      	cmp	r2, r3
 801256c:	d104      	bne.n	8012578 <snmp_table_get_next_instance+0xba>
        next_col_def = col_def;
 801256e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012572:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
        break;
 8012576:	e027      	b.n	80125c8 <snmp_table_get_next_instance+0x10a>
      } else if ((col_def->index > column) && ((next_col_def == NULL) || (col_def->index < next_col_def->index))) {
 8012578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8012582:	429a      	cmp	r2, r3
 8012584:	d20f      	bcs.n	80125a6 <snmp_table_get_next_instance+0xe8>
 8012586:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801258a:	2b00      	cmp	r3, #0
 801258c:	d007      	beq.n	801259e <snmp_table_get_next_instance+0xe0>
 801258e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012592:	681a      	ldr	r2, [r3, #0]
 8012594:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	429a      	cmp	r2, r3
 801259c:	d203      	bcs.n	80125a6 <snmp_table_get_next_instance+0xe8>
        next_col_def = col_def;
 801259e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80125a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
      }
      col_def++;
 80125a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80125aa:	3308      	adds	r3, #8
 80125ac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    for (i = 0; i < table_node->column_count; i++) {
 80125b0:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	@ 0xee
 80125b4:	3301      	adds	r3, #1
 80125b6:	f8a7 30ee 	strh.w	r3, [r7, #238]	@ 0xee
 80125ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80125be:	8a1b      	ldrh	r3, [r3, #16]
 80125c0:	f8b7 20ee 	ldrh.w	r2, [r7, #238]	@ 0xee
 80125c4:	429a      	cmp	r2, r3
 80125c6:	d3cb      	bcc.n	8012560 <snmp_table_get_next_instance+0xa2>
    }

    if (next_col_def == NULL) {
 80125c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d101      	bne.n	80125d4 <snmp_table_get_next_instance+0x116>
      /* no further column found */
      return SNMP_ERR_NOSUCHINSTANCE;
 80125d0:	23f1      	movs	r3, #241	@ 0xf1
 80125d2:	e03f      	b.n	8012654 <snmp_table_get_next_instance+0x196>
    }

    instance->asn1_type          = next_col_def->asn1_type;
 80125d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80125d8:	791a      	ldrb	r2, [r3, #4]
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
    instance->access             = next_col_def->access;
 80125e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80125e4:	795a      	ldrb	r2, [r3, #5]
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1

    result = table_node->get_next_cell_instance(
 80125ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80125f0:	69db      	ldr	r3, [r3, #28]
 80125f2:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 80125f6:	f107 0114 	add.w	r1, r7, #20
 80125fa:	687a      	ldr	r2, [r7, #4]
 80125fc:	4798      	blx	r3
 80125fe:	4603      	mov	r3, r0
 8012600:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      &next_col_def->index,
      &row_oid,
      instance);

    if (result == SNMP_ERR_NOERROR) {
 8012604:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8012608:	2b00      	cmp	r3, #0
 801260a:	d11a      	bne.n	8012642 <snmp_table_get_next_instance+0x184>
      col_def = next_col_def;
 801260c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8012610:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
      break;
 8012614:	bf00      	nop
    row_oid.len = 0; /* reset row_oid because we switch to next column and start with the first entry there */
    column = next_col_def->index + 1;
  } while (1);

  /* build resulting oid */
  instance->instance_oid.len   = 2;
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	2202      	movs	r2, #2
 801261a:	711a      	strb	r2, [r3, #4]
  instance->instance_oid.id[0] = 1;
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	2201      	movs	r2, #1
 8012620:	609a      	str	r2, [r3, #8]
  instance->instance_oid.id[1] = col_def->index;
 8012622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012626:	681a      	ldr	r2, [r3, #0]
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	60da      	str	r2, [r3, #12]
  snmp_oid_append(&instance->instance_oid, row_oid.id, row_oid.len);
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	1d18      	adds	r0, r3, #4
 8012630:	7d3a      	ldrb	r2, [r7, #20]
 8012632:	f107 0314 	add.w	r3, r7, #20
 8012636:	3304      	adds	r3, #4
 8012638:	4619      	mov	r1, r3
 801263a:	f7fa fd0d 	bl	800d058 <snmp_oid_append>

  return SNMP_ERR_NOERROR;
 801263e:	2300      	movs	r3, #0
 8012640:	e008      	b.n	8012654 <snmp_table_get_next_instance+0x196>
    row_oid.len = 0; /* reset row_oid because we switch to next column and start with the first entry there */
 8012642:	2300      	movs	r3, #0
 8012644:	753b      	strb	r3, [r7, #20]
    column = next_col_def->index + 1;
 8012646:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	3301      	adds	r3, #1
 801264e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  do {
 8012652:	e779      	b.n	8012548 <snmp_table_get_next_instance+0x8a>
}
 8012654:	4618      	mov	r0, r3
 8012656:	37f8      	adds	r7, #248	@ 0xf8
 8012658:	46bd      	mov	sp, r7
 801265a:	bd80      	pop	{r7, pc}

0801265c <snmp_table_simple_get_instance>:


snmp_err_t snmp_table_simple_get_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance* instance)
{
 801265c:	b5b0      	push	{r4, r5, r7, lr}
 801265e:	b08a      	sub	sp, #40	@ 0x28
 8012660:	af02      	add	r7, sp, #8
 8012662:	60f8      	str	r0, [r7, #12]
 8012664:	460b      	mov	r3, r1
 8012666:	607a      	str	r2, [r7, #4]
 8012668:	72fb      	strb	r3, [r7, #11]
  snmp_err_t ret = SNMP_ERR_NOSUCHINSTANCE;
 801266a:	23f1      	movs	r3, #241	@ 0xf1
 801266c:	77fb      	strb	r3, [r7, #31]
  const struct snmp_table_simple_node* table_node = (const struct snmp_table_simple_node*)(const void*)instance->node;
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	613b      	str	r3, [r7, #16]
  LWIP_UNUSED_ARG(root_oid);
  LWIP_UNUSED_ARG(root_oid_len);

  /* check min. length (fixed row entry definition, column, row instance oid with at least one entry */
  /* fixed row entry always has oid 1 */
  if ((instance->instance_oid.len >= 3) && (instance->instance_oid.id[0] == 1)) {
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	791b      	ldrb	r3, [r3, #4]
 8012678:	2b02      	cmp	r3, #2
 801267a:	d969      	bls.n	8012750 <snmp_table_simple_get_instance+0xf4>
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	689b      	ldr	r3, [r3, #8]
 8012680:	2b01      	cmp	r3, #1
 8012682:	d165      	bne.n	8012750 <snmp_table_simple_get_instance+0xf4>
    ret = table_node->get_cell_value(
 8012684:	693b      	ldr	r3, [r7, #16]
 8012686:	699c      	ldr	r4, [r3, #24]
      &(instance->instance_oid.id[1]),
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	f103 000c 	add.w	r0, r3, #12
      &(instance->instance_oid.id[2]),
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	f103 0110 	add.w	r1, r3, #16
      instance->instance_oid.len-2,
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	791b      	ldrb	r3, [r3, #4]
    ret = table_node->get_cell_value(
 8012698:	3b02      	subs	r3, #2
 801269a:	b2da      	uxtb	r2, r3
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	f103 05e4 	add.w	r5, r3, #228	@ 0xe4
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	33e8      	adds	r3, #232	@ 0xe8
 80126a6:	9300      	str	r3, [sp, #0]
 80126a8:	462b      	mov	r3, r5
 80126aa:	47a0      	blx	r4
 80126ac:	4603      	mov	r3, r0
 80126ae:	77fb      	strb	r3, [r7, #31]
      &instance->reference,
      &instance->reference_len);

    if (ret == SNMP_ERR_NOERROR) {
 80126b0:	7ffb      	ldrb	r3, [r7, #31]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d14c      	bne.n	8012750 <snmp_table_simple_get_instance+0xf4>
      /* search column */
      const struct snmp_table_simple_col_def* col_def = table_node->columns;
 80126b6:	693b      	ldr	r3, [r7, #16]
 80126b8:	695b      	ldr	r3, [r3, #20]
 80126ba:	61bb      	str	r3, [r7, #24]
      u32_t i = table_node->column_count;
 80126bc:	693b      	ldr	r3, [r7, #16]
 80126be:	8a1b      	ldrh	r3, [r3, #16]
 80126c0:	617b      	str	r3, [r7, #20]
      while (i > 0) {
 80126c2:	e00b      	b.n	80126dc <snmp_table_simple_get_instance+0x80>
        if (col_def->index == instance->instance_oid.id[1]) {
 80126c4:	69bb      	ldr	r3, [r7, #24]
 80126c6:	681a      	ldr	r2, [r3, #0]
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	68db      	ldr	r3, [r3, #12]
 80126cc:	429a      	cmp	r2, r3
 80126ce:	d009      	beq.n	80126e4 <snmp_table_simple_get_instance+0x88>
          break;
        }

        col_def++;
 80126d0:	69bb      	ldr	r3, [r7, #24]
 80126d2:	3308      	adds	r3, #8
 80126d4:	61bb      	str	r3, [r7, #24]
        i--;
 80126d6:	697b      	ldr	r3, [r7, #20]
 80126d8:	3b01      	subs	r3, #1
 80126da:	617b      	str	r3, [r7, #20]
      while (i > 0) {
 80126dc:	697b      	ldr	r3, [r7, #20]
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d1f0      	bne.n	80126c4 <snmp_table_simple_get_instance+0x68>
 80126e2:	e000      	b.n	80126e6 <snmp_table_simple_get_instance+0x8a>
          break;
 80126e4:	bf00      	nop
      }

      if (i > 0) {
 80126e6:	697b      	ldr	r3, [r7, #20]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d02f      	beq.n	801274c <snmp_table_simple_get_instance+0xf0>
        instance->asn1_type = col_def->asn1_type;
 80126ec:	69bb      	ldr	r3, [r7, #24]
 80126ee:	791a      	ldrb	r2, [r3, #4]
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
        instance->access    = SNMP_NODE_INSTANCE_READ_ONLY;
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	2201      	movs	r2, #1
 80126fa:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
        instance->set_test  = NULL;
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	2200      	movs	r2, #0
 8012702:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        instance->set_value = NULL;
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	2200      	movs	r2, #0
 801270a:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

        switch (col_def->data_type) {
 801270e:	69bb      	ldr	r3, [r7, #24]
 8012710:	795b      	ldrb	r3, [r3, #5]
 8012712:	2b03      	cmp	r3, #3
 8012714:	dc15      	bgt.n	8012742 <snmp_table_simple_get_instance+0xe6>
 8012716:	2b02      	cmp	r3, #2
 8012718:	da0e      	bge.n	8012738 <snmp_table_simple_get_instance+0xdc>
 801271a:	2b00      	cmp	r3, #0
 801271c:	d002      	beq.n	8012724 <snmp_table_simple_get_instance+0xc8>
 801271e:	2b01      	cmp	r3, #1
 8012720:	d005      	beq.n	801272e <snmp_table_simple_get_instance+0xd2>
 8012722:	e00e      	b.n	8012742 <snmp_table_simple_get_instance+0xe6>
          case SNMP_VARIANT_VALUE_TYPE_U32:
            instance->get_value = snmp_table_extract_value_from_u32ref;
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	4a0d      	ldr	r2, [pc, #52]	@ (801275c <snmp_table_simple_get_instance+0x100>)
 8012728:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
            break;
 801272c:	e00b      	b.n	8012746 <snmp_table_simple_get_instance+0xea>
          case SNMP_VARIANT_VALUE_TYPE_S32:
            instance->get_value = snmp_table_extract_value_from_s32ref;
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	4a0b      	ldr	r2, [pc, #44]	@ (8012760 <snmp_table_simple_get_instance+0x104>)
 8012732:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
            break;
 8012736:	e006      	b.n	8012746 <snmp_table_simple_get_instance+0xea>
          case SNMP_VARIANT_VALUE_TYPE_PTR: /* fall through */
          case SNMP_VARIANT_VALUE_TYPE_CONST_PTR:
            instance->get_value = snmp_table_extract_value_from_refconstptr;
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	4a0a      	ldr	r2, [pc, #40]	@ (8012764 <snmp_table_simple_get_instance+0x108>)
 801273c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
            break;
 8012740:	e001      	b.n	8012746 <snmp_table_simple_get_instance+0xea>
          default:
            LWIP_DEBUGF(SNMP_DEBUG, ("snmp_table_simple_get_instance(): unknown column data_type: %d\n", col_def->data_type));
            return SNMP_ERR_GENERROR;
 8012742:	2305      	movs	r3, #5
 8012744:	e005      	b.n	8012752 <snmp_table_simple_get_instance+0xf6>
        }        

        ret = SNMP_ERR_NOERROR;
 8012746:	2300      	movs	r3, #0
 8012748:	77fb      	strb	r3, [r7, #31]
 801274a:	e001      	b.n	8012750 <snmp_table_simple_get_instance+0xf4>
      } else {
        ret = SNMP_ERR_NOSUCHINSTANCE;
 801274c:	23f1      	movs	r3, #241	@ 0xf1
 801274e:	77fb      	strb	r3, [r7, #31]
      }
    } 
  }

  return ret;
 8012750:	7ffb      	ldrb	r3, [r7, #31]
}
 8012752:	4618      	mov	r0, r3
 8012754:	3720      	adds	r7, #32
 8012756:	46bd      	mov	sp, r7
 8012758:	bdb0      	pop	{r4, r5, r7, pc}
 801275a:	bf00      	nop
 801275c:	08012965 	.word	0x08012965
 8012760:	08012941 	.word	0x08012941
 8012764:	08012989 	.word	0x08012989

08012768 <snmp_table_simple_get_next_instance>:

snmp_err_t snmp_table_simple_get_next_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance* instance)
{
 8012768:	b590      	push	{r4, r7, lr}
 801276a:	b0bf      	sub	sp, #252	@ 0xfc
 801276c:	af00      	add	r7, sp, #0
 801276e:	60f8      	str	r0, [r7, #12]
 8012770:	460b      	mov	r3, r1
 8012772:	607a      	str	r2, [r7, #4]
 8012774:	72fb      	strb	r3, [r7, #11]
  const struct snmp_table_simple_node* table_node = (const struct snmp_table_simple_node*)(const void*)instance->node;
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  const struct snmp_table_simple_col_def* col_def;
  struct snmp_obj_id row_oid;
  u32_t column = 0;
 801277e:	2300      	movs	r3, #0
 8012780:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

  LWIP_UNUSED_ARG(root_oid);
  LWIP_UNUSED_ARG(root_oid_len);

  /* check that first part of id is 0 or 1, referencing fixed row entry */
  if ((instance->instance_oid.len > 0) && (instance->instance_oid.id[0] > 1)) {
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	791b      	ldrb	r3, [r3, #4]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d005      	beq.n	8012798 <snmp_table_simple_get_next_instance+0x30>
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	689b      	ldr	r3, [r3, #8]
 8012790:	2b01      	cmp	r3, #1
 8012792:	d901      	bls.n	8012798 <snmp_table_simple_get_next_instance+0x30>
    return SNMP_ERR_NOSUCHINSTANCE;
 8012794:	23f1      	movs	r3, #241	@ 0xf1
 8012796:	e0c8      	b.n	801292a <snmp_table_simple_get_next_instance+0x1c2>
  }
  if (instance->instance_oid.len > 1) {
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	791b      	ldrb	r3, [r3, #4]
 801279c:	2b01      	cmp	r3, #1
 801279e:	d903      	bls.n	80127a8 <snmp_table_simple_get_next_instance+0x40>
    column = instance->instance_oid.id[1];
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	68db      	ldr	r3, [r3, #12]
 80127a4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  }
  if (instance->instance_oid.len > 2) {
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	791b      	ldrb	r3, [r3, #4]
 80127ac:	2b02      	cmp	r3, #2
 80127ae:	d90c      	bls.n	80127ca <snmp_table_simple_get_next_instance+0x62>
    snmp_oid_assign(&row_oid, &(instance->instance_oid.id[2]), instance->instance_oid.len - 2);
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	f103 0110 	add.w	r1, r3, #16
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	791b      	ldrb	r3, [r3, #4]
 80127ba:	3b02      	subs	r3, #2
 80127bc:	b2da      	uxtb	r2, r3
 80127be:	f107 0314 	add.w	r3, r7, #20
 80127c2:	4618      	mov	r0, r3
 80127c4:	f7fa fc1e 	bl	800d004 <snmp_oid_assign>
 80127c8:	e001      	b.n	80127ce <snmp_table_simple_get_next_instance+0x66>
  } else {
    row_oid.len = 0;
 80127ca:	2300      	movs	r3, #0
 80127cc:	753b      	strb	r3, [r7, #20]
  }

  /* resolve column and value */
  do {
    u32_t i;
    const struct snmp_table_simple_col_def* next_col_def = NULL;
 80127ce:	2300      	movs	r3, #0
 80127d0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    col_def = table_node->columns;
 80127d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80127d8:	695b      	ldr	r3, [r3, #20]
 80127da:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

    for (i = 0; i < table_node->column_count; i++) {
 80127de:	2300      	movs	r3, #0
 80127e0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80127e4:	e02c      	b.n	8012840 <snmp_table_simple_get_next_instance+0xd8>
      if (col_def->index == column) {
 80127e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 80127f0:	429a      	cmp	r2, r3
 80127f2:	d104      	bne.n	80127fe <snmp_table_simple_get_next_instance+0x96>
        next_col_def = col_def;
 80127f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80127f8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
        break;
 80127fc:	e028      	b.n	8012850 <snmp_table_simple_get_next_instance+0xe8>
      } else if ((col_def->index > column) && ((next_col_def == NULL) ||
 80127fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8012808:	429a      	cmp	r2, r3
 801280a:	d20f      	bcs.n	801282c <snmp_table_simple_get_next_instance+0xc4>
 801280c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8012810:	2b00      	cmp	r3, #0
 8012812:	d007      	beq.n	8012824 <snmp_table_simple_get_next_instance+0xbc>
                 (col_def->index < next_col_def->index))) {
 8012814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012818:	681a      	ldr	r2, [r3, #0]
 801281a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801281e:	681b      	ldr	r3, [r3, #0]
      } else if ((col_def->index > column) && ((next_col_def == NULL) ||
 8012820:	429a      	cmp	r2, r3
 8012822:	d203      	bcs.n	801282c <snmp_table_simple_get_next_instance+0xc4>
        next_col_def = col_def;
 8012824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012828:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
      }
      col_def++;
 801282c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012830:	3308      	adds	r3, #8
 8012832:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    for (i = 0; i < table_node->column_count; i++) {
 8012836:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801283a:	3301      	adds	r3, #1
 801283c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8012840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012844:	8a1b      	ldrh	r3, [r3, #16]
 8012846:	461a      	mov	r2, r3
 8012848:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801284c:	4293      	cmp	r3, r2
 801284e:	d3ca      	bcc.n	80127e6 <snmp_table_simple_get_next_instance+0x7e>
    }

    if (next_col_def == NULL) {
 8012850:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8012854:	2b00      	cmp	r3, #0
 8012856:	d101      	bne.n	801285c <snmp_table_simple_get_next_instance+0xf4>
      /* no further column found */
      return SNMP_ERR_NOSUCHINSTANCE;
 8012858:	23f1      	movs	r3, #241	@ 0xf1
 801285a:	e066      	b.n	801292a <snmp_table_simple_get_next_instance+0x1c2>
    }

    result = table_node->get_next_cell_instance_and_value(
 801285c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012860:	69dc      	ldr	r4, [r3, #28]
 8012862:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	f103 02e4 	add.w	r2, r3, #228	@ 0xe4
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	33e8      	adds	r3, #232	@ 0xe8
 8012870:	f107 0114 	add.w	r1, r7, #20
 8012874:	47a0      	blx	r4
 8012876:	4603      	mov	r3, r0
 8012878:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      &next_col_def->index,
      &row_oid,
      &instance->reference,
      &instance->reference_len);

    if (result == SNMP_ERR_NOERROR) {
 801287c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8012880:	2b00      	cmp	r3, #0
 8012882:	d11c      	bne.n	80128be <snmp_table_simple_get_next_instance+0x156>
      col_def = next_col_def;
 8012884:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8012888:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
      break;
 801288c:	bf00      	nop
    row_oid.len = 0; /* reset row_oid because we switch to next column and start with the first entry there */
    column = next_col_def->index + 1;
  }
  while (1);

  instance->asn1_type = col_def->asn1_type;
 801288e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012892:	791a      	ldrb	r2, [r3, #4]
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
  instance->access    = SNMP_NODE_INSTANCE_READ_ONLY;
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	2201      	movs	r2, #1
 801289e:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
  instance->set_test  = NULL;
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	2200      	movs	r2, #0
 80128a6:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  instance->set_value = NULL;
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	2200      	movs	r2, #0
 80128ae:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  switch (col_def->data_type) {
 80128b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80128b6:	795b      	ldrb	r3, [r3, #5]
 80128b8:	2b03      	cmp	r3, #3
 80128ba:	dc1f      	bgt.n	80128fc <snmp_table_simple_get_next_instance+0x194>
 80128bc:	e008      	b.n	80128d0 <snmp_table_simple_get_next_instance+0x168>
    row_oid.len = 0; /* reset row_oid because we switch to next column and start with the first entry there */
 80128be:	2300      	movs	r3, #0
 80128c0:	753b      	strb	r3, [r7, #20]
    column = next_col_def->index + 1;
 80128c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	3301      	adds	r3, #1
 80128ca:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  do {
 80128ce:	e77e      	b.n	80127ce <snmp_table_simple_get_next_instance+0x66>
  switch (col_def->data_type) {
 80128d0:	2b02      	cmp	r3, #2
 80128d2:	da0e      	bge.n	80128f2 <snmp_table_simple_get_next_instance+0x18a>
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d002      	beq.n	80128de <snmp_table_simple_get_next_instance+0x176>
 80128d8:	2b01      	cmp	r3, #1
 80128da:	d005      	beq.n	80128e8 <snmp_table_simple_get_next_instance+0x180>
 80128dc:	e00e      	b.n	80128fc <snmp_table_simple_get_next_instance+0x194>
    case SNMP_VARIANT_VALUE_TYPE_U32:
      instance->get_value = snmp_table_extract_value_from_u32ref;
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	4a14      	ldr	r2, [pc, #80]	@ (8012934 <snmp_table_simple_get_next_instance+0x1cc>)
 80128e2:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
      break;
 80128e6:	e00b      	b.n	8012900 <snmp_table_simple_get_next_instance+0x198>
    case SNMP_VARIANT_VALUE_TYPE_S32:
      instance->get_value = snmp_table_extract_value_from_s32ref;
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	4a13      	ldr	r2, [pc, #76]	@ (8012938 <snmp_table_simple_get_next_instance+0x1d0>)
 80128ec:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
      break;
 80128f0:	e006      	b.n	8012900 <snmp_table_simple_get_next_instance+0x198>
    case SNMP_VARIANT_VALUE_TYPE_PTR: /* fall through */
    case SNMP_VARIANT_VALUE_TYPE_CONST_PTR:
      instance->get_value = snmp_table_extract_value_from_refconstptr;
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	4a11      	ldr	r2, [pc, #68]	@ (801293c <snmp_table_simple_get_next_instance+0x1d4>)
 80128f6:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
      break;
 80128fa:	e001      	b.n	8012900 <snmp_table_simple_get_next_instance+0x198>
    default:
      LWIP_DEBUGF(SNMP_DEBUG, ("snmp_table_simple_get_instance(): unknown column data_type: %d\n", col_def->data_type));
      return SNMP_ERR_GENERROR;
 80128fc:	2305      	movs	r3, #5
 80128fe:	e014      	b.n	801292a <snmp_table_simple_get_next_instance+0x1c2>
  }

  /* build resulting oid */
  instance->instance_oid.len   = 2;
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	2202      	movs	r2, #2
 8012904:	711a      	strb	r2, [r3, #4]
  instance->instance_oid.id[0] = 1;
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	2201      	movs	r2, #1
 801290a:	609a      	str	r2, [r3, #8]
  instance->instance_oid.id[1] = col_def->index;
 801290c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012910:	681a      	ldr	r2, [r3, #0]
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	60da      	str	r2, [r3, #12]
  snmp_oid_append(&instance->instance_oid, row_oid.id, row_oid.len);
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	1d18      	adds	r0, r3, #4
 801291a:	7d3a      	ldrb	r2, [r7, #20]
 801291c:	f107 0314 	add.w	r3, r7, #20
 8012920:	3304      	adds	r3, #4
 8012922:	4619      	mov	r1, r3
 8012924:	f7fa fb98 	bl	800d058 <snmp_oid_append>

  return SNMP_ERR_NOERROR;
 8012928:	2300      	movs	r3, #0
}
 801292a:	4618      	mov	r0, r3
 801292c:	37fc      	adds	r7, #252	@ 0xfc
 801292e:	46bd      	mov	sp, r7
 8012930:	bd90      	pop	{r4, r7, pc}
 8012932:	bf00      	nop
 8012934:	08012965 	.word	0x08012965
 8012938:	08012941 	.word	0x08012941
 801293c:	08012989 	.word	0x08012989

08012940 <snmp_table_extract_value_from_s32ref>:


s16_t
snmp_table_extract_value_from_s32ref(struct snmp_node_instance* instance, void* value)
{
 8012940:	b480      	push	{r7}
 8012942:	b085      	sub	sp, #20
 8012944:	af00      	add	r7, sp, #0
 8012946:	6078      	str	r0, [r7, #4]
 8012948:	6039      	str	r1, [r7, #0]
  s32_t *dst = (s32_t*)value;
 801294a:	683b      	ldr	r3, [r7, #0]
 801294c:	60fb      	str	r3, [r7, #12]
  *dst = instance->reference.s32;
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	601a      	str	r2, [r3, #0]
  return sizeof(*dst);
 8012958:	2304      	movs	r3, #4
}
 801295a:	4618      	mov	r0, r3
 801295c:	3714      	adds	r7, #20
 801295e:	46bd      	mov	sp, r7
 8012960:	bc80      	pop	{r7}
 8012962:	4770      	bx	lr

08012964 <snmp_table_extract_value_from_u32ref>:

s16_t
snmp_table_extract_value_from_u32ref(struct snmp_node_instance* instance, void* value)
{
 8012964:	b480      	push	{r7}
 8012966:	b085      	sub	sp, #20
 8012968:	af00      	add	r7, sp, #0
 801296a:	6078      	str	r0, [r7, #4]
 801296c:	6039      	str	r1, [r7, #0]
  u32_t *dst = (u32_t*)value;
 801296e:	683b      	ldr	r3, [r7, #0]
 8012970:	60fb      	str	r3, [r7, #12]
  *dst = instance->reference.u32;
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	601a      	str	r2, [r3, #0]
  return sizeof(*dst);
 801297c:	2304      	movs	r3, #4
}
 801297e:	4618      	mov	r0, r3
 8012980:	3714      	adds	r7, #20
 8012982:	46bd      	mov	sp, r7
 8012984:	bc80      	pop	{r7}
 8012986:	4770      	bx	lr

08012988 <snmp_table_extract_value_from_refconstptr>:

s16_t
snmp_table_extract_value_from_refconstptr(struct snmp_node_instance* instance, void* value)
{
 8012988:	b580      	push	{r7, lr}
 801298a:	b082      	sub	sp, #8
 801298c:	af00      	add	r7, sp, #0
 801298e:	6078      	str	r0, [r7, #4]
 8012990:	6039      	str	r1, [r7, #0]
  MEMCPY(value, instance->reference.const_ptr, instance->reference_len);
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801299e:	461a      	mov	r2, r3
 80129a0:	6838      	ldr	r0, [r7, #0]
 80129a2:	f00e f812 	bl	80209ca <memcpy>
  return (u16_t)instance->reference_len;
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80129ac:	b21b      	sxth	r3, r3
}
 80129ae:	4618      	mov	r0, r3
 80129b0:	3708      	adds	r7, #8
 80129b2:	46bd      	mov	sp, r7
 80129b4:	bd80      	pop	{r7, pc}
	...

080129b8 <snmp_set_auth_traps_enabled>:
 * @ingroup snmp_traps
 * Enable/disable authentication traps
 */
void
snmp_set_auth_traps_enabled(u8_t enable)
{
 80129b8:	b480      	push	{r7}
 80129ba:	b083      	sub	sp, #12
 80129bc:	af00      	add	r7, sp, #0
 80129be:	4603      	mov	r3, r0
 80129c0:	71fb      	strb	r3, [r7, #7]
  snmp_auth_traps_enabled = enable;
 80129c2:	4a04      	ldr	r2, [pc, #16]	@ (80129d4 <snmp_set_auth_traps_enabled+0x1c>)
 80129c4:	79fb      	ldrb	r3, [r7, #7]
 80129c6:	7013      	strb	r3, [r2, #0]
}
 80129c8:	bf00      	nop
 80129ca:	370c      	adds	r7, #12
 80129cc:	46bd      	mov	sp, r7
 80129ce:	bc80      	pop	{r7}
 80129d0:	4770      	bx	lr
 80129d2:	bf00      	nop
 80129d4:	2000a598 	.word	0x2000a598

080129d8 <snmp_get_auth_traps_enabled>:
 * @ingroup snmp_traps
 * Get authentication traps enabled state
 */
u8_t
snmp_get_auth_traps_enabled(void)
{
 80129d8:	b480      	push	{r7}
 80129da:	af00      	add	r7, sp, #0
  return snmp_auth_traps_enabled;
 80129dc:	4b02      	ldr	r3, [pc, #8]	@ (80129e8 <snmp_get_auth_traps_enabled+0x10>)
 80129de:	781b      	ldrb	r3, [r3, #0]
}
 80129e0:	4618      	mov	r0, r3
 80129e2:	46bd      	mov	sp, r7
 80129e4:	bc80      	pop	{r7}
 80129e6:	4770      	bx	lr
 80129e8:	2000a598 	.word	0x2000a598

080129ec <snmp_send_trap>:
 * and .iso.org.dod.internet.private.enterprises.yourenterprise
 * (sysObjectID) for specific traps.
 */
err_t
snmp_send_trap(const struct snmp_obj_id* eoid, s32_t generic_trap, s32_t specific_trap, struct snmp_varbind *varbinds)
{
 80129ec:	b580      	push	{r7, lr}
 80129ee:	b092      	sub	sp, #72	@ 0x48
 80129f0:	af00      	add	r7, sp, #0
 80129f2:	60f8      	str	r0, [r7, #12]
 80129f4:	60b9      	str	r1, [r7, #8]
 80129f6:	607a      	str	r2, [r7, #4]
 80129f8:	603b      	str	r3, [r7, #0]
  struct snmp_msg_trap trap_msg;
  struct snmp_trap_dst *td;
  struct pbuf *p;
  u16_t i, tot_len;
  err_t err = ERR_OK;
 80129fa:	2300      	movs	r3, #0
 80129fc:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41

  trap_msg.snmp_version = 0;
 8012a00:	2300      	movs	r3, #0
 8012a02:	62fb      	str	r3, [r7, #44]	@ 0x2c

  for (i = 0, td = &trap_dst[0]; i < SNMP_TRAP_DESTINATIONS; i++, td++) {
 8012a04:	2300      	movs	r3, #0
 8012a06:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8012a0a:	4b4b      	ldr	r3, [pc, #300]	@ (8012b38 <snmp_send_trap+0x14c>)
 8012a0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8012a0e:	e088      	b.n	8012b22 <snmp_send_trap+0x136>
    if ((td->enable != 0) && !ip_addr_isany(&td->dip)) {
 8012a10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012a12:	791b      	ldrb	r3, [r3, #4]
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d07c      	beq.n	8012b12 <snmp_send_trap+0x126>
 8012a18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d079      	beq.n	8012b12 <snmp_send_trap+0x126>
 8012a1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d075      	beq.n	8012b12 <snmp_send_trap+0x126>
      /* lookup current source address for this dst */
      if (snmp_get_local_ip_for_dst(snmp_traps_handle, &td->dip, &trap_msg.sip)) {
 8012a26:	4b45      	ldr	r3, [pc, #276]	@ (8012b3c <snmp_send_trap+0x150>)
 8012a28:	6818      	ldr	r0, [r3, #0]
 8012a2a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012a2c:	f107 0318 	add.w	r3, r7, #24
 8012a30:	3304      	adds	r3, #4
 8012a32:	461a      	mov	r2, r3
 8012a34:	f7ff fadb 	bl	8011fee <snmp_get_local_ip_for_dst>
 8012a38:	4603      	mov	r3, r0
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d066      	beq.n	8012b0c <snmp_send_trap+0x120>
        if (eoid == NULL) {
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d104      	bne.n	8012a4e <snmp_send_trap+0x62>
          trap_msg.enterprise = snmp_get_device_enterprise_oid();
 8012a44:	f7fa f96e 	bl	800cd24 <snmp_get_device_enterprise_oid>
 8012a48:	4603      	mov	r3, r0
 8012a4a:	61bb      	str	r3, [r7, #24]
 8012a4c:	e001      	b.n	8012a52 <snmp_send_trap+0x66>
        } else {
          trap_msg.enterprise = eoid;
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	61bb      	str	r3, [r7, #24]
        }

        trap_msg.gen_trap = generic_trap;
 8012a52:	68bb      	ldr	r3, [r7, #8]
 8012a54:	623b      	str	r3, [r7, #32]
        if (generic_trap == SNMP_GENTRAP_ENTERPRISE_SPECIFIC) {
 8012a56:	68bb      	ldr	r3, [r7, #8]
 8012a58:	2b06      	cmp	r3, #6
 8012a5a:	d102      	bne.n	8012a62 <snmp_send_trap+0x76>
          trap_msg.spc_trap = specific_trap;
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8012a60:	e001      	b.n	8012a66 <snmp_send_trap+0x7a>
        } else {
          trap_msg.spc_trap = 0;
 8012a62:	2300      	movs	r3, #0
 8012a64:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        MIB2_COPY_SYSUPTIME_TO(&trap_msg.ts);
 8012a66:	f7f7 fd75 	bl	800a554 <sys_now>
 8012a6a:	4603      	mov	r3, r0
 8012a6c:	4a34      	ldr	r2, [pc, #208]	@ (8012b40 <snmp_send_trap+0x154>)
 8012a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8012a72:	08db      	lsrs	r3, r3, #3
 8012a74:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* pass 0, calculate length fields */
        tot_len = snmp_trap_varbind_sum(&trap_msg, varbinds);
 8012a76:	f107 0318 	add.w	r3, r7, #24
 8012a7a:	6839      	ldr	r1, [r7, #0]
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	f000 f883 	bl	8012b88 <snmp_trap_varbind_sum>
 8012a82:	4603      	mov	r3, r0
 8012a84:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        tot_len = snmp_trap_header_sum(&trap_msg, tot_len);
 8012a86:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8012a88:	f107 0318 	add.w	r3, r7, #24
 8012a8c:	4611      	mov	r1, r2
 8012a8e:	4618      	mov	r0, r3
 8012a90:	f000 f8b4 	bl	8012bfc <snmp_trap_header_sum>
 8012a94:	4603      	mov	r3, r0
 8012a96:	87fb      	strh	r3, [r7, #62]	@ 0x3e

        /* allocate pbuf(s) */
        p = pbuf_alloc(PBUF_TRANSPORT, tot_len, PBUF_RAM);
 8012a98:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012a9a:	2200      	movs	r2, #0
 8012a9c:	4619      	mov	r1, r3
 8012a9e:	2000      	movs	r0, #0
 8012aa0:	f001 f99e 	bl	8013de0 <pbuf_alloc>
 8012aa4:	63b8      	str	r0, [r7, #56]	@ 0x38
        if (p != NULL) {
 8012aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d02b      	beq.n	8012b04 <snmp_send_trap+0x118>
          struct snmp_pbuf_stream pbuf_stream;
          snmp_pbuf_stream_init(&pbuf_stream, p, 0, tot_len);
 8012aac:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012aae:	f107 0010 	add.w	r0, r7, #16
 8012ab2:	2200      	movs	r2, #0
 8012ab4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012ab6:	f7ff f943 	bl	8011d40 <snmp_pbuf_stream_init>

          /* pass 1, encode packet ino the pbuf(s) */
          snmp_trap_header_enc(&trap_msg, &pbuf_stream);
 8012aba:	f107 0210 	add.w	r2, r7, #16
 8012abe:	f107 0318 	add.w	r3, r7, #24
 8012ac2:	4611      	mov	r1, r2
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	f000 f9b5 	bl	8012e34 <snmp_trap_header_enc>
          snmp_trap_varbind_enc(&trap_msg, &pbuf_stream, varbinds);
 8012aca:	f107 0110 	add.w	r1, r7, #16
 8012ace:	f107 0318 	add.w	r3, r7, #24
 8012ad2:	683a      	ldr	r2, [r7, #0]
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	f000 f985 	bl	8012de4 <snmp_trap_varbind_enc>

          snmp_stats.outtraps++;
 8012ada:	4b1a      	ldr	r3, [pc, #104]	@ (8012b44 <snmp_send_trap+0x158>)
 8012adc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012ade:	3301      	adds	r3, #1
 8012ae0:	4a18      	ldr	r2, [pc, #96]	@ (8012b44 <snmp_send_trap+0x158>)
 8012ae2:	6693      	str	r3, [r2, #104]	@ 0x68
          snmp_stats.outpkts++;
 8012ae4:	4b17      	ldr	r3, [pc, #92]	@ (8012b44 <snmp_send_trap+0x158>)
 8012ae6:	685b      	ldr	r3, [r3, #4]
 8012ae8:	3301      	adds	r3, #1
 8012aea:	4a16      	ldr	r2, [pc, #88]	@ (8012b44 <snmp_send_trap+0x158>)
 8012aec:	6053      	str	r3, [r2, #4]

          /** send to the TRAP destination */
          snmp_sendto(snmp_traps_handle, p, &td->dip, SNMP_TRAP_PORT);
 8012aee:	4b13      	ldr	r3, [pc, #76]	@ (8012b3c <snmp_send_trap+0x150>)
 8012af0:	6818      	ldr	r0, [r3, #0]
 8012af2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012af4:	23a2      	movs	r3, #162	@ 0xa2
 8012af6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012af8:	f7ff fa67 	bl	8011fca <snmp_sendto>
          pbuf_free(p);
 8012afc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012afe:	f001 fce7 	bl	80144d0 <pbuf_free>
 8012b02:	e006      	b.n	8012b12 <snmp_send_trap+0x126>
        } else {
          err = ERR_MEM;
 8012b04:	23ff      	movs	r3, #255	@ 0xff
 8012b06:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 8012b0a:	e002      	b.n	8012b12 <snmp_send_trap+0x126>
        }
      } else {
        /* routing error */
        err = ERR_RTE;
 8012b0c:	23fc      	movs	r3, #252	@ 0xfc
 8012b0e:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
  for (i = 0, td = &trap_dst[0]; i < SNMP_TRAP_DESTINATIONS; i++, td++) {
 8012b12:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012b16:	3301      	adds	r3, #1
 8012b18:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8012b1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012b1e:	3308      	adds	r3, #8
 8012b20:	647b      	str	r3, [r7, #68]	@ 0x44
 8012b22:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	f43f af72 	beq.w	8012a10 <snmp_send_trap+0x24>
      }
    }
  }
  return err;
 8012b2c:	f997 3041 	ldrsb.w	r3, [r7, #65]	@ 0x41
}
 8012b30:	4618      	mov	r0, r3
 8012b32:	3748      	adds	r7, #72	@ 0x48
 8012b34:	46bd      	mov	sp, r7
 8012b36:	bd80      	pop	{r7, pc}
 8012b38:	2000a590 	.word	0x2000a590
 8012b3c:	2000a58c 	.word	0x2000a58c
 8012b40:	cccccccd 	.word	0xcccccccd
 8012b44:	2000a4e4 	.word	0x2000a4e4

08012b48 <snmp_send_trap_generic>:
 * @ingroup snmp_traps
 * Send generic SNMP trap
 */
err_t 
snmp_send_trap_generic(s32_t generic_trap)
{
 8012b48:	b580      	push	{r7, lr}
 8012b4a:	b082      	sub	sp, #8
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	6078      	str	r0, [r7, #4]
  static const struct snmp_obj_id oid = { 7, { 1, 3, 6, 1, 2, 1, 11 } };
  return snmp_send_trap(&oid, generic_trap, 0, NULL);
 8012b50:	2300      	movs	r3, #0
 8012b52:	2200      	movs	r2, #0
 8012b54:	6879      	ldr	r1, [r7, #4]
 8012b56:	4804      	ldr	r0, [pc, #16]	@ (8012b68 <snmp_send_trap_generic+0x20>)
 8012b58:	f7ff ff48 	bl	80129ec <snmp_send_trap>
 8012b5c:	4603      	mov	r3, r0
}
 8012b5e:	4618      	mov	r0, r3
 8012b60:	3708      	adds	r7, #8
 8012b62:	46bd      	mov	sp, r7
 8012b64:	bd80      	pop	{r7, pc}
 8012b66:	bf00      	nop
 8012b68:	0802ee80 	.word	0x0802ee80

08012b6c <snmp_authfail_trap>:
 * @ingroup snmp_traps
 * Send authentication failure trap (used internally by agent) 
 */
void
snmp_authfail_trap(void)
{
 8012b6c:	b580      	push	{r7, lr}
 8012b6e:	af00      	add	r7, sp, #0
  if (snmp_auth_traps_enabled != 0) {
 8012b70:	4b04      	ldr	r3, [pc, #16]	@ (8012b84 <snmp_authfail_trap+0x18>)
 8012b72:	781b      	ldrb	r3, [r3, #0]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d002      	beq.n	8012b7e <snmp_authfail_trap+0x12>
    snmp_send_trap_generic(SNMP_GENTRAP_AUTH_FAILURE);
 8012b78:	2004      	movs	r0, #4
 8012b7a:	f7ff ffe5 	bl	8012b48 <snmp_send_trap_generic>
  }
}
 8012b7e:	bf00      	nop
 8012b80:	bd80      	pop	{r7, pc}
 8012b82:	bf00      	nop
 8012b84:	2000a598 	.word	0x2000a598

08012b88 <snmp_trap_varbind_sum>:

static u16_t
snmp_trap_varbind_sum(struct snmp_msg_trap *trap, struct snmp_varbind *varbinds)
{
 8012b88:	b580      	push	{r7, lr}
 8012b8a:	b088      	sub	sp, #32
 8012b8c:	af00      	add	r7, sp, #0
 8012b8e:	6078      	str	r0, [r7, #4]
 8012b90:	6039      	str	r1, [r7, #0]
  struct snmp_varbind *varbind;
  u16_t tot_len;
  u8_t tot_len_len;

  tot_len = 0;
 8012b92:	2300      	movs	r3, #0
 8012b94:	837b      	strh	r3, [r7, #26]
  varbind = varbinds;
 8012b96:	683b      	ldr	r3, [r7, #0]
 8012b98:	61fb      	str	r3, [r7, #28]
  while (varbind != NULL) {
 8012b9a:	e015      	b.n	8012bc8 <snmp_trap_varbind_sum+0x40>
    struct snmp_varbind_len len;

    if (snmp_varbind_length(varbind, &len) == ERR_OK) {
 8012b9c:	f107 030c 	add.w	r3, r7, #12
 8012ba0:	4619      	mov	r1, r3
 8012ba2:	69f8      	ldr	r0, [r7, #28]
 8012ba4:	f7fe fa2c 	bl	8011000 <snmp_varbind_length>
 8012ba8:	4603      	mov	r3, r0
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d109      	bne.n	8012bc2 <snmp_trap_varbind_sum+0x3a>
      tot_len += 1 + len.vb_len_len + len.vb_value_len;
 8012bae:	7b3b      	ldrb	r3, [r7, #12]
 8012bb0:	461a      	mov	r2, r3
 8012bb2:	89fb      	ldrh	r3, [r7, #14]
 8012bb4:	4413      	add	r3, r2
 8012bb6:	b29a      	uxth	r2, r3
 8012bb8:	8b7b      	ldrh	r3, [r7, #26]
 8012bba:	4413      	add	r3, r2
 8012bbc:	b29b      	uxth	r3, r3
 8012bbe:	3301      	adds	r3, #1
 8012bc0:	837b      	strh	r3, [r7, #26]
    }

    varbind = varbind->next;
 8012bc2:	69fb      	ldr	r3, [r7, #28]
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	61fb      	str	r3, [r7, #28]
  while (varbind != NULL) {
 8012bc8:	69fb      	ldr	r3, [r7, #28]
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d1e6      	bne.n	8012b9c <snmp_trap_varbind_sum+0x14>
  }

  trap->vbseqlen = tot_len;
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	8b7a      	ldrh	r2, [r7, #26]
 8012bd2:	83da      	strh	r2, [r3, #30]
  snmp_asn1_enc_length_cnt(trap->vbseqlen, &tot_len_len);
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	8bdb      	ldrh	r3, [r3, #30]
 8012bd8:	f107 0219 	add.w	r2, r7, #25
 8012bdc:	4611      	mov	r1, r2
 8012bde:	4618      	mov	r0, r3
 8012be0:	f7f9 fcfa 	bl	800c5d8 <snmp_asn1_enc_length_cnt>
  tot_len += 1 + tot_len_len;
 8012be4:	7e7b      	ldrb	r3, [r7, #25]
 8012be6:	461a      	mov	r2, r3
 8012be8:	8b7b      	ldrh	r3, [r7, #26]
 8012bea:	4413      	add	r3, r2
 8012bec:	b29b      	uxth	r3, r3
 8012bee:	3301      	adds	r3, #1
 8012bf0:	837b      	strh	r3, [r7, #26]

  return tot_len;
 8012bf2:	8b7b      	ldrh	r3, [r7, #26]
}
 8012bf4:	4618      	mov	r0, r3
 8012bf6:	3720      	adds	r7, #32
 8012bf8:	46bd      	mov	sp, r7
 8012bfa:	bd80      	pop	{r7, pc}

08012bfc <snmp_trap_header_sum>:
 * @param vb_len varbind-list length
 * @return the required length for encoding the trap header
 */
static u16_t
snmp_trap_header_sum(struct snmp_msg_trap *trap, u16_t vb_len)
{
 8012bfc:	b580      	push	{r7, lr}
 8012bfe:	b084      	sub	sp, #16
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	6078      	str	r0, [r7, #4]
 8012c04:	460b      	mov	r3, r1
 8012c06:	807b      	strh	r3, [r7, #2]
  u16_t tot_len;
  u16_t len;
  u8_t lenlen;

  tot_len = vb_len;
 8012c08:	887b      	ldrh	r3, [r7, #2]
 8012c0a:	81fb      	strh	r3, [r7, #14]

  snmp_asn1_enc_u32t_cnt(trap->ts, &len);
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	691b      	ldr	r3, [r3, #16]
 8012c10:	f107 020c 	add.w	r2, r7, #12
 8012c14:	4611      	mov	r1, r2
 8012c16:	4618      	mov	r0, r3
 8012c18:	f7f9 fcfa 	bl	800c610 <snmp_asn1_enc_u32t_cnt>
  snmp_asn1_enc_length_cnt(len, &lenlen);
 8012c1c:	89bb      	ldrh	r3, [r7, #12]
 8012c1e:	f107 020b 	add.w	r2, r7, #11
 8012c22:	4611      	mov	r1, r2
 8012c24:	4618      	mov	r0, r3
 8012c26:	f7f9 fcd7 	bl	800c5d8 <snmp_asn1_enc_length_cnt>
  tot_len += 1 + len + lenlen;
 8012c2a:	7afb      	ldrb	r3, [r7, #11]
 8012c2c:	461a      	mov	r2, r3
 8012c2e:	89bb      	ldrh	r3, [r7, #12]
 8012c30:	4413      	add	r3, r2
 8012c32:	b29a      	uxth	r2, r3
 8012c34:	89fb      	ldrh	r3, [r7, #14]
 8012c36:	4413      	add	r3, r2
 8012c38:	b29b      	uxth	r3, r3
 8012c3a:	3301      	adds	r3, #1
 8012c3c:	81fb      	strh	r3, [r7, #14]

  snmp_asn1_enc_s32t_cnt(trap->spc_trap, &len);
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	68db      	ldr	r3, [r3, #12]
 8012c42:	461a      	mov	r2, r3
 8012c44:	f107 030c 	add.w	r3, r7, #12
 8012c48:	4619      	mov	r1, r3
 8012c4a:	4610      	mov	r0, r2
 8012c4c:	f7f9 fd2e 	bl	800c6ac <snmp_asn1_enc_s32t_cnt>
  snmp_asn1_enc_length_cnt(len, &lenlen);
 8012c50:	89bb      	ldrh	r3, [r7, #12]
 8012c52:	f107 020b 	add.w	r2, r7, #11
 8012c56:	4611      	mov	r1, r2
 8012c58:	4618      	mov	r0, r3
 8012c5a:	f7f9 fcbd 	bl	800c5d8 <snmp_asn1_enc_length_cnt>
  tot_len += 1 + len + lenlen;
 8012c5e:	7afb      	ldrb	r3, [r7, #11]
 8012c60:	461a      	mov	r2, r3
 8012c62:	89bb      	ldrh	r3, [r7, #12]
 8012c64:	4413      	add	r3, r2
 8012c66:	b29a      	uxth	r2, r3
 8012c68:	89fb      	ldrh	r3, [r7, #14]
 8012c6a:	4413      	add	r3, r2
 8012c6c:	b29b      	uxth	r3, r3
 8012c6e:	3301      	adds	r3, #1
 8012c70:	81fb      	strh	r3, [r7, #14]

  snmp_asn1_enc_s32t_cnt(trap->gen_trap, &len);
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	689b      	ldr	r3, [r3, #8]
 8012c76:	461a      	mov	r2, r3
 8012c78:	f107 030c 	add.w	r3, r7, #12
 8012c7c:	4619      	mov	r1, r3
 8012c7e:	4610      	mov	r0, r2
 8012c80:	f7f9 fd14 	bl	800c6ac <snmp_asn1_enc_s32t_cnt>
  snmp_asn1_enc_length_cnt(len, &lenlen);
 8012c84:	89bb      	ldrh	r3, [r7, #12]
 8012c86:	f107 020b 	add.w	r2, r7, #11
 8012c8a:	4611      	mov	r1, r2
 8012c8c:	4618      	mov	r0, r3
 8012c8e:	f7f9 fca3 	bl	800c5d8 <snmp_asn1_enc_length_cnt>
  tot_len += 1 + len + lenlen;
 8012c92:	7afb      	ldrb	r3, [r7, #11]
 8012c94:	461a      	mov	r2, r3
 8012c96:	89bb      	ldrh	r3, [r7, #12]
 8012c98:	4413      	add	r3, r2
 8012c9a:	b29a      	uxth	r2, r3
 8012c9c:	89fb      	ldrh	r3, [r7, #14]
 8012c9e:	4413      	add	r3, r2
 8012ca0:	b29b      	uxth	r3, r3
 8012ca2:	3301      	adds	r3, #1
 8012ca4:	81fb      	strh	r3, [r7, #14]
#if LWIP_IPV6
    len = sizeof(ip_2_ip6(&trap->sip)->addr);
#endif
  } else {
#if LWIP_IPV4
    len = sizeof(ip_2_ip4(&trap->sip)->addr);
 8012ca6:	2304      	movs	r3, #4
 8012ca8:	81bb      	strh	r3, [r7, #12]
#endif
  }
  snmp_asn1_enc_length_cnt(len, &lenlen);
 8012caa:	89bb      	ldrh	r3, [r7, #12]
 8012cac:	f107 020b 	add.w	r2, r7, #11
 8012cb0:	4611      	mov	r1, r2
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	f7f9 fc90 	bl	800c5d8 <snmp_asn1_enc_length_cnt>
  tot_len += 1 + len + lenlen;
 8012cb8:	7afb      	ldrb	r3, [r7, #11]
 8012cba:	461a      	mov	r2, r3
 8012cbc:	89bb      	ldrh	r3, [r7, #12]
 8012cbe:	4413      	add	r3, r2
 8012cc0:	b29a      	uxth	r2, r3
 8012cc2:	89fb      	ldrh	r3, [r7, #14]
 8012cc4:	4413      	add	r3, r2
 8012cc6:	b29b      	uxth	r3, r3
 8012cc8:	3301      	adds	r3, #1
 8012cca:	81fb      	strh	r3, [r7, #14]

  snmp_asn1_enc_oid_cnt(trap->enterprise->id, trap->enterprise->len, &len);
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	1d18      	adds	r0, r3, #4
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	781b      	ldrb	r3, [r3, #0]
 8012cd8:	4619      	mov	r1, r3
 8012cda:	f107 030c 	add.w	r3, r7, #12
 8012cde:	461a      	mov	r2, r3
 8012ce0:	f7f9 fd0e 	bl	800c700 <snmp_asn1_enc_oid_cnt>
  snmp_asn1_enc_length_cnt(len, &lenlen);
 8012ce4:	89bb      	ldrh	r3, [r7, #12]
 8012ce6:	f107 020b 	add.w	r2, r7, #11
 8012cea:	4611      	mov	r1, r2
 8012cec:	4618      	mov	r0, r3
 8012cee:	f7f9 fc73 	bl	800c5d8 <snmp_asn1_enc_length_cnt>
  tot_len += 1 + len + lenlen;
 8012cf2:	7afb      	ldrb	r3, [r7, #11]
 8012cf4:	461a      	mov	r2, r3
 8012cf6:	89bb      	ldrh	r3, [r7, #12]
 8012cf8:	4413      	add	r3, r2
 8012cfa:	b29a      	uxth	r2, r3
 8012cfc:	89fb      	ldrh	r3, [r7, #14]
 8012cfe:	4413      	add	r3, r2
 8012d00:	b29b      	uxth	r3, r3
 8012d02:	3301      	adds	r3, #1
 8012d04:	81fb      	strh	r3, [r7, #14]

  trap->pdulen = tot_len;
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	89fa      	ldrh	r2, [r7, #14]
 8012d0a:	831a      	strh	r2, [r3, #24]
  snmp_asn1_enc_length_cnt(trap->pdulen, &lenlen);
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	8b1b      	ldrh	r3, [r3, #24]
 8012d10:	f107 020b 	add.w	r2, r7, #11
 8012d14:	4611      	mov	r1, r2
 8012d16:	4618      	mov	r0, r3
 8012d18:	f7f9 fc5e 	bl	800c5d8 <snmp_asn1_enc_length_cnt>
  tot_len += 1 + lenlen;
 8012d1c:	7afb      	ldrb	r3, [r7, #11]
 8012d1e:	461a      	mov	r2, r3
 8012d20:	89fb      	ldrh	r3, [r7, #14]
 8012d22:	4413      	add	r3, r2
 8012d24:	b29b      	uxth	r3, r3
 8012d26:	3301      	adds	r3, #1
 8012d28:	81fb      	strh	r3, [r7, #14]

  trap->comlen = (u16_t)LWIP_MIN(strlen(snmp_community_trap), 0xFFFF);
 8012d2a:	4b2d      	ldr	r3, [pc, #180]	@ (8012de0 <snmp_trap_header_sum+0x1e4>)
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	4618      	mov	r0, r3
 8012d30:	f7ed fa54 	bl	80001dc <strlen>
 8012d34:	4603      	mov	r3, r0
 8012d36:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8012d3a:	4293      	cmp	r3, r2
 8012d3c:	d807      	bhi.n	8012d4e <snmp_trap_header_sum+0x152>
 8012d3e:	4b28      	ldr	r3, [pc, #160]	@ (8012de0 <snmp_trap_header_sum+0x1e4>)
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	4618      	mov	r0, r3
 8012d44:	f7ed fa4a 	bl	80001dc <strlen>
 8012d48:	4603      	mov	r3, r0
 8012d4a:	b29a      	uxth	r2, r3
 8012d4c:	e001      	b.n	8012d52 <snmp_trap_header_sum+0x156>
 8012d4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	835a      	strh	r2, [r3, #26]
  snmp_asn1_enc_length_cnt(trap->comlen, &lenlen);
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	8b5b      	ldrh	r3, [r3, #26]
 8012d5a:	f107 020b 	add.w	r2, r7, #11
 8012d5e:	4611      	mov	r1, r2
 8012d60:	4618      	mov	r0, r3
 8012d62:	f7f9 fc39 	bl	800c5d8 <snmp_asn1_enc_length_cnt>
  tot_len += 1 + lenlen + trap->comlen;
 8012d66:	7afb      	ldrb	r3, [r7, #11]
 8012d68:	461a      	mov	r2, r3
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	8b5b      	ldrh	r3, [r3, #26]
 8012d6e:	4413      	add	r3, r2
 8012d70:	b29a      	uxth	r2, r3
 8012d72:	89fb      	ldrh	r3, [r7, #14]
 8012d74:	4413      	add	r3, r2
 8012d76:	b29b      	uxth	r3, r3
 8012d78:	3301      	adds	r3, #1
 8012d7a:	81fb      	strh	r3, [r7, #14]

  snmp_asn1_enc_s32t_cnt(trap->snmp_version, &len);
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	695b      	ldr	r3, [r3, #20]
 8012d80:	461a      	mov	r2, r3
 8012d82:	f107 030c 	add.w	r3, r7, #12
 8012d86:	4619      	mov	r1, r3
 8012d88:	4610      	mov	r0, r2
 8012d8a:	f7f9 fc8f 	bl	800c6ac <snmp_asn1_enc_s32t_cnt>
  snmp_asn1_enc_length_cnt(len, &lenlen);
 8012d8e:	89bb      	ldrh	r3, [r7, #12]
 8012d90:	f107 020b 	add.w	r2, r7, #11
 8012d94:	4611      	mov	r1, r2
 8012d96:	4618      	mov	r0, r3
 8012d98:	f7f9 fc1e 	bl	800c5d8 <snmp_asn1_enc_length_cnt>
  tot_len += 1 + len + lenlen;
 8012d9c:	7afb      	ldrb	r3, [r7, #11]
 8012d9e:	461a      	mov	r2, r3
 8012da0:	89bb      	ldrh	r3, [r7, #12]
 8012da2:	4413      	add	r3, r2
 8012da4:	b29a      	uxth	r2, r3
 8012da6:	89fb      	ldrh	r3, [r7, #14]
 8012da8:	4413      	add	r3, r2
 8012daa:	b29b      	uxth	r3, r3
 8012dac:	3301      	adds	r3, #1
 8012dae:	81fb      	strh	r3, [r7, #14]

  trap->seqlen = tot_len;
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	89fa      	ldrh	r2, [r7, #14]
 8012db4:	839a      	strh	r2, [r3, #28]
  snmp_asn1_enc_length_cnt(trap->seqlen, &lenlen);
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	8b9b      	ldrh	r3, [r3, #28]
 8012dba:	f107 020b 	add.w	r2, r7, #11
 8012dbe:	4611      	mov	r1, r2
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	f7f9 fc09 	bl	800c5d8 <snmp_asn1_enc_length_cnt>
  tot_len += 1 + lenlen;
 8012dc6:	7afb      	ldrb	r3, [r7, #11]
 8012dc8:	461a      	mov	r2, r3
 8012dca:	89fb      	ldrh	r3, [r7, #14]
 8012dcc:	4413      	add	r3, r2
 8012dce:	b29b      	uxth	r3, r3
 8012dd0:	3301      	adds	r3, #1
 8012dd2:	81fb      	strh	r3, [r7, #14]

  return tot_len;
 8012dd4:	89fb      	ldrh	r3, [r7, #14]
}
 8012dd6:	4618      	mov	r0, r3
 8012dd8:	3710      	adds	r7, #16
 8012dda:	46bd      	mov	sp, r7
 8012ddc:	bd80      	pop	{r7, pc}
 8012dde:	bf00      	nop
 8012de0:	2000010c 	.word	0x2000010c

08012de4 <snmp_trap_varbind_enc>:

static void
snmp_trap_varbind_enc(struct snmp_msg_trap *trap, struct snmp_pbuf_stream *pbuf_stream, struct snmp_varbind *varbinds)
{
 8012de4:	b580      	push	{r7, lr}
 8012de6:	b088      	sub	sp, #32
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	60f8      	str	r0, [r7, #12]
 8012dec:	60b9      	str	r1, [r7, #8]
 8012dee:	607a      	str	r2, [r7, #4]
  struct snmp_asn1_tlv tlv;
  struct snmp_varbind *varbind;

  varbind = varbinds;
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	61fb      	str	r3, [r7, #28]

  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_SEQUENCE, 0, trap->vbseqlen);
 8012df4:	2330      	movs	r3, #48	@ 0x30
 8012df6:	753b      	strb	r3, [r7, #20]
 8012df8:	2300      	movs	r3, #0
 8012dfa:	757b      	strb	r3, [r7, #21]
 8012dfc:	2300      	movs	r3, #0
 8012dfe:	75bb      	strb	r3, [r7, #22]
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	8bdb      	ldrh	r3, [r3, #30]
 8012e04:	833b      	strh	r3, [r7, #24]
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 8012e06:	f107 0314 	add.w	r3, r7, #20
 8012e0a:	4619      	mov	r1, r3
 8012e0c:	68b8      	ldr	r0, [r7, #8]
 8012e0e:	f7f9 f9f7 	bl	800c200 <snmp_ans1_enc_tlv>

  while (varbind != NULL) {
 8012e12:	e006      	b.n	8012e22 <snmp_trap_varbind_enc+0x3e>
    snmp_append_outbound_varbind(pbuf_stream, varbind);
 8012e14:	69f9      	ldr	r1, [r7, #28]
 8012e16:	68b8      	ldr	r0, [r7, #8]
 8012e18:	f7fe fa42 	bl	80112a0 <snmp_append_outbound_varbind>

    varbind = varbind->next;
 8012e1c:	69fb      	ldr	r3, [r7, #28]
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	61fb      	str	r3, [r7, #28]
  while (varbind != NULL) {
 8012e22:	69fb      	ldr	r3, [r7, #28]
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d1f5      	bne.n	8012e14 <snmp_trap_varbind_enc+0x30>
  }
}
 8012e28:	bf00      	nop
 8012e2a:	bf00      	nop
 8012e2c:	3720      	adds	r7, #32
 8012e2e:	46bd      	mov	sp, r7
 8012e30:	bd80      	pop	{r7, pc}
	...

08012e34 <snmp_trap_header_enc>:
/**
 * Encodes trap header from head to tail.
 */
static void
snmp_trap_header_enc(struct snmp_msg_trap *trap, struct snmp_pbuf_stream *pbuf_stream)
{
 8012e34:	b580      	push	{r7, lr}
 8012e36:	b084      	sub	sp, #16
 8012e38:	af00      	add	r7, sp, #0
 8012e3a:	6078      	str	r0, [r7, #4]
 8012e3c:	6039      	str	r1, [r7, #0]
  struct snmp_asn1_tlv tlv;

  /* 'Message' sequence */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_SEQUENCE, 0, trap->seqlen);
 8012e3e:	2330      	movs	r3, #48	@ 0x30
 8012e40:	723b      	strb	r3, [r7, #8]
 8012e42:	2300      	movs	r3, #0
 8012e44:	727b      	strb	r3, [r7, #9]
 8012e46:	2300      	movs	r3, #0
 8012e48:	72bb      	strb	r3, [r7, #10]
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	8b9b      	ldrh	r3, [r3, #28]
 8012e4e:	81bb      	strh	r3, [r7, #12]
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 8012e50:	f107 0308 	add.w	r3, r7, #8
 8012e54:	4619      	mov	r1, r3
 8012e56:	6838      	ldr	r0, [r7, #0]
 8012e58:	f7f9 f9d2 	bl	800c200 <snmp_ans1_enc_tlv>

  /* version */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_INTEGER, 0, 0);
 8012e5c:	2302      	movs	r3, #2
 8012e5e:	723b      	strb	r3, [r7, #8]
 8012e60:	2300      	movs	r3, #0
 8012e62:	727b      	strb	r3, [r7, #9]
 8012e64:	2300      	movs	r3, #0
 8012e66:	72bb      	strb	r3, [r7, #10]
 8012e68:	2300      	movs	r3, #0
 8012e6a:	81bb      	strh	r3, [r7, #12]
  snmp_asn1_enc_s32t_cnt(trap->snmp_version, &tlv.value_len);
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	695b      	ldr	r3, [r3, #20]
 8012e70:	461a      	mov	r2, r3
 8012e72:	f107 0308 	add.w	r3, r7, #8
 8012e76:	3304      	adds	r3, #4
 8012e78:	4619      	mov	r1, r3
 8012e7a:	4610      	mov	r0, r2
 8012e7c:	f7f9 fc16 	bl	800c6ac <snmp_asn1_enc_s32t_cnt>
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 8012e80:	f107 0308 	add.w	r3, r7, #8
 8012e84:	4619      	mov	r1, r3
 8012e86:	6838      	ldr	r0, [r7, #0]
 8012e88:	f7f9 f9ba 	bl	800c200 <snmp_ans1_enc_tlv>
  snmp_asn1_enc_s32t(pbuf_stream, tlv.value_len, trap->snmp_version);
 8012e8c:	89b9      	ldrh	r1, [r7, #12]
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	695b      	ldr	r3, [r3, #20]
 8012e92:	461a      	mov	r2, r3
 8012e94:	6838      	ldr	r0, [r7, #0]
 8012e96:	f7f9 fafe 	bl	800c496 <snmp_asn1_enc_s32t>

  /* community */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_OCTET_STRING, 0, trap->comlen);
 8012e9a:	2304      	movs	r3, #4
 8012e9c:	723b      	strb	r3, [r7, #8]
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	727b      	strb	r3, [r7, #9]
 8012ea2:	2300      	movs	r3, #0
 8012ea4:	72bb      	strb	r3, [r7, #10]
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	8b5b      	ldrh	r3, [r3, #26]
 8012eaa:	81bb      	strh	r3, [r7, #12]
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 8012eac:	f107 0308 	add.w	r3, r7, #8
 8012eb0:	4619      	mov	r1, r3
 8012eb2:	6838      	ldr	r0, [r7, #0]
 8012eb4:	f7f9 f9a4 	bl	800c200 <snmp_ans1_enc_tlv>
  snmp_asn1_enc_raw(pbuf_stream,  (const u8_t *)snmp_community_trap, trap->comlen);
 8012eb8:	4b58      	ldr	r3, [pc, #352]	@ (801301c <snmp_trap_header_enc+0x1e8>)
 8012eba:	6819      	ldr	r1, [r3, #0]
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	8b5b      	ldrh	r3, [r3, #26]
 8012ec0:	461a      	mov	r2, r3
 8012ec2:	6838      	ldr	r0, [r7, #0]
 8012ec4:	f7f9 fa27 	bl	800c316 <snmp_asn1_enc_raw>

  /* 'PDU' sequence */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, (SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTENTTYPE_CONSTRUCTED | SNMP_ASN1_CONTEXT_PDU_TRAP), 0, trap->pdulen);
 8012ec8:	23a4      	movs	r3, #164	@ 0xa4
 8012eca:	723b      	strb	r3, [r7, #8]
 8012ecc:	2300      	movs	r3, #0
 8012ece:	727b      	strb	r3, [r7, #9]
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	72bb      	strb	r3, [r7, #10]
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	8b1b      	ldrh	r3, [r3, #24]
 8012ed8:	81bb      	strh	r3, [r7, #12]
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 8012eda:	f107 0308 	add.w	r3, r7, #8
 8012ede:	4619      	mov	r1, r3
 8012ee0:	6838      	ldr	r0, [r7, #0]
 8012ee2:	f7f9 f98d 	bl	800c200 <snmp_ans1_enc_tlv>

  /* object ID */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_OBJECT_ID, 0, 0);
 8012ee6:	2306      	movs	r3, #6
 8012ee8:	723b      	strb	r3, [r7, #8]
 8012eea:	2300      	movs	r3, #0
 8012eec:	727b      	strb	r3, [r7, #9]
 8012eee:	2300      	movs	r3, #0
 8012ef0:	72bb      	strb	r3, [r7, #10]
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	81bb      	strh	r3, [r7, #12]
  snmp_asn1_enc_oid_cnt(trap->enterprise->id, trap->enterprise->len, &tlv.value_len);
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	1d18      	adds	r0, r3, #4
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	781b      	ldrb	r3, [r3, #0]
 8012f02:	4619      	mov	r1, r3
 8012f04:	f107 0308 	add.w	r3, r7, #8
 8012f08:	3304      	adds	r3, #4
 8012f0a:	461a      	mov	r2, r3
 8012f0c:	f7f9 fbf8 	bl	800c700 <snmp_asn1_enc_oid_cnt>
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 8012f10:	f107 0308 	add.w	r3, r7, #8
 8012f14:	4619      	mov	r1, r3
 8012f16:	6838      	ldr	r0, [r7, #0]
 8012f18:	f7f9 f972 	bl	800c200 <snmp_ans1_enc_tlv>
  snmp_asn1_enc_oid(pbuf_stream, trap->enterprise->id, trap->enterprise->len);
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	1d19      	adds	r1, r3, #4
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	781b      	ldrb	r3, [r3, #0]
 8012f28:	461a      	mov	r2, r3
 8012f2a:	6838      	ldr	r0, [r7, #0]
 8012f2c:	f7f9 fae2 	bl	800c4f4 <snmp_asn1_enc_oid>
    snmp_ans1_enc_tlv(pbuf_stream, &tlv);
    snmp_asn1_enc_raw(pbuf_stream, (const u8_t *)&ip_2_ip6(&trap->sip)->addr, sizeof(ip_2_ip6(&trap->sip)->addr));
#endif
  } else {
#if LWIP_IPV4
    SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_IPADDR, 0, sizeof(ip_2_ip4(&trap->sip)->addr));
 8012f30:	2340      	movs	r3, #64	@ 0x40
 8012f32:	723b      	strb	r3, [r7, #8]
 8012f34:	2300      	movs	r3, #0
 8012f36:	727b      	strb	r3, [r7, #9]
 8012f38:	2300      	movs	r3, #0
 8012f3a:	72bb      	strb	r3, [r7, #10]
 8012f3c:	2304      	movs	r3, #4
 8012f3e:	81bb      	strh	r3, [r7, #12]
    snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 8012f40:	f107 0308 	add.w	r3, r7, #8
 8012f44:	4619      	mov	r1, r3
 8012f46:	6838      	ldr	r0, [r7, #0]
 8012f48:	f7f9 f95a 	bl	800c200 <snmp_ans1_enc_tlv>
    snmp_asn1_enc_raw(pbuf_stream, (const u8_t *)&ip_2_ip4(&trap->sip)->addr, sizeof(ip_2_ip4(&trap->sip)->addr));
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	3304      	adds	r3, #4
 8012f50:	2204      	movs	r2, #4
 8012f52:	4619      	mov	r1, r3
 8012f54:	6838      	ldr	r0, [r7, #0]
 8012f56:	f7f9 f9de 	bl	800c316 <snmp_asn1_enc_raw>
#endif
  }

  /* trap length */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_INTEGER, 0, 0);
 8012f5a:	2302      	movs	r3, #2
 8012f5c:	723b      	strb	r3, [r7, #8]
 8012f5e:	2300      	movs	r3, #0
 8012f60:	727b      	strb	r3, [r7, #9]
 8012f62:	2300      	movs	r3, #0
 8012f64:	72bb      	strb	r3, [r7, #10]
 8012f66:	2300      	movs	r3, #0
 8012f68:	81bb      	strh	r3, [r7, #12]
  snmp_asn1_enc_s32t_cnt(trap->gen_trap, &tlv.value_len);
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	689b      	ldr	r3, [r3, #8]
 8012f6e:	461a      	mov	r2, r3
 8012f70:	f107 0308 	add.w	r3, r7, #8
 8012f74:	3304      	adds	r3, #4
 8012f76:	4619      	mov	r1, r3
 8012f78:	4610      	mov	r0, r2
 8012f7a:	f7f9 fb97 	bl	800c6ac <snmp_asn1_enc_s32t_cnt>
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 8012f7e:	f107 0308 	add.w	r3, r7, #8
 8012f82:	4619      	mov	r1, r3
 8012f84:	6838      	ldr	r0, [r7, #0]
 8012f86:	f7f9 f93b 	bl	800c200 <snmp_ans1_enc_tlv>
  snmp_asn1_enc_s32t(pbuf_stream, tlv.value_len, trap->gen_trap);
 8012f8a:	89b9      	ldrh	r1, [r7, #12]
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	689b      	ldr	r3, [r3, #8]
 8012f90:	461a      	mov	r2, r3
 8012f92:	6838      	ldr	r0, [r7, #0]
 8012f94:	f7f9 fa7f 	bl	800c496 <snmp_asn1_enc_s32t>

  /* specific trap */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_INTEGER, 0, 0);
 8012f98:	2302      	movs	r3, #2
 8012f9a:	723b      	strb	r3, [r7, #8]
 8012f9c:	2300      	movs	r3, #0
 8012f9e:	727b      	strb	r3, [r7, #9]
 8012fa0:	2300      	movs	r3, #0
 8012fa2:	72bb      	strb	r3, [r7, #10]
 8012fa4:	2300      	movs	r3, #0
 8012fa6:	81bb      	strh	r3, [r7, #12]
  snmp_asn1_enc_s32t_cnt(trap->spc_trap, &tlv.value_len);
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	68db      	ldr	r3, [r3, #12]
 8012fac:	461a      	mov	r2, r3
 8012fae:	f107 0308 	add.w	r3, r7, #8
 8012fb2:	3304      	adds	r3, #4
 8012fb4:	4619      	mov	r1, r3
 8012fb6:	4610      	mov	r0, r2
 8012fb8:	f7f9 fb78 	bl	800c6ac <snmp_asn1_enc_s32t_cnt>
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 8012fbc:	f107 0308 	add.w	r3, r7, #8
 8012fc0:	4619      	mov	r1, r3
 8012fc2:	6838      	ldr	r0, [r7, #0]
 8012fc4:	f7f9 f91c 	bl	800c200 <snmp_ans1_enc_tlv>
  snmp_asn1_enc_s32t(pbuf_stream, tlv.value_len, trap->spc_trap);
 8012fc8:	89b9      	ldrh	r1, [r7, #12]
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	68db      	ldr	r3, [r3, #12]
 8012fce:	461a      	mov	r2, r3
 8012fd0:	6838      	ldr	r0, [r7, #0]
 8012fd2:	f7f9 fa60 	bl	800c496 <snmp_asn1_enc_s32t>

  /* timestamp */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_TIMETICKS, 0, 0);
 8012fd6:	2343      	movs	r3, #67	@ 0x43
 8012fd8:	723b      	strb	r3, [r7, #8]
 8012fda:	2300      	movs	r3, #0
 8012fdc:	727b      	strb	r3, [r7, #9]
 8012fde:	2300      	movs	r3, #0
 8012fe0:	72bb      	strb	r3, [r7, #10]
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	81bb      	strh	r3, [r7, #12]
  snmp_asn1_enc_s32t_cnt(trap->ts, &tlv.value_len);
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	691b      	ldr	r3, [r3, #16]
 8012fea:	461a      	mov	r2, r3
 8012fec:	f107 0308 	add.w	r3, r7, #8
 8012ff0:	3304      	adds	r3, #4
 8012ff2:	4619      	mov	r1, r3
 8012ff4:	4610      	mov	r0, r2
 8012ff6:	f7f9 fb59 	bl	800c6ac <snmp_asn1_enc_s32t_cnt>
  snmp_ans1_enc_tlv(pbuf_stream, &tlv);
 8012ffa:	f107 0308 	add.w	r3, r7, #8
 8012ffe:	4619      	mov	r1, r3
 8013000:	6838      	ldr	r0, [r7, #0]
 8013002:	f7f9 f8fd 	bl	800c200 <snmp_ans1_enc_tlv>
  snmp_asn1_enc_s32t(pbuf_stream, tlv.value_len, trap->ts);
 8013006:	89b9      	ldrh	r1, [r7, #12]
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	691b      	ldr	r3, [r3, #16]
 801300c:	461a      	mov	r2, r3
 801300e:	6838      	ldr	r0, [r7, #0]
 8013010:	f7f9 fa41 	bl	800c496 <snmp_asn1_enc_s32t>
}
 8013014:	bf00      	nop
 8013016:	3710      	adds	r7, #16
 8013018:	46bd      	mov	sp, r7
 801301a:	bd80      	pop	{r7, pc}
 801301c:	2000010c 	.word	0x2000010c

08013020 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8013020:	b480      	push	{r7}
 8013022:	b083      	sub	sp, #12
 8013024:	af00      	add	r7, sp, #0
 8013026:	4603      	mov	r3, r0
 8013028:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 801302a:	88fb      	ldrh	r3, [r7, #6]
 801302c:	ba5b      	rev16	r3, r3
 801302e:	b29b      	uxth	r3, r3
}
 8013030:	4618      	mov	r0, r3
 8013032:	370c      	adds	r7, #12
 8013034:	46bd      	mov	sp, r7
 8013036:	bc80      	pop	{r7}
 8013038:	4770      	bx	lr

0801303a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 801303a:	b480      	push	{r7}
 801303c:	b083      	sub	sp, #12
 801303e:	af00      	add	r7, sp, #0
 8013040:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	061a      	lsls	r2, r3, #24
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	021b      	lsls	r3, r3, #8
 801304a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801304e:	431a      	orrs	r2, r3
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	0a1b      	lsrs	r3, r3, #8
 8013054:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013058:	431a      	orrs	r2, r3
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	0e1b      	lsrs	r3, r3, #24
 801305e:	4313      	orrs	r3, r2
}
 8013060:	4618      	mov	r0, r3
 8013062:	370c      	adds	r7, #12
 8013064:	46bd      	mov	sp, r7
 8013066:	bc80      	pop	{r7}
 8013068:	4770      	bx	lr

0801306a <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char*
lwip_strnstr(const char* buffer, const char* token, size_t n)
{
 801306a:	b580      	push	{r7, lr}
 801306c:	b086      	sub	sp, #24
 801306e:	af00      	add	r7, sp, #0
 8013070:	60f8      	str	r0, [r7, #12]
 8013072:	60b9      	str	r1, [r7, #8]
 8013074:	607a      	str	r2, [r7, #4]
  const char* p;
  size_t tokenlen = strlen(token);
 8013076:	68b8      	ldr	r0, [r7, #8]
 8013078:	f7ed f8b0 	bl	80001dc <strlen>
 801307c:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 801307e:	693b      	ldr	r3, [r7, #16]
 8013080:	2b00      	cmp	r3, #0
 8013082:	d101      	bne.n	8013088 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	e022      	b.n	80130ce <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	617b      	str	r3, [r7, #20]
 801308c:	e012      	b.n	80130b4 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 801308e:	697b      	ldr	r3, [r7, #20]
 8013090:	781a      	ldrb	r2, [r3, #0]
 8013092:	68bb      	ldr	r3, [r7, #8]
 8013094:	781b      	ldrb	r3, [r3, #0]
 8013096:	429a      	cmp	r2, r3
 8013098:	d109      	bne.n	80130ae <lwip_strnstr+0x44>
 801309a:	693a      	ldr	r2, [r7, #16]
 801309c:	68b9      	ldr	r1, [r7, #8]
 801309e:	6978      	ldr	r0, [r7, #20]
 80130a0:	f00d fbe9 	bl	8020876 <strncmp>
 80130a4:	4603      	mov	r3, r0
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d101      	bne.n	80130ae <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 80130aa:	697b      	ldr	r3, [r7, #20]
 80130ac:	e00f      	b.n	80130ce <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 80130ae:	697b      	ldr	r3, [r7, #20]
 80130b0:	3301      	adds	r3, #1
 80130b2:	617b      	str	r3, [r7, #20]
 80130b4:	697b      	ldr	r3, [r7, #20]
 80130b6:	781b      	ldrb	r3, [r3, #0]
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d007      	beq.n	80130cc <lwip_strnstr+0x62>
 80130bc:	697a      	ldr	r2, [r7, #20]
 80130be:	693b      	ldr	r3, [r7, #16]
 80130c0:	441a      	add	r2, r3
 80130c2:	68f9      	ldr	r1, [r7, #12]
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	440b      	add	r3, r1
 80130c8:	429a      	cmp	r2, r3
 80130ca:	d9e0      	bls.n	801308e <lwip_strnstr+0x24>
    }
  }
  return NULL;
 80130cc:	2300      	movs	r3, #0
}
 80130ce:	4618      	mov	r0, r3
 80130d0:	3718      	adds	r7, #24
 80130d2:	46bd      	mov	sp, r7
 80130d4:	bd80      	pop	{r7, pc}

080130d6 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char* str1, const char* str2)
{
 80130d6:	b480      	push	{r7}
 80130d8:	b085      	sub	sp, #20
 80130da:	af00      	add	r7, sp, #0
 80130dc:	6078      	str	r0, [r7, #4]
 80130de:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	1c5a      	adds	r2, r3, #1
 80130e4:	607a      	str	r2, [r7, #4]
 80130e6:	781b      	ldrb	r3, [r3, #0]
 80130e8:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 80130ea:	683b      	ldr	r3, [r7, #0]
 80130ec:	1c5a      	adds	r2, r3, #1
 80130ee:	603a      	str	r2, [r7, #0]
 80130f0:	781b      	ldrb	r3, [r3, #0]
 80130f2:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 80130f4:	7bfa      	ldrb	r2, [r7, #15]
 80130f6:	7bbb      	ldrb	r3, [r7, #14]
 80130f8:	429a      	cmp	r2, r3
 80130fa:	d016      	beq.n	801312a <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 80130fc:	7bfb      	ldrb	r3, [r7, #15]
 80130fe:	f043 0320 	orr.w	r3, r3, #32
 8013102:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8013104:	7b7b      	ldrb	r3, [r7, #13]
 8013106:	2b60      	cmp	r3, #96	@ 0x60
 8013108:	d90c      	bls.n	8013124 <lwip_stricmp+0x4e>
 801310a:	7b7b      	ldrb	r3, [r7, #13]
 801310c:	2b7a      	cmp	r3, #122	@ 0x7a
 801310e:	d809      	bhi.n	8013124 <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 8013110:	7bbb      	ldrb	r3, [r7, #14]
 8013112:	f043 0320 	orr.w	r3, r3, #32
 8013116:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 8013118:	7b7a      	ldrb	r2, [r7, #13]
 801311a:	7b3b      	ldrb	r3, [r7, #12]
 801311c:	429a      	cmp	r2, r3
 801311e:	d003      	beq.n	8013128 <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 8013120:	2301      	movs	r3, #1
 8013122:	e006      	b.n	8013132 <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 8013124:	2301      	movs	r3, #1
 8013126:	e004      	b.n	8013132 <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8013128:	bf00      	nop
      }
    }
  } while (c1 != 0);
 801312a:	7bfb      	ldrb	r3, [r7, #15]
 801312c:	2b00      	cmp	r3, #0
 801312e:	d1d7      	bne.n	80130e0 <lwip_stricmp+0xa>
  return 0;
 8013130:	2300      	movs	r3, #0
}
 8013132:	4618      	mov	r0, r3
 8013134:	3714      	adds	r7, #20
 8013136:	46bd      	mov	sp, r7
 8013138:	bc80      	pop	{r7}
 801313a:	4770      	bx	lr

0801313c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 801313c:	b580      	push	{r7, lr}
 801313e:	b082      	sub	sp, #8
 8013140:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8013142:	2300      	movs	r3, #0
 8013144:	607b      	str	r3, [r7, #4]
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 8013146:	f001 fd5b 	bl	8014c00 <stats_init>
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 801314a:	f000 f8a7 	bl	801329c <mem_init>
  memp_init();
 801314e:	f000 fba5 	bl	801389c <memp_init>
  pbuf_init();
  netif_init();
 8013152:	f000 fc8b 	bl	8013a6c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8013156:	f007 f9c9 	bl	801a4ec <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 801315a:	f001 fd57 	bl	8014c0c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 801315e:	f007 f8a7 	bl	801a2b0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8013162:	bf00      	nop
 8013164:	3708      	adds	r7, #8
 8013166:	46bd      	mov	sp, r7
 8013168:	bd80      	pop	{r7, pc}
	...

0801316c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 801316c:	b580      	push	{r7, lr}
 801316e:	b084      	sub	sp, #16
 8013170:	af00      	add	r7, sp, #0
 8013172:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8013174:	4b40      	ldr	r3, [pc, #256]	@ (8013278 <plug_holes+0x10c>)
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	687a      	ldr	r2, [r7, #4]
 801317a:	429a      	cmp	r2, r3
 801317c:	d206      	bcs.n	801318c <plug_holes+0x20>
 801317e:	4b3f      	ldr	r3, [pc, #252]	@ (801327c <plug_holes+0x110>)
 8013180:	f240 125d 	movw	r2, #349	@ 0x15d
 8013184:	493e      	ldr	r1, [pc, #248]	@ (8013280 <plug_holes+0x114>)
 8013186:	483f      	ldr	r0, [pc, #252]	@ (8013284 <plug_holes+0x118>)
 8013188:	f00d f98a 	bl	80204a0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801318c:	4b3e      	ldr	r3, [pc, #248]	@ (8013288 <plug_holes+0x11c>)
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	687a      	ldr	r2, [r7, #4]
 8013192:	429a      	cmp	r2, r3
 8013194:	d306      	bcc.n	80131a4 <plug_holes+0x38>
 8013196:	4b39      	ldr	r3, [pc, #228]	@ (801327c <plug_holes+0x110>)
 8013198:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 801319c:	493b      	ldr	r1, [pc, #236]	@ (801328c <plug_holes+0x120>)
 801319e:	4839      	ldr	r0, [pc, #228]	@ (8013284 <plug_holes+0x118>)
 80131a0:	f00d f97e 	bl	80204a0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	791b      	ldrb	r3, [r3, #4]
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d006      	beq.n	80131ba <plug_holes+0x4e>
 80131ac:	4b33      	ldr	r3, [pc, #204]	@ (801327c <plug_holes+0x110>)
 80131ae:	f240 125f 	movw	r2, #351	@ 0x15f
 80131b2:	4937      	ldr	r1, [pc, #220]	@ (8013290 <plug_holes+0x124>)
 80131b4:	4833      	ldr	r0, [pc, #204]	@ (8013284 <plug_holes+0x118>)
 80131b6:	f00d f973 	bl	80204a0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	881b      	ldrh	r3, [r3, #0]
 80131be:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80131c2:	d906      	bls.n	80131d2 <plug_holes+0x66>
 80131c4:	4b2d      	ldr	r3, [pc, #180]	@ (801327c <plug_holes+0x110>)
 80131c6:	f44f 72b1 	mov.w	r2, #354	@ 0x162
 80131ca:	4932      	ldr	r1, [pc, #200]	@ (8013294 <plug_holes+0x128>)
 80131cc:	482d      	ldr	r0, [pc, #180]	@ (8013284 <plug_holes+0x118>)
 80131ce:	f00d f967 	bl	80204a0 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 80131d2:	4b29      	ldr	r3, [pc, #164]	@ (8013278 <plug_holes+0x10c>)
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	687a      	ldr	r2, [r7, #4]
 80131d8:	8812      	ldrh	r2, [r2, #0]
 80131da:	4413      	add	r3, r2
 80131dc:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80131de:	687a      	ldr	r2, [r7, #4]
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	429a      	cmp	r2, r3
 80131e4:	d01f      	beq.n	8013226 <plug_holes+0xba>
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	791b      	ldrb	r3, [r3, #4]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d11b      	bne.n	8013226 <plug_holes+0xba>
 80131ee:	4b26      	ldr	r3, [pc, #152]	@ (8013288 <plug_holes+0x11c>)
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	68fa      	ldr	r2, [r7, #12]
 80131f4:	429a      	cmp	r2, r3
 80131f6:	d016      	beq.n	8013226 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80131f8:	4b27      	ldr	r3, [pc, #156]	@ (8013298 <plug_holes+0x12c>)
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	68fa      	ldr	r2, [r7, #12]
 80131fe:	429a      	cmp	r2, r3
 8013200:	d102      	bne.n	8013208 <plug_holes+0x9c>
      lfree = mem;
 8013202:	4a25      	ldr	r2, [pc, #148]	@ (8013298 <plug_holes+0x12c>)
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	881a      	ldrh	r2, [r3, #0]
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8013210:	4b19      	ldr	r3, [pc, #100]	@ (8013278 <plug_holes+0x10c>)
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	687a      	ldr	r2, [r7, #4]
 8013216:	1ad1      	subs	r1, r2, r3
 8013218:	4b17      	ldr	r3, [pc, #92]	@ (8013278 <plug_holes+0x10c>)
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	68fa      	ldr	r2, [r7, #12]
 801321e:	8812      	ldrh	r2, [r2, #0]
 8013220:	4413      	add	r3, r2
 8013222:	b28a      	uxth	r2, r1
 8013224:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8013226:	4b14      	ldr	r3, [pc, #80]	@ (8013278 <plug_holes+0x10c>)
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	687a      	ldr	r2, [r7, #4]
 801322c:	8852      	ldrh	r2, [r2, #2]
 801322e:	4413      	add	r3, r2
 8013230:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8013232:	68ba      	ldr	r2, [r7, #8]
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	429a      	cmp	r2, r3
 8013238:	d01a      	beq.n	8013270 <plug_holes+0x104>
 801323a:	68bb      	ldr	r3, [r7, #8]
 801323c:	791b      	ldrb	r3, [r3, #4]
 801323e:	2b00      	cmp	r3, #0
 8013240:	d116      	bne.n	8013270 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8013242:	4b15      	ldr	r3, [pc, #84]	@ (8013298 <plug_holes+0x12c>)
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	687a      	ldr	r2, [r7, #4]
 8013248:	429a      	cmp	r2, r3
 801324a:	d102      	bne.n	8013252 <plug_holes+0xe6>
      lfree = pmem;
 801324c:	4a12      	ldr	r2, [pc, #72]	@ (8013298 <plug_holes+0x12c>)
 801324e:	68bb      	ldr	r3, [r7, #8]
 8013250:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	881a      	ldrh	r2, [r3, #0]
 8013256:	68bb      	ldr	r3, [r7, #8]
 8013258:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 801325a:	4b07      	ldr	r3, [pc, #28]	@ (8013278 <plug_holes+0x10c>)
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	68ba      	ldr	r2, [r7, #8]
 8013260:	1ad1      	subs	r1, r2, r3
 8013262:	4b05      	ldr	r3, [pc, #20]	@ (8013278 <plug_holes+0x10c>)
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	687a      	ldr	r2, [r7, #4]
 8013268:	8812      	ldrh	r2, [r2, #0]
 801326a:	4413      	add	r3, r2
 801326c:	b28a      	uxth	r2, r1
 801326e:	805a      	strh	r2, [r3, #2]
  }
}
 8013270:	bf00      	nop
 8013272:	3710      	adds	r7, #16
 8013274:	46bd      	mov	sp, r7
 8013276:	bd80      	pop	{r7, pc}
 8013278:	2000ac08 	.word	0x2000ac08
 801327c:	08023dc0 	.word	0x08023dc0
 8013280:	08023df0 	.word	0x08023df0
 8013284:	08023e08 	.word	0x08023e08
 8013288:	2000ac0c 	.word	0x2000ac0c
 801328c:	08023e30 	.word	0x08023e30
 8013290:	08023e4c 	.word	0x08023e4c
 8013294:	08023e68 	.word	0x08023e68
 8013298:	2000ac10 	.word	0x2000ac10

0801329c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 801329c:	b480      	push	{r7}
 801329e:	b083      	sub	sp, #12
 80132a0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80132a2:	4b1b      	ldr	r3, [pc, #108]	@ (8013310 <mem_init+0x74>)
 80132a4:	3303      	adds	r3, #3
 80132a6:	f023 0303 	bic.w	r3, r3, #3
 80132aa:	461a      	mov	r2, r3
 80132ac:	4b19      	ldr	r3, [pc, #100]	@ (8013314 <mem_init+0x78>)
 80132ae:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80132b0:	4b18      	ldr	r3, [pc, #96]	@ (8013314 <mem_init+0x78>)
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80132bc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	2200      	movs	r2, #0
 80132c2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	2200      	movs	r2, #0
 80132c8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 80132ca:	4b12      	ldr	r3, [pc, #72]	@ (8013314 <mem_init+0x78>)
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 80132d2:	4a11      	ldr	r2, [pc, #68]	@ (8013318 <mem_init+0x7c>)
 80132d4:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80132d6:	4b10      	ldr	r3, [pc, #64]	@ (8013318 <mem_init+0x7c>)
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	2201      	movs	r2, #1
 80132dc:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80132de:	4b0e      	ldr	r3, [pc, #56]	@ (8013318 <mem_init+0x7c>)
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80132e6:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80132e8:	4b0b      	ldr	r3, [pc, #44]	@ (8013318 <mem_init+0x7c>)
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80132f0:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80132f2:	4b08      	ldr	r3, [pc, #32]	@ (8013314 <mem_init+0x78>)
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	4a09      	ldr	r2, [pc, #36]	@ (801331c <mem_init+0x80>)
 80132f8:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 80132fa:	4b09      	ldr	r3, [pc, #36]	@ (8013320 <mem_init+0x84>)
 80132fc:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8013300:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8013304:	bf00      	nop
 8013306:	370c      	adds	r7, #12
 8013308:	46bd      	mov	sp, r7
 801330a:	bc80      	pop	{r7}
 801330c:	4770      	bx	lr
 801330e:	bf00      	nop
 8013310:	2000a5b4 	.word	0x2000a5b4
 8013314:	2000ac08 	.word	0x2000ac08
 8013318:	2000ac0c 	.word	0x2000ac0c
 801331c:	2000ac10 	.word	0x2000ac10
 8013320:	2000db84 	.word	0x2000db84

08013324 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8013324:	b580      	push	{r7, lr}
 8013326:	b084      	sub	sp, #16
 8013328:	af00      	add	r7, sp, #0
 801332a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	2b00      	cmp	r3, #0
 8013330:	d05d      	beq.n	80133ee <mem_free+0xca>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	f003 0303 	and.w	r3, r3, #3
 8013338:	2b00      	cmp	r3, #0
 801333a:	d006      	beq.n	801334a <mem_free+0x26>
 801333c:	4b2e      	ldr	r3, [pc, #184]	@ (80133f8 <mem_free+0xd4>)
 801333e:	f44f 72d6 	mov.w	r2, #428	@ 0x1ac
 8013342:	492e      	ldr	r1, [pc, #184]	@ (80133fc <mem_free+0xd8>)
 8013344:	482e      	ldr	r0, [pc, #184]	@ (8013400 <mem_free+0xdc>)
 8013346:	f00d f8ab 	bl	80204a0 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801334a:	4b2e      	ldr	r3, [pc, #184]	@ (8013404 <mem_free+0xe0>)
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	687a      	ldr	r2, [r7, #4]
 8013350:	429a      	cmp	r2, r3
 8013352:	d304      	bcc.n	801335e <mem_free+0x3a>
 8013354:	4b2c      	ldr	r3, [pc, #176]	@ (8013408 <mem_free+0xe4>)
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	687a      	ldr	r2, [r7, #4]
 801335a:	429a      	cmp	r2, r3
 801335c:	d306      	bcc.n	801336c <mem_free+0x48>
 801335e:	4b26      	ldr	r3, [pc, #152]	@ (80133f8 <mem_free+0xd4>)
 8013360:	f44f 72d7 	mov.w	r2, #430	@ 0x1ae
 8013364:	4929      	ldr	r1, [pc, #164]	@ (801340c <mem_free+0xe8>)
 8013366:	4826      	ldr	r0, [pc, #152]	@ (8013400 <mem_free+0xdc>)
 8013368:	f00d f89a 	bl	80204a0 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801336c:	4b25      	ldr	r3, [pc, #148]	@ (8013404 <mem_free+0xe0>)
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	687a      	ldr	r2, [r7, #4]
 8013372:	429a      	cmp	r2, r3
 8013374:	d304      	bcc.n	8013380 <mem_free+0x5c>
 8013376:	4b24      	ldr	r3, [pc, #144]	@ (8013408 <mem_free+0xe4>)
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	687a      	ldr	r2, [r7, #4]
 801337c:	429a      	cmp	r2, r3
 801337e:	d308      	bcc.n	8013392 <mem_free+0x6e>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
 8013380:	4b23      	ldr	r3, [pc, #140]	@ (8013410 <mem_free+0xec>)
 8013382:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 8013386:	3301      	adds	r3, #1
 8013388:	b29a      	uxth	r2, r3
 801338a:	4b21      	ldr	r3, [pc, #132]	@ (8013410 <mem_free+0xec>)
 801338c:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
    SYS_ARCH_UNPROTECT(lev);
    return;
 8013390:	e02e      	b.n	80133f0 <mem_free+0xcc>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	3b08      	subs	r3, #8
 8013396:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	791b      	ldrb	r3, [r3, #4]
 801339c:	2b00      	cmp	r3, #0
 801339e:	d106      	bne.n	80133ae <mem_free+0x8a>
 80133a0:	4b15      	ldr	r3, [pc, #84]	@ (80133f8 <mem_free+0xd4>)
 80133a2:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
 80133a6:	491b      	ldr	r1, [pc, #108]	@ (8013414 <mem_free+0xf0>)
 80133a8:	4815      	ldr	r0, [pc, #84]	@ (8013400 <mem_free+0xdc>)
 80133aa:	f00d f879 	bl	80204a0 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	2200      	movs	r2, #0
 80133b2:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80133b4:	4b18      	ldr	r3, [pc, #96]	@ (8013418 <mem_free+0xf4>)
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	68fa      	ldr	r2, [r7, #12]
 80133ba:	429a      	cmp	r2, r3
 80133bc:	d202      	bcs.n	80133c4 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80133be:	4a16      	ldr	r2, [pc, #88]	@ (8013418 <mem_free+0xf4>)
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 80133c4:	4b12      	ldr	r3, [pc, #72]	@ (8013410 <mem_free+0xec>)
 80133c6:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 80133ca:	4b0e      	ldr	r3, [pc, #56]	@ (8013404 <mem_free+0xe0>)
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	68f9      	ldr	r1, [r7, #12]
 80133d0:	1acb      	subs	r3, r1, r3
 80133d2:	b299      	uxth	r1, r3
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	881b      	ldrh	r3, [r3, #0]
 80133d8:	1acb      	subs	r3, r1, r3
 80133da:	b29b      	uxth	r3, r3
 80133dc:	4413      	add	r3, r2
 80133de:	b29a      	uxth	r2, r3
 80133e0:	4b0b      	ldr	r3, [pc, #44]	@ (8013410 <mem_free+0xec>)
 80133e2:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80133e6:	68f8      	ldr	r0, [r7, #12]
 80133e8:	f7ff fec0 	bl	801316c <plug_holes>
 80133ec:	e000      	b.n	80133f0 <mem_free+0xcc>
    return;
 80133ee:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80133f0:	3710      	adds	r7, #16
 80133f2:	46bd      	mov	sp, r7
 80133f4:	bd80      	pop	{r7, pc}
 80133f6:	bf00      	nop
 80133f8:	08023dc0 	.word	0x08023dc0
 80133fc:	08023e94 	.word	0x08023e94
 8013400:	08023e08 	.word	0x08023e08
 8013404:	2000ac08 	.word	0x2000ac08
 8013408:	2000ac0c 	.word	0x2000ac0c
 801340c:	08023eb8 	.word	0x08023eb8
 8013410:	2000db84 	.word	0x2000db84
 8013414:	08023ed0 	.word	0x08023ed0
 8013418:	2000ac10 	.word	0x2000ac10

0801341c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 801341c:	b580      	push	{r7, lr}
 801341e:	b086      	sub	sp, #24
 8013420:	af00      	add	r7, sp, #0
 8013422:	6078      	str	r0, [r7, #4]
 8013424:	460b      	mov	r3, r1
 8013426:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8013428:	887b      	ldrh	r3, [r7, #2]
 801342a:	3303      	adds	r3, #3
 801342c:	b29b      	uxth	r3, r3
 801342e:	f023 0303 	bic.w	r3, r3, #3
 8013432:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 8013434:	887b      	ldrh	r3, [r7, #2]
 8013436:	2b0b      	cmp	r3, #11
 8013438:	d801      	bhi.n	801343e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801343a:	230c      	movs	r3, #12
 801343c:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 801343e:	887b      	ldrh	r3, [r7, #2]
 8013440:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8013444:	d901      	bls.n	801344a <mem_trim+0x2e>
    return NULL;
 8013446:	2300      	movs	r3, #0
 8013448:	e0d1      	b.n	80135ee <mem_trim+0x1d2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801344a:	4b6b      	ldr	r3, [pc, #428]	@ (80135f8 <mem_trim+0x1dc>)
 801344c:	681b      	ldr	r3, [r3, #0]
 801344e:	687a      	ldr	r2, [r7, #4]
 8013450:	429a      	cmp	r2, r3
 8013452:	d304      	bcc.n	801345e <mem_trim+0x42>
 8013454:	4b69      	ldr	r3, [pc, #420]	@ (80135fc <mem_trim+0x1e0>)
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	687a      	ldr	r2, [r7, #4]
 801345a:	429a      	cmp	r2, r3
 801345c:	d306      	bcc.n	801346c <mem_trim+0x50>
 801345e:	4b68      	ldr	r3, [pc, #416]	@ (8013600 <mem_trim+0x1e4>)
 8013460:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8013464:	4967      	ldr	r1, [pc, #412]	@ (8013604 <mem_trim+0x1e8>)
 8013466:	4868      	ldr	r0, [pc, #416]	@ (8013608 <mem_trim+0x1ec>)
 8013468:	f00d f81a 	bl	80204a0 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801346c:	4b62      	ldr	r3, [pc, #392]	@ (80135f8 <mem_trim+0x1dc>)
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	687a      	ldr	r2, [r7, #4]
 8013472:	429a      	cmp	r2, r3
 8013474:	d304      	bcc.n	8013480 <mem_trim+0x64>
 8013476:	4b61      	ldr	r3, [pc, #388]	@ (80135fc <mem_trim+0x1e0>)
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	687a      	ldr	r2, [r7, #4]
 801347c:	429a      	cmp	r2, r3
 801347e:	d309      	bcc.n	8013494 <mem_trim+0x78>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
 8013480:	4b62      	ldr	r3, [pc, #392]	@ (801360c <mem_trim+0x1f0>)
 8013482:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 8013486:	3301      	adds	r3, #1
 8013488:	b29a      	uxth	r2, r3
 801348a:	4b60      	ldr	r3, [pc, #384]	@ (801360c <mem_trim+0x1f0>)
 801348c:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	e0ac      	b.n	80135ee <mem_trim+0x1d2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	3b08      	subs	r3, #8
 8013498:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 801349a:	4b57      	ldr	r3, [pc, #348]	@ (80135f8 <mem_trim+0x1dc>)
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	697a      	ldr	r2, [r7, #20]
 80134a0:	1ad3      	subs	r3, r2, r3
 80134a2:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 80134a4:	697b      	ldr	r3, [r7, #20]
 80134a6:	881a      	ldrh	r2, [r3, #0]
 80134a8:	8a7b      	ldrh	r3, [r7, #18]
 80134aa:	1ad3      	subs	r3, r2, r3
 80134ac:	b29b      	uxth	r3, r3
 80134ae:	3b08      	subs	r3, #8
 80134b0:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80134b2:	887a      	ldrh	r2, [r7, #2]
 80134b4:	8a3b      	ldrh	r3, [r7, #16]
 80134b6:	429a      	cmp	r2, r3
 80134b8:	d906      	bls.n	80134c8 <mem_trim+0xac>
 80134ba:	4b51      	ldr	r3, [pc, #324]	@ (8013600 <mem_trim+0x1e4>)
 80134bc:	f240 2206 	movw	r2, #518	@ 0x206
 80134c0:	4953      	ldr	r1, [pc, #332]	@ (8013610 <mem_trim+0x1f4>)
 80134c2:	4851      	ldr	r0, [pc, #324]	@ (8013608 <mem_trim+0x1ec>)
 80134c4:	f00c ffec 	bl	80204a0 <iprintf>
  if (newsize > size) {
 80134c8:	887a      	ldrh	r2, [r7, #2]
 80134ca:	8a3b      	ldrh	r3, [r7, #16]
 80134cc:	429a      	cmp	r2, r3
 80134ce:	d901      	bls.n	80134d4 <mem_trim+0xb8>
    /* not supported */
    return NULL;
 80134d0:	2300      	movs	r3, #0
 80134d2:	e08c      	b.n	80135ee <mem_trim+0x1d2>
  }
  if (newsize == size) {
 80134d4:	887a      	ldrh	r2, [r7, #2]
 80134d6:	8a3b      	ldrh	r3, [r7, #16]
 80134d8:	429a      	cmp	r2, r3
 80134da:	d101      	bne.n	80134e0 <mem_trim+0xc4>
    /* No change in size, simply return */
    return rmem;
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	e086      	b.n	80135ee <mem_trim+0x1d2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 80134e0:	4b45      	ldr	r3, [pc, #276]	@ (80135f8 <mem_trim+0x1dc>)
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	697a      	ldr	r2, [r7, #20]
 80134e6:	8812      	ldrh	r2, [r2, #0]
 80134e8:	4413      	add	r3, r2
 80134ea:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	791b      	ldrb	r3, [r3, #4]
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d13d      	bne.n	8013570 <mem_trim+0x154>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	881b      	ldrh	r3, [r3, #0]
 80134f8:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80134fa:	8a7a      	ldrh	r2, [r7, #18]
 80134fc:	887b      	ldrh	r3, [r7, #2]
 80134fe:	4413      	add	r3, r2
 8013500:	b29b      	uxth	r3, r3
 8013502:	3308      	adds	r3, #8
 8013504:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 8013506:	4b43      	ldr	r3, [pc, #268]	@ (8013614 <mem_trim+0x1f8>)
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	68fa      	ldr	r2, [r7, #12]
 801350c:	429a      	cmp	r2, r3
 801350e:	d105      	bne.n	801351c <mem_trim+0x100>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8013510:	4b39      	ldr	r3, [pc, #228]	@ (80135f8 <mem_trim+0x1dc>)
 8013512:	681a      	ldr	r2, [r3, #0]
 8013514:	897b      	ldrh	r3, [r7, #10]
 8013516:	4413      	add	r3, r2
 8013518:	4a3e      	ldr	r2, [pc, #248]	@ (8013614 <mem_trim+0x1f8>)
 801351a:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 801351c:	4b36      	ldr	r3, [pc, #216]	@ (80135f8 <mem_trim+0x1dc>)
 801351e:	681a      	ldr	r2, [r3, #0]
 8013520:	897b      	ldrh	r3, [r7, #10]
 8013522:	4413      	add	r3, r2
 8013524:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	2200      	movs	r2, #0
 801352a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	893a      	ldrh	r2, [r7, #8]
 8013530:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	8a7a      	ldrh	r2, [r7, #18]
 8013536:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8013538:	697b      	ldr	r3, [r7, #20]
 801353a:	897a      	ldrh	r2, [r7, #10]
 801353c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	881b      	ldrh	r3, [r3, #0]
 8013542:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8013546:	d006      	beq.n	8013556 <mem_trim+0x13a>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8013548:	4b2b      	ldr	r3, [pc, #172]	@ (80135f8 <mem_trim+0x1dc>)
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	68fa      	ldr	r2, [r7, #12]
 801354e:	8812      	ldrh	r2, [r2, #0]
 8013550:	4413      	add	r3, r2
 8013552:	897a      	ldrh	r2, [r7, #10]
 8013554:	805a      	strh	r2, [r3, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 8013556:	4b2d      	ldr	r3, [pc, #180]	@ (801360c <mem_trim+0x1f0>)
 8013558:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 801355c:	8879      	ldrh	r1, [r7, #2]
 801355e:	8a3b      	ldrh	r3, [r7, #16]
 8013560:	1acb      	subs	r3, r1, r3
 8013562:	b29b      	uxth	r3, r3
 8013564:	4413      	add	r3, r2
 8013566:	b29a      	uxth	r2, r3
 8013568:	4b28      	ldr	r3, [pc, #160]	@ (801360c <mem_trim+0x1f0>)
 801356a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 801356e:	e03d      	b.n	80135ec <mem_trim+0x1d0>
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8013570:	887b      	ldrh	r3, [r7, #2]
 8013572:	f103 0214 	add.w	r2, r3, #20
 8013576:	8a3b      	ldrh	r3, [r7, #16]
 8013578:	429a      	cmp	r2, r3
 801357a:	d837      	bhi.n	80135ec <mem_trim+0x1d0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 801357c:	8a7a      	ldrh	r2, [r7, #18]
 801357e:	887b      	ldrh	r3, [r7, #2]
 8013580:	4413      	add	r3, r2
 8013582:	b29b      	uxth	r3, r3
 8013584:	3308      	adds	r3, #8
 8013586:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8013588:	4b1b      	ldr	r3, [pc, #108]	@ (80135f8 <mem_trim+0x1dc>)
 801358a:	681a      	ldr	r2, [r3, #0]
 801358c:	897b      	ldrh	r3, [r7, #10]
 801358e:	4413      	add	r3, r2
 8013590:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 8013592:	4b20      	ldr	r3, [pc, #128]	@ (8013614 <mem_trim+0x1f8>)
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	68fa      	ldr	r2, [r7, #12]
 8013598:	429a      	cmp	r2, r3
 801359a:	d202      	bcs.n	80135a2 <mem_trim+0x186>
      lfree = mem2;
 801359c:	4a1d      	ldr	r2, [pc, #116]	@ (8013614 <mem_trim+0x1f8>)
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	2200      	movs	r2, #0
 80135a6:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80135a8:	697b      	ldr	r3, [r7, #20]
 80135aa:	881a      	ldrh	r2, [r3, #0]
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	8a7a      	ldrh	r2, [r7, #18]
 80135b4:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80135b6:	697b      	ldr	r3, [r7, #20]
 80135b8:	897a      	ldrh	r2, [r7, #10]
 80135ba:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	881b      	ldrh	r3, [r3, #0]
 80135c0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80135c4:	d006      	beq.n	80135d4 <mem_trim+0x1b8>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80135c6:	4b0c      	ldr	r3, [pc, #48]	@ (80135f8 <mem_trim+0x1dc>)
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	68fa      	ldr	r2, [r7, #12]
 80135cc:	8812      	ldrh	r2, [r2, #0]
 80135ce:	4413      	add	r3, r2
 80135d0:	897a      	ldrh	r2, [r7, #10]
 80135d2:	805a      	strh	r2, [r3, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 80135d4:	4b0d      	ldr	r3, [pc, #52]	@ (801360c <mem_trim+0x1f0>)
 80135d6:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 80135da:	8879      	ldrh	r1, [r7, #2]
 80135dc:	8a3b      	ldrh	r3, [r7, #16]
 80135de:	1acb      	subs	r3, r1, r3
 80135e0:	b29b      	uxth	r3, r3
 80135e2:	4413      	add	r3, r2
 80135e4:	b29a      	uxth	r2, r3
 80135e6:	4b09      	ldr	r3, [pc, #36]	@ (801360c <mem_trim+0x1f0>)
 80135e8:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80135ec:	687b      	ldr	r3, [r7, #4]
}
 80135ee:	4618      	mov	r0, r3
 80135f0:	3718      	adds	r7, #24
 80135f2:	46bd      	mov	sp, r7
 80135f4:	bd80      	pop	{r7, pc}
 80135f6:	bf00      	nop
 80135f8:	2000ac08 	.word	0x2000ac08
 80135fc:	2000ac0c 	.word	0x2000ac0c
 8013600:	08023dc0 	.word	0x08023dc0
 8013604:	08023ee4 	.word	0x08023ee4
 8013608:	08023e08 	.word	0x08023e08
 801360c:	2000db84 	.word	0x2000db84
 8013610:	08023efc 	.word	0x08023efc
 8013614:	2000ac10 	.word	0x2000ac10

08013618 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8013618:	b580      	push	{r7, lr}
 801361a:	b088      	sub	sp, #32
 801361c:	af00      	add	r7, sp, #0
 801361e:	4603      	mov	r3, r0
 8013620:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8013622:	88fb      	ldrh	r3, [r7, #6]
 8013624:	2b00      	cmp	r3, #0
 8013626:	d101      	bne.n	801362c <mem_malloc+0x14>
    return NULL;
 8013628:	2300      	movs	r3, #0
 801362a:	e0eb      	b.n	8013804 <mem_malloc+0x1ec>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 801362c:	88fb      	ldrh	r3, [r7, #6]
 801362e:	3303      	adds	r3, #3
 8013630:	b29b      	uxth	r3, r3
 8013632:	f023 0303 	bic.w	r3, r3, #3
 8013636:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 8013638:	88fb      	ldrh	r3, [r7, #6]
 801363a:	2b0b      	cmp	r3, #11
 801363c:	d801      	bhi.n	8013642 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801363e:	230c      	movs	r3, #12
 8013640:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 8013642:	88fb      	ldrh	r3, [r7, #6]
 8013644:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8013648:	d901      	bls.n	801364e <mem_malloc+0x36>
    return NULL;
 801364a:	2300      	movs	r3, #0
 801364c:	e0da      	b.n	8013804 <mem_malloc+0x1ec>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 801364e:	4b6f      	ldr	r3, [pc, #444]	@ (801380c <mem_malloc+0x1f4>)
 8013650:	681a      	ldr	r2, [r3, #0]
 8013652:	4b6f      	ldr	r3, [pc, #444]	@ (8013810 <mem_malloc+0x1f8>)
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	1ad3      	subs	r3, r2, r3
 8013658:	83fb      	strh	r3, [r7, #30]
 801365a:	e0c3      	b.n	80137e4 <mem_malloc+0x1cc>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 801365c:	4b6c      	ldr	r3, [pc, #432]	@ (8013810 <mem_malloc+0x1f8>)
 801365e:	681a      	ldr	r2, [r3, #0]
 8013660:	8bfb      	ldrh	r3, [r7, #30]
 8013662:	4413      	add	r3, r2
 8013664:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8013666:	697b      	ldr	r3, [r7, #20]
 8013668:	791b      	ldrb	r3, [r3, #4]
 801366a:	2b00      	cmp	r3, #0
 801366c:	f040 80b4 	bne.w	80137d8 <mem_malloc+0x1c0>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8013670:	697b      	ldr	r3, [r7, #20]
 8013672:	881b      	ldrh	r3, [r3, #0]
 8013674:	461a      	mov	r2, r3
 8013676:	8bfb      	ldrh	r3, [r7, #30]
 8013678:	1ad3      	subs	r3, r2, r3
 801367a:	f1a3 0208 	sub.w	r2, r3, #8
 801367e:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8013680:	429a      	cmp	r2, r3
 8013682:	f0c0 80a9 	bcc.w	80137d8 <mem_malloc+0x1c0>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8013686:	697b      	ldr	r3, [r7, #20]
 8013688:	881b      	ldrh	r3, [r3, #0]
 801368a:	461a      	mov	r2, r3
 801368c:	8bfb      	ldrh	r3, [r7, #30]
 801368e:	1ad3      	subs	r3, r2, r3
 8013690:	f1a3 0208 	sub.w	r2, r3, #8
 8013694:	88fb      	ldrh	r3, [r7, #6]
 8013696:	3314      	adds	r3, #20
 8013698:	429a      	cmp	r2, r3
 801369a:	d332      	bcc.n	8013702 <mem_malloc+0xea>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 801369c:	8bfa      	ldrh	r2, [r7, #30]
 801369e:	88fb      	ldrh	r3, [r7, #6]
 80136a0:	4413      	add	r3, r2
 80136a2:	b29b      	uxth	r3, r3
 80136a4:	3308      	adds	r3, #8
 80136a6:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 80136a8:	4b59      	ldr	r3, [pc, #356]	@ (8013810 <mem_malloc+0x1f8>)
 80136aa:	681a      	ldr	r2, [r3, #0]
 80136ac:	8a7b      	ldrh	r3, [r7, #18]
 80136ae:	4413      	add	r3, r2
 80136b0:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	2200      	movs	r2, #0
 80136b6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80136b8:	697b      	ldr	r3, [r7, #20]
 80136ba:	881a      	ldrh	r2, [r3, #0]
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	8bfa      	ldrh	r2, [r7, #30]
 80136c4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80136c6:	697b      	ldr	r3, [r7, #20]
 80136c8:	8a7a      	ldrh	r2, [r7, #18]
 80136ca:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80136cc:	697b      	ldr	r3, [r7, #20]
 80136ce:	2201      	movs	r2, #1
 80136d0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	881b      	ldrh	r3, [r3, #0]
 80136d6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80136da:	d006      	beq.n	80136ea <mem_malloc+0xd2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80136dc:	4b4c      	ldr	r3, [pc, #304]	@ (8013810 <mem_malloc+0x1f8>)
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	68fa      	ldr	r2, [r7, #12]
 80136e2:	8812      	ldrh	r2, [r2, #0]
 80136e4:	4413      	add	r3, r2
 80136e6:	8a7a      	ldrh	r2, [r7, #18]
 80136e8:	805a      	strh	r2, [r3, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 80136ea:	4b4a      	ldr	r3, [pc, #296]	@ (8013814 <mem_malloc+0x1fc>)
 80136ec:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 80136f0:	88fb      	ldrh	r3, [r7, #6]
 80136f2:	4413      	add	r3, r2
 80136f4:	b29b      	uxth	r3, r3
 80136f6:	3308      	adds	r3, #8
 80136f8:	b29a      	uxth	r2, r3
 80136fa:	4b46      	ldr	r3, [pc, #280]	@ (8013814 <mem_malloc+0x1fc>)
 80136fc:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8013700:	e013      	b.n	801372a <mem_malloc+0x112>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8013702:	697b      	ldr	r3, [r7, #20]
 8013704:	2201      	movs	r2, #1
 8013706:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
 8013708:	4b42      	ldr	r3, [pc, #264]	@ (8013814 <mem_malloc+0x1fc>)
 801370a:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 801370e:	697b      	ldr	r3, [r7, #20]
 8013710:	8819      	ldrh	r1, [r3, #0]
 8013712:	4b3f      	ldr	r3, [pc, #252]	@ (8013810 <mem_malloc+0x1f8>)
 8013714:	681b      	ldr	r3, [r3, #0]
 8013716:	6978      	ldr	r0, [r7, #20]
 8013718:	1ac3      	subs	r3, r0, r3
 801371a:	b29b      	uxth	r3, r3
 801371c:	1acb      	subs	r3, r1, r3
 801371e:	b29b      	uxth	r3, r3
 8013720:	4413      	add	r3, r2
 8013722:	b29a      	uxth	r2, r3
 8013724:	4b3b      	ldr	r3, [pc, #236]	@ (8013814 <mem_malloc+0x1fc>)
 8013726:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801372a:	4b38      	ldr	r3, [pc, #224]	@ (801380c <mem_malloc+0x1f4>)
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	697a      	ldr	r2, [r7, #20]
 8013730:	429a      	cmp	r2, r3
 8013732:	d127      	bne.n	8013784 <mem_malloc+0x16c>
          struct mem *cur = lfree;
 8013734:	4b35      	ldr	r3, [pc, #212]	@ (801380c <mem_malloc+0x1f4>)
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801373a:	e005      	b.n	8013748 <mem_malloc+0x130>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 801373c:	4b34      	ldr	r3, [pc, #208]	@ (8013810 <mem_malloc+0x1f8>)
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	69ba      	ldr	r2, [r7, #24]
 8013742:	8812      	ldrh	r2, [r2, #0]
 8013744:	4413      	add	r3, r2
 8013746:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 8013748:	69bb      	ldr	r3, [r7, #24]
 801374a:	791b      	ldrb	r3, [r3, #4]
 801374c:	2b00      	cmp	r3, #0
 801374e:	d004      	beq.n	801375a <mem_malloc+0x142>
 8013750:	4b31      	ldr	r3, [pc, #196]	@ (8013818 <mem_malloc+0x200>)
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	69ba      	ldr	r2, [r7, #24]
 8013756:	429a      	cmp	r2, r3
 8013758:	d1f0      	bne.n	801373c <mem_malloc+0x124>
          }
          lfree = cur;
 801375a:	4a2c      	ldr	r2, [pc, #176]	@ (801380c <mem_malloc+0x1f4>)
 801375c:	69bb      	ldr	r3, [r7, #24]
 801375e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8013760:	4b2a      	ldr	r3, [pc, #168]	@ (801380c <mem_malloc+0x1f4>)
 8013762:	681a      	ldr	r2, [r3, #0]
 8013764:	4b2c      	ldr	r3, [pc, #176]	@ (8013818 <mem_malloc+0x200>)
 8013766:	681b      	ldr	r3, [r3, #0]
 8013768:	429a      	cmp	r2, r3
 801376a:	d00b      	beq.n	8013784 <mem_malloc+0x16c>
 801376c:	4b27      	ldr	r3, [pc, #156]	@ (801380c <mem_malloc+0x1f4>)
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	791b      	ldrb	r3, [r3, #4]
 8013772:	2b00      	cmp	r3, #0
 8013774:	d006      	beq.n	8013784 <mem_malloc+0x16c>
 8013776:	4b29      	ldr	r3, [pc, #164]	@ (801381c <mem_malloc+0x204>)
 8013778:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801377c:	4928      	ldr	r1, [pc, #160]	@ (8013820 <mem_malloc+0x208>)
 801377e:	4829      	ldr	r0, [pc, #164]	@ (8013824 <mem_malloc+0x20c>)
 8013780:	f00c fe8e 	bl	80204a0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8013784:	88fa      	ldrh	r2, [r7, #6]
 8013786:	697b      	ldr	r3, [r7, #20]
 8013788:	4413      	add	r3, r2
 801378a:	3308      	adds	r3, #8
 801378c:	4a22      	ldr	r2, [pc, #136]	@ (8013818 <mem_malloc+0x200>)
 801378e:	6812      	ldr	r2, [r2, #0]
 8013790:	4293      	cmp	r3, r2
 8013792:	d906      	bls.n	80137a2 <mem_malloc+0x18a>
 8013794:	4b21      	ldr	r3, [pc, #132]	@ (801381c <mem_malloc+0x204>)
 8013796:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801379a:	4923      	ldr	r1, [pc, #140]	@ (8013828 <mem_malloc+0x210>)
 801379c:	4821      	ldr	r0, [pc, #132]	@ (8013824 <mem_malloc+0x20c>)
 801379e:	f00c fe7f 	bl	80204a0 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80137a2:	697b      	ldr	r3, [r7, #20]
 80137a4:	f003 0303 	and.w	r3, r3, #3
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d006      	beq.n	80137ba <mem_malloc+0x1a2>
 80137ac:	4b1b      	ldr	r3, [pc, #108]	@ (801381c <mem_malloc+0x204>)
 80137ae:	f240 22d5 	movw	r2, #725	@ 0x2d5
 80137b2:	491e      	ldr	r1, [pc, #120]	@ (801382c <mem_malloc+0x214>)
 80137b4:	481b      	ldr	r0, [pc, #108]	@ (8013824 <mem_malloc+0x20c>)
 80137b6:	f00c fe73 	bl	80204a0 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80137ba:	697b      	ldr	r3, [r7, #20]
 80137bc:	f003 0303 	and.w	r3, r3, #3
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d006      	beq.n	80137d2 <mem_malloc+0x1ba>
 80137c4:	4b15      	ldr	r3, [pc, #84]	@ (801381c <mem_malloc+0x204>)
 80137c6:	f240 22d7 	movw	r2, #727	@ 0x2d7
 80137ca:	4919      	ldr	r1, [pc, #100]	@ (8013830 <mem_malloc+0x218>)
 80137cc:	4815      	ldr	r0, [pc, #84]	@ (8013824 <mem_malloc+0x20c>)
 80137ce:	f00c fe67 	bl	80204a0 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 80137d2:	697b      	ldr	r3, [r7, #20]
 80137d4:	3308      	adds	r3, #8
 80137d6:	e015      	b.n	8013804 <mem_malloc+0x1ec>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 80137d8:	4b0d      	ldr	r3, [pc, #52]	@ (8013810 <mem_malloc+0x1f8>)
 80137da:	681a      	ldr	r2, [r3, #0]
 80137dc:	8bfb      	ldrh	r3, [r7, #30]
 80137de:	4413      	add	r3, r2
 80137e0:	881b      	ldrh	r3, [r3, #0]
 80137e2:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80137e4:	8bfa      	ldrh	r2, [r7, #30]
 80137e6:	88fb      	ldrh	r3, [r7, #6]
 80137e8:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 80137ec:	429a      	cmp	r2, r3
 80137ee:	f4ff af35 	bcc.w	801365c <mem_malloc+0x44>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
 80137f2:	4b08      	ldr	r3, [pc, #32]	@ (8013814 <mem_malloc+0x1fc>)
 80137f4:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 80137f8:	3301      	adds	r3, #1
 80137fa:	b29a      	uxth	r2, r3
 80137fc:	4b05      	ldr	r3, [pc, #20]	@ (8013814 <mem_malloc+0x1fc>)
 80137fe:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 8013802:	2300      	movs	r3, #0
}
 8013804:	4618      	mov	r0, r3
 8013806:	3720      	adds	r7, #32
 8013808:	46bd      	mov	sp, r7
 801380a:	bd80      	pop	{r7, pc}
 801380c:	2000ac10 	.word	0x2000ac10
 8013810:	2000ac08 	.word	0x2000ac08
 8013814:	2000db84 	.word	0x2000db84
 8013818:	2000ac0c 	.word	0x2000ac0c
 801381c:	08023dc0 	.word	0x08023dc0
 8013820:	08023f1c 	.word	0x08023f1c
 8013824:	08023e08 	.word	0x08023e08
 8013828:	08023f38 	.word	0x08023f38
 801382c:	08023f68 	.word	0x08023f68
 8013830:	08023f98 	.word	0x08023f98

08013834 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8013834:	b480      	push	{r7}
 8013836:	b085      	sub	sp, #20
 8013838:	af00      	add	r7, sp, #0
 801383a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	68db      	ldr	r3, [r3, #12]
 8013840:	2200      	movs	r2, #0
 8013842:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	689b      	ldr	r3, [r3, #8]
 8013848:	3303      	adds	r3, #3
 801384a:	f023 0303 	bic.w	r3, r3, #3
 801384e:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8013850:	2300      	movs	r3, #0
 8013852:	60fb      	str	r3, [r7, #12]
 8013854:	e011      	b.n	801387a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	68db      	ldr	r3, [r3, #12]
 801385a:	681a      	ldr	r2, [r3, #0]
 801385c:	68bb      	ldr	r3, [r7, #8]
 801385e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	68db      	ldr	r3, [r3, #12]
 8013864:	68ba      	ldr	r2, [r7, #8]
 8013866:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	889b      	ldrh	r3, [r3, #4]
 801386c:	461a      	mov	r2, r3
 801386e:	68bb      	ldr	r3, [r7, #8]
 8013870:	4413      	add	r3, r2
 8013872:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	3301      	adds	r3, #1
 8013878:	60fb      	str	r3, [r7, #12]
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	88db      	ldrh	r3, [r3, #6]
 801387e:	461a      	mov	r2, r3
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	4293      	cmp	r3, r2
 8013884:	dbe7      	blt.n	8013856 <memp_init_pool+0x22>
      + MEMP_SANITY_REGION_AFTER_ALIGNED
#endif
    );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	687a      	ldr	r2, [r7, #4]
 801388c:	88d2      	ldrh	r2, [r2, #6]
 801388e:	805a      	strh	r2, [r3, #2]
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8013890:	bf00      	nop
 8013892:	3714      	adds	r7, #20
 8013894:	46bd      	mov	sp, r7
 8013896:	bc80      	pop	{r7}
 8013898:	4770      	bx	lr
	...

0801389c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 801389c:	b580      	push	{r7, lr}
 801389e:	b082      	sub	sp, #8
 80138a0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80138a2:	2300      	movs	r3, #0
 80138a4:	80fb      	strh	r3, [r7, #6]
 80138a6:	e014      	b.n	80138d2 <memp_init+0x36>
    memp_init_pool(memp_pools[i]);
 80138a8:	88fb      	ldrh	r3, [r7, #6]
 80138aa:	4a0e      	ldr	r2, [pc, #56]	@ (80138e4 <memp_init+0x48>)
 80138ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80138b0:	4618      	mov	r0, r3
 80138b2:	f7ff ffbf 	bl	8013834 <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
 80138b6:	88fb      	ldrh	r3, [r7, #6]
 80138b8:	4a0a      	ldr	r2, [pc, #40]	@ (80138e4 <memp_init+0x48>)
 80138ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80138be:	88fb      	ldrh	r3, [r7, #6]
 80138c0:	6812      	ldr	r2, [r2, #0]
 80138c2:	4909      	ldr	r1, [pc, #36]	@ (80138e8 <memp_init+0x4c>)
 80138c4:	332c      	adds	r3, #44	@ 0x2c
 80138c6:	009b      	lsls	r3, r3, #2
 80138c8:	440b      	add	r3, r1
 80138ca:	605a      	str	r2, [r3, #4]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80138cc:	88fb      	ldrh	r3, [r7, #6]
 80138ce:	3301      	adds	r3, #1
 80138d0:	80fb      	strh	r3, [r7, #6]
 80138d2:	88fb      	ldrh	r3, [r7, #6]
 80138d4:	2b08      	cmp	r3, #8
 80138d6:	d9e7      	bls.n	80138a8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80138d8:	bf00      	nop
 80138da:	bf00      	nop
 80138dc:	3708      	adds	r7, #8
 80138de:	46bd      	mov	sp, r7
 80138e0:	bd80      	pop	{r7, pc}
 80138e2:	bf00      	nop
 80138e4:	0802efdc 	.word	0x0802efdc
 80138e8:	2000db84 	.word	0x2000db84

080138ec <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 80138ec:	b580      	push	{r7, lr}
 80138ee:	b084      	sub	sp, #16
 80138f0:	af00      	add	r7, sp, #0
 80138f2:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	68db      	ldr	r3, [r3, #12]
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d026      	beq.n	8013950 <do_memp_malloc_pool+0x64>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	68db      	ldr	r3, [r3, #12]
 8013906:	68fa      	ldr	r2, [r7, #12]
 8013908:	6812      	ldr	r2, [r2, #0]
 801390a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801390c:	68fb      	ldr	r3, [r7, #12]
 801390e:	f003 0303 	and.w	r3, r3, #3
 8013912:	2b00      	cmp	r3, #0
 8013914:	d006      	beq.n	8013924 <do_memp_malloc_pool+0x38>
 8013916:	4b14      	ldr	r3, [pc, #80]	@ (8013968 <do_memp_malloc_pool+0x7c>)
 8013918:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 801391c:	4913      	ldr	r1, [pc, #76]	@ (801396c <do_memp_malloc_pool+0x80>)
 801391e:	4814      	ldr	r0, [pc, #80]	@ (8013970 <do_memp_malloc_pool+0x84>)
 8013920:	f00c fdbe 	bl	80204a0 <iprintf>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	889a      	ldrh	r2, [r3, #4]
 801392a:	3201      	adds	r2, #1
 801392c:	b292      	uxth	r2, r2
 801392e:	809a      	strh	r2, [r3, #4]
    if (desc->stats->used > desc->stats->max) {
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	889a      	ldrh	r2, [r3, #4]
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	88db      	ldrh	r3, [r3, #6]
 801393c:	429a      	cmp	r2, r3
 801393e:	d905      	bls.n	801394c <do_memp_malloc_pool+0x60>
      desc->stats->max = desc->stats->used;
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	681a      	ldr	r2, [r3, #0]
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	8892      	ldrh	r2, [r2, #4]
 801394a:	80da      	strh	r2, [r3, #6]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	e006      	b.n	801395e <do_memp_malloc_pool+0x72>
  } else {
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
#if MEMP_STATS
    desc->stats->err++;
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	881a      	ldrh	r2, [r3, #0]
 8013956:	3201      	adds	r2, #1
 8013958:	b292      	uxth	r2, r2
 801395a:	801a      	strh	r2, [r3, #0]
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 801395c:	2300      	movs	r3, #0
}
 801395e:	4618      	mov	r0, r3
 8013960:	3710      	adds	r7, #16
 8013962:	46bd      	mov	sp, r7
 8013964:	bd80      	pop	{r7, pc}
 8013966:	bf00      	nop
 8013968:	08023fbc 	.word	0x08023fbc
 801396c:	08023fec 	.word	0x08023fec
 8013970:	08024010 	.word	0x08024010

08013974 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8013974:	b580      	push	{r7, lr}
 8013976:	b084      	sub	sp, #16
 8013978:	af00      	add	r7, sp, #0
 801397a:	4603      	mov	r3, r0
 801397c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801397e:	79fb      	ldrb	r3, [r7, #7]
 8013980:	2b08      	cmp	r3, #8
 8013982:	d908      	bls.n	8013996 <memp_malloc+0x22>
 8013984:	4b0a      	ldr	r3, [pc, #40]	@ (80139b0 <memp_malloc+0x3c>)
 8013986:	f240 1287 	movw	r2, #391	@ 0x187
 801398a:	490a      	ldr	r1, [pc, #40]	@ (80139b4 <memp_malloc+0x40>)
 801398c:	480a      	ldr	r0, [pc, #40]	@ (80139b8 <memp_malloc+0x44>)
 801398e:	f00c fd87 	bl	80204a0 <iprintf>
 8013992:	2300      	movs	r3, #0
 8013994:	e008      	b.n	80139a8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8013996:	79fb      	ldrb	r3, [r7, #7]
 8013998:	4a08      	ldr	r2, [pc, #32]	@ (80139bc <memp_malloc+0x48>)
 801399a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801399e:	4618      	mov	r0, r3
 80139a0:	f7ff ffa4 	bl	80138ec <do_memp_malloc_pool>
 80139a4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80139a6:	68fb      	ldr	r3, [r7, #12]
}
 80139a8:	4618      	mov	r0, r3
 80139aa:	3710      	adds	r7, #16
 80139ac:	46bd      	mov	sp, r7
 80139ae:	bd80      	pop	{r7, pc}
 80139b0:	08023fbc 	.word	0x08023fbc
 80139b4:	0802404c 	.word	0x0802404c
 80139b8:	08024010 	.word	0x08024010
 80139bc:	0802efdc 	.word	0x0802efdc

080139c0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 80139c0:	b580      	push	{r7, lr}
 80139c2:	b084      	sub	sp, #16
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	6078      	str	r0, [r7, #4]
 80139c8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80139ca:	683b      	ldr	r3, [r7, #0]
 80139cc:	f003 0303 	and.w	r3, r3, #3
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d006      	beq.n	80139e2 <do_memp_free_pool+0x22>
 80139d4:	4b0d      	ldr	r3, [pc, #52]	@ (8013a0c <do_memp_free_pool+0x4c>)
 80139d6:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 80139da:	490d      	ldr	r1, [pc, #52]	@ (8013a10 <do_memp_free_pool+0x50>)
 80139dc:	480d      	ldr	r0, [pc, #52]	@ (8013a14 <do_memp_free_pool+0x54>)
 80139de:	f00c fd5f 	bl	80204a0 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 80139e2:	683b      	ldr	r3, [r7, #0]
 80139e4:	60fb      	str	r3, [r7, #12]
  memp_overflow_check_element_overflow(memp, desc);
  memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	889a      	ldrh	r2, [r3, #4]
 80139ec:	3a01      	subs	r2, #1
 80139ee:	b292      	uxth	r2, r2
 80139f0:	809a      	strh	r2, [r3, #4]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	68db      	ldr	r3, [r3, #12]
 80139f6:	681a      	ldr	r2, [r3, #0]
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	68db      	ldr	r3, [r3, #12]
 8013a00:	68fa      	ldr	r2, [r7, #12]
 8013a02:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8013a04:	bf00      	nop
 8013a06:	3710      	adds	r7, #16
 8013a08:	46bd      	mov	sp, r7
 8013a0a:	bd80      	pop	{r7, pc}
 8013a0c:	08023fbc 	.word	0x08023fbc
 8013a10:	0802406c 	.word	0x0802406c
 8013a14:	08024010 	.word	0x08024010

08013a18 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8013a18:	b580      	push	{r7, lr}
 8013a1a:	b082      	sub	sp, #8
 8013a1c:	af00      	add	r7, sp, #0
 8013a1e:	4603      	mov	r3, r0
 8013a20:	6039      	str	r1, [r7, #0]
 8013a22:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8013a24:	79fb      	ldrb	r3, [r7, #7]
 8013a26:	2b08      	cmp	r3, #8
 8013a28:	d907      	bls.n	8013a3a <memp_free+0x22>
 8013a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8013a5c <memp_free+0x44>)
 8013a2c:	f240 12db 	movw	r2, #475	@ 0x1db
 8013a30:	490b      	ldr	r1, [pc, #44]	@ (8013a60 <memp_free+0x48>)
 8013a32:	480c      	ldr	r0, [pc, #48]	@ (8013a64 <memp_free+0x4c>)
 8013a34:	f00c fd34 	bl	80204a0 <iprintf>
 8013a38:	e00c      	b.n	8013a54 <memp_free+0x3c>

  if (mem == NULL) {
 8013a3a:	683b      	ldr	r3, [r7, #0]
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d008      	beq.n	8013a52 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8013a40:	79fb      	ldrb	r3, [r7, #7]
 8013a42:	4a09      	ldr	r2, [pc, #36]	@ (8013a68 <memp_free+0x50>)
 8013a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013a48:	6839      	ldr	r1, [r7, #0]
 8013a4a:	4618      	mov	r0, r3
 8013a4c:	f7ff ffb8 	bl	80139c0 <do_memp_free_pool>
 8013a50:	e000      	b.n	8013a54 <memp_free+0x3c>
    return;
 8013a52:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8013a54:	3708      	adds	r7, #8
 8013a56:	46bd      	mov	sp, r7
 8013a58:	bd80      	pop	{r7, pc}
 8013a5a:	bf00      	nop
 8013a5c:	08023fbc 	.word	0x08023fbc
 8013a60:	0802408c 	.word	0x0802408c
 8013a64:	08024010 	.word	0x08024010
 8013a68:	0802efdc 	.word	0x0802efdc

08013a6c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8013a6c:	b480      	push	{r7}
 8013a6e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8013a70:	bf00      	nop
 8013a72:	46bd      	mov	sp, r7
 8013a74:	bc80      	pop	{r7}
 8013a76:	4770      	bx	lr

08013a78 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8013a78:	b580      	push	{r7, lr}
 8013a7a:	b084      	sub	sp, #16
 8013a7c:	af00      	add	r7, sp, #0
 8013a7e:	60f8      	str	r0, [r7, #12]
 8013a80:	60b9      	str	r1, [r7, #8]
 8013a82:	607a      	str	r2, [r7, #4]
 8013a84:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8013a86:	69fb      	ldr	r3, [r7, #28]
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d105      	bne.n	8013a98 <netif_add+0x20>
 8013a8c:	4b24      	ldr	r3, [pc, #144]	@ (8013b20 <netif_add+0xa8>)
 8013a8e:	22fb      	movs	r2, #251	@ 0xfb
 8013a90:	4924      	ldr	r1, [pc, #144]	@ (8013b24 <netif_add+0xac>)
 8013a92:	4825      	ldr	r0, [pc, #148]	@ (8013b28 <netif_add+0xb0>)
 8013a94:	f00c fd04 	bl	80204a0 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	2200      	movs	r2, #0
 8013a9c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	2200      	movs	r2, #0
 8013aa2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8013aa4:	68fb      	ldr	r3, [r7, #12]
 8013aa6:	2200      	movs	r2, #0
 8013aa8:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	2200      	movs	r2, #0
 8013aae:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	3324      	adds	r3, #36	@ 0x24
 8013ab6:	2204      	movs	r2, #4
 8013ab8:	2100      	movs	r1, #0
 8013aba:	4618      	mov	r0, r3
 8013abc:	f00c fec6 	bl	802084c <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	2203      	movs	r2, #3
 8013ac4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	2200      	movs	r2, #0
 8013acc:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	69ba      	ldr	r2, [r7, #24]
 8013ad2:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 8013ad4:	4b15      	ldr	r3, [pc, #84]	@ (8013b2c <netif_add+0xb4>)
 8013ad6:	781b      	ldrb	r3, [r3, #0]
 8013ad8:	1c5a      	adds	r2, r3, #1
 8013ada:	b2d1      	uxtb	r1, r2
 8013adc:	4a13      	ldr	r2, [pc, #76]	@ (8013b2c <netif_add+0xb4>)
 8013ade:	7011      	strb	r1, [r2, #0]
 8013ae0:	68fa      	ldr	r2, [r7, #12]
 8013ae2:	f882 3036 	strb.w	r3, [r2, #54]	@ 0x36
  netif->input = input;
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	6a3a      	ldr	r2, [r7, #32]
 8013aea:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8013aec:	683b      	ldr	r3, [r7, #0]
 8013aee:	687a      	ldr	r2, [r7, #4]
 8013af0:	68b9      	ldr	r1, [r7, #8]
 8013af2:	68f8      	ldr	r0, [r7, #12]
 8013af4:	f000 f81e 	bl	8013b34 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8013af8:	69fb      	ldr	r3, [r7, #28]
 8013afa:	68f8      	ldr	r0, [r7, #12]
 8013afc:	4798      	blx	r3
 8013afe:	4603      	mov	r3, r0
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d001      	beq.n	8013b08 <netif_add+0x90>
    return NULL;
 8013b04:	2300      	movs	r3, #0
 8013b06:	e007      	b.n	8013b18 <netif_add+0xa0>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8013b08:	4b09      	ldr	r3, [pc, #36]	@ (8013b30 <netif_add+0xb8>)
 8013b0a:	681a      	ldr	r2, [r3, #0]
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8013b10:	4a07      	ldr	r2, [pc, #28]	@ (8013b30 <netif_add+0xb8>)
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8013b16:	68fb      	ldr	r3, [r7, #12]
}
 8013b18:	4618      	mov	r0, r3
 8013b1a:	3710      	adds	r7, #16
 8013b1c:	46bd      	mov	sp, r7
 8013b1e:	bd80      	pop	{r7, pc}
 8013b20:	080240a8 	.word	0x080240a8
 8013b24:	080240dc 	.word	0x080240dc
 8013b28:	080240f4 	.word	0x080240f4
 8013b2c:	2000db80 	.word	0x2000db80
 8013b30:	2000db78 	.word	0x2000db78

08013b34 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8013b34:	b580      	push	{r7, lr}
 8013b36:	b084      	sub	sp, #16
 8013b38:	af00      	add	r7, sp, #0
 8013b3a:	60f8      	str	r0, [r7, #12]
 8013b3c:	60b9      	str	r1, [r7, #8]
 8013b3e:	607a      	str	r2, [r7, #4]
 8013b40:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 8013b42:	68bb      	ldr	r3, [r7, #8]
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d003      	beq.n	8013b50 <netif_set_addr+0x1c>
 8013b48:	68bb      	ldr	r3, [r7, #8]
 8013b4a:	681b      	ldr	r3, [r3, #0]
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d10c      	bne.n	8013b6a <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8013b50:	68b9      	ldr	r1, [r7, #8]
 8013b52:	68f8      	ldr	r0, [r7, #12]
 8013b54:	f000 f81a 	bl	8013b8c <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8013b58:	6879      	ldr	r1, [r7, #4]
 8013b5a:	68f8      	ldr	r0, [r7, #12]
 8013b5c:	f000 f861 	bl	8013c22 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8013b60:	6839      	ldr	r1, [r7, #0]
 8013b62:	68f8      	ldr	r0, [r7, #12]
 8013b64:	f000 f84a 	bl	8013bfc <netif_set_gw>
 8013b68:	e00c      	b.n	8013b84 <netif_set_addr+0x50>
  } else {
    netif_set_netmask(netif, netmask);
 8013b6a:	6879      	ldr	r1, [r7, #4]
 8013b6c:	68f8      	ldr	r0, [r7, #12]
 8013b6e:	f000 f858 	bl	8013c22 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8013b72:	6839      	ldr	r1, [r7, #0]
 8013b74:	68f8      	ldr	r0, [r7, #12]
 8013b76:	f000 f841 	bl	8013bfc <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8013b7a:	68b9      	ldr	r1, [r7, #8]
 8013b7c:	68f8      	ldr	r0, [r7, #12]
 8013b7e:	f000 f805 	bl	8013b8c <netif_set_ipaddr>
  }
}
 8013b82:	bf00      	nop
 8013b84:	bf00      	nop
 8013b86:	3710      	adds	r7, #16
 8013b88:	46bd      	mov	sp, r7
 8013b8a:	bd80      	pop	{r7, pc}

08013b8c <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8013b8c:	b580      	push	{r7, lr}
 8013b8e:	b084      	sub	sp, #16
 8013b90:	af00      	add	r7, sp, #0
 8013b92:	6078      	str	r0, [r7, #4]
 8013b94:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8013b96:	683b      	ldr	r3, [r7, #0]
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d003      	beq.n	8013ba4 <netif_set_ipaddr+0x18>
 8013b9c:	683b      	ldr	r3, [r7, #0]
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	60fb      	str	r3, [r7, #12]
 8013ba2:	e002      	b.n	8013baa <netif_set_ipaddr+0x1e>
 8013ba4:	4b14      	ldr	r3, [pc, #80]	@ (8013bf8 <netif_set_ipaddr+0x6c>)
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8013baa:	68fa      	ldr	r2, [r7, #12]
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	3304      	adds	r3, #4
 8013bb0:	681b      	ldr	r3, [r3, #0]
 8013bb2:	429a      	cmp	r2, r3
 8013bb4:	d01c      	beq.n	8013bf0 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	3304      	adds	r3, #4
 8013bba:	f107 020c 	add.w	r2, r7, #12
 8013bbe:	4611      	mov	r1, r2
 8013bc0:	4618      	mov	r0, r3
 8013bc2:	f002 fc5b 	bl	801647c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	3304      	adds	r3, #4
 8013bca:	f107 020c 	add.w	r2, r7, #12
 8013bce:	4611      	mov	r1, r2
 8013bd0:	4618      	mov	r0, r3
 8013bd2:	f007 f889 	bl	801ace8 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8013bd6:	683b      	ldr	r3, [r7, #0]
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d002      	beq.n	8013be2 <netif_set_ipaddr+0x56>
 8013bdc:	683b      	ldr	r3, [r7, #0]
 8013bde:	681b      	ldr	r3, [r3, #0]
 8013be0:	e000      	b.n	8013be4 <netif_set_ipaddr+0x58>
 8013be2:	2300      	movs	r3, #0
 8013be4:	687a      	ldr	r2, [r7, #4]
 8013be6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8013be8:	2101      	movs	r1, #1
 8013bea:	6878      	ldr	r0, [r7, #4]
 8013bec:	f000 f868 	bl	8013cc0 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 8013bf0:	bf00      	nop
 8013bf2:	3710      	adds	r7, #16
 8013bf4:	46bd      	mov	sp, r7
 8013bf6:	bd80      	pop	{r7, pc}
 8013bf8:	0802f050 	.word	0x0802f050

08013bfc <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 8013bfc:	b480      	push	{r7}
 8013bfe:	b083      	sub	sp, #12
 8013c00:	af00      	add	r7, sp, #0
 8013c02:	6078      	str	r0, [r7, #4]
 8013c04:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8013c06:	683b      	ldr	r3, [r7, #0]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d002      	beq.n	8013c12 <netif_set_gw+0x16>
 8013c0c:	683b      	ldr	r3, [r7, #0]
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	e000      	b.n	8013c14 <netif_set_gw+0x18>
 8013c12:	2300      	movs	r3, #0
 8013c14:	687a      	ldr	r2, [r7, #4]
 8013c16:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 8013c18:	bf00      	nop
 8013c1a:	370c      	adds	r7, #12
 8013c1c:	46bd      	mov	sp, r7
 8013c1e:	bc80      	pop	{r7}
 8013c20:	4770      	bx	lr

08013c22 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8013c22:	b480      	push	{r7}
 8013c24:	b083      	sub	sp, #12
 8013c26:	af00      	add	r7, sp, #0
 8013c28:	6078      	str	r0, [r7, #4]
 8013c2a:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8013c2c:	683b      	ldr	r3, [r7, #0]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d002      	beq.n	8013c38 <netif_set_netmask+0x16>
 8013c32:	683b      	ldr	r3, [r7, #0]
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	e000      	b.n	8013c3a <netif_set_netmask+0x18>
 8013c38:	2300      	movs	r3, #0
 8013c3a:	687a      	ldr	r2, [r7, #4]
 8013c3c:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 8013c3e:	bf00      	nop
 8013c40:	370c      	adds	r7, #12
 8013c42:	46bd      	mov	sp, r7
 8013c44:	bc80      	pop	{r7}
 8013c46:	4770      	bx	lr

08013c48 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8013c48:	b480      	push	{r7}
 8013c4a:	b083      	sub	sp, #12
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8013c50:	4a03      	ldr	r2, [pc, #12]	@ (8013c60 <netif_set_default+0x18>)
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8013c56:	bf00      	nop
 8013c58:	370c      	adds	r7, #12
 8013c5a:	46bd      	mov	sp, r7
 8013c5c:	bc80      	pop	{r7}
 8013c5e:	4770      	bx	lr
 8013c60:	2000db7c 	.word	0x2000db7c

08013c64 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8013c64:	b580      	push	{r7, lr}
 8013c66:	b082      	sub	sp, #8
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8013c72:	f003 0301 	and.w	r3, r3, #1
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d11c      	bne.n	8013cb4 <netif_set_up+0x50>
    netif->flags |= NETIF_FLAG_UP;
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8013c80:	f043 0301 	orr.w	r3, r3, #1
 8013c84:	b2da      	uxtb	r2, r3
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);
 8013c8c:	f7f6 fc62 	bl	800a554 <sys_now>
 8013c90:	4603      	mov	r3, r0
 8013c92:	4a0a      	ldr	r2, [pc, #40]	@ (8013cbc <netif_set_up+0x58>)
 8013c94:	fba2 2303 	umull	r2, r3, r2, r3
 8013c98:	08da      	lsrs	r2, r3, #3
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	63da      	str	r2, [r3, #60]	@ 0x3c

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8013ca4:	f003 0304 	and.w	r3, r3, #4
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d003      	beq.n	8013cb4 <netif_set_up+0x50>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8013cac:	2103      	movs	r1, #3
 8013cae:	6878      	ldr	r0, [r7, #4]
 8013cb0:	f000 f806 	bl	8013cc0 <netif_issue_reports>
    }
  }
}
 8013cb4:	bf00      	nop
 8013cb6:	3708      	adds	r7, #8
 8013cb8:	46bd      	mov	sp, r7
 8013cba:	bd80      	pop	{r7, pc}
 8013cbc:	cccccccd 	.word	0xcccccccd

08013cc0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 8013cc0:	b580      	push	{r7, lr}
 8013cc2:	b082      	sub	sp, #8
 8013cc4:	af00      	add	r7, sp, #0
 8013cc6:	6078      	str	r0, [r7, #4]
 8013cc8:	460b      	mov	r3, r1
 8013cca:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8013ccc:	78fb      	ldrb	r3, [r7, #3]
 8013cce:	f003 0301 	and.w	r3, r3, #1
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d011      	beq.n	8013cfa <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	3304      	adds	r3, #4
 8013cda:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d00c      	beq.n	8013cfa <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8013ce6:	f003 0308 	and.w	r3, r3, #8
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d005      	beq.n	8013cfa <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	3304      	adds	r3, #4
 8013cf2:	4619      	mov	r1, r3
 8013cf4:	6878      	ldr	r0, [r7, #4]
 8013cf6:	f009 fe91 	bl	801da1c <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8013cfa:	bf00      	nop
 8013cfc:	3708      	adds	r7, #8
 8013cfe:	46bd      	mov	sp, r7
 8013d00:	bd80      	pop	{r7, pc}
	...

08013d04 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8013d04:	b580      	push	{r7, lr}
 8013d06:	b082      	sub	sp, #8
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8013d12:	f003 0301 	and.w	r3, r3, #1
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d01b      	beq.n	8013d52 <netif_set_down+0x4e>
    netif->flags &= ~NETIF_FLAG_UP;
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8013d20:	f023 0301 	bic.w	r3, r3, #1
 8013d24:	b2da      	uxtb	r2, r3
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);
 8013d2c:	f7f6 fc12 	bl	800a554 <sys_now>
 8013d30:	4603      	mov	r3, r0
 8013d32:	4a0a      	ldr	r2, [pc, #40]	@ (8013d5c <netif_set_down+0x58>)
 8013d34:	fba2 2303 	umull	r2, r3, r2, r3
 8013d38:	08da      	lsrs	r2, r3, #3
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	63da      	str	r2, [r3, #60]	@ 0x3c

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8013d44:	f003 0308 	and.w	r3, r3, #8
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d002      	beq.n	8013d52 <netif_set_down+0x4e>
      etharp_cleanup_netif(netif);
 8013d4c:	6878      	ldr	r0, [r7, #4]
 8013d4e:	f009 f97b 	bl	801d048 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8013d52:	bf00      	nop
 8013d54:	3708      	adds	r7, #8
 8013d56:	46bd      	mov	sp, r7
 8013d58:	bd80      	pop	{r7, pc}
 8013d5a:	bf00      	nop
 8013d5c:	cccccccd 	.word	0xcccccccd

08013d60 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8013d60:	b480      	push	{r7}
 8013d62:	b083      	sub	sp, #12
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	6078      	str	r0, [r7, #4]
 8013d68:	6039      	str	r1, [r7, #0]
  if (netif) {
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d002      	beq.n	8013d76 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	683a      	ldr	r2, [r7, #0]
 8013d74:	61da      	str	r2, [r3, #28]
  }
}
 8013d76:	bf00      	nop
 8013d78:	370c      	adds	r7, #12
 8013d7a:	46bd      	mov	sp, r7
 8013d7c:	bc80      	pop	{r7}
 8013d7e:	4770      	bx	lr

08013d80 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8013d80:	b580      	push	{r7, lr}
 8013d82:	b082      	sub	sp, #8
 8013d84:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8013d86:	4b0e      	ldr	r3, [pc, #56]	@ (8013dc0 <pbuf_free_ooseq+0x40>)
 8013d88:	2200      	movs	r2, #0
 8013d8a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8013dc4 <pbuf_free_ooseq+0x44>)
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	607b      	str	r3, [r7, #4]
 8013d92:	e00f      	b.n	8013db4 <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d008      	beq.n	8013dae <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013da0:	4618      	mov	r0, r3
 8013da2:	f001 ffb4 	bl	8015d0e <tcp_segs_free>
      pcb->ooseq = NULL;
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	2200      	movs	r2, #0
 8013daa:	671a      	str	r2, [r3, #112]	@ 0x70
      return;
 8013dac:	e005      	b.n	8013dba <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	68db      	ldr	r3, [r3, #12]
 8013db2:	607b      	str	r3, [r7, #4]
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d1ec      	bne.n	8013d94 <pbuf_free_ooseq+0x14>
    }
  }
}
 8013dba:	3708      	adds	r7, #8
 8013dbc:	46bd      	mov	sp, r7
 8013dbe:	bd80      	pop	{r7, pc}
 8013dc0:	2000db81 	.word	0x2000db81
 8013dc4:	2000dd28 	.word	0x2000dd28

08013dc8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8013dc8:	b480      	push	{r7}
 8013dca:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8013dcc:	4b03      	ldr	r3, [pc, #12]	@ (8013ddc <pbuf_pool_is_empty+0x14>)
 8013dce:	2201      	movs	r2, #1
 8013dd0:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8013dd2:	bf00      	nop
 8013dd4:	46bd      	mov	sp, r7
 8013dd6:	bc80      	pop	{r7}
 8013dd8:	4770      	bx	lr
 8013dda:	bf00      	nop
 8013ddc:	2000db81 	.word	0x2000db81

08013de0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b088      	sub	sp, #32
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	4603      	mov	r3, r0
 8013de8:	71fb      	strb	r3, [r7, #7]
 8013dea:	460b      	mov	r3, r1
 8013dec:	80bb      	strh	r3, [r7, #4]
 8013dee:	4613      	mov	r3, r2
 8013df0:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 8013df2:	79fb      	ldrb	r3, [r7, #7]
 8013df4:	2b04      	cmp	r3, #4
 8013df6:	d81c      	bhi.n	8013e32 <pbuf_alloc+0x52>
 8013df8:	a201      	add	r2, pc, #4	@ (adr r2, 8013e00 <pbuf_alloc+0x20>)
 8013dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013dfe:	bf00      	nop
 8013e00:	08013e15 	.word	0x08013e15
 8013e04:	08013e1b 	.word	0x08013e1b
 8013e08:	08013e21 	.word	0x08013e21
 8013e0c:	08013e27 	.word	0x08013e27
 8013e10:	08013e2d 	.word	0x08013e2d
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8013e14:	2336      	movs	r3, #54	@ 0x36
 8013e16:	82fb      	strh	r3, [r7, #22]
    break;
 8013e18:	e014      	b.n	8013e44 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8013e1a:	2322      	movs	r3, #34	@ 0x22
 8013e1c:	82fb      	strh	r3, [r7, #22]
    break;
 8013e1e:	e011      	b.n	8013e44 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8013e20:	230e      	movs	r3, #14
 8013e22:	82fb      	strh	r3, [r7, #22]
    break;
 8013e24:	e00e      	b.n	8013e44 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8013e26:	2300      	movs	r3, #0
 8013e28:	82fb      	strh	r3, [r7, #22]
    break;
 8013e2a:	e00b      	b.n	8013e44 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8013e2c:	2300      	movs	r3, #0
 8013e2e:	82fb      	strh	r3, [r7, #22]
    break;
 8013e30:	e008      	b.n	8013e44 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8013e32:	4ba1      	ldr	r3, [pc, #644]	@ (80140b8 <pbuf_alloc+0x2d8>)
 8013e34:	f44f 728b 	mov.w	r2, #278	@ 0x116
 8013e38:	49a0      	ldr	r1, [pc, #640]	@ (80140bc <pbuf_alloc+0x2dc>)
 8013e3a:	48a1      	ldr	r0, [pc, #644]	@ (80140c0 <pbuf_alloc+0x2e0>)
 8013e3c:	f00c fb30 	bl	80204a0 <iprintf>
    return NULL;
 8013e40:	2300      	movs	r3, #0
 8013e42:	e15c      	b.n	80140fe <pbuf_alloc+0x31e>
  }

  switch (type) {
 8013e44:	79bb      	ldrb	r3, [r7, #6]
 8013e46:	2b03      	cmp	r3, #3
 8013e48:	d00d      	beq.n	8013e66 <pbuf_alloc+0x86>
 8013e4a:	2b03      	cmp	r3, #3
 8013e4c:	f300 8146 	bgt.w	80140dc <pbuf_alloc+0x2fc>
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	f000 80d0 	beq.w	8013ff6 <pbuf_alloc+0x216>
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	f2c0 8140 	blt.w	80140dc <pbuf_alloc+0x2fc>
 8013e5c:	3b01      	subs	r3, #1
 8013e5e:	2b01      	cmp	r3, #1
 8013e60:	f200 813c 	bhi.w	80140dc <pbuf_alloc+0x2fc>
 8013e64:	e10d      	b.n	8014082 <pbuf_alloc+0x2a2>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8013e66:	2008      	movs	r0, #8
 8013e68:	f7ff fd84 	bl	8013974 <memp_malloc>
 8013e6c:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 8013e6e:	69fb      	ldr	r3, [r7, #28]
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d103      	bne.n	8013e7c <pbuf_alloc+0x9c>
      PBUF_POOL_IS_EMPTY();
 8013e74:	f7ff ffa8 	bl	8013dc8 <pbuf_pool_is_empty>
      return NULL;
 8013e78:	2300      	movs	r3, #0
 8013e7a:	e140      	b.n	80140fe <pbuf_alloc+0x31e>
    }
    p->type = type;
 8013e7c:	69fb      	ldr	r3, [r7, #28]
 8013e7e:	79ba      	ldrb	r2, [r7, #6]
 8013e80:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 8013e82:	69fb      	ldr	r3, [r7, #28]
 8013e84:	2200      	movs	r2, #0
 8013e86:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8013e88:	8afb      	ldrh	r3, [r7, #22]
 8013e8a:	3310      	adds	r3, #16
 8013e8c:	69fa      	ldr	r2, [r7, #28]
 8013e8e:	4413      	add	r3, r2
 8013e90:	3303      	adds	r3, #3
 8013e92:	f023 0303 	bic.w	r3, r3, #3
 8013e96:	461a      	mov	r2, r3
 8013e98:	69fb      	ldr	r3, [r7, #28]
 8013e9a:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 8013e9c:	69fb      	ldr	r3, [r7, #28]
 8013e9e:	685b      	ldr	r3, [r3, #4]
 8013ea0:	f003 0303 	and.w	r3, r3, #3
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d006      	beq.n	8013eb6 <pbuf_alloc+0xd6>
 8013ea8:	4b83      	ldr	r3, [pc, #524]	@ (80140b8 <pbuf_alloc+0x2d8>)
 8013eaa:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8013eae:	4985      	ldr	r1, [pc, #532]	@ (80140c4 <pbuf_alloc+0x2e4>)
 8013eb0:	4883      	ldr	r0, [pc, #524]	@ (80140c0 <pbuf_alloc+0x2e0>)
 8013eb2:	f00c faf5 	bl	80204a0 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 8013eb6:	69fb      	ldr	r3, [r7, #28]
 8013eb8:	88ba      	ldrh	r2, [r7, #4]
 8013eba:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8013ebc:	8afb      	ldrh	r3, [r7, #22]
 8013ebe:	3303      	adds	r3, #3
 8013ec0:	f023 0303 	bic.w	r3, r3, #3
 8013ec4:	f5c3 7214 	rsb	r2, r3, #592	@ 0x250
 8013ec8:	88bb      	ldrh	r3, [r7, #4]
 8013eca:	4293      	cmp	r3, r2
 8013ecc:	bf28      	it	cs
 8013ece:	4613      	movcs	r3, r2
 8013ed0:	b29a      	uxth	r2, r3
 8013ed2:	69fb      	ldr	r3, [r7, #28]
 8013ed4:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8013ed6:	69fb      	ldr	r3, [r7, #28]
 8013ed8:	685b      	ldr	r3, [r3, #4]
 8013eda:	69fa      	ldr	r2, [r7, #28]
 8013edc:	8952      	ldrh	r2, [r2, #10]
 8013ede:	441a      	add	r2, r3
 8013ee0:	69fb      	ldr	r3, [r7, #28]
 8013ee2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8013ee6:	429a      	cmp	r2, r3
 8013ee8:	d906      	bls.n	8013ef8 <pbuf_alloc+0x118>
 8013eea:	4b73      	ldr	r3, [pc, #460]	@ (80140b8 <pbuf_alloc+0x2d8>)
 8013eec:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8013ef0:	4975      	ldr	r1, [pc, #468]	@ (80140c8 <pbuf_alloc+0x2e8>)
 8013ef2:	4873      	ldr	r0, [pc, #460]	@ (80140c0 <pbuf_alloc+0x2e0>)
 8013ef4:	f00c fad4 	bl	80204a0 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8013ef8:	8afb      	ldrh	r3, [r7, #22]
 8013efa:	3303      	adds	r3, #3
 8013efc:	f023 0303 	bic.w	r3, r3, #3
 8013f00:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8013f04:	d106      	bne.n	8013f14 <pbuf_alloc+0x134>
 8013f06:	4b6c      	ldr	r3, [pc, #432]	@ (80140b8 <pbuf_alloc+0x2d8>)
 8013f08:	f240 1231 	movw	r2, #305	@ 0x131
 8013f0c:	496f      	ldr	r1, [pc, #444]	@ (80140cc <pbuf_alloc+0x2ec>)
 8013f0e:	486c      	ldr	r0, [pc, #432]	@ (80140c0 <pbuf_alloc+0x2e0>)
 8013f10:	f00c fac6 	bl	80204a0 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8013f14:	69fb      	ldr	r3, [r7, #28]
 8013f16:	2201      	movs	r2, #1
 8013f18:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 8013f1a:	69fb      	ldr	r3, [r7, #28]
 8013f1c:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 8013f1e:	88bb      	ldrh	r3, [r7, #4]
 8013f20:	69fa      	ldr	r2, [r7, #28]
 8013f22:	8952      	ldrh	r2, [r2, #10]
 8013f24:	1a9b      	subs	r3, r3, r2
 8013f26:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 8013f28:	e061      	b.n	8013fee <pbuf_alloc+0x20e>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8013f2a:	2008      	movs	r0, #8
 8013f2c:	f7ff fd22 	bl	8013974 <memp_malloc>
 8013f30:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d106      	bne.n	8013f46 <pbuf_alloc+0x166>
        PBUF_POOL_IS_EMPTY();
 8013f38:	f7ff ff46 	bl	8013dc8 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 8013f3c:	69f8      	ldr	r0, [r7, #28]
 8013f3e:	f000 fac7 	bl	80144d0 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 8013f42:	2300      	movs	r3, #0
 8013f44:	e0db      	b.n	80140fe <pbuf_alloc+0x31e>
      }
      q->type = type;
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	79ba      	ldrb	r2, [r7, #6]
 8013f4a:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	2200      	movs	r2, #0
 8013f50:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	2200      	movs	r2, #0
 8013f56:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 8013f58:	69bb      	ldr	r3, [r7, #24]
 8013f5a:	68fa      	ldr	r2, [r7, #12]
 8013f5c:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8013f5e:	693b      	ldr	r3, [r7, #16]
 8013f60:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8013f64:	4293      	cmp	r3, r2
 8013f66:	dd06      	ble.n	8013f76 <pbuf_alloc+0x196>
 8013f68:	4b53      	ldr	r3, [pc, #332]	@ (80140b8 <pbuf_alloc+0x2d8>)
 8013f6a:	f44f 72a6 	mov.w	r2, #332	@ 0x14c
 8013f6e:	4958      	ldr	r1, [pc, #352]	@ (80140d0 <pbuf_alloc+0x2f0>)
 8013f70:	4853      	ldr	r0, [pc, #332]	@ (80140c0 <pbuf_alloc+0x2e0>)
 8013f72:	f00c fa95 	bl	80204a0 <iprintf>
      q->tot_len = (u16_t)rem_len;
 8013f76:	693b      	ldr	r3, [r7, #16]
 8013f78:	b29a      	uxth	r2, r3
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8013f7e:	693b      	ldr	r3, [r7, #16]
 8013f80:	b29b      	uxth	r3, r3
 8013f82:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8013f86:	bf28      	it	cs
 8013f88:	f44f 7314 	movcs.w	r3, #592	@ 0x250
 8013f8c:	b29a      	uxth	r2, r3
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	f103 0210 	add.w	r2, r3, #16
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	685b      	ldr	r3, [r3, #4]
 8013fa0:	f003 0303 	and.w	r3, r3, #3
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d006      	beq.n	8013fb6 <pbuf_alloc+0x1d6>
 8013fa8:	4b43      	ldr	r3, [pc, #268]	@ (80140b8 <pbuf_alloc+0x2d8>)
 8013faa:	f240 1251 	movw	r2, #337	@ 0x151
 8013fae:	4949      	ldr	r1, [pc, #292]	@ (80140d4 <pbuf_alloc+0x2f4>)
 8013fb0:	4843      	ldr	r0, [pc, #268]	@ (80140c0 <pbuf_alloc+0x2e0>)
 8013fb2:	f00c fa75 	bl	80204a0 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8013fb6:	69fb      	ldr	r3, [r7, #28]
 8013fb8:	685b      	ldr	r3, [r3, #4]
 8013fba:	69fa      	ldr	r2, [r7, #28]
 8013fbc:	8952      	ldrh	r2, [r2, #10]
 8013fbe:	441a      	add	r2, r3
 8013fc0:	69fb      	ldr	r3, [r7, #28]
 8013fc2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8013fc6:	429a      	cmp	r2, r3
 8013fc8:	d906      	bls.n	8013fd8 <pbuf_alloc+0x1f8>
 8013fca:	4b3b      	ldr	r3, [pc, #236]	@ (80140b8 <pbuf_alloc+0x2d8>)
 8013fcc:	f240 1253 	movw	r2, #339	@ 0x153
 8013fd0:	493d      	ldr	r1, [pc, #244]	@ (80140c8 <pbuf_alloc+0x2e8>)
 8013fd2:	483b      	ldr	r0, [pc, #236]	@ (80140c0 <pbuf_alloc+0x2e0>)
 8013fd4:	f00c fa64 	bl	80204a0 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	2201      	movs	r2, #1
 8013fdc:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	895b      	ldrh	r3, [r3, #10]
 8013fe2:	461a      	mov	r2, r3
 8013fe4:	693b      	ldr	r3, [r7, #16]
 8013fe6:	1a9b      	subs	r3, r3, r2
 8013fe8:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 8013fee:	693b      	ldr	r3, [r7, #16]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	dc9a      	bgt.n	8013f2a <pbuf_alloc+0x14a>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8013ff4:	e07c      	b.n	80140f0 <pbuf_alloc+0x310>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8013ff6:	8afb      	ldrh	r3, [r7, #22]
 8013ff8:	3313      	adds	r3, #19
 8013ffa:	b29b      	uxth	r3, r3
 8013ffc:	f023 0303 	bic.w	r3, r3, #3
 8014000:	b29a      	uxth	r2, r3
 8014002:	88bb      	ldrh	r3, [r7, #4]
 8014004:	3303      	adds	r3, #3
 8014006:	b29b      	uxth	r3, r3
 8014008:	f023 0303 	bic.w	r3, r3, #3
 801400c:	b29b      	uxth	r3, r3
 801400e:	4413      	add	r3, r2
 8014010:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8014012:	897a      	ldrh	r2, [r7, #10]
 8014014:	88bb      	ldrh	r3, [r7, #4]
 8014016:	3303      	adds	r3, #3
 8014018:	f023 0303 	bic.w	r3, r3, #3
 801401c:	429a      	cmp	r2, r3
 801401e:	d201      	bcs.n	8014024 <pbuf_alloc+0x244>
        return NULL;
 8014020:	2300      	movs	r3, #0
 8014022:	e06c      	b.n	80140fe <pbuf_alloc+0x31e>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 8014024:	897b      	ldrh	r3, [r7, #10]
 8014026:	4618      	mov	r0, r3
 8014028:	f7ff faf6 	bl	8013618 <mem_malloc>
 801402c:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 801402e:	69fb      	ldr	r3, [r7, #28]
 8014030:	2b00      	cmp	r3, #0
 8014032:	d101      	bne.n	8014038 <pbuf_alloc+0x258>
      return NULL;
 8014034:	2300      	movs	r3, #0
 8014036:	e062      	b.n	80140fe <pbuf_alloc+0x31e>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8014038:	8afb      	ldrh	r3, [r7, #22]
 801403a:	3310      	adds	r3, #16
 801403c:	69fa      	ldr	r2, [r7, #28]
 801403e:	4413      	add	r3, r2
 8014040:	3303      	adds	r3, #3
 8014042:	f023 0303 	bic.w	r3, r3, #3
 8014046:	461a      	mov	r2, r3
 8014048:	69fb      	ldr	r3, [r7, #28]
 801404a:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 801404c:	69fb      	ldr	r3, [r7, #28]
 801404e:	88ba      	ldrh	r2, [r7, #4]
 8014050:	811a      	strh	r2, [r3, #8]
 8014052:	69fb      	ldr	r3, [r7, #28]
 8014054:	891a      	ldrh	r2, [r3, #8]
 8014056:	69fb      	ldr	r3, [r7, #28]
 8014058:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 801405a:	69fb      	ldr	r3, [r7, #28]
 801405c:	2200      	movs	r2, #0
 801405e:	601a      	str	r2, [r3, #0]
    p->type = type;
 8014060:	69fb      	ldr	r3, [r7, #28]
 8014062:	79ba      	ldrb	r2, [r7, #6]
 8014064:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8014066:	69fb      	ldr	r3, [r7, #28]
 8014068:	685b      	ldr	r3, [r3, #4]
 801406a:	f003 0303 	and.w	r3, r3, #3
 801406e:	2b00      	cmp	r3, #0
 8014070:	d03d      	beq.n	80140ee <pbuf_alloc+0x30e>
 8014072:	4b11      	ldr	r3, [pc, #68]	@ (80140b8 <pbuf_alloc+0x2d8>)
 8014074:	f44f 72bb 	mov.w	r2, #374	@ 0x176
 8014078:	4917      	ldr	r1, [pc, #92]	@ (80140d8 <pbuf_alloc+0x2f8>)
 801407a:	4811      	ldr	r0, [pc, #68]	@ (80140c0 <pbuf_alloc+0x2e0>)
 801407c:	f00c fa10 	bl	80204a0 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 8014080:	e035      	b.n	80140ee <pbuf_alloc+0x30e>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8014082:	2007      	movs	r0, #7
 8014084:	f7ff fc76 	bl	8013974 <memp_malloc>
 8014088:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 801408a:	69fb      	ldr	r3, [r7, #28]
 801408c:	2b00      	cmp	r3, #0
 801408e:	d101      	bne.n	8014094 <pbuf_alloc+0x2b4>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 8014090:	2300      	movs	r3, #0
 8014092:	e034      	b.n	80140fe <pbuf_alloc+0x31e>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 8014094:	69fb      	ldr	r3, [r7, #28]
 8014096:	2200      	movs	r2, #0
 8014098:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 801409a:	69fb      	ldr	r3, [r7, #28]
 801409c:	88ba      	ldrh	r2, [r7, #4]
 801409e:	811a      	strh	r2, [r3, #8]
 80140a0:	69fb      	ldr	r3, [r7, #28]
 80140a2:	891a      	ldrh	r2, [r3, #8]
 80140a4:	69fb      	ldr	r3, [r7, #28]
 80140a6:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80140a8:	69fb      	ldr	r3, [r7, #28]
 80140aa:	2200      	movs	r2, #0
 80140ac:	601a      	str	r2, [r3, #0]
    p->type = type;
 80140ae:	69fb      	ldr	r3, [r7, #28]
 80140b0:	79ba      	ldrb	r2, [r7, #6]
 80140b2:	731a      	strb	r2, [r3, #12]
    break;
 80140b4:	e01c      	b.n	80140f0 <pbuf_alloc+0x310>
 80140b6:	bf00      	nop
 80140b8:	0802411c 	.word	0x0802411c
 80140bc:	0802414c 	.word	0x0802414c
 80140c0:	08024168 	.word	0x08024168
 80140c4:	08024190 	.word	0x08024190
 80140c8:	080241c0 	.word	0x080241c0
 80140cc:	080241f4 	.word	0x080241f4
 80140d0:	08024228 	.word	0x08024228
 80140d4:	0802423c 	.word	0x0802423c
 80140d8:	0802426c 	.word	0x0802426c
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80140dc:	4b0a      	ldr	r3, [pc, #40]	@ (8014108 <pbuf_alloc+0x328>)
 80140de:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 80140e2:	490a      	ldr	r1, [pc, #40]	@ (801410c <pbuf_alloc+0x32c>)
 80140e4:	480a      	ldr	r0, [pc, #40]	@ (8014110 <pbuf_alloc+0x330>)
 80140e6:	f00c f9db 	bl	80204a0 <iprintf>
    return NULL;
 80140ea:	2300      	movs	r3, #0
 80140ec:	e007      	b.n	80140fe <pbuf_alloc+0x31e>
    break;
 80140ee:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 80140f0:	69fb      	ldr	r3, [r7, #28]
 80140f2:	2201      	movs	r2, #1
 80140f4:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 80140f6:	69fb      	ldr	r3, [r7, #28]
 80140f8:	2200      	movs	r2, #0
 80140fa:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80140fc:	69fb      	ldr	r3, [r7, #28]
}
 80140fe:	4618      	mov	r0, r3
 8014100:	3720      	adds	r7, #32
 8014102:	46bd      	mov	sp, r7
 8014104:	bd80      	pop	{r7, pc}
 8014106:	bf00      	nop
 8014108:	0802411c 	.word	0x0802411c
 801410c:	08024298 	.word	0x08024298
 8014110:	08024168 	.word	0x08024168

08014114 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8014114:	b580      	push	{r7, lr}
 8014116:	b084      	sub	sp, #16
 8014118:	af00      	add	r7, sp, #0
 801411a:	603b      	str	r3, [r7, #0]
 801411c:	4603      	mov	r3, r0
 801411e:	71fb      	strb	r3, [r7, #7]
 8014120:	460b      	mov	r3, r1
 8014122:	80bb      	strh	r3, [r7, #4]
 8014124:	4613      	mov	r3, r2
 8014126:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8014128:	79fb      	ldrb	r3, [r7, #7]
 801412a:	2b04      	cmp	r3, #4
 801412c:	d81b      	bhi.n	8014166 <pbuf_alloced_custom+0x52>
 801412e:	a201      	add	r2, pc, #4	@ (adr r2, 8014134 <pbuf_alloced_custom+0x20>)
 8014130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014134:	08014149 	.word	0x08014149
 8014138:	0801414f 	.word	0x0801414f
 801413c:	08014155 	.word	0x08014155
 8014140:	0801415b 	.word	0x0801415b
 8014144:	08014161 	.word	0x08014161
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8014148:	2336      	movs	r3, #54	@ 0x36
 801414a:	81fb      	strh	r3, [r7, #14]
    break;
 801414c:	e014      	b.n	8014178 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 801414e:	2322      	movs	r3, #34	@ 0x22
 8014150:	81fb      	strh	r3, [r7, #14]
    break;
 8014152:	e011      	b.n	8014178 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8014154:	230e      	movs	r3, #14
 8014156:	81fb      	strh	r3, [r7, #14]
    break;
 8014158:	e00e      	b.n	8014178 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 801415a:	2300      	movs	r3, #0
 801415c:	81fb      	strh	r3, [r7, #14]
    break;
 801415e:	e00b      	b.n	8014178 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 8014160:	2300      	movs	r3, #0
 8014162:	81fb      	strh	r3, [r7, #14]
    break;
 8014164:	e008      	b.n	8014178 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8014166:	4b1d      	ldr	r3, [pc, #116]	@ (80141dc <pbuf_alloced_custom+0xc8>)
 8014168:	f240 12c5 	movw	r2, #453	@ 0x1c5
 801416c:	491c      	ldr	r1, [pc, #112]	@ (80141e0 <pbuf_alloced_custom+0xcc>)
 801416e:	481d      	ldr	r0, [pc, #116]	@ (80141e4 <pbuf_alloced_custom+0xd0>)
 8014170:	f00c f996 	bl	80204a0 <iprintf>
    return NULL;
 8014174:	2300      	movs	r3, #0
 8014176:	e02d      	b.n	80141d4 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8014178:	89fb      	ldrh	r3, [r7, #14]
 801417a:	3303      	adds	r3, #3
 801417c:	f023 0203 	bic.w	r2, r3, #3
 8014180:	88bb      	ldrh	r3, [r7, #4]
 8014182:	441a      	add	r2, r3
 8014184:	8bbb      	ldrh	r3, [r7, #28]
 8014186:	429a      	cmp	r2, r3
 8014188:	d901      	bls.n	801418e <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801418a:	2300      	movs	r3, #0
 801418c:	e022      	b.n	80141d4 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 801418e:	683b      	ldr	r3, [r7, #0]
 8014190:	2200      	movs	r2, #0
 8014192:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 8014194:	69bb      	ldr	r3, [r7, #24]
 8014196:	2b00      	cmp	r3, #0
 8014198:	d008      	beq.n	80141ac <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801419a:	89fb      	ldrh	r3, [r7, #14]
 801419c:	3303      	adds	r3, #3
 801419e:	f023 0303 	bic.w	r3, r3, #3
 80141a2:	69ba      	ldr	r2, [r7, #24]
 80141a4:	441a      	add	r2, r3
 80141a6:	683b      	ldr	r3, [r7, #0]
 80141a8:	605a      	str	r2, [r3, #4]
 80141aa:	e002      	b.n	80141b2 <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 80141ac:	683b      	ldr	r3, [r7, #0]
 80141ae:	2200      	movs	r2, #0
 80141b0:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 80141b2:	683b      	ldr	r3, [r7, #0]
 80141b4:	2202      	movs	r2, #2
 80141b6:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 80141b8:	683b      	ldr	r3, [r7, #0]
 80141ba:	88ba      	ldrh	r2, [r7, #4]
 80141bc:	811a      	strh	r2, [r3, #8]
 80141be:	683b      	ldr	r3, [r7, #0]
 80141c0:	891a      	ldrh	r2, [r3, #8]
 80141c2:	683b      	ldr	r3, [r7, #0]
 80141c4:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 80141c6:	683b      	ldr	r3, [r7, #0]
 80141c8:	79ba      	ldrb	r2, [r7, #6]
 80141ca:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 80141cc:	683b      	ldr	r3, [r7, #0]
 80141ce:	2201      	movs	r2, #1
 80141d0:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 80141d2:	683b      	ldr	r3, [r7, #0]
}
 80141d4:	4618      	mov	r0, r3
 80141d6:	3710      	adds	r7, #16
 80141d8:	46bd      	mov	sp, r7
 80141da:	bd80      	pop	{r7, pc}
 80141dc:	0802411c 	.word	0x0802411c
 80141e0:	080242b4 	.word	0x080242b4
 80141e4:	08024168 	.word	0x08024168

080141e8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80141e8:	b580      	push	{r7, lr}
 80141ea:	b086      	sub	sp, #24
 80141ec:	af00      	add	r7, sp, #0
 80141ee:	6078      	str	r0, [r7, #4]
 80141f0:	460b      	mov	r3, r1
 80141f2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d106      	bne.n	8014208 <pbuf_realloc+0x20>
 80141fa:	4b4b      	ldr	r3, [pc, #300]	@ (8014328 <pbuf_realloc+0x140>)
 80141fc:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8014200:	494a      	ldr	r1, [pc, #296]	@ (801432c <pbuf_realloc+0x144>)
 8014202:	484b      	ldr	r0, [pc, #300]	@ (8014330 <pbuf_realloc+0x148>)
 8014204:	f00c f94c 	bl	80204a0 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	7b1b      	ldrb	r3, [r3, #12]
 801420c:	2b03      	cmp	r3, #3
 801420e:	d012      	beq.n	8014236 <pbuf_realloc+0x4e>
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	7b1b      	ldrb	r3, [r3, #12]
 8014214:	2b01      	cmp	r3, #1
 8014216:	d00e      	beq.n	8014236 <pbuf_realloc+0x4e>
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	7b1b      	ldrb	r3, [r3, #12]
 801421c:	2b00      	cmp	r3, #0
 801421e:	d00a      	beq.n	8014236 <pbuf_realloc+0x4e>
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	7b1b      	ldrb	r3, [r3, #12]
 8014224:	2b02      	cmp	r3, #2
 8014226:	d006      	beq.n	8014236 <pbuf_realloc+0x4e>
 8014228:	4b3f      	ldr	r3, [pc, #252]	@ (8014328 <pbuf_realloc+0x140>)
 801422a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 801422e:	4941      	ldr	r1, [pc, #260]	@ (8014334 <pbuf_realloc+0x14c>)
 8014230:	483f      	ldr	r0, [pc, #252]	@ (8014330 <pbuf_realloc+0x148>)
 8014232:	f00c f935 	bl	80204a0 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	891b      	ldrh	r3, [r3, #8]
 801423a:	887a      	ldrh	r2, [r7, #2]
 801423c:	429a      	cmp	r2, r3
 801423e:	d26e      	bcs.n	801431e <pbuf_realloc+0x136>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8014240:	887b      	ldrh	r3, [r7, #2]
 8014242:	687a      	ldr	r2, [r7, #4]
 8014244:	8912      	ldrh	r2, [r2, #8]
 8014246:	1a9b      	subs	r3, r3, r2
 8014248:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 801424a:	887b      	ldrh	r3, [r7, #2]
 801424c:	827b      	strh	r3, [r7, #18]
  q = p;
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8014252:	e025      	b.n	80142a0 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 8014254:	697b      	ldr	r3, [r7, #20]
 8014256:	895b      	ldrh	r3, [r3, #10]
 8014258:	8a7a      	ldrh	r2, [r7, #18]
 801425a:	1ad3      	subs	r3, r2, r3
 801425c:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8014264:	4293      	cmp	r3, r2
 8014266:	dd06      	ble.n	8014276 <pbuf_realloc+0x8e>
 8014268:	4b2f      	ldr	r3, [pc, #188]	@ (8014328 <pbuf_realloc+0x140>)
 801426a:	f240 220b 	movw	r2, #523	@ 0x20b
 801426e:	4932      	ldr	r1, [pc, #200]	@ (8014338 <pbuf_realloc+0x150>)
 8014270:	482f      	ldr	r0, [pc, #188]	@ (8014330 <pbuf_realloc+0x148>)
 8014272:	f00c f915 	bl	80204a0 <iprintf>
    q->tot_len += (u16_t)grow;
 8014276:	697b      	ldr	r3, [r7, #20]
 8014278:	891a      	ldrh	r2, [r3, #8]
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	b29b      	uxth	r3, r3
 801427e:	4413      	add	r3, r2
 8014280:	b29a      	uxth	r2, r3
 8014282:	697b      	ldr	r3, [r7, #20]
 8014284:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8014286:	697b      	ldr	r3, [r7, #20]
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801428c:	697b      	ldr	r3, [r7, #20]
 801428e:	2b00      	cmp	r3, #0
 8014290:	d106      	bne.n	80142a0 <pbuf_realloc+0xb8>
 8014292:	4b25      	ldr	r3, [pc, #148]	@ (8014328 <pbuf_realloc+0x140>)
 8014294:	f240 220f 	movw	r2, #527	@ 0x20f
 8014298:	4928      	ldr	r1, [pc, #160]	@ (801433c <pbuf_realloc+0x154>)
 801429a:	4825      	ldr	r0, [pc, #148]	@ (8014330 <pbuf_realloc+0x148>)
 801429c:	f00c f900 	bl	80204a0 <iprintf>
  while (rem_len > q->len) {
 80142a0:	697b      	ldr	r3, [r7, #20]
 80142a2:	895b      	ldrh	r3, [r3, #10]
 80142a4:	8a7a      	ldrh	r2, [r7, #18]
 80142a6:	429a      	cmp	r2, r3
 80142a8:	d8d4      	bhi.n	8014254 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 80142aa:	697b      	ldr	r3, [r7, #20]
 80142ac:	7b1b      	ldrb	r3, [r3, #12]
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d121      	bne.n	80142f6 <pbuf_realloc+0x10e>
 80142b2:	697b      	ldr	r3, [r7, #20]
 80142b4:	895b      	ldrh	r3, [r3, #10]
 80142b6:	8a7a      	ldrh	r2, [r7, #18]
 80142b8:	429a      	cmp	r2, r3
 80142ba:	d01c      	beq.n	80142f6 <pbuf_realloc+0x10e>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80142bc:	697b      	ldr	r3, [r7, #20]
 80142be:	7b5b      	ldrb	r3, [r3, #13]
 80142c0:	f003 0302 	and.w	r3, r3, #2
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d116      	bne.n	80142f6 <pbuf_realloc+0x10e>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 80142c8:	697b      	ldr	r3, [r7, #20]
 80142ca:	685a      	ldr	r2, [r3, #4]
 80142cc:	697b      	ldr	r3, [r7, #20]
 80142ce:	1ad3      	subs	r3, r2, r3
 80142d0:	b29a      	uxth	r2, r3
 80142d2:	8a7b      	ldrh	r3, [r7, #18]
 80142d4:	4413      	add	r3, r2
 80142d6:	b29b      	uxth	r3, r3
 80142d8:	4619      	mov	r1, r3
 80142da:	6978      	ldr	r0, [r7, #20]
 80142dc:	f7ff f89e 	bl	801341c <mem_trim>
 80142e0:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80142e2:	697b      	ldr	r3, [r7, #20]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d106      	bne.n	80142f6 <pbuf_realloc+0x10e>
 80142e8:	4b0f      	ldr	r3, [pc, #60]	@ (8014328 <pbuf_realloc+0x140>)
 80142ea:	f240 221d 	movw	r2, #541	@ 0x21d
 80142ee:	4914      	ldr	r1, [pc, #80]	@ (8014340 <pbuf_realloc+0x158>)
 80142f0:	480f      	ldr	r0, [pc, #60]	@ (8014330 <pbuf_realloc+0x148>)
 80142f2:	f00c f8d5 	bl	80204a0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80142f6:	697b      	ldr	r3, [r7, #20]
 80142f8:	8a7a      	ldrh	r2, [r7, #18]
 80142fa:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80142fc:	697b      	ldr	r3, [r7, #20]
 80142fe:	895a      	ldrh	r2, [r3, #10]
 8014300:	697b      	ldr	r3, [r7, #20]
 8014302:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8014304:	697b      	ldr	r3, [r7, #20]
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	2b00      	cmp	r3, #0
 801430a:	d004      	beq.n	8014316 <pbuf_realloc+0x12e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801430c:	697b      	ldr	r3, [r7, #20]
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	4618      	mov	r0, r3
 8014312:	f000 f8dd 	bl	80144d0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8014316:	697b      	ldr	r3, [r7, #20]
 8014318:	2200      	movs	r2, #0
 801431a:	601a      	str	r2, [r3, #0]
 801431c:	e000      	b.n	8014320 <pbuf_realloc+0x138>
    return;
 801431e:	bf00      	nop

}
 8014320:	3718      	adds	r7, #24
 8014322:	46bd      	mov	sp, r7
 8014324:	bd80      	pop	{r7, pc}
 8014326:	bf00      	nop
 8014328:	0802411c 	.word	0x0802411c
 801432c:	080242d8 	.word	0x080242d8
 8014330:	08024168 	.word	0x08024168
 8014334:	080242f0 	.word	0x080242f0
 8014338:	0802430c 	.word	0x0802430c
 801433c:	08024320 	.word	0x08024320
 8014340:	08024338 	.word	0x08024338

08014344 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8014344:	b580      	push	{r7, lr}
 8014346:	b084      	sub	sp, #16
 8014348:	af00      	add	r7, sp, #0
 801434a:	6078      	str	r0, [r7, #4]
 801434c:	460b      	mov	r3, r1
 801434e:	807b      	strh	r3, [r7, #2]
 8014350:	4613      	mov	r3, r2
 8014352:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	2b00      	cmp	r3, #0
 8014358:	d106      	bne.n	8014368 <pbuf_header_impl+0x24>
 801435a:	4b46      	ldr	r3, [pc, #280]	@ (8014474 <pbuf_header_impl+0x130>)
 801435c:	f240 223f 	movw	r2, #575	@ 0x23f
 8014360:	4945      	ldr	r1, [pc, #276]	@ (8014478 <pbuf_header_impl+0x134>)
 8014362:	4846      	ldr	r0, [pc, #280]	@ (801447c <pbuf_header_impl+0x138>)
 8014364:	f00c f89c 	bl	80204a0 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 8014368:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801436c:	2b00      	cmp	r3, #0
 801436e:	d002      	beq.n	8014376 <pbuf_header_impl+0x32>
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	2b00      	cmp	r3, #0
 8014374:	d101      	bne.n	801437a <pbuf_header_impl+0x36>
    return 0;
 8014376:	2300      	movs	r3, #0
 8014378:	e078      	b.n	801446c <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 801437a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801437e:	2b00      	cmp	r3, #0
 8014380:	da10      	bge.n	80143a4 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 8014382:	887b      	ldrh	r3, [r7, #2]
 8014384:	425b      	negs	r3, r3
 8014386:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	895b      	ldrh	r3, [r3, #10]
 801438c:	89fa      	ldrh	r2, [r7, #14]
 801438e:	429a      	cmp	r2, r3
 8014390:	d90a      	bls.n	80143a8 <pbuf_header_impl+0x64>
 8014392:	4b38      	ldr	r3, [pc, #224]	@ (8014474 <pbuf_header_impl+0x130>)
 8014394:	f240 2247 	movw	r2, #583	@ 0x247
 8014398:	4939      	ldr	r1, [pc, #228]	@ (8014480 <pbuf_header_impl+0x13c>)
 801439a:	4838      	ldr	r0, [pc, #224]	@ (801447c <pbuf_header_impl+0x138>)
 801439c:	f00c f880 	bl	80204a0 <iprintf>
 80143a0:	2301      	movs	r3, #1
 80143a2:	e063      	b.n	801446c <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 80143a4:	887b      	ldrh	r3, [r7, #2]
 80143a6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	7b1b      	ldrb	r3, [r3, #12]
 80143ac:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	685b      	ldr	r3, [r3, #4]
 80143b2:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 80143b4:	89bb      	ldrh	r3, [r7, #12]
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d002      	beq.n	80143c0 <pbuf_header_impl+0x7c>
 80143ba:	89bb      	ldrh	r3, [r7, #12]
 80143bc:	2b03      	cmp	r3, #3
 80143be:	d112      	bne.n	80143e6 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	685a      	ldr	r2, [r3, #4]
 80143c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80143c8:	425b      	negs	r3, r3
 80143ca:	441a      	add	r2, r3
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	685a      	ldr	r2, [r3, #4]
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	3310      	adds	r3, #16
 80143d8:	429a      	cmp	r2, r3
 80143da:	d238      	bcs.n	801444e <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	68ba      	ldr	r2, [r7, #8]
 80143e0:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 80143e2:	2301      	movs	r3, #1
 80143e4:	e042      	b.n	801446c <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 80143e6:	89bb      	ldrh	r3, [r7, #12]
 80143e8:	2b02      	cmp	r3, #2
 80143ea:	d002      	beq.n	80143f2 <pbuf_header_impl+0xae>
 80143ec:	89bb      	ldrh	r3, [r7, #12]
 80143ee:	2b01      	cmp	r3, #1
 80143f0:	d124      	bne.n	801443c <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80143f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	da0d      	bge.n	8014416 <pbuf_header_impl+0xd2>
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	895b      	ldrh	r3, [r3, #10]
 80143fe:	89fa      	ldrh	r2, [r7, #14]
 8014400:	429a      	cmp	r2, r3
 8014402:	d808      	bhi.n	8014416 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	685a      	ldr	r2, [r3, #4]
 8014408:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801440c:	425b      	negs	r3, r3
 801440e:	441a      	add	r2, r3
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	605a      	str	r2, [r3, #4]
 8014414:	e011      	b.n	801443a <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 8014416:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801441a:	2b00      	cmp	r3, #0
 801441c:	dd0b      	ble.n	8014436 <pbuf_header_impl+0xf2>
 801441e:	787b      	ldrb	r3, [r7, #1]
 8014420:	2b00      	cmp	r3, #0
 8014422:	d008      	beq.n	8014436 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	685a      	ldr	r2, [r3, #4]
 8014428:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801442c:	425b      	negs	r3, r3
 801442e:	441a      	add	r2, r3
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	605a      	str	r2, [r3, #4]
 8014434:	e001      	b.n	801443a <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8014436:	2301      	movs	r3, #1
 8014438:	e018      	b.n	801446c <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 801443a:	e008      	b.n	801444e <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 801443c:	4b0d      	ldr	r3, [pc, #52]	@ (8014474 <pbuf_header_impl+0x130>)
 801443e:	f240 2277 	movw	r2, #631	@ 0x277
 8014442:	4910      	ldr	r1, [pc, #64]	@ (8014484 <pbuf_header_impl+0x140>)
 8014444:	480d      	ldr	r0, [pc, #52]	@ (801447c <pbuf_header_impl+0x138>)
 8014446:	f00c f82b 	bl	80204a0 <iprintf>
    return 1;
 801444a:	2301      	movs	r3, #1
 801444c:	e00e      	b.n	801446c <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	895a      	ldrh	r2, [r3, #10]
 8014452:	887b      	ldrh	r3, [r7, #2]
 8014454:	4413      	add	r3, r2
 8014456:	b29a      	uxth	r2, r3
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	891a      	ldrh	r2, [r3, #8]
 8014460:	887b      	ldrh	r3, [r7, #2]
 8014462:	4413      	add	r3, r2
 8014464:	b29a      	uxth	r2, r3
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 801446a:	2300      	movs	r3, #0
}
 801446c:	4618      	mov	r0, r3
 801446e:	3710      	adds	r7, #16
 8014470:	46bd      	mov	sp, r7
 8014472:	bd80      	pop	{r7, pc}
 8014474:	0802411c 	.word	0x0802411c
 8014478:	08024354 	.word	0x08024354
 801447c:	08024168 	.word	0x08024168
 8014480:	08024360 	.word	0x08024360
 8014484:	08024380 	.word	0x08024380

08014488 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8014488:	b580      	push	{r7, lr}
 801448a:	b082      	sub	sp, #8
 801448c:	af00      	add	r7, sp, #0
 801448e:	6078      	str	r0, [r7, #4]
 8014490:	460b      	mov	r3, r1
 8014492:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 8014494:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014498:	2200      	movs	r2, #0
 801449a:	4619      	mov	r1, r3
 801449c:	6878      	ldr	r0, [r7, #4]
 801449e:	f7ff ff51 	bl	8014344 <pbuf_header_impl>
 80144a2:	4603      	mov	r3, r0
}
 80144a4:	4618      	mov	r0, r3
 80144a6:	3708      	adds	r7, #8
 80144a8:	46bd      	mov	sp, r7
 80144aa:	bd80      	pop	{r7, pc}

080144ac <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80144ac:	b580      	push	{r7, lr}
 80144ae:	b082      	sub	sp, #8
 80144b0:	af00      	add	r7, sp, #0
 80144b2:	6078      	str	r0, [r7, #4]
 80144b4:	460b      	mov	r3, r1
 80144b6:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 80144b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80144bc:	2201      	movs	r2, #1
 80144be:	4619      	mov	r1, r3
 80144c0:	6878      	ldr	r0, [r7, #4]
 80144c2:	f7ff ff3f 	bl	8014344 <pbuf_header_impl>
 80144c6:	4603      	mov	r3, r0
}
 80144c8:	4618      	mov	r0, r3
 80144ca:	3708      	adds	r7, #8
 80144cc:	46bd      	mov	sp, r7
 80144ce:	bd80      	pop	{r7, pc}

080144d0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80144d0:	b580      	push	{r7, lr}
 80144d2:	b086      	sub	sp, #24
 80144d4:	af00      	add	r7, sp, #0
 80144d6:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d10b      	bne.n	80144f6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d106      	bne.n	80144f2 <pbuf_free+0x22>
 80144e4:	4b3e      	ldr	r3, [pc, #248]	@ (80145e0 <pbuf_free+0x110>)
 80144e6:	f240 22d2 	movw	r2, #722	@ 0x2d2
 80144ea:	493e      	ldr	r1, [pc, #248]	@ (80145e4 <pbuf_free+0x114>)
 80144ec:	483e      	ldr	r0, [pc, #248]	@ (80145e8 <pbuf_free+0x118>)
 80144ee:	f00b ffd7 	bl	80204a0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80144f2:	2300      	movs	r3, #0
 80144f4:	e070      	b.n	80145d8 <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	7b1b      	ldrb	r3, [r3, #12]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d012      	beq.n	8014524 <pbuf_free+0x54>
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	7b1b      	ldrb	r3, [r3, #12]
 8014502:	2b01      	cmp	r3, #1
 8014504:	d00e      	beq.n	8014524 <pbuf_free+0x54>
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	7b1b      	ldrb	r3, [r3, #12]
 801450a:	2b02      	cmp	r3, #2
 801450c:	d00a      	beq.n	8014524 <pbuf_free+0x54>
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	7b1b      	ldrb	r3, [r3, #12]
 8014512:	2b03      	cmp	r3, #3
 8014514:	d006      	beq.n	8014524 <pbuf_free+0x54>
 8014516:	4b32      	ldr	r3, [pc, #200]	@ (80145e0 <pbuf_free+0x110>)
 8014518:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 801451c:	4933      	ldr	r1, [pc, #204]	@ (80145ec <pbuf_free+0x11c>)
 801451e:	4832      	ldr	r0, [pc, #200]	@ (80145e8 <pbuf_free+0x118>)
 8014520:	f00b ffbe 	bl	80204a0 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8014524:	2300      	movs	r3, #0
 8014526:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8014528:	e052      	b.n	80145d0 <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	89db      	ldrh	r3, [r3, #14]
 801452e:	2b00      	cmp	r3, #0
 8014530:	d106      	bne.n	8014540 <pbuf_free+0x70>
 8014532:	4b2b      	ldr	r3, [pc, #172]	@ (80145e0 <pbuf_free+0x110>)
 8014534:	f240 22eb 	movw	r2, #747	@ 0x2eb
 8014538:	492d      	ldr	r1, [pc, #180]	@ (80145f0 <pbuf_free+0x120>)
 801453a:	482b      	ldr	r0, [pc, #172]	@ (80145e8 <pbuf_free+0x118>)
 801453c:	f00b ffb0 	bl	80204a0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	89db      	ldrh	r3, [r3, #14]
 8014544:	3b01      	subs	r3, #1
 8014546:	b29a      	uxth	r2, r3
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	81da      	strh	r2, [r3, #14]
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	89db      	ldrh	r3, [r3, #14]
 8014550:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8014552:	8abb      	ldrh	r3, [r7, #20]
 8014554:	2b00      	cmp	r3, #0
 8014556:	d139      	bne.n	80145cc <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	681b      	ldr	r3, [r3, #0]
 801455c:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	7b1b      	ldrb	r3, [r3, #12]
 8014562:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	7b5b      	ldrb	r3, [r3, #13]
 8014568:	f003 0302 	and.w	r3, r3, #2
 801456c:	2b00      	cmp	r3, #0
 801456e:	d011      	beq.n	8014594 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8014574:	68bb      	ldr	r3, [r7, #8]
 8014576:	691b      	ldr	r3, [r3, #16]
 8014578:	2b00      	cmp	r3, #0
 801457a:	d106      	bne.n	801458a <pbuf_free+0xba>
 801457c:	4b18      	ldr	r3, [pc, #96]	@ (80145e0 <pbuf_free+0x110>)
 801457e:	f240 22f9 	movw	r2, #761	@ 0x2f9
 8014582:	491c      	ldr	r1, [pc, #112]	@ (80145f4 <pbuf_free+0x124>)
 8014584:	4818      	ldr	r0, [pc, #96]	@ (80145e8 <pbuf_free+0x118>)
 8014586:	f00b ff8b 	bl	80204a0 <iprintf>
        pc->custom_free_function(p);
 801458a:	68bb      	ldr	r3, [r7, #8]
 801458c:	691b      	ldr	r3, [r3, #16]
 801458e:	6878      	ldr	r0, [r7, #4]
 8014590:	4798      	blx	r3
 8014592:	e015      	b.n	80145c0 <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8014594:	89fb      	ldrh	r3, [r7, #14]
 8014596:	2b03      	cmp	r3, #3
 8014598:	d104      	bne.n	80145a4 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 801459a:	6879      	ldr	r1, [r7, #4]
 801459c:	2008      	movs	r0, #8
 801459e:	f7ff fa3b 	bl	8013a18 <memp_free>
 80145a2:	e00d      	b.n	80145c0 <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 80145a4:	89fb      	ldrh	r3, [r7, #14]
 80145a6:	2b01      	cmp	r3, #1
 80145a8:	d002      	beq.n	80145b0 <pbuf_free+0xe0>
 80145aa:	89fb      	ldrh	r3, [r7, #14]
 80145ac:	2b02      	cmp	r3, #2
 80145ae:	d104      	bne.n	80145ba <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 80145b0:	6879      	ldr	r1, [r7, #4]
 80145b2:	2007      	movs	r0, #7
 80145b4:	f7ff fa30 	bl	8013a18 <memp_free>
 80145b8:	e002      	b.n	80145c0 <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 80145ba:	6878      	ldr	r0, [r7, #4]
 80145bc:	f7fe feb2 	bl	8013324 <mem_free>
        }
      }
      count++;
 80145c0:	7dfb      	ldrb	r3, [r7, #23]
 80145c2:	3301      	adds	r3, #1
 80145c4:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80145c6:	693b      	ldr	r3, [r7, #16]
 80145c8:	607b      	str	r3, [r7, #4]
 80145ca:	e001      	b.n	80145d0 <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 80145cc:	2300      	movs	r3, #0
 80145ce:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d1a9      	bne.n	801452a <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80145d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80145d8:	4618      	mov	r0, r3
 80145da:	3718      	adds	r7, #24
 80145dc:	46bd      	mov	sp, r7
 80145de:	bd80      	pop	{r7, pc}
 80145e0:	0802411c 	.word	0x0802411c
 80145e4:	08024354 	.word	0x08024354
 80145e8:	08024168 	.word	0x08024168
 80145ec:	08024390 	.word	0x08024390
 80145f0:	080243a8 	.word	0x080243a8
 80145f4:	080243c0 	.word	0x080243c0

080145f8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80145f8:	b480      	push	{r7}
 80145fa:	b085      	sub	sp, #20
 80145fc:	af00      	add	r7, sp, #0
 80145fe:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8014600:	2300      	movs	r3, #0
 8014602:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8014604:	e005      	b.n	8014612 <pbuf_clen+0x1a>
    ++len;
 8014606:	89fb      	ldrh	r3, [r7, #14]
 8014608:	3301      	adds	r3, #1
 801460a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	2b00      	cmp	r3, #0
 8014616:	d1f6      	bne.n	8014606 <pbuf_clen+0xe>
  }
  return len;
 8014618:	89fb      	ldrh	r3, [r7, #14]
}
 801461a:	4618      	mov	r0, r3
 801461c:	3714      	adds	r7, #20
 801461e:	46bd      	mov	sp, r7
 8014620:	bc80      	pop	{r7}
 8014622:	4770      	bx	lr

08014624 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8014624:	b580      	push	{r7, lr}
 8014626:	b082      	sub	sp, #8
 8014628:	af00      	add	r7, sp, #0
 801462a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d010      	beq.n	8014654 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	89db      	ldrh	r3, [r3, #14]
 8014636:	3301      	adds	r3, #1
 8014638:	b29a      	uxth	r2, r3
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	89db      	ldrh	r3, [r3, #14]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d106      	bne.n	8014654 <pbuf_ref+0x30>
 8014646:	4b05      	ldr	r3, [pc, #20]	@ (801465c <pbuf_ref+0x38>)
 8014648:	f240 3239 	movw	r2, #825	@ 0x339
 801464c:	4904      	ldr	r1, [pc, #16]	@ (8014660 <pbuf_ref+0x3c>)
 801464e:	4805      	ldr	r0, [pc, #20]	@ (8014664 <pbuf_ref+0x40>)
 8014650:	f00b ff26 	bl	80204a0 <iprintf>
  }
}
 8014654:	bf00      	nop
 8014656:	3708      	adds	r7, #8
 8014658:	46bd      	mov	sp, r7
 801465a:	bd80      	pop	{r7, pc}
 801465c:	0802411c 	.word	0x0802411c
 8014660:	080243e4 	.word	0x080243e4
 8014664:	08024168 	.word	0x08024168

08014668 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8014668:	b580      	push	{r7, lr}
 801466a:	b084      	sub	sp, #16
 801466c:	af00      	add	r7, sp, #0
 801466e:	6078      	str	r0, [r7, #4]
 8014670:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	2b00      	cmp	r3, #0
 8014676:	d002      	beq.n	801467e <pbuf_cat+0x16>
 8014678:	683b      	ldr	r3, [r7, #0]
 801467a:	2b00      	cmp	r3, #0
 801467c:	d107      	bne.n	801468e <pbuf_cat+0x26>
 801467e:	4b20      	ldr	r3, [pc, #128]	@ (8014700 <pbuf_cat+0x98>)
 8014680:	f44f 7253 	mov.w	r2, #844	@ 0x34c
 8014684:	491f      	ldr	r1, [pc, #124]	@ (8014704 <pbuf_cat+0x9c>)
 8014686:	4820      	ldr	r0, [pc, #128]	@ (8014708 <pbuf_cat+0xa0>)
 8014688:	f00b ff0a 	bl	80204a0 <iprintf>
 801468c:	e034      	b.n	80146f8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	60fb      	str	r3, [r7, #12]
 8014692:	e00a      	b.n	80146aa <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	891a      	ldrh	r2, [r3, #8]
 8014698:	683b      	ldr	r3, [r7, #0]
 801469a:	891b      	ldrh	r3, [r3, #8]
 801469c:	4413      	add	r3, r2
 801469e:	b29a      	uxth	r2, r3
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	681b      	ldr	r3, [r3, #0]
 80146a8:	60fb      	str	r3, [r7, #12]
 80146aa:	68fb      	ldr	r3, [r7, #12]
 80146ac:	681b      	ldr	r3, [r3, #0]
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d1f0      	bne.n	8014694 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80146b2:	68fb      	ldr	r3, [r7, #12]
 80146b4:	891a      	ldrh	r2, [r3, #8]
 80146b6:	68fb      	ldr	r3, [r7, #12]
 80146b8:	895b      	ldrh	r3, [r3, #10]
 80146ba:	429a      	cmp	r2, r3
 80146bc:	d006      	beq.n	80146cc <pbuf_cat+0x64>
 80146be:	4b10      	ldr	r3, [pc, #64]	@ (8014700 <pbuf_cat+0x98>)
 80146c0:	f240 3255 	movw	r2, #853	@ 0x355
 80146c4:	4911      	ldr	r1, [pc, #68]	@ (801470c <pbuf_cat+0xa4>)
 80146c6:	4810      	ldr	r0, [pc, #64]	@ (8014708 <pbuf_cat+0xa0>)
 80146c8:	f00b feea 	bl	80204a0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d006      	beq.n	80146e2 <pbuf_cat+0x7a>
 80146d4:	4b0a      	ldr	r3, [pc, #40]	@ (8014700 <pbuf_cat+0x98>)
 80146d6:	f240 3256 	movw	r2, #854	@ 0x356
 80146da:	490d      	ldr	r1, [pc, #52]	@ (8014710 <pbuf_cat+0xa8>)
 80146dc:	480a      	ldr	r0, [pc, #40]	@ (8014708 <pbuf_cat+0xa0>)
 80146de:	f00b fedf 	bl	80204a0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	891a      	ldrh	r2, [r3, #8]
 80146e6:	683b      	ldr	r3, [r7, #0]
 80146e8:	891b      	ldrh	r3, [r3, #8]
 80146ea:	4413      	add	r3, r2
 80146ec:	b29a      	uxth	r2, r3
 80146ee:	68fb      	ldr	r3, [r7, #12]
 80146f0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	683a      	ldr	r2, [r7, #0]
 80146f6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80146f8:	3710      	adds	r7, #16
 80146fa:	46bd      	mov	sp, r7
 80146fc:	bd80      	pop	{r7, pc}
 80146fe:	bf00      	nop
 8014700:	0802411c 	.word	0x0802411c
 8014704:	080243f8 	.word	0x080243f8
 8014708:	08024168 	.word	0x08024168
 801470c:	08024430 	.word	0x08024430
 8014710:	08024460 	.word	0x08024460

08014714 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8014714:	b580      	push	{r7, lr}
 8014716:	b082      	sub	sp, #8
 8014718:	af00      	add	r7, sp, #0
 801471a:	6078      	str	r0, [r7, #4]
 801471c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801471e:	6839      	ldr	r1, [r7, #0]
 8014720:	6878      	ldr	r0, [r7, #4]
 8014722:	f7ff ffa1 	bl	8014668 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8014726:	6838      	ldr	r0, [r7, #0]
 8014728:	f7ff ff7c 	bl	8014624 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801472c:	bf00      	nop
 801472e:	3708      	adds	r7, #8
 8014730:	46bd      	mov	sp, r7
 8014732:	bd80      	pop	{r7, pc}

08014734 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8014734:	b580      	push	{r7, lr}
 8014736:	b084      	sub	sp, #16
 8014738:	af00      	add	r7, sp, #0
 801473a:	6078      	str	r0, [r7, #4]
 801473c:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 801473e:	2300      	movs	r3, #0
 8014740:	81fb      	strh	r3, [r7, #14]
 8014742:	2300      	movs	r3, #0
 8014744:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d008      	beq.n	801475e <pbuf_copy+0x2a>
 801474c:	683b      	ldr	r3, [r7, #0]
 801474e:	2b00      	cmp	r3, #0
 8014750:	d005      	beq.n	801475e <pbuf_copy+0x2a>
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	891a      	ldrh	r2, [r3, #8]
 8014756:	683b      	ldr	r3, [r7, #0]
 8014758:	891b      	ldrh	r3, [r3, #8]
 801475a:	429a      	cmp	r2, r3
 801475c:	d209      	bcs.n	8014772 <pbuf_copy+0x3e>
 801475e:	4b54      	ldr	r3, [pc, #336]	@ (80148b0 <pbuf_copy+0x17c>)
 8014760:	f44f 726f 	mov.w	r2, #956	@ 0x3bc
 8014764:	4953      	ldr	r1, [pc, #332]	@ (80148b4 <pbuf_copy+0x180>)
 8014766:	4854      	ldr	r0, [pc, #336]	@ (80148b8 <pbuf_copy+0x184>)
 8014768:	f00b fe9a 	bl	80204a0 <iprintf>
 801476c:	f06f 030f 	mvn.w	r3, #15
 8014770:	e099      	b.n	80148a6 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	895b      	ldrh	r3, [r3, #10]
 8014776:	461a      	mov	r2, r3
 8014778:	89fb      	ldrh	r3, [r7, #14]
 801477a:	1ad2      	subs	r2, r2, r3
 801477c:	683b      	ldr	r3, [r7, #0]
 801477e:	895b      	ldrh	r3, [r3, #10]
 8014780:	4619      	mov	r1, r3
 8014782:	89bb      	ldrh	r3, [r7, #12]
 8014784:	1acb      	subs	r3, r1, r3
 8014786:	429a      	cmp	r2, r3
 8014788:	db05      	blt.n	8014796 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801478a:	683b      	ldr	r3, [r7, #0]
 801478c:	895a      	ldrh	r2, [r3, #10]
 801478e:	89bb      	ldrh	r3, [r7, #12]
 8014790:	1ad3      	subs	r3, r2, r3
 8014792:	817b      	strh	r3, [r7, #10]
 8014794:	e004      	b.n	80147a0 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	895a      	ldrh	r2, [r3, #10]
 801479a:	89fb      	ldrh	r3, [r7, #14]
 801479c:	1ad3      	subs	r3, r2, r3
 801479e:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	685a      	ldr	r2, [r3, #4]
 80147a4:	89fb      	ldrh	r3, [r7, #14]
 80147a6:	18d0      	adds	r0, r2, r3
 80147a8:	683b      	ldr	r3, [r7, #0]
 80147aa:	685a      	ldr	r2, [r3, #4]
 80147ac:	89bb      	ldrh	r3, [r7, #12]
 80147ae:	4413      	add	r3, r2
 80147b0:	897a      	ldrh	r2, [r7, #10]
 80147b2:	4619      	mov	r1, r3
 80147b4:	f00c f909 	bl	80209ca <memcpy>
    offset_to += len;
 80147b8:	89fa      	ldrh	r2, [r7, #14]
 80147ba:	897b      	ldrh	r3, [r7, #10]
 80147bc:	4413      	add	r3, r2
 80147be:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 80147c0:	89ba      	ldrh	r2, [r7, #12]
 80147c2:	897b      	ldrh	r3, [r7, #10]
 80147c4:	4413      	add	r3, r2
 80147c6:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	895b      	ldrh	r3, [r3, #10]
 80147cc:	89fa      	ldrh	r2, [r7, #14]
 80147ce:	429a      	cmp	r2, r3
 80147d0:	d906      	bls.n	80147e0 <pbuf_copy+0xac>
 80147d2:	4b37      	ldr	r3, [pc, #220]	@ (80148b0 <pbuf_copy+0x17c>)
 80147d4:	f240 32cd 	movw	r2, #973	@ 0x3cd
 80147d8:	4938      	ldr	r1, [pc, #224]	@ (80148bc <pbuf_copy+0x188>)
 80147da:	4837      	ldr	r0, [pc, #220]	@ (80148b8 <pbuf_copy+0x184>)
 80147dc:	f00b fe60 	bl	80204a0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80147e0:	683b      	ldr	r3, [r7, #0]
 80147e2:	895b      	ldrh	r3, [r3, #10]
 80147e4:	89ba      	ldrh	r2, [r7, #12]
 80147e6:	429a      	cmp	r2, r3
 80147e8:	d906      	bls.n	80147f8 <pbuf_copy+0xc4>
 80147ea:	4b31      	ldr	r3, [pc, #196]	@ (80148b0 <pbuf_copy+0x17c>)
 80147ec:	f240 32ce 	movw	r2, #974	@ 0x3ce
 80147f0:	4933      	ldr	r1, [pc, #204]	@ (80148c0 <pbuf_copy+0x18c>)
 80147f2:	4831      	ldr	r0, [pc, #196]	@ (80148b8 <pbuf_copy+0x184>)
 80147f4:	f00b fe54 	bl	80204a0 <iprintf>
    if (offset_from >= p_from->len) {
 80147f8:	683b      	ldr	r3, [r7, #0]
 80147fa:	895b      	ldrh	r3, [r3, #10]
 80147fc:	89ba      	ldrh	r2, [r7, #12]
 80147fe:	429a      	cmp	r2, r3
 8014800:	d304      	bcc.n	801480c <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8014802:	2300      	movs	r3, #0
 8014804:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8014806:	683b      	ldr	r3, [r7, #0]
 8014808:	681b      	ldr	r3, [r3, #0]
 801480a:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	895b      	ldrh	r3, [r3, #10]
 8014810:	89fa      	ldrh	r2, [r7, #14]
 8014812:	429a      	cmp	r2, r3
 8014814:	d114      	bne.n	8014840 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 8014816:	2300      	movs	r3, #0
 8014818:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	2b00      	cmp	r3, #0
 8014824:	d10c      	bne.n	8014840 <pbuf_copy+0x10c>
 8014826:	683b      	ldr	r3, [r7, #0]
 8014828:	2b00      	cmp	r3, #0
 801482a:	d009      	beq.n	8014840 <pbuf_copy+0x10c>
 801482c:	4b20      	ldr	r3, [pc, #128]	@ (80148b0 <pbuf_copy+0x17c>)
 801482e:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8014832:	4924      	ldr	r1, [pc, #144]	@ (80148c4 <pbuf_copy+0x190>)
 8014834:	4820      	ldr	r0, [pc, #128]	@ (80148b8 <pbuf_copy+0x184>)
 8014836:	f00b fe33 	bl	80204a0 <iprintf>
 801483a:	f06f 030f 	mvn.w	r3, #15
 801483e:	e032      	b.n	80148a6 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8014840:	683b      	ldr	r3, [r7, #0]
 8014842:	2b00      	cmp	r3, #0
 8014844:	d013      	beq.n	801486e <pbuf_copy+0x13a>
 8014846:	683b      	ldr	r3, [r7, #0]
 8014848:	895a      	ldrh	r2, [r3, #10]
 801484a:	683b      	ldr	r3, [r7, #0]
 801484c:	891b      	ldrh	r3, [r3, #8]
 801484e:	429a      	cmp	r2, r3
 8014850:	d10d      	bne.n	801486e <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014852:	683b      	ldr	r3, [r7, #0]
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d009      	beq.n	801486e <pbuf_copy+0x13a>
 801485a:	4b15      	ldr	r3, [pc, #84]	@ (80148b0 <pbuf_copy+0x17c>)
 801485c:	f240 32dd 	movw	r2, #989	@ 0x3dd
 8014860:	4919      	ldr	r1, [pc, #100]	@ (80148c8 <pbuf_copy+0x194>)
 8014862:	4815      	ldr	r0, [pc, #84]	@ (80148b8 <pbuf_copy+0x184>)
 8014864:	f00b fe1c 	bl	80204a0 <iprintf>
 8014868:	f06f 0305 	mvn.w	r3, #5
 801486c:	e01b      	b.n	80148a6 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	2b00      	cmp	r3, #0
 8014872:	d013      	beq.n	801489c <pbuf_copy+0x168>
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	895a      	ldrh	r2, [r3, #10]
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	891b      	ldrh	r3, [r3, #8]
 801487c:	429a      	cmp	r2, r3
 801487e:	d10d      	bne.n	801489c <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	2b00      	cmp	r3, #0
 8014886:	d009      	beq.n	801489c <pbuf_copy+0x168>
 8014888:	4b09      	ldr	r3, [pc, #36]	@ (80148b0 <pbuf_copy+0x17c>)
 801488a:	f240 32e2 	movw	r2, #994	@ 0x3e2
 801488e:	490e      	ldr	r1, [pc, #56]	@ (80148c8 <pbuf_copy+0x194>)
 8014890:	4809      	ldr	r0, [pc, #36]	@ (80148b8 <pbuf_copy+0x184>)
 8014892:	f00b fe05 	bl	80204a0 <iprintf>
 8014896:	f06f 0305 	mvn.w	r3, #5
 801489a:	e004      	b.n	80148a6 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801489c:	683b      	ldr	r3, [r7, #0]
 801489e:	2b00      	cmp	r3, #0
 80148a0:	f47f af67 	bne.w	8014772 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80148a4:	2300      	movs	r3, #0
}
 80148a6:	4618      	mov	r0, r3
 80148a8:	3710      	adds	r7, #16
 80148aa:	46bd      	mov	sp, r7
 80148ac:	bd80      	pop	{r7, pc}
 80148ae:	bf00      	nop
 80148b0:	0802411c 	.word	0x0802411c
 80148b4:	080244ac 	.word	0x080244ac
 80148b8:	08024168 	.word	0x08024168
 80148bc:	080244dc 	.word	0x080244dc
 80148c0:	080244f4 	.word	0x080244f4
 80148c4:	08024510 	.word	0x08024510
 80148c8:	08024520 	.word	0x08024520

080148cc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80148cc:	b580      	push	{r7, lr}
 80148ce:	b088      	sub	sp, #32
 80148d0:	af00      	add	r7, sp, #0
 80148d2:	60f8      	str	r0, [r7, #12]
 80148d4:	60b9      	str	r1, [r7, #8]
 80148d6:	4611      	mov	r1, r2
 80148d8:	461a      	mov	r2, r3
 80148da:	460b      	mov	r3, r1
 80148dc:	80fb      	strh	r3, [r7, #6]
 80148de:	4613      	mov	r3, r2
 80148e0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80148e2:	2300      	movs	r3, #0
 80148e4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d108      	bne.n	80148fe <pbuf_copy_partial+0x32>
 80148ec:	4b30      	ldr	r3, [pc, #192]	@ (80149b0 <pbuf_copy_partial+0xe4>)
 80148ee:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 80148f2:	4930      	ldr	r1, [pc, #192]	@ (80149b4 <pbuf_copy_partial+0xe8>)
 80148f4:	4830      	ldr	r0, [pc, #192]	@ (80149b8 <pbuf_copy_partial+0xec>)
 80148f6:	f00b fdd3 	bl	80204a0 <iprintf>
 80148fa:	2300      	movs	r3, #0
 80148fc:	e054      	b.n	80149a8 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80148fe:	68bb      	ldr	r3, [r7, #8]
 8014900:	2b00      	cmp	r3, #0
 8014902:	d108      	bne.n	8014916 <pbuf_copy_partial+0x4a>
 8014904:	4b2a      	ldr	r3, [pc, #168]	@ (80149b0 <pbuf_copy_partial+0xe4>)
 8014906:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 801490a:	492c      	ldr	r1, [pc, #176]	@ (80149bc <pbuf_copy_partial+0xf0>)
 801490c:	482a      	ldr	r0, [pc, #168]	@ (80149b8 <pbuf_copy_partial+0xec>)
 801490e:	f00b fdc7 	bl	80204a0 <iprintf>
 8014912:	2300      	movs	r3, #0
 8014914:	e048      	b.n	80149a8 <pbuf_copy_partial+0xdc>

  left = 0;
 8014916:	2300      	movs	r3, #0
 8014918:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	2b00      	cmp	r3, #0
 801491e:	d002      	beq.n	8014926 <pbuf_copy_partial+0x5a>
 8014920:	68bb      	ldr	r3, [r7, #8]
 8014922:	2b00      	cmp	r3, #0
 8014924:	d101      	bne.n	801492a <pbuf_copy_partial+0x5e>
    return 0;
 8014926:	2300      	movs	r3, #0
 8014928:	e03e      	b.n	80149a8 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801492a:	68fb      	ldr	r3, [r7, #12]
 801492c:	61fb      	str	r3, [r7, #28]
 801492e:	e034      	b.n	801499a <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8014930:	88bb      	ldrh	r3, [r7, #4]
 8014932:	2b00      	cmp	r3, #0
 8014934:	d00a      	beq.n	801494c <pbuf_copy_partial+0x80>
 8014936:	69fb      	ldr	r3, [r7, #28]
 8014938:	895b      	ldrh	r3, [r3, #10]
 801493a:	88ba      	ldrh	r2, [r7, #4]
 801493c:	429a      	cmp	r2, r3
 801493e:	d305      	bcc.n	801494c <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8014940:	69fb      	ldr	r3, [r7, #28]
 8014942:	895b      	ldrh	r3, [r3, #10]
 8014944:	88ba      	ldrh	r2, [r7, #4]
 8014946:	1ad3      	subs	r3, r2, r3
 8014948:	80bb      	strh	r3, [r7, #4]
 801494a:	e023      	b.n	8014994 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 801494c:	69fb      	ldr	r3, [r7, #28]
 801494e:	895a      	ldrh	r2, [r3, #10]
 8014950:	88bb      	ldrh	r3, [r7, #4]
 8014952:	1ad3      	subs	r3, r2, r3
 8014954:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8014956:	8b3a      	ldrh	r2, [r7, #24]
 8014958:	88fb      	ldrh	r3, [r7, #6]
 801495a:	429a      	cmp	r2, r3
 801495c:	d901      	bls.n	8014962 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 801495e:	88fb      	ldrh	r3, [r7, #6]
 8014960:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8014962:	8b7b      	ldrh	r3, [r7, #26]
 8014964:	68ba      	ldr	r2, [r7, #8]
 8014966:	18d0      	adds	r0, r2, r3
 8014968:	69fb      	ldr	r3, [r7, #28]
 801496a:	685a      	ldr	r2, [r3, #4]
 801496c:	88bb      	ldrh	r3, [r7, #4]
 801496e:	4413      	add	r3, r2
 8014970:	8b3a      	ldrh	r2, [r7, #24]
 8014972:	4619      	mov	r1, r3
 8014974:	f00c f829 	bl	80209ca <memcpy>
      copied_total += buf_copy_len;
 8014978:	8afa      	ldrh	r2, [r7, #22]
 801497a:	8b3b      	ldrh	r3, [r7, #24]
 801497c:	4413      	add	r3, r2
 801497e:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8014980:	8b7a      	ldrh	r2, [r7, #26]
 8014982:	8b3b      	ldrh	r3, [r7, #24]
 8014984:	4413      	add	r3, r2
 8014986:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 8014988:	88fa      	ldrh	r2, [r7, #6]
 801498a:	8b3b      	ldrh	r3, [r7, #24]
 801498c:	1ad3      	subs	r3, r2, r3
 801498e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8014990:	2300      	movs	r3, #0
 8014992:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8014994:	69fb      	ldr	r3, [r7, #28]
 8014996:	681b      	ldr	r3, [r3, #0]
 8014998:	61fb      	str	r3, [r7, #28]
 801499a:	88fb      	ldrh	r3, [r7, #6]
 801499c:	2b00      	cmp	r3, #0
 801499e:	d002      	beq.n	80149a6 <pbuf_copy_partial+0xda>
 80149a0:	69fb      	ldr	r3, [r7, #28]
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d1c4      	bne.n	8014930 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 80149a6:	8afb      	ldrh	r3, [r7, #22]
}
 80149a8:	4618      	mov	r0, r3
 80149aa:	3720      	adds	r7, #32
 80149ac:	46bd      	mov	sp, r7
 80149ae:	bd80      	pop	{r7, pc}
 80149b0:	0802411c 	.word	0x0802411c
 80149b4:	0802454c 	.word	0x0802454c
 80149b8:	08024168 	.word	0x08024168
 80149bc:	0802456c 	.word	0x0802456c

080149c0 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf*
pbuf_skip_const(const struct pbuf* in, u16_t in_offset, u16_t* out_offset)
{
 80149c0:	b480      	push	{r7}
 80149c2:	b087      	sub	sp, #28
 80149c4:	af00      	add	r7, sp, #0
 80149c6:	60f8      	str	r0, [r7, #12]
 80149c8:	460b      	mov	r3, r1
 80149ca:	607a      	str	r2, [r7, #4]
 80149cc:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 80149ce:	897b      	ldrh	r3, [r7, #10]
 80149d0:	82fb      	strh	r3, [r7, #22]
  const struct pbuf* q = in;
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 80149d6:	e007      	b.n	80149e8 <pbuf_skip_const+0x28>
    offset_left -= q->len;
 80149d8:	693b      	ldr	r3, [r7, #16]
 80149da:	895b      	ldrh	r3, [r3, #10]
 80149dc:	8afa      	ldrh	r2, [r7, #22]
 80149de:	1ad3      	subs	r3, r2, r3
 80149e0:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 80149e2:	693b      	ldr	r3, [r7, #16]
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 80149e8:	693b      	ldr	r3, [r7, #16]
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d004      	beq.n	80149f8 <pbuf_skip_const+0x38>
 80149ee:	693b      	ldr	r3, [r7, #16]
 80149f0:	895b      	ldrh	r3, [r3, #10]
 80149f2:	8afa      	ldrh	r2, [r7, #22]
 80149f4:	429a      	cmp	r2, r3
 80149f6:	d2ef      	bcs.n	80149d8 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d002      	beq.n	8014a04 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	8afa      	ldrh	r2, [r7, #22]
 8014a02:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8014a04:	693b      	ldr	r3, [r7, #16]
}
 8014a06:	4618      	mov	r0, r3
 8014a08:	371c      	adds	r7, #28
 8014a0a:	46bd      	mov	sp, r7
 8014a0c:	bc80      	pop	{r7}
 8014a0e:	4770      	bx	lr

08014a10 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf*
pbuf_skip(struct pbuf* in, u16_t in_offset, u16_t* out_offset)
{
 8014a10:	b580      	push	{r7, lr}
 8014a12:	b086      	sub	sp, #24
 8014a14:	af00      	add	r7, sp, #0
 8014a16:	60f8      	str	r0, [r7, #12]
 8014a18:	460b      	mov	r3, r1
 8014a1a:	607a      	str	r2, [r7, #4]
 8014a1c:	817b      	strh	r3, [r7, #10]
  const struct pbuf* out = pbuf_skip_const(in, in_offset, out_offset);
 8014a1e:	897b      	ldrh	r3, [r7, #10]
 8014a20:	687a      	ldr	r2, [r7, #4]
 8014a22:	4619      	mov	r1, r3
 8014a24:	68f8      	ldr	r0, [r7, #12]
 8014a26:	f7ff ffcb 	bl	80149c0 <pbuf_skip_const>
 8014a2a:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf*, out);
 8014a2c:	697b      	ldr	r3, [r7, #20]
}
 8014a2e:	4618      	mov	r0, r3
 8014a30:	3718      	adds	r7, #24
 8014a32:	46bd      	mov	sp, r7
 8014a34:	bd80      	pop	{r7, pc}
	...

08014a38 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8014a38:	b580      	push	{r7, lr}
 8014a3a:	b088      	sub	sp, #32
 8014a3c:	af00      	add	r7, sp, #0
 8014a3e:	60f8      	str	r0, [r7, #12]
 8014a40:	60b9      	str	r1, [r7, #8]
 8014a42:	4613      	mov	r3, r2
 8014a44:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
 8014a46:	88fb      	ldrh	r3, [r7, #6]
 8014a48:	833b      	strh	r3, [r7, #24]
  u16_t copied_total = 0;
 8014a4a:	2300      	movs	r3, #0
 8014a4c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d109      	bne.n	8014a68 <pbuf_take+0x30>
 8014a54:	4b3a      	ldr	r3, [pc, #232]	@ (8014b40 <pbuf_take+0x108>)
 8014a56:	f240 4284 	movw	r2, #1156	@ 0x484
 8014a5a:	493a      	ldr	r1, [pc, #232]	@ (8014b44 <pbuf_take+0x10c>)
 8014a5c:	483a      	ldr	r0, [pc, #232]	@ (8014b48 <pbuf_take+0x110>)
 8014a5e:	f00b fd1f 	bl	80204a0 <iprintf>
 8014a62:	f06f 030f 	mvn.w	r3, #15
 8014a66:	e066      	b.n	8014b36 <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8014a68:	68bb      	ldr	r3, [r7, #8]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d109      	bne.n	8014a82 <pbuf_take+0x4a>
 8014a6e:	4b34      	ldr	r3, [pc, #208]	@ (8014b40 <pbuf_take+0x108>)
 8014a70:	f240 4285 	movw	r2, #1157	@ 0x485
 8014a74:	4935      	ldr	r1, [pc, #212]	@ (8014b4c <pbuf_take+0x114>)
 8014a76:	4834      	ldr	r0, [pc, #208]	@ (8014b48 <pbuf_take+0x110>)
 8014a78:	f00b fd12 	bl	80204a0 <iprintf>
 8014a7c:	f06f 030f 	mvn.w	r3, #15
 8014a80:	e059      	b.n	8014b36 <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	891b      	ldrh	r3, [r3, #8]
 8014a86:	88fa      	ldrh	r2, [r7, #6]
 8014a88:	429a      	cmp	r2, r3
 8014a8a:	d909      	bls.n	8014aa0 <pbuf_take+0x68>
 8014a8c:	4b2c      	ldr	r3, [pc, #176]	@ (8014b40 <pbuf_take+0x108>)
 8014a8e:	f240 4286 	movw	r2, #1158	@ 0x486
 8014a92:	492f      	ldr	r1, [pc, #188]	@ (8014b50 <pbuf_take+0x118>)
 8014a94:	482c      	ldr	r0, [pc, #176]	@ (8014b48 <pbuf_take+0x110>)
 8014a96:	f00b fd03 	bl	80204a0 <iprintf>
 8014a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8014a9e:	e04a      	b.n	8014b36 <pbuf_take+0xfe>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	d007      	beq.n	8014ab6 <pbuf_take+0x7e>
 8014aa6:	68bb      	ldr	r3, [r7, #8]
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d004      	beq.n	8014ab6 <pbuf_take+0x7e>
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	891b      	ldrh	r3, [r3, #8]
 8014ab0:	88fa      	ldrh	r2, [r7, #6]
 8014ab2:	429a      	cmp	r2, r3
 8014ab4:	d902      	bls.n	8014abc <pbuf_take+0x84>
    return ERR_ARG;
 8014ab6:	f06f 030f 	mvn.w	r3, #15
 8014aba:	e03c      	b.n	8014b36 <pbuf_take+0xfe>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	61fb      	str	r3, [r7, #28]
 8014ac0:	e027      	b.n	8014b12 <pbuf_take+0xda>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8014ac2:	69fb      	ldr	r3, [r7, #28]
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d106      	bne.n	8014ad6 <pbuf_take+0x9e>
 8014ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8014b40 <pbuf_take+0x108>)
 8014aca:	f240 428e 	movw	r2, #1166	@ 0x48e
 8014ace:	4921      	ldr	r1, [pc, #132]	@ (8014b54 <pbuf_take+0x11c>)
 8014ad0:	481d      	ldr	r0, [pc, #116]	@ (8014b48 <pbuf_take+0x110>)
 8014ad2:	f00b fce5 	bl	80204a0 <iprintf>
    buf_copy_len = total_copy_len;
 8014ad6:	8b3b      	ldrh	r3, [r7, #24]
 8014ad8:	837b      	strh	r3, [r7, #26]
    if (buf_copy_len > p->len) {
 8014ada:	69fb      	ldr	r3, [r7, #28]
 8014adc:	895b      	ldrh	r3, [r3, #10]
 8014ade:	8b7a      	ldrh	r2, [r7, #26]
 8014ae0:	429a      	cmp	r2, r3
 8014ae2:	d902      	bls.n	8014aea <pbuf_take+0xb2>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8014ae4:	69fb      	ldr	r3, [r7, #28]
 8014ae6:	895b      	ldrh	r3, [r3, #10]
 8014ae8:	837b      	strh	r3, [r7, #26]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char*)dataptr)[copied_total], buf_copy_len);
 8014aea:	69fb      	ldr	r3, [r7, #28]
 8014aec:	6858      	ldr	r0, [r3, #4]
 8014aee:	8afb      	ldrh	r3, [r7, #22]
 8014af0:	68ba      	ldr	r2, [r7, #8]
 8014af2:	4413      	add	r3, r2
 8014af4:	8b7a      	ldrh	r2, [r7, #26]
 8014af6:	4619      	mov	r1, r3
 8014af8:	f00b ff67 	bl	80209ca <memcpy>
    total_copy_len -= buf_copy_len;
 8014afc:	8b3a      	ldrh	r2, [r7, #24]
 8014afe:	8b7b      	ldrh	r3, [r7, #26]
 8014b00:	1ad3      	subs	r3, r2, r3
 8014b02:	833b      	strh	r3, [r7, #24]
    copied_total += buf_copy_len;
 8014b04:	8afa      	ldrh	r2, [r7, #22]
 8014b06:	8b7b      	ldrh	r3, [r7, #26]
 8014b08:	4413      	add	r3, r2
 8014b0a:	82fb      	strh	r3, [r7, #22]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8014b0c:	69fb      	ldr	r3, [r7, #28]
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	61fb      	str	r3, [r7, #28]
 8014b12:	8b3b      	ldrh	r3, [r7, #24]
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d1d4      	bne.n	8014ac2 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8014b18:	8b3b      	ldrh	r3, [r7, #24]
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d103      	bne.n	8014b26 <pbuf_take+0xee>
 8014b1e:	8afa      	ldrh	r2, [r7, #22]
 8014b20:	88fb      	ldrh	r3, [r7, #6]
 8014b22:	429a      	cmp	r2, r3
 8014b24:	d006      	beq.n	8014b34 <pbuf_take+0xfc>
 8014b26:	4b06      	ldr	r3, [pc, #24]	@ (8014b40 <pbuf_take+0x108>)
 8014b28:	f240 4299 	movw	r2, #1177	@ 0x499
 8014b2c:	490a      	ldr	r1, [pc, #40]	@ (8014b58 <pbuf_take+0x120>)
 8014b2e:	4806      	ldr	r0, [pc, #24]	@ (8014b48 <pbuf_take+0x110>)
 8014b30:	f00b fcb6 	bl	80204a0 <iprintf>
  return ERR_OK;
 8014b34:	2300      	movs	r3, #0
}
 8014b36:	4618      	mov	r0, r3
 8014b38:	3720      	adds	r7, #32
 8014b3a:	46bd      	mov	sp, r7
 8014b3c:	bd80      	pop	{r7, pc}
 8014b3e:	bf00      	nop
 8014b40:	0802411c 	.word	0x0802411c
 8014b44:	08024590 	.word	0x08024590
 8014b48:	08024168 	.word	0x08024168
 8014b4c:	080245a8 	.word	0x080245a8
 8014b50:	080245c4 	.word	0x080245c4
 8014b54:	080245e4 	.word	0x080245e4
 8014b58:	080245fc 	.word	0x080245fc

08014b5c <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 8014b5c:	b580      	push	{r7, lr}
 8014b5e:	b088      	sub	sp, #32
 8014b60:	af00      	add	r7, sp, #0
 8014b62:	60f8      	str	r0, [r7, #12]
 8014b64:	60b9      	str	r1, [r7, #8]
 8014b66:	4611      	mov	r1, r2
 8014b68:	461a      	mov	r2, r3
 8014b6a:	460b      	mov	r3, r1
 8014b6c:	80fb      	strh	r3, [r7, #6]
 8014b6e:	4613      	mov	r3, r2
 8014b70:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf* q = pbuf_skip(buf, offset, &target_offset);
 8014b72:	f107 0210 	add.w	r2, r7, #16
 8014b76:	88bb      	ldrh	r3, [r7, #4]
 8014b78:	4619      	mov	r1, r3
 8014b7a:	68f8      	ldr	r0, [r7, #12]
 8014b7c:	f7ff ff48 	bl	8014a10 <pbuf_skip>
 8014b80:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 8014b82:	69fb      	ldr	r3, [r7, #28]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d035      	beq.n	8014bf4 <pbuf_take_at+0x98>
 8014b88:	69fb      	ldr	r3, [r7, #28]
 8014b8a:	891b      	ldrh	r3, [r3, #8]
 8014b8c:	461a      	mov	r2, r3
 8014b8e:	8a3b      	ldrh	r3, [r7, #16]
 8014b90:	4619      	mov	r1, r3
 8014b92:	88fb      	ldrh	r3, [r7, #6]
 8014b94:	440b      	add	r3, r1
 8014b96:	429a      	cmp	r2, r3
 8014b98:	db2c      	blt.n	8014bf4 <pbuf_take_at+0x98>
    u16_t remaining_len = len;
 8014b9a:	88fb      	ldrh	r3, [r7, #6]
 8014b9c:	837b      	strh	r3, [r7, #26]
    const u8_t* src_ptr = (const u8_t*)dataptr;
 8014b9e:	68bb      	ldr	r3, [r7, #8]
 8014ba0:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len = LWIP_MIN(q->len - target_offset, len);
 8014ba2:	88fa      	ldrh	r2, [r7, #6]
 8014ba4:	69fb      	ldr	r3, [r7, #28]
 8014ba6:	895b      	ldrh	r3, [r3, #10]
 8014ba8:	4619      	mov	r1, r3
 8014baa:	8a3b      	ldrh	r3, [r7, #16]
 8014bac:	1acb      	subs	r3, r1, r3
 8014bae:	4293      	cmp	r3, r2
 8014bb0:	bfa8      	it	ge
 8014bb2:	4613      	movge	r3, r2
 8014bb4:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t*)q->payload) + target_offset, dataptr, first_copy_len);
 8014bb6:	69fb      	ldr	r3, [r7, #28]
 8014bb8:	685b      	ldr	r3, [r3, #4]
 8014bba:	8a3a      	ldrh	r2, [r7, #16]
 8014bbc:	4413      	add	r3, r2
 8014bbe:	8a7a      	ldrh	r2, [r7, #18]
 8014bc0:	68b9      	ldr	r1, [r7, #8]
 8014bc2:	4618      	mov	r0, r3
 8014bc4:	f00b ff01 	bl	80209ca <memcpy>
    remaining_len -= first_copy_len;
 8014bc8:	8b7a      	ldrh	r2, [r7, #26]
 8014bca:	8a7b      	ldrh	r3, [r7, #18]
 8014bcc:	1ad3      	subs	r3, r2, r3
 8014bce:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 8014bd0:	8a7b      	ldrh	r3, [r7, #18]
 8014bd2:	697a      	ldr	r2, [r7, #20]
 8014bd4:	4413      	add	r3, r2
 8014bd6:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 8014bd8:	8b7b      	ldrh	r3, [r7, #26]
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d008      	beq.n	8014bf0 <pbuf_take_at+0x94>
      return pbuf_take(q->next, src_ptr, remaining_len);
 8014bde:	69fb      	ldr	r3, [r7, #28]
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	8b7a      	ldrh	r2, [r7, #26]
 8014be4:	6979      	ldr	r1, [r7, #20]
 8014be6:	4618      	mov	r0, r3
 8014be8:	f7ff ff26 	bl	8014a38 <pbuf_take>
 8014bec:	4603      	mov	r3, r0
 8014bee:	e003      	b.n	8014bf8 <pbuf_take_at+0x9c>
    }
    return ERR_OK;
 8014bf0:	2300      	movs	r3, #0
 8014bf2:	e001      	b.n	8014bf8 <pbuf_take_at+0x9c>
  }
  return ERR_MEM;
 8014bf4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014bf8:	4618      	mov	r0, r3
 8014bfa:	3720      	adds	r7, #32
 8014bfc:	46bd      	mov	sp, r7
 8014bfe:	bd80      	pop	{r7, pc}

08014c00 <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
 8014c00:	b480      	push	{r7}
 8014c02:	af00      	add	r7, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 8014c04:	bf00      	nop
 8014c06:	46bd      	mov	sp, r7
 8014c08:	bc80      	pop	{r7}
 8014c0a:	4770      	bx	lr

08014c0c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8014c0c:	b480      	push	{r7}
 8014c0e:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8014c10:	bf00      	nop
 8014c12:	46bd      	mov	sp, r7
 8014c14:	bc80      	pop	{r7}
 8014c16:	4770      	bx	lr

08014c18 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8014c18:	b580      	push	{r7, lr}
 8014c1a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8014c1c:	f000 ffaa 	bl	8015b74 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8014c20:	4b07      	ldr	r3, [pc, #28]	@ (8014c40 <tcp_tmr+0x28>)
 8014c22:	781b      	ldrb	r3, [r3, #0]
 8014c24:	3301      	adds	r3, #1
 8014c26:	b2da      	uxtb	r2, r3
 8014c28:	4b05      	ldr	r3, [pc, #20]	@ (8014c40 <tcp_tmr+0x28>)
 8014c2a:	701a      	strb	r2, [r3, #0]
 8014c2c:	4b04      	ldr	r3, [pc, #16]	@ (8014c40 <tcp_tmr+0x28>)
 8014c2e:	781b      	ldrb	r3, [r3, #0]
 8014c30:	f003 0301 	and.w	r3, r3, #1
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d001      	beq.n	8014c3c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8014c38:	f000 fcd8 	bl	80155ec <tcp_slowtmr>
  }
}
 8014c3c:	bf00      	nop
 8014c3e:	bd80      	pop	{r7, pc}
 8014c40:	2000dd31 	.word	0x2000dd31

08014c44 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8014c44:	b480      	push	{r7}
 8014c46:	b085      	sub	sp, #20
 8014c48:	af00      	add	r7, sp, #0
 8014c4a:	6078      	str	r0, [r7, #4]
 8014c4c:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	60fb      	str	r3, [r7, #12]
 8014c52:	e00a      	b.n	8014c6a <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014c58:	683a      	ldr	r2, [r7, #0]
 8014c5a:	429a      	cmp	r2, r3
 8014c5c:	d102      	bne.n	8014c64 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	2200      	movs	r2, #0
 8014c62:	679a      	str	r2, [r3, #120]	@ 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	68db      	ldr	r3, [r3, #12]
 8014c68:	60fb      	str	r3, [r7, #12]
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d1f1      	bne.n	8014c54 <tcp_remove_listener+0x10>
      }
   }
}
 8014c70:	bf00      	nop
 8014c72:	bf00      	nop
 8014c74:	3714      	adds	r7, #20
 8014c76:	46bd      	mov	sp, r7
 8014c78:	bc80      	pop	{r7}
 8014c7a:	4770      	bx	lr

08014c7c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8014c7c:	b580      	push	{r7, lr}
 8014c7e:	b084      	sub	sp, #16
 8014c80:	af00      	add	r7, sp, #0
 8014c82:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d105      	bne.n	8014c96 <tcp_listen_closed+0x1a>
 8014c8a:	4b13      	ldr	r3, [pc, #76]	@ (8014cd8 <tcp_listen_closed+0x5c>)
 8014c8c:	22c0      	movs	r2, #192	@ 0xc0
 8014c8e:	4913      	ldr	r1, [pc, #76]	@ (8014cdc <tcp_listen_closed+0x60>)
 8014c90:	4813      	ldr	r0, [pc, #76]	@ (8014ce0 <tcp_listen_closed+0x64>)
 8014c92:	f00b fc05 	bl	80204a0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	7d1b      	ldrb	r3, [r3, #20]
 8014c9a:	2b01      	cmp	r3, #1
 8014c9c:	d005      	beq.n	8014caa <tcp_listen_closed+0x2e>
 8014c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8014cd8 <tcp_listen_closed+0x5c>)
 8014ca0:	22c1      	movs	r2, #193	@ 0xc1
 8014ca2:	4910      	ldr	r1, [pc, #64]	@ (8014ce4 <tcp_listen_closed+0x68>)
 8014ca4:	480e      	ldr	r0, [pc, #56]	@ (8014ce0 <tcp_listen_closed+0x64>)
 8014ca6:	f00b fbfb 	bl	80204a0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8014caa:	2301      	movs	r3, #1
 8014cac:	60fb      	str	r3, [r7, #12]
 8014cae:	e00b      	b.n	8014cc8 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8014cb0:	4a0d      	ldr	r2, [pc, #52]	@ (8014ce8 <tcp_listen_closed+0x6c>)
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014cb8:	681b      	ldr	r3, [r3, #0]
 8014cba:	6879      	ldr	r1, [r7, #4]
 8014cbc:	4618      	mov	r0, r3
 8014cbe:	f7ff ffc1 	bl	8014c44 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	3301      	adds	r3, #1
 8014cc6:	60fb      	str	r3, [r7, #12]
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	2b03      	cmp	r3, #3
 8014ccc:	d9f0      	bls.n	8014cb0 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8014cce:	bf00      	nop
 8014cd0:	bf00      	nop
 8014cd2:	3710      	adds	r7, #16
 8014cd4:	46bd      	mov	sp, r7
 8014cd6:	bd80      	pop	{r7, pc}
 8014cd8:	080246a0 	.word	0x080246a0
 8014cdc:	080246d0 	.word	0x080246d0
 8014ce0:	080246dc 	.word	0x080246dc
 8014ce4:	08024704 	.word	0x08024704
 8014ce8:	0802f018 	.word	0x0802f018

08014cec <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8014cec:	b5b0      	push	{r4, r5, r7, lr}
 8014cee:	b086      	sub	sp, #24
 8014cf0:	af02      	add	r7, sp, #8
 8014cf2:	6078      	str	r0, [r7, #4]
 8014cf4:	460b      	mov	r3, r1
 8014cf6:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8014cf8:	78fb      	ldrb	r3, [r7, #3]
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d075      	beq.n	8014dea <tcp_close_shutdown+0xfe>
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	7d1b      	ldrb	r3, [r3, #20]
 8014d02:	2b04      	cmp	r3, #4
 8014d04:	d003      	beq.n	8014d0e <tcp_close_shutdown+0x22>
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	7d1b      	ldrb	r3, [r3, #20]
 8014d0a:	2b07      	cmp	r3, #7
 8014d0c:	d16d      	bne.n	8014dea <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d104      	bne.n	8014d20 <tcp_close_shutdown+0x34>
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014d1a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8014d1e:	d064      	beq.n	8014dea <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	7e9b      	ldrb	r3, [r3, #26]
 8014d24:	f003 0310 	and.w	r3, r3, #16
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d106      	bne.n	8014d3a <tcp_close_shutdown+0x4e>
 8014d2c:	4b5e      	ldr	r3, [pc, #376]	@ (8014ea8 <tcp_close_shutdown+0x1bc>)
 8014d2e:	f240 120f 	movw	r2, #271	@ 0x10f
 8014d32:	495e      	ldr	r1, [pc, #376]	@ (8014eac <tcp_close_shutdown+0x1c0>)
 8014d34:	485e      	ldr	r0, [pc, #376]	@ (8014eb0 <tcp_close_shutdown+0x1c4>)
 8014d36:	f00b fbb3 	bl	80204a0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8014d42:	687c      	ldr	r4, [r7, #4]
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	1d1d      	adds	r5, r3, #4
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	8adb      	ldrh	r3, [r3, #22]
 8014d4c:	687a      	ldr	r2, [r7, #4]
 8014d4e:	8b12      	ldrh	r2, [r2, #24]
 8014d50:	9201      	str	r2, [sp, #4]
 8014d52:	9300      	str	r3, [sp, #0]
 8014d54:	462b      	mov	r3, r5
 8014d56:	4622      	mov	r2, r4
 8014d58:	f004 fffc 	bl	8019d54 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8014d5c:	6878      	ldr	r0, [r7, #4]
 8014d5e:	f001 fa73 	bl	8016248 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8014d62:	4b54      	ldr	r3, [pc, #336]	@ (8014eb4 <tcp_close_shutdown+0x1c8>)
 8014d64:	681b      	ldr	r3, [r3, #0]
 8014d66:	687a      	ldr	r2, [r7, #4]
 8014d68:	429a      	cmp	r2, r3
 8014d6a:	d105      	bne.n	8014d78 <tcp_close_shutdown+0x8c>
 8014d6c:	4b51      	ldr	r3, [pc, #324]	@ (8014eb4 <tcp_close_shutdown+0x1c8>)
 8014d6e:	681b      	ldr	r3, [r3, #0]
 8014d70:	68db      	ldr	r3, [r3, #12]
 8014d72:	4a50      	ldr	r2, [pc, #320]	@ (8014eb4 <tcp_close_shutdown+0x1c8>)
 8014d74:	6013      	str	r3, [r2, #0]
 8014d76:	e013      	b.n	8014da0 <tcp_close_shutdown+0xb4>
 8014d78:	4b4e      	ldr	r3, [pc, #312]	@ (8014eb4 <tcp_close_shutdown+0x1c8>)
 8014d7a:	681b      	ldr	r3, [r3, #0]
 8014d7c:	60fb      	str	r3, [r7, #12]
 8014d7e:	e00c      	b.n	8014d9a <tcp_close_shutdown+0xae>
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	68db      	ldr	r3, [r3, #12]
 8014d84:	687a      	ldr	r2, [r7, #4]
 8014d86:	429a      	cmp	r2, r3
 8014d88:	d104      	bne.n	8014d94 <tcp_close_shutdown+0xa8>
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	68da      	ldr	r2, [r3, #12]
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	60da      	str	r2, [r3, #12]
 8014d92:	e005      	b.n	8014da0 <tcp_close_shutdown+0xb4>
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	68db      	ldr	r3, [r3, #12]
 8014d98:	60fb      	str	r3, [r7, #12]
 8014d9a:	68fb      	ldr	r3, [r7, #12]
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d1ef      	bne.n	8014d80 <tcp_close_shutdown+0x94>
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	2200      	movs	r2, #0
 8014da4:	60da      	str	r2, [r3, #12]
 8014da6:	4b44      	ldr	r3, [pc, #272]	@ (8014eb8 <tcp_close_shutdown+0x1cc>)
 8014da8:	2201      	movs	r2, #1
 8014daa:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	7d1b      	ldrb	r3, [r3, #20]
 8014db0:	2b04      	cmp	r3, #4
 8014db2:	d10c      	bne.n	8014dce <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	220a      	movs	r2, #10
 8014db8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8014dba:	4b40      	ldr	r3, [pc, #256]	@ (8014ebc <tcp_close_shutdown+0x1d0>)
 8014dbc:	681a      	ldr	r2, [r3, #0]
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	60da      	str	r2, [r3, #12]
 8014dc2:	4a3e      	ldr	r2, [pc, #248]	@ (8014ebc <tcp_close_shutdown+0x1d0>)
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	6013      	str	r3, [r2, #0]
 8014dc8:	f005 fa3c 	bl	801a244 <tcp_timer_needed>
 8014dcc:	e00b      	b.n	8014de6 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 8014dce:	4b3c      	ldr	r3, [pc, #240]	@ (8014ec0 <tcp_close_shutdown+0x1d4>)
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	687a      	ldr	r2, [r7, #4]
 8014dd4:	429a      	cmp	r2, r3
 8014dd6:	d102      	bne.n	8014dde <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8014dd8:	f003 fe12 	bl	8018a00 <tcp_trigger_input_pcb_close>
 8014ddc:	e003      	b.n	8014de6 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 8014dde:	6879      	ldr	r1, [r7, #4]
 8014de0:	2001      	movs	r0, #1
 8014de2:	f7fe fe19 	bl	8013a18 <memp_free>
        }
      }
      return ERR_OK;
 8014de6:	2300      	movs	r3, #0
 8014de8:	e05a      	b.n	8014ea0 <tcp_close_shutdown+0x1b4>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	7d1b      	ldrb	r3, [r3, #20]
 8014dee:	2b02      	cmp	r3, #2
 8014df0:	d03d      	beq.n	8014e6e <tcp_close_shutdown+0x182>
 8014df2:	2b02      	cmp	r3, #2
 8014df4:	dc4e      	bgt.n	8014e94 <tcp_close_shutdown+0x1a8>
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d002      	beq.n	8014e00 <tcp_close_shutdown+0x114>
 8014dfa:	2b01      	cmp	r3, #1
 8014dfc:	d02b      	beq.n	8014e56 <tcp_close_shutdown+0x16a>
 8014dfe:	e049      	b.n	8014e94 <tcp_close_shutdown+0x1a8>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	8adb      	ldrh	r3, [r3, #22]
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d021      	beq.n	8014e4c <tcp_close_shutdown+0x160>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8014e08:	4b2e      	ldr	r3, [pc, #184]	@ (8014ec4 <tcp_close_shutdown+0x1d8>)
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	687a      	ldr	r2, [r7, #4]
 8014e0e:	429a      	cmp	r2, r3
 8014e10:	d105      	bne.n	8014e1e <tcp_close_shutdown+0x132>
 8014e12:	4b2c      	ldr	r3, [pc, #176]	@ (8014ec4 <tcp_close_shutdown+0x1d8>)
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	68db      	ldr	r3, [r3, #12]
 8014e18:	4a2a      	ldr	r2, [pc, #168]	@ (8014ec4 <tcp_close_shutdown+0x1d8>)
 8014e1a:	6013      	str	r3, [r2, #0]
 8014e1c:	e013      	b.n	8014e46 <tcp_close_shutdown+0x15a>
 8014e1e:	4b29      	ldr	r3, [pc, #164]	@ (8014ec4 <tcp_close_shutdown+0x1d8>)
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	60bb      	str	r3, [r7, #8]
 8014e24:	e00c      	b.n	8014e40 <tcp_close_shutdown+0x154>
 8014e26:	68bb      	ldr	r3, [r7, #8]
 8014e28:	68db      	ldr	r3, [r3, #12]
 8014e2a:	687a      	ldr	r2, [r7, #4]
 8014e2c:	429a      	cmp	r2, r3
 8014e2e:	d104      	bne.n	8014e3a <tcp_close_shutdown+0x14e>
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	68da      	ldr	r2, [r3, #12]
 8014e34:	68bb      	ldr	r3, [r7, #8]
 8014e36:	60da      	str	r2, [r3, #12]
 8014e38:	e005      	b.n	8014e46 <tcp_close_shutdown+0x15a>
 8014e3a:	68bb      	ldr	r3, [r7, #8]
 8014e3c:	68db      	ldr	r3, [r3, #12]
 8014e3e:	60bb      	str	r3, [r7, #8]
 8014e40:	68bb      	ldr	r3, [r7, #8]
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d1ef      	bne.n	8014e26 <tcp_close_shutdown+0x13a>
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	2200      	movs	r2, #0
 8014e4a:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8014e4c:	6879      	ldr	r1, [r7, #4]
 8014e4e:	2001      	movs	r0, #1
 8014e50:	f7fe fde2 	bl	8013a18 <memp_free>
    break;
 8014e54:	e023      	b.n	8014e9e <tcp_close_shutdown+0x1b2>
  case LISTEN:
    tcp_listen_closed(pcb);
 8014e56:	6878      	ldr	r0, [r7, #4]
 8014e58:	f7ff ff10 	bl	8014c7c <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8014e5c:	6879      	ldr	r1, [r7, #4]
 8014e5e:	481a      	ldr	r0, [pc, #104]	@ (8014ec8 <tcp_close_shutdown+0x1dc>)
 8014e60:	f001 fa34 	bl	80162cc <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8014e64:	6879      	ldr	r1, [r7, #4]
 8014e66:	2002      	movs	r0, #2
 8014e68:	f7fe fdd6 	bl	8013a18 <memp_free>
    break;
 8014e6c:	e017      	b.n	8014e9e <tcp_close_shutdown+0x1b2>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8014e6e:	6879      	ldr	r1, [r7, #4]
 8014e70:	4810      	ldr	r0, [pc, #64]	@ (8014eb4 <tcp_close_shutdown+0x1c8>)
 8014e72:	f001 fa2b 	bl	80162cc <tcp_pcb_remove>
 8014e76:	4b10      	ldr	r3, [pc, #64]	@ (8014eb8 <tcp_close_shutdown+0x1cc>)
 8014e78:	2201      	movs	r2, #1
 8014e7a:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8014e7c:	6879      	ldr	r1, [r7, #4]
 8014e7e:	2001      	movs	r0, #1
 8014e80:	f7fe fdca 	bl	8013a18 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
 8014e84:	4b11      	ldr	r3, [pc, #68]	@ (8014ecc <tcp_close_shutdown+0x1e0>)
 8014e86:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8014e8a:	3301      	adds	r3, #1
 8014e8c:	4a0f      	ldr	r2, [pc, #60]	@ (8014ecc <tcp_close_shutdown+0x1e0>)
 8014e8e:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
    break;
 8014e92:	e004      	b.n	8014e9e <tcp_close_shutdown+0x1b2>
  default:
    return tcp_close_shutdown_fin(pcb);
 8014e94:	6878      	ldr	r0, [r7, #4]
 8014e96:	f000 f81b 	bl	8014ed0 <tcp_close_shutdown_fin>
 8014e9a:	4603      	mov	r3, r0
 8014e9c:	e000      	b.n	8014ea0 <tcp_close_shutdown+0x1b4>
  }
  return ERR_OK;
 8014e9e:	2300      	movs	r3, #0
}
 8014ea0:	4618      	mov	r0, r3
 8014ea2:	3710      	adds	r7, #16
 8014ea4:	46bd      	mov	sp, r7
 8014ea6:	bdb0      	pop	{r4, r5, r7, pc}
 8014ea8:	080246a0 	.word	0x080246a0
 8014eac:	0802471c 	.word	0x0802471c
 8014eb0:	080246dc 	.word	0x080246dc
 8014eb4:	2000dd28 	.word	0x2000dd28
 8014eb8:	2000dd30 	.word	0x2000dd30
 8014ebc:	2000dd2c 	.word	0x2000dd2c
 8014ec0:	2000dd68 	.word	0x2000dd68
 8014ec4:	2000dd20 	.word	0x2000dd20
 8014ec8:	2000dd24 	.word	0x2000dd24
 8014ecc:	2000db84 	.word	0x2000db84

08014ed0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8014ed0:	b580      	push	{r7, lr}
 8014ed2:	b084      	sub	sp, #16
 8014ed4:	af00      	add	r7, sp, #0
 8014ed6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d106      	bne.n	8014eec <tcp_close_shutdown_fin+0x1c>
 8014ede:	4b38      	ldr	r3, [pc, #224]	@ (8014fc0 <tcp_close_shutdown_fin+0xf0>)
 8014ee0:	f240 124d 	movw	r2, #333	@ 0x14d
 8014ee4:	4937      	ldr	r1, [pc, #220]	@ (8014fc4 <tcp_close_shutdown_fin+0xf4>)
 8014ee6:	4838      	ldr	r0, [pc, #224]	@ (8014fc8 <tcp_close_shutdown_fin+0xf8>)
 8014ee8:	f00b fada 	bl	80204a0 <iprintf>

  switch (pcb->state) {
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	7d1b      	ldrb	r3, [r3, #20]
 8014ef0:	2b07      	cmp	r3, #7
 8014ef2:	d02e      	beq.n	8014f52 <tcp_close_shutdown_fin+0x82>
 8014ef4:	2b07      	cmp	r3, #7
 8014ef6:	dc40      	bgt.n	8014f7a <tcp_close_shutdown_fin+0xaa>
 8014ef8:	2b03      	cmp	r3, #3
 8014efa:	d002      	beq.n	8014f02 <tcp_close_shutdown_fin+0x32>
 8014efc:	2b04      	cmp	r3, #4
 8014efe:	d014      	beq.n	8014f2a <tcp_close_shutdown_fin+0x5a>
 8014f00:	e03b      	b.n	8014f7a <tcp_close_shutdown_fin+0xaa>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 8014f02:	6878      	ldr	r0, [r7, #4]
 8014f04:	f003 fe06 	bl	8018b14 <tcp_send_fin>
 8014f08:	4603      	mov	r3, r0
 8014f0a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8014f0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d134      	bne.n	8014f7e <tcp_close_shutdown_fin+0xae>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
 8014f14:	4b2d      	ldr	r3, [pc, #180]	@ (8014fcc <tcp_close_shutdown_fin+0xfc>)
 8014f16:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8014f1a:	3301      	adds	r3, #1
 8014f1c:	4a2b      	ldr	r2, [pc, #172]	@ (8014fcc <tcp_close_shutdown_fin+0xfc>)
 8014f1e:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
      pcb->state = FIN_WAIT_1;
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	2205      	movs	r2, #5
 8014f26:	751a      	strb	r2, [r3, #20]
    }
    break;
 8014f28:	e029      	b.n	8014f7e <tcp_close_shutdown_fin+0xae>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 8014f2a:	6878      	ldr	r0, [r7, #4]
 8014f2c:	f003 fdf2 	bl	8018b14 <tcp_send_fin>
 8014f30:	4603      	mov	r3, r0
 8014f32:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8014f34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d122      	bne.n	8014f82 <tcp_close_shutdown_fin+0xb2>
      MIB2_STATS_INC(mib2.tcpestabresets);
 8014f3c:	4b23      	ldr	r3, [pc, #140]	@ (8014fcc <tcp_close_shutdown_fin+0xfc>)
 8014f3e:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8014f42:	3301      	adds	r3, #1
 8014f44:	4a21      	ldr	r2, [pc, #132]	@ (8014fcc <tcp_close_shutdown_fin+0xfc>)
 8014f46:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
      pcb->state = FIN_WAIT_1;
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	2205      	movs	r2, #5
 8014f4e:	751a      	strb	r2, [r3, #20]
    }
    break;
 8014f50:	e017      	b.n	8014f82 <tcp_close_shutdown_fin+0xb2>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8014f52:	6878      	ldr	r0, [r7, #4]
 8014f54:	f003 fdde 	bl	8018b14 <tcp_send_fin>
 8014f58:	4603      	mov	r3, r0
 8014f5a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8014f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d110      	bne.n	8014f86 <tcp_close_shutdown_fin+0xb6>
      MIB2_STATS_INC(mib2.tcpestabresets);
 8014f64:	4b19      	ldr	r3, [pc, #100]	@ (8014fcc <tcp_close_shutdown_fin+0xfc>)
 8014f66:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8014f6a:	3301      	adds	r3, #1
 8014f6c:	4a17      	ldr	r2, [pc, #92]	@ (8014fcc <tcp_close_shutdown_fin+0xfc>)
 8014f6e:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
      pcb->state = LAST_ACK;
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	2209      	movs	r2, #9
 8014f76:	751a      	strb	r2, [r3, #20]
    }
    break;
 8014f78:	e005      	b.n	8014f86 <tcp_close_shutdown_fin+0xb6>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 8014f7a:	2300      	movs	r3, #0
 8014f7c:	e01c      	b.n	8014fb8 <tcp_close_shutdown_fin+0xe8>
    break;
 8014f7e:	bf00      	nop
 8014f80:	e002      	b.n	8014f88 <tcp_close_shutdown_fin+0xb8>
    break;
 8014f82:	bf00      	nop
 8014f84:	e000      	b.n	8014f88 <tcp_close_shutdown_fin+0xb8>
    break;
 8014f86:	bf00      	nop
  }

  if (err == ERR_OK) {
 8014f88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d103      	bne.n	8014f98 <tcp_close_shutdown_fin+0xc8>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8014f90:	6878      	ldr	r0, [r7, #4]
 8014f92:	f004 fc47 	bl	8019824 <tcp_output>
 8014f96:	e00d      	b.n	8014fb4 <tcp_close_shutdown_fin+0xe4>
  } else if (err == ERR_MEM) {
 8014f98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014fa0:	d108      	bne.n	8014fb4 <tcp_close_shutdown_fin+0xe4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	7e9b      	ldrb	r3, [r3, #26]
 8014fa6:	f043 0308 	orr.w	r3, r3, #8
 8014faa:	b2da      	uxtb	r2, r3
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8014fb0:	2300      	movs	r3, #0
 8014fb2:	e001      	b.n	8014fb8 <tcp_close_shutdown_fin+0xe8>
  }
  return err;
 8014fb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014fb8:	4618      	mov	r0, r3
 8014fba:	3710      	adds	r7, #16
 8014fbc:	46bd      	mov	sp, r7
 8014fbe:	bd80      	pop	{r7, pc}
 8014fc0:	080246a0 	.word	0x080246a0
 8014fc4:	080246d0 	.word	0x080246d0
 8014fc8:	080246dc 	.word	0x080246dc
 8014fcc:	2000db84 	.word	0x2000db84

08014fd0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8014fd0:	b580      	push	{r7, lr}
 8014fd2:	b082      	sub	sp, #8
 8014fd4:	af00      	add	r7, sp, #0
 8014fd6:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	7d1b      	ldrb	r3, [r3, #20]
 8014fdc:	2b01      	cmp	r3, #1
 8014fde:	d006      	beq.n	8014fee <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	7e9b      	ldrb	r3, [r3, #26]
 8014fe4:	f043 0310 	orr.w	r3, r3, #16
 8014fe8:	b2da      	uxtb	r2, r3
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8014fee:	2101      	movs	r1, #1
 8014ff0:	6878      	ldr	r0, [r7, #4]
 8014ff2:	f7ff fe7b 	bl	8014cec <tcp_close_shutdown>
 8014ff6:	4603      	mov	r3, r0
}
 8014ff8:	4618      	mov	r0, r3
 8014ffa:	3708      	adds	r7, #8
 8014ffc:	46bd      	mov	sp, r7
 8014ffe:	bd80      	pop	{r7, pc}

08015000 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8015000:	b580      	push	{r7, lr}
 8015002:	b08c      	sub	sp, #48	@ 0x30
 8015004:	af02      	add	r7, sp, #8
 8015006:	6078      	str	r0, [r7, #4]
 8015008:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	7d1b      	ldrb	r3, [r3, #20]
 801500e:	2b01      	cmp	r3, #1
 8015010:	d106      	bne.n	8015020 <tcp_abandon+0x20>
 8015012:	4b4d      	ldr	r3, [pc, #308]	@ (8015148 <tcp_abandon+0x148>)
 8015014:	f240 12df 	movw	r2, #479	@ 0x1df
 8015018:	494c      	ldr	r1, [pc, #304]	@ (801514c <tcp_abandon+0x14c>)
 801501a:	484d      	ldr	r0, [pc, #308]	@ (8015150 <tcp_abandon+0x150>)
 801501c:	f00b fa40 	bl	80204a0 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	7d1b      	ldrb	r3, [r3, #20]
 8015024:	2b0a      	cmp	r3, #10
 8015026:	d108      	bne.n	801503a <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8015028:	6879      	ldr	r1, [r7, #4]
 801502a:	484a      	ldr	r0, [pc, #296]	@ (8015154 <tcp_abandon+0x154>)
 801502c:	f001 f94e 	bl	80162cc <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8015030:	6879      	ldr	r1, [r7, #4]
 8015032:	2001      	movs	r0, #1
 8015034:	f7fe fcf0 	bl	8013a18 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 8015038:	e081      	b.n	801513e <tcp_abandon+0x13e>
    int send_rst = 0;
 801503a:	2300      	movs	r3, #0
 801503c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 801503e:	2300      	movs	r3, #0
 8015040:	847b      	strh	r3, [r7, #34]	@ 0x22
    seqno = pcb->snd_nxt;
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015046:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801504c:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015054:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	691b      	ldr	r3, [r3, #16]
 801505a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	7d1b      	ldrb	r3, [r3, #20]
 8015060:	2b00      	cmp	r3, #0
 8015062:	d126      	bne.n	80150b2 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	8adb      	ldrh	r3, [r3, #22]
 8015068:	2b00      	cmp	r3, #0
 801506a:	d02e      	beq.n	80150ca <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801506c:	4b3a      	ldr	r3, [pc, #232]	@ (8015158 <tcp_abandon+0x158>)
 801506e:	681b      	ldr	r3, [r3, #0]
 8015070:	687a      	ldr	r2, [r7, #4]
 8015072:	429a      	cmp	r2, r3
 8015074:	d105      	bne.n	8015082 <tcp_abandon+0x82>
 8015076:	4b38      	ldr	r3, [pc, #224]	@ (8015158 <tcp_abandon+0x158>)
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	68db      	ldr	r3, [r3, #12]
 801507c:	4a36      	ldr	r2, [pc, #216]	@ (8015158 <tcp_abandon+0x158>)
 801507e:	6013      	str	r3, [r2, #0]
 8015080:	e013      	b.n	80150aa <tcp_abandon+0xaa>
 8015082:	4b35      	ldr	r3, [pc, #212]	@ (8015158 <tcp_abandon+0x158>)
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	61fb      	str	r3, [r7, #28]
 8015088:	e00c      	b.n	80150a4 <tcp_abandon+0xa4>
 801508a:	69fb      	ldr	r3, [r7, #28]
 801508c:	68db      	ldr	r3, [r3, #12]
 801508e:	687a      	ldr	r2, [r7, #4]
 8015090:	429a      	cmp	r2, r3
 8015092:	d104      	bne.n	801509e <tcp_abandon+0x9e>
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	68da      	ldr	r2, [r3, #12]
 8015098:	69fb      	ldr	r3, [r7, #28]
 801509a:	60da      	str	r2, [r3, #12]
 801509c:	e005      	b.n	80150aa <tcp_abandon+0xaa>
 801509e:	69fb      	ldr	r3, [r7, #28]
 80150a0:	68db      	ldr	r3, [r3, #12]
 80150a2:	61fb      	str	r3, [r7, #28]
 80150a4:	69fb      	ldr	r3, [r7, #28]
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d1ef      	bne.n	801508a <tcp_abandon+0x8a>
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	2200      	movs	r2, #0
 80150ae:	60da      	str	r2, [r3, #12]
 80150b0:	e00b      	b.n	80150ca <tcp_abandon+0xca>
      send_rst = reset;
 80150b2:	683b      	ldr	r3, [r7, #0]
 80150b4:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	8adb      	ldrh	r3, [r3, #22]
 80150ba:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80150bc:	6879      	ldr	r1, [r7, #4]
 80150be:	4827      	ldr	r0, [pc, #156]	@ (801515c <tcp_abandon+0x15c>)
 80150c0:	f001 f904 	bl	80162cc <tcp_pcb_remove>
 80150c4:	4b26      	ldr	r3, [pc, #152]	@ (8015160 <tcp_abandon+0x160>)
 80150c6:	2201      	movs	r2, #1
 80150c8:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d004      	beq.n	80150dc <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80150d6:	4618      	mov	r0, r3
 80150d8:	f000 fe19 	bl	8015d0e <tcp_segs_free>
    if (pcb->unsent != NULL) {
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d004      	beq.n	80150ee <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80150e8:	4618      	mov	r0, r3
 80150ea:	f000 fe10 	bl	8015d0e <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d004      	beq.n	8015100 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80150fa:	4618      	mov	r0, r3
 80150fc:	f000 fe07 	bl	8015d0e <tcp_segs_free>
    if (send_rst) {
 8015100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015102:	2b00      	cmp	r3, #0
 8015104:	d00c      	beq.n	8015120 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8015106:	687a      	ldr	r2, [r7, #4]
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	1d19      	adds	r1, r3, #4
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	8b1b      	ldrh	r3, [r3, #24]
 8015110:	9301      	str	r3, [sp, #4]
 8015112:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015114:	9300      	str	r3, [sp, #0]
 8015116:	460b      	mov	r3, r1
 8015118:	6979      	ldr	r1, [r7, #20]
 801511a:	69b8      	ldr	r0, [r7, #24]
 801511c:	f004 fe1a 	bl	8019d54 <tcp_rst>
    last_state = pcb->state;
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	7d1b      	ldrb	r3, [r3, #20]
 8015124:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 8015126:	6879      	ldr	r1, [r7, #4]
 8015128:	2001      	movs	r0, #1
 801512a:	f7fe fc75 	bl	8013a18 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801512e:	693b      	ldr	r3, [r7, #16]
 8015130:	2b00      	cmp	r3, #0
 8015132:	d004      	beq.n	801513e <tcp_abandon+0x13e>
 8015134:	693b      	ldr	r3, [r7, #16]
 8015136:	f06f 010c 	mvn.w	r1, #12
 801513a:	68f8      	ldr	r0, [r7, #12]
 801513c:	4798      	blx	r3
}
 801513e:	bf00      	nop
 8015140:	3728      	adds	r7, #40	@ 0x28
 8015142:	46bd      	mov	sp, r7
 8015144:	bd80      	pop	{r7, pc}
 8015146:	bf00      	nop
 8015148:	080246a0 	.word	0x080246a0
 801514c:	08024738 	.word	0x08024738
 8015150:	080246dc 	.word	0x080246dc
 8015154:	2000dd2c 	.word	0x2000dd2c
 8015158:	2000dd20 	.word	0x2000dd20
 801515c:	2000dd28 	.word	0x2000dd28
 8015160:	2000dd30 	.word	0x2000dd30

08015164 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8015164:	b580      	push	{r7, lr}
 8015166:	b082      	sub	sp, #8
 8015168:	af00      	add	r7, sp, #0
 801516a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801516c:	2101      	movs	r1, #1
 801516e:	6878      	ldr	r0, [r7, #4]
 8015170:	f7ff ff46 	bl	8015000 <tcp_abandon>
}
 8015174:	bf00      	nop
 8015176:	3708      	adds	r7, #8
 8015178:	46bd      	mov	sp, r7
 801517a:	bd80      	pop	{r7, pc}

0801517c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801517c:	b580      	push	{r7, lr}
 801517e:	b088      	sub	sp, #32
 8015180:	af00      	add	r7, sp, #0
 8015182:	60f8      	str	r0, [r7, #12]
 8015184:	60b9      	str	r1, [r7, #8]
 8015186:	4613      	mov	r3, r2
 8015188:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801518a:	2304      	movs	r3, #4
 801518c:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801518e:	68bb      	ldr	r3, [r7, #8]
 8015190:	2b00      	cmp	r3, #0
 8015192:	d101      	bne.n	8015198 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8015194:	4b3c      	ldr	r3, [pc, #240]	@ (8015288 <tcp_bind+0x10c>)
 8015196:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	2b00      	cmp	r3, #0
 801519c:	d002      	beq.n	80151a4 <tcp_bind+0x28>
 801519e:	68bb      	ldr	r3, [r7, #8]
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d102      	bne.n	80151aa <tcp_bind+0x2e>
    return ERR_VAL;
 80151a4:	f06f 0305 	mvn.w	r3, #5
 80151a8:	e06a      	b.n	8015280 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	7d1b      	ldrb	r3, [r3, #20]
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d009      	beq.n	80151c6 <tcp_bind+0x4a>
 80151b2:	4b36      	ldr	r3, [pc, #216]	@ (801528c <tcp_bind+0x110>)
 80151b4:	f44f 7211 	mov.w	r2, #580	@ 0x244
 80151b8:	4935      	ldr	r1, [pc, #212]	@ (8015290 <tcp_bind+0x114>)
 80151ba:	4836      	ldr	r0, [pc, #216]	@ (8015294 <tcp_bind+0x118>)
 80151bc:	f00b f970 	bl	80204a0 <iprintf>
 80151c0:	f06f 0305 	mvn.w	r3, #5
 80151c4:	e05c      	b.n	8015280 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 80151c6:	88fb      	ldrh	r3, [r7, #6]
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d109      	bne.n	80151e0 <tcp_bind+0x64>
    port = tcp_new_port();
 80151cc:	f000 f9ca 	bl	8015564 <tcp_new_port>
 80151d0:	4603      	mov	r3, r0
 80151d2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80151d4:	88fb      	ldrh	r3, [r7, #6]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d135      	bne.n	8015246 <tcp_bind+0xca>
      return ERR_BUF;
 80151da:	f06f 0301 	mvn.w	r3, #1
 80151de:	e04f      	b.n	8015280 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80151e0:	2300      	movs	r3, #0
 80151e2:	61fb      	str	r3, [r7, #28]
 80151e4:	e02b      	b.n	801523e <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80151e6:	4a2c      	ldr	r2, [pc, #176]	@ (8015298 <tcp_bind+0x11c>)
 80151e8:	69fb      	ldr	r3, [r7, #28]
 80151ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80151ee:	681b      	ldr	r3, [r3, #0]
 80151f0:	61bb      	str	r3, [r7, #24]
 80151f2:	e01e      	b.n	8015232 <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 80151f4:	69bb      	ldr	r3, [r7, #24]
 80151f6:	8adb      	ldrh	r3, [r3, #22]
 80151f8:	88fa      	ldrh	r2, [r7, #6]
 80151fa:	429a      	cmp	r2, r3
 80151fc:	d116      	bne.n	801522c <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80151fe:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8015200:	2b00      	cmp	r3, #0
 8015202:	d010      	beq.n	8015226 <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 8015204:	69bb      	ldr	r3, [r7, #24]
 8015206:	681b      	ldr	r3, [r3, #0]
 8015208:	2b00      	cmp	r3, #0
 801520a:	d00c      	beq.n	8015226 <tcp_bind+0xaa>
 801520c:	68bb      	ldr	r3, [r7, #8]
 801520e:	2b00      	cmp	r3, #0
 8015210:	d009      	beq.n	8015226 <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 8015212:	68bb      	ldr	r3, [r7, #8]
 8015214:	681b      	ldr	r3, [r3, #0]
 8015216:	2b00      	cmp	r3, #0
 8015218:	d005      	beq.n	8015226 <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801521a:	69bb      	ldr	r3, [r7, #24]
 801521c:	681a      	ldr	r2, [r3, #0]
 801521e:	68bb      	ldr	r3, [r7, #8]
 8015220:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8015222:	429a      	cmp	r2, r3
 8015224:	d102      	bne.n	801522c <tcp_bind+0xb0>
              return ERR_USE;
 8015226:	f06f 0307 	mvn.w	r3, #7
 801522a:	e029      	b.n	8015280 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801522c:	69bb      	ldr	r3, [r7, #24]
 801522e:	68db      	ldr	r3, [r3, #12]
 8015230:	61bb      	str	r3, [r7, #24]
 8015232:	69bb      	ldr	r3, [r7, #24]
 8015234:	2b00      	cmp	r3, #0
 8015236:	d1dd      	bne.n	80151f4 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 8015238:	69fb      	ldr	r3, [r7, #28]
 801523a:	3301      	adds	r3, #1
 801523c:	61fb      	str	r3, [r7, #28]
 801523e:	69fa      	ldr	r2, [r7, #28]
 8015240:	697b      	ldr	r3, [r7, #20]
 8015242:	429a      	cmp	r2, r3
 8015244:	dbcf      	blt.n	80151e6 <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 8015246:	68bb      	ldr	r3, [r7, #8]
 8015248:	2b00      	cmp	r3, #0
 801524a:	d00c      	beq.n	8015266 <tcp_bind+0xea>
 801524c:	68bb      	ldr	r3, [r7, #8]
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	2b00      	cmp	r3, #0
 8015252:	d008      	beq.n	8015266 <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8015254:	68bb      	ldr	r3, [r7, #8]
 8015256:	2b00      	cmp	r3, #0
 8015258:	d002      	beq.n	8015260 <tcp_bind+0xe4>
 801525a:	68bb      	ldr	r3, [r7, #8]
 801525c:	681b      	ldr	r3, [r3, #0]
 801525e:	e000      	b.n	8015262 <tcp_bind+0xe6>
 8015260:	2300      	movs	r3, #0
 8015262:	68fa      	ldr	r2, [r7, #12]
 8015264:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	88fa      	ldrh	r2, [r7, #6]
 801526a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801526c:	4b0b      	ldr	r3, [pc, #44]	@ (801529c <tcp_bind+0x120>)
 801526e:	681a      	ldr	r2, [r3, #0]
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	60da      	str	r2, [r3, #12]
 8015274:	4a09      	ldr	r2, [pc, #36]	@ (801529c <tcp_bind+0x120>)
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	6013      	str	r3, [r2, #0]
 801527a:	f004 ffe3 	bl	801a244 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 801527e:	2300      	movs	r3, #0
}
 8015280:	4618      	mov	r0, r3
 8015282:	3720      	adds	r7, #32
 8015284:	46bd      	mov	sp, r7
 8015286:	bd80      	pop	{r7, pc}
 8015288:	0802f050 	.word	0x0802f050
 801528c:	080246a0 	.word	0x080246a0
 8015290:	0802476c 	.word	0x0802476c
 8015294:	080246dc 	.word	0x080246dc
 8015298:	0802f018 	.word	0x0802f018
 801529c:	2000dd20 	.word	0x2000dd20

080152a0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80152a0:	b580      	push	{r7, lr}
 80152a2:	b084      	sub	sp, #16
 80152a4:	af00      	add	r7, sp, #0
 80152a6:	60f8      	str	r0, [r7, #12]
 80152a8:	60b9      	str	r1, [r7, #8]
 80152aa:	4613      	mov	r3, r2
 80152ac:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 80152ae:	68b8      	ldr	r0, [r7, #8]
 80152b0:	f7ff ff58 	bl	8015164 <tcp_abort>

  return ERR_ABRT;
 80152b4:	f06f 030c 	mvn.w	r3, #12
}
 80152b8:	4618      	mov	r0, r3
 80152ba:	3710      	adds	r7, #16
 80152bc:	46bd      	mov	sp, r7
 80152be:	bd80      	pop	{r7, pc}

080152c0 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 80152c0:	b580      	push	{r7, lr}
 80152c2:	b082      	sub	sp, #8
 80152c4:	af00      	add	r7, sp, #0
 80152c6:	6078      	str	r0, [r7, #4]
 80152c8:	460b      	mov	r3, r1
 80152ca:	70fb      	strb	r3, [r7, #3]
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 80152cc:	78fb      	ldrb	r3, [r7, #3]
 80152ce:	2200      	movs	r2, #0
 80152d0:	4619      	mov	r1, r3
 80152d2:	6878      	ldr	r0, [r7, #4]
 80152d4:	f000 f806 	bl	80152e4 <tcp_listen_with_backlog_and_err>
 80152d8:	4603      	mov	r3, r0
}
 80152da:	4618      	mov	r0, r3
 80152dc:	3708      	adds	r7, #8
 80152de:	46bd      	mov	sp, r7
 80152e0:	bd80      	pop	{r7, pc}
	...

080152e4 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80152e4:	b580      	push	{r7, lr}
 80152e6:	b088      	sub	sp, #32
 80152e8:	af00      	add	r7, sp, #0
 80152ea:	60f8      	str	r0, [r7, #12]
 80152ec:	460b      	mov	r3, r1
 80152ee:	607a      	str	r2, [r7, #4]
 80152f0:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80152f2:	2300      	movs	r3, #0
 80152f4:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80152f6:	68fb      	ldr	r3, [r7, #12]
 80152f8:	7d1b      	ldrb	r3, [r3, #20]
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d009      	beq.n	8015312 <tcp_listen_with_backlog_and_err+0x2e>
 80152fe:	4b3f      	ldr	r3, [pc, #252]	@ (80153fc <tcp_listen_with_backlog_and_err+0x118>)
 8015300:	f44f 722d 	mov.w	r2, #692	@ 0x2b4
 8015304:	493e      	ldr	r1, [pc, #248]	@ (8015400 <tcp_listen_with_backlog_and_err+0x11c>)
 8015306:	483f      	ldr	r0, [pc, #252]	@ (8015404 <tcp_listen_with_backlog_and_err+0x120>)
 8015308:	f00b f8ca 	bl	80204a0 <iprintf>
 801530c:	23f1      	movs	r3, #241	@ 0xf1
 801530e:	76fb      	strb	r3, [r7, #27]
 8015310:	e069      	b.n	80153e6 <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	7d1b      	ldrb	r3, [r3, #20]
 8015316:	2b01      	cmp	r3, #1
 8015318:	d104      	bne.n	8015324 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 801531e:	23f7      	movs	r3, #247	@ 0xf7
 8015320:	76fb      	strb	r3, [r7, #27]
    goto done;
 8015322:	e060      	b.n	80153e6 <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8015324:	2002      	movs	r0, #2
 8015326:	f7fe fb25 	bl	8013974 <memp_malloc>
 801532a:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801532c:	69fb      	ldr	r3, [r7, #28]
 801532e:	2b00      	cmp	r3, #0
 8015330:	d102      	bne.n	8015338 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 8015332:	23ff      	movs	r3, #255	@ 0xff
 8015334:	76fb      	strb	r3, [r7, #27]
    goto done;
 8015336:	e056      	b.n	80153e6 <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	691a      	ldr	r2, [r3, #16]
 801533c:	69fb      	ldr	r3, [r7, #28]
 801533e:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	8ada      	ldrh	r2, [r3, #22]
 8015344:	69fb      	ldr	r3, [r7, #28]
 8015346:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8015348:	69fb      	ldr	r3, [r7, #28]
 801534a:	2201      	movs	r2, #1
 801534c:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 801534e:	68fb      	ldr	r3, [r7, #12]
 8015350:	7d5a      	ldrb	r2, [r3, #21]
 8015352:	69fb      	ldr	r3, [r7, #28]
 8015354:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	7a1a      	ldrb	r2, [r3, #8]
 801535a:	69fb      	ldr	r3, [r7, #28]
 801535c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	7a9a      	ldrb	r2, [r3, #10]
 8015362:	69fb      	ldr	r3, [r7, #28]
 8015364:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	7a5a      	ldrb	r2, [r3, #9]
 801536a:	69fb      	ldr	r3, [r7, #28]
 801536c:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	681a      	ldr	r2, [r3, #0]
 8015372:	69fb      	ldr	r3, [r7, #28]
 8015374:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	8adb      	ldrh	r3, [r3, #22]
 801537a:	2b00      	cmp	r3, #0
 801537c:	d021      	beq.n	80153c2 <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801537e:	4b22      	ldr	r3, [pc, #136]	@ (8015408 <tcp_listen_with_backlog_and_err+0x124>)
 8015380:	681b      	ldr	r3, [r3, #0]
 8015382:	68fa      	ldr	r2, [r7, #12]
 8015384:	429a      	cmp	r2, r3
 8015386:	d105      	bne.n	8015394 <tcp_listen_with_backlog_and_err+0xb0>
 8015388:	4b1f      	ldr	r3, [pc, #124]	@ (8015408 <tcp_listen_with_backlog_and_err+0x124>)
 801538a:	681b      	ldr	r3, [r3, #0]
 801538c:	68db      	ldr	r3, [r3, #12]
 801538e:	4a1e      	ldr	r2, [pc, #120]	@ (8015408 <tcp_listen_with_backlog_and_err+0x124>)
 8015390:	6013      	str	r3, [r2, #0]
 8015392:	e013      	b.n	80153bc <tcp_listen_with_backlog_and_err+0xd8>
 8015394:	4b1c      	ldr	r3, [pc, #112]	@ (8015408 <tcp_listen_with_backlog_and_err+0x124>)
 8015396:	681b      	ldr	r3, [r3, #0]
 8015398:	617b      	str	r3, [r7, #20]
 801539a:	e00c      	b.n	80153b6 <tcp_listen_with_backlog_and_err+0xd2>
 801539c:	697b      	ldr	r3, [r7, #20]
 801539e:	68db      	ldr	r3, [r3, #12]
 80153a0:	68fa      	ldr	r2, [r7, #12]
 80153a2:	429a      	cmp	r2, r3
 80153a4:	d104      	bne.n	80153b0 <tcp_listen_with_backlog_and_err+0xcc>
 80153a6:	68fb      	ldr	r3, [r7, #12]
 80153a8:	68da      	ldr	r2, [r3, #12]
 80153aa:	697b      	ldr	r3, [r7, #20]
 80153ac:	60da      	str	r2, [r3, #12]
 80153ae:	e005      	b.n	80153bc <tcp_listen_with_backlog_and_err+0xd8>
 80153b0:	697b      	ldr	r3, [r7, #20]
 80153b2:	68db      	ldr	r3, [r3, #12]
 80153b4:	617b      	str	r3, [r7, #20]
 80153b6:	697b      	ldr	r3, [r7, #20]
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d1ef      	bne.n	801539c <tcp_listen_with_backlog_and_err+0xb8>
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	2200      	movs	r2, #0
 80153c0:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 80153c2:	68f9      	ldr	r1, [r7, #12]
 80153c4:	2001      	movs	r0, #1
 80153c6:	f7fe fb27 	bl	8013a18 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80153ca:	69fb      	ldr	r3, [r7, #28]
 80153cc:	4a0f      	ldr	r2, [pc, #60]	@ (801540c <tcp_listen_with_backlog_and_err+0x128>)
 80153ce:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80153d0:	4b0f      	ldr	r3, [pc, #60]	@ (8015410 <tcp_listen_with_backlog_and_err+0x12c>)
 80153d2:	681a      	ldr	r2, [r3, #0]
 80153d4:	69fb      	ldr	r3, [r7, #28]
 80153d6:	60da      	str	r2, [r3, #12]
 80153d8:	4a0d      	ldr	r2, [pc, #52]	@ (8015410 <tcp_listen_with_backlog_and_err+0x12c>)
 80153da:	69fb      	ldr	r3, [r7, #28]
 80153dc:	6013      	str	r3, [r2, #0]
 80153de:	f004 ff31 	bl	801a244 <tcp_timer_needed>
  res = ERR_OK;
 80153e2:	2300      	movs	r3, #0
 80153e4:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d002      	beq.n	80153f2 <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	7efa      	ldrb	r2, [r7, #27]
 80153f0:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80153f2:	69fb      	ldr	r3, [r7, #28]
}
 80153f4:	4618      	mov	r0, r3
 80153f6:	3720      	adds	r7, #32
 80153f8:	46bd      	mov	sp, r7
 80153fa:	bd80      	pop	{r7, pc}
 80153fc:	080246a0 	.word	0x080246a0
 8015400:	08024794 	.word	0x08024794
 8015404:	080246dc 	.word	0x080246dc
 8015408:	2000dd20 	.word	0x2000dd20
 801540c:	080152a1 	.word	0x080152a1
 8015410:	2000dd24 	.word	0x2000dd24

08015414 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8015414:	b580      	push	{r7, lr}
 8015416:	b084      	sub	sp, #16
 8015418:	af00      	add	r7, sp, #0
 801541a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015420:	687a      	ldr	r2, [r7, #4]
 8015422:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8015424:	4413      	add	r3, r2
 8015426:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801542c:	687a      	ldr	r2, [r7, #4]
 801542e:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8015430:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8015434:	bf28      	it	cs
 8015436:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 801543a:	b292      	uxth	r2, r2
 801543c:	4413      	add	r3, r2
 801543e:	68fa      	ldr	r2, [r7, #12]
 8015440:	1ad3      	subs	r3, r2, r3
 8015442:	2b00      	cmp	r3, #0
 8015444:	db08      	blt.n	8015458 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015452:	68fa      	ldr	r2, [r7, #12]
 8015454:	1ad3      	subs	r3, r2, r3
 8015456:	e020      	b.n	801549a <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015460:	1ad3      	subs	r3, r2, r3
 8015462:	2b00      	cmp	r3, #0
 8015464:	dd03      	ble.n	801546e <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	2200      	movs	r2, #0
 801546a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801546c:	e014      	b.n	8015498 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015476:	1ad3      	subs	r3, r2, r3
 8015478:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801547a:	68bb      	ldr	r3, [r7, #8]
 801547c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015480:	d306      	bcc.n	8015490 <tcp_update_rcv_ann_wnd+0x7c>
 8015482:	4b08      	ldr	r3, [pc, #32]	@ (80154a4 <tcp_update_rcv_ann_wnd+0x90>)
 8015484:	f44f 7242 	mov.w	r2, #776	@ 0x308
 8015488:	4907      	ldr	r1, [pc, #28]	@ (80154a8 <tcp_update_rcv_ann_wnd+0x94>)
 801548a:	4808      	ldr	r0, [pc, #32]	@ (80154ac <tcp_update_rcv_ann_wnd+0x98>)
 801548c:	f00b f808 	bl	80204a0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8015490:	68bb      	ldr	r3, [r7, #8]
 8015492:	b29a      	uxth	r2, r3
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8015498:	2300      	movs	r3, #0
  }
}
 801549a:	4618      	mov	r0, r3
 801549c:	3710      	adds	r7, #16
 801549e:	46bd      	mov	sp, r7
 80154a0:	bd80      	pop	{r7, pc}
 80154a2:	bf00      	nop
 80154a4:	080246a0 	.word	0x080246a0
 80154a8:	080247b8 	.word	0x080247b8
 80154ac:	080246dc 	.word	0x080246dc

080154b0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80154b0:	b580      	push	{r7, lr}
 80154b2:	b084      	sub	sp, #16
 80154b4:	af00      	add	r7, sp, #0
 80154b6:	6078      	str	r0, [r7, #4]
 80154b8:	460b      	mov	r3, r1
 80154ba:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	7d1b      	ldrb	r3, [r3, #20]
 80154c0:	2b01      	cmp	r3, #1
 80154c2:	d106      	bne.n	80154d2 <tcp_recved+0x22>
 80154c4:	4b23      	ldr	r3, [pc, #140]	@ (8015554 <tcp_recved+0xa4>)
 80154c6:	f240 321f 	movw	r2, #799	@ 0x31f
 80154ca:	4923      	ldr	r1, [pc, #140]	@ (8015558 <tcp_recved+0xa8>)
 80154cc:	4823      	ldr	r0, [pc, #140]	@ (801555c <tcp_recved+0xac>)
 80154ce:	f00a ffe7 	bl	80204a0 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80154d6:	887b      	ldrh	r3, [r7, #2]
 80154d8:	4413      	add	r3, r2
 80154da:	b29a      	uxth	r2, r3
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	851a      	strh	r2, [r3, #40]	@ 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80154e4:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80154e8:	d904      	bls.n	80154f4 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80154f0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80154f2:	e017      	b.n	8015524 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80154f8:	2b00      	cmp	r3, #0
 80154fa:	d113      	bne.n	8015524 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	7d1b      	ldrb	r3, [r3, #20]
 8015500:	2b07      	cmp	r3, #7
 8015502:	d003      	beq.n	801550c <tcp_recved+0x5c>
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	7d1b      	ldrb	r3, [r3, #20]
 8015508:	2b09      	cmp	r3, #9
 801550a:	d104      	bne.n	8015516 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8015512:	851a      	strh	r2, [r3, #40]	@ 0x28
 8015514:	e006      	b.n	8015524 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8015516:	4b0f      	ldr	r3, [pc, #60]	@ (8015554 <tcp_recved+0xa4>)
 8015518:	f240 322d 	movw	r2, #813	@ 0x32d
 801551c:	4910      	ldr	r1, [pc, #64]	@ (8015560 <tcp_recved+0xb0>)
 801551e:	480f      	ldr	r0, [pc, #60]	@ (801555c <tcp_recved+0xac>)
 8015520:	f00a ffbe 	bl	80204a0 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8015524:	6878      	ldr	r0, [r7, #4]
 8015526:	f7ff ff75 	bl	8015414 <tcp_update_rcv_ann_wnd>
 801552a:	4603      	mov	r3, r0
 801552c:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801552e:	68fb      	ldr	r3, [r7, #12]
 8015530:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8015534:	db09      	blt.n	801554a <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	7e9b      	ldrb	r3, [r3, #26]
 801553a:	f043 0302 	orr.w	r3, r3, #2
 801553e:	b2da      	uxtb	r2, r3
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8015544:	6878      	ldr	r0, [r7, #4]
 8015546:	f004 f96d 	bl	8019824 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801554a:	bf00      	nop
 801554c:	3710      	adds	r7, #16
 801554e:	46bd      	mov	sp, r7
 8015550:	bd80      	pop	{r7, pc}
 8015552:	bf00      	nop
 8015554:	080246a0 	.word	0x080246a0
 8015558:	080247d4 	.word	0x080247d4
 801555c:	080246dc 	.word	0x080246dc
 8015560:	080247fc 	.word	0x080247fc

08015564 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8015564:	b480      	push	{r7}
 8015566:	b083      	sub	sp, #12
 8015568:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801556a:	2300      	movs	r3, #0
 801556c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 801556e:	4b1d      	ldr	r3, [pc, #116]	@ (80155e4 <tcp_new_port+0x80>)
 8015570:	881b      	ldrh	r3, [r3, #0]
 8015572:	1c5a      	adds	r2, r3, #1
 8015574:	b291      	uxth	r1, r2
 8015576:	4a1b      	ldr	r2, [pc, #108]	@ (80155e4 <tcp_new_port+0x80>)
 8015578:	8011      	strh	r1, [r2, #0]
 801557a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801557e:	4293      	cmp	r3, r2
 8015580:	d103      	bne.n	801558a <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8015582:	4b18      	ldr	r3, [pc, #96]	@ (80155e4 <tcp_new_port+0x80>)
 8015584:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8015588:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801558a:	2300      	movs	r3, #0
 801558c:	71fb      	strb	r3, [r7, #7]
 801558e:	e01e      	b.n	80155ce <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8015590:	79fb      	ldrb	r3, [r7, #7]
 8015592:	4a15      	ldr	r2, [pc, #84]	@ (80155e8 <tcp_new_port+0x84>)
 8015594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015598:	681b      	ldr	r3, [r3, #0]
 801559a:	603b      	str	r3, [r7, #0]
 801559c:	e011      	b.n	80155c2 <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 801559e:	683b      	ldr	r3, [r7, #0]
 80155a0:	8ada      	ldrh	r2, [r3, #22]
 80155a2:	4b10      	ldr	r3, [pc, #64]	@ (80155e4 <tcp_new_port+0x80>)
 80155a4:	881b      	ldrh	r3, [r3, #0]
 80155a6:	429a      	cmp	r2, r3
 80155a8:	d108      	bne.n	80155bc <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80155aa:	88bb      	ldrh	r3, [r7, #4]
 80155ac:	3301      	adds	r3, #1
 80155ae:	80bb      	strh	r3, [r7, #4]
 80155b0:	88bb      	ldrh	r3, [r7, #4]
 80155b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80155b6:	d3da      	bcc.n	801556e <tcp_new_port+0xa>
          return 0;
 80155b8:	2300      	movs	r3, #0
 80155ba:	e00d      	b.n	80155d8 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80155bc:	683b      	ldr	r3, [r7, #0]
 80155be:	68db      	ldr	r3, [r3, #12]
 80155c0:	603b      	str	r3, [r7, #0]
 80155c2:	683b      	ldr	r3, [r7, #0]
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d1ea      	bne.n	801559e <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80155c8:	79fb      	ldrb	r3, [r7, #7]
 80155ca:	3301      	adds	r3, #1
 80155cc:	71fb      	strb	r3, [r7, #7]
 80155ce:	79fb      	ldrb	r3, [r7, #7]
 80155d0:	2b03      	cmp	r3, #3
 80155d2:	d9dd      	bls.n	8015590 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80155d4:	4b03      	ldr	r3, [pc, #12]	@ (80155e4 <tcp_new_port+0x80>)
 80155d6:	881b      	ldrh	r3, [r3, #0]
}
 80155d8:	4618      	mov	r0, r3
 80155da:	370c      	adds	r7, #12
 80155dc:	46bd      	mov	sp, r7
 80155de:	bc80      	pop	{r7}
 80155e0:	4770      	bx	lr
 80155e2:	bf00      	nop
 80155e4:	20000110 	.word	0x20000110
 80155e8:	0802f018 	.word	0x0802f018

080155ec <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80155ec:	b5b0      	push	{r4, r5, r7, lr}
 80155ee:	b08c      	sub	sp, #48	@ 0x30
 80155f0:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80155f2:	2300      	movs	r3, #0
 80155f4:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 80155f6:	4b98      	ldr	r3, [pc, #608]	@ (8015858 <tcp_slowtmr+0x26c>)
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	3301      	adds	r3, #1
 80155fc:	4a96      	ldr	r2, [pc, #600]	@ (8015858 <tcp_slowtmr+0x26c>)
 80155fe:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8015600:	4b96      	ldr	r3, [pc, #600]	@ (801585c <tcp_slowtmr+0x270>)
 8015602:	781b      	ldrb	r3, [r3, #0]
 8015604:	3301      	adds	r3, #1
 8015606:	b2da      	uxtb	r2, r3
 8015608:	4b94      	ldr	r3, [pc, #592]	@ (801585c <tcp_slowtmr+0x270>)
 801560a:	701a      	strb	r2, [r3, #0]
 801560c:	e000      	b.n	8015610 <tcp_slowtmr+0x24>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 801560e:	bf00      	nop
  prev = NULL;
 8015610:	2300      	movs	r3, #0
 8015612:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 8015614:	4b92      	ldr	r3, [pc, #584]	@ (8015860 <tcp_slowtmr+0x274>)
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 801561a:	e227      	b.n	8015a6c <tcp_slowtmr+0x480>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801561c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801561e:	7d1b      	ldrb	r3, [r3, #20]
 8015620:	2b00      	cmp	r3, #0
 8015622:	d106      	bne.n	8015632 <tcp_slowtmr+0x46>
 8015624:	4b8f      	ldr	r3, [pc, #572]	@ (8015864 <tcp_slowtmr+0x278>)
 8015626:	f44f 727c 	mov.w	r2, #1008	@ 0x3f0
 801562a:	498f      	ldr	r1, [pc, #572]	@ (8015868 <tcp_slowtmr+0x27c>)
 801562c:	488f      	ldr	r0, [pc, #572]	@ (801586c <tcp_slowtmr+0x280>)
 801562e:	f00a ff37 	bl	80204a0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8015632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015634:	7d1b      	ldrb	r3, [r3, #20]
 8015636:	2b01      	cmp	r3, #1
 8015638:	d106      	bne.n	8015648 <tcp_slowtmr+0x5c>
 801563a:	4b8a      	ldr	r3, [pc, #552]	@ (8015864 <tcp_slowtmr+0x278>)
 801563c:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8015640:	498b      	ldr	r1, [pc, #556]	@ (8015870 <tcp_slowtmr+0x284>)
 8015642:	488a      	ldr	r0, [pc, #552]	@ (801586c <tcp_slowtmr+0x280>)
 8015644:	f00a ff2c 	bl	80204a0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8015648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801564a:	7d1b      	ldrb	r3, [r3, #20]
 801564c:	2b0a      	cmp	r3, #10
 801564e:	d106      	bne.n	801565e <tcp_slowtmr+0x72>
 8015650:	4b84      	ldr	r3, [pc, #528]	@ (8015864 <tcp_slowtmr+0x278>)
 8015652:	f240 32f2 	movw	r2, #1010	@ 0x3f2
 8015656:	4987      	ldr	r1, [pc, #540]	@ (8015874 <tcp_slowtmr+0x288>)
 8015658:	4884      	ldr	r0, [pc, #528]	@ (801586c <tcp_slowtmr+0x280>)
 801565a:	f00a ff21 	bl	80204a0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801565e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015660:	7f5a      	ldrb	r2, [r3, #29]
 8015662:	4b7e      	ldr	r3, [pc, #504]	@ (801585c <tcp_slowtmr+0x270>)
 8015664:	781b      	ldrb	r3, [r3, #0]
 8015666:	429a      	cmp	r2, r3
 8015668:	d103      	bne.n	8015672 <tcp_slowtmr+0x86>
      pcb = pcb->next;
 801566a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801566c:	68db      	ldr	r3, [r3, #12]
 801566e:	627b      	str	r3, [r7, #36]	@ 0x24
      continue;
 8015670:	e1fc      	b.n	8015a6c <tcp_slowtmr+0x480>
    pcb->last_timer = tcp_timer_ctr;
 8015672:	4b7a      	ldr	r3, [pc, #488]	@ (801585c <tcp_slowtmr+0x270>)
 8015674:	781a      	ldrb	r2, [r3, #0]
 8015676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015678:	775a      	strb	r2, [r3, #29]
    pcb_remove = 0;
 801567a:	2300      	movs	r3, #0
 801567c:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 801567e:	2300      	movs	r3, #0
 8015680:	77bb      	strb	r3, [r7, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8015682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015684:	7d1b      	ldrb	r3, [r3, #20]
 8015686:	2b02      	cmp	r3, #2
 8015688:	d108      	bne.n	801569c <tcp_slowtmr+0xb0>
 801568a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801568c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015690:	2b05      	cmp	r3, #5
 8015692:	d903      	bls.n	801569c <tcp_slowtmr+0xb0>
      ++pcb_remove;
 8015694:	7ffb      	ldrb	r3, [r7, #31]
 8015696:	3301      	adds	r3, #1
 8015698:	77fb      	strb	r3, [r7, #31]
 801569a:	e0a2      	b.n	80157e2 <tcp_slowtmr+0x1f6>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 801569c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801569e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80156a2:	2b0b      	cmp	r3, #11
 80156a4:	d903      	bls.n	80156ae <tcp_slowtmr+0xc2>
      ++pcb_remove;
 80156a6:	7ffb      	ldrb	r3, [r7, #31]
 80156a8:	3301      	adds	r3, #1
 80156aa:	77fb      	strb	r3, [r7, #31]
 80156ac:	e099      	b.n	80157e2 <tcp_slowtmr+0x1f6>
      if (pcb->persist_backoff > 0) {
 80156ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156b0:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d032      	beq.n	801571e <tcp_slowtmr+0x132>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 80156b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156ba:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80156be:	3b01      	subs	r3, #1
 80156c0:	4a6d      	ldr	r2, [pc, #436]	@ (8015878 <tcp_slowtmr+0x28c>)
 80156c2:	5cd3      	ldrb	r3, [r2, r3]
 80156c4:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 80156c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156c8:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 80156cc:	7cfa      	ldrb	r2, [r7, #19]
 80156ce:	429a      	cmp	r2, r3
 80156d0:	d907      	bls.n	80156e2 <tcp_slowtmr+0xf6>
          pcb->persist_cnt++;
 80156d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156d4:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 80156d8:	3301      	adds	r3, #1
 80156da:	b2da      	uxtb	r2, r3
 80156dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156de:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 80156e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156e4:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 80156e8:	7cfa      	ldrb	r2, [r7, #19]
 80156ea:	429a      	cmp	r2, r3
 80156ec:	d879      	bhi.n	80157e2 <tcp_slowtmr+0x1f6>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 80156ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80156f0:	f004 fcde 	bl	801a0b0 <tcp_zero_window_probe>
 80156f4:	4603      	mov	r3, r0
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d173      	bne.n	80157e2 <tcp_slowtmr+0x1f6>
            pcb->persist_cnt = 0;
 80156fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156fc:	2200      	movs	r2, #0
 80156fe:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8015702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015704:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8015708:	2b06      	cmp	r3, #6
 801570a:	d86a      	bhi.n	80157e2 <tcp_slowtmr+0x1f6>
              pcb->persist_backoff++;
 801570c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801570e:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8015712:	3301      	adds	r3, #1
 8015714:	b2da      	uxtb	r2, r3
 8015716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015718:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
 801571c:	e061      	b.n	80157e2 <tcp_slowtmr+0x1f6>
        if (pcb->rtime >= 0) {
 801571e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015720:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015724:	2b00      	cmp	r3, #0
 8015726:	db08      	blt.n	801573a <tcp_slowtmr+0x14e>
          ++pcb->rtime;
 8015728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801572a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801572e:	b29b      	uxth	r3, r3
 8015730:	3301      	adds	r3, #1
 8015732:	b29b      	uxth	r3, r3
 8015734:	b21a      	sxth	r2, r3
 8015736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015738:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 801573a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801573c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801573e:	2b00      	cmp	r3, #0
 8015740:	d04f      	beq.n	80157e2 <tcp_slowtmr+0x1f6>
 8015742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015744:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8015748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801574a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801574e:	429a      	cmp	r2, r3
 8015750:	db47      	blt.n	80157e2 <tcp_slowtmr+0x1f6>
          if (pcb->state != SYN_SENT) {
 8015752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015754:	7d1b      	ldrb	r3, [r3, #20]
 8015756:	2b02      	cmp	r3, #2
 8015758:	d018      	beq.n	801578c <tcp_slowtmr+0x1a0>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 801575a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801575c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015760:	2b0c      	cmp	r3, #12
 8015762:	bf28      	it	cs
 8015764:	230c      	movcs	r3, #12
 8015766:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8015768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801576a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801576e:	10db      	asrs	r3, r3, #3
 8015770:	b21b      	sxth	r3, r3
 8015772:	461a      	mov	r2, r3
 8015774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015776:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801577a:	4413      	add	r3, r2
 801577c:	7dfa      	ldrb	r2, [r7, #23]
 801577e:	493f      	ldr	r1, [pc, #252]	@ (801587c <tcp_slowtmr+0x290>)
 8015780:	5c8a      	ldrb	r2, [r1, r2]
 8015782:	4093      	lsls	r3, r2
 8015784:	b21a      	sxth	r2, r3
 8015786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015788:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
          pcb->rtime = 0;
 801578c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801578e:	2200      	movs	r2, #0
 8015790:	861a      	strh	r2, [r3, #48]	@ 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8015792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015794:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8015798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801579a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801579e:	4293      	cmp	r3, r2
 80157a0:	bf28      	it	cs
 80157a2:	4613      	movcs	r3, r2
 80157a4:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 80157a6:	8abb      	ldrh	r3, [r7, #20]
 80157a8:	085b      	lsrs	r3, r3, #1
 80157aa:	b29a      	uxth	r2, r3
 80157ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157ae:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80157b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157b4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80157b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157ba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80157bc:	005b      	lsls	r3, r3, #1
 80157be:	b29b      	uxth	r3, r3
 80157c0:	429a      	cmp	r2, r3
 80157c2:	d206      	bcs.n	80157d2 <tcp_slowtmr+0x1e6>
            pcb->ssthresh = (pcb->mss << 1);
 80157c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80157c8:	005b      	lsls	r3, r3, #1
 80157ca:	b29a      	uxth	r2, r3
 80157cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157ce:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
          pcb->cwnd = pcb->mss;
 80157d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157d4:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80157d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157d8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
          tcp_rexmit_rto(pcb);
 80157dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80157de:	f004 fb41 	bl	8019e64 <tcp_rexmit_rto>
    if (pcb->state == FIN_WAIT_2) {
 80157e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157e4:	7d1b      	ldrb	r3, [r3, #20]
 80157e6:	2b06      	cmp	r3, #6
 80157e8:	d10f      	bne.n	801580a <tcp_slowtmr+0x21e>
      if (pcb->flags & TF_RXCLOSED) {
 80157ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157ec:	7e9b      	ldrb	r3, [r3, #26]
 80157ee:	f003 0310 	and.w	r3, r3, #16
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d009      	beq.n	801580a <tcp_slowtmr+0x21e>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80157f6:	4b18      	ldr	r3, [pc, #96]	@ (8015858 <tcp_slowtmr+0x26c>)
 80157f8:	681a      	ldr	r2, [r3, #0]
 80157fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157fc:	6a1b      	ldr	r3, [r3, #32]
 80157fe:	1ad3      	subs	r3, r2, r3
 8015800:	2b28      	cmp	r3, #40	@ 0x28
 8015802:	d902      	bls.n	801580a <tcp_slowtmr+0x21e>
          ++pcb_remove;
 8015804:	7ffb      	ldrb	r3, [r7, #31]
 8015806:	3301      	adds	r3, #1
 8015808:	77fb      	strb	r3, [r7, #31]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801580a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801580c:	7a1b      	ldrb	r3, [r3, #8]
 801580e:	f003 0308 	and.w	r3, r3, #8
 8015812:	2b00      	cmp	r3, #0
 8015814:	d05d      	beq.n	80158d2 <tcp_slowtmr+0x2e6>
       ((pcb->state == ESTABLISHED) ||
 8015816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015818:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801581a:	2b04      	cmp	r3, #4
 801581c:	d003      	beq.n	8015826 <tcp_slowtmr+0x23a>
        (pcb->state == CLOSE_WAIT))) {
 801581e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015820:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 8015822:	2b07      	cmp	r3, #7
 8015824:	d155      	bne.n	80158d2 <tcp_slowtmr+0x2e6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015826:	4b0c      	ldr	r3, [pc, #48]	@ (8015858 <tcp_slowtmr+0x26c>)
 8015828:	681a      	ldr	r2, [r3, #0]
 801582a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801582c:	6a1b      	ldr	r3, [r3, #32]
 801582e:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8015830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015836:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 801583a:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 801583e:	4910      	ldr	r1, [pc, #64]	@ (8015880 <tcp_slowtmr+0x294>)
 8015840:	fba1 1303 	umull	r1, r3, r1, r3
 8015844:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015846:	429a      	cmp	r2, r3
 8015848:	d91c      	bls.n	8015884 <tcp_slowtmr+0x298>
        ++pcb_remove;
 801584a:	7ffb      	ldrb	r3, [r7, #31]
 801584c:	3301      	adds	r3, #1
 801584e:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 8015850:	7fbb      	ldrb	r3, [r7, #30]
 8015852:	3301      	adds	r3, #1
 8015854:	77bb      	strb	r3, [r7, #30]
 8015856:	e03c      	b.n	80158d2 <tcp_slowtmr+0x2e6>
 8015858:	2000dd1c 	.word	0x2000dd1c
 801585c:	2000dd32 	.word	0x2000dd32
 8015860:	2000dd28 	.word	0x2000dd28
 8015864:	080246a0 	.word	0x080246a0
 8015868:	08024850 	.word	0x08024850
 801586c:	080246dc 	.word	0x080246dc
 8015870:	0802487c 	.word	0x0802487c
 8015874:	080248a8 	.word	0x080248a8
 8015878:	0802f010 	.word	0x0802f010
 801587c:	0802f000 	.word	0x0802f000
 8015880:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015884:	4b97      	ldr	r3, [pc, #604]	@ (8015ae4 <tcp_slowtmr+0x4f8>)
 8015886:	681a      	ldr	r2, [r3, #0]
 8015888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801588a:	6a1b      	ldr	r3, [r3, #32]
 801588c:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801588e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015890:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 8015894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015896:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 801589a:	4618      	mov	r0, r3
 801589c:	4b92      	ldr	r3, [pc, #584]	@ (8015ae8 <tcp_slowtmr+0x4fc>)
 801589e:	fb00 f303 	mul.w	r3, r0, r3
 80158a2:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 80158a4:	4991      	ldr	r1, [pc, #580]	@ (8015aec <tcp_slowtmr+0x500>)
 80158a6:	fba1 1303 	umull	r1, r3, r1, r3
 80158aa:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80158ac:	429a      	cmp	r2, r3
 80158ae:	d910      	bls.n	80158d2 <tcp_slowtmr+0x2e6>
        err = tcp_keepalive(pcb);
 80158b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80158b2:	f004 fbb5 	bl	801a020 <tcp_keepalive>
 80158b6:	4603      	mov	r3, r0
 80158b8:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 80158ba:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d107      	bne.n	80158d2 <tcp_slowtmr+0x2e6>
          pcb->keep_cnt_sent++;
 80158c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158c4:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 80158c8:	3301      	adds	r3, #1
 80158ca:	b2da      	uxtb	r2, r3
 80158cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158ce:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
    if (pcb->ooseq != NULL &&
 80158d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d016      	beq.n	8015908 <tcp_slowtmr+0x31c>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 80158da:	4b82      	ldr	r3, [pc, #520]	@ (8015ae4 <tcp_slowtmr+0x4f8>)
 80158dc:	681a      	ldr	r2, [r3, #0]
 80158de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158e0:	6a1b      	ldr	r3, [r3, #32]
 80158e2:	1ad2      	subs	r2, r2, r3
 80158e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158e6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80158ea:	4619      	mov	r1, r3
 80158ec:	460b      	mov	r3, r1
 80158ee:	005b      	lsls	r3, r3, #1
 80158f0:	440b      	add	r3, r1
 80158f2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80158f4:	429a      	cmp	r2, r3
 80158f6:	d307      	bcc.n	8015908 <tcp_slowtmr+0x31c>
      tcp_segs_free(pcb->ooseq);
 80158f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80158fc:	4618      	mov	r0, r3
 80158fe:	f000 fa06 	bl	8015d0e <tcp_segs_free>
      pcb->ooseq = NULL;
 8015902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015904:	2200      	movs	r2, #0
 8015906:	671a      	str	r2, [r3, #112]	@ 0x70
    if (pcb->state == SYN_RCVD) {
 8015908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801590a:	7d1b      	ldrb	r3, [r3, #20]
 801590c:	2b03      	cmp	r3, #3
 801590e:	d109      	bne.n	8015924 <tcp_slowtmr+0x338>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015910:	4b74      	ldr	r3, [pc, #464]	@ (8015ae4 <tcp_slowtmr+0x4f8>)
 8015912:	681a      	ldr	r2, [r3, #0]
 8015914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015916:	6a1b      	ldr	r3, [r3, #32]
 8015918:	1ad3      	subs	r3, r2, r3
 801591a:	2b28      	cmp	r3, #40	@ 0x28
 801591c:	d902      	bls.n	8015924 <tcp_slowtmr+0x338>
        ++pcb_remove;
 801591e:	7ffb      	ldrb	r3, [r7, #31]
 8015920:	3301      	adds	r3, #1
 8015922:	77fb      	strb	r3, [r7, #31]
    if (pcb->state == LAST_ACK) {
 8015924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015926:	7d1b      	ldrb	r3, [r3, #20]
 8015928:	2b09      	cmp	r3, #9
 801592a:	d109      	bne.n	8015940 <tcp_slowtmr+0x354>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801592c:	4b6d      	ldr	r3, [pc, #436]	@ (8015ae4 <tcp_slowtmr+0x4f8>)
 801592e:	681a      	ldr	r2, [r3, #0]
 8015930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015932:	6a1b      	ldr	r3, [r3, #32]
 8015934:	1ad3      	subs	r3, r2, r3
 8015936:	2bf0      	cmp	r3, #240	@ 0xf0
 8015938:	d902      	bls.n	8015940 <tcp_slowtmr+0x354>
        ++pcb_remove;
 801593a:	7ffb      	ldrb	r3, [r7, #31]
 801593c:	3301      	adds	r3, #1
 801593e:	77fb      	strb	r3, [r7, #31]
    if (pcb_remove) {
 8015940:	7ffb      	ldrb	r3, [r7, #31]
 8015942:	2b00      	cmp	r3, #0
 8015944:	d05d      	beq.n	8015a02 <tcp_slowtmr+0x416>
      tcp_err_fn err_fn = pcb->errf;
 8015946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015948:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801594c:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 801594e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015950:	f000 fc7a 	bl	8016248 <tcp_pcb_purge>
      if (prev != NULL) {
 8015954:	6a3b      	ldr	r3, [r7, #32]
 8015956:	2b00      	cmp	r3, #0
 8015958:	d010      	beq.n	801597c <tcp_slowtmr+0x390>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801595a:	4b65      	ldr	r3, [pc, #404]	@ (8015af0 <tcp_slowtmr+0x504>)
 801595c:	681b      	ldr	r3, [r3, #0]
 801595e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015960:	429a      	cmp	r2, r3
 8015962:	d106      	bne.n	8015972 <tcp_slowtmr+0x386>
 8015964:	4b63      	ldr	r3, [pc, #396]	@ (8015af4 <tcp_slowtmr+0x508>)
 8015966:	f240 4289 	movw	r2, #1161	@ 0x489
 801596a:	4963      	ldr	r1, [pc, #396]	@ (8015af8 <tcp_slowtmr+0x50c>)
 801596c:	4863      	ldr	r0, [pc, #396]	@ (8015afc <tcp_slowtmr+0x510>)
 801596e:	f00a fd97 	bl	80204a0 <iprintf>
        prev->next = pcb->next;
 8015972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015974:	68da      	ldr	r2, [r3, #12]
 8015976:	6a3b      	ldr	r3, [r7, #32]
 8015978:	60da      	str	r2, [r3, #12]
 801597a:	e00f      	b.n	801599c <tcp_slowtmr+0x3b0>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801597c:	4b5c      	ldr	r3, [pc, #368]	@ (8015af0 <tcp_slowtmr+0x504>)
 801597e:	681b      	ldr	r3, [r3, #0]
 8015980:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015982:	429a      	cmp	r2, r3
 8015984:	d006      	beq.n	8015994 <tcp_slowtmr+0x3a8>
 8015986:	4b5b      	ldr	r3, [pc, #364]	@ (8015af4 <tcp_slowtmr+0x508>)
 8015988:	f240 428d 	movw	r2, #1165	@ 0x48d
 801598c:	495c      	ldr	r1, [pc, #368]	@ (8015b00 <tcp_slowtmr+0x514>)
 801598e:	485b      	ldr	r0, [pc, #364]	@ (8015afc <tcp_slowtmr+0x510>)
 8015990:	f00a fd86 	bl	80204a0 <iprintf>
        tcp_active_pcbs = pcb->next;
 8015994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015996:	68db      	ldr	r3, [r3, #12]
 8015998:	4a55      	ldr	r2, [pc, #340]	@ (8015af0 <tcp_slowtmr+0x504>)
 801599a:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 801599c:	7fbb      	ldrb	r3, [r7, #30]
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d010      	beq.n	80159c4 <tcp_slowtmr+0x3d8>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80159a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159a4:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80159a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159a8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80159aa:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 80159ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159ae:	1d1d      	adds	r5, r3, #4
 80159b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159b2:	8adb      	ldrh	r3, [r3, #22]
 80159b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80159b6:	8b12      	ldrh	r2, [r2, #24]
 80159b8:	9201      	str	r2, [sp, #4]
 80159ba:	9300      	str	r3, [sp, #0]
 80159bc:	462b      	mov	r3, r5
 80159be:	4622      	mov	r2, r4
 80159c0:	f004 f9c8 	bl	8019d54 <tcp_rst>
      err_arg = pcb->callback_arg;
 80159c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159c6:	691b      	ldr	r3, [r3, #16]
 80159c8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80159ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159cc:	7d1b      	ldrb	r3, [r3, #20]
 80159ce:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80159d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159d2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80159d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159d6:	68db      	ldr	r3, [r3, #12]
 80159d8:	627b      	str	r3, [r7, #36]	@ 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 80159da:	6839      	ldr	r1, [r7, #0]
 80159dc:	2001      	movs	r0, #1
 80159de:	f7fe f81b 	bl	8013a18 <memp_free>
      tcp_active_pcbs_changed = 0;
 80159e2:	4b48      	ldr	r3, [pc, #288]	@ (8015b04 <tcp_slowtmr+0x518>)
 80159e4:	2200      	movs	r2, #0
 80159e6:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80159e8:	68fb      	ldr	r3, [r7, #12]
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d004      	beq.n	80159f8 <tcp_slowtmr+0x40c>
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	f06f 010c 	mvn.w	r1, #12
 80159f4:	68b8      	ldr	r0, [r7, #8]
 80159f6:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80159f8:	4b42      	ldr	r3, [pc, #264]	@ (8015b04 <tcp_slowtmr+0x518>)
 80159fa:	781b      	ldrb	r3, [r3, #0]
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d035      	beq.n	8015a6c <tcp_slowtmr+0x480>
        goto tcp_slowtmr_start;
 8015a00:	e606      	b.n	8015610 <tcp_slowtmr+0x24>
      prev = pcb;
 8015a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a04:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8015a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a08:	68db      	ldr	r3, [r3, #12]
 8015a0a:	627b      	str	r3, [r7, #36]	@ 0x24
      ++prev->polltmr;
 8015a0c:	6a3b      	ldr	r3, [r7, #32]
 8015a0e:	7edb      	ldrb	r3, [r3, #27]
 8015a10:	3301      	adds	r3, #1
 8015a12:	b2da      	uxtb	r2, r3
 8015a14:	6a3b      	ldr	r3, [r7, #32]
 8015a16:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8015a18:	6a3b      	ldr	r3, [r7, #32]
 8015a1a:	7eda      	ldrb	r2, [r3, #27]
 8015a1c:	6a3b      	ldr	r3, [r7, #32]
 8015a1e:	7f1b      	ldrb	r3, [r3, #28]
 8015a20:	429a      	cmp	r2, r3
 8015a22:	d323      	bcc.n	8015a6c <tcp_slowtmr+0x480>
        prev->polltmr = 0;
 8015a24:	6a3b      	ldr	r3, [r7, #32]
 8015a26:	2200      	movs	r2, #0
 8015a28:	76da      	strb	r2, [r3, #27]
        tcp_active_pcbs_changed = 0;
 8015a2a:	4b36      	ldr	r3, [pc, #216]	@ (8015b04 <tcp_slowtmr+0x518>)
 8015a2c:	2200      	movs	r2, #0
 8015a2e:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8015a30:	6a3b      	ldr	r3, [r7, #32]
 8015a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d00a      	beq.n	8015a50 <tcp_slowtmr+0x464>
 8015a3a:	6a3b      	ldr	r3, [r7, #32]
 8015a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015a40:	6a3a      	ldr	r2, [r7, #32]
 8015a42:	6912      	ldr	r2, [r2, #16]
 8015a44:	6a39      	ldr	r1, [r7, #32]
 8015a46:	4610      	mov	r0, r2
 8015a48:	4798      	blx	r3
 8015a4a:	4603      	mov	r3, r0
 8015a4c:	777b      	strb	r3, [r7, #29]
 8015a4e:	e001      	b.n	8015a54 <tcp_slowtmr+0x468>
 8015a50:	2300      	movs	r3, #0
 8015a52:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8015a54:	4b2b      	ldr	r3, [pc, #172]	@ (8015b04 <tcp_slowtmr+0x518>)
 8015a56:	781b      	ldrb	r3, [r3, #0]
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	f47f add8 	bne.w	801560e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8015a5e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d102      	bne.n	8015a6c <tcp_slowtmr+0x480>
          tcp_output(prev);
 8015a66:	6a38      	ldr	r0, [r7, #32]
 8015a68:	f003 fedc 	bl	8019824 <tcp_output>
  while (pcb != NULL) {
 8015a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	f47f add4 	bne.w	801561c <tcp_slowtmr+0x30>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8015a74:	2300      	movs	r3, #0
 8015a76:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8015a78:	4b23      	ldr	r3, [pc, #140]	@ (8015b08 <tcp_slowtmr+0x51c>)
 8015a7a:	681b      	ldr	r3, [r3, #0]
 8015a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 8015a7e:	e068      	b.n	8015b52 <tcp_slowtmr+0x566>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8015a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a82:	7d1b      	ldrb	r3, [r3, #20]
 8015a84:	2b0a      	cmp	r3, #10
 8015a86:	d006      	beq.n	8015a96 <tcp_slowtmr+0x4aa>
 8015a88:	4b1a      	ldr	r3, [pc, #104]	@ (8015af4 <tcp_slowtmr+0x508>)
 8015a8a:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 8015a8e:	491f      	ldr	r1, [pc, #124]	@ (8015b0c <tcp_slowtmr+0x520>)
 8015a90:	481a      	ldr	r0, [pc, #104]	@ (8015afc <tcp_slowtmr+0x510>)
 8015a92:	f00a fd05 	bl	80204a0 <iprintf>
    pcb_remove = 0;
 8015a96:	2300      	movs	r3, #0
 8015a98:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8015a9a:	4b12      	ldr	r3, [pc, #72]	@ (8015ae4 <tcp_slowtmr+0x4f8>)
 8015a9c:	681a      	ldr	r2, [r3, #0]
 8015a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015aa0:	6a1b      	ldr	r3, [r3, #32]
 8015aa2:	1ad3      	subs	r3, r2, r3
 8015aa4:	2bf0      	cmp	r3, #240	@ 0xf0
 8015aa6:	d902      	bls.n	8015aae <tcp_slowtmr+0x4c2>
      ++pcb_remove;
 8015aa8:	7ffb      	ldrb	r3, [r7, #31]
 8015aaa:	3301      	adds	r3, #1
 8015aac:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8015aae:	7ffb      	ldrb	r3, [r7, #31]
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	d049      	beq.n	8015b48 <tcp_slowtmr+0x55c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8015ab4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015ab6:	f000 fbc7 	bl	8016248 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8015aba:	6a3b      	ldr	r3, [r7, #32]
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d029      	beq.n	8015b14 <tcp_slowtmr+0x528>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8015ac0:	4b11      	ldr	r3, [pc, #68]	@ (8015b08 <tcp_slowtmr+0x51c>)
 8015ac2:	681b      	ldr	r3, [r3, #0]
 8015ac4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015ac6:	429a      	cmp	r2, r3
 8015ac8:	d106      	bne.n	8015ad8 <tcp_slowtmr+0x4ec>
 8015aca:	4b0a      	ldr	r3, [pc, #40]	@ (8015af4 <tcp_slowtmr+0x508>)
 8015acc:	f240 42cb 	movw	r2, #1227	@ 0x4cb
 8015ad0:	490f      	ldr	r1, [pc, #60]	@ (8015b10 <tcp_slowtmr+0x524>)
 8015ad2:	480a      	ldr	r0, [pc, #40]	@ (8015afc <tcp_slowtmr+0x510>)
 8015ad4:	f00a fce4 	bl	80204a0 <iprintf>
        prev->next = pcb->next;
 8015ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ada:	68da      	ldr	r2, [r3, #12]
 8015adc:	6a3b      	ldr	r3, [r7, #32]
 8015ade:	60da      	str	r2, [r3, #12]
 8015ae0:	e028      	b.n	8015b34 <tcp_slowtmr+0x548>
 8015ae2:	bf00      	nop
 8015ae4:	2000dd1c 	.word	0x2000dd1c
 8015ae8:	000124f8 	.word	0x000124f8
 8015aec:	10624dd3 	.word	0x10624dd3
 8015af0:	2000dd28 	.word	0x2000dd28
 8015af4:	080246a0 	.word	0x080246a0
 8015af8:	080248d8 	.word	0x080248d8
 8015afc:	080246dc 	.word	0x080246dc
 8015b00:	08024904 	.word	0x08024904
 8015b04:	2000dd30 	.word	0x2000dd30
 8015b08:	2000dd2c 	.word	0x2000dd2c
 8015b0c:	08024930 	.word	0x08024930
 8015b10:	08024960 	.word	0x08024960
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8015b14:	4b13      	ldr	r3, [pc, #76]	@ (8015b64 <tcp_slowtmr+0x578>)
 8015b16:	681b      	ldr	r3, [r3, #0]
 8015b18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015b1a:	429a      	cmp	r2, r3
 8015b1c:	d006      	beq.n	8015b2c <tcp_slowtmr+0x540>
 8015b1e:	4b12      	ldr	r3, [pc, #72]	@ (8015b68 <tcp_slowtmr+0x57c>)
 8015b20:	f240 42cf 	movw	r2, #1231	@ 0x4cf
 8015b24:	4911      	ldr	r1, [pc, #68]	@ (8015b6c <tcp_slowtmr+0x580>)
 8015b26:	4812      	ldr	r0, [pc, #72]	@ (8015b70 <tcp_slowtmr+0x584>)
 8015b28:	f00a fcba 	bl	80204a0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8015b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b2e:	68db      	ldr	r3, [r3, #12]
 8015b30:	4a0c      	ldr	r2, [pc, #48]	@ (8015b64 <tcp_slowtmr+0x578>)
 8015b32:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8015b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b36:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8015b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b3a:	68db      	ldr	r3, [r3, #12]
 8015b3c:	627b      	str	r3, [r7, #36]	@ 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8015b3e:	69b9      	ldr	r1, [r7, #24]
 8015b40:	2001      	movs	r0, #1
 8015b42:	f7fd ff69 	bl	8013a18 <memp_free>
 8015b46:	e004      	b.n	8015b52 <tcp_slowtmr+0x566>
    } else {
      prev = pcb;
 8015b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b4a:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8015b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b4e:	68db      	ldr	r3, [r3, #12]
 8015b50:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 8015b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d193      	bne.n	8015a80 <tcp_slowtmr+0x494>
    }
  }
}
 8015b58:	bf00      	nop
 8015b5a:	bf00      	nop
 8015b5c:	3728      	adds	r7, #40	@ 0x28
 8015b5e:	46bd      	mov	sp, r7
 8015b60:	bdb0      	pop	{r4, r5, r7, pc}
 8015b62:	bf00      	nop
 8015b64:	2000dd2c 	.word	0x2000dd2c
 8015b68:	080246a0 	.word	0x080246a0
 8015b6c:	08024988 	.word	0x08024988
 8015b70:	080246dc 	.word	0x080246dc

08015b74 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8015b74:	b580      	push	{r7, lr}
 8015b76:	b082      	sub	sp, #8
 8015b78:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8015b7a:	4b2d      	ldr	r3, [pc, #180]	@ (8015c30 <tcp_fasttmr+0xbc>)
 8015b7c:	781b      	ldrb	r3, [r3, #0]
 8015b7e:	3301      	adds	r3, #1
 8015b80:	b2da      	uxtb	r2, r3
 8015b82:	4b2b      	ldr	r3, [pc, #172]	@ (8015c30 <tcp_fasttmr+0xbc>)
 8015b84:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8015b86:	4b2b      	ldr	r3, [pc, #172]	@ (8015c34 <tcp_fasttmr+0xc0>)
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8015b8c:	e048      	b.n	8015c20 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	7f5a      	ldrb	r2, [r3, #29]
 8015b92:	4b27      	ldr	r3, [pc, #156]	@ (8015c30 <tcp_fasttmr+0xbc>)
 8015b94:	781b      	ldrb	r3, [r3, #0]
 8015b96:	429a      	cmp	r2, r3
 8015b98:	d03f      	beq.n	8015c1a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8015b9a:	4b25      	ldr	r3, [pc, #148]	@ (8015c30 <tcp_fasttmr+0xbc>)
 8015b9c:	781a      	ldrb	r2, [r3, #0]
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	7e9b      	ldrb	r3, [r3, #26]
 8015ba6:	f003 0301 	and.w	r3, r3, #1
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d010      	beq.n	8015bd0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	7e9b      	ldrb	r3, [r3, #26]
 8015bb2:	f043 0302 	orr.w	r3, r3, #2
 8015bb6:	b2da      	uxtb	r2, r3
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8015bbc:	6878      	ldr	r0, [r7, #4]
 8015bbe:	f003 fe31 	bl	8019824 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	7e9b      	ldrb	r3, [r3, #26]
 8015bc6:	f023 0303 	bic.w	r3, r3, #3
 8015bca:	b2da      	uxtb	r2, r3
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	7e9b      	ldrb	r3, [r3, #26]
 8015bd4:	f003 0308 	and.w	r3, r3, #8
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	d009      	beq.n	8015bf0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	7e9b      	ldrb	r3, [r3, #26]
 8015be0:	f023 0308 	bic.w	r3, r3, #8
 8015be4:	b2da      	uxtb	r2, r3
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8015bea:	6878      	ldr	r0, [r7, #4]
 8015bec:	f7ff f970 	bl	8014ed0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	68db      	ldr	r3, [r3, #12]
 8015bf4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d00a      	beq.n	8015c14 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8015bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8015c38 <tcp_fasttmr+0xc4>)
 8015c00:	2200      	movs	r2, #0
 8015c02:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8015c04:	6878      	ldr	r0, [r7, #4]
 8015c06:	f000 f819 	bl	8015c3c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8015c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8015c38 <tcp_fasttmr+0xc4>)
 8015c0c:	781b      	ldrb	r3, [r3, #0]
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d000      	beq.n	8015c14 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8015c12:	e7b8      	b.n	8015b86 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8015c14:	683b      	ldr	r3, [r7, #0]
 8015c16:	607b      	str	r3, [r7, #4]
 8015c18:	e002      	b.n	8015c20 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	68db      	ldr	r3, [r3, #12]
 8015c1e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d1b3      	bne.n	8015b8e <tcp_fasttmr+0x1a>
    }
  }
}
 8015c26:	bf00      	nop
 8015c28:	bf00      	nop
 8015c2a:	3708      	adds	r7, #8
 8015c2c:	46bd      	mov	sp, r7
 8015c2e:	bd80      	pop	{r7, pc}
 8015c30:	2000dd32 	.word	0x2000dd32
 8015c34:	2000dd28 	.word	0x2000dd28
 8015c38:	2000dd30 	.word	0x2000dd30

08015c3c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8015c3c:	b590      	push	{r4, r7, lr}
 8015c3e:	b085      	sub	sp, #20
 8015c40:	af00      	add	r7, sp, #0
 8015c42:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015c48:	7b5b      	ldrb	r3, [r3, #13]
 8015c4a:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015c50:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	2200      	movs	r2, #0
 8015c56:	675a      	str	r2, [r3, #116]	@ 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d00b      	beq.n	8015c7a <tcp_process_refused_data+0x3e>
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	6918      	ldr	r0, [r3, #16]
 8015c6c:	2300      	movs	r3, #0
 8015c6e:	68ba      	ldr	r2, [r7, #8]
 8015c70:	6879      	ldr	r1, [r7, #4]
 8015c72:	47a0      	blx	r4
 8015c74:	4603      	mov	r3, r0
 8015c76:	73fb      	strb	r3, [r7, #15]
 8015c78:	e007      	b.n	8015c8a <tcp_process_refused_data+0x4e>
 8015c7a:	2300      	movs	r3, #0
 8015c7c:	68ba      	ldr	r2, [r7, #8]
 8015c7e:	6879      	ldr	r1, [r7, #4]
 8015c80:	2000      	movs	r0, #0
 8015c82:	f000 f89b 	bl	8015dbc <tcp_recv_null>
 8015c86:	4603      	mov	r3, r0
 8015c88:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8015c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d12a      	bne.n	8015ce8 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8015c92:	7bbb      	ldrb	r3, [r7, #14]
 8015c94:	f003 0320 	and.w	r3, r3, #32
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d033      	beq.n	8015d04 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015ca0:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8015ca4:	d005      	beq.n	8015cb2 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015caa:	3301      	adds	r3, #1
 8015cac:	b29a      	uxth	r2, r3
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d00b      	beq.n	8015cd4 <tcp_process_refused_data+0x98>
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	6918      	ldr	r0, [r3, #16]
 8015cc6:	2300      	movs	r3, #0
 8015cc8:	2200      	movs	r2, #0
 8015cca:	6879      	ldr	r1, [r7, #4]
 8015ccc:	47a0      	blx	r4
 8015cce:	4603      	mov	r3, r0
 8015cd0:	73fb      	strb	r3, [r7, #15]
 8015cd2:	e001      	b.n	8015cd8 <tcp_process_refused_data+0x9c>
 8015cd4:	2300      	movs	r3, #0
 8015cd6:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8015cd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015cdc:	f113 0f0d 	cmn.w	r3, #13
 8015ce0:	d110      	bne.n	8015d04 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 8015ce2:	f06f 030c 	mvn.w	r3, #12
 8015ce6:	e00e      	b.n	8015d06 <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 8015ce8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015cec:	f113 0f0d 	cmn.w	r3, #13
 8015cf0:	d102      	bne.n	8015cf8 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8015cf2:	f06f 030c 	mvn.w	r3, #12
 8015cf6:	e006      	b.n	8015d06 <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	68ba      	ldr	r2, [r7, #8]
 8015cfc:	675a      	str	r2, [r3, #116]	@ 0x74
      return ERR_INPROGRESS;
 8015cfe:	f06f 0304 	mvn.w	r3, #4
 8015d02:	e000      	b.n	8015d06 <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 8015d04:	2300      	movs	r3, #0
}
 8015d06:	4618      	mov	r0, r3
 8015d08:	3714      	adds	r7, #20
 8015d0a:	46bd      	mov	sp, r7
 8015d0c:	bd90      	pop	{r4, r7, pc}

08015d0e <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8015d0e:	b580      	push	{r7, lr}
 8015d10:	b084      	sub	sp, #16
 8015d12:	af00      	add	r7, sp, #0
 8015d14:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8015d16:	e007      	b.n	8015d28 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	681b      	ldr	r3, [r3, #0]
 8015d1c:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8015d1e:	6878      	ldr	r0, [r7, #4]
 8015d20:	f000 f80a 	bl	8015d38 <tcp_seg_free>
    seg = next;
 8015d24:	68fb      	ldr	r3, [r7, #12]
 8015d26:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d1f4      	bne.n	8015d18 <tcp_segs_free+0xa>
  }
}
 8015d2e:	bf00      	nop
 8015d30:	bf00      	nop
 8015d32:	3710      	adds	r7, #16
 8015d34:	46bd      	mov	sp, r7
 8015d36:	bd80      	pop	{r7, pc}

08015d38 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8015d38:	b580      	push	{r7, lr}
 8015d3a:	b082      	sub	sp, #8
 8015d3c:	af00      	add	r7, sp, #0
 8015d3e:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d00c      	beq.n	8015d60 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	685b      	ldr	r3, [r3, #4]
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	d004      	beq.n	8015d58 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	685b      	ldr	r3, [r3, #4]
 8015d52:	4618      	mov	r0, r3
 8015d54:	f7fe fbbc 	bl	80144d0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8015d58:	6879      	ldr	r1, [r7, #4]
 8015d5a:	2003      	movs	r0, #3
 8015d5c:	f7fd fe5c 	bl	8013a18 <memp_free>
  }
}
 8015d60:	bf00      	nop
 8015d62:	3708      	adds	r7, #8
 8015d64:	46bd      	mov	sp, r7
 8015d66:	bd80      	pop	{r7, pc}

08015d68 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8015d68:	b480      	push	{r7}
 8015d6a:	b083      	sub	sp, #12
 8015d6c:	af00      	add	r7, sp, #0
 8015d6e:	6078      	str	r0, [r7, #4]
 8015d70:	460b      	mov	r3, r1
 8015d72:	70fb      	strb	r3, [r7, #3]
  pcb->prio = prio;
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	78fa      	ldrb	r2, [r7, #3]
 8015d78:	755a      	strb	r2, [r3, #21]
}
 8015d7a:	bf00      	nop
 8015d7c:	370c      	adds	r7, #12
 8015d7e:	46bd      	mov	sp, r7
 8015d80:	bc80      	pop	{r7}
 8015d82:	4770      	bx	lr

08015d84 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8015d84:	b580      	push	{r7, lr}
 8015d86:	b084      	sub	sp, #16
 8015d88:	af00      	add	r7, sp, #0
 8015d8a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8015d8c:	2003      	movs	r0, #3
 8015d8e:	f7fd fdf1 	bl	8013974 <memp_malloc>
 8015d92:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8015d94:	68fb      	ldr	r3, [r7, #12]
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d101      	bne.n	8015d9e <tcp_seg_copy+0x1a>
    return NULL;
 8015d9a:	2300      	movs	r3, #0
 8015d9c:	e00a      	b.n	8015db4 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8015d9e:	2210      	movs	r2, #16
 8015da0:	6879      	ldr	r1, [r7, #4]
 8015da2:	68f8      	ldr	r0, [r7, #12]
 8015da4:	f00a fe11 	bl	80209ca <memcpy>
  pbuf_ref(cseg->p);
 8015da8:	68fb      	ldr	r3, [r7, #12]
 8015daa:	685b      	ldr	r3, [r3, #4]
 8015dac:	4618      	mov	r0, r3
 8015dae:	f7fe fc39 	bl	8014624 <pbuf_ref>
  return cseg;
 8015db2:	68fb      	ldr	r3, [r7, #12]
}
 8015db4:	4618      	mov	r0, r3
 8015db6:	3710      	adds	r7, #16
 8015db8:	46bd      	mov	sp, r7
 8015dba:	bd80      	pop	{r7, pc}

08015dbc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8015dbc:	b580      	push	{r7, lr}
 8015dbe:	b084      	sub	sp, #16
 8015dc0:	af00      	add	r7, sp, #0
 8015dc2:	60f8      	str	r0, [r7, #12]
 8015dc4:	60b9      	str	r1, [r7, #8]
 8015dc6:	607a      	str	r2, [r7, #4]
 8015dc8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d009      	beq.n	8015de4 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	891b      	ldrh	r3, [r3, #8]
 8015dd4:	4619      	mov	r1, r3
 8015dd6:	68b8      	ldr	r0, [r7, #8]
 8015dd8:	f7ff fb6a 	bl	80154b0 <tcp_recved>
    pbuf_free(p);
 8015ddc:	6878      	ldr	r0, [r7, #4]
 8015dde:	f7fe fb77 	bl	80144d0 <pbuf_free>
 8015de2:	e008      	b.n	8015df6 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 8015de4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d104      	bne.n	8015df6 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 8015dec:	68b8      	ldr	r0, [r7, #8]
 8015dee:	f7ff f8ef 	bl	8014fd0 <tcp_close>
 8015df2:	4603      	mov	r3, r0
 8015df4:	e000      	b.n	8015df8 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 8015df6:	2300      	movs	r3, #0
}
 8015df8:	4618      	mov	r0, r3
 8015dfa:	3710      	adds	r7, #16
 8015dfc:	46bd      	mov	sp, r7
 8015dfe:	bd80      	pop	{r7, pc}

08015e00 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8015e00:	b580      	push	{r7, lr}
 8015e02:	b086      	sub	sp, #24
 8015e04:	af00      	add	r7, sp, #0
 8015e06:	4603      	mov	r3, r0
 8015e08:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8015e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	db01      	blt.n	8015e16 <tcp_kill_prio+0x16>
 8015e12:	79fb      	ldrb	r3, [r7, #7]
 8015e14:	e000      	b.n	8015e18 <tcp_kill_prio+0x18>
 8015e16:	237f      	movs	r3, #127	@ 0x7f
 8015e18:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 8015e1a:	2300      	movs	r3, #0
 8015e1c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8015e1e:	2300      	movs	r3, #0
 8015e20:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015e22:	4b16      	ldr	r3, [pc, #88]	@ (8015e7c <tcp_kill_prio+0x7c>)
 8015e24:	681b      	ldr	r3, [r3, #0]
 8015e26:	617b      	str	r3, [r7, #20]
 8015e28:	e01a      	b.n	8015e60 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 8015e2a:	697b      	ldr	r3, [r7, #20]
 8015e2c:	7d5b      	ldrb	r3, [r3, #21]
 8015e2e:	7afa      	ldrb	r2, [r7, #11]
 8015e30:	429a      	cmp	r2, r3
 8015e32:	d312      	bcc.n	8015e5a <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8015e34:	4b12      	ldr	r3, [pc, #72]	@ (8015e80 <tcp_kill_prio+0x80>)
 8015e36:	681a      	ldr	r2, [r3, #0]
 8015e38:	697b      	ldr	r3, [r7, #20]
 8015e3a:	6a1b      	ldr	r3, [r3, #32]
 8015e3c:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 8015e3e:	68fa      	ldr	r2, [r7, #12]
 8015e40:	429a      	cmp	r2, r3
 8015e42:	d80a      	bhi.n	8015e5a <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 8015e44:	4b0e      	ldr	r3, [pc, #56]	@ (8015e80 <tcp_kill_prio+0x80>)
 8015e46:	681a      	ldr	r2, [r3, #0]
 8015e48:	697b      	ldr	r3, [r7, #20]
 8015e4a:	6a1b      	ldr	r3, [r3, #32]
 8015e4c:	1ad3      	subs	r3, r2, r3
 8015e4e:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8015e50:	697b      	ldr	r3, [r7, #20]
 8015e52:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 8015e54:	697b      	ldr	r3, [r7, #20]
 8015e56:	7d5b      	ldrb	r3, [r3, #21]
 8015e58:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015e5a:	697b      	ldr	r3, [r7, #20]
 8015e5c:	68db      	ldr	r3, [r3, #12]
 8015e5e:	617b      	str	r3, [r7, #20]
 8015e60:	697b      	ldr	r3, [r7, #20]
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d1e1      	bne.n	8015e2a <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 8015e66:	693b      	ldr	r3, [r7, #16]
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	d002      	beq.n	8015e72 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8015e6c:	6938      	ldr	r0, [r7, #16]
 8015e6e:	f7ff f979 	bl	8015164 <tcp_abort>
  }
}
 8015e72:	bf00      	nop
 8015e74:	3718      	adds	r7, #24
 8015e76:	46bd      	mov	sp, r7
 8015e78:	bd80      	pop	{r7, pc}
 8015e7a:	bf00      	nop
 8015e7c:	2000dd28 	.word	0x2000dd28
 8015e80:	2000dd1c 	.word	0x2000dd1c

08015e84 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8015e84:	b580      	push	{r7, lr}
 8015e86:	b086      	sub	sp, #24
 8015e88:	af00      	add	r7, sp, #0
 8015e8a:	4603      	mov	r3, r0
 8015e8c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8015e8e:	79fb      	ldrb	r3, [r7, #7]
 8015e90:	2b08      	cmp	r3, #8
 8015e92:	d009      	beq.n	8015ea8 <tcp_kill_state+0x24>
 8015e94:	79fb      	ldrb	r3, [r7, #7]
 8015e96:	2b09      	cmp	r3, #9
 8015e98:	d006      	beq.n	8015ea8 <tcp_kill_state+0x24>
 8015e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8015f04 <tcp_kill_state+0x80>)
 8015e9c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8015ea0:	4919      	ldr	r1, [pc, #100]	@ (8015f08 <tcp_kill_state+0x84>)
 8015ea2:	481a      	ldr	r0, [pc, #104]	@ (8015f0c <tcp_kill_state+0x88>)
 8015ea4:	f00a fafc 	bl	80204a0 <iprintf>

  inactivity = 0;
 8015ea8:	2300      	movs	r3, #0
 8015eaa:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8015eac:	2300      	movs	r3, #0
 8015eae:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015eb0:	4b17      	ldr	r3, [pc, #92]	@ (8015f10 <tcp_kill_state+0x8c>)
 8015eb2:	681b      	ldr	r3, [r3, #0]
 8015eb4:	617b      	str	r3, [r7, #20]
 8015eb6:	e017      	b.n	8015ee8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8015eb8:	697b      	ldr	r3, [r7, #20]
 8015eba:	7d1b      	ldrb	r3, [r3, #20]
 8015ebc:	79fa      	ldrb	r2, [r7, #7]
 8015ebe:	429a      	cmp	r2, r3
 8015ec0:	d10f      	bne.n	8015ee2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8015ec2:	4b14      	ldr	r3, [pc, #80]	@ (8015f14 <tcp_kill_state+0x90>)
 8015ec4:	681a      	ldr	r2, [r3, #0]
 8015ec6:	697b      	ldr	r3, [r7, #20]
 8015ec8:	6a1b      	ldr	r3, [r3, #32]
 8015eca:	1ad3      	subs	r3, r2, r3
 8015ecc:	68fa      	ldr	r2, [r7, #12]
 8015ece:	429a      	cmp	r2, r3
 8015ed0:	d807      	bhi.n	8015ee2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8015ed2:	4b10      	ldr	r3, [pc, #64]	@ (8015f14 <tcp_kill_state+0x90>)
 8015ed4:	681a      	ldr	r2, [r3, #0]
 8015ed6:	697b      	ldr	r3, [r7, #20]
 8015ed8:	6a1b      	ldr	r3, [r3, #32]
 8015eda:	1ad3      	subs	r3, r2, r3
 8015edc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8015ede:	697b      	ldr	r3, [r7, #20]
 8015ee0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015ee2:	697b      	ldr	r3, [r7, #20]
 8015ee4:	68db      	ldr	r3, [r3, #12]
 8015ee6:	617b      	str	r3, [r7, #20]
 8015ee8:	697b      	ldr	r3, [r7, #20]
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d1e4      	bne.n	8015eb8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8015eee:	693b      	ldr	r3, [r7, #16]
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d003      	beq.n	8015efc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8015ef4:	2100      	movs	r1, #0
 8015ef6:	6938      	ldr	r0, [r7, #16]
 8015ef8:	f7ff f882 	bl	8015000 <tcp_abandon>
  }
}
 8015efc:	bf00      	nop
 8015efe:	3718      	adds	r7, #24
 8015f00:	46bd      	mov	sp, r7
 8015f02:	bd80      	pop	{r7, pc}
 8015f04:	080246a0 	.word	0x080246a0
 8015f08:	080249b0 	.word	0x080249b0
 8015f0c:	080246dc 	.word	0x080246dc
 8015f10:	2000dd28 	.word	0x2000dd28
 8015f14:	2000dd1c 	.word	0x2000dd1c

08015f18 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8015f18:	b580      	push	{r7, lr}
 8015f1a:	b084      	sub	sp, #16
 8015f1c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8015f1e:	2300      	movs	r3, #0
 8015f20:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8015f22:	2300      	movs	r3, #0
 8015f24:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015f26:	4b12      	ldr	r3, [pc, #72]	@ (8015f70 <tcp_kill_timewait+0x58>)
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	60fb      	str	r3, [r7, #12]
 8015f2c:	e012      	b.n	8015f54 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8015f2e:	4b11      	ldr	r3, [pc, #68]	@ (8015f74 <tcp_kill_timewait+0x5c>)
 8015f30:	681a      	ldr	r2, [r3, #0]
 8015f32:	68fb      	ldr	r3, [r7, #12]
 8015f34:	6a1b      	ldr	r3, [r3, #32]
 8015f36:	1ad3      	subs	r3, r2, r3
 8015f38:	687a      	ldr	r2, [r7, #4]
 8015f3a:	429a      	cmp	r2, r3
 8015f3c:	d807      	bhi.n	8015f4e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8015f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8015f74 <tcp_kill_timewait+0x5c>)
 8015f40:	681a      	ldr	r2, [r3, #0]
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	6a1b      	ldr	r3, [r3, #32]
 8015f46:	1ad3      	subs	r3, r2, r3
 8015f48:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8015f4a:	68fb      	ldr	r3, [r7, #12]
 8015f4c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	68db      	ldr	r3, [r3, #12]
 8015f52:	60fb      	str	r3, [r7, #12]
 8015f54:	68fb      	ldr	r3, [r7, #12]
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d1e9      	bne.n	8015f2e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8015f5a:	68bb      	ldr	r3, [r7, #8]
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d002      	beq.n	8015f66 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8015f60:	68b8      	ldr	r0, [r7, #8]
 8015f62:	f7ff f8ff 	bl	8015164 <tcp_abort>
  }
}
 8015f66:	bf00      	nop
 8015f68:	3710      	adds	r7, #16
 8015f6a:	46bd      	mov	sp, r7
 8015f6c:	bd80      	pop	{r7, pc}
 8015f6e:	bf00      	nop
 8015f70:	2000dd2c 	.word	0x2000dd2c
 8015f74:	2000dd1c 	.word	0x2000dd1c

08015f78 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8015f78:	b580      	push	{r7, lr}
 8015f7a:	b084      	sub	sp, #16
 8015f7c:	af00      	add	r7, sp, #0
 8015f7e:	4603      	mov	r3, r0
 8015f80:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015f82:	2001      	movs	r0, #1
 8015f84:	f7fd fcf6 	bl	8013974 <memp_malloc>
 8015f88:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8015f8a:	68fb      	ldr	r3, [r7, #12]
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d14c      	bne.n	801602a <tcp_alloc+0xb2>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8015f90:	f7ff ffc2 	bl	8015f18 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015f94:	2001      	movs	r0, #1
 8015f96:	f7fd fced 	bl	8013974 <memp_malloc>
 8015f9a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d139      	bne.n	8016016 <tcp_alloc+0x9e>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8015fa2:	2009      	movs	r0, #9
 8015fa4:	f7ff ff6e 	bl	8015e84 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015fa8:	2001      	movs	r0, #1
 8015faa:	f7fd fce3 	bl	8013974 <memp_malloc>
 8015fae:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8015fb0:	68fb      	ldr	r3, [r7, #12]
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	d125      	bne.n	8016002 <tcp_alloc+0x8a>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8015fb6:	2008      	movs	r0, #8
 8015fb8:	f7ff ff64 	bl	8015e84 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015fbc:	2001      	movs	r0, #1
 8015fbe:	f7fd fcd9 	bl	8013974 <memp_malloc>
 8015fc2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8015fc4:	68fb      	ldr	r3, [r7, #12]
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d111      	bne.n	8015fee <tcp_alloc+0x76>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8015fca:	79fb      	ldrb	r3, [r7, #7]
 8015fcc:	4618      	mov	r0, r3
 8015fce:	f7ff ff17 	bl	8015e00 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015fd2:	2001      	movs	r0, #1
 8015fd4:	f7fd fcce 	bl	8013974 <memp_malloc>
 8015fd8:	60f8      	str	r0, [r7, #12]
          if (pcb != NULL) {
 8015fda:	68fb      	ldr	r3, [r7, #12]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d006      	beq.n	8015fee <tcp_alloc+0x76>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8015fe0:	4b36      	ldr	r3, [pc, #216]	@ (80160bc <tcp_alloc+0x144>)
 8015fe2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8015fe6:	881a      	ldrh	r2, [r3, #0]
 8015fe8:	3a01      	subs	r2, #1
 8015fea:	b292      	uxth	r2, r2
 8015fec:	801a      	strh	r2, [r3, #0]
          }
        }
        if (pcb != NULL) {
 8015fee:	68fb      	ldr	r3, [r7, #12]
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d006      	beq.n	8016002 <tcp_alloc+0x8a>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8015ff4:	4b31      	ldr	r3, [pc, #196]	@ (80160bc <tcp_alloc+0x144>)
 8015ff6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8015ffa:	881a      	ldrh	r2, [r3, #0]
 8015ffc:	3a01      	subs	r2, #1
 8015ffe:	b292      	uxth	r2, r2
 8016000:	801a      	strh	r2, [r3, #0]
        }
      }
      if (pcb != NULL) {
 8016002:	68fb      	ldr	r3, [r7, #12]
 8016004:	2b00      	cmp	r3, #0
 8016006:	d006      	beq.n	8016016 <tcp_alloc+0x9e>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8016008:	4b2c      	ldr	r3, [pc, #176]	@ (80160bc <tcp_alloc+0x144>)
 801600a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801600e:	881a      	ldrh	r2, [r3, #0]
 8016010:	3a01      	subs	r2, #1
 8016012:	b292      	uxth	r2, r2
 8016014:	801a      	strh	r2, [r3, #0]
      }
    }
    if (pcb != NULL) {
 8016016:	68fb      	ldr	r3, [r7, #12]
 8016018:	2b00      	cmp	r3, #0
 801601a:	d006      	beq.n	801602a <tcp_alloc+0xb2>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 801601c:	4b27      	ldr	r3, [pc, #156]	@ (80160bc <tcp_alloc+0x144>)
 801601e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8016022:	881a      	ldrh	r2, [r3, #0]
 8016024:	3a01      	subs	r2, #1
 8016026:	b292      	uxth	r2, r2
 8016028:	801a      	strh	r2, [r3, #0]
    }
  }
  if (pcb != NULL) {
 801602a:	68fb      	ldr	r3, [r7, #12]
 801602c:	2b00      	cmp	r3, #0
 801602e:	d03f      	beq.n	80160b0 <tcp_alloc+0x138>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8016030:	2298      	movs	r2, #152	@ 0x98
 8016032:	2100      	movs	r1, #0
 8016034:	68f8      	ldr	r0, [r7, #12]
 8016036:	f00a fc09 	bl	802084c <memset>
    pcb->prio = prio;
 801603a:	68fb      	ldr	r3, [r7, #12]
 801603c:	79fa      	ldrb	r2, [r7, #7]
 801603e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8016040:	68fb      	ldr	r3, [r7, #12]
 8016042:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8016046:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8016050:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8016052:	68fb      	ldr	r3, [r7, #12]
 8016054:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8016056:	68fb      	ldr	r3, [r7, #12]
 8016058:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 801605a:	68fb      	ldr	r3, [r7, #12]
 801605c:	22ff      	movs	r2, #255	@ 0xff
 801605e:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8016060:	68fb      	ldr	r3, [r7, #12]
 8016062:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8016066:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8016068:	68fb      	ldr	r3, [r7, #12]
 801606a:	2206      	movs	r2, #6
 801606c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	2206      	movs	r2, #6
 8016074:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8016076:	68fb      	ldr	r3, [r7, #12]
 8016078:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801607c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 801607e:	68fb      	ldr	r3, [r7, #12]
 8016080:	2201      	movs	r2, #1
 8016082:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8016086:	4b0e      	ldr	r3, [pc, #56]	@ (80160c0 <tcp_alloc+0x148>)
 8016088:	681a      	ldr	r2, [r3, #0]
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801608e:	4b0d      	ldr	r3, [pc, #52]	@ (80160c4 <tcp_alloc+0x14c>)
 8016090:	781a      	ldrb	r2, [r3, #0]
 8016092:	68fb      	ldr	r3, [r7, #12]
 8016094:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 801609c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80160a0:	68fb      	ldr	r3, [r7, #12]
 80160a2:	4a09      	ldr	r2, [pc, #36]	@ (80160c8 <tcp_alloc+0x150>)
 80160a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	4a08      	ldr	r2, [pc, #32]	@ (80160cc <tcp_alloc+0x154>)
 80160ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80160b0:	68fb      	ldr	r3, [r7, #12]
}
 80160b2:	4618      	mov	r0, r3
 80160b4:	3710      	adds	r7, #16
 80160b6:	46bd      	mov	sp, r7
 80160b8:	bd80      	pop	{r7, pc}
 80160ba:	bf00      	nop
 80160bc:	2000db84 	.word	0x2000db84
 80160c0:	2000dd1c 	.word	0x2000dd1c
 80160c4:	2000dd32 	.word	0x2000dd32
 80160c8:	08015dbd 	.word	0x08015dbd
 80160cc:	006ddd00 	.word	0x006ddd00

080160d0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80160d0:	b580      	push	{r7, lr}
 80160d2:	b084      	sub	sp, #16
 80160d4:	af00      	add	r7, sp, #0
 80160d6:	4603      	mov	r3, r0
 80160d8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80160da:	2040      	movs	r0, #64	@ 0x40
 80160dc:	f7ff ff4c 	bl	8015f78 <tcp_alloc>
 80160e0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80160e2:	68fb      	ldr	r3, [r7, #12]
}
 80160e4:	4618      	mov	r0, r3
 80160e6:	3710      	adds	r7, #16
 80160e8:	46bd      	mov	sp, r7
 80160ea:	bd80      	pop	{r7, pc}

080160ec <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80160ec:	b480      	push	{r7}
 80160ee:	b083      	sub	sp, #12
 80160f0:	af00      	add	r7, sp, #0
 80160f2:	6078      	str	r0, [r7, #4]
 80160f4:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d002      	beq.n	8016102 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	683a      	ldr	r2, [r7, #0]
 8016100:	611a      	str	r2, [r3, #16]
  }
}
 8016102:	bf00      	nop
 8016104:	370c      	adds	r7, #12
 8016106:	46bd      	mov	sp, r7
 8016108:	bc80      	pop	{r7}
 801610a:	4770      	bx	lr

0801610c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801610c:	b580      	push	{r7, lr}
 801610e:	b082      	sub	sp, #8
 8016110:	af00      	add	r7, sp, #0
 8016112:	6078      	str	r0, [r7, #4]
 8016114:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	2b00      	cmp	r3, #0
 801611a:	d00e      	beq.n	801613a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	7d1b      	ldrb	r3, [r3, #20]
 8016120:	2b01      	cmp	r3, #1
 8016122:	d106      	bne.n	8016132 <tcp_recv+0x26>
 8016124:	4b07      	ldr	r3, [pc, #28]	@ (8016144 <tcp_recv+0x38>)
 8016126:	f240 62bb 	movw	r2, #1723	@ 0x6bb
 801612a:	4907      	ldr	r1, [pc, #28]	@ (8016148 <tcp_recv+0x3c>)
 801612c:	4807      	ldr	r0, [pc, #28]	@ (801614c <tcp_recv+0x40>)
 801612e:	f00a f9b7 	bl	80204a0 <iprintf>
    pcb->recv = recv;
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	683a      	ldr	r2, [r7, #0]
 8016136:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 801613a:	bf00      	nop
 801613c:	3708      	adds	r7, #8
 801613e:	46bd      	mov	sp, r7
 8016140:	bd80      	pop	{r7, pc}
 8016142:	bf00      	nop
 8016144:	080246a0 	.word	0x080246a0
 8016148:	080249c0 	.word	0x080249c0
 801614c:	080246dc 	.word	0x080246dc

08016150 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8016150:	b580      	push	{r7, lr}
 8016152:	b082      	sub	sp, #8
 8016154:	af00      	add	r7, sp, #0
 8016156:	6078      	str	r0, [r7, #4]
 8016158:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	2b00      	cmp	r3, #0
 801615e:	d00d      	beq.n	801617c <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	7d1b      	ldrb	r3, [r3, #20]
 8016164:	2b01      	cmp	r3, #1
 8016166:	d106      	bne.n	8016176 <tcp_sent+0x26>
 8016168:	4b06      	ldr	r3, [pc, #24]	@ (8016184 <tcp_sent+0x34>)
 801616a:	f240 62cc 	movw	r2, #1740	@ 0x6cc
 801616e:	4906      	ldr	r1, [pc, #24]	@ (8016188 <tcp_sent+0x38>)
 8016170:	4806      	ldr	r0, [pc, #24]	@ (801618c <tcp_sent+0x3c>)
 8016172:	f00a f995 	bl	80204a0 <iprintf>
    pcb->sent = sent;
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	683a      	ldr	r2, [r7, #0]
 801617a:	67da      	str	r2, [r3, #124]	@ 0x7c
  }
}
 801617c:	bf00      	nop
 801617e:	3708      	adds	r7, #8
 8016180:	46bd      	mov	sp, r7
 8016182:	bd80      	pop	{r7, pc}
 8016184:	080246a0 	.word	0x080246a0
 8016188:	080249e8 	.word	0x080249e8
 801618c:	080246dc 	.word	0x080246dc

08016190 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8016190:	b580      	push	{r7, lr}
 8016192:	b082      	sub	sp, #8
 8016194:	af00      	add	r7, sp, #0
 8016196:	6078      	str	r0, [r7, #4]
 8016198:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	2b00      	cmp	r3, #0
 801619e:	d00e      	beq.n	80161be <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	7d1b      	ldrb	r3, [r3, #20]
 80161a4:	2b01      	cmp	r3, #1
 80161a6:	d106      	bne.n	80161b6 <tcp_err+0x26>
 80161a8:	4b07      	ldr	r3, [pc, #28]	@ (80161c8 <tcp_err+0x38>)
 80161aa:	f44f 62dc 	mov.w	r2, #1760	@ 0x6e0
 80161ae:	4907      	ldr	r1, [pc, #28]	@ (80161cc <tcp_err+0x3c>)
 80161b0:	4807      	ldr	r0, [pc, #28]	@ (80161d0 <tcp_err+0x40>)
 80161b2:	f00a f975 	bl	80204a0 <iprintf>
    pcb->errf = err;
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	683a      	ldr	r2, [r7, #0]
 80161ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }
}
 80161be:	bf00      	nop
 80161c0:	3708      	adds	r7, #8
 80161c2:	46bd      	mov	sp, r7
 80161c4:	bd80      	pop	{r7, pc}
 80161c6:	bf00      	nop
 80161c8:	080246a0 	.word	0x080246a0
 80161cc:	08024a10 	.word	0x08024a10
 80161d0:	080246dc 	.word	0x080246dc

080161d4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80161d4:	b480      	push	{r7}
 80161d6:	b085      	sub	sp, #20
 80161d8:	af00      	add	r7, sp, #0
 80161da:	6078      	str	r0, [r7, #4]
 80161dc:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d008      	beq.n	80161f6 <tcp_accept+0x22>
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	7d1b      	ldrb	r3, [r3, #20]
 80161e8:	2b01      	cmp	r3, #1
 80161ea:	d104      	bne.n	80161f6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80161f0:	68fb      	ldr	r3, [r7, #12]
 80161f2:	683a      	ldr	r2, [r7, #0]
 80161f4:	619a      	str	r2, [r3, #24]
  }
}
 80161f6:	bf00      	nop
 80161f8:	3714      	adds	r7, #20
 80161fa:	46bd      	mov	sp, r7
 80161fc:	bc80      	pop	{r7}
 80161fe:	4770      	bx	lr

08016200 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8016200:	b580      	push	{r7, lr}
 8016202:	b084      	sub	sp, #16
 8016204:	af00      	add	r7, sp, #0
 8016206:	60f8      	str	r0, [r7, #12]
 8016208:	60b9      	str	r1, [r7, #8]
 801620a:	4613      	mov	r3, r2
 801620c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	7d1b      	ldrb	r3, [r3, #20]
 8016212:	2b01      	cmp	r3, #1
 8016214:	d106      	bne.n	8016224 <tcp_poll+0x24>
 8016216:	4b09      	ldr	r3, [pc, #36]	@ (801623c <tcp_poll+0x3c>)
 8016218:	f240 7203 	movw	r2, #1795	@ 0x703
 801621c:	4908      	ldr	r1, [pc, #32]	@ (8016240 <tcp_poll+0x40>)
 801621e:	4809      	ldr	r0, [pc, #36]	@ (8016244 <tcp_poll+0x44>)
 8016220:	f00a f93e 	bl	80204a0 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8016224:	68fb      	ldr	r3, [r7, #12]
 8016226:	68ba      	ldr	r2, [r7, #8]
 8016228:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801622c:	68fb      	ldr	r3, [r7, #12]
 801622e:	79fa      	ldrb	r2, [r7, #7]
 8016230:	771a      	strb	r2, [r3, #28]
}
 8016232:	bf00      	nop
 8016234:	3710      	adds	r7, #16
 8016236:	46bd      	mov	sp, r7
 8016238:	bd80      	pop	{r7, pc}
 801623a:	bf00      	nop
 801623c:	080246a0 	.word	0x080246a0
 8016240:	08024a38 	.word	0x08024a38
 8016244:	080246dc 	.word	0x080246dc

08016248 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8016248:	b580      	push	{r7, lr}
 801624a:	b082      	sub	sp, #8
 801624c:	af00      	add	r7, sp, #0
 801624e:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	7d1b      	ldrb	r3, [r3, #20]
 8016254:	2b00      	cmp	r3, #0
 8016256:	d034      	beq.n	80162c2 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801625c:	2b0a      	cmp	r3, #10
 801625e:	d030      	beq.n	80162c2 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 8016264:	2b01      	cmp	r3, #1
 8016266:	d02c      	beq.n	80162c2 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801626c:	2b00      	cmp	r3, #0
 801626e:	d007      	beq.n	8016280 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016274:	4618      	mov	r0, r3
 8016276:	f7fe f92b 	bl	80144d0 <pbuf_free>
      pcb->refused_data = NULL;
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	2200      	movs	r2, #0
 801627e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016284:	4618      	mov	r0, r3
 8016286:	f7ff fd42 	bl	8015d0e <tcp_segs_free>
    pcb->ooseq = NULL;
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	2200      	movs	r2, #0
 801628e:	671a      	str	r2, [r3, #112]	@ 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016296:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801629c:	4618      	mov	r0, r3
 801629e:	f7ff fd36 	bl	8015d0e <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80162a6:	4618      	mov	r0, r3
 80162a8:	f7ff fd31 	bl	8015d0e <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	2200      	movs	r2, #0
 80162b0:	669a      	str	r2, [r3, #104]	@ 0x68
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	2200      	movs	r2, #0
 80162be:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
#endif /* TCP_OVERSIZE */
  }
}
 80162c2:	bf00      	nop
 80162c4:	3708      	adds	r7, #8
 80162c6:	46bd      	mov	sp, r7
 80162c8:	bd80      	pop	{r7, pc}
	...

080162cc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80162cc:	b580      	push	{r7, lr}
 80162ce:	b084      	sub	sp, #16
 80162d0:	af00      	add	r7, sp, #0
 80162d2:	6078      	str	r0, [r7, #4]
 80162d4:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	681b      	ldr	r3, [r3, #0]
 80162da:	683a      	ldr	r2, [r7, #0]
 80162dc:	429a      	cmp	r2, r3
 80162de:	d105      	bne.n	80162ec <tcp_pcb_remove+0x20>
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	681b      	ldr	r3, [r3, #0]
 80162e4:	68da      	ldr	r2, [r3, #12]
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	601a      	str	r2, [r3, #0]
 80162ea:	e013      	b.n	8016314 <tcp_pcb_remove+0x48>
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	681b      	ldr	r3, [r3, #0]
 80162f0:	60fb      	str	r3, [r7, #12]
 80162f2:	e00c      	b.n	801630e <tcp_pcb_remove+0x42>
 80162f4:	68fb      	ldr	r3, [r7, #12]
 80162f6:	68db      	ldr	r3, [r3, #12]
 80162f8:	683a      	ldr	r2, [r7, #0]
 80162fa:	429a      	cmp	r2, r3
 80162fc:	d104      	bne.n	8016308 <tcp_pcb_remove+0x3c>
 80162fe:	683b      	ldr	r3, [r7, #0]
 8016300:	68da      	ldr	r2, [r3, #12]
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	60da      	str	r2, [r3, #12]
 8016306:	e005      	b.n	8016314 <tcp_pcb_remove+0x48>
 8016308:	68fb      	ldr	r3, [r7, #12]
 801630a:	68db      	ldr	r3, [r3, #12]
 801630c:	60fb      	str	r3, [r7, #12]
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	2b00      	cmp	r3, #0
 8016312:	d1ef      	bne.n	80162f4 <tcp_pcb_remove+0x28>
 8016314:	683b      	ldr	r3, [r7, #0]
 8016316:	2200      	movs	r2, #0
 8016318:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801631a:	6838      	ldr	r0, [r7, #0]
 801631c:	f7ff ff94 	bl	8016248 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8016320:	683b      	ldr	r3, [r7, #0]
 8016322:	7d1b      	ldrb	r3, [r3, #20]
 8016324:	2b0a      	cmp	r3, #10
 8016326:	d013      	beq.n	8016350 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 8016328:	683b      	ldr	r3, [r7, #0]
 801632a:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 801632c:	2b01      	cmp	r3, #1
 801632e:	d00f      	beq.n	8016350 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 8016330:	683b      	ldr	r3, [r7, #0]
 8016332:	7e9b      	ldrb	r3, [r3, #26]
 8016334:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 8016338:	2b00      	cmp	r3, #0
 801633a:	d009      	beq.n	8016350 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 801633c:	683b      	ldr	r3, [r7, #0]
 801633e:	7e9b      	ldrb	r3, [r3, #26]
 8016340:	f043 0302 	orr.w	r3, r3, #2
 8016344:	b2da      	uxtb	r2, r3
 8016346:	683b      	ldr	r3, [r7, #0]
 8016348:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 801634a:	6838      	ldr	r0, [r7, #0]
 801634c:	f003 fa6a 	bl	8019824 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8016350:	683b      	ldr	r3, [r7, #0]
 8016352:	7d1b      	ldrb	r3, [r3, #20]
 8016354:	2b01      	cmp	r3, #1
 8016356:	d020      	beq.n	801639a <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8016358:	683b      	ldr	r3, [r7, #0]
 801635a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801635c:	2b00      	cmp	r3, #0
 801635e:	d006      	beq.n	801636e <tcp_pcb_remove+0xa2>
 8016360:	4b13      	ldr	r3, [pc, #76]	@ (80163b0 <tcp_pcb_remove+0xe4>)
 8016362:	f240 7253 	movw	r2, #1875	@ 0x753
 8016366:	4913      	ldr	r1, [pc, #76]	@ (80163b4 <tcp_pcb_remove+0xe8>)
 8016368:	4813      	ldr	r0, [pc, #76]	@ (80163b8 <tcp_pcb_remove+0xec>)
 801636a:	f00a f899 	bl	80204a0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801636e:	683b      	ldr	r3, [r7, #0]
 8016370:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016372:	2b00      	cmp	r3, #0
 8016374:	d006      	beq.n	8016384 <tcp_pcb_remove+0xb8>
 8016376:	4b0e      	ldr	r3, [pc, #56]	@ (80163b0 <tcp_pcb_remove+0xe4>)
 8016378:	f240 7254 	movw	r2, #1876	@ 0x754
 801637c:	490f      	ldr	r1, [pc, #60]	@ (80163bc <tcp_pcb_remove+0xf0>)
 801637e:	480e      	ldr	r0, [pc, #56]	@ (80163b8 <tcp_pcb_remove+0xec>)
 8016380:	f00a f88e 	bl	80204a0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8016384:	683b      	ldr	r3, [r7, #0]
 8016386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016388:	2b00      	cmp	r3, #0
 801638a:	d006      	beq.n	801639a <tcp_pcb_remove+0xce>
 801638c:	4b08      	ldr	r3, [pc, #32]	@ (80163b0 <tcp_pcb_remove+0xe4>)
 801638e:	f240 7256 	movw	r2, #1878	@ 0x756
 8016392:	490b      	ldr	r1, [pc, #44]	@ (80163c0 <tcp_pcb_remove+0xf4>)
 8016394:	4808      	ldr	r0, [pc, #32]	@ (80163b8 <tcp_pcb_remove+0xec>)
 8016396:	f00a f883 	bl	80204a0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801639a:	683b      	ldr	r3, [r7, #0]
 801639c:	2200      	movs	r2, #0
 801639e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80163a0:	683b      	ldr	r3, [r7, #0]
 80163a2:	2200      	movs	r2, #0
 80163a4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80163a6:	bf00      	nop
 80163a8:	3710      	adds	r7, #16
 80163aa:	46bd      	mov	sp, r7
 80163ac:	bd80      	pop	{r7, pc}
 80163ae:	bf00      	nop
 80163b0:	080246a0 	.word	0x080246a0
 80163b4:	08024a58 	.word	0x08024a58
 80163b8:	080246dc 	.word	0x080246dc
 80163bc:	08024a70 	.word	0x08024a70
 80163c0:	08024a8c 	.word	0x08024a8c

080163c4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80163c4:	b480      	push	{r7}
 80163c6:	b083      	sub	sp, #12
 80163c8:	af00      	add	r7, sp, #0
 80163ca:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80163cc:	4b06      	ldr	r3, [pc, #24]	@ (80163e8 <tcp_next_iss+0x24>)
 80163ce:	681a      	ldr	r2, [r3, #0]
 80163d0:	4b06      	ldr	r3, [pc, #24]	@ (80163ec <tcp_next_iss+0x28>)
 80163d2:	681b      	ldr	r3, [r3, #0]
 80163d4:	4413      	add	r3, r2
 80163d6:	4a04      	ldr	r2, [pc, #16]	@ (80163e8 <tcp_next_iss+0x24>)
 80163d8:	6013      	str	r3, [r2, #0]
  return iss;
 80163da:	4b03      	ldr	r3, [pc, #12]	@ (80163e8 <tcp_next_iss+0x24>)
 80163dc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80163de:	4618      	mov	r0, r3
 80163e0:	370c      	adds	r7, #12
 80163e2:	46bd      	mov	sp, r7
 80163e4:	bc80      	pop	{r7}
 80163e6:	4770      	bx	lr
 80163e8:	20000114 	.word	0x20000114
 80163ec:	2000dd1c 	.word	0x2000dd1c

080163f0 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 80163f0:	b580      	push	{r7, lr}
 80163f2:	b084      	sub	sp, #16
 80163f4:	af00      	add	r7, sp, #0
 80163f6:	4603      	mov	r3, r0
 80163f8:	6039      	str	r1, [r7, #0]
 80163fa:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 80163fc:	6838      	ldr	r0, [r7, #0]
 80163fe:	f007 fda9 	bl	801df54 <ip4_route>
 8016402:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8016404:	68fb      	ldr	r3, [r7, #12]
 8016406:	2b00      	cmp	r3, #0
 8016408:	d101      	bne.n	801640e <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 801640a:	88fb      	ldrh	r3, [r7, #6]
 801640c:	e010      	b.n	8016430 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 801640e:	68fb      	ldr	r3, [r7, #12]
 8016410:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016412:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8016414:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8016418:	2b00      	cmp	r3, #0
 801641a:	d008      	beq.n	801642e <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 801641c:	897b      	ldrh	r3, [r7, #10]
 801641e:	3b28      	subs	r3, #40	@ 0x28
 8016420:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8016422:	893a      	ldrh	r2, [r7, #8]
 8016424:	88fb      	ldrh	r3, [r7, #6]
 8016426:	4293      	cmp	r3, r2
 8016428:	bf28      	it	cs
 801642a:	4613      	movcs	r3, r2
 801642c:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 801642e:	88fb      	ldrh	r3, [r7, #6]
}
 8016430:	4618      	mov	r0, r3
 8016432:	3710      	adds	r7, #16
 8016434:	46bd      	mov	sp, r7
 8016436:	bd80      	pop	{r7, pc}

08016438 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8016438:	b580      	push	{r7, lr}
 801643a:	b084      	sub	sp, #16
 801643c:	af00      	add	r7, sp, #0
 801643e:	6078      	str	r0, [r7, #4]
 8016440:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8016442:	683b      	ldr	r3, [r7, #0]
 8016444:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8016446:	e011      	b.n	801646c <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8016448:	68fb      	ldr	r3, [r7, #12]
 801644a:	681a      	ldr	r2, [r3, #0]
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	681b      	ldr	r3, [r3, #0]
 8016450:	429a      	cmp	r2, r3
 8016452:	d108      	bne.n	8016466 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8016454:	68fb      	ldr	r3, [r7, #12]
 8016456:	68db      	ldr	r3, [r3, #12]
 8016458:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801645a:	68f8      	ldr	r0, [r7, #12]
 801645c:	f7fe fe82 	bl	8015164 <tcp_abort>
      pcb = next;
 8016460:	68bb      	ldr	r3, [r7, #8]
 8016462:	60fb      	str	r3, [r7, #12]
 8016464:	e002      	b.n	801646c <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 8016466:	68fb      	ldr	r3, [r7, #12]
 8016468:	68db      	ldr	r3, [r3, #12]
 801646a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801646c:	68fb      	ldr	r3, [r7, #12]
 801646e:	2b00      	cmp	r3, #0
 8016470:	d1ea      	bne.n	8016448 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 8016472:	bf00      	nop
 8016474:	bf00      	nop
 8016476:	3710      	adds	r7, #16
 8016478:	46bd      	mov	sp, r7
 801647a:	bd80      	pop	{r7, pc}

0801647c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 801647c:	b580      	push	{r7, lr}
 801647e:	b084      	sub	sp, #16
 8016480:	af00      	add	r7, sp, #0
 8016482:	6078      	str	r0, [r7, #4]
 8016484:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	2b00      	cmp	r3, #0
 801648a:	d02c      	beq.n	80164e6 <tcp_netif_ip_addr_changed+0x6a>
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	681b      	ldr	r3, [r3, #0]
 8016490:	2b00      	cmp	r3, #0
 8016492:	d028      	beq.n	80164e6 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8016494:	4b16      	ldr	r3, [pc, #88]	@ (80164f0 <tcp_netif_ip_addr_changed+0x74>)
 8016496:	681b      	ldr	r3, [r3, #0]
 8016498:	4619      	mov	r1, r3
 801649a:	6878      	ldr	r0, [r7, #4]
 801649c:	f7ff ffcc 	bl	8016438 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80164a0:	4b14      	ldr	r3, [pc, #80]	@ (80164f4 <tcp_netif_ip_addr_changed+0x78>)
 80164a2:	681b      	ldr	r3, [r3, #0]
 80164a4:	4619      	mov	r1, r3
 80164a6:	6878      	ldr	r0, [r7, #4]
 80164a8:	f7ff ffc6 	bl	8016438 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80164ac:	683b      	ldr	r3, [r7, #0]
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d019      	beq.n	80164e6 <tcp_netif_ip_addr_changed+0x6a>
 80164b2:	683b      	ldr	r3, [r7, #0]
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d015      	beq.n	80164e6 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 80164ba:	4b0f      	ldr	r3, [pc, #60]	@ (80164f8 <tcp_netif_ip_addr_changed+0x7c>)
 80164bc:	681b      	ldr	r3, [r3, #0]
 80164be:	60fb      	str	r3, [r7, #12]
 80164c0:	e00e      	b.n	80164e0 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 80164c2:	68fb      	ldr	r3, [r7, #12]
 80164c4:	68db      	ldr	r3, [r3, #12]
 80164c6:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80164c8:	68fb      	ldr	r3, [r7, #12]
 80164ca:	681a      	ldr	r2, [r3, #0]
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	681b      	ldr	r3, [r3, #0]
 80164d0:	429a      	cmp	r2, r3
 80164d2:	d103      	bne.n	80164dc <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80164d4:	683b      	ldr	r3, [r7, #0]
 80164d6:	681a      	ldr	r2, [r3, #0]
 80164d8:	68fb      	ldr	r3, [r7, #12]
 80164da:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 80164dc:	68bb      	ldr	r3, [r7, #8]
 80164de:	60fb      	str	r3, [r7, #12]
 80164e0:	68fb      	ldr	r3, [r7, #12]
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	d1ed      	bne.n	80164c2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80164e6:	bf00      	nop
 80164e8:	3710      	adds	r7, #16
 80164ea:	46bd      	mov	sp, r7
 80164ec:	bd80      	pop	{r7, pc}
 80164ee:	bf00      	nop
 80164f0:	2000dd28 	.word	0x2000dd28
 80164f4:	2000dd20 	.word	0x2000dd20
 80164f8:	2000dd24 	.word	0x2000dd24

080164fc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80164fc:	b590      	push	{r4, r7, lr}
 80164fe:	b08b      	sub	sp, #44	@ 0x2c
 8016500:	af02      	add	r7, sp, #8
 8016502:	6078      	str	r0, [r7, #4]
 8016504:	6039      	str	r1, [r7, #0]

  LWIP_UNUSED_ARG(inp);

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 8016506:	4b99      	ldr	r3, [pc, #612]	@ (801676c <tcp_input+0x270>)
 8016508:	f8b3 3092 	ldrh.w	r3, [r3, #146]	@ 0x92
 801650c:	3301      	adds	r3, #1
 801650e:	b29a      	uxth	r2, r3
 8016510:	4b96      	ldr	r3, [pc, #600]	@ (801676c <tcp_input+0x270>)
 8016512:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
  MIB2_STATS_INC(mib2.tcpinsegs);
 8016516:	4b95      	ldr	r3, [pc, #596]	@ (801676c <tcp_input+0x270>)
 8016518:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 801651c:	3301      	adds	r3, #1
 801651e:	4a93      	ldr	r2, [pc, #588]	@ (801676c <tcp_input+0x270>)
 8016520:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  tcphdr = (struct tcp_hdr *)p->payload;
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	685b      	ldr	r3, [r3, #4]
 8016528:	4a91      	ldr	r2, [pc, #580]	@ (8016770 <tcp_input+0x274>)
 801652a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	895b      	ldrh	r3, [r3, #10]
 8016530:	2b13      	cmp	r3, #19
 8016532:	d808      	bhi.n	8016546 <tcp_input+0x4a>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 8016534:	4b8d      	ldr	r3, [pc, #564]	@ (801676c <tcp_input+0x270>)
 8016536:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 801653a:	3301      	adds	r3, #1
 801653c:	b29a      	uxth	r2, r3
 801653e:	4b8b      	ldr	r3, [pc, #556]	@ (801676c <tcp_input+0x270>)
 8016540:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
    goto dropped;
 8016544:	e3e0      	b.n	8016d08 <tcp_input+0x80c>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8016546:	4b8b      	ldr	r3, [pc, #556]	@ (8016774 <tcp_input+0x278>)
 8016548:	695b      	ldr	r3, [r3, #20]
 801654a:	4a8a      	ldr	r2, [pc, #552]	@ (8016774 <tcp_input+0x278>)
 801654c:	6812      	ldr	r2, [r2, #0]
 801654e:	4611      	mov	r1, r2
 8016550:	4618      	mov	r0, r3
 8016552:	f008 f863 	bl	801e61c <ip4_addr_isbroadcast_u32>
 8016556:	4603      	mov	r3, r0
 8016558:	2b00      	cmp	r3, #0
 801655a:	d105      	bne.n	8016568 <tcp_input+0x6c>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801655c:	4b85      	ldr	r3, [pc, #532]	@ (8016774 <tcp_input+0x278>)
 801655e:	695b      	ldr	r3, [r3, #20]
 8016560:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8016564:	2be0      	cmp	r3, #224	@ 0xe0
 8016566:	d108      	bne.n	801657a <tcp_input+0x7e>
    TCP_STATS_INC(tcp.proterr);
 8016568:	4b80      	ldr	r3, [pc, #512]	@ (801676c <tcp_input+0x270>)
 801656a:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 801656e:	3301      	adds	r3, #1
 8016570:	b29a      	uxth	r2, r3
 8016572:	4b7e      	ldr	r3, [pc, #504]	@ (801676c <tcp_input+0x270>)
 8016574:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
    goto dropped;
 8016578:	e3c6      	b.n	8016d08 <tcp_input+0x80c>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 801657a:	4b7d      	ldr	r3, [pc, #500]	@ (8016770 <tcp_input+0x274>)
 801657c:	681b      	ldr	r3, [r3, #0]
 801657e:	899b      	ldrh	r3, [r3, #12]
 8016580:	b29b      	uxth	r3, r3
 8016582:	4618      	mov	r0, r3
 8016584:	f7fc fd4c 	bl	8013020 <lwip_htons>
 8016588:	4603      	mov	r3, r0
 801658a:	0b1b      	lsrs	r3, r3, #12
 801658c:	b29b      	uxth	r3, r3
 801658e:	b2db      	uxtb	r3, r3
 8016590:	009b      	lsls	r3, r3, #2
 8016592:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8016594:	7cbb      	ldrb	r3, [r7, #18]
 8016596:	2b13      	cmp	r3, #19
 8016598:	d905      	bls.n	80165a6 <tcp_input+0xaa>
 801659a:	7cbb      	ldrb	r3, [r7, #18]
 801659c:	b29a      	uxth	r2, r3
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	891b      	ldrh	r3, [r3, #8]
 80165a2:	429a      	cmp	r2, r3
 80165a4:	d908      	bls.n	80165b8 <tcp_input+0xbc>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
 80165a6:	4b71      	ldr	r3, [pc, #452]	@ (801676c <tcp_input+0x270>)
 80165a8:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 80165ac:	3301      	adds	r3, #1
 80165ae:	b29a      	uxth	r2, r3
 80165b0:	4b6e      	ldr	r3, [pc, #440]	@ (801676c <tcp_input+0x270>)
 80165b2:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
    goto dropped;
 80165b6:	e3a7      	b.n	8016d08 <tcp_input+0x80c>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 80165b8:	7cbb      	ldrb	r3, [r7, #18]
 80165ba:	b29b      	uxth	r3, r3
 80165bc:	3b14      	subs	r3, #20
 80165be:	b29a      	uxth	r2, r3
 80165c0:	4b6d      	ldr	r3, [pc, #436]	@ (8016778 <tcp_input+0x27c>)
 80165c2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80165c4:	4b6d      	ldr	r3, [pc, #436]	@ (801677c <tcp_input+0x280>)
 80165c6:	2200      	movs	r2, #0
 80165c8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	895a      	ldrh	r2, [r3, #10]
 80165ce:	7cbb      	ldrb	r3, [r7, #18]
 80165d0:	b29b      	uxth	r3, r3
 80165d2:	429a      	cmp	r2, r3
 80165d4:	d30d      	bcc.n	80165f2 <tcp_input+0xf6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80165d6:	4b68      	ldr	r3, [pc, #416]	@ (8016778 <tcp_input+0x27c>)
 80165d8:	881a      	ldrh	r2, [r3, #0]
 80165da:	4b69      	ldr	r3, [pc, #420]	@ (8016780 <tcp_input+0x284>)
 80165dc:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 80165de:	7cbb      	ldrb	r3, [r7, #18]
 80165e0:	b29b      	uxth	r3, r3
 80165e2:	425b      	negs	r3, r3
 80165e4:	b29b      	uxth	r3, r3
 80165e6:	b21b      	sxth	r3, r3
 80165e8:	4619      	mov	r1, r3
 80165ea:	6878      	ldr	r0, [r7, #4]
 80165ec:	f7fd ff4c 	bl	8014488 <pbuf_header>
 80165f0:	e05d      	b.n	80166ae <tcp_input+0x1b2>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	681b      	ldr	r3, [r3, #0]
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d105      	bne.n	8016606 <tcp_input+0x10a>
 80165fa:	4b62      	ldr	r3, [pc, #392]	@ (8016784 <tcp_input+0x288>)
 80165fc:	22b2      	movs	r2, #178	@ 0xb2
 80165fe:	4962      	ldr	r1, [pc, #392]	@ (8016788 <tcp_input+0x28c>)
 8016600:	4862      	ldr	r0, [pc, #392]	@ (801678c <tcp_input+0x290>)
 8016602:	f009 ff4d 	bl	80204a0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 8016606:	f06f 0113 	mvn.w	r1, #19
 801660a:	6878      	ldr	r0, [r7, #4]
 801660c:	f7fd ff3c 	bl	8014488 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	895a      	ldrh	r2, [r3, #10]
 8016614:	4b5a      	ldr	r3, [pc, #360]	@ (8016780 <tcp_input+0x284>)
 8016616:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8016618:	4b57      	ldr	r3, [pc, #348]	@ (8016778 <tcp_input+0x27c>)
 801661a:	881a      	ldrh	r2, [r3, #0]
 801661c:	4b58      	ldr	r3, [pc, #352]	@ (8016780 <tcp_input+0x284>)
 801661e:	881b      	ldrh	r3, [r3, #0]
 8016620:	1ad3      	subs	r3, r2, r3
 8016622:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8016624:	4b56      	ldr	r3, [pc, #344]	@ (8016780 <tcp_input+0x284>)
 8016626:	881b      	ldrh	r3, [r3, #0]
 8016628:	425b      	negs	r3, r3
 801662a:	b29b      	uxth	r3, r3
 801662c:	b21b      	sxth	r3, r3
 801662e:	4619      	mov	r1, r3
 8016630:	6878      	ldr	r0, [r7, #4]
 8016632:	f7fd ff29 	bl	8014488 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	681b      	ldr	r3, [r3, #0]
 801663a:	895b      	ldrh	r3, [r3, #10]
 801663c:	8a3a      	ldrh	r2, [r7, #16]
 801663e:	429a      	cmp	r2, r3
 8016640:	d908      	bls.n	8016654 <tcp_input+0x158>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
 8016642:	4b4a      	ldr	r3, [pc, #296]	@ (801676c <tcp_input+0x270>)
 8016644:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8016648:	3301      	adds	r3, #1
 801664a:	b29a      	uxth	r2, r3
 801664c:	4b47      	ldr	r3, [pc, #284]	@ (801676c <tcp_input+0x270>)
 801664e:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
      goto dropped;
 8016652:	e359      	b.n	8016d08 <tcp_input+0x80c>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	681b      	ldr	r3, [r3, #0]
 8016658:	685b      	ldr	r3, [r3, #4]
 801665a:	4a48      	ldr	r2, [pc, #288]	@ (801677c <tcp_input+0x280>)
 801665c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	681a      	ldr	r2, [r3, #0]
 8016662:	8a3b      	ldrh	r3, [r7, #16]
 8016664:	425b      	negs	r3, r3
 8016666:	b29b      	uxth	r3, r3
 8016668:	b21b      	sxth	r3, r3
 801666a:	4619      	mov	r1, r3
 801666c:	4610      	mov	r0, r2
 801666e:	f7fd ff0b 	bl	8014488 <pbuf_header>
    p->tot_len -= opt2len;
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	891a      	ldrh	r2, [r3, #8]
 8016676:	8a3b      	ldrh	r3, [r7, #16]
 8016678:	1ad3      	subs	r3, r2, r3
 801667a:	b29a      	uxth	r2, r3
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	895b      	ldrh	r3, [r3, #10]
 8016684:	2b00      	cmp	r3, #0
 8016686:	d005      	beq.n	8016694 <tcp_input+0x198>
 8016688:	4b3e      	ldr	r3, [pc, #248]	@ (8016784 <tcp_input+0x288>)
 801668a:	22cf      	movs	r2, #207	@ 0xcf
 801668c:	4940      	ldr	r1, [pc, #256]	@ (8016790 <tcp_input+0x294>)
 801668e:	483f      	ldr	r0, [pc, #252]	@ (801678c <tcp_input+0x290>)
 8016690:	f009 ff06 	bl	80204a0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	891a      	ldrh	r2, [r3, #8]
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	681b      	ldr	r3, [r3, #0]
 801669c:	891b      	ldrh	r3, [r3, #8]
 801669e:	429a      	cmp	r2, r3
 80166a0:	d005      	beq.n	80166ae <tcp_input+0x1b2>
 80166a2:	4b38      	ldr	r3, [pc, #224]	@ (8016784 <tcp_input+0x288>)
 80166a4:	22d0      	movs	r2, #208	@ 0xd0
 80166a6:	493b      	ldr	r1, [pc, #236]	@ (8016794 <tcp_input+0x298>)
 80166a8:	4838      	ldr	r0, [pc, #224]	@ (801678c <tcp_input+0x290>)
 80166aa:	f009 fef9 	bl	80204a0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80166ae:	4b30      	ldr	r3, [pc, #192]	@ (8016770 <tcp_input+0x274>)
 80166b0:	681b      	ldr	r3, [r3, #0]
 80166b2:	881b      	ldrh	r3, [r3, #0]
 80166b4:	b29b      	uxth	r3, r3
 80166b6:	4a2e      	ldr	r2, [pc, #184]	@ (8016770 <tcp_input+0x274>)
 80166b8:	6814      	ldr	r4, [r2, #0]
 80166ba:	4618      	mov	r0, r3
 80166bc:	f7fc fcb0 	bl	8013020 <lwip_htons>
 80166c0:	4603      	mov	r3, r0
 80166c2:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80166c4:	4b2a      	ldr	r3, [pc, #168]	@ (8016770 <tcp_input+0x274>)
 80166c6:	681b      	ldr	r3, [r3, #0]
 80166c8:	885b      	ldrh	r3, [r3, #2]
 80166ca:	b29b      	uxth	r3, r3
 80166cc:	4a28      	ldr	r2, [pc, #160]	@ (8016770 <tcp_input+0x274>)
 80166ce:	6814      	ldr	r4, [r2, #0]
 80166d0:	4618      	mov	r0, r3
 80166d2:	f7fc fca5 	bl	8013020 <lwip_htons>
 80166d6:	4603      	mov	r3, r0
 80166d8:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80166da:	4b25      	ldr	r3, [pc, #148]	@ (8016770 <tcp_input+0x274>)
 80166dc:	681b      	ldr	r3, [r3, #0]
 80166de:	685b      	ldr	r3, [r3, #4]
 80166e0:	4a23      	ldr	r2, [pc, #140]	@ (8016770 <tcp_input+0x274>)
 80166e2:	6814      	ldr	r4, [r2, #0]
 80166e4:	4618      	mov	r0, r3
 80166e6:	f7fc fca8 	bl	801303a <lwip_htonl>
 80166ea:	4603      	mov	r3, r0
 80166ec:	6063      	str	r3, [r4, #4]
 80166ee:	6863      	ldr	r3, [r4, #4]
 80166f0:	4a29      	ldr	r2, [pc, #164]	@ (8016798 <tcp_input+0x29c>)
 80166f2:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80166f4:	4b1e      	ldr	r3, [pc, #120]	@ (8016770 <tcp_input+0x274>)
 80166f6:	681b      	ldr	r3, [r3, #0]
 80166f8:	689b      	ldr	r3, [r3, #8]
 80166fa:	4a1d      	ldr	r2, [pc, #116]	@ (8016770 <tcp_input+0x274>)
 80166fc:	6814      	ldr	r4, [r2, #0]
 80166fe:	4618      	mov	r0, r3
 8016700:	f7fc fc9b 	bl	801303a <lwip_htonl>
 8016704:	4603      	mov	r3, r0
 8016706:	60a3      	str	r3, [r4, #8]
 8016708:	68a3      	ldr	r3, [r4, #8]
 801670a:	4a24      	ldr	r2, [pc, #144]	@ (801679c <tcp_input+0x2a0>)
 801670c:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801670e:	4b18      	ldr	r3, [pc, #96]	@ (8016770 <tcp_input+0x274>)
 8016710:	681b      	ldr	r3, [r3, #0]
 8016712:	89db      	ldrh	r3, [r3, #14]
 8016714:	b29b      	uxth	r3, r3
 8016716:	4a16      	ldr	r2, [pc, #88]	@ (8016770 <tcp_input+0x274>)
 8016718:	6814      	ldr	r4, [r2, #0]
 801671a:	4618      	mov	r0, r3
 801671c:	f7fc fc80 	bl	8013020 <lwip_htons>
 8016720:	4603      	mov	r3, r0
 8016722:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8016724:	4b12      	ldr	r3, [pc, #72]	@ (8016770 <tcp_input+0x274>)
 8016726:	681b      	ldr	r3, [r3, #0]
 8016728:	899b      	ldrh	r3, [r3, #12]
 801672a:	b29b      	uxth	r3, r3
 801672c:	4618      	mov	r0, r3
 801672e:	f7fc fc77 	bl	8013020 <lwip_htons>
 8016732:	4603      	mov	r3, r0
 8016734:	b2db      	uxtb	r3, r3
 8016736:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801673a:	b2da      	uxtb	r2, r3
 801673c:	4b18      	ldr	r3, [pc, #96]	@ (80167a0 <tcp_input+0x2a4>)
 801673e:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	891b      	ldrh	r3, [r3, #8]
 8016744:	4a16      	ldr	r2, [pc, #88]	@ (80167a0 <tcp_input+0x2a4>)
 8016746:	7812      	ldrb	r2, [r2, #0]
 8016748:	f002 0203 	and.w	r2, r2, #3
 801674c:	2a00      	cmp	r2, #0
 801674e:	bf14      	ite	ne
 8016750:	2201      	movne	r2, #1
 8016752:	2200      	moveq	r2, #0
 8016754:	b2d2      	uxtb	r2, r2
 8016756:	4413      	add	r3, r2
 8016758:	b29a      	uxth	r2, r3
 801675a:	4b12      	ldr	r3, [pc, #72]	@ (80167a4 <tcp_input+0x2a8>)
 801675c:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801675e:	2300      	movs	r3, #0
 8016760:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016762:	4b11      	ldr	r3, [pc, #68]	@ (80167a8 <tcp_input+0x2ac>)
 8016764:	681b      	ldr	r3, [r3, #0]
 8016766:	61fb      	str	r3, [r7, #28]
 8016768:	e08d      	b.n	8016886 <tcp_input+0x38a>
 801676a:	bf00      	nop
 801676c:	2000db84 	.word	0x2000db84
 8016770:	2000dd44 	.word	0x2000dd44
 8016774:	2000a59c 	.word	0x2000a59c
 8016778:	2000dd48 	.word	0x2000dd48
 801677c:	2000dd4c 	.word	0x2000dd4c
 8016780:	2000dd4a 	.word	0x2000dd4a
 8016784:	08024aa4 	.word	0x08024aa4
 8016788:	08024ad8 	.word	0x08024ad8
 801678c:	08024ae8 	.word	0x08024ae8
 8016790:	08024b10 	.word	0x08024b10
 8016794:	08024b1c 	.word	0x08024b1c
 8016798:	2000dd54 	.word	0x2000dd54
 801679c:	2000dd58 	.word	0x2000dd58
 80167a0:	2000dd60 	.word	0x2000dd60
 80167a4:	2000dd5e 	.word	0x2000dd5e
 80167a8:	2000dd28 	.word	0x2000dd28
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80167ac:	69fb      	ldr	r3, [r7, #28]
 80167ae:	7d1b      	ldrb	r3, [r3, #20]
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d105      	bne.n	80167c0 <tcp_input+0x2c4>
 80167b4:	4b77      	ldr	r3, [pc, #476]	@ (8016994 <tcp_input+0x498>)
 80167b6:	22e2      	movs	r2, #226	@ 0xe2
 80167b8:	4977      	ldr	r1, [pc, #476]	@ (8016998 <tcp_input+0x49c>)
 80167ba:	4878      	ldr	r0, [pc, #480]	@ (801699c <tcp_input+0x4a0>)
 80167bc:	f009 fe70 	bl	80204a0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80167c0:	69fb      	ldr	r3, [r7, #28]
 80167c2:	7d1b      	ldrb	r3, [r3, #20]
 80167c4:	2b0a      	cmp	r3, #10
 80167c6:	d105      	bne.n	80167d4 <tcp_input+0x2d8>
 80167c8:	4b72      	ldr	r3, [pc, #456]	@ (8016994 <tcp_input+0x498>)
 80167ca:	22e3      	movs	r2, #227	@ 0xe3
 80167cc:	4974      	ldr	r1, [pc, #464]	@ (80169a0 <tcp_input+0x4a4>)
 80167ce:	4873      	ldr	r0, [pc, #460]	@ (801699c <tcp_input+0x4a0>)
 80167d0:	f009 fe66 	bl	80204a0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80167d4:	69fb      	ldr	r3, [r7, #28]
 80167d6:	7d1b      	ldrb	r3, [r3, #20]
 80167d8:	2b01      	cmp	r3, #1
 80167da:	d105      	bne.n	80167e8 <tcp_input+0x2ec>
 80167dc:	4b6d      	ldr	r3, [pc, #436]	@ (8016994 <tcp_input+0x498>)
 80167de:	22e4      	movs	r2, #228	@ 0xe4
 80167e0:	4970      	ldr	r1, [pc, #448]	@ (80169a4 <tcp_input+0x4a8>)
 80167e2:	486e      	ldr	r0, [pc, #440]	@ (801699c <tcp_input+0x4a0>)
 80167e4:	f009 fe5c 	bl	80204a0 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 80167e8:	69fb      	ldr	r3, [r7, #28]
 80167ea:	8b1a      	ldrh	r2, [r3, #24]
 80167ec:	4b6e      	ldr	r3, [pc, #440]	@ (80169a8 <tcp_input+0x4ac>)
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	881b      	ldrh	r3, [r3, #0]
 80167f2:	b29b      	uxth	r3, r3
 80167f4:	429a      	cmp	r2, r3
 80167f6:	d141      	bne.n	801687c <tcp_input+0x380>
        pcb->local_port == tcphdr->dest &&
 80167f8:	69fb      	ldr	r3, [r7, #28]
 80167fa:	8ada      	ldrh	r2, [r3, #22]
 80167fc:	4b6a      	ldr	r3, [pc, #424]	@ (80169a8 <tcp_input+0x4ac>)
 80167fe:	681b      	ldr	r3, [r3, #0]
 8016800:	885b      	ldrh	r3, [r3, #2]
 8016802:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8016804:	429a      	cmp	r2, r3
 8016806:	d139      	bne.n	801687c <tcp_input+0x380>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016808:	69fb      	ldr	r3, [r7, #28]
 801680a:	685a      	ldr	r2, [r3, #4]
 801680c:	4b67      	ldr	r3, [pc, #412]	@ (80169ac <tcp_input+0x4b0>)
 801680e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8016810:	429a      	cmp	r2, r3
 8016812:	d133      	bne.n	801687c <tcp_input+0x380>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016814:	69fb      	ldr	r3, [r7, #28]
 8016816:	681a      	ldr	r2, [r3, #0]
 8016818:	4b64      	ldr	r3, [pc, #400]	@ (80169ac <tcp_input+0x4b0>)
 801681a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801681c:	429a      	cmp	r2, r3
 801681e:	d12d      	bne.n	801687c <tcp_input+0x380>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8016820:	69fb      	ldr	r3, [r7, #28]
 8016822:	68db      	ldr	r3, [r3, #12]
 8016824:	69fa      	ldr	r2, [r7, #28]
 8016826:	429a      	cmp	r2, r3
 8016828:	d105      	bne.n	8016836 <tcp_input+0x33a>
 801682a:	4b5a      	ldr	r3, [pc, #360]	@ (8016994 <tcp_input+0x498>)
 801682c:	22ec      	movs	r2, #236	@ 0xec
 801682e:	4960      	ldr	r1, [pc, #384]	@ (80169b0 <tcp_input+0x4b4>)
 8016830:	485a      	ldr	r0, [pc, #360]	@ (801699c <tcp_input+0x4a0>)
 8016832:	f009 fe35 	bl	80204a0 <iprintf>
      if (prev != NULL) {
 8016836:	69bb      	ldr	r3, [r7, #24]
 8016838:	2b00      	cmp	r3, #0
 801683a:	d00b      	beq.n	8016854 <tcp_input+0x358>
        prev->next = pcb->next;
 801683c:	69fb      	ldr	r3, [r7, #28]
 801683e:	68da      	ldr	r2, [r3, #12]
 8016840:	69bb      	ldr	r3, [r7, #24]
 8016842:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8016844:	4b5b      	ldr	r3, [pc, #364]	@ (80169b4 <tcp_input+0x4b8>)
 8016846:	681a      	ldr	r2, [r3, #0]
 8016848:	69fb      	ldr	r3, [r7, #28]
 801684a:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801684c:	4a59      	ldr	r2, [pc, #356]	@ (80169b4 <tcp_input+0x4b8>)
 801684e:	69fb      	ldr	r3, [r7, #28]
 8016850:	6013      	str	r3, [r2, #0]
 8016852:	e007      	b.n	8016864 <tcp_input+0x368>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8016854:	4b58      	ldr	r3, [pc, #352]	@ (80169b8 <tcp_input+0x4bc>)
 8016856:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 801685a:	3301      	adds	r3, #1
 801685c:	b29a      	uxth	r2, r3
 801685e:	4b56      	ldr	r3, [pc, #344]	@ (80169b8 <tcp_input+0x4bc>)
 8016860:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8016864:	69fb      	ldr	r3, [r7, #28]
 8016866:	68db      	ldr	r3, [r3, #12]
 8016868:	69fa      	ldr	r2, [r7, #28]
 801686a:	429a      	cmp	r2, r3
 801686c:	d10f      	bne.n	801688e <tcp_input+0x392>
 801686e:	4b49      	ldr	r3, [pc, #292]	@ (8016994 <tcp_input+0x498>)
 8016870:	22f4      	movs	r2, #244	@ 0xf4
 8016872:	4952      	ldr	r1, [pc, #328]	@ (80169bc <tcp_input+0x4c0>)
 8016874:	4849      	ldr	r0, [pc, #292]	@ (801699c <tcp_input+0x4a0>)
 8016876:	f009 fe13 	bl	80204a0 <iprintf>
      break;
 801687a:	e008      	b.n	801688e <tcp_input+0x392>
    }
    prev = pcb;
 801687c:	69fb      	ldr	r3, [r7, #28]
 801687e:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016880:	69fb      	ldr	r3, [r7, #28]
 8016882:	68db      	ldr	r3, [r3, #12]
 8016884:	61fb      	str	r3, [r7, #28]
 8016886:	69fb      	ldr	r3, [r7, #28]
 8016888:	2b00      	cmp	r3, #0
 801688a:	d18f      	bne.n	80167ac <tcp_input+0x2b0>
 801688c:	e000      	b.n	8016890 <tcp_input+0x394>
      break;
 801688e:	bf00      	nop
  }

  if (pcb == NULL) {
 8016890:	69fb      	ldr	r3, [r7, #28]
 8016892:	2b00      	cmp	r3, #0
 8016894:	f040 809a 	bne.w	80169cc <tcp_input+0x4d0>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016898:	4b49      	ldr	r3, [pc, #292]	@ (80169c0 <tcp_input+0x4c4>)
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	61fb      	str	r3, [r7, #28]
 801689e:	e02f      	b.n	8016900 <tcp_input+0x404>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80168a0:	69fb      	ldr	r3, [r7, #28]
 80168a2:	7d1b      	ldrb	r3, [r3, #20]
 80168a4:	2b0a      	cmp	r3, #10
 80168a6:	d005      	beq.n	80168b4 <tcp_input+0x3b8>
 80168a8:	4b3a      	ldr	r3, [pc, #232]	@ (8016994 <tcp_input+0x498>)
 80168aa:	22fe      	movs	r2, #254	@ 0xfe
 80168ac:	4945      	ldr	r1, [pc, #276]	@ (80169c4 <tcp_input+0x4c8>)
 80168ae:	483b      	ldr	r0, [pc, #236]	@ (801699c <tcp_input+0x4a0>)
 80168b0:	f009 fdf6 	bl	80204a0 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 80168b4:	69fb      	ldr	r3, [r7, #28]
 80168b6:	8b1a      	ldrh	r2, [r3, #24]
 80168b8:	4b3b      	ldr	r3, [pc, #236]	@ (80169a8 <tcp_input+0x4ac>)
 80168ba:	681b      	ldr	r3, [r3, #0]
 80168bc:	881b      	ldrh	r3, [r3, #0]
 80168be:	b29b      	uxth	r3, r3
 80168c0:	429a      	cmp	r2, r3
 80168c2:	d11a      	bne.n	80168fa <tcp_input+0x3fe>
          pcb->local_port == tcphdr->dest &&
 80168c4:	69fb      	ldr	r3, [r7, #28]
 80168c6:	8ada      	ldrh	r2, [r3, #22]
 80168c8:	4b37      	ldr	r3, [pc, #220]	@ (80169a8 <tcp_input+0x4ac>)
 80168ca:	681b      	ldr	r3, [r3, #0]
 80168cc:	885b      	ldrh	r3, [r3, #2]
 80168ce:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80168d0:	429a      	cmp	r2, r3
 80168d2:	d112      	bne.n	80168fa <tcp_input+0x3fe>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80168d4:	69fb      	ldr	r3, [r7, #28]
 80168d6:	685a      	ldr	r2, [r3, #4]
 80168d8:	4b34      	ldr	r3, [pc, #208]	@ (80169ac <tcp_input+0x4b0>)
 80168da:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80168dc:	429a      	cmp	r2, r3
 80168de:	d10c      	bne.n	80168fa <tcp_input+0x3fe>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80168e0:	69fb      	ldr	r3, [r7, #28]
 80168e2:	681a      	ldr	r2, [r3, #0]
 80168e4:	4b31      	ldr	r3, [pc, #196]	@ (80169ac <tcp_input+0x4b0>)
 80168e6:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80168e8:	429a      	cmp	r2, r3
 80168ea:	d106      	bne.n	80168fa <tcp_input+0x3fe>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 80168ec:	69f8      	ldr	r0, [r7, #28]
 80168ee:	f000 fb5b 	bl	8016fa8 <tcp_timewait_input>
        pbuf_free(p);
 80168f2:	6878      	ldr	r0, [r7, #4]
 80168f4:	f7fd fdec 	bl	80144d0 <pbuf_free>
        return;
 80168f8:	e21a      	b.n	8016d30 <tcp_input+0x834>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80168fa:	69fb      	ldr	r3, [r7, #28]
 80168fc:	68db      	ldr	r3, [r3, #12]
 80168fe:	61fb      	str	r3, [r7, #28]
 8016900:	69fb      	ldr	r3, [r7, #28]
 8016902:	2b00      	cmp	r3, #0
 8016904:	d1cc      	bne.n	80168a0 <tcp_input+0x3a4>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8016906:	2300      	movs	r3, #0
 8016908:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801690a:	4b2f      	ldr	r3, [pc, #188]	@ (80169c8 <tcp_input+0x4cc>)
 801690c:	681b      	ldr	r3, [r3, #0]
 801690e:	617b      	str	r3, [r7, #20]
 8016910:	e019      	b.n	8016946 <tcp_input+0x44a>
      if (lpcb->local_port == tcphdr->dest) {
 8016912:	697b      	ldr	r3, [r7, #20]
 8016914:	8ada      	ldrh	r2, [r3, #22]
 8016916:	4b24      	ldr	r3, [pc, #144]	@ (80169a8 <tcp_input+0x4ac>)
 8016918:	681b      	ldr	r3, [r3, #0]
 801691a:	885b      	ldrh	r3, [r3, #2]
 801691c:	b29b      	uxth	r3, r3
 801691e:	429a      	cmp	r2, r3
 8016920:	d10c      	bne.n	801693c <tcp_input+0x440>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8016922:	697b      	ldr	r3, [r7, #20]
 8016924:	681a      	ldr	r2, [r3, #0]
 8016926:	4b21      	ldr	r3, [pc, #132]	@ (80169ac <tcp_input+0x4b0>)
 8016928:	695b      	ldr	r3, [r3, #20]
 801692a:	429a      	cmp	r2, r3
 801692c:	d00f      	beq.n	801694e <tcp_input+0x452>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801692e:	697b      	ldr	r3, [r7, #20]
 8016930:	2b00      	cmp	r3, #0
 8016932:	d00d      	beq.n	8016950 <tcp_input+0x454>
 8016934:	697b      	ldr	r3, [r7, #20]
 8016936:	681b      	ldr	r3, [r3, #0]
 8016938:	2b00      	cmp	r3, #0
 801693a:	d009      	beq.n	8016950 <tcp_input+0x454>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801693c:	697b      	ldr	r3, [r7, #20]
 801693e:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016940:	697b      	ldr	r3, [r7, #20]
 8016942:	68db      	ldr	r3, [r3, #12]
 8016944:	617b      	str	r3, [r7, #20]
 8016946:	697b      	ldr	r3, [r7, #20]
 8016948:	2b00      	cmp	r3, #0
 801694a:	d1e2      	bne.n	8016912 <tcp_input+0x416>
 801694c:	e000      	b.n	8016950 <tcp_input+0x454>
            break;
 801694e:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8016950:	697b      	ldr	r3, [r7, #20]
 8016952:	2b00      	cmp	r3, #0
 8016954:	d03a      	beq.n	80169cc <tcp_input+0x4d0>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8016956:	69bb      	ldr	r3, [r7, #24]
 8016958:	2b00      	cmp	r3, #0
 801695a:	d00b      	beq.n	8016974 <tcp_input+0x478>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801695c:	697b      	ldr	r3, [r7, #20]
 801695e:	68da      	ldr	r2, [r3, #12]
 8016960:	69bb      	ldr	r3, [r7, #24]
 8016962:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8016964:	4b18      	ldr	r3, [pc, #96]	@ (80169c8 <tcp_input+0x4cc>)
 8016966:	681a      	ldr	r2, [r3, #0]
 8016968:	697b      	ldr	r3, [r7, #20]
 801696a:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801696c:	4a16      	ldr	r2, [pc, #88]	@ (80169c8 <tcp_input+0x4cc>)
 801696e:	697b      	ldr	r3, [r7, #20]
 8016970:	6013      	str	r3, [r2, #0]
 8016972:	e007      	b.n	8016984 <tcp_input+0x488>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8016974:	4b10      	ldr	r3, [pc, #64]	@ (80169b8 <tcp_input+0x4bc>)
 8016976:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 801697a:	3301      	adds	r3, #1
 801697c:	b29a      	uxth	r2, r3
 801697e:	4b0e      	ldr	r3, [pc, #56]	@ (80169b8 <tcp_input+0x4bc>)
 8016980:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 8016984:	6978      	ldr	r0, [r7, #20]
 8016986:	f000 fa1d 	bl	8016dc4 <tcp_listen_input>
      pbuf_free(p);
 801698a:	6878      	ldr	r0, [r7, #4]
 801698c:	f7fd fda0 	bl	80144d0 <pbuf_free>
      return;
 8016990:	e1ce      	b.n	8016d30 <tcp_input+0x834>
 8016992:	bf00      	nop
 8016994:	08024aa4 	.word	0x08024aa4
 8016998:	08024b3c 	.word	0x08024b3c
 801699c:	08024ae8 	.word	0x08024ae8
 80169a0:	08024b64 	.word	0x08024b64
 80169a4:	08024b90 	.word	0x08024b90
 80169a8:	2000dd44 	.word	0x2000dd44
 80169ac:	2000a59c 	.word	0x2000a59c
 80169b0:	08024bb8 	.word	0x08024bb8
 80169b4:	2000dd28 	.word	0x2000dd28
 80169b8:	2000db84 	.word	0x2000db84
 80169bc:	08024be4 	.word	0x08024be4
 80169c0:	2000dd2c 	.word	0x2000dd2c
 80169c4:	08024c10 	.word	0x08024c10
 80169c8:	2000dd24 	.word	0x2000dd24
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 80169cc:	69fb      	ldr	r3, [r7, #28]
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	f000 8164 	beq.w	8016c9c <tcp_input+0x7a0>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80169d4:	4b9a      	ldr	r3, [pc, #616]	@ (8016c40 <tcp_input+0x744>)
 80169d6:	2200      	movs	r2, #0
 80169d8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	891a      	ldrh	r2, [r3, #8]
 80169de:	4b98      	ldr	r3, [pc, #608]	@ (8016c40 <tcp_input+0x744>)
 80169e0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80169e2:	4a97      	ldr	r2, [pc, #604]	@ (8016c40 <tcp_input+0x744>)
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80169e8:	4b96      	ldr	r3, [pc, #600]	@ (8016c44 <tcp_input+0x748>)
 80169ea:	681b      	ldr	r3, [r3, #0]
 80169ec:	4a94      	ldr	r2, [pc, #592]	@ (8016c40 <tcp_input+0x744>)
 80169ee:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80169f0:	4b95      	ldr	r3, [pc, #596]	@ (8016c48 <tcp_input+0x74c>)
 80169f2:	2200      	movs	r2, #0
 80169f4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80169f6:	4b95      	ldr	r3, [pc, #596]	@ (8016c4c <tcp_input+0x750>)
 80169f8:	2200      	movs	r2, #0
 80169fa:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80169fc:	4b94      	ldr	r3, [pc, #592]	@ (8016c50 <tcp_input+0x754>)
 80169fe:	2200      	movs	r2, #0
 8016a00:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8016a02:	4b94      	ldr	r3, [pc, #592]	@ (8016c54 <tcp_input+0x758>)
 8016a04:	781b      	ldrb	r3, [r3, #0]
 8016a06:	f003 0308 	and.w	r3, r3, #8
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d006      	beq.n	8016a1c <tcp_input+0x520>
      p->flags |= PBUF_FLAG_PUSH;
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	7b5b      	ldrb	r3, [r3, #13]
 8016a12:	f043 0301 	orr.w	r3, r3, #1
 8016a16:	b2da      	uxtb	r2, r3
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8016a1c:	69fb      	ldr	r3, [r7, #28]
 8016a1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	d025      	beq.n	8016a70 <tcp_input+0x574>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016a24:	69f8      	ldr	r0, [r7, #28]
 8016a26:	f7ff f909 	bl	8015c3c <tcp_process_refused_data>
 8016a2a:	4603      	mov	r3, r0
 8016a2c:	f113 0f0d 	cmn.w	r3, #13
 8016a30:	d007      	beq.n	8016a42 <tcp_input+0x546>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8016a32:	69fb      	ldr	r3, [r7, #28]
 8016a34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	d01a      	beq.n	8016a70 <tcp_input+0x574>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8016a3a:	4b87      	ldr	r3, [pc, #540]	@ (8016c58 <tcp_input+0x75c>)
 8016a3c:	881b      	ldrh	r3, [r3, #0]
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d016      	beq.n	8016a70 <tcp_input+0x574>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8016a42:	69fb      	ldr	r3, [r7, #28]
 8016a44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	d102      	bne.n	8016a50 <tcp_input+0x554>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8016a4a:	69f8      	ldr	r0, [r7, #28]
 8016a4c:	f002 fe8e 	bl	801976c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
 8016a50:	4b82      	ldr	r3, [pc, #520]	@ (8016c5c <tcp_input+0x760>)
 8016a52:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 8016a56:	3301      	adds	r3, #1
 8016a58:	b29a      	uxth	r2, r3
 8016a5a:	4b80      	ldr	r3, [pc, #512]	@ (8016c5c <tcp_input+0x760>)
 8016a5c:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
        MIB2_STATS_INC(mib2.tcpinerrs);
 8016a60:	4b7e      	ldr	r3, [pc, #504]	@ (8016c5c <tcp_input+0x760>)
 8016a62:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8016a66:	3301      	adds	r3, #1
 8016a68:	4a7c      	ldr	r2, [pc, #496]	@ (8016c5c <tcp_input+0x760>)
 8016a6a:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
        goto aborted;
 8016a6e:	e102      	b.n	8016c76 <tcp_input+0x77a>
      }
    }
    tcp_input_pcb = pcb;
 8016a70:	4a7b      	ldr	r2, [pc, #492]	@ (8016c60 <tcp_input+0x764>)
 8016a72:	69fb      	ldr	r3, [r7, #28]
 8016a74:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8016a76:	69f8      	ldr	r0, [r7, #28]
 8016a78:	f000 fafe 	bl	8017078 <tcp_process>
 8016a7c:	4603      	mov	r3, r0
 8016a7e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8016a80:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016a84:	f113 0f0d 	cmn.w	r3, #13
 8016a88:	f000 80d0 	beq.w	8016c2c <tcp_input+0x730>
      if (recv_flags & TF_RESET) {
 8016a8c:	4b6f      	ldr	r3, [pc, #444]	@ (8016c4c <tcp_input+0x750>)
 8016a8e:	781b      	ldrb	r3, [r3, #0]
 8016a90:	f003 0308 	and.w	r3, r3, #8
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d016      	beq.n	8016ac6 <tcp_input+0x5ca>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8016a98:	69fb      	ldr	r3, [r7, #28]
 8016a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d008      	beq.n	8016ab4 <tcp_input+0x5b8>
 8016aa2:	69fb      	ldr	r3, [r7, #28]
 8016aa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016aa8:	69fa      	ldr	r2, [r7, #28]
 8016aaa:	6912      	ldr	r2, [r2, #16]
 8016aac:	f06f 010d 	mvn.w	r1, #13
 8016ab0:	4610      	mov	r0, r2
 8016ab2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8016ab4:	69f9      	ldr	r1, [r7, #28]
 8016ab6:	486b      	ldr	r0, [pc, #428]	@ (8016c64 <tcp_input+0x768>)
 8016ab8:	f7ff fc08 	bl	80162cc <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8016abc:	69f9      	ldr	r1, [r7, #28]
 8016abe:	2001      	movs	r0, #1
 8016ac0:	f7fc ffaa 	bl	8013a18 <memp_free>
 8016ac4:	e0d7      	b.n	8016c76 <tcp_input+0x77a>
      } else {
        err = ERR_OK;
 8016ac6:	2300      	movs	r3, #0
 8016ac8:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8016aca:	4b61      	ldr	r3, [pc, #388]	@ (8016c50 <tcp_input+0x754>)
 8016acc:	881b      	ldrh	r3, [r3, #0]
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d01b      	beq.n	8016b0a <tcp_input+0x60e>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8016ad2:	4b5f      	ldr	r3, [pc, #380]	@ (8016c50 <tcp_input+0x754>)
 8016ad4:	881b      	ldrh	r3, [r3, #0]
 8016ad6:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8016ad8:	69fb      	ldr	r3, [r7, #28]
 8016ada:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d009      	beq.n	8016af4 <tcp_input+0x5f8>
 8016ae0:	69fb      	ldr	r3, [r7, #28]
 8016ae2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016ae4:	69fa      	ldr	r2, [r7, #28]
 8016ae6:	6910      	ldr	r0, [r2, #16]
 8016ae8:	89fa      	ldrh	r2, [r7, #14]
 8016aea:	69f9      	ldr	r1, [r7, #28]
 8016aec:	4798      	blx	r3
 8016aee:	4603      	mov	r3, r0
 8016af0:	74fb      	strb	r3, [r7, #19]
 8016af2:	e001      	b.n	8016af8 <tcp_input+0x5fc>
 8016af4:	2300      	movs	r3, #0
 8016af6:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8016af8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016afc:	f113 0f0d 	cmn.w	r3, #13
 8016b00:	f000 8096 	beq.w	8016c30 <tcp_input+0x734>
              goto aborted;
            }
          }
          recv_acked = 0;
 8016b04:	4b52      	ldr	r3, [pc, #328]	@ (8016c50 <tcp_input+0x754>)
 8016b06:	2200      	movs	r2, #0
 8016b08:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8016b0a:	69f8      	ldr	r0, [r7, #28]
 8016b0c:	f000 f928 	bl	8016d60 <tcp_input_delayed_close>
 8016b10:	4603      	mov	r3, r0
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	f040 808e 	bne.w	8016c34 <tcp_input+0x738>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8016b18:	4b4b      	ldr	r3, [pc, #300]	@ (8016c48 <tcp_input+0x74c>)
 8016b1a:	681b      	ldr	r3, [r3, #0]
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d041      	beq.n	8016ba4 <tcp_input+0x6a8>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8016b20:	69fb      	ldr	r3, [r7, #28]
 8016b22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016b24:	2b00      	cmp	r3, #0
 8016b26:	d006      	beq.n	8016b36 <tcp_input+0x63a>
 8016b28:	4b4f      	ldr	r3, [pc, #316]	@ (8016c68 <tcp_input+0x76c>)
 8016b2a:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 8016b2e:	494f      	ldr	r1, [pc, #316]	@ (8016c6c <tcp_input+0x770>)
 8016b30:	484f      	ldr	r0, [pc, #316]	@ (8016c70 <tcp_input+0x774>)
 8016b32:	f009 fcb5 	bl	80204a0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8016b36:	69fb      	ldr	r3, [r7, #28]
 8016b38:	7e9b      	ldrb	r3, [r3, #26]
 8016b3a:	f003 0310 	and.w	r3, r3, #16
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d008      	beq.n	8016b54 <tcp_input+0x658>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8016b42:	4b41      	ldr	r3, [pc, #260]	@ (8016c48 <tcp_input+0x74c>)
 8016b44:	681b      	ldr	r3, [r3, #0]
 8016b46:	4618      	mov	r0, r3
 8016b48:	f7fd fcc2 	bl	80144d0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8016b4c:	69f8      	ldr	r0, [r7, #28]
 8016b4e:	f7fe fb09 	bl	8015164 <tcp_abort>
            goto aborted;
 8016b52:	e090      	b.n	8016c76 <tcp_input+0x77a>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8016b54:	69fb      	ldr	r3, [r7, #28]
 8016b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d00c      	beq.n	8016b78 <tcp_input+0x67c>
 8016b5e:	69fb      	ldr	r3, [r7, #28]
 8016b60:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8016b64:	69fb      	ldr	r3, [r7, #28]
 8016b66:	6918      	ldr	r0, [r3, #16]
 8016b68:	4b37      	ldr	r3, [pc, #220]	@ (8016c48 <tcp_input+0x74c>)
 8016b6a:	681a      	ldr	r2, [r3, #0]
 8016b6c:	2300      	movs	r3, #0
 8016b6e:	69f9      	ldr	r1, [r7, #28]
 8016b70:	47a0      	blx	r4
 8016b72:	4603      	mov	r3, r0
 8016b74:	74fb      	strb	r3, [r7, #19]
 8016b76:	e008      	b.n	8016b8a <tcp_input+0x68e>
 8016b78:	4b33      	ldr	r3, [pc, #204]	@ (8016c48 <tcp_input+0x74c>)
 8016b7a:	681a      	ldr	r2, [r3, #0]
 8016b7c:	2300      	movs	r3, #0
 8016b7e:	69f9      	ldr	r1, [r7, #28]
 8016b80:	2000      	movs	r0, #0
 8016b82:	f7ff f91b 	bl	8015dbc <tcp_recv_null>
 8016b86:	4603      	mov	r3, r0
 8016b88:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8016b8a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016b8e:	f113 0f0d 	cmn.w	r3, #13
 8016b92:	d051      	beq.n	8016c38 <tcp_input+0x73c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8016b94:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	d003      	beq.n	8016ba4 <tcp_input+0x6a8>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8016b9c:	4b2a      	ldr	r3, [pc, #168]	@ (8016c48 <tcp_input+0x74c>)
 8016b9e:	681a      	ldr	r2, [r3, #0]
 8016ba0:	69fb      	ldr	r3, [r7, #28]
 8016ba2:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8016ba4:	4b29      	ldr	r3, [pc, #164]	@ (8016c4c <tcp_input+0x750>)
 8016ba6:	781b      	ldrb	r3, [r3, #0]
 8016ba8:	f003 0320 	and.w	r3, r3, #32
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d030      	beq.n	8016c12 <tcp_input+0x716>
          if (pcb->refused_data != NULL) {
 8016bb0:	69fb      	ldr	r3, [r7, #28]
 8016bb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d009      	beq.n	8016bcc <tcp_input+0x6d0>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8016bb8:	69fb      	ldr	r3, [r7, #28]
 8016bba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016bbc:	7b5a      	ldrb	r2, [r3, #13]
 8016bbe:	69fb      	ldr	r3, [r7, #28]
 8016bc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016bc2:	f042 0220 	orr.w	r2, r2, #32
 8016bc6:	b2d2      	uxtb	r2, r2
 8016bc8:	735a      	strb	r2, [r3, #13]
 8016bca:	e022      	b.n	8016c12 <tcp_input+0x716>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8016bcc:	69fb      	ldr	r3, [r7, #28]
 8016bce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016bd0:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8016bd4:	d005      	beq.n	8016be2 <tcp_input+0x6e6>
              pcb->rcv_wnd++;
 8016bd6:	69fb      	ldr	r3, [r7, #28]
 8016bd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016bda:	3301      	adds	r3, #1
 8016bdc:	b29a      	uxth	r2, r3
 8016bde:	69fb      	ldr	r3, [r7, #28]
 8016be0:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8016be2:	69fb      	ldr	r3, [r7, #28]
 8016be4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d00b      	beq.n	8016c04 <tcp_input+0x708>
 8016bec:	69fb      	ldr	r3, [r7, #28]
 8016bee:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8016bf2:	69fb      	ldr	r3, [r7, #28]
 8016bf4:	6918      	ldr	r0, [r3, #16]
 8016bf6:	2300      	movs	r3, #0
 8016bf8:	2200      	movs	r2, #0
 8016bfa:	69f9      	ldr	r1, [r7, #28]
 8016bfc:	47a0      	blx	r4
 8016bfe:	4603      	mov	r3, r0
 8016c00:	74fb      	strb	r3, [r7, #19]
 8016c02:	e001      	b.n	8016c08 <tcp_input+0x70c>
 8016c04:	2300      	movs	r3, #0
 8016c06:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8016c08:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016c0c:	f113 0f0d 	cmn.w	r3, #13
 8016c10:	d014      	beq.n	8016c3c <tcp_input+0x740>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8016c12:	4b13      	ldr	r3, [pc, #76]	@ (8016c60 <tcp_input+0x764>)
 8016c14:	2200      	movs	r2, #0
 8016c16:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8016c18:	69f8      	ldr	r0, [r7, #28]
 8016c1a:	f000 f8a1 	bl	8016d60 <tcp_input_delayed_close>
 8016c1e:	4603      	mov	r3, r0
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	d127      	bne.n	8016c74 <tcp_input+0x778>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8016c24:	69f8      	ldr	r0, [r7, #28]
 8016c26:	f002 fdfd 	bl	8019824 <tcp_output>
 8016c2a:	e024      	b.n	8016c76 <tcp_input+0x77a>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8016c2c:	bf00      	nop
 8016c2e:	e022      	b.n	8016c76 <tcp_input+0x77a>
              goto aborted;
 8016c30:	bf00      	nop
 8016c32:	e020      	b.n	8016c76 <tcp_input+0x77a>
          goto aborted;
 8016c34:	bf00      	nop
 8016c36:	e01e      	b.n	8016c76 <tcp_input+0x77a>
            goto aborted;
 8016c38:	bf00      	nop
 8016c3a:	e01c      	b.n	8016c76 <tcp_input+0x77a>
              goto aborted;
 8016c3c:	bf00      	nop
 8016c3e:	e01a      	b.n	8016c76 <tcp_input+0x77a>
 8016c40:	2000dd34 	.word	0x2000dd34
 8016c44:	2000dd44 	.word	0x2000dd44
 8016c48:	2000dd64 	.word	0x2000dd64
 8016c4c:	2000dd61 	.word	0x2000dd61
 8016c50:	2000dd5c 	.word	0x2000dd5c
 8016c54:	2000dd60 	.word	0x2000dd60
 8016c58:	2000dd5e 	.word	0x2000dd5e
 8016c5c:	2000db84 	.word	0x2000db84
 8016c60:	2000dd68 	.word	0x2000dd68
 8016c64:	2000dd28 	.word	0x2000dd28
 8016c68:	08024aa4 	.word	0x08024aa4
 8016c6c:	08024c40 	.word	0x08024c40
 8016c70:	08024ae8 	.word	0x08024ae8
          goto aborted;
 8016c74:	bf00      	nop
    tcp_input_pcb = NULL;
 8016c76:	4b30      	ldr	r3, [pc, #192]	@ (8016d38 <tcp_input+0x83c>)
 8016c78:	2200      	movs	r2, #0
 8016c7a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8016c7c:	4b2f      	ldr	r3, [pc, #188]	@ (8016d3c <tcp_input+0x840>)
 8016c7e:	2200      	movs	r2, #0
 8016c80:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 8016c82:	4b2f      	ldr	r3, [pc, #188]	@ (8016d40 <tcp_input+0x844>)
 8016c84:	685b      	ldr	r3, [r3, #4]
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d051      	beq.n	8016d2e <tcp_input+0x832>
    {
      pbuf_free(inseg.p);
 8016c8a:	4b2d      	ldr	r3, [pc, #180]	@ (8016d40 <tcp_input+0x844>)
 8016c8c:	685b      	ldr	r3, [r3, #4]
 8016c8e:	4618      	mov	r0, r3
 8016c90:	f7fd fc1e 	bl	80144d0 <pbuf_free>
      inseg.p = NULL;
 8016c94:	4b2a      	ldr	r3, [pc, #168]	@ (8016d40 <tcp_input+0x844>)
 8016c96:	2200      	movs	r2, #0
 8016c98:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8016c9a:	e048      	b.n	8016d2e <tcp_input+0x832>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8016c9c:	4b29      	ldr	r3, [pc, #164]	@ (8016d44 <tcp_input+0x848>)
 8016c9e:	681b      	ldr	r3, [r3, #0]
 8016ca0:	899b      	ldrh	r3, [r3, #12]
 8016ca2:	b29b      	uxth	r3, r3
 8016ca4:	4618      	mov	r0, r3
 8016ca6:	f7fc f9bb 	bl	8013020 <lwip_htons>
 8016caa:	4603      	mov	r3, r0
 8016cac:	f003 0304 	and.w	r3, r3, #4
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d125      	bne.n	8016d00 <tcp_input+0x804>
      TCP_STATS_INC(tcp.proterr);
 8016cb4:	4b24      	ldr	r3, [pc, #144]	@ (8016d48 <tcp_input+0x84c>)
 8016cb6:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8016cba:	3301      	adds	r3, #1
 8016cbc:	b29a      	uxth	r2, r3
 8016cbe:	4b22      	ldr	r3, [pc, #136]	@ (8016d48 <tcp_input+0x84c>)
 8016cc0:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
      TCP_STATS_INC(tcp.drop);
 8016cc4:	4b20      	ldr	r3, [pc, #128]	@ (8016d48 <tcp_input+0x84c>)
 8016cc6:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 8016cca:	3301      	adds	r3, #1
 8016ccc:	b29a      	uxth	r2, r3
 8016cce:	4b1e      	ldr	r3, [pc, #120]	@ (8016d48 <tcp_input+0x84c>)
 8016cd0:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8016cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8016d4c <tcp_input+0x850>)
 8016cd6:	6818      	ldr	r0, [r3, #0]
 8016cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8016d50 <tcp_input+0x854>)
 8016cda:	881b      	ldrh	r3, [r3, #0]
 8016cdc:	461a      	mov	r2, r3
 8016cde:	4b1d      	ldr	r3, [pc, #116]	@ (8016d54 <tcp_input+0x858>)
 8016ce0:	681b      	ldr	r3, [r3, #0]
 8016ce2:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016ce4:	4b17      	ldr	r3, [pc, #92]	@ (8016d44 <tcp_input+0x848>)
 8016ce6:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8016ce8:	885b      	ldrh	r3, [r3, #2]
 8016cea:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016cec:	4a15      	ldr	r2, [pc, #84]	@ (8016d44 <tcp_input+0x848>)
 8016cee:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8016cf0:	8812      	ldrh	r2, [r2, #0]
 8016cf2:	b292      	uxth	r2, r2
 8016cf4:	9201      	str	r2, [sp, #4]
 8016cf6:	9300      	str	r3, [sp, #0]
 8016cf8:	4b17      	ldr	r3, [pc, #92]	@ (8016d58 <tcp_input+0x85c>)
 8016cfa:	4a18      	ldr	r2, [pc, #96]	@ (8016d5c <tcp_input+0x860>)
 8016cfc:	f003 f82a 	bl	8019d54 <tcp_rst>
    pbuf_free(p);
 8016d00:	6878      	ldr	r0, [r7, #4]
 8016d02:	f7fd fbe5 	bl	80144d0 <pbuf_free>
  return;
 8016d06:	e012      	b.n	8016d2e <tcp_input+0x832>
dropped:
  TCP_STATS_INC(tcp.drop);
 8016d08:	4b0f      	ldr	r3, [pc, #60]	@ (8016d48 <tcp_input+0x84c>)
 8016d0a:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 8016d0e:	3301      	adds	r3, #1
 8016d10:	b29a      	uxth	r2, r3
 8016d12:	4b0d      	ldr	r3, [pc, #52]	@ (8016d48 <tcp_input+0x84c>)
 8016d14:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
  MIB2_STATS_INC(mib2.tcpinerrs);
 8016d18:	4b0b      	ldr	r3, [pc, #44]	@ (8016d48 <tcp_input+0x84c>)
 8016d1a:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8016d1e:	3301      	adds	r3, #1
 8016d20:	4a09      	ldr	r2, [pc, #36]	@ (8016d48 <tcp_input+0x84c>)
 8016d22:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
  pbuf_free(p);
 8016d26:	6878      	ldr	r0, [r7, #4]
 8016d28:	f7fd fbd2 	bl	80144d0 <pbuf_free>
 8016d2c:	e000      	b.n	8016d30 <tcp_input+0x834>
  return;
 8016d2e:	bf00      	nop
}
 8016d30:	3724      	adds	r7, #36	@ 0x24
 8016d32:	46bd      	mov	sp, r7
 8016d34:	bd90      	pop	{r4, r7, pc}
 8016d36:	bf00      	nop
 8016d38:	2000dd68 	.word	0x2000dd68
 8016d3c:	2000dd64 	.word	0x2000dd64
 8016d40:	2000dd34 	.word	0x2000dd34
 8016d44:	2000dd44 	.word	0x2000dd44
 8016d48:	2000db84 	.word	0x2000db84
 8016d4c:	2000dd58 	.word	0x2000dd58
 8016d50:	2000dd5e 	.word	0x2000dd5e
 8016d54:	2000dd54 	.word	0x2000dd54
 8016d58:	2000a5ac 	.word	0x2000a5ac
 8016d5c:	2000a5b0 	.word	0x2000a5b0

08016d60 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8016d60:	b580      	push	{r7, lr}
 8016d62:	b082      	sub	sp, #8
 8016d64:	af00      	add	r7, sp, #0
 8016d66:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 8016d68:	4b14      	ldr	r3, [pc, #80]	@ (8016dbc <tcp_input_delayed_close+0x5c>)
 8016d6a:	781b      	ldrb	r3, [r3, #0]
 8016d6c:	f003 0310 	and.w	r3, r3, #16
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	d01d      	beq.n	8016db0 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	7e9b      	ldrb	r3, [r3, #26]
 8016d78:	f003 0310 	and.w	r3, r3, #16
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	d10d      	bne.n	8016d9c <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d008      	beq.n	8016d9c <tcp_input_delayed_close+0x3c>
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016d90:	687a      	ldr	r2, [r7, #4]
 8016d92:	6912      	ldr	r2, [r2, #16]
 8016d94:	f06f 010e 	mvn.w	r1, #14
 8016d98:	4610      	mov	r0, r2
 8016d9a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8016d9c:	6879      	ldr	r1, [r7, #4]
 8016d9e:	4808      	ldr	r0, [pc, #32]	@ (8016dc0 <tcp_input_delayed_close+0x60>)
 8016da0:	f7ff fa94 	bl	80162cc <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8016da4:	6879      	ldr	r1, [r7, #4]
 8016da6:	2001      	movs	r0, #1
 8016da8:	f7fc fe36 	bl	8013a18 <memp_free>
    return 1;
 8016dac:	2301      	movs	r3, #1
 8016dae:	e000      	b.n	8016db2 <tcp_input_delayed_close+0x52>
  }
  return 0;
 8016db0:	2300      	movs	r3, #0
}
 8016db2:	4618      	mov	r0, r3
 8016db4:	3708      	adds	r7, #8
 8016db6:	46bd      	mov	sp, r7
 8016db8:	bd80      	pop	{r7, pc}
 8016dba:	bf00      	nop
 8016dbc:	2000dd61 	.word	0x2000dd61
 8016dc0:	2000dd28 	.word	0x2000dd28

08016dc4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8016dc4:	b580      	push	{r7, lr}
 8016dc6:	b088      	sub	sp, #32
 8016dc8:	af02      	add	r7, sp, #8
 8016dca:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8016dcc:	4b6b      	ldr	r3, [pc, #428]	@ (8016f7c <tcp_listen_input+0x1b8>)
 8016dce:	781b      	ldrb	r3, [r3, #0]
 8016dd0:	f003 0304 	and.w	r3, r3, #4
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	f040 80ca 	bne.w	8016f6e <tcp_listen_input+0x1aa>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8016dda:	4b68      	ldr	r3, [pc, #416]	@ (8016f7c <tcp_listen_input+0x1b8>)
 8016ddc:	781b      	ldrb	r3, [r3, #0]
 8016dde:	f003 0310 	and.w	r3, r3, #16
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	d016      	beq.n	8016e14 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8016de6:	4b66      	ldr	r3, [pc, #408]	@ (8016f80 <tcp_listen_input+0x1bc>)
 8016de8:	6818      	ldr	r0, [r3, #0]
 8016dea:	4b66      	ldr	r3, [pc, #408]	@ (8016f84 <tcp_listen_input+0x1c0>)
 8016dec:	881b      	ldrh	r3, [r3, #0]
 8016dee:	461a      	mov	r2, r3
 8016df0:	4b65      	ldr	r3, [pc, #404]	@ (8016f88 <tcp_listen_input+0x1c4>)
 8016df2:	681b      	ldr	r3, [r3, #0]
 8016df4:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016df6:	4b65      	ldr	r3, [pc, #404]	@ (8016f8c <tcp_listen_input+0x1c8>)
 8016df8:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8016dfa:	885b      	ldrh	r3, [r3, #2]
 8016dfc:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016dfe:	4a63      	ldr	r2, [pc, #396]	@ (8016f8c <tcp_listen_input+0x1c8>)
 8016e00:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8016e02:	8812      	ldrh	r2, [r2, #0]
 8016e04:	b292      	uxth	r2, r2
 8016e06:	9201      	str	r2, [sp, #4]
 8016e08:	9300      	str	r3, [sp, #0]
 8016e0a:	4b61      	ldr	r3, [pc, #388]	@ (8016f90 <tcp_listen_input+0x1cc>)
 8016e0c:	4a61      	ldr	r2, [pc, #388]	@ (8016f94 <tcp_listen_input+0x1d0>)
 8016e0e:	f002 ffa1 	bl	8019d54 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8016e12:	e0ae      	b.n	8016f72 <tcp_listen_input+0x1ae>
  } else if (flags & TCP_SYN) {
 8016e14:	4b59      	ldr	r3, [pc, #356]	@ (8016f7c <tcp_listen_input+0x1b8>)
 8016e16:	781b      	ldrb	r3, [r3, #0]
 8016e18:	f003 0302 	and.w	r3, r3, #2
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	f000 80a8 	beq.w	8016f72 <tcp_listen_input+0x1ae>
    npcb = tcp_alloc(pcb->prio);
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	7d5b      	ldrb	r3, [r3, #21]
 8016e26:	4618      	mov	r0, r3
 8016e28:	f7ff f8a6 	bl	8015f78 <tcp_alloc>
 8016e2c:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8016e2e:	697b      	ldr	r3, [r7, #20]
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	d119      	bne.n	8016e68 <tcp_listen_input+0xa4>
      TCP_STATS_INC(tcp.memerr);
 8016e34:	4b58      	ldr	r3, [pc, #352]	@ (8016f98 <tcp_listen_input+0x1d4>)
 8016e36:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8016e3a:	3301      	adds	r3, #1
 8016e3c:	b29a      	uxth	r2, r3
 8016e3e:	4b56      	ldr	r3, [pc, #344]	@ (8016f98 <tcp_listen_input+0x1d4>)
 8016e40:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	699b      	ldr	r3, [r3, #24]
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	d00a      	beq.n	8016e62 <tcp_listen_input+0x9e>
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	699b      	ldr	r3, [r3, #24]
 8016e50:	687a      	ldr	r2, [r7, #4]
 8016e52:	6910      	ldr	r0, [r2, #16]
 8016e54:	f04f 32ff 	mov.w	r2, #4294967295
 8016e58:	2100      	movs	r1, #0
 8016e5a:	4798      	blx	r3
 8016e5c:	4603      	mov	r3, r0
 8016e5e:	73bb      	strb	r3, [r7, #14]
      return;
 8016e60:	e088      	b.n	8016f74 <tcp_listen_input+0x1b0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8016e62:	23f0      	movs	r3, #240	@ 0xf0
 8016e64:	73bb      	strb	r3, [r7, #14]
      return;
 8016e66:	e085      	b.n	8016f74 <tcp_listen_input+0x1b0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8016e68:	4b4c      	ldr	r3, [pc, #304]	@ (8016f9c <tcp_listen_input+0x1d8>)
 8016e6a:	695a      	ldr	r2, [r3, #20]
 8016e6c:	697b      	ldr	r3, [r7, #20]
 8016e6e:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8016e70:	4b4a      	ldr	r3, [pc, #296]	@ (8016f9c <tcp_listen_input+0x1d8>)
 8016e72:	691a      	ldr	r2, [r3, #16]
 8016e74:	697b      	ldr	r3, [r7, #20]
 8016e76:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	8ada      	ldrh	r2, [r3, #22]
 8016e7c:	697b      	ldr	r3, [r7, #20]
 8016e7e:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8016e80:	4b42      	ldr	r3, [pc, #264]	@ (8016f8c <tcp_listen_input+0x1c8>)
 8016e82:	681b      	ldr	r3, [r3, #0]
 8016e84:	881b      	ldrh	r3, [r3, #0]
 8016e86:	b29a      	uxth	r2, r3
 8016e88:	697b      	ldr	r3, [r7, #20]
 8016e8a:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8016e8c:	697b      	ldr	r3, [r7, #20]
 8016e8e:	2203      	movs	r2, #3
 8016e90:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8016e92:	4b3d      	ldr	r3, [pc, #244]	@ (8016f88 <tcp_listen_input+0x1c4>)
 8016e94:	681b      	ldr	r3, [r3, #0]
 8016e96:	1c5a      	adds	r2, r3, #1
 8016e98:	697b      	ldr	r3, [r7, #20]
 8016e9a:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8016e9c:	697b      	ldr	r3, [r7, #20]
 8016e9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016ea0:	697b      	ldr	r3, [r7, #20]
 8016ea2:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8016ea4:	6978      	ldr	r0, [r7, #20]
 8016ea6:	f7ff fa8d 	bl	80163c4 <tcp_next_iss>
 8016eaa:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8016eac:	697b      	ldr	r3, [r7, #20]
 8016eae:	693a      	ldr	r2, [r7, #16]
 8016eb0:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->snd_nxt = iss;
 8016eb2:	697b      	ldr	r3, [r7, #20]
 8016eb4:	693a      	ldr	r2, [r7, #16]
 8016eb6:	64da      	str	r2, [r3, #76]	@ 0x4c
    npcb->lastack = iss;
 8016eb8:	697b      	ldr	r3, [r7, #20]
 8016eba:	693a      	ldr	r2, [r7, #16]
 8016ebc:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8016ebe:	697b      	ldr	r3, [r7, #20]
 8016ec0:	693a      	ldr	r2, [r7, #16]
 8016ec2:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8016ec4:	4b30      	ldr	r3, [pc, #192]	@ (8016f88 <tcp_listen_input+0x1c4>)
 8016ec6:	681b      	ldr	r3, [r3, #0]
 8016ec8:	1e5a      	subs	r2, r3, #1
 8016eca:	697b      	ldr	r3, [r7, #20]
 8016ecc:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->callback_arg = pcb->callback_arg;
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	691a      	ldr	r2, [r3, #16]
 8016ed2:	697b      	ldr	r3, [r7, #20]
 8016ed4:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8016ed6:	697b      	ldr	r3, [r7, #20]
 8016ed8:	687a      	ldr	r2, [r7, #4]
 8016eda:	679a      	str	r2, [r3, #120]	@ 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	7a1b      	ldrb	r3, [r3, #8]
 8016ee0:	f003 030c 	and.w	r3, r3, #12
 8016ee4:	b2da      	uxtb	r2, r3
 8016ee6:	697b      	ldr	r3, [r7, #20]
 8016ee8:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8016eea:	4b2d      	ldr	r3, [pc, #180]	@ (8016fa0 <tcp_listen_input+0x1dc>)
 8016eec:	681a      	ldr	r2, [r3, #0]
 8016eee:	697b      	ldr	r3, [r7, #20]
 8016ef0:	60da      	str	r2, [r3, #12]
 8016ef2:	4a2b      	ldr	r2, [pc, #172]	@ (8016fa0 <tcp_listen_input+0x1dc>)
 8016ef4:	697b      	ldr	r3, [r7, #20]
 8016ef6:	6013      	str	r3, [r2, #0]
 8016ef8:	f003 f9a4 	bl	801a244 <tcp_timer_needed>
 8016efc:	4b29      	ldr	r3, [pc, #164]	@ (8016fa4 <tcp_listen_input+0x1e0>)
 8016efe:	2201      	movs	r2, #1
 8016f00:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8016f02:	6978      	ldr	r0, [r7, #20]
 8016f04:	f001 fd16 	bl	8018934 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8016f08:	4b20      	ldr	r3, [pc, #128]	@ (8016f8c <tcp_listen_input+0x1c8>)
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	89db      	ldrh	r3, [r3, #14]
 8016f0e:	b29a      	uxth	r2, r3
 8016f10:	697b      	ldr	r3, [r7, #20]
 8016f12:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8016f16:	697b      	ldr	r3, [r7, #20]
 8016f18:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8016f1c:	697b      	ldr	r3, [r7, #20]
 8016f1e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8016f22:	697b      	ldr	r3, [r7, #20]
 8016f24:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8016f26:	697b      	ldr	r3, [r7, #20]
 8016f28:	3304      	adds	r3, #4
 8016f2a:	4619      	mov	r1, r3
 8016f2c:	4610      	mov	r0, r2
 8016f2e:	f7ff fa5f 	bl	80163f0 <tcp_eff_send_mss_impl>
 8016f32:	4603      	mov	r3, r0
 8016f34:	461a      	mov	r2, r3
 8016f36:	697b      	ldr	r3, [r7, #20]
 8016f38:	865a      	strh	r2, [r3, #50]	@ 0x32
    MIB2_STATS_INC(mib2.tcppassiveopens);
 8016f3a:	4b17      	ldr	r3, [pc, #92]	@ (8016f98 <tcp_listen_input+0x1d4>)
 8016f3c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8016f40:	3301      	adds	r3, #1
 8016f42:	4a15      	ldr	r2, [pc, #84]	@ (8016f98 <tcp_listen_input+0x1d4>)
 8016f44:	f8c2 311c 	str.w	r3, [r2, #284]	@ 0x11c
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8016f48:	2112      	movs	r1, #18
 8016f4a:	6978      	ldr	r0, [r7, #20]
 8016f4c:	f002 faf8 	bl	8019540 <tcp_enqueue_flags>
 8016f50:	4603      	mov	r3, r0
 8016f52:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8016f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	d004      	beq.n	8016f66 <tcp_listen_input+0x1a2>
      tcp_abandon(npcb, 0);
 8016f5c:	2100      	movs	r1, #0
 8016f5e:	6978      	ldr	r0, [r7, #20]
 8016f60:	f7fe f84e 	bl	8015000 <tcp_abandon>
      return;
 8016f64:	e006      	b.n	8016f74 <tcp_listen_input+0x1b0>
    tcp_output(npcb);
 8016f66:	6978      	ldr	r0, [r7, #20]
 8016f68:	f002 fc5c 	bl	8019824 <tcp_output>
  return;
 8016f6c:	e001      	b.n	8016f72 <tcp_listen_input+0x1ae>
    return;
 8016f6e:	bf00      	nop
 8016f70:	e000      	b.n	8016f74 <tcp_listen_input+0x1b0>
  return;
 8016f72:	bf00      	nop
}
 8016f74:	3718      	adds	r7, #24
 8016f76:	46bd      	mov	sp, r7
 8016f78:	bd80      	pop	{r7, pc}
 8016f7a:	bf00      	nop
 8016f7c:	2000dd60 	.word	0x2000dd60
 8016f80:	2000dd58 	.word	0x2000dd58
 8016f84:	2000dd5e 	.word	0x2000dd5e
 8016f88:	2000dd54 	.word	0x2000dd54
 8016f8c:	2000dd44 	.word	0x2000dd44
 8016f90:	2000a5ac 	.word	0x2000a5ac
 8016f94:	2000a5b0 	.word	0x2000a5b0
 8016f98:	2000db84 	.word	0x2000db84
 8016f9c:	2000a59c 	.word	0x2000a59c
 8016fa0:	2000dd28 	.word	0x2000dd28
 8016fa4:	2000dd30 	.word	0x2000dd30

08016fa8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8016fa8:	b580      	push	{r7, lr}
 8016faa:	b084      	sub	sp, #16
 8016fac:	af02      	add	r7, sp, #8
 8016fae:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8016fb0:	4b29      	ldr	r3, [pc, #164]	@ (8017058 <tcp_timewait_input+0xb0>)
 8016fb2:	781b      	ldrb	r3, [r3, #0]
 8016fb4:	f003 0304 	and.w	r3, r3, #4
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	d146      	bne.n	801704a <tcp_timewait_input+0xa2>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8016fbc:	4b26      	ldr	r3, [pc, #152]	@ (8017058 <tcp_timewait_input+0xb0>)
 8016fbe:	781b      	ldrb	r3, [r3, #0]
 8016fc0:	f003 0302 	and.w	r3, r3, #2
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	d027      	beq.n	8017018 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8016fc8:	4b24      	ldr	r3, [pc, #144]	@ (801705c <tcp_timewait_input+0xb4>)
 8016fca:	681a      	ldr	r2, [r3, #0]
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016fd0:	1ad3      	subs	r3, r2, r3
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	db2a      	blt.n	801702c <tcp_timewait_input+0x84>
 8016fd6:	4b21      	ldr	r3, [pc, #132]	@ (801705c <tcp_timewait_input+0xb4>)
 8016fd8:	681a      	ldr	r2, [r3, #0]
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016fde:	6879      	ldr	r1, [r7, #4]
 8016fe0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016fe2:	440b      	add	r3, r1
 8016fe4:	1ad3      	subs	r3, r2, r3
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	dc20      	bgt.n	801702c <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8016fea:	4b1d      	ldr	r3, [pc, #116]	@ (8017060 <tcp_timewait_input+0xb8>)
 8016fec:	6818      	ldr	r0, [r3, #0]
 8016fee:	4b1d      	ldr	r3, [pc, #116]	@ (8017064 <tcp_timewait_input+0xbc>)
 8016ff0:	881b      	ldrh	r3, [r3, #0]
 8016ff2:	461a      	mov	r2, r3
 8016ff4:	4b19      	ldr	r3, [pc, #100]	@ (801705c <tcp_timewait_input+0xb4>)
 8016ff6:	681b      	ldr	r3, [r3, #0]
 8016ff8:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016ffa:	4b1b      	ldr	r3, [pc, #108]	@ (8017068 <tcp_timewait_input+0xc0>)
 8016ffc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8016ffe:	885b      	ldrh	r3, [r3, #2]
 8017000:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017002:	4a19      	ldr	r2, [pc, #100]	@ (8017068 <tcp_timewait_input+0xc0>)
 8017004:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8017006:	8812      	ldrh	r2, [r2, #0]
 8017008:	b292      	uxth	r2, r2
 801700a:	9201      	str	r2, [sp, #4]
 801700c:	9300      	str	r3, [sp, #0]
 801700e:	4b17      	ldr	r3, [pc, #92]	@ (801706c <tcp_timewait_input+0xc4>)
 8017010:	4a17      	ldr	r2, [pc, #92]	@ (8017070 <tcp_timewait_input+0xc8>)
 8017012:	f002 fe9f 	bl	8019d54 <tcp_rst>
      return;
 8017016:	e01b      	b.n	8017050 <tcp_timewait_input+0xa8>
    }
  } else if (flags & TCP_FIN) {
 8017018:	4b0f      	ldr	r3, [pc, #60]	@ (8017058 <tcp_timewait_input+0xb0>)
 801701a:	781b      	ldrb	r3, [r3, #0]
 801701c:	f003 0301 	and.w	r3, r3, #1
 8017020:	2b00      	cmp	r3, #0
 8017022:	d003      	beq.n	801702c <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8017024:	4b13      	ldr	r3, [pc, #76]	@ (8017074 <tcp_timewait_input+0xcc>)
 8017026:	681a      	ldr	r2, [r3, #0]
 8017028:	687b      	ldr	r3, [r7, #4]
 801702a:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801702c:	4b0d      	ldr	r3, [pc, #52]	@ (8017064 <tcp_timewait_input+0xbc>)
 801702e:	881b      	ldrh	r3, [r3, #0]
 8017030:	2b00      	cmp	r3, #0
 8017032:	d00c      	beq.n	801704e <tcp_timewait_input+0xa6>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	7e9b      	ldrb	r3, [r3, #26]
 8017038:	f043 0302 	orr.w	r3, r3, #2
 801703c:	b2da      	uxtb	r2, r3
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8017042:	6878      	ldr	r0, [r7, #4]
 8017044:	f002 fbee 	bl	8019824 <tcp_output>
  }
  return;
 8017048:	e001      	b.n	801704e <tcp_timewait_input+0xa6>
    return;
 801704a:	bf00      	nop
 801704c:	e000      	b.n	8017050 <tcp_timewait_input+0xa8>
  return;
 801704e:	bf00      	nop
}
 8017050:	3708      	adds	r7, #8
 8017052:	46bd      	mov	sp, r7
 8017054:	bd80      	pop	{r7, pc}
 8017056:	bf00      	nop
 8017058:	2000dd60 	.word	0x2000dd60
 801705c:	2000dd54 	.word	0x2000dd54
 8017060:	2000dd58 	.word	0x2000dd58
 8017064:	2000dd5e 	.word	0x2000dd5e
 8017068:	2000dd44 	.word	0x2000dd44
 801706c:	2000a5ac 	.word	0x2000a5ac
 8017070:	2000a5b0 	.word	0x2000a5b0
 8017074:	2000dd1c 	.word	0x2000dd1c

08017078 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8017078:	b580      	push	{r7, lr}
 801707a:	b08a      	sub	sp, #40	@ 0x28
 801707c:	af02      	add	r7, sp, #8
 801707e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8017080:	2300      	movs	r3, #0
 8017082:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8017084:	2300      	movs	r3, #0
 8017086:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8017088:	4b93      	ldr	r3, [pc, #588]	@ (80172d8 <tcp_process+0x260>)
 801708a:	781b      	ldrb	r3, [r3, #0]
 801708c:	f003 0304 	and.w	r3, r3, #4
 8017090:	2b00      	cmp	r3, #0
 8017092:	d04e      	beq.n	8017132 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	7d1b      	ldrb	r3, [r3, #20]
 8017098:	2b02      	cmp	r3, #2
 801709a:	d108      	bne.n	80170ae <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80170a0:	4b8e      	ldr	r3, [pc, #568]	@ (80172dc <tcp_process+0x264>)
 80170a2:	681b      	ldr	r3, [r3, #0]
 80170a4:	429a      	cmp	r2, r3
 80170a6:	d123      	bne.n	80170f0 <tcp_process+0x78>
        acceptable = 1;
 80170a8:	2301      	movs	r3, #1
 80170aa:	76fb      	strb	r3, [r7, #27]
 80170ac:	e020      	b.n	80170f0 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80170b2:	4b8b      	ldr	r3, [pc, #556]	@ (80172e0 <tcp_process+0x268>)
 80170b4:	681b      	ldr	r3, [r3, #0]
 80170b6:	429a      	cmp	r2, r3
 80170b8:	d102      	bne.n	80170c0 <tcp_process+0x48>
        acceptable = 1;
 80170ba:	2301      	movs	r3, #1
 80170bc:	76fb      	strb	r3, [r7, #27]
 80170be:	e017      	b.n	80170f0 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80170c0:	4b87      	ldr	r3, [pc, #540]	@ (80172e0 <tcp_process+0x268>)
 80170c2:	681a      	ldr	r2, [r3, #0]
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80170c8:	1ad3      	subs	r3, r2, r3
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	db10      	blt.n	80170f0 <tcp_process+0x78>
 80170ce:	4b84      	ldr	r3, [pc, #528]	@ (80172e0 <tcp_process+0x268>)
 80170d0:	681a      	ldr	r2, [r3, #0]
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80170d6:	6879      	ldr	r1, [r7, #4]
 80170d8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80170da:	440b      	add	r3, r1
 80170dc:	1ad3      	subs	r3, r2, r3
 80170de:	2b00      	cmp	r3, #0
 80170e0:	dc06      	bgt.n	80170f0 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	7e9b      	ldrb	r3, [r3, #26]
 80170e6:	f043 0302 	orr.w	r3, r3, #2
 80170ea:	b2da      	uxtb	r2, r3
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80170f0:	7efb      	ldrb	r3, [r7, #27]
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	d01b      	beq.n	801712e <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	7d1b      	ldrb	r3, [r3, #20]
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	d106      	bne.n	801710c <tcp_process+0x94>
 80170fe:	4b79      	ldr	r3, [pc, #484]	@ (80172e4 <tcp_process+0x26c>)
 8017100:	f240 22e7 	movw	r2, #743	@ 0x2e7
 8017104:	4978      	ldr	r1, [pc, #480]	@ (80172e8 <tcp_process+0x270>)
 8017106:	4879      	ldr	r0, [pc, #484]	@ (80172ec <tcp_process+0x274>)
 8017108:	f009 f9ca 	bl	80204a0 <iprintf>
      recv_flags |= TF_RESET;
 801710c:	4b78      	ldr	r3, [pc, #480]	@ (80172f0 <tcp_process+0x278>)
 801710e:	781b      	ldrb	r3, [r3, #0]
 8017110:	f043 0308 	orr.w	r3, r3, #8
 8017114:	b2da      	uxtb	r2, r3
 8017116:	4b76      	ldr	r3, [pc, #472]	@ (80172f0 <tcp_process+0x278>)
 8017118:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	7e9b      	ldrb	r3, [r3, #26]
 801711e:	f023 0301 	bic.w	r3, r3, #1
 8017122:	b2da      	uxtb	r2, r3
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 8017128:	f06f 030d 	mvn.w	r3, #13
 801712c:	e348      	b.n	80177c0 <tcp_process+0x748>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 801712e:	2300      	movs	r3, #0
 8017130:	e346      	b.n	80177c0 <tcp_process+0x748>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8017132:	4b69      	ldr	r3, [pc, #420]	@ (80172d8 <tcp_process+0x260>)
 8017134:	781b      	ldrb	r3, [r3, #0]
 8017136:	f003 0302 	and.w	r3, r3, #2
 801713a:	2b00      	cmp	r3, #0
 801713c:	d010      	beq.n	8017160 <tcp_process+0xe8>
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	7d1b      	ldrb	r3, [r3, #20]
 8017142:	2b02      	cmp	r3, #2
 8017144:	d00c      	beq.n	8017160 <tcp_process+0xe8>
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	7d1b      	ldrb	r3, [r3, #20]
 801714a:	2b03      	cmp	r3, #3
 801714c:	d008      	beq.n	8017160 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	7e9b      	ldrb	r3, [r3, #26]
 8017152:	f043 0302 	orr.w	r3, r3, #2
 8017156:	b2da      	uxtb	r2, r3
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 801715c:	2300      	movs	r3, #0
 801715e:	e32f      	b.n	80177c0 <tcp_process+0x748>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	7e9b      	ldrb	r3, [r3, #26]
 8017164:	f003 0310 	and.w	r3, r3, #16
 8017168:	2b00      	cmp	r3, #0
 801716a:	d103      	bne.n	8017174 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801716c:	4b61      	ldr	r3, [pc, #388]	@ (80172f4 <tcp_process+0x27c>)
 801716e:	681a      	ldr	r2, [r3, #0]
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	2200      	movs	r2, #0
 8017178:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96

  tcp_parseopt(pcb);
 801717c:	6878      	ldr	r0, [r7, #4]
 801717e:	f001 fbd9 	bl	8018934 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	7d1b      	ldrb	r3, [r3, #20]
 8017186:	3b02      	subs	r3, #2
 8017188:	2b07      	cmp	r3, #7
 801718a:	f200 8309 	bhi.w	80177a0 <tcp_process+0x728>
 801718e:	a201      	add	r2, pc, #4	@ (adr r2, 8017194 <tcp_process+0x11c>)
 8017190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017194:	080171b5 	.word	0x080171b5
 8017198:	080173ab 	.word	0x080173ab
 801719c:	08017503 	.word	0x08017503
 80171a0:	0801752d 	.word	0x0801752d
 80171a4:	0801764f 	.word	0x0801764f
 80171a8:	08017503 	.word	0x08017503
 80171ac:	080176db 	.word	0x080176db
 80171b0:	0801776b 	.word	0x0801776b
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80171b4:	4b48      	ldr	r3, [pc, #288]	@ (80172d8 <tcp_process+0x260>)
 80171b6:	781b      	ldrb	r3, [r3, #0]
 80171b8:	f003 0310 	and.w	r3, r3, #16
 80171bc:	2b00      	cmp	r3, #0
 80171be:	f000 80ca 	beq.w	8017356 <tcp_process+0x2de>
 80171c2:	4b45      	ldr	r3, [pc, #276]	@ (80172d8 <tcp_process+0x260>)
 80171c4:	781b      	ldrb	r3, [r3, #0]
 80171c6:	f003 0302 	and.w	r3, r3, #2
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	f000 80c3 	beq.w	8017356 <tcp_process+0x2de>
        && (ackno == pcb->lastack + 1)) {
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80171d4:	1c5a      	adds	r2, r3, #1
 80171d6:	4b41      	ldr	r3, [pc, #260]	@ (80172dc <tcp_process+0x264>)
 80171d8:	681b      	ldr	r3, [r3, #0]
 80171da:	429a      	cmp	r2, r3
 80171dc:	f040 80bb 	bne.w	8017356 <tcp_process+0x2de>
      pcb->rcv_nxt = seqno + 1;
 80171e0:	4b3f      	ldr	r3, [pc, #252]	@ (80172e0 <tcp_process+0x268>)
 80171e2:	681b      	ldr	r3, [r3, #0]
 80171e4:	1c5a      	adds	r2, r3, #1
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	625a      	str	r2, [r3, #36]	@ 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	62da      	str	r2, [r3, #44]	@ 0x2c
      pcb->lastack = ackno;
 80171f2:	4b3a      	ldr	r3, [pc, #232]	@ (80172dc <tcp_process+0x264>)
 80171f4:	681a      	ldr	r2, [r3, #0]
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	645a      	str	r2, [r3, #68]	@ 0x44
      pcb->snd_wnd = tcphdr->wnd;
 80171fa:	4b3f      	ldr	r3, [pc, #252]	@ (80172f8 <tcp_process+0x280>)
 80171fc:	681b      	ldr	r3, [r3, #0]
 80171fe:	89db      	ldrh	r3, [r3, #14]
 8017200:	b29a      	uxth	r2, r3
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8017214:	4b32      	ldr	r3, [pc, #200]	@ (80172e0 <tcp_process+0x268>)
 8017216:	681b      	ldr	r3, [r3, #0]
 8017218:	1e5a      	subs	r2, r3, #1
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	651a      	str	r2, [r3, #80]	@ 0x50
      pcb->state = ESTABLISHED;
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	2204      	movs	r2, #4
 8017222:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	3304      	adds	r3, #4
 801722c:	4619      	mov	r1, r3
 801722e:	4610      	mov	r0, r2
 8017230:	f7ff f8de 	bl	80163f0 <tcp_eff_send_mss_impl>
 8017234:	4603      	mov	r3, r0
 8017236:	461a      	mov	r2, r3
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017240:	005b      	lsls	r3, r3, #1
 8017242:	f241 121c 	movw	r2, #4380	@ 0x111c
 8017246:	429a      	cmp	r2, r3
 8017248:	bf38      	it	cc
 801724a:	461a      	movcc	r2, r3
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017250:	009b      	lsls	r3, r3, #2
 8017252:	4293      	cmp	r3, r2
 8017254:	bf28      	it	cs
 8017256:	4613      	movcs	r3, r2
 8017258:	b29a      	uxth	r2, r3
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8017266:	2b00      	cmp	r3, #0
 8017268:	d106      	bne.n	8017278 <tcp_process+0x200>
 801726a:	4b1e      	ldr	r3, [pc, #120]	@ (80172e4 <tcp_process+0x26c>)
 801726c:	f240 321a 	movw	r2, #794	@ 0x31a
 8017270:	4922      	ldr	r1, [pc, #136]	@ (80172fc <tcp_process+0x284>)
 8017272:	481e      	ldr	r0, [pc, #120]	@ (80172ec <tcp_process+0x274>)
 8017274:	f009 f914 	bl	80204a0 <iprintf>
      --pcb->snd_queuelen;
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801727e:	3b01      	subs	r3, #1
 8017280:	b29a      	uxth	r2, r3
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801728c:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 801728e:	69fb      	ldr	r3, [r7, #28]
 8017290:	2b00      	cmp	r3, #0
 8017292:	d111      	bne.n	80172b8 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017298:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 801729a:	69fb      	ldr	r3, [r7, #28]
 801729c:	2b00      	cmp	r3, #0
 801729e:	d106      	bne.n	80172ae <tcp_process+0x236>
 80172a0:	4b10      	ldr	r3, [pc, #64]	@ (80172e4 <tcp_process+0x26c>)
 80172a2:	f240 3222 	movw	r2, #802	@ 0x322
 80172a6:	4916      	ldr	r1, [pc, #88]	@ (8017300 <tcp_process+0x288>)
 80172a8:	4810      	ldr	r0, [pc, #64]	@ (80172ec <tcp_process+0x274>)
 80172aa:	f009 f8f9 	bl	80204a0 <iprintf>
        pcb->unsent = rseg->next;
 80172ae:	69fb      	ldr	r3, [r7, #28]
 80172b0:	681a      	ldr	r2, [r3, #0]
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	669a      	str	r2, [r3, #104]	@ 0x68
 80172b6:	e003      	b.n	80172c0 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 80172b8:	69fb      	ldr	r3, [r7, #28]
 80172ba:	681a      	ldr	r2, [r3, #0]
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      tcp_seg_free(rseg);
 80172c0:	69f8      	ldr	r0, [r7, #28]
 80172c2:	f7fe fd39 	bl	8015d38 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d11a      	bne.n	8017304 <tcp_process+0x28c>
        pcb->rtime = -1;
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80172d4:	861a      	strh	r2, [r3, #48]	@ 0x30
 80172d6:	e01c      	b.n	8017312 <tcp_process+0x29a>
 80172d8:	2000dd60 	.word	0x2000dd60
 80172dc:	2000dd58 	.word	0x2000dd58
 80172e0:	2000dd54 	.word	0x2000dd54
 80172e4:	08024aa4 	.word	0x08024aa4
 80172e8:	08024c5c 	.word	0x08024c5c
 80172ec:	08024ae8 	.word	0x08024ae8
 80172f0:	2000dd61 	.word	0x2000dd61
 80172f4:	2000dd1c 	.word	0x2000dd1c
 80172f8:	2000dd44 	.word	0x2000dd44
 80172fc:	08024c7c 	.word	0x08024c7c
 8017300:	08024c94 	.word	0x08024c94
      } else {
        pcb->rtime = 0;
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	2200      	movs	r2, #0
 8017308:	861a      	strh	r2, [r3, #48]	@ 0x30
        pcb->nrtx = 0;
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	2200      	movs	r2, #0
 801730e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8017312:	687b      	ldr	r3, [r7, #4]
 8017314:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8017318:	2b00      	cmp	r3, #0
 801731a:	d00a      	beq.n	8017332 <tcp_process+0x2ba>
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8017322:	687a      	ldr	r2, [r7, #4]
 8017324:	6910      	ldr	r0, [r2, #16]
 8017326:	2200      	movs	r2, #0
 8017328:	6879      	ldr	r1, [r7, #4]
 801732a:	4798      	blx	r3
 801732c:	4603      	mov	r3, r0
 801732e:	76bb      	strb	r3, [r7, #26]
 8017330:	e001      	b.n	8017336 <tcp_process+0x2be>
 8017332:	2300      	movs	r3, #0
 8017334:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 8017336:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801733a:	f113 0f0d 	cmn.w	r3, #13
 801733e:	d102      	bne.n	8017346 <tcp_process+0x2ce>
        return ERR_ABRT;
 8017340:	f06f 030c 	mvn.w	r3, #12
 8017344:	e23c      	b.n	80177c0 <tcp_process+0x748>
      }
      tcp_ack_now(pcb);
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	7e9b      	ldrb	r3, [r3, #26]
 801734a:	f043 0302 	orr.w	r3, r3, #2
 801734e:	b2da      	uxtb	r2, r3
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 8017354:	e226      	b.n	80177a4 <tcp_process+0x72c>
    else if (flags & TCP_ACK) {
 8017356:	4b93      	ldr	r3, [pc, #588]	@ (80175a4 <tcp_process+0x52c>)
 8017358:	781b      	ldrb	r3, [r3, #0]
 801735a:	f003 0310 	and.w	r3, r3, #16
 801735e:	2b00      	cmp	r3, #0
 8017360:	f000 8220 	beq.w	80177a4 <tcp_process+0x72c>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8017364:	4b90      	ldr	r3, [pc, #576]	@ (80175a8 <tcp_process+0x530>)
 8017366:	6818      	ldr	r0, [r3, #0]
 8017368:	4b90      	ldr	r3, [pc, #576]	@ (80175ac <tcp_process+0x534>)
 801736a:	881b      	ldrh	r3, [r3, #0]
 801736c:	461a      	mov	r2, r3
 801736e:	4b90      	ldr	r3, [pc, #576]	@ (80175b0 <tcp_process+0x538>)
 8017370:	681b      	ldr	r3, [r3, #0]
 8017372:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017374:	4b8f      	ldr	r3, [pc, #572]	@ (80175b4 <tcp_process+0x53c>)
 8017376:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8017378:	885b      	ldrh	r3, [r3, #2]
 801737a:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801737c:	4a8d      	ldr	r2, [pc, #564]	@ (80175b4 <tcp_process+0x53c>)
 801737e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8017380:	8812      	ldrh	r2, [r2, #0]
 8017382:	b292      	uxth	r2, r2
 8017384:	9201      	str	r2, [sp, #4]
 8017386:	9300      	str	r3, [sp, #0]
 8017388:	4b8b      	ldr	r3, [pc, #556]	@ (80175b8 <tcp_process+0x540>)
 801738a:	4a8c      	ldr	r2, [pc, #560]	@ (80175bc <tcp_process+0x544>)
 801738c:	f002 fce2 	bl	8019d54 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017396:	2b05      	cmp	r3, #5
 8017398:	f200 8204 	bhi.w	80177a4 <tcp_process+0x72c>
        pcb->rtime = 0;
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	2200      	movs	r2, #0
 80173a0:	861a      	strh	r2, [r3, #48]	@ 0x30
        tcp_rexmit_rto(pcb);
 80173a2:	6878      	ldr	r0, [r7, #4]
 80173a4:	f002 fd5e 	bl	8019e64 <tcp_rexmit_rto>
    break;
 80173a8:	e1fc      	b.n	80177a4 <tcp_process+0x72c>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 80173aa:	4b7e      	ldr	r3, [pc, #504]	@ (80175a4 <tcp_process+0x52c>)
 80173ac:	781b      	ldrb	r3, [r3, #0]
 80173ae:	f003 0310 	and.w	r3, r3, #16
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	f000 8091 	beq.w	80174da <tcp_process+0x462>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80173b8:	4b7b      	ldr	r3, [pc, #492]	@ (80175a8 <tcp_process+0x530>)
 80173ba:	681a      	ldr	r2, [r3, #0]
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80173c0:	1ad3      	subs	r3, r2, r3
 80173c2:	3b01      	subs	r3, #1
 80173c4:	2b00      	cmp	r3, #0
 80173c6:	db71      	blt.n	80174ac <tcp_process+0x434>
 80173c8:	4b77      	ldr	r3, [pc, #476]	@ (80175a8 <tcp_process+0x530>)
 80173ca:	681a      	ldr	r2, [r3, #0]
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80173d0:	1ad3      	subs	r3, r2, r3
 80173d2:	2b00      	cmp	r3, #0
 80173d4:	dc6a      	bgt.n	80174ac <tcp_process+0x434>
        pcb->state = ESTABLISHED;
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	2204      	movs	r2, #4
 80173da:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	d00b      	beq.n	80173fc <tcp_process+0x384>
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80173e8:	699b      	ldr	r3, [r3, #24]
 80173ea:	2b00      	cmp	r3, #0
 80173ec:	d106      	bne.n	80173fc <tcp_process+0x384>
 80173ee:	4b74      	ldr	r3, [pc, #464]	@ (80175c0 <tcp_process+0x548>)
 80173f0:	f44f 7254 	mov.w	r2, #848	@ 0x350
 80173f4:	4973      	ldr	r1, [pc, #460]	@ (80175c4 <tcp_process+0x54c>)
 80173f6:	4874      	ldr	r0, [pc, #464]	@ (80175c8 <tcp_process+0x550>)
 80173f8:	f009 f852 	bl	80204a0 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017400:	2b00      	cmp	r3, #0
 8017402:	d102      	bne.n	801740a <tcp_process+0x392>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 8017404:	23fa      	movs	r3, #250	@ 0xfa
 8017406:	76bb      	strb	r3, [r7, #26]
 8017408:	e011      	b.n	801742e <tcp_process+0x3b6>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801740a:	687b      	ldr	r3, [r7, #4]
 801740c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801740e:	699b      	ldr	r3, [r3, #24]
 8017410:	2b00      	cmp	r3, #0
 8017412:	d00a      	beq.n	801742a <tcp_process+0x3b2>
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017418:	699b      	ldr	r3, [r3, #24]
 801741a:	687a      	ldr	r2, [r7, #4]
 801741c:	6910      	ldr	r0, [r2, #16]
 801741e:	2200      	movs	r2, #0
 8017420:	6879      	ldr	r1, [r7, #4]
 8017422:	4798      	blx	r3
 8017424:	4603      	mov	r3, r0
 8017426:	76bb      	strb	r3, [r7, #26]
 8017428:	e001      	b.n	801742e <tcp_process+0x3b6>
 801742a:	23f0      	movs	r3, #240	@ 0xf0
 801742c:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 801742e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017432:	2b00      	cmp	r3, #0
 8017434:	d00a      	beq.n	801744c <tcp_process+0x3d4>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 8017436:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801743a:	f113 0f0d 	cmn.w	r3, #13
 801743e:	d002      	beq.n	8017446 <tcp_process+0x3ce>
            tcp_abort(pcb);
 8017440:	6878      	ldr	r0, [r7, #4]
 8017442:	f7fd fe8f 	bl	8015164 <tcp_abort>
          }
          return ERR_ABRT;
 8017446:	f06f 030c 	mvn.w	r3, #12
 801744a:	e1b9      	b.n	80177c0 <tcp_process+0x748>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 801744c:	6878      	ldr	r0, [r7, #4]
 801744e:	f000 fa3d 	bl	80178cc <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 8017452:	4b5e      	ldr	r3, [pc, #376]	@ (80175cc <tcp_process+0x554>)
 8017454:	881b      	ldrh	r3, [r3, #0]
 8017456:	2b00      	cmp	r3, #0
 8017458:	d005      	beq.n	8017466 <tcp_process+0x3ee>
          recv_acked--;
 801745a:	4b5c      	ldr	r3, [pc, #368]	@ (80175cc <tcp_process+0x554>)
 801745c:	881b      	ldrh	r3, [r3, #0]
 801745e:	3b01      	subs	r3, #1
 8017460:	b29a      	uxth	r2, r3
 8017462:	4b5a      	ldr	r3, [pc, #360]	@ (80175cc <tcp_process+0x554>)
 8017464:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801746a:	005b      	lsls	r3, r3, #1
 801746c:	f241 121c 	movw	r2, #4380	@ 0x111c
 8017470:	429a      	cmp	r2, r3
 8017472:	bf38      	it	cc
 8017474:	461a      	movcc	r2, r3
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801747a:	009b      	lsls	r3, r3, #2
 801747c:	4293      	cmp	r3, r2
 801747e:	bf28      	it	cs
 8017480:	4613      	movcs	r3, r2
 8017482:	b29a      	uxth	r2, r3
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 801748a:	4b51      	ldr	r3, [pc, #324]	@ (80175d0 <tcp_process+0x558>)
 801748c:	781b      	ldrb	r3, [r3, #0]
 801748e:	f003 0320 	and.w	r3, r3, #32
 8017492:	2b00      	cmp	r3, #0
 8017494:	d034      	beq.n	8017500 <tcp_process+0x488>
          tcp_ack_now(pcb);
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	7e9b      	ldrb	r3, [r3, #26]
 801749a:	f043 0302 	orr.w	r3, r3, #2
 801749e:	b2da      	uxtb	r2, r3
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	2207      	movs	r2, #7
 80174a8:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 80174aa:	e029      	b.n	8017500 <tcp_process+0x488>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80174ac:	4b3e      	ldr	r3, [pc, #248]	@ (80175a8 <tcp_process+0x530>)
 80174ae:	6818      	ldr	r0, [r3, #0]
 80174b0:	4b3e      	ldr	r3, [pc, #248]	@ (80175ac <tcp_process+0x534>)
 80174b2:	881b      	ldrh	r3, [r3, #0]
 80174b4:	461a      	mov	r2, r3
 80174b6:	4b3e      	ldr	r3, [pc, #248]	@ (80175b0 <tcp_process+0x538>)
 80174b8:	681b      	ldr	r3, [r3, #0]
 80174ba:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80174bc:	4b3d      	ldr	r3, [pc, #244]	@ (80175b4 <tcp_process+0x53c>)
 80174be:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80174c0:	885b      	ldrh	r3, [r3, #2]
 80174c2:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80174c4:	4a3b      	ldr	r2, [pc, #236]	@ (80175b4 <tcp_process+0x53c>)
 80174c6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80174c8:	8812      	ldrh	r2, [r2, #0]
 80174ca:	b292      	uxth	r2, r2
 80174cc:	9201      	str	r2, [sp, #4]
 80174ce:	9300      	str	r3, [sp, #0]
 80174d0:	4b39      	ldr	r3, [pc, #228]	@ (80175b8 <tcp_process+0x540>)
 80174d2:	4a3a      	ldr	r2, [pc, #232]	@ (80175bc <tcp_process+0x544>)
 80174d4:	f002 fc3e 	bl	8019d54 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 80174d8:	e166      	b.n	80177a8 <tcp_process+0x730>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80174da:	4b32      	ldr	r3, [pc, #200]	@ (80175a4 <tcp_process+0x52c>)
 80174dc:	781b      	ldrb	r3, [r3, #0]
 80174de:	f003 0302 	and.w	r3, r3, #2
 80174e2:	2b00      	cmp	r3, #0
 80174e4:	f000 8160 	beq.w	80177a8 <tcp_process+0x730>
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80174ec:	1e5a      	subs	r2, r3, #1
 80174ee:	4b30      	ldr	r3, [pc, #192]	@ (80175b0 <tcp_process+0x538>)
 80174f0:	681b      	ldr	r3, [r3, #0]
 80174f2:	429a      	cmp	r2, r3
 80174f4:	f040 8158 	bne.w	80177a8 <tcp_process+0x730>
      tcp_rexmit(pcb);
 80174f8:	6878      	ldr	r0, [r7, #4]
 80174fa:	f002 fce9 	bl	8019ed0 <tcp_rexmit>
    break;
 80174fe:	e153      	b.n	80177a8 <tcp_process+0x730>
 8017500:	e152      	b.n	80177a8 <tcp_process+0x730>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 8017502:	6878      	ldr	r0, [r7, #4]
 8017504:	f000 f9e2 	bl	80178cc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8017508:	4b31      	ldr	r3, [pc, #196]	@ (80175d0 <tcp_process+0x558>)
 801750a:	781b      	ldrb	r3, [r3, #0]
 801750c:	f003 0320 	and.w	r3, r3, #32
 8017510:	2b00      	cmp	r3, #0
 8017512:	f000 814b 	beq.w	80177ac <tcp_process+0x734>
      tcp_ack_now(pcb);
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	7e9b      	ldrb	r3, [r3, #26]
 801751a:	f043 0302 	orr.w	r3, r3, #2
 801751e:	b2da      	uxtb	r2, r3
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	2207      	movs	r2, #7
 8017528:	751a      	strb	r2, [r3, #20]
    }
    break;
 801752a:	e13f      	b.n	80177ac <tcp_process+0x734>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 801752c:	6878      	ldr	r0, [r7, #4]
 801752e:	f000 f9cd 	bl	80178cc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8017532:	4b27      	ldr	r3, [pc, #156]	@ (80175d0 <tcp_process+0x558>)
 8017534:	781b      	ldrb	r3, [r3, #0]
 8017536:	f003 0320 	and.w	r3, r3, #32
 801753a:	2b00      	cmp	r3, #0
 801753c:	d070      	beq.n	8017620 <tcp_process+0x5a8>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801753e:	4b19      	ldr	r3, [pc, #100]	@ (80175a4 <tcp_process+0x52c>)
 8017540:	781b      	ldrb	r3, [r3, #0]
 8017542:	f003 0310 	and.w	r3, r3, #16
 8017546:	2b00      	cmp	r3, #0
 8017548:	d05f      	beq.n	801760a <tcp_process+0x592>
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801754e:	4b16      	ldr	r3, [pc, #88]	@ (80175a8 <tcp_process+0x530>)
 8017550:	681b      	ldr	r3, [r3, #0]
 8017552:	429a      	cmp	r2, r3
 8017554:	d159      	bne.n	801760a <tcp_process+0x592>
          pcb->unsent == NULL) {
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801755a:	2b00      	cmp	r3, #0
 801755c:	d155      	bne.n	801760a <tcp_process+0x592>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	7e9b      	ldrb	r3, [r3, #26]
 8017562:	f043 0302 	orr.w	r3, r3, #2
 8017566:	b2da      	uxtb	r2, r3
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801756c:	6878      	ldr	r0, [r7, #4]
 801756e:	f7fe fe6b 	bl	8016248 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8017572:	4b18      	ldr	r3, [pc, #96]	@ (80175d4 <tcp_process+0x55c>)
 8017574:	681b      	ldr	r3, [r3, #0]
 8017576:	687a      	ldr	r2, [r7, #4]
 8017578:	429a      	cmp	r2, r3
 801757a:	d105      	bne.n	8017588 <tcp_process+0x510>
 801757c:	4b15      	ldr	r3, [pc, #84]	@ (80175d4 <tcp_process+0x55c>)
 801757e:	681b      	ldr	r3, [r3, #0]
 8017580:	68db      	ldr	r3, [r3, #12]
 8017582:	4a14      	ldr	r2, [pc, #80]	@ (80175d4 <tcp_process+0x55c>)
 8017584:	6013      	str	r3, [r2, #0]
 8017586:	e02d      	b.n	80175e4 <tcp_process+0x56c>
 8017588:	4b12      	ldr	r3, [pc, #72]	@ (80175d4 <tcp_process+0x55c>)
 801758a:	681b      	ldr	r3, [r3, #0]
 801758c:	617b      	str	r3, [r7, #20]
 801758e:	e026      	b.n	80175de <tcp_process+0x566>
 8017590:	697b      	ldr	r3, [r7, #20]
 8017592:	68db      	ldr	r3, [r3, #12]
 8017594:	687a      	ldr	r2, [r7, #4]
 8017596:	429a      	cmp	r2, r3
 8017598:	d11e      	bne.n	80175d8 <tcp_process+0x560>
 801759a:	687b      	ldr	r3, [r7, #4]
 801759c:	68da      	ldr	r2, [r3, #12]
 801759e:	697b      	ldr	r3, [r7, #20]
 80175a0:	60da      	str	r2, [r3, #12]
 80175a2:	e01f      	b.n	80175e4 <tcp_process+0x56c>
 80175a4:	2000dd60 	.word	0x2000dd60
 80175a8:	2000dd58 	.word	0x2000dd58
 80175ac:	2000dd5e 	.word	0x2000dd5e
 80175b0:	2000dd54 	.word	0x2000dd54
 80175b4:	2000dd44 	.word	0x2000dd44
 80175b8:	2000a5ac 	.word	0x2000a5ac
 80175bc:	2000a5b0 	.word	0x2000a5b0
 80175c0:	08024aa4 	.word	0x08024aa4
 80175c4:	08024ca8 	.word	0x08024ca8
 80175c8:	08024ae8 	.word	0x08024ae8
 80175cc:	2000dd5c 	.word	0x2000dd5c
 80175d0:	2000dd61 	.word	0x2000dd61
 80175d4:	2000dd28 	.word	0x2000dd28
 80175d8:	697b      	ldr	r3, [r7, #20]
 80175da:	68db      	ldr	r3, [r3, #12]
 80175dc:	617b      	str	r3, [r7, #20]
 80175de:	697b      	ldr	r3, [r7, #20]
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d1d5      	bne.n	8017590 <tcp_process+0x518>
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	2200      	movs	r2, #0
 80175e8:	60da      	str	r2, [r3, #12]
 80175ea:	4b77      	ldr	r3, [pc, #476]	@ (80177c8 <tcp_process+0x750>)
 80175ec:	2201      	movs	r2, #1
 80175ee:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	220a      	movs	r2, #10
 80175f4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80175f6:	4b75      	ldr	r3, [pc, #468]	@ (80177cc <tcp_process+0x754>)
 80175f8:	681a      	ldr	r2, [r3, #0]
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	60da      	str	r2, [r3, #12]
 80175fe:	4a73      	ldr	r2, [pc, #460]	@ (80177cc <tcp_process+0x754>)
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	6013      	str	r3, [r2, #0]
 8017604:	f002 fe1e 	bl	801a244 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 8017608:	e0d2      	b.n	80177b0 <tcp_process+0x738>
        tcp_ack_now(pcb);
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	7e9b      	ldrb	r3, [r3, #26]
 801760e:	f043 0302 	orr.w	r3, r3, #2
 8017612:	b2da      	uxtb	r2, r3
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	2208      	movs	r2, #8
 801761c:	751a      	strb	r2, [r3, #20]
    break;
 801761e:	e0c7      	b.n	80177b0 <tcp_process+0x738>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017620:	4b6b      	ldr	r3, [pc, #428]	@ (80177d0 <tcp_process+0x758>)
 8017622:	781b      	ldrb	r3, [r3, #0]
 8017624:	f003 0310 	and.w	r3, r3, #16
 8017628:	2b00      	cmp	r3, #0
 801762a:	f000 80c1 	beq.w	80177b0 <tcp_process+0x738>
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017632:	4b68      	ldr	r3, [pc, #416]	@ (80177d4 <tcp_process+0x75c>)
 8017634:	681b      	ldr	r3, [r3, #0]
 8017636:	429a      	cmp	r2, r3
 8017638:	f040 80ba 	bne.w	80177b0 <tcp_process+0x738>
               pcb->unsent == NULL) {
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017640:	2b00      	cmp	r3, #0
 8017642:	f040 80b5 	bne.w	80177b0 <tcp_process+0x738>
      pcb->state = FIN_WAIT_2;
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	2206      	movs	r2, #6
 801764a:	751a      	strb	r2, [r3, #20]
    break;
 801764c:	e0b0      	b.n	80177b0 <tcp_process+0x738>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 801764e:	6878      	ldr	r0, [r7, #4]
 8017650:	f000 f93c 	bl	80178cc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8017654:	4b60      	ldr	r3, [pc, #384]	@ (80177d8 <tcp_process+0x760>)
 8017656:	781b      	ldrb	r3, [r3, #0]
 8017658:	f003 0320 	and.w	r3, r3, #32
 801765c:	2b00      	cmp	r3, #0
 801765e:	f000 80a9 	beq.w	80177b4 <tcp_process+0x73c>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	7e9b      	ldrb	r3, [r3, #26]
 8017666:	f043 0302 	orr.w	r3, r3, #2
 801766a:	b2da      	uxtb	r2, r3
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 8017670:	6878      	ldr	r0, [r7, #4]
 8017672:	f7fe fde9 	bl	8016248 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8017676:	4b59      	ldr	r3, [pc, #356]	@ (80177dc <tcp_process+0x764>)
 8017678:	681b      	ldr	r3, [r3, #0]
 801767a:	687a      	ldr	r2, [r7, #4]
 801767c:	429a      	cmp	r2, r3
 801767e:	d105      	bne.n	801768c <tcp_process+0x614>
 8017680:	4b56      	ldr	r3, [pc, #344]	@ (80177dc <tcp_process+0x764>)
 8017682:	681b      	ldr	r3, [r3, #0]
 8017684:	68db      	ldr	r3, [r3, #12]
 8017686:	4a55      	ldr	r2, [pc, #340]	@ (80177dc <tcp_process+0x764>)
 8017688:	6013      	str	r3, [r2, #0]
 801768a:	e013      	b.n	80176b4 <tcp_process+0x63c>
 801768c:	4b53      	ldr	r3, [pc, #332]	@ (80177dc <tcp_process+0x764>)
 801768e:	681b      	ldr	r3, [r3, #0]
 8017690:	613b      	str	r3, [r7, #16]
 8017692:	e00c      	b.n	80176ae <tcp_process+0x636>
 8017694:	693b      	ldr	r3, [r7, #16]
 8017696:	68db      	ldr	r3, [r3, #12]
 8017698:	687a      	ldr	r2, [r7, #4]
 801769a:	429a      	cmp	r2, r3
 801769c:	d104      	bne.n	80176a8 <tcp_process+0x630>
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	68da      	ldr	r2, [r3, #12]
 80176a2:	693b      	ldr	r3, [r7, #16]
 80176a4:	60da      	str	r2, [r3, #12]
 80176a6:	e005      	b.n	80176b4 <tcp_process+0x63c>
 80176a8:	693b      	ldr	r3, [r7, #16]
 80176aa:	68db      	ldr	r3, [r3, #12]
 80176ac:	613b      	str	r3, [r7, #16]
 80176ae:	693b      	ldr	r3, [r7, #16]
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	d1ef      	bne.n	8017694 <tcp_process+0x61c>
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	2200      	movs	r2, #0
 80176b8:	60da      	str	r2, [r3, #12]
 80176ba:	4b43      	ldr	r3, [pc, #268]	@ (80177c8 <tcp_process+0x750>)
 80176bc:	2201      	movs	r2, #1
 80176be:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	220a      	movs	r2, #10
 80176c4:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80176c6:	4b41      	ldr	r3, [pc, #260]	@ (80177cc <tcp_process+0x754>)
 80176c8:	681a      	ldr	r2, [r3, #0]
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	60da      	str	r2, [r3, #12]
 80176ce:	4a3f      	ldr	r2, [pc, #252]	@ (80177cc <tcp_process+0x754>)
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	6013      	str	r3, [r2, #0]
 80176d4:	f002 fdb6 	bl	801a244 <tcp_timer_needed>
    }
    break;
 80176d8:	e06c      	b.n	80177b4 <tcp_process+0x73c>
  case CLOSING:
    tcp_receive(pcb);
 80176da:	6878      	ldr	r0, [r7, #4]
 80176dc:	f000 f8f6 	bl	80178cc <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80176e0:	4b3b      	ldr	r3, [pc, #236]	@ (80177d0 <tcp_process+0x758>)
 80176e2:	781b      	ldrb	r3, [r3, #0]
 80176e4:	f003 0310 	and.w	r3, r3, #16
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d065      	beq.n	80177b8 <tcp_process+0x740>
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80176f0:	4b38      	ldr	r3, [pc, #224]	@ (80177d4 <tcp_process+0x75c>)
 80176f2:	681b      	ldr	r3, [r3, #0]
 80176f4:	429a      	cmp	r2, r3
 80176f6:	d15f      	bne.n	80177b8 <tcp_process+0x740>
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	d15b      	bne.n	80177b8 <tcp_process+0x740>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 8017700:	6878      	ldr	r0, [r7, #4]
 8017702:	f7fe fda1 	bl	8016248 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8017706:	4b35      	ldr	r3, [pc, #212]	@ (80177dc <tcp_process+0x764>)
 8017708:	681b      	ldr	r3, [r3, #0]
 801770a:	687a      	ldr	r2, [r7, #4]
 801770c:	429a      	cmp	r2, r3
 801770e:	d105      	bne.n	801771c <tcp_process+0x6a4>
 8017710:	4b32      	ldr	r3, [pc, #200]	@ (80177dc <tcp_process+0x764>)
 8017712:	681b      	ldr	r3, [r3, #0]
 8017714:	68db      	ldr	r3, [r3, #12]
 8017716:	4a31      	ldr	r2, [pc, #196]	@ (80177dc <tcp_process+0x764>)
 8017718:	6013      	str	r3, [r2, #0]
 801771a:	e013      	b.n	8017744 <tcp_process+0x6cc>
 801771c:	4b2f      	ldr	r3, [pc, #188]	@ (80177dc <tcp_process+0x764>)
 801771e:	681b      	ldr	r3, [r3, #0]
 8017720:	60fb      	str	r3, [r7, #12]
 8017722:	e00c      	b.n	801773e <tcp_process+0x6c6>
 8017724:	68fb      	ldr	r3, [r7, #12]
 8017726:	68db      	ldr	r3, [r3, #12]
 8017728:	687a      	ldr	r2, [r7, #4]
 801772a:	429a      	cmp	r2, r3
 801772c:	d104      	bne.n	8017738 <tcp_process+0x6c0>
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	68da      	ldr	r2, [r3, #12]
 8017732:	68fb      	ldr	r3, [r7, #12]
 8017734:	60da      	str	r2, [r3, #12]
 8017736:	e005      	b.n	8017744 <tcp_process+0x6cc>
 8017738:	68fb      	ldr	r3, [r7, #12]
 801773a:	68db      	ldr	r3, [r3, #12]
 801773c:	60fb      	str	r3, [r7, #12]
 801773e:	68fb      	ldr	r3, [r7, #12]
 8017740:	2b00      	cmp	r3, #0
 8017742:	d1ef      	bne.n	8017724 <tcp_process+0x6ac>
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	2200      	movs	r2, #0
 8017748:	60da      	str	r2, [r3, #12]
 801774a:	4b1f      	ldr	r3, [pc, #124]	@ (80177c8 <tcp_process+0x750>)
 801774c:	2201      	movs	r2, #1
 801774e:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	220a      	movs	r2, #10
 8017754:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8017756:	4b1d      	ldr	r3, [pc, #116]	@ (80177cc <tcp_process+0x754>)
 8017758:	681a      	ldr	r2, [r3, #0]
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	60da      	str	r2, [r3, #12]
 801775e:	4a1b      	ldr	r2, [pc, #108]	@ (80177cc <tcp_process+0x754>)
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	6013      	str	r3, [r2, #0]
 8017764:	f002 fd6e 	bl	801a244 <tcp_timer_needed>
    }
    break;
 8017768:	e026      	b.n	80177b8 <tcp_process+0x740>
  case LAST_ACK:
    tcp_receive(pcb);
 801776a:	6878      	ldr	r0, [r7, #4]
 801776c:	f000 f8ae 	bl	80178cc <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8017770:	4b17      	ldr	r3, [pc, #92]	@ (80177d0 <tcp_process+0x758>)
 8017772:	781b      	ldrb	r3, [r3, #0]
 8017774:	f003 0310 	and.w	r3, r3, #16
 8017778:	2b00      	cmp	r3, #0
 801777a:	d01f      	beq.n	80177bc <tcp_process+0x744>
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017780:	4b14      	ldr	r3, [pc, #80]	@ (80177d4 <tcp_process+0x75c>)
 8017782:	681b      	ldr	r3, [r3, #0]
 8017784:	429a      	cmp	r2, r3
 8017786:	d119      	bne.n	80177bc <tcp_process+0x744>
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801778c:	2b00      	cmp	r3, #0
 801778e:	d115      	bne.n	80177bc <tcp_process+0x744>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 8017790:	4b11      	ldr	r3, [pc, #68]	@ (80177d8 <tcp_process+0x760>)
 8017792:	781b      	ldrb	r3, [r3, #0]
 8017794:	f043 0310 	orr.w	r3, r3, #16
 8017798:	b2da      	uxtb	r2, r3
 801779a:	4b0f      	ldr	r3, [pc, #60]	@ (80177d8 <tcp_process+0x760>)
 801779c:	701a      	strb	r2, [r3, #0]
    }
    break;
 801779e:	e00d      	b.n	80177bc <tcp_process+0x744>
  default:
    break;
 80177a0:	bf00      	nop
 80177a2:	e00c      	b.n	80177be <tcp_process+0x746>
    break;
 80177a4:	bf00      	nop
 80177a6:	e00a      	b.n	80177be <tcp_process+0x746>
    break;
 80177a8:	bf00      	nop
 80177aa:	e008      	b.n	80177be <tcp_process+0x746>
    break;
 80177ac:	bf00      	nop
 80177ae:	e006      	b.n	80177be <tcp_process+0x746>
    break;
 80177b0:	bf00      	nop
 80177b2:	e004      	b.n	80177be <tcp_process+0x746>
    break;
 80177b4:	bf00      	nop
 80177b6:	e002      	b.n	80177be <tcp_process+0x746>
    break;
 80177b8:	bf00      	nop
 80177ba:	e000      	b.n	80177be <tcp_process+0x746>
    break;
 80177bc:	bf00      	nop
  }
  return ERR_OK;
 80177be:	2300      	movs	r3, #0
}
 80177c0:	4618      	mov	r0, r3
 80177c2:	3720      	adds	r7, #32
 80177c4:	46bd      	mov	sp, r7
 80177c6:	bd80      	pop	{r7, pc}
 80177c8:	2000dd30 	.word	0x2000dd30
 80177cc:	2000dd2c 	.word	0x2000dd2c
 80177d0:	2000dd60 	.word	0x2000dd60
 80177d4:	2000dd58 	.word	0x2000dd58
 80177d8:	2000dd61 	.word	0x2000dd61
 80177dc:	2000dd28 	.word	0x2000dd28

080177e0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80177e0:	b590      	push	{r4, r7, lr}
 80177e2:	b085      	sub	sp, #20
 80177e4:	af00      	add	r7, sp, #0
 80177e6:	6078      	str	r0, [r7, #4]
 80177e8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	68db      	ldr	r3, [r3, #12]
 80177ee:	899b      	ldrh	r3, [r3, #12]
 80177f0:	b29b      	uxth	r3, r3
 80177f2:	4618      	mov	r0, r3
 80177f4:	f7fb fc14 	bl	8013020 <lwip_htons>
 80177f8:	4603      	mov	r3, r0
 80177fa:	f003 0301 	and.w	r3, r3, #1
 80177fe:	2b00      	cmp	r3, #0
 8017800:	d027      	beq.n	8017852 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8017802:	6838      	ldr	r0, [r7, #0]
 8017804:	f7fe fa83 	bl	8015d0e <tcp_segs_free>
    next = NULL;
 8017808:	2300      	movs	r3, #0
 801780a:	603b      	str	r3, [r7, #0]
 801780c:	e055      	b.n	80178ba <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801780e:	683b      	ldr	r3, [r7, #0]
 8017810:	68db      	ldr	r3, [r3, #12]
 8017812:	899b      	ldrh	r3, [r3, #12]
 8017814:	b29b      	uxth	r3, r3
 8017816:	4618      	mov	r0, r3
 8017818:	f7fb fc02 	bl	8013020 <lwip_htons>
 801781c:	4603      	mov	r3, r0
 801781e:	f003 0301 	and.w	r3, r3, #1
 8017822:	2b00      	cmp	r3, #0
 8017824:	d00d      	beq.n	8017842 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	68db      	ldr	r3, [r3, #12]
 801782a:	899b      	ldrh	r3, [r3, #12]
 801782c:	b29c      	uxth	r4, r3
 801782e:	2001      	movs	r0, #1
 8017830:	f7fb fbf6 	bl	8013020 <lwip_htons>
 8017834:	4603      	mov	r3, r0
 8017836:	461a      	mov	r2, r3
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	68db      	ldr	r3, [r3, #12]
 801783c:	4322      	orrs	r2, r4
 801783e:	b292      	uxth	r2, r2
 8017840:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8017842:	683b      	ldr	r3, [r7, #0]
 8017844:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8017846:	683b      	ldr	r3, [r7, #0]
 8017848:	681b      	ldr	r3, [r3, #0]
 801784a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801784c:	68f8      	ldr	r0, [r7, #12]
 801784e:	f7fe fa73 	bl	8015d38 <tcp_seg_free>
    while (next &&
 8017852:	683b      	ldr	r3, [r7, #0]
 8017854:	2b00      	cmp	r3, #0
 8017856:	d00e      	beq.n	8017876 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	891b      	ldrh	r3, [r3, #8]
 801785c:	461a      	mov	r2, r3
 801785e:	4b1a      	ldr	r3, [pc, #104]	@ (80178c8 <tcp_oos_insert_segment+0xe8>)
 8017860:	681b      	ldr	r3, [r3, #0]
 8017862:	441a      	add	r2, r3
 8017864:	683b      	ldr	r3, [r7, #0]
 8017866:	68db      	ldr	r3, [r3, #12]
 8017868:	685b      	ldr	r3, [r3, #4]
 801786a:	6839      	ldr	r1, [r7, #0]
 801786c:	8909      	ldrh	r1, [r1, #8]
 801786e:	440b      	add	r3, r1
 8017870:	1ad3      	subs	r3, r2, r3
    while (next &&
 8017872:	2b00      	cmp	r3, #0
 8017874:	dacb      	bge.n	801780e <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 8017876:	683b      	ldr	r3, [r7, #0]
 8017878:	2b00      	cmp	r3, #0
 801787a:	d01e      	beq.n	80178ba <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	891b      	ldrh	r3, [r3, #8]
 8017880:	461a      	mov	r2, r3
 8017882:	4b11      	ldr	r3, [pc, #68]	@ (80178c8 <tcp_oos_insert_segment+0xe8>)
 8017884:	681b      	ldr	r3, [r3, #0]
 8017886:	441a      	add	r2, r3
 8017888:	683b      	ldr	r3, [r7, #0]
 801788a:	68db      	ldr	r3, [r3, #12]
 801788c:	685b      	ldr	r3, [r3, #4]
 801788e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8017890:	2b00      	cmp	r3, #0
 8017892:	dd12      	ble.n	80178ba <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8017894:	683b      	ldr	r3, [r7, #0]
 8017896:	68db      	ldr	r3, [r3, #12]
 8017898:	685b      	ldr	r3, [r3, #4]
 801789a:	b29a      	uxth	r2, r3
 801789c:	4b0a      	ldr	r3, [pc, #40]	@ (80178c8 <tcp_oos_insert_segment+0xe8>)
 801789e:	681b      	ldr	r3, [r3, #0]
 80178a0:	b29b      	uxth	r3, r3
 80178a2:	1ad3      	subs	r3, r2, r3
 80178a4:	b29a      	uxth	r2, r3
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	685a      	ldr	r2, [r3, #4]
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	891b      	ldrh	r3, [r3, #8]
 80178b2:	4619      	mov	r1, r3
 80178b4:	4610      	mov	r0, r2
 80178b6:	f7fc fc97 	bl	80141e8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	683a      	ldr	r2, [r7, #0]
 80178be:	601a      	str	r2, [r3, #0]
}
 80178c0:	bf00      	nop
 80178c2:	3714      	adds	r7, #20
 80178c4:	46bd      	mov	sp, r7
 80178c6:	bd90      	pop	{r4, r7, pc}
 80178c8:	2000dd54 	.word	0x2000dd54

080178cc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80178cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80178ce:	b08d      	sub	sp, #52	@ 0x34
 80178d0:	af00      	add	r7, sp, #0
 80178d2:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 80178d4:	2300      	movs	r3, #0
 80178d6:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	7d1b      	ldrb	r3, [r3, #20]
 80178dc:	2b03      	cmp	r3, #3
 80178de:	d806      	bhi.n	80178ee <tcp_receive+0x22>
 80178e0:	4b98      	ldr	r3, [pc, #608]	@ (8017b44 <tcp_receive+0x278>)
 80178e2:	f44f 6281 	mov.w	r2, #1032	@ 0x408
 80178e6:	4998      	ldr	r1, [pc, #608]	@ (8017b48 <tcp_receive+0x27c>)
 80178e8:	4898      	ldr	r0, [pc, #608]	@ (8017b4c <tcp_receive+0x280>)
 80178ea:	f008 fdd9 	bl	80204a0 <iprintf>

  if (flags & TCP_ACK) {
 80178ee:	4b98      	ldr	r3, [pc, #608]	@ (8017b50 <tcp_receive+0x284>)
 80178f0:	781b      	ldrb	r3, [r3, #0]
 80178f2:	f003 0310 	and.w	r3, r3, #16
 80178f6:	2b00      	cmp	r3, #0
 80178f8:	f000 82c1 	beq.w	8017e7e <tcp_receive+0x5b2>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80178fc:	687b      	ldr	r3, [r7, #4]
 80178fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8017902:	461a      	mov	r2, r3
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017908:	4413      	add	r3, r2
 801790a:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017910:	4b90      	ldr	r3, [pc, #576]	@ (8017b54 <tcp_receive+0x288>)
 8017912:	681b      	ldr	r3, [r3, #0]
 8017914:	1ad3      	subs	r3, r2, r3
 8017916:	2b00      	cmp	r3, #0
 8017918:	db1b      	blt.n	8017952 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801791e:	4b8d      	ldr	r3, [pc, #564]	@ (8017b54 <tcp_receive+0x288>)
 8017920:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8017922:	429a      	cmp	r2, r3
 8017924:	d106      	bne.n	8017934 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801792a:	4b8b      	ldr	r3, [pc, #556]	@ (8017b58 <tcp_receive+0x28c>)
 801792c:	681b      	ldr	r3, [r3, #0]
 801792e:	1ad3      	subs	r3, r2, r3
 8017930:	2b00      	cmp	r3, #0
 8017932:	db0e      	blt.n	8017952 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8017938:	4b87      	ldr	r3, [pc, #540]	@ (8017b58 <tcp_receive+0x28c>)
 801793a:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801793c:	429a      	cmp	r2, r3
 801793e:	d141      	bne.n	80179c4 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8017940:	4b86      	ldr	r3, [pc, #536]	@ (8017b5c <tcp_receive+0x290>)
 8017942:	681b      	ldr	r3, [r3, #0]
 8017944:	89db      	ldrh	r3, [r3, #14]
 8017946:	b29a      	uxth	r2, r3
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801794e:	429a      	cmp	r2, r3
 8017950:	d938      	bls.n	80179c4 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8017952:	4b82      	ldr	r3, [pc, #520]	@ (8017b5c <tcp_receive+0x290>)
 8017954:	681b      	ldr	r3, [r3, #0]
 8017956:	89db      	ldrh	r3, [r3, #14]
 8017958:	b29a      	uxth	r2, r3
 801795a:	687b      	ldr	r3, [r7, #4]
 801795c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	f8b3 205e 	ldrh.w	r2, [r3, #94]	@ 0x5e
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801796c:	429a      	cmp	r2, r3
 801796e:	d205      	bcs.n	801797c <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      }
      pcb->snd_wl1 = seqno;
 801797c:	4b75      	ldr	r3, [pc, #468]	@ (8017b54 <tcp_receive+0x288>)
 801797e:	681a      	ldr	r2, [r3, #0]
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	651a      	str	r2, [r3, #80]	@ 0x50
      pcb->snd_wl2 = ackno;
 8017984:	4b74      	ldr	r3, [pc, #464]	@ (8017b58 <tcp_receive+0x28c>)
 8017986:	681a      	ldr	r2, [r3, #0]
 8017988:	687b      	ldr	r3, [r7, #4]
 801798a:	655a      	str	r2, [r3, #84]	@ 0x54
      if (pcb->snd_wnd == 0) {
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8017992:	2b00      	cmp	r3, #0
 8017994:	d10d      	bne.n	80179b2 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 801799c:	2b00      	cmp	r3, #0
 801799e:	d111      	bne.n	80179c4 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	2200      	movs	r2, #0
 80179a4:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
          pcb->persist_backoff = 1;
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	2201      	movs	r2, #1
 80179ac:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
 80179b0:	e008      	b.n	80179c4 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80179b8:	2b00      	cmp	r3, #0
 80179ba:	d003      	beq.n	80179c4 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 80179bc:	687b      	ldr	r3, [r7, #4]
 80179be:	2200      	movs	r2, #0
 80179c0:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80179c4:	4b64      	ldr	r3, [pc, #400]	@ (8017b58 <tcp_receive+0x28c>)
 80179c6:	681a      	ldr	r2, [r3, #0]
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80179cc:	1ad3      	subs	r3, r2, r3
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	dc53      	bgt.n	8017a7a <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 80179d2:	4b63      	ldr	r3, [pc, #396]	@ (8017b60 <tcp_receive+0x294>)
 80179d4:	881b      	ldrh	r3, [r3, #0]
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	d146      	bne.n	8017a68 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80179de:	687a      	ldr	r2, [r7, #4]
 80179e0:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 80179e4:	4413      	add	r3, r2
 80179e6:	697a      	ldr	r2, [r7, #20]
 80179e8:	429a      	cmp	r2, r3
 80179ea:	d13d      	bne.n	8017a68 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80179f2:	2b00      	cmp	r3, #0
 80179f4:	db38      	blt.n	8017a68 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80179fa:	4b57      	ldr	r3, [pc, #348]	@ (8017b58 <tcp_receive+0x28c>)
 80179fc:	681b      	ldr	r3, [r3, #0]
 80179fe:	429a      	cmp	r2, r3
 8017a00:	d132      	bne.n	8017a68 <tcp_receive+0x19c>
              found_dupack = 1;
 8017a02:	2301      	movs	r3, #1
 8017a04:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8017a06:	687b      	ldr	r3, [r7, #4]
 8017a08:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8017a0c:	2bff      	cmp	r3, #255	@ 0xff
 8017a0e:	d007      	beq.n	8017a20 <tcp_receive+0x154>
                ++pcb->dupacks;
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8017a16:	3301      	adds	r3, #1
 8017a18:	b2da      	uxtb	r2, r3
 8017a1a:	687b      	ldr	r3, [r7, #4]
 8017a1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8017a26:	2b03      	cmp	r3, #3
 8017a28:	d916      	bls.n	8017a58 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8017a2a:	687b      	ldr	r3, [r7, #4]
 8017a2c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017a34:	4413      	add	r3, r2
 8017a36:	b29a      	uxth	r2, r3
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017a3e:	429a      	cmp	r2, r3
 8017a40:	d912      	bls.n	8017a68 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017a4c:	4413      	add	r3, r2
 8017a4e:	b29a      	uxth	r2, r3
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8017a56:	e007      	b.n	8017a68 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8017a5e:	2b03      	cmp	r3, #3
 8017a60:	d102      	bne.n	8017a68 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 8017a62:	6878      	ldr	r0, [r7, #4]
 8017a64:	f002 fa8e 	bl	8019f84 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8017a68:	69fb      	ldr	r3, [r7, #28]
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	f040 816a 	bne.w	8017d44 <tcp_receive+0x478>
        pcb->dupacks = 0;
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	2200      	movs	r2, #0
 8017a74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8017a78:	e164      	b.n	8017d44 <tcp_receive+0x478>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8017a7a:	4b37      	ldr	r3, [pc, #220]	@ (8017b58 <tcp_receive+0x28c>)
 8017a7c:	681a      	ldr	r2, [r3, #0]
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017a82:	1ad3      	subs	r3, r2, r3
 8017a84:	3b01      	subs	r3, #1
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	f2c0 8108 	blt.w	8017c9c <tcp_receive+0x3d0>
 8017a8c:	4b32      	ldr	r3, [pc, #200]	@ (8017b58 <tcp_receive+0x28c>)
 8017a8e:	681a      	ldr	r2, [r3, #0]
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017a94:	1ad3      	subs	r3, r2, r3
 8017a96:	2b00      	cmp	r3, #0
 8017a98:	f300 8100 	bgt.w	8017c9c <tcp_receive+0x3d0>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	7e9b      	ldrb	r3, [r3, #26]
 8017aa0:	f003 0304 	and.w	r3, r3, #4
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	d00c      	beq.n	8017ac2 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	7e9b      	ldrb	r3, [r3, #26]
 8017aac:	f023 0304 	bic.w	r3, r3, #4
 8017ab0:	b2da      	uxtb	r2, r3
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8017ab6:	687b      	ldr	r3, [r7, #4]
 8017ab8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	2200      	movs	r2, #0
 8017ac6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8017ad0:	10db      	asrs	r3, r3, #3
 8017ad2:	b21b      	sxth	r3, r3
 8017ad4:	b29a      	uxth	r2, r3
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8017adc:	b29b      	uxth	r3, r3
 8017ade:	4413      	add	r3, r2
 8017ae0:	b29b      	uxth	r3, r3
 8017ae2:	b21a      	sxth	r2, r3
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8017aea:	687b      	ldr	r3, [r7, #4]
 8017aec:	2200      	movs	r2, #0
 8017aee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8017af2:	4b19      	ldr	r3, [pc, #100]	@ (8017b58 <tcp_receive+0x28c>)
 8017af4:	681a      	ldr	r2, [r3, #0]
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8017afa:	687b      	ldr	r3, [r7, #4]
 8017afc:	7d1b      	ldrb	r3, [r3, #20]
 8017afe:	2b03      	cmp	r3, #3
 8017b00:	f240 8095 	bls.w	8017c2e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017b0a:	687b      	ldr	r3, [r7, #4]
 8017b0c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8017b10:	429a      	cmp	r2, r3
 8017b12:	d227      	bcs.n	8017b64 <tcp_receive+0x298>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017b1e:	4413      	add	r3, r2
 8017b20:	b29a      	uxth	r2, r3
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017b28:	429a      	cmp	r2, r3
 8017b2a:	f240 8080 	bls.w	8017c2e <tcp_receive+0x362>
            pcb->cwnd += pcb->mss;
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017b38:	4413      	add	r3, r2
 8017b3a:	b29a      	uxth	r2, r3
 8017b3c:	687b      	ldr	r3, [r7, #4]
 8017b3e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8017b42:	e074      	b.n	8017c2e <tcp_receive+0x362>
 8017b44:	08024aa4 	.word	0x08024aa4
 8017b48:	08024cc8 	.word	0x08024cc8
 8017b4c:	08024ae8 	.word	0x08024ae8
 8017b50:	2000dd60 	.word	0x2000dd60
 8017b54:	2000dd54 	.word	0x2000dd54
 8017b58:	2000dd58 	.word	0x2000dd58
 8017b5c:	2000dd44 	.word	0x2000dd44
 8017b60:	2000dd5e 	.word	0x2000dd5e
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017b6e:	4619      	mov	r1, r3
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017b74:	fb01 f303 	mul.w	r3, r1, r3
 8017b78:	6879      	ldr	r1, [r7, #4]
 8017b7a:	f8b1 1048 	ldrh.w	r1, [r1, #72]	@ 0x48
 8017b7e:	fb93 f3f1 	sdiv	r3, r3, r1
 8017b82:	b29b      	uxth	r3, r3
 8017b84:	4413      	add	r3, r2
 8017b86:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017b8e:	8a7a      	ldrh	r2, [r7, #18]
 8017b90:	429a      	cmp	r2, r3
 8017b92:	d94c      	bls.n	8017c2e <tcp_receive+0x362>
            pcb->cwnd = new_cwnd;
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	8a7a      	ldrh	r2, [r7, #18]
 8017b98:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 8017b9c:	e047      	b.n	8017c2e <tcp_receive+0x362>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        pcb->unacked = pcb->unacked->next;
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017ba8:	681a      	ldr	r2, [r3, #0]
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	66da      	str	r2, [r3, #108]	@ 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	f8b3 4062 	ldrh.w	r4, [r3, #98]	@ 0x62
 8017bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017bb6:	685b      	ldr	r3, [r3, #4]
 8017bb8:	4618      	mov	r0, r3
 8017bba:	f7fc fd1d 	bl	80145f8 <pbuf_clen>
 8017bbe:	4603      	mov	r3, r0
 8017bc0:	429c      	cmp	r4, r3
 8017bc2:	d206      	bcs.n	8017bd2 <tcp_receive+0x306>
 8017bc4:	4b70      	ldr	r3, [pc, #448]	@ (8017d88 <tcp_receive+0x4bc>)
 8017bc6:	f240 429e 	movw	r2, #1182	@ 0x49e
 8017bca:	4970      	ldr	r1, [pc, #448]	@ (8017d8c <tcp_receive+0x4c0>)
 8017bcc:	4870      	ldr	r0, [pc, #448]	@ (8017d90 <tcp_receive+0x4c4>)
 8017bce:	f008 fc67 	bl	80204a0 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8017bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017bd4:	685b      	ldr	r3, [r3, #4]
 8017bd6:	4618      	mov	r0, r3
 8017bd8:	f7fc fd0e 	bl	80145f8 <pbuf_clen>
 8017bdc:	4603      	mov	r3, r0
 8017bde:	461a      	mov	r2, r3
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8017be6:	1a9b      	subs	r3, r3, r2
 8017be8:	b29a      	uxth	r2, r3
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        recv_acked += next->len;
 8017bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017bf2:	891a      	ldrh	r2, [r3, #8]
 8017bf4:	4b67      	ldr	r3, [pc, #412]	@ (8017d94 <tcp_receive+0x4c8>)
 8017bf6:	881b      	ldrh	r3, [r3, #0]
 8017bf8:	4413      	add	r3, r2
 8017bfa:	b29a      	uxth	r2, r3
 8017bfc:	4b65      	ldr	r3, [pc, #404]	@ (8017d94 <tcp_receive+0x4c8>)
 8017bfe:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 8017c00:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8017c02:	f7fe f899 	bl	8015d38 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 8017c06:	687b      	ldr	r3, [r7, #4]
 8017c08:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	d00e      	beq.n	8017c2e <tcp_receive+0x362>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8017c10:	687b      	ldr	r3, [r7, #4]
 8017c12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	d10a      	bne.n	8017c2e <tcp_receive+0x362>
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017c1c:	2b00      	cmp	r3, #0
 8017c1e:	d106      	bne.n	8017c2e <tcp_receive+0x362>
 8017c20:	4b59      	ldr	r3, [pc, #356]	@ (8017d88 <tcp_receive+0x4bc>)
 8017c22:	f240 42a6 	movw	r2, #1190	@ 0x4a6
 8017c26:	495c      	ldr	r1, [pc, #368]	@ (8017d98 <tcp_receive+0x4cc>)
 8017c28:	4859      	ldr	r0, [pc, #356]	@ (8017d90 <tcp_receive+0x4c4>)
 8017c2a:	f008 fc39 	bl	80204a0 <iprintf>
      while (pcb->unacked != NULL &&
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017c32:	2b00      	cmp	r3, #0
 8017c34:	d022      	beq.n	8017c7c <tcp_receive+0x3b0>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017c3a:	68db      	ldr	r3, [r3, #12]
 8017c3c:	685b      	ldr	r3, [r3, #4]
 8017c3e:	4618      	mov	r0, r3
 8017c40:	f7fb f9fb 	bl	801303a <lwip_htonl>
 8017c44:	4604      	mov	r4, r0
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017c4a:	891b      	ldrh	r3, [r3, #8]
 8017c4c:	461d      	mov	r5, r3
 8017c4e:	687b      	ldr	r3, [r7, #4]
 8017c50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017c52:	68db      	ldr	r3, [r3, #12]
 8017c54:	899b      	ldrh	r3, [r3, #12]
 8017c56:	b29b      	uxth	r3, r3
 8017c58:	4618      	mov	r0, r3
 8017c5a:	f7fb f9e1 	bl	8013020 <lwip_htons>
 8017c5e:	4603      	mov	r3, r0
 8017c60:	f003 0303 	and.w	r3, r3, #3
 8017c64:	2b00      	cmp	r3, #0
 8017c66:	d001      	beq.n	8017c6c <tcp_receive+0x3a0>
 8017c68:	2301      	movs	r3, #1
 8017c6a:	e000      	b.n	8017c6e <tcp_receive+0x3a2>
 8017c6c:	2300      	movs	r3, #0
 8017c6e:	442b      	add	r3, r5
 8017c70:	18e2      	adds	r2, r4, r3
 8017c72:	4b4a      	ldr	r3, [pc, #296]	@ (8017d9c <tcp_receive+0x4d0>)
 8017c74:	681b      	ldr	r3, [r3, #0]
 8017c76:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 8017c78:	2b00      	cmp	r3, #0
 8017c7a:	dd90      	ble.n	8017b9e <tcp_receive+0x2d2>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	d104      	bne.n	8017c8e <tcp_receive+0x3c2>
        pcb->rtime = -1;
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017c8a:	861a      	strh	r2, [r3, #48]	@ 0x30
 8017c8c:	e002      	b.n	8017c94 <tcp_receive+0x3c8>
      } else {
        pcb->rtime = 0;
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	2200      	movs	r2, #0
 8017c92:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	2200      	movs	r2, #0
 8017c98:	76da      	strb	r2, [r3, #27]
 8017c9a:	e002      	b.n	8017ca2 <tcp_receive+0x3d6>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8017c9c:	6878      	ldr	r0, [r7, #4]
 8017c9e:	f001 fd65 	bl	801976c <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8017ca2:	e04f      	b.n	8017d44 <tcp_receive+0x478>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pcb->unsent = pcb->unsent->next;
 8017caa:	687b      	ldr	r3, [r7, #4]
 8017cac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017cae:	681a      	ldr	r2, [r3, #0]
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	669a      	str	r2, [r3, #104]	@ 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017cb8:	2b00      	cmp	r3, #0
 8017cba:	d103      	bne.n	8017cc4 <tcp_receive+0x3f8>
        pcb->unsent_oversize = 0;
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	2200      	movs	r2, #0
 8017cc0:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	f8b3 4062 	ldrh.w	r4, [r3, #98]	@ 0x62
 8017cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ccc:	685b      	ldr	r3, [r3, #4]
 8017cce:	4618      	mov	r0, r3
 8017cd0:	f7fc fc92 	bl	80145f8 <pbuf_clen>
 8017cd4:	4603      	mov	r3, r0
 8017cd6:	429c      	cmp	r4, r3
 8017cd8:	d206      	bcs.n	8017ce8 <tcp_receive+0x41c>
 8017cda:	4b2b      	ldr	r3, [pc, #172]	@ (8017d88 <tcp_receive+0x4bc>)
 8017cdc:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8017ce0:	492a      	ldr	r1, [pc, #168]	@ (8017d8c <tcp_receive+0x4c0>)
 8017ce2:	482b      	ldr	r0, [pc, #172]	@ (8017d90 <tcp_receive+0x4c4>)
 8017ce4:	f008 fbdc 	bl	80204a0 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8017ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017cea:	685b      	ldr	r3, [r3, #4]
 8017cec:	4618      	mov	r0, r3
 8017cee:	f7fc fc83 	bl	80145f8 <pbuf_clen>
 8017cf2:	4603      	mov	r3, r0
 8017cf4:	461a      	mov	r2, r3
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8017cfc:	1a9b      	subs	r3, r3, r2
 8017cfe:	b29a      	uxth	r2, r3
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      recv_acked += next->len;
 8017d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017d08:	891a      	ldrh	r2, [r3, #8]
 8017d0a:	4b22      	ldr	r3, [pc, #136]	@ (8017d94 <tcp_receive+0x4c8>)
 8017d0c:	881b      	ldrh	r3, [r3, #0]
 8017d0e:	4413      	add	r3, r2
 8017d10:	b29a      	uxth	r2, r3
 8017d12:	4b20      	ldr	r3, [pc, #128]	@ (8017d94 <tcp_receive+0x4c8>)
 8017d14:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 8017d16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8017d18:	f7fe f80e 	bl	8015d38 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8017d22:	2b00      	cmp	r3, #0
 8017d24:	d00e      	beq.n	8017d44 <tcp_receive+0x478>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8017d26:	687b      	ldr	r3, [r7, #4]
 8017d28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017d2a:	2b00      	cmp	r3, #0
 8017d2c:	d10a      	bne.n	8017d44 <tcp_receive+0x478>
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	d106      	bne.n	8017d44 <tcp_receive+0x478>
 8017d36:	4b14      	ldr	r3, [pc, #80]	@ (8017d88 <tcp_receive+0x4bc>)
 8017d38:	f240 42dc 	movw	r2, #1244	@ 0x4dc
 8017d3c:	4916      	ldr	r1, [pc, #88]	@ (8017d98 <tcp_receive+0x4cc>)
 8017d3e:	4814      	ldr	r0, [pc, #80]	@ (8017d90 <tcp_receive+0x4c4>)
 8017d40:	f008 fbae 	bl	80204a0 <iprintf>
    while (pcb->unsent != NULL &&
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017d48:	2b00      	cmp	r3, #0
 8017d4a:	d037      	beq.n	8017dbc <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8017d4c:	4b13      	ldr	r3, [pc, #76]	@ (8017d9c <tcp_receive+0x4d0>)
 8017d4e:	681c      	ldr	r4, [r3, #0]
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017d54:	68db      	ldr	r3, [r3, #12]
 8017d56:	685b      	ldr	r3, [r3, #4]
 8017d58:	4618      	mov	r0, r3
 8017d5a:	f7fb f96e 	bl	801303a <lwip_htonl>
 8017d5e:	4605      	mov	r5, r0
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017d64:	891b      	ldrh	r3, [r3, #8]
 8017d66:	461e      	mov	r6, r3
 8017d68:	687b      	ldr	r3, [r7, #4]
 8017d6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017d6c:	68db      	ldr	r3, [r3, #12]
 8017d6e:	899b      	ldrh	r3, [r3, #12]
 8017d70:	b29b      	uxth	r3, r3
 8017d72:	4618      	mov	r0, r3
 8017d74:	f7fb f954 	bl	8013020 <lwip_htons>
 8017d78:	4603      	mov	r3, r0
 8017d7a:	f003 0303 	and.w	r3, r3, #3
 8017d7e:	2b00      	cmp	r3, #0
 8017d80:	d00e      	beq.n	8017da0 <tcp_receive+0x4d4>
 8017d82:	2301      	movs	r3, #1
 8017d84:	e00d      	b.n	8017da2 <tcp_receive+0x4d6>
 8017d86:	bf00      	nop
 8017d88:	08024aa4 	.word	0x08024aa4
 8017d8c:	08024ce4 	.word	0x08024ce4
 8017d90:	08024ae8 	.word	0x08024ae8
 8017d94:	2000dd5c 	.word	0x2000dd5c
 8017d98:	08024d0c 	.word	0x08024d0c
 8017d9c:	2000dd58 	.word	0x2000dd58
 8017da0:	2300      	movs	r3, #0
 8017da2:	4433      	add	r3, r6
 8017da4:	442b      	add	r3, r5
 8017da6:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8017da8:	2b00      	cmp	r3, #0
 8017daa:	db07      	blt.n	8017dbc <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8017dac:	4b8d      	ldr	r3, [pc, #564]	@ (8017fe4 <tcp_receive+0x718>)
 8017dae:	681a      	ldr	r2, [r3, #0]
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017db4:	1ad3      	subs	r3, r2, r3
 8017db6:	2b00      	cmp	r3, #0
 8017db8:	f77f af74 	ble.w	8017ca4 <tcp_receive+0x3d8>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8017dbc:	687b      	ldr	r3, [r7, #4]
 8017dbe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8017dc2:	4b89      	ldr	r3, [pc, #548]	@ (8017fe8 <tcp_receive+0x71c>)
 8017dc4:	881b      	ldrh	r3, [r3, #0]
 8017dc6:	4413      	add	r3, r2
 8017dc8:	b29a      	uxth	r2, r3
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8017dd0:	687b      	ldr	r3, [r7, #4]
 8017dd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	d052      	beq.n	8017e7e <tcp_receive+0x5b2>
 8017dd8:	687b      	ldr	r3, [r7, #4]
 8017dda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017ddc:	4b81      	ldr	r3, [pc, #516]	@ (8017fe4 <tcp_receive+0x718>)
 8017dde:	681b      	ldr	r3, [r3, #0]
 8017de0:	1ad3      	subs	r3, r2, r3
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	da4b      	bge.n	8017e7e <tcp_receive+0x5b2>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8017de6:	4b81      	ldr	r3, [pc, #516]	@ (8017fec <tcp_receive+0x720>)
 8017de8:	681b      	ldr	r3, [r3, #0]
 8017dea:	b29a      	uxth	r2, r3
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017df0:	b29b      	uxth	r3, r3
 8017df2:	1ad3      	subs	r3, r2, r3
 8017df4:	b29b      	uxth	r3, r3
 8017df6:	847b      	strh	r3, [r7, #34]	@ 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8017df8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017dfa:	687b      	ldr	r3, [r7, #4]
 8017dfc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8017e00:	10db      	asrs	r3, r3, #3
 8017e02:	b21b      	sxth	r3, r3
 8017e04:	b29b      	uxth	r3, r3
 8017e06:	1ad3      	subs	r3, r2, r3
 8017e08:	b29b      	uxth	r3, r3
 8017e0a:	847b      	strh	r3, [r7, #34]	@ 0x22
      pcb->sa += m;
 8017e0c:	687b      	ldr	r3, [r7, #4]
 8017e0e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8017e12:	b29a      	uxth	r2, r3
 8017e14:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017e16:	4413      	add	r3, r2
 8017e18:	b29b      	uxth	r3, r3
 8017e1a:	b21a      	sxth	r2, r3
 8017e1c:	687b      	ldr	r3, [r7, #4]
 8017e1e:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8017e20:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	da03      	bge.n	8017e30 <tcp_receive+0x564>
        m = -m;
 8017e28:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017e2a:	425b      	negs	r3, r3
 8017e2c:	b29b      	uxth	r3, r3
 8017e2e:	847b      	strh	r3, [r7, #34]	@ 0x22
      }
      m = m - (pcb->sv >> 2);
 8017e30:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017e32:	687b      	ldr	r3, [r7, #4]
 8017e34:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8017e38:	109b      	asrs	r3, r3, #2
 8017e3a:	b21b      	sxth	r3, r3
 8017e3c:	b29b      	uxth	r3, r3
 8017e3e:	1ad3      	subs	r3, r2, r3
 8017e40:	b29b      	uxth	r3, r3
 8017e42:	847b      	strh	r3, [r7, #34]	@ 0x22
      pcb->sv += m;
 8017e44:	687b      	ldr	r3, [r7, #4]
 8017e46:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8017e4a:	b29a      	uxth	r2, r3
 8017e4c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017e4e:	4413      	add	r3, r2
 8017e50:	b29b      	uxth	r3, r3
 8017e52:	b21a      	sxth	r2, r3
 8017e54:	687b      	ldr	r3, [r7, #4]
 8017e56:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8017e58:	687b      	ldr	r3, [r7, #4]
 8017e5a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8017e5e:	10db      	asrs	r3, r3, #3
 8017e60:	b21b      	sxth	r3, r3
 8017e62:	b29a      	uxth	r2, r3
 8017e64:	687b      	ldr	r3, [r7, #4]
 8017e66:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8017e6a:	b29b      	uxth	r3, r3
 8017e6c:	4413      	add	r3, r2
 8017e6e:	b29b      	uxth	r3, r3
 8017e70:	b21a      	sxth	r2, r3
 8017e72:	687b      	ldr	r3, [r7, #4]
 8017e74:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8017e78:	687b      	ldr	r3, [r7, #4]
 8017e7a:	2200      	movs	r2, #0
 8017e7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8017e7e:	4b5c      	ldr	r3, [pc, #368]	@ (8017ff0 <tcp_receive+0x724>)
 8017e80:	881b      	ldrh	r3, [r3, #0]
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	f000 84f1 	beq.w	801886a <tcp_receive+0xf9e>
 8017e88:	687b      	ldr	r3, [r7, #4]
 8017e8a:	7d1b      	ldrb	r3, [r3, #20]
 8017e8c:	2b06      	cmp	r3, #6
 8017e8e:	f200 84ec 	bhi.w	801886a <tcp_receive+0xf9e>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8017e92:	687b      	ldr	r3, [r7, #4]
 8017e94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017e96:	4b57      	ldr	r3, [pc, #348]	@ (8017ff4 <tcp_receive+0x728>)
 8017e98:	681b      	ldr	r3, [r3, #0]
 8017e9a:	1ad3      	subs	r3, r2, r3
 8017e9c:	3b01      	subs	r3, #1
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	f2c0 80b8 	blt.w	8018014 <tcp_receive+0x748>
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017ea8:	4b51      	ldr	r3, [pc, #324]	@ (8017ff0 <tcp_receive+0x724>)
 8017eaa:	881b      	ldrh	r3, [r3, #0]
 8017eac:	4619      	mov	r1, r3
 8017eae:	4b51      	ldr	r3, [pc, #324]	@ (8017ff4 <tcp_receive+0x728>)
 8017eb0:	681b      	ldr	r3, [r3, #0]
 8017eb2:	440b      	add	r3, r1
 8017eb4:	1ad3      	subs	r3, r2, r3
 8017eb6:	3301      	adds	r3, #1
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	f300 80ab 	bgt.w	8018014 <tcp_receive+0x748>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8017ebe:	4b4e      	ldr	r3, [pc, #312]	@ (8017ff8 <tcp_receive+0x72c>)
 8017ec0:	685b      	ldr	r3, [r3, #4]
 8017ec2:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 8017ec4:	687b      	ldr	r3, [r7, #4]
 8017ec6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017ec8:	4b4a      	ldr	r3, [pc, #296]	@ (8017ff4 <tcp_receive+0x728>)
 8017eca:	681b      	ldr	r3, [r3, #0]
 8017ecc:	1ad3      	subs	r3, r2, r3
 8017ece:	627b      	str	r3, [r7, #36]	@ 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8017ed0:	4b49      	ldr	r3, [pc, #292]	@ (8017ff8 <tcp_receive+0x72c>)
 8017ed2:	685b      	ldr	r3, [r3, #4]
 8017ed4:	2b00      	cmp	r3, #0
 8017ed6:	d106      	bne.n	8017ee6 <tcp_receive+0x61a>
 8017ed8:	4b48      	ldr	r3, [pc, #288]	@ (8017ffc <tcp_receive+0x730>)
 8017eda:	f240 523c 	movw	r2, #1340	@ 0x53c
 8017ede:	4948      	ldr	r1, [pc, #288]	@ (8018000 <tcp_receive+0x734>)
 8017ee0:	4848      	ldr	r0, [pc, #288]	@ (8018004 <tcp_receive+0x738>)
 8017ee2:	f008 fadd 	bl	80204a0 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8017ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ee8:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8017eec:	4293      	cmp	r3, r2
 8017eee:	dd06      	ble.n	8017efe <tcp_receive+0x632>
 8017ef0:	4b42      	ldr	r3, [pc, #264]	@ (8017ffc <tcp_receive+0x730>)
 8017ef2:	f240 523d 	movw	r2, #1341	@ 0x53d
 8017ef6:	4944      	ldr	r1, [pc, #272]	@ (8018008 <tcp_receive+0x73c>)
 8017ef8:	4842      	ldr	r0, [pc, #264]	@ (8018004 <tcp_receive+0x738>)
 8017efa:	f008 fad1 	bl	80204a0 <iprintf>
      if (inseg.p->len < off) {
 8017efe:	4b3e      	ldr	r3, [pc, #248]	@ (8017ff8 <tcp_receive+0x72c>)
 8017f00:	685b      	ldr	r3, [r3, #4]
 8017f02:	895b      	ldrh	r3, [r3, #10]
 8017f04:	461a      	mov	r2, r3
 8017f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f08:	4293      	cmp	r3, r2
 8017f0a:	dd3e      	ble.n	8017f8a <tcp_receive+0x6be>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8017f0c:	4b3a      	ldr	r3, [pc, #232]	@ (8017ff8 <tcp_receive+0x72c>)
 8017f0e:	685b      	ldr	r3, [r3, #4]
 8017f10:	891b      	ldrh	r3, [r3, #8]
 8017f12:	461a      	mov	r2, r3
 8017f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f16:	4293      	cmp	r3, r2
 8017f18:	dd06      	ble.n	8017f28 <tcp_receive+0x65c>
 8017f1a:	4b38      	ldr	r3, [pc, #224]	@ (8017ffc <tcp_receive+0x730>)
 8017f1c:	f240 523f 	movw	r2, #1343	@ 0x53f
 8017f20:	493a      	ldr	r1, [pc, #232]	@ (801800c <tcp_receive+0x740>)
 8017f22:	4838      	ldr	r0, [pc, #224]	@ (8018004 <tcp_receive+0x738>)
 8017f24:	f008 fabc 	bl	80204a0 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8017f28:	4b33      	ldr	r3, [pc, #204]	@ (8017ff8 <tcp_receive+0x72c>)
 8017f2a:	685b      	ldr	r3, [r3, #4]
 8017f2c:	891a      	ldrh	r2, [r3, #8]
 8017f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f30:	b29b      	uxth	r3, r3
 8017f32:	1ad3      	subs	r3, r2, r3
 8017f34:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 8017f36:	e00e      	b.n	8017f56 <tcp_receive+0x68a>
          off -= p->len;
 8017f38:	69bb      	ldr	r3, [r7, #24]
 8017f3a:	895b      	ldrh	r3, [r3, #10]
 8017f3c:	461a      	mov	r2, r3
 8017f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f40:	1a9b      	subs	r3, r3, r2
 8017f42:	627b      	str	r3, [r7, #36]	@ 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8017f44:	69bb      	ldr	r3, [r7, #24]
 8017f46:	8a3a      	ldrh	r2, [r7, #16]
 8017f48:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 8017f4a:	69bb      	ldr	r3, [r7, #24]
 8017f4c:	2200      	movs	r2, #0
 8017f4e:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8017f50:	69bb      	ldr	r3, [r7, #24]
 8017f52:	681b      	ldr	r3, [r3, #0]
 8017f54:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 8017f56:	69bb      	ldr	r3, [r7, #24]
 8017f58:	895b      	ldrh	r3, [r3, #10]
 8017f5a:	461a      	mov	r2, r3
 8017f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f5e:	4293      	cmp	r3, r2
 8017f60:	dcea      	bgt.n	8017f38 <tcp_receive+0x66c>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8017f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f64:	b29b      	uxth	r3, r3
 8017f66:	425b      	negs	r3, r3
 8017f68:	b29b      	uxth	r3, r3
 8017f6a:	b21b      	sxth	r3, r3
 8017f6c:	4619      	mov	r1, r3
 8017f6e:	69b8      	ldr	r0, [r7, #24]
 8017f70:	f7fc fa8a 	bl	8014488 <pbuf_header>
 8017f74:	4603      	mov	r3, r0
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d01c      	beq.n	8017fb4 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8017f7a:	4b20      	ldr	r3, [pc, #128]	@ (8017ffc <tcp_receive+0x730>)
 8017f7c:	f240 524c 	movw	r2, #1356	@ 0x54c
 8017f80:	4923      	ldr	r1, [pc, #140]	@ (8018010 <tcp_receive+0x744>)
 8017f82:	4820      	ldr	r0, [pc, #128]	@ (8018004 <tcp_receive+0x738>)
 8017f84:	f008 fa8c 	bl	80204a0 <iprintf>
 8017f88:	e014      	b.n	8017fb4 <tcp_receive+0x6e8>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8017f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8017ff8 <tcp_receive+0x72c>)
 8017f8c:	685b      	ldr	r3, [r3, #4]
 8017f8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017f90:	b292      	uxth	r2, r2
 8017f92:	4252      	negs	r2, r2
 8017f94:	b292      	uxth	r2, r2
 8017f96:	b212      	sxth	r2, r2
 8017f98:	4611      	mov	r1, r2
 8017f9a:	4618      	mov	r0, r3
 8017f9c:	f7fc fa74 	bl	8014488 <pbuf_header>
 8017fa0:	4603      	mov	r3, r0
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	d006      	beq.n	8017fb4 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8017fa6:	4b15      	ldr	r3, [pc, #84]	@ (8017ffc <tcp_receive+0x730>)
 8017fa8:	f240 5251 	movw	r2, #1361	@ 0x551
 8017fac:	4918      	ldr	r1, [pc, #96]	@ (8018010 <tcp_receive+0x744>)
 8017fae:	4815      	ldr	r0, [pc, #84]	@ (8018004 <tcp_receive+0x738>)
 8017fb0:	f008 fa76 	bl	80204a0 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8017fb4:	4b10      	ldr	r3, [pc, #64]	@ (8017ff8 <tcp_receive+0x72c>)
 8017fb6:	891a      	ldrh	r2, [r3, #8]
 8017fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8017ff4 <tcp_receive+0x728>)
 8017fba:	681b      	ldr	r3, [r3, #0]
 8017fbc:	b299      	uxth	r1, r3
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017fc2:	b29b      	uxth	r3, r3
 8017fc4:	1acb      	subs	r3, r1, r3
 8017fc6:	b29b      	uxth	r3, r3
 8017fc8:	4413      	add	r3, r2
 8017fca:	b29a      	uxth	r2, r3
 8017fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8017ff8 <tcp_receive+0x72c>)
 8017fce:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017fd4:	4a07      	ldr	r2, [pc, #28]	@ (8017ff4 <tcp_receive+0x728>)
 8017fd6:	6013      	str	r3, [r2, #0]
 8017fd8:	4b07      	ldr	r3, [pc, #28]	@ (8017ff8 <tcp_receive+0x72c>)
 8017fda:	68db      	ldr	r3, [r3, #12]
 8017fdc:	4a05      	ldr	r2, [pc, #20]	@ (8017ff4 <tcp_receive+0x728>)
 8017fde:	6812      	ldr	r2, [r2, #0]
 8017fe0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8017fe2:	e025      	b.n	8018030 <tcp_receive+0x764>
 8017fe4:	2000dd58 	.word	0x2000dd58
 8017fe8:	2000dd5c 	.word	0x2000dd5c
 8017fec:	2000dd1c 	.word	0x2000dd1c
 8017ff0:	2000dd5e 	.word	0x2000dd5e
 8017ff4:	2000dd54 	.word	0x2000dd54
 8017ff8:	2000dd34 	.word	0x2000dd34
 8017ffc:	08024aa4 	.word	0x08024aa4
 8018000:	08024d2c 	.word	0x08024d2c
 8018004:	08024ae8 	.word	0x08024ae8
 8018008:	08024d3c 	.word	0x08024d3c
 801800c:	08024d4c 	.word	0x08024d4c
 8018010:	08024d5c 	.word	0x08024d5c
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8018014:	4b87      	ldr	r3, [pc, #540]	@ (8018234 <tcp_receive+0x968>)
 8018016:	681a      	ldr	r2, [r3, #0]
 8018018:	687b      	ldr	r3, [r7, #4]
 801801a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801801c:	1ad3      	subs	r3, r2, r3
 801801e:	2b00      	cmp	r3, #0
 8018020:	da06      	bge.n	8018030 <tcp_receive+0x764>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8018022:	687b      	ldr	r3, [r7, #4]
 8018024:	7e9b      	ldrb	r3, [r3, #26]
 8018026:	f043 0302 	orr.w	r3, r3, #2
 801802a:	b2da      	uxtb	r2, r3
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018030:	4b80      	ldr	r3, [pc, #512]	@ (8018234 <tcp_receive+0x968>)
 8018032:	681a      	ldr	r2, [r3, #0]
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018038:	1ad3      	subs	r3, r2, r3
 801803a:	2b00      	cmp	r3, #0
 801803c:	f2c0 8410 	blt.w	8018860 <tcp_receive+0xf94>
 8018040:	4b7c      	ldr	r3, [pc, #496]	@ (8018234 <tcp_receive+0x968>)
 8018042:	681a      	ldr	r2, [r3, #0]
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018048:	6879      	ldr	r1, [r7, #4]
 801804a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801804c:	440b      	add	r3, r1
 801804e:	1ad3      	subs	r3, r2, r3
 8018050:	3301      	adds	r3, #1
 8018052:	2b00      	cmp	r3, #0
 8018054:	f300 8404 	bgt.w	8018860 <tcp_receive+0xf94>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801805c:	4b75      	ldr	r3, [pc, #468]	@ (8018234 <tcp_receive+0x968>)
 801805e:	681b      	ldr	r3, [r3, #0]
 8018060:	429a      	cmp	r2, r3
 8018062:	f040 8287 	bne.w	8018574 <tcp_receive+0xca8>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8018066:	4b74      	ldr	r3, [pc, #464]	@ (8018238 <tcp_receive+0x96c>)
 8018068:	891c      	ldrh	r4, [r3, #8]
 801806a:	4b73      	ldr	r3, [pc, #460]	@ (8018238 <tcp_receive+0x96c>)
 801806c:	68db      	ldr	r3, [r3, #12]
 801806e:	899b      	ldrh	r3, [r3, #12]
 8018070:	b29b      	uxth	r3, r3
 8018072:	4618      	mov	r0, r3
 8018074:	f7fa ffd4 	bl	8013020 <lwip_htons>
 8018078:	4603      	mov	r3, r0
 801807a:	f003 0303 	and.w	r3, r3, #3
 801807e:	2b00      	cmp	r3, #0
 8018080:	d001      	beq.n	8018086 <tcp_receive+0x7ba>
 8018082:	2301      	movs	r3, #1
 8018084:	e000      	b.n	8018088 <tcp_receive+0x7bc>
 8018086:	2300      	movs	r3, #0
 8018088:	4423      	add	r3, r4
 801808a:	b29a      	uxth	r2, r3
 801808c:	4b6b      	ldr	r3, [pc, #428]	@ (801823c <tcp_receive+0x970>)
 801808e:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018094:	4b69      	ldr	r3, [pc, #420]	@ (801823c <tcp_receive+0x970>)
 8018096:	881b      	ldrh	r3, [r3, #0]
 8018098:	429a      	cmp	r2, r3
 801809a:	d26e      	bcs.n	801817a <tcp_receive+0x8ae>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801809c:	4b66      	ldr	r3, [pc, #408]	@ (8018238 <tcp_receive+0x96c>)
 801809e:	68db      	ldr	r3, [r3, #12]
 80180a0:	899b      	ldrh	r3, [r3, #12]
 80180a2:	b29b      	uxth	r3, r3
 80180a4:	4618      	mov	r0, r3
 80180a6:	f7fa ffbb 	bl	8013020 <lwip_htons>
 80180aa:	4603      	mov	r3, r0
 80180ac:	f003 0301 	and.w	r3, r3, #1
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	d01b      	beq.n	80180ec <tcp_receive+0x820>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80180b4:	4b60      	ldr	r3, [pc, #384]	@ (8018238 <tcp_receive+0x96c>)
 80180b6:	68db      	ldr	r3, [r3, #12]
 80180b8:	899b      	ldrh	r3, [r3, #12]
 80180ba:	b29b      	uxth	r3, r3
 80180bc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80180c0:	b29c      	uxth	r4, r3
 80180c2:	4b5d      	ldr	r3, [pc, #372]	@ (8018238 <tcp_receive+0x96c>)
 80180c4:	68db      	ldr	r3, [r3, #12]
 80180c6:	899b      	ldrh	r3, [r3, #12]
 80180c8:	b29b      	uxth	r3, r3
 80180ca:	4618      	mov	r0, r3
 80180cc:	f7fa ffa8 	bl	8013020 <lwip_htons>
 80180d0:	4603      	mov	r3, r0
 80180d2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80180d6:	b29b      	uxth	r3, r3
 80180d8:	4618      	mov	r0, r3
 80180da:	f7fa ffa1 	bl	8013020 <lwip_htons>
 80180de:	4603      	mov	r3, r0
 80180e0:	461a      	mov	r2, r3
 80180e2:	4b55      	ldr	r3, [pc, #340]	@ (8018238 <tcp_receive+0x96c>)
 80180e4:	68db      	ldr	r3, [r3, #12]
 80180e6:	4322      	orrs	r2, r4
 80180e8:	b292      	uxth	r2, r2
 80180ea:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80180f0:	4b51      	ldr	r3, [pc, #324]	@ (8018238 <tcp_receive+0x96c>)
 80180f2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80180f4:	4b50      	ldr	r3, [pc, #320]	@ (8018238 <tcp_receive+0x96c>)
 80180f6:	68db      	ldr	r3, [r3, #12]
 80180f8:	899b      	ldrh	r3, [r3, #12]
 80180fa:	b29b      	uxth	r3, r3
 80180fc:	4618      	mov	r0, r3
 80180fe:	f7fa ff8f 	bl	8013020 <lwip_htons>
 8018102:	4603      	mov	r3, r0
 8018104:	f003 0302 	and.w	r3, r3, #2
 8018108:	2b00      	cmp	r3, #0
 801810a:	d005      	beq.n	8018118 <tcp_receive+0x84c>
            inseg.len -= 1;
 801810c:	4b4a      	ldr	r3, [pc, #296]	@ (8018238 <tcp_receive+0x96c>)
 801810e:	891b      	ldrh	r3, [r3, #8]
 8018110:	3b01      	subs	r3, #1
 8018112:	b29a      	uxth	r2, r3
 8018114:	4b48      	ldr	r3, [pc, #288]	@ (8018238 <tcp_receive+0x96c>)
 8018116:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8018118:	4b47      	ldr	r3, [pc, #284]	@ (8018238 <tcp_receive+0x96c>)
 801811a:	685b      	ldr	r3, [r3, #4]
 801811c:	4a46      	ldr	r2, [pc, #280]	@ (8018238 <tcp_receive+0x96c>)
 801811e:	8912      	ldrh	r2, [r2, #8]
 8018120:	4611      	mov	r1, r2
 8018122:	4618      	mov	r0, r3
 8018124:	f7fc f860 	bl	80141e8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8018128:	4b43      	ldr	r3, [pc, #268]	@ (8018238 <tcp_receive+0x96c>)
 801812a:	891c      	ldrh	r4, [r3, #8]
 801812c:	4b42      	ldr	r3, [pc, #264]	@ (8018238 <tcp_receive+0x96c>)
 801812e:	68db      	ldr	r3, [r3, #12]
 8018130:	899b      	ldrh	r3, [r3, #12]
 8018132:	b29b      	uxth	r3, r3
 8018134:	4618      	mov	r0, r3
 8018136:	f7fa ff73 	bl	8013020 <lwip_htons>
 801813a:	4603      	mov	r3, r0
 801813c:	f003 0303 	and.w	r3, r3, #3
 8018140:	2b00      	cmp	r3, #0
 8018142:	d001      	beq.n	8018148 <tcp_receive+0x87c>
 8018144:	2301      	movs	r3, #1
 8018146:	e000      	b.n	801814a <tcp_receive+0x87e>
 8018148:	2300      	movs	r3, #0
 801814a:	4423      	add	r3, r4
 801814c:	b29a      	uxth	r2, r3
 801814e:	4b3b      	ldr	r3, [pc, #236]	@ (801823c <tcp_receive+0x970>)
 8018150:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018152:	4b3a      	ldr	r3, [pc, #232]	@ (801823c <tcp_receive+0x970>)
 8018154:	881b      	ldrh	r3, [r3, #0]
 8018156:	461a      	mov	r2, r3
 8018158:	4b36      	ldr	r3, [pc, #216]	@ (8018234 <tcp_receive+0x968>)
 801815a:	681b      	ldr	r3, [r3, #0]
 801815c:	441a      	add	r2, r3
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018162:	6879      	ldr	r1, [r7, #4]
 8018164:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8018166:	440b      	add	r3, r1
 8018168:	429a      	cmp	r2, r3
 801816a:	d006      	beq.n	801817a <tcp_receive+0x8ae>
 801816c:	4b34      	ldr	r3, [pc, #208]	@ (8018240 <tcp_receive+0x974>)
 801816e:	f240 527e 	movw	r2, #1406	@ 0x57e
 8018172:	4934      	ldr	r1, [pc, #208]	@ (8018244 <tcp_receive+0x978>)
 8018174:	4834      	ldr	r0, [pc, #208]	@ (8018248 <tcp_receive+0x97c>)
 8018176:	f008 f993 	bl	80204a0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801817e:	2b00      	cmp	r3, #0
 8018180:	f000 80e1 	beq.w	8018346 <tcp_receive+0xa7a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018184:	4b2c      	ldr	r3, [pc, #176]	@ (8018238 <tcp_receive+0x96c>)
 8018186:	68db      	ldr	r3, [r3, #12]
 8018188:	899b      	ldrh	r3, [r3, #12]
 801818a:	b29b      	uxth	r3, r3
 801818c:	4618      	mov	r0, r3
 801818e:	f7fa ff47 	bl	8013020 <lwip_htons>
 8018192:	4603      	mov	r3, r0
 8018194:	f003 0301 	and.w	r3, r3, #1
 8018198:	2b00      	cmp	r3, #0
 801819a:	d010      	beq.n	80181be <tcp_receive+0x8f2>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801819c:	e00a      	b.n	80181b4 <tcp_receive+0x8e8>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80181a2:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80181a8:	681a      	ldr	r2, [r3, #0]
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	671a      	str	r2, [r3, #112]	@ 0x70
              tcp_seg_free(old_ooseq);
 80181ae:	68b8      	ldr	r0, [r7, #8]
 80181b0:	f7fd fdc2 	bl	8015d38 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80181b4:	687b      	ldr	r3, [r7, #4]
 80181b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80181b8:	2b00      	cmp	r3, #0
 80181ba:	d1f0      	bne.n	801819e <tcp_receive+0x8d2>
 80181bc:	e0c3      	b.n	8018346 <tcp_receive+0xa7a>
            }
          } else {
            next = pcb->ooseq;
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80181c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80181c4:	e04f      	b.n	8018266 <tcp_receive+0x99a>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80181c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80181c8:	68db      	ldr	r3, [r3, #12]
 80181ca:	899b      	ldrh	r3, [r3, #12]
 80181cc:	b29b      	uxth	r3, r3
 80181ce:	4618      	mov	r0, r3
 80181d0:	f7fa ff26 	bl	8013020 <lwip_htons>
 80181d4:	4603      	mov	r3, r0
 80181d6:	f003 0301 	and.w	r3, r3, #1
 80181da:	2b00      	cmp	r3, #0
 80181dc:	d03b      	beq.n	8018256 <tcp_receive+0x98a>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80181de:	4b16      	ldr	r3, [pc, #88]	@ (8018238 <tcp_receive+0x96c>)
 80181e0:	68db      	ldr	r3, [r3, #12]
 80181e2:	899b      	ldrh	r3, [r3, #12]
 80181e4:	b29b      	uxth	r3, r3
 80181e6:	4618      	mov	r0, r3
 80181e8:	f7fa ff1a 	bl	8013020 <lwip_htons>
 80181ec:	4603      	mov	r3, r0
 80181ee:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80181f2:	2b00      	cmp	r3, #0
 80181f4:	d12f      	bne.n	8018256 <tcp_receive+0x98a>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80181f6:	4b10      	ldr	r3, [pc, #64]	@ (8018238 <tcp_receive+0x96c>)
 80181f8:	68db      	ldr	r3, [r3, #12]
 80181fa:	899b      	ldrh	r3, [r3, #12]
 80181fc:	b29c      	uxth	r4, r3
 80181fe:	2001      	movs	r0, #1
 8018200:	f7fa ff0e 	bl	8013020 <lwip_htons>
 8018204:	4603      	mov	r3, r0
 8018206:	461a      	mov	r2, r3
 8018208:	4b0b      	ldr	r3, [pc, #44]	@ (8018238 <tcp_receive+0x96c>)
 801820a:	68db      	ldr	r3, [r3, #12]
 801820c:	4322      	orrs	r2, r4
 801820e:	b292      	uxth	r2, r2
 8018210:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8018212:	4b09      	ldr	r3, [pc, #36]	@ (8018238 <tcp_receive+0x96c>)
 8018214:	891c      	ldrh	r4, [r3, #8]
 8018216:	4b08      	ldr	r3, [pc, #32]	@ (8018238 <tcp_receive+0x96c>)
 8018218:	68db      	ldr	r3, [r3, #12]
 801821a:	899b      	ldrh	r3, [r3, #12]
 801821c:	b29b      	uxth	r3, r3
 801821e:	4618      	mov	r0, r3
 8018220:	f7fa fefe 	bl	8013020 <lwip_htons>
 8018224:	4603      	mov	r3, r0
 8018226:	f003 0303 	and.w	r3, r3, #3
 801822a:	2b00      	cmp	r3, #0
 801822c:	d00e      	beq.n	801824c <tcp_receive+0x980>
 801822e:	2301      	movs	r3, #1
 8018230:	e00d      	b.n	801824e <tcp_receive+0x982>
 8018232:	bf00      	nop
 8018234:	2000dd54 	.word	0x2000dd54
 8018238:	2000dd34 	.word	0x2000dd34
 801823c:	2000dd5e 	.word	0x2000dd5e
 8018240:	08024aa4 	.word	0x08024aa4
 8018244:	08024d70 	.word	0x08024d70
 8018248:	08024ae8 	.word	0x08024ae8
 801824c:	2300      	movs	r3, #0
 801824e:	4423      	add	r3, r4
 8018250:	b29a      	uxth	r2, r3
 8018252:	4b95      	ldr	r3, [pc, #596]	@ (80184a8 <tcp_receive+0xbdc>)
 8018254:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 8018256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018258:	62bb      	str	r3, [r7, #40]	@ 0x28
              next = next->next;
 801825a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801825c:	681b      	ldr	r3, [r3, #0]
 801825e:	62fb      	str	r3, [r7, #44]	@ 0x2c
              tcp_seg_free(prev);
 8018260:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018262:	f7fd fd69 	bl	8015d38 <tcp_seg_free>
            while (next &&
 8018266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018268:	2b00      	cmp	r3, #0
 801826a:	d00e      	beq.n	801828a <tcp_receive+0x9be>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801826c:	4b8e      	ldr	r3, [pc, #568]	@ (80184a8 <tcp_receive+0xbdc>)
 801826e:	881b      	ldrh	r3, [r3, #0]
 8018270:	461a      	mov	r2, r3
 8018272:	4b8e      	ldr	r3, [pc, #568]	@ (80184ac <tcp_receive+0xbe0>)
 8018274:	681b      	ldr	r3, [r3, #0]
 8018276:	441a      	add	r2, r3
 8018278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801827a:	68db      	ldr	r3, [r3, #12]
 801827c:	685b      	ldr	r3, [r3, #4]
 801827e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018280:	8909      	ldrh	r1, [r1, #8]
 8018282:	440b      	add	r3, r1
 8018284:	1ad3      	subs	r3, r2, r3
            while (next &&
 8018286:	2b00      	cmp	r3, #0
 8018288:	da9d      	bge.n	80181c6 <tcp_receive+0x8fa>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801828a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801828c:	2b00      	cmp	r3, #0
 801828e:	d057      	beq.n	8018340 <tcp_receive+0xa74>
                TCP_SEQ_GT(seqno + tcplen,
 8018290:	4b85      	ldr	r3, [pc, #532]	@ (80184a8 <tcp_receive+0xbdc>)
 8018292:	881b      	ldrh	r3, [r3, #0]
 8018294:	461a      	mov	r2, r3
 8018296:	4b85      	ldr	r3, [pc, #532]	@ (80184ac <tcp_receive+0xbe0>)
 8018298:	681b      	ldr	r3, [r3, #0]
 801829a:	441a      	add	r2, r3
 801829c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801829e:	68db      	ldr	r3, [r3, #12]
 80182a0:	685b      	ldr	r3, [r3, #4]
 80182a2:	1ad3      	subs	r3, r2, r3
            if (next &&
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	dd4b      	ble.n	8018340 <tcp_receive+0xa74>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80182a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80182aa:	68db      	ldr	r3, [r3, #12]
 80182ac:	685b      	ldr	r3, [r3, #4]
 80182ae:	b29a      	uxth	r2, r3
 80182b0:	4b7e      	ldr	r3, [pc, #504]	@ (80184ac <tcp_receive+0xbe0>)
 80182b2:	681b      	ldr	r3, [r3, #0]
 80182b4:	b29b      	uxth	r3, r3
 80182b6:	1ad3      	subs	r3, r2, r3
 80182b8:	b29a      	uxth	r2, r3
 80182ba:	4b7d      	ldr	r3, [pc, #500]	@ (80184b0 <tcp_receive+0xbe4>)
 80182bc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80182be:	4b7c      	ldr	r3, [pc, #496]	@ (80184b0 <tcp_receive+0xbe4>)
 80182c0:	68db      	ldr	r3, [r3, #12]
 80182c2:	899b      	ldrh	r3, [r3, #12]
 80182c4:	b29b      	uxth	r3, r3
 80182c6:	4618      	mov	r0, r3
 80182c8:	f7fa feaa 	bl	8013020 <lwip_htons>
 80182cc:	4603      	mov	r3, r0
 80182ce:	f003 0302 	and.w	r3, r3, #2
 80182d2:	2b00      	cmp	r3, #0
 80182d4:	d005      	beq.n	80182e2 <tcp_receive+0xa16>
                inseg.len -= 1;
 80182d6:	4b76      	ldr	r3, [pc, #472]	@ (80184b0 <tcp_receive+0xbe4>)
 80182d8:	891b      	ldrh	r3, [r3, #8]
 80182da:	3b01      	subs	r3, #1
 80182dc:	b29a      	uxth	r2, r3
 80182de:	4b74      	ldr	r3, [pc, #464]	@ (80184b0 <tcp_receive+0xbe4>)
 80182e0:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80182e2:	4b73      	ldr	r3, [pc, #460]	@ (80184b0 <tcp_receive+0xbe4>)
 80182e4:	685b      	ldr	r3, [r3, #4]
 80182e6:	4a72      	ldr	r2, [pc, #456]	@ (80184b0 <tcp_receive+0xbe4>)
 80182e8:	8912      	ldrh	r2, [r2, #8]
 80182ea:	4611      	mov	r1, r2
 80182ec:	4618      	mov	r0, r3
 80182ee:	f7fb ff7b 	bl	80141e8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80182f2:	4b6f      	ldr	r3, [pc, #444]	@ (80184b0 <tcp_receive+0xbe4>)
 80182f4:	891c      	ldrh	r4, [r3, #8]
 80182f6:	4b6e      	ldr	r3, [pc, #440]	@ (80184b0 <tcp_receive+0xbe4>)
 80182f8:	68db      	ldr	r3, [r3, #12]
 80182fa:	899b      	ldrh	r3, [r3, #12]
 80182fc:	b29b      	uxth	r3, r3
 80182fe:	4618      	mov	r0, r3
 8018300:	f7fa fe8e 	bl	8013020 <lwip_htons>
 8018304:	4603      	mov	r3, r0
 8018306:	f003 0303 	and.w	r3, r3, #3
 801830a:	2b00      	cmp	r3, #0
 801830c:	d001      	beq.n	8018312 <tcp_receive+0xa46>
 801830e:	2301      	movs	r3, #1
 8018310:	e000      	b.n	8018314 <tcp_receive+0xa48>
 8018312:	2300      	movs	r3, #0
 8018314:	4423      	add	r3, r4
 8018316:	b29a      	uxth	r2, r3
 8018318:	4b63      	ldr	r3, [pc, #396]	@ (80184a8 <tcp_receive+0xbdc>)
 801831a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801831c:	4b62      	ldr	r3, [pc, #392]	@ (80184a8 <tcp_receive+0xbdc>)
 801831e:	881b      	ldrh	r3, [r3, #0]
 8018320:	461a      	mov	r2, r3
 8018322:	4b62      	ldr	r3, [pc, #392]	@ (80184ac <tcp_receive+0xbe0>)
 8018324:	681b      	ldr	r3, [r3, #0]
 8018326:	441a      	add	r2, r3
 8018328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801832a:	68db      	ldr	r3, [r3, #12]
 801832c:	685b      	ldr	r3, [r3, #4]
 801832e:	429a      	cmp	r2, r3
 8018330:	d006      	beq.n	8018340 <tcp_receive+0xa74>
 8018332:	4b60      	ldr	r3, [pc, #384]	@ (80184b4 <tcp_receive+0xbe8>)
 8018334:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 8018338:	495f      	ldr	r1, [pc, #380]	@ (80184b8 <tcp_receive+0xbec>)
 801833a:	4860      	ldr	r0, [pc, #384]	@ (80184bc <tcp_receive+0xbf0>)
 801833c:	f008 f8b0 	bl	80204a0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018344:	671a      	str	r2, [r3, #112]	@ 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8018346:	4b58      	ldr	r3, [pc, #352]	@ (80184a8 <tcp_receive+0xbdc>)
 8018348:	881b      	ldrh	r3, [r3, #0]
 801834a:	461a      	mov	r2, r3
 801834c:	4b57      	ldr	r3, [pc, #348]	@ (80184ac <tcp_receive+0xbe0>)
 801834e:	681b      	ldr	r3, [r3, #0]
 8018350:	441a      	add	r2, r3
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8018356:	687b      	ldr	r3, [r7, #4]
 8018358:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801835a:	4b53      	ldr	r3, [pc, #332]	@ (80184a8 <tcp_receive+0xbdc>)
 801835c:	881b      	ldrh	r3, [r3, #0]
 801835e:	429a      	cmp	r2, r3
 8018360:	d206      	bcs.n	8018370 <tcp_receive+0xaa4>
 8018362:	4b54      	ldr	r3, [pc, #336]	@ (80184b4 <tcp_receive+0xbe8>)
 8018364:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8018368:	4955      	ldr	r1, [pc, #340]	@ (80184c0 <tcp_receive+0xbf4>)
 801836a:	4854      	ldr	r0, [pc, #336]	@ (80184bc <tcp_receive+0xbf0>)
 801836c:	f008 f898 	bl	80204a0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018374:	4b4c      	ldr	r3, [pc, #304]	@ (80184a8 <tcp_receive+0xbdc>)
 8018376:	881b      	ldrh	r3, [r3, #0]
 8018378:	1ad3      	subs	r3, r2, r3
 801837a:	b29a      	uxth	r2, r3
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8018380:	6878      	ldr	r0, [r7, #4]
 8018382:	f7fd f847 	bl	8015414 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8018386:	4b4a      	ldr	r3, [pc, #296]	@ (80184b0 <tcp_receive+0xbe4>)
 8018388:	685b      	ldr	r3, [r3, #4]
 801838a:	891b      	ldrh	r3, [r3, #8]
 801838c:	2b00      	cmp	r3, #0
 801838e:	d006      	beq.n	801839e <tcp_receive+0xad2>
          recv_data = inseg.p;
 8018390:	4b47      	ldr	r3, [pc, #284]	@ (80184b0 <tcp_receive+0xbe4>)
 8018392:	685b      	ldr	r3, [r3, #4]
 8018394:	4a4b      	ldr	r2, [pc, #300]	@ (80184c4 <tcp_receive+0xbf8>)
 8018396:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8018398:	4b45      	ldr	r3, [pc, #276]	@ (80184b0 <tcp_receive+0xbe4>)
 801839a:	2200      	movs	r2, #0
 801839c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801839e:	4b44      	ldr	r3, [pc, #272]	@ (80184b0 <tcp_receive+0xbe4>)
 80183a0:	68db      	ldr	r3, [r3, #12]
 80183a2:	899b      	ldrh	r3, [r3, #12]
 80183a4:	b29b      	uxth	r3, r3
 80183a6:	4618      	mov	r0, r3
 80183a8:	f7fa fe3a 	bl	8013020 <lwip_htons>
 80183ac:	4603      	mov	r3, r0
 80183ae:	f003 0301 	and.w	r3, r3, #1
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	f000 80b4 	beq.w	8018520 <tcp_receive+0xc54>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80183b8:	4b43      	ldr	r3, [pc, #268]	@ (80184c8 <tcp_receive+0xbfc>)
 80183ba:	781b      	ldrb	r3, [r3, #0]
 80183bc:	f043 0320 	orr.w	r3, r3, #32
 80183c0:	b2da      	uxtb	r2, r3
 80183c2:	4b41      	ldr	r3, [pc, #260]	@ (80184c8 <tcp_receive+0xbfc>)
 80183c4:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80183c6:	e0ab      	b.n	8018520 <tcp_receive+0xc54>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80183cc:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80183d2:	68db      	ldr	r3, [r3, #12]
 80183d4:	685b      	ldr	r3, [r3, #4]
 80183d6:	4a35      	ldr	r2, [pc, #212]	@ (80184ac <tcp_receive+0xbe0>)
 80183d8:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80183da:	68fb      	ldr	r3, [r7, #12]
 80183dc:	891b      	ldrh	r3, [r3, #8]
 80183de:	461c      	mov	r4, r3
 80183e0:	68fb      	ldr	r3, [r7, #12]
 80183e2:	68db      	ldr	r3, [r3, #12]
 80183e4:	899b      	ldrh	r3, [r3, #12]
 80183e6:	b29b      	uxth	r3, r3
 80183e8:	4618      	mov	r0, r3
 80183ea:	f7fa fe19 	bl	8013020 <lwip_htons>
 80183ee:	4603      	mov	r3, r0
 80183f0:	f003 0303 	and.w	r3, r3, #3
 80183f4:	2b00      	cmp	r3, #0
 80183f6:	d001      	beq.n	80183fc <tcp_receive+0xb30>
 80183f8:	2301      	movs	r3, #1
 80183fa:	e000      	b.n	80183fe <tcp_receive+0xb32>
 80183fc:	2300      	movs	r3, #0
 80183fe:	191a      	adds	r2, r3, r4
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018404:	441a      	add	r2, r3
 8018406:	687b      	ldr	r3, [r7, #4]
 8018408:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801840e:	461c      	mov	r4, r3
 8018410:	68fb      	ldr	r3, [r7, #12]
 8018412:	891b      	ldrh	r3, [r3, #8]
 8018414:	461d      	mov	r5, r3
 8018416:	68fb      	ldr	r3, [r7, #12]
 8018418:	68db      	ldr	r3, [r3, #12]
 801841a:	899b      	ldrh	r3, [r3, #12]
 801841c:	b29b      	uxth	r3, r3
 801841e:	4618      	mov	r0, r3
 8018420:	f7fa fdfe 	bl	8013020 <lwip_htons>
 8018424:	4603      	mov	r3, r0
 8018426:	f003 0303 	and.w	r3, r3, #3
 801842a:	2b00      	cmp	r3, #0
 801842c:	d001      	beq.n	8018432 <tcp_receive+0xb66>
 801842e:	2301      	movs	r3, #1
 8018430:	e000      	b.n	8018434 <tcp_receive+0xb68>
 8018432:	2300      	movs	r3, #0
 8018434:	442b      	add	r3, r5
 8018436:	429c      	cmp	r4, r3
 8018438:	d206      	bcs.n	8018448 <tcp_receive+0xb7c>
 801843a:	4b1e      	ldr	r3, [pc, #120]	@ (80184b4 <tcp_receive+0xbe8>)
 801843c:	f240 52dd 	movw	r2, #1501	@ 0x5dd
 8018440:	4922      	ldr	r1, [pc, #136]	@ (80184cc <tcp_receive+0xc00>)
 8018442:	481e      	ldr	r0, [pc, #120]	@ (80184bc <tcp_receive+0xbf0>)
 8018444:	f008 f82c 	bl	80204a0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8018448:	68fb      	ldr	r3, [r7, #12]
 801844a:	891b      	ldrh	r3, [r3, #8]
 801844c:	461c      	mov	r4, r3
 801844e:	68fb      	ldr	r3, [r7, #12]
 8018450:	68db      	ldr	r3, [r3, #12]
 8018452:	899b      	ldrh	r3, [r3, #12]
 8018454:	b29b      	uxth	r3, r3
 8018456:	4618      	mov	r0, r3
 8018458:	f7fa fde2 	bl	8013020 <lwip_htons>
 801845c:	4603      	mov	r3, r0
 801845e:	f003 0303 	and.w	r3, r3, #3
 8018462:	2b00      	cmp	r3, #0
 8018464:	d001      	beq.n	801846a <tcp_receive+0xb9e>
 8018466:	2301      	movs	r3, #1
 8018468:	e000      	b.n	801846c <tcp_receive+0xba0>
 801846a:	2300      	movs	r3, #0
 801846c:	1919      	adds	r1, r3, r4
 801846e:	687b      	ldr	r3, [r7, #4]
 8018470:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018472:	b28b      	uxth	r3, r1
 8018474:	1ad3      	subs	r3, r2, r3
 8018476:	b29a      	uxth	r2, r3
 8018478:	687b      	ldr	r3, [r7, #4]
 801847a:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801847c:	6878      	ldr	r0, [r7, #4]
 801847e:	f7fc ffc9 	bl	8015414 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8018482:	68fb      	ldr	r3, [r7, #12]
 8018484:	685b      	ldr	r3, [r3, #4]
 8018486:	891b      	ldrh	r3, [r3, #8]
 8018488:	2b00      	cmp	r3, #0
 801848a:	d028      	beq.n	80184de <tcp_receive+0xc12>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801848c:	4b0d      	ldr	r3, [pc, #52]	@ (80184c4 <tcp_receive+0xbf8>)
 801848e:	681b      	ldr	r3, [r3, #0]
 8018490:	2b00      	cmp	r3, #0
 8018492:	d01d      	beq.n	80184d0 <tcp_receive+0xc04>
              pbuf_cat(recv_data, cseg->p);
 8018494:	4b0b      	ldr	r3, [pc, #44]	@ (80184c4 <tcp_receive+0xbf8>)
 8018496:	681a      	ldr	r2, [r3, #0]
 8018498:	68fb      	ldr	r3, [r7, #12]
 801849a:	685b      	ldr	r3, [r3, #4]
 801849c:	4619      	mov	r1, r3
 801849e:	4610      	mov	r0, r2
 80184a0:	f7fc f8e2 	bl	8014668 <pbuf_cat>
 80184a4:	e018      	b.n	80184d8 <tcp_receive+0xc0c>
 80184a6:	bf00      	nop
 80184a8:	2000dd5e 	.word	0x2000dd5e
 80184ac:	2000dd54 	.word	0x2000dd54
 80184b0:	2000dd34 	.word	0x2000dd34
 80184b4:	08024aa4 	.word	0x08024aa4
 80184b8:	08024da8 	.word	0x08024da8
 80184bc:	08024ae8 	.word	0x08024ae8
 80184c0:	08024de4 	.word	0x08024de4
 80184c4:	2000dd64 	.word	0x2000dd64
 80184c8:	2000dd61 	.word	0x2000dd61
 80184cc:	08024e04 	.word	0x08024e04
            } else {
              recv_data = cseg->p;
 80184d0:	68fb      	ldr	r3, [r7, #12]
 80184d2:	685b      	ldr	r3, [r3, #4]
 80184d4:	4a71      	ldr	r2, [pc, #452]	@ (801869c <tcp_receive+0xdd0>)
 80184d6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80184d8:	68fb      	ldr	r3, [r7, #12]
 80184da:	2200      	movs	r2, #0
 80184dc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80184de:	68fb      	ldr	r3, [r7, #12]
 80184e0:	68db      	ldr	r3, [r3, #12]
 80184e2:	899b      	ldrh	r3, [r3, #12]
 80184e4:	b29b      	uxth	r3, r3
 80184e6:	4618      	mov	r0, r3
 80184e8:	f7fa fd9a 	bl	8013020 <lwip_htons>
 80184ec:	4603      	mov	r3, r0
 80184ee:	f003 0301 	and.w	r3, r3, #1
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	d00d      	beq.n	8018512 <tcp_receive+0xc46>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80184f6:	4b6a      	ldr	r3, [pc, #424]	@ (80186a0 <tcp_receive+0xdd4>)
 80184f8:	781b      	ldrb	r3, [r3, #0]
 80184fa:	f043 0320 	orr.w	r3, r3, #32
 80184fe:	b2da      	uxtb	r2, r3
 8018500:	4b67      	ldr	r3, [pc, #412]	@ (80186a0 <tcp_receive+0xdd4>)
 8018502:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	7d1b      	ldrb	r3, [r3, #20]
 8018508:	2b04      	cmp	r3, #4
 801850a:	d102      	bne.n	8018512 <tcp_receive+0xc46>
              pcb->state = CLOSE_WAIT;
 801850c:	687b      	ldr	r3, [r7, #4]
 801850e:	2207      	movs	r2, #7
 8018510:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8018512:	68fb      	ldr	r3, [r7, #12]
 8018514:	681a      	ldr	r2, [r3, #0]
 8018516:	687b      	ldr	r3, [r7, #4]
 8018518:	671a      	str	r2, [r3, #112]	@ 0x70
          tcp_seg_free(cseg);
 801851a:	68f8      	ldr	r0, [r7, #12]
 801851c:	f7fd fc0c 	bl	8015d38 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8018520:	687b      	ldr	r3, [r7, #4]
 8018522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018524:	2b00      	cmp	r3, #0
 8018526:	d008      	beq.n	801853a <tcp_receive+0xc6e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801852c:	68db      	ldr	r3, [r3, #12]
 801852e:	685a      	ldr	r2, [r3, #4]
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8018534:	429a      	cmp	r2, r3
 8018536:	f43f af47 	beq.w	80183c8 <tcp_receive+0xafc>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	7e9b      	ldrb	r3, [r3, #26]
 801853e:	f003 0301 	and.w	r3, r3, #1
 8018542:	2b00      	cmp	r3, #0
 8018544:	d00e      	beq.n	8018564 <tcp_receive+0xc98>
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	7e9b      	ldrb	r3, [r3, #26]
 801854a:	f023 0301 	bic.w	r3, r3, #1
 801854e:	b2da      	uxtb	r2, r3
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	769a      	strb	r2, [r3, #26]
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	7e9b      	ldrb	r3, [r3, #26]
 8018558:	f043 0302 	orr.w	r3, r3, #2
 801855c:	b2da      	uxtb	r2, r3
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8018562:	e181      	b.n	8018868 <tcp_receive+0xf9c>
        tcp_ack(pcb);
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	7e9b      	ldrb	r3, [r3, #26]
 8018568:	f043 0301 	orr.w	r3, r3, #1
 801856c:	b2da      	uxtb	r2, r3
 801856e:	687b      	ldr	r3, [r7, #4]
 8018570:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8018572:	e179      	b.n	8018868 <tcp_receive+0xf9c>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8018574:	6878      	ldr	r0, [r7, #4]
 8018576:	f001 f8f9 	bl	801976c <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801857e:	2b00      	cmp	r3, #0
 8018580:	d106      	bne.n	8018590 <tcp_receive+0xcc4>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8018582:	4848      	ldr	r0, [pc, #288]	@ (80186a4 <tcp_receive+0xdd8>)
 8018584:	f7fd fbfe 	bl	8015d84 <tcp_seg_copy>
 8018588:	4602      	mov	r2, r0
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	671a      	str	r2, [r3, #112]	@ 0x70
      if (pcb->rcv_nxt == seqno) {
 801858e:	e16b      	b.n	8018868 <tcp_receive+0xf9c>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 8018590:	2300      	movs	r3, #0
 8018592:	62bb      	str	r3, [r7, #40]	@ 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018598:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801859a:	e150      	b.n	801883e <tcp_receive+0xf72>
            if (seqno == next->tcphdr->seqno) {
 801859c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801859e:	68db      	ldr	r3, [r3, #12]
 80185a0:	685a      	ldr	r2, [r3, #4]
 80185a2:	4b41      	ldr	r3, [pc, #260]	@ (80186a8 <tcp_receive+0xddc>)
 80185a4:	681b      	ldr	r3, [r3, #0]
 80185a6:	429a      	cmp	r2, r3
 80185a8:	d11d      	bne.n	80185e6 <tcp_receive+0xd1a>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80185aa:	4b3e      	ldr	r3, [pc, #248]	@ (80186a4 <tcp_receive+0xdd8>)
 80185ac:	891a      	ldrh	r2, [r3, #8]
 80185ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80185b0:	891b      	ldrh	r3, [r3, #8]
 80185b2:	429a      	cmp	r2, r3
 80185b4:	f240 8148 	bls.w	8018848 <tcp_receive+0xf7c>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 80185b8:	483a      	ldr	r0, [pc, #232]	@ (80186a4 <tcp_receive+0xdd8>)
 80185ba:	f7fd fbe3 	bl	8015d84 <tcp_seg_copy>
 80185be:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 80185c0:	68fb      	ldr	r3, [r7, #12]
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	f000 8142 	beq.w	801884c <tcp_receive+0xf80>
                  if (prev != NULL) {
 80185c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	d003      	beq.n	80185d6 <tcp_receive+0xd0a>
                    prev->next = cseg;
 80185ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80185d0:	68fa      	ldr	r2, [r7, #12]
 80185d2:	601a      	str	r2, [r3, #0]
 80185d4:	e002      	b.n	80185dc <tcp_receive+0xd10>
                  } else {
                    pcb->ooseq = cseg;
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	68fa      	ldr	r2, [r7, #12]
 80185da:	671a      	str	r2, [r3, #112]	@ 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 80185dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80185de:	68f8      	ldr	r0, [r7, #12]
 80185e0:	f7ff f8fe 	bl	80177e0 <tcp_oos_insert_segment>
                }
                break;
 80185e4:	e132      	b.n	801884c <tcp_receive+0xf80>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80185e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80185e8:	2b00      	cmp	r3, #0
 80185ea:	d117      	bne.n	801861c <tcp_receive+0xd50>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80185ec:	4b2e      	ldr	r3, [pc, #184]	@ (80186a8 <tcp_receive+0xddc>)
 80185ee:	681a      	ldr	r2, [r3, #0]
 80185f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80185f2:	68db      	ldr	r3, [r3, #12]
 80185f4:	685b      	ldr	r3, [r3, #4]
 80185f6:	1ad3      	subs	r3, r2, r3
 80185f8:	2b00      	cmp	r3, #0
 80185fa:	da57      	bge.n	80186ac <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 80185fc:	4829      	ldr	r0, [pc, #164]	@ (80186a4 <tcp_receive+0xdd8>)
 80185fe:	f7fd fbc1 	bl	8015d84 <tcp_seg_copy>
 8018602:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8018604:	68fb      	ldr	r3, [r7, #12]
 8018606:	2b00      	cmp	r3, #0
 8018608:	f000 8122 	beq.w	8018850 <tcp_receive+0xf84>
                    pcb->ooseq = cseg;
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	68fa      	ldr	r2, [r7, #12]
 8018610:	671a      	str	r2, [r3, #112]	@ 0x70
                    tcp_oos_insert_segment(cseg, next);
 8018612:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018614:	68f8      	ldr	r0, [r7, #12]
 8018616:	f7ff f8e3 	bl	80177e0 <tcp_oos_insert_segment>
                  }
                  break;
 801861a:	e119      	b.n	8018850 <tcp_receive+0xf84>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 801861c:	4b22      	ldr	r3, [pc, #136]	@ (80186a8 <tcp_receive+0xddc>)
 801861e:	681a      	ldr	r2, [r3, #0]
 8018620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018622:	68db      	ldr	r3, [r3, #12]
 8018624:	685b      	ldr	r3, [r3, #4]
 8018626:	1ad3      	subs	r3, r2, r3
 8018628:	3b01      	subs	r3, #1
 801862a:	2b00      	cmp	r3, #0
 801862c:	db3e      	blt.n	80186ac <tcp_receive+0xde0>
 801862e:	4b1e      	ldr	r3, [pc, #120]	@ (80186a8 <tcp_receive+0xddc>)
 8018630:	681a      	ldr	r2, [r3, #0]
 8018632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018634:	68db      	ldr	r3, [r3, #12]
 8018636:	685b      	ldr	r3, [r3, #4]
 8018638:	1ad3      	subs	r3, r2, r3
 801863a:	3301      	adds	r3, #1
 801863c:	2b00      	cmp	r3, #0
 801863e:	dc35      	bgt.n	80186ac <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 8018640:	4818      	ldr	r0, [pc, #96]	@ (80186a4 <tcp_receive+0xdd8>)
 8018642:	f7fd fb9f 	bl	8015d84 <tcp_seg_copy>
 8018646:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8018648:	68fb      	ldr	r3, [r7, #12]
 801864a:	2b00      	cmp	r3, #0
 801864c:	f000 8102 	beq.w	8018854 <tcp_receive+0xf88>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8018650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018652:	68db      	ldr	r3, [r3, #12]
 8018654:	685b      	ldr	r3, [r3, #4]
 8018656:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018658:	8912      	ldrh	r2, [r2, #8]
 801865a:	441a      	add	r2, r3
 801865c:	4b12      	ldr	r3, [pc, #72]	@ (80186a8 <tcp_receive+0xddc>)
 801865e:	681b      	ldr	r3, [r3, #0]
 8018660:	1ad3      	subs	r3, r2, r3
 8018662:	2b00      	cmp	r3, #0
 8018664:	dd12      	ble.n	801868c <tcp_receive+0xdc0>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8018666:	4b10      	ldr	r3, [pc, #64]	@ (80186a8 <tcp_receive+0xddc>)
 8018668:	681b      	ldr	r3, [r3, #0]
 801866a:	b29a      	uxth	r2, r3
 801866c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801866e:	68db      	ldr	r3, [r3, #12]
 8018670:	685b      	ldr	r3, [r3, #4]
 8018672:	b29b      	uxth	r3, r3
 8018674:	1ad3      	subs	r3, r2, r3
 8018676:	b29a      	uxth	r2, r3
 8018678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801867a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801867c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801867e:	685a      	ldr	r2, [r3, #4]
 8018680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018682:	891b      	ldrh	r3, [r3, #8]
 8018684:	4619      	mov	r1, r3
 8018686:	4610      	mov	r0, r2
 8018688:	f7fb fdae 	bl	80141e8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801868c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801868e:	68fa      	ldr	r2, [r7, #12]
 8018690:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8018692:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018694:	68f8      	ldr	r0, [r7, #12]
 8018696:	f7ff f8a3 	bl	80177e0 <tcp_oos_insert_segment>
                  }
                  break;
 801869a:	e0db      	b.n	8018854 <tcp_receive+0xf88>
 801869c:	2000dd64 	.word	0x2000dd64
 80186a0:	2000dd61 	.word	0x2000dd61
 80186a4:	2000dd34 	.word	0x2000dd34
 80186a8:	2000dd54 	.word	0x2000dd54
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80186ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80186ae:	681b      	ldr	r3, [r3, #0]
 80186b0:	2b00      	cmp	r3, #0
 80186b2:	f040 80bf 	bne.w	8018834 <tcp_receive+0xf68>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80186b6:	4b7c      	ldr	r3, [pc, #496]	@ (80188a8 <tcp_receive+0xfdc>)
 80186b8:	681a      	ldr	r2, [r3, #0]
 80186ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80186bc:	68db      	ldr	r3, [r3, #12]
 80186be:	685b      	ldr	r3, [r3, #4]
 80186c0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80186c2:	2b00      	cmp	r3, #0
 80186c4:	f340 80b6 	ble.w	8018834 <tcp_receive+0xf68>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80186c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80186ca:	68db      	ldr	r3, [r3, #12]
 80186cc:	899b      	ldrh	r3, [r3, #12]
 80186ce:	b29b      	uxth	r3, r3
 80186d0:	4618      	mov	r0, r3
 80186d2:	f7fa fca5 	bl	8013020 <lwip_htons>
 80186d6:	4603      	mov	r3, r0
 80186d8:	f003 0301 	and.w	r3, r3, #1
 80186dc:	2b00      	cmp	r3, #0
 80186de:	f040 80bb 	bne.w	8018858 <tcp_receive+0xf8c>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80186e2:	4872      	ldr	r0, [pc, #456]	@ (80188ac <tcp_receive+0xfe0>)
 80186e4:	f7fd fb4e 	bl	8015d84 <tcp_seg_copy>
 80186e8:	4602      	mov	r2, r0
 80186ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80186ec:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80186ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80186f0:	681b      	ldr	r3, [r3, #0]
 80186f2:	2b00      	cmp	r3, #0
 80186f4:	f000 80b2 	beq.w	801885c <tcp_receive+0xf90>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80186f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80186fa:	68db      	ldr	r3, [r3, #12]
 80186fc:	685b      	ldr	r3, [r3, #4]
 80186fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018700:	8912      	ldrh	r2, [r2, #8]
 8018702:	441a      	add	r2, r3
 8018704:	4b68      	ldr	r3, [pc, #416]	@ (80188a8 <tcp_receive+0xfdc>)
 8018706:	681b      	ldr	r3, [r3, #0]
 8018708:	1ad3      	subs	r3, r2, r3
 801870a:	2b00      	cmp	r3, #0
 801870c:	dd12      	ble.n	8018734 <tcp_receive+0xe68>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801870e:	4b66      	ldr	r3, [pc, #408]	@ (80188a8 <tcp_receive+0xfdc>)
 8018710:	681b      	ldr	r3, [r3, #0]
 8018712:	b29a      	uxth	r2, r3
 8018714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018716:	68db      	ldr	r3, [r3, #12]
 8018718:	685b      	ldr	r3, [r3, #4]
 801871a:	b29b      	uxth	r3, r3
 801871c:	1ad3      	subs	r3, r2, r3
 801871e:	b29a      	uxth	r2, r3
 8018720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018722:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8018724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018726:	685a      	ldr	r2, [r3, #4]
 8018728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801872a:	891b      	ldrh	r3, [r3, #8]
 801872c:	4619      	mov	r1, r3
 801872e:	4610      	mov	r0, r2
 8018730:	f7fb fd5a 	bl	80141e8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8018734:	4b5e      	ldr	r3, [pc, #376]	@ (80188b0 <tcp_receive+0xfe4>)
 8018736:	881b      	ldrh	r3, [r3, #0]
 8018738:	461a      	mov	r2, r3
 801873a:	4b5b      	ldr	r3, [pc, #364]	@ (80188a8 <tcp_receive+0xfdc>)
 801873c:	681b      	ldr	r3, [r3, #0]
 801873e:	441a      	add	r2, r3
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018744:	6879      	ldr	r1, [r7, #4]
 8018746:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8018748:	440b      	add	r3, r1
 801874a:	1ad3      	subs	r3, r2, r3
 801874c:	2b00      	cmp	r3, #0
 801874e:	f340 8085 	ble.w	801885c <tcp_receive+0xf90>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8018752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018754:	681b      	ldr	r3, [r3, #0]
 8018756:	68db      	ldr	r3, [r3, #12]
 8018758:	899b      	ldrh	r3, [r3, #12]
 801875a:	b29b      	uxth	r3, r3
 801875c:	4618      	mov	r0, r3
 801875e:	f7fa fc5f 	bl	8013020 <lwip_htons>
 8018762:	4603      	mov	r3, r0
 8018764:	f003 0301 	and.w	r3, r3, #1
 8018768:	2b00      	cmp	r3, #0
 801876a:	d01e      	beq.n	80187aa <tcp_receive+0xede>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801876c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801876e:	681b      	ldr	r3, [r3, #0]
 8018770:	68db      	ldr	r3, [r3, #12]
 8018772:	899b      	ldrh	r3, [r3, #12]
 8018774:	b29b      	uxth	r3, r3
 8018776:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801877a:	b29c      	uxth	r4, r3
 801877c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801877e:	681b      	ldr	r3, [r3, #0]
 8018780:	68db      	ldr	r3, [r3, #12]
 8018782:	899b      	ldrh	r3, [r3, #12]
 8018784:	b29b      	uxth	r3, r3
 8018786:	4618      	mov	r0, r3
 8018788:	f7fa fc4a 	bl	8013020 <lwip_htons>
 801878c:	4603      	mov	r3, r0
 801878e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8018792:	b29b      	uxth	r3, r3
 8018794:	4618      	mov	r0, r3
 8018796:	f7fa fc43 	bl	8013020 <lwip_htons>
 801879a:	4603      	mov	r3, r0
 801879c:	461a      	mov	r2, r3
 801879e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80187a0:	681b      	ldr	r3, [r3, #0]
 80187a2:	68db      	ldr	r3, [r3, #12]
 80187a4:	4322      	orrs	r2, r4
 80187a6:	b292      	uxth	r2, r2
 80187a8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80187ae:	b29a      	uxth	r2, r3
 80187b0:	687b      	ldr	r3, [r7, #4]
 80187b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80187b4:	4413      	add	r3, r2
 80187b6:	b299      	uxth	r1, r3
 80187b8:	4b3b      	ldr	r3, [pc, #236]	@ (80188a8 <tcp_receive+0xfdc>)
 80187ba:	681b      	ldr	r3, [r3, #0]
 80187bc:	b29a      	uxth	r2, r3
 80187be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80187c0:	681b      	ldr	r3, [r3, #0]
 80187c2:	1a8a      	subs	r2, r1, r2
 80187c4:	b292      	uxth	r2, r2
 80187c6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80187c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80187ca:	681b      	ldr	r3, [r3, #0]
 80187cc:	685a      	ldr	r2, [r3, #4]
 80187ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80187d0:	681b      	ldr	r3, [r3, #0]
 80187d2:	891b      	ldrh	r3, [r3, #8]
 80187d4:	4619      	mov	r1, r3
 80187d6:	4610      	mov	r0, r2
 80187d8:	f7fb fd06 	bl	80141e8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80187dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80187de:	681b      	ldr	r3, [r3, #0]
 80187e0:	891c      	ldrh	r4, [r3, #8]
 80187e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80187e4:	681b      	ldr	r3, [r3, #0]
 80187e6:	68db      	ldr	r3, [r3, #12]
 80187e8:	899b      	ldrh	r3, [r3, #12]
 80187ea:	b29b      	uxth	r3, r3
 80187ec:	4618      	mov	r0, r3
 80187ee:	f7fa fc17 	bl	8013020 <lwip_htons>
 80187f2:	4603      	mov	r3, r0
 80187f4:	f003 0303 	and.w	r3, r3, #3
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	d001      	beq.n	8018800 <tcp_receive+0xf34>
 80187fc:	2301      	movs	r3, #1
 80187fe:	e000      	b.n	8018802 <tcp_receive+0xf36>
 8018800:	2300      	movs	r3, #0
 8018802:	4423      	add	r3, r4
 8018804:	b29a      	uxth	r2, r3
 8018806:	4b2a      	ldr	r3, [pc, #168]	@ (80188b0 <tcp_receive+0xfe4>)
 8018808:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801880a:	4b29      	ldr	r3, [pc, #164]	@ (80188b0 <tcp_receive+0xfe4>)
 801880c:	881b      	ldrh	r3, [r3, #0]
 801880e:	461a      	mov	r2, r3
 8018810:	4b25      	ldr	r3, [pc, #148]	@ (80188a8 <tcp_receive+0xfdc>)
 8018812:	681b      	ldr	r3, [r3, #0]
 8018814:	441a      	add	r2, r3
 8018816:	687b      	ldr	r3, [r7, #4]
 8018818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801881a:	6879      	ldr	r1, [r7, #4]
 801881c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801881e:	440b      	add	r3, r1
 8018820:	429a      	cmp	r2, r3
 8018822:	d01b      	beq.n	801885c <tcp_receive+0xf90>
 8018824:	4b23      	ldr	r3, [pc, #140]	@ (80188b4 <tcp_receive+0xfe8>)
 8018826:	f240 627a 	movw	r2, #1658	@ 0x67a
 801882a:	4923      	ldr	r1, [pc, #140]	@ (80188b8 <tcp_receive+0xfec>)
 801882c:	4823      	ldr	r0, [pc, #140]	@ (80188bc <tcp_receive+0xff0>)
 801882e:	f007 fe37 	bl	80204a0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8018832:	e013      	b.n	801885c <tcp_receive+0xf90>
              }
            }
            prev = next;
 8018834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018836:	62bb      	str	r3, [r7, #40]	@ 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8018838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801883a:	681b      	ldr	r3, [r3, #0]
 801883c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801883e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018840:	2b00      	cmp	r3, #0
 8018842:	f47f aeab 	bne.w	801859c <tcp_receive+0xcd0>
      if (pcb->rcv_nxt == seqno) {
 8018846:	e00f      	b.n	8018868 <tcp_receive+0xf9c>
                break;
 8018848:	bf00      	nop
 801884a:	e00d      	b.n	8018868 <tcp_receive+0xf9c>
                break;
 801884c:	bf00      	nop
 801884e:	e00b      	b.n	8018868 <tcp_receive+0xf9c>
                  break;
 8018850:	bf00      	nop
 8018852:	e009      	b.n	8018868 <tcp_receive+0xf9c>
                  break;
 8018854:	bf00      	nop
 8018856:	e007      	b.n	8018868 <tcp_receive+0xf9c>
                  break;
 8018858:	bf00      	nop
 801885a:	e005      	b.n	8018868 <tcp_receive+0xf9c>
                break;
 801885c:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 801885e:	e003      	b.n	8018868 <tcp_receive+0xf9c>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8018860:	6878      	ldr	r0, [r7, #4]
 8018862:	f000 ff83 	bl	801976c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018866:	e01a      	b.n	801889e <tcp_receive+0xfd2>
 8018868:	e019      	b.n	801889e <tcp_receive+0xfd2>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801886a:	4b0f      	ldr	r3, [pc, #60]	@ (80188a8 <tcp_receive+0xfdc>)
 801886c:	681a      	ldr	r2, [r3, #0]
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018872:	1ad3      	subs	r3, r2, r3
 8018874:	2b00      	cmp	r3, #0
 8018876:	db0a      	blt.n	801888e <tcp_receive+0xfc2>
 8018878:	4b0b      	ldr	r3, [pc, #44]	@ (80188a8 <tcp_receive+0xfdc>)
 801887a:	681a      	ldr	r2, [r3, #0]
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018880:	6879      	ldr	r1, [r7, #4]
 8018882:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8018884:	440b      	add	r3, r1
 8018886:	1ad3      	subs	r3, r2, r3
 8018888:	3301      	adds	r3, #1
 801888a:	2b00      	cmp	r3, #0
 801888c:	dd07      	ble.n	801889e <tcp_receive+0xfd2>
      tcp_ack_now(pcb);
 801888e:	687b      	ldr	r3, [r7, #4]
 8018890:	7e9b      	ldrb	r3, [r3, #26]
 8018892:	f043 0302 	orr.w	r3, r3, #2
 8018896:	b2da      	uxtb	r2, r3
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	769a      	strb	r2, [r3, #26]
    }
  }
}
 801889c:	e7ff      	b.n	801889e <tcp_receive+0xfd2>
 801889e:	bf00      	nop
 80188a0:	3734      	adds	r7, #52	@ 0x34
 80188a2:	46bd      	mov	sp, r7
 80188a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80188a6:	bf00      	nop
 80188a8:	2000dd54 	.word	0x2000dd54
 80188ac:	2000dd34 	.word	0x2000dd34
 80188b0:	2000dd5e 	.word	0x2000dd5e
 80188b4:	08024aa4 	.word	0x08024aa4
 80188b8:	08024d70 	.word	0x08024d70
 80188bc:	08024ae8 	.word	0x08024ae8

080188c0 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 80188c0:	b480      	push	{r7}
 80188c2:	b083      	sub	sp, #12
 80188c4:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 80188c6:	4b17      	ldr	r3, [pc, #92]	@ (8018924 <tcp_getoptbyte+0x64>)
 80188c8:	681b      	ldr	r3, [r3, #0]
 80188ca:	2b00      	cmp	r3, #0
 80188cc:	d005      	beq.n	80188da <tcp_getoptbyte+0x1a>
 80188ce:	4b16      	ldr	r3, [pc, #88]	@ (8018928 <tcp_getoptbyte+0x68>)
 80188d0:	881a      	ldrh	r2, [r3, #0]
 80188d2:	4b16      	ldr	r3, [pc, #88]	@ (801892c <tcp_getoptbyte+0x6c>)
 80188d4:	881b      	ldrh	r3, [r3, #0]
 80188d6:	429a      	cmp	r2, r3
 80188d8:	d20e      	bcs.n	80188f8 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 80188da:	4b15      	ldr	r3, [pc, #84]	@ (8018930 <tcp_getoptbyte+0x70>)
 80188dc:	681b      	ldr	r3, [r3, #0]
 80188de:	3314      	adds	r3, #20
 80188e0:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 80188e2:	4b11      	ldr	r3, [pc, #68]	@ (8018928 <tcp_getoptbyte+0x68>)
 80188e4:	881b      	ldrh	r3, [r3, #0]
 80188e6:	1c5a      	adds	r2, r3, #1
 80188e8:	b291      	uxth	r1, r2
 80188ea:	4a0f      	ldr	r2, [pc, #60]	@ (8018928 <tcp_getoptbyte+0x68>)
 80188ec:	8011      	strh	r1, [r2, #0]
 80188ee:	461a      	mov	r2, r3
 80188f0:	683b      	ldr	r3, [r7, #0]
 80188f2:	4413      	add	r3, r2
 80188f4:	781b      	ldrb	r3, [r3, #0]
 80188f6:	e010      	b.n	801891a <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 80188f8:	4b0b      	ldr	r3, [pc, #44]	@ (8018928 <tcp_getoptbyte+0x68>)
 80188fa:	881b      	ldrh	r3, [r3, #0]
 80188fc:	1c5a      	adds	r2, r3, #1
 80188fe:	b291      	uxth	r1, r2
 8018900:	4a09      	ldr	r2, [pc, #36]	@ (8018928 <tcp_getoptbyte+0x68>)
 8018902:	8011      	strh	r1, [r2, #0]
 8018904:	b2da      	uxtb	r2, r3
 8018906:	4b09      	ldr	r3, [pc, #36]	@ (801892c <tcp_getoptbyte+0x6c>)
 8018908:	881b      	ldrh	r3, [r3, #0]
 801890a:	b2db      	uxtb	r3, r3
 801890c:	1ad3      	subs	r3, r2, r3
 801890e:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 8018910:	4b04      	ldr	r3, [pc, #16]	@ (8018924 <tcp_getoptbyte+0x64>)
 8018912:	681a      	ldr	r2, [r3, #0]
 8018914:	79fb      	ldrb	r3, [r7, #7]
 8018916:	4413      	add	r3, r2
 8018918:	781b      	ldrb	r3, [r3, #0]
  }
}
 801891a:	4618      	mov	r0, r3
 801891c:	370c      	adds	r7, #12
 801891e:	46bd      	mov	sp, r7
 8018920:	bc80      	pop	{r7}
 8018922:	4770      	bx	lr
 8018924:	2000dd4c 	.word	0x2000dd4c
 8018928:	2000dd50 	.word	0x2000dd50
 801892c:	2000dd4a 	.word	0x2000dd4a
 8018930:	2000dd44 	.word	0x2000dd44

08018934 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8018934:	b580      	push	{r7, lr}
 8018936:	b084      	sub	sp, #16
 8018938:	af00      	add	r7, sp, #0
 801893a:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801893c:	4b2e      	ldr	r3, [pc, #184]	@ (80189f8 <tcp_parseopt+0xc4>)
 801893e:	881b      	ldrh	r3, [r3, #0]
 8018940:	2b00      	cmp	r3, #0
 8018942:	d056      	beq.n	80189f2 <tcp_parseopt+0xbe>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018944:	4b2d      	ldr	r3, [pc, #180]	@ (80189fc <tcp_parseopt+0xc8>)
 8018946:	2200      	movs	r2, #0
 8018948:	801a      	strh	r2, [r3, #0]
 801894a:	e046      	b.n	80189da <tcp_parseopt+0xa6>
      u8_t opt = tcp_getoptbyte();
 801894c:	f7ff ffb8 	bl	80188c0 <tcp_getoptbyte>
 8018950:	4603      	mov	r3, r0
 8018952:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8018954:	7bfb      	ldrb	r3, [r7, #15]
 8018956:	2b02      	cmp	r3, #2
 8018958:	d006      	beq.n	8018968 <tcp_parseopt+0x34>
 801895a:	2b02      	cmp	r3, #2
 801895c:	dc2a      	bgt.n	80189b4 <tcp_parseopt+0x80>
 801895e:	2b00      	cmp	r3, #0
 8018960:	d042      	beq.n	80189e8 <tcp_parseopt+0xb4>
 8018962:	2b01      	cmp	r3, #1
 8018964:	d038      	beq.n	80189d8 <tcp_parseopt+0xa4>
 8018966:	e025      	b.n	80189b4 <tcp_parseopt+0x80>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8018968:	f7ff ffaa 	bl	80188c0 <tcp_getoptbyte>
 801896c:	4603      	mov	r3, r0
 801896e:	2b04      	cmp	r3, #4
 8018970:	d13c      	bne.n	80189ec <tcp_parseopt+0xb8>
 8018972:	4b22      	ldr	r3, [pc, #136]	@ (80189fc <tcp_parseopt+0xc8>)
 8018974:	881b      	ldrh	r3, [r3, #0]
 8018976:	3301      	adds	r3, #1
 8018978:	4a1f      	ldr	r2, [pc, #124]	@ (80189f8 <tcp_parseopt+0xc4>)
 801897a:	8812      	ldrh	r2, [r2, #0]
 801897c:	4293      	cmp	r3, r2
 801897e:	da35      	bge.n	80189ec <tcp_parseopt+0xb8>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8018980:	f7ff ff9e 	bl	80188c0 <tcp_getoptbyte>
 8018984:	4603      	mov	r3, r0
 8018986:	021b      	lsls	r3, r3, #8
 8018988:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 801898a:	f7ff ff99 	bl	80188c0 <tcp_getoptbyte>
 801898e:	4603      	mov	r3, r0
 8018990:	461a      	mov	r2, r3
 8018992:	89bb      	ldrh	r3, [r7, #12]
 8018994:	4313      	orrs	r3, r2
 8018996:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8018998:	89bb      	ldrh	r3, [r7, #12]
 801899a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801899e:	d804      	bhi.n	80189aa <tcp_parseopt+0x76>
 80189a0:	89bb      	ldrh	r3, [r7, #12]
 80189a2:	2b00      	cmp	r3, #0
 80189a4:	d001      	beq.n	80189aa <tcp_parseopt+0x76>
 80189a6:	89ba      	ldrh	r2, [r7, #12]
 80189a8:	e001      	b.n	80189ae <tcp_parseopt+0x7a>
 80189aa:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80189ae:	687b      	ldr	r3, [r7, #4]
 80189b0:	865a      	strh	r2, [r3, #50]	@ 0x32
        break;
 80189b2:	e012      	b.n	80189da <tcp_parseopt+0xa6>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 80189b4:	f7ff ff84 	bl	80188c0 <tcp_getoptbyte>
 80189b8:	4603      	mov	r3, r0
 80189ba:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 80189bc:	7afb      	ldrb	r3, [r7, #11]
 80189be:	2b01      	cmp	r3, #1
 80189c0:	d916      	bls.n	80189f0 <tcp_parseopt+0xbc>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 80189c2:	7afb      	ldrb	r3, [r7, #11]
 80189c4:	b29a      	uxth	r2, r3
 80189c6:	4b0d      	ldr	r3, [pc, #52]	@ (80189fc <tcp_parseopt+0xc8>)
 80189c8:	881b      	ldrh	r3, [r3, #0]
 80189ca:	4413      	add	r3, r2
 80189cc:	b29b      	uxth	r3, r3
 80189ce:	3b02      	subs	r3, #2
 80189d0:	b29a      	uxth	r2, r3
 80189d2:	4b0a      	ldr	r3, [pc, #40]	@ (80189fc <tcp_parseopt+0xc8>)
 80189d4:	801a      	strh	r2, [r3, #0]
 80189d6:	e000      	b.n	80189da <tcp_parseopt+0xa6>
        break;
 80189d8:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80189da:	4b08      	ldr	r3, [pc, #32]	@ (80189fc <tcp_parseopt+0xc8>)
 80189dc:	881a      	ldrh	r2, [r3, #0]
 80189de:	4b06      	ldr	r3, [pc, #24]	@ (80189f8 <tcp_parseopt+0xc4>)
 80189e0:	881b      	ldrh	r3, [r3, #0]
 80189e2:	429a      	cmp	r2, r3
 80189e4:	d3b2      	bcc.n	801894c <tcp_parseopt+0x18>
 80189e6:	e004      	b.n	80189f2 <tcp_parseopt+0xbe>
        return;
 80189e8:	bf00      	nop
 80189ea:	e002      	b.n	80189f2 <tcp_parseopt+0xbe>
          return;
 80189ec:	bf00      	nop
 80189ee:	e000      	b.n	80189f2 <tcp_parseopt+0xbe>
          return;
 80189f0:	bf00      	nop
      }
    }
  }
}
 80189f2:	3710      	adds	r7, #16
 80189f4:	46bd      	mov	sp, r7
 80189f6:	bd80      	pop	{r7, pc}
 80189f8:	2000dd48 	.word	0x2000dd48
 80189fc:	2000dd50 	.word	0x2000dd50

08018a00 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8018a00:	b480      	push	{r7}
 8018a02:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8018a04:	4b05      	ldr	r3, [pc, #20]	@ (8018a1c <tcp_trigger_input_pcb_close+0x1c>)
 8018a06:	781b      	ldrb	r3, [r3, #0]
 8018a08:	f043 0310 	orr.w	r3, r3, #16
 8018a0c:	b2da      	uxtb	r2, r3
 8018a0e:	4b03      	ldr	r3, [pc, #12]	@ (8018a1c <tcp_trigger_input_pcb_close+0x1c>)
 8018a10:	701a      	strb	r2, [r3, #0]
}
 8018a12:	bf00      	nop
 8018a14:	46bd      	mov	sp, r7
 8018a16:	bc80      	pop	{r7}
 8018a18:	4770      	bx	lr
 8018a1a:	bf00      	nop
 8018a1c:	2000dd61 	.word	0x2000dd61

08018a20 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8018a20:	b580      	push	{r7, lr}
 8018a22:	b086      	sub	sp, #24
 8018a24:	af00      	add	r7, sp, #0
 8018a26:	60f8      	str	r0, [r7, #12]
 8018a28:	607b      	str	r3, [r7, #4]
 8018a2a:	460b      	mov	r3, r1
 8018a2c:	817b      	strh	r3, [r7, #10]
 8018a2e:	4613      	mov	r3, r2
 8018a30:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8018a32:	897a      	ldrh	r2, [r7, #10]
 8018a34:	893b      	ldrh	r3, [r7, #8]
 8018a36:	4413      	add	r3, r2
 8018a38:	b29b      	uxth	r3, r3
 8018a3a:	3314      	adds	r3, #20
 8018a3c:	b29b      	uxth	r3, r3
 8018a3e:	2200      	movs	r2, #0
 8018a40:	4619      	mov	r1, r3
 8018a42:	2001      	movs	r0, #1
 8018a44:	f7fb f9cc 	bl	8013de0 <pbuf_alloc>
 8018a48:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8018a4a:	697b      	ldr	r3, [r7, #20]
 8018a4c:	2b00      	cmp	r3, #0
 8018a4e:	d056      	beq.n	8018afe <tcp_output_alloc_header+0xde>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8018a50:	897b      	ldrh	r3, [r7, #10]
 8018a52:	3313      	adds	r3, #19
 8018a54:	697a      	ldr	r2, [r7, #20]
 8018a56:	8952      	ldrh	r2, [r2, #10]
 8018a58:	4293      	cmp	r3, r2
 8018a5a:	db05      	blt.n	8018a68 <tcp_output_alloc_header+0x48>
 8018a5c:	4b2a      	ldr	r3, [pc, #168]	@ (8018b08 <tcp_output_alloc_header+0xe8>)
 8018a5e:	2272      	movs	r2, #114	@ 0x72
 8018a60:	492a      	ldr	r1, [pc, #168]	@ (8018b0c <tcp_output_alloc_header+0xec>)
 8018a62:	482b      	ldr	r0, [pc, #172]	@ (8018b10 <tcp_output_alloc_header+0xf0>)
 8018a64:	f007 fd1c 	bl	80204a0 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8018a68:	697b      	ldr	r3, [r7, #20]
 8018a6a:	685b      	ldr	r3, [r3, #4]
 8018a6c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8018a6e:	68fb      	ldr	r3, [r7, #12]
 8018a70:	8adb      	ldrh	r3, [r3, #22]
 8018a72:	4618      	mov	r0, r3
 8018a74:	f7fa fad4 	bl	8013020 <lwip_htons>
 8018a78:	4603      	mov	r3, r0
 8018a7a:	461a      	mov	r2, r3
 8018a7c:	693b      	ldr	r3, [r7, #16]
 8018a7e:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8018a80:	68fb      	ldr	r3, [r7, #12]
 8018a82:	8b1b      	ldrh	r3, [r3, #24]
 8018a84:	4618      	mov	r0, r3
 8018a86:	f7fa facb 	bl	8013020 <lwip_htons>
 8018a8a:	4603      	mov	r3, r0
 8018a8c:	461a      	mov	r2, r3
 8018a8e:	693b      	ldr	r3, [r7, #16]
 8018a90:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8018a92:	693b      	ldr	r3, [r7, #16]
 8018a94:	687a      	ldr	r2, [r7, #4]
 8018a96:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8018a98:	68fb      	ldr	r3, [r7, #12]
 8018a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018a9c:	4618      	mov	r0, r3
 8018a9e:	f7fa facc 	bl	801303a <lwip_htonl>
 8018aa2:	4602      	mov	r2, r0
 8018aa4:	693b      	ldr	r3, [r7, #16]
 8018aa6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8018aa8:	897b      	ldrh	r3, [r7, #10]
 8018aaa:	089b      	lsrs	r3, r3, #2
 8018aac:	b29b      	uxth	r3, r3
 8018aae:	3305      	adds	r3, #5
 8018ab0:	b29b      	uxth	r3, r3
 8018ab2:	031b      	lsls	r3, r3, #12
 8018ab4:	b29b      	uxth	r3, r3
 8018ab6:	f043 0310 	orr.w	r3, r3, #16
 8018aba:	b29b      	uxth	r3, r3
 8018abc:	4618      	mov	r0, r3
 8018abe:	f7fa faaf 	bl	8013020 <lwip_htons>
 8018ac2:	4603      	mov	r3, r0
 8018ac4:	461a      	mov	r2, r3
 8018ac6:	693b      	ldr	r3, [r7, #16]
 8018ac8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8018aca:	68fb      	ldr	r3, [r7, #12]
 8018acc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018ace:	4618      	mov	r0, r3
 8018ad0:	f7fa faa6 	bl	8013020 <lwip_htons>
 8018ad4:	4603      	mov	r3, r0
 8018ad6:	461a      	mov	r2, r3
 8018ad8:	693b      	ldr	r3, [r7, #16]
 8018ada:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8018adc:	693b      	ldr	r3, [r7, #16]
 8018ade:	2200      	movs	r2, #0
 8018ae0:	741a      	strb	r2, [r3, #16]
 8018ae2:	2200      	movs	r2, #0
 8018ae4:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8018ae6:	693b      	ldr	r3, [r7, #16]
 8018ae8:	2200      	movs	r2, #0
 8018aea:	749a      	strb	r2, [r3, #18]
 8018aec:	2200      	movs	r2, #0
 8018aee:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018af0:	68fb      	ldr	r3, [r7, #12]
 8018af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018af4:	68fa      	ldr	r2, [r7, #12]
 8018af6:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8018af8:	441a      	add	r2, r3
 8018afa:	68fb      	ldr	r3, [r7, #12]
 8018afc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8018afe:	697b      	ldr	r3, [r7, #20]
}
 8018b00:	4618      	mov	r0, r3
 8018b02:	3718      	adds	r7, #24
 8018b04:	46bd      	mov	sp, r7
 8018b06:	bd80      	pop	{r7, pc}
 8018b08:	08024e2c 	.word	0x08024e2c
 8018b0c:	08024e60 	.word	0x08024e60
 8018b10:	08024e90 	.word	0x08024e90

08018b14 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8018b14:	b590      	push	{r4, r7, lr}
 8018b16:	b085      	sub	sp, #20
 8018b18:	af00      	add	r7, sp, #0
 8018b1a:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	d02d      	beq.n	8018b80 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018b24:	687b      	ldr	r3, [r7, #4]
 8018b26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018b28:	60fb      	str	r3, [r7, #12]
 8018b2a:	e002      	b.n	8018b32 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8018b2c:	68fb      	ldr	r3, [r7, #12]
 8018b2e:	681b      	ldr	r3, [r3, #0]
 8018b30:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018b32:	68fb      	ldr	r3, [r7, #12]
 8018b34:	681b      	ldr	r3, [r3, #0]
 8018b36:	2b00      	cmp	r3, #0
 8018b38:	d1f8      	bne.n	8018b2c <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8018b3a:	68fb      	ldr	r3, [r7, #12]
 8018b3c:	68db      	ldr	r3, [r3, #12]
 8018b3e:	899b      	ldrh	r3, [r3, #12]
 8018b40:	b29b      	uxth	r3, r3
 8018b42:	4618      	mov	r0, r3
 8018b44:	f7fa fa6c 	bl	8013020 <lwip_htons>
 8018b48:	4603      	mov	r3, r0
 8018b4a:	f003 0307 	and.w	r3, r3, #7
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	d116      	bne.n	8018b80 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8018b52:	68fb      	ldr	r3, [r7, #12]
 8018b54:	68db      	ldr	r3, [r3, #12]
 8018b56:	899b      	ldrh	r3, [r3, #12]
 8018b58:	b29c      	uxth	r4, r3
 8018b5a:	2001      	movs	r0, #1
 8018b5c:	f7fa fa60 	bl	8013020 <lwip_htons>
 8018b60:	4603      	mov	r3, r0
 8018b62:	461a      	mov	r2, r3
 8018b64:	68fb      	ldr	r3, [r7, #12]
 8018b66:	68db      	ldr	r3, [r3, #12]
 8018b68:	4322      	orrs	r2, r4
 8018b6a:	b292      	uxth	r2, r2
 8018b6c:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	7e9b      	ldrb	r3, [r3, #26]
 8018b72:	f043 0320 	orr.w	r3, r3, #32
 8018b76:	b2da      	uxtb	r2, r3
 8018b78:	687b      	ldr	r3, [r7, #4]
 8018b7a:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 8018b7c:	2300      	movs	r3, #0
 8018b7e:	e004      	b.n	8018b8a <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8018b80:	2101      	movs	r1, #1
 8018b82:	6878      	ldr	r0, [r7, #4]
 8018b84:	f000 fcdc 	bl	8019540 <tcp_enqueue_flags>
 8018b88:	4603      	mov	r3, r0
}
 8018b8a:	4618      	mov	r0, r3
 8018b8c:	3714      	adds	r7, #20
 8018b8e:	46bd      	mov	sp, r7
 8018b90:	bd90      	pop	{r4, r7, pc}
	...

08018b94 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8018b94:	b590      	push	{r4, r7, lr}
 8018b96:	b087      	sub	sp, #28
 8018b98:	af00      	add	r7, sp, #0
 8018b9a:	60f8      	str	r0, [r7, #12]
 8018b9c:	60b9      	str	r1, [r7, #8]
 8018b9e:	603b      	str	r3, [r7, #0]
 8018ba0:	4613      	mov	r3, r2
 8018ba2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8018ba4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8018ba8:	009b      	lsls	r3, r3, #2
 8018baa:	b2db      	uxtb	r3, r3
 8018bac:	f003 0304 	and.w	r3, r3, #4
 8018bb0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8018bb2:	2003      	movs	r0, #3
 8018bb4:	f7fa fede 	bl	8013974 <memp_malloc>
 8018bb8:	6138      	str	r0, [r7, #16]
 8018bba:	693b      	ldr	r3, [r7, #16]
 8018bbc:	2b00      	cmp	r3, #0
 8018bbe:	d104      	bne.n	8018bca <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8018bc0:	68b8      	ldr	r0, [r7, #8]
 8018bc2:	f7fb fc85 	bl	80144d0 <pbuf_free>
    return NULL;
 8018bc6:	2300      	movs	r3, #0
 8018bc8:	e068      	b.n	8018c9c <tcp_create_segment+0x108>
  }
  seg->flags = optflags;
 8018bca:	693b      	ldr	r3, [r7, #16]
 8018bcc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8018bd0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8018bd2:	693b      	ldr	r3, [r7, #16]
 8018bd4:	2200      	movs	r2, #0
 8018bd6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8018bd8:	693b      	ldr	r3, [r7, #16]
 8018bda:	68ba      	ldr	r2, [r7, #8]
 8018bdc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8018bde:	68bb      	ldr	r3, [r7, #8]
 8018be0:	891a      	ldrh	r2, [r3, #8]
 8018be2:	7dfb      	ldrb	r3, [r7, #23]
 8018be4:	b29b      	uxth	r3, r3
 8018be6:	429a      	cmp	r2, r3
 8018be8:	d205      	bcs.n	8018bf6 <tcp_create_segment+0x62>
 8018bea:	4b2e      	ldr	r3, [pc, #184]	@ (8018ca4 <tcp_create_segment+0x110>)
 8018bec:	22ba      	movs	r2, #186	@ 0xba
 8018bee:	492e      	ldr	r1, [pc, #184]	@ (8018ca8 <tcp_create_segment+0x114>)
 8018bf0:	482e      	ldr	r0, [pc, #184]	@ (8018cac <tcp_create_segment+0x118>)
 8018bf2:	f007 fc55 	bl	80204a0 <iprintf>
  seg->len = p->tot_len - optlen;
 8018bf6:	68bb      	ldr	r3, [r7, #8]
 8018bf8:	891a      	ldrh	r2, [r3, #8]
 8018bfa:	7dfb      	ldrb	r3, [r7, #23]
 8018bfc:	b29b      	uxth	r3, r3
 8018bfe:	1ad3      	subs	r3, r2, r3
 8018c00:	b29a      	uxth	r2, r3
 8018c02:	693b      	ldr	r3, [r7, #16]
 8018c04:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8018c06:	2114      	movs	r1, #20
 8018c08:	68b8      	ldr	r0, [r7, #8]
 8018c0a:	f7fb fc3d 	bl	8014488 <pbuf_header>
 8018c0e:	4603      	mov	r3, r0
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d00c      	beq.n	8018c2e <tcp_create_segment+0x9a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 8018c14:	4b26      	ldr	r3, [pc, #152]	@ (8018cb0 <tcp_create_segment+0x11c>)
 8018c16:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 8018c1a:	3301      	adds	r3, #1
 8018c1c:	b29a      	uxth	r2, r3
 8018c1e:	4b24      	ldr	r3, [pc, #144]	@ (8018cb0 <tcp_create_segment+0x11c>)
 8018c20:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
    tcp_seg_free(seg);
 8018c24:	6938      	ldr	r0, [r7, #16]
 8018c26:	f7fd f887 	bl	8015d38 <tcp_seg_free>
    return NULL;
 8018c2a:	2300      	movs	r3, #0
 8018c2c:	e036      	b.n	8018c9c <tcp_create_segment+0x108>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8018c2e:	693b      	ldr	r3, [r7, #16]
 8018c30:	685b      	ldr	r3, [r3, #4]
 8018c32:	685a      	ldr	r2, [r3, #4]
 8018c34:	693b      	ldr	r3, [r7, #16]
 8018c36:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8018c38:	68fb      	ldr	r3, [r7, #12]
 8018c3a:	8ada      	ldrh	r2, [r3, #22]
 8018c3c:	693b      	ldr	r3, [r7, #16]
 8018c3e:	68dc      	ldr	r4, [r3, #12]
 8018c40:	4610      	mov	r0, r2
 8018c42:	f7fa f9ed 	bl	8013020 <lwip_htons>
 8018c46:	4603      	mov	r3, r0
 8018c48:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8018c4a:	68fb      	ldr	r3, [r7, #12]
 8018c4c:	8b1a      	ldrh	r2, [r3, #24]
 8018c4e:	693b      	ldr	r3, [r7, #16]
 8018c50:	68dc      	ldr	r4, [r3, #12]
 8018c52:	4610      	mov	r0, r2
 8018c54:	f7fa f9e4 	bl	8013020 <lwip_htons>
 8018c58:	4603      	mov	r3, r0
 8018c5a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8018c5c:	693b      	ldr	r3, [r7, #16]
 8018c5e:	68dc      	ldr	r4, [r3, #12]
 8018c60:	6838      	ldr	r0, [r7, #0]
 8018c62:	f7fa f9ea 	bl	801303a <lwip_htonl>
 8018c66:	4603      	mov	r3, r0
 8018c68:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8018c6a:	7dfb      	ldrb	r3, [r7, #23]
 8018c6c:	089b      	lsrs	r3, r3, #2
 8018c6e:	b2db      	uxtb	r3, r3
 8018c70:	3305      	adds	r3, #5
 8018c72:	b29b      	uxth	r3, r3
 8018c74:	031b      	lsls	r3, r3, #12
 8018c76:	b29a      	uxth	r2, r3
 8018c78:	79fb      	ldrb	r3, [r7, #7]
 8018c7a:	b29b      	uxth	r3, r3
 8018c7c:	4313      	orrs	r3, r2
 8018c7e:	b29a      	uxth	r2, r3
 8018c80:	693b      	ldr	r3, [r7, #16]
 8018c82:	68dc      	ldr	r4, [r3, #12]
 8018c84:	4610      	mov	r0, r2
 8018c86:	f7fa f9cb 	bl	8013020 <lwip_htons>
 8018c8a:	4603      	mov	r3, r0
 8018c8c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8018c8e:	693b      	ldr	r3, [r7, #16]
 8018c90:	68db      	ldr	r3, [r3, #12]
 8018c92:	2200      	movs	r2, #0
 8018c94:	749a      	strb	r2, [r3, #18]
 8018c96:	2200      	movs	r2, #0
 8018c98:	74da      	strb	r2, [r3, #19]
  return seg;
 8018c9a:	693b      	ldr	r3, [r7, #16]
}
 8018c9c:	4618      	mov	r0, r3
 8018c9e:	371c      	adds	r7, #28
 8018ca0:	46bd      	mov	sp, r7
 8018ca2:	bd90      	pop	{r4, r7, pc}
 8018ca4:	08024e2c 	.word	0x08024e2c
 8018ca8:	08024eb8 	.word	0x08024eb8
 8018cac:	08024e90 	.word	0x08024e90
 8018cb0:	2000db84 	.word	0x2000db84

08018cb4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8018cb4:	b580      	push	{r7, lr}
 8018cb6:	b086      	sub	sp, #24
 8018cb8:	af00      	add	r7, sp, #0
 8018cba:	607b      	str	r3, [r7, #4]
 8018cbc:	4603      	mov	r3, r0
 8018cbe:	73fb      	strb	r3, [r7, #15]
 8018cc0:	460b      	mov	r3, r1
 8018cc2:	81bb      	strh	r3, [r7, #12]
 8018cc4:	4613      	mov	r3, r2
 8018cc6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8018cc8:	89bb      	ldrh	r3, [r7, #12]
 8018cca:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8018ccc:	89ba      	ldrh	r2, [r7, #12]
 8018cce:	897b      	ldrh	r3, [r7, #10]
 8018cd0:	429a      	cmp	r2, r3
 8018cd2:	d221      	bcs.n	8018d18 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8018cd4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8018cd8:	f003 0302 	and.w	r3, r3, #2
 8018cdc:	2b00      	cmp	r3, #0
 8018cde:	d111      	bne.n	8018d04 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 8018ce0:	6a3b      	ldr	r3, [r7, #32]
 8018ce2:	7e9b      	ldrb	r3, [r3, #26]
 8018ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8018ce8:	2b00      	cmp	r3, #0
 8018cea:	d115      	bne.n	8018d18 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 8018cec:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8018cf0:	2b00      	cmp	r3, #0
 8018cf2:	d007      	beq.n	8018d04 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 8018cf4:	6a3b      	ldr	r3, [r7, #32]
 8018cf6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
         (!first_seg ||
 8018cf8:	2b00      	cmp	r3, #0
 8018cfa:	d103      	bne.n	8018d04 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 8018cfc:	6a3b      	ldr	r3, [r7, #32]
 8018cfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
          pcb->unsent != NULL ||
 8018d00:	2b00      	cmp	r3, #0
 8018d02:	d009      	beq.n	8018d18 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8018d04:	89bb      	ldrh	r3, [r7, #12]
 8018d06:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8018d0a:	f023 0203 	bic.w	r2, r3, #3
 8018d0e:	897b      	ldrh	r3, [r7, #10]
 8018d10:	4293      	cmp	r3, r2
 8018d12:	bf28      	it	cs
 8018d14:	4613      	movcs	r3, r2
 8018d16:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8018d18:	8af9      	ldrh	r1, [r7, #22]
 8018d1a:	7bfb      	ldrb	r3, [r7, #15]
 8018d1c:	2200      	movs	r2, #0
 8018d1e:	4618      	mov	r0, r3
 8018d20:	f7fb f85e 	bl	8013de0 <pbuf_alloc>
 8018d24:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018d26:	693b      	ldr	r3, [r7, #16]
 8018d28:	2b00      	cmp	r3, #0
 8018d2a:	d101      	bne.n	8018d30 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 8018d2c:	2300      	movs	r3, #0
 8018d2e:	e019      	b.n	8018d64 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8018d30:	693b      	ldr	r3, [r7, #16]
 8018d32:	681b      	ldr	r3, [r3, #0]
 8018d34:	2b00      	cmp	r3, #0
 8018d36:	d006      	beq.n	8018d46 <tcp_pbuf_prealloc+0x92>
 8018d38:	4b0c      	ldr	r3, [pc, #48]	@ (8018d6c <tcp_pbuf_prealloc+0xb8>)
 8018d3a:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8018d3e:	490c      	ldr	r1, [pc, #48]	@ (8018d70 <tcp_pbuf_prealloc+0xbc>)
 8018d40:	480c      	ldr	r0, [pc, #48]	@ (8018d74 <tcp_pbuf_prealloc+0xc0>)
 8018d42:	f007 fbad 	bl	80204a0 <iprintf>
  *oversize = p->len - length;
 8018d46:	693b      	ldr	r3, [r7, #16]
 8018d48:	895a      	ldrh	r2, [r3, #10]
 8018d4a:	89bb      	ldrh	r3, [r7, #12]
 8018d4c:	1ad3      	subs	r3, r2, r3
 8018d4e:	b29a      	uxth	r2, r3
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8018d54:	693b      	ldr	r3, [r7, #16]
 8018d56:	89ba      	ldrh	r2, [r7, #12]
 8018d58:	811a      	strh	r2, [r3, #8]
 8018d5a:	693b      	ldr	r3, [r7, #16]
 8018d5c:	891a      	ldrh	r2, [r3, #8]
 8018d5e:	693b      	ldr	r3, [r7, #16]
 8018d60:	815a      	strh	r2, [r3, #10]
  return p;
 8018d62:	693b      	ldr	r3, [r7, #16]
}
 8018d64:	4618      	mov	r0, r3
 8018d66:	3718      	adds	r7, #24
 8018d68:	46bd      	mov	sp, r7
 8018d6a:	bd80      	pop	{r7, pc}
 8018d6c:	08024e2c 	.word	0x08024e2c
 8018d70:	08024ed0 	.word	0x08024ed0
 8018d74:	08024e90 	.word	0x08024e90

08018d78 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8018d78:	b580      	push	{r7, lr}
 8018d7a:	b082      	sub	sp, #8
 8018d7c:	af00      	add	r7, sp, #0
 8018d7e:	6078      	str	r0, [r7, #4]
 8018d80:	460b      	mov	r3, r1
 8018d82:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	7d1b      	ldrb	r3, [r3, #20]
 8018d88:	2b04      	cmp	r3, #4
 8018d8a:	d00e      	beq.n	8018daa <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8018d90:	2b07      	cmp	r3, #7
 8018d92:	d00a      	beq.n	8018daa <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 8018d94:	687b      	ldr	r3, [r7, #4]
 8018d96:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8018d98:	2b02      	cmp	r3, #2
 8018d9a:	d006      	beq.n	8018daa <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8018da0:	2b03      	cmp	r3, #3
 8018da2:	d002      	beq.n	8018daa <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8018da4:	f06f 030a 	mvn.w	r3, #10
 8018da8:	e057      	b.n	8018e5a <tcp_write_checks+0xe2>
  } else if (len == 0) {
 8018daa:	887b      	ldrh	r3, [r7, #2]
 8018dac:	2b00      	cmp	r3, #0
 8018dae:	d101      	bne.n	8018db4 <tcp_write_checks+0x3c>
    return ERR_OK;
 8018db0:	2300      	movs	r3, #0
 8018db2:	e052      	b.n	8018e5a <tcp_write_checks+0xe2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8018dba:	887a      	ldrh	r2, [r7, #2]
 8018dbc:	429a      	cmp	r2, r3
 8018dbe:	d909      	bls.n	8018dd4 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 8018dc0:	687b      	ldr	r3, [r7, #4]
 8018dc2:	7e9b      	ldrb	r3, [r3, #26]
 8018dc4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8018dc8:	b2da      	uxtb	r2, r3
 8018dca:	687b      	ldr	r3, [r7, #4]
 8018dcc:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8018dce:	f04f 33ff 	mov.w	r3, #4294967295
 8018dd2:	e042      	b.n	8018e5a <tcp_write_checks+0xe2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8018dda:	2b08      	cmp	r3, #8
 8018ddc:	d806      	bhi.n	8018dec <tcp_write_checks+0x74>
 8018dde:	687b      	ldr	r3, [r7, #4]
 8018de0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8018de4:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8018de8:	4293      	cmp	r3, r2
 8018dea:	d911      	bls.n	8018e10 <tcp_write_checks+0x98>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 8018dec:	4b1d      	ldr	r3, [pc, #116]	@ (8018e64 <tcp_write_checks+0xec>)
 8018dee:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8018df2:	3301      	adds	r3, #1
 8018df4:	b29a      	uxth	r2, r3
 8018df6:	4b1b      	ldr	r3, [pc, #108]	@ (8018e64 <tcp_write_checks+0xec>)
 8018df8:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    pcb->flags |= TF_NAGLEMEMERR;
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	7e9b      	ldrb	r3, [r3, #26]
 8018e00:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8018e04:	b2da      	uxtb	r2, r3
 8018e06:	687b      	ldr	r3, [r7, #4]
 8018e08:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8018e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8018e0e:	e024      	b.n	8018e5a <tcp_write_checks+0xe2>
  }
  if (pcb->snd_queuelen != 0) {
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	d00f      	beq.n	8018e3a <tcp_write_checks+0xc2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	d11a      	bne.n	8018e58 <tcp_write_checks+0xe0>
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	d116      	bne.n	8018e58 <tcp_write_checks+0xe0>
 8018e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8018e68 <tcp_write_checks+0xf0>)
 8018e2c:	f240 1255 	movw	r2, #341	@ 0x155
 8018e30:	490e      	ldr	r1, [pc, #56]	@ (8018e6c <tcp_write_checks+0xf4>)
 8018e32:	480f      	ldr	r0, [pc, #60]	@ (8018e70 <tcp_write_checks+0xf8>)
 8018e34:	f007 fb34 	bl	80204a0 <iprintf>
 8018e38:	e00e      	b.n	8018e58 <tcp_write_checks+0xe0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018e3e:	2b00      	cmp	r3, #0
 8018e40:	d103      	bne.n	8018e4a <tcp_write_checks+0xd2>
 8018e42:	687b      	ldr	r3, [r7, #4]
 8018e44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	d006      	beq.n	8018e58 <tcp_write_checks+0xe0>
 8018e4a:	4b07      	ldr	r3, [pc, #28]	@ (8018e68 <tcp_write_checks+0xf0>)
 8018e4c:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8018e50:	4908      	ldr	r1, [pc, #32]	@ (8018e74 <tcp_write_checks+0xfc>)
 8018e52:	4807      	ldr	r0, [pc, #28]	@ (8018e70 <tcp_write_checks+0xf8>)
 8018e54:	f007 fb24 	bl	80204a0 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8018e58:	2300      	movs	r3, #0
}
 8018e5a:	4618      	mov	r0, r3
 8018e5c:	3708      	adds	r7, #8
 8018e5e:	46bd      	mov	sp, r7
 8018e60:	bd80      	pop	{r7, pc}
 8018e62:	bf00      	nop
 8018e64:	2000db84 	.word	0x2000db84
 8018e68:	08024e2c 	.word	0x08024e2c
 8018e6c:	08024ee4 	.word	0x08024ee4
 8018e70:	08024e90 	.word	0x08024e90
 8018e74:	08024f20 	.word	0x08024f20

08018e78 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8018e78:	b590      	push	{r4, r7, lr}
 8018e7a:	b09b      	sub	sp, #108	@ 0x6c
 8018e7c:	af04      	add	r7, sp, #16
 8018e7e:	60f8      	str	r0, [r7, #12]
 8018e80:	60b9      	str	r1, [r7, #8]
 8018e82:	4611      	mov	r1, r2
 8018e84:	461a      	mov	r2, r3
 8018e86:	460b      	mov	r3, r1
 8018e88:	80fb      	strh	r3, [r7, #6]
 8018e8a:	4613      	mov	r3, r2
 8018e8c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8018e8e:	2300      	movs	r3, #0
 8018e90:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8018e92:	2300      	movs	r3, #0
 8018e94:	653b      	str	r3, [r7, #80]	@ 0x50
 8018e96:	2300      	movs	r3, #0
 8018e98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8018e9a:	2300      	movs	r3, #0
 8018e9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018e9e:	2300      	movs	r3, #0
 8018ea0:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8018ea2:	2300      	movs	r3, #0
 8018ea4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 8018ea8:	2300      	movs	r3, #0
 8018eaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  u8_t optflags = 0;
 8018eae:	2300      	movs	r3, #0
 8018eb0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8018eb4:	2300      	movs	r3, #0
 8018eb6:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8018eb8:	2300      	movs	r3, #0
 8018eba:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8018ebc:	2300      	movs	r3, #0
 8018ebe:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8018ec0:	68fb      	ldr	r3, [r7, #12]
 8018ec2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8018ec6:	085b      	lsrs	r3, r3, #1
 8018ec8:	b29a      	uxth	r2, r3
 8018eca:	68fb      	ldr	r3, [r7, #12]
 8018ecc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018ece:	4293      	cmp	r3, r2
 8018ed0:	bf28      	it	cs
 8018ed2:	4613      	movcs	r3, r2
 8018ed4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8018ed6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018ed8:	2b00      	cmp	r3, #0
 8018eda:	d102      	bne.n	8018ee2 <tcp_write+0x6a>
 8018edc:	68fb      	ldr	r3, [r7, #12]
 8018ede:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018ee0:	e000      	b.n	8018ee4 <tcp_write+0x6c>
 8018ee2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018ee4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8018ee6:	68bb      	ldr	r3, [r7, #8]
 8018ee8:	2b00      	cmp	r3, #0
 8018eea:	d109      	bne.n	8018f00 <tcp_write+0x88>
 8018eec:	4b92      	ldr	r3, [pc, #584]	@ (8019138 <tcp_write+0x2c0>)
 8018eee:	f240 1291 	movw	r2, #401	@ 0x191
 8018ef2:	4992      	ldr	r1, [pc, #584]	@ (801913c <tcp_write+0x2c4>)
 8018ef4:	4892      	ldr	r0, [pc, #584]	@ (8019140 <tcp_write+0x2c8>)
 8018ef6:	f007 fad3 	bl	80204a0 <iprintf>
 8018efa:	f06f 030f 	mvn.w	r3, #15
 8018efe:	e312      	b.n	8019526 <tcp_write+0x6ae>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8018f00:	88fb      	ldrh	r3, [r7, #6]
 8018f02:	4619      	mov	r1, r3
 8018f04:	68f8      	ldr	r0, [r7, #12]
 8018f06:	f7ff ff37 	bl	8018d78 <tcp_write_checks>
 8018f0a:	4603      	mov	r3, r0
 8018f0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8018f10:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8018f14:	2b00      	cmp	r3, #0
 8018f16:	d002      	beq.n	8018f1e <tcp_write+0xa6>
    return err;
 8018f18:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8018f1c:	e303      	b.n	8019526 <tcp_write+0x6ae>
  }
  queuelen = pcb->snd_queuelen;
 8018f1e:	68fb      	ldr	r3, [r7, #12]
 8018f20:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8018f24:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8018f28:	68fb      	ldr	r3, [r7, #12]
 8018f2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018f2c:	2b00      	cmp	r3, #0
 8018f2e:	f000 80f4 	beq.w	801911a <tcp_write+0x2a2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018f32:	68fb      	ldr	r3, [r7, #12]
 8018f34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018f36:	653b      	str	r3, [r7, #80]	@ 0x50
 8018f38:	e002      	b.n	8018f40 <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 8018f3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018f3c:	681b      	ldr	r3, [r3, #0]
 8018f3e:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018f40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018f42:	681b      	ldr	r3, [r3, #0]
 8018f44:	2b00      	cmp	r3, #0
 8018f46:	d1f8      	bne.n	8018f3a <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8018f48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018f4a:	7a9b      	ldrb	r3, [r3, #10]
 8018f4c:	009b      	lsls	r3, r3, #2
 8018f4e:	b29b      	uxth	r3, r3
 8018f50:	f003 0304 	and.w	r3, r3, #4
 8018f54:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8018f56:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8018f58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018f5a:	891b      	ldrh	r3, [r3, #8]
 8018f5c:	4619      	mov	r1, r3
 8018f5e:	8c3b      	ldrh	r3, [r7, #32]
 8018f60:	440b      	add	r3, r1
 8018f62:	429a      	cmp	r2, r3
 8018f64:	da06      	bge.n	8018f74 <tcp_write+0xfc>
 8018f66:	4b74      	ldr	r3, [pc, #464]	@ (8019138 <tcp_write+0x2c0>)
 8018f68:	f240 12c7 	movw	r2, #455	@ 0x1c7
 8018f6c:	4975      	ldr	r1, [pc, #468]	@ (8019144 <tcp_write+0x2cc>)
 8018f6e:	4874      	ldr	r0, [pc, #464]	@ (8019140 <tcp_write+0x2c8>)
 8018f70:	f007 fa96 	bl	80204a0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8018f74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018f76:	891a      	ldrh	r2, [r3, #8]
 8018f78:	8c3b      	ldrh	r3, [r7, #32]
 8018f7a:	4413      	add	r3, r2
 8018f7c:	b29b      	uxth	r3, r3
 8018f7e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8018f80:	1ad3      	subs	r3, r2, r3
 8018f82:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8018f84:	68fb      	ldr	r3, [r7, #12]
 8018f86:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8018f8a:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8018f8c:	8a7b      	ldrh	r3, [r7, #18]
 8018f8e:	2b00      	cmp	r3, #0
 8018f90:	d026      	beq.n	8018fe0 <tcp_write+0x168>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8018f92:	8a7b      	ldrh	r3, [r7, #18]
 8018f94:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8018f96:	429a      	cmp	r2, r3
 8018f98:	d206      	bcs.n	8018fa8 <tcp_write+0x130>
 8018f9a:	4b67      	ldr	r3, [pc, #412]	@ (8019138 <tcp_write+0x2c0>)
 8018f9c:	f240 12d9 	movw	r2, #473	@ 0x1d9
 8018fa0:	4969      	ldr	r1, [pc, #420]	@ (8019148 <tcp_write+0x2d0>)
 8018fa2:	4867      	ldr	r0, [pc, #412]	@ (8019140 <tcp_write+0x2c8>)
 8018fa4:	f007 fa7c 	bl	80204a0 <iprintf>
      seg = last_unsent;
 8018fa8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018faa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8018fac:	8a7b      	ldrh	r3, [r7, #18]
 8018fae:	88fa      	ldrh	r2, [r7, #6]
 8018fb0:	4293      	cmp	r3, r2
 8018fb2:	bf28      	it	cs
 8018fb4:	4613      	movcs	r3, r2
 8018fb6:	b29b      	uxth	r3, r3
 8018fb8:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8018fba:	4293      	cmp	r3, r2
 8018fbc:	bf28      	it	cs
 8018fbe:	4613      	movcs	r3, r2
 8018fc0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8018fc2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018fc6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018fc8:	4413      	add	r3, r2
 8018fca:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8018fce:	8a7a      	ldrh	r2, [r7, #18]
 8018fd0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018fd2:	1ad3      	subs	r3, r2, r3
 8018fd4:	b29b      	uxth	r3, r3
 8018fd6:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8018fd8:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8018fda:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018fdc:	1ad3      	subs	r3, r2, r3
 8018fde:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8018fe0:	8a7b      	ldrh	r3, [r7, #18]
 8018fe2:	2b00      	cmp	r3, #0
 8018fe4:	d00b      	beq.n	8018ffe <tcp_write+0x186>
 8018fe6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018fea:	88fb      	ldrh	r3, [r7, #6]
 8018fec:	429a      	cmp	r2, r3
 8018fee:	d006      	beq.n	8018ffe <tcp_write+0x186>
 8018ff0:	4b51      	ldr	r3, [pc, #324]	@ (8019138 <tcp_write+0x2c0>)
 8018ff2:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8018ff6:	4955      	ldr	r1, [pc, #340]	@ (801914c <tcp_write+0x2d4>)
 8018ff8:	4851      	ldr	r0, [pc, #324]	@ (8019140 <tcp_write+0x2c8>)
 8018ffa:	f007 fa51 	bl	80204a0 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8018ffe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019002:	88fb      	ldrh	r3, [r7, #6]
 8019004:	429a      	cmp	r2, r3
 8019006:	f080 8169 	bcs.w	80192dc <tcp_write+0x464>
 801900a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801900c:	2b00      	cmp	r3, #0
 801900e:	f000 8165 	beq.w	80192dc <tcp_write+0x464>
 8019012:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019014:	891b      	ldrh	r3, [r3, #8]
 8019016:	2b00      	cmp	r3, #0
 8019018:	f000 8160 	beq.w	80192dc <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801901c:	88fa      	ldrh	r2, [r7, #6]
 801901e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019022:	1ad2      	subs	r2, r2, r3
 8019024:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019026:	4293      	cmp	r3, r2
 8019028:	bfa8      	it	ge
 801902a:	4613      	movge	r3, r2
 801902c:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801902e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019030:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8019032:	797b      	ldrb	r3, [r7, #5]
 8019034:	f003 0301 	and.w	r3, r3, #1
 8019038:	2b00      	cmp	r3, #0
 801903a:	d027      	beq.n	801908c <tcp_write+0x214>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801903c:	f107 0012 	add.w	r0, r7, #18
 8019040:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8019042:	8bf9      	ldrh	r1, [r7, #30]
 8019044:	2301      	movs	r3, #1
 8019046:	9302      	str	r3, [sp, #8]
 8019048:	797b      	ldrb	r3, [r7, #5]
 801904a:	9301      	str	r3, [sp, #4]
 801904c:	68fb      	ldr	r3, [r7, #12]
 801904e:	9300      	str	r3, [sp, #0]
 8019050:	4603      	mov	r3, r0
 8019052:	2004      	movs	r0, #4
 8019054:	f7ff fe2e 	bl	8018cb4 <tcp_pbuf_prealloc>
 8019058:	6578      	str	r0, [r7, #84]	@ 0x54
 801905a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801905c:	2b00      	cmp	r3, #0
 801905e:	f000 8228 	beq.w	80194b2 <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8019062:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019064:	6858      	ldr	r0, [r3, #4]
 8019066:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801906a:	68ba      	ldr	r2, [r7, #8]
 801906c:	4413      	add	r3, r2
 801906e:	8bfa      	ldrh	r2, [r7, #30]
 8019070:	4619      	mov	r1, r3
 8019072:	f007 fcaa 	bl	80209ca <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8019076:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8019078:	f7fb fabe 	bl	80145f8 <pbuf_clen>
 801907c:	4603      	mov	r3, r0
 801907e:	461a      	mov	r2, r3
 8019080:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019084:	4413      	add	r3, r2
 8019086:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 801908a:	e03f      	b.n	801910c <tcp_write+0x294>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801908c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801908e:	685b      	ldr	r3, [r3, #4]
 8019090:	637b      	str	r3, [r7, #52]	@ 0x34
 8019092:	e002      	b.n	801909a <tcp_write+0x222>
 8019094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019096:	681b      	ldr	r3, [r3, #0]
 8019098:	637b      	str	r3, [r7, #52]	@ 0x34
 801909a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801909c:	681b      	ldr	r3, [r3, #0]
 801909e:	2b00      	cmp	r3, #0
 80190a0:	d1f8      	bne.n	8019094 <tcp_write+0x21c>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80190a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80190a4:	7b1b      	ldrb	r3, [r3, #12]
 80190a6:	2b01      	cmp	r3, #1
 80190a8:	d115      	bne.n	80190d6 <tcp_write+0x25e>
 80190aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80190ac:	685b      	ldr	r3, [r3, #4]
 80190ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80190b0:	8952      	ldrh	r2, [r2, #10]
 80190b2:	4413      	add	r3, r2
 80190b4:	68ba      	ldr	r2, [r7, #8]
 80190b6:	429a      	cmp	r2, r3
 80190b8:	d10d      	bne.n	80190d6 <tcp_write+0x25e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80190ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80190be:	2b00      	cmp	r3, #0
 80190c0:	d006      	beq.n	80190d0 <tcp_write+0x258>
 80190c2:	4b1d      	ldr	r3, [pc, #116]	@ (8019138 <tcp_write+0x2c0>)
 80190c4:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 80190c8:	4921      	ldr	r1, [pc, #132]	@ (8019150 <tcp_write+0x2d8>)
 80190ca:	481d      	ldr	r0, [pc, #116]	@ (8019140 <tcp_write+0x2c8>)
 80190cc:	f007 f9e8 	bl	80204a0 <iprintf>
          extendlen = seglen;
 80190d0:	8bfb      	ldrh	r3, [r7, #30]
 80190d2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80190d4:	e01a      	b.n	801910c <tcp_write+0x294>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80190d6:	8bfb      	ldrh	r3, [r7, #30]
 80190d8:	2201      	movs	r2, #1
 80190da:	4619      	mov	r1, r3
 80190dc:	2004      	movs	r0, #4
 80190de:	f7fa fe7f 	bl	8013de0 <pbuf_alloc>
 80190e2:	6578      	str	r0, [r7, #84]	@ 0x54
 80190e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80190e6:	2b00      	cmp	r3, #0
 80190e8:	f000 81e5 	beq.w	80194b6 <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 80190ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80190f0:	68ba      	ldr	r2, [r7, #8]
 80190f2:	441a      	add	r2, r3
 80190f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80190f6:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80190f8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80190fa:	f7fb fa7d 	bl	80145f8 <pbuf_clen>
 80190fe:	4603      	mov	r3, r0
 8019100:	461a      	mov	r2, r3
 8019102:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019106:	4413      	add	r3, r2
 8019108:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801910c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019110:	8bfb      	ldrh	r3, [r7, #30]
 8019112:	4413      	add	r3, r2
 8019114:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8019118:	e0e0      	b.n	80192dc <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801911a:	68fb      	ldr	r3, [r7, #12]
 801911c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8019120:	2b00      	cmp	r3, #0
 8019122:	f000 80db 	beq.w	80192dc <tcp_write+0x464>
 8019126:	4b04      	ldr	r3, [pc, #16]	@ (8019138 <tcp_write+0x2c0>)
 8019128:	f44f 7209 	mov.w	r2, #548	@ 0x224
 801912c:	4909      	ldr	r1, [pc, #36]	@ (8019154 <tcp_write+0x2dc>)
 801912e:	4804      	ldr	r0, [pc, #16]	@ (8019140 <tcp_write+0x2c8>)
 8019130:	f007 f9b6 	bl	80204a0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8019134:	e0d2      	b.n	80192dc <tcp_write+0x464>
 8019136:	bf00      	nop
 8019138:	08024e2c 	.word	0x08024e2c
 801913c:	08024f54 	.word	0x08024f54
 8019140:	08024e90 	.word	0x08024e90
 8019144:	08024f88 	.word	0x08024f88
 8019148:	08024fa0 	.word	0x08024fa0
 801914c:	08024fc0 	.word	0x08024fc0
 8019150:	08024fe0 	.word	0x08024fe0
 8019154:	0802500c 	.word	0x0802500c
    struct pbuf *p;
    u16_t left = len - pos;
 8019158:	88fa      	ldrh	r2, [r7, #6]
 801915a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801915e:	1ad3      	subs	r3, r2, r3
 8019160:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8019162:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019166:	b29b      	uxth	r3, r3
 8019168:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801916a:	1ad3      	subs	r3, r2, r3
 801916c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801916e:	8b7a      	ldrh	r2, [r7, #26]
 8019170:	8bbb      	ldrh	r3, [r7, #28]
 8019172:	4293      	cmp	r3, r2
 8019174:	bf28      	it	cs
 8019176:	4613      	movcs	r3, r2
 8019178:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801917a:	797b      	ldrb	r3, [r7, #5]
 801917c:	f003 0301 	and.w	r3, r3, #1
 8019180:	2b00      	cmp	r3, #0
 8019182:	d036      	beq.n	80191f2 <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8019184:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019188:	b29a      	uxth	r2, r3
 801918a:	8b3b      	ldrh	r3, [r7, #24]
 801918c:	4413      	add	r3, r2
 801918e:	b299      	uxth	r1, r3
 8019190:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019192:	2b00      	cmp	r3, #0
 8019194:	bf0c      	ite	eq
 8019196:	2301      	moveq	r3, #1
 8019198:	2300      	movne	r3, #0
 801919a:	b2db      	uxtb	r3, r3
 801919c:	f107 0012 	add.w	r0, r7, #18
 80191a0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80191a2:	9302      	str	r3, [sp, #8]
 80191a4:	797b      	ldrb	r3, [r7, #5]
 80191a6:	9301      	str	r3, [sp, #4]
 80191a8:	68fb      	ldr	r3, [r7, #12]
 80191aa:	9300      	str	r3, [sp, #0]
 80191ac:	4603      	mov	r3, r0
 80191ae:	2000      	movs	r0, #0
 80191b0:	f7ff fd80 	bl	8018cb4 <tcp_pbuf_prealloc>
 80191b4:	6338      	str	r0, [r7, #48]	@ 0x30
 80191b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80191b8:	2b00      	cmp	r3, #0
 80191ba:	f000 817e 	beq.w	80194ba <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80191be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80191c0:	895b      	ldrh	r3, [r3, #10]
 80191c2:	8b3a      	ldrh	r2, [r7, #24]
 80191c4:	429a      	cmp	r2, r3
 80191c6:	d906      	bls.n	80191d6 <tcp_write+0x35e>
 80191c8:	4b8f      	ldr	r3, [pc, #572]	@ (8019408 <tcp_write+0x590>)
 80191ca:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80191ce:	498f      	ldr	r1, [pc, #572]	@ (801940c <tcp_write+0x594>)
 80191d0:	488f      	ldr	r0, [pc, #572]	@ (8019410 <tcp_write+0x598>)
 80191d2:	f007 f965 	bl	80204a0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 80191d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80191d8:	685a      	ldr	r2, [r3, #4]
 80191da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80191de:	18d0      	adds	r0, r2, r3
 80191e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80191e4:	68ba      	ldr	r2, [r7, #8]
 80191e6:	4413      	add	r3, r2
 80191e8:	8b3a      	ldrh	r2, [r7, #24]
 80191ea:	4619      	mov	r1, r3
 80191ec:	f007 fbed 	bl	80209ca <memcpy>
 80191f0:	e02e      	b.n	8019250 <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80191f2:	8a7b      	ldrh	r3, [r7, #18]
 80191f4:	2b00      	cmp	r3, #0
 80191f6:	d006      	beq.n	8019206 <tcp_write+0x38e>
 80191f8:	4b83      	ldr	r3, [pc, #524]	@ (8019408 <tcp_write+0x590>)
 80191fa:	f240 224b 	movw	r2, #587	@ 0x24b
 80191fe:	4985      	ldr	r1, [pc, #532]	@ (8019414 <tcp_write+0x59c>)
 8019200:	4883      	ldr	r0, [pc, #524]	@ (8019410 <tcp_write+0x598>)
 8019202:	f007 f94d 	bl	80204a0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8019206:	8b3b      	ldrh	r3, [r7, #24]
 8019208:	2201      	movs	r2, #1
 801920a:	4619      	mov	r1, r3
 801920c:	2000      	movs	r0, #0
 801920e:	f7fa fde7 	bl	8013de0 <pbuf_alloc>
 8019212:	6178      	str	r0, [r7, #20]
 8019214:	697b      	ldr	r3, [r7, #20]
 8019216:	2b00      	cmp	r3, #0
 8019218:	f000 8151 	beq.w	80194be <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 801921c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019220:	68ba      	ldr	r2, [r7, #8]
 8019222:	441a      	add	r2, r3
 8019224:	697b      	ldr	r3, [r7, #20]
 8019226:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8019228:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801922c:	b29b      	uxth	r3, r3
 801922e:	2200      	movs	r2, #0
 8019230:	4619      	mov	r1, r3
 8019232:	2000      	movs	r0, #0
 8019234:	f7fa fdd4 	bl	8013de0 <pbuf_alloc>
 8019238:	6338      	str	r0, [r7, #48]	@ 0x30
 801923a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801923c:	2b00      	cmp	r3, #0
 801923e:	d103      	bne.n	8019248 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8019240:	6978      	ldr	r0, [r7, #20]
 8019242:	f7fb f945 	bl	80144d0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8019246:	e13d      	b.n	80194c4 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8019248:	6979      	ldr	r1, [r7, #20]
 801924a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801924c:	f7fb fa0c 	bl	8014668 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8019250:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019252:	f7fb f9d1 	bl	80145f8 <pbuf_clen>
 8019256:	4603      	mov	r3, r0
 8019258:	461a      	mov	r2, r3
 801925a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801925e:	4413      	add	r3, r2
 8019260:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8019264:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019268:	2b09      	cmp	r3, #9
 801926a:	d805      	bhi.n	8019278 <tcp_write+0x400>
 801926c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019270:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8019274:	4293      	cmp	r3, r2
 8019276:	d903      	bls.n	8019280 <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8019278:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801927a:	f7fb f929 	bl	80144d0 <pbuf_free>
      goto memerr;
 801927e:	e121      	b.n	80194c4 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8019280:	68fb      	ldr	r3, [r7, #12]
 8019282:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8019284:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019288:	441a      	add	r2, r3
 801928a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801928e:	9300      	str	r3, [sp, #0]
 8019290:	4613      	mov	r3, r2
 8019292:	2200      	movs	r2, #0
 8019294:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8019296:	68f8      	ldr	r0, [r7, #12]
 8019298:	f7ff fc7c 	bl	8018b94 <tcp_create_segment>
 801929c:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801929e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80192a0:	2b00      	cmp	r3, #0
 80192a2:	f000 810e 	beq.w	80194c2 <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80192a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80192a8:	2b00      	cmp	r3, #0
 80192aa:	d102      	bne.n	80192b2 <tcp_write+0x43a>
      queue = seg;
 80192ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80192ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80192b0:	e00c      	b.n	80192cc <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80192b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80192b4:	2b00      	cmp	r3, #0
 80192b6:	d106      	bne.n	80192c6 <tcp_write+0x44e>
 80192b8:	4b53      	ldr	r3, [pc, #332]	@ (8019408 <tcp_write+0x590>)
 80192ba:	f240 2285 	movw	r2, #645	@ 0x285
 80192be:	4956      	ldr	r1, [pc, #344]	@ (8019418 <tcp_write+0x5a0>)
 80192c0:	4853      	ldr	r0, [pc, #332]	@ (8019410 <tcp_write+0x598>)
 80192c2:	f007 f8ed 	bl	80204a0 <iprintf>
      prev_seg->next = seg;
 80192c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80192c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80192ca:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80192cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80192ce:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80192d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80192d4:	8b3b      	ldrh	r3, [r7, #24]
 80192d6:	4413      	add	r3, r2
 80192d8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 80192dc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80192e0:	88fb      	ldrh	r3, [r7, #6]
 80192e2:	429a      	cmp	r2, r3
 80192e4:	f4ff af38 	bcc.w	8019158 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80192e8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	d02c      	beq.n	8019348 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80192ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80192f0:	685b      	ldr	r3, [r3, #4]
 80192f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80192f4:	e01e      	b.n	8019334 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 80192f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80192f8:	891a      	ldrh	r2, [r3, #8]
 80192fa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80192fc:	4413      	add	r3, r2
 80192fe:	b29a      	uxth	r2, r3
 8019300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019302:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8019304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019306:	681b      	ldr	r3, [r3, #0]
 8019308:	2b00      	cmp	r3, #0
 801930a:	d110      	bne.n	801932e <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801930c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801930e:	685b      	ldr	r3, [r3, #4]
 8019310:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019312:	8952      	ldrh	r2, [r2, #10]
 8019314:	4413      	add	r3, r2
 8019316:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8019318:	68b9      	ldr	r1, [r7, #8]
 801931a:	4618      	mov	r0, r3
 801931c:	f007 fb55 	bl	80209ca <memcpy>
        p->len += oversize_used;
 8019320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019322:	895a      	ldrh	r2, [r3, #10]
 8019324:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019326:	4413      	add	r3, r2
 8019328:	b29a      	uxth	r2, r3
 801932a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801932c:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801932e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019330:	681b      	ldr	r3, [r3, #0]
 8019332:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019336:	2b00      	cmp	r3, #0
 8019338:	d1dd      	bne.n	80192f6 <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 801933a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801933c:	891a      	ldrh	r2, [r3, #8]
 801933e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019340:	4413      	add	r3, r2
 8019342:	b29a      	uxth	r2, r3
 8019344:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019346:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8019348:	8a7a      	ldrh	r2, [r7, #18]
 801934a:	68fb      	ldr	r3, [r7, #12]
 801934c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8019350:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019352:	2b00      	cmp	r3, #0
 8019354:	d018      	beq.n	8019388 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8019356:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019358:	2b00      	cmp	r3, #0
 801935a:	d106      	bne.n	801936a <tcp_write+0x4f2>
 801935c:	4b2a      	ldr	r3, [pc, #168]	@ (8019408 <tcp_write+0x590>)
 801935e:	f240 22ba 	movw	r2, #698	@ 0x2ba
 8019362:	492e      	ldr	r1, [pc, #184]	@ (801941c <tcp_write+0x5a4>)
 8019364:	482a      	ldr	r0, [pc, #168]	@ (8019410 <tcp_write+0x598>)
 8019366:	f007 f89b 	bl	80204a0 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801936a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801936c:	685b      	ldr	r3, [r3, #4]
 801936e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8019370:	4618      	mov	r0, r3
 8019372:	f7fb f979 	bl	8014668 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8019376:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019378:	891a      	ldrh	r2, [r3, #8]
 801937a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801937c:	891b      	ldrh	r3, [r3, #8]
 801937e:	4413      	add	r3, r2
 8019380:	b29a      	uxth	r2, r3
 8019382:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019384:	811a      	strh	r2, [r3, #8]
 8019386:	e037      	b.n	80193f8 <tcp_write+0x580>
  } else if (extendlen > 0) {
 8019388:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801938a:	2b00      	cmp	r3, #0
 801938c:	d034      	beq.n	80193f8 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801938e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019390:	2b00      	cmp	r3, #0
 8019392:	d003      	beq.n	801939c <tcp_write+0x524>
 8019394:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019396:	685b      	ldr	r3, [r3, #4]
 8019398:	2b00      	cmp	r3, #0
 801939a:	d106      	bne.n	80193aa <tcp_write+0x532>
 801939c:	4b1a      	ldr	r3, [pc, #104]	@ (8019408 <tcp_write+0x590>)
 801939e:	f44f 7230 	mov.w	r2, #704	@ 0x2c0
 80193a2:	491f      	ldr	r1, [pc, #124]	@ (8019420 <tcp_write+0x5a8>)
 80193a4:	481a      	ldr	r0, [pc, #104]	@ (8019410 <tcp_write+0x598>)
 80193a6:	f007 f87b 	bl	80204a0 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80193aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80193ac:	685b      	ldr	r3, [r3, #4]
 80193ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80193b0:	e009      	b.n	80193c6 <tcp_write+0x54e>
      p->tot_len += extendlen;
 80193b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80193b4:	891a      	ldrh	r2, [r3, #8]
 80193b6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80193b8:	4413      	add	r3, r2
 80193ba:	b29a      	uxth	r2, r3
 80193bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80193be:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80193c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80193c2:	681b      	ldr	r3, [r3, #0]
 80193c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80193c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80193c8:	681b      	ldr	r3, [r3, #0]
 80193ca:	2b00      	cmp	r3, #0
 80193cc:	d1f1      	bne.n	80193b2 <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 80193ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80193d0:	891a      	ldrh	r2, [r3, #8]
 80193d2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80193d4:	4413      	add	r3, r2
 80193d6:	b29a      	uxth	r2, r3
 80193d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80193da:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80193dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80193de:	895a      	ldrh	r2, [r3, #10]
 80193e0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80193e2:	4413      	add	r3, r2
 80193e4:	b29a      	uxth	r2, r3
 80193e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80193e8:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80193ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80193ec:	891a      	ldrh	r2, [r3, #8]
 80193ee:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80193f0:	4413      	add	r3, r2
 80193f2:	b29a      	uxth	r2, r3
 80193f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80193f6:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80193f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80193fa:	2b00      	cmp	r3, #0
 80193fc:	d112      	bne.n	8019424 <tcp_write+0x5ac>
    pcb->unsent = queue;
 80193fe:	68fb      	ldr	r3, [r7, #12]
 8019400:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019402:	669a      	str	r2, [r3, #104]	@ 0x68
 8019404:	e011      	b.n	801942a <tcp_write+0x5b2>
 8019406:	bf00      	nop
 8019408:	08024e2c 	.word	0x08024e2c
 801940c:	0802503c 	.word	0x0802503c
 8019410:	08024e90 	.word	0x08024e90
 8019414:	0802507c 	.word	0x0802507c
 8019418:	0802508c 	.word	0x0802508c
 801941c:	080250a0 	.word	0x080250a0
 8019420:	080250d8 	.word	0x080250d8
  } else {
    last_unsent->next = queue;
 8019424:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019426:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019428:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801942a:	68fb      	ldr	r3, [r7, #12]
 801942c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801942e:	88fb      	ldrh	r3, [r7, #6]
 8019430:	441a      	add	r2, r3
 8019432:	68fb      	ldr	r3, [r7, #12]
 8019434:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_buf -= len;
 8019436:	68fb      	ldr	r3, [r7, #12]
 8019438:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801943c:	88fb      	ldrh	r3, [r7, #6]
 801943e:	1ad3      	subs	r3, r2, r3
 8019440:	b29a      	uxth	r2, r3
 8019442:	68fb      	ldr	r3, [r7, #12]
 8019444:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  pcb->snd_queuelen = queuelen;
 8019448:	68fb      	ldr	r3, [r7, #12]
 801944a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801944e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8019452:	68fb      	ldr	r3, [r7, #12]
 8019454:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8019458:	2b00      	cmp	r3, #0
 801945a:	d00e      	beq.n	801947a <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 801945c:	68fb      	ldr	r3, [r7, #12]
 801945e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019460:	2b00      	cmp	r3, #0
 8019462:	d10a      	bne.n	801947a <tcp_write+0x602>
 8019464:	68fb      	ldr	r3, [r7, #12]
 8019466:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019468:	2b00      	cmp	r3, #0
 801946a:	d106      	bne.n	801947a <tcp_write+0x602>
 801946c:	4b30      	ldr	r3, [pc, #192]	@ (8019530 <tcp_write+0x6b8>)
 801946e:	f44f 723b 	mov.w	r2, #748	@ 0x2ec
 8019472:	4930      	ldr	r1, [pc, #192]	@ (8019534 <tcp_write+0x6bc>)
 8019474:	4830      	ldr	r0, [pc, #192]	@ (8019538 <tcp_write+0x6c0>)
 8019476:	f007 f813 	bl	80204a0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 801947a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801947c:	2b00      	cmp	r3, #0
 801947e:	d016      	beq.n	80194ae <tcp_write+0x636>
 8019480:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019482:	68db      	ldr	r3, [r3, #12]
 8019484:	2b00      	cmp	r3, #0
 8019486:	d012      	beq.n	80194ae <tcp_write+0x636>
 8019488:	797b      	ldrb	r3, [r7, #5]
 801948a:	f003 0302 	and.w	r3, r3, #2
 801948e:	2b00      	cmp	r3, #0
 8019490:	d10d      	bne.n	80194ae <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8019492:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019494:	68db      	ldr	r3, [r3, #12]
 8019496:	899b      	ldrh	r3, [r3, #12]
 8019498:	b29c      	uxth	r4, r3
 801949a:	2008      	movs	r0, #8
 801949c:	f7f9 fdc0 	bl	8013020 <lwip_htons>
 80194a0:	4603      	mov	r3, r0
 80194a2:	461a      	mov	r2, r3
 80194a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80194a6:	68db      	ldr	r3, [r3, #12]
 80194a8:	4322      	orrs	r2, r4
 80194aa:	b292      	uxth	r2, r2
 80194ac:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80194ae:	2300      	movs	r3, #0
 80194b0:	e039      	b.n	8019526 <tcp_write+0x6ae>
          goto memerr;
 80194b2:	bf00      	nop
 80194b4:	e006      	b.n	80194c4 <tcp_write+0x64c>
            goto memerr;
 80194b6:	bf00      	nop
 80194b8:	e004      	b.n	80194c4 <tcp_write+0x64c>
        goto memerr;
 80194ba:	bf00      	nop
 80194bc:	e002      	b.n	80194c4 <tcp_write+0x64c>
        goto memerr;
 80194be:	bf00      	nop
 80194c0:	e000      	b.n	80194c4 <tcp_write+0x64c>
      goto memerr;
 80194c2:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 80194c4:	68fb      	ldr	r3, [r7, #12]
 80194c6:	7e9b      	ldrb	r3, [r3, #26]
 80194c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80194cc:	b2da      	uxtb	r2, r3
 80194ce:	68fb      	ldr	r3, [r7, #12]
 80194d0:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);
 80194d2:	4b1a      	ldr	r3, [pc, #104]	@ (801953c <tcp_write+0x6c4>)
 80194d4:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 80194d8:	3301      	adds	r3, #1
 80194da:	b29a      	uxth	r2, r3
 80194dc:	4b17      	ldr	r3, [pc, #92]	@ (801953c <tcp_write+0x6c4>)
 80194de:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

  if (concat_p != NULL) {
 80194e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80194e4:	2b00      	cmp	r3, #0
 80194e6:	d002      	beq.n	80194ee <tcp_write+0x676>
    pbuf_free(concat_p);
 80194e8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80194ea:	f7fa fff1 	bl	80144d0 <pbuf_free>
  }
  if (queue != NULL) {
 80194ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80194f0:	2b00      	cmp	r3, #0
 80194f2:	d002      	beq.n	80194fa <tcp_write+0x682>
    tcp_segs_free(queue);
 80194f4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80194f6:	f7fc fc0a 	bl	8015d0e <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80194fa:	68fb      	ldr	r3, [r7, #12]
 80194fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8019500:	2b00      	cmp	r3, #0
 8019502:	d00e      	beq.n	8019522 <tcp_write+0x6aa>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8019504:	68fb      	ldr	r3, [r7, #12]
 8019506:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019508:	2b00      	cmp	r3, #0
 801950a:	d10a      	bne.n	8019522 <tcp_write+0x6aa>
 801950c:	68fb      	ldr	r3, [r7, #12]
 801950e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019510:	2b00      	cmp	r3, #0
 8019512:	d106      	bne.n	8019522 <tcp_write+0x6aa>
 8019514:	4b06      	ldr	r3, [pc, #24]	@ (8019530 <tcp_write+0x6b8>)
 8019516:	f240 3201 	movw	r2, #769	@ 0x301
 801951a:	4906      	ldr	r1, [pc, #24]	@ (8019534 <tcp_write+0x6bc>)
 801951c:	4806      	ldr	r0, [pc, #24]	@ (8019538 <tcp_write+0x6c0>)
 801951e:	f006 ffbf 	bl	80204a0 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8019522:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019526:	4618      	mov	r0, r3
 8019528:	375c      	adds	r7, #92	@ 0x5c
 801952a:	46bd      	mov	sp, r7
 801952c:	bd90      	pop	{r4, r7, pc}
 801952e:	bf00      	nop
 8019530:	08024e2c 	.word	0x08024e2c
 8019534:	08025110 	.word	0x08025110
 8019538:	08024e90 	.word	0x08024e90
 801953c:	2000db84 	.word	0x2000db84

08019540 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8019540:	b580      	push	{r7, lr}
 8019542:	b08a      	sub	sp, #40	@ 0x28
 8019544:	af02      	add	r7, sp, #8
 8019546:	6078      	str	r0, [r7, #4]
 8019548:	460b      	mov	r3, r1
 801954a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801954c:	2300      	movs	r3, #0
 801954e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8019550:	2300      	movs	r3, #0
 8019552:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8019554:	78fb      	ldrb	r3, [r7, #3]
 8019556:	f003 0303 	and.w	r3, r3, #3
 801955a:	2b00      	cmp	r3, #0
 801955c:	d106      	bne.n	801956c <tcp_enqueue_flags+0x2c>
 801955e:	4b7b      	ldr	r3, [pc, #492]	@ (801974c <tcp_enqueue_flags+0x20c>)
 8019560:	f240 321a 	movw	r2, #794	@ 0x31a
 8019564:	497a      	ldr	r1, [pc, #488]	@ (8019750 <tcp_enqueue_flags+0x210>)
 8019566:	487b      	ldr	r0, [pc, #492]	@ (8019754 <tcp_enqueue_flags+0x214>)
 8019568:	f006 ff9a 	bl	80204a0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 801956c:	687b      	ldr	r3, [r7, #4]
 801956e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8019572:	2b08      	cmp	r3, #8
 8019574:	d806      	bhi.n	8019584 <tcp_enqueue_flags+0x44>
 8019576:	687b      	ldr	r3, [r7, #4]
 8019578:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801957c:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8019580:	4293      	cmp	r3, r2
 8019582:	d916      	bls.n	80195b2 <tcp_enqueue_flags+0x72>
      ((flags & TCP_FIN) == 0)) {
 8019584:	78fb      	ldrb	r3, [r7, #3]
 8019586:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 801958a:	2b00      	cmp	r3, #0
 801958c:	d111      	bne.n	80195b2 <tcp_enqueue_flags+0x72>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 801958e:	4b72      	ldr	r3, [pc, #456]	@ (8019758 <tcp_enqueue_flags+0x218>)
 8019590:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8019594:	3301      	adds	r3, #1
 8019596:	b29a      	uxth	r2, r3
 8019598:	4b6f      	ldr	r3, [pc, #444]	@ (8019758 <tcp_enqueue_flags+0x218>)
 801959a:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    pcb->flags |= TF_NAGLEMEMERR;
 801959e:	687b      	ldr	r3, [r7, #4]
 80195a0:	7e9b      	ldrb	r3, [r3, #26]
 80195a2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80195a6:	b2da      	uxtb	r2, r3
 80195a8:	687b      	ldr	r3, [r7, #4]
 80195aa:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 80195ac:	f04f 33ff 	mov.w	r3, #4294967295
 80195b0:	e0c7      	b.n	8019742 <tcp_enqueue_flags+0x202>
  }

  if (flags & TCP_SYN) {
 80195b2:	78fb      	ldrb	r3, [r7, #3]
 80195b4:	f003 0302 	and.w	r3, r3, #2
 80195b8:	2b00      	cmp	r3, #0
 80195ba:	d001      	beq.n	80195c0 <tcp_enqueue_flags+0x80>
    optflags = TF_SEG_OPTS_MSS;
 80195bc:	2301      	movs	r3, #1
 80195be:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80195c0:	7ffb      	ldrb	r3, [r7, #31]
 80195c2:	009b      	lsls	r3, r3, #2
 80195c4:	b2db      	uxtb	r3, r3
 80195c6:	f003 0304 	and.w	r3, r3, #4
 80195ca:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80195cc:	7dfb      	ldrb	r3, [r7, #23]
 80195ce:	b29b      	uxth	r3, r3
 80195d0:	2200      	movs	r2, #0
 80195d2:	4619      	mov	r1, r3
 80195d4:	2000      	movs	r0, #0
 80195d6:	f7fa fc03 	bl	8013de0 <pbuf_alloc>
 80195da:	6138      	str	r0, [r7, #16]
 80195dc:	693b      	ldr	r3, [r7, #16]
 80195de:	2b00      	cmp	r3, #0
 80195e0:	d111      	bne.n	8019606 <tcp_enqueue_flags+0xc6>
    pcb->flags |= TF_NAGLEMEMERR;
 80195e2:	687b      	ldr	r3, [r7, #4]
 80195e4:	7e9b      	ldrb	r3, [r3, #26]
 80195e6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80195ea:	b2da      	uxtb	r2, r3
 80195ec:	687b      	ldr	r3, [r7, #4]
 80195ee:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 80195f0:	4b59      	ldr	r3, [pc, #356]	@ (8019758 <tcp_enqueue_flags+0x218>)
 80195f2:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 80195f6:	3301      	adds	r3, #1
 80195f8:	b29a      	uxth	r2, r3
 80195fa:	4b57      	ldr	r3, [pc, #348]	@ (8019758 <tcp_enqueue_flags+0x218>)
 80195fc:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    return ERR_MEM;
 8019600:	f04f 33ff 	mov.w	r3, #4294967295
 8019604:	e09d      	b.n	8019742 <tcp_enqueue_flags+0x202>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8019606:	693b      	ldr	r3, [r7, #16]
 8019608:	895a      	ldrh	r2, [r3, #10]
 801960a:	7dfb      	ldrb	r3, [r7, #23]
 801960c:	b29b      	uxth	r3, r3
 801960e:	429a      	cmp	r2, r3
 8019610:	d206      	bcs.n	8019620 <tcp_enqueue_flags+0xe0>
 8019612:	4b4e      	ldr	r3, [pc, #312]	@ (801974c <tcp_enqueue_flags+0x20c>)
 8019614:	f44f 7250 	mov.w	r2, #832	@ 0x340
 8019618:	4950      	ldr	r1, [pc, #320]	@ (801975c <tcp_enqueue_flags+0x21c>)
 801961a:	484e      	ldr	r0, [pc, #312]	@ (8019754 <tcp_enqueue_flags+0x214>)
 801961c:	f006 ff40 	bl	80204a0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8019624:	78fa      	ldrb	r2, [r7, #3]
 8019626:	7ffb      	ldrb	r3, [r7, #31]
 8019628:	9300      	str	r3, [sp, #0]
 801962a:	460b      	mov	r3, r1
 801962c:	6939      	ldr	r1, [r7, #16]
 801962e:	6878      	ldr	r0, [r7, #4]
 8019630:	f7ff fab0 	bl	8018b94 <tcp_create_segment>
 8019634:	60f8      	str	r0, [r7, #12]
 8019636:	68fb      	ldr	r3, [r7, #12]
 8019638:	2b00      	cmp	r3, #0
 801963a:	d111      	bne.n	8019660 <tcp_enqueue_flags+0x120>
    pcb->flags |= TF_NAGLEMEMERR;
 801963c:	687b      	ldr	r3, [r7, #4]
 801963e:	7e9b      	ldrb	r3, [r3, #26]
 8019640:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8019644:	b2da      	uxtb	r2, r3
 8019646:	687b      	ldr	r3, [r7, #4]
 8019648:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 801964a:	4b43      	ldr	r3, [pc, #268]	@ (8019758 <tcp_enqueue_flags+0x218>)
 801964c:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8019650:	3301      	adds	r3, #1
 8019652:	b29a      	uxth	r2, r3
 8019654:	4b40      	ldr	r3, [pc, #256]	@ (8019758 <tcp_enqueue_flags+0x218>)
 8019656:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    return ERR_MEM;
 801965a:	f04f 33ff 	mov.w	r3, #4294967295
 801965e:	e070      	b.n	8019742 <tcp_enqueue_flags+0x202>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8019660:	68fb      	ldr	r3, [r7, #12]
 8019662:	68db      	ldr	r3, [r3, #12]
 8019664:	f003 0303 	and.w	r3, r3, #3
 8019668:	2b00      	cmp	r3, #0
 801966a:	d006      	beq.n	801967a <tcp_enqueue_flags+0x13a>
 801966c:	4b37      	ldr	r3, [pc, #220]	@ (801974c <tcp_enqueue_flags+0x20c>)
 801966e:	f240 3249 	movw	r2, #841	@ 0x349
 8019672:	493b      	ldr	r1, [pc, #236]	@ (8019760 <tcp_enqueue_flags+0x220>)
 8019674:	4837      	ldr	r0, [pc, #220]	@ (8019754 <tcp_enqueue_flags+0x214>)
 8019676:	f006 ff13 	bl	80204a0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801967a:	68fb      	ldr	r3, [r7, #12]
 801967c:	891b      	ldrh	r3, [r3, #8]
 801967e:	2b00      	cmp	r3, #0
 8019680:	d006      	beq.n	8019690 <tcp_enqueue_flags+0x150>
 8019682:	4b32      	ldr	r3, [pc, #200]	@ (801974c <tcp_enqueue_flags+0x20c>)
 8019684:	f240 324a 	movw	r2, #842	@ 0x34a
 8019688:	4936      	ldr	r1, [pc, #216]	@ (8019764 <tcp_enqueue_flags+0x224>)
 801968a:	4832      	ldr	r0, [pc, #200]	@ (8019754 <tcp_enqueue_flags+0x214>)
 801968c:	f006 ff08 	bl	80204a0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8019690:	687b      	ldr	r3, [r7, #4]
 8019692:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019694:	2b00      	cmp	r3, #0
 8019696:	d103      	bne.n	80196a0 <tcp_enqueue_flags+0x160>
    pcb->unsent = seg;
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	68fa      	ldr	r2, [r7, #12]
 801969c:	669a      	str	r2, [r3, #104]	@ 0x68
 801969e:	e00d      	b.n	80196bc <tcp_enqueue_flags+0x17c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80196a0:	687b      	ldr	r3, [r7, #4]
 80196a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80196a4:	61bb      	str	r3, [r7, #24]
 80196a6:	e002      	b.n	80196ae <tcp_enqueue_flags+0x16e>
 80196a8:	69bb      	ldr	r3, [r7, #24]
 80196aa:	681b      	ldr	r3, [r3, #0]
 80196ac:	61bb      	str	r3, [r7, #24]
 80196ae:	69bb      	ldr	r3, [r7, #24]
 80196b0:	681b      	ldr	r3, [r3, #0]
 80196b2:	2b00      	cmp	r3, #0
 80196b4:	d1f8      	bne.n	80196a8 <tcp_enqueue_flags+0x168>
    useg->next = seg;
 80196b6:	69bb      	ldr	r3, [r7, #24]
 80196b8:	68fa      	ldr	r2, [r7, #12]
 80196ba:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80196bc:	687b      	ldr	r3, [r7, #4]
 80196be:	2200      	movs	r2, #0
 80196c0:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80196c4:	78fb      	ldrb	r3, [r7, #3]
 80196c6:	f003 0302 	and.w	r3, r3, #2
 80196ca:	2b00      	cmp	r3, #0
 80196cc:	d104      	bne.n	80196d8 <tcp_enqueue_flags+0x198>
 80196ce:	78fb      	ldrb	r3, [r7, #3]
 80196d0:	f003 0301 	and.w	r3, r3, #1
 80196d4:	2b00      	cmp	r3, #0
 80196d6:	d004      	beq.n	80196e2 <tcp_enqueue_flags+0x1a2>
    pcb->snd_lbb++;
 80196d8:	687b      	ldr	r3, [r7, #4]
 80196da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80196dc:	1c5a      	adds	r2, r3, #1
 80196de:	687b      	ldr	r3, [r7, #4]
 80196e0:	659a      	str	r2, [r3, #88]	@ 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80196e2:	78fb      	ldrb	r3, [r7, #3]
 80196e4:	f003 0301 	and.w	r3, r3, #1
 80196e8:	2b00      	cmp	r3, #0
 80196ea:	d006      	beq.n	80196fa <tcp_enqueue_flags+0x1ba>
    pcb->flags |= TF_FIN;
 80196ec:	687b      	ldr	r3, [r7, #4]
 80196ee:	7e9b      	ldrb	r3, [r3, #26]
 80196f0:	f043 0320 	orr.w	r3, r3, #32
 80196f4:	b2da      	uxtb	r2, r3
 80196f6:	687b      	ldr	r3, [r7, #4]
 80196f8:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80196fa:	68fb      	ldr	r3, [r7, #12]
 80196fc:	685b      	ldr	r3, [r3, #4]
 80196fe:	4618      	mov	r0, r3
 8019700:	f7fa ff7a 	bl	80145f8 <pbuf_clen>
 8019704:	4603      	mov	r3, r0
 8019706:	461a      	mov	r2, r3
 8019708:	687b      	ldr	r3, [r7, #4]
 801970a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801970e:	4413      	add	r3, r2
 8019710:	b29a      	uxth	r2, r3
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801971e:	2b00      	cmp	r3, #0
 8019720:	d00e      	beq.n	8019740 <tcp_enqueue_flags+0x200>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8019722:	687b      	ldr	r3, [r7, #4]
 8019724:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019726:	2b00      	cmp	r3, #0
 8019728:	d10a      	bne.n	8019740 <tcp_enqueue_flags+0x200>
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801972e:	2b00      	cmp	r3, #0
 8019730:	d106      	bne.n	8019740 <tcp_enqueue_flags+0x200>
 8019732:	4b06      	ldr	r3, [pc, #24]	@ (801974c <tcp_enqueue_flags+0x20c>)
 8019734:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8019738:	490b      	ldr	r1, [pc, #44]	@ (8019768 <tcp_enqueue_flags+0x228>)
 801973a:	4806      	ldr	r0, [pc, #24]	@ (8019754 <tcp_enqueue_flags+0x214>)
 801973c:	f006 feb0 	bl	80204a0 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8019740:	2300      	movs	r3, #0
}
 8019742:	4618      	mov	r0, r3
 8019744:	3720      	adds	r7, #32
 8019746:	46bd      	mov	sp, r7
 8019748:	bd80      	pop	{r7, pc}
 801974a:	bf00      	nop
 801974c:	08024e2c 	.word	0x08024e2c
 8019750:	08025130 	.word	0x08025130
 8019754:	08024e90 	.word	0x08024e90
 8019758:	2000db84 	.word	0x2000db84
 801975c:	08025188 	.word	0x08025188
 8019760:	080251c4 	.word	0x080251c4
 8019764:	080251dc 	.word	0x080251dc
 8019768:	08025208 	.word	0x08025208

0801976c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801976c:	b590      	push	{r4, r7, lr}
 801976e:	b08b      	sub	sp, #44	@ 0x2c
 8019770:	af04      	add	r7, sp, #16
 8019772:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 8019774:	2300      	movs	r3, #0
 8019776:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8019778:	7dbb      	ldrb	r3, [r7, #22]
 801977a:	b29c      	uxth	r4, r3
 801977c:	687b      	ldr	r3, [r7, #4]
 801977e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019780:	4618      	mov	r0, r3
 8019782:	f7f9 fc5a 	bl	801303a <lwip_htonl>
 8019786:	4603      	mov	r3, r0
 8019788:	2200      	movs	r2, #0
 801978a:	4621      	mov	r1, r4
 801978c:	6878      	ldr	r0, [r7, #4]
 801978e:	f7ff f947 	bl	8018a20 <tcp_output_alloc_header>
 8019792:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019794:	693b      	ldr	r3, [r7, #16]
 8019796:	2b00      	cmp	r3, #0
 8019798:	d109      	bne.n	80197ae <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 801979a:	687b      	ldr	r3, [r7, #4]
 801979c:	7e9b      	ldrb	r3, [r3, #26]
 801979e:	f043 0303 	orr.w	r3, r3, #3
 80197a2:	b2da      	uxtb	r2, r3
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80197a8:	f06f 0301 	mvn.w	r3, #1
 80197ac:	e036      	b.n	801981c <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	3304      	adds	r3, #4
 80197b2:	4618      	mov	r0, r3
 80197b4:	f004 fbce 	bl	801df54 <ip4_route>
 80197b8:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 80197ba:	68fb      	ldr	r3, [r7, #12]
 80197bc:	2b00      	cmp	r3, #0
 80197be:	d102      	bne.n	80197c6 <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 80197c0:	23fc      	movs	r3, #252	@ 0xfc
 80197c2:	75fb      	strb	r3, [r7, #23]
 80197c4:	e012      	b.n	80197ec <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 80197c6:	6879      	ldr	r1, [r7, #4]
 80197c8:	687b      	ldr	r3, [r7, #4]
 80197ca:	1d18      	adds	r0, r3, #4
 80197cc:	687b      	ldr	r3, [r7, #4]
 80197ce:	7a9c      	ldrb	r4, [r3, #10]
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	7a5b      	ldrb	r3, [r3, #9]
 80197d4:	68fa      	ldr	r2, [r7, #12]
 80197d6:	9202      	str	r2, [sp, #8]
 80197d8:	2206      	movs	r2, #6
 80197da:	9201      	str	r2, [sp, #4]
 80197dc:	9300      	str	r3, [sp, #0]
 80197de:	4623      	mov	r3, r4
 80197e0:	4602      	mov	r2, r0
 80197e2:	6938      	ldr	r0, [r7, #16]
 80197e4:	f004 fe28 	bl	801e438 <ip4_output_if>
 80197e8:	4603      	mov	r3, r0
 80197ea:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 80197ec:	6938      	ldr	r0, [r7, #16]
 80197ee:	f7fa fe6f 	bl	80144d0 <pbuf_free>

  if (err != ERR_OK) {
 80197f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80197f6:	2b00      	cmp	r3, #0
 80197f8:	d007      	beq.n	801980a <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80197fa:	687b      	ldr	r3, [r7, #4]
 80197fc:	7e9b      	ldrb	r3, [r3, #26]
 80197fe:	f043 0303 	orr.w	r3, r3, #3
 8019802:	b2da      	uxtb	r2, r3
 8019804:	687b      	ldr	r3, [r7, #4]
 8019806:	769a      	strb	r2, [r3, #26]
 8019808:	e006      	b.n	8019818 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801980a:	687b      	ldr	r3, [r7, #4]
 801980c:	7e9b      	ldrb	r3, [r3, #26]
 801980e:	f023 0303 	bic.w	r3, r3, #3
 8019812:	b2da      	uxtb	r2, r3
 8019814:	687b      	ldr	r3, [r7, #4]
 8019816:	769a      	strb	r2, [r3, #26]
  }

  return err;
 8019818:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801981c:	4618      	mov	r0, r3
 801981e:	371c      	adds	r7, #28
 8019820:	46bd      	mov	sp, r7
 8019822:	bd90      	pop	{r4, r7, pc}

08019824 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8019824:	b5b0      	push	{r4, r5, r7, lr}
 8019826:	b08a      	sub	sp, #40	@ 0x28
 8019828:	af00      	add	r7, sp, #0
 801982a:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801982c:	687b      	ldr	r3, [r7, #4]
 801982e:	7d1b      	ldrb	r3, [r3, #20]
 8019830:	2b01      	cmp	r3, #1
 8019832:	d106      	bne.n	8019842 <tcp_output+0x1e>
 8019834:	4b99      	ldr	r3, [pc, #612]	@ (8019a9c <tcp_output+0x278>)
 8019836:	f44f 727b 	mov.w	r2, #1004	@ 0x3ec
 801983a:	4999      	ldr	r1, [pc, #612]	@ (8019aa0 <tcp_output+0x27c>)
 801983c:	4899      	ldr	r0, [pc, #612]	@ (8019aa4 <tcp_output+0x280>)
 801983e:	f006 fe2f 	bl	80204a0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8019842:	4b99      	ldr	r3, [pc, #612]	@ (8019aa8 <tcp_output+0x284>)
 8019844:	681b      	ldr	r3, [r3, #0]
 8019846:	687a      	ldr	r2, [r7, #4]
 8019848:	429a      	cmp	r2, r3
 801984a:	d101      	bne.n	8019850 <tcp_output+0x2c>
    return ERR_OK;
 801984c:	2300      	movs	r3, #0
 801984e:	e1cb      	b.n	8019be8 <tcp_output+0x3c4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8019850:	687b      	ldr	r3, [r7, #4]
 8019852:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8019856:	687b      	ldr	r3, [r7, #4]
 8019858:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801985c:	4293      	cmp	r3, r2
 801985e:	bf28      	it	cs
 8019860:	4613      	movcs	r3, r2
 8019862:	b29b      	uxth	r3, r3
 8019864:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8019866:	687b      	ldr	r3, [r7, #4]
 8019868:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801986a:	627b      	str	r3, [r7, #36]	@ 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	7e9b      	ldrb	r3, [r3, #26]
 8019870:	f003 0302 	and.w	r3, r3, #2
 8019874:	2b00      	cmp	r3, #0
 8019876:	d017      	beq.n	80198a8 <tcp_output+0x84>
 8019878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801987a:	2b00      	cmp	r3, #0
 801987c:	d00f      	beq.n	801989e <tcp_output+0x7a>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 801987e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019880:	68db      	ldr	r3, [r3, #12]
 8019882:	685b      	ldr	r3, [r3, #4]
 8019884:	4618      	mov	r0, r3
 8019886:	f7f9 fbd8 	bl	801303a <lwip_htonl>
 801988a:	4602      	mov	r2, r0
 801988c:	687b      	ldr	r3, [r7, #4]
 801988e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019890:	1ad3      	subs	r3, r2, r3
 8019892:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019894:	8912      	ldrh	r2, [r2, #8]
 8019896:	4413      	add	r3, r2
     (seg == NULL ||
 8019898:	69ba      	ldr	r2, [r7, #24]
 801989a:	429a      	cmp	r2, r3
 801989c:	d204      	bcs.n	80198a8 <tcp_output+0x84>
     return tcp_send_empty_ack(pcb);
 801989e:	6878      	ldr	r0, [r7, #4]
 80198a0:	f7ff ff64 	bl	801976c <tcp_send_empty_ack>
 80198a4:	4603      	mov	r3, r0
 80198a6:	e19f      	b.n	8019be8 <tcp_output+0x3c4>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80198ac:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80198ae:	6a3b      	ldr	r3, [r7, #32]
 80198b0:	2b00      	cmp	r3, #0
 80198b2:	d007      	beq.n	80198c4 <tcp_output+0xa0>
    for (; useg->next != NULL; useg = useg->next);
 80198b4:	e002      	b.n	80198bc <tcp_output+0x98>
 80198b6:	6a3b      	ldr	r3, [r7, #32]
 80198b8:	681b      	ldr	r3, [r3, #0]
 80198ba:	623b      	str	r3, [r7, #32]
 80198bc:	6a3b      	ldr	r3, [r7, #32]
 80198be:	681b      	ldr	r3, [r3, #0]
 80198c0:	2b00      	cmp	r3, #0
 80198c2:	d1f8      	bne.n	80198b6 <tcp_output+0x92>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80198c4:	687b      	ldr	r3, [r7, #4]
 80198c6:	3304      	adds	r3, #4
 80198c8:	4618      	mov	r0, r3
 80198ca:	f004 fb43 	bl	801df54 <ip4_route>
 80198ce:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80198d0:	697b      	ldr	r3, [r7, #20]
 80198d2:	2b00      	cmp	r3, #0
 80198d4:	d102      	bne.n	80198dc <tcp_output+0xb8>
    return ERR_RTE;
 80198d6:	f06f 0303 	mvn.w	r3, #3
 80198da:	e185      	b.n	8019be8 <tcp_output+0x3c4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80198dc:	687b      	ldr	r3, [r7, #4]
 80198de:	2b00      	cmp	r3, #0
 80198e0:	d003      	beq.n	80198ea <tcp_output+0xc6>
 80198e2:	687b      	ldr	r3, [r7, #4]
 80198e4:	681b      	ldr	r3, [r3, #0]
 80198e6:	2b00      	cmp	r3, #0
 80198e8:	d111      	bne.n	801990e <tcp_output+0xea>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80198ea:	697b      	ldr	r3, [r7, #20]
 80198ec:	2b00      	cmp	r3, #0
 80198ee:	d002      	beq.n	80198f6 <tcp_output+0xd2>
 80198f0:	697b      	ldr	r3, [r7, #20]
 80198f2:	3304      	adds	r3, #4
 80198f4:	e000      	b.n	80198f8 <tcp_output+0xd4>
 80198f6:	2300      	movs	r3, #0
 80198f8:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80198fa:	693b      	ldr	r3, [r7, #16]
 80198fc:	2b00      	cmp	r3, #0
 80198fe:	d102      	bne.n	8019906 <tcp_output+0xe2>
      return ERR_RTE;
 8019900:	f06f 0303 	mvn.w	r3, #3
 8019904:	e170      	b.n	8019be8 <tcp_output+0x3c4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8019906:	693b      	ldr	r3, [r7, #16]
 8019908:	681a      	ldr	r2, [r3, #0]
 801990a:	687b      	ldr	r3, [r7, #4]
 801990c:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 801990e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019910:	2b00      	cmp	r3, #0
 8019912:	f000 813f 	beq.w	8019b94 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8019916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019918:	68db      	ldr	r3, [r3, #12]
 801991a:	685b      	ldr	r3, [r3, #4]
 801991c:	4618      	mov	r0, r3
 801991e:	f7f9 fb8c 	bl	801303a <lwip_htonl>
 8019922:	4602      	mov	r2, r0
 8019924:	687b      	ldr	r3, [r7, #4]
 8019926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019928:	1ad3      	subs	r3, r2, r3
 801992a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801992c:	8912      	ldrh	r2, [r2, #8]
 801992e:	4413      	add	r3, r2
  if (seg != NULL &&
 8019930:	69ba      	ldr	r2, [r7, #24]
 8019932:	429a      	cmp	r2, r3
 8019934:	f080 812e 	bcs.w	8019b94 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8019938:	69bb      	ldr	r3, [r7, #24]
 801993a:	2b00      	cmp	r3, #0
 801993c:	f000 812a 	beq.w	8019b94 <tcp_output+0x370>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8019940:	687b      	ldr	r3, [r7, #4]
 8019942:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8019946:	461a      	mov	r2, r3
 8019948:	69bb      	ldr	r3, [r7, #24]
 801994a:	4293      	cmp	r3, r2
 801994c:	f040 8122 	bne.w	8019b94 <tcp_output+0x370>
 8019950:	687b      	ldr	r3, [r7, #4]
 8019952:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019954:	2b00      	cmp	r3, #0
 8019956:	f040 811d 	bne.w	8019b94 <tcp_output+0x370>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 801995a:	687b      	ldr	r3, [r7, #4]
 801995c:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8019960:	2b00      	cmp	r3, #0
 8019962:	f040 812c 	bne.w	8019bbe <tcp_output+0x39a>
      pcb->persist_cnt = 0;
 8019966:	687b      	ldr	r3, [r7, #4]
 8019968:	2200      	movs	r2, #0
 801996a:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
      pcb->persist_backoff = 1;
 801996e:	687b      	ldr	r3, [r7, #4]
 8019970:	2201      	movs	r2, #1
 8019972:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
    }
    goto output_done;
 8019976:	e122      	b.n	8019bbe <tcp_output+0x39a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8019978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801997a:	68db      	ldr	r3, [r3, #12]
 801997c:	899b      	ldrh	r3, [r3, #12]
 801997e:	b29b      	uxth	r3, r3
 8019980:	4618      	mov	r0, r3
 8019982:	f7f9 fb4d 	bl	8013020 <lwip_htons>
 8019986:	4603      	mov	r3, r0
 8019988:	f003 0304 	and.w	r3, r3, #4
 801998c:	2b00      	cmp	r3, #0
 801998e:	d006      	beq.n	801999e <tcp_output+0x17a>
 8019990:	4b42      	ldr	r3, [pc, #264]	@ (8019a9c <tcp_output+0x278>)
 8019992:	f240 4245 	movw	r2, #1093	@ 0x445
 8019996:	4945      	ldr	r1, [pc, #276]	@ (8019aac <tcp_output+0x288>)
 8019998:	4842      	ldr	r0, [pc, #264]	@ (8019aa4 <tcp_output+0x280>)
 801999a:	f006 fd81 	bl	80204a0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801999e:	687b      	ldr	r3, [r7, #4]
 80199a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80199a2:	2b00      	cmp	r3, #0
 80199a4:	d01f      	beq.n	80199e6 <tcp_output+0x1c2>
 80199a6:	687b      	ldr	r3, [r7, #4]
 80199a8:	7e9b      	ldrb	r3, [r3, #26]
 80199aa:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80199ae:	2b00      	cmp	r3, #0
 80199b0:	d119      	bne.n	80199e6 <tcp_output+0x1c2>
 80199b2:	687b      	ldr	r3, [r7, #4]
 80199b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80199b6:	2b00      	cmp	r3, #0
 80199b8:	d00b      	beq.n	80199d2 <tcp_output+0x1ae>
 80199ba:	687b      	ldr	r3, [r7, #4]
 80199bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80199be:	681b      	ldr	r3, [r3, #0]
 80199c0:	2b00      	cmp	r3, #0
 80199c2:	d110      	bne.n	80199e6 <tcp_output+0x1c2>
 80199c4:	687b      	ldr	r3, [r7, #4]
 80199c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80199c8:	891a      	ldrh	r2, [r3, #8]
 80199ca:	687b      	ldr	r3, [r7, #4]
 80199cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80199ce:	429a      	cmp	r2, r3
 80199d0:	d209      	bcs.n	80199e6 <tcp_output+0x1c2>
 80199d2:	687b      	ldr	r3, [r7, #4]
 80199d4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80199d8:	2b00      	cmp	r3, #0
 80199da:	d004      	beq.n	80199e6 <tcp_output+0x1c2>
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80199e2:	2b08      	cmp	r3, #8
 80199e4:	d901      	bls.n	80199ea <tcp_output+0x1c6>
 80199e6:	2301      	movs	r3, #1
 80199e8:	e000      	b.n	80199ec <tcp_output+0x1c8>
 80199ea:	2300      	movs	r3, #0
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	d106      	bne.n	80199fe <tcp_output+0x1da>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80199f0:	687b      	ldr	r3, [r7, #4]
 80199f2:	7e9b      	ldrb	r3, [r3, #26]
 80199f4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80199f8:	2b00      	cmp	r3, #0
 80199fa:	f000 80e2 	beq.w	8019bc2 <tcp_output+0x39e>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80199fe:	687b      	ldr	r3, [r7, #4]
 8019a00:	7d1b      	ldrb	r3, [r3, #20]
 8019a02:	2b02      	cmp	r3, #2
 8019a04:	d00d      	beq.n	8019a22 <tcp_output+0x1fe>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8019a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a08:	68db      	ldr	r3, [r3, #12]
 8019a0a:	899b      	ldrh	r3, [r3, #12]
 8019a0c:	b29c      	uxth	r4, r3
 8019a0e:	2010      	movs	r0, #16
 8019a10:	f7f9 fb06 	bl	8013020 <lwip_htons>
 8019a14:	4603      	mov	r3, r0
 8019a16:	461a      	mov	r2, r3
 8019a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a1a:	68db      	ldr	r3, [r3, #12]
 8019a1c:	4322      	orrs	r2, r4
 8019a1e:	b292      	uxth	r2, r2
 8019a20:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 8019a22:	697a      	ldr	r2, [r7, #20]
 8019a24:	6879      	ldr	r1, [r7, #4]
 8019a26:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019a28:	f000 f8e2 	bl	8019bf0 <tcp_output_segment>
 8019a2c:	4603      	mov	r3, r0
 8019a2e:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8019a30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019a34:	2b00      	cmp	r3, #0
 8019a36:	d009      	beq.n	8019a4c <tcp_output+0x228>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 8019a38:	687b      	ldr	r3, [r7, #4]
 8019a3a:	7e9b      	ldrb	r3, [r3, #26]
 8019a3c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8019a40:	b2da      	uxtb	r2, r3
 8019a42:	687b      	ldr	r3, [r7, #4]
 8019a44:	769a      	strb	r2, [r3, #26]
      return err;
 8019a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019a4a:	e0cd      	b.n	8019be8 <tcp_output+0x3c4>
    }
    pcb->unsent = seg->next;
 8019a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a4e:	681a      	ldr	r2, [r3, #0]
 8019a50:	687b      	ldr	r3, [r7, #4]
 8019a52:	669a      	str	r2, [r3, #104]	@ 0x68
    if (pcb->state != SYN_SENT) {
 8019a54:	687b      	ldr	r3, [r7, #4]
 8019a56:	7d1b      	ldrb	r3, [r3, #20]
 8019a58:	2b02      	cmp	r3, #2
 8019a5a:	d006      	beq.n	8019a6a <tcp_output+0x246>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8019a5c:	687b      	ldr	r3, [r7, #4]
 8019a5e:	7e9b      	ldrb	r3, [r3, #26]
 8019a60:	f023 0303 	bic.w	r3, r3, #3
 8019a64:	b2da      	uxtb	r2, r3
 8019a66:	687b      	ldr	r3, [r7, #4]
 8019a68:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8019a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a6c:	68db      	ldr	r3, [r3, #12]
 8019a6e:	685b      	ldr	r3, [r3, #4]
 8019a70:	4618      	mov	r0, r3
 8019a72:	f7f9 fae2 	bl	801303a <lwip_htonl>
 8019a76:	4604      	mov	r4, r0
 8019a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a7a:	891b      	ldrh	r3, [r3, #8]
 8019a7c:	461d      	mov	r5, r3
 8019a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a80:	68db      	ldr	r3, [r3, #12]
 8019a82:	899b      	ldrh	r3, [r3, #12]
 8019a84:	b29b      	uxth	r3, r3
 8019a86:	4618      	mov	r0, r3
 8019a88:	f7f9 faca 	bl	8013020 <lwip_htons>
 8019a8c:	4603      	mov	r3, r0
 8019a8e:	f003 0303 	and.w	r3, r3, #3
 8019a92:	2b00      	cmp	r3, #0
 8019a94:	d00c      	beq.n	8019ab0 <tcp_output+0x28c>
 8019a96:	2301      	movs	r3, #1
 8019a98:	e00b      	b.n	8019ab2 <tcp_output+0x28e>
 8019a9a:	bf00      	nop
 8019a9c:	08024e2c 	.word	0x08024e2c
 8019aa0:	08025230 	.word	0x08025230
 8019aa4:	08024e90 	.word	0x08024e90
 8019aa8:	2000dd68 	.word	0x2000dd68
 8019aac:	08025258 	.word	0x08025258
 8019ab0:	2300      	movs	r3, #0
 8019ab2:	442b      	add	r3, r5
 8019ab4:	4423      	add	r3, r4
 8019ab6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8019ab8:	687b      	ldr	r3, [r7, #4]
 8019aba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8019abc:	68bb      	ldr	r3, [r7, #8]
 8019abe:	1ad3      	subs	r3, r2, r3
 8019ac0:	2b00      	cmp	r3, #0
 8019ac2:	da02      	bge.n	8019aca <tcp_output+0x2a6>
      pcb->snd_nxt = snd_nxt;
 8019ac4:	687b      	ldr	r3, [r7, #4]
 8019ac6:	68ba      	ldr	r2, [r7, #8]
 8019ac8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8019aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019acc:	891b      	ldrh	r3, [r3, #8]
 8019ace:	461c      	mov	r4, r3
 8019ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ad2:	68db      	ldr	r3, [r3, #12]
 8019ad4:	899b      	ldrh	r3, [r3, #12]
 8019ad6:	b29b      	uxth	r3, r3
 8019ad8:	4618      	mov	r0, r3
 8019ada:	f7f9 faa1 	bl	8013020 <lwip_htons>
 8019ade:	4603      	mov	r3, r0
 8019ae0:	f003 0303 	and.w	r3, r3, #3
 8019ae4:	2b00      	cmp	r3, #0
 8019ae6:	d001      	beq.n	8019aec <tcp_output+0x2c8>
 8019ae8:	2301      	movs	r3, #1
 8019aea:	e000      	b.n	8019aee <tcp_output+0x2ca>
 8019aec:	2300      	movs	r3, #0
 8019aee:	4423      	add	r3, r4
 8019af0:	2b00      	cmp	r3, #0
 8019af2:	d049      	beq.n	8019b88 <tcp_output+0x364>
      seg->next = NULL;
 8019af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019af6:	2200      	movs	r2, #0
 8019af8:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8019afa:	687b      	ldr	r3, [r7, #4]
 8019afc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019afe:	2b00      	cmp	r3, #0
 8019b00:	d105      	bne.n	8019b0e <tcp_output+0x2ea>
        pcb->unacked = seg;
 8019b02:	687b      	ldr	r3, [r7, #4]
 8019b04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019b06:	66da      	str	r2, [r3, #108]	@ 0x6c
        useg = seg;
 8019b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b0a:	623b      	str	r3, [r7, #32]
 8019b0c:	e03f      	b.n	8019b8e <tcp_output+0x36a>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8019b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b10:	68db      	ldr	r3, [r3, #12]
 8019b12:	685b      	ldr	r3, [r3, #4]
 8019b14:	4618      	mov	r0, r3
 8019b16:	f7f9 fa90 	bl	801303a <lwip_htonl>
 8019b1a:	4604      	mov	r4, r0
 8019b1c:	6a3b      	ldr	r3, [r7, #32]
 8019b1e:	68db      	ldr	r3, [r3, #12]
 8019b20:	685b      	ldr	r3, [r3, #4]
 8019b22:	4618      	mov	r0, r3
 8019b24:	f7f9 fa89 	bl	801303a <lwip_htonl>
 8019b28:	4603      	mov	r3, r0
 8019b2a:	1ae3      	subs	r3, r4, r3
 8019b2c:	2b00      	cmp	r3, #0
 8019b2e:	da24      	bge.n	8019b7a <tcp_output+0x356>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8019b30:	687b      	ldr	r3, [r7, #4]
 8019b32:	336c      	adds	r3, #108	@ 0x6c
 8019b34:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8019b36:	e002      	b.n	8019b3e <tcp_output+0x31a>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8019b38:	69fb      	ldr	r3, [r7, #28]
 8019b3a:	681b      	ldr	r3, [r3, #0]
 8019b3c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8019b3e:	69fb      	ldr	r3, [r7, #28]
 8019b40:	681b      	ldr	r3, [r3, #0]
 8019b42:	2b00      	cmp	r3, #0
 8019b44:	d011      	beq.n	8019b6a <tcp_output+0x346>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8019b46:	69fb      	ldr	r3, [r7, #28]
 8019b48:	681b      	ldr	r3, [r3, #0]
 8019b4a:	68db      	ldr	r3, [r3, #12]
 8019b4c:	685b      	ldr	r3, [r3, #4]
 8019b4e:	4618      	mov	r0, r3
 8019b50:	f7f9 fa73 	bl	801303a <lwip_htonl>
 8019b54:	4604      	mov	r4, r0
 8019b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b58:	68db      	ldr	r3, [r3, #12]
 8019b5a:	685b      	ldr	r3, [r3, #4]
 8019b5c:	4618      	mov	r0, r3
 8019b5e:	f7f9 fa6c 	bl	801303a <lwip_htonl>
 8019b62:	4603      	mov	r3, r0
 8019b64:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8019b66:	2b00      	cmp	r3, #0
 8019b68:	dbe6      	blt.n	8019b38 <tcp_output+0x314>
          }
          seg->next = (*cur_seg);
 8019b6a:	69fb      	ldr	r3, [r7, #28]
 8019b6c:	681a      	ldr	r2, [r3, #0]
 8019b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b70:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8019b72:	69fb      	ldr	r3, [r7, #28]
 8019b74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019b76:	601a      	str	r2, [r3, #0]
 8019b78:	e009      	b.n	8019b8e <tcp_output+0x36a>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8019b7a:	6a3b      	ldr	r3, [r7, #32]
 8019b7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019b7e:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8019b80:	6a3b      	ldr	r3, [r7, #32]
 8019b82:	681b      	ldr	r3, [r3, #0]
 8019b84:	623b      	str	r3, [r7, #32]
 8019b86:	e002      	b.n	8019b8e <tcp_output+0x36a>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8019b88:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019b8a:	f7fc f8d5 	bl	8015d38 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8019b8e:	687b      	ldr	r3, [r7, #4]
 8019b90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019b92:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8019b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b96:	2b00      	cmp	r3, #0
 8019b98:	d015      	beq.n	8019bc6 <tcp_output+0x3a2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8019b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b9c:	68db      	ldr	r3, [r3, #12]
 8019b9e:	685b      	ldr	r3, [r3, #4]
 8019ba0:	4618      	mov	r0, r3
 8019ba2:	f7f9 fa4a 	bl	801303a <lwip_htonl>
 8019ba6:	4602      	mov	r2, r0
 8019ba8:	687b      	ldr	r3, [r7, #4]
 8019baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019bac:	1ad3      	subs	r3, r2, r3
 8019bae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019bb0:	8912      	ldrh	r2, [r2, #8]
 8019bb2:	4413      	add	r3, r2
  while (seg != NULL &&
 8019bb4:	69ba      	ldr	r2, [r7, #24]
 8019bb6:	429a      	cmp	r2, r3
 8019bb8:	f4bf aede 	bcs.w	8019978 <tcp_output+0x154>
  }
output_done:
 8019bbc:	e003      	b.n	8019bc6 <tcp_output+0x3a2>
    goto output_done;
 8019bbe:	bf00      	nop
 8019bc0:	e002      	b.n	8019bc8 <tcp_output+0x3a4>
      break;
 8019bc2:	bf00      	nop
 8019bc4:	e000      	b.n	8019bc8 <tcp_output+0x3a4>
output_done:
 8019bc6:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8019bc8:	687b      	ldr	r3, [r7, #4]
 8019bca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019bcc:	2b00      	cmp	r3, #0
 8019bce:	d103      	bne.n	8019bd8 <tcp_output+0x3b4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8019bd0:	687b      	ldr	r3, [r7, #4]
 8019bd2:	2200      	movs	r2, #0
 8019bd4:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	7e9b      	ldrb	r3, [r3, #26]
 8019bdc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8019be0:	b2da      	uxtb	r2, r3
 8019be2:	687b      	ldr	r3, [r7, #4]
 8019be4:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 8019be6:	2300      	movs	r3, #0
}
 8019be8:	4618      	mov	r0, r3
 8019bea:	3728      	adds	r7, #40	@ 0x28
 8019bec:	46bd      	mov	sp, r7
 8019bee:	bdb0      	pop	{r4, r5, r7, pc}

08019bf0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8019bf0:	b5b0      	push	{r4, r5, r7, lr}
 8019bf2:	b08c      	sub	sp, #48	@ 0x30
 8019bf4:	af04      	add	r7, sp, #16
 8019bf6:	60f8      	str	r0, [r7, #12]
 8019bf8:	60b9      	str	r1, [r7, #8]
 8019bfa:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8019bfc:	68fb      	ldr	r3, [r7, #12]
 8019bfe:	685b      	ldr	r3, [r3, #4]
 8019c00:	89db      	ldrh	r3, [r3, #14]
 8019c02:	2b01      	cmp	r3, #1
 8019c04:	d001      	beq.n	8019c0a <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 8019c06:	2300      	movs	r3, #0
 8019c08:	e09c      	b.n	8019d44 <tcp_output_segment+0x154>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8019c0a:	68bb      	ldr	r3, [r7, #8]
 8019c0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019c0e:	68fb      	ldr	r3, [r7, #12]
 8019c10:	68dc      	ldr	r4, [r3, #12]
 8019c12:	4610      	mov	r0, r2
 8019c14:	f7f9 fa11 	bl	801303a <lwip_htonl>
 8019c18:	4603      	mov	r3, r0
 8019c1a:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8019c1c:	68bb      	ldr	r3, [r7, #8]
 8019c1e:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8019c20:	68fb      	ldr	r3, [r7, #12]
 8019c22:	68dc      	ldr	r4, [r3, #12]
 8019c24:	4610      	mov	r0, r2
 8019c26:	f7f9 f9fb 	bl	8013020 <lwip_htons>
 8019c2a:	4603      	mov	r3, r0
 8019c2c:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8019c2e:	68bb      	ldr	r3, [r7, #8]
 8019c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019c32:	68ba      	ldr	r2, [r7, #8]
 8019c34:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8019c36:	441a      	add	r2, r3
 8019c38:	68bb      	ldr	r3, [r7, #8]
 8019c3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8019c3c:	68fb      	ldr	r3, [r7, #12]
 8019c3e:	68db      	ldr	r3, [r3, #12]
 8019c40:	3314      	adds	r3, #20
 8019c42:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8019c44:	68fb      	ldr	r3, [r7, #12]
 8019c46:	7a9b      	ldrb	r3, [r3, #10]
 8019c48:	f003 0301 	and.w	r3, r3, #1
 8019c4c:	2b00      	cmp	r3, #0
 8019c4e:	d014      	beq.n	8019c7a <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8019c50:	68bb      	ldr	r3, [r7, #8]
 8019c52:	3304      	adds	r3, #4
 8019c54:	4619      	mov	r1, r3
 8019c56:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8019c5a:	f7fc fbc9 	bl	80163f0 <tcp_eff_send_mss_impl>
 8019c5e:	4603      	mov	r3, r0
 8019c60:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8019c62:	8b7b      	ldrh	r3, [r7, #26]
 8019c64:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8019c68:	4618      	mov	r0, r3
 8019c6a:	f7f9 f9e6 	bl	801303a <lwip_htonl>
 8019c6e:	4602      	mov	r2, r0
 8019c70:	69fb      	ldr	r3, [r7, #28]
 8019c72:	601a      	str	r2, [r3, #0]
    opts += 1;
 8019c74:	69fb      	ldr	r3, [r7, #28]
 8019c76:	3304      	adds	r3, #4
 8019c78:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8019c7a:	68bb      	ldr	r3, [r7, #8]
 8019c7c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8019c80:	2b00      	cmp	r3, #0
 8019c82:	da02      	bge.n	8019c8a <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 8019c84:	68bb      	ldr	r3, [r7, #8]
 8019c86:	2200      	movs	r2, #0
 8019c88:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8019c8a:	68bb      	ldr	r3, [r7, #8]
 8019c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019c8e:	2b00      	cmp	r3, #0
 8019c90:	d10c      	bne.n	8019cac <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 8019c92:	4b2e      	ldr	r3, [pc, #184]	@ (8019d4c <tcp_output_segment+0x15c>)
 8019c94:	681a      	ldr	r2, [r3, #0]
 8019c96:	68bb      	ldr	r3, [r7, #8]
 8019c98:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8019c9a:	68fb      	ldr	r3, [r7, #12]
 8019c9c:	68db      	ldr	r3, [r3, #12]
 8019c9e:	685b      	ldr	r3, [r3, #4]
 8019ca0:	4618      	mov	r0, r3
 8019ca2:	f7f9 f9ca 	bl	801303a <lwip_htonl>
 8019ca6:	4602      	mov	r2, r0
 8019ca8:	68bb      	ldr	r3, [r7, #8]
 8019caa:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8019cac:	68fb      	ldr	r3, [r7, #12]
 8019cae:	68da      	ldr	r2, [r3, #12]
 8019cb0:	68fb      	ldr	r3, [r7, #12]
 8019cb2:	685b      	ldr	r3, [r3, #4]
 8019cb4:	685b      	ldr	r3, [r3, #4]
 8019cb6:	1ad3      	subs	r3, r2, r3
 8019cb8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
 8019cba:	8b3b      	ldrh	r3, [r7, #24]
 8019cbc:	2b00      	cmp	r3, #0
 8019cbe:	d106      	bne.n	8019cce <tcp_output_segment+0xde>
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
 8019cc0:	4b23      	ldr	r3, [pc, #140]	@ (8019d50 <tcp_output_segment+0x160>)
 8019cc2:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8019cc6:	3301      	adds	r3, #1
 8019cc8:	4a21      	ldr	r2, [pc, #132]	@ (8019d50 <tcp_output_segment+0x160>)
 8019cca:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128
  }

  seg->p->len -= len;
 8019cce:	68fb      	ldr	r3, [r7, #12]
 8019cd0:	685b      	ldr	r3, [r3, #4]
 8019cd2:	8959      	ldrh	r1, [r3, #10]
 8019cd4:	68fb      	ldr	r3, [r7, #12]
 8019cd6:	685b      	ldr	r3, [r3, #4]
 8019cd8:	8b3a      	ldrh	r2, [r7, #24]
 8019cda:	1a8a      	subs	r2, r1, r2
 8019cdc:	b292      	uxth	r2, r2
 8019cde:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8019ce0:	68fb      	ldr	r3, [r7, #12]
 8019ce2:	685b      	ldr	r3, [r3, #4]
 8019ce4:	8919      	ldrh	r1, [r3, #8]
 8019ce6:	68fb      	ldr	r3, [r7, #12]
 8019ce8:	685b      	ldr	r3, [r3, #4]
 8019cea:	8b3a      	ldrh	r2, [r7, #24]
 8019cec:	1a8a      	subs	r2, r1, r2
 8019cee:	b292      	uxth	r2, r2
 8019cf0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8019cf2:	68fb      	ldr	r3, [r7, #12]
 8019cf4:	685b      	ldr	r3, [r3, #4]
 8019cf6:	68fa      	ldr	r2, [r7, #12]
 8019cf8:	68d2      	ldr	r2, [r2, #12]
 8019cfa:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8019cfc:	68fb      	ldr	r3, [r7, #12]
 8019cfe:	68db      	ldr	r3, [r3, #12]
 8019d00:	2200      	movs	r2, #0
 8019d02:	741a      	strb	r2, [r3, #16]
 8019d04:	2200      	movs	r2, #0
 8019d06:	745a      	strb	r2, [r3, #17]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
      seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 8019d08:	4b11      	ldr	r3, [pc, #68]	@ (8019d50 <tcp_output_segment+0x160>)
 8019d0a:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 8019d0e:	3301      	adds	r3, #1
 8019d10:	b29a      	uxth	r2, r3
 8019d12:	4b0f      	ldr	r3, [pc, #60]	@ (8019d50 <tcp_output_segment+0x160>)
 8019d14:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8019d18:	68fb      	ldr	r3, [r7, #12]
 8019d1a:	6858      	ldr	r0, [r3, #4]
 8019d1c:	68b9      	ldr	r1, [r7, #8]
 8019d1e:	68bb      	ldr	r3, [r7, #8]
 8019d20:	1d1c      	adds	r4, r3, #4
 8019d22:	68bb      	ldr	r3, [r7, #8]
 8019d24:	7a9d      	ldrb	r5, [r3, #10]
 8019d26:	68bb      	ldr	r3, [r7, #8]
 8019d28:	7a5b      	ldrb	r3, [r3, #9]
 8019d2a:	687a      	ldr	r2, [r7, #4]
 8019d2c:	9202      	str	r2, [sp, #8]
 8019d2e:	2206      	movs	r2, #6
 8019d30:	9201      	str	r2, [sp, #4]
 8019d32:	9300      	str	r3, [sp, #0]
 8019d34:	462b      	mov	r3, r5
 8019d36:	4622      	mov	r2, r4
 8019d38:	f004 fb7e 	bl	801e438 <ip4_output_if>
 8019d3c:	4603      	mov	r3, r0
 8019d3e:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 8019d40:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019d44:	4618      	mov	r0, r3
 8019d46:	3720      	adds	r7, #32
 8019d48:	46bd      	mov	sp, r7
 8019d4a:	bdb0      	pop	{r4, r5, r7, pc}
 8019d4c:	2000dd1c 	.word	0x2000dd1c
 8019d50:	2000db84 	.word	0x2000db84

08019d54 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8019d54:	b580      	push	{r7, lr}
 8019d56:	b08c      	sub	sp, #48	@ 0x30
 8019d58:	af04      	add	r7, sp, #16
 8019d5a:	60f8      	str	r0, [r7, #12]
 8019d5c:	60b9      	str	r1, [r7, #8]
 8019d5e:	607a      	str	r2, [r7, #4]
 8019d60:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8019d62:	2200      	movs	r2, #0
 8019d64:	2114      	movs	r1, #20
 8019d66:	2001      	movs	r0, #1
 8019d68:	f7fa f83a 	bl	8013de0 <pbuf_alloc>
 8019d6c:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8019d6e:	69fb      	ldr	r3, [r7, #28]
 8019d70:	2b00      	cmp	r3, #0
 8019d72:	d06a      	beq.n	8019e4a <tcp_rst+0xf6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8019d74:	69fb      	ldr	r3, [r7, #28]
 8019d76:	895b      	ldrh	r3, [r3, #10]
 8019d78:	2b13      	cmp	r3, #19
 8019d7a:	d806      	bhi.n	8019d8a <tcp_rst+0x36>
 8019d7c:	4b35      	ldr	r3, [pc, #212]	@ (8019e54 <tcp_rst+0x100>)
 8019d7e:	f240 524c 	movw	r2, #1356	@ 0x54c
 8019d82:	4935      	ldr	r1, [pc, #212]	@ (8019e58 <tcp_rst+0x104>)
 8019d84:	4835      	ldr	r0, [pc, #212]	@ (8019e5c <tcp_rst+0x108>)
 8019d86:	f006 fb8b 	bl	80204a0 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8019d8a:	69fb      	ldr	r3, [r7, #28]
 8019d8c:	685b      	ldr	r3, [r3, #4]
 8019d8e:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 8019d90:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8019d92:	4618      	mov	r0, r3
 8019d94:	f7f9 f944 	bl	8013020 <lwip_htons>
 8019d98:	4603      	mov	r3, r0
 8019d9a:	461a      	mov	r2, r3
 8019d9c:	69bb      	ldr	r3, [r7, #24]
 8019d9e:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8019da0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8019da2:	4618      	mov	r0, r3
 8019da4:	f7f9 f93c 	bl	8013020 <lwip_htons>
 8019da8:	4603      	mov	r3, r0
 8019daa:	461a      	mov	r2, r3
 8019dac:	69bb      	ldr	r3, [r7, #24]
 8019dae:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8019db0:	68f8      	ldr	r0, [r7, #12]
 8019db2:	f7f9 f942 	bl	801303a <lwip_htonl>
 8019db6:	4602      	mov	r2, r0
 8019db8:	69bb      	ldr	r3, [r7, #24]
 8019dba:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8019dbc:	68b8      	ldr	r0, [r7, #8]
 8019dbe:	f7f9 f93c 	bl	801303a <lwip_htonl>
 8019dc2:	4602      	mov	r2, r0
 8019dc4:	69bb      	ldr	r3, [r7, #24]
 8019dc6:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8019dc8:	f245 0014 	movw	r0, #20500	@ 0x5014
 8019dcc:	f7f9 f928 	bl	8013020 <lwip_htons>
 8019dd0:	4603      	mov	r3, r0
 8019dd2:	461a      	mov	r2, r3
 8019dd4:	69bb      	ldr	r3, [r7, #24]
 8019dd6:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8019dd8:	69bb      	ldr	r3, [r7, #24]
 8019dda:	2200      	movs	r2, #0
 8019ddc:	f042 0208 	orr.w	r2, r2, #8
 8019de0:	739a      	strb	r2, [r3, #14]
 8019de2:	2200      	movs	r2, #0
 8019de4:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8019de8:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 8019dea:	69bb      	ldr	r3, [r7, #24]
 8019dec:	2200      	movs	r2, #0
 8019dee:	741a      	strb	r2, [r3, #16]
 8019df0:	2200      	movs	r2, #0
 8019df2:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 8019df4:	69bb      	ldr	r3, [r7, #24]
 8019df6:	2200      	movs	r2, #0
 8019df8:	749a      	strb	r2, [r3, #18]
 8019dfa:	2200      	movs	r2, #0
 8019dfc:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
 8019dfe:	4b18      	ldr	r3, [pc, #96]	@ (8019e60 <tcp_rst+0x10c>)
 8019e00:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 8019e04:	3301      	adds	r3, #1
 8019e06:	b29a      	uxth	r2, r3
 8019e08:	4b15      	ldr	r3, [pc, #84]	@ (8019e60 <tcp_rst+0x10c>)
 8019e0a:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
  MIB2_STATS_INC(mib2.tcpoutrsts);
 8019e0e:	4b14      	ldr	r3, [pc, #80]	@ (8019e60 <tcp_rst+0x10c>)
 8019e10:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8019e14:	3301      	adds	r3, #1
 8019e16:	4a12      	ldr	r2, [pc, #72]	@ (8019e60 <tcp_rst+0x10c>)
 8019e18:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138

  netif = ip_route(local_ip, remote_ip);
 8019e1c:	6838      	ldr	r0, [r7, #0]
 8019e1e:	f004 f899 	bl	801df54 <ip4_route>
 8019e22:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 8019e24:	697b      	ldr	r3, [r7, #20]
 8019e26:	2b00      	cmp	r3, #0
 8019e28:	d00b      	beq.n	8019e42 <tcp_rst+0xee>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8019e2a:	697b      	ldr	r3, [r7, #20]
 8019e2c:	9302      	str	r3, [sp, #8]
 8019e2e:	2306      	movs	r3, #6
 8019e30:	9301      	str	r3, [sp, #4]
 8019e32:	2300      	movs	r3, #0
 8019e34:	9300      	str	r3, [sp, #0]
 8019e36:	23ff      	movs	r3, #255	@ 0xff
 8019e38:	683a      	ldr	r2, [r7, #0]
 8019e3a:	6879      	ldr	r1, [r7, #4]
 8019e3c:	69f8      	ldr	r0, [r7, #28]
 8019e3e:	f004 fafb 	bl	801e438 <ip4_output_if>
  }
  pbuf_free(p);
 8019e42:	69f8      	ldr	r0, [r7, #28]
 8019e44:	f7fa fb44 	bl	80144d0 <pbuf_free>
 8019e48:	e000      	b.n	8019e4c <tcp_rst+0xf8>
    return;
 8019e4a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8019e4c:	3720      	adds	r7, #32
 8019e4e:	46bd      	mov	sp, r7
 8019e50:	bd80      	pop	{r7, pc}
 8019e52:	bf00      	nop
 8019e54:	08024e2c 	.word	0x08024e2c
 8019e58:	08024e60 	.word	0x08024e60
 8019e5c:	08024e90 	.word	0x08024e90
 8019e60:	2000db84 	.word	0x2000db84

08019e64 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8019e64:	b580      	push	{r7, lr}
 8019e66:	b084      	sub	sp, #16
 8019e68:	af00      	add	r7, sp, #0
 8019e6a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8019e6c:	687b      	ldr	r3, [r7, #4]
 8019e6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019e70:	2b00      	cmp	r3, #0
 8019e72:	d029      	beq.n	8019ec8 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8019e74:	687b      	ldr	r3, [r7, #4]
 8019e76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019e78:	60fb      	str	r3, [r7, #12]
 8019e7a:	e002      	b.n	8019e82 <tcp_rexmit_rto+0x1e>
 8019e7c:	68fb      	ldr	r3, [r7, #12]
 8019e7e:	681b      	ldr	r3, [r3, #0]
 8019e80:	60fb      	str	r3, [r7, #12]
 8019e82:	68fb      	ldr	r3, [r7, #12]
 8019e84:	681b      	ldr	r3, [r3, #0]
 8019e86:	2b00      	cmp	r3, #0
 8019e88:	d1f8      	bne.n	8019e7c <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8019e8a:	687b      	ldr	r3, [r7, #4]
 8019e8c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8019e8e:	68fb      	ldr	r3, [r7, #12]
 8019e90:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8019e92:	687b      	ldr	r3, [r7, #4]
 8019e94:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8019e96:	687b      	ldr	r3, [r7, #4]
 8019e98:	669a      	str	r2, [r3, #104]	@ 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8019e9a:	687b      	ldr	r3, [r7, #4]
 8019e9c:	2200      	movs	r2, #0
 8019e9e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8019ea0:	687b      	ldr	r3, [r7, #4]
 8019ea2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8019ea6:	2bff      	cmp	r3, #255	@ 0xff
 8019ea8:	d007      	beq.n	8019eba <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 8019eaa:	687b      	ldr	r3, [r7, #4]
 8019eac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8019eb0:	3301      	adds	r3, #1
 8019eb2:	b2da      	uxtb	r2, r3
 8019eb4:	687b      	ldr	r3, [r7, #4]
 8019eb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	2200      	movs	r2, #0
 8019ebe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8019ec0:	6878      	ldr	r0, [r7, #4]
 8019ec2:	f7ff fcaf 	bl	8019824 <tcp_output>
 8019ec6:	e000      	b.n	8019eca <tcp_rexmit_rto+0x66>
    return;
 8019ec8:	bf00      	nop
}
 8019eca:	3710      	adds	r7, #16
 8019ecc:	46bd      	mov	sp, r7
 8019ece:	bd80      	pop	{r7, pc}

08019ed0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8019ed0:	b590      	push	{r4, r7, lr}
 8019ed2:	b085      	sub	sp, #20
 8019ed4:	af00      	add	r7, sp, #0
 8019ed6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8019ed8:	687b      	ldr	r3, [r7, #4]
 8019eda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019edc:	2b00      	cmp	r3, #0
 8019ede:	d04a      	beq.n	8019f76 <tcp_rexmit+0xa6>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 8019ee0:	687b      	ldr	r3, [r7, #4]
 8019ee2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019ee4:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 8019ee6:	68bb      	ldr	r3, [r7, #8]
 8019ee8:	681a      	ldr	r2, [r3, #0]
 8019eea:	687b      	ldr	r3, [r7, #4]
 8019eec:	66da      	str	r2, [r3, #108]	@ 0x6c

  cur_seg = &(pcb->unsent);
 8019eee:	687b      	ldr	r3, [r7, #4]
 8019ef0:	3368      	adds	r3, #104	@ 0x68
 8019ef2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8019ef4:	e002      	b.n	8019efc <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 8019ef6:	68fb      	ldr	r3, [r7, #12]
 8019ef8:	681b      	ldr	r3, [r3, #0]
 8019efa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8019efc:	68fb      	ldr	r3, [r7, #12]
 8019efe:	681b      	ldr	r3, [r3, #0]
 8019f00:	2b00      	cmp	r3, #0
 8019f02:	d011      	beq.n	8019f28 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8019f04:	68fb      	ldr	r3, [r7, #12]
 8019f06:	681b      	ldr	r3, [r3, #0]
 8019f08:	68db      	ldr	r3, [r3, #12]
 8019f0a:	685b      	ldr	r3, [r3, #4]
 8019f0c:	4618      	mov	r0, r3
 8019f0e:	f7f9 f894 	bl	801303a <lwip_htonl>
 8019f12:	4604      	mov	r4, r0
 8019f14:	68bb      	ldr	r3, [r7, #8]
 8019f16:	68db      	ldr	r3, [r3, #12]
 8019f18:	685b      	ldr	r3, [r3, #4]
 8019f1a:	4618      	mov	r0, r3
 8019f1c:	f7f9 f88d 	bl	801303a <lwip_htonl>
 8019f20:	4603      	mov	r3, r0
 8019f22:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8019f24:	2b00      	cmp	r3, #0
 8019f26:	dbe6      	blt.n	8019ef6 <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 8019f28:	68fb      	ldr	r3, [r7, #12]
 8019f2a:	681a      	ldr	r2, [r3, #0]
 8019f2c:	68bb      	ldr	r3, [r7, #8]
 8019f2e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8019f30:	68fb      	ldr	r3, [r7, #12]
 8019f32:	68ba      	ldr	r2, [r7, #8]
 8019f34:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8019f36:	68bb      	ldr	r3, [r7, #8]
 8019f38:	681b      	ldr	r3, [r3, #0]
 8019f3a:	2b00      	cmp	r3, #0
 8019f3c:	d103      	bne.n	8019f46 <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8019f3e:	687b      	ldr	r3, [r7, #4]
 8019f40:	2200      	movs	r2, #0
 8019f42:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8019f46:	687b      	ldr	r3, [r7, #4]
 8019f48:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8019f4c:	2bff      	cmp	r3, #255	@ 0xff
 8019f4e:	d007      	beq.n	8019f60 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 8019f50:	687b      	ldr	r3, [r7, #4]
 8019f52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8019f56:	3301      	adds	r3, #1
 8019f58:	b2da      	uxtb	r2, r3
 8019f5a:	687b      	ldr	r3, [r7, #4]
 8019f5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8019f60:	687b      	ldr	r3, [r7, #4]
 8019f62:	2200      	movs	r2, #0
 8019f64:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
 8019f66:	4b06      	ldr	r3, [pc, #24]	@ (8019f80 <tcp_rexmit+0xb0>)
 8019f68:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8019f6c:	3301      	adds	r3, #1
 8019f6e:	4a04      	ldr	r2, [pc, #16]	@ (8019f80 <tcp_rexmit+0xb0>)
 8019f70:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
 8019f74:	e000      	b.n	8019f78 <tcp_rexmit+0xa8>
    return;
 8019f76:	bf00      	nop
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 8019f78:	3714      	adds	r7, #20
 8019f7a:	46bd      	mov	sp, r7
 8019f7c:	bd90      	pop	{r4, r7, pc}
 8019f7e:	bf00      	nop
 8019f80:	2000db84 	.word	0x2000db84

08019f84 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8019f84:	b580      	push	{r7, lr}
 8019f86:	b082      	sub	sp, #8
 8019f88:	af00      	add	r7, sp, #0
 8019f8a:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8019f8c:	687b      	ldr	r3, [r7, #4]
 8019f8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	d041      	beq.n	801a018 <tcp_rexmit_fast+0x94>
 8019f94:	687b      	ldr	r3, [r7, #4]
 8019f96:	7e9b      	ldrb	r3, [r3, #26]
 8019f98:	f003 0304 	and.w	r3, r3, #4
 8019f9c:	2b00      	cmp	r3, #0
 8019f9e:	d13b      	bne.n	801a018 <tcp_rexmit_fast+0x94>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8019fa0:	6878      	ldr	r0, [r7, #4]
 8019fa2:	f7ff ff95 	bl	8019ed0 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8019fa6:	687b      	ldr	r3, [r7, #4]
 8019fa8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8019fac:	687b      	ldr	r3, [r7, #4]
 8019fae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8019fb2:	4293      	cmp	r3, r2
 8019fb4:	bf28      	it	cs
 8019fb6:	4613      	movcs	r3, r2
 8019fb8:	b29b      	uxth	r3, r3
 8019fba:	0fda      	lsrs	r2, r3, #31
 8019fbc:	4413      	add	r3, r2
 8019fbe:	105b      	asrs	r3, r3, #1
 8019fc0:	b29a      	uxth	r2, r3
 8019fc2:	687b      	ldr	r3, [r7, #4]
 8019fc4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8019fc8:	687b      	ldr	r3, [r7, #4]
 8019fca:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8019fce:	461a      	mov	r2, r3
 8019fd0:	687b      	ldr	r3, [r7, #4]
 8019fd2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019fd4:	005b      	lsls	r3, r3, #1
 8019fd6:	429a      	cmp	r2, r3
 8019fd8:	d206      	bcs.n	8019fe8 <tcp_rexmit_fast+0x64>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8019fda:	687b      	ldr	r3, [r7, #4]
 8019fdc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019fde:	005b      	lsls	r3, r3, #1
 8019fe0:	b29a      	uxth	r2, r3
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8019fe8:	687b      	ldr	r3, [r7, #4]
 8019fea:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8019fee:	687b      	ldr	r3, [r7, #4]
 8019ff0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019ff2:	4619      	mov	r1, r3
 8019ff4:	0049      	lsls	r1, r1, #1
 8019ff6:	440b      	add	r3, r1
 8019ff8:	b29b      	uxth	r3, r3
 8019ffa:	4413      	add	r3, r2
 8019ffc:	b29a      	uxth	r2, r3
 8019ffe:	687b      	ldr	r3, [r7, #4]
 801a000:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->flags |= TF_INFR;
 801a004:	687b      	ldr	r3, [r7, #4]
 801a006:	7e9b      	ldrb	r3, [r3, #26]
 801a008:	f043 0304 	orr.w	r3, r3, #4
 801a00c:	b2da      	uxtb	r2, r3
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 801a012:	687b      	ldr	r3, [r7, #4]
 801a014:	2200      	movs	r2, #0
 801a016:	861a      	strh	r2, [r3, #48]	@ 0x30
  }
}
 801a018:	bf00      	nop
 801a01a:	3708      	adds	r7, #8
 801a01c:	46bd      	mov	sp, r7
 801a01e:	bd80      	pop	{r7, pc}

0801a020 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801a020:	b580      	push	{r7, lr}
 801a022:	b08a      	sub	sp, #40	@ 0x28
 801a024:	af04      	add	r7, sp, #16
 801a026:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a02c:	3b01      	subs	r3, #1
 801a02e:	4618      	mov	r0, r3
 801a030:	f7f9 f803 	bl	801303a <lwip_htonl>
 801a034:	4603      	mov	r3, r0
 801a036:	2200      	movs	r2, #0
 801a038:	2100      	movs	r1, #0
 801a03a:	6878      	ldr	r0, [r7, #4]
 801a03c:	f7fe fcf0 	bl	8018a20 <tcp_output_alloc_header>
 801a040:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a042:	693b      	ldr	r3, [r7, #16]
 801a044:	2b00      	cmp	r3, #0
 801a046:	d102      	bne.n	801a04e <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801a048:	f04f 33ff 	mov.w	r3, #4294967295
 801a04c:	e029      	b.n	801a0a2 <tcp_keepalive+0x82>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801a04e:	687b      	ldr	r3, [r7, #4]
 801a050:	3304      	adds	r3, #4
 801a052:	4618      	mov	r0, r3
 801a054:	f003 ff7e 	bl	801df54 <ip4_route>
 801a058:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 801a05a:	68fb      	ldr	r3, [r7, #12]
 801a05c:	2b00      	cmp	r3, #0
 801a05e:	d102      	bne.n	801a066 <tcp_keepalive+0x46>
    err = ERR_RTE;
 801a060:	23fc      	movs	r3, #252	@ 0xfc
 801a062:	75fb      	strb	r3, [r7, #23]
 801a064:	e018      	b.n	801a098 <tcp_keepalive+0x78>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);
 801a066:	4b11      	ldr	r3, [pc, #68]	@ (801a0ac <tcp_keepalive+0x8c>)
 801a068:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 801a06c:	3301      	adds	r3, #1
 801a06e:	b29a      	uxth	r2, r3
 801a070:	4b0e      	ldr	r3, [pc, #56]	@ (801a0ac <tcp_keepalive+0x8c>)
 801a072:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 801a076:	6879      	ldr	r1, [r7, #4]
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	1d1a      	adds	r2, r3, #4
 801a07c:	687b      	ldr	r3, [r7, #4]
 801a07e:	7a98      	ldrb	r0, [r3, #10]
 801a080:	68fb      	ldr	r3, [r7, #12]
 801a082:	9302      	str	r3, [sp, #8]
 801a084:	2306      	movs	r3, #6
 801a086:	9301      	str	r3, [sp, #4]
 801a088:	2300      	movs	r3, #0
 801a08a:	9300      	str	r3, [sp, #0]
 801a08c:	4603      	mov	r3, r0
 801a08e:	6938      	ldr	r0, [r7, #16]
 801a090:	f004 f9d2 	bl	801e438 <ip4_output_if>
 801a094:	4603      	mov	r3, r0
 801a096:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 801a098:	6938      	ldr	r0, [r7, #16]
 801a09a:	f7fa fa19 	bl	80144d0 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801a09e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a0a2:	4618      	mov	r0, r3
 801a0a4:	3718      	adds	r7, #24
 801a0a6:	46bd      	mov	sp, r7
 801a0a8:	bd80      	pop	{r7, pc}
 801a0aa:	bf00      	nop
 801a0ac:	2000db84 	.word	0x2000db84

0801a0b0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801a0b0:	b590      	push	{r4, r7, lr}
 801a0b2:	b08f      	sub	sp, #60	@ 0x3c
 801a0b4:	af04      	add	r7, sp, #16
 801a0b6:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 801a0b8:	687b      	ldr	r3, [r7, #4]
 801a0ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a0bc:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 801a0be:	6a3b      	ldr	r3, [r7, #32]
 801a0c0:	2b00      	cmp	r3, #0
 801a0c2:	d102      	bne.n	801a0ca <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 801a0c4:	687b      	ldr	r3, [r7, #4]
 801a0c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801a0c8:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 801a0ca:	6a3b      	ldr	r3, [r7, #32]
 801a0cc:	2b00      	cmp	r3, #0
 801a0ce:	d101      	bne.n	801a0d4 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 801a0d0:	2300      	movs	r3, #0
 801a0d2:	e08d      	b.n	801a1f0 <tcp_zero_window_probe+0x140>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801a0d4:	6a3b      	ldr	r3, [r7, #32]
 801a0d6:	68db      	ldr	r3, [r3, #12]
 801a0d8:	899b      	ldrh	r3, [r3, #12]
 801a0da:	b29b      	uxth	r3, r3
 801a0dc:	4618      	mov	r0, r3
 801a0de:	f7f8 ff9f 	bl	8013020 <lwip_htons>
 801a0e2:	4603      	mov	r3, r0
 801a0e4:	f003 0301 	and.w	r3, r3, #1
 801a0e8:	2b00      	cmp	r3, #0
 801a0ea:	d005      	beq.n	801a0f8 <tcp_zero_window_probe+0x48>
 801a0ec:	6a3b      	ldr	r3, [r7, #32]
 801a0ee:	891b      	ldrh	r3, [r3, #8]
 801a0f0:	2b00      	cmp	r3, #0
 801a0f2:	d101      	bne.n	801a0f8 <tcp_zero_window_probe+0x48>
 801a0f4:	2301      	movs	r3, #1
 801a0f6:	e000      	b.n	801a0fa <tcp_zero_window_probe+0x4a>
 801a0f8:	2300      	movs	r3, #0
 801a0fa:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801a0fc:	7ffb      	ldrb	r3, [r7, #31]
 801a0fe:	2b00      	cmp	r3, #0
 801a100:	bf0c      	ite	eq
 801a102:	2301      	moveq	r3, #1
 801a104:	2300      	movne	r3, #0
 801a106:	b2db      	uxtb	r3, r3
 801a108:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 801a10a:	6a3b      	ldr	r3, [r7, #32]
 801a10c:	68db      	ldr	r3, [r3, #12]
 801a10e:	685b      	ldr	r3, [r3, #4]
 801a110:	8bba      	ldrh	r2, [r7, #28]
 801a112:	2100      	movs	r1, #0
 801a114:	6878      	ldr	r0, [r7, #4]
 801a116:	f7fe fc83 	bl	8018a20 <tcp_output_alloc_header>
 801a11a:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801a11c:	69bb      	ldr	r3, [r7, #24]
 801a11e:	2b00      	cmp	r3, #0
 801a120:	d102      	bne.n	801a128 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801a122:	f04f 33ff 	mov.w	r3, #4294967295
 801a126:	e063      	b.n	801a1f0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801a128:	69bb      	ldr	r3, [r7, #24]
 801a12a:	685b      	ldr	r3, [r3, #4]
 801a12c:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801a12e:	7ffb      	ldrb	r3, [r7, #31]
 801a130:	2b00      	cmp	r3, #0
 801a132:	d00e      	beq.n	801a152 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801a134:	697b      	ldr	r3, [r7, #20]
 801a136:	899b      	ldrh	r3, [r3, #12]
 801a138:	b29b      	uxth	r3, r3
 801a13a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801a13e:	b29c      	uxth	r4, r3
 801a140:	2011      	movs	r0, #17
 801a142:	f7f8 ff6d 	bl	8013020 <lwip_htons>
 801a146:	4603      	mov	r3, r0
 801a148:	4323      	orrs	r3, r4
 801a14a:	b29a      	uxth	r2, r3
 801a14c:	697b      	ldr	r3, [r7, #20]
 801a14e:	819a      	strh	r2, [r3, #12]
 801a150:	e010      	b.n	801a174 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801a152:	69bb      	ldr	r3, [r7, #24]
 801a154:	685b      	ldr	r3, [r3, #4]
 801a156:	3314      	adds	r3, #20
 801a158:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801a15a:	6a3b      	ldr	r3, [r7, #32]
 801a15c:	6858      	ldr	r0, [r3, #4]
 801a15e:	6a3b      	ldr	r3, [r7, #32]
 801a160:	685b      	ldr	r3, [r3, #4]
 801a162:	891a      	ldrh	r2, [r3, #8]
 801a164:	6a3b      	ldr	r3, [r7, #32]
 801a166:	891b      	ldrh	r3, [r3, #8]
 801a168:	1ad3      	subs	r3, r2, r3
 801a16a:	b29b      	uxth	r3, r3
 801a16c:	2201      	movs	r2, #1
 801a16e:	6939      	ldr	r1, [r7, #16]
 801a170:	f7fa fbac 	bl	80148cc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801a174:	6a3b      	ldr	r3, [r7, #32]
 801a176:	68db      	ldr	r3, [r3, #12]
 801a178:	685b      	ldr	r3, [r3, #4]
 801a17a:	4618      	mov	r0, r3
 801a17c:	f7f8 ff5d 	bl	801303a <lwip_htonl>
 801a180:	4603      	mov	r3, r0
 801a182:	3301      	adds	r3, #1
 801a184:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801a186:	687b      	ldr	r3, [r7, #4]
 801a188:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801a18a:	68fb      	ldr	r3, [r7, #12]
 801a18c:	1ad3      	subs	r3, r2, r3
 801a18e:	2b00      	cmp	r3, #0
 801a190:	da02      	bge.n	801a198 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 801a192:	687b      	ldr	r3, [r7, #4]
 801a194:	68fa      	ldr	r2, [r7, #12]
 801a196:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801a198:	687b      	ldr	r3, [r7, #4]
 801a19a:	3304      	adds	r3, #4
 801a19c:	4618      	mov	r0, r3
 801a19e:	f003 fed9 	bl	801df54 <ip4_route>
 801a1a2:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 801a1a4:	68bb      	ldr	r3, [r7, #8]
 801a1a6:	2b00      	cmp	r3, #0
 801a1a8:	d103      	bne.n	801a1b2 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 801a1aa:	23fc      	movs	r3, #252	@ 0xfc
 801a1ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801a1b0:	e019      	b.n	801a1e6 <tcp_zero_window_probe+0x136>
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    TCP_STATS_INC(tcp.xmit);
 801a1b2:	4b11      	ldr	r3, [pc, #68]	@ (801a1f8 <tcp_zero_window_probe+0x148>)
 801a1b4:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 801a1b8:	3301      	adds	r3, #1
 801a1ba:	b29a      	uxth	r2, r3
 801a1bc:	4b0e      	ldr	r3, [pc, #56]	@ (801a1f8 <tcp_zero_window_probe+0x148>)
 801a1be:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801a1c2:	6879      	ldr	r1, [r7, #4]
 801a1c4:	687b      	ldr	r3, [r7, #4]
 801a1c6:	1d1a      	adds	r2, r3, #4
 801a1c8:	687b      	ldr	r3, [r7, #4]
 801a1ca:	7a98      	ldrb	r0, [r3, #10]
 801a1cc:	68bb      	ldr	r3, [r7, #8]
 801a1ce:	9302      	str	r3, [sp, #8]
 801a1d0:	2306      	movs	r3, #6
 801a1d2:	9301      	str	r3, [sp, #4]
 801a1d4:	2300      	movs	r3, #0
 801a1d6:	9300      	str	r3, [sp, #0]
 801a1d8:	4603      	mov	r3, r0
 801a1da:	69b8      	ldr	r0, [r7, #24]
 801a1dc:	f004 f92c 	bl	801e438 <ip4_output_if>
 801a1e0:	4603      	mov	r3, r0
 801a1e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 801a1e6:	69b8      	ldr	r0, [r7, #24]
 801a1e8:	f7fa f972 	bl	80144d0 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801a1ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801a1f0:	4618      	mov	r0, r3
 801a1f2:	372c      	adds	r7, #44	@ 0x2c
 801a1f4:	46bd      	mov	sp, r7
 801a1f6:	bd90      	pop	{r4, r7, pc}
 801a1f8:	2000db84 	.word	0x2000db84

0801a1fc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801a1fc:	b580      	push	{r7, lr}
 801a1fe:	b082      	sub	sp, #8
 801a200:	af00      	add	r7, sp, #0
 801a202:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801a204:	f7fa fd08 	bl	8014c18 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801a208:	4b0a      	ldr	r3, [pc, #40]	@ (801a234 <tcpip_tcp_timer+0x38>)
 801a20a:	681b      	ldr	r3, [r3, #0]
 801a20c:	2b00      	cmp	r3, #0
 801a20e:	d103      	bne.n	801a218 <tcpip_tcp_timer+0x1c>
 801a210:	4b09      	ldr	r3, [pc, #36]	@ (801a238 <tcpip_tcp_timer+0x3c>)
 801a212:	681b      	ldr	r3, [r3, #0]
 801a214:	2b00      	cmp	r3, #0
 801a216:	d005      	beq.n	801a224 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801a218:	2200      	movs	r2, #0
 801a21a:	4908      	ldr	r1, [pc, #32]	@ (801a23c <tcpip_tcp_timer+0x40>)
 801a21c:	20fa      	movs	r0, #250	@ 0xfa
 801a21e:	f000 f86f 	bl	801a300 <sys_timeout>
 801a222:	e003      	b.n	801a22c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801a224:	4b06      	ldr	r3, [pc, #24]	@ (801a240 <tcpip_tcp_timer+0x44>)
 801a226:	2200      	movs	r2, #0
 801a228:	601a      	str	r2, [r3, #0]
  }
}
 801a22a:	bf00      	nop
 801a22c:	bf00      	nop
 801a22e:	3708      	adds	r7, #8
 801a230:	46bd      	mov	sp, r7
 801a232:	bd80      	pop	{r7, pc}
 801a234:	2000dd28 	.word	0x2000dd28
 801a238:	2000dd2c 	.word	0x2000dd2c
 801a23c:	0801a1fd 	.word	0x0801a1fd
 801a240:	2000dd74 	.word	0x2000dd74

0801a244 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801a244:	b580      	push	{r7, lr}
 801a246:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801a248:	4b0a      	ldr	r3, [pc, #40]	@ (801a274 <tcp_timer_needed+0x30>)
 801a24a:	681b      	ldr	r3, [r3, #0]
 801a24c:	2b00      	cmp	r3, #0
 801a24e:	d10f      	bne.n	801a270 <tcp_timer_needed+0x2c>
 801a250:	4b09      	ldr	r3, [pc, #36]	@ (801a278 <tcp_timer_needed+0x34>)
 801a252:	681b      	ldr	r3, [r3, #0]
 801a254:	2b00      	cmp	r3, #0
 801a256:	d103      	bne.n	801a260 <tcp_timer_needed+0x1c>
 801a258:	4b08      	ldr	r3, [pc, #32]	@ (801a27c <tcp_timer_needed+0x38>)
 801a25a:	681b      	ldr	r3, [r3, #0]
 801a25c:	2b00      	cmp	r3, #0
 801a25e:	d007      	beq.n	801a270 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801a260:	4b04      	ldr	r3, [pc, #16]	@ (801a274 <tcp_timer_needed+0x30>)
 801a262:	2201      	movs	r2, #1
 801a264:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801a266:	2200      	movs	r2, #0
 801a268:	4905      	ldr	r1, [pc, #20]	@ (801a280 <tcp_timer_needed+0x3c>)
 801a26a:	20fa      	movs	r0, #250	@ 0xfa
 801a26c:	f000 f848 	bl	801a300 <sys_timeout>
  }
}
 801a270:	bf00      	nop
 801a272:	bd80      	pop	{r7, pc}
 801a274:	2000dd74 	.word	0x2000dd74
 801a278:	2000dd28 	.word	0x2000dd28
 801a27c:	2000dd2c 	.word	0x2000dd2c
 801a280:	0801a1fd 	.word	0x0801a1fd

0801a284 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 801a284:	b580      	push	{r7, lr}
 801a286:	b084      	sub	sp, #16
 801a288:	af00      	add	r7, sp, #0
 801a28a:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 801a28c:	687b      	ldr	r3, [r7, #4]
 801a28e:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801a290:	68fb      	ldr	r3, [r7, #12]
 801a292:	685b      	ldr	r3, [r3, #4]
 801a294:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 801a296:	68fb      	ldr	r3, [r7, #12]
 801a298:	681b      	ldr	r3, [r3, #0]
 801a29a:	687a      	ldr	r2, [r7, #4]
 801a29c:	4903      	ldr	r1, [pc, #12]	@ (801a2ac <cyclic_timer+0x28>)
 801a29e:	4618      	mov	r0, r3
 801a2a0:	f000 f82e 	bl	801a300 <sys_timeout>
}
 801a2a4:	bf00      	nop
 801a2a6:	3710      	adds	r7, #16
 801a2a8:	46bd      	mov	sp, r7
 801a2aa:	bd80      	pop	{r7, pc}
 801a2ac:	0801a285 	.word	0x0801a285

0801a2b0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801a2b0:	b580      	push	{r7, lr}
 801a2b2:	b082      	sub	sp, #8
 801a2b4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801a2b6:	2301      	movs	r3, #1
 801a2b8:	607b      	str	r3, [r7, #4]
 801a2ba:	e00e      	b.n	801a2da <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 801a2bc:	4a0d      	ldr	r2, [pc, #52]	@ (801a2f4 <sys_timeouts_init+0x44>)
 801a2be:	687b      	ldr	r3, [r7, #4]
 801a2c0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801a2c4:	687b      	ldr	r3, [r7, #4]
 801a2c6:	00db      	lsls	r3, r3, #3
 801a2c8:	4a0a      	ldr	r2, [pc, #40]	@ (801a2f4 <sys_timeouts_init+0x44>)
 801a2ca:	4413      	add	r3, r2
 801a2cc:	461a      	mov	r2, r3
 801a2ce:	490a      	ldr	r1, [pc, #40]	@ (801a2f8 <sys_timeouts_init+0x48>)
 801a2d0:	f000 f816 	bl	801a300 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801a2d4:	687b      	ldr	r3, [r7, #4]
 801a2d6:	3301      	adds	r3, #1
 801a2d8:	607b      	str	r3, [r7, #4]
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	2b04      	cmp	r3, #4
 801a2de:	d9ed      	bls.n	801a2bc <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 801a2e0:	f7f0 f938 	bl	800a554 <sys_now>
 801a2e4:	4603      	mov	r3, r0
 801a2e6:	4a05      	ldr	r2, [pc, #20]	@ (801a2fc <sys_timeouts_init+0x4c>)
 801a2e8:	6013      	str	r3, [r2, #0]
}
 801a2ea:	bf00      	nop
 801a2ec:	3708      	adds	r7, #8
 801a2ee:	46bd      	mov	sp, r7
 801a2f0:	bd80      	pop	{r7, pc}
 801a2f2:	bf00      	nop
 801a2f4:	0802f028 	.word	0x0802f028
 801a2f8:	0801a285 	.word	0x0801a285
 801a2fc:	2000dd70 	.word	0x2000dd70

0801a300 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801a300:	b580      	push	{r7, lr}
 801a302:	b088      	sub	sp, #32
 801a304:	af00      	add	r7, sp, #0
 801a306:	60f8      	str	r0, [r7, #12]
 801a308:	60b9      	str	r1, [r7, #8]
 801a30a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801a30c:	2006      	movs	r0, #6
 801a30e:	f7f9 fb31 	bl	8013974 <memp_malloc>
 801a312:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 801a314:	697b      	ldr	r3, [r7, #20]
 801a316:	2b00      	cmp	r3, #0
 801a318:	d10a      	bne.n	801a330 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801a31a:	697b      	ldr	r3, [r7, #20]
 801a31c:	2b00      	cmp	r3, #0
 801a31e:	f040 8084 	bne.w	801a42a <sys_timeout+0x12a>
 801a322:	4b44      	ldr	r3, [pc, #272]	@ (801a434 <sys_timeout+0x134>)
 801a324:	22d4      	movs	r2, #212	@ 0xd4
 801a326:	4944      	ldr	r1, [pc, #272]	@ (801a438 <sys_timeout+0x138>)
 801a328:	4844      	ldr	r0, [pc, #272]	@ (801a43c <sys_timeout+0x13c>)
 801a32a:	f006 f8b9 	bl	80204a0 <iprintf>
    return;
 801a32e:	e07c      	b.n	801a42a <sys_timeout+0x12a>
  }

  now = sys_now();
 801a330:	f7f0 f910 	bl	800a554 <sys_now>
 801a334:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 801a336:	4b42      	ldr	r3, [pc, #264]	@ (801a440 <sys_timeout+0x140>)
 801a338:	681b      	ldr	r3, [r3, #0]
 801a33a:	2b00      	cmp	r3, #0
 801a33c:	d105      	bne.n	801a34a <sys_timeout+0x4a>
    diff = 0;
 801a33e:	2300      	movs	r3, #0
 801a340:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 801a342:	4a40      	ldr	r2, [pc, #256]	@ (801a444 <sys_timeout+0x144>)
 801a344:	693b      	ldr	r3, [r7, #16]
 801a346:	6013      	str	r3, [r2, #0]
 801a348:	e004      	b.n	801a354 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 801a34a:	4b3e      	ldr	r3, [pc, #248]	@ (801a444 <sys_timeout+0x144>)
 801a34c:	681b      	ldr	r3, [r3, #0]
 801a34e:	693a      	ldr	r2, [r7, #16]
 801a350:	1ad3      	subs	r3, r2, r3
 801a352:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 801a354:	697b      	ldr	r3, [r7, #20]
 801a356:	2200      	movs	r2, #0
 801a358:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801a35a:	697b      	ldr	r3, [r7, #20]
 801a35c:	68ba      	ldr	r2, [r7, #8]
 801a35e:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801a360:	697b      	ldr	r3, [r7, #20]
 801a362:	687a      	ldr	r2, [r7, #4]
 801a364:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 801a366:	68fa      	ldr	r2, [r7, #12]
 801a368:	69bb      	ldr	r3, [r7, #24]
 801a36a:	441a      	add	r2, r3
 801a36c:	697b      	ldr	r3, [r7, #20]
 801a36e:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801a370:	4b33      	ldr	r3, [pc, #204]	@ (801a440 <sys_timeout+0x140>)
 801a372:	681b      	ldr	r3, [r3, #0]
 801a374:	2b00      	cmp	r3, #0
 801a376:	d103      	bne.n	801a380 <sys_timeout+0x80>
    next_timeout = timeout;
 801a378:	4a31      	ldr	r2, [pc, #196]	@ (801a440 <sys_timeout+0x140>)
 801a37a:	697b      	ldr	r3, [r7, #20]
 801a37c:	6013      	str	r3, [r2, #0]
    return;
 801a37e:	e055      	b.n	801a42c <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 801a380:	4b2f      	ldr	r3, [pc, #188]	@ (801a440 <sys_timeout+0x140>)
 801a382:	681b      	ldr	r3, [r3, #0]
 801a384:	685b      	ldr	r3, [r3, #4]
 801a386:	68fa      	ldr	r2, [r7, #12]
 801a388:	429a      	cmp	r2, r3
 801a38a:	d20f      	bcs.n	801a3ac <sys_timeout+0xac>
    next_timeout->time -= msecs;
 801a38c:	4b2c      	ldr	r3, [pc, #176]	@ (801a440 <sys_timeout+0x140>)
 801a38e:	681b      	ldr	r3, [r3, #0]
 801a390:	6859      	ldr	r1, [r3, #4]
 801a392:	4b2b      	ldr	r3, [pc, #172]	@ (801a440 <sys_timeout+0x140>)
 801a394:	681b      	ldr	r3, [r3, #0]
 801a396:	68fa      	ldr	r2, [r7, #12]
 801a398:	1a8a      	subs	r2, r1, r2
 801a39a:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 801a39c:	4b28      	ldr	r3, [pc, #160]	@ (801a440 <sys_timeout+0x140>)
 801a39e:	681a      	ldr	r2, [r3, #0]
 801a3a0:	697b      	ldr	r3, [r7, #20]
 801a3a2:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801a3a4:	4a26      	ldr	r2, [pc, #152]	@ (801a440 <sys_timeout+0x140>)
 801a3a6:	697b      	ldr	r3, [r7, #20]
 801a3a8:	6013      	str	r3, [r2, #0]
 801a3aa:	e03f      	b.n	801a42c <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801a3ac:	4b24      	ldr	r3, [pc, #144]	@ (801a440 <sys_timeout+0x140>)
 801a3ae:	681b      	ldr	r3, [r3, #0]
 801a3b0:	61fb      	str	r3, [r7, #28]
 801a3b2:	e036      	b.n	801a422 <sys_timeout+0x122>
      timeout->time -= t->time;
 801a3b4:	697b      	ldr	r3, [r7, #20]
 801a3b6:	685a      	ldr	r2, [r3, #4]
 801a3b8:	69fb      	ldr	r3, [r7, #28]
 801a3ba:	685b      	ldr	r3, [r3, #4]
 801a3bc:	1ad2      	subs	r2, r2, r3
 801a3be:	697b      	ldr	r3, [r7, #20]
 801a3c0:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 801a3c2:	69fb      	ldr	r3, [r7, #28]
 801a3c4:	681b      	ldr	r3, [r3, #0]
 801a3c6:	2b00      	cmp	r3, #0
 801a3c8:	d006      	beq.n	801a3d8 <sys_timeout+0xd8>
 801a3ca:	69fb      	ldr	r3, [r7, #28]
 801a3cc:	681b      	ldr	r3, [r3, #0]
 801a3ce:	685a      	ldr	r2, [r3, #4]
 801a3d0:	697b      	ldr	r3, [r7, #20]
 801a3d2:	685b      	ldr	r3, [r3, #4]
 801a3d4:	429a      	cmp	r2, r3
 801a3d6:	d921      	bls.n	801a41c <sys_timeout+0x11c>
        if (t->next != NULL) {
 801a3d8:	69fb      	ldr	r3, [r7, #28]
 801a3da:	681b      	ldr	r3, [r3, #0]
 801a3dc:	2b00      	cmp	r3, #0
 801a3de:	d009      	beq.n	801a3f4 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 801a3e0:	69fb      	ldr	r3, [r7, #28]
 801a3e2:	681b      	ldr	r3, [r3, #0]
 801a3e4:	6859      	ldr	r1, [r3, #4]
 801a3e6:	697b      	ldr	r3, [r7, #20]
 801a3e8:	685a      	ldr	r2, [r3, #4]
 801a3ea:	69fb      	ldr	r3, [r7, #28]
 801a3ec:	681b      	ldr	r3, [r3, #0]
 801a3ee:	1a8a      	subs	r2, r1, r2
 801a3f0:	605a      	str	r2, [r3, #4]
 801a3f2:	e00b      	b.n	801a40c <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 801a3f4:	697b      	ldr	r3, [r7, #20]
 801a3f6:	685b      	ldr	r3, [r3, #4]
 801a3f8:	68fa      	ldr	r2, [r7, #12]
 801a3fa:	429a      	cmp	r2, r3
 801a3fc:	d206      	bcs.n	801a40c <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 801a3fe:	4b10      	ldr	r3, [pc, #64]	@ (801a440 <sys_timeout+0x140>)
 801a400:	681b      	ldr	r3, [r3, #0]
 801a402:	685a      	ldr	r2, [r3, #4]
 801a404:	68fb      	ldr	r3, [r7, #12]
 801a406:	441a      	add	r2, r3
 801a408:	697b      	ldr	r3, [r7, #20]
 801a40a:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 801a40c:	69fb      	ldr	r3, [r7, #28]
 801a40e:	681a      	ldr	r2, [r3, #0]
 801a410:	697b      	ldr	r3, [r7, #20]
 801a412:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801a414:	69fb      	ldr	r3, [r7, #28]
 801a416:	697a      	ldr	r2, [r7, #20]
 801a418:	601a      	str	r2, [r3, #0]
        break;
 801a41a:	e007      	b.n	801a42c <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 801a41c:	69fb      	ldr	r3, [r7, #28]
 801a41e:	681b      	ldr	r3, [r3, #0]
 801a420:	61fb      	str	r3, [r7, #28]
 801a422:	69fb      	ldr	r3, [r7, #28]
 801a424:	2b00      	cmp	r3, #0
 801a426:	d1c5      	bne.n	801a3b4 <sys_timeout+0xb4>
 801a428:	e000      	b.n	801a42c <sys_timeout+0x12c>
    return;
 801a42a:	bf00      	nop
      }
    }
  }
}
 801a42c:	3720      	adds	r7, #32
 801a42e:	46bd      	mov	sp, r7
 801a430:	bd80      	pop	{r7, pc}
 801a432:	bf00      	nop
 801a434:	08025270 	.word	0x08025270
 801a438:	080252a4 	.word	0x080252a4
 801a43c:	080252e4 	.word	0x080252e4
 801a440:	2000dd6c 	.word	0x2000dd6c
 801a444:	2000dd70 	.word	0x2000dd70

0801a448 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 801a448:	b580      	push	{r7, lr}
 801a44a:	b086      	sub	sp, #24
 801a44c:	af00      	add	r7, sp, #0
  if (next_timeout) {
 801a44e:	4b24      	ldr	r3, [pc, #144]	@ (801a4e0 <sys_check_timeouts+0x98>)
 801a450:	681b      	ldr	r3, [r3, #0]
 801a452:	2b00      	cmp	r3, #0
 801a454:	d040      	beq.n	801a4d8 <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 801a456:	f7f0 f87d 	bl	800a554 <sys_now>
 801a45a:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 801a45c:	4b21      	ldr	r3, [pc, #132]	@ (801a4e4 <sys_check_timeouts+0x9c>)
 801a45e:	681b      	ldr	r3, [r3, #0]
 801a460:	68fa      	ldr	r2, [r7, #12]
 801a462:	1ad3      	subs	r3, r2, r3
 801a464:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 801a466:	4b20      	ldr	r3, [pc, #128]	@ (801a4e8 <sys_check_timeouts+0xa0>)
 801a468:	781b      	ldrb	r3, [r3, #0]
 801a46a:	b2db      	uxtb	r3, r3
 801a46c:	2b00      	cmp	r3, #0
 801a46e:	d001      	beq.n	801a474 <sys_check_timeouts+0x2c>
 801a470:	f7f9 fc86 	bl	8013d80 <pbuf_free_ooseq>
      had_one = 0;
 801a474:	2300      	movs	r3, #0
 801a476:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 801a478:	4b19      	ldr	r3, [pc, #100]	@ (801a4e0 <sys_check_timeouts+0x98>)
 801a47a:	681b      	ldr	r3, [r3, #0]
 801a47c:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 801a47e:	68bb      	ldr	r3, [r7, #8]
 801a480:	2b00      	cmp	r3, #0
 801a482:	d026      	beq.n	801a4d2 <sys_check_timeouts+0x8a>
 801a484:	68bb      	ldr	r3, [r7, #8]
 801a486:	685b      	ldr	r3, [r3, #4]
 801a488:	697a      	ldr	r2, [r7, #20]
 801a48a:	429a      	cmp	r2, r3
 801a48c:	d321      	bcc.n	801a4d2 <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 801a48e:	2301      	movs	r3, #1
 801a490:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 801a492:	68bb      	ldr	r3, [r7, #8]
 801a494:	685a      	ldr	r2, [r3, #4]
 801a496:	4b13      	ldr	r3, [pc, #76]	@ (801a4e4 <sys_check_timeouts+0x9c>)
 801a498:	681b      	ldr	r3, [r3, #0]
 801a49a:	4413      	add	r3, r2
 801a49c:	4a11      	ldr	r2, [pc, #68]	@ (801a4e4 <sys_check_timeouts+0x9c>)
 801a49e:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 801a4a0:	68bb      	ldr	r3, [r7, #8]
 801a4a2:	685b      	ldr	r3, [r3, #4]
 801a4a4:	697a      	ldr	r2, [r7, #20]
 801a4a6:	1ad3      	subs	r3, r2, r3
 801a4a8:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 801a4aa:	68bb      	ldr	r3, [r7, #8]
 801a4ac:	681b      	ldr	r3, [r3, #0]
 801a4ae:	4a0c      	ldr	r2, [pc, #48]	@ (801a4e0 <sys_check_timeouts+0x98>)
 801a4b0:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 801a4b2:	68bb      	ldr	r3, [r7, #8]
 801a4b4:	689b      	ldr	r3, [r3, #8]
 801a4b6:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 801a4b8:	68bb      	ldr	r3, [r7, #8]
 801a4ba:	68db      	ldr	r3, [r3, #12]
 801a4bc:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801a4be:	68b9      	ldr	r1, [r7, #8]
 801a4c0:	2006      	movs	r0, #6
 801a4c2:	f7f9 faa9 	bl	8013a18 <memp_free>
        if (handler != NULL) {
 801a4c6:	687b      	ldr	r3, [r7, #4]
 801a4c8:	2b00      	cmp	r3, #0
 801a4ca:	d002      	beq.n	801a4d2 <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 801a4cc:	687b      	ldr	r3, [r7, #4]
 801a4ce:	6838      	ldr	r0, [r7, #0]
 801a4d0:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 801a4d2:	7cfb      	ldrb	r3, [r7, #19]
 801a4d4:	2b00      	cmp	r3, #0
 801a4d6:	d1c6      	bne.n	801a466 <sys_check_timeouts+0x1e>
  }
}
 801a4d8:	bf00      	nop
 801a4da:	3718      	adds	r7, #24
 801a4dc:	46bd      	mov	sp, r7
 801a4de:	bd80      	pop	{r7, pc}
 801a4e0:	2000dd6c 	.word	0x2000dd6c
 801a4e4:	2000dd70 	.word	0x2000dd70
 801a4e8:	2000db81 	.word	0x2000db81

0801a4ec <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801a4ec:	b480      	push	{r7}
 801a4ee:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 801a4f0:	bf00      	nop
 801a4f2:	46bd      	mov	sp, r7
 801a4f4:	bc80      	pop	{r7}
 801a4f6:	4770      	bx	lr

0801a4f8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801a4f8:	b480      	push	{r7}
 801a4fa:	b083      	sub	sp, #12
 801a4fc:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801a4fe:	2300      	movs	r3, #0
 801a500:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801a502:	4b17      	ldr	r3, [pc, #92]	@ (801a560 <udp_new_port+0x68>)
 801a504:	881b      	ldrh	r3, [r3, #0]
 801a506:	1c5a      	adds	r2, r3, #1
 801a508:	b291      	uxth	r1, r2
 801a50a:	4a15      	ldr	r2, [pc, #84]	@ (801a560 <udp_new_port+0x68>)
 801a50c:	8011      	strh	r1, [r2, #0]
 801a50e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a512:	4293      	cmp	r3, r2
 801a514:	d103      	bne.n	801a51e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801a516:	4b12      	ldr	r3, [pc, #72]	@ (801a560 <udp_new_port+0x68>)
 801a518:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801a51c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a51e:	4b11      	ldr	r3, [pc, #68]	@ (801a564 <udp_new_port+0x6c>)
 801a520:	681b      	ldr	r3, [r3, #0]
 801a522:	603b      	str	r3, [r7, #0]
 801a524:	e011      	b.n	801a54a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801a526:	683b      	ldr	r3, [r7, #0]
 801a528:	8a5a      	ldrh	r2, [r3, #18]
 801a52a:	4b0d      	ldr	r3, [pc, #52]	@ (801a560 <udp_new_port+0x68>)
 801a52c:	881b      	ldrh	r3, [r3, #0]
 801a52e:	429a      	cmp	r2, r3
 801a530:	d108      	bne.n	801a544 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801a532:	88fb      	ldrh	r3, [r7, #6]
 801a534:	3301      	adds	r3, #1
 801a536:	80fb      	strh	r3, [r7, #6]
 801a538:	88fb      	ldrh	r3, [r7, #6]
 801a53a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801a53e:	d3e0      	bcc.n	801a502 <udp_new_port+0xa>
        return 0;
 801a540:	2300      	movs	r3, #0
 801a542:	e007      	b.n	801a554 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a544:	683b      	ldr	r3, [r7, #0]
 801a546:	68db      	ldr	r3, [r3, #12]
 801a548:	603b      	str	r3, [r7, #0]
 801a54a:	683b      	ldr	r3, [r7, #0]
 801a54c:	2b00      	cmp	r3, #0
 801a54e:	d1ea      	bne.n	801a526 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801a550:	4b03      	ldr	r3, [pc, #12]	@ (801a560 <udp_new_port+0x68>)
 801a552:	881b      	ldrh	r3, [r3, #0]
}
 801a554:	4618      	mov	r0, r3
 801a556:	370c      	adds	r7, #12
 801a558:	46bd      	mov	sp, r7
 801a55a:	bc80      	pop	{r7}
 801a55c:	4770      	bx	lr
 801a55e:	bf00      	nop
 801a560:	20000118 	.word	0x20000118
 801a564:	2000dd78 	.word	0x2000dd78

0801a568 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801a568:	b480      	push	{r7}
 801a56a:	b085      	sub	sp, #20
 801a56c:	af00      	add	r7, sp, #0
 801a56e:	60f8      	str	r0, [r7, #12]
 801a570:	60b9      	str	r1, [r7, #8]
 801a572:	4613      	mov	r3, r2
 801a574:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801a576:	79fb      	ldrb	r3, [r7, #7]
 801a578:	2b00      	cmp	r3, #0
 801a57a:	d018      	beq.n	801a5ae <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801a57c:	68fb      	ldr	r3, [r7, #12]
 801a57e:	2b00      	cmp	r3, #0
 801a580:	d013      	beq.n	801a5aa <udp_input_local_match+0x42>
 801a582:	68fb      	ldr	r3, [r7, #12]
 801a584:	681b      	ldr	r3, [r3, #0]
 801a586:	2b00      	cmp	r3, #0
 801a588:	d00f      	beq.n	801a5aa <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801a58a:	4b13      	ldr	r3, [pc, #76]	@ (801a5d8 <udp_input_local_match+0x70>)
 801a58c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801a58e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a592:	d00a      	beq.n	801a5aa <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801a594:	68fb      	ldr	r3, [r7, #12]
 801a596:	681a      	ldr	r2, [r3, #0]
 801a598:	4b0f      	ldr	r3, [pc, #60]	@ (801a5d8 <udp_input_local_match+0x70>)
 801a59a:	695b      	ldr	r3, [r3, #20]
 801a59c:	405a      	eors	r2, r3
 801a59e:	68bb      	ldr	r3, [r7, #8]
 801a5a0:	3308      	adds	r3, #8
 801a5a2:	681b      	ldr	r3, [r3, #0]
 801a5a4:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801a5a6:	2b00      	cmp	r3, #0
 801a5a8:	d110      	bne.n	801a5cc <udp_input_local_match+0x64>
          return 1;
 801a5aa:	2301      	movs	r3, #1
 801a5ac:	e00f      	b.n	801a5ce <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801a5ae:	68fb      	ldr	r3, [r7, #12]
 801a5b0:	2b00      	cmp	r3, #0
 801a5b2:	d009      	beq.n	801a5c8 <udp_input_local_match+0x60>
 801a5b4:	68fb      	ldr	r3, [r7, #12]
 801a5b6:	681b      	ldr	r3, [r3, #0]
 801a5b8:	2b00      	cmp	r3, #0
 801a5ba:	d005      	beq.n	801a5c8 <udp_input_local_match+0x60>
 801a5bc:	68fb      	ldr	r3, [r7, #12]
 801a5be:	681a      	ldr	r2, [r3, #0]
 801a5c0:	4b05      	ldr	r3, [pc, #20]	@ (801a5d8 <udp_input_local_match+0x70>)
 801a5c2:	695b      	ldr	r3, [r3, #20]
 801a5c4:	429a      	cmp	r2, r3
 801a5c6:	d101      	bne.n	801a5cc <udp_input_local_match+0x64>
      return 1;
 801a5c8:	2301      	movs	r3, #1
 801a5ca:	e000      	b.n	801a5ce <udp_input_local_match+0x66>
    }
  }

  return 0;
 801a5cc:	2300      	movs	r3, #0
}
 801a5ce:	4618      	mov	r0, r3
 801a5d0:	3714      	adds	r7, #20
 801a5d2:	46bd      	mov	sp, r7
 801a5d4:	bc80      	pop	{r7}
 801a5d6:	4770      	bx	lr
 801a5d8:	2000a59c 	.word	0x2000a59c

0801a5dc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801a5dc:	b590      	push	{r4, r7, lr}
 801a5de:	b08d      	sub	sp, #52	@ 0x34
 801a5e0:	af02      	add	r7, sp, #8
 801a5e2:	6078      	str	r0, [r7, #4]
 801a5e4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801a5e6:	2300      	movs	r3, #0
 801a5e8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  PERF_START;

  UDP_STATS_INC(udp.recv);
 801a5ea:	4b93      	ldr	r3, [pc, #588]	@ (801a838 <udp_input+0x25c>)
 801a5ec:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
 801a5f0:	3301      	adds	r3, #1
 801a5f2:	b29a      	uxth	r2, r3
 801a5f4:	4b90      	ldr	r3, [pc, #576]	@ (801a838 <udp_input+0x25c>)
 801a5f6:	f8a3 207a 	strh.w	r2, [r3, #122]	@ 0x7a

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801a5fa:	687b      	ldr	r3, [r7, #4]
 801a5fc:	895b      	ldrh	r3, [r3, #10]
 801a5fe:	2b07      	cmp	r3, #7
 801a600:	d81a      	bhi.n	801a638 <udp_input+0x5c>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
 801a602:	4b8d      	ldr	r3, [pc, #564]	@ (801a838 <udp_input+0x25c>)
 801a604:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 801a608:	3301      	adds	r3, #1
 801a60a:	b29a      	uxth	r2, r3
 801a60c:	4b8a      	ldr	r3, [pc, #552]	@ (801a838 <udp_input+0x25c>)
 801a60e:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
    UDP_STATS_INC(udp.drop);
 801a612:	4b89      	ldr	r3, [pc, #548]	@ (801a838 <udp_input+0x25c>)
 801a614:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 801a618:	3301      	adds	r3, #1
 801a61a:	b29a      	uxth	r2, r3
 801a61c:	4b86      	ldr	r3, [pc, #536]	@ (801a838 <udp_input+0x25c>)
 801a61e:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    MIB2_STATS_INC(mib2.udpinerrors);
 801a622:	4b85      	ldr	r3, [pc, #532]	@ (801a838 <udp_input+0x25c>)
 801a624:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 801a628:	3301      	adds	r3, #1
 801a62a:	4a83      	ldr	r2, [pc, #524]	@ (801a838 <udp_input+0x25c>)
 801a62c:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
    pbuf_free(p);
 801a630:	6878      	ldr	r0, [r7, #4]
 801a632:	f7f9 ff4d 	bl	80144d0 <pbuf_free>
    goto end;
 801a636:	e0fa      	b.n	801a82e <udp_input+0x252>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801a638:	687b      	ldr	r3, [r7, #4]
 801a63a:	685b      	ldr	r3, [r3, #4]
 801a63c:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801a63e:	4b7f      	ldr	r3, [pc, #508]	@ (801a83c <udp_input+0x260>)
 801a640:	695b      	ldr	r3, [r3, #20]
 801a642:	4a7e      	ldr	r2, [pc, #504]	@ (801a83c <udp_input+0x260>)
 801a644:	6812      	ldr	r2, [r2, #0]
 801a646:	4611      	mov	r1, r2
 801a648:	4618      	mov	r0, r3
 801a64a:	f003 ffe7 	bl	801e61c <ip4_addr_isbroadcast_u32>
 801a64e:	4603      	mov	r3, r0
 801a650:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801a652:	697b      	ldr	r3, [r7, #20]
 801a654:	881b      	ldrh	r3, [r3, #0]
 801a656:	b29b      	uxth	r3, r3
 801a658:	4618      	mov	r0, r3
 801a65a:	f7f8 fce1 	bl	8013020 <lwip_htons>
 801a65e:	4603      	mov	r3, r0
 801a660:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801a662:	697b      	ldr	r3, [r7, #20]
 801a664:	885b      	ldrh	r3, [r3, #2]
 801a666:	b29b      	uxth	r3, r3
 801a668:	4618      	mov	r0, r3
 801a66a:	f7f8 fcd9 	bl	8013020 <lwip_htons>
 801a66e:	4603      	mov	r3, r0
 801a670:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801a672:	2300      	movs	r3, #0
 801a674:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 801a676:	2300      	movs	r3, #0
 801a678:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801a67a:	2300      	movs	r3, #0
 801a67c:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a67e:	4b70      	ldr	r3, [pc, #448]	@ (801a840 <udp_input+0x264>)
 801a680:	681b      	ldr	r3, [r3, #0]
 801a682:	627b      	str	r3, [r7, #36]	@ 0x24
 801a684:	e044      	b.n	801a710 <udp_input+0x134>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801a686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a688:	8a5b      	ldrh	r3, [r3, #18]
 801a68a:	89fa      	ldrh	r2, [r7, #14]
 801a68c:	429a      	cmp	r2, r3
 801a68e:	d13a      	bne.n	801a706 <udp_input+0x12a>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801a690:	7cfb      	ldrb	r3, [r7, #19]
 801a692:	461a      	mov	r2, r3
 801a694:	6839      	ldr	r1, [r7, #0]
 801a696:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a698:	f7ff ff66 	bl	801a568 <udp_input_local_match>
 801a69c:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801a69e:	2b00      	cmp	r3, #0
 801a6a0:	d031      	beq.n	801a706 <udp_input+0x12a>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 801a6a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6a4:	7c1b      	ldrb	r3, [r3, #16]
 801a6a6:	f003 0304 	and.w	r3, r3, #4
 801a6aa:	2b00      	cmp	r3, #0
 801a6ac:	d104      	bne.n	801a6b8 <udp_input+0xdc>
 801a6ae:	69fb      	ldr	r3, [r7, #28]
 801a6b0:	2b00      	cmp	r3, #0
 801a6b2:	d101      	bne.n	801a6b8 <udp_input+0xdc>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 801a6b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6b6:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801a6b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6ba:	8a9b      	ldrh	r3, [r3, #20]
 801a6bc:	8a3a      	ldrh	r2, [r7, #16]
 801a6be:	429a      	cmp	r2, r3
 801a6c0:	d121      	bne.n	801a706 <udp_input+0x12a>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801a6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6c4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801a6c6:	2b00      	cmp	r3, #0
 801a6c8:	d005      	beq.n	801a6d6 <udp_input+0xfa>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801a6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6cc:	685a      	ldr	r2, [r3, #4]
 801a6ce:	4b5b      	ldr	r3, [pc, #364]	@ (801a83c <udp_input+0x260>)
 801a6d0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801a6d2:	429a      	cmp	r2, r3
 801a6d4:	d117      	bne.n	801a706 <udp_input+0x12a>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801a6d6:	6a3b      	ldr	r3, [r7, #32]
 801a6d8:	2b00      	cmp	r3, #0
 801a6da:	d00b      	beq.n	801a6f4 <udp_input+0x118>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801a6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6de:	68da      	ldr	r2, [r3, #12]
 801a6e0:	6a3b      	ldr	r3, [r7, #32]
 801a6e2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801a6e4:	4b56      	ldr	r3, [pc, #344]	@ (801a840 <udp_input+0x264>)
 801a6e6:	681a      	ldr	r2, [r3, #0]
 801a6e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6ea:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801a6ec:	4a54      	ldr	r2, [pc, #336]	@ (801a840 <udp_input+0x264>)
 801a6ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6f0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801a6f2:	e010      	b.n	801a716 <udp_input+0x13a>
          UDP_STATS_INC(udp.cachehit);
 801a6f4:	4b50      	ldr	r3, [pc, #320]	@ (801a838 <udp_input+0x25c>)
 801a6f6:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 801a6fa:	3301      	adds	r3, #1
 801a6fc:	b29a      	uxth	r2, r3
 801a6fe:	4b4e      	ldr	r3, [pc, #312]	@ (801a838 <udp_input+0x25c>)
 801a700:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
        break;
 801a704:	e007      	b.n	801a716 <udp_input+0x13a>
      }
    }

    prev = pcb;
 801a706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a708:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a70a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a70c:	68db      	ldr	r3, [r3, #12]
 801a70e:	627b      	str	r3, [r7, #36]	@ 0x24
 801a710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a712:	2b00      	cmp	r3, #0
 801a714:	d1b7      	bne.n	801a686 <udp_input+0xaa>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801a716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a718:	2b00      	cmp	r3, #0
 801a71a:	d101      	bne.n	801a720 <udp_input+0x144>
    pcb = uncon_pcb;
 801a71c:	69fb      	ldr	r3, [r7, #28]
 801a71e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801a720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a722:	2b00      	cmp	r3, #0
 801a724:	d002      	beq.n	801a72c <udp_input+0x150>
    for_us = 1;
 801a726:	2301      	movs	r3, #1
 801a728:	76fb      	strb	r3, [r7, #27]
 801a72a:	e00a      	b.n	801a742 <udp_input+0x166>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801a72c:	683b      	ldr	r3, [r7, #0]
 801a72e:	3304      	adds	r3, #4
 801a730:	681a      	ldr	r2, [r3, #0]
 801a732:	4b42      	ldr	r3, [pc, #264]	@ (801a83c <udp_input+0x260>)
 801a734:	695b      	ldr	r3, [r3, #20]
 801a736:	429a      	cmp	r2, r3
 801a738:	bf0c      	ite	eq
 801a73a:	2301      	moveq	r3, #1
 801a73c:	2300      	movne	r3, #0
 801a73e:	b2db      	uxtb	r3, r3
 801a740:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801a742:	7efb      	ldrb	r3, [r7, #27]
 801a744:	2b00      	cmp	r3, #0
 801a746:	d06f      	beq.n	801a828 <udp_input+0x24c>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 801a748:	f06f 0107 	mvn.w	r1, #7
 801a74c:	6878      	ldr	r0, [r7, #4]
 801a74e:	f7f9 fe9b 	bl	8014488 <pbuf_header>
 801a752:	4603      	mov	r3, r0
 801a754:	2b00      	cmp	r3, #0
 801a756:	d019      	beq.n	801a78c <udp_input+0x1b0>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 801a758:	4b3a      	ldr	r3, [pc, #232]	@ (801a844 <udp_input+0x268>)
 801a75a:	f240 1255 	movw	r2, #341	@ 0x155
 801a75e:	493a      	ldr	r1, [pc, #232]	@ (801a848 <udp_input+0x26c>)
 801a760:	483a      	ldr	r0, [pc, #232]	@ (801a84c <udp_input+0x270>)
 801a762:	f005 fe9d 	bl	80204a0 <iprintf>
      UDP_STATS_INC(udp.drop);
 801a766:	4b34      	ldr	r3, [pc, #208]	@ (801a838 <udp_input+0x25c>)
 801a768:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 801a76c:	3301      	adds	r3, #1
 801a76e:	b29a      	uxth	r2, r3
 801a770:	4b31      	ldr	r3, [pc, #196]	@ (801a838 <udp_input+0x25c>)
 801a772:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
      MIB2_STATS_INC(mib2.udpinerrors);
 801a776:	4b30      	ldr	r3, [pc, #192]	@ (801a838 <udp_input+0x25c>)
 801a778:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 801a77c:	3301      	adds	r3, #1
 801a77e:	4a2e      	ldr	r2, [pc, #184]	@ (801a838 <udp_input+0x25c>)
 801a780:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
      pbuf_free(p);
 801a784:	6878      	ldr	r0, [r7, #4]
 801a786:	f7f9 fea3 	bl	80144d0 <pbuf_free>
      goto end;
 801a78a:	e050      	b.n	801a82e <udp_input+0x252>
    }

    if (pcb != NULL) {
 801a78c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a78e:	2b00      	cmp	r3, #0
 801a790:	d019      	beq.n	801a7c6 <udp_input+0x1ea>
      MIB2_STATS_INC(mib2.udpindatagrams);
 801a792:	4b29      	ldr	r3, [pc, #164]	@ (801a838 <udp_input+0x25c>)
 801a794:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 801a798:	3301      	adds	r3, #1
 801a79a:	4a27      	ldr	r2, [pc, #156]	@ (801a838 <udp_input+0x25c>)
 801a79c:	f8c2 313c 	str.w	r3, [r2, #316]	@ 0x13c
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801a7a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7a2:	699b      	ldr	r3, [r3, #24]
 801a7a4:	2b00      	cmp	r3, #0
 801a7a6:	d00a      	beq.n	801a7be <udp_input+0x1e2>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801a7a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7aa:	699c      	ldr	r4, [r3, #24]
 801a7ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7ae:	69d8      	ldr	r0, [r3, #28]
 801a7b0:	8a3b      	ldrh	r3, [r7, #16]
 801a7b2:	9300      	str	r3, [sp, #0]
 801a7b4:	4b26      	ldr	r3, [pc, #152]	@ (801a850 <udp_input+0x274>)
 801a7b6:	687a      	ldr	r2, [r7, #4]
 801a7b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801a7ba:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801a7bc:	e038      	b.n	801a830 <udp_input+0x254>
        pbuf_free(p);
 801a7be:	6878      	ldr	r0, [r7, #4]
 801a7c0:	f7f9 fe86 	bl	80144d0 <pbuf_free>
        goto end;
 801a7c4:	e033      	b.n	801a82e <udp_input+0x252>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801a7c6:	7cfb      	ldrb	r3, [r7, #19]
 801a7c8:	2b00      	cmp	r3, #0
 801a7ca:	d112      	bne.n	801a7f2 <udp_input+0x216>
 801a7cc:	4b1b      	ldr	r3, [pc, #108]	@ (801a83c <udp_input+0x260>)
 801a7ce:	695b      	ldr	r3, [r3, #20]
 801a7d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801a7d4:	2be0      	cmp	r3, #224	@ 0xe0
 801a7d6:	d00c      	beq.n	801a7f2 <udp_input+0x216>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801a7d8:	4b18      	ldr	r3, [pc, #96]	@ (801a83c <udp_input+0x260>)
 801a7da:	899b      	ldrh	r3, [r3, #12]
 801a7dc:	3308      	adds	r3, #8
 801a7de:	b29b      	uxth	r3, r3
 801a7e0:	b21b      	sxth	r3, r3
 801a7e2:	4619      	mov	r1, r3
 801a7e4:	6878      	ldr	r0, [r7, #4]
 801a7e6:	f7f9 fe61 	bl	80144ac <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801a7ea:	2103      	movs	r1, #3
 801a7ec:	6878      	ldr	r0, [r7, #4]
 801a7ee:	f003 fafd 	bl	801ddec <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
 801a7f2:	4b11      	ldr	r3, [pc, #68]	@ (801a838 <udp_input+0x25c>)
 801a7f4:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 801a7f8:	3301      	adds	r3, #1
 801a7fa:	b29a      	uxth	r2, r3
 801a7fc:	4b0e      	ldr	r3, [pc, #56]	@ (801a838 <udp_input+0x25c>)
 801a7fe:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
      UDP_STATS_INC(udp.drop);
 801a802:	4b0d      	ldr	r3, [pc, #52]	@ (801a838 <udp_input+0x25c>)
 801a804:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 801a808:	3301      	adds	r3, #1
 801a80a:	b29a      	uxth	r2, r3
 801a80c:	4b0a      	ldr	r3, [pc, #40]	@ (801a838 <udp_input+0x25c>)
 801a80e:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
      MIB2_STATS_INC(mib2.udpnoports);
 801a812:	4b09      	ldr	r3, [pc, #36]	@ (801a838 <udp_input+0x25c>)
 801a814:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 801a818:	3301      	adds	r3, #1
 801a81a:	4a07      	ldr	r2, [pc, #28]	@ (801a838 <udp_input+0x25c>)
 801a81c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
      pbuf_free(p);
 801a820:	6878      	ldr	r0, [r7, #4]
 801a822:	f7f9 fe55 	bl	80144d0 <pbuf_free>
  return;
 801a826:	e003      	b.n	801a830 <udp_input+0x254>
    pbuf_free(p);
 801a828:	6878      	ldr	r0, [r7, #4]
 801a82a:	f7f9 fe51 	bl	80144d0 <pbuf_free>
  return;
 801a82e:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801a830:	372c      	adds	r7, #44	@ 0x2c
 801a832:	46bd      	mov	sp, r7
 801a834:	bd90      	pop	{r4, r7, pc}
 801a836:	bf00      	nop
 801a838:	2000db84 	.word	0x2000db84
 801a83c:	2000a59c 	.word	0x2000a59c
 801a840:	2000dd78 	.word	0x2000dd78
 801a844:	0802530c 	.word	0x0802530c
 801a848:	0802533c 	.word	0x0802533c
 801a84c:	08025350 	.word	0x08025350
 801a850:	2000a5ac 	.word	0x2000a5ac

0801a854 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
 801a854:	b580      	push	{r7, lr}
 801a856:	b088      	sub	sp, #32
 801a858:	af02      	add	r7, sp, #8
 801a85a:	60f8      	str	r0, [r7, #12]
 801a85c:	60b9      	str	r1, [r7, #8]
 801a85e:	607a      	str	r2, [r7, #4]
 801a860:	807b      	strh	r3, [r7, #2]
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
 801a862:	687b      	ldr	r3, [r7, #4]
 801a864:	617b      	str	r3, [r7, #20]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 801a866:	68fb      	ldr	r3, [r7, #12]
 801a868:	2b00      	cmp	r3, #0
 801a86a:	d002      	beq.n	801a872 <udp_sendto+0x1e>
 801a86c:	687b      	ldr	r3, [r7, #4]
 801a86e:	2b00      	cmp	r3, #0
 801a870:	d102      	bne.n	801a878 <udp_sendto+0x24>
    return ERR_VAL;
 801a872:	f06f 0305 	mvn.w	r3, #5
 801a876:	e01b      	b.n	801a8b0 <udp_sendto+0x5c>
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 801a878:	6978      	ldr	r0, [r7, #20]
 801a87a:	f003 fb6b 	bl	801df54 <ip4_route>
 801a87e:	6138      	str	r0, [r7, #16]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801a880:	693b      	ldr	r3, [r7, #16]
 801a882:	2b00      	cmp	r3, #0
 801a884:	d10a      	bne.n	801a89c <udp_sendto+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
 801a886:	4b0c      	ldr	r3, [pc, #48]	@ (801a8b8 <udp_sendto+0x64>)
 801a888:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 801a88c:	3301      	adds	r3, #1
 801a88e:	b29a      	uxth	r2, r3
 801a890:	4b09      	ldr	r3, [pc, #36]	@ (801a8b8 <udp_sendto+0x64>)
 801a892:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
    return ERR_RTE;
 801a896:	f06f 0303 	mvn.w	r3, #3
 801a89a:	e009      	b.n	801a8b0 <udp_sendto+0x5c>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801a89c:	887a      	ldrh	r2, [r7, #2]
 801a89e:	693b      	ldr	r3, [r7, #16]
 801a8a0:	9300      	str	r3, [sp, #0]
 801a8a2:	4613      	mov	r3, r2
 801a8a4:	687a      	ldr	r2, [r7, #4]
 801a8a6:	68b9      	ldr	r1, [r7, #8]
 801a8a8:	68f8      	ldr	r0, [r7, #12]
 801a8aa:	f000 f807 	bl	801a8bc <udp_sendto_if>
 801a8ae:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801a8b0:	4618      	mov	r0, r3
 801a8b2:	3718      	adds	r7, #24
 801a8b4:	46bd      	mov	sp, r7
 801a8b6:	bd80      	pop	{r7, pc}
 801a8b8:	2000db84 	.word	0x2000db84

0801a8bc <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801a8bc:	b580      	push	{r7, lr}
 801a8be:	b088      	sub	sp, #32
 801a8c0:	af02      	add	r7, sp, #8
 801a8c2:	60f8      	str	r0, [r7, #12]
 801a8c4:	60b9      	str	r1, [r7, #8]
 801a8c6:	607a      	str	r2, [r7, #4]
 801a8c8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 801a8ca:	68fb      	ldr	r3, [r7, #12]
 801a8cc:	2b00      	cmp	r3, #0
 801a8ce:	d002      	beq.n	801a8d6 <udp_sendto_if+0x1a>
 801a8d0:	687b      	ldr	r3, [r7, #4]
 801a8d2:	2b00      	cmp	r3, #0
 801a8d4:	d102      	bne.n	801a8dc <udp_sendto_if+0x20>
    return ERR_VAL;
 801a8d6:	f06f 0305 	mvn.w	r3, #5
 801a8da:	e028      	b.n	801a92e <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801a8dc:	68fb      	ldr	r3, [r7, #12]
 801a8de:	2b00      	cmp	r3, #0
 801a8e0:	d009      	beq.n	801a8f6 <udp_sendto_if+0x3a>
 801a8e2:	68fb      	ldr	r3, [r7, #12]
 801a8e4:	681b      	ldr	r3, [r3, #0]
 801a8e6:	2b00      	cmp	r3, #0
 801a8e8:	d005      	beq.n	801a8f6 <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801a8ea:	68fb      	ldr	r3, [r7, #12]
 801a8ec:	681b      	ldr	r3, [r3, #0]
 801a8ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801a8f2:	2be0      	cmp	r3, #224	@ 0xe0
 801a8f4:	d103      	bne.n	801a8fe <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 801a8f6:	6a3b      	ldr	r3, [r7, #32]
 801a8f8:	3304      	adds	r3, #4
 801a8fa:	617b      	str	r3, [r7, #20]
 801a8fc:	e00b      	b.n	801a916 <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801a8fe:	68fb      	ldr	r3, [r7, #12]
 801a900:	681a      	ldr	r2, [r3, #0]
 801a902:	6a3b      	ldr	r3, [r7, #32]
 801a904:	3304      	adds	r3, #4
 801a906:	681b      	ldr	r3, [r3, #0]
 801a908:	429a      	cmp	r2, r3
 801a90a:	d002      	beq.n	801a912 <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 801a90c:	f06f 0303 	mvn.w	r3, #3
 801a910:	e00d      	b.n	801a92e <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 801a912:	68fb      	ldr	r3, [r7, #12]
 801a914:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801a916:	887a      	ldrh	r2, [r7, #2]
 801a918:	697b      	ldr	r3, [r7, #20]
 801a91a:	9301      	str	r3, [sp, #4]
 801a91c:	6a3b      	ldr	r3, [r7, #32]
 801a91e:	9300      	str	r3, [sp, #0]
 801a920:	4613      	mov	r3, r2
 801a922:	687a      	ldr	r2, [r7, #4]
 801a924:	68b9      	ldr	r1, [r7, #8]
 801a926:	68f8      	ldr	r0, [r7, #12]
 801a928:	f000 f806 	bl	801a938 <udp_sendto_if_src>
 801a92c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801a92e:	4618      	mov	r0, r3
 801a930:	3718      	adds	r7, #24
 801a932:	46bd      	mov	sp, r7
 801a934:	bd80      	pop	{r7, pc}
	...

0801a938 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801a938:	b580      	push	{r7, lr}
 801a93a:	b08c      	sub	sp, #48	@ 0x30
 801a93c:	af04      	add	r7, sp, #16
 801a93e:	60f8      	str	r0, [r7, #12]
 801a940:	60b9      	str	r1, [r7, #8]
 801a942:	607a      	str	r2, [r7, #4]
 801a944:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 801a946:	68fb      	ldr	r3, [r7, #12]
 801a948:	2b00      	cmp	r3, #0
 801a94a:	d002      	beq.n	801a952 <udp_sendto_if_src+0x1a>
 801a94c:	687b      	ldr	r3, [r7, #4]
 801a94e:	2b00      	cmp	r3, #0
 801a950:	d102      	bne.n	801a958 <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 801a952:	f06f 0305 	mvn.w	r3, #5
 801a956:	e08d      	b.n	801aa74 <udp_sendto_if_src+0x13c>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801a958:	68fb      	ldr	r3, [r7, #12]
 801a95a:	8a5b      	ldrh	r3, [r3, #18]
 801a95c:	2b00      	cmp	r3, #0
 801a95e:	d10f      	bne.n	801a980 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801a960:	68f9      	ldr	r1, [r7, #12]
 801a962:	68fb      	ldr	r3, [r7, #12]
 801a964:	8a5b      	ldrh	r3, [r3, #18]
 801a966:	461a      	mov	r2, r3
 801a968:	68f8      	ldr	r0, [r7, #12]
 801a96a:	f000 f88f 	bl	801aa8c <udp_bind>
 801a96e:	4603      	mov	r3, r0
 801a970:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801a972:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801a976:	2b00      	cmp	r3, #0
 801a978:	d002      	beq.n	801a980 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801a97a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801a97e:	e079      	b.n	801aa74 <udp_sendto_if_src+0x13c>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 801a980:	2108      	movs	r1, #8
 801a982:	68b8      	ldr	r0, [r7, #8]
 801a984:	f7f9 fd80 	bl	8014488 <pbuf_header>
 801a988:	4603      	mov	r3, r0
 801a98a:	2b00      	cmp	r3, #0
 801a98c:	d014      	beq.n	801a9b8 <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801a98e:	2200      	movs	r2, #0
 801a990:	2108      	movs	r1, #8
 801a992:	2001      	movs	r0, #1
 801a994:	f7f9 fa24 	bl	8013de0 <pbuf_alloc>
 801a998:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801a99a:	69fb      	ldr	r3, [r7, #28]
 801a99c:	2b00      	cmp	r3, #0
 801a99e:	d102      	bne.n	801a9a6 <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801a9a0:	f04f 33ff 	mov.w	r3, #4294967295
 801a9a4:	e066      	b.n	801aa74 <udp_sendto_if_src+0x13c>
    }
    if (p->tot_len != 0) {
 801a9a6:	68bb      	ldr	r3, [r7, #8]
 801a9a8:	891b      	ldrh	r3, [r3, #8]
 801a9aa:	2b00      	cmp	r3, #0
 801a9ac:	d006      	beq.n	801a9bc <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801a9ae:	68b9      	ldr	r1, [r7, #8]
 801a9b0:	69f8      	ldr	r0, [r7, #28]
 801a9b2:	f7f9 feaf 	bl	8014714 <pbuf_chain>
 801a9b6:	e001      	b.n	801a9bc <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801a9b8:	68bb      	ldr	r3, [r7, #8]
 801a9ba:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801a9bc:	69fb      	ldr	r3, [r7, #28]
 801a9be:	895b      	ldrh	r3, [r3, #10]
 801a9c0:	2b07      	cmp	r3, #7
 801a9c2:	d806      	bhi.n	801a9d2 <udp_sendto_if_src+0x9a>
 801a9c4:	4b2d      	ldr	r3, [pc, #180]	@ (801aa7c <udp_sendto_if_src+0x144>)
 801a9c6:	f240 22db 	movw	r2, #731	@ 0x2db
 801a9ca:	492d      	ldr	r1, [pc, #180]	@ (801aa80 <udp_sendto_if_src+0x148>)
 801a9cc:	482d      	ldr	r0, [pc, #180]	@ (801aa84 <udp_sendto_if_src+0x14c>)
 801a9ce:	f005 fd67 	bl	80204a0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801a9d2:	69fb      	ldr	r3, [r7, #28]
 801a9d4:	685b      	ldr	r3, [r3, #4]
 801a9d6:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801a9d8:	68fb      	ldr	r3, [r7, #12]
 801a9da:	8a5b      	ldrh	r3, [r3, #18]
 801a9dc:	4618      	mov	r0, r3
 801a9de:	f7f8 fb1f 	bl	8013020 <lwip_htons>
 801a9e2:	4603      	mov	r3, r0
 801a9e4:	461a      	mov	r2, r3
 801a9e6:	697b      	ldr	r3, [r7, #20]
 801a9e8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801a9ea:	887b      	ldrh	r3, [r7, #2]
 801a9ec:	4618      	mov	r0, r3
 801a9ee:	f7f8 fb17 	bl	8013020 <lwip_htons>
 801a9f2:	4603      	mov	r3, r0
 801a9f4:	461a      	mov	r2, r3
 801a9f6:	697b      	ldr	r3, [r7, #20]
 801a9f8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801a9fa:	697b      	ldr	r3, [r7, #20]
 801a9fc:	2200      	movs	r2, #0
 801a9fe:	719a      	strb	r2, [r3, #6]
 801aa00:	2200      	movs	r2, #0
 801aa02:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801aa04:	69fb      	ldr	r3, [r7, #28]
 801aa06:	891b      	ldrh	r3, [r3, #8]
 801aa08:	4618      	mov	r0, r3
 801aa0a:	f7f8 fb09 	bl	8013020 <lwip_htons>
 801aa0e:	4603      	mov	r3, r0
 801aa10:	461a      	mov	r2, r3
 801aa12:	697b      	ldr	r3, [r7, #20]
 801aa14:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801aa16:	2311      	movs	r3, #17
 801aa18:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801aa1a:	68fb      	ldr	r3, [r7, #12]
 801aa1c:	7a9b      	ldrb	r3, [r3, #10]
 801aa1e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801aa20:	68fb      	ldr	r3, [r7, #12]
 801aa22:	7a5b      	ldrb	r3, [r3, #9]
 801aa24:	7cb9      	ldrb	r1, [r7, #18]
 801aa26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801aa28:	9202      	str	r2, [sp, #8]
 801aa2a:	7cfa      	ldrb	r2, [r7, #19]
 801aa2c:	9201      	str	r2, [sp, #4]
 801aa2e:	9300      	str	r3, [sp, #0]
 801aa30:	460b      	mov	r3, r1
 801aa32:	687a      	ldr	r2, [r7, #4]
 801aa34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801aa36:	69f8      	ldr	r0, [r7, #28]
 801aa38:	f003 fd28 	bl	801e48c <ip4_output_if_src>
 801aa3c:	4603      	mov	r3, r0
 801aa3e:	76fb      	strb	r3, [r7, #27]
  NETIF_SET_HWADDRHINT(netif, NULL);

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);
 801aa40:	4b11      	ldr	r3, [pc, #68]	@ (801aa88 <udp_sendto_if_src+0x150>)
 801aa42:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 801aa46:	3301      	adds	r3, #1
 801aa48:	4a0f      	ldr	r2, [pc, #60]	@ (801aa88 <udp_sendto_if_src+0x150>)
 801aa4a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801aa4e:	69fa      	ldr	r2, [r7, #28]
 801aa50:	68bb      	ldr	r3, [r7, #8]
 801aa52:	429a      	cmp	r2, r3
 801aa54:	d004      	beq.n	801aa60 <udp_sendto_if_src+0x128>
    /* free the header pbuf */
    pbuf_free(q);
 801aa56:	69f8      	ldr	r0, [r7, #28]
 801aa58:	f7f9 fd3a 	bl	80144d0 <pbuf_free>
    q = NULL;
 801aa5c:	2300      	movs	r3, #0
 801aa5e:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
 801aa60:	4b09      	ldr	r3, [pc, #36]	@ (801aa88 <udp_sendto_if_src+0x150>)
 801aa62:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 801aa66:	3301      	adds	r3, #1
 801aa68:	b29a      	uxth	r2, r3
 801aa6a:	4b07      	ldr	r3, [pc, #28]	@ (801aa88 <udp_sendto_if_src+0x150>)
 801aa6c:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
  return err;
 801aa70:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801aa74:	4618      	mov	r0, r3
 801aa76:	3720      	adds	r7, #32
 801aa78:	46bd      	mov	sp, r7
 801aa7a:	bd80      	pop	{r7, pc}
 801aa7c:	0802530c 	.word	0x0802530c
 801aa80:	08025378 	.word	0x08025378
 801aa84:	08025350 	.word	0x08025350
 801aa88:	2000db84 	.word	0x2000db84

0801aa8c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801aa8c:	b580      	push	{r7, lr}
 801aa8e:	b086      	sub	sp, #24
 801aa90:	af00      	add	r7, sp, #0
 801aa92:	60f8      	str	r0, [r7, #12]
 801aa94:	60b9      	str	r1, [r7, #8]
 801aa96:	4613      	mov	r3, r2
 801aa98:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801aa9a:	68bb      	ldr	r3, [r7, #8]
 801aa9c:	2b00      	cmp	r3, #0
 801aa9e:	d101      	bne.n	801aaa4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801aaa0:	4b30      	ldr	r3, [pc, #192]	@ (801ab64 <udp_bind+0xd8>)
 801aaa2:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 801aaa4:	68fb      	ldr	r3, [r7, #12]
 801aaa6:	2b00      	cmp	r3, #0
 801aaa8:	d002      	beq.n	801aab0 <udp_bind+0x24>
 801aaaa:	68bb      	ldr	r3, [r7, #8]
 801aaac:	2b00      	cmp	r3, #0
 801aaae:	d102      	bne.n	801aab6 <udp_bind+0x2a>
    return ERR_VAL;
 801aab0:	f06f 0305 	mvn.w	r3, #5
 801aab4:	e052      	b.n	801ab5c <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801aab6:	2300      	movs	r3, #0
 801aab8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801aaba:	4b2b      	ldr	r3, [pc, #172]	@ (801ab68 <udp_bind+0xdc>)
 801aabc:	681b      	ldr	r3, [r3, #0]
 801aabe:	617b      	str	r3, [r7, #20]
 801aac0:	e009      	b.n	801aad6 <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801aac2:	68fa      	ldr	r2, [r7, #12]
 801aac4:	697b      	ldr	r3, [r7, #20]
 801aac6:	429a      	cmp	r2, r3
 801aac8:	d102      	bne.n	801aad0 <udp_bind+0x44>
      rebind = 1;
 801aaca:	2301      	movs	r3, #1
 801aacc:	74fb      	strb	r3, [r7, #19]
      break;
 801aace:	e005      	b.n	801aadc <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801aad0:	697b      	ldr	r3, [r7, #20]
 801aad2:	68db      	ldr	r3, [r3, #12]
 801aad4:	617b      	str	r3, [r7, #20]
 801aad6:	697b      	ldr	r3, [r7, #20]
 801aad8:	2b00      	cmp	r3, #0
 801aada:	d1f2      	bne.n	801aac2 <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 801aadc:	88fb      	ldrh	r3, [r7, #6]
 801aade:	2b00      	cmp	r3, #0
 801aae0:	d109      	bne.n	801aaf6 <udp_bind+0x6a>
    port = udp_new_port();
 801aae2:	f7ff fd09 	bl	801a4f8 <udp_new_port>
 801aae6:	4603      	mov	r3, r0
 801aae8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801aaea:	88fb      	ldrh	r3, [r7, #6]
 801aaec:	2b00      	cmp	r3, #0
 801aaee:	d11e      	bne.n	801ab2e <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801aaf0:	f06f 0307 	mvn.w	r3, #7
 801aaf4:	e032      	b.n	801ab5c <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801aaf6:	4b1c      	ldr	r3, [pc, #112]	@ (801ab68 <udp_bind+0xdc>)
 801aaf8:	681b      	ldr	r3, [r3, #0]
 801aafa:	617b      	str	r3, [r7, #20]
 801aafc:	e014      	b.n	801ab28 <udp_bind+0x9c>
      if (pcb != ipcb) {
 801aafe:	68fa      	ldr	r2, [r7, #12]
 801ab00:	697b      	ldr	r3, [r7, #20]
 801ab02:	429a      	cmp	r2, r3
 801ab04:	d00d      	beq.n	801ab22 <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801ab06:	697b      	ldr	r3, [r7, #20]
 801ab08:	8a5b      	ldrh	r3, [r3, #18]
 801ab0a:	88fa      	ldrh	r2, [r7, #6]
 801ab0c:	429a      	cmp	r2, r3
 801ab0e:	d108      	bne.n	801ab22 <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 801ab10:	697b      	ldr	r3, [r7, #20]
 801ab12:	681a      	ldr	r2, [r3, #0]
 801ab14:	68bb      	ldr	r3, [r7, #8]
 801ab16:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801ab18:	429a      	cmp	r2, r3
 801ab1a:	d102      	bne.n	801ab22 <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801ab1c:	f06f 0307 	mvn.w	r3, #7
 801ab20:	e01c      	b.n	801ab5c <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ab22:	697b      	ldr	r3, [r7, #20]
 801ab24:	68db      	ldr	r3, [r3, #12]
 801ab26:	617b      	str	r3, [r7, #20]
 801ab28:	697b      	ldr	r3, [r7, #20]
 801ab2a:	2b00      	cmp	r3, #0
 801ab2c:	d1e7      	bne.n	801aafe <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801ab2e:	68bb      	ldr	r3, [r7, #8]
 801ab30:	2b00      	cmp	r3, #0
 801ab32:	d002      	beq.n	801ab3a <udp_bind+0xae>
 801ab34:	68bb      	ldr	r3, [r7, #8]
 801ab36:	681b      	ldr	r3, [r3, #0]
 801ab38:	e000      	b.n	801ab3c <udp_bind+0xb0>
 801ab3a:	2300      	movs	r3, #0
 801ab3c:	68fa      	ldr	r2, [r7, #12]
 801ab3e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801ab40:	68fb      	ldr	r3, [r7, #12]
 801ab42:	88fa      	ldrh	r2, [r7, #6]
 801ab44:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801ab46:	7cfb      	ldrb	r3, [r7, #19]
 801ab48:	2b00      	cmp	r3, #0
 801ab4a:	d106      	bne.n	801ab5a <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801ab4c:	4b06      	ldr	r3, [pc, #24]	@ (801ab68 <udp_bind+0xdc>)
 801ab4e:	681a      	ldr	r2, [r3, #0]
 801ab50:	68fb      	ldr	r3, [r7, #12]
 801ab52:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801ab54:	4a04      	ldr	r2, [pc, #16]	@ (801ab68 <udp_bind+0xdc>)
 801ab56:	68fb      	ldr	r3, [r7, #12]
 801ab58:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801ab5a:	2300      	movs	r3, #0
}
 801ab5c:	4618      	mov	r0, r3
 801ab5e:	3718      	adds	r7, #24
 801ab60:	46bd      	mov	sp, r7
 801ab62:	bd80      	pop	{r7, pc}
 801ab64:	0802f050 	.word	0x0802f050
 801ab68:	2000dd78 	.word	0x2000dd78

0801ab6c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801ab6c:	b580      	push	{r7, lr}
 801ab6e:	b086      	sub	sp, #24
 801ab70:	af00      	add	r7, sp, #0
 801ab72:	60f8      	str	r0, [r7, #12]
 801ab74:	60b9      	str	r1, [r7, #8]
 801ab76:	4613      	mov	r3, r2
 801ab78:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 801ab7a:	68fb      	ldr	r3, [r7, #12]
 801ab7c:	2b00      	cmp	r3, #0
 801ab7e:	d002      	beq.n	801ab86 <udp_connect+0x1a>
 801ab80:	68bb      	ldr	r3, [r7, #8]
 801ab82:	2b00      	cmp	r3, #0
 801ab84:	d102      	bne.n	801ab8c <udp_connect+0x20>
    return ERR_VAL;
 801ab86:	f06f 0305 	mvn.w	r3, #5
 801ab8a:	e03e      	b.n	801ac0a <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 801ab8c:	68fb      	ldr	r3, [r7, #12]
 801ab8e:	8a5b      	ldrh	r3, [r3, #18]
 801ab90:	2b00      	cmp	r3, #0
 801ab92:	d10f      	bne.n	801abb4 <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801ab94:	68f9      	ldr	r1, [r7, #12]
 801ab96:	68fb      	ldr	r3, [r7, #12]
 801ab98:	8a5b      	ldrh	r3, [r3, #18]
 801ab9a:	461a      	mov	r2, r3
 801ab9c:	68f8      	ldr	r0, [r7, #12]
 801ab9e:	f7ff ff75 	bl	801aa8c <udp_bind>
 801aba2:	4603      	mov	r3, r0
 801aba4:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801aba6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801abaa:	2b00      	cmp	r3, #0
 801abac:	d002      	beq.n	801abb4 <udp_connect+0x48>
      return err;
 801abae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801abb2:	e02a      	b.n	801ac0a <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801abb4:	68bb      	ldr	r3, [r7, #8]
 801abb6:	2b00      	cmp	r3, #0
 801abb8:	d002      	beq.n	801abc0 <udp_connect+0x54>
 801abba:	68bb      	ldr	r3, [r7, #8]
 801abbc:	681b      	ldr	r3, [r3, #0]
 801abbe:	e000      	b.n	801abc2 <udp_connect+0x56>
 801abc0:	2300      	movs	r3, #0
 801abc2:	68fa      	ldr	r2, [r7, #12]
 801abc4:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 801abc6:	68fb      	ldr	r3, [r7, #12]
 801abc8:	88fa      	ldrh	r2, [r7, #6]
 801abca:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801abcc:	68fb      	ldr	r3, [r7, #12]
 801abce:	7c1b      	ldrb	r3, [r3, #16]
 801abd0:	f043 0304 	orr.w	r3, r3, #4
 801abd4:	b2da      	uxtb	r2, r3
 801abd6:	68fb      	ldr	r3, [r7, #12]
 801abd8:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801abda:	4b0e      	ldr	r3, [pc, #56]	@ (801ac14 <udp_connect+0xa8>)
 801abdc:	681b      	ldr	r3, [r3, #0]
 801abde:	617b      	str	r3, [r7, #20]
 801abe0:	e008      	b.n	801abf4 <udp_connect+0x88>
    if (pcb == ipcb) {
 801abe2:	68fa      	ldr	r2, [r7, #12]
 801abe4:	697b      	ldr	r3, [r7, #20]
 801abe6:	429a      	cmp	r2, r3
 801abe8:	d101      	bne.n	801abee <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 801abea:	2300      	movs	r3, #0
 801abec:	e00d      	b.n	801ac0a <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801abee:	697b      	ldr	r3, [r7, #20]
 801abf0:	68db      	ldr	r3, [r3, #12]
 801abf2:	617b      	str	r3, [r7, #20]
 801abf4:	697b      	ldr	r3, [r7, #20]
 801abf6:	2b00      	cmp	r3, #0
 801abf8:	d1f3      	bne.n	801abe2 <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801abfa:	4b06      	ldr	r3, [pc, #24]	@ (801ac14 <udp_connect+0xa8>)
 801abfc:	681a      	ldr	r2, [r3, #0]
 801abfe:	68fb      	ldr	r3, [r7, #12]
 801ac00:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801ac02:	4a04      	ldr	r2, [pc, #16]	@ (801ac14 <udp_connect+0xa8>)
 801ac04:	68fb      	ldr	r3, [r7, #12]
 801ac06:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801ac08:	2300      	movs	r3, #0
}
 801ac0a:	4618      	mov	r0, r3
 801ac0c:	3718      	adds	r7, #24
 801ac0e:	46bd      	mov	sp, r7
 801ac10:	bd80      	pop	{r7, pc}
 801ac12:	bf00      	nop
 801ac14:	2000dd78 	.word	0x2000dd78

0801ac18 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801ac18:	b480      	push	{r7}
 801ac1a:	b085      	sub	sp, #20
 801ac1c:	af00      	add	r7, sp, #0
 801ac1e:	60f8      	str	r0, [r7, #12]
 801ac20:	60b9      	str	r1, [r7, #8]
 801ac22:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 801ac24:	68fb      	ldr	r3, [r7, #12]
 801ac26:	68ba      	ldr	r2, [r7, #8]
 801ac28:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801ac2a:	68fb      	ldr	r3, [r7, #12]
 801ac2c:	687a      	ldr	r2, [r7, #4]
 801ac2e:	61da      	str	r2, [r3, #28]
}
 801ac30:	bf00      	nop
 801ac32:	3714      	adds	r7, #20
 801ac34:	46bd      	mov	sp, r7
 801ac36:	bc80      	pop	{r7}
 801ac38:	4770      	bx	lr
	...

0801ac3c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801ac3c:	b580      	push	{r7, lr}
 801ac3e:	b084      	sub	sp, #16
 801ac40:	af00      	add	r7, sp, #0
 801ac42:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801ac44:	4b15      	ldr	r3, [pc, #84]	@ (801ac9c <udp_remove+0x60>)
 801ac46:	681b      	ldr	r3, [r3, #0]
 801ac48:	687a      	ldr	r2, [r7, #4]
 801ac4a:	429a      	cmp	r2, r3
 801ac4c:	d105      	bne.n	801ac5a <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801ac4e:	4b13      	ldr	r3, [pc, #76]	@ (801ac9c <udp_remove+0x60>)
 801ac50:	681b      	ldr	r3, [r3, #0]
 801ac52:	68db      	ldr	r3, [r3, #12]
 801ac54:	4a11      	ldr	r2, [pc, #68]	@ (801ac9c <udp_remove+0x60>)
 801ac56:	6013      	str	r3, [r2, #0]
 801ac58:	e017      	b.n	801ac8a <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801ac5a:	4b10      	ldr	r3, [pc, #64]	@ (801ac9c <udp_remove+0x60>)
 801ac5c:	681b      	ldr	r3, [r3, #0]
 801ac5e:	60fb      	str	r3, [r7, #12]
 801ac60:	e010      	b.n	801ac84 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801ac62:	68fb      	ldr	r3, [r7, #12]
 801ac64:	68db      	ldr	r3, [r3, #12]
 801ac66:	2b00      	cmp	r3, #0
 801ac68:	d009      	beq.n	801ac7e <udp_remove+0x42>
 801ac6a:	68fb      	ldr	r3, [r7, #12]
 801ac6c:	68db      	ldr	r3, [r3, #12]
 801ac6e:	687a      	ldr	r2, [r7, #4]
 801ac70:	429a      	cmp	r2, r3
 801ac72:	d104      	bne.n	801ac7e <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801ac74:	687b      	ldr	r3, [r7, #4]
 801ac76:	68da      	ldr	r2, [r3, #12]
 801ac78:	68fb      	ldr	r3, [r7, #12]
 801ac7a:	60da      	str	r2, [r3, #12]
        break;
 801ac7c:	e005      	b.n	801ac8a <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801ac7e:	68fb      	ldr	r3, [r7, #12]
 801ac80:	68db      	ldr	r3, [r3, #12]
 801ac82:	60fb      	str	r3, [r7, #12]
 801ac84:	68fb      	ldr	r3, [r7, #12]
 801ac86:	2b00      	cmp	r3, #0
 801ac88:	d1eb      	bne.n	801ac62 <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801ac8a:	6879      	ldr	r1, [r7, #4]
 801ac8c:	2000      	movs	r0, #0
 801ac8e:	f7f8 fec3 	bl	8013a18 <memp_free>
}
 801ac92:	bf00      	nop
 801ac94:	3710      	adds	r7, #16
 801ac96:	46bd      	mov	sp, r7
 801ac98:	bd80      	pop	{r7, pc}
 801ac9a:	bf00      	nop
 801ac9c:	2000dd78 	.word	0x2000dd78

0801aca0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801aca0:	b580      	push	{r7, lr}
 801aca2:	b082      	sub	sp, #8
 801aca4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801aca6:	2000      	movs	r0, #0
 801aca8:	f7f8 fe64 	bl	8013974 <memp_malloc>
 801acac:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801acae:	687b      	ldr	r3, [r7, #4]
 801acb0:	2b00      	cmp	r3, #0
 801acb2:	d007      	beq.n	801acc4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801acb4:	2220      	movs	r2, #32
 801acb6:	2100      	movs	r1, #0
 801acb8:	6878      	ldr	r0, [r7, #4]
 801acba:	f005 fdc7 	bl	802084c <memset>
    pcb->ttl = UDP_TTL;
 801acbe:	687b      	ldr	r3, [r7, #4]
 801acc0:	22ff      	movs	r2, #255	@ 0xff
 801acc2:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801acc4:	687b      	ldr	r3, [r7, #4]
}
 801acc6:	4618      	mov	r0, r3
 801acc8:	3708      	adds	r7, #8
 801acca:	46bd      	mov	sp, r7
 801accc:	bd80      	pop	{r7, pc}

0801acce <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801acce:	b580      	push	{r7, lr}
 801acd0:	b084      	sub	sp, #16
 801acd2:	af00      	add	r7, sp, #0
 801acd4:	4603      	mov	r3, r0
 801acd6:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;
  pcb = udp_new();
 801acd8:	f7ff ffe2 	bl	801aca0 <udp_new>
 801acdc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801acde:	68fb      	ldr	r3, [r7, #12]
}
 801ace0:	4618      	mov	r0, r3
 801ace2:	3710      	adds	r7, #16
 801ace4:	46bd      	mov	sp, r7
 801ace6:	bd80      	pop	{r7, pc}

0801ace8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 801ace8:	b480      	push	{r7}
 801acea:	b085      	sub	sp, #20
 801acec:	af00      	add	r7, sp, #0
 801acee:	6078      	str	r0, [r7, #4]
 801acf0:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801acf2:	687b      	ldr	r3, [r7, #4]
 801acf4:	2b00      	cmp	r3, #0
 801acf6:	d01e      	beq.n	801ad36 <udp_netif_ip_addr_changed+0x4e>
 801acf8:	687b      	ldr	r3, [r7, #4]
 801acfa:	681b      	ldr	r3, [r3, #0]
 801acfc:	2b00      	cmp	r3, #0
 801acfe:	d01a      	beq.n	801ad36 <udp_netif_ip_addr_changed+0x4e>
 801ad00:	683b      	ldr	r3, [r7, #0]
 801ad02:	2b00      	cmp	r3, #0
 801ad04:	d017      	beq.n	801ad36 <udp_netif_ip_addr_changed+0x4e>
 801ad06:	683b      	ldr	r3, [r7, #0]
 801ad08:	681b      	ldr	r3, [r3, #0]
 801ad0a:	2b00      	cmp	r3, #0
 801ad0c:	d013      	beq.n	801ad36 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801ad0e:	4b0c      	ldr	r3, [pc, #48]	@ (801ad40 <udp_netif_ip_addr_changed+0x58>)
 801ad10:	681b      	ldr	r3, [r3, #0]
 801ad12:	60fb      	str	r3, [r7, #12]
 801ad14:	e00c      	b.n	801ad30 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801ad16:	68fb      	ldr	r3, [r7, #12]
 801ad18:	681a      	ldr	r2, [r3, #0]
 801ad1a:	687b      	ldr	r3, [r7, #4]
 801ad1c:	681b      	ldr	r3, [r3, #0]
 801ad1e:	429a      	cmp	r2, r3
 801ad20:	d103      	bne.n	801ad2a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801ad22:	683b      	ldr	r3, [r7, #0]
 801ad24:	681a      	ldr	r2, [r3, #0]
 801ad26:	68fb      	ldr	r3, [r7, #12]
 801ad28:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801ad2a:	68fb      	ldr	r3, [r7, #12]
 801ad2c:	68db      	ldr	r3, [r3, #12]
 801ad2e:	60fb      	str	r3, [r7, #12]
 801ad30:	68fb      	ldr	r3, [r7, #12]
 801ad32:	2b00      	cmp	r3, #0
 801ad34:	d1ef      	bne.n	801ad16 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801ad36:	bf00      	nop
 801ad38:	3714      	adds	r7, #20
 801ad3a:	46bd      	mov	sp, r7
 801ad3c:	bc80      	pop	{r7}
 801ad3e:	4770      	bx	lr
 801ad40:	2000dd78 	.word	0x2000dd78

0801ad44 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(struct dhcp *dhcp);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 801ad44:	b580      	push	{r7, lr}
 801ad46:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 801ad48:	4b20      	ldr	r3, [pc, #128]	@ (801adcc <dhcp_inc_pcb_refcount+0x88>)
 801ad4a:	781b      	ldrb	r3, [r3, #0]
 801ad4c:	2b00      	cmp	r3, #0
 801ad4e:	d133      	bne.n	801adb8 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801ad50:	4b1f      	ldr	r3, [pc, #124]	@ (801add0 <dhcp_inc_pcb_refcount+0x8c>)
 801ad52:	681b      	ldr	r3, [r3, #0]
 801ad54:	2b00      	cmp	r3, #0
 801ad56:	d005      	beq.n	801ad64 <dhcp_inc_pcb_refcount+0x20>
 801ad58:	4b1e      	ldr	r3, [pc, #120]	@ (801add4 <dhcp_inc_pcb_refcount+0x90>)
 801ad5a:	22d9      	movs	r2, #217	@ 0xd9
 801ad5c:	491e      	ldr	r1, [pc, #120]	@ (801add8 <dhcp_inc_pcb_refcount+0x94>)
 801ad5e:	481f      	ldr	r0, [pc, #124]	@ (801addc <dhcp_inc_pcb_refcount+0x98>)
 801ad60:	f005 fb9e 	bl	80204a0 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 801ad64:	f7ff ff9c 	bl	801aca0 <udp_new>
 801ad68:	4603      	mov	r3, r0
 801ad6a:	4a19      	ldr	r2, [pc, #100]	@ (801add0 <dhcp_inc_pcb_refcount+0x8c>)
 801ad6c:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 801ad6e:	4b18      	ldr	r3, [pc, #96]	@ (801add0 <dhcp_inc_pcb_refcount+0x8c>)
 801ad70:	681b      	ldr	r3, [r3, #0]
 801ad72:	2b00      	cmp	r3, #0
 801ad74:	d102      	bne.n	801ad7c <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801ad76:	f04f 33ff 	mov.w	r3, #4294967295
 801ad7a:	e024      	b.n	801adc6 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801ad7c:	4b14      	ldr	r3, [pc, #80]	@ (801add0 <dhcp_inc_pcb_refcount+0x8c>)
 801ad7e:	681b      	ldr	r3, [r3, #0]
 801ad80:	7a1a      	ldrb	r2, [r3, #8]
 801ad82:	4b13      	ldr	r3, [pc, #76]	@ (801add0 <dhcp_inc_pcb_refcount+0x8c>)
 801ad84:	681b      	ldr	r3, [r3, #0]
 801ad86:	f042 0220 	orr.w	r2, r2, #32
 801ad8a:	b2d2      	uxtb	r2, r2
 801ad8c:	721a      	strb	r2, [r3, #8]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 801ad8e:	4b10      	ldr	r3, [pc, #64]	@ (801add0 <dhcp_inc_pcb_refcount+0x8c>)
 801ad90:	681b      	ldr	r3, [r3, #0]
 801ad92:	2244      	movs	r2, #68	@ 0x44
 801ad94:	4912      	ldr	r1, [pc, #72]	@ (801ade0 <dhcp_inc_pcb_refcount+0x9c>)
 801ad96:	4618      	mov	r0, r3
 801ad98:	f7ff fe78 	bl	801aa8c <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
 801ad9c:	4b0c      	ldr	r3, [pc, #48]	@ (801add0 <dhcp_inc_pcb_refcount+0x8c>)
 801ad9e:	681b      	ldr	r3, [r3, #0]
 801ada0:	2243      	movs	r2, #67	@ 0x43
 801ada2:	490f      	ldr	r1, [pc, #60]	@ (801ade0 <dhcp_inc_pcb_refcount+0x9c>)
 801ada4:	4618      	mov	r0, r3
 801ada6:	f7ff fee1 	bl	801ab6c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801adaa:	4b09      	ldr	r3, [pc, #36]	@ (801add0 <dhcp_inc_pcb_refcount+0x8c>)
 801adac:	681b      	ldr	r3, [r3, #0]
 801adae:	2200      	movs	r2, #0
 801adb0:	490c      	ldr	r1, [pc, #48]	@ (801ade4 <dhcp_inc_pcb_refcount+0xa0>)
 801adb2:	4618      	mov	r0, r3
 801adb4:	f7ff ff30 	bl	801ac18 <udp_recv>
  }

  dhcp_pcb_refcount++;
 801adb8:	4b04      	ldr	r3, [pc, #16]	@ (801adcc <dhcp_inc_pcb_refcount+0x88>)
 801adba:	781b      	ldrb	r3, [r3, #0]
 801adbc:	3301      	adds	r3, #1
 801adbe:	b2da      	uxtb	r2, r3
 801adc0:	4b02      	ldr	r3, [pc, #8]	@ (801adcc <dhcp_inc_pcb_refcount+0x88>)
 801adc2:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 801adc4:	2300      	movs	r3, #0
}
 801adc6:	4618      	mov	r0, r3
 801adc8:	bd80      	pop	{r7, pc}
 801adca:	bf00      	nop
 801adcc:	2000dda8 	.word	0x2000dda8
 801add0:	2000dda4 	.word	0x2000dda4
 801add4:	080253a8 	.word	0x080253a8
 801add8:	080253e0 	.word	0x080253e0
 801addc:	08025408 	.word	0x08025408
 801ade0:	0802f050 	.word	0x0802f050
 801ade4:	0801c4a1 	.word	0x0801c4a1

0801ade8 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 801ade8:	b580      	push	{r7, lr}
 801adea:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801adec:	4b0e      	ldr	r3, [pc, #56]	@ (801ae28 <dhcp_dec_pcb_refcount+0x40>)
 801adee:	781b      	ldrb	r3, [r3, #0]
 801adf0:	2b00      	cmp	r3, #0
 801adf2:	d105      	bne.n	801ae00 <dhcp_dec_pcb_refcount+0x18>
 801adf4:	4b0d      	ldr	r3, [pc, #52]	@ (801ae2c <dhcp_dec_pcb_refcount+0x44>)
 801adf6:	22f3      	movs	r2, #243	@ 0xf3
 801adf8:	490d      	ldr	r1, [pc, #52]	@ (801ae30 <dhcp_dec_pcb_refcount+0x48>)
 801adfa:	480e      	ldr	r0, [pc, #56]	@ (801ae34 <dhcp_dec_pcb_refcount+0x4c>)
 801adfc:	f005 fb50 	bl	80204a0 <iprintf>
  dhcp_pcb_refcount--;
 801ae00:	4b09      	ldr	r3, [pc, #36]	@ (801ae28 <dhcp_dec_pcb_refcount+0x40>)
 801ae02:	781b      	ldrb	r3, [r3, #0]
 801ae04:	3b01      	subs	r3, #1
 801ae06:	b2da      	uxtb	r2, r3
 801ae08:	4b07      	ldr	r3, [pc, #28]	@ (801ae28 <dhcp_dec_pcb_refcount+0x40>)
 801ae0a:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 801ae0c:	4b06      	ldr	r3, [pc, #24]	@ (801ae28 <dhcp_dec_pcb_refcount+0x40>)
 801ae0e:	781b      	ldrb	r3, [r3, #0]
 801ae10:	2b00      	cmp	r3, #0
 801ae12:	d107      	bne.n	801ae24 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 801ae14:	4b08      	ldr	r3, [pc, #32]	@ (801ae38 <dhcp_dec_pcb_refcount+0x50>)
 801ae16:	681b      	ldr	r3, [r3, #0]
 801ae18:	4618      	mov	r0, r3
 801ae1a:	f7ff ff0f 	bl	801ac3c <udp_remove>
    dhcp_pcb = NULL;
 801ae1e:	4b06      	ldr	r3, [pc, #24]	@ (801ae38 <dhcp_dec_pcb_refcount+0x50>)
 801ae20:	2200      	movs	r2, #0
 801ae22:	601a      	str	r2, [r3, #0]
  }
}
 801ae24:	bf00      	nop
 801ae26:	bd80      	pop	{r7, pc}
 801ae28:	2000dda8 	.word	0x2000dda8
 801ae2c:	080253a8 	.word	0x080253a8
 801ae30:	08025430 	.word	0x08025430
 801ae34:	08025408 	.word	0x08025408
 801ae38:	2000dda4 	.word	0x2000dda4

0801ae3c <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 801ae3c:	b580      	push	{r7, lr}
 801ae3e:	b084      	sub	sp, #16
 801ae40:	af00      	add	r7, sp, #0
 801ae42:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ae44:	687b      	ldr	r3, [r7, #4]
 801ae46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ae48:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801ae4a:	210c      	movs	r1, #12
 801ae4c:	68f8      	ldr	r0, [r7, #12]
 801ae4e:	f000 ff85 	bl	801bd5c <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801ae52:	4b06      	ldr	r3, [pc, #24]	@ (801ae6c <dhcp_handle_nak+0x30>)
 801ae54:	4a05      	ldr	r2, [pc, #20]	@ (801ae6c <dhcp_handle_nak+0x30>)
 801ae56:	4905      	ldr	r1, [pc, #20]	@ (801ae6c <dhcp_handle_nak+0x30>)
 801ae58:	6878      	ldr	r0, [r7, #4]
 801ae5a:	f7f8 fe6b 	bl	8013b34 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801ae5e:	6878      	ldr	r0, [r7, #4]
 801ae60:	f000 fbb6 	bl	801b5d0 <dhcp_discover>
}
 801ae64:	bf00      	nop
 801ae66:	3710      	adds	r7, #16
 801ae68:	46bd      	mov	sp, r7
 801ae6a:	bd80      	pop	{r7, pc}
 801ae6c:	0802f050 	.word	0x0802f050

0801ae70 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 801ae70:	b580      	push	{r7, lr}
 801ae72:	b084      	sub	sp, #16
 801ae74:	af00      	add	r7, sp, #0
 801ae76:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ae78:	687b      	ldr	r3, [r7, #4]
 801ae7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ae7c:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801ae7e:	2108      	movs	r1, #8
 801ae80:	68f8      	ldr	r0, [r7, #12]
 801ae82:	f000 ff6b 	bl	801bd5c <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801ae86:	68fb      	ldr	r3, [r7, #12]
 801ae88:	3328      	adds	r3, #40	@ 0x28
 801ae8a:	2200      	movs	r2, #0
 801ae8c:	4619      	mov	r1, r3
 801ae8e:	6878      	ldr	r0, [r7, #4]
 801ae90:	f002 fbae 	bl	801d5f0 <etharp_query>
 801ae94:	4603      	mov	r3, r0
 801ae96:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 801ae98:	68fb      	ldr	r3, [r7, #12]
 801ae9a:	7a9b      	ldrb	r3, [r3, #10]
 801ae9c:	2bff      	cmp	r3, #255	@ 0xff
 801ae9e:	d005      	beq.n	801aeac <dhcp_check+0x3c>
    dhcp->tries++;
 801aea0:	68fb      	ldr	r3, [r7, #12]
 801aea2:	7a9b      	ldrb	r3, [r3, #10]
 801aea4:	3301      	adds	r3, #1
 801aea6:	b2da      	uxtb	r2, r3
 801aea8:	68fb      	ldr	r3, [r7, #12]
 801aeaa:	729a      	strb	r2, [r3, #10]
  }
  msecs = 500;
 801aeac:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 801aeb0:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801aeb2:	893b      	ldrh	r3, [r7, #8]
 801aeb4:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801aeb8:	4a06      	ldr	r2, [pc, #24]	@ (801aed4 <dhcp_check+0x64>)
 801aeba:	fb82 1203 	smull	r1, r2, r2, r3
 801aebe:	1152      	asrs	r2, r2, #5
 801aec0:	17db      	asrs	r3, r3, #31
 801aec2:	1ad3      	subs	r3, r2, r3
 801aec4:	b29a      	uxth	r2, r3
 801aec6:	68fb      	ldr	r3, [r7, #12]
 801aec8:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801aeca:	bf00      	nop
 801aecc:	3710      	adds	r7, #16
 801aece:	46bd      	mov	sp, r7
 801aed0:	bd80      	pop	{r7, pc}
 801aed2:	bf00      	nop
 801aed4:	10624dd3 	.word	0x10624dd3

0801aed8 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
 801aed8:	b580      	push	{r7, lr}
 801aeda:	b084      	sub	sp, #16
 801aedc:	af00      	add	r7, sp, #0
 801aede:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801aee0:	687b      	ldr	r3, [r7, #4]
 801aee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801aee4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801aee6:	4b0c      	ldr	r3, [pc, #48]	@ (801af18 <dhcp_handle_offer+0x40>)
 801aee8:	789b      	ldrb	r3, [r3, #2]
 801aeea:	2b00      	cmp	r3, #0
 801aeec:	d00f      	beq.n	801af0e <dhcp_handle_offer+0x36>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801aeee:	4b0b      	ldr	r3, [pc, #44]	@ (801af1c <dhcp_handle_offer+0x44>)
 801aef0:	689b      	ldr	r3, [r3, #8]
 801aef2:	4618      	mov	r0, r3
 801aef4:	f7f8 f8a1 	bl	801303a <lwip_htonl>
 801aef8:	4602      	mov	r2, r0
 801aefa:	68fb      	ldr	r3, [r7, #12]
 801aefc:	625a      	str	r2, [r3, #36]	@ 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 801aefe:	68fb      	ldr	r3, [r7, #12]
 801af00:	685b      	ldr	r3, [r3, #4]
 801af02:	691a      	ldr	r2, [r3, #16]
 801af04:	68fb      	ldr	r3, [r7, #12]
 801af06:	629a      	str	r2, [r3, #40]	@ 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801af08:	6878      	ldr	r0, [r7, #4]
 801af0a:	f000 f809 	bl	801af20 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
 801af0e:	bf00      	nop
 801af10:	3710      	adds	r7, #16
 801af12:	46bd      	mov	sp, r7
 801af14:	bd80      	pop	{r7, pc}
 801af16:	bf00      	nop
 801af18:	2000dd9c 	.word	0x2000dd9c
 801af1c:	2000dd7c 	.word	0x2000dd7c

0801af20 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 801af20:	b580      	push	{r7, lr}
 801af22:	b088      	sub	sp, #32
 801af24:	af02      	add	r7, sp, #8
 801af26:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801af28:	687b      	ldr	r3, [r7, #4]
 801af2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801af2c:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801af2e:	2101      	movs	r1, #1
 801af30:	6938      	ldr	r0, [r7, #16]
 801af32:	f000 ff13 	bl	801bd5c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 801af36:	2203      	movs	r2, #3
 801af38:	6939      	ldr	r1, [r7, #16]
 801af3a:	6878      	ldr	r0, [r7, #4]
 801af3c:	f001 fb96 	bl	801c66c <dhcp_create_msg>
 801af40:	4603      	mov	r3, r0
 801af42:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 801af44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801af48:	2b00      	cmp	r3, #0
 801af4a:	d159      	bne.n	801b000 <dhcp_select+0xe0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801af4c:	2202      	movs	r2, #2
 801af4e:	2139      	movs	r1, #57	@ 0x39
 801af50:	6938      	ldr	r0, [r7, #16]
 801af52:	f000 ff1d 	bl	801bd90 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 801af56:	687b      	ldr	r3, [r7, #4]
 801af58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801af5a:	4619      	mov	r1, r3
 801af5c:	6938      	ldr	r0, [r7, #16]
 801af5e:	f000 ff79 	bl	801be54 <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 801af62:	2204      	movs	r2, #4
 801af64:	2132      	movs	r1, #50	@ 0x32
 801af66:	6938      	ldr	r0, [r7, #16]
 801af68:	f000 ff12 	bl	801bd90 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801af6c:	693b      	ldr	r3, [r7, #16]
 801af6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801af70:	4618      	mov	r0, r3
 801af72:	f7f8 f862 	bl	801303a <lwip_htonl>
 801af76:	4603      	mov	r3, r0
 801af78:	4619      	mov	r1, r3
 801af7a:	6938      	ldr	r0, [r7, #16]
 801af7c:	f000 ffa4 	bl	801bec8 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 801af80:	2204      	movs	r2, #4
 801af82:	2136      	movs	r1, #54	@ 0x36
 801af84:	6938      	ldr	r0, [r7, #16]
 801af86:	f000 ff03 	bl	801bd90 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801af8a:	693b      	ldr	r3, [r7, #16]
 801af8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801af8e:	4618      	mov	r0, r3
 801af90:	f7f8 f853 	bl	801303a <lwip_htonl>
 801af94:	4603      	mov	r3, r0
 801af96:	4619      	mov	r1, r3
 801af98:	6938      	ldr	r0, [r7, #16]
 801af9a:	f000 ff95 	bl	801bec8 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801af9e:	2203      	movs	r2, #3
 801afa0:	2137      	movs	r1, #55	@ 0x37
 801afa2:	6938      	ldr	r0, [r7, #16]
 801afa4:	f000 fef4 	bl	801bd90 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801afa8:	2300      	movs	r3, #0
 801afaa:	75fb      	strb	r3, [r7, #23]
 801afac:	e009      	b.n	801afc2 <dhcp_select+0xa2>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 801afae:	7dfb      	ldrb	r3, [r7, #23]
 801afb0:	4a29      	ldr	r2, [pc, #164]	@ (801b058 <dhcp_select+0x138>)
 801afb2:	5cd3      	ldrb	r3, [r2, r3]
 801afb4:	4619      	mov	r1, r3
 801afb6:	6938      	ldr	r0, [r7, #16]
 801afb8:	f000 ff24 	bl	801be04 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801afbc:	7dfb      	ldrb	r3, [r7, #23]
 801afbe:	3301      	adds	r3, #1
 801afc0:	75fb      	strb	r3, [r7, #23]
 801afc2:	7dfb      	ldrb	r3, [r7, #23]
 801afc4:	2b02      	cmp	r3, #2
 801afc6:	d9f2      	bls.n	801afae <dhcp_select+0x8e>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 801afc8:	6938      	ldr	r0, [r7, #16]
 801afca:	f001 fcf3 	bl	801c9b4 <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801afce:	693b      	ldr	r3, [r7, #16]
 801afd0:	68da      	ldr	r2, [r3, #12]
 801afd2:	693b      	ldr	r3, [r7, #16]
 801afd4:	8a9b      	ldrh	r3, [r3, #20]
 801afd6:	33f0      	adds	r3, #240	@ 0xf0
 801afd8:	b29b      	uxth	r3, r3
 801afda:	4619      	mov	r1, r3
 801afdc:	4610      	mov	r0, r2
 801afde:	f7f9 f903 	bl	80141e8 <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 801afe2:	4b1e      	ldr	r3, [pc, #120]	@ (801b05c <dhcp_select+0x13c>)
 801afe4:	6818      	ldr	r0, [r3, #0]
 801afe6:	693b      	ldr	r3, [r7, #16]
 801afe8:	68d9      	ldr	r1, [r3, #12]
 801afea:	4b1d      	ldr	r3, [pc, #116]	@ (801b060 <dhcp_select+0x140>)
 801afec:	9301      	str	r3, [sp, #4]
 801afee:	687b      	ldr	r3, [r7, #4]
 801aff0:	9300      	str	r3, [sp, #0]
 801aff2:	2343      	movs	r3, #67	@ 0x43
 801aff4:	4a1b      	ldr	r2, [pc, #108]	@ (801b064 <dhcp_select+0x144>)
 801aff6:	f7ff fc9f 	bl	801a938 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 801affa:	6938      	ldr	r0, [r7, #16]
 801affc:	f001 fc98 	bl	801c930 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801b000:	693b      	ldr	r3, [r7, #16]
 801b002:	7a9b      	ldrb	r3, [r3, #10]
 801b004:	2bff      	cmp	r3, #255	@ 0xff
 801b006:	d005      	beq.n	801b014 <dhcp_select+0xf4>
    dhcp->tries++;
 801b008:	693b      	ldr	r3, [r7, #16]
 801b00a:	7a9b      	ldrb	r3, [r3, #10]
 801b00c:	3301      	adds	r3, #1
 801b00e:	b2da      	uxtb	r2, r3
 801b010:	693b      	ldr	r3, [r7, #16]
 801b012:	729a      	strb	r2, [r3, #10]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 801b014:	693b      	ldr	r3, [r7, #16]
 801b016:	7a9b      	ldrb	r3, [r3, #10]
 801b018:	2b05      	cmp	r3, #5
 801b01a:	d807      	bhi.n	801b02c <dhcp_select+0x10c>
 801b01c:	693b      	ldr	r3, [r7, #16]
 801b01e:	7a9b      	ldrb	r3, [r3, #10]
 801b020:	461a      	mov	r2, r3
 801b022:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801b026:	4093      	lsls	r3, r2
 801b028:	b29b      	uxth	r3, r3
 801b02a:	e001      	b.n	801b030 <dhcp_select+0x110>
 801b02c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 801b030:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801b032:	89bb      	ldrh	r3, [r7, #12]
 801b034:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801b038:	4a0b      	ldr	r2, [pc, #44]	@ (801b068 <dhcp_select+0x148>)
 801b03a:	fb82 1203 	smull	r1, r2, r2, r3
 801b03e:	1152      	asrs	r2, r2, #5
 801b040:	17db      	asrs	r3, r3, #31
 801b042:	1ad3      	subs	r3, r2, r3
 801b044:	b29a      	uxth	r2, r3
 801b046:	693b      	ldr	r3, [r7, #16]
 801b048:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801b04a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b04e:	4618      	mov	r0, r3
 801b050:	3718      	adds	r7, #24
 801b052:	46bd      	mov	sp, r7
 801b054:	bd80      	pop	{r7, pc}
 801b056:	bf00      	nop
 801b058:	2000011c 	.word	0x2000011c
 801b05c:	2000dda4 	.word	0x2000dda4
 801b060:	0802f050 	.word	0x0802f050
 801b064:	0802f054 	.word	0x0802f054
 801b068:	10624dd3 	.word	0x10624dd3

0801b06c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 801b06c:	b580      	push	{r7, lr}
 801b06e:	b082      	sub	sp, #8
 801b070:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 801b072:	4b27      	ldr	r3, [pc, #156]	@ (801b110 <dhcp_coarse_tmr+0xa4>)
 801b074:	681b      	ldr	r3, [r3, #0]
 801b076:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
 801b078:	e042      	b.n	801b100 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801b07a:	687b      	ldr	r3, [r7, #4]
 801b07c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b07e:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801b080:	683b      	ldr	r3, [r7, #0]
 801b082:	2b00      	cmp	r3, #0
 801b084:	d039      	beq.n	801b0fa <dhcp_coarse_tmr+0x8e>
 801b086:	683b      	ldr	r3, [r7, #0]
 801b088:	7a5b      	ldrb	r3, [r3, #9]
 801b08a:	2b00      	cmp	r3, #0
 801b08c:	d035      	beq.n	801b0fa <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801b08e:	683b      	ldr	r3, [r7, #0]
 801b090:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801b092:	2b00      	cmp	r3, #0
 801b094:	d012      	beq.n	801b0bc <dhcp_coarse_tmr+0x50>
 801b096:	683b      	ldr	r3, [r7, #0]
 801b098:	8c1b      	ldrh	r3, [r3, #32]
 801b09a:	3301      	adds	r3, #1
 801b09c:	b29a      	uxth	r2, r3
 801b09e:	683b      	ldr	r3, [r7, #0]
 801b0a0:	841a      	strh	r2, [r3, #32]
 801b0a2:	683b      	ldr	r3, [r7, #0]
 801b0a4:	8c1a      	ldrh	r2, [r3, #32]
 801b0a6:	683b      	ldr	r3, [r7, #0]
 801b0a8:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801b0aa:	429a      	cmp	r2, r3
 801b0ac:	d106      	bne.n	801b0bc <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
 801b0ae:	6878      	ldr	r0, [r7, #4]
 801b0b0:	f000 fd94 	bl	801bbdc <dhcp_release>
        dhcp_discover(netif);
 801b0b4:	6878      	ldr	r0, [r7, #4]
 801b0b6:	f000 fa8b 	bl	801b5d0 <dhcp_discover>
 801b0ba:	e01e      	b.n	801b0fa <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801b0bc:	683b      	ldr	r3, [r7, #0]
 801b0be:	8bdb      	ldrh	r3, [r3, #30]
 801b0c0:	2b00      	cmp	r3, #0
 801b0c2:	d00b      	beq.n	801b0dc <dhcp_coarse_tmr+0x70>
 801b0c4:	683b      	ldr	r3, [r7, #0]
 801b0c6:	8bdb      	ldrh	r3, [r3, #30]
 801b0c8:	1e5a      	subs	r2, r3, #1
 801b0ca:	b291      	uxth	r1, r2
 801b0cc:	683a      	ldr	r2, [r7, #0]
 801b0ce:	83d1      	strh	r1, [r2, #30]
 801b0d0:	2b01      	cmp	r3, #1
 801b0d2:	d103      	bne.n	801b0dc <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 801b0d4:	6878      	ldr	r0, [r7, #4]
 801b0d6:	f000 f8c6 	bl	801b266 <dhcp_t2_timeout>
 801b0da:	e00e      	b.n	801b0fa <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801b0dc:	683b      	ldr	r3, [r7, #0]
 801b0de:	8b9b      	ldrh	r3, [r3, #28]
 801b0e0:	2b00      	cmp	r3, #0
 801b0e2:	d00a      	beq.n	801b0fa <dhcp_coarse_tmr+0x8e>
 801b0e4:	683b      	ldr	r3, [r7, #0]
 801b0e6:	8b9b      	ldrh	r3, [r3, #28]
 801b0e8:	1e5a      	subs	r2, r3, #1
 801b0ea:	b291      	uxth	r1, r2
 801b0ec:	683a      	ldr	r2, [r7, #0]
 801b0ee:	8391      	strh	r1, [r2, #28]
 801b0f0:	2b01      	cmp	r3, #1
 801b0f2:	d102      	bne.n	801b0fa <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 801b0f4:	6878      	ldr	r0, [r7, #4]
 801b0f6:	f000 f888 	bl	801b20a <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
 801b0fa:	687b      	ldr	r3, [r7, #4]
 801b0fc:	681b      	ldr	r3, [r3, #0]
 801b0fe:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 801b100:	687b      	ldr	r3, [r7, #4]
 801b102:	2b00      	cmp	r3, #0
 801b104:	d1b9      	bne.n	801b07a <dhcp_coarse_tmr+0xe>
  }
}
 801b106:	bf00      	nop
 801b108:	bf00      	nop
 801b10a:	3708      	adds	r7, #8
 801b10c:	46bd      	mov	sp, r7
 801b10e:	bd80      	pop	{r7, pc}
 801b110:	2000db78 	.word	0x2000db78

0801b114 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 801b114:	b580      	push	{r7, lr}
 801b116:	b082      	sub	sp, #8
 801b118:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 801b11a:	4b16      	ldr	r3, [pc, #88]	@ (801b174 <dhcp_fine_tmr+0x60>)
 801b11c:	681b      	ldr	r3, [r3, #0]
 801b11e:	607b      	str	r3, [r7, #4]
  /* loop through netif's */
  while (netif != NULL) {
 801b120:	e020      	b.n	801b164 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801b122:	687b      	ldr	r3, [r7, #4]
 801b124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b126:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 801b128:	683b      	ldr	r3, [r7, #0]
 801b12a:	2b00      	cmp	r3, #0
 801b12c:	d017      	beq.n	801b15e <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801b12e:	683b      	ldr	r3, [r7, #0]
 801b130:	8adb      	ldrh	r3, [r3, #22]
 801b132:	2b01      	cmp	r3, #1
 801b134:	d906      	bls.n	801b144 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801b136:	683b      	ldr	r3, [r7, #0]
 801b138:	8adb      	ldrh	r3, [r3, #22]
 801b13a:	3b01      	subs	r3, #1
 801b13c:	b29a      	uxth	r2, r3
 801b13e:	683b      	ldr	r3, [r7, #0]
 801b140:	82da      	strh	r2, [r3, #22]
 801b142:	e00c      	b.n	801b15e <dhcp_fine_tmr+0x4a>
      }
      else if (dhcp->request_timeout == 1) {
 801b144:	683b      	ldr	r3, [r7, #0]
 801b146:	8adb      	ldrh	r3, [r3, #22]
 801b148:	2b01      	cmp	r3, #1
 801b14a:	d108      	bne.n	801b15e <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 801b14c:	683b      	ldr	r3, [r7, #0]
 801b14e:	8adb      	ldrh	r3, [r3, #22]
 801b150:	3b01      	subs	r3, #1
 801b152:	b29a      	uxth	r2, r3
 801b154:	683b      	ldr	r3, [r7, #0]
 801b156:	82da      	strh	r2, [r3, #22]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 801b158:	6878      	ldr	r0, [r7, #4]
 801b15a:	f000 f80d 	bl	801b178 <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
 801b15e:	687b      	ldr	r3, [r7, #4]
 801b160:	681b      	ldr	r3, [r3, #0]
 801b162:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 801b164:	687b      	ldr	r3, [r7, #4]
 801b166:	2b00      	cmp	r3, #0
 801b168:	d1db      	bne.n	801b122 <dhcp_fine_tmr+0xe>
  }
}
 801b16a:	bf00      	nop
 801b16c:	bf00      	nop
 801b16e:	3708      	adds	r7, #8
 801b170:	46bd      	mov	sp, r7
 801b172:	bd80      	pop	{r7, pc}
 801b174:	2000db78 	.word	0x2000db78

0801b178 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 801b178:	b580      	push	{r7, lr}
 801b17a:	b084      	sub	sp, #16
 801b17c:	af00      	add	r7, sp, #0
 801b17e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b180:	687b      	ldr	r3, [r7, #4]
 801b182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b184:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801b186:	68fb      	ldr	r3, [r7, #12]
 801b188:	7a5b      	ldrb	r3, [r3, #9]
 801b18a:	2b0c      	cmp	r3, #12
 801b18c:	d003      	beq.n	801b196 <dhcp_timeout+0x1e>
 801b18e:	68fb      	ldr	r3, [r7, #12]
 801b190:	7a5b      	ldrb	r3, [r3, #9]
 801b192:	2b06      	cmp	r3, #6
 801b194:	d103      	bne.n	801b19e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801b196:	6878      	ldr	r0, [r7, #4]
 801b198:	f000 fa1a 	bl	801b5d0 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 801b19c:	e031      	b.n	801b202 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801b19e:	68fb      	ldr	r3, [r7, #12]
 801b1a0:	7a5b      	ldrb	r3, [r3, #9]
 801b1a2:	2b01      	cmp	r3, #1
 801b1a4:	d10e      	bne.n	801b1c4 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801b1a6:	68fb      	ldr	r3, [r7, #12]
 801b1a8:	7a9b      	ldrb	r3, [r3, #10]
 801b1aa:	2b05      	cmp	r3, #5
 801b1ac:	d803      	bhi.n	801b1b6 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801b1ae:	6878      	ldr	r0, [r7, #4]
 801b1b0:	f7ff feb6 	bl	801af20 <dhcp_select>
}
 801b1b4:	e025      	b.n	801b202 <dhcp_timeout+0x8a>
      dhcp_release(netif);
 801b1b6:	6878      	ldr	r0, [r7, #4]
 801b1b8:	f000 fd10 	bl	801bbdc <dhcp_release>
      dhcp_discover(netif);
 801b1bc:	6878      	ldr	r0, [r7, #4]
 801b1be:	f000 fa07 	bl	801b5d0 <dhcp_discover>
}
 801b1c2:	e01e      	b.n	801b202 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801b1c4:	68fb      	ldr	r3, [r7, #12]
 801b1c6:	7a5b      	ldrb	r3, [r3, #9]
 801b1c8:	2b08      	cmp	r3, #8
 801b1ca:	d10b      	bne.n	801b1e4 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 801b1cc:	68fb      	ldr	r3, [r7, #12]
 801b1ce:	7a9b      	ldrb	r3, [r3, #10]
 801b1d0:	2b01      	cmp	r3, #1
 801b1d2:	d803      	bhi.n	801b1dc <dhcp_timeout+0x64>
      dhcp_check(netif);
 801b1d4:	6878      	ldr	r0, [r7, #4]
 801b1d6:	f7ff fe4b 	bl	801ae70 <dhcp_check>
}
 801b1da:	e012      	b.n	801b202 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 801b1dc:	6878      	ldr	r0, [r7, #4]
 801b1de:	f000 fa83 	bl	801b6e8 <dhcp_bind>
}
 801b1e2:	e00e      	b.n	801b202 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801b1e4:	68fb      	ldr	r3, [r7, #12]
 801b1e6:	7a5b      	ldrb	r3, [r3, #9]
 801b1e8:	2b03      	cmp	r3, #3
 801b1ea:	d10a      	bne.n	801b202 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 801b1ec:	68fb      	ldr	r3, [r7, #12]
 801b1ee:	7a9b      	ldrb	r3, [r3, #10]
 801b1f0:	2b01      	cmp	r3, #1
 801b1f2:	d803      	bhi.n	801b1fc <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 801b1f4:	6878      	ldr	r0, [r7, #4]
 801b1f6:	f000 fc5d 	bl	801bab4 <dhcp_reboot>
}
 801b1fa:	e002      	b.n	801b202 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801b1fc:	6878      	ldr	r0, [r7, #4]
 801b1fe:	f000 f9e7 	bl	801b5d0 <dhcp_discover>
}
 801b202:	bf00      	nop
 801b204:	3710      	adds	r7, #16
 801b206:	46bd      	mov	sp, r7
 801b208:	bd80      	pop	{r7, pc}

0801b20a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801b20a:	b580      	push	{r7, lr}
 801b20c:	b084      	sub	sp, #16
 801b20e:	af00      	add	r7, sp, #0
 801b210:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b212:	687b      	ldr	r3, [r7, #4]
 801b214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b216:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801b218:	68fb      	ldr	r3, [r7, #12]
 801b21a:	7a5b      	ldrb	r3, [r3, #9]
 801b21c:	2b01      	cmp	r3, #1
 801b21e:	d007      	beq.n	801b230 <dhcp_t1_timeout+0x26>
 801b220:	68fb      	ldr	r3, [r7, #12]
 801b222:	7a5b      	ldrb	r3, [r3, #9]
 801b224:	2b0a      	cmp	r3, #10
 801b226:	d003      	beq.n	801b230 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 801b228:	68fb      	ldr	r3, [r7, #12]
 801b22a:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801b22c:	2b05      	cmp	r3, #5
 801b22e:	d116      	bne.n	801b25e <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801b230:	6878      	ldr	r0, [r7, #4]
 801b232:	f000 fb33 	bl	801b89c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 801b236:	68fb      	ldr	r3, [r7, #12]
 801b238:	8b5b      	ldrh	r3, [r3, #26]
 801b23a:	461a      	mov	r2, r3
 801b23c:	68fb      	ldr	r3, [r7, #12]
 801b23e:	8c1b      	ldrh	r3, [r3, #32]
 801b240:	1ad3      	subs	r3, r2, r3
 801b242:	2b01      	cmp	r3, #1
 801b244:	dd0b      	ble.n	801b25e <dhcp_t1_timeout+0x54>
    {
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801b246:	68fb      	ldr	r3, [r7, #12]
 801b248:	8b5b      	ldrh	r3, [r3, #26]
 801b24a:	461a      	mov	r2, r3
 801b24c:	68fb      	ldr	r3, [r7, #12]
 801b24e:	8c1b      	ldrh	r3, [r3, #32]
 801b250:	1ad3      	subs	r3, r2, r3
 801b252:	0fda      	lsrs	r2, r3, #31
 801b254:	4413      	add	r3, r2
 801b256:	105b      	asrs	r3, r3, #1
 801b258:	b29a      	uxth	r2, r3
 801b25a:	68fb      	ldr	r3, [r7, #12]
 801b25c:	839a      	strh	r2, [r3, #28]
    }
  }
}
 801b25e:	bf00      	nop
 801b260:	3710      	adds	r7, #16
 801b262:	46bd      	mov	sp, r7
 801b264:	bd80      	pop	{r7, pc}

0801b266 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801b266:	b580      	push	{r7, lr}
 801b268:	b084      	sub	sp, #16
 801b26a:	af00      	add	r7, sp, #0
 801b26c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b26e:	687b      	ldr	r3, [r7, #4]
 801b270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b272:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801b274:	68fb      	ldr	r3, [r7, #12]
 801b276:	7a5b      	ldrb	r3, [r3, #9]
 801b278:	2b01      	cmp	r3, #1
 801b27a:	d00b      	beq.n	801b294 <dhcp_t2_timeout+0x2e>
 801b27c:	68fb      	ldr	r3, [r7, #12]
 801b27e:	7a5b      	ldrb	r3, [r3, #9]
 801b280:	2b0a      	cmp	r3, #10
 801b282:	d007      	beq.n	801b294 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801b284:	68fb      	ldr	r3, [r7, #12]
 801b286:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801b288:	2b05      	cmp	r3, #5
 801b28a:	d003      	beq.n	801b294 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801b28c:	68fb      	ldr	r3, [r7, #12]
 801b28e:	7a5b      	ldrb	r3, [r3, #9]
 801b290:	2b04      	cmp	r3, #4
 801b292:	d116      	bne.n	801b2c2 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801b294:	6878      	ldr	r0, [r7, #4]
 801b296:	f000 fb87 	bl	801b9a8 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 801b29a:	68fb      	ldr	r3, [r7, #12]
 801b29c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801b29e:	461a      	mov	r2, r3
 801b2a0:	68fb      	ldr	r3, [r7, #12]
 801b2a2:	8c1b      	ldrh	r3, [r3, #32]
 801b2a4:	1ad3      	subs	r3, r2, r3
 801b2a6:	2b01      	cmp	r3, #1
 801b2a8:	dd0b      	ble.n	801b2c2 <dhcp_t2_timeout+0x5c>
    {
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801b2aa:	68fb      	ldr	r3, [r7, #12]
 801b2ac:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801b2ae:	461a      	mov	r2, r3
 801b2b0:	68fb      	ldr	r3, [r7, #12]
 801b2b2:	8c1b      	ldrh	r3, [r3, #32]
 801b2b4:	1ad3      	subs	r3, r2, r3
 801b2b6:	0fda      	lsrs	r2, r3, #31
 801b2b8:	4413      	add	r3, r2
 801b2ba:	105b      	asrs	r3, r3, #1
 801b2bc:	b29a      	uxth	r2, r3
 801b2be:	68fb      	ldr	r3, [r7, #12]
 801b2c0:	83da      	strh	r2, [r3, #30]
    }
  }
}
 801b2c2:	bf00      	nop
 801b2c4:	3710      	adds	r7, #16
 801b2c6:	46bd      	mov	sp, r7
 801b2c8:	bd80      	pop	{r7, pc}
	...

0801b2cc <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
 801b2cc:	b580      	push	{r7, lr}
 801b2ce:	b084      	sub	sp, #16
 801b2d0:	af00      	add	r7, sp, #0
 801b2d2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b2d4:	687b      	ldr	r3, [r7, #4]
 801b2d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b2d8:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801b2da:	68fb      	ldr	r3, [r7, #12]
 801b2dc:	2200      	movs	r2, #0
 801b2de:	62da      	str	r2, [r3, #44]	@ 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801b2e0:	68fb      	ldr	r3, [r7, #12]
 801b2e2:	2200      	movs	r2, #0
 801b2e4:	631a      	str	r2, [r3, #48]	@ 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801b2e6:	4b27      	ldr	r3, [pc, #156]	@ (801b384 <dhcp_handle_ack+0xb8>)
 801b2e8:	78db      	ldrb	r3, [r3, #3]
 801b2ea:	2b00      	cmp	r3, #0
 801b2ec:	d003      	beq.n	801b2f6 <dhcp_handle_ack+0x2a>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801b2ee:	4b26      	ldr	r3, [pc, #152]	@ (801b388 <dhcp_handle_ack+0xbc>)
 801b2f0:	68da      	ldr	r2, [r3, #12]
 801b2f2:	68fb      	ldr	r3, [r7, #12]
 801b2f4:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801b2f6:	4b23      	ldr	r3, [pc, #140]	@ (801b384 <dhcp_handle_ack+0xb8>)
 801b2f8:	791b      	ldrb	r3, [r3, #4]
 801b2fa:	2b00      	cmp	r3, #0
 801b2fc:	d004      	beq.n	801b308 <dhcp_handle_ack+0x3c>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801b2fe:	4b22      	ldr	r3, [pc, #136]	@ (801b388 <dhcp_handle_ack+0xbc>)
 801b300:	691a      	ldr	r2, [r3, #16]
 801b302:	68fb      	ldr	r3, [r7, #12]
 801b304:	639a      	str	r2, [r3, #56]	@ 0x38
 801b306:	e004      	b.n	801b312 <dhcp_handle_ack+0x46>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801b308:	68fb      	ldr	r3, [r7, #12]
 801b30a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b30c:	085a      	lsrs	r2, r3, #1
 801b30e:	68fb      	ldr	r3, [r7, #12]
 801b310:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801b312:	4b1c      	ldr	r3, [pc, #112]	@ (801b384 <dhcp_handle_ack+0xb8>)
 801b314:	795b      	ldrb	r3, [r3, #5]
 801b316:	2b00      	cmp	r3, #0
 801b318:	d004      	beq.n	801b324 <dhcp_handle_ack+0x58>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801b31a:	4b1b      	ldr	r3, [pc, #108]	@ (801b388 <dhcp_handle_ack+0xbc>)
 801b31c:	695a      	ldr	r2, [r3, #20]
 801b31e:	68fb      	ldr	r3, [r7, #12]
 801b320:	63da      	str	r2, [r3, #60]	@ 0x3c
 801b322:	e007      	b.n	801b334 <dhcp_handle_ack+0x68>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801b324:	68fb      	ldr	r3, [r7, #12]
 801b326:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b328:	4613      	mov	r3, r2
 801b32a:	00db      	lsls	r3, r3, #3
 801b32c:	1a9b      	subs	r3, r3, r2
 801b32e:	08da      	lsrs	r2, r3, #3
 801b330:	68fb      	ldr	r3, [r7, #12]
 801b332:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 801b334:	68fb      	ldr	r3, [r7, #12]
 801b336:	685b      	ldr	r3, [r3, #4]
 801b338:	691a      	ldr	r2, [r3, #16]
 801b33a:	68fb      	ldr	r3, [r7, #12]
 801b33c:	629a      	str	r2, [r3, #40]	@ 0x28
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801b33e:	4b11      	ldr	r3, [pc, #68]	@ (801b384 <dhcp_handle_ack+0xb8>)
 801b340:	799b      	ldrb	r3, [r3, #6]
 801b342:	2b00      	cmp	r3, #0
 801b344:	d00b      	beq.n	801b35e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801b346:	4b10      	ldr	r3, [pc, #64]	@ (801b388 <dhcp_handle_ack+0xbc>)
 801b348:	699b      	ldr	r3, [r3, #24]
 801b34a:	4618      	mov	r0, r3
 801b34c:	f7f7 fe75 	bl	801303a <lwip_htonl>
 801b350:	4602      	mov	r2, r0
 801b352:	68fb      	ldr	r3, [r7, #12]
 801b354:	62da      	str	r2, [r3, #44]	@ 0x2c
    dhcp->subnet_mask_given = 1;
 801b356:	68fb      	ldr	r3, [r7, #12]
 801b358:	2201      	movs	r2, #1
 801b35a:	72da      	strb	r2, [r3, #11]
 801b35c:	e002      	b.n	801b364 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801b35e:	68fb      	ldr	r3, [r7, #12]
 801b360:	2200      	movs	r2, #0
 801b362:	72da      	strb	r2, [r3, #11]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801b364:	4b07      	ldr	r3, [pc, #28]	@ (801b384 <dhcp_handle_ack+0xb8>)
 801b366:	79db      	ldrb	r3, [r3, #7]
 801b368:	2b00      	cmp	r3, #0
 801b36a:	d007      	beq.n	801b37c <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801b36c:	4b06      	ldr	r3, [pc, #24]	@ (801b388 <dhcp_handle_ack+0xbc>)
 801b36e:	69db      	ldr	r3, [r3, #28]
 801b370:	4618      	mov	r0, r3
 801b372:	f7f7 fe62 	bl	801303a <lwip_htonl>
 801b376:	4602      	mov	r2, r0
 801b378:	68fb      	ldr	r3, [r7, #12]
 801b37a:	631a      	str	r2, [r3, #48]	@ 0x30
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801b37c:	bf00      	nop
 801b37e:	3710      	adds	r7, #16
 801b380:	46bd      	mov	sp, r7
 801b382:	bd80      	pop	{r7, pc}
 801b384:	2000dd9c 	.word	0x2000dd9c
 801b388:	2000dd7c 	.word	0x2000dd7c

0801b38c <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801b38c:	b580      	push	{r7, lr}
 801b38e:	b084      	sub	sp, #16
 801b390:	af00      	add	r7, sp, #0
 801b392:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801b394:	687b      	ldr	r3, [r7, #4]
 801b396:	2b00      	cmp	r3, #0
 801b398:	d109      	bne.n	801b3ae <dhcp_start+0x22>
 801b39a:	4b3c      	ldr	r3, [pc, #240]	@ (801b48c <dhcp_start+0x100>)
 801b39c:	f240 22d6 	movw	r2, #726	@ 0x2d6
 801b3a0:	493b      	ldr	r1, [pc, #236]	@ (801b490 <dhcp_start+0x104>)
 801b3a2:	483c      	ldr	r0, [pc, #240]	@ (801b494 <dhcp_start+0x108>)
 801b3a4:	f005 f87c 	bl	80204a0 <iprintf>
 801b3a8:	f06f 030f 	mvn.w	r3, #15
 801b3ac:	e069      	b.n	801b482 <dhcp_start+0xf6>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801b3ae:	687b      	ldr	r3, [r7, #4]
 801b3b0:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801b3b4:	f003 0301 	and.w	r3, r3, #1
 801b3b8:	2b00      	cmp	r3, #0
 801b3ba:	d109      	bne.n	801b3d0 <dhcp_start+0x44>
 801b3bc:	4b33      	ldr	r3, [pc, #204]	@ (801b48c <dhcp_start+0x100>)
 801b3be:	f240 22d7 	movw	r2, #727	@ 0x2d7
 801b3c2:	4935      	ldr	r1, [pc, #212]	@ (801b498 <dhcp_start+0x10c>)
 801b3c4:	4833      	ldr	r0, [pc, #204]	@ (801b494 <dhcp_start+0x108>)
 801b3c6:	f005 f86b 	bl	80204a0 <iprintf>
 801b3ca:	f06f 030f 	mvn.w	r3, #15
 801b3ce:	e058      	b.n	801b482 <dhcp_start+0xf6>
  dhcp = netif_dhcp_data(netif);
 801b3d0:	687b      	ldr	r3, [r7, #4]
 801b3d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b3d4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801b3d6:	687b      	ldr	r3, [r7, #4]
 801b3d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801b3da:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 801b3de:	d202      	bcs.n	801b3e6 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 801b3e0:	f04f 33ff 	mov.w	r3, #4294967295
 801b3e4:	e04d      	b.n	801b482 <dhcp_start+0xf6>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801b3e6:	68fb      	ldr	r3, [r7, #12]
 801b3e8:	2b00      	cmp	r3, #0
 801b3ea:	d10d      	bne.n	801b408 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801b3ec:	2040      	movs	r0, #64	@ 0x40
 801b3ee:	f7f8 f913 	bl	8013618 <mem_malloc>
 801b3f2:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 801b3f4:	68fb      	ldr	r3, [r7, #12]
 801b3f6:	2b00      	cmp	r3, #0
 801b3f8:	d102      	bne.n	801b400 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801b3fa:	f04f 33ff 	mov.w	r3, #4294967295
 801b3fe:	e040      	b.n	801b482 <dhcp_start+0xf6>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801b400:	687b      	ldr	r3, [r7, #4]
 801b402:	68fa      	ldr	r2, [r7, #12]
 801b404:	625a      	str	r2, [r3, #36]	@ 0x24
 801b406:	e01b      	b.n	801b440 <dhcp_start+0xb4>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
 801b408:	68fb      	ldr	r3, [r7, #12]
 801b40a:	68db      	ldr	r3, [r3, #12]
 801b40c:	2b00      	cmp	r3, #0
 801b40e:	d006      	beq.n	801b41e <dhcp_start+0x92>
 801b410:	4b1e      	ldr	r3, [pc, #120]	@ (801b48c <dhcp_start+0x100>)
 801b412:	f44f 723c 	mov.w	r2, #752	@ 0x2f0
 801b416:	4921      	ldr	r1, [pc, #132]	@ (801b49c <dhcp_start+0x110>)
 801b418:	481e      	ldr	r0, [pc, #120]	@ (801b494 <dhcp_start+0x108>)
 801b41a:	f005 f841 	bl	80204a0 <iprintf>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
 801b41e:	68fb      	ldr	r3, [r7, #12]
 801b420:	685b      	ldr	r3, [r3, #4]
 801b422:	2b00      	cmp	r3, #0
 801b424:	d006      	beq.n	801b434 <dhcp_start+0xa8>
 801b426:	4b19      	ldr	r3, [pc, #100]	@ (801b48c <dhcp_start+0x100>)
 801b428:	f240 22f1 	movw	r2, #753	@ 0x2f1
 801b42c:	491c      	ldr	r1, [pc, #112]	@ (801b4a0 <dhcp_start+0x114>)
 801b42e:	4819      	ldr	r0, [pc, #100]	@ (801b494 <dhcp_start+0x108>)
 801b430:	f005 f836 	bl	80204a0 <iprintf>

    if (dhcp->pcb_allocated != 0) {
 801b434:	68fb      	ldr	r3, [r7, #12]
 801b436:	7a1b      	ldrb	r3, [r3, #8]
 801b438:	2b00      	cmp	r3, #0
 801b43a:	d001      	beq.n	801b440 <dhcp_start+0xb4>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801b43c:	f7ff fcd4 	bl	801ade8 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801b440:	2240      	movs	r2, #64	@ 0x40
 801b442:	2100      	movs	r1, #0
 801b444:	68f8      	ldr	r0, [r7, #12]
 801b446:	f005 fa01 	bl	802084c <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801b44a:	f7ff fc7b 	bl	801ad44 <dhcp_inc_pcb_refcount>
 801b44e:	4603      	mov	r3, r0
 801b450:	2b00      	cmp	r3, #0
 801b452:	d002      	beq.n	801b45a <dhcp_start+0xce>
    return ERR_MEM;
 801b454:	f04f 33ff 	mov.w	r3, #4294967295
 801b458:	e013      	b.n	801b482 <dhcp_start+0xf6>
  }
  dhcp->pcb_allocated = 1;
 801b45a:	68fb      	ldr	r3, [r7, #12]
 801b45c:	2201      	movs	r2, #1
 801b45e:	721a      	strb	r2, [r3, #8]
  }
#endif /* LWIP_DHCP_CHECK_LINK_UP */


  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801b460:	6878      	ldr	r0, [r7, #4]
 801b462:	f000 f8b5 	bl	801b5d0 <dhcp_discover>
 801b466:	4603      	mov	r3, r0
 801b468:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 801b46a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801b46e:	2b00      	cmp	r3, #0
 801b470:	d005      	beq.n	801b47e <dhcp_start+0xf2>
    /* free resources allocated above */
    dhcp_stop(netif);
 801b472:	6878      	ldr	r0, [r7, #4]
 801b474:	f000 fc3a 	bl	801bcec <dhcp_stop>
    return ERR_MEM;
 801b478:	f04f 33ff 	mov.w	r3, #4294967295
 801b47c:	e001      	b.n	801b482 <dhcp_start+0xf6>
  }
  return result;
 801b47e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801b482:	4618      	mov	r0, r3
 801b484:	3710      	adds	r7, #16
 801b486:	46bd      	mov	sp, r7
 801b488:	bd80      	pop	{r7, pc}
 801b48a:	bf00      	nop
 801b48c:	080253a8 	.word	0x080253a8
 801b490:	08025454 	.word	0x08025454
 801b494:	08025408 	.word	0x08025408
 801b498:	08025498 	.word	0x08025498
 801b49c:	080254bc 	.word	0x080254bc
 801b4a0:	080254d4 	.word	0x080254d4

0801b4a4 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801b4a4:	b580      	push	{r7, lr}
 801b4a6:	b084      	sub	sp, #16
 801b4a8:	af00      	add	r7, sp, #0
 801b4aa:	6078      	str	r0, [r7, #4]
 801b4ac:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801b4ae:	687b      	ldr	r3, [r7, #4]
 801b4b0:	2b00      	cmp	r3, #0
 801b4b2:	d107      	bne.n	801b4c4 <dhcp_arp_reply+0x20>
 801b4b4:	4b0e      	ldr	r3, [pc, #56]	@ (801b4f0 <dhcp_arp_reply+0x4c>)
 801b4b6:	f240 327b 	movw	r2, #891	@ 0x37b
 801b4ba:	490e      	ldr	r1, [pc, #56]	@ (801b4f4 <dhcp_arp_reply+0x50>)
 801b4bc:	480e      	ldr	r0, [pc, #56]	@ (801b4f8 <dhcp_arp_reply+0x54>)
 801b4be:	f004 ffef 	bl	80204a0 <iprintf>
 801b4c2:	e012      	b.n	801b4ea <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801b4c4:	687b      	ldr	r3, [r7, #4]
 801b4c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b4c8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801b4ca:	68fb      	ldr	r3, [r7, #12]
 801b4cc:	2b00      	cmp	r3, #0
 801b4ce:	d00c      	beq.n	801b4ea <dhcp_arp_reply+0x46>
 801b4d0:	68fb      	ldr	r3, [r7, #12]
 801b4d2:	7a5b      	ldrb	r3, [r3, #9]
 801b4d4:	2b08      	cmp	r3, #8
 801b4d6:	d108      	bne.n	801b4ea <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801b4d8:	683b      	ldr	r3, [r7, #0]
 801b4da:	681a      	ldr	r2, [r3, #0]
 801b4dc:	68fb      	ldr	r3, [r7, #12]
 801b4de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b4e0:	429a      	cmp	r2, r3
 801b4e2:	d102      	bne.n	801b4ea <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801b4e4:	6878      	ldr	r0, [r7, #4]
 801b4e6:	f000 f809 	bl	801b4fc <dhcp_decline>
    }
  }
}
 801b4ea:	3710      	adds	r7, #16
 801b4ec:	46bd      	mov	sp, r7
 801b4ee:	bd80      	pop	{r7, pc}
 801b4f0:	080253a8 	.word	0x080253a8
 801b4f4:	08025454 	.word	0x08025454
 801b4f8:	08025408 	.word	0x08025408

0801b4fc <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 801b4fc:	b580      	push	{r7, lr}
 801b4fe:	b086      	sub	sp, #24
 801b500:	af02      	add	r7, sp, #8
 801b502:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b504:	687b      	ldr	r3, [r7, #4]
 801b506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b508:	60fb      	str	r3, [r7, #12]
  err_t result = ERR_OK;
 801b50a:	2300      	movs	r3, #0
 801b50c:	72fb      	strb	r3, [r7, #11]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801b50e:	210c      	movs	r1, #12
 801b510:	68f8      	ldr	r0, [r7, #12]
 801b512:	f000 fc23 	bl	801bd5c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 801b516:	2204      	movs	r2, #4
 801b518:	68f9      	ldr	r1, [r7, #12]
 801b51a:	6878      	ldr	r0, [r7, #4]
 801b51c:	f001 f8a6 	bl	801c66c <dhcp_create_msg>
 801b520:	4603      	mov	r3, r0
 801b522:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
 801b524:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801b528:	2b00      	cmp	r3, #0
 801b52a:	d12a      	bne.n	801b582 <dhcp_decline+0x86>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 801b52c:	2204      	movs	r2, #4
 801b52e:	2132      	movs	r1, #50	@ 0x32
 801b530:	68f8      	ldr	r0, [r7, #12]
 801b532:	f000 fc2d 	bl	801bd90 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801b536:	68fb      	ldr	r3, [r7, #12]
 801b538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b53a:	4618      	mov	r0, r3
 801b53c:	f7f7 fd7d 	bl	801303a <lwip_htonl>
 801b540:	4603      	mov	r3, r0
 801b542:	4619      	mov	r1, r3
 801b544:	68f8      	ldr	r0, [r7, #12]
 801b546:	f000 fcbf 	bl	801bec8 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 801b54a:	68f8      	ldr	r0, [r7, #12]
 801b54c:	f001 fa32 	bl	801c9b4 <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801b550:	68fb      	ldr	r3, [r7, #12]
 801b552:	68da      	ldr	r2, [r3, #12]
 801b554:	68fb      	ldr	r3, [r7, #12]
 801b556:	8a9b      	ldrh	r3, [r3, #20]
 801b558:	33f0      	adds	r3, #240	@ 0xf0
 801b55a:	b29b      	uxth	r3, r3
 801b55c:	4619      	mov	r1, r3
 801b55e:	4610      	mov	r0, r2
 801b560:	f7f8 fe42 	bl	80141e8 <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 801b564:	4b16      	ldr	r3, [pc, #88]	@ (801b5c0 <dhcp_decline+0xc4>)
 801b566:	6818      	ldr	r0, [r3, #0]
 801b568:	68fb      	ldr	r3, [r7, #12]
 801b56a:	68d9      	ldr	r1, [r3, #12]
 801b56c:	4b15      	ldr	r3, [pc, #84]	@ (801b5c4 <dhcp_decline+0xc8>)
 801b56e:	9301      	str	r3, [sp, #4]
 801b570:	687b      	ldr	r3, [r7, #4]
 801b572:	9300      	str	r3, [sp, #0]
 801b574:	2343      	movs	r3, #67	@ 0x43
 801b576:	4a14      	ldr	r2, [pc, #80]	@ (801b5c8 <dhcp_decline+0xcc>)
 801b578:	f7ff f9de 	bl	801a938 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 801b57c:	68f8      	ldr	r0, [r7, #12]
 801b57e:	f001 f9d7 	bl	801c930 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801b582:	68fb      	ldr	r3, [r7, #12]
 801b584:	7a9b      	ldrb	r3, [r3, #10]
 801b586:	2bff      	cmp	r3, #255	@ 0xff
 801b588:	d005      	beq.n	801b596 <dhcp_decline+0x9a>
    dhcp->tries++;
 801b58a:	68fb      	ldr	r3, [r7, #12]
 801b58c:	7a9b      	ldrb	r3, [r3, #10]
 801b58e:	3301      	adds	r3, #1
 801b590:	b2da      	uxtb	r2, r3
 801b592:	68fb      	ldr	r3, [r7, #12]
 801b594:	729a      	strb	r2, [r3, #10]
  }
  msecs = 10*1000;
 801b596:	f242 7310 	movw	r3, #10000	@ 0x2710
 801b59a:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801b59c:	893b      	ldrh	r3, [r7, #8]
 801b59e:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801b5a2:	4a0a      	ldr	r2, [pc, #40]	@ (801b5cc <dhcp_decline+0xd0>)
 801b5a4:	fb82 1203 	smull	r1, r2, r2, r3
 801b5a8:	1152      	asrs	r2, r2, #5
 801b5aa:	17db      	asrs	r3, r3, #31
 801b5ac:	1ad3      	subs	r3, r2, r3
 801b5ae:	b29a      	uxth	r2, r3
 801b5b0:	68fb      	ldr	r3, [r7, #12]
 801b5b2:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801b5b4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801b5b8:	4618      	mov	r0, r3
 801b5ba:	3710      	adds	r7, #16
 801b5bc:	46bd      	mov	sp, r7
 801b5be:	bd80      	pop	{r7, pc}
 801b5c0:	2000dda4 	.word	0x2000dda4
 801b5c4:	0802f050 	.word	0x0802f050
 801b5c8:	0802f054 	.word	0x0802f054
 801b5cc:	10624dd3 	.word	0x10624dd3

0801b5d0 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801b5d0:	b580      	push	{r7, lr}
 801b5d2:	b088      	sub	sp, #32
 801b5d4:	af02      	add	r7, sp, #8
 801b5d6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b5d8:	687b      	ldr	r3, [r7, #4]
 801b5da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b5dc:	613b      	str	r3, [r7, #16]
  err_t result = ERR_OK;
 801b5de:	2300      	movs	r3, #0
 801b5e0:	73fb      	strb	r3, [r7, #15]
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801b5e2:	693b      	ldr	r3, [r7, #16]
 801b5e4:	2200      	movs	r2, #0
 801b5e6:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801b5e8:	2106      	movs	r1, #6
 801b5ea:	6938      	ldr	r0, [r7, #16]
 801b5ec:	f000 fbb6 	bl	801bd5c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 801b5f0:	2201      	movs	r2, #1
 801b5f2:	6939      	ldr	r1, [r7, #16]
 801b5f4:	6878      	ldr	r0, [r7, #4]
 801b5f6:	f001 f839 	bl	801c66c <dhcp_create_msg>
 801b5fa:	4603      	mov	r3, r0
 801b5fc:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 801b5fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b602:	2b00      	cmp	r3, #0
 801b604:	d13b      	bne.n	801b67e <dhcp_discover+0xae>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801b606:	2202      	movs	r2, #2
 801b608:	2139      	movs	r1, #57	@ 0x39
 801b60a:	6938      	ldr	r0, [r7, #16]
 801b60c:	f000 fbc0 	bl	801bd90 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 801b610:	687b      	ldr	r3, [r7, #4]
 801b612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801b614:	4619      	mov	r1, r3
 801b616:	6938      	ldr	r0, [r7, #16]
 801b618:	f000 fc1c 	bl	801be54 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801b61c:	2203      	movs	r2, #3
 801b61e:	2137      	movs	r1, #55	@ 0x37
 801b620:	6938      	ldr	r0, [r7, #16]
 801b622:	f000 fbb5 	bl	801bd90 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801b626:	2300      	movs	r3, #0
 801b628:	75fb      	strb	r3, [r7, #23]
 801b62a:	e009      	b.n	801b640 <dhcp_discover+0x70>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 801b62c:	7dfb      	ldrb	r3, [r7, #23]
 801b62e:	4a29      	ldr	r2, [pc, #164]	@ (801b6d4 <dhcp_discover+0x104>)
 801b630:	5cd3      	ldrb	r3, [r2, r3]
 801b632:	4619      	mov	r1, r3
 801b634:	6938      	ldr	r0, [r7, #16]
 801b636:	f000 fbe5 	bl	801be04 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801b63a:	7dfb      	ldrb	r3, [r7, #23]
 801b63c:	3301      	adds	r3, #1
 801b63e:	75fb      	strb	r3, [r7, #23]
 801b640:	7dfb      	ldrb	r3, [r7, #23]
 801b642:	2b02      	cmp	r3, #2
 801b644:	d9f2      	bls.n	801b62c <dhcp_discover+0x5c>
    }
    dhcp_option_trailer(dhcp);
 801b646:	6938      	ldr	r0, [r7, #16]
 801b648:	f001 f9b4 	bl	801c9b4 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801b64c:	693b      	ldr	r3, [r7, #16]
 801b64e:	68da      	ldr	r2, [r3, #12]
 801b650:	693b      	ldr	r3, [r7, #16]
 801b652:	8a9b      	ldrh	r3, [r3, #20]
 801b654:	33f0      	adds	r3, #240	@ 0xf0
 801b656:	b29b      	uxth	r3, r3
 801b658:	4619      	mov	r1, r3
 801b65a:	4610      	mov	r0, r2
 801b65c:	f7f8 fdc4 	bl	80141e8 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 801b660:	4b1d      	ldr	r3, [pc, #116]	@ (801b6d8 <dhcp_discover+0x108>)
 801b662:	6818      	ldr	r0, [r3, #0]
 801b664:	693b      	ldr	r3, [r7, #16]
 801b666:	68d9      	ldr	r1, [r3, #12]
 801b668:	4b1c      	ldr	r3, [pc, #112]	@ (801b6dc <dhcp_discover+0x10c>)
 801b66a:	9301      	str	r3, [sp, #4]
 801b66c:	687b      	ldr	r3, [r7, #4]
 801b66e:	9300      	str	r3, [sp, #0]
 801b670:	2343      	movs	r3, #67	@ 0x43
 801b672:	4a1b      	ldr	r2, [pc, #108]	@ (801b6e0 <dhcp_discover+0x110>)
 801b674:	f7ff f960 	bl	801a938 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
 801b678:	6938      	ldr	r0, [r7, #16]
 801b67a:	f001 f959 	bl	801c930 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801b67e:	693b      	ldr	r3, [r7, #16]
 801b680:	7a9b      	ldrb	r3, [r3, #10]
 801b682:	2bff      	cmp	r3, #255	@ 0xff
 801b684:	d005      	beq.n	801b692 <dhcp_discover+0xc2>
    dhcp->tries++;
 801b686:	693b      	ldr	r3, [r7, #16]
 801b688:	7a9b      	ldrb	r3, [r3, #10]
 801b68a:	3301      	adds	r3, #1
 801b68c:	b2da      	uxtb	r2, r3
 801b68e:	693b      	ldr	r3, [r7, #16]
 801b690:	729a      	strb	r2, [r3, #10]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 801b692:	693b      	ldr	r3, [r7, #16]
 801b694:	7a9b      	ldrb	r3, [r3, #10]
 801b696:	2b05      	cmp	r3, #5
 801b698:	d807      	bhi.n	801b6aa <dhcp_discover+0xda>
 801b69a:	693b      	ldr	r3, [r7, #16]
 801b69c:	7a9b      	ldrb	r3, [r3, #10]
 801b69e:	461a      	mov	r2, r3
 801b6a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801b6a4:	4093      	lsls	r3, r2
 801b6a6:	b29b      	uxth	r3, r3
 801b6a8:	e001      	b.n	801b6ae <dhcp_discover+0xde>
 801b6aa:	f64e 2360 	movw	r3, #60000	@ 0xea60
 801b6ae:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801b6b0:	89bb      	ldrh	r3, [r7, #12]
 801b6b2:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801b6b6:	4a0b      	ldr	r2, [pc, #44]	@ (801b6e4 <dhcp_discover+0x114>)
 801b6b8:	fb82 1203 	smull	r1, r2, r2, r3
 801b6bc:	1152      	asrs	r2, r2, #5
 801b6be:	17db      	asrs	r3, r3, #31
 801b6c0:	1ad3      	subs	r3, r2, r3
 801b6c2:	b29a      	uxth	r2, r3
 801b6c4:	693b      	ldr	r3, [r7, #16]
 801b6c6:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801b6c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b6cc:	4618      	mov	r0, r3
 801b6ce:	3718      	adds	r7, #24
 801b6d0:	46bd      	mov	sp, r7
 801b6d2:	bd80      	pop	{r7, pc}
 801b6d4:	2000011c 	.word	0x2000011c
 801b6d8:	2000dda4 	.word	0x2000dda4
 801b6dc:	0802f050 	.word	0x0802f050
 801b6e0:	0802f054 	.word	0x0802f054
 801b6e4:	10624dd3 	.word	0x10624dd3

0801b6e8 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 801b6e8:	b580      	push	{r7, lr}
 801b6ea:	b088      	sub	sp, #32
 801b6ec:	af00      	add	r7, sp, #0
 801b6ee:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801b6f0:	687b      	ldr	r3, [r7, #4]
 801b6f2:	2b00      	cmp	r3, #0
 801b6f4:	d107      	bne.n	801b706 <dhcp_bind+0x1e>
 801b6f6:	4b64      	ldr	r3, [pc, #400]	@ (801b888 <dhcp_bind+0x1a0>)
 801b6f8:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 801b6fc:	4963      	ldr	r1, [pc, #396]	@ (801b88c <dhcp_bind+0x1a4>)
 801b6fe:	4864      	ldr	r0, [pc, #400]	@ (801b890 <dhcp_bind+0x1a8>)
 801b700:	f004 fece 	bl	80204a0 <iprintf>
 801b704:	e0bc      	b.n	801b880 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801b706:	687b      	ldr	r3, [r7, #4]
 801b708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b70a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801b70c:	69bb      	ldr	r3, [r7, #24]
 801b70e:	2b00      	cmp	r3, #0
 801b710:	d107      	bne.n	801b722 <dhcp_bind+0x3a>
 801b712:	4b5d      	ldr	r3, [pc, #372]	@ (801b888 <dhcp_bind+0x1a0>)
 801b714:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801b718:	495e      	ldr	r1, [pc, #376]	@ (801b894 <dhcp_bind+0x1ac>)
 801b71a:	485d      	ldr	r0, [pc, #372]	@ (801b890 <dhcp_bind+0x1a8>)
 801b71c:	f004 fec0 	bl	80204a0 <iprintf>
 801b720:	e0ae      	b.n	801b880 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801b722:	69bb      	ldr	r3, [r7, #24]
 801b724:	2200      	movs	r2, #0
 801b726:	841a      	strh	r2, [r3, #32]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801b728:	69bb      	ldr	r3, [r7, #24]
 801b72a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b72c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b730:	d019      	beq.n	801b766 <dhcp_bind+0x7e>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801b732:	69bb      	ldr	r3, [r7, #24]
 801b734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b736:	331e      	adds	r3, #30
 801b738:	4a57      	ldr	r2, [pc, #348]	@ (801b898 <dhcp_bind+0x1b0>)
 801b73a:	fba2 2303 	umull	r2, r3, r2, r3
 801b73e:	095b      	lsrs	r3, r3, #5
 801b740:	61fb      	str	r3, [r7, #28]
     if (timeout > 0xffff) {
 801b742:	69fb      	ldr	r3, [r7, #28]
 801b744:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b748:	d302      	bcc.n	801b750 <dhcp_bind+0x68>
       timeout = 0xffff;
 801b74a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b74e:	61fb      	str	r3, [r7, #28]
     }
     dhcp->t0_timeout = (u16_t)timeout;
 801b750:	69fb      	ldr	r3, [r7, #28]
 801b752:	b29a      	uxth	r2, r3
 801b754:	69bb      	ldr	r3, [r7, #24]
 801b756:	845a      	strh	r2, [r3, #34]	@ 0x22
     if (dhcp->t0_timeout == 0) {
 801b758:	69bb      	ldr	r3, [r7, #24]
 801b75a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801b75c:	2b00      	cmp	r3, #0
 801b75e:	d102      	bne.n	801b766 <dhcp_bind+0x7e>
       dhcp->t0_timeout = 1;
 801b760:	69bb      	ldr	r3, [r7, #24]
 801b762:	2201      	movs	r2, #1
 801b764:	845a      	strh	r2, [r3, #34]	@ 0x22
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801b766:	69bb      	ldr	r3, [r7, #24]
 801b768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801b76a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b76e:	d01d      	beq.n	801b7ac <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801b770:	69bb      	ldr	r3, [r7, #24]
 801b772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801b774:	331e      	adds	r3, #30
 801b776:	4a48      	ldr	r2, [pc, #288]	@ (801b898 <dhcp_bind+0x1b0>)
 801b778:	fba2 2303 	umull	r2, r3, r2, r3
 801b77c:	095b      	lsrs	r3, r3, #5
 801b77e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801b780:	69fb      	ldr	r3, [r7, #28]
 801b782:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b786:	d302      	bcc.n	801b78e <dhcp_bind+0xa6>
      timeout = 0xffff;
 801b788:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b78c:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801b78e:	69fb      	ldr	r3, [r7, #28]
 801b790:	b29a      	uxth	r2, r3
 801b792:	69bb      	ldr	r3, [r7, #24]
 801b794:	831a      	strh	r2, [r3, #24]
    if (dhcp->t1_timeout == 0) {
 801b796:	69bb      	ldr	r3, [r7, #24]
 801b798:	8b1b      	ldrh	r3, [r3, #24]
 801b79a:	2b00      	cmp	r3, #0
 801b79c:	d102      	bne.n	801b7a4 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801b79e:	69bb      	ldr	r3, [r7, #24]
 801b7a0:	2201      	movs	r2, #1
 801b7a2:	831a      	strh	r2, [r3, #24]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801b7a4:	69bb      	ldr	r3, [r7, #24]
 801b7a6:	8b1a      	ldrh	r2, [r3, #24]
 801b7a8:	69bb      	ldr	r3, [r7, #24]
 801b7aa:	839a      	strh	r2, [r3, #28]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801b7ac:	69bb      	ldr	r3, [r7, #24]
 801b7ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b7b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b7b4:	d01d      	beq.n	801b7f2 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801b7b6:	69bb      	ldr	r3, [r7, #24]
 801b7b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b7ba:	331e      	adds	r3, #30
 801b7bc:	4a36      	ldr	r2, [pc, #216]	@ (801b898 <dhcp_bind+0x1b0>)
 801b7be:	fba2 2303 	umull	r2, r3, r2, r3
 801b7c2:	095b      	lsrs	r3, r3, #5
 801b7c4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801b7c6:	69fb      	ldr	r3, [r7, #28]
 801b7c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b7cc:	d302      	bcc.n	801b7d4 <dhcp_bind+0xec>
      timeout = 0xffff;
 801b7ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b7d2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801b7d4:	69fb      	ldr	r3, [r7, #28]
 801b7d6:	b29a      	uxth	r2, r3
 801b7d8:	69bb      	ldr	r3, [r7, #24]
 801b7da:	835a      	strh	r2, [r3, #26]
    if (dhcp->t2_timeout == 0) {
 801b7dc:	69bb      	ldr	r3, [r7, #24]
 801b7de:	8b5b      	ldrh	r3, [r3, #26]
 801b7e0:	2b00      	cmp	r3, #0
 801b7e2:	d102      	bne.n	801b7ea <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801b7e4:	69bb      	ldr	r3, [r7, #24]
 801b7e6:	2201      	movs	r2, #1
 801b7e8:	835a      	strh	r2, [r3, #26]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801b7ea:	69bb      	ldr	r3, [r7, #24]
 801b7ec:	8b5a      	ldrh	r2, [r3, #26]
 801b7ee:	69bb      	ldr	r3, [r7, #24]
 801b7f0:	83da      	strh	r2, [r3, #30]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801b7f2:	69bb      	ldr	r3, [r7, #24]
 801b7f4:	8b1a      	ldrh	r2, [r3, #24]
 801b7f6:	69bb      	ldr	r3, [r7, #24]
 801b7f8:	8b5b      	ldrh	r3, [r3, #26]
 801b7fa:	429a      	cmp	r2, r3
 801b7fc:	d306      	bcc.n	801b80c <dhcp_bind+0x124>
 801b7fe:	69bb      	ldr	r3, [r7, #24]
 801b800:	8b5b      	ldrh	r3, [r3, #26]
 801b802:	2b00      	cmp	r3, #0
 801b804:	d002      	beq.n	801b80c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801b806:	69bb      	ldr	r3, [r7, #24]
 801b808:	2200      	movs	r2, #0
 801b80a:	831a      	strh	r2, [r3, #24]
  }

  if (dhcp->subnet_mask_given) {
 801b80c:	69bb      	ldr	r3, [r7, #24]
 801b80e:	7adb      	ldrb	r3, [r3, #11]
 801b810:	2b00      	cmp	r3, #0
 801b812:	d003      	beq.n	801b81c <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801b814:	69bb      	ldr	r3, [r7, #24]
 801b816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b818:	613b      	str	r3, [r7, #16]
 801b81a:	e014      	b.n	801b846 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801b81c:	69bb      	ldr	r3, [r7, #24]
 801b81e:	3328      	adds	r3, #40	@ 0x28
 801b820:	781b      	ldrb	r3, [r3, #0]
 801b822:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801b824:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801b828:	2b00      	cmp	r3, #0
 801b82a:	db02      	blt.n	801b832 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801b82c:	23ff      	movs	r3, #255	@ 0xff
 801b82e:	613b      	str	r3, [r7, #16]
 801b830:	e009      	b.n	801b846 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801b832:	7dfb      	ldrb	r3, [r7, #23]
 801b834:	2bbf      	cmp	r3, #191	@ 0xbf
 801b836:	d903      	bls.n	801b840 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801b838:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 801b83c:	613b      	str	r3, [r7, #16]
 801b83e:	e002      	b.n	801b846 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801b840:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b844:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801b846:	69bb      	ldr	r3, [r7, #24]
 801b848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b84a:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801b84c:	68fb      	ldr	r3, [r7, #12]
 801b84e:	2b00      	cmp	r3, #0
 801b850:	d108      	bne.n	801b864 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801b852:	69bb      	ldr	r3, [r7, #24]
 801b854:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b856:	693b      	ldr	r3, [r7, #16]
 801b858:	4013      	ands	r3, r2
 801b85a:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801b85c:	68fb      	ldr	r3, [r7, #12]
 801b85e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801b862:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801b864:	210a      	movs	r1, #10
 801b866:	69b8      	ldr	r0, [r7, #24]
 801b868:	f000 fa78 	bl	801bd5c <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801b86c:	69bb      	ldr	r3, [r7, #24]
 801b86e:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 801b872:	f107 030c 	add.w	r3, r7, #12
 801b876:	f107 0210 	add.w	r2, r7, #16
 801b87a:	6878      	ldr	r0, [r7, #4]
 801b87c:	f7f8 f95a 	bl	8013b34 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801b880:	3720      	adds	r7, #32
 801b882:	46bd      	mov	sp, r7
 801b884:	bd80      	pop	{r7, pc}
 801b886:	bf00      	nop
 801b888:	080253a8 	.word	0x080253a8
 801b88c:	080254e8 	.word	0x080254e8
 801b890:	08025408 	.word	0x08025408
 801b894:	08025504 	.word	0x08025504
 801b898:	88888889 	.word	0x88888889

0801b89c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801b89c:	b580      	push	{r7, lr}
 801b89e:	b088      	sub	sp, #32
 801b8a0:	af02      	add	r7, sp, #8
 801b8a2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b8a4:	687b      	ldr	r3, [r7, #4]
 801b8a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b8a8:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801b8aa:	2105      	movs	r1, #5
 801b8ac:	6938      	ldr	r0, [r7, #16]
 801b8ae:	f000 fa55 	bl	801bd5c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 801b8b2:	2203      	movs	r2, #3
 801b8b4:	6939      	ldr	r1, [r7, #16]
 801b8b6:	6878      	ldr	r0, [r7, #4]
 801b8b8:	f000 fed8 	bl	801c66c <dhcp_create_msg>
 801b8bc:	4603      	mov	r3, r0
 801b8be:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 801b8c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b8c4:	2b00      	cmp	r3, #0
 801b8c6:	d13b      	bne.n	801b940 <dhcp_renew+0xa4>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801b8c8:	2202      	movs	r2, #2
 801b8ca:	2139      	movs	r1, #57	@ 0x39
 801b8cc:	6938      	ldr	r0, [r7, #16]
 801b8ce:	f000 fa5f 	bl	801bd90 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 801b8d2:	687b      	ldr	r3, [r7, #4]
 801b8d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801b8d6:	4619      	mov	r1, r3
 801b8d8:	6938      	ldr	r0, [r7, #16]
 801b8da:	f000 fabb 	bl	801be54 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801b8de:	2203      	movs	r2, #3
 801b8e0:	2137      	movs	r1, #55	@ 0x37
 801b8e2:	6938      	ldr	r0, [r7, #16]
 801b8e4:	f000 fa54 	bl	801bd90 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801b8e8:	2300      	movs	r3, #0
 801b8ea:	75fb      	strb	r3, [r7, #23]
 801b8ec:	e009      	b.n	801b902 <dhcp_renew+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 801b8ee:	7dfb      	ldrb	r3, [r7, #23]
 801b8f0:	4a2a      	ldr	r2, [pc, #168]	@ (801b99c <dhcp_renew+0x100>)
 801b8f2:	5cd3      	ldrb	r3, [r2, r3]
 801b8f4:	4619      	mov	r1, r3
 801b8f6:	6938      	ldr	r0, [r7, #16]
 801b8f8:	f000 fa84 	bl	801be04 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801b8fc:	7dfb      	ldrb	r3, [r7, #23]
 801b8fe:	3301      	adds	r3, #1
 801b900:	75fb      	strb	r3, [r7, #23]
 801b902:	7dfb      	ldrb	r3, [r7, #23]
 801b904:	2b02      	cmp	r3, #2
 801b906:	d9f2      	bls.n	801b8ee <dhcp_renew+0x52>
#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
 801b908:	6938      	ldr	r0, [r7, #16]
 801b90a:	f001 f853 	bl	801c9b4 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801b90e:	693b      	ldr	r3, [r7, #16]
 801b910:	68da      	ldr	r2, [r3, #12]
 801b912:	693b      	ldr	r3, [r7, #16]
 801b914:	8a9b      	ldrh	r3, [r3, #20]
 801b916:	33f0      	adds	r3, #240	@ 0xf0
 801b918:	b29b      	uxth	r3, r3
 801b91a:	4619      	mov	r1, r3
 801b91c:	4610      	mov	r0, r2
 801b91e:	f7f8 fc63 	bl	80141e8 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 801b922:	4b1f      	ldr	r3, [pc, #124]	@ (801b9a0 <dhcp_renew+0x104>)
 801b924:	6818      	ldr	r0, [r3, #0]
 801b926:	693b      	ldr	r3, [r7, #16]
 801b928:	68d9      	ldr	r1, [r3, #12]
 801b92a:	693b      	ldr	r3, [r7, #16]
 801b92c:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801b930:	687b      	ldr	r3, [r7, #4]
 801b932:	9300      	str	r3, [sp, #0]
 801b934:	2343      	movs	r3, #67	@ 0x43
 801b936:	f7fe ffc1 	bl	801a8bc <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 801b93a:	6938      	ldr	r0, [r7, #16]
 801b93c:	f000 fff8 	bl	801c930 <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801b940:	693b      	ldr	r3, [r7, #16]
 801b942:	7a9b      	ldrb	r3, [r3, #10]
 801b944:	2bff      	cmp	r3, #255	@ 0xff
 801b946:	d005      	beq.n	801b954 <dhcp_renew+0xb8>
    dhcp->tries++;
 801b948:	693b      	ldr	r3, [r7, #16]
 801b94a:	7a9b      	ldrb	r3, [r3, #10]
 801b94c:	3301      	adds	r3, #1
 801b94e:	b2da      	uxtb	r2, r3
 801b950:	693b      	ldr	r3, [r7, #16]
 801b952:	729a      	strb	r2, [r3, #10]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 801b954:	693b      	ldr	r3, [r7, #16]
 801b956:	7a9b      	ldrb	r3, [r3, #10]
 801b958:	2b09      	cmp	r3, #9
 801b95a:	d809      	bhi.n	801b970 <dhcp_renew+0xd4>
 801b95c:	693b      	ldr	r3, [r7, #16]
 801b95e:	7a9b      	ldrb	r3, [r3, #10]
 801b960:	461a      	mov	r2, r3
 801b962:	0152      	lsls	r2, r2, #5
 801b964:	1ad2      	subs	r2, r2, r3
 801b966:	0092      	lsls	r2, r2, #2
 801b968:	4413      	add	r3, r2
 801b96a:	011b      	lsls	r3, r3, #4
 801b96c:	b29b      	uxth	r3, r3
 801b96e:	e001      	b.n	801b974 <dhcp_renew+0xd8>
 801b970:	f644 6320 	movw	r3, #20000	@ 0x4e20
 801b974:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801b976:	89bb      	ldrh	r3, [r7, #12]
 801b978:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801b97c:	4a09      	ldr	r2, [pc, #36]	@ (801b9a4 <dhcp_renew+0x108>)
 801b97e:	fb82 1203 	smull	r1, r2, r2, r3
 801b982:	1152      	asrs	r2, r2, #5
 801b984:	17db      	asrs	r3, r3, #31
 801b986:	1ad3      	subs	r3, r2, r3
 801b988:	b29a      	uxth	r2, r3
 801b98a:	693b      	ldr	r3, [r7, #16]
 801b98c:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801b98e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b992:	4618      	mov	r0, r3
 801b994:	3718      	adds	r7, #24
 801b996:	46bd      	mov	sp, r7
 801b998:	bd80      	pop	{r7, pc}
 801b99a:	bf00      	nop
 801b99c:	2000011c 	.word	0x2000011c
 801b9a0:	2000dda4 	.word	0x2000dda4
 801b9a4:	10624dd3 	.word	0x10624dd3

0801b9a8 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801b9a8:	b580      	push	{r7, lr}
 801b9aa:	b088      	sub	sp, #32
 801b9ac:	af02      	add	r7, sp, #8
 801b9ae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b9b0:	687b      	ldr	r3, [r7, #4]
 801b9b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b9b4:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801b9b6:	2104      	movs	r1, #4
 801b9b8:	6938      	ldr	r0, [r7, #16]
 801b9ba:	f000 f9cf 	bl	801bd5c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 801b9be:	2203      	movs	r2, #3
 801b9c0:	6939      	ldr	r1, [r7, #16]
 801b9c2:	6878      	ldr	r0, [r7, #4]
 801b9c4:	f000 fe52 	bl	801c66c <dhcp_create_msg>
 801b9c8:	4603      	mov	r3, r0
 801b9ca:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 801b9cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b9d0:	2b00      	cmp	r3, #0
 801b9d2:	d139      	bne.n	801ba48 <dhcp_rebind+0xa0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801b9d4:	2202      	movs	r2, #2
 801b9d6:	2139      	movs	r1, #57	@ 0x39
 801b9d8:	6938      	ldr	r0, [r7, #16]
 801b9da:	f000 f9d9 	bl	801bd90 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 801b9de:	687b      	ldr	r3, [r7, #4]
 801b9e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801b9e2:	4619      	mov	r1, r3
 801b9e4:	6938      	ldr	r0, [r7, #16]
 801b9e6:	f000 fa35 	bl	801be54 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801b9ea:	2203      	movs	r2, #3
 801b9ec:	2137      	movs	r1, #55	@ 0x37
 801b9ee:	6938      	ldr	r0, [r7, #16]
 801b9f0:	f000 f9ce 	bl	801bd90 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801b9f4:	2300      	movs	r3, #0
 801b9f6:	75fb      	strb	r3, [r7, #23]
 801b9f8:	e009      	b.n	801ba0e <dhcp_rebind+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 801b9fa:	7dfb      	ldrb	r3, [r7, #23]
 801b9fc:	4a29      	ldr	r2, [pc, #164]	@ (801baa4 <dhcp_rebind+0xfc>)
 801b9fe:	5cd3      	ldrb	r3, [r2, r3]
 801ba00:	4619      	mov	r1, r3
 801ba02:	6938      	ldr	r0, [r7, #16]
 801ba04:	f000 f9fe 	bl	801be04 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801ba08:	7dfb      	ldrb	r3, [r7, #23]
 801ba0a:	3301      	adds	r3, #1
 801ba0c:	75fb      	strb	r3, [r7, #23]
 801ba0e:	7dfb      	ldrb	r3, [r7, #23]
 801ba10:	2b02      	cmp	r3, #2
 801ba12:	d9f2      	bls.n	801b9fa <dhcp_rebind+0x52>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 801ba14:	6938      	ldr	r0, [r7, #16]
 801ba16:	f000 ffcd 	bl	801c9b4 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801ba1a:	693b      	ldr	r3, [r7, #16]
 801ba1c:	68da      	ldr	r2, [r3, #12]
 801ba1e:	693b      	ldr	r3, [r7, #16]
 801ba20:	8a9b      	ldrh	r3, [r3, #20]
 801ba22:	33f0      	adds	r3, #240	@ 0xf0
 801ba24:	b29b      	uxth	r3, r3
 801ba26:	4619      	mov	r1, r3
 801ba28:	4610      	mov	r0, r2
 801ba2a:	f7f8 fbdd 	bl	80141e8 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 801ba2e:	4b1e      	ldr	r3, [pc, #120]	@ (801baa8 <dhcp_rebind+0x100>)
 801ba30:	6818      	ldr	r0, [r3, #0]
 801ba32:	693b      	ldr	r3, [r7, #16]
 801ba34:	68d9      	ldr	r1, [r3, #12]
 801ba36:	687b      	ldr	r3, [r7, #4]
 801ba38:	9300      	str	r3, [sp, #0]
 801ba3a:	2343      	movs	r3, #67	@ 0x43
 801ba3c:	4a1b      	ldr	r2, [pc, #108]	@ (801baac <dhcp_rebind+0x104>)
 801ba3e:	f7fe ff3d 	bl	801a8bc <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 801ba42:	6938      	ldr	r0, [r7, #16]
 801ba44:	f000 ff74 	bl	801c930 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801ba48:	693b      	ldr	r3, [r7, #16]
 801ba4a:	7a9b      	ldrb	r3, [r3, #10]
 801ba4c:	2bff      	cmp	r3, #255	@ 0xff
 801ba4e:	d005      	beq.n	801ba5c <dhcp_rebind+0xb4>
    dhcp->tries++;
 801ba50:	693b      	ldr	r3, [r7, #16]
 801ba52:	7a9b      	ldrb	r3, [r3, #10]
 801ba54:	3301      	adds	r3, #1
 801ba56:	b2da      	uxtb	r2, r3
 801ba58:	693b      	ldr	r3, [r7, #16]
 801ba5a:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 801ba5c:	693b      	ldr	r3, [r7, #16]
 801ba5e:	7a9b      	ldrb	r3, [r3, #10]
 801ba60:	2b09      	cmp	r3, #9
 801ba62:	d809      	bhi.n	801ba78 <dhcp_rebind+0xd0>
 801ba64:	693b      	ldr	r3, [r7, #16]
 801ba66:	7a9b      	ldrb	r3, [r3, #10]
 801ba68:	461a      	mov	r2, r3
 801ba6a:	0152      	lsls	r2, r2, #5
 801ba6c:	1ad2      	subs	r2, r2, r3
 801ba6e:	0092      	lsls	r2, r2, #2
 801ba70:	4413      	add	r3, r2
 801ba72:	00db      	lsls	r3, r3, #3
 801ba74:	b29b      	uxth	r3, r3
 801ba76:	e001      	b.n	801ba7c <dhcp_rebind+0xd4>
 801ba78:	f242 7310 	movw	r3, #10000	@ 0x2710
 801ba7c:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801ba7e:	89bb      	ldrh	r3, [r7, #12]
 801ba80:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801ba84:	4a0a      	ldr	r2, [pc, #40]	@ (801bab0 <dhcp_rebind+0x108>)
 801ba86:	fb82 1203 	smull	r1, r2, r2, r3
 801ba8a:	1152      	asrs	r2, r2, #5
 801ba8c:	17db      	asrs	r3, r3, #31
 801ba8e:	1ad3      	subs	r3, r2, r3
 801ba90:	b29a      	uxth	r2, r3
 801ba92:	693b      	ldr	r3, [r7, #16]
 801ba94:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801ba96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ba9a:	4618      	mov	r0, r3
 801ba9c:	3718      	adds	r7, #24
 801ba9e:	46bd      	mov	sp, r7
 801baa0:	bd80      	pop	{r7, pc}
 801baa2:	bf00      	nop
 801baa4:	2000011c 	.word	0x2000011c
 801baa8:	2000dda4 	.word	0x2000dda4
 801baac:	0802f054 	.word	0x0802f054
 801bab0:	10624dd3 	.word	0x10624dd3

0801bab4 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801bab4:	b580      	push	{r7, lr}
 801bab6:	b088      	sub	sp, #32
 801bab8:	af02      	add	r7, sp, #8
 801baba:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801babc:	687b      	ldr	r3, [r7, #4]
 801babe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bac0:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801bac2:	2103      	movs	r1, #3
 801bac4:	6938      	ldr	r0, [r7, #16]
 801bac6:	f000 f949 	bl	801bd5c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 801baca:	2203      	movs	r2, #3
 801bacc:	6939      	ldr	r1, [r7, #16]
 801bace:	6878      	ldr	r0, [r7, #4]
 801bad0:	f000 fdcc 	bl	801c66c <dhcp_create_msg>
 801bad4:	4603      	mov	r3, r0
 801bad6:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 801bad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801badc:	2b00      	cmp	r3, #0
 801bade:	d147      	bne.n	801bb70 <dhcp_reboot+0xbc>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801bae0:	2202      	movs	r2, #2
 801bae2:	2139      	movs	r1, #57	@ 0x39
 801bae4:	6938      	ldr	r0, [r7, #16]
 801bae6:	f000 f953 	bl	801bd90 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801baea:	f44f 7110 	mov.w	r1, #576	@ 0x240
 801baee:	6938      	ldr	r0, [r7, #16]
 801baf0:	f000 f9b0 	bl	801be54 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 801baf4:	2204      	movs	r2, #4
 801baf6:	2132      	movs	r1, #50	@ 0x32
 801baf8:	6938      	ldr	r0, [r7, #16]
 801bafa:	f000 f949 	bl	801bd90 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801bafe:	693b      	ldr	r3, [r7, #16]
 801bb00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bb02:	4618      	mov	r0, r3
 801bb04:	f7f7 fa99 	bl	801303a <lwip_htonl>
 801bb08:	4603      	mov	r3, r0
 801bb0a:	4619      	mov	r1, r3
 801bb0c:	6938      	ldr	r0, [r7, #16]
 801bb0e:	f000 f9db 	bl	801bec8 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801bb12:	2203      	movs	r2, #3
 801bb14:	2137      	movs	r1, #55	@ 0x37
 801bb16:	6938      	ldr	r0, [r7, #16]
 801bb18:	f000 f93a 	bl	801bd90 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801bb1c:	2300      	movs	r3, #0
 801bb1e:	75fb      	strb	r3, [r7, #23]
 801bb20:	e009      	b.n	801bb36 <dhcp_reboot+0x82>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 801bb22:	7dfb      	ldrb	r3, [r7, #23]
 801bb24:	4a29      	ldr	r2, [pc, #164]	@ (801bbcc <dhcp_reboot+0x118>)
 801bb26:	5cd3      	ldrb	r3, [r2, r3]
 801bb28:	4619      	mov	r1, r3
 801bb2a:	6938      	ldr	r0, [r7, #16]
 801bb2c:	f000 f96a 	bl	801be04 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801bb30:	7dfb      	ldrb	r3, [r7, #23]
 801bb32:	3301      	adds	r3, #1
 801bb34:	75fb      	strb	r3, [r7, #23]
 801bb36:	7dfb      	ldrb	r3, [r7, #23]
 801bb38:	2b02      	cmp	r3, #2
 801bb3a:	d9f2      	bls.n	801bb22 <dhcp_reboot+0x6e>
    }

    dhcp_option_trailer(dhcp);
 801bb3c:	6938      	ldr	r0, [r7, #16]
 801bb3e:	f000 ff39 	bl	801c9b4 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801bb42:	693b      	ldr	r3, [r7, #16]
 801bb44:	68da      	ldr	r2, [r3, #12]
 801bb46:	693b      	ldr	r3, [r7, #16]
 801bb48:	8a9b      	ldrh	r3, [r3, #20]
 801bb4a:	33f0      	adds	r3, #240	@ 0xf0
 801bb4c:	b29b      	uxth	r3, r3
 801bb4e:	4619      	mov	r1, r3
 801bb50:	4610      	mov	r0, r2
 801bb52:	f7f8 fb49 	bl	80141e8 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 801bb56:	4b1e      	ldr	r3, [pc, #120]	@ (801bbd0 <dhcp_reboot+0x11c>)
 801bb58:	6818      	ldr	r0, [r3, #0]
 801bb5a:	693b      	ldr	r3, [r7, #16]
 801bb5c:	68d9      	ldr	r1, [r3, #12]
 801bb5e:	687b      	ldr	r3, [r7, #4]
 801bb60:	9300      	str	r3, [sp, #0]
 801bb62:	2343      	movs	r3, #67	@ 0x43
 801bb64:	4a1b      	ldr	r2, [pc, #108]	@ (801bbd4 <dhcp_reboot+0x120>)
 801bb66:	f7fe fea9 	bl	801a8bc <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 801bb6a:	6938      	ldr	r0, [r7, #16]
 801bb6c:	f000 fee0 	bl	801c930 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801bb70:	693b      	ldr	r3, [r7, #16]
 801bb72:	7a9b      	ldrb	r3, [r3, #10]
 801bb74:	2bff      	cmp	r3, #255	@ 0xff
 801bb76:	d005      	beq.n	801bb84 <dhcp_reboot+0xd0>
    dhcp->tries++;
 801bb78:	693b      	ldr	r3, [r7, #16]
 801bb7a:	7a9b      	ldrb	r3, [r3, #10]
 801bb7c:	3301      	adds	r3, #1
 801bb7e:	b2da      	uxtb	r2, r3
 801bb80:	693b      	ldr	r3, [r7, #16]
 801bb82:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 801bb84:	693b      	ldr	r3, [r7, #16]
 801bb86:	7a9b      	ldrb	r3, [r3, #10]
 801bb88:	2b09      	cmp	r3, #9
 801bb8a:	d809      	bhi.n	801bba0 <dhcp_reboot+0xec>
 801bb8c:	693b      	ldr	r3, [r7, #16]
 801bb8e:	7a9b      	ldrb	r3, [r3, #10]
 801bb90:	461a      	mov	r2, r3
 801bb92:	0152      	lsls	r2, r2, #5
 801bb94:	1ad2      	subs	r2, r2, r3
 801bb96:	0092      	lsls	r2, r2, #2
 801bb98:	4413      	add	r3, r2
 801bb9a:	00db      	lsls	r3, r3, #3
 801bb9c:	b29b      	uxth	r3, r3
 801bb9e:	e001      	b.n	801bba4 <dhcp_reboot+0xf0>
 801bba0:	f242 7310 	movw	r3, #10000	@ 0x2710
 801bba4:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801bba6:	89bb      	ldrh	r3, [r7, #12]
 801bba8:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801bbac:	4a0a      	ldr	r2, [pc, #40]	@ (801bbd8 <dhcp_reboot+0x124>)
 801bbae:	fb82 1203 	smull	r1, r2, r2, r3
 801bbb2:	1152      	asrs	r2, r2, #5
 801bbb4:	17db      	asrs	r3, r3, #31
 801bbb6:	1ad3      	subs	r3, r2, r3
 801bbb8:	b29a      	uxth	r2, r3
 801bbba:	693b      	ldr	r3, [r7, #16]
 801bbbc:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801bbbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801bbc2:	4618      	mov	r0, r3
 801bbc4:	3718      	adds	r7, #24
 801bbc6:	46bd      	mov	sp, r7
 801bbc8:	bd80      	pop	{r7, pc}
 801bbca:	bf00      	nop
 801bbcc:	2000011c 	.word	0x2000011c
 801bbd0:	2000dda4 	.word	0x2000dda4
 801bbd4:	0802f054 	.word	0x0802f054
 801bbd8:	10624dd3 	.word	0x10624dd3

0801bbdc <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
 801bbdc:	b580      	push	{r7, lr}
 801bbde:	b088      	sub	sp, #32
 801bbe0:	af02      	add	r7, sp, #8
 801bbe2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801bbe4:	687b      	ldr	r3, [r7, #4]
 801bbe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bbe8:	617b      	str	r3, [r7, #20]
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
 801bbea:	697b      	ldr	r3, [r7, #20]
 801bbec:	2b00      	cmp	r3, #0
 801bbee:	d102      	bne.n	801bbf6 <dhcp_release+0x1a>
    return ERR_ARG;
 801bbf0:	f06f 030f 	mvn.w	r3, #15
 801bbf4:	e072      	b.n	801bcdc <dhcp_release+0x100>
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801bbf6:	697b      	ldr	r3, [r7, #20]
 801bbf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bbfa:	60fb      	str	r3, [r7, #12]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 801bbfc:	6878      	ldr	r0, [r7, #4]
 801bbfe:	f000 ff33 	bl	801ca68 <dhcp_supplied_address>
 801bc02:	4603      	mov	r3, r0
 801bc04:	74fb      	strb	r3, [r7, #19]

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801bc06:	2100      	movs	r1, #0
 801bc08:	6978      	ldr	r0, [r7, #20]
 801bc0a:	f000 f8a7 	bl	801bd5c <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801bc0e:	697b      	ldr	r3, [r7, #20]
 801bc10:	2200      	movs	r2, #0
 801bc12:	625a      	str	r2, [r3, #36]	@ 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801bc14:	697b      	ldr	r3, [r7, #20]
 801bc16:	2200      	movs	r2, #0
 801bc18:	629a      	str	r2, [r3, #40]	@ 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801bc1a:	697b      	ldr	r3, [r7, #20]
 801bc1c:	2200      	movs	r2, #0
 801bc1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801bc20:	697b      	ldr	r3, [r7, #20]
 801bc22:	2200      	movs	r2, #0
 801bc24:	631a      	str	r2, [r3, #48]	@ 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801bc26:	697b      	ldr	r3, [r7, #20]
 801bc28:	2200      	movs	r2, #0
 801bc2a:	63da      	str	r2, [r3, #60]	@ 0x3c
 801bc2c:	697b      	ldr	r3, [r7, #20]
 801bc2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801bc30:	697b      	ldr	r3, [r7, #20]
 801bc32:	639a      	str	r2, [r3, #56]	@ 0x38
 801bc34:	697b      	ldr	r3, [r7, #20]
 801bc36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801bc38:	697b      	ldr	r3, [r7, #20]
 801bc3a:	635a      	str	r2, [r3, #52]	@ 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801bc3c:	697b      	ldr	r3, [r7, #20]
 801bc3e:	2200      	movs	r2, #0
 801bc40:	845a      	strh	r2, [r3, #34]	@ 0x22
 801bc42:	697b      	ldr	r3, [r7, #20]
 801bc44:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 801bc46:	697b      	ldr	r3, [r7, #20]
 801bc48:	841a      	strh	r2, [r3, #32]
 801bc4a:	697b      	ldr	r3, [r7, #20]
 801bc4c:	8c1a      	ldrh	r2, [r3, #32]
 801bc4e:	697b      	ldr	r3, [r7, #20]
 801bc50:	83da      	strh	r2, [r3, #30]
 801bc52:	697b      	ldr	r3, [r7, #20]
 801bc54:	8bda      	ldrh	r2, [r3, #30]
 801bc56:	697b      	ldr	r3, [r7, #20]
 801bc58:	839a      	strh	r2, [r3, #28]

  if (!is_dhcp_supplied_address) {
 801bc5a:	7cfb      	ldrb	r3, [r7, #19]
 801bc5c:	2b00      	cmp	r3, #0
 801bc5e:	d101      	bne.n	801bc64 <dhcp_release+0x88>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
 801bc60:	2300      	movs	r3, #0
 801bc62:	e03b      	b.n	801bcdc <dhcp_release+0x100>
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 801bc64:	2207      	movs	r2, #7
 801bc66:	6979      	ldr	r1, [r7, #20]
 801bc68:	6878      	ldr	r0, [r7, #4]
 801bc6a:	f000 fcff 	bl	801c66c <dhcp_create_msg>
 801bc6e:	4603      	mov	r3, r0
 801bc70:	74bb      	strb	r3, [r7, #18]
  if (result == ERR_OK) {
 801bc72:	f997 3012 	ldrsb.w	r3, [r7, #18]
 801bc76:	2b00      	cmp	r3, #0
 801bc78:	d128      	bne.n	801bccc <dhcp_release+0xf0>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 801bc7a:	2204      	movs	r2, #4
 801bc7c:	2136      	movs	r1, #54	@ 0x36
 801bc7e:	6978      	ldr	r0, [r7, #20]
 801bc80:	f000 f886 	bl	801bd90 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801bc84:	68fb      	ldr	r3, [r7, #12]
 801bc86:	4618      	mov	r0, r3
 801bc88:	f7f7 f9d7 	bl	801303a <lwip_htonl>
 801bc8c:	4603      	mov	r3, r0
 801bc8e:	4619      	mov	r1, r3
 801bc90:	6978      	ldr	r0, [r7, #20]
 801bc92:	f000 f919 	bl	801bec8 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 801bc96:	6978      	ldr	r0, [r7, #20]
 801bc98:	f000 fe8c 	bl	801c9b4 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801bc9c:	697b      	ldr	r3, [r7, #20]
 801bc9e:	68da      	ldr	r2, [r3, #12]
 801bca0:	697b      	ldr	r3, [r7, #20]
 801bca2:	8a9b      	ldrh	r3, [r3, #20]
 801bca4:	33f0      	adds	r3, #240	@ 0xf0
 801bca6:	b29b      	uxth	r3, r3
 801bca8:	4619      	mov	r1, r3
 801bcaa:	4610      	mov	r0, r2
 801bcac:	f7f8 fa9c 	bl	80141e8 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 801bcb0:	4b0c      	ldr	r3, [pc, #48]	@ (801bce4 <dhcp_release+0x108>)
 801bcb2:	6818      	ldr	r0, [r3, #0]
 801bcb4:	697b      	ldr	r3, [r7, #20]
 801bcb6:	68d9      	ldr	r1, [r3, #12]
 801bcb8:	f107 020c 	add.w	r2, r7, #12
 801bcbc:	687b      	ldr	r3, [r7, #4]
 801bcbe:	9300      	str	r3, [sp, #0]
 801bcc0:	2343      	movs	r3, #67	@ 0x43
 801bcc2:	f7fe fdfb 	bl	801a8bc <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 801bcc6:	6978      	ldr	r0, [r7, #20]
 801bcc8:	f000 fe32 	bl	801c930 <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801bccc:	4b06      	ldr	r3, [pc, #24]	@ (801bce8 <dhcp_release+0x10c>)
 801bcce:	4a06      	ldr	r2, [pc, #24]	@ (801bce8 <dhcp_release+0x10c>)
 801bcd0:	4905      	ldr	r1, [pc, #20]	@ (801bce8 <dhcp_release+0x10c>)
 801bcd2:	6878      	ldr	r0, [r7, #4]
 801bcd4:	f7f7 ff2e 	bl	8013b34 <netif_set_addr>

  return result;
 801bcd8:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 801bcdc:	4618      	mov	r0, r3
 801bcde:	3718      	adds	r7, #24
 801bce0:	46bd      	mov	sp, r7
 801bce2:	bd80      	pop	{r7, pc}
 801bce4:	2000dda4 	.word	0x2000dda4
 801bce8:	0802f050 	.word	0x0802f050

0801bcec <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
 801bcec:	b580      	push	{r7, lr}
 801bcee:	b084      	sub	sp, #16
 801bcf0:	af00      	add	r7, sp, #0
 801bcf2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 801bcf4:	687b      	ldr	r3, [r7, #4]
 801bcf6:	2b00      	cmp	r3, #0
 801bcf8:	d107      	bne.n	801bd0a <dhcp_stop+0x1e>
 801bcfa:	4b14      	ldr	r3, [pc, #80]	@ (801bd4c <dhcp_stop+0x60>)
 801bcfc:	f240 5242 	movw	r2, #1346	@ 0x542
 801bd00:	4913      	ldr	r1, [pc, #76]	@ (801bd50 <dhcp_stop+0x64>)
 801bd02:	4814      	ldr	r0, [pc, #80]	@ (801bd54 <dhcp_stop+0x68>)
 801bd04:	f004 fbcc 	bl	80204a0 <iprintf>
 801bd08:	e01d      	b.n	801bd46 <dhcp_stop+0x5a>
  dhcp = netif_dhcp_data(netif);
 801bd0a:	687b      	ldr	r3, [r7, #4]
 801bd0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bd0e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
 801bd10:	68fb      	ldr	r3, [r7, #12]
 801bd12:	2b00      	cmp	r3, #0
 801bd14:	d017      	beq.n	801bd46 <dhcp_stop+0x5a>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 801bd16:	68fb      	ldr	r3, [r7, #12]
 801bd18:	685b      	ldr	r3, [r3, #4]
 801bd1a:	2b00      	cmp	r3, #0
 801bd1c:	d006      	beq.n	801bd2c <dhcp_stop+0x40>
 801bd1e:	4b0b      	ldr	r3, [pc, #44]	@ (801bd4c <dhcp_stop+0x60>)
 801bd20:	f240 524f 	movw	r2, #1359	@ 0x54f
 801bd24:	490c      	ldr	r1, [pc, #48]	@ (801bd58 <dhcp_stop+0x6c>)
 801bd26:	480b      	ldr	r0, [pc, #44]	@ (801bd54 <dhcp_stop+0x68>)
 801bd28:	f004 fbba 	bl	80204a0 <iprintf>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801bd2c:	2100      	movs	r1, #0
 801bd2e:	68f8      	ldr	r0, [r7, #12]
 801bd30:	f000 f814 	bl	801bd5c <dhcp_set_state>

    if (dhcp->pcb_allocated != 0) {
 801bd34:	68fb      	ldr	r3, [r7, #12]
 801bd36:	7a1b      	ldrb	r3, [r3, #8]
 801bd38:	2b00      	cmp	r3, #0
 801bd3a:	d004      	beq.n	801bd46 <dhcp_stop+0x5a>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801bd3c:	f7ff f854 	bl	801ade8 <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
 801bd40:	68fb      	ldr	r3, [r7, #12]
 801bd42:	2200      	movs	r2, #0
 801bd44:	721a      	strb	r2, [r3, #8]
    }
  }
}
 801bd46:	3710      	adds	r7, #16
 801bd48:	46bd      	mov	sp, r7
 801bd4a:	bd80      	pop	{r7, pc}
 801bd4c:	080253a8 	.word	0x080253a8
 801bd50:	0802551c 	.word	0x0802551c
 801bd54:	08025408 	.word	0x08025408
 801bd58:	080254d4 	.word	0x080254d4

0801bd5c <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801bd5c:	b480      	push	{r7}
 801bd5e:	b083      	sub	sp, #12
 801bd60:	af00      	add	r7, sp, #0
 801bd62:	6078      	str	r0, [r7, #4]
 801bd64:	460b      	mov	r3, r1
 801bd66:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801bd68:	687b      	ldr	r3, [r7, #4]
 801bd6a:	7a5b      	ldrb	r3, [r3, #9]
 801bd6c:	78fa      	ldrb	r2, [r7, #3]
 801bd6e:	429a      	cmp	r2, r3
 801bd70:	d008      	beq.n	801bd84 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801bd72:	687b      	ldr	r3, [r7, #4]
 801bd74:	78fa      	ldrb	r2, [r7, #3]
 801bd76:	725a      	strb	r2, [r3, #9]
    dhcp->tries = 0;
 801bd78:	687b      	ldr	r3, [r7, #4]
 801bd7a:	2200      	movs	r2, #0
 801bd7c:	729a      	strb	r2, [r3, #10]
    dhcp->request_timeout = 0;
 801bd7e:	687b      	ldr	r3, [r7, #4]
 801bd80:	2200      	movs	r2, #0
 801bd82:	82da      	strh	r2, [r3, #22]
  }
}
 801bd84:	bf00      	nop
 801bd86:	370c      	adds	r7, #12
 801bd88:	46bd      	mov	sp, r7
 801bd8a:	bc80      	pop	{r7}
 801bd8c:	4770      	bx	lr
	...

0801bd90 <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
 801bd90:	b580      	push	{r7, lr}
 801bd92:	b082      	sub	sp, #8
 801bd94:	af00      	add	r7, sp, #0
 801bd96:	6078      	str	r0, [r7, #4]
 801bd98:	460b      	mov	r3, r1
 801bd9a:	70fb      	strb	r3, [r7, #3]
 801bd9c:	4613      	mov	r3, r2
 801bd9e:	70bb      	strb	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801bda0:	687b      	ldr	r3, [r7, #4]
 801bda2:	8a9b      	ldrh	r3, [r3, #20]
 801bda4:	461a      	mov	r2, r3
 801bda6:	78bb      	ldrb	r3, [r7, #2]
 801bda8:	4413      	add	r3, r2
 801bdaa:	3302      	adds	r3, #2
 801bdac:	2b44      	cmp	r3, #68	@ 0x44
 801bdae:	d906      	bls.n	801bdbe <dhcp_option+0x2e>
 801bdb0:	4b11      	ldr	r3, [pc, #68]	@ (801bdf8 <dhcp_option+0x68>)
 801bdb2:	f44f 62ae 	mov.w	r2, #1392	@ 0x570
 801bdb6:	4911      	ldr	r1, [pc, #68]	@ (801bdfc <dhcp_option+0x6c>)
 801bdb8:	4811      	ldr	r0, [pc, #68]	@ (801be00 <dhcp_option+0x70>)
 801bdba:	f004 fb71 	bl	80204a0 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 801bdbe:	687b      	ldr	r3, [r7, #4]
 801bdc0:	691a      	ldr	r2, [r3, #16]
 801bdc2:	687b      	ldr	r3, [r7, #4]
 801bdc4:	8a9b      	ldrh	r3, [r3, #20]
 801bdc6:	1c59      	adds	r1, r3, #1
 801bdc8:	b288      	uxth	r0, r1
 801bdca:	6879      	ldr	r1, [r7, #4]
 801bdcc:	8288      	strh	r0, [r1, #20]
 801bdce:	4413      	add	r3, r2
 801bdd0:	78fa      	ldrb	r2, [r7, #3]
 801bdd2:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 801bdd6:	687b      	ldr	r3, [r7, #4]
 801bdd8:	691a      	ldr	r2, [r3, #16]
 801bdda:	687b      	ldr	r3, [r7, #4]
 801bddc:	8a9b      	ldrh	r3, [r3, #20]
 801bdde:	1c59      	adds	r1, r3, #1
 801bde0:	b288      	uxth	r0, r1
 801bde2:	6879      	ldr	r1, [r7, #4]
 801bde4:	8288      	strh	r0, [r1, #20]
 801bde6:	4413      	add	r3, r2
 801bde8:	78ba      	ldrb	r2, [r7, #2]
 801bdea:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
}
 801bdee:	bf00      	nop
 801bdf0:	3708      	adds	r7, #8
 801bdf2:	46bd      	mov	sp, r7
 801bdf4:	bd80      	pop	{r7, pc}
 801bdf6:	bf00      	nop
 801bdf8:	080253a8 	.word	0x080253a8
 801bdfc:	08025538 	.word	0x08025538
 801be00:	08025408 	.word	0x08025408

0801be04 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
 801be04:	b580      	push	{r7, lr}
 801be06:	b082      	sub	sp, #8
 801be08:	af00      	add	r7, sp, #0
 801be0a:	6078      	str	r0, [r7, #4]
 801be0c:	460b      	mov	r3, r1
 801be0e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 801be10:	687b      	ldr	r3, [r7, #4]
 801be12:	8a9b      	ldrh	r3, [r3, #20]
 801be14:	2b43      	cmp	r3, #67	@ 0x43
 801be16:	d906      	bls.n	801be26 <dhcp_option_byte+0x22>
 801be18:	4b0b      	ldr	r3, [pc, #44]	@ (801be48 <dhcp_option_byte+0x44>)
 801be1a:	f240 527b 	movw	r2, #1403	@ 0x57b
 801be1e:	490b      	ldr	r1, [pc, #44]	@ (801be4c <dhcp_option_byte+0x48>)
 801be20:	480b      	ldr	r0, [pc, #44]	@ (801be50 <dhcp_option_byte+0x4c>)
 801be22:	f004 fb3d 	bl	80204a0 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 801be26:	687b      	ldr	r3, [r7, #4]
 801be28:	691a      	ldr	r2, [r3, #16]
 801be2a:	687b      	ldr	r3, [r7, #4]
 801be2c:	8a9b      	ldrh	r3, [r3, #20]
 801be2e:	1c59      	adds	r1, r3, #1
 801be30:	b288      	uxth	r0, r1
 801be32:	6879      	ldr	r1, [r7, #4]
 801be34:	8288      	strh	r0, [r1, #20]
 801be36:	4413      	add	r3, r2
 801be38:	78fa      	ldrb	r2, [r7, #3]
 801be3a:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
}
 801be3e:	bf00      	nop
 801be40:	3708      	adds	r7, #8
 801be42:	46bd      	mov	sp, r7
 801be44:	bd80      	pop	{r7, pc}
 801be46:	bf00      	nop
 801be48:	080253a8 	.word	0x080253a8
 801be4c:	08025580 	.word	0x08025580
 801be50:	08025408 	.word	0x08025408

0801be54 <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 801be54:	b590      	push	{r4, r7, lr}
 801be56:	b083      	sub	sp, #12
 801be58:	af00      	add	r7, sp, #0
 801be5a:	6078      	str	r0, [r7, #4]
 801be5c:	460b      	mov	r3, r1
 801be5e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801be60:	687b      	ldr	r3, [r7, #4]
 801be62:	8a9b      	ldrh	r3, [r3, #20]
 801be64:	3302      	adds	r3, #2
 801be66:	2b44      	cmp	r3, #68	@ 0x44
 801be68:	d906      	bls.n	801be78 <dhcp_option_short+0x24>
 801be6a:	4b14      	ldr	r3, [pc, #80]	@ (801bebc <dhcp_option_short+0x68>)
 801be6c:	f240 5282 	movw	r2, #1410	@ 0x582
 801be70:	4913      	ldr	r1, [pc, #76]	@ (801bec0 <dhcp_option_short+0x6c>)
 801be72:	4814      	ldr	r0, [pc, #80]	@ (801bec4 <dhcp_option_short+0x70>)
 801be74:	f004 fb14 	bl	80204a0 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801be78:	887b      	ldrh	r3, [r7, #2]
 801be7a:	0a1b      	lsrs	r3, r3, #8
 801be7c:	b298      	uxth	r0, r3
 801be7e:	687b      	ldr	r3, [r7, #4]
 801be80:	691a      	ldr	r2, [r3, #16]
 801be82:	687b      	ldr	r3, [r7, #4]
 801be84:	8a9b      	ldrh	r3, [r3, #20]
 801be86:	1c59      	adds	r1, r3, #1
 801be88:	b28c      	uxth	r4, r1
 801be8a:	6879      	ldr	r1, [r7, #4]
 801be8c:	828c      	strh	r4, [r1, #20]
 801be8e:	b2c1      	uxtb	r1, r0
 801be90:	4413      	add	r3, r2
 801be92:	460a      	mov	r2, r1
 801be94:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 801be98:	687b      	ldr	r3, [r7, #4]
 801be9a:	691a      	ldr	r2, [r3, #16]
 801be9c:	687b      	ldr	r3, [r7, #4]
 801be9e:	8a9b      	ldrh	r3, [r3, #20]
 801bea0:	1c59      	adds	r1, r3, #1
 801bea2:	b288      	uxth	r0, r1
 801bea4:	6879      	ldr	r1, [r7, #4]
 801bea6:	8288      	strh	r0, [r1, #20]
 801bea8:	8879      	ldrh	r1, [r7, #2]
 801beaa:	b2c9      	uxtb	r1, r1
 801beac:	4413      	add	r3, r2
 801beae:	460a      	mov	r2, r1
 801beb0:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
}
 801beb4:	bf00      	nop
 801beb6:	370c      	adds	r7, #12
 801beb8:	46bd      	mov	sp, r7
 801beba:	bd90      	pop	{r4, r7, pc}
 801bebc:	080253a8 	.word	0x080253a8
 801bec0:	080255bc 	.word	0x080255bc
 801bec4:	08025408 	.word	0x08025408

0801bec8 <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 801bec8:	b590      	push	{r4, r7, lr}
 801beca:	b083      	sub	sp, #12
 801becc:	af00      	add	r7, sp, #0
 801bece:	6078      	str	r0, [r7, #4]
 801bed0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801bed2:	687b      	ldr	r3, [r7, #4]
 801bed4:	8a9b      	ldrh	r3, [r3, #20]
 801bed6:	3304      	adds	r3, #4
 801bed8:	2b44      	cmp	r3, #68	@ 0x44
 801beda:	d906      	bls.n	801beea <dhcp_option_long+0x22>
 801bedc:	4b22      	ldr	r3, [pc, #136]	@ (801bf68 <dhcp_option_long+0xa0>)
 801bede:	f240 528a 	movw	r2, #1418	@ 0x58a
 801bee2:	4922      	ldr	r1, [pc, #136]	@ (801bf6c <dhcp_option_long+0xa4>)
 801bee4:	4822      	ldr	r0, [pc, #136]	@ (801bf70 <dhcp_option_long+0xa8>)
 801bee6:	f004 fadb 	bl	80204a0 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801beea:	683b      	ldr	r3, [r7, #0]
 801beec:	0e18      	lsrs	r0, r3, #24
 801beee:	687b      	ldr	r3, [r7, #4]
 801bef0:	691a      	ldr	r2, [r3, #16]
 801bef2:	687b      	ldr	r3, [r7, #4]
 801bef4:	8a9b      	ldrh	r3, [r3, #20]
 801bef6:	1c59      	adds	r1, r3, #1
 801bef8:	b28c      	uxth	r4, r1
 801befa:	6879      	ldr	r1, [r7, #4]
 801befc:	828c      	strh	r4, [r1, #20]
 801befe:	b2c1      	uxtb	r1, r0
 801bf00:	4413      	add	r3, r2
 801bf02:	460a      	mov	r2, r1
 801bf04:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801bf08:	683b      	ldr	r3, [r7, #0]
 801bf0a:	0c18      	lsrs	r0, r3, #16
 801bf0c:	687b      	ldr	r3, [r7, #4]
 801bf0e:	691a      	ldr	r2, [r3, #16]
 801bf10:	687b      	ldr	r3, [r7, #4]
 801bf12:	8a9b      	ldrh	r3, [r3, #20]
 801bf14:	1c59      	adds	r1, r3, #1
 801bf16:	b28c      	uxth	r4, r1
 801bf18:	6879      	ldr	r1, [r7, #4]
 801bf1a:	828c      	strh	r4, [r1, #20]
 801bf1c:	b2c1      	uxtb	r1, r0
 801bf1e:	4413      	add	r3, r2
 801bf20:	460a      	mov	r2, r1
 801bf22:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801bf26:	683b      	ldr	r3, [r7, #0]
 801bf28:	0a18      	lsrs	r0, r3, #8
 801bf2a:	687b      	ldr	r3, [r7, #4]
 801bf2c:	691a      	ldr	r2, [r3, #16]
 801bf2e:	687b      	ldr	r3, [r7, #4]
 801bf30:	8a9b      	ldrh	r3, [r3, #20]
 801bf32:	1c59      	adds	r1, r3, #1
 801bf34:	b28c      	uxth	r4, r1
 801bf36:	6879      	ldr	r1, [r7, #4]
 801bf38:	828c      	strh	r4, [r1, #20]
 801bf3a:	b2c1      	uxtb	r1, r0
 801bf3c:	4413      	add	r3, r2
 801bf3e:	460a      	mov	r2, r1
 801bf40:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801bf44:	687b      	ldr	r3, [r7, #4]
 801bf46:	691a      	ldr	r2, [r3, #16]
 801bf48:	687b      	ldr	r3, [r7, #4]
 801bf4a:	8a9b      	ldrh	r3, [r3, #20]
 801bf4c:	1c59      	adds	r1, r3, #1
 801bf4e:	b288      	uxth	r0, r1
 801bf50:	6879      	ldr	r1, [r7, #4]
 801bf52:	8288      	strh	r0, [r1, #20]
 801bf54:	6839      	ldr	r1, [r7, #0]
 801bf56:	b2c9      	uxtb	r1, r1
 801bf58:	4413      	add	r3, r2
 801bf5a:	460a      	mov	r2, r1
 801bf5c:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
}
 801bf60:	bf00      	nop
 801bf62:	370c      	adds	r7, #12
 801bf64:	46bd      	mov	sp, r7
 801bf66:	bd90      	pop	{r4, r7, pc}
 801bf68:	080253a8 	.word	0x080253a8
 801bf6c:	08025600 	.word	0x08025600
 801bf70:	08025408 	.word	0x08025408

0801bf74 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
 801bf74:	b580      	push	{r7, lr}
 801bf76:	b08e      	sub	sp, #56	@ 0x38
 801bf78:	af00      	add	r7, sp, #0
 801bf7a:	6078      	str	r0, [r7, #4]
 801bf7c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801bf7e:	2300      	movs	r3, #0
 801bf80:	627b      	str	r3, [r7, #36]	@ 0x24
  int parse_sname_as_options = 0;
 801bf82:	2300      	movs	r3, #0
 801bf84:	623b      	str	r3, [r7, #32]

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801bf86:	2208      	movs	r2, #8
 801bf88:	2100      	movs	r1, #0
 801bf8a:	48b3      	ldr	r0, [pc, #716]	@ (801c258 <dhcp_parse_reply+0x2e4>)
 801bf8c:	f004 fc5e 	bl	802084c <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801bf90:	683b      	ldr	r3, [r7, #0]
 801bf92:	895b      	ldrh	r3, [r3, #10]
 801bf94:	2b2b      	cmp	r3, #43	@ 0x2b
 801bf96:	d802      	bhi.n	801bf9e <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801bf98:	f06f 0301 	mvn.w	r3, #1
 801bf9c:	e26a      	b.n	801c474 <dhcp_parse_reply+0x500>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 801bf9e:	683b      	ldr	r3, [r7, #0]
 801bfa0:	685a      	ldr	r2, [r3, #4]
 801bfa2:	687b      	ldr	r3, [r7, #4]
 801bfa4:	605a      	str	r2, [r3, #4]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801bfa6:	23f0      	movs	r3, #240	@ 0xf0
 801bfa8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801bfaa:	683b      	ldr	r3, [r7, #0]
 801bfac:	891b      	ldrh	r3, [r3, #8]
 801bfae:	85bb      	strh	r3, [r7, #44]	@ 0x2c
again:
  q = p;
 801bfb0:	683b      	ldr	r3, [r7, #0]
 801bfb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 801bfb4:	e00c      	b.n	801bfd0 <dhcp_parse_reply+0x5c>
    options_idx -= q->len;
 801bfb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bfb8:	895b      	ldrh	r3, [r3, #10]
 801bfba:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801bfbc:	1ad3      	subs	r3, r2, r3
 801bfbe:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    options_idx_max -= q->len;
 801bfc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bfc2:	895b      	ldrh	r3, [r3, #10]
 801bfc4:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 801bfc6:	1ad3      	subs	r3, r2, r3
 801bfc8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    q = q->next;
 801bfca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bfcc:	681b      	ldr	r3, [r3, #0]
 801bfce:	62bb      	str	r3, [r7, #40]	@ 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 801bfd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bfd2:	2b00      	cmp	r3, #0
 801bfd4:	d004      	beq.n	801bfe0 <dhcp_parse_reply+0x6c>
 801bfd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bfd8:	895b      	ldrh	r3, [r3, #10]
 801bfda:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801bfdc:	429a      	cmp	r2, r3
 801bfde:	d2ea      	bcs.n	801bfb6 <dhcp_parse_reply+0x42>
  }
  if (q == NULL) {
 801bfe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bfe2:	2b00      	cmp	r3, #0
 801bfe4:	d102      	bne.n	801bfec <dhcp_parse_reply+0x78>
    return ERR_BUF;
 801bfe6:	f06f 0301 	mvn.w	r3, #1
 801bfea:	e243      	b.n	801c474 <dhcp_parse_reply+0x500>
  }
  offset = options_idx;
 801bfec:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801bfee:	867b      	strh	r3, [r7, #50]	@ 0x32
  offset_max = options_idx_max;
 801bff0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801bff2:	863b      	strh	r3, [r7, #48]	@ 0x30
  options = (u8_t*)q->payload;
 801bff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bff6:	685b      	ldr	r3, [r3, #4]
 801bff8:	637b      	str	r3, [r7, #52]	@ 0x34
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801bffa:	e1fb      	b.n	801c3f4 <dhcp_parse_reply+0x480>
    u8_t op = options[offset];
 801bffc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801bffe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c000:	4413      	add	r3, r2
 801c002:	781b      	ldrb	r3, [r3, #0]
 801c004:	757b      	strb	r3, [r7, #21]
    u8_t len;
    u8_t decode_len = 0;
 801c006:	2300      	movs	r3, #0
 801c008:	77bb      	strb	r3, [r7, #30]
    int decode_idx = -1;
 801c00a:	f04f 33ff 	mov.w	r3, #4294967295
 801c00e:	61bb      	str	r3, [r7, #24]
    u16_t val_offset = offset + 2;
 801c010:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801c012:	3302      	adds	r3, #2
 801c014:	82fb      	strh	r3, [r7, #22]
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801c016:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801c018:	3301      	adds	r3, #1
 801c01a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c01c:	8952      	ldrh	r2, [r2, #10]
 801c01e:	4293      	cmp	r3, r2
 801c020:	da06      	bge.n	801c030 <dhcp_parse_reply+0xbc>
      len = options[offset + 1];
 801c022:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801c024:	3301      	adds	r3, #1
 801c026:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c028:	4413      	add	r3, r2
 801c02a:	781b      	ldrb	r3, [r3, #0]
 801c02c:	77fb      	strb	r3, [r7, #31]
 801c02e:	e00a      	b.n	801c046 <dhcp_parse_reply+0xd2>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 801c030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c032:	681b      	ldr	r3, [r3, #0]
 801c034:	2b00      	cmp	r3, #0
 801c036:	d004      	beq.n	801c042 <dhcp_parse_reply+0xce>
 801c038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c03a:	681b      	ldr	r3, [r3, #0]
 801c03c:	685b      	ldr	r3, [r3, #4]
 801c03e:	781b      	ldrb	r3, [r3, #0]
 801c040:	e000      	b.n	801c044 <dhcp_parse_reply+0xd0>
 801c042:	2300      	movs	r3, #0
 801c044:	77fb      	strb	r3, [r7, #31]
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801c046:	7ffb      	ldrb	r3, [r7, #31]
 801c048:	77bb      	strb	r3, [r7, #30]
    switch(op) {
 801c04a:	7d7b      	ldrb	r3, [r7, #21]
 801c04c:	2b3b      	cmp	r3, #59	@ 0x3b
 801c04e:	f200 8121 	bhi.w	801c294 <dhcp_parse_reply+0x320>
 801c052:	a201      	add	r2, pc, #4	@ (adr r2, 801c058 <dhcp_parse_reply+0xe4>)
 801c054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c058:	0801c149 	.word	0x0801c149
 801c05c:	0801c159 	.word	0x0801c159
 801c060:	0801c295 	.word	0x0801c295
 801c064:	0801c179 	.word	0x0801c179
 801c068:	0801c295 	.word	0x0801c295
 801c06c:	0801c295 	.word	0x0801c295
 801c070:	0801c295 	.word	0x0801c295
 801c074:	0801c295 	.word	0x0801c295
 801c078:	0801c295 	.word	0x0801c295
 801c07c:	0801c295 	.word	0x0801c295
 801c080:	0801c295 	.word	0x0801c295
 801c084:	0801c295 	.word	0x0801c295
 801c088:	0801c295 	.word	0x0801c295
 801c08c:	0801c295 	.word	0x0801c295
 801c090:	0801c295 	.word	0x0801c295
 801c094:	0801c295 	.word	0x0801c295
 801c098:	0801c295 	.word	0x0801c295
 801c09c:	0801c295 	.word	0x0801c295
 801c0a0:	0801c295 	.word	0x0801c295
 801c0a4:	0801c295 	.word	0x0801c295
 801c0a8:	0801c295 	.word	0x0801c295
 801c0ac:	0801c295 	.word	0x0801c295
 801c0b0:	0801c295 	.word	0x0801c295
 801c0b4:	0801c295 	.word	0x0801c295
 801c0b8:	0801c295 	.word	0x0801c295
 801c0bc:	0801c295 	.word	0x0801c295
 801c0c0:	0801c295 	.word	0x0801c295
 801c0c4:	0801c295 	.word	0x0801c295
 801c0c8:	0801c295 	.word	0x0801c295
 801c0cc:	0801c295 	.word	0x0801c295
 801c0d0:	0801c295 	.word	0x0801c295
 801c0d4:	0801c295 	.word	0x0801c295
 801c0d8:	0801c295 	.word	0x0801c295
 801c0dc:	0801c295 	.word	0x0801c295
 801c0e0:	0801c295 	.word	0x0801c295
 801c0e4:	0801c295 	.word	0x0801c295
 801c0e8:	0801c295 	.word	0x0801c295
 801c0ec:	0801c295 	.word	0x0801c295
 801c0f0:	0801c295 	.word	0x0801c295
 801c0f4:	0801c295 	.word	0x0801c295
 801c0f8:	0801c295 	.word	0x0801c295
 801c0fc:	0801c295 	.word	0x0801c295
 801c100:	0801c295 	.word	0x0801c295
 801c104:	0801c295 	.word	0x0801c295
 801c108:	0801c295 	.word	0x0801c295
 801c10c:	0801c295 	.word	0x0801c295
 801c110:	0801c295 	.word	0x0801c295
 801c114:	0801c295 	.word	0x0801c295
 801c118:	0801c295 	.word	0x0801c295
 801c11c:	0801c295 	.word	0x0801c295
 801c120:	0801c295 	.word	0x0801c295
 801c124:	0801c19f 	.word	0x0801c19f
 801c128:	0801c1bf 	.word	0x0801c1bf
 801c12c:	0801c1f9 	.word	0x0801c1f9
 801c130:	0801c219 	.word	0x0801c219
 801c134:	0801c295 	.word	0x0801c295
 801c138:	0801c295 	.word	0x0801c295
 801c13c:	0801c295 	.word	0x0801c295
 801c140:	0801c239 	.word	0x0801c239
 801c144:	0801c275 	.word	0x0801c275
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801c148:	2300      	movs	r3, #0
 801c14a:	77fb      	strb	r3, [r7, #31]
 801c14c:	7ffb      	ldrb	r3, [r7, #31]
 801c14e:	77bb      	strb	r3, [r7, #30]
        /* will be increased below */
        offset--;
 801c150:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801c152:	3b01      	subs	r3, #1
 801c154:	867b      	strh	r3, [r7, #50]	@ 0x32
        break;
 801c156:	e0a0      	b.n	801c29a <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801c158:	7ffb      	ldrb	r3, [r7, #31]
 801c15a:	2b04      	cmp	r3, #4
 801c15c:	d009      	beq.n	801c172 <dhcp_parse_reply+0x1fe>
 801c15e:	4b3f      	ldr	r3, [pc, #252]	@ (801c25c <dhcp_parse_reply+0x2e8>)
 801c160:	f240 52f6 	movw	r2, #1526	@ 0x5f6
 801c164:	493e      	ldr	r1, [pc, #248]	@ (801c260 <dhcp_parse_reply+0x2ec>)
 801c166:	483f      	ldr	r0, [pc, #252]	@ (801c264 <dhcp_parse_reply+0x2f0>)
 801c168:	f004 f99a 	bl	80204a0 <iprintf>
 801c16c:	f06f 0305 	mvn.w	r3, #5
 801c170:	e180      	b.n	801c474 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801c172:	2306      	movs	r3, #6
 801c174:	61bb      	str	r3, [r7, #24]
        break;
 801c176:	e090      	b.n	801c29a <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801c178:	2304      	movs	r3, #4
 801c17a:	77bb      	strb	r3, [r7, #30]
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801c17c:	7ffa      	ldrb	r2, [r7, #31]
 801c17e:	7fbb      	ldrb	r3, [r7, #30]
 801c180:	429a      	cmp	r2, r3
 801c182:	d209      	bcs.n	801c198 <dhcp_parse_reply+0x224>
 801c184:	4b35      	ldr	r3, [pc, #212]	@ (801c25c <dhcp_parse_reply+0x2e8>)
 801c186:	f240 52fb 	movw	r2, #1531	@ 0x5fb
 801c18a:	4937      	ldr	r1, [pc, #220]	@ (801c268 <dhcp_parse_reply+0x2f4>)
 801c18c:	4835      	ldr	r0, [pc, #212]	@ (801c264 <dhcp_parse_reply+0x2f0>)
 801c18e:	f004 f987 	bl	80204a0 <iprintf>
 801c192:	f06f 0305 	mvn.w	r3, #5
 801c196:	e16d      	b.n	801c474 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801c198:	2307      	movs	r3, #7
 801c19a:	61bb      	str	r3, [r7, #24]
        break;
 801c19c:	e07d      	b.n	801c29a <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801c19e:	7ffb      	ldrb	r3, [r7, #31]
 801c1a0:	2b04      	cmp	r3, #4
 801c1a2:	d009      	beq.n	801c1b8 <dhcp_parse_reply+0x244>
 801c1a4:	4b2d      	ldr	r3, [pc, #180]	@ (801c25c <dhcp_parse_reply+0x2e8>)
 801c1a6:	f240 6209 	movw	r2, #1545	@ 0x609
 801c1aa:	492d      	ldr	r1, [pc, #180]	@ (801c260 <dhcp_parse_reply+0x2ec>)
 801c1ac:	482d      	ldr	r0, [pc, #180]	@ (801c264 <dhcp_parse_reply+0x2f0>)
 801c1ae:	f004 f977 	bl	80204a0 <iprintf>
 801c1b2:	f06f 0305 	mvn.w	r3, #5
 801c1b6:	e15d      	b.n	801c474 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801c1b8:	2303      	movs	r3, #3
 801c1ba:	61bb      	str	r3, [r7, #24]
        break;
 801c1bc:	e06d      	b.n	801c29a <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801c1be:	7ffb      	ldrb	r3, [r7, #31]
 801c1c0:	2b01      	cmp	r3, #1
 801c1c2:	d009      	beq.n	801c1d8 <dhcp_parse_reply+0x264>
 801c1c4:	4b25      	ldr	r3, [pc, #148]	@ (801c25c <dhcp_parse_reply+0x2e8>)
 801c1c6:	f240 6217 	movw	r2, #1559	@ 0x617
 801c1ca:	4928      	ldr	r1, [pc, #160]	@ (801c26c <dhcp_parse_reply+0x2f8>)
 801c1cc:	4825      	ldr	r0, [pc, #148]	@ (801c264 <dhcp_parse_reply+0x2f0>)
 801c1ce:	f004 f967 	bl	80204a0 <iprintf>
 801c1d2:	f06f 0305 	mvn.w	r3, #5
 801c1d6:	e14d      	b.n	801c474 <dhcp_parse_reply+0x500>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801c1d8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801c1da:	2bf0      	cmp	r3, #240	@ 0xf0
 801c1dc:	d009      	beq.n	801c1f2 <dhcp_parse_reply+0x27e>
 801c1de:	4b1f      	ldr	r3, [pc, #124]	@ (801c25c <dhcp_parse_reply+0x2e8>)
 801c1e0:	f240 6219 	movw	r2, #1561	@ 0x619
 801c1e4:	4922      	ldr	r1, [pc, #136]	@ (801c270 <dhcp_parse_reply+0x2fc>)
 801c1e6:	481f      	ldr	r0, [pc, #124]	@ (801c264 <dhcp_parse_reply+0x2f0>)
 801c1e8:	f004 f95a 	bl	80204a0 <iprintf>
 801c1ec:	f06f 0305 	mvn.w	r3, #5
 801c1f0:	e140      	b.n	801c474 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801c1f2:	2300      	movs	r3, #0
 801c1f4:	61bb      	str	r3, [r7, #24]
        break;
 801c1f6:	e050      	b.n	801c29a <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801c1f8:	7ffb      	ldrb	r3, [r7, #31]
 801c1fa:	2b01      	cmp	r3, #1
 801c1fc:	d009      	beq.n	801c212 <dhcp_parse_reply+0x29e>
 801c1fe:	4b17      	ldr	r3, [pc, #92]	@ (801c25c <dhcp_parse_reply+0x2e8>)
 801c200:	f240 621d 	movw	r2, #1565	@ 0x61d
 801c204:	4919      	ldr	r1, [pc, #100]	@ (801c26c <dhcp_parse_reply+0x2f8>)
 801c206:	4817      	ldr	r0, [pc, #92]	@ (801c264 <dhcp_parse_reply+0x2f0>)
 801c208:	f004 f94a 	bl	80204a0 <iprintf>
 801c20c:	f06f 0305 	mvn.w	r3, #5
 801c210:	e130      	b.n	801c474 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801c212:	2301      	movs	r3, #1
 801c214:	61bb      	str	r3, [r7, #24]
        break;
 801c216:	e040      	b.n	801c29a <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801c218:	7ffb      	ldrb	r3, [r7, #31]
 801c21a:	2b04      	cmp	r3, #4
 801c21c:	d009      	beq.n	801c232 <dhcp_parse_reply+0x2be>
 801c21e:	4b0f      	ldr	r3, [pc, #60]	@ (801c25c <dhcp_parse_reply+0x2e8>)
 801c220:	f240 6221 	movw	r2, #1569	@ 0x621
 801c224:	490e      	ldr	r1, [pc, #56]	@ (801c260 <dhcp_parse_reply+0x2ec>)
 801c226:	480f      	ldr	r0, [pc, #60]	@ (801c264 <dhcp_parse_reply+0x2f0>)
 801c228:	f004 f93a 	bl	80204a0 <iprintf>
 801c22c:	f06f 0305 	mvn.w	r3, #5
 801c230:	e120      	b.n	801c474 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801c232:	2302      	movs	r3, #2
 801c234:	61bb      	str	r3, [r7, #24]
        break;
 801c236:	e030      	b.n	801c29a <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801c238:	7ffb      	ldrb	r3, [r7, #31]
 801c23a:	2b04      	cmp	r3, #4
 801c23c:	d009      	beq.n	801c252 <dhcp_parse_reply+0x2de>
 801c23e:	4b07      	ldr	r3, [pc, #28]	@ (801c25c <dhcp_parse_reply+0x2e8>)
 801c240:	f240 6225 	movw	r2, #1573	@ 0x625
 801c244:	4906      	ldr	r1, [pc, #24]	@ (801c260 <dhcp_parse_reply+0x2ec>)
 801c246:	4807      	ldr	r0, [pc, #28]	@ (801c264 <dhcp_parse_reply+0x2f0>)
 801c248:	f004 f92a 	bl	80204a0 <iprintf>
 801c24c:	f06f 0305 	mvn.w	r3, #5
 801c250:	e110      	b.n	801c474 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T1;
 801c252:	2304      	movs	r3, #4
 801c254:	61bb      	str	r3, [r7, #24]
        break;
 801c256:	e020      	b.n	801c29a <dhcp_parse_reply+0x326>
 801c258:	2000dd9c 	.word	0x2000dd9c
 801c25c:	080253a8 	.word	0x080253a8
 801c260:	08025640 	.word	0x08025640
 801c264:	08025408 	.word	0x08025408
 801c268:	0802564c 	.word	0x0802564c
 801c26c:	08025660 	.word	0x08025660
 801c270:	0802566c 	.word	0x0802566c
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801c274:	7ffb      	ldrb	r3, [r7, #31]
 801c276:	2b04      	cmp	r3, #4
 801c278:	d009      	beq.n	801c28e <dhcp_parse_reply+0x31a>
 801c27a:	4b80      	ldr	r3, [pc, #512]	@ (801c47c <dhcp_parse_reply+0x508>)
 801c27c:	f240 6229 	movw	r2, #1577	@ 0x629
 801c280:	497f      	ldr	r1, [pc, #508]	@ (801c480 <dhcp_parse_reply+0x50c>)
 801c282:	4880      	ldr	r0, [pc, #512]	@ (801c484 <dhcp_parse_reply+0x510>)
 801c284:	f004 f90c 	bl	80204a0 <iprintf>
 801c288:	f06f 0305 	mvn.w	r3, #5
 801c28c:	e0f2      	b.n	801c474 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T2;
 801c28e:	2305      	movs	r3, #5
 801c290:	61bb      	str	r3, [r7, #24]
        break;
 801c292:	e002      	b.n	801c29a <dhcp_parse_reply+0x326>
      default:
        decode_len = 0;
 801c294:	2300      	movs	r3, #0
 801c296:	77bb      	strb	r3, [r7, #30]
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        break;
 801c298:	bf00      	nop
    }
    offset += len + 2;
 801c29a:	7ffb      	ldrb	r3, [r7, #31]
 801c29c:	b29a      	uxth	r2, r3
 801c29e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801c2a0:	4413      	add	r3, r2
 801c2a2:	b29b      	uxth	r3, r3
 801c2a4:	3302      	adds	r3, #2
 801c2a6:	867b      	strh	r3, [r7, #50]	@ 0x32
    if (decode_len > 0) {
 801c2a8:	7fbb      	ldrb	r3, [r7, #30]
 801c2aa:	2b00      	cmp	r3, #0
 801c2ac:	d079      	beq.n	801c3a2 <dhcp_parse_reply+0x42e>
      u32_t value = 0;
 801c2ae:	2300      	movs	r3, #0
 801c2b0:	60bb      	str	r3, [r7, #8]
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801c2b2:	69bb      	ldr	r3, [r7, #24]
 801c2b4:	2b00      	cmp	r3, #0
 801c2b6:	db02      	blt.n	801c2be <dhcp_parse_reply+0x34a>
 801c2b8:	69bb      	ldr	r3, [r7, #24]
 801c2ba:	2b07      	cmp	r3, #7
 801c2bc:	dd06      	ble.n	801c2cc <dhcp_parse_reply+0x358>
 801c2be:	4b6f      	ldr	r3, [pc, #444]	@ (801c47c <dhcp_parse_reply+0x508>)
 801c2c0:	f240 6236 	movw	r2, #1590	@ 0x636
 801c2c4:	4970      	ldr	r1, [pc, #448]	@ (801c488 <dhcp_parse_reply+0x514>)
 801c2c6:	486f      	ldr	r0, [pc, #444]	@ (801c484 <dhcp_parse_reply+0x510>)
 801c2c8:	f004 f8ea 	bl	80204a0 <iprintf>
      if (!dhcp_option_given(dhcp, decode_idx)) {
 801c2cc:	4a6f      	ldr	r2, [pc, #444]	@ (801c48c <dhcp_parse_reply+0x518>)
 801c2ce:	69bb      	ldr	r3, [r7, #24]
 801c2d0:	4413      	add	r3, r2
 801c2d2:	781b      	ldrb	r3, [r3, #0]
 801c2d4:	2b00      	cmp	r3, #0
 801c2d6:	d164      	bne.n	801c3a2 <dhcp_parse_reply+0x42e>
        copy_len = LWIP_MIN(decode_len, 4);
 801c2d8:	7fbb      	ldrb	r3, [r7, #30]
 801c2da:	2b04      	cmp	r3, #4
 801c2dc:	bf28      	it	cs
 801c2de:	2304      	movcs	r3, #4
 801c2e0:	b2db      	uxtb	r3, r3
 801c2e2:	827b      	strh	r3, [r7, #18]
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801c2e4:	8afb      	ldrh	r3, [r7, #22]
 801c2e6:	8a7a      	ldrh	r2, [r7, #18]
 801c2e8:	f107 0108 	add.w	r1, r7, #8
 801c2ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c2ee:	f7f8 faed 	bl	80148cc <pbuf_copy_partial>
 801c2f2:	4603      	mov	r3, r0
 801c2f4:	461a      	mov	r2, r3
 801c2f6:	8a7b      	ldrh	r3, [r7, #18]
 801c2f8:	4293      	cmp	r3, r2
 801c2fa:	d002      	beq.n	801c302 <dhcp_parse_reply+0x38e>
          return ERR_BUF;
 801c2fc:	f06f 0301 	mvn.w	r3, #1
 801c300:	e0b8      	b.n	801c474 <dhcp_parse_reply+0x500>
        }
        if (decode_len > 4) {
 801c302:	7fbb      	ldrb	r3, [r7, #30]
 801c304:	2b04      	cmp	r3, #4
 801c306:	d927      	bls.n	801c358 <dhcp_parse_reply+0x3e4>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801c308:	7fbb      	ldrb	r3, [r7, #30]
 801c30a:	f003 0303 	and.w	r3, r3, #3
 801c30e:	b2db      	uxtb	r3, r3
 801c310:	2b00      	cmp	r3, #0
 801c312:	d009      	beq.n	801c328 <dhcp_parse_reply+0x3b4>
 801c314:	4b59      	ldr	r3, [pc, #356]	@ (801c47c <dhcp_parse_reply+0x508>)
 801c316:	f240 623e 	movw	r2, #1598	@ 0x63e
 801c31a:	495d      	ldr	r1, [pc, #372]	@ (801c490 <dhcp_parse_reply+0x51c>)
 801c31c:	4859      	ldr	r0, [pc, #356]	@ (801c484 <dhcp_parse_reply+0x510>)
 801c31e:	f004 f8bf 	bl	80204a0 <iprintf>
 801c322:	f06f 0305 	mvn.w	r3, #5
 801c326:	e0a5      	b.n	801c474 <dhcp_parse_reply+0x500>
          dhcp_got_option(dhcp, decode_idx);
 801c328:	4a58      	ldr	r2, [pc, #352]	@ (801c48c <dhcp_parse_reply+0x518>)
 801c32a:	69bb      	ldr	r3, [r7, #24]
 801c32c:	4413      	add	r3, r2
 801c32e:	2201      	movs	r2, #1
 801c330:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801c332:	68bb      	ldr	r3, [r7, #8]
 801c334:	4618      	mov	r0, r3
 801c336:	f7f6 fe80 	bl	801303a <lwip_htonl>
 801c33a:	4602      	mov	r2, r0
 801c33c:	4955      	ldr	r1, [pc, #340]	@ (801c494 <dhcp_parse_reply+0x520>)
 801c33e:	69bb      	ldr	r3, [r7, #24]
 801c340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
          decode_len -= 4;
 801c344:	7fbb      	ldrb	r3, [r7, #30]
 801c346:	3b04      	subs	r3, #4
 801c348:	77bb      	strb	r3, [r7, #30]
          val_offset += 4;
 801c34a:	8afb      	ldrh	r3, [r7, #22]
 801c34c:	3304      	adds	r3, #4
 801c34e:	82fb      	strh	r3, [r7, #22]
          decode_idx++;
 801c350:	69bb      	ldr	r3, [r7, #24]
 801c352:	3301      	adds	r3, #1
 801c354:	61bb      	str	r3, [r7, #24]
          goto decode_next;
 801c356:	e7ac      	b.n	801c2b2 <dhcp_parse_reply+0x33e>
        } else if (decode_len == 4) {
 801c358:	7fbb      	ldrb	r3, [r7, #30]
 801c35a:	2b04      	cmp	r3, #4
 801c35c:	d106      	bne.n	801c36c <dhcp_parse_reply+0x3f8>
          value = lwip_ntohl(value);
 801c35e:	68bb      	ldr	r3, [r7, #8]
 801c360:	4618      	mov	r0, r3
 801c362:	f7f6 fe6a 	bl	801303a <lwip_htonl>
 801c366:	4603      	mov	r3, r0
 801c368:	60bb      	str	r3, [r7, #8]
 801c36a:	e010      	b.n	801c38e <dhcp_parse_reply+0x41a>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801c36c:	7fbb      	ldrb	r3, [r7, #30]
 801c36e:	2b01      	cmp	r3, #1
 801c370:	d009      	beq.n	801c386 <dhcp_parse_reply+0x412>
 801c372:	4b42      	ldr	r3, [pc, #264]	@ (801c47c <dhcp_parse_reply+0x508>)
 801c374:	f44f 62c9 	mov.w	r2, #1608	@ 0x648
 801c378:	4947      	ldr	r1, [pc, #284]	@ (801c498 <dhcp_parse_reply+0x524>)
 801c37a:	4842      	ldr	r0, [pc, #264]	@ (801c484 <dhcp_parse_reply+0x510>)
 801c37c:	f004 f890 	bl	80204a0 <iprintf>
 801c380:	f06f 0305 	mvn.w	r3, #5
 801c384:	e076      	b.n	801c474 <dhcp_parse_reply+0x500>
          value = ((u8_t*)&value)[0];
 801c386:	f107 0308 	add.w	r3, r7, #8
 801c38a:	781b      	ldrb	r3, [r3, #0]
 801c38c:	60bb      	str	r3, [r7, #8]
        }
        dhcp_got_option(dhcp, decode_idx);
 801c38e:	4a3f      	ldr	r2, [pc, #252]	@ (801c48c <dhcp_parse_reply+0x518>)
 801c390:	69bb      	ldr	r3, [r7, #24]
 801c392:	4413      	add	r3, r2
 801c394:	2201      	movs	r2, #1
 801c396:	701a      	strb	r2, [r3, #0]
        dhcp_set_option_value(dhcp, decode_idx, value);
 801c398:	68ba      	ldr	r2, [r7, #8]
 801c39a:	493e      	ldr	r1, [pc, #248]	@ (801c494 <dhcp_parse_reply+0x520>)
 801c39c:	69bb      	ldr	r3, [r7, #24]
 801c39e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      }
    }
    if (offset >= q->len) {
 801c3a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c3a4:	895b      	ldrh	r3, [r3, #10]
 801c3a6:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 801c3a8:	429a      	cmp	r2, r3
 801c3aa:	d323      	bcc.n	801c3f4 <dhcp_parse_reply+0x480>
      offset -= q->len;
 801c3ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c3ae:	895b      	ldrh	r3, [r3, #10]
 801c3b0:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 801c3b2:	1ad3      	subs	r3, r2, r3
 801c3b4:	867b      	strh	r3, [r7, #50]	@ 0x32
      offset_max -= q->len;
 801c3b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c3b8:	895b      	ldrh	r3, [r3, #10]
 801c3ba:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 801c3bc:	1ad3      	subs	r3, r2, r3
 801c3be:	863b      	strh	r3, [r7, #48]	@ 0x30
      if ((offset < offset_max) && offset_max) {
 801c3c0:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 801c3c2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801c3c4:	429a      	cmp	r2, r3
 801c3c6:	d223      	bcs.n	801c410 <dhcp_parse_reply+0x49c>
 801c3c8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801c3ca:	2b00      	cmp	r3, #0
 801c3cc:	d020      	beq.n	801c410 <dhcp_parse_reply+0x49c>
        q = q->next;
 801c3ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c3d0:	681b      	ldr	r3, [r3, #0]
 801c3d2:	62bb      	str	r3, [r7, #40]	@ 0x28
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801c3d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c3d6:	2b00      	cmp	r3, #0
 801c3d8:	d109      	bne.n	801c3ee <dhcp_parse_reply+0x47a>
 801c3da:	4b28      	ldr	r3, [pc, #160]	@ (801c47c <dhcp_parse_reply+0x508>)
 801c3dc:	f240 6254 	movw	r2, #1620	@ 0x654
 801c3e0:	492e      	ldr	r1, [pc, #184]	@ (801c49c <dhcp_parse_reply+0x528>)
 801c3e2:	4828      	ldr	r0, [pc, #160]	@ (801c484 <dhcp_parse_reply+0x510>)
 801c3e4:	f004 f85c 	bl	80204a0 <iprintf>
 801c3e8:	f06f 0305 	mvn.w	r3, #5
 801c3ec:	e042      	b.n	801c474 <dhcp_parse_reply+0x500>
        options = (u8_t*)q->payload;
 801c3ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c3f0:	685b      	ldr	r3, [r3, #4]
 801c3f2:	637b      	str	r3, [r7, #52]	@ 0x34
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801c3f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c3f6:	2b00      	cmp	r3, #0
 801c3f8:	d00a      	beq.n	801c410 <dhcp_parse_reply+0x49c>
 801c3fa:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 801c3fc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801c3fe:	429a      	cmp	r2, r3
 801c400:	d206      	bcs.n	801c410 <dhcp_parse_reply+0x49c>
 801c402:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801c404:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c406:	4413      	add	r3, r2
 801c408:	781b      	ldrb	r3, [r3, #0]
 801c40a:	2bff      	cmp	r3, #255	@ 0xff
 801c40c:	f47f adf6 	bne.w	801bffc <dhcp_parse_reply+0x88>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801c410:	4b1e      	ldr	r3, [pc, #120]	@ (801c48c <dhcp_parse_reply+0x518>)
 801c412:	781b      	ldrb	r3, [r3, #0]
 801c414:	2b00      	cmp	r3, #0
 801c416:	d018      	beq.n	801c44a <dhcp_parse_reply+0x4d6>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801c418:	4b1e      	ldr	r3, [pc, #120]	@ (801c494 <dhcp_parse_reply+0x520>)
 801c41a:	681b      	ldr	r3, [r3, #0]
 801c41c:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801c41e:	4b1b      	ldr	r3, [pc, #108]	@ (801c48c <dhcp_parse_reply+0x518>)
 801c420:	2200      	movs	r2, #0
 801c422:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801c424:	68fb      	ldr	r3, [r7, #12]
 801c426:	2b01      	cmp	r3, #1
 801c428:	d102      	bne.n	801c430 <dhcp_parse_reply+0x4bc>
      parse_file_as_options = 1;
 801c42a:	2301      	movs	r3, #1
 801c42c:	627b      	str	r3, [r7, #36]	@ 0x24
 801c42e:	e00c      	b.n	801c44a <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801c430:	68fb      	ldr	r3, [r7, #12]
 801c432:	2b02      	cmp	r3, #2
 801c434:	d102      	bne.n	801c43c <dhcp_parse_reply+0x4c8>
      parse_sname_as_options = 1;
 801c436:	2301      	movs	r3, #1
 801c438:	623b      	str	r3, [r7, #32]
 801c43a:	e006      	b.n	801c44a <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801c43c:	68fb      	ldr	r3, [r7, #12]
 801c43e:	2b03      	cmp	r3, #3
 801c440:	d103      	bne.n	801c44a <dhcp_parse_reply+0x4d6>
      parse_sname_as_options = 1;
 801c442:	2301      	movs	r3, #1
 801c444:	623b      	str	r3, [r7, #32]
      parse_file_as_options = 1;
 801c446:	2301      	movs	r3, #1
 801c448:	627b      	str	r3, [r7, #36]	@ 0x24
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
 801c44a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c44c:	2b00      	cmp	r3, #0
 801c44e:	d006      	beq.n	801c45e <dhcp_parse_reply+0x4ea>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801c450:	2300      	movs	r3, #0
 801c452:	627b      	str	r3, [r7, #36]	@ 0x24
    options_idx = DHCP_FILE_OFS;
 801c454:	236c      	movs	r3, #108	@ 0x6c
 801c456:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801c458:	23ec      	movs	r3, #236	@ 0xec
 801c45a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    goto again;
 801c45c:	e5a8      	b.n	801bfb0 <dhcp_parse_reply+0x3c>
  } else if (parse_sname_as_options) {
 801c45e:	6a3b      	ldr	r3, [r7, #32]
 801c460:	2b00      	cmp	r3, #0
 801c462:	d006      	beq.n	801c472 <dhcp_parse_reply+0x4fe>
    parse_sname_as_options = 0;
 801c464:	2300      	movs	r3, #0
 801c466:	623b      	str	r3, [r7, #32]
    options_idx = DHCP_SNAME_OFS;
 801c468:	232c      	movs	r3, #44	@ 0x2c
 801c46a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801c46c:	236c      	movs	r3, #108	@ 0x6c
 801c46e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    goto again;
 801c470:	e59e      	b.n	801bfb0 <dhcp_parse_reply+0x3c>
  }
  return ERR_OK;
 801c472:	2300      	movs	r3, #0
}
 801c474:	4618      	mov	r0, r3
 801c476:	3738      	adds	r7, #56	@ 0x38
 801c478:	46bd      	mov	sp, r7
 801c47a:	bd80      	pop	{r7, pc}
 801c47c:	080253a8 	.word	0x080253a8
 801c480:	08025640 	.word	0x08025640
 801c484:	08025408 	.word	0x08025408
 801c488:	08025684 	.word	0x08025684
 801c48c:	2000dd9c 	.word	0x2000dd9c
 801c490:	08025698 	.word	0x08025698
 801c494:	2000dd7c 	.word	0x2000dd7c
 801c498:	080256b0 	.word	0x080256b0
 801c49c:	080256c4 	.word	0x080256c4

0801c4a0 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801c4a0:	b580      	push	{r7, lr}
 801c4a2:	b08a      	sub	sp, #40	@ 0x28
 801c4a4:	af00      	add	r7, sp, #0
 801c4a6:	60f8      	str	r0, [r7, #12]
 801c4a8:	60b9      	str	r1, [r7, #8]
 801c4aa:	607a      	str	r2, [r7, #4]
 801c4ac:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801c4ae:	4b69      	ldr	r3, [pc, #420]	@ (801c654 <dhcp_recv+0x1b4>)
 801c4b0:	685b      	ldr	r3, [r3, #4]
 801c4b2:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c4b4:	6a3b      	ldr	r3, [r7, #32]
 801c4b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c4b8:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801c4ba:	687b      	ldr	r3, [r7, #4]
 801c4bc:	685b      	ldr	r3, [r3, #4]
 801c4be:	61bb      	str	r3, [r7, #24]
  u8_t i;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801c4c0:	69fb      	ldr	r3, [r7, #28]
 801c4c2:	2b00      	cmp	r3, #0
 801c4c4:	f000 80a9 	beq.w	801c61a <dhcp_recv+0x17a>
 801c4c8:	69fb      	ldr	r3, [r7, #28]
 801c4ca:	7a1b      	ldrb	r3, [r3, #8]
 801c4cc:	2b00      	cmp	r3, #0
 801c4ce:	f000 80a4 	beq.w	801c61a <dhcp_recv+0x17a>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 801c4d2:	69fb      	ldr	r3, [r7, #28]
 801c4d4:	685b      	ldr	r3, [r3, #4]
 801c4d6:	2b00      	cmp	r3, #0
 801c4d8:	d006      	beq.n	801c4e8 <dhcp_recv+0x48>
 801c4da:	4b5f      	ldr	r3, [pc, #380]	@ (801c658 <dhcp_recv+0x1b8>)
 801c4dc:	f44f 62d5 	mov.w	r2, #1704	@ 0x6a8
 801c4e0:	495e      	ldr	r1, [pc, #376]	@ (801c65c <dhcp_recv+0x1bc>)
 801c4e2:	485f      	ldr	r0, [pc, #380]	@ (801c660 <dhcp_recv+0x1c0>)
 801c4e4:	f003 ffdc 	bl	80204a0 <iprintf>

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801c4e8:	687b      	ldr	r3, [r7, #4]
 801c4ea:	895b      	ldrh	r3, [r3, #10]
 801c4ec:	2b2b      	cmp	r3, #43	@ 0x2b
 801c4ee:	f240 8096 	bls.w	801c61e <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801c4f2:	69bb      	ldr	r3, [r7, #24]
 801c4f4:	781b      	ldrb	r3, [r3, #0]
 801c4f6:	2b02      	cmp	r3, #2
 801c4f8:	f040 8093 	bne.w	801c622 <dhcp_recv+0x182>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 801c4fc:	2300      	movs	r3, #0
 801c4fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c502:	e012      	b.n	801c52a <dhcp_recv+0x8a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801c504:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c508:	6a3a      	ldr	r2, [r7, #32]
 801c50a:	4413      	add	r3, r2
 801c50c:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 801c510:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c514:	69b9      	ldr	r1, [r7, #24]
 801c516:	440b      	add	r3, r1
 801c518:	7f1b      	ldrb	r3, [r3, #28]
 801c51a:	429a      	cmp	r2, r3
 801c51c:	f040 8083 	bne.w	801c626 <dhcp_recv+0x186>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 801c520:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c524:	3301      	adds	r3, #1
 801c526:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c52a:	6a3b      	ldr	r3, [r7, #32]
 801c52c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801c530:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801c534:	429a      	cmp	r2, r3
 801c536:	d207      	bcs.n	801c548 <dhcp_recv+0xa8>
 801c538:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c53c:	2b05      	cmp	r3, #5
 801c53e:	d803      	bhi.n	801c548 <dhcp_recv+0xa8>
 801c540:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c544:	2b0f      	cmp	r3, #15
 801c546:	d9dd      	bls.n	801c504 <dhcp_recv+0x64>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801c548:	69bb      	ldr	r3, [r7, #24]
 801c54a:	685b      	ldr	r3, [r3, #4]
 801c54c:	4618      	mov	r0, r3
 801c54e:	f7f6 fd74 	bl	801303a <lwip_htonl>
 801c552:	4602      	mov	r2, r0
 801c554:	69fb      	ldr	r3, [r7, #28]
 801c556:	681b      	ldr	r3, [r3, #0]
 801c558:	429a      	cmp	r2, r3
 801c55a:	d166      	bne.n	801c62a <dhcp_recv+0x18a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",lwip_ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
 801c55c:	6879      	ldr	r1, [r7, #4]
 801c55e:	69f8      	ldr	r0, [r7, #28]
 801c560:	f7ff fd08 	bl	801bf74 <dhcp_parse_reply>
 801c564:	4603      	mov	r3, r0
 801c566:	2b00      	cmp	r3, #0
 801c568:	d161      	bne.n	801c62e <dhcp_recv+0x18e>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801c56a:	4b3e      	ldr	r3, [pc, #248]	@ (801c664 <dhcp_recv+0x1c4>)
 801c56c:	785b      	ldrb	r3, [r3, #1]
 801c56e:	2b00      	cmp	r3, #0
 801c570:	d05f      	beq.n	801c632 <dhcp_recv+0x192>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801c572:	4b3d      	ldr	r3, [pc, #244]	@ (801c668 <dhcp_recv+0x1c8>)
 801c574:	685b      	ldr	r3, [r3, #4]
 801c576:	75fb      	strb	r3, [r7, #23]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801c578:	7dfb      	ldrb	r3, [r7, #23]
 801c57a:	2b05      	cmp	r3, #5
 801c57c:	d128      	bne.n	801c5d0 <dhcp_recv+0x130>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801c57e:	69fb      	ldr	r3, [r7, #28]
 801c580:	7a5b      	ldrb	r3, [r3, #9]
 801c582:	2b01      	cmp	r3, #1
 801c584:	d111      	bne.n	801c5aa <dhcp_recv+0x10a>
      dhcp_handle_ack(netif);
 801c586:	6a38      	ldr	r0, [r7, #32]
 801c588:	f7fe fea0 	bl	801b2cc <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801c58c:	6a3b      	ldr	r3, [r7, #32]
 801c58e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801c592:	f003 0308 	and.w	r3, r3, #8
 801c596:	2b00      	cmp	r3, #0
 801c598:	d003      	beq.n	801c5a2 <dhcp_recv+0x102>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801c59a:	6a38      	ldr	r0, [r7, #32]
 801c59c:	f7fe fc68 	bl	801ae70 <dhcp_check>
 801c5a0:	e04a      	b.n	801c638 <dhcp_recv+0x198>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801c5a2:	6a38      	ldr	r0, [r7, #32]
 801c5a4:	f7ff f8a0 	bl	801b6e8 <dhcp_bind>
 801c5a8:	e046      	b.n	801c638 <dhcp_recv+0x198>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801c5aa:	69fb      	ldr	r3, [r7, #28]
 801c5ac:	7a5b      	ldrb	r3, [r3, #9]
 801c5ae:	2b03      	cmp	r3, #3
 801c5b0:	d007      	beq.n	801c5c2 <dhcp_recv+0x122>
 801c5b2:	69fb      	ldr	r3, [r7, #28]
 801c5b4:	7a5b      	ldrb	r3, [r3, #9]
 801c5b6:	2b04      	cmp	r3, #4
 801c5b8:	d003      	beq.n	801c5c2 <dhcp_recv+0x122>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801c5ba:	69fb      	ldr	r3, [r7, #28]
 801c5bc:	7a5b      	ldrb	r3, [r3, #9]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801c5be:	2b05      	cmp	r3, #5
 801c5c0:	d13a      	bne.n	801c638 <dhcp_recv+0x198>
      dhcp_handle_ack(netif);
 801c5c2:	6a38      	ldr	r0, [r7, #32]
 801c5c4:	f7fe fe82 	bl	801b2cc <dhcp_handle_ack>
      dhcp_bind(netif);
 801c5c8:	6a38      	ldr	r0, [r7, #32]
 801c5ca:	f7ff f88d 	bl	801b6e8 <dhcp_bind>
 801c5ce:	e033      	b.n	801c638 <dhcp_recv+0x198>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801c5d0:	7dfb      	ldrb	r3, [r7, #23]
 801c5d2:	2b06      	cmp	r3, #6
 801c5d4:	d113      	bne.n	801c5fe <dhcp_recv+0x15e>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801c5d6:	69fb      	ldr	r3, [r7, #28]
 801c5d8:	7a5b      	ldrb	r3, [r3, #9]
  else if ((msg_type == DHCP_NAK) &&
 801c5da:	2b03      	cmp	r3, #3
 801c5dc:	d00b      	beq.n	801c5f6 <dhcp_recv+0x156>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801c5de:	69fb      	ldr	r3, [r7, #28]
 801c5e0:	7a5b      	ldrb	r3, [r3, #9]
 801c5e2:	2b01      	cmp	r3, #1
 801c5e4:	d007      	beq.n	801c5f6 <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801c5e6:	69fb      	ldr	r3, [r7, #28]
 801c5e8:	7a5b      	ldrb	r3, [r3, #9]
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801c5ea:	2b04      	cmp	r3, #4
 801c5ec:	d003      	beq.n	801c5f6 <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801c5ee:	69fb      	ldr	r3, [r7, #28]
 801c5f0:	7a5b      	ldrb	r3, [r3, #9]
 801c5f2:	2b05      	cmp	r3, #5
 801c5f4:	d103      	bne.n	801c5fe <dhcp_recv+0x15e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801c5f6:	6a38      	ldr	r0, [r7, #32]
 801c5f8:	f7fe fc20 	bl	801ae3c <dhcp_handle_nak>
 801c5fc:	e01c      	b.n	801c638 <dhcp_recv+0x198>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801c5fe:	7dfb      	ldrb	r3, [r7, #23]
 801c600:	2b02      	cmp	r3, #2
 801c602:	d118      	bne.n	801c636 <dhcp_recv+0x196>
 801c604:	69fb      	ldr	r3, [r7, #28]
 801c606:	7a5b      	ldrb	r3, [r3, #9]
 801c608:	2b06      	cmp	r3, #6
 801c60a:	d114      	bne.n	801c636 <dhcp_recv+0x196>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    dhcp->request_timeout = 0;
 801c60c:	69fb      	ldr	r3, [r7, #28]
 801c60e:	2200      	movs	r2, #0
 801c610:	82da      	strh	r2, [r3, #22]
    /* remember offered lease */
    dhcp_handle_offer(netif);
 801c612:	6a38      	ldr	r0, [r7, #32]
 801c614:	f7fe fc60 	bl	801aed8 <dhcp_handle_offer>
 801c618:	e00e      	b.n	801c638 <dhcp_recv+0x198>
    goto free_pbuf_and_return;
 801c61a:	bf00      	nop
 801c61c:	e00c      	b.n	801c638 <dhcp_recv+0x198>
    goto free_pbuf_and_return;
 801c61e:	bf00      	nop
 801c620:	e00a      	b.n	801c638 <dhcp_recv+0x198>
    goto free_pbuf_and_return;
 801c622:	bf00      	nop
 801c624:	e008      	b.n	801c638 <dhcp_recv+0x198>
      goto free_pbuf_and_return;
 801c626:	bf00      	nop
 801c628:	e006      	b.n	801c638 <dhcp_recv+0x198>
    goto free_pbuf_and_return;
 801c62a:	bf00      	nop
 801c62c:	e004      	b.n	801c638 <dhcp_recv+0x198>
    goto free_pbuf_and_return;
 801c62e:	bf00      	nop
 801c630:	e002      	b.n	801c638 <dhcp_recv+0x198>
    goto free_pbuf_and_return;
 801c632:	bf00      	nop
 801c634:	e000      	b.n	801c638 <dhcp_recv+0x198>
  }

free_pbuf_and_return:
 801c636:	bf00      	nop
  if (dhcp != NULL) {
 801c638:	69fb      	ldr	r3, [r7, #28]
 801c63a:	2b00      	cmp	r3, #0
 801c63c:	d002      	beq.n	801c644 <dhcp_recv+0x1a4>
    dhcp->msg_in = NULL;
 801c63e:	69fb      	ldr	r3, [r7, #28]
 801c640:	2200      	movs	r2, #0
 801c642:	605a      	str	r2, [r3, #4]
  }
  pbuf_free(p);
 801c644:	6878      	ldr	r0, [r7, #4]
 801c646:	f7f7 ff43 	bl	80144d0 <pbuf_free>
}
 801c64a:	bf00      	nop
 801c64c:	3728      	adds	r7, #40	@ 0x28
 801c64e:	46bd      	mov	sp, r7
 801c650:	bd80      	pop	{r7, pc}
 801c652:	bf00      	nop
 801c654:	2000a59c 	.word	0x2000a59c
 801c658:	080253a8 	.word	0x080253a8
 801c65c:	080254d4 	.word	0x080254d4
 801c660:	08025408 	.word	0x08025408
 801c664:	2000dd9c 	.word	0x2000dd9c
 801c668:	2000dd7c 	.word	0x2000dd7c

0801c66c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 801c66c:	b590      	push	{r4, r7, lr}
 801c66e:	b087      	sub	sp, #28
 801c670:	af00      	add	r7, sp, #0
 801c672:	60f8      	str	r0, [r7, #12]
 801c674:	60b9      	str	r1, [r7, #8]
 801c676:	4613      	mov	r3, r2
 801c678:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 801c67a:	68fb      	ldr	r3, [r7, #12]
 801c67c:	2b00      	cmp	r3, #0
 801c67e:	d109      	bne.n	801c694 <dhcp_create_msg+0x28>
 801c680:	4ba3      	ldr	r3, [pc, #652]	@ (801c910 <dhcp_create_msg+0x2a4>)
 801c682:	f240 721d 	movw	r2, #1821	@ 0x71d
 801c686:	49a3      	ldr	r1, [pc, #652]	@ (801c914 <dhcp_create_msg+0x2a8>)
 801c688:	48a3      	ldr	r0, [pc, #652]	@ (801c918 <dhcp_create_msg+0x2ac>)
 801c68a:	f003 ff09 	bl	80204a0 <iprintf>
 801c68e:	f06f 030f 	mvn.w	r3, #15
 801c692:	e138      	b.n	801c906 <dhcp_create_msg+0x29a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801c694:	68bb      	ldr	r3, [r7, #8]
 801c696:	2b00      	cmp	r3, #0
 801c698:	d109      	bne.n	801c6ae <dhcp_create_msg+0x42>
 801c69a:	4b9d      	ldr	r3, [pc, #628]	@ (801c910 <dhcp_create_msg+0x2a4>)
 801c69c:	f240 721e 	movw	r2, #1822	@ 0x71e
 801c6a0:	499e      	ldr	r1, [pc, #632]	@ (801c91c <dhcp_create_msg+0x2b0>)
 801c6a2:	489d      	ldr	r0, [pc, #628]	@ (801c918 <dhcp_create_msg+0x2ac>)
 801c6a4:	f003 fefc 	bl	80204a0 <iprintf>
 801c6a8:	f06f 0305 	mvn.w	r3, #5
 801c6ac:	e12b      	b.n	801c906 <dhcp_create_msg+0x29a>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 801c6ae:	68bb      	ldr	r3, [r7, #8]
 801c6b0:	68db      	ldr	r3, [r3, #12]
 801c6b2:	2b00      	cmp	r3, #0
 801c6b4:	d006      	beq.n	801c6c4 <dhcp_create_msg+0x58>
 801c6b6:	4b96      	ldr	r3, [pc, #600]	@ (801c910 <dhcp_create_msg+0x2a4>)
 801c6b8:	f240 721f 	movw	r2, #1823	@ 0x71f
 801c6bc:	4998      	ldr	r1, [pc, #608]	@ (801c920 <dhcp_create_msg+0x2b4>)
 801c6be:	4896      	ldr	r0, [pc, #600]	@ (801c918 <dhcp_create_msg+0x2ac>)
 801c6c0:	f003 feee 	bl	80204a0 <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 801c6c4:	68bb      	ldr	r3, [r7, #8]
 801c6c6:	691b      	ldr	r3, [r3, #16]
 801c6c8:	2b00      	cmp	r3, #0
 801c6ca:	d006      	beq.n	801c6da <dhcp_create_msg+0x6e>
 801c6cc:	4b90      	ldr	r3, [pc, #576]	@ (801c910 <dhcp_create_msg+0x2a4>)
 801c6ce:	f44f 62e4 	mov.w	r2, #1824	@ 0x720
 801c6d2:	4994      	ldr	r1, [pc, #592]	@ (801c924 <dhcp_create_msg+0x2b8>)
 801c6d4:	4890      	ldr	r0, [pc, #576]	@ (801c918 <dhcp_create_msg+0x2ac>)
 801c6d6:	f003 fee3 	bl	80204a0 <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801c6da:	2200      	movs	r2, #0
 801c6dc:	f44f 719a 	mov.w	r1, #308	@ 0x134
 801c6e0:	2000      	movs	r0, #0
 801c6e2:	f7f7 fb7d 	bl	8013de0 <pbuf_alloc>
 801c6e6:	4602      	mov	r2, r0
 801c6e8:	68bb      	ldr	r3, [r7, #8]
 801c6ea:	60da      	str	r2, [r3, #12]
  if (dhcp->p_out == NULL) {
 801c6ec:	68bb      	ldr	r3, [r7, #8]
 801c6ee:	68db      	ldr	r3, [r3, #12]
 801c6f0:	2b00      	cmp	r3, #0
 801c6f2:	d102      	bne.n	801c6fa <dhcp_create_msg+0x8e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
 801c6f4:	f04f 33ff 	mov.w	r3, #4294967295
 801c6f8:	e105      	b.n	801c906 <dhcp_create_msg+0x29a>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801c6fa:	68bb      	ldr	r3, [r7, #8]
 801c6fc:	68db      	ldr	r3, [r3, #12]
 801c6fe:	895b      	ldrh	r3, [r3, #10]
 801c700:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 801c704:	d206      	bcs.n	801c714 <dhcp_create_msg+0xa8>
 801c706:	4b82      	ldr	r3, [pc, #520]	@ (801c910 <dhcp_create_msg+0x2a4>)
 801c708:	f240 7227 	movw	r2, #1831	@ 0x727
 801c70c:	4986      	ldr	r1, [pc, #536]	@ (801c928 <dhcp_create_msg+0x2bc>)
 801c70e:	4882      	ldr	r0, [pc, #520]	@ (801c918 <dhcp_create_msg+0x2ac>)
 801c710:	f003 fec6 	bl	80204a0 <iprintf>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801c714:	79fb      	ldrb	r3, [r7, #7]
 801c716:	2b03      	cmp	r3, #3
 801c718:	d103      	bne.n	801c722 <dhcp_create_msg+0xb6>
 801c71a:	68bb      	ldr	r3, [r7, #8]
 801c71c:	7a5b      	ldrb	r3, [r3, #9]
 801c71e:	2b03      	cmp	r3, #3
 801c720:	d10d      	bne.n	801c73e <dhcp_create_msg+0xd2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801c722:	68bb      	ldr	r3, [r7, #8]
 801c724:	7a9b      	ldrb	r3, [r3, #10]
 801c726:	2b00      	cmp	r3, #0
 801c728:	d105      	bne.n	801c736 <dhcp_create_msg+0xca>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801c72a:	f003 f8d9 	bl	801f8e0 <rand>
 801c72e:	4603      	mov	r3, r0
 801c730:	461a      	mov	r2, r3
 801c732:	4b7e      	ldr	r3, [pc, #504]	@ (801c92c <dhcp_create_msg+0x2c0>)
 801c734:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801c736:	4b7d      	ldr	r3, [pc, #500]	@ (801c92c <dhcp_create_msg+0x2c0>)
 801c738:	681a      	ldr	r2, [r3, #0]
 801c73a:	68bb      	ldr	r3, [r7, #8]
 801c73c:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 801c73e:	68bb      	ldr	r3, [r7, #8]
 801c740:	68db      	ldr	r3, [r3, #12]
 801c742:	685a      	ldr	r2, [r3, #4]
 801c744:	68bb      	ldr	r3, [r7, #8]
 801c746:	611a      	str	r2, [r3, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 801c748:	68bb      	ldr	r3, [r7, #8]
 801c74a:	691b      	ldr	r3, [r3, #16]
 801c74c:	2201      	movs	r2, #1
 801c74e:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 801c750:	68bb      	ldr	r3, [r7, #8]
 801c752:	691b      	ldr	r3, [r3, #16]
 801c754:	2201      	movs	r2, #1
 801c756:	705a      	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 801c758:	68bb      	ldr	r3, [r7, #8]
 801c75a:	691b      	ldr	r3, [r3, #16]
 801c75c:	68fa      	ldr	r2, [r7, #12]
 801c75e:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 801c762:	709a      	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
 801c764:	68bb      	ldr	r3, [r7, #8]
 801c766:	691b      	ldr	r3, [r3, #16]
 801c768:	2200      	movs	r2, #0
 801c76a:	70da      	strb	r2, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 801c76c:	68bb      	ldr	r3, [r7, #8]
 801c76e:	681a      	ldr	r2, [r3, #0]
 801c770:	68bb      	ldr	r3, [r7, #8]
 801c772:	691c      	ldr	r4, [r3, #16]
 801c774:	4610      	mov	r0, r2
 801c776:	f7f6 fc60 	bl	801303a <lwip_htonl>
 801c77a:	4603      	mov	r3, r0
 801c77c:	6063      	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
 801c77e:	68bb      	ldr	r3, [r7, #8]
 801c780:	691b      	ldr	r3, [r3, #16]
 801c782:	2200      	movs	r2, #0
 801c784:	721a      	strb	r2, [r3, #8]
 801c786:	2200      	movs	r2, #0
 801c788:	725a      	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
 801c78a:	68bb      	ldr	r3, [r7, #8]
 801c78c:	691b      	ldr	r3, [r3, #16]
 801c78e:	2200      	movs	r2, #0
 801c790:	729a      	strb	r2, [r3, #10]
 801c792:	2200      	movs	r2, #0
 801c794:	72da      	strb	r2, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 801c796:	68bb      	ldr	r3, [r7, #8]
 801c798:	691b      	ldr	r3, [r3, #16]
 801c79a:	2200      	movs	r2, #0
 801c79c:	731a      	strb	r2, [r3, #12]
 801c79e:	2200      	movs	r2, #0
 801c7a0:	735a      	strb	r2, [r3, #13]
 801c7a2:	2200      	movs	r2, #0
 801c7a4:	739a      	strb	r2, [r3, #14]
 801c7a6:	2200      	movs	r2, #0
 801c7a8:	73da      	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801c7aa:	79fb      	ldrb	r3, [r7, #7]
 801c7ac:	2b08      	cmp	r3, #8
 801c7ae:	d010      	beq.n	801c7d2 <dhcp_create_msg+0x166>
 801c7b0:	79fb      	ldrb	r3, [r7, #7]
 801c7b2:	2b04      	cmp	r3, #4
 801c7b4:	d00d      	beq.n	801c7d2 <dhcp_create_msg+0x166>
 801c7b6:	79fb      	ldrb	r3, [r7, #7]
 801c7b8:	2b07      	cmp	r3, #7
 801c7ba:	d00a      	beq.n	801c7d2 <dhcp_create_msg+0x166>
 801c7bc:	79fb      	ldrb	r3, [r7, #7]
 801c7be:	2b03      	cmp	r3, #3
 801c7c0:	d10d      	bne.n	801c7de <dhcp_create_msg+0x172>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 801c7c2:	68bb      	ldr	r3, [r7, #8]
 801c7c4:	7a5b      	ldrb	r3, [r3, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801c7c6:	2b05      	cmp	r3, #5
 801c7c8:	d003      	beq.n	801c7d2 <dhcp_create_msg+0x166>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 801c7ca:	68bb      	ldr	r3, [r7, #8]
 801c7cc:	7a5b      	ldrb	r3, [r3, #9]
 801c7ce:	2b04      	cmp	r3, #4
 801c7d0:	d105      	bne.n	801c7de <dhcp_create_msg+0x172>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 801c7d2:	68fb      	ldr	r3, [r7, #12]
 801c7d4:	1d1a      	adds	r2, r3, #4
 801c7d6:	68bb      	ldr	r3, [r7, #8]
 801c7d8:	691b      	ldr	r3, [r3, #16]
 801c7da:	6812      	ldr	r2, [r2, #0]
 801c7dc:	60da      	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 801c7de:	68bb      	ldr	r3, [r7, #8]
 801c7e0:	691b      	ldr	r3, [r3, #16]
 801c7e2:	2200      	movs	r2, #0
 801c7e4:	741a      	strb	r2, [r3, #16]
 801c7e6:	2200      	movs	r2, #0
 801c7e8:	745a      	strb	r2, [r3, #17]
 801c7ea:	2200      	movs	r2, #0
 801c7ec:	749a      	strb	r2, [r3, #18]
 801c7ee:	2200      	movs	r2, #0
 801c7f0:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 801c7f2:	68bb      	ldr	r3, [r7, #8]
 801c7f4:	691b      	ldr	r3, [r3, #16]
 801c7f6:	2200      	movs	r2, #0
 801c7f8:	751a      	strb	r2, [r3, #20]
 801c7fa:	2200      	movs	r2, #0
 801c7fc:	755a      	strb	r2, [r3, #21]
 801c7fe:	2200      	movs	r2, #0
 801c800:	759a      	strb	r2, [r3, #22]
 801c802:	2200      	movs	r2, #0
 801c804:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 801c806:	68bb      	ldr	r3, [r7, #8]
 801c808:	691b      	ldr	r3, [r3, #16]
 801c80a:	2200      	movs	r2, #0
 801c80c:	761a      	strb	r2, [r3, #24]
 801c80e:	2200      	movs	r2, #0
 801c810:	765a      	strb	r2, [r3, #25]
 801c812:	2200      	movs	r2, #0
 801c814:	769a      	strb	r2, [r3, #26]
 801c816:	2200      	movs	r2, #0
 801c818:	76da      	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 801c81a:	2300      	movs	r3, #0
 801c81c:	82fb      	strh	r3, [r7, #22]
 801c81e:	e019      	b.n	801c854 <dhcp_create_msg+0x1e8>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 801c820:	68fb      	ldr	r3, [r7, #12]
 801c822:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801c826:	461a      	mov	r2, r3
 801c828:	8afb      	ldrh	r3, [r7, #22]
 801c82a:	4293      	cmp	r3, r2
 801c82c:	d208      	bcs.n	801c840 <dhcp_create_msg+0x1d4>
 801c82e:	8afb      	ldrh	r3, [r7, #22]
 801c830:	2b05      	cmp	r3, #5
 801c832:	d805      	bhi.n	801c840 <dhcp_create_msg+0x1d4>
 801c834:	8afb      	ldrh	r3, [r7, #22]
 801c836:	68fa      	ldr	r2, [r7, #12]
 801c838:	4413      	add	r3, r2
 801c83a:	f893 102d 	ldrb.w	r1, [r3, #45]	@ 0x2d
 801c83e:	e000      	b.n	801c842 <dhcp_create_msg+0x1d6>
 801c840:	2100      	movs	r1, #0
 801c842:	68bb      	ldr	r3, [r7, #8]
 801c844:	691a      	ldr	r2, [r3, #16]
 801c846:	8afb      	ldrh	r3, [r7, #22]
 801c848:	4413      	add	r3, r2
 801c84a:	460a      	mov	r2, r1
 801c84c:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 801c84e:	8afb      	ldrh	r3, [r7, #22]
 801c850:	3301      	adds	r3, #1
 801c852:	82fb      	strh	r3, [r7, #22]
 801c854:	8afb      	ldrh	r3, [r7, #22]
 801c856:	2b0f      	cmp	r3, #15
 801c858:	d9e2      	bls.n	801c820 <dhcp_create_msg+0x1b4>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 801c85a:	2300      	movs	r3, #0
 801c85c:	82fb      	strh	r3, [r7, #22]
 801c85e:	e009      	b.n	801c874 <dhcp_create_msg+0x208>
    dhcp->msg_out->sname[i] = 0;
 801c860:	68bb      	ldr	r3, [r7, #8]
 801c862:	691a      	ldr	r2, [r3, #16]
 801c864:	8afb      	ldrh	r3, [r7, #22]
 801c866:	4413      	add	r3, r2
 801c868:	2200      	movs	r2, #0
 801c86a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 801c86e:	8afb      	ldrh	r3, [r7, #22]
 801c870:	3301      	adds	r3, #1
 801c872:	82fb      	strh	r3, [r7, #22]
 801c874:	8afb      	ldrh	r3, [r7, #22]
 801c876:	2b3f      	cmp	r3, #63	@ 0x3f
 801c878:	d9f2      	bls.n	801c860 <dhcp_create_msg+0x1f4>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 801c87a:	2300      	movs	r3, #0
 801c87c:	82fb      	strh	r3, [r7, #22]
 801c87e:	e009      	b.n	801c894 <dhcp_create_msg+0x228>
    dhcp->msg_out->file[i] = 0;
 801c880:	68bb      	ldr	r3, [r7, #8]
 801c882:	691a      	ldr	r2, [r3, #16]
 801c884:	8afb      	ldrh	r3, [r7, #22]
 801c886:	4413      	add	r3, r2
 801c888:	2200      	movs	r2, #0
 801c88a:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 801c88e:	8afb      	ldrh	r3, [r7, #22]
 801c890:	3301      	adds	r3, #1
 801c892:	82fb      	strh	r3, [r7, #22]
 801c894:	8afb      	ldrh	r3, [r7, #22]
 801c896:	2b7f      	cmp	r3, #127	@ 0x7f
 801c898:	d9f2      	bls.n	801c880 <dhcp_create_msg+0x214>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801c89a:	68bb      	ldr	r3, [r7, #8]
 801c89c:	691b      	ldr	r3, [r3, #16]
 801c89e:	2200      	movs	r2, #0
 801c8a0:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801c8a4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 801c8a8:	2200      	movs	r2, #0
 801c8aa:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 801c8ae:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 801c8b2:	2200      	movs	r2, #0
 801c8b4:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 801c8b8:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 801c8bc:	2200      	movs	r2, #0
 801c8be:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801c8c2:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  dhcp->options_out_len = 0;
 801c8c6:	68bb      	ldr	r3, [r7, #8]
 801c8c8:	2200      	movs	r2, #0
 801c8ca:	829a      	strh	r2, [r3, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 801c8cc:	2300      	movs	r3, #0
 801c8ce:	82fb      	strh	r3, [r7, #22]
 801c8d0:	e00b      	b.n	801c8ea <dhcp_create_msg+0x27e>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 801c8d2:	68bb      	ldr	r3, [r7, #8]
 801c8d4:	691a      	ldr	r2, [r3, #16]
 801c8d6:	8afb      	ldrh	r3, [r7, #22]
 801c8d8:	8af9      	ldrh	r1, [r7, #22]
 801c8da:	b2c9      	uxtb	r1, r1
 801c8dc:	4413      	add	r3, r2
 801c8de:	460a      	mov	r2, r1
 801c8e0:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 801c8e4:	8afb      	ldrh	r3, [r7, #22]
 801c8e6:	3301      	adds	r3, #1
 801c8e8:	82fb      	strh	r3, [r7, #22]
 801c8ea:	8afb      	ldrh	r3, [r7, #22]
 801c8ec:	2b43      	cmp	r3, #67	@ 0x43
 801c8ee:	d9f0      	bls.n	801c8d2 <dhcp_create_msg+0x266>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801c8f0:	2201      	movs	r2, #1
 801c8f2:	2135      	movs	r1, #53	@ 0x35
 801c8f4:	68b8      	ldr	r0, [r7, #8]
 801c8f6:	f7ff fa4b 	bl	801bd90 <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 801c8fa:	79fb      	ldrb	r3, [r7, #7]
 801c8fc:	4619      	mov	r1, r3
 801c8fe:	68b8      	ldr	r0, [r7, #8]
 801c900:	f7ff fa80 	bl	801be04 <dhcp_option_byte>
  return ERR_OK;
 801c904:	2300      	movs	r3, #0
}
 801c906:	4618      	mov	r0, r3
 801c908:	371c      	adds	r7, #28
 801c90a:	46bd      	mov	sp, r7
 801c90c:	bd90      	pop	{r4, r7, pc}
 801c90e:	bf00      	nop
 801c910:	080253a8 	.word	0x080253a8
 801c914:	080256d8 	.word	0x080256d8
 801c918:	08025408 	.word	0x08025408
 801c91c:	080256f8 	.word	0x080256f8
 801c920:	08025718 	.word	0x08025718
 801c924:	08025740 	.word	0x08025740
 801c928:	08025768 	.word	0x08025768
 801c92c:	2000ddac 	.word	0x2000ddac

0801c930 <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
 801c930:	b580      	push	{r7, lr}
 801c932:	b082      	sub	sp, #8
 801c934:	af00      	add	r7, sp, #0
 801c936:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 801c938:	687b      	ldr	r3, [r7, #4]
 801c93a:	2b00      	cmp	r3, #0
 801c93c:	d107      	bne.n	801c94e <dhcp_delete_msg+0x1e>
 801c93e:	4b18      	ldr	r3, [pc, #96]	@ (801c9a0 <dhcp_delete_msg+0x70>)
 801c940:	f240 726d 	movw	r2, #1901	@ 0x76d
 801c944:	4917      	ldr	r1, [pc, #92]	@ (801c9a4 <dhcp_delete_msg+0x74>)
 801c946:	4818      	ldr	r0, [pc, #96]	@ (801c9a8 <dhcp_delete_msg+0x78>)
 801c948:	f003 fdaa 	bl	80204a0 <iprintf>
 801c94c:	e024      	b.n	801c998 <dhcp_delete_msg+0x68>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 801c94e:	687b      	ldr	r3, [r7, #4]
 801c950:	68db      	ldr	r3, [r3, #12]
 801c952:	2b00      	cmp	r3, #0
 801c954:	d106      	bne.n	801c964 <dhcp_delete_msg+0x34>
 801c956:	4b12      	ldr	r3, [pc, #72]	@ (801c9a0 <dhcp_delete_msg+0x70>)
 801c958:	f240 726e 	movw	r2, #1902	@ 0x76e
 801c95c:	4913      	ldr	r1, [pc, #76]	@ (801c9ac <dhcp_delete_msg+0x7c>)
 801c95e:	4812      	ldr	r0, [pc, #72]	@ (801c9a8 <dhcp_delete_msg+0x78>)
 801c960:	f003 fd9e 	bl	80204a0 <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 801c964:	687b      	ldr	r3, [r7, #4]
 801c966:	691b      	ldr	r3, [r3, #16]
 801c968:	2b00      	cmp	r3, #0
 801c96a:	d106      	bne.n	801c97a <dhcp_delete_msg+0x4a>
 801c96c:	4b0c      	ldr	r3, [pc, #48]	@ (801c9a0 <dhcp_delete_msg+0x70>)
 801c96e:	f240 726f 	movw	r2, #1903	@ 0x76f
 801c972:	490f      	ldr	r1, [pc, #60]	@ (801c9b0 <dhcp_delete_msg+0x80>)
 801c974:	480c      	ldr	r0, [pc, #48]	@ (801c9a8 <dhcp_delete_msg+0x78>)
 801c976:	f003 fd93 	bl	80204a0 <iprintf>
  if (dhcp->p_out != NULL) {
 801c97a:	687b      	ldr	r3, [r7, #4]
 801c97c:	68db      	ldr	r3, [r3, #12]
 801c97e:	2b00      	cmp	r3, #0
 801c980:	d004      	beq.n	801c98c <dhcp_delete_msg+0x5c>
    pbuf_free(dhcp->p_out);
 801c982:	687b      	ldr	r3, [r7, #4]
 801c984:	68db      	ldr	r3, [r3, #12]
 801c986:	4618      	mov	r0, r3
 801c988:	f7f7 fda2 	bl	80144d0 <pbuf_free>
  }
  dhcp->p_out = NULL;
 801c98c:	687b      	ldr	r3, [r7, #4]
 801c98e:	2200      	movs	r2, #0
 801c990:	60da      	str	r2, [r3, #12]
  dhcp->msg_out = NULL;
 801c992:	687b      	ldr	r3, [r7, #4]
 801c994:	2200      	movs	r2, #0
 801c996:	611a      	str	r2, [r3, #16]
}
 801c998:	3708      	adds	r7, #8
 801c99a:	46bd      	mov	sp, r7
 801c99c:	bd80      	pop	{r7, pc}
 801c99e:	bf00      	nop
 801c9a0:	080253a8 	.word	0x080253a8
 801c9a4:	080257a8 	.word	0x080257a8
 801c9a8:	08025408 	.word	0x08025408
 801c9ac:	080257c8 	.word	0x080257c8
 801c9b0:	080257f0 	.word	0x080257f0

0801c9b4 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 801c9b4:	b580      	push	{r7, lr}
 801c9b6:	b082      	sub	sp, #8
 801c9b8:	af00      	add	r7, sp, #0
 801c9ba:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 801c9bc:	687b      	ldr	r3, [r7, #4]
 801c9be:	2b00      	cmp	r3, #0
 801c9c0:	d107      	bne.n	801c9d2 <dhcp_option_trailer+0x1e>
 801c9c2:	4b24      	ldr	r3, [pc, #144]	@ (801ca54 <dhcp_option_trailer+0xa0>)
 801c9c4:	f240 7282 	movw	r2, #1922	@ 0x782
 801c9c8:	4923      	ldr	r1, [pc, #140]	@ (801ca58 <dhcp_option_trailer+0xa4>)
 801c9ca:	4824      	ldr	r0, [pc, #144]	@ (801ca5c <dhcp_option_trailer+0xa8>)
 801c9cc:	f003 fd68 	bl	80204a0 <iprintf>
 801c9d0:	e03c      	b.n	801ca4c <dhcp_option_trailer+0x98>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 801c9d2:	687b      	ldr	r3, [r7, #4]
 801c9d4:	691b      	ldr	r3, [r3, #16]
 801c9d6:	2b00      	cmp	r3, #0
 801c9d8:	d106      	bne.n	801c9e8 <dhcp_option_trailer+0x34>
 801c9da:	4b1e      	ldr	r3, [pc, #120]	@ (801ca54 <dhcp_option_trailer+0xa0>)
 801c9dc:	f240 7283 	movw	r2, #1923	@ 0x783
 801c9e0:	491f      	ldr	r1, [pc, #124]	@ (801ca60 <dhcp_option_trailer+0xac>)
 801c9e2:	481e      	ldr	r0, [pc, #120]	@ (801ca5c <dhcp_option_trailer+0xa8>)
 801c9e4:	f003 fd5c 	bl	80204a0 <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 801c9e8:	687b      	ldr	r3, [r7, #4]
 801c9ea:	8a9b      	ldrh	r3, [r3, #20]
 801c9ec:	2b43      	cmp	r3, #67	@ 0x43
 801c9ee:	d906      	bls.n	801c9fe <dhcp_option_trailer+0x4a>
 801c9f0:	4b18      	ldr	r3, [pc, #96]	@ (801ca54 <dhcp_option_trailer+0xa0>)
 801c9f2:	f240 7284 	movw	r2, #1924	@ 0x784
 801c9f6:	491b      	ldr	r1, [pc, #108]	@ (801ca64 <dhcp_option_trailer+0xb0>)
 801c9f8:	4818      	ldr	r0, [pc, #96]	@ (801ca5c <dhcp_option_trailer+0xa8>)
 801c9fa:	f003 fd51 	bl	80204a0 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 801c9fe:	687b      	ldr	r3, [r7, #4]
 801ca00:	691a      	ldr	r2, [r3, #16]
 801ca02:	687b      	ldr	r3, [r7, #4]
 801ca04:	8a9b      	ldrh	r3, [r3, #20]
 801ca06:	1c59      	adds	r1, r3, #1
 801ca08:	b288      	uxth	r0, r1
 801ca0a:	6879      	ldr	r1, [r7, #4]
 801ca0c:	8288      	strh	r0, [r1, #20]
 801ca0e:	4413      	add	r3, r2
 801ca10:	22ff      	movs	r2, #255	@ 0xff
 801ca12:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 801ca16:	e00b      	b.n	801ca30 <dhcp_option_trailer+0x7c>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 801ca18:	687b      	ldr	r3, [r7, #4]
 801ca1a:	691a      	ldr	r2, [r3, #16]
 801ca1c:	687b      	ldr	r3, [r7, #4]
 801ca1e:	8a9b      	ldrh	r3, [r3, #20]
 801ca20:	1c59      	adds	r1, r3, #1
 801ca22:	b288      	uxth	r0, r1
 801ca24:	6879      	ldr	r1, [r7, #4]
 801ca26:	8288      	strh	r0, [r1, #20]
 801ca28:	4413      	add	r3, r2
 801ca2a:	2200      	movs	r2, #0
 801ca2c:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 801ca30:	687b      	ldr	r3, [r7, #4]
 801ca32:	8a9b      	ldrh	r3, [r3, #20]
 801ca34:	2b43      	cmp	r3, #67	@ 0x43
 801ca36:	d905      	bls.n	801ca44 <dhcp_option_trailer+0x90>
 801ca38:	687b      	ldr	r3, [r7, #4]
 801ca3a:	8a9b      	ldrh	r3, [r3, #20]
 801ca3c:	f003 0303 	and.w	r3, r3, #3
 801ca40:	2b00      	cmp	r3, #0
 801ca42:	d003      	beq.n	801ca4c <dhcp_option_trailer+0x98>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
 801ca44:	687b      	ldr	r3, [r7, #4]
 801ca46:	8a9b      	ldrh	r3, [r3, #20]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 801ca48:	2b43      	cmp	r3, #67	@ 0x43
 801ca4a:	d9e5      	bls.n	801ca18 <dhcp_option_trailer+0x64>
  }
}
 801ca4c:	3708      	adds	r7, #8
 801ca4e:	46bd      	mov	sp, r7
 801ca50:	bd80      	pop	{r7, pc}
 801ca52:	bf00      	nop
 801ca54:	080253a8 	.word	0x080253a8
 801ca58:	08025818 	.word	0x08025818
 801ca5c:	08025408 	.word	0x08025408
 801ca60:	0802583c 	.word	0x0802583c
 801ca64:	08025868 	.word	0x08025868

0801ca68 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801ca68:	b480      	push	{r7}
 801ca6a:	b085      	sub	sp, #20
 801ca6c:	af00      	add	r7, sp, #0
 801ca6e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801ca70:	687b      	ldr	r3, [r7, #4]
 801ca72:	2b00      	cmp	r3, #0
 801ca74:	d017      	beq.n	801caa6 <dhcp_supplied_address+0x3e>
 801ca76:	687b      	ldr	r3, [r7, #4]
 801ca78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ca7a:	2b00      	cmp	r3, #0
 801ca7c:	d013      	beq.n	801caa6 <dhcp_supplied_address+0x3e>
    struct dhcp* dhcp = netif_dhcp_data(netif);
 801ca7e:	687b      	ldr	r3, [r7, #4]
 801ca80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ca82:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801ca84:	68fb      	ldr	r3, [r7, #12]
 801ca86:	7a5b      	ldrb	r3, [r3, #9]
 801ca88:	2b0a      	cmp	r3, #10
 801ca8a:	d007      	beq.n	801ca9c <dhcp_supplied_address+0x34>
 801ca8c:	68fb      	ldr	r3, [r7, #12]
 801ca8e:	7a5b      	ldrb	r3, [r3, #9]
 801ca90:	2b05      	cmp	r3, #5
 801ca92:	d003      	beq.n	801ca9c <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801ca94:	68fb      	ldr	r3, [r7, #12]
 801ca96:	7a5b      	ldrb	r3, [r3, #9]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801ca98:	2b04      	cmp	r3, #4
 801ca9a:	d101      	bne.n	801caa0 <dhcp_supplied_address+0x38>
 801ca9c:	2301      	movs	r3, #1
 801ca9e:	e000      	b.n	801caa2 <dhcp_supplied_address+0x3a>
 801caa0:	2300      	movs	r3, #0
 801caa2:	b2db      	uxtb	r3, r3
 801caa4:	e000      	b.n	801caa8 <dhcp_supplied_address+0x40>
  }
  return 0;
 801caa6:	2300      	movs	r3, #0
}
 801caa8:	4618      	mov	r0, r3
 801caaa:	3714      	adds	r7, #20
 801caac:	46bd      	mov	sp, r7
 801caae:	bc80      	pop	{r7}
 801cab0:	4770      	bx	lr
	...

0801cab4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801cab4:	b580      	push	{r7, lr}
 801cab6:	b082      	sub	sp, #8
 801cab8:	af00      	add	r7, sp, #0
 801caba:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801cabc:	4915      	ldr	r1, [pc, #84]	@ (801cb14 <etharp_free_entry+0x60>)
 801cabe:	687a      	ldr	r2, [r7, #4]
 801cac0:	4613      	mov	r3, r2
 801cac2:	005b      	lsls	r3, r3, #1
 801cac4:	4413      	add	r3, r2
 801cac6:	00db      	lsls	r3, r3, #3
 801cac8:	440b      	add	r3, r1
 801caca:	681b      	ldr	r3, [r3, #0]
 801cacc:	2b00      	cmp	r3, #0
 801cace:	d013      	beq.n	801caf8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801cad0:	4910      	ldr	r1, [pc, #64]	@ (801cb14 <etharp_free_entry+0x60>)
 801cad2:	687a      	ldr	r2, [r7, #4]
 801cad4:	4613      	mov	r3, r2
 801cad6:	005b      	lsls	r3, r3, #1
 801cad8:	4413      	add	r3, r2
 801cada:	00db      	lsls	r3, r3, #3
 801cadc:	440b      	add	r3, r1
 801cade:	681b      	ldr	r3, [r3, #0]
 801cae0:	4618      	mov	r0, r3
 801cae2:	f7f7 fcf5 	bl	80144d0 <pbuf_free>
    arp_table[i].q = NULL;
 801cae6:	490b      	ldr	r1, [pc, #44]	@ (801cb14 <etharp_free_entry+0x60>)
 801cae8:	687a      	ldr	r2, [r7, #4]
 801caea:	4613      	mov	r3, r2
 801caec:	005b      	lsls	r3, r3, #1
 801caee:	4413      	add	r3, r2
 801caf0:	00db      	lsls	r3, r3, #3
 801caf2:	440b      	add	r3, r1
 801caf4:	2200      	movs	r2, #0
 801caf6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801caf8:	4906      	ldr	r1, [pc, #24]	@ (801cb14 <etharp_free_entry+0x60>)
 801cafa:	687a      	ldr	r2, [r7, #4]
 801cafc:	4613      	mov	r3, r2
 801cafe:	005b      	lsls	r3, r3, #1
 801cb00:	4413      	add	r3, r2
 801cb02:	00db      	lsls	r3, r3, #3
 801cb04:	440b      	add	r3, r1
 801cb06:	3314      	adds	r3, #20
 801cb08:	2200      	movs	r2, #0
 801cb0a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801cb0c:	bf00      	nop
 801cb0e:	3708      	adds	r7, #8
 801cb10:	46bd      	mov	sp, r7
 801cb12:	bd80      	pop	{r7, pc}
 801cb14:	2000ddb0 	.word	0x2000ddb0

0801cb18 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801cb18:	b580      	push	{r7, lr}
 801cb1a:	b082      	sub	sp, #8
 801cb1c:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801cb1e:	2300      	movs	r3, #0
 801cb20:	71fb      	strb	r3, [r7, #7]
 801cb22:	e096      	b.n	801cc52 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801cb24:	79fa      	ldrb	r2, [r7, #7]
 801cb26:	494f      	ldr	r1, [pc, #316]	@ (801cc64 <etharp_tmr+0x14c>)
 801cb28:	4613      	mov	r3, r2
 801cb2a:	005b      	lsls	r3, r3, #1
 801cb2c:	4413      	add	r3, r2
 801cb2e:	00db      	lsls	r3, r3, #3
 801cb30:	440b      	add	r3, r1
 801cb32:	3314      	adds	r3, #20
 801cb34:	781b      	ldrb	r3, [r3, #0]
 801cb36:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 801cb38:	79bb      	ldrb	r3, [r7, #6]
 801cb3a:	2b00      	cmp	r3, #0
 801cb3c:	f000 8086 	beq.w	801cc4c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 801cb40:	79fa      	ldrb	r2, [r7, #7]
 801cb42:	4948      	ldr	r1, [pc, #288]	@ (801cc64 <etharp_tmr+0x14c>)
 801cb44:	4613      	mov	r3, r2
 801cb46:	005b      	lsls	r3, r3, #1
 801cb48:	4413      	add	r3, r2
 801cb4a:	00db      	lsls	r3, r3, #3
 801cb4c:	440b      	add	r3, r1
 801cb4e:	3312      	adds	r3, #18
 801cb50:	881b      	ldrh	r3, [r3, #0]
 801cb52:	3301      	adds	r3, #1
 801cb54:	b298      	uxth	r0, r3
 801cb56:	4943      	ldr	r1, [pc, #268]	@ (801cc64 <etharp_tmr+0x14c>)
 801cb58:	4613      	mov	r3, r2
 801cb5a:	005b      	lsls	r3, r3, #1
 801cb5c:	4413      	add	r3, r2
 801cb5e:	00db      	lsls	r3, r3, #3
 801cb60:	440b      	add	r3, r1
 801cb62:	3312      	adds	r3, #18
 801cb64:	4602      	mov	r2, r0
 801cb66:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801cb68:	79fa      	ldrb	r2, [r7, #7]
 801cb6a:	493e      	ldr	r1, [pc, #248]	@ (801cc64 <etharp_tmr+0x14c>)
 801cb6c:	4613      	mov	r3, r2
 801cb6e:	005b      	lsls	r3, r3, #1
 801cb70:	4413      	add	r3, r2
 801cb72:	00db      	lsls	r3, r3, #3
 801cb74:	440b      	add	r3, r1
 801cb76:	3312      	adds	r3, #18
 801cb78:	881b      	ldrh	r3, [r3, #0]
 801cb7a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801cb7e:	d215      	bcs.n	801cbac <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801cb80:	79fa      	ldrb	r2, [r7, #7]
 801cb82:	4938      	ldr	r1, [pc, #224]	@ (801cc64 <etharp_tmr+0x14c>)
 801cb84:	4613      	mov	r3, r2
 801cb86:	005b      	lsls	r3, r3, #1
 801cb88:	4413      	add	r3, r2
 801cb8a:	00db      	lsls	r3, r3, #3
 801cb8c:	440b      	add	r3, r1
 801cb8e:	3314      	adds	r3, #20
 801cb90:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801cb92:	2b01      	cmp	r3, #1
 801cb94:	d10f      	bne.n	801cbb6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801cb96:	79fa      	ldrb	r2, [r7, #7]
 801cb98:	4932      	ldr	r1, [pc, #200]	@ (801cc64 <etharp_tmr+0x14c>)
 801cb9a:	4613      	mov	r3, r2
 801cb9c:	005b      	lsls	r3, r3, #1
 801cb9e:	4413      	add	r3, r2
 801cba0:	00db      	lsls	r3, r3, #3
 801cba2:	440b      	add	r3, r1
 801cba4:	3312      	adds	r3, #18
 801cba6:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801cba8:	2b04      	cmp	r3, #4
 801cbaa:	d904      	bls.n	801cbb6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801cbac:	79fb      	ldrb	r3, [r7, #7]
 801cbae:	4618      	mov	r0, r3
 801cbb0:	f7ff ff80 	bl	801cab4 <etharp_free_entry>
 801cbb4:	e04a      	b.n	801cc4c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801cbb6:	79fa      	ldrb	r2, [r7, #7]
 801cbb8:	492a      	ldr	r1, [pc, #168]	@ (801cc64 <etharp_tmr+0x14c>)
 801cbba:	4613      	mov	r3, r2
 801cbbc:	005b      	lsls	r3, r3, #1
 801cbbe:	4413      	add	r3, r2
 801cbc0:	00db      	lsls	r3, r3, #3
 801cbc2:	440b      	add	r3, r1
 801cbc4:	3314      	adds	r3, #20
 801cbc6:	781b      	ldrb	r3, [r3, #0]
 801cbc8:	2b03      	cmp	r3, #3
 801cbca:	d10a      	bne.n	801cbe2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801cbcc:	79fa      	ldrb	r2, [r7, #7]
 801cbce:	4925      	ldr	r1, [pc, #148]	@ (801cc64 <etharp_tmr+0x14c>)
 801cbd0:	4613      	mov	r3, r2
 801cbd2:	005b      	lsls	r3, r3, #1
 801cbd4:	4413      	add	r3, r2
 801cbd6:	00db      	lsls	r3, r3, #3
 801cbd8:	440b      	add	r3, r1
 801cbda:	3314      	adds	r3, #20
 801cbdc:	2204      	movs	r2, #4
 801cbde:	701a      	strb	r2, [r3, #0]
 801cbe0:	e034      	b.n	801cc4c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801cbe2:	79fa      	ldrb	r2, [r7, #7]
 801cbe4:	491f      	ldr	r1, [pc, #124]	@ (801cc64 <etharp_tmr+0x14c>)
 801cbe6:	4613      	mov	r3, r2
 801cbe8:	005b      	lsls	r3, r3, #1
 801cbea:	4413      	add	r3, r2
 801cbec:	00db      	lsls	r3, r3, #3
 801cbee:	440b      	add	r3, r1
 801cbf0:	3314      	adds	r3, #20
 801cbf2:	781b      	ldrb	r3, [r3, #0]
 801cbf4:	2b04      	cmp	r3, #4
 801cbf6:	d10a      	bne.n	801cc0e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801cbf8:	79fa      	ldrb	r2, [r7, #7]
 801cbfa:	491a      	ldr	r1, [pc, #104]	@ (801cc64 <etharp_tmr+0x14c>)
 801cbfc:	4613      	mov	r3, r2
 801cbfe:	005b      	lsls	r3, r3, #1
 801cc00:	4413      	add	r3, r2
 801cc02:	00db      	lsls	r3, r3, #3
 801cc04:	440b      	add	r3, r1
 801cc06:	3314      	adds	r3, #20
 801cc08:	2202      	movs	r2, #2
 801cc0a:	701a      	strb	r2, [r3, #0]
 801cc0c:	e01e      	b.n	801cc4c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801cc0e:	79fa      	ldrb	r2, [r7, #7]
 801cc10:	4914      	ldr	r1, [pc, #80]	@ (801cc64 <etharp_tmr+0x14c>)
 801cc12:	4613      	mov	r3, r2
 801cc14:	005b      	lsls	r3, r3, #1
 801cc16:	4413      	add	r3, r2
 801cc18:	00db      	lsls	r3, r3, #3
 801cc1a:	440b      	add	r3, r1
 801cc1c:	3314      	adds	r3, #20
 801cc1e:	781b      	ldrb	r3, [r3, #0]
 801cc20:	2b01      	cmp	r3, #1
 801cc22:	d113      	bne.n	801cc4c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801cc24:	79fa      	ldrb	r2, [r7, #7]
 801cc26:	490f      	ldr	r1, [pc, #60]	@ (801cc64 <etharp_tmr+0x14c>)
 801cc28:	4613      	mov	r3, r2
 801cc2a:	005b      	lsls	r3, r3, #1
 801cc2c:	4413      	add	r3, r2
 801cc2e:	00db      	lsls	r3, r3, #3
 801cc30:	440b      	add	r3, r1
 801cc32:	3308      	adds	r3, #8
 801cc34:	6818      	ldr	r0, [r3, #0]
 801cc36:	79fa      	ldrb	r2, [r7, #7]
 801cc38:	4613      	mov	r3, r2
 801cc3a:	005b      	lsls	r3, r3, #1
 801cc3c:	4413      	add	r3, r2
 801cc3e:	00db      	lsls	r3, r3, #3
 801cc40:	4a08      	ldr	r2, [pc, #32]	@ (801cc64 <etharp_tmr+0x14c>)
 801cc42:	4413      	add	r3, r2
 801cc44:	3304      	adds	r3, #4
 801cc46:	4619      	mov	r1, r3
 801cc48:	f000 fee8 	bl	801da1c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801cc4c:	79fb      	ldrb	r3, [r7, #7]
 801cc4e:	3301      	adds	r3, #1
 801cc50:	71fb      	strb	r3, [r7, #7]
 801cc52:	79fb      	ldrb	r3, [r7, #7]
 801cc54:	2b09      	cmp	r3, #9
 801cc56:	f67f af65 	bls.w	801cb24 <etharp_tmr+0xc>
      }
    }
  }
}
 801cc5a:	bf00      	nop
 801cc5c:	bf00      	nop
 801cc5e:	3708      	adds	r7, #8
 801cc60:	46bd      	mov	sp, r7
 801cc62:	bd80      	pop	{r7, pc}
 801cc64:	2000ddb0 	.word	0x2000ddb0

0801cc68 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 801cc68:	b580      	push	{r7, lr}
 801cc6a:	b088      	sub	sp, #32
 801cc6c:	af00      	add	r7, sp, #0
 801cc6e:	60f8      	str	r0, [r7, #12]
 801cc70:	460b      	mov	r3, r1
 801cc72:	607a      	str	r2, [r7, #4]
 801cc74:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801cc76:	230a      	movs	r3, #10
 801cc78:	77fb      	strb	r3, [r7, #31]
 801cc7a:	230a      	movs	r3, #10
 801cc7c:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 801cc7e:	230a      	movs	r3, #10
 801cc80:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 801cc82:	2300      	movs	r3, #0
 801cc84:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 801cc86:	230a      	movs	r3, #10
 801cc88:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801cc8a:	2300      	movs	r3, #0
 801cc8c:	833b      	strh	r3, [r7, #24]
 801cc8e:	2300      	movs	r3, #0
 801cc90:	82fb      	strh	r3, [r7, #22]
 801cc92:	2300      	movs	r3, #0
 801cc94:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801cc96:	2300      	movs	r3, #0
 801cc98:	773b      	strb	r3, [r7, #28]
 801cc9a:	e093      	b.n	801cdc4 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 801cc9c:	7f3a      	ldrb	r2, [r7, #28]
 801cc9e:	4990      	ldr	r1, [pc, #576]	@ (801cee0 <etharp_find_entry+0x278>)
 801cca0:	4613      	mov	r3, r2
 801cca2:	005b      	lsls	r3, r3, #1
 801cca4:	4413      	add	r3, r2
 801cca6:	00db      	lsls	r3, r3, #3
 801cca8:	440b      	add	r3, r1
 801ccaa:	3314      	adds	r3, #20
 801ccac:	781b      	ldrb	r3, [r3, #0]
 801ccae:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801ccb0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801ccb4:	2b0a      	cmp	r3, #10
 801ccb6:	d105      	bne.n	801ccc4 <etharp_find_entry+0x5c>
 801ccb8:	7cfb      	ldrb	r3, [r7, #19]
 801ccba:	2b00      	cmp	r3, #0
 801ccbc:	d102      	bne.n	801ccc4 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 801ccbe:	7f3b      	ldrb	r3, [r7, #28]
 801ccc0:	777b      	strb	r3, [r7, #29]
 801ccc2:	e07c      	b.n	801cdbe <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 801ccc4:	7cfb      	ldrb	r3, [r7, #19]
 801ccc6:	2b00      	cmp	r3, #0
 801ccc8:	d079      	beq.n	801cdbe <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801ccca:	7cfb      	ldrb	r3, [r7, #19]
 801cccc:	2b01      	cmp	r3, #1
 801ccce:	d009      	beq.n	801cce4 <etharp_find_entry+0x7c>
 801ccd0:	7cfb      	ldrb	r3, [r7, #19]
 801ccd2:	2b01      	cmp	r3, #1
 801ccd4:	d806      	bhi.n	801cce4 <etharp_find_entry+0x7c>
 801ccd6:	4b83      	ldr	r3, [pc, #524]	@ (801cee4 <etharp_find_entry+0x27c>)
 801ccd8:	f240 1225 	movw	r2, #293	@ 0x125
 801ccdc:	4982      	ldr	r1, [pc, #520]	@ (801cee8 <etharp_find_entry+0x280>)
 801ccde:	4883      	ldr	r0, [pc, #524]	@ (801ceec <etharp_find_entry+0x284>)
 801cce0:	f003 fbde 	bl	80204a0 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801cce4:	68fb      	ldr	r3, [r7, #12]
 801cce6:	2b00      	cmp	r3, #0
 801cce8:	d00f      	beq.n	801cd0a <etharp_find_entry+0xa2>
 801ccea:	68fb      	ldr	r3, [r7, #12]
 801ccec:	6819      	ldr	r1, [r3, #0]
 801ccee:	7f3a      	ldrb	r2, [r7, #28]
 801ccf0:	487b      	ldr	r0, [pc, #492]	@ (801cee0 <etharp_find_entry+0x278>)
 801ccf2:	4613      	mov	r3, r2
 801ccf4:	005b      	lsls	r3, r3, #1
 801ccf6:	4413      	add	r3, r2
 801ccf8:	00db      	lsls	r3, r3, #3
 801ccfa:	4403      	add	r3, r0
 801ccfc:	3304      	adds	r3, #4
 801ccfe:	681b      	ldr	r3, [r3, #0]
 801cd00:	4299      	cmp	r1, r3
 801cd02:	d102      	bne.n	801cd0a <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 801cd04:	f997 301c 	ldrsb.w	r3, [r7, #28]
 801cd08:	e0e5      	b.n	801ced6 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801cd0a:	7cfb      	ldrb	r3, [r7, #19]
 801cd0c:	2b01      	cmp	r3, #1
 801cd0e:	d13b      	bne.n	801cd88 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801cd10:	7f3a      	ldrb	r2, [r7, #28]
 801cd12:	4973      	ldr	r1, [pc, #460]	@ (801cee0 <etharp_find_entry+0x278>)
 801cd14:	4613      	mov	r3, r2
 801cd16:	005b      	lsls	r3, r3, #1
 801cd18:	4413      	add	r3, r2
 801cd1a:	00db      	lsls	r3, r3, #3
 801cd1c:	440b      	add	r3, r1
 801cd1e:	681b      	ldr	r3, [r3, #0]
 801cd20:	2b00      	cmp	r3, #0
 801cd22:	d018      	beq.n	801cd56 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 801cd24:	7f3a      	ldrb	r2, [r7, #28]
 801cd26:	496e      	ldr	r1, [pc, #440]	@ (801cee0 <etharp_find_entry+0x278>)
 801cd28:	4613      	mov	r3, r2
 801cd2a:	005b      	lsls	r3, r3, #1
 801cd2c:	4413      	add	r3, r2
 801cd2e:	00db      	lsls	r3, r3, #3
 801cd30:	440b      	add	r3, r1
 801cd32:	3312      	adds	r3, #18
 801cd34:	881b      	ldrh	r3, [r3, #0]
 801cd36:	8b3a      	ldrh	r2, [r7, #24]
 801cd38:	429a      	cmp	r2, r3
 801cd3a:	d840      	bhi.n	801cdbe <etharp_find_entry+0x156>
            old_queue = i;
 801cd3c:	7f3b      	ldrb	r3, [r7, #28]
 801cd3e:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 801cd40:	7f3a      	ldrb	r2, [r7, #28]
 801cd42:	4967      	ldr	r1, [pc, #412]	@ (801cee0 <etharp_find_entry+0x278>)
 801cd44:	4613      	mov	r3, r2
 801cd46:	005b      	lsls	r3, r3, #1
 801cd48:	4413      	add	r3, r2
 801cd4a:	00db      	lsls	r3, r3, #3
 801cd4c:	440b      	add	r3, r1
 801cd4e:	3312      	adds	r3, #18
 801cd50:	881b      	ldrh	r3, [r3, #0]
 801cd52:	833b      	strh	r3, [r7, #24]
 801cd54:	e033      	b.n	801cdbe <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801cd56:	7f3a      	ldrb	r2, [r7, #28]
 801cd58:	4961      	ldr	r1, [pc, #388]	@ (801cee0 <etharp_find_entry+0x278>)
 801cd5a:	4613      	mov	r3, r2
 801cd5c:	005b      	lsls	r3, r3, #1
 801cd5e:	4413      	add	r3, r2
 801cd60:	00db      	lsls	r3, r3, #3
 801cd62:	440b      	add	r3, r1
 801cd64:	3312      	adds	r3, #18
 801cd66:	881b      	ldrh	r3, [r3, #0]
 801cd68:	8afa      	ldrh	r2, [r7, #22]
 801cd6a:	429a      	cmp	r2, r3
 801cd6c:	d827      	bhi.n	801cdbe <etharp_find_entry+0x156>
            old_pending = i;
 801cd6e:	7f3b      	ldrb	r3, [r7, #28]
 801cd70:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 801cd72:	7f3a      	ldrb	r2, [r7, #28]
 801cd74:	495a      	ldr	r1, [pc, #360]	@ (801cee0 <etharp_find_entry+0x278>)
 801cd76:	4613      	mov	r3, r2
 801cd78:	005b      	lsls	r3, r3, #1
 801cd7a:	4413      	add	r3, r2
 801cd7c:	00db      	lsls	r3, r3, #3
 801cd7e:	440b      	add	r3, r1
 801cd80:	3312      	adds	r3, #18
 801cd82:	881b      	ldrh	r3, [r3, #0]
 801cd84:	82fb      	strh	r3, [r7, #22]
 801cd86:	e01a      	b.n	801cdbe <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801cd88:	7cfb      	ldrb	r3, [r7, #19]
 801cd8a:	2b01      	cmp	r3, #1
 801cd8c:	d917      	bls.n	801cdbe <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801cd8e:	7f3a      	ldrb	r2, [r7, #28]
 801cd90:	4953      	ldr	r1, [pc, #332]	@ (801cee0 <etharp_find_entry+0x278>)
 801cd92:	4613      	mov	r3, r2
 801cd94:	005b      	lsls	r3, r3, #1
 801cd96:	4413      	add	r3, r2
 801cd98:	00db      	lsls	r3, r3, #3
 801cd9a:	440b      	add	r3, r1
 801cd9c:	3312      	adds	r3, #18
 801cd9e:	881b      	ldrh	r3, [r3, #0]
 801cda0:	8aba      	ldrh	r2, [r7, #20]
 801cda2:	429a      	cmp	r2, r3
 801cda4:	d80b      	bhi.n	801cdbe <etharp_find_entry+0x156>
            old_stable = i;
 801cda6:	7f3b      	ldrb	r3, [r7, #28]
 801cda8:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 801cdaa:	7f3a      	ldrb	r2, [r7, #28]
 801cdac:	494c      	ldr	r1, [pc, #304]	@ (801cee0 <etharp_find_entry+0x278>)
 801cdae:	4613      	mov	r3, r2
 801cdb0:	005b      	lsls	r3, r3, #1
 801cdb2:	4413      	add	r3, r2
 801cdb4:	00db      	lsls	r3, r3, #3
 801cdb6:	440b      	add	r3, r1
 801cdb8:	3312      	adds	r3, #18
 801cdba:	881b      	ldrh	r3, [r3, #0]
 801cdbc:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801cdbe:	7f3b      	ldrb	r3, [r7, #28]
 801cdc0:	3301      	adds	r3, #1
 801cdc2:	773b      	strb	r3, [r7, #28]
 801cdc4:	7f3b      	ldrb	r3, [r7, #28]
 801cdc6:	2b09      	cmp	r3, #9
 801cdc8:	f67f af68 	bls.w	801cc9c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801cdcc:	7afb      	ldrb	r3, [r7, #11]
 801cdce:	f003 0302 	and.w	r3, r3, #2
 801cdd2:	2b00      	cmp	r3, #0
 801cdd4:	d108      	bne.n	801cde8 <etharp_find_entry+0x180>
 801cdd6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801cdda:	2b0a      	cmp	r3, #10
 801cddc:	d107      	bne.n	801cdee <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801cdde:	7afb      	ldrb	r3, [r7, #11]
 801cde0:	f003 0301 	and.w	r3, r3, #1
 801cde4:	2b00      	cmp	r3, #0
 801cde6:	d102      	bne.n	801cdee <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 801cde8:	f04f 33ff 	mov.w	r3, #4294967295
 801cdec:	e073      	b.n	801ced6 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801cdee:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801cdf2:	2b09      	cmp	r3, #9
 801cdf4:	dc02      	bgt.n	801cdfc <etharp_find_entry+0x194>
    i = empty;
 801cdf6:	7f7b      	ldrb	r3, [r7, #29]
 801cdf8:	773b      	strb	r3, [r7, #28]
 801cdfa:	e036      	b.n	801ce6a <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801cdfc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801ce00:	2b09      	cmp	r3, #9
 801ce02:	dc13      	bgt.n	801ce2c <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 801ce04:	7fbb      	ldrb	r3, [r7, #30]
 801ce06:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801ce08:	7f3a      	ldrb	r2, [r7, #28]
 801ce0a:	4935      	ldr	r1, [pc, #212]	@ (801cee0 <etharp_find_entry+0x278>)
 801ce0c:	4613      	mov	r3, r2
 801ce0e:	005b      	lsls	r3, r3, #1
 801ce10:	4413      	add	r3, r2
 801ce12:	00db      	lsls	r3, r3, #3
 801ce14:	440b      	add	r3, r1
 801ce16:	681b      	ldr	r3, [r3, #0]
 801ce18:	2b00      	cmp	r3, #0
 801ce1a:	d018      	beq.n	801ce4e <etharp_find_entry+0x1e6>
 801ce1c:	4b31      	ldr	r3, [pc, #196]	@ (801cee4 <etharp_find_entry+0x27c>)
 801ce1e:	f240 126f 	movw	r2, #367	@ 0x16f
 801ce22:	4933      	ldr	r1, [pc, #204]	@ (801cef0 <etharp_find_entry+0x288>)
 801ce24:	4831      	ldr	r0, [pc, #196]	@ (801ceec <etharp_find_entry+0x284>)
 801ce26:	f003 fb3b 	bl	80204a0 <iprintf>
 801ce2a:	e010      	b.n	801ce4e <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801ce2c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801ce30:	2b09      	cmp	r3, #9
 801ce32:	dc02      	bgt.n	801ce3a <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 801ce34:	7ffb      	ldrb	r3, [r7, #31]
 801ce36:	773b      	strb	r3, [r7, #28]
 801ce38:	e009      	b.n	801ce4e <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801ce3a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801ce3e:	2b09      	cmp	r3, #9
 801ce40:	dc02      	bgt.n	801ce48 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801ce42:	7efb      	ldrb	r3, [r7, #27]
 801ce44:	773b      	strb	r3, [r7, #28]
 801ce46:	e002      	b.n	801ce4e <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 801ce48:	f04f 33ff 	mov.w	r3, #4294967295
 801ce4c:	e043      	b.n	801ced6 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801ce4e:	7f3b      	ldrb	r3, [r7, #28]
 801ce50:	2b09      	cmp	r3, #9
 801ce52:	d906      	bls.n	801ce62 <etharp_find_entry+0x1fa>
 801ce54:	4b23      	ldr	r3, [pc, #140]	@ (801cee4 <etharp_find_entry+0x27c>)
 801ce56:	f240 1281 	movw	r2, #385	@ 0x181
 801ce5a:	4926      	ldr	r1, [pc, #152]	@ (801cef4 <etharp_find_entry+0x28c>)
 801ce5c:	4823      	ldr	r0, [pc, #140]	@ (801ceec <etharp_find_entry+0x284>)
 801ce5e:	f003 fb1f 	bl	80204a0 <iprintf>
    etharp_free_entry(i);
 801ce62:	7f3b      	ldrb	r3, [r7, #28]
 801ce64:	4618      	mov	r0, r3
 801ce66:	f7ff fe25 	bl	801cab4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801ce6a:	7f3b      	ldrb	r3, [r7, #28]
 801ce6c:	2b09      	cmp	r3, #9
 801ce6e:	d906      	bls.n	801ce7e <etharp_find_entry+0x216>
 801ce70:	4b1c      	ldr	r3, [pc, #112]	@ (801cee4 <etharp_find_entry+0x27c>)
 801ce72:	f240 1285 	movw	r2, #389	@ 0x185
 801ce76:	491f      	ldr	r1, [pc, #124]	@ (801cef4 <etharp_find_entry+0x28c>)
 801ce78:	481c      	ldr	r0, [pc, #112]	@ (801ceec <etharp_find_entry+0x284>)
 801ce7a:	f003 fb11 	bl	80204a0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801ce7e:	7f3a      	ldrb	r2, [r7, #28]
 801ce80:	4917      	ldr	r1, [pc, #92]	@ (801cee0 <etharp_find_entry+0x278>)
 801ce82:	4613      	mov	r3, r2
 801ce84:	005b      	lsls	r3, r3, #1
 801ce86:	4413      	add	r3, r2
 801ce88:	00db      	lsls	r3, r3, #3
 801ce8a:	440b      	add	r3, r1
 801ce8c:	3314      	adds	r3, #20
 801ce8e:	781b      	ldrb	r3, [r3, #0]
 801ce90:	2b00      	cmp	r3, #0
 801ce92:	d006      	beq.n	801cea2 <etharp_find_entry+0x23a>
 801ce94:	4b13      	ldr	r3, [pc, #76]	@ (801cee4 <etharp_find_entry+0x27c>)
 801ce96:	f44f 72c3 	mov.w	r2, #390	@ 0x186
 801ce9a:	4917      	ldr	r1, [pc, #92]	@ (801cef8 <etharp_find_entry+0x290>)
 801ce9c:	4813      	ldr	r0, [pc, #76]	@ (801ceec <etharp_find_entry+0x284>)
 801ce9e:	f003 faff 	bl	80204a0 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801cea2:	68fb      	ldr	r3, [r7, #12]
 801cea4:	2b00      	cmp	r3, #0
 801cea6:	d00a      	beq.n	801cebe <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801cea8:	7f3a      	ldrb	r2, [r7, #28]
 801ceaa:	68fb      	ldr	r3, [r7, #12]
 801ceac:	6819      	ldr	r1, [r3, #0]
 801ceae:	480c      	ldr	r0, [pc, #48]	@ (801cee0 <etharp_find_entry+0x278>)
 801ceb0:	4613      	mov	r3, r2
 801ceb2:	005b      	lsls	r3, r3, #1
 801ceb4:	4413      	add	r3, r2
 801ceb6:	00db      	lsls	r3, r3, #3
 801ceb8:	4403      	add	r3, r0
 801ceba:	3304      	adds	r3, #4
 801cebc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801cebe:	7f3a      	ldrb	r2, [r7, #28]
 801cec0:	4907      	ldr	r1, [pc, #28]	@ (801cee0 <etharp_find_entry+0x278>)
 801cec2:	4613      	mov	r3, r2
 801cec4:	005b      	lsls	r3, r3, #1
 801cec6:	4413      	add	r3, r2
 801cec8:	00db      	lsls	r3, r3, #3
 801ceca:	440b      	add	r3, r1
 801cecc:	3312      	adds	r3, #18
 801cece:	2200      	movs	r2, #0
 801ced0:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 801ced2:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 801ced6:	4618      	mov	r0, r3
 801ced8:	3720      	adds	r7, #32
 801ceda:	46bd      	mov	sp, r7
 801cedc:	bd80      	pop	{r7, pc}
 801cede:	bf00      	nop
 801cee0:	2000ddb0 	.word	0x2000ddb0
 801cee4:	080258a8 	.word	0x080258a8
 801cee8:	080258e0 	.word	0x080258e0
 801ceec:	08025920 	.word	0x08025920
 801cef0:	08025948 	.word	0x08025948
 801cef4:	08025960 	.word	0x08025960
 801cef8:	08025974 	.word	0x08025974

0801cefc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801cefc:	b580      	push	{r7, lr}
 801cefe:	b088      	sub	sp, #32
 801cf00:	af02      	add	r7, sp, #8
 801cf02:	60f8      	str	r0, [r7, #12]
 801cf04:	60b9      	str	r1, [r7, #8]
 801cf06:	607a      	str	r2, [r7, #4]
 801cf08:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801cf0a:	68fb      	ldr	r3, [r7, #12]
 801cf0c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801cf10:	2b06      	cmp	r3, #6
 801cf12:	d006      	beq.n	801cf22 <etharp_update_arp_entry+0x26>
 801cf14:	4b48      	ldr	r3, [pc, #288]	@ (801d038 <etharp_update_arp_entry+0x13c>)
 801cf16:	f240 12ab 	movw	r2, #427	@ 0x1ab
 801cf1a:	4948      	ldr	r1, [pc, #288]	@ (801d03c <etharp_update_arp_entry+0x140>)
 801cf1c:	4848      	ldr	r0, [pc, #288]	@ (801d040 <etharp_update_arp_entry+0x144>)
 801cf1e:	f003 fabf 	bl	80204a0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801cf22:	68bb      	ldr	r3, [r7, #8]
 801cf24:	2b00      	cmp	r3, #0
 801cf26:	d012      	beq.n	801cf4e <etharp_update_arp_entry+0x52>
 801cf28:	68bb      	ldr	r3, [r7, #8]
 801cf2a:	681b      	ldr	r3, [r3, #0]
 801cf2c:	2b00      	cmp	r3, #0
 801cf2e:	d00e      	beq.n	801cf4e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801cf30:	68bb      	ldr	r3, [r7, #8]
 801cf32:	681b      	ldr	r3, [r3, #0]
 801cf34:	68f9      	ldr	r1, [r7, #12]
 801cf36:	4618      	mov	r0, r3
 801cf38:	f001 fb70 	bl	801e61c <ip4_addr_isbroadcast_u32>
 801cf3c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801cf3e:	2b00      	cmp	r3, #0
 801cf40:	d105      	bne.n	801cf4e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801cf42:	68bb      	ldr	r3, [r7, #8]
 801cf44:	681b      	ldr	r3, [r3, #0]
 801cf46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801cf4a:	2be0      	cmp	r3, #224	@ 0xe0
 801cf4c:	d102      	bne.n	801cf54 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801cf4e:	f06f 030f 	mvn.w	r3, #15
 801cf52:	e06c      	b.n	801d02e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801cf54:	78fb      	ldrb	r3, [r7, #3]
 801cf56:	68fa      	ldr	r2, [r7, #12]
 801cf58:	4619      	mov	r1, r3
 801cf5a:	68b8      	ldr	r0, [r7, #8]
 801cf5c:	f7ff fe84 	bl	801cc68 <etharp_find_entry>
 801cf60:	4603      	mov	r3, r0
 801cf62:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 801cf64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801cf68:	2b00      	cmp	r3, #0
 801cf6a:	da02      	bge.n	801cf72 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801cf6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801cf70:	e05d      	b.n	801d02e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801cf72:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801cf76:	4933      	ldr	r1, [pc, #204]	@ (801d044 <etharp_update_arp_entry+0x148>)
 801cf78:	4613      	mov	r3, r2
 801cf7a:	005b      	lsls	r3, r3, #1
 801cf7c:	4413      	add	r3, r2
 801cf7e:	00db      	lsls	r3, r3, #3
 801cf80:	440b      	add	r3, r1
 801cf82:	3314      	adds	r3, #20
 801cf84:	2202      	movs	r2, #2
 801cf86:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801cf88:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801cf8c:	492d      	ldr	r1, [pc, #180]	@ (801d044 <etharp_update_arp_entry+0x148>)
 801cf8e:	4613      	mov	r3, r2
 801cf90:	005b      	lsls	r3, r3, #1
 801cf92:	4413      	add	r3, r2
 801cf94:	00db      	lsls	r3, r3, #3
 801cf96:	440b      	add	r3, r1
 801cf98:	3308      	adds	r3, #8
 801cf9a:	68fa      	ldr	r2, [r7, #12]
 801cf9c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 801cf9e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801cfa2:	4613      	mov	r3, r2
 801cfa4:	005b      	lsls	r3, r3, #1
 801cfa6:	4413      	add	r3, r2
 801cfa8:	00db      	lsls	r3, r3, #3
 801cfaa:	3308      	adds	r3, #8
 801cfac:	4a25      	ldr	r2, [pc, #148]	@ (801d044 <etharp_update_arp_entry+0x148>)
 801cfae:	4413      	add	r3, r2
 801cfb0:	3304      	adds	r3, #4
 801cfb2:	2206      	movs	r2, #6
 801cfb4:	6879      	ldr	r1, [r7, #4]
 801cfb6:	4618      	mov	r0, r3
 801cfb8:	f003 fd07 	bl	80209ca <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801cfbc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801cfc0:	4920      	ldr	r1, [pc, #128]	@ (801d044 <etharp_update_arp_entry+0x148>)
 801cfc2:	4613      	mov	r3, r2
 801cfc4:	005b      	lsls	r3, r3, #1
 801cfc6:	4413      	add	r3, r2
 801cfc8:	00db      	lsls	r3, r3, #3
 801cfca:	440b      	add	r3, r1
 801cfcc:	3312      	adds	r3, #18
 801cfce:	2200      	movs	r2, #0
 801cfd0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801cfd2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801cfd6:	491b      	ldr	r1, [pc, #108]	@ (801d044 <etharp_update_arp_entry+0x148>)
 801cfd8:	4613      	mov	r3, r2
 801cfda:	005b      	lsls	r3, r3, #1
 801cfdc:	4413      	add	r3, r2
 801cfde:	00db      	lsls	r3, r3, #3
 801cfe0:	440b      	add	r3, r1
 801cfe2:	681b      	ldr	r3, [r3, #0]
 801cfe4:	2b00      	cmp	r3, #0
 801cfe6:	d021      	beq.n	801d02c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801cfe8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801cfec:	4915      	ldr	r1, [pc, #84]	@ (801d044 <etharp_update_arp_entry+0x148>)
 801cfee:	4613      	mov	r3, r2
 801cff0:	005b      	lsls	r3, r3, #1
 801cff2:	4413      	add	r3, r2
 801cff4:	00db      	lsls	r3, r3, #3
 801cff6:	440b      	add	r3, r1
 801cff8:	681b      	ldr	r3, [r3, #0]
 801cffa:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801cffc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801d000:	4910      	ldr	r1, [pc, #64]	@ (801d044 <etharp_update_arp_entry+0x148>)
 801d002:	4613      	mov	r3, r2
 801d004:	005b      	lsls	r3, r3, #1
 801d006:	4413      	add	r3, r2
 801d008:	00db      	lsls	r3, r3, #3
 801d00a:	440b      	add	r3, r1
 801d00c:	2200      	movs	r2, #0
 801d00e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801d010:	68fb      	ldr	r3, [r7, #12]
 801d012:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 801d016:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801d01a:	9300      	str	r3, [sp, #0]
 801d01c:	687b      	ldr	r3, [r7, #4]
 801d01e:	6939      	ldr	r1, [r7, #16]
 801d020:	68f8      	ldr	r0, [r7, #12]
 801d022:	f002 fc09 	bl	801f838 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801d026:	6938      	ldr	r0, [r7, #16]
 801d028:	f7f7 fa52 	bl	80144d0 <pbuf_free>
  }
  return ERR_OK;
 801d02c:	2300      	movs	r3, #0
}
 801d02e:	4618      	mov	r0, r3
 801d030:	3718      	adds	r7, #24
 801d032:	46bd      	mov	sp, r7
 801d034:	bd80      	pop	{r7, pc}
 801d036:	bf00      	nop
 801d038:	080258a8 	.word	0x080258a8
 801d03c:	080259a0 	.word	0x080259a0
 801d040:	08025920 	.word	0x08025920
 801d044:	2000ddb0 	.word	0x2000ddb0

0801d048 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801d048:	b580      	push	{r7, lr}
 801d04a:	b084      	sub	sp, #16
 801d04c:	af00      	add	r7, sp, #0
 801d04e:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d050:	2300      	movs	r3, #0
 801d052:	73fb      	strb	r3, [r7, #15]
 801d054:	e01f      	b.n	801d096 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 801d056:	7bfa      	ldrb	r2, [r7, #15]
 801d058:	4913      	ldr	r1, [pc, #76]	@ (801d0a8 <etharp_cleanup_netif+0x60>)
 801d05a:	4613      	mov	r3, r2
 801d05c:	005b      	lsls	r3, r3, #1
 801d05e:	4413      	add	r3, r2
 801d060:	00db      	lsls	r3, r3, #3
 801d062:	440b      	add	r3, r1
 801d064:	3314      	adds	r3, #20
 801d066:	781b      	ldrb	r3, [r3, #0]
 801d068:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801d06a:	7bbb      	ldrb	r3, [r7, #14]
 801d06c:	2b00      	cmp	r3, #0
 801d06e:	d00f      	beq.n	801d090 <etharp_cleanup_netif+0x48>
 801d070:	7bfa      	ldrb	r2, [r7, #15]
 801d072:	490d      	ldr	r1, [pc, #52]	@ (801d0a8 <etharp_cleanup_netif+0x60>)
 801d074:	4613      	mov	r3, r2
 801d076:	005b      	lsls	r3, r3, #1
 801d078:	4413      	add	r3, r2
 801d07a:	00db      	lsls	r3, r3, #3
 801d07c:	440b      	add	r3, r1
 801d07e:	3308      	adds	r3, #8
 801d080:	681b      	ldr	r3, [r3, #0]
 801d082:	687a      	ldr	r2, [r7, #4]
 801d084:	429a      	cmp	r2, r3
 801d086:	d103      	bne.n	801d090 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 801d088:	7bfb      	ldrb	r3, [r7, #15]
 801d08a:	4618      	mov	r0, r3
 801d08c:	f7ff fd12 	bl	801cab4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d090:	7bfb      	ldrb	r3, [r7, #15]
 801d092:	3301      	adds	r3, #1
 801d094:	73fb      	strb	r3, [r7, #15]
 801d096:	7bfb      	ldrb	r3, [r7, #15]
 801d098:	2b09      	cmp	r3, #9
 801d09a:	d9dc      	bls.n	801d056 <etharp_cleanup_netif+0xe>
    }
  }
}
 801d09c:	bf00      	nop
 801d09e:	bf00      	nop
 801d0a0:	3710      	adds	r7, #16
 801d0a2:	46bd      	mov	sp, r7
 801d0a4:	bd80      	pop	{r7, pc}
 801d0a6:	bf00      	nop
 801d0a8:	2000ddb0 	.word	0x2000ddb0

0801d0ac <etharp_get_entry>:
 * @param eth_ret return value: ETH address
 * @return 1 on valid index, 0 otherwise
 */
u8_t
etharp_get_entry(u8_t i, ip4_addr_t **ipaddr, struct netif **netif, struct eth_addr **eth_ret)
{
 801d0ac:	b580      	push	{r7, lr}
 801d0ae:	b084      	sub	sp, #16
 801d0b0:	af00      	add	r7, sp, #0
 801d0b2:	60b9      	str	r1, [r7, #8]
 801d0b4:	607a      	str	r2, [r7, #4]
 801d0b6:	603b      	str	r3, [r7, #0]
 801d0b8:	4603      	mov	r3, r0
 801d0ba:	73fb      	strb	r3, [r7, #15]
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801d0bc:	68bb      	ldr	r3, [r7, #8]
 801d0be:	2b00      	cmp	r3, #0
 801d0c0:	d106      	bne.n	801d0d0 <etharp_get_entry+0x24>
 801d0c2:	4b28      	ldr	r3, [pc, #160]	@ (801d164 <etharp_get_entry+0xb8>)
 801d0c4:	f240 2266 	movw	r2, #614	@ 0x266
 801d0c8:	4927      	ldr	r1, [pc, #156]	@ (801d168 <etharp_get_entry+0xbc>)
 801d0ca:	4828      	ldr	r0, [pc, #160]	@ (801d16c <etharp_get_entry+0xc0>)
 801d0cc:	f003 f9e8 	bl	80204a0 <iprintf>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801d0d0:	687b      	ldr	r3, [r7, #4]
 801d0d2:	2b00      	cmp	r3, #0
 801d0d4:	d106      	bne.n	801d0e4 <etharp_get_entry+0x38>
 801d0d6:	4b23      	ldr	r3, [pc, #140]	@ (801d164 <etharp_get_entry+0xb8>)
 801d0d8:	f240 2267 	movw	r2, #615	@ 0x267
 801d0dc:	4924      	ldr	r1, [pc, #144]	@ (801d170 <etharp_get_entry+0xc4>)
 801d0de:	4823      	ldr	r0, [pc, #140]	@ (801d16c <etharp_get_entry+0xc0>)
 801d0e0:	f003 f9de 	bl	80204a0 <iprintf>
  LWIP_ASSERT("eth_ret != NULL", eth_ret != NULL);
 801d0e4:	683b      	ldr	r3, [r7, #0]
 801d0e6:	2b00      	cmp	r3, #0
 801d0e8:	d106      	bne.n	801d0f8 <etharp_get_entry+0x4c>
 801d0ea:	4b1e      	ldr	r3, [pc, #120]	@ (801d164 <etharp_get_entry+0xb8>)
 801d0ec:	f44f 721a 	mov.w	r2, #616	@ 0x268
 801d0f0:	4920      	ldr	r1, [pc, #128]	@ (801d174 <etharp_get_entry+0xc8>)
 801d0f2:	481e      	ldr	r0, [pc, #120]	@ (801d16c <etharp_get_entry+0xc0>)
 801d0f4:	f003 f9d4 	bl	80204a0 <iprintf>

  if((i < ARP_TABLE_SIZE) && (arp_table[i].state >= ETHARP_STATE_STABLE)) {
 801d0f8:	7bfb      	ldrb	r3, [r7, #15]
 801d0fa:	2b09      	cmp	r3, #9
 801d0fc:	d82c      	bhi.n	801d158 <etharp_get_entry+0xac>
 801d0fe:	7bfa      	ldrb	r2, [r7, #15]
 801d100:	491d      	ldr	r1, [pc, #116]	@ (801d178 <etharp_get_entry+0xcc>)
 801d102:	4613      	mov	r3, r2
 801d104:	005b      	lsls	r3, r3, #1
 801d106:	4413      	add	r3, r2
 801d108:	00db      	lsls	r3, r3, #3
 801d10a:	440b      	add	r3, r1
 801d10c:	3314      	adds	r3, #20
 801d10e:	781b      	ldrb	r3, [r3, #0]
 801d110:	2b01      	cmp	r3, #1
 801d112:	d921      	bls.n	801d158 <etharp_get_entry+0xac>
    *ipaddr  = &arp_table[i].ipaddr;
 801d114:	7bfa      	ldrb	r2, [r7, #15]
 801d116:	4613      	mov	r3, r2
 801d118:	005b      	lsls	r3, r3, #1
 801d11a:	4413      	add	r3, r2
 801d11c:	00db      	lsls	r3, r3, #3
 801d11e:	4a16      	ldr	r2, [pc, #88]	@ (801d178 <etharp_get_entry+0xcc>)
 801d120:	4413      	add	r3, r2
 801d122:	1d1a      	adds	r2, r3, #4
 801d124:	68bb      	ldr	r3, [r7, #8]
 801d126:	601a      	str	r2, [r3, #0]
    *netif   = arp_table[i].netif;
 801d128:	7bfa      	ldrb	r2, [r7, #15]
 801d12a:	4913      	ldr	r1, [pc, #76]	@ (801d178 <etharp_get_entry+0xcc>)
 801d12c:	4613      	mov	r3, r2
 801d12e:	005b      	lsls	r3, r3, #1
 801d130:	4413      	add	r3, r2
 801d132:	00db      	lsls	r3, r3, #3
 801d134:	440b      	add	r3, r1
 801d136:	3308      	adds	r3, #8
 801d138:	681a      	ldr	r2, [r3, #0]
 801d13a:	687b      	ldr	r3, [r7, #4]
 801d13c:	601a      	str	r2, [r3, #0]
    *eth_ret = &arp_table[i].ethaddr;
 801d13e:	7bfa      	ldrb	r2, [r7, #15]
 801d140:	4613      	mov	r3, r2
 801d142:	005b      	lsls	r3, r3, #1
 801d144:	4413      	add	r3, r2
 801d146:	00db      	lsls	r3, r3, #3
 801d148:	3308      	adds	r3, #8
 801d14a:	4a0b      	ldr	r2, [pc, #44]	@ (801d178 <etharp_get_entry+0xcc>)
 801d14c:	4413      	add	r3, r2
 801d14e:	1d1a      	adds	r2, r3, #4
 801d150:	683b      	ldr	r3, [r7, #0]
 801d152:	601a      	str	r2, [r3, #0]
    return 1;
 801d154:	2301      	movs	r3, #1
 801d156:	e000      	b.n	801d15a <etharp_get_entry+0xae>
  } else {
    return 0;
 801d158:	2300      	movs	r3, #0
  }
}
 801d15a:	4618      	mov	r0, r3
 801d15c:	3710      	adds	r7, #16
 801d15e:	46bd      	mov	sp, r7
 801d160:	bd80      	pop	{r7, pc}
 801d162:	bf00      	nop
 801d164:	080258a8 	.word	0x080258a8
 801d168:	080259e8 	.word	0x080259e8
 801d16c:	08025920 	.word	0x08025920
 801d170:	080259f8 	.word	0x080259f8
 801d174:	08025a08 	.word	0x08025a08
 801d178:	2000ddb0 	.word	0x2000ddb0

0801d17c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801d17c:	b5b0      	push	{r4, r5, r7, lr}
 801d17e:	b08a      	sub	sp, #40	@ 0x28
 801d180:	af04      	add	r7, sp, #16
 801d182:	6078      	str	r0, [r7, #4]
 801d184:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801d186:	683b      	ldr	r3, [r7, #0]
 801d188:	2b00      	cmp	r3, #0
 801d18a:	d107      	bne.n	801d19c <etharp_input+0x20>
 801d18c:	4b4c      	ldr	r3, [pc, #304]	@ (801d2c0 <etharp_input+0x144>)
 801d18e:	f44f 7222 	mov.w	r2, #648	@ 0x288
 801d192:	494c      	ldr	r1, [pc, #304]	@ (801d2c4 <etharp_input+0x148>)
 801d194:	484c      	ldr	r0, [pc, #304]	@ (801d2c8 <etharp_input+0x14c>)
 801d196:	f003 f983 	bl	80204a0 <iprintf>
 801d19a:	e08d      	b.n	801d2b8 <etharp_input+0x13c>

  hdr = (struct etharp_hdr *)p->payload;
 801d19c:	687b      	ldr	r3, [r7, #4]
 801d19e:	685b      	ldr	r3, [r3, #4]
 801d1a0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 801d1a2:	693b      	ldr	r3, [r7, #16]
 801d1a4:	881b      	ldrh	r3, [r3, #0]
 801d1a6:	b29b      	uxth	r3, r3
 801d1a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d1ac:	d10c      	bne.n	801d1c8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801d1ae:	693b      	ldr	r3, [r7, #16]
 801d1b0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 801d1b2:	2b06      	cmp	r3, #6
 801d1b4:	d108      	bne.n	801d1c8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801d1b6:	693b      	ldr	r3, [r7, #16]
 801d1b8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801d1ba:	2b04      	cmp	r3, #4
 801d1bc:	d104      	bne.n	801d1c8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801d1be:	693b      	ldr	r3, [r7, #16]
 801d1c0:	885b      	ldrh	r3, [r3, #2]
 801d1c2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801d1c4:	2b08      	cmp	r3, #8
 801d1c6:	d00f      	beq.n	801d1e8 <etharp_input+0x6c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
 801d1c8:	4b40      	ldr	r3, [pc, #256]	@ (801d2cc <etharp_input+0x150>)
 801d1ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801d1cc:	3301      	adds	r3, #1
 801d1ce:	b29a      	uxth	r2, r3
 801d1d0:	4b3e      	ldr	r3, [pc, #248]	@ (801d2cc <etharp_input+0x150>)
 801d1d2:	851a      	strh	r2, [r3, #40]	@ 0x28
    ETHARP_STATS_INC(etharp.drop);
 801d1d4:	4b3d      	ldr	r3, [pc, #244]	@ (801d2cc <etharp_input+0x150>)
 801d1d6:	8bdb      	ldrh	r3, [r3, #30]
 801d1d8:	3301      	adds	r3, #1
 801d1da:	b29a      	uxth	r2, r3
 801d1dc:	4b3b      	ldr	r3, [pc, #236]	@ (801d2cc <etharp_input+0x150>)
 801d1de:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 801d1e0:	6878      	ldr	r0, [r7, #4]
 801d1e2:	f7f7 f975 	bl	80144d0 <pbuf_free>
    return;
 801d1e6:	e067      	b.n	801d2b8 <etharp_input+0x13c>
  }
  ETHARP_STATS_INC(etharp.recv);
 801d1e8:	4b38      	ldr	r3, [pc, #224]	@ (801d2cc <etharp_input+0x150>)
 801d1ea:	8b5b      	ldrh	r3, [r3, #26]
 801d1ec:	3301      	adds	r3, #1
 801d1ee:	b29a      	uxth	r2, r3
 801d1f0:	4b36      	ldr	r3, [pc, #216]	@ (801d2cc <etharp_input+0x150>)
 801d1f2:	835a      	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 801d1f4:	693b      	ldr	r3, [r7, #16]
 801d1f6:	330e      	adds	r3, #14
 801d1f8:	681b      	ldr	r3, [r3, #0]
 801d1fa:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 801d1fc:	693b      	ldr	r3, [r7, #16]
 801d1fe:	3318      	adds	r3, #24
 801d200:	681b      	ldr	r3, [r3, #0]
 801d202:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801d204:	683b      	ldr	r3, [r7, #0]
 801d206:	3304      	adds	r3, #4
 801d208:	681b      	ldr	r3, [r3, #0]
 801d20a:	2b00      	cmp	r3, #0
 801d20c:	d102      	bne.n	801d214 <etharp_input+0x98>
    for_us = 0;
 801d20e:	2300      	movs	r3, #0
 801d210:	75fb      	strb	r3, [r7, #23]
 801d212:	e009      	b.n	801d228 <etharp_input+0xac>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801d214:	68ba      	ldr	r2, [r7, #8]
 801d216:	683b      	ldr	r3, [r7, #0]
 801d218:	3304      	adds	r3, #4
 801d21a:	681b      	ldr	r3, [r3, #0]
 801d21c:	429a      	cmp	r2, r3
 801d21e:	bf0c      	ite	eq
 801d220:	2301      	moveq	r3, #1
 801d222:	2300      	movne	r3, #0
 801d224:	b2db      	uxtb	r3, r3
 801d226:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801d228:	693b      	ldr	r3, [r7, #16]
 801d22a:	f103 0208 	add.w	r2, r3, #8
 801d22e:	7dfb      	ldrb	r3, [r7, #23]
 801d230:	2b00      	cmp	r3, #0
 801d232:	d001      	beq.n	801d238 <etharp_input+0xbc>
 801d234:	2301      	movs	r3, #1
 801d236:	e000      	b.n	801d23a <etharp_input+0xbe>
 801d238:	2302      	movs	r3, #2
 801d23a:	f107 010c 	add.w	r1, r7, #12
 801d23e:	6838      	ldr	r0, [r7, #0]
 801d240:	f7ff fe5c 	bl	801cefc <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801d244:	693b      	ldr	r3, [r7, #16]
 801d246:	88db      	ldrh	r3, [r3, #6]
 801d248:	b29b      	uxth	r3, r3
 801d24a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d24e:	d003      	beq.n	801d258 <etharp_input+0xdc>
 801d250:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d254:	d01e      	beq.n	801d294 <etharp_input+0x118>
 801d256:	e024      	b.n	801d2a2 <etharp_input+0x126>
     * reply. In any case, we time-stamp any existing ARP entry,
     * and possibly send out an IP packet that was queued on it. */

    LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
    /* ARP request for our address? */
    if (for_us) {
 801d258:	7dfb      	ldrb	r3, [r7, #23]
 801d25a:	2b00      	cmp	r3, #0
 801d25c:	d028      	beq.n	801d2b0 <etharp_input+0x134>
      /* send ARP response */
      etharp_raw(netif,
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801d25e:	683b      	ldr	r3, [r7, #0]
 801d260:	f103 002d 	add.w	r0, r3, #45	@ 0x2d
 801d264:	693b      	ldr	r3, [r7, #16]
 801d266:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801d26a:	683b      	ldr	r3, [r7, #0]
 801d26c:	f103 052d 	add.w	r5, r3, #45	@ 0x2d
 801d270:	683b      	ldr	r3, [r7, #0]
 801d272:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 801d274:	693a      	ldr	r2, [r7, #16]
 801d276:	3208      	adds	r2, #8
      etharp_raw(netif,
 801d278:	2102      	movs	r1, #2
 801d27a:	9103      	str	r1, [sp, #12]
 801d27c:	f107 010c 	add.w	r1, r7, #12
 801d280:	9102      	str	r1, [sp, #8]
 801d282:	9201      	str	r2, [sp, #4]
 801d284:	9300      	str	r3, [sp, #0]
 801d286:	462b      	mov	r3, r5
 801d288:	4622      	mov	r2, r4
 801d28a:	4601      	mov	r1, r0
 801d28c:	6838      	ldr	r0, [r7, #0]
 801d28e:	f000 fb09 	bl	801d8a4 <etharp_raw>
    /* request was not directed to us */
    } else {
      /* { for_us == 0 and netif->ip_addr.addr != 0 } */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
    }
    break;
 801d292:	e00d      	b.n	801d2b0 <etharp_input+0x134>
#if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
    /* DHCP wants to know about ARP replies from any host with an
     * IP address also offered to us by the DHCP server. We do not
     * want to take a duplicate IP address on a single network.
     * @todo How should we handle redundant (fail-over) interfaces? */
    dhcp_arp_reply(netif, &sipaddr);
 801d294:	f107 030c 	add.w	r3, r7, #12
 801d298:	4619      	mov	r1, r3
 801d29a:	6838      	ldr	r0, [r7, #0]
 801d29c:	f7fe f902 	bl	801b4a4 <dhcp_arp_reply>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
 801d2a0:	e007      	b.n	801d2b2 <etharp_input+0x136>
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
 801d2a2:	4b0a      	ldr	r3, [pc, #40]	@ (801d2cc <etharp_input+0x150>)
 801d2a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801d2a6:	3301      	adds	r3, #1
 801d2a8:	b29a      	uxth	r2, r3
 801d2aa:	4b08      	ldr	r3, [pc, #32]	@ (801d2cc <etharp_input+0x150>)
 801d2ac:	859a      	strh	r2, [r3, #44]	@ 0x2c
    break;
 801d2ae:	e000      	b.n	801d2b2 <etharp_input+0x136>
    break;
 801d2b0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801d2b2:	6878      	ldr	r0, [r7, #4]
 801d2b4:	f7f7 f90c 	bl	80144d0 <pbuf_free>
}
 801d2b8:	3718      	adds	r7, #24
 801d2ba:	46bd      	mov	sp, r7
 801d2bc:	bdb0      	pop	{r4, r5, r7, pc}
 801d2be:	bf00      	nop
 801d2c0:	080258a8 	.word	0x080258a8
 801d2c4:	080259f8 	.word	0x080259f8
 801d2c8:	08025920 	.word	0x08025920
 801d2cc:	2000db84 	.word	0x2000db84

0801d2d0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 801d2d0:	b580      	push	{r7, lr}
 801d2d2:	b086      	sub	sp, #24
 801d2d4:	af02      	add	r7, sp, #8
 801d2d6:	60f8      	str	r0, [r7, #12]
 801d2d8:	60b9      	str	r1, [r7, #8]
 801d2da:	4613      	mov	r3, r2
 801d2dc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801d2de:	79fa      	ldrb	r2, [r7, #7]
 801d2e0:	4944      	ldr	r1, [pc, #272]	@ (801d3f4 <etharp_output_to_arp_index+0x124>)
 801d2e2:	4613      	mov	r3, r2
 801d2e4:	005b      	lsls	r3, r3, #1
 801d2e6:	4413      	add	r3, r2
 801d2e8:	00db      	lsls	r3, r3, #3
 801d2ea:	440b      	add	r3, r1
 801d2ec:	3314      	adds	r3, #20
 801d2ee:	781b      	ldrb	r3, [r3, #0]
 801d2f0:	2b01      	cmp	r3, #1
 801d2f2:	d806      	bhi.n	801d302 <etharp_output_to_arp_index+0x32>
 801d2f4:	4b40      	ldr	r3, [pc, #256]	@ (801d3f8 <etharp_output_to_arp_index+0x128>)
 801d2f6:	f44f 723b 	mov.w	r2, #748	@ 0x2ec
 801d2fa:	4940      	ldr	r1, [pc, #256]	@ (801d3fc <etharp_output_to_arp_index+0x12c>)
 801d2fc:	4840      	ldr	r0, [pc, #256]	@ (801d400 <etharp_output_to_arp_index+0x130>)
 801d2fe:	f003 f8cf 	bl	80204a0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801d302:	79fa      	ldrb	r2, [r7, #7]
 801d304:	493b      	ldr	r1, [pc, #236]	@ (801d3f4 <etharp_output_to_arp_index+0x124>)
 801d306:	4613      	mov	r3, r2
 801d308:	005b      	lsls	r3, r3, #1
 801d30a:	4413      	add	r3, r2
 801d30c:	00db      	lsls	r3, r3, #3
 801d30e:	440b      	add	r3, r1
 801d310:	3314      	adds	r3, #20
 801d312:	781b      	ldrb	r3, [r3, #0]
 801d314:	2b02      	cmp	r3, #2
 801d316:	d153      	bne.n	801d3c0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801d318:	79fa      	ldrb	r2, [r7, #7]
 801d31a:	4936      	ldr	r1, [pc, #216]	@ (801d3f4 <etharp_output_to_arp_index+0x124>)
 801d31c:	4613      	mov	r3, r2
 801d31e:	005b      	lsls	r3, r3, #1
 801d320:	4413      	add	r3, r2
 801d322:	00db      	lsls	r3, r3, #3
 801d324:	440b      	add	r3, r1
 801d326:	3312      	adds	r3, #18
 801d328:	881b      	ldrh	r3, [r3, #0]
 801d32a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801d32e:	d919      	bls.n	801d364 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801d330:	79fa      	ldrb	r2, [r7, #7]
 801d332:	4613      	mov	r3, r2
 801d334:	005b      	lsls	r3, r3, #1
 801d336:	4413      	add	r3, r2
 801d338:	00db      	lsls	r3, r3, #3
 801d33a:	4a2e      	ldr	r2, [pc, #184]	@ (801d3f4 <etharp_output_to_arp_index+0x124>)
 801d33c:	4413      	add	r3, r2
 801d33e:	3304      	adds	r3, #4
 801d340:	4619      	mov	r1, r3
 801d342:	68f8      	ldr	r0, [r7, #12]
 801d344:	f000 fb6a 	bl	801da1c <etharp_request>
 801d348:	4603      	mov	r3, r0
 801d34a:	2b00      	cmp	r3, #0
 801d34c:	d138      	bne.n	801d3c0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801d34e:	79fa      	ldrb	r2, [r7, #7]
 801d350:	4928      	ldr	r1, [pc, #160]	@ (801d3f4 <etharp_output_to_arp_index+0x124>)
 801d352:	4613      	mov	r3, r2
 801d354:	005b      	lsls	r3, r3, #1
 801d356:	4413      	add	r3, r2
 801d358:	00db      	lsls	r3, r3, #3
 801d35a:	440b      	add	r3, r1
 801d35c:	3314      	adds	r3, #20
 801d35e:	2203      	movs	r2, #3
 801d360:	701a      	strb	r2, [r3, #0]
 801d362:	e02d      	b.n	801d3c0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801d364:	79fa      	ldrb	r2, [r7, #7]
 801d366:	4923      	ldr	r1, [pc, #140]	@ (801d3f4 <etharp_output_to_arp_index+0x124>)
 801d368:	4613      	mov	r3, r2
 801d36a:	005b      	lsls	r3, r3, #1
 801d36c:	4413      	add	r3, r2
 801d36e:	00db      	lsls	r3, r3, #3
 801d370:	440b      	add	r3, r1
 801d372:	3312      	adds	r3, #18
 801d374:	881b      	ldrh	r3, [r3, #0]
 801d376:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801d37a:	d321      	bcc.n	801d3c0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801d37c:	79fa      	ldrb	r2, [r7, #7]
 801d37e:	4613      	mov	r3, r2
 801d380:	005b      	lsls	r3, r3, #1
 801d382:	4413      	add	r3, r2
 801d384:	00db      	lsls	r3, r3, #3
 801d386:	4a1b      	ldr	r2, [pc, #108]	@ (801d3f4 <etharp_output_to_arp_index+0x124>)
 801d388:	4413      	add	r3, r2
 801d38a:	1d19      	adds	r1, r3, #4
 801d38c:	79fa      	ldrb	r2, [r7, #7]
 801d38e:	4613      	mov	r3, r2
 801d390:	005b      	lsls	r3, r3, #1
 801d392:	4413      	add	r3, r2
 801d394:	00db      	lsls	r3, r3, #3
 801d396:	3308      	adds	r3, #8
 801d398:	4a16      	ldr	r2, [pc, #88]	@ (801d3f4 <etharp_output_to_arp_index+0x124>)
 801d39a:	4413      	add	r3, r2
 801d39c:	3304      	adds	r3, #4
 801d39e:	461a      	mov	r2, r3
 801d3a0:	68f8      	ldr	r0, [r7, #12]
 801d3a2:	f000 fb19 	bl	801d9d8 <etharp_request_dst>
 801d3a6:	4603      	mov	r3, r0
 801d3a8:	2b00      	cmp	r3, #0
 801d3aa:	d109      	bne.n	801d3c0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801d3ac:	79fa      	ldrb	r2, [r7, #7]
 801d3ae:	4911      	ldr	r1, [pc, #68]	@ (801d3f4 <etharp_output_to_arp_index+0x124>)
 801d3b0:	4613      	mov	r3, r2
 801d3b2:	005b      	lsls	r3, r3, #1
 801d3b4:	4413      	add	r3, r2
 801d3b6:	00db      	lsls	r3, r3, #3
 801d3b8:	440b      	add	r3, r1
 801d3ba:	3314      	adds	r3, #20
 801d3bc:	2203      	movs	r2, #3
 801d3be:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801d3c0:	68fb      	ldr	r3, [r7, #12]
 801d3c2:	f103 012d 	add.w	r1, r3, #45	@ 0x2d
 801d3c6:	79fa      	ldrb	r2, [r7, #7]
 801d3c8:	4613      	mov	r3, r2
 801d3ca:	005b      	lsls	r3, r3, #1
 801d3cc:	4413      	add	r3, r2
 801d3ce:	00db      	lsls	r3, r3, #3
 801d3d0:	3308      	adds	r3, #8
 801d3d2:	4a08      	ldr	r2, [pc, #32]	@ (801d3f4 <etharp_output_to_arp_index+0x124>)
 801d3d4:	4413      	add	r3, r2
 801d3d6:	3304      	adds	r3, #4
 801d3d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801d3dc:	9200      	str	r2, [sp, #0]
 801d3de:	460a      	mov	r2, r1
 801d3e0:	68b9      	ldr	r1, [r7, #8]
 801d3e2:	68f8      	ldr	r0, [r7, #12]
 801d3e4:	f002 fa28 	bl	801f838 <ethernet_output>
 801d3e8:	4603      	mov	r3, r0
}
 801d3ea:	4618      	mov	r0, r3
 801d3ec:	3710      	adds	r7, #16
 801d3ee:	46bd      	mov	sp, r7
 801d3f0:	bd80      	pop	{r7, pc}
 801d3f2:	bf00      	nop
 801d3f4:	2000ddb0 	.word	0x2000ddb0
 801d3f8:	080258a8 	.word	0x080258a8
 801d3fc:	08025a18 	.word	0x08025a18
 801d400:	08025920 	.word	0x08025920

0801d404 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801d404:	b580      	push	{r7, lr}
 801d406:	b08a      	sub	sp, #40	@ 0x28
 801d408:	af02      	add	r7, sp, #8
 801d40a:	60f8      	str	r0, [r7, #12]
 801d40c:	60b9      	str	r1, [r7, #8]
 801d40e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801d410:	687b      	ldr	r3, [r7, #4]
 801d412:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801d414:	68fb      	ldr	r3, [r7, #12]
 801d416:	2b00      	cmp	r3, #0
 801d418:	d106      	bne.n	801d428 <etharp_output+0x24>
 801d41a:	4b6c      	ldr	r3, [pc, #432]	@ (801d5cc <etharp_output+0x1c8>)
 801d41c:	f240 321b 	movw	r2, #795	@ 0x31b
 801d420:	496b      	ldr	r1, [pc, #428]	@ (801d5d0 <etharp_output+0x1cc>)
 801d422:	486c      	ldr	r0, [pc, #432]	@ (801d5d4 <etharp_output+0x1d0>)
 801d424:	f003 f83c 	bl	80204a0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801d428:	68bb      	ldr	r3, [r7, #8]
 801d42a:	2b00      	cmp	r3, #0
 801d42c:	d106      	bne.n	801d43c <etharp_output+0x38>
 801d42e:	4b67      	ldr	r3, [pc, #412]	@ (801d5cc <etharp_output+0x1c8>)
 801d430:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 801d434:	4968      	ldr	r1, [pc, #416]	@ (801d5d8 <etharp_output+0x1d4>)
 801d436:	4867      	ldr	r0, [pc, #412]	@ (801d5d4 <etharp_output+0x1d0>)
 801d438:	f003 f832 	bl	80204a0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801d43c:	687b      	ldr	r3, [r7, #4]
 801d43e:	2b00      	cmp	r3, #0
 801d440:	d106      	bne.n	801d450 <etharp_output+0x4c>
 801d442:	4b62      	ldr	r3, [pc, #392]	@ (801d5cc <etharp_output+0x1c8>)
 801d444:	f240 321d 	movw	r2, #797	@ 0x31d
 801d448:	4964      	ldr	r1, [pc, #400]	@ (801d5dc <etharp_output+0x1d8>)
 801d44a:	4862      	ldr	r0, [pc, #392]	@ (801d5d4 <etharp_output+0x1d0>)
 801d44c:	f003 f828 	bl	80204a0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801d450:	687b      	ldr	r3, [r7, #4]
 801d452:	681b      	ldr	r3, [r3, #0]
 801d454:	68f9      	ldr	r1, [r7, #12]
 801d456:	4618      	mov	r0, r3
 801d458:	f001 f8e0 	bl	801e61c <ip4_addr_isbroadcast_u32>
 801d45c:	4603      	mov	r3, r0
 801d45e:	2b00      	cmp	r3, #0
 801d460:	d002      	beq.n	801d468 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801d462:	4b5f      	ldr	r3, [pc, #380]	@ (801d5e0 <etharp_output+0x1dc>)
 801d464:	61fb      	str	r3, [r7, #28]
 801d466:	e0a1      	b.n	801d5ac <etharp_output+0x1a8>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801d468:	687b      	ldr	r3, [r7, #4]
 801d46a:	681b      	ldr	r3, [r3, #0]
 801d46c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801d470:	2be0      	cmp	r3, #224	@ 0xe0
 801d472:	d118      	bne.n	801d4a6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801d474:	2301      	movs	r3, #1
 801d476:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801d478:	2300      	movs	r3, #0
 801d47a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801d47c:	235e      	movs	r3, #94	@ 0x5e
 801d47e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801d480:	687b      	ldr	r3, [r7, #4]
 801d482:	3301      	adds	r3, #1
 801d484:	781b      	ldrb	r3, [r3, #0]
 801d486:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d48a:	b2db      	uxtb	r3, r3
 801d48c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801d48e:	687b      	ldr	r3, [r7, #4]
 801d490:	3302      	adds	r3, #2
 801d492:	781b      	ldrb	r3, [r3, #0]
 801d494:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801d496:	687b      	ldr	r3, [r7, #4]
 801d498:	3303      	adds	r3, #3
 801d49a:	781b      	ldrb	r3, [r3, #0]
 801d49c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801d49e:	f107 0310 	add.w	r3, r7, #16
 801d4a2:	61fb      	str	r3, [r7, #28]
 801d4a4:	e082      	b.n	801d5ac <etharp_output+0x1a8>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801d4a6:	687b      	ldr	r3, [r7, #4]
 801d4a8:	681a      	ldr	r2, [r3, #0]
 801d4aa:	68fb      	ldr	r3, [r7, #12]
 801d4ac:	3304      	adds	r3, #4
 801d4ae:	681b      	ldr	r3, [r3, #0]
 801d4b0:	405a      	eors	r2, r3
 801d4b2:	68fb      	ldr	r3, [r7, #12]
 801d4b4:	3308      	adds	r3, #8
 801d4b6:	681b      	ldr	r3, [r3, #0]
 801d4b8:	4013      	ands	r3, r2
 801d4ba:	2b00      	cmp	r3, #0
 801d4bc:	d012      	beq.n	801d4e4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801d4be:	687b      	ldr	r3, [r7, #4]
 801d4c0:	681b      	ldr	r3, [r3, #0]
 801d4c2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801d4c4:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801d4c8:	4293      	cmp	r3, r2
 801d4ca:	d00b      	beq.n	801d4e4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801d4cc:	68fb      	ldr	r3, [r7, #12]
 801d4ce:	330c      	adds	r3, #12
 801d4d0:	681b      	ldr	r3, [r3, #0]
 801d4d2:	2b00      	cmp	r3, #0
 801d4d4:	d003      	beq.n	801d4de <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801d4d6:	68fb      	ldr	r3, [r7, #12]
 801d4d8:	330c      	adds	r3, #12
 801d4da:	61bb      	str	r3, [r7, #24]
 801d4dc:	e002      	b.n	801d4e4 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801d4de:	f06f 0303 	mvn.w	r3, #3
 801d4e2:	e06f      	b.n	801d5c4 <etharp_output+0x1c0>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801d4e4:	4b3f      	ldr	r3, [pc, #252]	@ (801d5e4 <etharp_output+0x1e0>)
 801d4e6:	781b      	ldrb	r3, [r3, #0]
 801d4e8:	4619      	mov	r1, r3
 801d4ea:	4a3f      	ldr	r2, [pc, #252]	@ (801d5e8 <etharp_output+0x1e4>)
 801d4ec:	460b      	mov	r3, r1
 801d4ee:	005b      	lsls	r3, r3, #1
 801d4f0:	440b      	add	r3, r1
 801d4f2:	00db      	lsls	r3, r3, #3
 801d4f4:	4413      	add	r3, r2
 801d4f6:	3314      	adds	r3, #20
 801d4f8:	781b      	ldrb	r3, [r3, #0]
 801d4fa:	2b01      	cmp	r3, #1
 801d4fc:	d91d      	bls.n	801d53a <etharp_output+0x136>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801d4fe:	69bb      	ldr	r3, [r7, #24]
 801d500:	681a      	ldr	r2, [r3, #0]
 801d502:	4b38      	ldr	r3, [pc, #224]	@ (801d5e4 <etharp_output+0x1e0>)
 801d504:	781b      	ldrb	r3, [r3, #0]
 801d506:	4618      	mov	r0, r3
 801d508:	4937      	ldr	r1, [pc, #220]	@ (801d5e8 <etharp_output+0x1e4>)
 801d50a:	4603      	mov	r3, r0
 801d50c:	005b      	lsls	r3, r3, #1
 801d50e:	4403      	add	r3, r0
 801d510:	00db      	lsls	r3, r3, #3
 801d512:	440b      	add	r3, r1
 801d514:	3304      	adds	r3, #4
 801d516:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801d518:	429a      	cmp	r2, r3
 801d51a:	d10e      	bne.n	801d53a <etharp_output+0x136>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
 801d51c:	4b33      	ldr	r3, [pc, #204]	@ (801d5ec <etharp_output+0x1e8>)
 801d51e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 801d520:	3301      	adds	r3, #1
 801d522:	b29a      	uxth	r2, r3
 801d524:	4b31      	ldr	r3, [pc, #196]	@ (801d5ec <etharp_output+0x1e8>)
 801d526:	85da      	strh	r2, [r3, #46]	@ 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801d528:	4b2e      	ldr	r3, [pc, #184]	@ (801d5e4 <etharp_output+0x1e0>)
 801d52a:	781b      	ldrb	r3, [r3, #0]
 801d52c:	461a      	mov	r2, r3
 801d52e:	68b9      	ldr	r1, [r7, #8]
 801d530:	68f8      	ldr	r0, [r7, #12]
 801d532:	f7ff fecd 	bl	801d2d0 <etharp_output_to_arp_index>
 801d536:	4603      	mov	r3, r0
 801d538:	e044      	b.n	801d5c4 <etharp_output+0x1c0>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801d53a:	2300      	movs	r3, #0
 801d53c:	75fb      	strb	r3, [r7, #23]
 801d53e:	e02a      	b.n	801d596 <etharp_output+0x192>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801d540:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801d544:	4928      	ldr	r1, [pc, #160]	@ (801d5e8 <etharp_output+0x1e4>)
 801d546:	4613      	mov	r3, r2
 801d548:	005b      	lsls	r3, r3, #1
 801d54a:	4413      	add	r3, r2
 801d54c:	00db      	lsls	r3, r3, #3
 801d54e:	440b      	add	r3, r1
 801d550:	3314      	adds	r3, #20
 801d552:	781b      	ldrb	r3, [r3, #0]
 801d554:	2b01      	cmp	r3, #1
 801d556:	d918      	bls.n	801d58a <etharp_output+0x186>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801d558:	69bb      	ldr	r3, [r7, #24]
 801d55a:	6819      	ldr	r1, [r3, #0]
 801d55c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801d560:	4821      	ldr	r0, [pc, #132]	@ (801d5e8 <etharp_output+0x1e4>)
 801d562:	4613      	mov	r3, r2
 801d564:	005b      	lsls	r3, r3, #1
 801d566:	4413      	add	r3, r2
 801d568:	00db      	lsls	r3, r3, #3
 801d56a:	4403      	add	r3, r0
 801d56c:	3304      	adds	r3, #4
 801d56e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801d570:	4299      	cmp	r1, r3
 801d572:	d10a      	bne.n	801d58a <etharp_output+0x186>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 801d574:	7dfa      	ldrb	r2, [r7, #23]
 801d576:	4b1b      	ldr	r3, [pc, #108]	@ (801d5e4 <etharp_output+0x1e0>)
 801d578:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801d57a:	7dfb      	ldrb	r3, [r7, #23]
 801d57c:	461a      	mov	r2, r3
 801d57e:	68b9      	ldr	r1, [r7, #8]
 801d580:	68f8      	ldr	r0, [r7, #12]
 801d582:	f7ff fea5 	bl	801d2d0 <etharp_output_to_arp_index>
 801d586:	4603      	mov	r3, r0
 801d588:	e01c      	b.n	801d5c4 <etharp_output+0x1c0>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801d58a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801d58e:	b2db      	uxtb	r3, r3
 801d590:	3301      	adds	r3, #1
 801d592:	b2db      	uxtb	r3, r3
 801d594:	75fb      	strb	r3, [r7, #23]
 801d596:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801d59a:	2b09      	cmp	r3, #9
 801d59c:	ddd0      	ble.n	801d540 <etharp_output+0x13c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801d59e:	68ba      	ldr	r2, [r7, #8]
 801d5a0:	69b9      	ldr	r1, [r7, #24]
 801d5a2:	68f8      	ldr	r0, [r7, #12]
 801d5a4:	f000 f824 	bl	801d5f0 <etharp_query>
 801d5a8:	4603      	mov	r3, r0
 801d5aa:	e00b      	b.n	801d5c4 <etharp_output+0x1c0>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 801d5ac:	68fb      	ldr	r3, [r7, #12]
 801d5ae:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 801d5b2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801d5b6:	9300      	str	r3, [sp, #0]
 801d5b8:	69fb      	ldr	r3, [r7, #28]
 801d5ba:	68b9      	ldr	r1, [r7, #8]
 801d5bc:	68f8      	ldr	r0, [r7, #12]
 801d5be:	f002 f93b 	bl	801f838 <ethernet_output>
 801d5c2:	4603      	mov	r3, r0
}
 801d5c4:	4618      	mov	r0, r3
 801d5c6:	3720      	adds	r7, #32
 801d5c8:	46bd      	mov	sp, r7
 801d5ca:	bd80      	pop	{r7, pc}
 801d5cc:	080258a8 	.word	0x080258a8
 801d5d0:	080259f8 	.word	0x080259f8
 801d5d4:	08025920 	.word	0x08025920
 801d5d8:	08025a48 	.word	0x08025a48
 801d5dc:	080259e8 	.word	0x080259e8
 801d5e0:	0802f058 	.word	0x0802f058
 801d5e4:	2000dea0 	.word	0x2000dea0
 801d5e8:	2000ddb0 	.word	0x2000ddb0
 801d5ec:	2000db84 	.word	0x2000db84

0801d5f0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801d5f0:	b580      	push	{r7, lr}
 801d5f2:	b08c      	sub	sp, #48	@ 0x30
 801d5f4:	af02      	add	r7, sp, #8
 801d5f6:	60f8      	str	r0, [r7, #12]
 801d5f8:	60b9      	str	r1, [r7, #8]
 801d5fa:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 801d5fc:	68fb      	ldr	r3, [r7, #12]
 801d5fe:	332d      	adds	r3, #45	@ 0x2d
 801d600:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801d602:	23ff      	movs	r3, #255	@ 0xff
 801d604:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801d608:	2300      	movs	r3, #0
 801d60a:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801d60c:	68bb      	ldr	r3, [r7, #8]
 801d60e:	681b      	ldr	r3, [r3, #0]
 801d610:	68f9      	ldr	r1, [r7, #12]
 801d612:	4618      	mov	r0, r3
 801d614:	f001 f802 	bl	801e61c <ip4_addr_isbroadcast_u32>
 801d618:	4603      	mov	r3, r0
 801d61a:	2b00      	cmp	r3, #0
 801d61c:	d10c      	bne.n	801d638 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801d61e:	68bb      	ldr	r3, [r7, #8]
 801d620:	681b      	ldr	r3, [r3, #0]
 801d622:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801d626:	2be0      	cmp	r3, #224	@ 0xe0
 801d628:	d006      	beq.n	801d638 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801d62a:	68bb      	ldr	r3, [r7, #8]
 801d62c:	2b00      	cmp	r3, #0
 801d62e:	d003      	beq.n	801d638 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801d630:	68bb      	ldr	r3, [r7, #8]
 801d632:	681b      	ldr	r3, [r3, #0]
 801d634:	2b00      	cmp	r3, #0
 801d636:	d102      	bne.n	801d63e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801d638:	f06f 030f 	mvn.w	r3, #15
 801d63c:	e11d      	b.n	801d87a <etharp_query+0x28a>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801d63e:	68fa      	ldr	r2, [r7, #12]
 801d640:	2101      	movs	r1, #1
 801d642:	68b8      	ldr	r0, [r7, #8]
 801d644:	f7ff fb10 	bl	801cc68 <etharp_find_entry>
 801d648:	4603      	mov	r3, r0
 801d64a:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 801d64c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801d650:	2b00      	cmp	r3, #0
 801d652:	da0b      	bge.n	801d66c <etharp_query+0x7c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
 801d654:	687b      	ldr	r3, [r7, #4]
 801d656:	2b00      	cmp	r3, #0
 801d658:	d005      	beq.n	801d666 <etharp_query+0x76>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
 801d65a:	4b8a      	ldr	r3, [pc, #552]	@ (801d884 <etharp_query+0x294>)
 801d65c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801d65e:	3301      	adds	r3, #1
 801d660:	b29a      	uxth	r2, r3
 801d662:	4b88      	ldr	r3, [pc, #544]	@ (801d884 <etharp_query+0x294>)
 801d664:	849a      	strh	r2, [r3, #36]	@ 0x24
    }
    return (err_t)i;
 801d666:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801d66a:	e106      	b.n	801d87a <etharp_query+0x28a>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801d66c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801d670:	4985      	ldr	r1, [pc, #532]	@ (801d888 <etharp_query+0x298>)
 801d672:	4613      	mov	r3, r2
 801d674:	005b      	lsls	r3, r3, #1
 801d676:	4413      	add	r3, r2
 801d678:	00db      	lsls	r3, r3, #3
 801d67a:	440b      	add	r3, r1
 801d67c:	3314      	adds	r3, #20
 801d67e:	781b      	ldrb	r3, [r3, #0]
 801d680:	2b00      	cmp	r3, #0
 801d682:	d117      	bne.n	801d6b4 <etharp_query+0xc4>
    is_new_entry = 1;
 801d684:	2301      	movs	r3, #1
 801d686:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801d688:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801d68c:	497e      	ldr	r1, [pc, #504]	@ (801d888 <etharp_query+0x298>)
 801d68e:	4613      	mov	r3, r2
 801d690:	005b      	lsls	r3, r3, #1
 801d692:	4413      	add	r3, r2
 801d694:	00db      	lsls	r3, r3, #3
 801d696:	440b      	add	r3, r1
 801d698:	3314      	adds	r3, #20
 801d69a:	2201      	movs	r2, #1
 801d69c:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801d69e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801d6a2:	4979      	ldr	r1, [pc, #484]	@ (801d888 <etharp_query+0x298>)
 801d6a4:	4613      	mov	r3, r2
 801d6a6:	005b      	lsls	r3, r3, #1
 801d6a8:	4413      	add	r3, r2
 801d6aa:	00db      	lsls	r3, r3, #3
 801d6ac:	440b      	add	r3, r1
 801d6ae:	3308      	adds	r3, #8
 801d6b0:	68fa      	ldr	r2, [r7, #12]
 801d6b2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801d6b4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801d6b8:	4973      	ldr	r1, [pc, #460]	@ (801d888 <etharp_query+0x298>)
 801d6ba:	4613      	mov	r3, r2
 801d6bc:	005b      	lsls	r3, r3, #1
 801d6be:	4413      	add	r3, r2
 801d6c0:	00db      	lsls	r3, r3, #3
 801d6c2:	440b      	add	r3, r1
 801d6c4:	3314      	adds	r3, #20
 801d6c6:	781b      	ldrb	r3, [r3, #0]
 801d6c8:	2b01      	cmp	r3, #1
 801d6ca:	d012      	beq.n	801d6f2 <etharp_query+0x102>
 801d6cc:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801d6d0:	496d      	ldr	r1, [pc, #436]	@ (801d888 <etharp_query+0x298>)
 801d6d2:	4613      	mov	r3, r2
 801d6d4:	005b      	lsls	r3, r3, #1
 801d6d6:	4413      	add	r3, r2
 801d6d8:	00db      	lsls	r3, r3, #3
 801d6da:	440b      	add	r3, r1
 801d6dc:	3314      	adds	r3, #20
 801d6de:	781b      	ldrb	r3, [r3, #0]
 801d6e0:	2b01      	cmp	r3, #1
 801d6e2:	d806      	bhi.n	801d6f2 <etharp_query+0x102>
 801d6e4:	4b69      	ldr	r3, [pc, #420]	@ (801d88c <etharp_query+0x29c>)
 801d6e6:	f240 32c7 	movw	r2, #967	@ 0x3c7
 801d6ea:	4969      	ldr	r1, [pc, #420]	@ (801d890 <etharp_query+0x2a0>)
 801d6ec:	4869      	ldr	r0, [pc, #420]	@ (801d894 <etharp_query+0x2a4>)
 801d6ee:	f002 fed7 	bl	80204a0 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801d6f2:	6a3b      	ldr	r3, [r7, #32]
 801d6f4:	2b00      	cmp	r3, #0
 801d6f6:	d102      	bne.n	801d6fe <etharp_query+0x10e>
 801d6f8:	687b      	ldr	r3, [r7, #4]
 801d6fa:	2b00      	cmp	r3, #0
 801d6fc:	d10c      	bne.n	801d718 <etharp_query+0x128>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801d6fe:	68b9      	ldr	r1, [r7, #8]
 801d700:	68f8      	ldr	r0, [r7, #12]
 801d702:	f000 f98b 	bl	801da1c <etharp_request>
 801d706:	4603      	mov	r3, r0
 801d708:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801d70c:	687b      	ldr	r3, [r7, #4]
 801d70e:	2b00      	cmp	r3, #0
 801d710:	d102      	bne.n	801d718 <etharp_query+0x128>
      return result;
 801d712:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801d716:	e0b0      	b.n	801d87a <etharp_query+0x28a>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801d718:	687b      	ldr	r3, [r7, #4]
 801d71a:	2b00      	cmp	r3, #0
 801d71c:	d106      	bne.n	801d72c <etharp_query+0x13c>
 801d71e:	4b5b      	ldr	r3, [pc, #364]	@ (801d88c <etharp_query+0x29c>)
 801d720:	f240 32db 	movw	r2, #987	@ 0x3db
 801d724:	495c      	ldr	r1, [pc, #368]	@ (801d898 <etharp_query+0x2a8>)
 801d726:	485b      	ldr	r0, [pc, #364]	@ (801d894 <etharp_query+0x2a4>)
 801d728:	f002 feba 	bl	80204a0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801d72c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801d730:	4955      	ldr	r1, [pc, #340]	@ (801d888 <etharp_query+0x298>)
 801d732:	4613      	mov	r3, r2
 801d734:	005b      	lsls	r3, r3, #1
 801d736:	4413      	add	r3, r2
 801d738:	00db      	lsls	r3, r3, #3
 801d73a:	440b      	add	r3, r1
 801d73c:	3314      	adds	r3, #20
 801d73e:	781b      	ldrb	r3, [r3, #0]
 801d740:	2b01      	cmp	r3, #1
 801d742:	d918      	bls.n	801d776 <etharp_query+0x186>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 801d744:	7cfa      	ldrb	r2, [r7, #19]
 801d746:	4b55      	ldr	r3, [pc, #340]	@ (801d89c <etharp_query+0x2ac>)
 801d748:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801d74a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801d74e:	4613      	mov	r3, r2
 801d750:	005b      	lsls	r3, r3, #1
 801d752:	4413      	add	r3, r2
 801d754:	00db      	lsls	r3, r3, #3
 801d756:	3308      	adds	r3, #8
 801d758:	4a4b      	ldr	r2, [pc, #300]	@ (801d888 <etharp_query+0x298>)
 801d75a:	4413      	add	r3, r2
 801d75c:	3304      	adds	r3, #4
 801d75e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801d762:	9200      	str	r2, [sp, #0]
 801d764:	697a      	ldr	r2, [r7, #20]
 801d766:	6879      	ldr	r1, [r7, #4]
 801d768:	68f8      	ldr	r0, [r7, #12]
 801d76a:	f002 f865 	bl	801f838 <ethernet_output>
 801d76e:	4603      	mov	r3, r0
 801d770:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801d774:	e07f      	b.n	801d876 <etharp_query+0x286>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801d776:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801d77a:	4943      	ldr	r1, [pc, #268]	@ (801d888 <etharp_query+0x298>)
 801d77c:	4613      	mov	r3, r2
 801d77e:	005b      	lsls	r3, r3, #1
 801d780:	4413      	add	r3, r2
 801d782:	00db      	lsls	r3, r3, #3
 801d784:	440b      	add	r3, r1
 801d786:	3314      	adds	r3, #20
 801d788:	781b      	ldrb	r3, [r3, #0]
 801d78a:	2b01      	cmp	r3, #1
 801d78c:	d173      	bne.n	801d876 <etharp_query+0x286>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801d78e:	2300      	movs	r3, #0
 801d790:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 801d792:	687b      	ldr	r3, [r7, #4]
 801d794:	61fb      	str	r3, [r7, #28]
    while (p) {
 801d796:	e01a      	b.n	801d7ce <etharp_query+0x1de>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801d798:	69fb      	ldr	r3, [r7, #28]
 801d79a:	895a      	ldrh	r2, [r3, #10]
 801d79c:	69fb      	ldr	r3, [r7, #28]
 801d79e:	891b      	ldrh	r3, [r3, #8]
 801d7a0:	429a      	cmp	r2, r3
 801d7a2:	d10a      	bne.n	801d7ba <etharp_query+0x1ca>
 801d7a4:	69fb      	ldr	r3, [r7, #28]
 801d7a6:	681b      	ldr	r3, [r3, #0]
 801d7a8:	2b00      	cmp	r3, #0
 801d7aa:	d006      	beq.n	801d7ba <etharp_query+0x1ca>
 801d7ac:	4b37      	ldr	r3, [pc, #220]	@ (801d88c <etharp_query+0x29c>)
 801d7ae:	f44f 727b 	mov.w	r2, #1004	@ 0x3ec
 801d7b2:	493b      	ldr	r1, [pc, #236]	@ (801d8a0 <etharp_query+0x2b0>)
 801d7b4:	4837      	ldr	r0, [pc, #220]	@ (801d894 <etharp_query+0x2a4>)
 801d7b6:	f002 fe73 	bl	80204a0 <iprintf>
      if (p->type != PBUF_ROM) {
 801d7ba:	69fb      	ldr	r3, [r7, #28]
 801d7bc:	7b1b      	ldrb	r3, [r3, #12]
 801d7be:	2b01      	cmp	r3, #1
 801d7c0:	d002      	beq.n	801d7c8 <etharp_query+0x1d8>
        copy_needed = 1;
 801d7c2:	2301      	movs	r3, #1
 801d7c4:	61bb      	str	r3, [r7, #24]
        break;
 801d7c6:	e005      	b.n	801d7d4 <etharp_query+0x1e4>
      }
      p = p->next;
 801d7c8:	69fb      	ldr	r3, [r7, #28]
 801d7ca:	681b      	ldr	r3, [r3, #0]
 801d7cc:	61fb      	str	r3, [r7, #28]
    while (p) {
 801d7ce:	69fb      	ldr	r3, [r7, #28]
 801d7d0:	2b00      	cmp	r3, #0
 801d7d2:	d1e1      	bne.n	801d798 <etharp_query+0x1a8>
    }
    if (copy_needed) {
 801d7d4:	69bb      	ldr	r3, [r7, #24]
 801d7d6:	2b00      	cmp	r3, #0
 801d7d8:	d017      	beq.n	801d80a <etharp_query+0x21a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 801d7da:	69fb      	ldr	r3, [r7, #28]
 801d7dc:	891b      	ldrh	r3, [r3, #8]
 801d7de:	2200      	movs	r2, #0
 801d7e0:	4619      	mov	r1, r3
 801d7e2:	2002      	movs	r0, #2
 801d7e4:	f7f6 fafc 	bl	8013de0 <pbuf_alloc>
 801d7e8:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 801d7ea:	69fb      	ldr	r3, [r7, #28]
 801d7ec:	2b00      	cmp	r3, #0
 801d7ee:	d011      	beq.n	801d814 <etharp_query+0x224>
        if (pbuf_copy(p, q) != ERR_OK) {
 801d7f0:	6879      	ldr	r1, [r7, #4]
 801d7f2:	69f8      	ldr	r0, [r7, #28]
 801d7f4:	f7f6 ff9e 	bl	8014734 <pbuf_copy>
 801d7f8:	4603      	mov	r3, r0
 801d7fa:	2b00      	cmp	r3, #0
 801d7fc:	d00a      	beq.n	801d814 <etharp_query+0x224>
          pbuf_free(p);
 801d7fe:	69f8      	ldr	r0, [r7, #28]
 801d800:	f7f6 fe66 	bl	80144d0 <pbuf_free>
          p = NULL;
 801d804:	2300      	movs	r3, #0
 801d806:	61fb      	str	r3, [r7, #28]
 801d808:	e004      	b.n	801d814 <etharp_query+0x224>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801d80a:	687b      	ldr	r3, [r7, #4]
 801d80c:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801d80e:	69f8      	ldr	r0, [r7, #28]
 801d810:	f7f6 ff08 	bl	8014624 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801d814:	69fb      	ldr	r3, [r7, #28]
 801d816:	2b00      	cmp	r3, #0
 801d818:	d024      	beq.n	801d864 <etharp_query+0x274>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801d81a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801d81e:	491a      	ldr	r1, [pc, #104]	@ (801d888 <etharp_query+0x298>)
 801d820:	4613      	mov	r3, r2
 801d822:	005b      	lsls	r3, r3, #1
 801d824:	4413      	add	r3, r2
 801d826:	00db      	lsls	r3, r3, #3
 801d828:	440b      	add	r3, r1
 801d82a:	681b      	ldr	r3, [r3, #0]
 801d82c:	2b00      	cmp	r3, #0
 801d82e:	d00b      	beq.n	801d848 <etharp_query+0x258>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 801d830:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801d834:	4914      	ldr	r1, [pc, #80]	@ (801d888 <etharp_query+0x298>)
 801d836:	4613      	mov	r3, r2
 801d838:	005b      	lsls	r3, r3, #1
 801d83a:	4413      	add	r3, r2
 801d83c:	00db      	lsls	r3, r3, #3
 801d83e:	440b      	add	r3, r1
 801d840:	681b      	ldr	r3, [r3, #0]
 801d842:	4618      	mov	r0, r3
 801d844:	f7f6 fe44 	bl	80144d0 <pbuf_free>
      }
      arp_table[i].q = p;
 801d848:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801d84c:	490e      	ldr	r1, [pc, #56]	@ (801d888 <etharp_query+0x298>)
 801d84e:	4613      	mov	r3, r2
 801d850:	005b      	lsls	r3, r3, #1
 801d852:	4413      	add	r3, r2
 801d854:	00db      	lsls	r3, r3, #3
 801d856:	440b      	add	r3, r1
 801d858:	69fa      	ldr	r2, [r7, #28]
 801d85a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801d85c:	2300      	movs	r3, #0
 801d85e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801d862:	e008      	b.n	801d876 <etharp_query+0x286>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
 801d864:	4b07      	ldr	r3, [pc, #28]	@ (801d884 <etharp_query+0x294>)
 801d866:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801d868:	3301      	adds	r3, #1
 801d86a:	b29a      	uxth	r2, r3
 801d86c:	4b05      	ldr	r3, [pc, #20]	@ (801d884 <etharp_query+0x294>)
 801d86e:	849a      	strh	r2, [r3, #36]	@ 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801d870:	23ff      	movs	r3, #255	@ 0xff
 801d872:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801d876:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801d87a:	4618      	mov	r0, r3
 801d87c:	3728      	adds	r7, #40	@ 0x28
 801d87e:	46bd      	mov	sp, r7
 801d880:	bd80      	pop	{r7, pc}
 801d882:	bf00      	nop
 801d884:	2000db84 	.word	0x2000db84
 801d888:	2000ddb0 	.word	0x2000ddb0
 801d88c:	080258a8 	.word	0x080258a8
 801d890:	08025a54 	.word	0x08025a54
 801d894:	08025920 	.word	0x08025920
 801d898:	08025a48 	.word	0x08025a48
 801d89c:	2000dea0 	.word	0x2000dea0
 801d8a0:	08025a7c 	.word	0x08025a7c

0801d8a4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801d8a4:	b580      	push	{r7, lr}
 801d8a6:	b08a      	sub	sp, #40	@ 0x28
 801d8a8:	af02      	add	r7, sp, #8
 801d8aa:	60f8      	str	r0, [r7, #12]
 801d8ac:	60b9      	str	r1, [r7, #8]
 801d8ae:	607a      	str	r2, [r7, #4]
 801d8b0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801d8b2:	2300      	movs	r3, #0
 801d8b4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801d8b6:	68fb      	ldr	r3, [r7, #12]
 801d8b8:	2b00      	cmp	r3, #0
 801d8ba:	d106      	bne.n	801d8ca <etharp_raw+0x26>
 801d8bc:	4b40      	ldr	r3, [pc, #256]	@ (801d9c0 <etharp_raw+0x11c>)
 801d8be:	f44f 628b 	mov.w	r2, #1112	@ 0x458
 801d8c2:	4940      	ldr	r1, [pc, #256]	@ (801d9c4 <etharp_raw+0x120>)
 801d8c4:	4840      	ldr	r0, [pc, #256]	@ (801d9c8 <etharp_raw+0x124>)
 801d8c6:	f002 fdeb 	bl	80204a0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801d8ca:	2200      	movs	r2, #0
 801d8cc:	211c      	movs	r1, #28
 801d8ce:	2002      	movs	r0, #2
 801d8d0:	f7f6 fa86 	bl	8013de0 <pbuf_alloc>
 801d8d4:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801d8d6:	69bb      	ldr	r3, [r7, #24]
 801d8d8:	2b00      	cmp	r3, #0
 801d8da:	d108      	bne.n	801d8ee <etharp_raw+0x4a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
 801d8dc:	4b3b      	ldr	r3, [pc, #236]	@ (801d9cc <etharp_raw+0x128>)
 801d8de:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801d8e0:	3301      	adds	r3, #1
 801d8e2:	b29a      	uxth	r2, r3
 801d8e4:	4b39      	ldr	r3, [pc, #228]	@ (801d9cc <etharp_raw+0x128>)
 801d8e6:	849a      	strh	r2, [r3, #36]	@ 0x24
    return ERR_MEM;
 801d8e8:	f04f 33ff 	mov.w	r3, #4294967295
 801d8ec:	e063      	b.n	801d9b6 <etharp_raw+0x112>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801d8ee:	69bb      	ldr	r3, [r7, #24]
 801d8f0:	895b      	ldrh	r3, [r3, #10]
 801d8f2:	2b1b      	cmp	r3, #27
 801d8f4:	d806      	bhi.n	801d904 <etharp_raw+0x60>
 801d8f6:	4b32      	ldr	r3, [pc, #200]	@ (801d9c0 <etharp_raw+0x11c>)
 801d8f8:	f240 4263 	movw	r2, #1123	@ 0x463
 801d8fc:	4934      	ldr	r1, [pc, #208]	@ (801d9d0 <etharp_raw+0x12c>)
 801d8fe:	4832      	ldr	r0, [pc, #200]	@ (801d9c8 <etharp_raw+0x124>)
 801d900:	f002 fdce 	bl	80204a0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801d904:	69bb      	ldr	r3, [r7, #24]
 801d906:	685b      	ldr	r3, [r3, #4]
 801d908:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801d90a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801d90c:	4618      	mov	r0, r3
 801d90e:	f7f5 fb87 	bl	8013020 <lwip_htons>
 801d912:	4603      	mov	r3, r0
 801d914:	461a      	mov	r2, r3
 801d916:	697b      	ldr	r3, [r7, #20]
 801d918:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801d91a:	68fb      	ldr	r3, [r7, #12]
 801d91c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801d920:	2b06      	cmp	r3, #6
 801d922:	d006      	beq.n	801d932 <etharp_raw+0x8e>
 801d924:	4b26      	ldr	r3, [pc, #152]	@ (801d9c0 <etharp_raw+0x11c>)
 801d926:	f240 426a 	movw	r2, #1130	@ 0x46a
 801d92a:	492a      	ldr	r1, [pc, #168]	@ (801d9d4 <etharp_raw+0x130>)
 801d92c:	4826      	ldr	r0, [pc, #152]	@ (801d9c8 <etharp_raw+0x124>)
 801d92e:	f002 fdb7 	bl	80204a0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 801d932:	697b      	ldr	r3, [r7, #20]
 801d934:	3308      	adds	r3, #8
 801d936:	2206      	movs	r2, #6
 801d938:	6839      	ldr	r1, [r7, #0]
 801d93a:	4618      	mov	r0, r3
 801d93c:	f003 f845 	bl	80209ca <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 801d940:	697b      	ldr	r3, [r7, #20]
 801d942:	3312      	adds	r3, #18
 801d944:	2206      	movs	r2, #6
 801d946:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801d948:	4618      	mov	r0, r3
 801d94a:	f003 f83e 	bl	80209ca <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 801d94e:	697b      	ldr	r3, [r7, #20]
 801d950:	330e      	adds	r3, #14
 801d952:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d954:	6812      	ldr	r2, [r2, #0]
 801d956:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 801d958:	697b      	ldr	r3, [r7, #20]
 801d95a:	3318      	adds	r3, #24
 801d95c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801d95e:	6812      	ldr	r2, [r2, #0]
 801d960:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 801d962:	697b      	ldr	r3, [r7, #20]
 801d964:	2200      	movs	r2, #0
 801d966:	701a      	strb	r2, [r3, #0]
 801d968:	2200      	movs	r2, #0
 801d96a:	f042 0201 	orr.w	r2, r2, #1
 801d96e:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801d970:	697b      	ldr	r3, [r7, #20]
 801d972:	2200      	movs	r2, #0
 801d974:	f042 0208 	orr.w	r2, r2, #8
 801d978:	709a      	strb	r2, [r3, #2]
 801d97a:	2200      	movs	r2, #0
 801d97c:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801d97e:	697b      	ldr	r3, [r7, #20]
 801d980:	2206      	movs	r2, #6
 801d982:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801d984:	697b      	ldr	r3, [r7, #20]
 801d986:	2204      	movs	r2, #4
 801d988:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801d98a:	f640 0306 	movw	r3, #2054	@ 0x806
 801d98e:	9300      	str	r3, [sp, #0]
 801d990:	687b      	ldr	r3, [r7, #4]
 801d992:	68ba      	ldr	r2, [r7, #8]
 801d994:	69b9      	ldr	r1, [r7, #24]
 801d996:	68f8      	ldr	r0, [r7, #12]
 801d998:	f001 ff4e 	bl	801f838 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 801d99c:	4b0b      	ldr	r3, [pc, #44]	@ (801d9cc <etharp_raw+0x128>)
 801d99e:	8b1b      	ldrh	r3, [r3, #24]
 801d9a0:	3301      	adds	r3, #1
 801d9a2:	b29a      	uxth	r2, r3
 801d9a4:	4b09      	ldr	r3, [pc, #36]	@ (801d9cc <etharp_raw+0x128>)
 801d9a6:	831a      	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
 801d9a8:	69b8      	ldr	r0, [r7, #24]
 801d9aa:	f7f6 fd91 	bl	80144d0 <pbuf_free>
  p = NULL;
 801d9ae:	2300      	movs	r3, #0
 801d9b0:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801d9b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d9b6:	4618      	mov	r0, r3
 801d9b8:	3720      	adds	r7, #32
 801d9ba:	46bd      	mov	sp, r7
 801d9bc:	bd80      	pop	{r7, pc}
 801d9be:	bf00      	nop
 801d9c0:	080258a8 	.word	0x080258a8
 801d9c4:	080259f8 	.word	0x080259f8
 801d9c8:	08025920 	.word	0x08025920
 801d9cc:	2000db84 	.word	0x2000db84
 801d9d0:	08025a98 	.word	0x08025a98
 801d9d4:	08025acc 	.word	0x08025acc

0801d9d8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 801d9d8:	b580      	push	{r7, lr}
 801d9da:	b088      	sub	sp, #32
 801d9dc:	af04      	add	r7, sp, #16
 801d9de:	60f8      	str	r0, [r7, #12]
 801d9e0:	60b9      	str	r1, [r7, #8]
 801d9e2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d9e4:	68fb      	ldr	r3, [r7, #12]
 801d9e6:	f103 012d 	add.w	r1, r3, #45	@ 0x2d
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801d9ea:	68fb      	ldr	r3, [r7, #12]
 801d9ec:	f103 002d 	add.w	r0, r3, #45	@ 0x2d
 801d9f0:	68fb      	ldr	r3, [r7, #12]
 801d9f2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d9f4:	2201      	movs	r2, #1
 801d9f6:	9203      	str	r2, [sp, #12]
 801d9f8:	68ba      	ldr	r2, [r7, #8]
 801d9fa:	9202      	str	r2, [sp, #8]
 801d9fc:	4a06      	ldr	r2, [pc, #24]	@ (801da18 <etharp_request_dst+0x40>)
 801d9fe:	9201      	str	r2, [sp, #4]
 801da00:	9300      	str	r3, [sp, #0]
 801da02:	4603      	mov	r3, r0
 801da04:	687a      	ldr	r2, [r7, #4]
 801da06:	68f8      	ldr	r0, [r7, #12]
 801da08:	f7ff ff4c 	bl	801d8a4 <etharp_raw>
 801da0c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801da0e:	4618      	mov	r0, r3
 801da10:	3710      	adds	r7, #16
 801da12:	46bd      	mov	sp, r7
 801da14:	bd80      	pop	{r7, pc}
 801da16:	bf00      	nop
 801da18:	0802f060 	.word	0x0802f060

0801da1c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801da1c:	b580      	push	{r7, lr}
 801da1e:	b082      	sub	sp, #8
 801da20:	af00      	add	r7, sp, #0
 801da22:	6078      	str	r0, [r7, #4]
 801da24:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801da26:	4a05      	ldr	r2, [pc, #20]	@ (801da3c <etharp_request+0x20>)
 801da28:	6839      	ldr	r1, [r7, #0]
 801da2a:	6878      	ldr	r0, [r7, #4]
 801da2c:	f7ff ffd4 	bl	801d9d8 <etharp_request_dst>
 801da30:	4603      	mov	r3, r0
}
 801da32:	4618      	mov	r0, r3
 801da34:	3708      	adds	r7, #8
 801da36:	46bd      	mov	sp, r7
 801da38:	bd80      	pop	{r7, pc}
 801da3a:	bf00      	nop
 801da3c:	0802f058 	.word	0x0802f058

0801da40 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801da40:	b580      	push	{r7, lr}
 801da42:	b08e      	sub	sp, #56	@ 0x38
 801da44:	af04      	add	r7, sp, #16
 801da46:	6078      	str	r0, [r7, #4]
 801da48:	6039      	str	r1, [r7, #0]
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
 801da4a:	4baa      	ldr	r3, [pc, #680]	@ (801dcf4 <icmp_input+0x2b4>)
 801da4c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801da50:	3301      	adds	r3, #1
 801da52:	b29a      	uxth	r2, r3
 801da54:	4ba7      	ldr	r3, [pc, #668]	@ (801dcf4 <icmp_input+0x2b4>)
 801da56:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);
 801da5a:	4ba6      	ldr	r3, [pc, #664]	@ (801dcf4 <icmp_input+0x2b4>)
 801da5c:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 801da60:	3301      	adds	r3, #1
 801da62:	4aa4      	ldr	r2, [pc, #656]	@ (801dcf4 <icmp_input+0x2b4>)
 801da64:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c

  iphdr_in = ip4_current_header();
 801da68:	4ba3      	ldr	r3, [pc, #652]	@ (801dcf8 <icmp_input+0x2b8>)
 801da6a:	689b      	ldr	r3, [r3, #8]
 801da6c:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 801da6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801da70:	781b      	ldrb	r3, [r3, #0]
 801da72:	f003 030f 	and.w	r3, r3, #15
 801da76:	b29b      	uxth	r3, r3
 801da78:	009b      	lsls	r3, r3, #2
 801da7a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801da7c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801da7e:	2b13      	cmp	r3, #19
 801da80:	f240 817f 	bls.w	801dd82 <icmp_input+0x342>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 801da84:	687b      	ldr	r3, [r7, #4]
 801da86:	895b      	ldrh	r3, [r3, #10]
 801da88:	2b03      	cmp	r3, #3
 801da8a:	f240 817c 	bls.w	801dd86 <icmp_input+0x346>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801da8e:	687b      	ldr	r3, [r7, #4]
 801da90:	685b      	ldr	r3, [r3, #4]
 801da92:	781b      	ldrb	r3, [r3, #0]
 801da94:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 801da98:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801da9c:	2b00      	cmp	r3, #0
 801da9e:	d002      	beq.n	801daa6 <icmp_input+0x66>
 801daa0:	2b08      	cmp	r3, #8
 801daa2:	d008      	beq.n	801dab6 <icmp_input+0x76>
 801daa4:	e0dd      	b.n	801dc62 <icmp_input+0x222>
  case ICMP_ER:
    /* This is OK, echo reply might have been parsed by a raw PCB
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
 801daa6:	4b93      	ldr	r3, [pc, #588]	@ (801dcf4 <icmp_input+0x2b4>)
 801daa8:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 801daac:	3301      	adds	r3, #1
 801daae:	4a91      	ldr	r2, [pc, #580]	@ (801dcf4 <icmp_input+0x2b4>)
 801dab0:	f8c2 316c 	str.w	r3, [r2, #364]	@ 0x16c
    break;
 801dab4:	e161      	b.n	801dd7a <icmp_input+0x33a>
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
 801dab6:	4b8f      	ldr	r3, [pc, #572]	@ (801dcf4 <icmp_input+0x2b4>)
 801dab8:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 801dabc:	3301      	adds	r3, #1
 801dabe:	4a8d      	ldr	r2, [pc, #564]	@ (801dcf4 <icmp_input+0x2b4>)
 801dac0:	f8c2 3168 	str.w	r3, [r2, #360]	@ 0x168
    src = ip4_current_dest_addr();
 801dac4:	4b8d      	ldr	r3, [pc, #564]	@ (801dcfc <icmp_input+0x2bc>)
 801dac6:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801dac8:	4b8b      	ldr	r3, [pc, #556]	@ (801dcf8 <icmp_input+0x2b8>)
 801daca:	695b      	ldr	r3, [r3, #20]
 801dacc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801dad0:	2be0      	cmp	r3, #224	@ 0xe0
 801dad2:	f000 816e 	beq.w	801ddb2 <icmp_input+0x372>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801dad6:	4b88      	ldr	r3, [pc, #544]	@ (801dcf8 <icmp_input+0x2b8>)
 801dad8:	695b      	ldr	r3, [r3, #20]
 801dada:	4a87      	ldr	r2, [pc, #540]	@ (801dcf8 <icmp_input+0x2b8>)
 801dadc:	6812      	ldr	r2, [r2, #0]
 801dade:	4611      	mov	r1, r2
 801dae0:	4618      	mov	r0, r3
 801dae2:	f000 fd9b 	bl	801e61c <ip4_addr_isbroadcast_u32>
 801dae6:	4603      	mov	r3, r0
 801dae8:	2b00      	cmp	r3, #0
 801daea:	f040 8164 	bne.w	801ddb6 <icmp_input+0x376>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801daee:	687b      	ldr	r3, [r7, #4]
 801daf0:	891b      	ldrh	r3, [r3, #8]
 801daf2:	2b07      	cmp	r3, #7
 801daf4:	f240 8149 	bls.w	801dd8a <icmp_input+0x34a>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 801daf8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801dafa:	330e      	adds	r3, #14
 801dafc:	b29b      	uxth	r3, r3
 801dafe:	b21b      	sxth	r3, r3
 801db00:	4619      	mov	r1, r3
 801db02:	6878      	ldr	r0, [r7, #4]
 801db04:	f7f6 fcc0 	bl	8014488 <pbuf_header>
 801db08:	4603      	mov	r3, r0
 801db0a:	2b00      	cmp	r3, #0
 801db0c:	d046      	beq.n	801db9c <icmp_input+0x15c>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 801db0e:	687b      	ldr	r3, [r7, #4]
 801db10:	891a      	ldrh	r2, [r3, #8]
 801db12:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801db14:	4413      	add	r3, r2
 801db16:	b29b      	uxth	r3, r3
 801db18:	2200      	movs	r2, #0
 801db1a:	4619      	mov	r1, r3
 801db1c:	2002      	movs	r0, #2
 801db1e:	f7f6 f95f 	bl	8013de0 <pbuf_alloc>
 801db22:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 801db24:	69bb      	ldr	r3, [r7, #24]
 801db26:	2b00      	cmp	r3, #0
 801db28:	f000 8147 	beq.w	801ddba <icmp_input+0x37a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801db2c:	69bb      	ldr	r3, [r7, #24]
 801db2e:	895b      	ldrh	r3, [r3, #10]
 801db30:	461a      	mov	r2, r3
 801db32:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801db34:	3308      	adds	r3, #8
 801db36:	429a      	cmp	r2, r3
 801db38:	d203      	bcs.n	801db42 <icmp_input+0x102>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 801db3a:	69b8      	ldr	r0, [r7, #24]
 801db3c:	f7f6 fcc8 	bl	80144d0 <pbuf_free>
        goto icmperr;
 801db40:	e13c      	b.n	801ddbc <icmp_input+0x37c>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 801db42:	69bb      	ldr	r3, [r7, #24]
 801db44:	685b      	ldr	r3, [r3, #4]
 801db46:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801db48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801db4a:	4618      	mov	r0, r3
 801db4c:	f002 ff3d 	bl	80209ca <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 801db50:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801db52:	425b      	negs	r3, r3
 801db54:	b29b      	uxth	r3, r3
 801db56:	b21b      	sxth	r3, r3
 801db58:	4619      	mov	r1, r3
 801db5a:	69b8      	ldr	r0, [r7, #24]
 801db5c:	f7f6 fc94 	bl	8014488 <pbuf_header>
 801db60:	4603      	mov	r3, r0
 801db62:	2b00      	cmp	r3, #0
 801db64:	d009      	beq.n	801db7a <icmp_input+0x13a>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801db66:	4b66      	ldr	r3, [pc, #408]	@ (801dd00 <icmp_input+0x2c0>)
 801db68:	22af      	movs	r2, #175	@ 0xaf
 801db6a:	4966      	ldr	r1, [pc, #408]	@ (801dd04 <icmp_input+0x2c4>)
 801db6c:	4866      	ldr	r0, [pc, #408]	@ (801dd08 <icmp_input+0x2c8>)
 801db6e:	f002 fc97 	bl	80204a0 <iprintf>
        pbuf_free(r);
 801db72:	69b8      	ldr	r0, [r7, #24]
 801db74:	f7f6 fcac 	bl	80144d0 <pbuf_free>
        goto icmperr;
 801db78:	e120      	b.n	801ddbc <icmp_input+0x37c>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 801db7a:	6879      	ldr	r1, [r7, #4]
 801db7c:	69b8      	ldr	r0, [r7, #24]
 801db7e:	f7f6 fdd9 	bl	8014734 <pbuf_copy>
 801db82:	4603      	mov	r3, r0
 801db84:	2b00      	cmp	r3, #0
 801db86:	d003      	beq.n	801db90 <icmp_input+0x150>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 801db88:	69b8      	ldr	r0, [r7, #24]
 801db8a:	f7f6 fca1 	bl	80144d0 <pbuf_free>
        goto icmperr;
 801db8e:	e115      	b.n	801ddbc <icmp_input+0x37c>
      }
      /* free the original p */
      pbuf_free(p);
 801db90:	6878      	ldr	r0, [r7, #4]
 801db92:	f7f6 fc9d 	bl	80144d0 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 801db96:	69bb      	ldr	r3, [r7, #24]
 801db98:	607b      	str	r3, [r7, #4]
 801db9a:	e015      	b.n	801dbc8 <icmp_input+0x188>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 801db9c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801db9e:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 801dba2:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 801dba6:	33f2      	adds	r3, #242	@ 0xf2
 801dba8:	b29b      	uxth	r3, r3
 801dbaa:	b21b      	sxth	r3, r3
 801dbac:	4619      	mov	r1, r3
 801dbae:	6878      	ldr	r0, [r7, #4]
 801dbb0:	f7f6 fc6a 	bl	8014488 <pbuf_header>
 801dbb4:	4603      	mov	r3, r0
 801dbb6:	2b00      	cmp	r3, #0
 801dbb8:	d006      	beq.n	801dbc8 <icmp_input+0x188>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801dbba:	4b51      	ldr	r3, [pc, #324]	@ (801dd00 <icmp_input+0x2c0>)
 801dbbc:	22c0      	movs	r2, #192	@ 0xc0
 801dbbe:	4953      	ldr	r1, [pc, #332]	@ (801dd0c <icmp_input+0x2cc>)
 801dbc0:	4851      	ldr	r0, [pc, #324]	@ (801dd08 <icmp_input+0x2c8>)
 801dbc2:	f002 fc6d 	bl	80204a0 <iprintf>
        goto icmperr;
 801dbc6:	e0f9      	b.n	801ddbc <icmp_input+0x37c>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 801dbc8:	687b      	ldr	r3, [r7, #4]
 801dbca:	685b      	ldr	r3, [r3, #4]
 801dbcc:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 801dbce:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801dbd2:	4619      	mov	r1, r3
 801dbd4:	6878      	ldr	r0, [r7, #4]
 801dbd6:	f7f6 fc57 	bl	8014488 <pbuf_header>
 801dbda:	4603      	mov	r3, r0
 801dbdc:	2b00      	cmp	r3, #0
 801dbde:	f040 80cb 	bne.w	801dd78 <icmp_input+0x338>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 801dbe2:	687b      	ldr	r3, [r7, #4]
 801dbe4:	685b      	ldr	r3, [r3, #4]
 801dbe6:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 801dbe8:	69fb      	ldr	r3, [r7, #28]
 801dbea:	681a      	ldr	r2, [r3, #0]
 801dbec:	693b      	ldr	r3, [r7, #16]
 801dbee:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801dbf0:	4b41      	ldr	r3, [pc, #260]	@ (801dcf8 <icmp_input+0x2b8>)
 801dbf2:	691a      	ldr	r2, [r3, #16]
 801dbf4:	693b      	ldr	r3, [r7, #16]
 801dbf6:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 801dbf8:	697b      	ldr	r3, [r7, #20]
 801dbfa:	2200      	movs	r2, #0
 801dbfc:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 801dbfe:	697b      	ldr	r3, [r7, #20]
 801dc00:	2200      	movs	r2, #0
 801dc02:	709a      	strb	r2, [r3, #2]
 801dc04:	2200      	movs	r2, #0
 801dc06:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 801dc08:	693b      	ldr	r3, [r7, #16]
 801dc0a:	22ff      	movs	r2, #255	@ 0xff
 801dc0c:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 801dc0e:	693b      	ldr	r3, [r7, #16]
 801dc10:	2200      	movs	r2, #0
 801dc12:	729a      	strb	r2, [r3, #10]
 801dc14:	2200      	movs	r2, #0
 801dc16:	72da      	strb	r2, [r3, #11]
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
        IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
      }
#endif /* CHECKSUM_GEN_IP */

      ICMP_STATS_INC(icmp.xmit);
 801dc18:	4b36      	ldr	r3, [pc, #216]	@ (801dcf4 <icmp_input+0x2b4>)
 801dc1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801dc1e:	3301      	adds	r3, #1
 801dc20:	b29a      	uxth	r2, r3
 801dc22:	4b34      	ldr	r3, [pc, #208]	@ (801dcf4 <icmp_input+0x2b4>)
 801dc24:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* increase number of messages attempted to send */
      MIB2_STATS_INC(mib2.icmpoutmsgs);
 801dc28:	4b32      	ldr	r3, [pc, #200]	@ (801dcf4 <icmp_input+0x2b4>)
 801dc2a:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 801dc2e:	3301      	adds	r3, #1
 801dc30:	4a30      	ldr	r2, [pc, #192]	@ (801dcf4 <icmp_input+0x2b4>)
 801dc32:	f8c2 3180 	str.w	r3, [r2, #384]	@ 0x180
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);
 801dc36:	4b2f      	ldr	r3, [pc, #188]	@ (801dcf4 <icmp_input+0x2b4>)
 801dc38:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 801dc3c:	3301      	adds	r3, #1
 801dc3e:	4a2d      	ldr	r2, [pc, #180]	@ (801dcf4 <icmp_input+0x2b4>)
 801dc40:	f8c2 3194 	str.w	r3, [r2, #404]	@ 0x194

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801dc44:	683b      	ldr	r3, [r7, #0]
 801dc46:	9302      	str	r3, [sp, #8]
 801dc48:	2301      	movs	r3, #1
 801dc4a:	9301      	str	r3, [sp, #4]
 801dc4c:	2300      	movs	r3, #0
 801dc4e:	9300      	str	r3, [sp, #0]
 801dc50:	23ff      	movs	r3, #255	@ 0xff
 801dc52:	2200      	movs	r2, #0
 801dc54:	69f9      	ldr	r1, [r7, #28]
 801dc56:	6878      	ldr	r0, [r7, #4]
 801dc58:	f000 fbee 	bl	801e438 <ip4_output_if>
 801dc5c:	4603      	mov	r3, r0
 801dc5e:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 801dc60:	e08a      	b.n	801dd78 <icmp_input+0x338>
  default:
    if (type == ICMP_DUR) {
 801dc62:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801dc66:	2b03      	cmp	r3, #3
 801dc68:	d107      	bne.n	801dc7a <icmp_input+0x23a>
      MIB2_STATS_INC(mib2.icmpindestunreachs);
 801dc6a:	4b22      	ldr	r3, [pc, #136]	@ (801dcf4 <icmp_input+0x2b4>)
 801dc6c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 801dc70:	3301      	adds	r3, #1
 801dc72:	4a20      	ldr	r2, [pc, #128]	@ (801dcf4 <icmp_input+0x2b4>)
 801dc74:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 801dc78:	e06d      	b.n	801dd56 <icmp_input+0x316>
    } else if (type == ICMP_TE) {
 801dc7a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801dc7e:	2b0b      	cmp	r3, #11
 801dc80:	d107      	bne.n	801dc92 <icmp_input+0x252>
      MIB2_STATS_INC(mib2.icmpintimeexcds);
 801dc82:	4b1c      	ldr	r3, [pc, #112]	@ (801dcf4 <icmp_input+0x2b4>)
 801dc84:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 801dc88:	3301      	adds	r3, #1
 801dc8a:	4a1a      	ldr	r2, [pc, #104]	@ (801dcf4 <icmp_input+0x2b4>)
 801dc8c:	f8c2 3158 	str.w	r3, [r2, #344]	@ 0x158
 801dc90:	e061      	b.n	801dd56 <icmp_input+0x316>
    } else if (type == ICMP_PP) {
 801dc92:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801dc96:	2b0c      	cmp	r3, #12
 801dc98:	d107      	bne.n	801dcaa <icmp_input+0x26a>
      MIB2_STATS_INC(mib2.icmpinparmprobs);
 801dc9a:	4b16      	ldr	r3, [pc, #88]	@ (801dcf4 <icmp_input+0x2b4>)
 801dc9c:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 801dca0:	3301      	adds	r3, #1
 801dca2:	4a14      	ldr	r2, [pc, #80]	@ (801dcf4 <icmp_input+0x2b4>)
 801dca4:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
 801dca8:	e055      	b.n	801dd56 <icmp_input+0x316>
    } else if (type == ICMP_SQ) {
 801dcaa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801dcae:	2b04      	cmp	r3, #4
 801dcb0:	d107      	bne.n	801dcc2 <icmp_input+0x282>
      MIB2_STATS_INC(mib2.icmpinsrcquenchs);
 801dcb2:	4b10      	ldr	r3, [pc, #64]	@ (801dcf4 <icmp_input+0x2b4>)
 801dcb4:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 801dcb8:	3301      	adds	r3, #1
 801dcba:	4a0e      	ldr	r2, [pc, #56]	@ (801dcf4 <icmp_input+0x2b4>)
 801dcbc:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
 801dcc0:	e049      	b.n	801dd56 <icmp_input+0x316>
    } else if (type == ICMP_RD) {
 801dcc2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801dcc6:	2b05      	cmp	r3, #5
 801dcc8:	d107      	bne.n	801dcda <icmp_input+0x29a>
      MIB2_STATS_INC(mib2.icmpinredirects);
 801dcca:	4b0a      	ldr	r3, [pc, #40]	@ (801dcf4 <icmp_input+0x2b4>)
 801dccc:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 801dcd0:	3301      	adds	r3, #1
 801dcd2:	4a08      	ldr	r2, [pc, #32]	@ (801dcf4 <icmp_input+0x2b4>)
 801dcd4:	f8c2 3164 	str.w	r3, [r2, #356]	@ 0x164
 801dcd8:	e03d      	b.n	801dd56 <icmp_input+0x316>
    } else if (type == ICMP_TS) {
 801dcda:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801dcde:	2b0d      	cmp	r3, #13
 801dce0:	d116      	bne.n	801dd10 <icmp_input+0x2d0>
      MIB2_STATS_INC(mib2.icmpintimestamps);
 801dce2:	4b04      	ldr	r3, [pc, #16]	@ (801dcf4 <icmp_input+0x2b4>)
 801dce4:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 801dce8:	3301      	adds	r3, #1
 801dcea:	4a02      	ldr	r2, [pc, #8]	@ (801dcf4 <icmp_input+0x2b4>)
 801dcec:	f8c2 3170 	str.w	r3, [r2, #368]	@ 0x170
 801dcf0:	e031      	b.n	801dd56 <icmp_input+0x316>
 801dcf2:	bf00      	nop
 801dcf4:	2000db84 	.word	0x2000db84
 801dcf8:	2000a59c 	.word	0x2000a59c
 801dcfc:	2000a5b0 	.word	0x2000a5b0
 801dd00:	08025b10 	.word	0x08025b10
 801dd04:	08025b48 	.word	0x08025b48
 801dd08:	08025b80 	.word	0x08025b80
 801dd0c:	08025ba8 	.word	0x08025ba8
    } else if (type == ICMP_TSR) {
 801dd10:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801dd14:	2b0e      	cmp	r3, #14
 801dd16:	d107      	bne.n	801dd28 <icmp_input+0x2e8>
      MIB2_STATS_INC(mib2.icmpintimestampreps);
 801dd18:	4b33      	ldr	r3, [pc, #204]	@ (801dde8 <icmp_input+0x3a8>)
 801dd1a:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 801dd1e:	3301      	adds	r3, #1
 801dd20:	4a31      	ldr	r2, [pc, #196]	@ (801dde8 <icmp_input+0x3a8>)
 801dd22:	f8c2 3174 	str.w	r3, [r2, #372]	@ 0x174
 801dd26:	e016      	b.n	801dd56 <icmp_input+0x316>
    } else if (type == ICMP_AM) {
 801dd28:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801dd2c:	2b11      	cmp	r3, #17
 801dd2e:	d107      	bne.n	801dd40 <icmp_input+0x300>
      MIB2_STATS_INC(mib2.icmpinaddrmasks);
 801dd30:	4b2d      	ldr	r3, [pc, #180]	@ (801dde8 <icmp_input+0x3a8>)
 801dd32:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 801dd36:	3301      	adds	r3, #1
 801dd38:	4a2b      	ldr	r2, [pc, #172]	@ (801dde8 <icmp_input+0x3a8>)
 801dd3a:	f8c2 3178 	str.w	r3, [r2, #376]	@ 0x178
 801dd3e:	e00a      	b.n	801dd56 <icmp_input+0x316>
    } else if (type == ICMP_AMR) {
 801dd40:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801dd44:	2b12      	cmp	r3, #18
 801dd46:	d106      	bne.n	801dd56 <icmp_input+0x316>
      MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
 801dd48:	4b27      	ldr	r3, [pc, #156]	@ (801dde8 <icmp_input+0x3a8>)
 801dd4a:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 801dd4e:	3301      	adds	r3, #1
 801dd50:	4a25      	ldr	r2, [pc, #148]	@ (801dde8 <icmp_input+0x3a8>)
 801dd52:	f8c2 317c 	str.w	r3, [r2, #380]	@ 0x17c
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
 801dd56:	4b24      	ldr	r3, [pc, #144]	@ (801dde8 <icmp_input+0x3a8>)
 801dd58:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 801dd5c:	3301      	adds	r3, #1
 801dd5e:	b29a      	uxth	r2, r3
 801dd60:	4b21      	ldr	r3, [pc, #132]	@ (801dde8 <icmp_input+0x3a8>)
 801dd62:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
    ICMP_STATS_INC(icmp.drop);
 801dd66:	4b20      	ldr	r3, [pc, #128]	@ (801dde8 <icmp_input+0x3a8>)
 801dd68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801dd6c:	3301      	adds	r3, #1
 801dd6e:	b29a      	uxth	r2, r3
 801dd70:	4b1d      	ldr	r3, [pc, #116]	@ (801dde8 <icmp_input+0x3a8>)
 801dd72:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
 801dd76:	e000      	b.n	801dd7a <icmp_input+0x33a>
    break;
 801dd78:	bf00      	nop
  }
  pbuf_free(p);
 801dd7a:	6878      	ldr	r0, [r7, #4]
 801dd7c:	f7f6 fba8 	bl	80144d0 <pbuf_free>
  return;
 801dd80:	e02f      	b.n	801dde2 <icmp_input+0x3a2>
    goto lenerr;
 801dd82:	bf00      	nop
 801dd84:	e002      	b.n	801dd8c <icmp_input+0x34c>
    goto lenerr;
 801dd86:	bf00      	nop
 801dd88:	e000      	b.n	801dd8c <icmp_input+0x34c>
      goto lenerr;
 801dd8a:	bf00      	nop
lenerr:
  pbuf_free(p);
 801dd8c:	6878      	ldr	r0, [r7, #4]
 801dd8e:	f7f6 fb9f 	bl	80144d0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 801dd92:	4b15      	ldr	r3, [pc, #84]	@ (801dde8 <icmp_input+0x3a8>)
 801dd94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801dd98:	3301      	adds	r3, #1
 801dd9a:	b29a      	uxth	r2, r3
 801dd9c:	4b12      	ldr	r3, [pc, #72]	@ (801dde8 <icmp_input+0x3a8>)
 801dd9e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
 801dda2:	4b11      	ldr	r3, [pc, #68]	@ (801dde8 <icmp_input+0x3a8>)
 801dda4:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 801dda8:	3301      	adds	r3, #1
 801ddaa:	4a0f      	ldr	r2, [pc, #60]	@ (801dde8 <icmp_input+0x3a8>)
 801ddac:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
  return;
 801ddb0:	e017      	b.n	801dde2 <icmp_input+0x3a2>
      goto icmperr;
 801ddb2:	bf00      	nop
 801ddb4:	e002      	b.n	801ddbc <icmp_input+0x37c>
      goto icmperr;
 801ddb6:	bf00      	nop
 801ddb8:	e000      	b.n	801ddbc <icmp_input+0x37c>
        goto icmperr;
 801ddba:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801ddbc:	6878      	ldr	r0, [r7, #4]
 801ddbe:	f7f6 fb87 	bl	80144d0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 801ddc2:	4b09      	ldr	r3, [pc, #36]	@ (801dde8 <icmp_input+0x3a8>)
 801ddc4:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 801ddc8:	3301      	adds	r3, #1
 801ddca:	b29a      	uxth	r2, r3
 801ddcc:	4b06      	ldr	r3, [pc, #24]	@ (801dde8 <icmp_input+0x3a8>)
 801ddce:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
 801ddd2:	4b05      	ldr	r3, [pc, #20]	@ (801dde8 <icmp_input+0x3a8>)
 801ddd4:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 801ddd8:	3301      	adds	r3, #1
 801ddda:	4a03      	ldr	r2, [pc, #12]	@ (801dde8 <icmp_input+0x3a8>)
 801dddc:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
  return;
 801dde0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801dde2:	3728      	adds	r7, #40	@ 0x28
 801dde4:	46bd      	mov	sp, r7
 801dde6:	bd80      	pop	{r7, pc}
 801dde8:	2000db84 	.word	0x2000db84

0801ddec <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801ddec:	b580      	push	{r7, lr}
 801ddee:	b082      	sub	sp, #8
 801ddf0:	af00      	add	r7, sp, #0
 801ddf2:	6078      	str	r0, [r7, #4]
 801ddf4:	460b      	mov	r3, r1
 801ddf6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
 801ddf8:	4b08      	ldr	r3, [pc, #32]	@ (801de1c <icmp_dest_unreach+0x30>)
 801ddfa:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 801ddfe:	3301      	adds	r3, #1
 801de00:	4a06      	ldr	r2, [pc, #24]	@ (801de1c <icmp_dest_unreach+0x30>)
 801de02:	f8c2 3188 	str.w	r3, [r2, #392]	@ 0x188
  icmp_send_response(p, ICMP_DUR, t);
 801de06:	78fb      	ldrb	r3, [r7, #3]
 801de08:	461a      	mov	r2, r3
 801de0a:	2103      	movs	r1, #3
 801de0c:	6878      	ldr	r0, [r7, #4]
 801de0e:	f000 f821 	bl	801de54 <icmp_send_response>
}
 801de12:	bf00      	nop
 801de14:	3708      	adds	r7, #8
 801de16:	46bd      	mov	sp, r7
 801de18:	bd80      	pop	{r7, pc}
 801de1a:	bf00      	nop
 801de1c:	2000db84 	.word	0x2000db84

0801de20 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801de20:	b580      	push	{r7, lr}
 801de22:	b082      	sub	sp, #8
 801de24:	af00      	add	r7, sp, #0
 801de26:	6078      	str	r0, [r7, #4]
 801de28:	460b      	mov	r3, r1
 801de2a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
 801de2c:	4b08      	ldr	r3, [pc, #32]	@ (801de50 <icmp_time_exceeded+0x30>)
 801de2e:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 801de32:	3301      	adds	r3, #1
 801de34:	4a06      	ldr	r2, [pc, #24]	@ (801de50 <icmp_time_exceeded+0x30>)
 801de36:	f8c2 318c 	str.w	r3, [r2, #396]	@ 0x18c
  icmp_send_response(p, ICMP_TE, t);
 801de3a:	78fb      	ldrb	r3, [r7, #3]
 801de3c:	461a      	mov	r2, r3
 801de3e:	210b      	movs	r1, #11
 801de40:	6878      	ldr	r0, [r7, #4]
 801de42:	f000 f807 	bl	801de54 <icmp_send_response>
}
 801de46:	bf00      	nop
 801de48:	3708      	adds	r7, #8
 801de4a:	46bd      	mov	sp, r7
 801de4c:	bd80      	pop	{r7, pc}
 801de4e:	bf00      	nop
 801de50:	2000db84 	.word	0x2000db84

0801de54 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801de54:	b580      	push	{r7, lr}
 801de56:	b08c      	sub	sp, #48	@ 0x30
 801de58:	af04      	add	r7, sp, #16
 801de5a:	6078      	str	r0, [r7, #4]
 801de5c:	460b      	mov	r3, r1
 801de5e:	70fb      	strb	r3, [r7, #3]
 801de60:	4613      	mov	r3, r2
 801de62:	70bb      	strb	r3, [r7, #2]
  struct icmp_echo_hdr *icmphdr;
  ip4_addr_t iphdr_src;
  struct netif *netif;

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);
 801de64:	4b37      	ldr	r3, [pc, #220]	@ (801df44 <icmp_send_response+0xf0>)
 801de66:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 801de6a:	3301      	adds	r3, #1
 801de6c:	4a35      	ldr	r2, [pc, #212]	@ (801df44 <icmp_send_response+0xf0>)
 801de6e:	f8c2 3180 	str.w	r3, [r2, #384]	@ 0x180

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801de72:	2200      	movs	r2, #0
 801de74:	2124      	movs	r1, #36	@ 0x24
 801de76:	2001      	movs	r0, #1
 801de78:	f7f5 ffb2 	bl	8013de0 <pbuf_alloc>
 801de7c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801de7e:	69fb      	ldr	r3, [r7, #28]
 801de80:	2b00      	cmp	r3, #0
 801de82:	d107      	bne.n	801de94 <icmp_send_response+0x40>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
 801de84:	4b2f      	ldr	r3, [pc, #188]	@ (801df44 <icmp_send_response+0xf0>)
 801de86:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 801de8a:	3301      	adds	r3, #1
 801de8c:	4a2d      	ldr	r2, [pc, #180]	@ (801df44 <icmp_send_response+0xf0>)
 801de8e:	f8c2 3184 	str.w	r3, [r2, #388]	@ 0x184
 801de92:	e053      	b.n	801df3c <icmp_send_response+0xe8>
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801de94:	69fb      	ldr	r3, [r7, #28]
 801de96:	895b      	ldrh	r3, [r3, #10]
 801de98:	2b23      	cmp	r3, #35	@ 0x23
 801de9a:	d806      	bhi.n	801deaa <icmp_send_response+0x56>
 801de9c:	4b2a      	ldr	r3, [pc, #168]	@ (801df48 <icmp_send_response+0xf4>)
 801de9e:	f240 1261 	movw	r2, #353	@ 0x161
 801dea2:	492a      	ldr	r1, [pc, #168]	@ (801df4c <icmp_send_response+0xf8>)
 801dea4:	482a      	ldr	r0, [pc, #168]	@ (801df50 <icmp_send_response+0xfc>)
 801dea6:	f002 fafb 	bl	80204a0 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801deaa:	687b      	ldr	r3, [r7, #4]
 801deac:	685b      	ldr	r3, [r3, #4]
 801deae:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801deb0:	69fb      	ldr	r3, [r7, #28]
 801deb2:	685b      	ldr	r3, [r3, #4]
 801deb4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801deb6:	697b      	ldr	r3, [r7, #20]
 801deb8:	78fa      	ldrb	r2, [r7, #3]
 801deba:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801debc:	697b      	ldr	r3, [r7, #20]
 801debe:	78ba      	ldrb	r2, [r7, #2]
 801dec0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801dec2:	697b      	ldr	r3, [r7, #20]
 801dec4:	2200      	movs	r2, #0
 801dec6:	711a      	strb	r2, [r3, #4]
 801dec8:	2200      	movs	r2, #0
 801deca:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801decc:	697b      	ldr	r3, [r7, #20]
 801dece:	2200      	movs	r2, #0
 801ded0:	719a      	strb	r2, [r3, #6]
 801ded2:	2200      	movs	r2, #0
 801ded4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801ded6:	69fb      	ldr	r3, [r7, #28]
 801ded8:	685b      	ldr	r3, [r3, #4]
 801deda:	f103 0008 	add.w	r0, r3, #8
 801dede:	687b      	ldr	r3, [r7, #4]
 801dee0:	685b      	ldr	r3, [r3, #4]
 801dee2:	221c      	movs	r2, #28
 801dee4:	4619      	mov	r1, r3
 801dee6:	f002 fd70 	bl	80209ca <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801deea:	69bb      	ldr	r3, [r7, #24]
 801deec:	68db      	ldr	r3, [r3, #12]
 801deee:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 801def0:	f107 030c 	add.w	r3, r7, #12
 801def4:	4618      	mov	r0, r3
 801def6:	f000 f82d 	bl	801df54 <ip4_route>
 801defa:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801defc:	693b      	ldr	r3, [r7, #16]
 801defe:	2b00      	cmp	r3, #0
 801df00:	d019      	beq.n	801df36 <icmp_send_response+0xe2>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801df02:	697b      	ldr	r3, [r7, #20]
 801df04:	2200      	movs	r2, #0
 801df06:	709a      	strb	r2, [r3, #2]
 801df08:	2200      	movs	r2, #0
 801df0a:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 801df0c:	4b0d      	ldr	r3, [pc, #52]	@ (801df44 <icmp_send_response+0xf0>)
 801df0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801df12:	3301      	adds	r3, #1
 801df14:	b29a      	uxth	r2, r3
 801df16:	4b0b      	ldr	r3, [pc, #44]	@ (801df44 <icmp_send_response+0xf0>)
 801df18:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801df1c:	f107 020c 	add.w	r2, r7, #12
 801df20:	693b      	ldr	r3, [r7, #16]
 801df22:	9302      	str	r3, [sp, #8]
 801df24:	2301      	movs	r3, #1
 801df26:	9301      	str	r3, [sp, #4]
 801df28:	2300      	movs	r3, #0
 801df2a:	9300      	str	r3, [sp, #0]
 801df2c:	23ff      	movs	r3, #255	@ 0xff
 801df2e:	2100      	movs	r1, #0
 801df30:	69f8      	ldr	r0, [r7, #28]
 801df32:	f000 fa81 	bl	801e438 <ip4_output_if>
  }
  pbuf_free(q);
 801df36:	69f8      	ldr	r0, [r7, #28]
 801df38:	f7f6 faca 	bl	80144d0 <pbuf_free>
}
 801df3c:	3720      	adds	r7, #32
 801df3e:	46bd      	mov	sp, r7
 801df40:	bd80      	pop	{r7, pc}
 801df42:	bf00      	nop
 801df44:	2000db84 	.word	0x2000db84
 801df48:	08025b10 	.word	0x08025b10
 801df4c:	08025bdc 	.word	0x08025bdc
 801df50:	08025b80 	.word	0x08025b80

0801df54 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801df54:	b480      	push	{r7}
 801df56:	b085      	sub	sp, #20
 801df58:	af00      	add	r7, sp, #0
 801df5a:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 801df5c:	4b37      	ldr	r3, [pc, #220]	@ (801e03c <ip4_route+0xe8>)
 801df5e:	681b      	ldr	r3, [r3, #0]
 801df60:	60fb      	str	r3, [r7, #12]
 801df62:	e036      	b.n	801dfd2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801df64:	68fb      	ldr	r3, [r7, #12]
 801df66:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801df6a:	f003 0301 	and.w	r3, r3, #1
 801df6e:	b2db      	uxtb	r3, r3
 801df70:	2b00      	cmp	r3, #0
 801df72:	d02b      	beq.n	801dfcc <ip4_route+0x78>
 801df74:	68fb      	ldr	r3, [r7, #12]
 801df76:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801df7a:	089b      	lsrs	r3, r3, #2
 801df7c:	f003 0301 	and.w	r3, r3, #1
 801df80:	b2db      	uxtb	r3, r3
 801df82:	2b00      	cmp	r3, #0
 801df84:	d022      	beq.n	801dfcc <ip4_route+0x78>
 801df86:	68fb      	ldr	r3, [r7, #12]
 801df88:	3304      	adds	r3, #4
 801df8a:	681b      	ldr	r3, [r3, #0]
 801df8c:	2b00      	cmp	r3, #0
 801df8e:	d01d      	beq.n	801dfcc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801df90:	687b      	ldr	r3, [r7, #4]
 801df92:	681a      	ldr	r2, [r3, #0]
 801df94:	68fb      	ldr	r3, [r7, #12]
 801df96:	3304      	adds	r3, #4
 801df98:	681b      	ldr	r3, [r3, #0]
 801df9a:	405a      	eors	r2, r3
 801df9c:	68fb      	ldr	r3, [r7, #12]
 801df9e:	3308      	adds	r3, #8
 801dfa0:	681b      	ldr	r3, [r3, #0]
 801dfa2:	4013      	ands	r3, r2
 801dfa4:	2b00      	cmp	r3, #0
 801dfa6:	d101      	bne.n	801dfac <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801dfa8:	68fb      	ldr	r3, [r7, #12]
 801dfaa:	e042      	b.n	801e032 <ip4_route+0xde>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801dfac:	68fb      	ldr	r3, [r7, #12]
 801dfae:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801dfb2:	f003 0302 	and.w	r3, r3, #2
 801dfb6:	2b00      	cmp	r3, #0
 801dfb8:	d108      	bne.n	801dfcc <ip4_route+0x78>
 801dfba:	687b      	ldr	r3, [r7, #4]
 801dfbc:	681a      	ldr	r2, [r3, #0]
 801dfbe:	68fb      	ldr	r3, [r7, #12]
 801dfc0:	330c      	adds	r3, #12
 801dfc2:	681b      	ldr	r3, [r3, #0]
 801dfc4:	429a      	cmp	r2, r3
 801dfc6:	d101      	bne.n	801dfcc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801dfc8:	68fb      	ldr	r3, [r7, #12]
 801dfca:	e032      	b.n	801e032 <ip4_route+0xde>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 801dfcc:	68fb      	ldr	r3, [r7, #12]
 801dfce:	681b      	ldr	r3, [r3, #0]
 801dfd0:	60fb      	str	r3, [r7, #12]
 801dfd2:	68fb      	ldr	r3, [r7, #12]
 801dfd4:	2b00      	cmp	r3, #0
 801dfd6:	d1c5      	bne.n	801df64 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801dfd8:	4b19      	ldr	r3, [pc, #100]	@ (801e040 <ip4_route+0xec>)
 801dfda:	681b      	ldr	r3, [r3, #0]
 801dfdc:	2b00      	cmp	r3, #0
 801dfde:	d015      	beq.n	801e00c <ip4_route+0xb8>
 801dfe0:	4b17      	ldr	r3, [pc, #92]	@ (801e040 <ip4_route+0xec>)
 801dfe2:	681b      	ldr	r3, [r3, #0]
 801dfe4:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801dfe8:	f003 0301 	and.w	r3, r3, #1
 801dfec:	2b00      	cmp	r3, #0
 801dfee:	d00d      	beq.n	801e00c <ip4_route+0xb8>
 801dff0:	4b13      	ldr	r3, [pc, #76]	@ (801e040 <ip4_route+0xec>)
 801dff2:	681b      	ldr	r3, [r3, #0]
 801dff4:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801dff8:	f003 0304 	and.w	r3, r3, #4
 801dffc:	2b00      	cmp	r3, #0
 801dffe:	d005      	beq.n	801e00c <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 801e000:	4b0f      	ldr	r3, [pc, #60]	@ (801e040 <ip4_route+0xec>)
 801e002:	681b      	ldr	r3, [r3, #0]
 801e004:	3304      	adds	r3, #4
 801e006:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801e008:	2b00      	cmp	r3, #0
 801e00a:	d110      	bne.n	801e02e <ip4_route+0xda>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 801e00c:	4b0d      	ldr	r3, [pc, #52]	@ (801e044 <ip4_route+0xf0>)
 801e00e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801e012:	3301      	adds	r3, #1
 801e014:	b29a      	uxth	r2, r3
 801e016:	4b0b      	ldr	r3, [pc, #44]	@ (801e044 <ip4_route+0xf0>)
 801e018:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
 801e01c:	4b09      	ldr	r3, [pc, #36]	@ (801e044 <ip4_route+0xf0>)
 801e01e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801e022:	3301      	adds	r3, #1
 801e024:	4a07      	ldr	r2, [pc, #28]	@ (801e044 <ip4_route+0xf0>)
 801e026:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    return NULL;
 801e02a:	2300      	movs	r3, #0
 801e02c:	e001      	b.n	801e032 <ip4_route+0xde>
  }

  return netif_default;
 801e02e:	4b04      	ldr	r3, [pc, #16]	@ (801e040 <ip4_route+0xec>)
 801e030:	681b      	ldr	r3, [r3, #0]
}
 801e032:	4618      	mov	r0, r3
 801e034:	3714      	adds	r7, #20
 801e036:	46bd      	mov	sp, r7
 801e038:	bc80      	pop	{r7}
 801e03a:	4770      	bx	lr
 801e03c:	2000db78 	.word	0x2000db78
 801e040:	2000db7c 	.word	0x2000db7c
 801e044:	2000db84 	.word	0x2000db84

0801e048 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801e048:	b580      	push	{r7, lr}
 801e04a:	b088      	sub	sp, #32
 801e04c:	af00      	add	r7, sp, #0
 801e04e:	6078      	str	r0, [r7, #4]
 801e050:	6039      	str	r1, [r7, #0]
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801e052:	2301      	movs	r3, #1
 801e054:	617b      	str	r3, [r7, #20]
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */

  IP_STATS_INC(ip.recv);
 801e056:	4b9d      	ldr	r3, [pc, #628]	@ (801e2cc <ip4_input+0x284>)
 801e058:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801e05c:	3301      	adds	r3, #1
 801e05e:	b29a      	uxth	r2, r3
 801e060:	4b9a      	ldr	r3, [pc, #616]	@ (801e2cc <ip4_input+0x284>)
 801e062:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);
 801e066:	4b99      	ldr	r3, [pc, #612]	@ (801e2cc <ip4_input+0x284>)
 801e068:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 801e06c:	3301      	adds	r3, #1
 801e06e:	4a97      	ldr	r2, [pc, #604]	@ (801e2cc <ip4_input+0x284>)
 801e070:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801e074:	687b      	ldr	r3, [r7, #4]
 801e076:	685b      	ldr	r3, [r3, #4]
 801e078:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801e07a:	69fb      	ldr	r3, [r7, #28]
 801e07c:	781b      	ldrb	r3, [r3, #0]
 801e07e:	091b      	lsrs	r3, r3, #4
 801e080:	b2db      	uxtb	r3, r3
 801e082:	2b04      	cmp	r3, #4
 801e084:	d01b      	beq.n	801e0be <ip4_input+0x76>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801e086:	6878      	ldr	r0, [r7, #4]
 801e088:	f7f6 fa22 	bl	80144d0 <pbuf_free>
    IP_STATS_INC(ip.err);
 801e08c:	4b8f      	ldr	r3, [pc, #572]	@ (801e2cc <ip4_input+0x284>)
 801e08e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801e092:	3301      	adds	r3, #1
 801e094:	b29a      	uxth	r2, r3
 801e096:	4b8d      	ldr	r3, [pc, #564]	@ (801e2cc <ip4_input+0x284>)
 801e098:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    IP_STATS_INC(ip.drop);
 801e09c:	4b8b      	ldr	r3, [pc, #556]	@ (801e2cc <ip4_input+0x284>)
 801e09e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801e0a2:	3301      	adds	r3, #1
 801e0a4:	b29a      	uxth	r2, r3
 801e0a6:	4b89      	ldr	r3, [pc, #548]	@ (801e2cc <ip4_input+0x284>)
 801e0a8:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
 801e0ac:	4b87      	ldr	r3, [pc, #540]	@ (801e2cc <ip4_input+0x284>)
 801e0ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801e0b2:	3301      	adds	r3, #1
 801e0b4:	4a85      	ldr	r2, [pc, #532]	@ (801e2cc <ip4_input+0x284>)
 801e0b6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
    return ERR_OK;
 801e0ba:	2300      	movs	r3, #0
 801e0bc:	e1b3      	b.n	801e426 <ip4_input+0x3de>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 801e0be:	69fb      	ldr	r3, [r7, #28]
 801e0c0:	781b      	ldrb	r3, [r3, #0]
 801e0c2:	f003 030f 	and.w	r3, r3, #15
 801e0c6:	81fb      	strh	r3, [r7, #14]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 801e0c8:	89fb      	ldrh	r3, [r7, #14]
 801e0ca:	009b      	lsls	r3, r3, #2
 801e0cc:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801e0ce:	69fb      	ldr	r3, [r7, #28]
 801e0d0:	885b      	ldrh	r3, [r3, #2]
 801e0d2:	b29b      	uxth	r3, r3
 801e0d4:	4618      	mov	r0, r3
 801e0d6:	f7f4 ffa3 	bl	8013020 <lwip_htons>
 801e0da:	4603      	mov	r3, r0
 801e0dc:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801e0de:	687b      	ldr	r3, [r7, #4]
 801e0e0:	891b      	ldrh	r3, [r3, #8]
 801e0e2:	89ba      	ldrh	r2, [r7, #12]
 801e0e4:	429a      	cmp	r2, r3
 801e0e6:	d204      	bcs.n	801e0f2 <ip4_input+0xaa>
    pbuf_realloc(p, iphdr_len);
 801e0e8:	89bb      	ldrh	r3, [r7, #12]
 801e0ea:	4619      	mov	r1, r3
 801e0ec:	6878      	ldr	r0, [r7, #4]
 801e0ee:	f7f6 f87b 	bl	80141e8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801e0f2:	687b      	ldr	r3, [r7, #4]
 801e0f4:	895b      	ldrh	r3, [r3, #10]
 801e0f6:	89fa      	ldrh	r2, [r7, #14]
 801e0f8:	429a      	cmp	r2, r3
 801e0fa:	d807      	bhi.n	801e10c <ip4_input+0xc4>
 801e0fc:	687b      	ldr	r3, [r7, #4]
 801e0fe:	891b      	ldrh	r3, [r3, #8]
 801e100:	89ba      	ldrh	r2, [r7, #12]
 801e102:	429a      	cmp	r2, r3
 801e104:	d802      	bhi.n	801e10c <ip4_input+0xc4>
 801e106:	89fb      	ldrh	r3, [r7, #14]
 801e108:	2b13      	cmp	r3, #19
 801e10a:	d81b      	bhi.n	801e144 <ip4_input+0xfc>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801e10c:	6878      	ldr	r0, [r7, #4]
 801e10e:	f7f6 f9df 	bl	80144d0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 801e112:	4b6e      	ldr	r3, [pc, #440]	@ (801e2cc <ip4_input+0x284>)
 801e114:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 801e118:	3301      	adds	r3, #1
 801e11a:	b29a      	uxth	r2, r3
 801e11c:	4b6b      	ldr	r3, [pc, #428]	@ (801e2cc <ip4_input+0x284>)
 801e11e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    IP_STATS_INC(ip.drop);
 801e122:	4b6a      	ldr	r3, [pc, #424]	@ (801e2cc <ip4_input+0x284>)
 801e124:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801e128:	3301      	adds	r3, #1
 801e12a:	b29a      	uxth	r2, r3
 801e12c:	4b67      	ldr	r3, [pc, #412]	@ (801e2cc <ip4_input+0x284>)
 801e12e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
 801e132:	4b66      	ldr	r3, [pc, #408]	@ (801e2cc <ip4_input+0x284>)
 801e134:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801e138:	3301      	adds	r3, #1
 801e13a:	4a64      	ldr	r2, [pc, #400]	@ (801e2cc <ip4_input+0x284>)
 801e13c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
    return ERR_OK;
 801e140:	2300      	movs	r3, #0
 801e142:	e170      	b.n	801e426 <ip4_input+0x3de>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801e144:	69fb      	ldr	r3, [r7, #28]
 801e146:	691b      	ldr	r3, [r3, #16]
 801e148:	4a61      	ldr	r2, [pc, #388]	@ (801e2d0 <ip4_input+0x288>)
 801e14a:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801e14c:	69fb      	ldr	r3, [r7, #28]
 801e14e:	68db      	ldr	r3, [r3, #12]
 801e150:	4a5f      	ldr	r2, [pc, #380]	@ (801e2d0 <ip4_input+0x288>)
 801e152:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801e154:	4b5e      	ldr	r3, [pc, #376]	@ (801e2d0 <ip4_input+0x288>)
 801e156:	695b      	ldr	r3, [r3, #20]
 801e158:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801e15c:	2be0      	cmp	r3, #224	@ 0xe0
 801e15e:	d112      	bne.n	801e186 <ip4_input+0x13e>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801e160:	683b      	ldr	r3, [r7, #0]
 801e162:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801e166:	f003 0301 	and.w	r3, r3, #1
 801e16a:	b2db      	uxtb	r3, r3
 801e16c:	2b00      	cmp	r3, #0
 801e16e:	d007      	beq.n	801e180 <ip4_input+0x138>
 801e170:	683b      	ldr	r3, [r7, #0]
 801e172:	3304      	adds	r3, #4
 801e174:	681b      	ldr	r3, [r3, #0]
 801e176:	2b00      	cmp	r3, #0
 801e178:	d002      	beq.n	801e180 <ip4_input+0x138>
      netif = inp;
 801e17a:	683b      	ldr	r3, [r7, #0]
 801e17c:	61bb      	str	r3, [r7, #24]
 801e17e:	e041      	b.n	801e204 <ip4_input+0x1bc>
    } else {
      netif = NULL;
 801e180:	2300      	movs	r3, #0
 801e182:	61bb      	str	r3, [r7, #24]
 801e184:	e03e      	b.n	801e204 <ip4_input+0x1bc>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 801e186:	2301      	movs	r3, #1
 801e188:	613b      	str	r3, [r7, #16]
    netif = inp;
 801e18a:	683b      	ldr	r3, [r7, #0]
 801e18c:	61bb      	str	r3, [r7, #24]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801e18e:	69bb      	ldr	r3, [r7, #24]
 801e190:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801e194:	f003 0301 	and.w	r3, r3, #1
 801e198:	b2db      	uxtb	r3, r3
 801e19a:	2b00      	cmp	r3, #0
 801e19c:	d014      	beq.n	801e1c8 <ip4_input+0x180>
 801e19e:	69bb      	ldr	r3, [r7, #24]
 801e1a0:	3304      	adds	r3, #4
 801e1a2:	681b      	ldr	r3, [r3, #0]
 801e1a4:	2b00      	cmp	r3, #0
 801e1a6:	d00f      	beq.n	801e1c8 <ip4_input+0x180>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801e1a8:	4b49      	ldr	r3, [pc, #292]	@ (801e2d0 <ip4_input+0x288>)
 801e1aa:	695a      	ldr	r2, [r3, #20]
 801e1ac:	69bb      	ldr	r3, [r7, #24]
 801e1ae:	3304      	adds	r3, #4
 801e1b0:	681b      	ldr	r3, [r3, #0]
 801e1b2:	429a      	cmp	r2, r3
 801e1b4:	d026      	beq.n	801e204 <ip4_input+0x1bc>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801e1b6:	4b46      	ldr	r3, [pc, #280]	@ (801e2d0 <ip4_input+0x288>)
 801e1b8:	695b      	ldr	r3, [r3, #20]
 801e1ba:	69b9      	ldr	r1, [r7, #24]
 801e1bc:	4618      	mov	r0, r3
 801e1be:	f000 fa2d 	bl	801e61c <ip4_addr_isbroadcast_u32>
 801e1c2:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801e1c4:	2b00      	cmp	r3, #0
 801e1c6:	d11d      	bne.n	801e204 <ip4_input+0x1bc>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 801e1c8:	693b      	ldr	r3, [r7, #16]
 801e1ca:	2b00      	cmp	r3, #0
 801e1cc:	d00d      	beq.n	801e1ea <ip4_input+0x1a2>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 801e1ce:	4b40      	ldr	r3, [pc, #256]	@ (801e2d0 <ip4_input+0x288>)
 801e1d0:	695b      	ldr	r3, [r3, #20]
 801e1d2:	b2db      	uxtb	r3, r3
 801e1d4:	2b7f      	cmp	r3, #127	@ 0x7f
 801e1d6:	d102      	bne.n	801e1de <ip4_input+0x196>
          netif = NULL;
 801e1d8:	2300      	movs	r3, #0
 801e1da:	61bb      	str	r3, [r7, #24]
          break;
 801e1dc:	e012      	b.n	801e204 <ip4_input+0x1bc>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 801e1de:	2300      	movs	r3, #0
 801e1e0:	613b      	str	r3, [r7, #16]
        netif = netif_list;
 801e1e2:	4b3c      	ldr	r3, [pc, #240]	@ (801e2d4 <ip4_input+0x28c>)
 801e1e4:	681b      	ldr	r3, [r3, #0]
 801e1e6:	61bb      	str	r3, [r7, #24]
 801e1e8:	e002      	b.n	801e1f0 <ip4_input+0x1a8>
      } else {
        netif = netif->next;
 801e1ea:	69bb      	ldr	r3, [r7, #24]
 801e1ec:	681b      	ldr	r3, [r3, #0]
 801e1ee:	61bb      	str	r3, [r7, #24]
      }
      if (netif == inp) {
 801e1f0:	69ba      	ldr	r2, [r7, #24]
 801e1f2:	683b      	ldr	r3, [r7, #0]
 801e1f4:	429a      	cmp	r2, r3
 801e1f6:	d102      	bne.n	801e1fe <ip4_input+0x1b6>
        netif = netif->next;
 801e1f8:	69bb      	ldr	r3, [r7, #24]
 801e1fa:	681b      	ldr	r3, [r3, #0]
 801e1fc:	61bb      	str	r3, [r7, #24]
      }
    } while (netif != NULL);
 801e1fe:	69bb      	ldr	r3, [r7, #24]
 801e200:	2b00      	cmp	r3, #0
 801e202:	d1c4      	bne.n	801e18e <ip4_input+0x146>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801e204:	69bb      	ldr	r3, [r7, #24]
 801e206:	2b00      	cmp	r3, #0
 801e208:	d111      	bne.n	801e22e <ip4_input+0x1e6>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801e20a:	69fb      	ldr	r3, [r7, #28]
 801e20c:	7a5b      	ldrb	r3, [r3, #9]
 801e20e:	2b11      	cmp	r3, #17
 801e210:	d10d      	bne.n	801e22e <ip4_input+0x1e6>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
 801e212:	89fb      	ldrh	r3, [r7, #14]
 801e214:	69fa      	ldr	r2, [r7, #28]
 801e216:	4413      	add	r3, r2
 801e218:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
        lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801e21a:	68bb      	ldr	r3, [r7, #8]
 801e21c:	885b      	ldrh	r3, [r3, #2]
 801e21e:	b29b      	uxth	r3, r3
 801e220:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 801e224:	d103      	bne.n	801e22e <ip4_input+0x1e6>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801e226:	683b      	ldr	r3, [r7, #0]
 801e228:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801e22a:	2300      	movs	r3, #0
 801e22c:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801e22e:	697b      	ldr	r3, [r7, #20]
 801e230:	2b00      	cmp	r3, #0
 801e232:	d02d      	beq.n	801e290 <ip4_input+0x248>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801e234:	4b26      	ldr	r3, [pc, #152]	@ (801e2d0 <ip4_input+0x288>)
 801e236:	691b      	ldr	r3, [r3, #16]
 801e238:	2b00      	cmp	r3, #0
 801e23a:	d029      	beq.n	801e290 <ip4_input+0x248>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801e23c:	4b24      	ldr	r3, [pc, #144]	@ (801e2d0 <ip4_input+0x288>)
 801e23e:	691b      	ldr	r3, [r3, #16]
 801e240:	6839      	ldr	r1, [r7, #0]
 801e242:	4618      	mov	r0, r3
 801e244:	f000 f9ea 	bl	801e61c <ip4_addr_isbroadcast_u32>
 801e248:	4603      	mov	r3, r0
 801e24a:	2b00      	cmp	r3, #0
 801e24c:	d105      	bne.n	801e25a <ip4_input+0x212>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801e24e:	4b20      	ldr	r3, [pc, #128]	@ (801e2d0 <ip4_input+0x288>)
 801e250:	691b      	ldr	r3, [r3, #16]
 801e252:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801e256:	2be0      	cmp	r3, #224	@ 0xe0
 801e258:	d11a      	bne.n	801e290 <ip4_input+0x248>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801e25a:	6878      	ldr	r0, [r7, #4]
 801e25c:	f7f6 f938 	bl	80144d0 <pbuf_free>
      IP_STATS_INC(ip.drop);
 801e260:	4b1a      	ldr	r3, [pc, #104]	@ (801e2cc <ip4_input+0x284>)
 801e262:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801e266:	3301      	adds	r3, #1
 801e268:	b29a      	uxth	r2, r3
 801e26a:	4b18      	ldr	r3, [pc, #96]	@ (801e2cc <ip4_input+0x284>)
 801e26c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
 801e270:	4b16      	ldr	r3, [pc, #88]	@ (801e2cc <ip4_input+0x284>)
 801e272:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 801e276:	3301      	adds	r3, #1
 801e278:	4a14      	ldr	r2, [pc, #80]	@ (801e2cc <ip4_input+0x284>)
 801e27a:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
      MIB2_STATS_INC(mib2.ipindiscards);
 801e27e:	4b13      	ldr	r3, [pc, #76]	@ (801e2cc <ip4_input+0x284>)
 801e280:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801e284:	3301      	adds	r3, #1
 801e286:	4a11      	ldr	r2, [pc, #68]	@ (801e2cc <ip4_input+0x284>)
 801e288:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      return ERR_OK;
 801e28c:	2300      	movs	r3, #0
 801e28e:	e0ca      	b.n	801e426 <ip4_input+0x3de>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801e290:	69bb      	ldr	r3, [r7, #24]
 801e292:	2b00      	cmp	r3, #0
 801e294:	d120      	bne.n	801e2d8 <ip4_input+0x290>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, iphdr, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
 801e296:	4b0d      	ldr	r3, [pc, #52]	@ (801e2cc <ip4_input+0x284>)
 801e298:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801e29c:	3301      	adds	r3, #1
 801e29e:	b29a      	uxth	r2, r3
 801e2a0:	4b0a      	ldr	r3, [pc, #40]	@ (801e2cc <ip4_input+0x284>)
 801e2a2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
 801e2a6:	4b09      	ldr	r3, [pc, #36]	@ (801e2cc <ip4_input+0x284>)
 801e2a8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 801e2ac:	3301      	adds	r3, #1
 801e2ae:	4a07      	ldr	r2, [pc, #28]	@ (801e2cc <ip4_input+0x284>)
 801e2b0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
      MIB2_STATS_INC(mib2.ipindiscards);
 801e2b4:	4b05      	ldr	r3, [pc, #20]	@ (801e2cc <ip4_input+0x284>)
 801e2b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801e2ba:	3301      	adds	r3, #1
 801e2bc:	4a03      	ldr	r2, [pc, #12]	@ (801e2cc <ip4_input+0x284>)
 801e2be:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
    }
    pbuf_free(p);
 801e2c2:	6878      	ldr	r0, [r7, #4]
 801e2c4:	f7f6 f904 	bl	80144d0 <pbuf_free>
    return ERR_OK;
 801e2c8:	2300      	movs	r3, #0
 801e2ca:	e0ac      	b.n	801e426 <ip4_input+0x3de>
 801e2cc:	2000db84 	.word	0x2000db84
 801e2d0:	2000a59c 	.word	0x2000a59c
 801e2d4:	2000db78 	.word	0x2000db78
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801e2d8:	69fb      	ldr	r3, [r7, #28]
 801e2da:	88db      	ldrh	r3, [r3, #6]
 801e2dc:	b29b      	uxth	r3, r3
 801e2de:	461a      	mov	r2, r3
 801e2e0:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801e2e4:	4013      	ands	r3, r2
 801e2e6:	2b00      	cmp	r3, #0
 801e2e8:	d00b      	beq.n	801e302 <ip4_input+0x2ba>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801e2ea:	6878      	ldr	r0, [r7, #4]
 801e2ec:	f000 fed0 	bl	801f090 <ip4_reass>
 801e2f0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801e2f2:	687b      	ldr	r3, [r7, #4]
 801e2f4:	2b00      	cmp	r3, #0
 801e2f6:	d101      	bne.n	801e2fc <ip4_input+0x2b4>
      return ERR_OK;
 801e2f8:	2300      	movs	r3, #0
 801e2fa:	e094      	b.n	801e426 <ip4_input+0x3de>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801e2fc:	687b      	ldr	r3, [r7, #4]
 801e2fe:	685b      	ldr	r3, [r3, #4]
 801e300:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801e302:	4a4b      	ldr	r2, [pc, #300]	@ (801e430 <ip4_input+0x3e8>)
 801e304:	69bb      	ldr	r3, [r7, #24]
 801e306:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801e308:	4a49      	ldr	r2, [pc, #292]	@ (801e430 <ip4_input+0x3e8>)
 801e30a:	683b      	ldr	r3, [r7, #0]
 801e30c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801e30e:	4a48      	ldr	r2, [pc, #288]	@ (801e430 <ip4_input+0x3e8>)
 801e310:	69fb      	ldr	r3, [r7, #28]
 801e312:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 801e314:	69fb      	ldr	r3, [r7, #28]
 801e316:	781b      	ldrb	r3, [r3, #0]
 801e318:	f003 030f 	and.w	r3, r3, #15
 801e31c:	b29b      	uxth	r3, r3
 801e31e:	009b      	lsls	r3, r3, #2
 801e320:	b29a      	uxth	r2, r3
 801e322:	4b43      	ldr	r3, [pc, #268]	@ (801e430 <ip4_input+0x3e8>)
 801e324:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 801e326:	89fb      	ldrh	r3, [r7, #14]
 801e328:	425b      	negs	r3, r3
 801e32a:	b29b      	uxth	r3, r3
 801e32c:	b21b      	sxth	r3, r3
 801e32e:	4619      	mov	r1, r3
 801e330:	6878      	ldr	r0, [r7, #4]
 801e332:	f7f6 f8a9 	bl	8014488 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 801e336:	69fb      	ldr	r3, [r7, #28]
 801e338:	7a5b      	ldrb	r3, [r3, #9]
 801e33a:	2b11      	cmp	r3, #17
 801e33c:	d006      	beq.n	801e34c <ip4_input+0x304>
 801e33e:	2b11      	cmp	r3, #17
 801e340:	dc28      	bgt.n	801e394 <ip4_input+0x34c>
 801e342:	2b01      	cmp	r3, #1
 801e344:	d01a      	beq.n	801e37c <ip4_input+0x334>
 801e346:	2b06      	cmp	r3, #6
 801e348:	d00c      	beq.n	801e364 <ip4_input+0x31c>
 801e34a:	e023      	b.n	801e394 <ip4_input+0x34c>
#if LWIP_UDP
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
 801e34c:	4b39      	ldr	r3, [pc, #228]	@ (801e434 <ip4_input+0x3ec>)
 801e34e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801e352:	3301      	adds	r3, #1
 801e354:	4a37      	ldr	r2, [pc, #220]	@ (801e434 <ip4_input+0x3ec>)
 801e356:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
      udp_input(p, inp);
 801e35a:	6839      	ldr	r1, [r7, #0]
 801e35c:	6878      	ldr	r0, [r7, #4]
 801e35e:	f7fc f93d 	bl	801a5dc <udp_input>
      break;
 801e362:	e04d      	b.n	801e400 <ip4_input+0x3b8>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
 801e364:	4b33      	ldr	r3, [pc, #204]	@ (801e434 <ip4_input+0x3ec>)
 801e366:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801e36a:	3301      	adds	r3, #1
 801e36c:	4a31      	ldr	r2, [pc, #196]	@ (801e434 <ip4_input+0x3ec>)
 801e36e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
      tcp_input(p, inp);
 801e372:	6839      	ldr	r1, [r7, #0]
 801e374:	6878      	ldr	r0, [r7, #4]
 801e376:	f7f8 f8c1 	bl	80164fc <tcp_input>
      break;
 801e37a:	e041      	b.n	801e400 <ip4_input+0x3b8>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
 801e37c:	4b2d      	ldr	r3, [pc, #180]	@ (801e434 <ip4_input+0x3ec>)
 801e37e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801e382:	3301      	adds	r3, #1
 801e384:	4a2b      	ldr	r2, [pc, #172]	@ (801e434 <ip4_input+0x3ec>)
 801e386:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
      icmp_input(p, inp);
 801e38a:	6839      	ldr	r1, [r7, #0]
 801e38c:	6878      	ldr	r0, [r7, #4]
 801e38e:	f7ff fb57 	bl	801da40 <icmp_input>
      break;
 801e392:	e035      	b.n	801e400 <ip4_input+0x3b8>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801e394:	4b26      	ldr	r3, [pc, #152]	@ (801e430 <ip4_input+0x3e8>)
 801e396:	695b      	ldr	r3, [r3, #20]
 801e398:	69b9      	ldr	r1, [r7, #24]
 801e39a:	4618      	mov	r0, r3
 801e39c:	f000 f93e 	bl	801e61c <ip4_addr_isbroadcast_u32>
 801e3a0:	4603      	mov	r3, r0
 801e3a2:	2b00      	cmp	r3, #0
 801e3a4:	d112      	bne.n	801e3cc <ip4_input+0x384>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801e3a6:	4b22      	ldr	r3, [pc, #136]	@ (801e430 <ip4_input+0x3e8>)
 801e3a8:	695b      	ldr	r3, [r3, #20]
 801e3aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801e3ae:	2be0      	cmp	r3, #224	@ 0xe0
 801e3b0:	d00c      	beq.n	801e3cc <ip4_input+0x384>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 801e3b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801e3b6:	4619      	mov	r1, r3
 801e3b8:	6878      	ldr	r0, [r7, #4]
 801e3ba:	f7f6 f877 	bl	80144ac <pbuf_header_force>
        p->payload = iphdr;
 801e3be:	687b      	ldr	r3, [r7, #4]
 801e3c0:	69fa      	ldr	r2, [r7, #28]
 801e3c2:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801e3c4:	2102      	movs	r1, #2
 801e3c6:	6878      	ldr	r0, [r7, #4]
 801e3c8:	f7ff fd10 	bl	801ddec <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 801e3cc:	6878      	ldr	r0, [r7, #4]
 801e3ce:	f7f6 f87f 	bl	80144d0 <pbuf_free>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

      IP_STATS_INC(ip.proterr);
 801e3d2:	4b18      	ldr	r3, [pc, #96]	@ (801e434 <ip4_input+0x3ec>)
 801e3d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801e3d8:	3301      	adds	r3, #1
 801e3da:	b29a      	uxth	r2, r3
 801e3dc:	4b15      	ldr	r3, [pc, #84]	@ (801e434 <ip4_input+0x3ec>)
 801e3de:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
      IP_STATS_INC(ip.drop);
 801e3e2:	4b14      	ldr	r3, [pc, #80]	@ (801e434 <ip4_input+0x3ec>)
 801e3e4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801e3e8:	3301      	adds	r3, #1
 801e3ea:	b29a      	uxth	r2, r3
 801e3ec:	4b11      	ldr	r3, [pc, #68]	@ (801e434 <ip4_input+0x3ec>)
 801e3ee:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      MIB2_STATS_INC(mib2.ipinunknownprotos);
 801e3f2:	4b10      	ldr	r3, [pc, #64]	@ (801e434 <ip4_input+0x3ec>)
 801e3f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801e3f8:	3301      	adds	r3, #1
 801e3fa:	4a0e      	ldr	r2, [pc, #56]	@ (801e434 <ip4_input+0x3ec>)
 801e3fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801e400:	4b0b      	ldr	r3, [pc, #44]	@ (801e430 <ip4_input+0x3e8>)
 801e402:	2200      	movs	r2, #0
 801e404:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801e406:	4b0a      	ldr	r3, [pc, #40]	@ (801e430 <ip4_input+0x3e8>)
 801e408:	2200      	movs	r2, #0
 801e40a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801e40c:	4b08      	ldr	r3, [pc, #32]	@ (801e430 <ip4_input+0x3e8>)
 801e40e:	2200      	movs	r2, #0
 801e410:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801e412:	4b07      	ldr	r3, [pc, #28]	@ (801e430 <ip4_input+0x3e8>)
 801e414:	2200      	movs	r2, #0
 801e416:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801e418:	4b05      	ldr	r3, [pc, #20]	@ (801e430 <ip4_input+0x3e8>)
 801e41a:	2200      	movs	r2, #0
 801e41c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801e41e:	4b04      	ldr	r3, [pc, #16]	@ (801e430 <ip4_input+0x3e8>)
 801e420:	2200      	movs	r2, #0
 801e422:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801e424:	2300      	movs	r3, #0
}
 801e426:	4618      	mov	r0, r3
 801e428:	3720      	adds	r7, #32
 801e42a:	46bd      	mov	sp, r7
 801e42c:	bd80      	pop	{r7, pc}
 801e42e:	bf00      	nop
 801e430:	2000a59c 	.word	0x2000a59c
 801e434:	2000db84 	.word	0x2000db84

0801e438 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 801e438:	b580      	push	{r7, lr}
 801e43a:	b08a      	sub	sp, #40	@ 0x28
 801e43c:	af04      	add	r7, sp, #16
 801e43e:	60f8      	str	r0, [r7, #12]
 801e440:	60b9      	str	r1, [r7, #8]
 801e442:	607a      	str	r2, [r7, #4]
 801e444:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801e446:	68bb      	ldr	r3, [r7, #8]
 801e448:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801e44a:	687b      	ldr	r3, [r7, #4]
 801e44c:	2b00      	cmp	r3, #0
 801e44e:	d009      	beq.n	801e464 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801e450:	68bb      	ldr	r3, [r7, #8]
 801e452:	2b00      	cmp	r3, #0
 801e454:	d003      	beq.n	801e45e <ip4_output_if+0x26>
 801e456:	68bb      	ldr	r3, [r7, #8]
 801e458:	681b      	ldr	r3, [r3, #0]
 801e45a:	2b00      	cmp	r3, #0
 801e45c:	d102      	bne.n	801e464 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801e45e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e460:	3304      	adds	r3, #4
 801e462:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801e464:	78fa      	ldrb	r2, [r7, #3]
 801e466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e468:	9302      	str	r3, [sp, #8]
 801e46a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801e46e:	9301      	str	r3, [sp, #4]
 801e470:	f897 3020 	ldrb.w	r3, [r7, #32]
 801e474:	9300      	str	r3, [sp, #0]
 801e476:	4613      	mov	r3, r2
 801e478:	687a      	ldr	r2, [r7, #4]
 801e47a:	6979      	ldr	r1, [r7, #20]
 801e47c:	68f8      	ldr	r0, [r7, #12]
 801e47e:	f000 f805 	bl	801e48c <ip4_output_if_src>
 801e482:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801e484:	4618      	mov	r0, r3
 801e486:	3718      	adds	r7, #24
 801e488:	46bd      	mov	sp, r7
 801e48a:	bd80      	pop	{r7, pc}

0801e48c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 801e48c:	b580      	push	{r7, lr}
 801e48e:	b088      	sub	sp, #32
 801e490:	af00      	add	r7, sp, #0
 801e492:	60f8      	str	r0, [r7, #12]
 801e494:	60b9      	str	r1, [r7, #8]
 801e496:	607a      	str	r2, [r7, #4]
 801e498:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801e49a:	68fb      	ldr	r3, [r7, #12]
 801e49c:	89db      	ldrh	r3, [r3, #14]
 801e49e:	2b01      	cmp	r3, #1
 801e4a0:	d006      	beq.n	801e4b0 <ip4_output_if_src+0x24>
 801e4a2:	4b57      	ldr	r3, [pc, #348]	@ (801e600 <ip4_output_if_src+0x174>)
 801e4a4:	f240 3233 	movw	r2, #819	@ 0x333
 801e4a8:	4956      	ldr	r1, [pc, #344]	@ (801e604 <ip4_output_if_src+0x178>)
 801e4aa:	4857      	ldr	r0, [pc, #348]	@ (801e608 <ip4_output_if_src+0x17c>)
 801e4ac:	f001 fff8 	bl	80204a0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);
 801e4b0:	4b56      	ldr	r3, [pc, #344]	@ (801e60c <ip4_output_if_src+0x180>)
 801e4b2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 801e4b6:	3301      	adds	r3, #1
 801e4b8:	4a54      	ldr	r2, [pc, #336]	@ (801e60c <ip4_output_if_src+0x180>)
 801e4ba:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801e4be:	687b      	ldr	r3, [r7, #4]
 801e4c0:	2b00      	cmp	r3, #0
 801e4c2:	d06f      	beq.n	801e5a4 <ip4_output_if_src+0x118>
    u16_t ip_hlen = IP_HLEN;
 801e4c4:	2314      	movs	r3, #20
 801e4c6:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 801e4c8:	2114      	movs	r1, #20
 801e4ca:	68f8      	ldr	r0, [r7, #12]
 801e4cc:	f7f5 ffdc 	bl	8014488 <pbuf_header>
 801e4d0:	4603      	mov	r3, r0
 801e4d2:	2b00      	cmp	r3, #0
 801e4d4:	d011      	beq.n	801e4fa <ip4_output_if_src+0x6e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 801e4d6:	4b4d      	ldr	r3, [pc, #308]	@ (801e60c <ip4_output_if_src+0x180>)
 801e4d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801e4dc:	3301      	adds	r3, #1
 801e4de:	b29a      	uxth	r2, r3
 801e4e0:	4b4a      	ldr	r3, [pc, #296]	@ (801e60c <ip4_output_if_src+0x180>)
 801e4e2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
 801e4e6:	4b49      	ldr	r3, [pc, #292]	@ (801e60c <ip4_output_if_src+0x180>)
 801e4e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801e4ec:	3301      	adds	r3, #1
 801e4ee:	4a47      	ldr	r2, [pc, #284]	@ (801e60c <ip4_output_if_src+0x180>)
 801e4f0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      return ERR_BUF;
 801e4f4:	f06f 0301 	mvn.w	r3, #1
 801e4f8:	e07d      	b.n	801e5f6 <ip4_output_if_src+0x16a>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801e4fa:	68fb      	ldr	r3, [r7, #12]
 801e4fc:	685b      	ldr	r3, [r3, #4]
 801e4fe:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801e500:	68fb      	ldr	r3, [r7, #12]
 801e502:	895b      	ldrh	r3, [r3, #10]
 801e504:	2b13      	cmp	r3, #19
 801e506:	d806      	bhi.n	801e516 <ip4_output_if_src+0x8a>
 801e508:	4b3d      	ldr	r3, [pc, #244]	@ (801e600 <ip4_output_if_src+0x174>)
 801e50a:	f44f 7258 	mov.w	r2, #864	@ 0x360
 801e50e:	4940      	ldr	r1, [pc, #256]	@ (801e610 <ip4_output_if_src+0x184>)
 801e510:	483d      	ldr	r0, [pc, #244]	@ (801e608 <ip4_output_if_src+0x17c>)
 801e512:	f001 ffc5 	bl	80204a0 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801e516:	69fb      	ldr	r3, [r7, #28]
 801e518:	78fa      	ldrb	r2, [r7, #3]
 801e51a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801e51c:	69fb      	ldr	r3, [r7, #28]
 801e51e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801e522:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801e524:	687b      	ldr	r3, [r7, #4]
 801e526:	681a      	ldr	r2, [r3, #0]
 801e528:	69fb      	ldr	r3, [r7, #28]
 801e52a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801e52c:	8b7b      	ldrh	r3, [r7, #26]
 801e52e:	089b      	lsrs	r3, r3, #2
 801e530:	b29b      	uxth	r3, r3
 801e532:	b2db      	uxtb	r3, r3
 801e534:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e538:	b2da      	uxtb	r2, r3
 801e53a:	69fb      	ldr	r3, [r7, #28]
 801e53c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801e53e:	69fb      	ldr	r3, [r7, #28]
 801e540:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801e544:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801e546:	68fb      	ldr	r3, [r7, #12]
 801e548:	891b      	ldrh	r3, [r3, #8]
 801e54a:	4618      	mov	r0, r3
 801e54c:	f7f4 fd68 	bl	8013020 <lwip_htons>
 801e550:	4603      	mov	r3, r0
 801e552:	461a      	mov	r2, r3
 801e554:	69fb      	ldr	r3, [r7, #28]
 801e556:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801e558:	69fb      	ldr	r3, [r7, #28]
 801e55a:	2200      	movs	r2, #0
 801e55c:	719a      	strb	r2, [r3, #6]
 801e55e:	2200      	movs	r2, #0
 801e560:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801e562:	4b2c      	ldr	r3, [pc, #176]	@ (801e614 <ip4_output_if_src+0x188>)
 801e564:	881b      	ldrh	r3, [r3, #0]
 801e566:	4618      	mov	r0, r3
 801e568:	f7f4 fd5a 	bl	8013020 <lwip_htons>
 801e56c:	4603      	mov	r3, r0
 801e56e:	461a      	mov	r2, r3
 801e570:	69fb      	ldr	r3, [r7, #28]
 801e572:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801e574:	4b27      	ldr	r3, [pc, #156]	@ (801e614 <ip4_output_if_src+0x188>)
 801e576:	881b      	ldrh	r3, [r3, #0]
 801e578:	3301      	adds	r3, #1
 801e57a:	b29a      	uxth	r2, r3
 801e57c:	4b25      	ldr	r3, [pc, #148]	@ (801e614 <ip4_output_if_src+0x188>)
 801e57e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801e580:	68bb      	ldr	r3, [r7, #8]
 801e582:	2b00      	cmp	r3, #0
 801e584:	d104      	bne.n	801e590 <ip4_output_if_src+0x104>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801e586:	4b24      	ldr	r3, [pc, #144]	@ (801e618 <ip4_output_if_src+0x18c>)
 801e588:	681a      	ldr	r2, [r3, #0]
 801e58a:	69fb      	ldr	r3, [r7, #28]
 801e58c:	60da      	str	r2, [r3, #12]
 801e58e:	e003      	b.n	801e598 <ip4_output_if_src+0x10c>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801e590:	68bb      	ldr	r3, [r7, #8]
 801e592:	681a      	ldr	r2, [r3, #0]
 801e594:	69fb      	ldr	r3, [r7, #28]
 801e596:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801e598:	69fb      	ldr	r3, [r7, #28]
 801e59a:	2200      	movs	r2, #0
 801e59c:	729a      	strb	r2, [r3, #10]
 801e59e:	2200      	movs	r2, #0
 801e5a0:	72da      	strb	r2, [r3, #11]
 801e5a2:	e008      	b.n	801e5b6 <ip4_output_if_src+0x12a>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 801e5a4:	68fb      	ldr	r3, [r7, #12]
 801e5a6:	685b      	ldr	r3, [r3, #4]
 801e5a8:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801e5aa:	69fb      	ldr	r3, [r7, #28]
 801e5ac:	691b      	ldr	r3, [r3, #16]
 801e5ae:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801e5b0:	f107 0314 	add.w	r3, r7, #20
 801e5b4:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);
 801e5b6:	4b15      	ldr	r3, [pc, #84]	@ (801e60c <ip4_output_if_src+0x180>)
 801e5b8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801e5bc:	3301      	adds	r3, #1
 801e5be:	b29a      	uxth	r2, r3
 801e5c0:	4b12      	ldr	r3, [pc, #72]	@ (801e60c <ip4_output_if_src+0x180>)
 801e5c2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801e5c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e5c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801e5ca:	2b00      	cmp	r3, #0
 801e5cc:	d00c      	beq.n	801e5e8 <ip4_output_if_src+0x15c>
 801e5ce:	68fb      	ldr	r3, [r7, #12]
 801e5d0:	891a      	ldrh	r2, [r3, #8]
 801e5d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e5d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801e5d6:	429a      	cmp	r2, r3
 801e5d8:	d906      	bls.n	801e5e8 <ip4_output_if_src+0x15c>
    return ip4_frag(p, netif, dest);
 801e5da:	687a      	ldr	r2, [r7, #4]
 801e5dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801e5de:	68f8      	ldr	r0, [r7, #12]
 801e5e0:	f000 ff30 	bl	801f444 <ip4_frag>
 801e5e4:	4603      	mov	r3, r0
 801e5e6:	e006      	b.n	801e5f6 <ip4_output_if_src+0x16a>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801e5e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e5ea:	695b      	ldr	r3, [r3, #20]
 801e5ec:	687a      	ldr	r2, [r7, #4]
 801e5ee:	68f9      	ldr	r1, [r7, #12]
 801e5f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801e5f2:	4798      	blx	r3
 801e5f4:	4603      	mov	r3, r0
}
 801e5f6:	4618      	mov	r0, r3
 801e5f8:	3720      	adds	r7, #32
 801e5fa:	46bd      	mov	sp, r7
 801e5fc:	bd80      	pop	{r7, pc}
 801e5fe:	bf00      	nop
 801e600:	08025c08 	.word	0x08025c08
 801e604:	08025c3c 	.word	0x08025c3c
 801e608:	08025c48 	.word	0x08025c48
 801e60c:	2000db84 	.word	0x2000db84
 801e610:	08025c70 	.word	0x08025c70
 801e614:	2000dea2 	.word	0x2000dea2
 801e618:	0802f050 	.word	0x0802f050

0801e61c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801e61c:	b480      	push	{r7}
 801e61e:	b085      	sub	sp, #20
 801e620:	af00      	add	r7, sp, #0
 801e622:	6078      	str	r0, [r7, #4]
 801e624:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801e626:	687b      	ldr	r3, [r7, #4]
 801e628:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801e62a:	687b      	ldr	r3, [r7, #4]
 801e62c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e630:	d002      	beq.n	801e638 <ip4_addr_isbroadcast_u32+0x1c>
 801e632:	687b      	ldr	r3, [r7, #4]
 801e634:	2b00      	cmp	r3, #0
 801e636:	d101      	bne.n	801e63c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801e638:	2301      	movs	r3, #1
 801e63a:	e02a      	b.n	801e692 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801e63c:	683b      	ldr	r3, [r7, #0]
 801e63e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801e642:	f003 0302 	and.w	r3, r3, #2
 801e646:	2b00      	cmp	r3, #0
 801e648:	d101      	bne.n	801e64e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801e64a:	2300      	movs	r3, #0
 801e64c:	e021      	b.n	801e692 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801e64e:	683b      	ldr	r3, [r7, #0]
 801e650:	3304      	adds	r3, #4
 801e652:	681b      	ldr	r3, [r3, #0]
 801e654:	687a      	ldr	r2, [r7, #4]
 801e656:	429a      	cmp	r2, r3
 801e658:	d101      	bne.n	801e65e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801e65a:	2300      	movs	r3, #0
 801e65c:	e019      	b.n	801e692 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801e65e:	68fa      	ldr	r2, [r7, #12]
 801e660:	683b      	ldr	r3, [r7, #0]
 801e662:	3304      	adds	r3, #4
 801e664:	681b      	ldr	r3, [r3, #0]
 801e666:	405a      	eors	r2, r3
 801e668:	683b      	ldr	r3, [r7, #0]
 801e66a:	3308      	adds	r3, #8
 801e66c:	681b      	ldr	r3, [r3, #0]
 801e66e:	4013      	ands	r3, r2
 801e670:	2b00      	cmp	r3, #0
 801e672:	d10d      	bne.n	801e690 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801e674:	683b      	ldr	r3, [r7, #0]
 801e676:	3308      	adds	r3, #8
 801e678:	681b      	ldr	r3, [r3, #0]
 801e67a:	43da      	mvns	r2, r3
 801e67c:	687b      	ldr	r3, [r7, #4]
 801e67e:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801e680:	683b      	ldr	r3, [r7, #0]
 801e682:	3308      	adds	r3, #8
 801e684:	681b      	ldr	r3, [r3, #0]
 801e686:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801e688:	429a      	cmp	r2, r3
 801e68a:	d101      	bne.n	801e690 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801e68c:	2301      	movs	r3, #1
 801e68e:	e000      	b.n	801e692 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801e690:	2300      	movs	r3, #0
  }
}
 801e692:	4618      	mov	r0, r3
 801e694:	3714      	adds	r7, #20
 801e696:	46bd      	mov	sp, r7
 801e698:	bc80      	pop	{r7}
 801e69a:	4770      	bx	lr

0801e69c <ipaddr_addr>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
 801e69c:	b580      	push	{r7, lr}
 801e69e:	b084      	sub	sp, #16
 801e6a0:	af00      	add	r7, sp, #0
 801e6a2:	6078      	str	r0, [r7, #4]
  ip4_addr_t val;

  if (ip4addr_aton(cp, &val)) {
 801e6a4:	f107 030c 	add.w	r3, r7, #12
 801e6a8:	4619      	mov	r1, r3
 801e6aa:	6878      	ldr	r0, [r7, #4]
 801e6ac:	f000 f80c 	bl	801e6c8 <ip4addr_aton>
 801e6b0:	4603      	mov	r3, r0
 801e6b2:	2b00      	cmp	r3, #0
 801e6b4:	d001      	beq.n	801e6ba <ipaddr_addr+0x1e>
    return ip4_addr_get_u32(&val);
 801e6b6:	68fb      	ldr	r3, [r7, #12]
 801e6b8:	e001      	b.n	801e6be <ipaddr_addr+0x22>
  }
  return (IPADDR_NONE);
 801e6ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 801e6be:	4618      	mov	r0, r3
 801e6c0:	3710      	adds	r7, #16
 801e6c2:	46bd      	mov	sp, r7
 801e6c4:	bd80      	pop	{r7, pc}
	...

0801e6c8 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 801e6c8:	b580      	push	{r7, lr}
 801e6ca:	b08a      	sub	sp, #40	@ 0x28
 801e6cc:	af00      	add	r7, sp, #0
 801e6ce:	6078      	str	r0, [r7, #4]
 801e6d0:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 801e6d2:	f107 030c 	add.w	r3, r7, #12
 801e6d6:	61fb      	str	r3, [r7, #28]

  c = *cp;
 801e6d8:	687b      	ldr	r3, [r7, #4]
 801e6da:	781b      	ldrb	r3, [r3, #0]
 801e6dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!isdigit(c)) {
 801e6e0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801e6e4:	2b2f      	cmp	r3, #47	@ 0x2f
 801e6e6:	d903      	bls.n	801e6f0 <ip4addr_aton+0x28>
 801e6e8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801e6ec:	2b39      	cmp	r3, #57	@ 0x39
 801e6ee:	d901      	bls.n	801e6f4 <ip4addr_aton+0x2c>
      return 0;
 801e6f0:	2300      	movs	r3, #0
 801e6f2:	e11e      	b.n	801e932 <ip4addr_aton+0x26a>
    }
    val = 0;
 801e6f4:	2300      	movs	r3, #0
 801e6f6:	627b      	str	r3, [r7, #36]	@ 0x24
    base = 10;
 801e6f8:	230a      	movs	r3, #10
 801e6fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (c == '0') {
 801e6fe:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801e702:	2b30      	cmp	r3, #48	@ 0x30
 801e704:	d11c      	bne.n	801e740 <ip4addr_aton+0x78>
      c = *++cp;
 801e706:	687b      	ldr	r3, [r7, #4]
 801e708:	3301      	adds	r3, #1
 801e70a:	607b      	str	r3, [r7, #4]
 801e70c:	687b      	ldr	r3, [r7, #4]
 801e70e:	781b      	ldrb	r3, [r3, #0]
 801e710:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (c == 'x' || c == 'X') {
 801e714:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801e718:	2b78      	cmp	r3, #120	@ 0x78
 801e71a:	d003      	beq.n	801e724 <ip4addr_aton+0x5c>
 801e71c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801e720:	2b58      	cmp	r3, #88	@ 0x58
 801e722:	d10a      	bne.n	801e73a <ip4addr_aton+0x72>
        base = 16;
 801e724:	2310      	movs	r3, #16
 801e726:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        c = *++cp;
 801e72a:	687b      	ldr	r3, [r7, #4]
 801e72c:	3301      	adds	r3, #1
 801e72e:	607b      	str	r3, [r7, #4]
 801e730:	687b      	ldr	r3, [r7, #4]
 801e732:	781b      	ldrb	r3, [r3, #0]
 801e734:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801e738:	e002      	b.n	801e740 <ip4addr_aton+0x78>
      } else {
        base = 8;
 801e73a:	2308      	movs	r3, #8
 801e73c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      }
    }
    for (;;) {
      if (isdigit(c)) {
 801e740:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801e744:	2b2f      	cmp	r3, #47	@ 0x2f
 801e746:	d915      	bls.n	801e774 <ip4addr_aton+0xac>
 801e748:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801e74c:	2b39      	cmp	r3, #57	@ 0x39
 801e74e:	d811      	bhi.n	801e774 <ip4addr_aton+0xac>
        val = (val * base) + (u32_t)(c - '0');
 801e750:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801e754:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801e756:	fb03 f202 	mul.w	r2, r3, r2
 801e75a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801e75e:	4413      	add	r3, r2
 801e760:	3b30      	subs	r3, #48	@ 0x30
 801e762:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 801e764:	687b      	ldr	r3, [r7, #4]
 801e766:	3301      	adds	r3, #1
 801e768:	607b      	str	r3, [r7, #4]
 801e76a:	687b      	ldr	r3, [r7, #4]
 801e76c:	781b      	ldrb	r3, [r3, #0]
 801e76e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801e772:	e036      	b.n	801e7e2 <ip4addr_aton+0x11a>
      } else if (base == 16 && isxdigit(c)) {
 801e774:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801e778:	2b10      	cmp	r3, #16
 801e77a:	d133      	bne.n	801e7e4 <ip4addr_aton+0x11c>
 801e77c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801e780:	2b2f      	cmp	r3, #47	@ 0x2f
 801e782:	d903      	bls.n	801e78c <ip4addr_aton+0xc4>
 801e784:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801e788:	2b39      	cmp	r3, #57	@ 0x39
 801e78a:	d90f      	bls.n	801e7ac <ip4addr_aton+0xe4>
 801e78c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801e790:	2b60      	cmp	r3, #96	@ 0x60
 801e792:	d903      	bls.n	801e79c <ip4addr_aton+0xd4>
 801e794:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801e798:	2b66      	cmp	r3, #102	@ 0x66
 801e79a:	d907      	bls.n	801e7ac <ip4addr_aton+0xe4>
 801e79c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801e7a0:	2b40      	cmp	r3, #64	@ 0x40
 801e7a2:	d91f      	bls.n	801e7e4 <ip4addr_aton+0x11c>
 801e7a4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801e7a8:	2b46      	cmp	r3, #70	@ 0x46
 801e7aa:	d81b      	bhi.n	801e7e4 <ip4addr_aton+0x11c>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
 801e7ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e7ae:	011b      	lsls	r3, r3, #4
 801e7b0:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801e7b4:	f102 010a 	add.w	r1, r2, #10
 801e7b8:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801e7bc:	2a60      	cmp	r2, #96	@ 0x60
 801e7be:	d905      	bls.n	801e7cc <ip4addr_aton+0x104>
 801e7c0:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801e7c4:	2a7a      	cmp	r2, #122	@ 0x7a
 801e7c6:	d801      	bhi.n	801e7cc <ip4addr_aton+0x104>
 801e7c8:	2261      	movs	r2, #97	@ 0x61
 801e7ca:	e000      	b.n	801e7ce <ip4addr_aton+0x106>
 801e7cc:	2241      	movs	r2, #65	@ 0x41
 801e7ce:	1a8a      	subs	r2, r1, r2
 801e7d0:	4313      	orrs	r3, r2
 801e7d2:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 801e7d4:	687b      	ldr	r3, [r7, #4]
 801e7d6:	3301      	adds	r3, #1
 801e7d8:	607b      	str	r3, [r7, #4]
 801e7da:	687b      	ldr	r3, [r7, #4]
 801e7dc:	781b      	ldrb	r3, [r3, #0]
 801e7de:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (isdigit(c)) {
 801e7e2:	e7ad      	b.n	801e740 <ip4addr_aton+0x78>
      } else {
        break;
      }
    }
    if (c == '.') {
 801e7e4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801e7e8:	2b2e      	cmp	r3, #46	@ 0x2e
 801e7ea:	d114      	bne.n	801e816 <ip4addr_aton+0x14e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801e7ec:	f107 030c 	add.w	r3, r7, #12
 801e7f0:	330c      	adds	r3, #12
 801e7f2:	69fa      	ldr	r2, [r7, #28]
 801e7f4:	429a      	cmp	r2, r3
 801e7f6:	d301      	bcc.n	801e7fc <ip4addr_aton+0x134>
        return 0;
 801e7f8:	2300      	movs	r3, #0
 801e7fa:	e09a      	b.n	801e932 <ip4addr_aton+0x26a>
      }
      *pp++ = val;
 801e7fc:	69fb      	ldr	r3, [r7, #28]
 801e7fe:	1d1a      	adds	r2, r3, #4
 801e800:	61fa      	str	r2, [r7, #28]
 801e802:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801e804:	601a      	str	r2, [r3, #0]
      c = *++cp;
 801e806:	687b      	ldr	r3, [r7, #4]
 801e808:	3301      	adds	r3, #1
 801e80a:	607b      	str	r3, [r7, #4]
 801e80c:	687b      	ldr	r3, [r7, #4]
 801e80e:	781b      	ldrb	r3, [r3, #0]
 801e810:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (!isdigit(c)) {
 801e814:	e764      	b.n	801e6e0 <ip4addr_aton+0x18>
    } else {
      break;
 801e816:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
 801e818:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801e81c:	2b00      	cmp	r3, #0
 801e81e:	d019      	beq.n	801e854 <ip4addr_aton+0x18c>
 801e820:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801e824:	2b20      	cmp	r3, #32
 801e826:	d015      	beq.n	801e854 <ip4addr_aton+0x18c>
 801e828:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801e82c:	2b0c      	cmp	r3, #12
 801e82e:	d011      	beq.n	801e854 <ip4addr_aton+0x18c>
 801e830:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801e834:	2b0a      	cmp	r3, #10
 801e836:	d00d      	beq.n	801e854 <ip4addr_aton+0x18c>
 801e838:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801e83c:	2b0d      	cmp	r3, #13
 801e83e:	d009      	beq.n	801e854 <ip4addr_aton+0x18c>
 801e840:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801e844:	2b09      	cmp	r3, #9
 801e846:	d005      	beq.n	801e854 <ip4addr_aton+0x18c>
 801e848:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801e84c:	2b0b      	cmp	r3, #11
 801e84e:	d001      	beq.n	801e854 <ip4addr_aton+0x18c>
    return 0;
 801e850:	2300      	movs	r3, #0
 801e852:	e06e      	b.n	801e932 <ip4addr_aton+0x26a>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 801e854:	f107 030c 	add.w	r3, r7, #12
 801e858:	69fa      	ldr	r2, [r7, #28]
 801e85a:	1ad3      	subs	r3, r2, r3
 801e85c:	109b      	asrs	r3, r3, #2
 801e85e:	3301      	adds	r3, #1
 801e860:	2b04      	cmp	r3, #4
 801e862:	d853      	bhi.n	801e90c <ip4addr_aton+0x244>
 801e864:	a201      	add	r2, pc, #4	@ (adr r2, 801e86c <ip4addr_aton+0x1a4>)
 801e866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e86a:	bf00      	nop
 801e86c:	0801e881 	.word	0x0801e881
 801e870:	0801e91d 	.word	0x0801e91d
 801e874:	0801e885 	.word	0x0801e885
 801e878:	0801e8a7 	.word	0x0801e8a7
 801e87c:	0801e8d5 	.word	0x0801e8d5

  case 0:
    return 0;       /* initial nondigit */
 801e880:	2300      	movs	r3, #0
 801e882:	e056      	b.n	801e932 <ip4addr_aton+0x26a>

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL) {
 801e884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e886:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801e88a:	d301      	bcc.n	801e890 <ip4addr_aton+0x1c8>
      return 0;
 801e88c:	2300      	movs	r3, #0
 801e88e:	e050      	b.n	801e932 <ip4addr_aton+0x26a>
    }
    if (parts[0] > 0xff) {
 801e890:	68fb      	ldr	r3, [r7, #12]
 801e892:	2bff      	cmp	r3, #255	@ 0xff
 801e894:	d901      	bls.n	801e89a <ip4addr_aton+0x1d2>
      return 0;
 801e896:	2300      	movs	r3, #0
 801e898:	e04b      	b.n	801e932 <ip4addr_aton+0x26a>
    }
    val |= parts[0] << 24;
 801e89a:	68fb      	ldr	r3, [r7, #12]
 801e89c:	061b      	lsls	r3, r3, #24
 801e89e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801e8a0:	4313      	orrs	r3, r2
 801e8a2:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 801e8a4:	e03b      	b.n	801e91e <ip4addr_aton+0x256>

  case 3:             /* a.b.c -- 8.8.16 bits */
    if (val > 0xffff) {
 801e8a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e8a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e8ac:	d301      	bcc.n	801e8b2 <ip4addr_aton+0x1ea>
      return 0;
 801e8ae:	2300      	movs	r3, #0
 801e8b0:	e03f      	b.n	801e932 <ip4addr_aton+0x26a>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801e8b2:	68fb      	ldr	r3, [r7, #12]
 801e8b4:	2bff      	cmp	r3, #255	@ 0xff
 801e8b6:	d802      	bhi.n	801e8be <ip4addr_aton+0x1f6>
 801e8b8:	693b      	ldr	r3, [r7, #16]
 801e8ba:	2bff      	cmp	r3, #255	@ 0xff
 801e8bc:	d901      	bls.n	801e8c2 <ip4addr_aton+0x1fa>
      return 0;
 801e8be:	2300      	movs	r3, #0
 801e8c0:	e037      	b.n	801e932 <ip4addr_aton+0x26a>
    }
    val |= (parts[0] << 24) | (parts[1] << 16);
 801e8c2:	68fb      	ldr	r3, [r7, #12]
 801e8c4:	061a      	lsls	r2, r3, #24
 801e8c6:	693b      	ldr	r3, [r7, #16]
 801e8c8:	041b      	lsls	r3, r3, #16
 801e8ca:	4313      	orrs	r3, r2
 801e8cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801e8ce:	4313      	orrs	r3, r2
 801e8d0:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 801e8d2:	e024      	b.n	801e91e <ip4addr_aton+0x256>

  case 4:             /* a.b.c.d -- 8.8.8.8 bits */
    if (val > 0xff) {
 801e8d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e8d6:	2bff      	cmp	r3, #255	@ 0xff
 801e8d8:	d901      	bls.n	801e8de <ip4addr_aton+0x216>
      return 0;
 801e8da:	2300      	movs	r3, #0
 801e8dc:	e029      	b.n	801e932 <ip4addr_aton+0x26a>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801e8de:	68fb      	ldr	r3, [r7, #12]
 801e8e0:	2bff      	cmp	r3, #255	@ 0xff
 801e8e2:	d805      	bhi.n	801e8f0 <ip4addr_aton+0x228>
 801e8e4:	693b      	ldr	r3, [r7, #16]
 801e8e6:	2bff      	cmp	r3, #255	@ 0xff
 801e8e8:	d802      	bhi.n	801e8f0 <ip4addr_aton+0x228>
 801e8ea:	697b      	ldr	r3, [r7, #20]
 801e8ec:	2bff      	cmp	r3, #255	@ 0xff
 801e8ee:	d901      	bls.n	801e8f4 <ip4addr_aton+0x22c>
      return 0;
 801e8f0:	2300      	movs	r3, #0
 801e8f2:	e01e      	b.n	801e932 <ip4addr_aton+0x26a>
    }
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 801e8f4:	68fb      	ldr	r3, [r7, #12]
 801e8f6:	061a      	lsls	r2, r3, #24
 801e8f8:	693b      	ldr	r3, [r7, #16]
 801e8fa:	041b      	lsls	r3, r3, #16
 801e8fc:	431a      	orrs	r2, r3
 801e8fe:	697b      	ldr	r3, [r7, #20]
 801e900:	021b      	lsls	r3, r3, #8
 801e902:	4313      	orrs	r3, r2
 801e904:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801e906:	4313      	orrs	r3, r2
 801e908:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 801e90a:	e008      	b.n	801e91e <ip4addr_aton+0x256>
  default:
    LWIP_ASSERT("unhandled", 0);
 801e90c:	4b0b      	ldr	r3, [pc, #44]	@ (801e93c <ip4addr_aton+0x274>)
 801e90e:	f240 1203 	movw	r2, #259	@ 0x103
 801e912:	490b      	ldr	r1, [pc, #44]	@ (801e940 <ip4addr_aton+0x278>)
 801e914:	480b      	ldr	r0, [pc, #44]	@ (801e944 <ip4addr_aton+0x27c>)
 801e916:	f001 fdc3 	bl	80204a0 <iprintf>
    break;
 801e91a:	e000      	b.n	801e91e <ip4addr_aton+0x256>
    break;
 801e91c:	bf00      	nop
  }
  if (addr) {
 801e91e:	683b      	ldr	r3, [r7, #0]
 801e920:	2b00      	cmp	r3, #0
 801e922:	d005      	beq.n	801e930 <ip4addr_aton+0x268>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801e924:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e926:	f7f4 fb88 	bl	801303a <lwip_htonl>
 801e92a:	4602      	mov	r2, r0
 801e92c:	683b      	ldr	r3, [r7, #0]
 801e92e:	601a      	str	r2, [r3, #0]
  }
  return 1;
 801e930:	2301      	movs	r3, #1
}
 801e932:	4618      	mov	r0, r3
 801e934:	3728      	adds	r7, #40	@ 0x28
 801e936:	46bd      	mov	sp, r7
 801e938:	bd80      	pop	{r7, pc}
 801e93a:	bf00      	nop
 801e93c:	08025ca0 	.word	0x08025ca0
 801e940:	08025cdc 	.word	0x08025cdc
 801e944:	08025ce8 	.word	0x08025ce8

0801e948 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char*
ip4addr_ntoa(const ip4_addr_t *addr)
{
 801e948:	b580      	push	{r7, lr}
 801e94a:	b082      	sub	sp, #8
 801e94c:	af00      	add	r7, sp, #0
 801e94e:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 801e950:	2210      	movs	r2, #16
 801e952:	4904      	ldr	r1, [pc, #16]	@ (801e964 <ip4addr_ntoa+0x1c>)
 801e954:	6878      	ldr	r0, [r7, #4]
 801e956:	f000 f807 	bl	801e968 <ip4addr_ntoa_r>
 801e95a:	4603      	mov	r3, r0
}
 801e95c:	4618      	mov	r0, r3
 801e95e:	3708      	adds	r7, #8
 801e960:	46bd      	mov	sp, r7
 801e962:	bd80      	pop	{r7, pc}
 801e964:	2000dea4 	.word	0x2000dea4

0801e968 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char*
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 801e968:	b480      	push	{r7}
 801e96a:	b08d      	sub	sp, #52	@ 0x34
 801e96c:	af00      	add	r7, sp, #0
 801e96e:	60f8      	str	r0, [r7, #12]
 801e970:	60b9      	str	r1, [r7, #8]
 801e972:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 801e974:	2300      	movs	r3, #0
 801e976:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 801e978:	68fb      	ldr	r3, [r7, #12]
 801e97a:	681b      	ldr	r3, [r3, #0]
 801e97c:	61bb      	str	r3, [r7, #24]

  rp = buf;
 801e97e:	68bb      	ldr	r3, [r7, #8]
 801e980:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 801e982:	f107 0318 	add.w	r3, r7, #24
 801e986:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 801e988:	2300      	movs	r3, #0
 801e98a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801e98e:	e058      	b.n	801ea42 <ip4addr_ntoa_r+0xda>
    i = 0;
 801e990:	2300      	movs	r3, #0
 801e992:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 801e996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e998:	781a      	ldrb	r2, [r3, #0]
 801e99a:	4b32      	ldr	r3, [pc, #200]	@ (801ea64 <ip4addr_ntoa_r+0xfc>)
 801e99c:	fba3 1302 	umull	r1, r3, r3, r2
 801e9a0:	08d9      	lsrs	r1, r3, #3
 801e9a2:	460b      	mov	r3, r1
 801e9a4:	009b      	lsls	r3, r3, #2
 801e9a6:	440b      	add	r3, r1
 801e9a8:	005b      	lsls	r3, r3, #1
 801e9aa:	1ad3      	subs	r3, r2, r3
 801e9ac:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 801e9ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e9b0:	781b      	ldrb	r3, [r3, #0]
 801e9b2:	4a2c      	ldr	r2, [pc, #176]	@ (801ea64 <ip4addr_ntoa_r+0xfc>)
 801e9b4:	fba2 2303 	umull	r2, r3, r2, r3
 801e9b8:	08db      	lsrs	r3, r3, #3
 801e9ba:	b2da      	uxtb	r2, r3
 801e9bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e9be:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 801e9c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801e9c4:	1c5a      	adds	r2, r3, #1
 801e9c6:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 801e9ca:	4619      	mov	r1, r3
 801e9cc:	7ffb      	ldrb	r3, [r7, #31]
 801e9ce:	3330      	adds	r3, #48	@ 0x30
 801e9d0:	b2da      	uxtb	r2, r3
 801e9d2:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 801e9d6:	443b      	add	r3, r7
 801e9d8:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 801e9dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e9de:	781b      	ldrb	r3, [r3, #0]
 801e9e0:	2b00      	cmp	r3, #0
 801e9e2:	d1d8      	bne.n	801e996 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 801e9e4:	e011      	b.n	801ea0a <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 801e9e6:	6a3b      	ldr	r3, [r7, #32]
 801e9e8:	1c5a      	adds	r2, r3, #1
 801e9ea:	623a      	str	r2, [r7, #32]
 801e9ec:	687a      	ldr	r2, [r7, #4]
 801e9ee:	429a      	cmp	r2, r3
 801e9f0:	dc01      	bgt.n	801e9f6 <ip4addr_ntoa_r+0x8e>
        return NULL;
 801e9f2:	2300      	movs	r3, #0
 801e9f4:	e030      	b.n	801ea58 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 801e9f6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801e9fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e9fc:	1c59      	adds	r1, r3, #1
 801e9fe:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801ea00:	3230      	adds	r2, #48	@ 0x30
 801ea02:	443a      	add	r2, r7
 801ea04:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 801ea08:	701a      	strb	r2, [r3, #0]
    while (i--) {
 801ea0a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ea0e:	1e5a      	subs	r2, r3, #1
 801ea10:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 801ea14:	2b00      	cmp	r3, #0
 801ea16:	d1e6      	bne.n	801e9e6 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 801ea18:	6a3b      	ldr	r3, [r7, #32]
 801ea1a:	1c5a      	adds	r2, r3, #1
 801ea1c:	623a      	str	r2, [r7, #32]
 801ea1e:	687a      	ldr	r2, [r7, #4]
 801ea20:	429a      	cmp	r2, r3
 801ea22:	dc01      	bgt.n	801ea28 <ip4addr_ntoa_r+0xc0>
      return NULL;
 801ea24:	2300      	movs	r3, #0
 801ea26:	e017      	b.n	801ea58 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 801ea28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ea2a:	1c5a      	adds	r2, r3, #1
 801ea2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801ea2e:	222e      	movs	r2, #46	@ 0x2e
 801ea30:	701a      	strb	r2, [r3, #0]
    ap++;
 801ea32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ea34:	3301      	adds	r3, #1
 801ea36:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 801ea38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ea3c:	3301      	adds	r3, #1
 801ea3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801ea42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ea46:	2b03      	cmp	r3, #3
 801ea48:	d9a2      	bls.n	801e990 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 801ea4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ea4c:	3b01      	subs	r3, #1
 801ea4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ea50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ea52:	2200      	movs	r2, #0
 801ea54:	701a      	strb	r2, [r3, #0]
  return buf;
 801ea56:	68bb      	ldr	r3, [r7, #8]
}
 801ea58:	4618      	mov	r0, r3
 801ea5a:	3734      	adds	r7, #52	@ 0x34
 801ea5c:	46bd      	mov	sp, r7
 801ea5e:	bc80      	pop	{r7}
 801ea60:	4770      	bx	lr
 801ea62:	bf00      	nop
 801ea64:	cccccccd 	.word	0xcccccccd

0801ea68 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801ea68:	b580      	push	{r7, lr}
 801ea6a:	b084      	sub	sp, #16
 801ea6c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801ea6e:	2300      	movs	r3, #0
 801ea70:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801ea72:	4b12      	ldr	r3, [pc, #72]	@ (801eabc <ip_reass_tmr+0x54>)
 801ea74:	681b      	ldr	r3, [r3, #0]
 801ea76:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801ea78:	e018      	b.n	801eaac <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801ea7a:	68fb      	ldr	r3, [r7, #12]
 801ea7c:	7fdb      	ldrb	r3, [r3, #31]
 801ea7e:	2b00      	cmp	r3, #0
 801ea80:	d00b      	beq.n	801ea9a <ip_reass_tmr+0x32>
      r->timer--;
 801ea82:	68fb      	ldr	r3, [r7, #12]
 801ea84:	7fdb      	ldrb	r3, [r3, #31]
 801ea86:	3b01      	subs	r3, #1
 801ea88:	b2da      	uxtb	r2, r3
 801ea8a:	68fb      	ldr	r3, [r7, #12]
 801ea8c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 801ea8e:	68fb      	ldr	r3, [r7, #12]
 801ea90:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801ea92:	68fb      	ldr	r3, [r7, #12]
 801ea94:	681b      	ldr	r3, [r3, #0]
 801ea96:	60fb      	str	r3, [r7, #12]
 801ea98:	e008      	b.n	801eaac <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801ea9a:	68fb      	ldr	r3, [r7, #12]
 801ea9c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801ea9e:	68fb      	ldr	r3, [r7, #12]
 801eaa0:	681b      	ldr	r3, [r3, #0]
 801eaa2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801eaa4:	68b9      	ldr	r1, [r7, #8]
 801eaa6:	6878      	ldr	r0, [r7, #4]
 801eaa8:	f000 f80a 	bl	801eac0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801eaac:	68fb      	ldr	r3, [r7, #12]
 801eaae:	2b00      	cmp	r3, #0
 801eab0:	d1e3      	bne.n	801ea7a <ip_reass_tmr+0x12>
     }
   }
}
 801eab2:	bf00      	nop
 801eab4:	bf00      	nop
 801eab6:	3710      	adds	r7, #16
 801eab8:	46bd      	mov	sp, r7
 801eaba:	bd80      	pop	{r7, pc}
 801eabc:	2000deb4 	.word	0x2000deb4

0801eac0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801eac0:	b580      	push	{r7, lr}
 801eac2:	b088      	sub	sp, #32
 801eac4:	af00      	add	r7, sp, #0
 801eac6:	6078      	str	r0, [r7, #4]
 801eac8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801eaca:	2300      	movs	r3, #0
 801eacc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801eace:	683a      	ldr	r2, [r7, #0]
 801ead0:	687b      	ldr	r3, [r7, #4]
 801ead2:	429a      	cmp	r2, r3
 801ead4:	d105      	bne.n	801eae2 <ip_reass_free_complete_datagram+0x22>
 801ead6:	4b48      	ldr	r3, [pc, #288]	@ (801ebf8 <ip_reass_free_complete_datagram+0x138>)
 801ead8:	22ab      	movs	r2, #171	@ 0xab
 801eada:	4948      	ldr	r1, [pc, #288]	@ (801ebfc <ip_reass_free_complete_datagram+0x13c>)
 801eadc:	4848      	ldr	r0, [pc, #288]	@ (801ec00 <ip_reass_free_complete_datagram+0x140>)
 801eade:	f001 fcdf 	bl	80204a0 <iprintf>
  if (prev != NULL) {
 801eae2:	683b      	ldr	r3, [r7, #0]
 801eae4:	2b00      	cmp	r3, #0
 801eae6:	d00a      	beq.n	801eafe <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801eae8:	683b      	ldr	r3, [r7, #0]
 801eaea:	681b      	ldr	r3, [r3, #0]
 801eaec:	687a      	ldr	r2, [r7, #4]
 801eaee:	429a      	cmp	r2, r3
 801eaf0:	d005      	beq.n	801eafe <ip_reass_free_complete_datagram+0x3e>
 801eaf2:	4b41      	ldr	r3, [pc, #260]	@ (801ebf8 <ip_reass_free_complete_datagram+0x138>)
 801eaf4:	22ad      	movs	r2, #173	@ 0xad
 801eaf6:	4943      	ldr	r1, [pc, #268]	@ (801ec04 <ip_reass_free_complete_datagram+0x144>)
 801eaf8:	4841      	ldr	r0, [pc, #260]	@ (801ec00 <ip_reass_free_complete_datagram+0x140>)
 801eafa:	f001 fcd1 	bl	80204a0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
 801eafe:	4b42      	ldr	r3, [pc, #264]	@ (801ec08 <ip_reass_free_complete_datagram+0x148>)
 801eb00:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 801eb04:	3301      	adds	r3, #1
 801eb06:	4a40      	ldr	r2, [pc, #256]	@ (801ec08 <ip_reass_free_complete_datagram+0x148>)
 801eb08:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801eb0c:	687b      	ldr	r3, [r7, #4]
 801eb0e:	685b      	ldr	r3, [r3, #4]
 801eb10:	685b      	ldr	r3, [r3, #4]
 801eb12:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801eb14:	697b      	ldr	r3, [r7, #20]
 801eb16:	889b      	ldrh	r3, [r3, #4]
 801eb18:	b29b      	uxth	r3, r3
 801eb1a:	2b00      	cmp	r3, #0
 801eb1c:	d12a      	bne.n	801eb74 <ip_reass_free_complete_datagram+0xb4>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801eb1e:	687b      	ldr	r3, [r7, #4]
 801eb20:	685b      	ldr	r3, [r3, #4]
 801eb22:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801eb24:	697b      	ldr	r3, [r7, #20]
 801eb26:	681a      	ldr	r2, [r3, #0]
 801eb28:	687b      	ldr	r3, [r7, #4]
 801eb2a:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801eb2c:	69bb      	ldr	r3, [r7, #24]
 801eb2e:	6858      	ldr	r0, [r3, #4]
 801eb30:	687b      	ldr	r3, [r7, #4]
 801eb32:	3308      	adds	r3, #8
 801eb34:	2214      	movs	r2, #20
 801eb36:	4619      	mov	r1, r3
 801eb38:	f001 ff47 	bl	80209ca <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801eb3c:	2101      	movs	r1, #1
 801eb3e:	69b8      	ldr	r0, [r7, #24]
 801eb40:	f7ff f96e 	bl	801de20 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801eb44:	69b8      	ldr	r0, [r7, #24]
 801eb46:	f7f5 fd57 	bl	80145f8 <pbuf_clen>
 801eb4a:	4603      	mov	r3, r0
 801eb4c:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801eb4e:	8bfa      	ldrh	r2, [r7, #30]
 801eb50:	8a7b      	ldrh	r3, [r7, #18]
 801eb52:	4413      	add	r3, r2
 801eb54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801eb58:	db05      	blt.n	801eb66 <ip_reass_free_complete_datagram+0xa6>
 801eb5a:	4b27      	ldr	r3, [pc, #156]	@ (801ebf8 <ip_reass_free_complete_datagram+0x138>)
 801eb5c:	22bc      	movs	r2, #188	@ 0xbc
 801eb5e:	492b      	ldr	r1, [pc, #172]	@ (801ec0c <ip_reass_free_complete_datagram+0x14c>)
 801eb60:	4827      	ldr	r0, [pc, #156]	@ (801ec00 <ip_reass_free_complete_datagram+0x140>)
 801eb62:	f001 fc9d 	bl	80204a0 <iprintf>
    pbufs_freed += clen;
 801eb66:	8bfa      	ldrh	r2, [r7, #30]
 801eb68:	8a7b      	ldrh	r3, [r7, #18]
 801eb6a:	4413      	add	r3, r2
 801eb6c:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801eb6e:	69b8      	ldr	r0, [r7, #24]
 801eb70:	f7f5 fcae 	bl	80144d0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801eb74:	687b      	ldr	r3, [r7, #4]
 801eb76:	685b      	ldr	r3, [r3, #4]
 801eb78:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801eb7a:	e01f      	b.n	801ebbc <ip_reass_free_complete_datagram+0xfc>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801eb7c:	69bb      	ldr	r3, [r7, #24]
 801eb7e:	685b      	ldr	r3, [r3, #4]
 801eb80:	617b      	str	r3, [r7, #20]
    pcur = p;
 801eb82:	69bb      	ldr	r3, [r7, #24]
 801eb84:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801eb86:	697b      	ldr	r3, [r7, #20]
 801eb88:	681b      	ldr	r3, [r3, #0]
 801eb8a:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801eb8c:	68f8      	ldr	r0, [r7, #12]
 801eb8e:	f7f5 fd33 	bl	80145f8 <pbuf_clen>
 801eb92:	4603      	mov	r3, r0
 801eb94:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801eb96:	8bfa      	ldrh	r2, [r7, #30]
 801eb98:	8a7b      	ldrh	r3, [r7, #18]
 801eb9a:	4413      	add	r3, r2
 801eb9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801eba0:	db05      	blt.n	801ebae <ip_reass_free_complete_datagram+0xee>
 801eba2:	4b15      	ldr	r3, [pc, #84]	@ (801ebf8 <ip_reass_free_complete_datagram+0x138>)
 801eba4:	22cc      	movs	r2, #204	@ 0xcc
 801eba6:	4919      	ldr	r1, [pc, #100]	@ (801ec0c <ip_reass_free_complete_datagram+0x14c>)
 801eba8:	4815      	ldr	r0, [pc, #84]	@ (801ec00 <ip_reass_free_complete_datagram+0x140>)
 801ebaa:	f001 fc79 	bl	80204a0 <iprintf>
    pbufs_freed += clen;
 801ebae:	8bfa      	ldrh	r2, [r7, #30]
 801ebb0:	8a7b      	ldrh	r3, [r7, #18]
 801ebb2:	4413      	add	r3, r2
 801ebb4:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801ebb6:	68f8      	ldr	r0, [r7, #12]
 801ebb8:	f7f5 fc8a 	bl	80144d0 <pbuf_free>
  while (p != NULL) {
 801ebbc:	69bb      	ldr	r3, [r7, #24]
 801ebbe:	2b00      	cmp	r3, #0
 801ebc0:	d1dc      	bne.n	801eb7c <ip_reass_free_complete_datagram+0xbc>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801ebc2:	6839      	ldr	r1, [r7, #0]
 801ebc4:	6878      	ldr	r0, [r7, #4]
 801ebc6:	f000 f8cb 	bl	801ed60 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 801ebca:	4b11      	ldr	r3, [pc, #68]	@ (801ec10 <ip_reass_free_complete_datagram+0x150>)
 801ebcc:	881b      	ldrh	r3, [r3, #0]
 801ebce:	8bfa      	ldrh	r2, [r7, #30]
 801ebd0:	429a      	cmp	r2, r3
 801ebd2:	d905      	bls.n	801ebe0 <ip_reass_free_complete_datagram+0x120>
 801ebd4:	4b08      	ldr	r3, [pc, #32]	@ (801ebf8 <ip_reass_free_complete_datagram+0x138>)
 801ebd6:	22d2      	movs	r2, #210	@ 0xd2
 801ebd8:	490e      	ldr	r1, [pc, #56]	@ (801ec14 <ip_reass_free_complete_datagram+0x154>)
 801ebda:	4809      	ldr	r0, [pc, #36]	@ (801ec00 <ip_reass_free_complete_datagram+0x140>)
 801ebdc:	f001 fc60 	bl	80204a0 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 801ebe0:	4b0b      	ldr	r3, [pc, #44]	@ (801ec10 <ip_reass_free_complete_datagram+0x150>)
 801ebe2:	881a      	ldrh	r2, [r3, #0]
 801ebe4:	8bfb      	ldrh	r3, [r7, #30]
 801ebe6:	1ad3      	subs	r3, r2, r3
 801ebe8:	b29a      	uxth	r2, r3
 801ebea:	4b09      	ldr	r3, [pc, #36]	@ (801ec10 <ip_reass_free_complete_datagram+0x150>)
 801ebec:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801ebee:	8bfb      	ldrh	r3, [r7, #30]
}
 801ebf0:	4618      	mov	r0, r3
 801ebf2:	3720      	adds	r7, #32
 801ebf4:	46bd      	mov	sp, r7
 801ebf6:	bd80      	pop	{r7, pc}
 801ebf8:	08025d10 	.word	0x08025d10
 801ebfc:	08025d4c 	.word	0x08025d4c
 801ec00:	08025d58 	.word	0x08025d58
 801ec04:	08025d80 	.word	0x08025d80
 801ec08:	2000db84 	.word	0x2000db84
 801ec0c:	08025d94 	.word	0x08025d94
 801ec10:	2000deb8 	.word	0x2000deb8
 801ec14:	08025db4 	.word	0x08025db4

0801ec18 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801ec18:	b580      	push	{r7, lr}
 801ec1a:	b08a      	sub	sp, #40	@ 0x28
 801ec1c:	af00      	add	r7, sp, #0
 801ec1e:	6078      	str	r0, [r7, #4]
 801ec20:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801ec22:	2300      	movs	r3, #0
 801ec24:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801ec26:	2300      	movs	r3, #0
 801ec28:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801ec2a:	2300      	movs	r3, #0
 801ec2c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801ec2e:	2300      	movs	r3, #0
 801ec30:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801ec32:	2300      	movs	r3, #0
 801ec34:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801ec36:	4b28      	ldr	r3, [pc, #160]	@ (801ecd8 <ip_reass_remove_oldest_datagram+0xc0>)
 801ec38:	681b      	ldr	r3, [r3, #0]
 801ec3a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801ec3c:	e030      	b.n	801eca0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801ec3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec40:	695a      	ldr	r2, [r3, #20]
 801ec42:	687b      	ldr	r3, [r7, #4]
 801ec44:	68db      	ldr	r3, [r3, #12]
 801ec46:	429a      	cmp	r2, r3
 801ec48:	d10c      	bne.n	801ec64 <ip_reass_remove_oldest_datagram+0x4c>
 801ec4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec4c:	699a      	ldr	r2, [r3, #24]
 801ec4e:	687b      	ldr	r3, [r7, #4]
 801ec50:	691b      	ldr	r3, [r3, #16]
 801ec52:	429a      	cmp	r2, r3
 801ec54:	d106      	bne.n	801ec64 <ip_reass_remove_oldest_datagram+0x4c>
 801ec56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec58:	899a      	ldrh	r2, [r3, #12]
 801ec5a:	687b      	ldr	r3, [r7, #4]
 801ec5c:	889b      	ldrh	r3, [r3, #4]
 801ec5e:	b29b      	uxth	r3, r3
 801ec60:	429a      	cmp	r2, r3
 801ec62:	d014      	beq.n	801ec8e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801ec64:	693b      	ldr	r3, [r7, #16]
 801ec66:	3301      	adds	r3, #1
 801ec68:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801ec6a:	6a3b      	ldr	r3, [r7, #32]
 801ec6c:	2b00      	cmp	r3, #0
 801ec6e:	d104      	bne.n	801ec7a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801ec70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec72:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801ec74:	69fb      	ldr	r3, [r7, #28]
 801ec76:	61bb      	str	r3, [r7, #24]
 801ec78:	e009      	b.n	801ec8e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801ec7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec7c:	7fda      	ldrb	r2, [r3, #31]
 801ec7e:	6a3b      	ldr	r3, [r7, #32]
 801ec80:	7fdb      	ldrb	r3, [r3, #31]
 801ec82:	429a      	cmp	r2, r3
 801ec84:	d803      	bhi.n	801ec8e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801ec86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec88:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801ec8a:	69fb      	ldr	r3, [r7, #28]
 801ec8c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801ec8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec90:	681b      	ldr	r3, [r3, #0]
 801ec92:	2b00      	cmp	r3, #0
 801ec94:	d001      	beq.n	801ec9a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801ec96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec98:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801ec9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec9c:	681b      	ldr	r3, [r3, #0]
 801ec9e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801eca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eca2:	2b00      	cmp	r3, #0
 801eca4:	d1cb      	bne.n	801ec3e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801eca6:	6a3b      	ldr	r3, [r7, #32]
 801eca8:	2b00      	cmp	r3, #0
 801ecaa:	d008      	beq.n	801ecbe <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801ecac:	69b9      	ldr	r1, [r7, #24]
 801ecae:	6a38      	ldr	r0, [r7, #32]
 801ecb0:	f7ff ff06 	bl	801eac0 <ip_reass_free_complete_datagram>
 801ecb4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801ecb6:	697a      	ldr	r2, [r7, #20]
 801ecb8:	68fb      	ldr	r3, [r7, #12]
 801ecba:	4413      	add	r3, r2
 801ecbc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801ecbe:	697a      	ldr	r2, [r7, #20]
 801ecc0:	683b      	ldr	r3, [r7, #0]
 801ecc2:	429a      	cmp	r2, r3
 801ecc4:	da02      	bge.n	801eccc <ip_reass_remove_oldest_datagram+0xb4>
 801ecc6:	693b      	ldr	r3, [r7, #16]
 801ecc8:	2b01      	cmp	r3, #1
 801ecca:	dcac      	bgt.n	801ec26 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801eccc:	697b      	ldr	r3, [r7, #20]
}
 801ecce:	4618      	mov	r0, r3
 801ecd0:	3728      	adds	r7, #40	@ 0x28
 801ecd2:	46bd      	mov	sp, r7
 801ecd4:	bd80      	pop	{r7, pc}
 801ecd6:	bf00      	nop
 801ecd8:	2000deb4 	.word	0x2000deb4

0801ecdc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801ecdc:	b580      	push	{r7, lr}
 801ecde:	b084      	sub	sp, #16
 801ece0:	af00      	add	r7, sp, #0
 801ece2:	6078      	str	r0, [r7, #4]
 801ece4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801ece6:	2004      	movs	r0, #4
 801ece8:	f7f4 fe44 	bl	8013974 <memp_malloc>
 801ecec:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801ecee:	68fb      	ldr	r3, [r7, #12]
 801ecf0:	2b00      	cmp	r3, #0
 801ecf2:	d116      	bne.n	801ed22 <ip_reass_enqueue_new_datagram+0x46>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801ecf4:	6839      	ldr	r1, [r7, #0]
 801ecf6:	6878      	ldr	r0, [r7, #4]
 801ecf8:	f7ff ff8e 	bl	801ec18 <ip_reass_remove_oldest_datagram>
 801ecfc:	4602      	mov	r2, r0
 801ecfe:	683b      	ldr	r3, [r7, #0]
 801ed00:	4293      	cmp	r3, r2
 801ed02:	dc03      	bgt.n	801ed0c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801ed04:	2004      	movs	r0, #4
 801ed06:	f7f4 fe35 	bl	8013974 <memp_malloc>
 801ed0a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801ed0c:	68fb      	ldr	r3, [r7, #12]
 801ed0e:	2b00      	cmp	r3, #0
 801ed10:	d107      	bne.n	801ed22 <ip_reass_enqueue_new_datagram+0x46>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
 801ed12:	4b11      	ldr	r3, [pc, #68]	@ (801ed58 <ip_reass_enqueue_new_datagram+0x7c>)
 801ed14:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801ed16:	3301      	adds	r3, #1
 801ed18:	b29a      	uxth	r2, r3
 801ed1a:	4b0f      	ldr	r3, [pc, #60]	@ (801ed58 <ip_reass_enqueue_new_datagram+0x7c>)
 801ed1c:	879a      	strh	r2, [r3, #60]	@ 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 801ed1e:	2300      	movs	r3, #0
 801ed20:	e016      	b.n	801ed50 <ip_reass_enqueue_new_datagram+0x74>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801ed22:	2220      	movs	r2, #32
 801ed24:	2100      	movs	r1, #0
 801ed26:	68f8      	ldr	r0, [r7, #12]
 801ed28:	f001 fd90 	bl	802084c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801ed2c:	68fb      	ldr	r3, [r7, #12]
 801ed2e:	2203      	movs	r2, #3
 801ed30:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801ed32:	4b0a      	ldr	r3, [pc, #40]	@ (801ed5c <ip_reass_enqueue_new_datagram+0x80>)
 801ed34:	681a      	ldr	r2, [r3, #0]
 801ed36:	68fb      	ldr	r3, [r7, #12]
 801ed38:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801ed3a:	4a08      	ldr	r2, [pc, #32]	@ (801ed5c <ip_reass_enqueue_new_datagram+0x80>)
 801ed3c:	68fb      	ldr	r3, [r7, #12]
 801ed3e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801ed40:	68fb      	ldr	r3, [r7, #12]
 801ed42:	3308      	adds	r3, #8
 801ed44:	2214      	movs	r2, #20
 801ed46:	6879      	ldr	r1, [r7, #4]
 801ed48:	4618      	mov	r0, r3
 801ed4a:	f001 fe3e 	bl	80209ca <memcpy>
  return ipr;
 801ed4e:	68fb      	ldr	r3, [r7, #12]
}
 801ed50:	4618      	mov	r0, r3
 801ed52:	3710      	adds	r7, #16
 801ed54:	46bd      	mov	sp, r7
 801ed56:	bd80      	pop	{r7, pc}
 801ed58:	2000db84 	.word	0x2000db84
 801ed5c:	2000deb4 	.word	0x2000deb4

0801ed60 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801ed60:	b580      	push	{r7, lr}
 801ed62:	b082      	sub	sp, #8
 801ed64:	af00      	add	r7, sp, #0
 801ed66:	6078      	str	r0, [r7, #4]
 801ed68:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801ed6a:	4b10      	ldr	r3, [pc, #64]	@ (801edac <ip_reass_dequeue_datagram+0x4c>)
 801ed6c:	681b      	ldr	r3, [r3, #0]
 801ed6e:	687a      	ldr	r2, [r7, #4]
 801ed70:	429a      	cmp	r2, r3
 801ed72:	d104      	bne.n	801ed7e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801ed74:	687b      	ldr	r3, [r7, #4]
 801ed76:	681b      	ldr	r3, [r3, #0]
 801ed78:	4a0c      	ldr	r2, [pc, #48]	@ (801edac <ip_reass_dequeue_datagram+0x4c>)
 801ed7a:	6013      	str	r3, [r2, #0]
 801ed7c:	e00d      	b.n	801ed9a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801ed7e:	683b      	ldr	r3, [r7, #0]
 801ed80:	2b00      	cmp	r3, #0
 801ed82:	d106      	bne.n	801ed92 <ip_reass_dequeue_datagram+0x32>
 801ed84:	4b0a      	ldr	r3, [pc, #40]	@ (801edb0 <ip_reass_dequeue_datagram+0x50>)
 801ed86:	f240 1245 	movw	r2, #325	@ 0x145
 801ed8a:	490a      	ldr	r1, [pc, #40]	@ (801edb4 <ip_reass_dequeue_datagram+0x54>)
 801ed8c:	480a      	ldr	r0, [pc, #40]	@ (801edb8 <ip_reass_dequeue_datagram+0x58>)
 801ed8e:	f001 fb87 	bl	80204a0 <iprintf>
    prev->next = ipr->next;
 801ed92:	687b      	ldr	r3, [r7, #4]
 801ed94:	681a      	ldr	r2, [r3, #0]
 801ed96:	683b      	ldr	r3, [r7, #0]
 801ed98:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801ed9a:	6879      	ldr	r1, [r7, #4]
 801ed9c:	2004      	movs	r0, #4
 801ed9e:	f7f4 fe3b 	bl	8013a18 <memp_free>
}
 801eda2:	bf00      	nop
 801eda4:	3708      	adds	r7, #8
 801eda6:	46bd      	mov	sp, r7
 801eda8:	bd80      	pop	{r7, pc}
 801edaa:	bf00      	nop
 801edac:	2000deb4 	.word	0x2000deb4
 801edb0:	08025d10 	.word	0x08025d10
 801edb4:	08025dd0 	.word	0x08025dd0
 801edb8:	08025d58 	.word	0x08025d58

0801edbc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801edbc:	b580      	push	{r7, lr}
 801edbe:	b08c      	sub	sp, #48	@ 0x30
 801edc0:	af00      	add	r7, sp, #0
 801edc2:	60f8      	str	r0, [r7, #12]
 801edc4:	60b9      	str	r1, [r7, #8]
 801edc6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 801edc8:	2300      	movs	r3, #0
 801edca:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801edcc:	2301      	movs	r3, #1
 801edce:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 801edd0:	68bb      	ldr	r3, [r7, #8]
 801edd2:	685b      	ldr	r3, [r3, #4]
 801edd4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801edd6:	69fb      	ldr	r3, [r7, #28]
 801edd8:	885b      	ldrh	r3, [r3, #2]
 801edda:	b29b      	uxth	r3, r3
 801eddc:	4618      	mov	r0, r3
 801edde:	f7f4 f91f 	bl	8013020 <lwip_htons>
 801ede2:	4603      	mov	r3, r0
 801ede4:	461a      	mov	r2, r3
 801ede6:	69fb      	ldr	r3, [r7, #28]
 801ede8:	781b      	ldrb	r3, [r3, #0]
 801edea:	f003 030f 	and.w	r3, r3, #15
 801edee:	b29b      	uxth	r3, r3
 801edf0:	009b      	lsls	r3, r3, #2
 801edf2:	b29b      	uxth	r3, r3
 801edf4:	1ad3      	subs	r3, r2, r3
 801edf6:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801edf8:	69fb      	ldr	r3, [r7, #28]
 801edfa:	88db      	ldrh	r3, [r3, #6]
 801edfc:	b29b      	uxth	r3, r3
 801edfe:	4618      	mov	r0, r3
 801ee00:	f7f4 f90e 	bl	8013020 <lwip_htons>
 801ee04:	4603      	mov	r3, r0
 801ee06:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ee0a:	b29b      	uxth	r3, r3
 801ee0c:	00db      	lsls	r3, r3, #3
 801ee0e:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 801ee10:	68bb      	ldr	r3, [r7, #8]
 801ee12:	685b      	ldr	r3, [r3, #4]
 801ee14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801ee16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ee18:	2200      	movs	r2, #0
 801ee1a:	701a      	strb	r2, [r3, #0]
 801ee1c:	2200      	movs	r2, #0
 801ee1e:	705a      	strb	r2, [r3, #1]
 801ee20:	2200      	movs	r2, #0
 801ee22:	709a      	strb	r2, [r3, #2]
 801ee24:	2200      	movs	r2, #0
 801ee26:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801ee28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ee2a:	8b3a      	ldrh	r2, [r7, #24]
 801ee2c:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 801ee2e:	8b3a      	ldrh	r2, [r7, #24]
 801ee30:	8b7b      	ldrh	r3, [r7, #26]
 801ee32:	4413      	add	r3, r2
 801ee34:	b29a      	uxth	r2, r3
 801ee36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ee38:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801ee3a:	68fb      	ldr	r3, [r7, #12]
 801ee3c:	685b      	ldr	r3, [r3, #4]
 801ee3e:	627b      	str	r3, [r7, #36]	@ 0x24
 801ee40:	e061      	b.n	801ef06 <ip_reass_chain_frag_into_datagram_and_validate+0x14a>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 801ee42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ee44:	685b      	ldr	r3, [r3, #4]
 801ee46:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 801ee48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ee4a:	889b      	ldrh	r3, [r3, #4]
 801ee4c:	b29a      	uxth	r2, r3
 801ee4e:	697b      	ldr	r3, [r7, #20]
 801ee50:	889b      	ldrh	r3, [r3, #4]
 801ee52:	b29b      	uxth	r3, r3
 801ee54:	429a      	cmp	r2, r3
 801ee56:	d232      	bcs.n	801eebe <ip_reass_chain_frag_into_datagram_and_validate+0x102>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801ee58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ee5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ee5c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801ee5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ee60:	2b00      	cmp	r3, #0
 801ee62:	d01f      	beq.n	801eea4 <ip_reass_chain_frag_into_datagram_and_validate+0xe8>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801ee64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ee66:	889b      	ldrh	r3, [r3, #4]
 801ee68:	b29a      	uxth	r2, r3
 801ee6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ee6c:	88db      	ldrh	r3, [r3, #6]
 801ee6e:	b29b      	uxth	r3, r3
 801ee70:	429a      	cmp	r2, r3
 801ee72:	f0c0 80e3 	bcc.w	801f03c <ip_reass_chain_frag_into_datagram_and_validate+0x280>
 801ee76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ee78:	88db      	ldrh	r3, [r3, #6]
 801ee7a:	b29a      	uxth	r2, r3
 801ee7c:	697b      	ldr	r3, [r7, #20]
 801ee7e:	889b      	ldrh	r3, [r3, #4]
 801ee80:	b29b      	uxth	r3, r3
 801ee82:	429a      	cmp	r2, r3
 801ee84:	f200 80da 	bhi.w	801f03c <ip_reass_chain_frag_into_datagram_and_validate+0x280>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801ee88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ee8a:	68ba      	ldr	r2, [r7, #8]
 801ee8c:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801ee8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ee90:	88db      	ldrh	r3, [r3, #6]
 801ee92:	b29a      	uxth	r2, r3
 801ee94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ee96:	889b      	ldrh	r3, [r3, #4]
 801ee98:	b29b      	uxth	r3, r3
 801ee9a:	429a      	cmp	r2, r3
 801ee9c:	d037      	beq.n	801ef0e <ip_reass_chain_frag_into_datagram_and_validate+0x152>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801ee9e:	2300      	movs	r3, #0
 801eea0:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801eea2:	e034      	b.n	801ef0e <ip_reass_chain_frag_into_datagram_and_validate+0x152>
        if (iprh->end > iprh_tmp->start) {
 801eea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eea6:	88db      	ldrh	r3, [r3, #6]
 801eea8:	b29a      	uxth	r2, r3
 801eeaa:	697b      	ldr	r3, [r7, #20]
 801eeac:	889b      	ldrh	r3, [r3, #4]
 801eeae:	b29b      	uxth	r3, r3
 801eeb0:	429a      	cmp	r2, r3
 801eeb2:	f200 80c5 	bhi.w	801f040 <ip_reass_chain_frag_into_datagram_and_validate+0x284>
        ipr->p = new_p;
 801eeb6:	68fb      	ldr	r3, [r7, #12]
 801eeb8:	68ba      	ldr	r2, [r7, #8]
 801eeba:	605a      	str	r2, [r3, #4]
      break;
 801eebc:	e027      	b.n	801ef0e <ip_reass_chain_frag_into_datagram_and_validate+0x152>
    } else if (iprh->start == iprh_tmp->start) {
 801eebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eec0:	889b      	ldrh	r3, [r3, #4]
 801eec2:	b29a      	uxth	r2, r3
 801eec4:	697b      	ldr	r3, [r7, #20]
 801eec6:	889b      	ldrh	r3, [r3, #4]
 801eec8:	b29b      	uxth	r3, r3
 801eeca:	429a      	cmp	r2, r3
 801eecc:	f000 80ba 	beq.w	801f044 <ip_reass_chain_frag_into_datagram_and_validate+0x288>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801eed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eed2:	889b      	ldrh	r3, [r3, #4]
 801eed4:	b29a      	uxth	r2, r3
 801eed6:	697b      	ldr	r3, [r7, #20]
 801eed8:	88db      	ldrh	r3, [r3, #6]
 801eeda:	b29b      	uxth	r3, r3
 801eedc:	429a      	cmp	r2, r3
 801eede:	f0c0 80b3 	bcc.w	801f048 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801eee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801eee4:	2b00      	cmp	r3, #0
 801eee6:	d009      	beq.n	801eefc <ip_reass_chain_frag_into_datagram_and_validate+0x140>
        if (iprh_prev->end != iprh_tmp->start) {
 801eee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801eeea:	88db      	ldrh	r3, [r3, #6]
 801eeec:	b29a      	uxth	r2, r3
 801eeee:	697b      	ldr	r3, [r7, #20]
 801eef0:	889b      	ldrh	r3, [r3, #4]
 801eef2:	b29b      	uxth	r3, r3
 801eef4:	429a      	cmp	r2, r3
 801eef6:	d001      	beq.n	801eefc <ip_reass_chain_frag_into_datagram_and_validate+0x140>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801eef8:	2300      	movs	r3, #0
 801eefa:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801eefc:	697b      	ldr	r3, [r7, #20]
 801eefe:	681b      	ldr	r3, [r3, #0]
 801ef00:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801ef02:	697b      	ldr	r3, [r7, #20]
 801ef04:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801ef06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ef08:	2b00      	cmp	r3, #0
 801ef0a:	d19a      	bne.n	801ee42 <ip_reass_chain_frag_into_datagram_and_validate+0x86>
 801ef0c:	e000      	b.n	801ef10 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
      break;
 801ef0e:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801ef10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ef12:	2b00      	cmp	r3, #0
 801ef14:	d12d      	bne.n	801ef72 <ip_reass_chain_frag_into_datagram_and_validate+0x1b6>
    if (iprh_prev != NULL) {
 801ef16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ef18:	2b00      	cmp	r3, #0
 801ef1a:	d01c      	beq.n	801ef56 <ip_reass_chain_frag_into_datagram_and_validate+0x19a>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801ef1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ef1e:	88db      	ldrh	r3, [r3, #6]
 801ef20:	b29a      	uxth	r2, r3
 801ef22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ef24:	889b      	ldrh	r3, [r3, #4]
 801ef26:	b29b      	uxth	r3, r3
 801ef28:	429a      	cmp	r2, r3
 801ef2a:	d906      	bls.n	801ef3a <ip_reass_chain_frag_into_datagram_and_validate+0x17e>
 801ef2c:	4b51      	ldr	r3, [pc, #324]	@ (801f074 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801ef2e:	f240 12ab 	movw	r2, #427	@ 0x1ab
 801ef32:	4951      	ldr	r1, [pc, #324]	@ (801f078 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ef34:	4851      	ldr	r0, [pc, #324]	@ (801f07c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801ef36:	f001 fab3 	bl	80204a0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801ef3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ef3c:	68ba      	ldr	r2, [r7, #8]
 801ef3e:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801ef40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ef42:	88db      	ldrh	r3, [r3, #6]
 801ef44:	b29a      	uxth	r2, r3
 801ef46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ef48:	889b      	ldrh	r3, [r3, #4]
 801ef4a:	b29b      	uxth	r3, r3
 801ef4c:	429a      	cmp	r2, r3
 801ef4e:	d010      	beq.n	801ef72 <ip_reass_chain_frag_into_datagram_and_validate+0x1b6>
        valid = 0;
 801ef50:	2300      	movs	r3, #0
 801ef52:	623b      	str	r3, [r7, #32]
 801ef54:	e00d      	b.n	801ef72 <ip_reass_chain_frag_into_datagram_and_validate+0x1b6>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801ef56:	68fb      	ldr	r3, [r7, #12]
 801ef58:	685b      	ldr	r3, [r3, #4]
 801ef5a:	2b00      	cmp	r3, #0
 801ef5c:	d006      	beq.n	801ef6c <ip_reass_chain_frag_into_datagram_and_validate+0x1b0>
 801ef5e:	4b45      	ldr	r3, [pc, #276]	@ (801f074 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801ef60:	f240 12b3 	movw	r2, #435	@ 0x1b3
 801ef64:	4946      	ldr	r1, [pc, #280]	@ (801f080 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ef66:	4845      	ldr	r0, [pc, #276]	@ (801f07c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801ef68:	f001 fa9a 	bl	80204a0 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801ef6c:	68fb      	ldr	r3, [r7, #12]
 801ef6e:	68ba      	ldr	r2, [r7, #8]
 801ef70:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801ef72:	687b      	ldr	r3, [r7, #4]
 801ef74:	2b00      	cmp	r3, #0
 801ef76:	d105      	bne.n	801ef84 <ip_reass_chain_frag_into_datagram_and_validate+0x1c8>
 801ef78:	68fb      	ldr	r3, [r7, #12]
 801ef7a:	7f9b      	ldrb	r3, [r3, #30]
 801ef7c:	f003 0301 	and.w	r3, r3, #1
 801ef80:	2b00      	cmp	r3, #0
 801ef82:	d059      	beq.n	801f038 <ip_reass_chain_frag_into_datagram_and_validate+0x27c>
    /* and had no holes so far */
    if (valid) {
 801ef84:	6a3b      	ldr	r3, [r7, #32]
 801ef86:	2b00      	cmp	r3, #0
 801ef88:	d04f      	beq.n	801f02a <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 801ef8a:	68fb      	ldr	r3, [r7, #12]
 801ef8c:	685b      	ldr	r3, [r3, #4]
 801ef8e:	2b00      	cmp	r3, #0
 801ef90:	d006      	beq.n	801efa0 <ip_reass_chain_frag_into_datagram_and_validate+0x1e4>
 801ef92:	68fb      	ldr	r3, [r7, #12]
 801ef94:	685b      	ldr	r3, [r3, #4]
 801ef96:	685b      	ldr	r3, [r3, #4]
 801ef98:	889b      	ldrh	r3, [r3, #4]
 801ef9a:	b29b      	uxth	r3, r3
 801ef9c:	2b00      	cmp	r3, #0
 801ef9e:	d002      	beq.n	801efa6 <ip_reass_chain_frag_into_datagram_and_validate+0x1ea>
        valid = 0;
 801efa0:	2300      	movs	r3, #0
 801efa2:	623b      	str	r3, [r7, #32]
 801efa4:	e041      	b.n	801f02a <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801efa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801efa8:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801efaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801efac:	681b      	ldr	r3, [r3, #0]
 801efae:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801efb0:	e012      	b.n	801efd8 <ip_reass_chain_frag_into_datagram_and_validate+0x21c>
          iprh = (struct ip_reass_helper*)q->payload;
 801efb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801efb4:	685b      	ldr	r3, [r3, #4]
 801efb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801efb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801efba:	88db      	ldrh	r3, [r3, #6]
 801efbc:	b29a      	uxth	r2, r3
 801efbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801efc0:	889b      	ldrh	r3, [r3, #4]
 801efc2:	b29b      	uxth	r3, r3
 801efc4:	429a      	cmp	r2, r3
 801efc6:	d002      	beq.n	801efce <ip_reass_chain_frag_into_datagram_and_validate+0x212>
            valid = 0;
 801efc8:	2300      	movs	r3, #0
 801efca:	623b      	str	r3, [r7, #32]
            break;
 801efcc:	e007      	b.n	801efde <ip_reass_chain_frag_into_datagram_and_validate+0x222>
          }
          iprh_prev = iprh;
 801efce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801efd0:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801efd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801efd4:	681b      	ldr	r3, [r3, #0]
 801efd6:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801efd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801efda:	2b00      	cmp	r3, #0
 801efdc:	d1e9      	bne.n	801efb2 <ip_reass_chain_frag_into_datagram_and_validate+0x1f6>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801efde:	6a3b      	ldr	r3, [r7, #32]
 801efe0:	2b00      	cmp	r3, #0
 801efe2:	d022      	beq.n	801f02a <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801efe4:	68fb      	ldr	r3, [r7, #12]
 801efe6:	685b      	ldr	r3, [r3, #4]
 801efe8:	2b00      	cmp	r3, #0
 801efea:	d106      	bne.n	801effa <ip_reass_chain_frag_into_datagram_and_validate+0x23e>
 801efec:	4b21      	ldr	r3, [pc, #132]	@ (801f074 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801efee:	f44f 72ea 	mov.w	r2, #468	@ 0x1d4
 801eff2:	4924      	ldr	r1, [pc, #144]	@ (801f084 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801eff4:	4821      	ldr	r0, [pc, #132]	@ (801f07c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801eff6:	f001 fa53 	bl	80204a0 <iprintf>
          LWIP_ASSERT("sanity check",
 801effa:	68fb      	ldr	r3, [r7, #12]
 801effc:	685b      	ldr	r3, [r3, #4]
 801effe:	685b      	ldr	r3, [r3, #4]
 801f000:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801f002:	429a      	cmp	r2, r3
 801f004:	d106      	bne.n	801f014 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
 801f006:	4b1b      	ldr	r3, [pc, #108]	@ (801f074 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801f008:	f240 12d5 	movw	r2, #469	@ 0x1d5
 801f00c:	491d      	ldr	r1, [pc, #116]	@ (801f084 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801f00e:	481b      	ldr	r0, [pc, #108]	@ (801f07c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801f010:	f001 fa46 	bl	80204a0 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801f014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f016:	681b      	ldr	r3, [r3, #0]
 801f018:	2b00      	cmp	r3, #0
 801f01a:	d006      	beq.n	801f02a <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
 801f01c:	4b15      	ldr	r3, [pc, #84]	@ (801f074 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801f01e:	f240 12d7 	movw	r2, #471	@ 0x1d7
 801f022:	4919      	ldr	r1, [pc, #100]	@ (801f088 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801f024:	4815      	ldr	r0, [pc, #84]	@ (801f07c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801f026:	f001 fa3b 	bl	80204a0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801f02a:	6a3b      	ldr	r3, [r7, #32]
 801f02c:	2b00      	cmp	r3, #0
 801f02e:	bf14      	ite	ne
 801f030:	2301      	movne	r3, #1
 801f032:	2300      	moveq	r3, #0
 801f034:	b2db      	uxtb	r3, r3
 801f036:	e018      	b.n	801f06a <ip_reass_chain_frag_into_datagram_and_validate+0x2ae>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801f038:	2300      	movs	r3, #0
 801f03a:	e016      	b.n	801f06a <ip_reass_chain_frag_into_datagram_and_validate+0x2ae>
          goto freepbuf;
 801f03c:	bf00      	nop
 801f03e:	e004      	b.n	801f04a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
          goto freepbuf;
 801f040:	bf00      	nop
 801f042:	e002      	b.n	801f04a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      goto freepbuf;
 801f044:	bf00      	nop
 801f046:	e000      	b.n	801f04a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      goto freepbuf;
 801f048:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 801f04a:	68b8      	ldr	r0, [r7, #8]
 801f04c:	f7f5 fad4 	bl	80145f8 <pbuf_clen>
 801f050:	4603      	mov	r3, r0
 801f052:	461a      	mov	r2, r3
 801f054:	4b0d      	ldr	r3, [pc, #52]	@ (801f08c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801f056:	881b      	ldrh	r3, [r3, #0]
 801f058:	1a9b      	subs	r3, r3, r2
 801f05a:	b29a      	uxth	r2, r3
 801f05c:	4b0b      	ldr	r3, [pc, #44]	@ (801f08c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801f05e:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 801f060:	68b8      	ldr	r0, [r7, #8]
 801f062:	f7f5 fa35 	bl	80144d0 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 801f066:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 801f06a:	4618      	mov	r0, r3
 801f06c:	3730      	adds	r7, #48	@ 0x30
 801f06e:	46bd      	mov	sp, r7
 801f070:	bd80      	pop	{r7, pc}
 801f072:	bf00      	nop
 801f074:	08025d10 	.word	0x08025d10
 801f078:	08025dec 	.word	0x08025dec
 801f07c:	08025d58 	.word	0x08025d58
 801f080:	08025e0c 	.word	0x08025e0c
 801f084:	08025e44 	.word	0x08025e44
 801f088:	08025e54 	.word	0x08025e54
 801f08c:	2000deb8 	.word	0x2000deb8

0801f090 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801f090:	b580      	push	{r7, lr}
 801f092:	b08e      	sub	sp, #56	@ 0x38
 801f094:	af00      	add	r7, sp, #0
 801f096:	6078      	str	r0, [r7, #4]
  struct ip_reass_helper *iprh;
  u16_t offset, len, clen;
  int valid;
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
 801f098:	4b9d      	ldr	r3, [pc, #628]	@ (801f310 <ip4_reass+0x280>)
 801f09a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801f09c:	3301      	adds	r3, #1
 801f09e:	b29a      	uxth	r2, r3
 801f0a0:	4b9b      	ldr	r3, [pc, #620]	@ (801f310 <ip4_reass+0x280>)
 801f0a2:	865a      	strh	r2, [r3, #50]	@ 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);
 801f0a4:	4b9a      	ldr	r3, [pc, #616]	@ (801f310 <ip4_reass+0x280>)
 801f0a6:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 801f0aa:	3301      	adds	r3, #1
 801f0ac:	4a98      	ldr	r2, [pc, #608]	@ (801f310 <ip4_reass+0x280>)
 801f0ae:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c

  fraghdr = (struct ip_hdr*)p->payload;
 801f0b2:	687b      	ldr	r3, [r7, #4]
 801f0b4:	685b      	ldr	r3, [r3, #4]
 801f0b6:	62bb      	str	r3, [r7, #40]	@ 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 801f0b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f0ba:	781b      	ldrb	r3, [r3, #0]
 801f0bc:	f003 030f 	and.w	r3, r3, #15
 801f0c0:	2b05      	cmp	r3, #5
 801f0c2:	d008      	beq.n	801f0d6 <ip4_reass+0x46>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
 801f0c4:	4b92      	ldr	r3, [pc, #584]	@ (801f310 <ip4_reass+0x280>)
 801f0c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 801f0ca:	3301      	adds	r3, #1
 801f0cc:	b29a      	uxth	r2, r3
 801f0ce:	4b90      	ldr	r3, [pc, #576]	@ (801f310 <ip4_reass+0x280>)
 801f0d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    goto nullreturn;
 801f0d4:	e14c      	b.n	801f370 <ip4_reass+0x2e0>
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801f0d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f0d8:	88db      	ldrh	r3, [r3, #6]
 801f0da:	b29b      	uxth	r3, r3
 801f0dc:	4618      	mov	r0, r3
 801f0de:	f7f3 ff9f 	bl	8013020 <lwip_htons>
 801f0e2:	4603      	mov	r3, r0
 801f0e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f0e8:	b29b      	uxth	r3, r3
 801f0ea:	00db      	lsls	r3, r3, #3
 801f0ec:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801f0ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f0f0:	885b      	ldrh	r3, [r3, #2]
 801f0f2:	b29b      	uxth	r3, r3
 801f0f4:	4618      	mov	r0, r3
 801f0f6:	f7f3 ff93 	bl	8013020 <lwip_htons>
 801f0fa:	4603      	mov	r3, r0
 801f0fc:	461a      	mov	r2, r3
 801f0fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f100:	781b      	ldrb	r3, [r3, #0]
 801f102:	f003 030f 	and.w	r3, r3, #15
 801f106:	b29b      	uxth	r3, r3
 801f108:	009b      	lsls	r3, r3, #2
 801f10a:	b29b      	uxth	r3, r3
 801f10c:	1ad3      	subs	r3, r2, r3
 801f10e:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801f110:	6878      	ldr	r0, [r7, #4]
 801f112:	f7f5 fa71 	bl	80145f8 <pbuf_clen>
 801f116:	4603      	mov	r3, r0
 801f118:	847b      	strh	r3, [r7, #34]	@ 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801f11a:	4b7e      	ldr	r3, [pc, #504]	@ (801f314 <ip4_reass+0x284>)
 801f11c:	881b      	ldrh	r3, [r3, #0]
 801f11e:	461a      	mov	r2, r3
 801f120:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801f122:	4413      	add	r3, r2
 801f124:	2b0a      	cmp	r3, #10
 801f126:	dd15      	ble.n	801f154 <ip4_reass+0xc4>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801f128:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801f12a:	4619      	mov	r1, r3
 801f12c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801f12e:	f7ff fd73 	bl	801ec18 <ip_reass_remove_oldest_datagram>
 801f132:	4603      	mov	r3, r0
 801f134:	2b00      	cmp	r3, #0
 801f136:	d006      	beq.n	801f146 <ip4_reass+0xb6>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801f138:	4b76      	ldr	r3, [pc, #472]	@ (801f314 <ip4_reass+0x284>)
 801f13a:	881b      	ldrh	r3, [r3, #0]
 801f13c:	461a      	mov	r2, r3
 801f13e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801f140:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801f142:	2b0a      	cmp	r3, #10
 801f144:	dd06      	ble.n	801f154 <ip4_reass+0xc4>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
        ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
 801f146:	4b72      	ldr	r3, [pc, #456]	@ (801f310 <ip4_reass+0x280>)
 801f148:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801f14a:	3301      	adds	r3, #1
 801f14c:	b29a      	uxth	r2, r3
 801f14e:	4b70      	ldr	r3, [pc, #448]	@ (801f310 <ip4_reass+0x280>)
 801f150:	879a      	strh	r2, [r3, #60]	@ 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
 801f152:	e10d      	b.n	801f370 <ip4_reass+0x2e0>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801f154:	4b70      	ldr	r3, [pc, #448]	@ (801f318 <ip4_reass+0x288>)
 801f156:	681b      	ldr	r3, [r3, #0]
 801f158:	633b      	str	r3, [r7, #48]	@ 0x30
 801f15a:	e01e      	b.n	801f19a <ip4_reass+0x10a>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801f15c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f15e:	695a      	ldr	r2, [r3, #20]
 801f160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f162:	68db      	ldr	r3, [r3, #12]
 801f164:	429a      	cmp	r2, r3
 801f166:	d115      	bne.n	801f194 <ip4_reass+0x104>
 801f168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f16a:	699a      	ldr	r2, [r3, #24]
 801f16c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f16e:	691b      	ldr	r3, [r3, #16]
 801f170:	429a      	cmp	r2, r3
 801f172:	d10f      	bne.n	801f194 <ip4_reass+0x104>
 801f174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f176:	899a      	ldrh	r2, [r3, #12]
 801f178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f17a:	889b      	ldrh	r3, [r3, #4]
 801f17c:	b29b      	uxth	r3, r3
 801f17e:	429a      	cmp	r2, r3
 801f180:	d108      	bne.n	801f194 <ip4_reass+0x104>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
 801f182:	4b63      	ldr	r3, [pc, #396]	@ (801f310 <ip4_reass+0x280>)
 801f184:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801f188:	3301      	adds	r3, #1
 801f18a:	b29a      	uxth	r2, r3
 801f18c:	4b60      	ldr	r3, [pc, #384]	@ (801f310 <ip4_reass+0x280>)
 801f18e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      break;
 801f192:	e005      	b.n	801f1a0 <ip4_reass+0x110>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801f194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f196:	681b      	ldr	r3, [r3, #0]
 801f198:	633b      	str	r3, [r7, #48]	@ 0x30
 801f19a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f19c:	2b00      	cmp	r3, #0
 801f19e:	d1dd      	bne.n	801f15c <ip4_reass+0xcc>
    }
  }

  if (ipr == NULL) {
 801f1a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f1a2:	2b00      	cmp	r3, #0
 801f1a4:	d109      	bne.n	801f1ba <ip4_reass+0x12a>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801f1a6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801f1a8:	4619      	mov	r1, r3
 801f1aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801f1ac:	f7ff fd96 	bl	801ecdc <ip_reass_enqueue_new_datagram>
 801f1b0:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801f1b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f1b4:	2b00      	cmp	r3, #0
 801f1b6:	d11c      	bne.n	801f1f2 <ip4_reass+0x162>
      goto nullreturn;
 801f1b8:	e0da      	b.n	801f370 <ip4_reass+0x2e0>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801f1ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f1bc:	88db      	ldrh	r3, [r3, #6]
 801f1be:	b29b      	uxth	r3, r3
 801f1c0:	4618      	mov	r0, r3
 801f1c2:	f7f3 ff2d 	bl	8013020 <lwip_htons>
 801f1c6:	4603      	mov	r3, r0
 801f1c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f1cc:	2b00      	cmp	r3, #0
 801f1ce:	d110      	bne.n	801f1f2 <ip4_reass+0x162>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801f1d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f1d2:	89db      	ldrh	r3, [r3, #14]
 801f1d4:	4618      	mov	r0, r3
 801f1d6:	f7f3 ff23 	bl	8013020 <lwip_htons>
 801f1da:	4603      	mov	r3, r0
 801f1dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801f1e0:	2b00      	cmp	r3, #0
 801f1e2:	d006      	beq.n	801f1f2 <ip4_reass+0x162>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801f1e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f1e6:	3308      	adds	r3, #8
 801f1e8:	2214      	movs	r2, #20
 801f1ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801f1ec:	4618      	mov	r0, r3
 801f1ee:	f001 fbec 	bl	80209ca <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801f1f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f1f4:	88db      	ldrh	r3, [r3, #6]
 801f1f6:	b29b      	uxth	r3, r3
 801f1f8:	f003 0320 	and.w	r3, r3, #32
 801f1fc:	2b00      	cmp	r3, #0
 801f1fe:	bf0c      	ite	eq
 801f200:	2301      	moveq	r3, #1
 801f202:	2300      	movne	r3, #0
 801f204:	b2db      	uxtb	r3, r3
 801f206:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801f208:	69fb      	ldr	r3, [r7, #28]
 801f20a:	2b00      	cmp	r3, #0
 801f20c:	d00e      	beq.n	801f22c <ip4_reass+0x19c>
    u16_t datagram_len = (u16_t)(offset + len);
 801f20e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801f210:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801f212:	4413      	add	r3, r2
 801f214:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801f216:	8b7a      	ldrh	r2, [r7, #26]
 801f218:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801f21a:	429a      	cmp	r2, r3
 801f21c:	f0c0 80a5 	bcc.w	801f36a <ip4_reass+0x2da>
 801f220:	8b7b      	ldrh	r3, [r7, #26]
 801f222:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801f226:	4293      	cmp	r3, r2
 801f228:	f200 809f 	bhi.w	801f36a <ip4_reass+0x2da>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801f22c:	69fa      	ldr	r2, [r7, #28]
 801f22e:	6879      	ldr	r1, [r7, #4]
 801f230:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801f232:	f7ff fdc3 	bl	801edbc <ip_reass_chain_frag_into_datagram_and_validate>
 801f236:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801f238:	697b      	ldr	r3, [r7, #20]
 801f23a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f23e:	f000 8096 	beq.w	801f36e <ip4_reass+0x2de>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801f242:	4b34      	ldr	r3, [pc, #208]	@ (801f314 <ip4_reass+0x284>)
 801f244:	881a      	ldrh	r2, [r3, #0]
 801f246:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801f248:	4413      	add	r3, r2
 801f24a:	b29a      	uxth	r2, r3
 801f24c:	4b31      	ldr	r3, [pc, #196]	@ (801f314 <ip4_reass+0x284>)
 801f24e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801f250:	69fb      	ldr	r3, [r7, #28]
 801f252:	2b00      	cmp	r3, #0
 801f254:	d00d      	beq.n	801f272 <ip4_reass+0x1e2>
    u16_t datagram_len = (u16_t)(offset + len);
 801f256:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801f258:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801f25a:	4413      	add	r3, r2
 801f25c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801f25e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f260:	8a7a      	ldrh	r2, [r7, #18]
 801f262:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801f264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f266:	7f9b      	ldrb	r3, [r3, #30]
 801f268:	f043 0301 	orr.w	r3, r3, #1
 801f26c:	b2da      	uxtb	r2, r3
 801f26e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f270:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801f272:	697b      	ldr	r3, [r7, #20]
 801f274:	2b01      	cmp	r3, #1
 801f276:	d176      	bne.n	801f366 <ip4_reass+0x2d6>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 801f278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f27a:	8b9b      	ldrh	r3, [r3, #28]
 801f27c:	3314      	adds	r3, #20
 801f27e:	b29a      	uxth	r2, r3
 801f280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f282:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 801f284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f286:	685b      	ldr	r3, [r3, #4]
 801f288:	685b      	ldr	r3, [r3, #4]
 801f28a:	681b      	ldr	r3, [r3, #0]
 801f28c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 801f28e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f290:	685b      	ldr	r3, [r3, #4]
 801f292:	685b      	ldr	r3, [r3, #4]
 801f294:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801f296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f298:	3308      	adds	r3, #8
 801f29a:	2214      	movs	r2, #20
 801f29c:	4619      	mov	r1, r3
 801f29e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801f2a0:	f001 fb93 	bl	80209ca <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 801f2a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f2a6:	8b9b      	ldrh	r3, [r3, #28]
 801f2a8:	4618      	mov	r0, r3
 801f2aa:	f7f3 feb9 	bl	8013020 <lwip_htons>
 801f2ae:	4603      	mov	r3, r0
 801f2b0:	461a      	mov	r2, r3
 801f2b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f2b4:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801f2b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f2b8:	2200      	movs	r2, #0
 801f2ba:	719a      	strb	r2, [r3, #6]
 801f2bc:	2200      	movs	r2, #0
 801f2be:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801f2c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f2c2:	2200      	movs	r2, #0
 801f2c4:	729a      	strb	r2, [r3, #10]
 801f2c6:	2200      	movs	r2, #0
 801f2c8:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801f2ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f2cc:	685b      	ldr	r3, [r3, #4]
 801f2ce:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801f2d0:	e00e      	b.n	801f2f0 <ip4_reass+0x260>
      iprh = (struct ip_reass_helper*)r->payload;
 801f2d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f2d4:	685b      	ldr	r3, [r3, #4]
 801f2d6:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 801f2d8:	f06f 0113 	mvn.w	r1, #19
 801f2dc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801f2de:	f7f5 f8d3 	bl	8014488 <pbuf_header>
      pbuf_cat(p, r);
 801f2e2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801f2e4:	6878      	ldr	r0, [r7, #4]
 801f2e6:	f7f5 f9bf 	bl	8014668 <pbuf_cat>
      r = iprh->next_pbuf;
 801f2ea:	68fb      	ldr	r3, [r7, #12]
 801f2ec:	681b      	ldr	r3, [r3, #0]
 801f2ee:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801f2f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f2f2:	2b00      	cmp	r3, #0
 801f2f4:	d1ed      	bne.n	801f2d2 <ip4_reass+0x242>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801f2f6:	4b08      	ldr	r3, [pc, #32]	@ (801f318 <ip4_reass+0x288>)
 801f2f8:	681b      	ldr	r3, [r3, #0]
 801f2fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801f2fc:	429a      	cmp	r2, r3
 801f2fe:	d102      	bne.n	801f306 <ip4_reass+0x276>
      ipr_prev = NULL;
 801f300:	2300      	movs	r3, #0
 801f302:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801f304:	e017      	b.n	801f336 <ip4_reass+0x2a6>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801f306:	4b04      	ldr	r3, [pc, #16]	@ (801f318 <ip4_reass+0x288>)
 801f308:	681b      	ldr	r3, [r3, #0]
 801f30a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801f30c:	e00e      	b.n	801f32c <ip4_reass+0x29c>
 801f30e:	bf00      	nop
 801f310:	2000db84 	.word	0x2000db84
 801f314:	2000deb8 	.word	0x2000deb8
 801f318:	2000deb4 	.word	0x2000deb4
        if (ipr_prev->next == ipr) {
 801f31c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f31e:	681b      	ldr	r3, [r3, #0]
 801f320:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801f322:	429a      	cmp	r2, r3
 801f324:	d006      	beq.n	801f334 <ip4_reass+0x2a4>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801f326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f328:	681b      	ldr	r3, [r3, #0]
 801f32a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801f32c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f32e:	2b00      	cmp	r3, #0
 801f330:	d1f4      	bne.n	801f31c <ip4_reass+0x28c>
 801f332:	e000      	b.n	801f336 <ip4_reass+0x2a6>
          break;
 801f334:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801f336:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801f338:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801f33a:	f7ff fd11 	bl	801ed60 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 801f33e:	6878      	ldr	r0, [r7, #4]
 801f340:	f7f5 f95a 	bl	80145f8 <pbuf_clen>
 801f344:	4603      	mov	r3, r0
 801f346:	461a      	mov	r2, r3
 801f348:	4b10      	ldr	r3, [pc, #64]	@ (801f38c <ip4_reass+0x2fc>)
 801f34a:	881b      	ldrh	r3, [r3, #0]
 801f34c:	1a9b      	subs	r3, r3, r2
 801f34e:	b29a      	uxth	r2, r3
 801f350:	4b0e      	ldr	r3, [pc, #56]	@ (801f38c <ip4_reass+0x2fc>)
 801f352:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);
 801f354:	4b0e      	ldr	r3, [pc, #56]	@ (801f390 <ip4_reass+0x300>)
 801f356:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 801f35a:	3301      	adds	r3, #1
 801f35c:	4a0c      	ldr	r2, [pc, #48]	@ (801f390 <ip4_reass+0x300>)
 801f35e:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8

    /* Return the pbuf chain */
    return p;
 801f362:	687b      	ldr	r3, [r7, #4]
 801f364:	e00e      	b.n	801f384 <ip4_reass+0x2f4>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801f366:	2300      	movs	r3, #0
 801f368:	e00c      	b.n	801f384 <ip4_reass+0x2f4>
      goto nullreturn;
 801f36a:	bf00      	nop
 801f36c:	e000      	b.n	801f370 <ip4_reass+0x2e0>
    goto nullreturn;
 801f36e:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
 801f370:	4b07      	ldr	r3, [pc, #28]	@ (801f390 <ip4_reass+0x300>)
 801f372:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801f374:	3301      	adds	r3, #1
 801f376:	b29a      	uxth	r2, r3
 801f378:	4b05      	ldr	r3, [pc, #20]	@ (801f390 <ip4_reass+0x300>)
 801f37a:	86da      	strh	r2, [r3, #54]	@ 0x36
  pbuf_free(p);
 801f37c:	6878      	ldr	r0, [r7, #4]
 801f37e:	f7f5 f8a7 	bl	80144d0 <pbuf_free>
  return NULL;
 801f382:	2300      	movs	r3, #0
}
 801f384:	4618      	mov	r0, r3
 801f386:	3738      	adds	r7, #56	@ 0x38
 801f388:	46bd      	mov	sp, r7
 801f38a:	bd80      	pop	{r7, pc}
 801f38c:	2000deb8 	.word	0x2000deb8
 801f390:	2000db84 	.word	0x2000db84

0801f394 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 801f394:	b580      	push	{r7, lr}
 801f396:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 801f398:	2005      	movs	r0, #5
 801f39a:	f7f4 faeb 	bl	8013974 <memp_malloc>
 801f39e:	4603      	mov	r3, r0
}
 801f3a0:	4618      	mov	r0, r3
 801f3a2:	bd80      	pop	{r7, pc}

0801f3a4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 801f3a4:	b580      	push	{r7, lr}
 801f3a6:	b082      	sub	sp, #8
 801f3a8:	af00      	add	r7, sp, #0
 801f3aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801f3ac:	687b      	ldr	r3, [r7, #4]
 801f3ae:	2b00      	cmp	r3, #0
 801f3b0:	d106      	bne.n	801f3c0 <ip_frag_free_pbuf_custom_ref+0x1c>
 801f3b2:	4b07      	ldr	r3, [pc, #28]	@ (801f3d0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801f3b4:	f240 22ae 	movw	r2, #686	@ 0x2ae
 801f3b8:	4906      	ldr	r1, [pc, #24]	@ (801f3d4 <ip_frag_free_pbuf_custom_ref+0x30>)
 801f3ba:	4807      	ldr	r0, [pc, #28]	@ (801f3d8 <ip_frag_free_pbuf_custom_ref+0x34>)
 801f3bc:	f001 f870 	bl	80204a0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801f3c0:	6879      	ldr	r1, [r7, #4]
 801f3c2:	2005      	movs	r0, #5
 801f3c4:	f7f4 fb28 	bl	8013a18 <memp_free>
}
 801f3c8:	bf00      	nop
 801f3ca:	3708      	adds	r7, #8
 801f3cc:	46bd      	mov	sp, r7
 801f3ce:	bd80      	pop	{r7, pc}
 801f3d0:	08025d10 	.word	0x08025d10
 801f3d4:	08025e78 	.word	0x08025e78
 801f3d8:	08025d58 	.word	0x08025d58

0801f3dc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801f3dc:	b580      	push	{r7, lr}
 801f3de:	b084      	sub	sp, #16
 801f3e0:	af00      	add	r7, sp, #0
 801f3e2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 801f3e4:	687b      	ldr	r3, [r7, #4]
 801f3e6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801f3e8:	68fb      	ldr	r3, [r7, #12]
 801f3ea:	2b00      	cmp	r3, #0
 801f3ec:	d106      	bne.n	801f3fc <ipfrag_free_pbuf_custom+0x20>
 801f3ee:	4b11      	ldr	r3, [pc, #68]	@ (801f434 <ipfrag_free_pbuf_custom+0x58>)
 801f3f0:	f44f 722e 	mov.w	r2, #696	@ 0x2b8
 801f3f4:	4910      	ldr	r1, [pc, #64]	@ (801f438 <ipfrag_free_pbuf_custom+0x5c>)
 801f3f6:	4811      	ldr	r0, [pc, #68]	@ (801f43c <ipfrag_free_pbuf_custom+0x60>)
 801f3f8:	f001 f852 	bl	80204a0 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 801f3fc:	68fa      	ldr	r2, [r7, #12]
 801f3fe:	687b      	ldr	r3, [r7, #4]
 801f400:	429a      	cmp	r2, r3
 801f402:	d006      	beq.n	801f412 <ipfrag_free_pbuf_custom+0x36>
 801f404:	4b0b      	ldr	r3, [pc, #44]	@ (801f434 <ipfrag_free_pbuf_custom+0x58>)
 801f406:	f240 22b9 	movw	r2, #697	@ 0x2b9
 801f40a:	490d      	ldr	r1, [pc, #52]	@ (801f440 <ipfrag_free_pbuf_custom+0x64>)
 801f40c:	480b      	ldr	r0, [pc, #44]	@ (801f43c <ipfrag_free_pbuf_custom+0x60>)
 801f40e:	f001 f847 	bl	80204a0 <iprintf>
  if (pcr->original != NULL) {
 801f412:	68fb      	ldr	r3, [r7, #12]
 801f414:	695b      	ldr	r3, [r3, #20]
 801f416:	2b00      	cmp	r3, #0
 801f418:	d004      	beq.n	801f424 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801f41a:	68fb      	ldr	r3, [r7, #12]
 801f41c:	695b      	ldr	r3, [r3, #20]
 801f41e:	4618      	mov	r0, r3
 801f420:	f7f5 f856 	bl	80144d0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801f424:	68f8      	ldr	r0, [r7, #12]
 801f426:	f7ff ffbd 	bl	801f3a4 <ip_frag_free_pbuf_custom_ref>
}
 801f42a:	bf00      	nop
 801f42c:	3710      	adds	r7, #16
 801f42e:	46bd      	mov	sp, r7
 801f430:	bd80      	pop	{r7, pc}
 801f432:	bf00      	nop
 801f434:	08025d10 	.word	0x08025d10
 801f438:	08025e84 	.word	0x08025e84
 801f43c:	08025d58 	.word	0x08025d58
 801f440:	08025e90 	.word	0x08025e90

0801f444 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801f444:	b580      	push	{r7, lr}
 801f446:	b092      	sub	sp, #72	@ 0x48
 801f448:	af02      	add	r7, sp, #8
 801f44a:	60f8      	str	r0, [r7, #12]
 801f44c:	60b9      	str	r1, [r7, #8]
 801f44e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801f450:	2300      	movs	r3, #0
 801f452:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 801f454:	68bb      	ldr	r3, [r7, #8]
 801f456:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801f458:	3b14      	subs	r3, #20
 801f45a:	2b00      	cmp	r3, #0
 801f45c:	da00      	bge.n	801f460 <ip4_frag+0x1c>
 801f45e:	3307      	adds	r3, #7
 801f460:	10db      	asrs	r3, r3, #3
 801f462:	867b      	strh	r3, [r7, #50]	@ 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801f464:	2314      	movs	r3, #20
 801f466:	86fb      	strh	r3, [r7, #54]	@ 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 801f468:	68fb      	ldr	r3, [r7, #12]
 801f46a:	685b      	ldr	r3, [r3, #4]
 801f46c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iphdr = original_iphdr;
 801f46e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f470:	62bb      	str	r3, [r7, #40]	@ 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 801f472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f474:	781b      	ldrb	r3, [r3, #0]
 801f476:	f003 030f 	and.w	r3, r3, #15
 801f47a:	2b05      	cmp	r3, #5
 801f47c:	d009      	beq.n	801f492 <ip4_frag+0x4e>
 801f47e:	4b84      	ldr	r3, [pc, #528]	@ (801f690 <ip4_frag+0x24c>)
 801f480:	f240 22e1 	movw	r2, #737	@ 0x2e1
 801f484:	4983      	ldr	r1, [pc, #524]	@ (801f694 <ip4_frag+0x250>)
 801f486:	4884      	ldr	r0, [pc, #528]	@ (801f698 <ip4_frag+0x254>)
 801f488:	f001 f80a 	bl	80204a0 <iprintf>
 801f48c:	f06f 0305 	mvn.w	r3, #5
 801f490:	e0fa      	b.n	801f688 <ip4_frag+0x244>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801f492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f494:	88db      	ldrh	r3, [r3, #6]
 801f496:	b29b      	uxth	r3, r3
 801f498:	4618      	mov	r0, r3
 801f49a:	f7f3 fdc1 	bl	8013020 <lwip_htons>
 801f49e:	4603      	mov	r3, r0
 801f4a0:	86bb      	strh	r3, [r7, #52]	@ 0x34
  ofo = tmp & IP_OFFMASK;
 801f4a2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801f4a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f4a8:	873b      	strh	r3, [r7, #56]	@ 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 801f4aa:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801f4ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801f4b0:	2b00      	cmp	r3, #0
 801f4b2:	d009      	beq.n	801f4c8 <ip4_frag+0x84>
 801f4b4:	4b76      	ldr	r3, [pc, #472]	@ (801f690 <ip4_frag+0x24c>)
 801f4b6:	f240 22e6 	movw	r2, #742	@ 0x2e6
 801f4ba:	4978      	ldr	r1, [pc, #480]	@ (801f69c <ip4_frag+0x258>)
 801f4bc:	4876      	ldr	r0, [pc, #472]	@ (801f698 <ip4_frag+0x254>)
 801f4be:	f000 ffef 	bl	80204a0 <iprintf>
 801f4c2:	f06f 0305 	mvn.w	r3, #5
 801f4c6:	e0df      	b.n	801f688 <ip4_frag+0x244>

  left = p->tot_len - IP_HLEN;
 801f4c8:	68fb      	ldr	r3, [r7, #12]
 801f4ca:	891b      	ldrh	r3, [r3, #8]
 801f4cc:	3b14      	subs	r3, #20
 801f4ce:	877b      	strh	r3, [r7, #58]	@ 0x3a

  while (left) {
 801f4d0:	e0c3      	b.n	801f65a <ip4_frag+0x216>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 801f4d2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801f4d4:	00da      	lsls	r2, r3, #3
 801f4d6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801f4d8:	4293      	cmp	r3, r2
 801f4da:	bfa8      	it	ge
 801f4dc:	4613      	movge	r3, r2
 801f4de:	84fb      	strh	r3, [r7, #38]	@ 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801f4e0:	2200      	movs	r2, #0
 801f4e2:	2114      	movs	r1, #20
 801f4e4:	2002      	movs	r0, #2
 801f4e6:	f7f4 fc7b 	bl	8013de0 <pbuf_alloc>
 801f4ea:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 801f4ec:	6a3b      	ldr	r3, [r7, #32]
 801f4ee:	2b00      	cmp	r3, #0
 801f4f0:	f000 80c0 	beq.w	801f674 <ip4_frag+0x230>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801f4f4:	68fb      	ldr	r3, [r7, #12]
 801f4f6:	895b      	ldrh	r3, [r3, #10]
 801f4f8:	2b13      	cmp	r3, #19
 801f4fa:	d806      	bhi.n	801f50a <ip4_frag+0xc6>
 801f4fc:	4b64      	ldr	r3, [pc, #400]	@ (801f690 <ip4_frag+0x24c>)
 801f4fe:	f44f 7242 	mov.w	r2, #776	@ 0x308
 801f502:	4967      	ldr	r1, [pc, #412]	@ (801f6a0 <ip4_frag+0x25c>)
 801f504:	4864      	ldr	r0, [pc, #400]	@ (801f698 <ip4_frag+0x254>)
 801f506:	f000 ffcb 	bl	80204a0 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801f50a:	6a3b      	ldr	r3, [r7, #32]
 801f50c:	685b      	ldr	r3, [r3, #4]
 801f50e:	2214      	movs	r2, #20
 801f510:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801f512:	4618      	mov	r0, r3
 801f514:	f001 fa59 	bl	80209ca <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801f518:	6a3b      	ldr	r3, [r7, #32]
 801f51a:	685b      	ldr	r3, [r3, #4]
 801f51c:	62bb      	str	r3, [r7, #40]	@ 0x28

    left_to_copy = fragsize;
 801f51e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801f520:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    while (left_to_copy) {
 801f522:	e04f      	b.n	801f5c4 <ip4_frag+0x180>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 801f524:	68fb      	ldr	r3, [r7, #12]
 801f526:	895a      	ldrh	r2, [r3, #10]
 801f528:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801f52a:	1ad3      	subs	r3, r2, r3
 801f52c:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801f52e:	8b7a      	ldrh	r2, [r7, #26]
 801f530:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801f532:	4293      	cmp	r3, r2
 801f534:	bf28      	it	cs
 801f536:	4613      	movcs	r3, r2
 801f538:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801f53a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801f53c:	2b00      	cmp	r3, #0
 801f53e:	d105      	bne.n	801f54c <ip4_frag+0x108>
        poff = 0;
 801f540:	2300      	movs	r3, #0
 801f542:	86fb      	strh	r3, [r7, #54]	@ 0x36
        p = p->next;
 801f544:	68fb      	ldr	r3, [r7, #12]
 801f546:	681b      	ldr	r3, [r3, #0]
 801f548:	60fb      	str	r3, [r7, #12]
        continue;
 801f54a:	e03b      	b.n	801f5c4 <ip4_frag+0x180>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801f54c:	f7ff ff22 	bl	801f394 <ip_frag_alloc_pbuf_custom_ref>
 801f550:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 801f552:	697b      	ldr	r3, [r7, #20]
 801f554:	2b00      	cmp	r3, #0
 801f556:	d103      	bne.n	801f560 <ip4_frag+0x11c>
        pbuf_free(rambuf);
 801f558:	6a38      	ldr	r0, [r7, #32]
 801f55a:	f7f4 ffb9 	bl	80144d0 <pbuf_free>
        goto memerr;
 801f55e:	e08a      	b.n	801f676 <ip4_frag+0x232>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801f560:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 801f562:	68fb      	ldr	r3, [r7, #12]
 801f564:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801f566:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801f568:	4413      	add	r3, r2
 801f56a:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 801f56c:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801f56e:	9201      	str	r2, [sp, #4]
 801f570:	9300      	str	r3, [sp, #0]
 801f572:	4603      	mov	r3, r0
 801f574:	2202      	movs	r2, #2
 801f576:	2004      	movs	r0, #4
 801f578:	f7f4 fdcc 	bl	8014114 <pbuf_alloced_custom>
 801f57c:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 801f57e:	693b      	ldr	r3, [r7, #16]
 801f580:	2b00      	cmp	r3, #0
 801f582:	d106      	bne.n	801f592 <ip4_frag+0x14e>
        ip_frag_free_pbuf_custom_ref(pcr);
 801f584:	6978      	ldr	r0, [r7, #20]
 801f586:	f7ff ff0d 	bl	801f3a4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801f58a:	6a38      	ldr	r0, [r7, #32]
 801f58c:	f7f4 ffa0 	bl	80144d0 <pbuf_free>
        goto memerr;
 801f590:	e071      	b.n	801f676 <ip4_frag+0x232>
      }
      pbuf_ref(p);
 801f592:	68f8      	ldr	r0, [r7, #12]
 801f594:	f7f5 f846 	bl	8014624 <pbuf_ref>
      pcr->original = p;
 801f598:	697b      	ldr	r3, [r7, #20]
 801f59a:	68fa      	ldr	r2, [r7, #12]
 801f59c:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801f59e:	697b      	ldr	r3, [r7, #20]
 801f5a0:	4a40      	ldr	r2, [pc, #256]	@ (801f6a4 <ip4_frag+0x260>)
 801f5a2:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801f5a4:	6939      	ldr	r1, [r7, #16]
 801f5a6:	6a38      	ldr	r0, [r7, #32]
 801f5a8:	f7f5 f85e 	bl	8014668 <pbuf_cat>
      left_to_copy -= newpbuflen;
 801f5ac:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 801f5ae:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801f5b0:	1ad3      	subs	r3, r2, r3
 801f5b2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
      if (left_to_copy) {
 801f5b4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801f5b6:	2b00      	cmp	r3, #0
 801f5b8:	d004      	beq.n	801f5c4 <ip4_frag+0x180>
        poff = 0;
 801f5ba:	2300      	movs	r3, #0
 801f5bc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        p = p->next;
 801f5be:	68fb      	ldr	r3, [r7, #12]
 801f5c0:	681b      	ldr	r3, [r3, #0]
 801f5c2:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801f5c4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801f5c6:	2b00      	cmp	r3, #0
 801f5c8:	d1ac      	bne.n	801f524 <ip4_frag+0xe0>
      }
    }
    poff += newpbuflen;
 801f5ca:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801f5cc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801f5ce:	4413      	add	r3, r2
 801f5d0:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801f5d2:	68bb      	ldr	r3, [r7, #8]
 801f5d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801f5d6:	f1a3 0213 	sub.w	r2, r3, #19
 801f5da:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801f5dc:	429a      	cmp	r2, r3
 801f5de:	bfcc      	ite	gt
 801f5e0:	2301      	movgt	r3, #1
 801f5e2:	2300      	movle	r3, #0
 801f5e4:	b2db      	uxtb	r3, r3
 801f5e6:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801f5e8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801f5ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f5ee:	86bb      	strh	r3, [r7, #52]	@ 0x34
    if (!last) {
 801f5f0:	69fb      	ldr	r3, [r7, #28]
 801f5f2:	2b00      	cmp	r3, #0
 801f5f4:	d103      	bne.n	801f5fe <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 801f5f6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801f5f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801f5fc:	86bb      	strh	r3, [r7, #52]	@ 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801f5fe:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801f600:	4618      	mov	r0, r3
 801f602:	f7f3 fd0d 	bl	8013020 <lwip_htons>
 801f606:	4603      	mov	r3, r0
 801f608:	461a      	mov	r2, r3
 801f60a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f60c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 801f60e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801f610:	3314      	adds	r3, #20
 801f612:	b29b      	uxth	r3, r3
 801f614:	4618      	mov	r0, r3
 801f616:	f7f3 fd03 	bl	8013020 <lwip_htons>
 801f61a:	4603      	mov	r3, r0
 801f61c:	461a      	mov	r2, r3
 801f61e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f620:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801f622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f624:	2200      	movs	r2, #0
 801f626:	729a      	strb	r2, [r3, #10]
 801f628:	2200      	movs	r2, #0
 801f62a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801f62c:	68bb      	ldr	r3, [r7, #8]
 801f62e:	695b      	ldr	r3, [r3, #20]
 801f630:	687a      	ldr	r2, [r7, #4]
 801f632:	6a39      	ldr	r1, [r7, #32]
 801f634:	68b8      	ldr	r0, [r7, #8]
 801f636:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 801f638:	4b1b      	ldr	r3, [pc, #108]	@ (801f6a8 <ip4_frag+0x264>)
 801f63a:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 801f63c:	3301      	adds	r3, #1
 801f63e:	b29a      	uxth	r2, r3
 801f640:	4b19      	ldr	r3, [pc, #100]	@ (801f6a8 <ip4_frag+0x264>)
 801f642:	861a      	strh	r2, [r3, #48]	@ 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801f644:	6a38      	ldr	r0, [r7, #32]
 801f646:	f7f4 ff43 	bl	80144d0 <pbuf_free>
    left -= fragsize;
 801f64a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801f64c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801f64e:	1ad3      	subs	r3, r2, r3
 801f650:	877b      	strh	r3, [r7, #58]	@ 0x3a
    ofo += nfb;
 801f652:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 801f654:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801f656:	4413      	add	r3, r2
 801f658:	873b      	strh	r3, [r7, #56]	@ 0x38
  while (left) {
 801f65a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801f65c:	2b00      	cmp	r3, #0
 801f65e:	f47f af38 	bne.w	801f4d2 <ip4_frag+0x8e>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
 801f662:	4b11      	ldr	r3, [pc, #68]	@ (801f6a8 <ip4_frag+0x264>)
 801f664:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 801f668:	3301      	adds	r3, #1
 801f66a:	4a0f      	ldr	r2, [pc, #60]	@ (801f6a8 <ip4_frag+0x264>)
 801f66c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
  return ERR_OK;
 801f670:	2300      	movs	r3, #0
 801f672:	e009      	b.n	801f688 <ip4_frag+0x244>
      goto memerr;
 801f674:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
 801f676:	4b0c      	ldr	r3, [pc, #48]	@ (801f6a8 <ip4_frag+0x264>)
 801f678:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 801f67c:	3301      	adds	r3, #1
 801f67e:	4a0a      	ldr	r2, [pc, #40]	@ (801f6a8 <ip4_frag+0x264>)
 801f680:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
  return ERR_MEM;
 801f684:	f04f 33ff 	mov.w	r3, #4294967295
}
 801f688:	4618      	mov	r0, r3
 801f68a:	3740      	adds	r7, #64	@ 0x40
 801f68c:	46bd      	mov	sp, r7
 801f68e:	bd80      	pop	{r7, pc}
 801f690:	08025d10 	.word	0x08025d10
 801f694:	08025e9c 	.word	0x08025e9c
 801f698:	08025d58 	.word	0x08025d58
 801f69c:	08025ec4 	.word	0x08025ec4
 801f6a0:	08025ee0 	.word	0x08025ee0
 801f6a4:	0801f3dd 	.word	0x0801f3dd
 801f6a8:	2000db84 	.word	0x2000db84

0801f6ac <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801f6ac:	b580      	push	{r7, lr}
 801f6ae:	b086      	sub	sp, #24
 801f6b0:	af00      	add	r7, sp, #0
 801f6b2:	6078      	str	r0, [r7, #4]
 801f6b4:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 801f6b6:	230e      	movs	r3, #14
 801f6b8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 801f6ba:	687b      	ldr	r3, [r7, #4]
 801f6bc:	895b      	ldrh	r3, [r3, #10]
 801f6be:	2b0e      	cmp	r3, #14
 801f6c0:	d811      	bhi.n	801f6e6 <ethernet_input+0x3a>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
 801f6c2:	4b5b      	ldr	r3, [pc, #364]	@ (801f830 <ethernet_input+0x184>)
 801f6c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801f6c6:	3301      	adds	r3, #1
 801f6c8:	b29a      	uxth	r2, r3
 801f6ca:	4b59      	ldr	r3, [pc, #356]	@ (801f830 <ethernet_input+0x184>)
 801f6cc:	851a      	strh	r2, [r3, #40]	@ 0x28
    ETHARP_STATS_INC(etharp.drop);
 801f6ce:	4b58      	ldr	r3, [pc, #352]	@ (801f830 <ethernet_input+0x184>)
 801f6d0:	8bdb      	ldrh	r3, [r3, #30]
 801f6d2:	3301      	adds	r3, #1
 801f6d4:	b29a      	uxth	r2, r3
 801f6d6:	4b56      	ldr	r3, [pc, #344]	@ (801f830 <ethernet_input+0x184>)
 801f6d8:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
 801f6da:	683b      	ldr	r3, [r7, #0]
 801f6dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801f6de:	1c5a      	adds	r2, r3, #1
 801f6e0:	683b      	ldr	r3, [r7, #0]
 801f6e2:	651a      	str	r2, [r3, #80]	@ 0x50
    goto free_and_return;
 801f6e4:	e09b      	b.n	801f81e <ethernet_input+0x172>
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801f6e6:	687b      	ldr	r3, [r7, #4]
 801f6e8:	685b      	ldr	r3, [r3, #4]
 801f6ea:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801f6ec:	693b      	ldr	r3, [r7, #16]
 801f6ee:	7b1a      	ldrb	r2, [r3, #12]
 801f6f0:	7b5b      	ldrb	r3, [r3, #13]
 801f6f2:	021b      	lsls	r3, r3, #8
 801f6f4:	4313      	orrs	r3, r2
 801f6f6:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801f6f8:	693b      	ldr	r3, [r7, #16]
 801f6fa:	781b      	ldrb	r3, [r3, #0]
 801f6fc:	f003 0301 	and.w	r3, r3, #1
 801f700:	2b00      	cmp	r3, #0
 801f702:	d023      	beq.n	801f74c <ethernet_input+0xa0>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801f704:	693b      	ldr	r3, [r7, #16]
 801f706:	781b      	ldrb	r3, [r3, #0]
 801f708:	2b01      	cmp	r3, #1
 801f70a:	d10f      	bne.n	801f72c <ethernet_input+0x80>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801f70c:	693b      	ldr	r3, [r7, #16]
 801f70e:	785b      	ldrb	r3, [r3, #1]
 801f710:	2b00      	cmp	r3, #0
 801f712:	d11b      	bne.n	801f74c <ethernet_input+0xa0>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801f714:	693b      	ldr	r3, [r7, #16]
 801f716:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801f718:	2b5e      	cmp	r3, #94	@ 0x5e
 801f71a:	d117      	bne.n	801f74c <ethernet_input+0xa0>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801f71c:	687b      	ldr	r3, [r7, #4]
 801f71e:	7b5b      	ldrb	r3, [r3, #13]
 801f720:	f043 0310 	orr.w	r3, r3, #16
 801f724:	b2da      	uxtb	r2, r3
 801f726:	687b      	ldr	r3, [r7, #4]
 801f728:	735a      	strb	r2, [r3, #13]
 801f72a:	e00f      	b.n	801f74c <ethernet_input+0xa0>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801f72c:	693b      	ldr	r3, [r7, #16]
 801f72e:	2206      	movs	r2, #6
 801f730:	4940      	ldr	r1, [pc, #256]	@ (801f834 <ethernet_input+0x188>)
 801f732:	4618      	mov	r0, r3
 801f734:	f001 f860 	bl	80207f8 <memcmp>
 801f738:	4603      	mov	r3, r0
 801f73a:	2b00      	cmp	r3, #0
 801f73c:	d106      	bne.n	801f74c <ethernet_input+0xa0>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801f73e:	687b      	ldr	r3, [r7, #4]
 801f740:	7b5b      	ldrb	r3, [r3, #13]
 801f742:	f043 0308 	orr.w	r3, r3, #8
 801f746:	b2da      	uxtb	r2, r3
 801f748:	687b      	ldr	r3, [r7, #4]
 801f74a:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801f74c:	89fb      	ldrh	r3, [r7, #14]
 801f74e:	2b08      	cmp	r3, #8
 801f750:	d003      	beq.n	801f75a <ethernet_input+0xae>
 801f752:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801f756:	d01e      	beq.n	801f796 <ethernet_input+0xea>
 801f758:	e048      	b.n	801f7ec <ethernet_input+0x140>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801f75a:	683b      	ldr	r3, [r7, #0]
 801f75c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801f760:	f003 0308 	and.w	r3, r3, #8
 801f764:	2b00      	cmp	r3, #0
 801f766:	d055      	beq.n	801f814 <ethernet_input+0x168>
        goto free_and_return;
      }
      /* skip Ethernet header */
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 801f768:	687b      	ldr	r3, [r7, #4]
 801f76a:	895b      	ldrh	r3, [r3, #10]
 801f76c:	461a      	mov	r2, r3
 801f76e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801f772:	429a      	cmp	r2, r3
 801f774:	db50      	blt.n	801f818 <ethernet_input+0x16c>
 801f776:	8afb      	ldrh	r3, [r7, #22]
 801f778:	425b      	negs	r3, r3
 801f77a:	b29b      	uxth	r3, r3
 801f77c:	b21b      	sxth	r3, r3
 801f77e:	4619      	mov	r1, r3
 801f780:	6878      	ldr	r0, [r7, #4]
 801f782:	f7f4 fe81 	bl	8014488 <pbuf_header>
 801f786:	4603      	mov	r3, r0
 801f788:	2b00      	cmp	r3, #0
 801f78a:	d145      	bne.n	801f818 <ethernet_input+0x16c>
          p->tot_len, ip_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
 801f78c:	6839      	ldr	r1, [r7, #0]
 801f78e:	6878      	ldr	r0, [r7, #4]
 801f790:	f7fe fc5a 	bl	801e048 <ip4_input>
      }
      break;
 801f794:	e03c      	b.n	801f810 <ethernet_input+0x164>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801f796:	683b      	ldr	r3, [r7, #0]
 801f798:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 801f79c:	f003 0308 	and.w	r3, r3, #8
 801f7a0:	2b00      	cmp	r3, #0
 801f7a2:	d03b      	beq.n	801f81c <ethernet_input+0x170>
        goto free_and_return;
      }
      /* skip Ethernet header */
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 801f7a4:	687b      	ldr	r3, [r7, #4]
 801f7a6:	895b      	ldrh	r3, [r3, #10]
 801f7a8:	461a      	mov	r2, r3
 801f7aa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801f7ae:	429a      	cmp	r2, r3
 801f7b0:	db0a      	blt.n	801f7c8 <ethernet_input+0x11c>
 801f7b2:	8afb      	ldrh	r3, [r7, #22]
 801f7b4:	425b      	negs	r3, r3
 801f7b6:	b29b      	uxth	r3, r3
 801f7b8:	b21b      	sxth	r3, r3
 801f7ba:	4619      	mov	r1, r3
 801f7bc:	6878      	ldr	r0, [r7, #4]
 801f7be:	f7f4 fe63 	bl	8014488 <pbuf_header>
 801f7c2:	4603      	mov	r3, r0
 801f7c4:	2b00      	cmp	r3, #0
 801f7c6:	d00c      	beq.n	801f7e2 <ethernet_input+0x136>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
          ("ethernet_input: ARP response packet dropped, too short (%"S16_F"/%"S16_F")\n",
          p->tot_len, ip_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
 801f7c8:	4b19      	ldr	r3, [pc, #100]	@ (801f830 <ethernet_input+0x184>)
 801f7ca:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801f7cc:	3301      	adds	r3, #1
 801f7ce:	b29a      	uxth	r2, r3
 801f7d0:	4b17      	ldr	r3, [pc, #92]	@ (801f830 <ethernet_input+0x184>)
 801f7d2:	845a      	strh	r2, [r3, #34]	@ 0x22
        ETHARP_STATS_INC(etharp.drop);
 801f7d4:	4b16      	ldr	r3, [pc, #88]	@ (801f830 <ethernet_input+0x184>)
 801f7d6:	8bdb      	ldrh	r3, [r3, #30]
 801f7d8:	3301      	adds	r3, #1
 801f7da:	b29a      	uxth	r2, r3
 801f7dc:	4b14      	ldr	r3, [pc, #80]	@ (801f830 <ethernet_input+0x184>)
 801f7de:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 801f7e0:	e01d      	b.n	801f81e <ethernet_input+0x172>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
 801f7e2:	6839      	ldr	r1, [r7, #0]
 801f7e4:	6878      	ldr	r0, [r7, #4]
 801f7e6:	f7fd fcc9 	bl	801d17c <etharp_input>
      }
      break;
 801f7ea:	e011      	b.n	801f810 <ethernet_input+0x164>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if(LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 801f7ec:	4b10      	ldr	r3, [pc, #64]	@ (801f830 <ethernet_input+0x184>)
 801f7ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801f7f0:	3301      	adds	r3, #1
 801f7f2:	b29a      	uxth	r2, r3
 801f7f4:	4b0e      	ldr	r3, [pc, #56]	@ (801f830 <ethernet_input+0x184>)
 801f7f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      ETHARP_STATS_INC(etharp.drop);
 801f7f8:	4b0d      	ldr	r3, [pc, #52]	@ (801f830 <ethernet_input+0x184>)
 801f7fa:	8bdb      	ldrh	r3, [r3, #30]
 801f7fc:	3301      	adds	r3, #1
 801f7fe:	b29a      	uxth	r2, r3
 801f800:	4b0b      	ldr	r3, [pc, #44]	@ (801f830 <ethernet_input+0x184>)
 801f802:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
 801f804:	683b      	ldr	r3, [r7, #0]
 801f806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f808:	1c5a      	adds	r2, r3, #1
 801f80a:	683b      	ldr	r3, [r7, #0]
 801f80c:	655a      	str	r2, [r3, #84]	@ 0x54
      goto free_and_return;
 801f80e:	e006      	b.n	801f81e <ethernet_input+0x172>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801f810:	2300      	movs	r3, #0
 801f812:	e008      	b.n	801f826 <ethernet_input+0x17a>
        goto free_and_return;
 801f814:	bf00      	nop
 801f816:	e002      	b.n	801f81e <ethernet_input+0x172>
        goto free_and_return;
 801f818:	bf00      	nop
 801f81a:	e000      	b.n	801f81e <ethernet_input+0x172>
        goto free_and_return;
 801f81c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801f81e:	6878      	ldr	r0, [r7, #4]
 801f820:	f7f4 fe56 	bl	80144d0 <pbuf_free>
  return ERR_OK;
 801f824:	2300      	movs	r3, #0
}
 801f826:	4618      	mov	r0, r3
 801f828:	3718      	adds	r7, #24
 801f82a:	46bd      	mov	sp, r7
 801f82c:	bd80      	pop	{r7, pc}
 801f82e:	bf00      	nop
 801f830:	2000db84 	.word	0x2000db84
 801f834:	0802f058 	.word	0x0802f058

0801f838 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 801f838:	b580      	push	{r7, lr}
 801f83a:	b086      	sub	sp, #24
 801f83c:	af00      	add	r7, sp, #0
 801f83e:	60f8      	str	r0, [r7, #12]
 801f840:	60b9      	str	r1, [r7, #8]
 801f842:	607a      	str	r2, [r7, #4]
 801f844:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801f846:	8c3b      	ldrh	r3, [r7, #32]
 801f848:	4618      	mov	r0, r3
 801f84a:	f7f3 fbe9 	bl	8013020 <lwip_htons>
 801f84e:	4603      	mov	r3, r0
 801f850:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 801f852:	210e      	movs	r1, #14
 801f854:	68b8      	ldr	r0, [r7, #8]
 801f856:	f7f4 fe17 	bl	8014488 <pbuf_header>
 801f85a:	4603      	mov	r3, r0
 801f85c:	2b00      	cmp	r3, #0
 801f85e:	d125      	bne.n	801f8ac <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 801f860:	68bb      	ldr	r3, [r7, #8]
 801f862:	685b      	ldr	r3, [r3, #4]
 801f864:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801f866:	693b      	ldr	r3, [r7, #16]
 801f868:	8afa      	ldrh	r2, [r7, #22]
 801f86a:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 801f86c:	693b      	ldr	r3, [r7, #16]
 801f86e:	2206      	movs	r2, #6
 801f870:	6839      	ldr	r1, [r7, #0]
 801f872:	4618      	mov	r0, r3
 801f874:	f001 f8a9 	bl	80209ca <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 801f878:	693b      	ldr	r3, [r7, #16]
 801f87a:	3306      	adds	r3, #6
 801f87c:	2206      	movs	r2, #6
 801f87e:	6879      	ldr	r1, [r7, #4]
 801f880:	4618      	mov	r0, r3
 801f882:	f001 f8a2 	bl	80209ca <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801f886:	68fb      	ldr	r3, [r7, #12]
 801f888:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801f88c:	2b06      	cmp	r3, #6
 801f88e:	d006      	beq.n	801f89e <ethernet_output+0x66>
 801f890:	4b0d      	ldr	r3, [pc, #52]	@ (801f8c8 <ethernet_output+0x90>)
 801f892:	f240 122b 	movw	r2, #299	@ 0x12b
 801f896:	490d      	ldr	r1, [pc, #52]	@ (801f8cc <ethernet_output+0x94>)
 801f898:	480d      	ldr	r0, [pc, #52]	@ (801f8d0 <ethernet_output+0x98>)
 801f89a:	f000 fe01 	bl	80204a0 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801f89e:	68fb      	ldr	r3, [r7, #12]
 801f8a0:	699b      	ldr	r3, [r3, #24]
 801f8a2:	68b9      	ldr	r1, [r7, #8]
 801f8a4:	68f8      	ldr	r0, [r7, #12]
 801f8a6:	4798      	blx	r3
 801f8a8:	4603      	mov	r3, r0
 801f8aa:	e008      	b.n	801f8be <ethernet_output+0x86>
      goto pbuf_header_failed;
 801f8ac:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
 801f8ae:	4b09      	ldr	r3, [pc, #36]	@ (801f8d4 <ethernet_output+0x9c>)
 801f8b0:	895b      	ldrh	r3, [r3, #10]
 801f8b2:	3301      	adds	r3, #1
 801f8b4:	b29a      	uxth	r2, r3
 801f8b6:	4b07      	ldr	r3, [pc, #28]	@ (801f8d4 <ethernet_output+0x9c>)
 801f8b8:	815a      	strh	r2, [r3, #10]
  return ERR_BUF;
 801f8ba:	f06f 0301 	mvn.w	r3, #1
}
 801f8be:	4618      	mov	r0, r3
 801f8c0:	3718      	adds	r7, #24
 801f8c2:	46bd      	mov	sp, r7
 801f8c4:	bd80      	pop	{r7, pc}
 801f8c6:	bf00      	nop
 801f8c8:	08025f00 	.word	0x08025f00
 801f8cc:	08025f38 	.word	0x08025f38
 801f8d0:	08025f6c 	.word	0x08025f6c
 801f8d4:	2000db84 	.word	0x2000db84

0801f8d8 <atoi>:
 801f8d8:	220a      	movs	r2, #10
 801f8da:	2100      	movs	r1, #0
 801f8dc:	f000 b8ba 	b.w	801fa54 <strtol>

0801f8e0 <rand>:
 801f8e0:	4b16      	ldr	r3, [pc, #88]	@ (801f93c <rand+0x5c>)
 801f8e2:	b510      	push	{r4, lr}
 801f8e4:	681c      	ldr	r4, [r3, #0]
 801f8e6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801f8e8:	b9b3      	cbnz	r3, 801f918 <rand+0x38>
 801f8ea:	2018      	movs	r0, #24
 801f8ec:	f001 ff40 	bl	8021770 <malloc>
 801f8f0:	4602      	mov	r2, r0
 801f8f2:	6320      	str	r0, [r4, #48]	@ 0x30
 801f8f4:	b920      	cbnz	r0, 801f900 <rand+0x20>
 801f8f6:	2152      	movs	r1, #82	@ 0x52
 801f8f8:	4b11      	ldr	r3, [pc, #68]	@ (801f940 <rand+0x60>)
 801f8fa:	4812      	ldr	r0, [pc, #72]	@ (801f944 <rand+0x64>)
 801f8fc:	f001 f874 	bl	80209e8 <__assert_func>
 801f900:	4911      	ldr	r1, [pc, #68]	@ (801f948 <rand+0x68>)
 801f902:	4b12      	ldr	r3, [pc, #72]	@ (801f94c <rand+0x6c>)
 801f904:	e9c0 1300 	strd	r1, r3, [r0]
 801f908:	4b11      	ldr	r3, [pc, #68]	@ (801f950 <rand+0x70>)
 801f90a:	2100      	movs	r1, #0
 801f90c:	6083      	str	r3, [r0, #8]
 801f90e:	230b      	movs	r3, #11
 801f910:	8183      	strh	r3, [r0, #12]
 801f912:	2001      	movs	r0, #1
 801f914:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801f918:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801f91a:	480e      	ldr	r0, [pc, #56]	@ (801f954 <rand+0x74>)
 801f91c:	690b      	ldr	r3, [r1, #16]
 801f91e:	694c      	ldr	r4, [r1, #20]
 801f920:	4358      	muls	r0, r3
 801f922:	4a0d      	ldr	r2, [pc, #52]	@ (801f958 <rand+0x78>)
 801f924:	fb02 0004 	mla	r0, r2, r4, r0
 801f928:	fba3 3202 	umull	r3, r2, r3, r2
 801f92c:	3301      	adds	r3, #1
 801f92e:	eb40 0002 	adc.w	r0, r0, r2
 801f932:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801f936:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801f93a:	bd10      	pop	{r4, pc}
 801f93c:	2000012c 	.word	0x2000012c
 801f940:	0802f066 	.word	0x0802f066
 801f944:	0802f07d 	.word	0x0802f07d
 801f948:	abcd330e 	.word	0xabcd330e
 801f94c:	e66d1234 	.word	0xe66d1234
 801f950:	0005deec 	.word	0x0005deec
 801f954:	5851f42d 	.word	0x5851f42d
 801f958:	4c957f2d 	.word	0x4c957f2d

0801f95c <_strtol_l.isra.0>:
 801f95c:	2b24      	cmp	r3, #36	@ 0x24
 801f95e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f962:	4686      	mov	lr, r0
 801f964:	4690      	mov	r8, r2
 801f966:	d801      	bhi.n	801f96c <_strtol_l.isra.0+0x10>
 801f968:	2b01      	cmp	r3, #1
 801f96a:	d106      	bne.n	801f97a <_strtol_l.isra.0+0x1e>
 801f96c:	f000 fff2 	bl	8020954 <__errno>
 801f970:	2316      	movs	r3, #22
 801f972:	6003      	str	r3, [r0, #0]
 801f974:	2000      	movs	r0, #0
 801f976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f97a:	460d      	mov	r5, r1
 801f97c:	4833      	ldr	r0, [pc, #204]	@ (801fa4c <_strtol_l.isra.0+0xf0>)
 801f97e:	462a      	mov	r2, r5
 801f980:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f984:	5d06      	ldrb	r6, [r0, r4]
 801f986:	f016 0608 	ands.w	r6, r6, #8
 801f98a:	d1f8      	bne.n	801f97e <_strtol_l.isra.0+0x22>
 801f98c:	2c2d      	cmp	r4, #45	@ 0x2d
 801f98e:	d110      	bne.n	801f9b2 <_strtol_l.isra.0+0x56>
 801f990:	2601      	movs	r6, #1
 801f992:	782c      	ldrb	r4, [r5, #0]
 801f994:	1c95      	adds	r5, r2, #2
 801f996:	f033 0210 	bics.w	r2, r3, #16
 801f99a:	d115      	bne.n	801f9c8 <_strtol_l.isra.0+0x6c>
 801f99c:	2c30      	cmp	r4, #48	@ 0x30
 801f99e:	d10d      	bne.n	801f9bc <_strtol_l.isra.0+0x60>
 801f9a0:	782a      	ldrb	r2, [r5, #0]
 801f9a2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801f9a6:	2a58      	cmp	r2, #88	@ 0x58
 801f9a8:	d108      	bne.n	801f9bc <_strtol_l.isra.0+0x60>
 801f9aa:	786c      	ldrb	r4, [r5, #1]
 801f9ac:	3502      	adds	r5, #2
 801f9ae:	2310      	movs	r3, #16
 801f9b0:	e00a      	b.n	801f9c8 <_strtol_l.isra.0+0x6c>
 801f9b2:	2c2b      	cmp	r4, #43	@ 0x2b
 801f9b4:	bf04      	itt	eq
 801f9b6:	782c      	ldrbeq	r4, [r5, #0]
 801f9b8:	1c95      	addeq	r5, r2, #2
 801f9ba:	e7ec      	b.n	801f996 <_strtol_l.isra.0+0x3a>
 801f9bc:	2b00      	cmp	r3, #0
 801f9be:	d1f6      	bne.n	801f9ae <_strtol_l.isra.0+0x52>
 801f9c0:	2c30      	cmp	r4, #48	@ 0x30
 801f9c2:	bf14      	ite	ne
 801f9c4:	230a      	movne	r3, #10
 801f9c6:	2308      	moveq	r3, #8
 801f9c8:	2200      	movs	r2, #0
 801f9ca:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801f9ce:	f10c 3cff 	add.w	ip, ip, #4294967295
 801f9d2:	fbbc f9f3 	udiv	r9, ip, r3
 801f9d6:	4610      	mov	r0, r2
 801f9d8:	fb03 ca19 	mls	sl, r3, r9, ip
 801f9dc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801f9e0:	2f09      	cmp	r7, #9
 801f9e2:	d80f      	bhi.n	801fa04 <_strtol_l.isra.0+0xa8>
 801f9e4:	463c      	mov	r4, r7
 801f9e6:	42a3      	cmp	r3, r4
 801f9e8:	dd1b      	ble.n	801fa22 <_strtol_l.isra.0+0xc6>
 801f9ea:	1c57      	adds	r7, r2, #1
 801f9ec:	d007      	beq.n	801f9fe <_strtol_l.isra.0+0xa2>
 801f9ee:	4581      	cmp	r9, r0
 801f9f0:	d314      	bcc.n	801fa1c <_strtol_l.isra.0+0xc0>
 801f9f2:	d101      	bne.n	801f9f8 <_strtol_l.isra.0+0x9c>
 801f9f4:	45a2      	cmp	sl, r4
 801f9f6:	db11      	blt.n	801fa1c <_strtol_l.isra.0+0xc0>
 801f9f8:	2201      	movs	r2, #1
 801f9fa:	fb00 4003 	mla	r0, r0, r3, r4
 801f9fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 801fa02:	e7eb      	b.n	801f9dc <_strtol_l.isra.0+0x80>
 801fa04:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801fa08:	2f19      	cmp	r7, #25
 801fa0a:	d801      	bhi.n	801fa10 <_strtol_l.isra.0+0xb4>
 801fa0c:	3c37      	subs	r4, #55	@ 0x37
 801fa0e:	e7ea      	b.n	801f9e6 <_strtol_l.isra.0+0x8a>
 801fa10:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801fa14:	2f19      	cmp	r7, #25
 801fa16:	d804      	bhi.n	801fa22 <_strtol_l.isra.0+0xc6>
 801fa18:	3c57      	subs	r4, #87	@ 0x57
 801fa1a:	e7e4      	b.n	801f9e6 <_strtol_l.isra.0+0x8a>
 801fa1c:	f04f 32ff 	mov.w	r2, #4294967295
 801fa20:	e7ed      	b.n	801f9fe <_strtol_l.isra.0+0xa2>
 801fa22:	1c53      	adds	r3, r2, #1
 801fa24:	d108      	bne.n	801fa38 <_strtol_l.isra.0+0xdc>
 801fa26:	2322      	movs	r3, #34	@ 0x22
 801fa28:	4660      	mov	r0, ip
 801fa2a:	f8ce 3000 	str.w	r3, [lr]
 801fa2e:	f1b8 0f00 	cmp.w	r8, #0
 801fa32:	d0a0      	beq.n	801f976 <_strtol_l.isra.0+0x1a>
 801fa34:	1e69      	subs	r1, r5, #1
 801fa36:	e006      	b.n	801fa46 <_strtol_l.isra.0+0xea>
 801fa38:	b106      	cbz	r6, 801fa3c <_strtol_l.isra.0+0xe0>
 801fa3a:	4240      	negs	r0, r0
 801fa3c:	f1b8 0f00 	cmp.w	r8, #0
 801fa40:	d099      	beq.n	801f976 <_strtol_l.isra.0+0x1a>
 801fa42:	2a00      	cmp	r2, #0
 801fa44:	d1f6      	bne.n	801fa34 <_strtol_l.isra.0+0xd8>
 801fa46:	f8c8 1000 	str.w	r1, [r8]
 801fa4a:	e794      	b.n	801f976 <_strtol_l.isra.0+0x1a>
 801fa4c:	0802f249 	.word	0x0802f249

0801fa50 <_strtol_r>:
 801fa50:	f7ff bf84 	b.w	801f95c <_strtol_l.isra.0>

0801fa54 <strtol>:
 801fa54:	4613      	mov	r3, r2
 801fa56:	460a      	mov	r2, r1
 801fa58:	4601      	mov	r1, r0
 801fa5a:	4802      	ldr	r0, [pc, #8]	@ (801fa64 <strtol+0x10>)
 801fa5c:	6800      	ldr	r0, [r0, #0]
 801fa5e:	f7ff bf7d 	b.w	801f95c <_strtol_l.isra.0>
 801fa62:	bf00      	nop
 801fa64:	2000012c 	.word	0x2000012c

0801fa68 <__cvt>:
 801fa68:	2b00      	cmp	r3, #0
 801fa6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fa6e:	461d      	mov	r5, r3
 801fa70:	bfbb      	ittet	lt
 801fa72:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 801fa76:	461d      	movlt	r5, r3
 801fa78:	2300      	movge	r3, #0
 801fa7a:	232d      	movlt	r3, #45	@ 0x2d
 801fa7c:	b088      	sub	sp, #32
 801fa7e:	4614      	mov	r4, r2
 801fa80:	bfb8      	it	lt
 801fa82:	4614      	movlt	r4, r2
 801fa84:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801fa86:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801fa88:	7013      	strb	r3, [r2, #0]
 801fa8a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801fa8c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 801fa90:	f023 0820 	bic.w	r8, r3, #32
 801fa94:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801fa98:	d005      	beq.n	801faa6 <__cvt+0x3e>
 801fa9a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801fa9e:	d100      	bne.n	801faa2 <__cvt+0x3a>
 801faa0:	3601      	adds	r6, #1
 801faa2:	2302      	movs	r3, #2
 801faa4:	e000      	b.n	801faa8 <__cvt+0x40>
 801faa6:	2303      	movs	r3, #3
 801faa8:	aa07      	add	r2, sp, #28
 801faaa:	9204      	str	r2, [sp, #16]
 801faac:	aa06      	add	r2, sp, #24
 801faae:	e9cd a202 	strd	sl, r2, [sp, #8]
 801fab2:	e9cd 3600 	strd	r3, r6, [sp]
 801fab6:	4622      	mov	r2, r4
 801fab8:	462b      	mov	r3, r5
 801faba:	f001 f83d 	bl	8020b38 <_dtoa_r>
 801fabe:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801fac2:	4607      	mov	r7, r0
 801fac4:	d119      	bne.n	801fafa <__cvt+0x92>
 801fac6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801fac8:	07db      	lsls	r3, r3, #31
 801faca:	d50e      	bpl.n	801faea <__cvt+0x82>
 801facc:	eb00 0906 	add.w	r9, r0, r6
 801fad0:	2200      	movs	r2, #0
 801fad2:	2300      	movs	r3, #0
 801fad4:	4620      	mov	r0, r4
 801fad6:	4629      	mov	r1, r5
 801fad8:	f7e0 ffac 	bl	8000a34 <__aeabi_dcmpeq>
 801fadc:	b108      	cbz	r0, 801fae2 <__cvt+0x7a>
 801fade:	f8cd 901c 	str.w	r9, [sp, #28]
 801fae2:	2230      	movs	r2, #48	@ 0x30
 801fae4:	9b07      	ldr	r3, [sp, #28]
 801fae6:	454b      	cmp	r3, r9
 801fae8:	d31e      	bcc.n	801fb28 <__cvt+0xc0>
 801faea:	4638      	mov	r0, r7
 801faec:	9b07      	ldr	r3, [sp, #28]
 801faee:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801faf0:	1bdb      	subs	r3, r3, r7
 801faf2:	6013      	str	r3, [r2, #0]
 801faf4:	b008      	add	sp, #32
 801faf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fafa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801fafe:	eb00 0906 	add.w	r9, r0, r6
 801fb02:	d1e5      	bne.n	801fad0 <__cvt+0x68>
 801fb04:	7803      	ldrb	r3, [r0, #0]
 801fb06:	2b30      	cmp	r3, #48	@ 0x30
 801fb08:	d10a      	bne.n	801fb20 <__cvt+0xb8>
 801fb0a:	2200      	movs	r2, #0
 801fb0c:	2300      	movs	r3, #0
 801fb0e:	4620      	mov	r0, r4
 801fb10:	4629      	mov	r1, r5
 801fb12:	f7e0 ff8f 	bl	8000a34 <__aeabi_dcmpeq>
 801fb16:	b918      	cbnz	r0, 801fb20 <__cvt+0xb8>
 801fb18:	f1c6 0601 	rsb	r6, r6, #1
 801fb1c:	f8ca 6000 	str.w	r6, [sl]
 801fb20:	f8da 3000 	ldr.w	r3, [sl]
 801fb24:	4499      	add	r9, r3
 801fb26:	e7d3      	b.n	801fad0 <__cvt+0x68>
 801fb28:	1c59      	adds	r1, r3, #1
 801fb2a:	9107      	str	r1, [sp, #28]
 801fb2c:	701a      	strb	r2, [r3, #0]
 801fb2e:	e7d9      	b.n	801fae4 <__cvt+0x7c>

0801fb30 <__exponent>:
 801fb30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801fb32:	2900      	cmp	r1, #0
 801fb34:	bfb6      	itet	lt
 801fb36:	232d      	movlt	r3, #45	@ 0x2d
 801fb38:	232b      	movge	r3, #43	@ 0x2b
 801fb3a:	4249      	neglt	r1, r1
 801fb3c:	2909      	cmp	r1, #9
 801fb3e:	7002      	strb	r2, [r0, #0]
 801fb40:	7043      	strb	r3, [r0, #1]
 801fb42:	dd29      	ble.n	801fb98 <__exponent+0x68>
 801fb44:	f10d 0307 	add.w	r3, sp, #7
 801fb48:	461d      	mov	r5, r3
 801fb4a:	270a      	movs	r7, #10
 801fb4c:	fbb1 f6f7 	udiv	r6, r1, r7
 801fb50:	461a      	mov	r2, r3
 801fb52:	fb07 1416 	mls	r4, r7, r6, r1
 801fb56:	3430      	adds	r4, #48	@ 0x30
 801fb58:	f802 4c01 	strb.w	r4, [r2, #-1]
 801fb5c:	460c      	mov	r4, r1
 801fb5e:	2c63      	cmp	r4, #99	@ 0x63
 801fb60:	4631      	mov	r1, r6
 801fb62:	f103 33ff 	add.w	r3, r3, #4294967295
 801fb66:	dcf1      	bgt.n	801fb4c <__exponent+0x1c>
 801fb68:	3130      	adds	r1, #48	@ 0x30
 801fb6a:	1e94      	subs	r4, r2, #2
 801fb6c:	f803 1c01 	strb.w	r1, [r3, #-1]
 801fb70:	4623      	mov	r3, r4
 801fb72:	1c41      	adds	r1, r0, #1
 801fb74:	42ab      	cmp	r3, r5
 801fb76:	d30a      	bcc.n	801fb8e <__exponent+0x5e>
 801fb78:	f10d 0309 	add.w	r3, sp, #9
 801fb7c:	1a9b      	subs	r3, r3, r2
 801fb7e:	42ac      	cmp	r4, r5
 801fb80:	bf88      	it	hi
 801fb82:	2300      	movhi	r3, #0
 801fb84:	3302      	adds	r3, #2
 801fb86:	4403      	add	r3, r0
 801fb88:	1a18      	subs	r0, r3, r0
 801fb8a:	b003      	add	sp, #12
 801fb8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fb8e:	f813 6b01 	ldrb.w	r6, [r3], #1
 801fb92:	f801 6f01 	strb.w	r6, [r1, #1]!
 801fb96:	e7ed      	b.n	801fb74 <__exponent+0x44>
 801fb98:	2330      	movs	r3, #48	@ 0x30
 801fb9a:	3130      	adds	r1, #48	@ 0x30
 801fb9c:	7083      	strb	r3, [r0, #2]
 801fb9e:	70c1      	strb	r1, [r0, #3]
 801fba0:	1d03      	adds	r3, r0, #4
 801fba2:	e7f1      	b.n	801fb88 <__exponent+0x58>

0801fba4 <_printf_float>:
 801fba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fba8:	b091      	sub	sp, #68	@ 0x44
 801fbaa:	460c      	mov	r4, r1
 801fbac:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 801fbb0:	4616      	mov	r6, r2
 801fbb2:	461f      	mov	r7, r3
 801fbb4:	4605      	mov	r5, r0
 801fbb6:	f000 fe83 	bl	80208c0 <_localeconv_r>
 801fbba:	6803      	ldr	r3, [r0, #0]
 801fbbc:	4618      	mov	r0, r3
 801fbbe:	9308      	str	r3, [sp, #32]
 801fbc0:	f7e0 fb0c 	bl	80001dc <strlen>
 801fbc4:	2300      	movs	r3, #0
 801fbc6:	930e      	str	r3, [sp, #56]	@ 0x38
 801fbc8:	f8d8 3000 	ldr.w	r3, [r8]
 801fbcc:	9009      	str	r0, [sp, #36]	@ 0x24
 801fbce:	3307      	adds	r3, #7
 801fbd0:	f023 0307 	bic.w	r3, r3, #7
 801fbd4:	f103 0208 	add.w	r2, r3, #8
 801fbd8:	f894 a018 	ldrb.w	sl, [r4, #24]
 801fbdc:	f8d4 b000 	ldr.w	fp, [r4]
 801fbe0:	f8c8 2000 	str.w	r2, [r8]
 801fbe4:	e9d3 8900 	ldrd	r8, r9, [r3]
 801fbe8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801fbec:	930b      	str	r3, [sp, #44]	@ 0x2c
 801fbee:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801fbf2:	f04f 32ff 	mov.w	r2, #4294967295
 801fbf6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801fbfa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801fbfe:	4b9c      	ldr	r3, [pc, #624]	@ (801fe70 <_printf_float+0x2cc>)
 801fc00:	f7e0 ff4a 	bl	8000a98 <__aeabi_dcmpun>
 801fc04:	bb70      	cbnz	r0, 801fc64 <_printf_float+0xc0>
 801fc06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801fc0a:	f04f 32ff 	mov.w	r2, #4294967295
 801fc0e:	4b98      	ldr	r3, [pc, #608]	@ (801fe70 <_printf_float+0x2cc>)
 801fc10:	f7e0 ff24 	bl	8000a5c <__aeabi_dcmple>
 801fc14:	bb30      	cbnz	r0, 801fc64 <_printf_float+0xc0>
 801fc16:	2200      	movs	r2, #0
 801fc18:	2300      	movs	r3, #0
 801fc1a:	4640      	mov	r0, r8
 801fc1c:	4649      	mov	r1, r9
 801fc1e:	f7e0 ff13 	bl	8000a48 <__aeabi_dcmplt>
 801fc22:	b110      	cbz	r0, 801fc2a <_printf_float+0x86>
 801fc24:	232d      	movs	r3, #45	@ 0x2d
 801fc26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801fc2a:	4a92      	ldr	r2, [pc, #584]	@ (801fe74 <_printf_float+0x2d0>)
 801fc2c:	4b92      	ldr	r3, [pc, #584]	@ (801fe78 <_printf_float+0x2d4>)
 801fc2e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801fc32:	bf8c      	ite	hi
 801fc34:	4690      	movhi	r8, r2
 801fc36:	4698      	movls	r8, r3
 801fc38:	2303      	movs	r3, #3
 801fc3a:	f04f 0900 	mov.w	r9, #0
 801fc3e:	6123      	str	r3, [r4, #16]
 801fc40:	f02b 0304 	bic.w	r3, fp, #4
 801fc44:	6023      	str	r3, [r4, #0]
 801fc46:	4633      	mov	r3, r6
 801fc48:	4621      	mov	r1, r4
 801fc4a:	4628      	mov	r0, r5
 801fc4c:	9700      	str	r7, [sp, #0]
 801fc4e:	aa0f      	add	r2, sp, #60	@ 0x3c
 801fc50:	f000 f9d4 	bl	801fffc <_printf_common>
 801fc54:	3001      	adds	r0, #1
 801fc56:	f040 8090 	bne.w	801fd7a <_printf_float+0x1d6>
 801fc5a:	f04f 30ff 	mov.w	r0, #4294967295
 801fc5e:	b011      	add	sp, #68	@ 0x44
 801fc60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fc64:	4642      	mov	r2, r8
 801fc66:	464b      	mov	r3, r9
 801fc68:	4640      	mov	r0, r8
 801fc6a:	4649      	mov	r1, r9
 801fc6c:	f7e0 ff14 	bl	8000a98 <__aeabi_dcmpun>
 801fc70:	b148      	cbz	r0, 801fc86 <_printf_float+0xe2>
 801fc72:	464b      	mov	r3, r9
 801fc74:	2b00      	cmp	r3, #0
 801fc76:	bfb8      	it	lt
 801fc78:	232d      	movlt	r3, #45	@ 0x2d
 801fc7a:	4a80      	ldr	r2, [pc, #512]	@ (801fe7c <_printf_float+0x2d8>)
 801fc7c:	bfb8      	it	lt
 801fc7e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801fc82:	4b7f      	ldr	r3, [pc, #508]	@ (801fe80 <_printf_float+0x2dc>)
 801fc84:	e7d3      	b.n	801fc2e <_printf_float+0x8a>
 801fc86:	6863      	ldr	r3, [r4, #4]
 801fc88:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 801fc8c:	1c5a      	adds	r2, r3, #1
 801fc8e:	d13f      	bne.n	801fd10 <_printf_float+0x16c>
 801fc90:	2306      	movs	r3, #6
 801fc92:	6063      	str	r3, [r4, #4]
 801fc94:	2200      	movs	r2, #0
 801fc96:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 801fc9a:	6023      	str	r3, [r4, #0]
 801fc9c:	9206      	str	r2, [sp, #24]
 801fc9e:	aa0e      	add	r2, sp, #56	@ 0x38
 801fca0:	e9cd a204 	strd	sl, r2, [sp, #16]
 801fca4:	aa0d      	add	r2, sp, #52	@ 0x34
 801fca6:	9203      	str	r2, [sp, #12]
 801fca8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 801fcac:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801fcb0:	6863      	ldr	r3, [r4, #4]
 801fcb2:	4642      	mov	r2, r8
 801fcb4:	9300      	str	r3, [sp, #0]
 801fcb6:	4628      	mov	r0, r5
 801fcb8:	464b      	mov	r3, r9
 801fcba:	910a      	str	r1, [sp, #40]	@ 0x28
 801fcbc:	f7ff fed4 	bl	801fa68 <__cvt>
 801fcc0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fcc2:	4680      	mov	r8, r0
 801fcc4:	2947      	cmp	r1, #71	@ 0x47
 801fcc6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801fcc8:	d128      	bne.n	801fd1c <_printf_float+0x178>
 801fcca:	1cc8      	adds	r0, r1, #3
 801fccc:	db02      	blt.n	801fcd4 <_printf_float+0x130>
 801fcce:	6863      	ldr	r3, [r4, #4]
 801fcd0:	4299      	cmp	r1, r3
 801fcd2:	dd40      	ble.n	801fd56 <_printf_float+0x1b2>
 801fcd4:	f1aa 0a02 	sub.w	sl, sl, #2
 801fcd8:	fa5f fa8a 	uxtb.w	sl, sl
 801fcdc:	4652      	mov	r2, sl
 801fcde:	3901      	subs	r1, #1
 801fce0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801fce4:	910d      	str	r1, [sp, #52]	@ 0x34
 801fce6:	f7ff ff23 	bl	801fb30 <__exponent>
 801fcea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801fcec:	4681      	mov	r9, r0
 801fcee:	1813      	adds	r3, r2, r0
 801fcf0:	2a01      	cmp	r2, #1
 801fcf2:	6123      	str	r3, [r4, #16]
 801fcf4:	dc02      	bgt.n	801fcfc <_printf_float+0x158>
 801fcf6:	6822      	ldr	r2, [r4, #0]
 801fcf8:	07d2      	lsls	r2, r2, #31
 801fcfa:	d501      	bpl.n	801fd00 <_printf_float+0x15c>
 801fcfc:	3301      	adds	r3, #1
 801fcfe:	6123      	str	r3, [r4, #16]
 801fd00:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 801fd04:	2b00      	cmp	r3, #0
 801fd06:	d09e      	beq.n	801fc46 <_printf_float+0xa2>
 801fd08:	232d      	movs	r3, #45	@ 0x2d
 801fd0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801fd0e:	e79a      	b.n	801fc46 <_printf_float+0xa2>
 801fd10:	2947      	cmp	r1, #71	@ 0x47
 801fd12:	d1bf      	bne.n	801fc94 <_printf_float+0xf0>
 801fd14:	2b00      	cmp	r3, #0
 801fd16:	d1bd      	bne.n	801fc94 <_printf_float+0xf0>
 801fd18:	2301      	movs	r3, #1
 801fd1a:	e7ba      	b.n	801fc92 <_printf_float+0xee>
 801fd1c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801fd20:	d9dc      	bls.n	801fcdc <_printf_float+0x138>
 801fd22:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801fd26:	d118      	bne.n	801fd5a <_printf_float+0x1b6>
 801fd28:	2900      	cmp	r1, #0
 801fd2a:	6863      	ldr	r3, [r4, #4]
 801fd2c:	dd0b      	ble.n	801fd46 <_printf_float+0x1a2>
 801fd2e:	6121      	str	r1, [r4, #16]
 801fd30:	b913      	cbnz	r3, 801fd38 <_printf_float+0x194>
 801fd32:	6822      	ldr	r2, [r4, #0]
 801fd34:	07d0      	lsls	r0, r2, #31
 801fd36:	d502      	bpl.n	801fd3e <_printf_float+0x19a>
 801fd38:	3301      	adds	r3, #1
 801fd3a:	440b      	add	r3, r1
 801fd3c:	6123      	str	r3, [r4, #16]
 801fd3e:	f04f 0900 	mov.w	r9, #0
 801fd42:	65a1      	str	r1, [r4, #88]	@ 0x58
 801fd44:	e7dc      	b.n	801fd00 <_printf_float+0x15c>
 801fd46:	b913      	cbnz	r3, 801fd4e <_printf_float+0x1aa>
 801fd48:	6822      	ldr	r2, [r4, #0]
 801fd4a:	07d2      	lsls	r2, r2, #31
 801fd4c:	d501      	bpl.n	801fd52 <_printf_float+0x1ae>
 801fd4e:	3302      	adds	r3, #2
 801fd50:	e7f4      	b.n	801fd3c <_printf_float+0x198>
 801fd52:	2301      	movs	r3, #1
 801fd54:	e7f2      	b.n	801fd3c <_printf_float+0x198>
 801fd56:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801fd5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fd5c:	4299      	cmp	r1, r3
 801fd5e:	db05      	blt.n	801fd6c <_printf_float+0x1c8>
 801fd60:	6823      	ldr	r3, [r4, #0]
 801fd62:	6121      	str	r1, [r4, #16]
 801fd64:	07d8      	lsls	r0, r3, #31
 801fd66:	d5ea      	bpl.n	801fd3e <_printf_float+0x19a>
 801fd68:	1c4b      	adds	r3, r1, #1
 801fd6a:	e7e7      	b.n	801fd3c <_printf_float+0x198>
 801fd6c:	2900      	cmp	r1, #0
 801fd6e:	bfcc      	ite	gt
 801fd70:	2201      	movgt	r2, #1
 801fd72:	f1c1 0202 	rsble	r2, r1, #2
 801fd76:	4413      	add	r3, r2
 801fd78:	e7e0      	b.n	801fd3c <_printf_float+0x198>
 801fd7a:	6823      	ldr	r3, [r4, #0]
 801fd7c:	055a      	lsls	r2, r3, #21
 801fd7e:	d407      	bmi.n	801fd90 <_printf_float+0x1ec>
 801fd80:	6923      	ldr	r3, [r4, #16]
 801fd82:	4642      	mov	r2, r8
 801fd84:	4631      	mov	r1, r6
 801fd86:	4628      	mov	r0, r5
 801fd88:	47b8      	blx	r7
 801fd8a:	3001      	adds	r0, #1
 801fd8c:	d12b      	bne.n	801fde6 <_printf_float+0x242>
 801fd8e:	e764      	b.n	801fc5a <_printf_float+0xb6>
 801fd90:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801fd94:	f240 80dc 	bls.w	801ff50 <_printf_float+0x3ac>
 801fd98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801fd9c:	2200      	movs	r2, #0
 801fd9e:	2300      	movs	r3, #0
 801fda0:	f7e0 fe48 	bl	8000a34 <__aeabi_dcmpeq>
 801fda4:	2800      	cmp	r0, #0
 801fda6:	d033      	beq.n	801fe10 <_printf_float+0x26c>
 801fda8:	2301      	movs	r3, #1
 801fdaa:	4631      	mov	r1, r6
 801fdac:	4628      	mov	r0, r5
 801fdae:	4a35      	ldr	r2, [pc, #212]	@ (801fe84 <_printf_float+0x2e0>)
 801fdb0:	47b8      	blx	r7
 801fdb2:	3001      	adds	r0, #1
 801fdb4:	f43f af51 	beq.w	801fc5a <_printf_float+0xb6>
 801fdb8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 801fdbc:	4543      	cmp	r3, r8
 801fdbe:	db02      	blt.n	801fdc6 <_printf_float+0x222>
 801fdc0:	6823      	ldr	r3, [r4, #0]
 801fdc2:	07d8      	lsls	r0, r3, #31
 801fdc4:	d50f      	bpl.n	801fde6 <_printf_float+0x242>
 801fdc6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801fdca:	4631      	mov	r1, r6
 801fdcc:	4628      	mov	r0, r5
 801fdce:	47b8      	blx	r7
 801fdd0:	3001      	adds	r0, #1
 801fdd2:	f43f af42 	beq.w	801fc5a <_printf_float+0xb6>
 801fdd6:	f04f 0900 	mov.w	r9, #0
 801fdda:	f108 38ff 	add.w	r8, r8, #4294967295
 801fdde:	f104 0a1a 	add.w	sl, r4, #26
 801fde2:	45c8      	cmp	r8, r9
 801fde4:	dc09      	bgt.n	801fdfa <_printf_float+0x256>
 801fde6:	6823      	ldr	r3, [r4, #0]
 801fde8:	079b      	lsls	r3, r3, #30
 801fdea:	f100 8102 	bmi.w	801fff2 <_printf_float+0x44e>
 801fdee:	68e0      	ldr	r0, [r4, #12]
 801fdf0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fdf2:	4298      	cmp	r0, r3
 801fdf4:	bfb8      	it	lt
 801fdf6:	4618      	movlt	r0, r3
 801fdf8:	e731      	b.n	801fc5e <_printf_float+0xba>
 801fdfa:	2301      	movs	r3, #1
 801fdfc:	4652      	mov	r2, sl
 801fdfe:	4631      	mov	r1, r6
 801fe00:	4628      	mov	r0, r5
 801fe02:	47b8      	blx	r7
 801fe04:	3001      	adds	r0, #1
 801fe06:	f43f af28 	beq.w	801fc5a <_printf_float+0xb6>
 801fe0a:	f109 0901 	add.w	r9, r9, #1
 801fe0e:	e7e8      	b.n	801fde2 <_printf_float+0x23e>
 801fe10:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fe12:	2b00      	cmp	r3, #0
 801fe14:	dc38      	bgt.n	801fe88 <_printf_float+0x2e4>
 801fe16:	2301      	movs	r3, #1
 801fe18:	4631      	mov	r1, r6
 801fe1a:	4628      	mov	r0, r5
 801fe1c:	4a19      	ldr	r2, [pc, #100]	@ (801fe84 <_printf_float+0x2e0>)
 801fe1e:	47b8      	blx	r7
 801fe20:	3001      	adds	r0, #1
 801fe22:	f43f af1a 	beq.w	801fc5a <_printf_float+0xb6>
 801fe26:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 801fe2a:	ea59 0303 	orrs.w	r3, r9, r3
 801fe2e:	d102      	bne.n	801fe36 <_printf_float+0x292>
 801fe30:	6823      	ldr	r3, [r4, #0]
 801fe32:	07d9      	lsls	r1, r3, #31
 801fe34:	d5d7      	bpl.n	801fde6 <_printf_float+0x242>
 801fe36:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801fe3a:	4631      	mov	r1, r6
 801fe3c:	4628      	mov	r0, r5
 801fe3e:	47b8      	blx	r7
 801fe40:	3001      	adds	r0, #1
 801fe42:	f43f af0a 	beq.w	801fc5a <_printf_float+0xb6>
 801fe46:	f04f 0a00 	mov.w	sl, #0
 801fe4a:	f104 0b1a 	add.w	fp, r4, #26
 801fe4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fe50:	425b      	negs	r3, r3
 801fe52:	4553      	cmp	r3, sl
 801fe54:	dc01      	bgt.n	801fe5a <_printf_float+0x2b6>
 801fe56:	464b      	mov	r3, r9
 801fe58:	e793      	b.n	801fd82 <_printf_float+0x1de>
 801fe5a:	2301      	movs	r3, #1
 801fe5c:	465a      	mov	r2, fp
 801fe5e:	4631      	mov	r1, r6
 801fe60:	4628      	mov	r0, r5
 801fe62:	47b8      	blx	r7
 801fe64:	3001      	adds	r0, #1
 801fe66:	f43f aef8 	beq.w	801fc5a <_printf_float+0xb6>
 801fe6a:	f10a 0a01 	add.w	sl, sl, #1
 801fe6e:	e7ee      	b.n	801fe4e <_printf_float+0x2aa>
 801fe70:	7fefffff 	.word	0x7fefffff
 801fe74:	0802f0d9 	.word	0x0802f0d9
 801fe78:	0802f0d5 	.word	0x0802f0d5
 801fe7c:	0802f0e1 	.word	0x0802f0e1
 801fe80:	0802f0dd 	.word	0x0802f0dd
 801fe84:	0802f239 	.word	0x0802f239
 801fe88:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801fe8a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801fe8e:	4553      	cmp	r3, sl
 801fe90:	bfa8      	it	ge
 801fe92:	4653      	movge	r3, sl
 801fe94:	2b00      	cmp	r3, #0
 801fe96:	4699      	mov	r9, r3
 801fe98:	dc36      	bgt.n	801ff08 <_printf_float+0x364>
 801fe9a:	f04f 0b00 	mov.w	fp, #0
 801fe9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801fea2:	f104 021a 	add.w	r2, r4, #26
 801fea6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801fea8:	930a      	str	r3, [sp, #40]	@ 0x28
 801feaa:	eba3 0309 	sub.w	r3, r3, r9
 801feae:	455b      	cmp	r3, fp
 801feb0:	dc31      	bgt.n	801ff16 <_printf_float+0x372>
 801feb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801feb4:	459a      	cmp	sl, r3
 801feb6:	dc3a      	bgt.n	801ff2e <_printf_float+0x38a>
 801feb8:	6823      	ldr	r3, [r4, #0]
 801feba:	07da      	lsls	r2, r3, #31
 801febc:	d437      	bmi.n	801ff2e <_printf_float+0x38a>
 801febe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fec0:	ebaa 0903 	sub.w	r9, sl, r3
 801fec4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fec6:	ebaa 0303 	sub.w	r3, sl, r3
 801feca:	4599      	cmp	r9, r3
 801fecc:	bfa8      	it	ge
 801fece:	4699      	movge	r9, r3
 801fed0:	f1b9 0f00 	cmp.w	r9, #0
 801fed4:	dc33      	bgt.n	801ff3e <_printf_float+0x39a>
 801fed6:	f04f 0800 	mov.w	r8, #0
 801feda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801fede:	f104 0b1a 	add.w	fp, r4, #26
 801fee2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fee4:	ebaa 0303 	sub.w	r3, sl, r3
 801fee8:	eba3 0309 	sub.w	r3, r3, r9
 801feec:	4543      	cmp	r3, r8
 801feee:	f77f af7a 	ble.w	801fde6 <_printf_float+0x242>
 801fef2:	2301      	movs	r3, #1
 801fef4:	465a      	mov	r2, fp
 801fef6:	4631      	mov	r1, r6
 801fef8:	4628      	mov	r0, r5
 801fefa:	47b8      	blx	r7
 801fefc:	3001      	adds	r0, #1
 801fefe:	f43f aeac 	beq.w	801fc5a <_printf_float+0xb6>
 801ff02:	f108 0801 	add.w	r8, r8, #1
 801ff06:	e7ec      	b.n	801fee2 <_printf_float+0x33e>
 801ff08:	4642      	mov	r2, r8
 801ff0a:	4631      	mov	r1, r6
 801ff0c:	4628      	mov	r0, r5
 801ff0e:	47b8      	blx	r7
 801ff10:	3001      	adds	r0, #1
 801ff12:	d1c2      	bne.n	801fe9a <_printf_float+0x2f6>
 801ff14:	e6a1      	b.n	801fc5a <_printf_float+0xb6>
 801ff16:	2301      	movs	r3, #1
 801ff18:	4631      	mov	r1, r6
 801ff1a:	4628      	mov	r0, r5
 801ff1c:	920a      	str	r2, [sp, #40]	@ 0x28
 801ff1e:	47b8      	blx	r7
 801ff20:	3001      	adds	r0, #1
 801ff22:	f43f ae9a 	beq.w	801fc5a <_printf_float+0xb6>
 801ff26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ff28:	f10b 0b01 	add.w	fp, fp, #1
 801ff2c:	e7bb      	b.n	801fea6 <_printf_float+0x302>
 801ff2e:	4631      	mov	r1, r6
 801ff30:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801ff34:	4628      	mov	r0, r5
 801ff36:	47b8      	blx	r7
 801ff38:	3001      	adds	r0, #1
 801ff3a:	d1c0      	bne.n	801febe <_printf_float+0x31a>
 801ff3c:	e68d      	b.n	801fc5a <_printf_float+0xb6>
 801ff3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ff40:	464b      	mov	r3, r9
 801ff42:	4631      	mov	r1, r6
 801ff44:	4628      	mov	r0, r5
 801ff46:	4442      	add	r2, r8
 801ff48:	47b8      	blx	r7
 801ff4a:	3001      	adds	r0, #1
 801ff4c:	d1c3      	bne.n	801fed6 <_printf_float+0x332>
 801ff4e:	e684      	b.n	801fc5a <_printf_float+0xb6>
 801ff50:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801ff54:	f1ba 0f01 	cmp.w	sl, #1
 801ff58:	dc01      	bgt.n	801ff5e <_printf_float+0x3ba>
 801ff5a:	07db      	lsls	r3, r3, #31
 801ff5c:	d536      	bpl.n	801ffcc <_printf_float+0x428>
 801ff5e:	2301      	movs	r3, #1
 801ff60:	4642      	mov	r2, r8
 801ff62:	4631      	mov	r1, r6
 801ff64:	4628      	mov	r0, r5
 801ff66:	47b8      	blx	r7
 801ff68:	3001      	adds	r0, #1
 801ff6a:	f43f ae76 	beq.w	801fc5a <_printf_float+0xb6>
 801ff6e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801ff72:	4631      	mov	r1, r6
 801ff74:	4628      	mov	r0, r5
 801ff76:	47b8      	blx	r7
 801ff78:	3001      	adds	r0, #1
 801ff7a:	f43f ae6e 	beq.w	801fc5a <_printf_float+0xb6>
 801ff7e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801ff82:	2200      	movs	r2, #0
 801ff84:	2300      	movs	r3, #0
 801ff86:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ff8a:	f7e0 fd53 	bl	8000a34 <__aeabi_dcmpeq>
 801ff8e:	b9c0      	cbnz	r0, 801ffc2 <_printf_float+0x41e>
 801ff90:	4653      	mov	r3, sl
 801ff92:	f108 0201 	add.w	r2, r8, #1
 801ff96:	4631      	mov	r1, r6
 801ff98:	4628      	mov	r0, r5
 801ff9a:	47b8      	blx	r7
 801ff9c:	3001      	adds	r0, #1
 801ff9e:	d10c      	bne.n	801ffba <_printf_float+0x416>
 801ffa0:	e65b      	b.n	801fc5a <_printf_float+0xb6>
 801ffa2:	2301      	movs	r3, #1
 801ffa4:	465a      	mov	r2, fp
 801ffa6:	4631      	mov	r1, r6
 801ffa8:	4628      	mov	r0, r5
 801ffaa:	47b8      	blx	r7
 801ffac:	3001      	adds	r0, #1
 801ffae:	f43f ae54 	beq.w	801fc5a <_printf_float+0xb6>
 801ffb2:	f108 0801 	add.w	r8, r8, #1
 801ffb6:	45d0      	cmp	r8, sl
 801ffb8:	dbf3      	blt.n	801ffa2 <_printf_float+0x3fe>
 801ffba:	464b      	mov	r3, r9
 801ffbc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801ffc0:	e6e0      	b.n	801fd84 <_printf_float+0x1e0>
 801ffc2:	f04f 0800 	mov.w	r8, #0
 801ffc6:	f104 0b1a 	add.w	fp, r4, #26
 801ffca:	e7f4      	b.n	801ffb6 <_printf_float+0x412>
 801ffcc:	2301      	movs	r3, #1
 801ffce:	4642      	mov	r2, r8
 801ffd0:	e7e1      	b.n	801ff96 <_printf_float+0x3f2>
 801ffd2:	2301      	movs	r3, #1
 801ffd4:	464a      	mov	r2, r9
 801ffd6:	4631      	mov	r1, r6
 801ffd8:	4628      	mov	r0, r5
 801ffda:	47b8      	blx	r7
 801ffdc:	3001      	adds	r0, #1
 801ffde:	f43f ae3c 	beq.w	801fc5a <_printf_float+0xb6>
 801ffe2:	f108 0801 	add.w	r8, r8, #1
 801ffe6:	68e3      	ldr	r3, [r4, #12]
 801ffe8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801ffea:	1a5b      	subs	r3, r3, r1
 801ffec:	4543      	cmp	r3, r8
 801ffee:	dcf0      	bgt.n	801ffd2 <_printf_float+0x42e>
 801fff0:	e6fd      	b.n	801fdee <_printf_float+0x24a>
 801fff2:	f04f 0800 	mov.w	r8, #0
 801fff6:	f104 0919 	add.w	r9, r4, #25
 801fffa:	e7f4      	b.n	801ffe6 <_printf_float+0x442>

0801fffc <_printf_common>:
 801fffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020000:	4616      	mov	r6, r2
 8020002:	4698      	mov	r8, r3
 8020004:	688a      	ldr	r2, [r1, #8]
 8020006:	690b      	ldr	r3, [r1, #16]
 8020008:	4607      	mov	r7, r0
 802000a:	4293      	cmp	r3, r2
 802000c:	bfb8      	it	lt
 802000e:	4613      	movlt	r3, r2
 8020010:	6033      	str	r3, [r6, #0]
 8020012:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8020016:	460c      	mov	r4, r1
 8020018:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802001c:	b10a      	cbz	r2, 8020022 <_printf_common+0x26>
 802001e:	3301      	adds	r3, #1
 8020020:	6033      	str	r3, [r6, #0]
 8020022:	6823      	ldr	r3, [r4, #0]
 8020024:	0699      	lsls	r1, r3, #26
 8020026:	bf42      	ittt	mi
 8020028:	6833      	ldrmi	r3, [r6, #0]
 802002a:	3302      	addmi	r3, #2
 802002c:	6033      	strmi	r3, [r6, #0]
 802002e:	6825      	ldr	r5, [r4, #0]
 8020030:	f015 0506 	ands.w	r5, r5, #6
 8020034:	d106      	bne.n	8020044 <_printf_common+0x48>
 8020036:	f104 0a19 	add.w	sl, r4, #25
 802003a:	68e3      	ldr	r3, [r4, #12]
 802003c:	6832      	ldr	r2, [r6, #0]
 802003e:	1a9b      	subs	r3, r3, r2
 8020040:	42ab      	cmp	r3, r5
 8020042:	dc2b      	bgt.n	802009c <_printf_common+0xa0>
 8020044:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8020048:	6822      	ldr	r2, [r4, #0]
 802004a:	3b00      	subs	r3, #0
 802004c:	bf18      	it	ne
 802004e:	2301      	movne	r3, #1
 8020050:	0692      	lsls	r2, r2, #26
 8020052:	d430      	bmi.n	80200b6 <_printf_common+0xba>
 8020054:	4641      	mov	r1, r8
 8020056:	4638      	mov	r0, r7
 8020058:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802005c:	47c8      	blx	r9
 802005e:	3001      	adds	r0, #1
 8020060:	d023      	beq.n	80200aa <_printf_common+0xae>
 8020062:	6823      	ldr	r3, [r4, #0]
 8020064:	6922      	ldr	r2, [r4, #16]
 8020066:	f003 0306 	and.w	r3, r3, #6
 802006a:	2b04      	cmp	r3, #4
 802006c:	bf14      	ite	ne
 802006e:	2500      	movne	r5, #0
 8020070:	6833      	ldreq	r3, [r6, #0]
 8020072:	f04f 0600 	mov.w	r6, #0
 8020076:	bf08      	it	eq
 8020078:	68e5      	ldreq	r5, [r4, #12]
 802007a:	f104 041a 	add.w	r4, r4, #26
 802007e:	bf08      	it	eq
 8020080:	1aed      	subeq	r5, r5, r3
 8020082:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8020086:	bf08      	it	eq
 8020088:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802008c:	4293      	cmp	r3, r2
 802008e:	bfc4      	itt	gt
 8020090:	1a9b      	subgt	r3, r3, r2
 8020092:	18ed      	addgt	r5, r5, r3
 8020094:	42b5      	cmp	r5, r6
 8020096:	d11a      	bne.n	80200ce <_printf_common+0xd2>
 8020098:	2000      	movs	r0, #0
 802009a:	e008      	b.n	80200ae <_printf_common+0xb2>
 802009c:	2301      	movs	r3, #1
 802009e:	4652      	mov	r2, sl
 80200a0:	4641      	mov	r1, r8
 80200a2:	4638      	mov	r0, r7
 80200a4:	47c8      	blx	r9
 80200a6:	3001      	adds	r0, #1
 80200a8:	d103      	bne.n	80200b2 <_printf_common+0xb6>
 80200aa:	f04f 30ff 	mov.w	r0, #4294967295
 80200ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80200b2:	3501      	adds	r5, #1
 80200b4:	e7c1      	b.n	802003a <_printf_common+0x3e>
 80200b6:	2030      	movs	r0, #48	@ 0x30
 80200b8:	18e1      	adds	r1, r4, r3
 80200ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80200be:	1c5a      	adds	r2, r3, #1
 80200c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80200c4:	4422      	add	r2, r4
 80200c6:	3302      	adds	r3, #2
 80200c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80200cc:	e7c2      	b.n	8020054 <_printf_common+0x58>
 80200ce:	2301      	movs	r3, #1
 80200d0:	4622      	mov	r2, r4
 80200d2:	4641      	mov	r1, r8
 80200d4:	4638      	mov	r0, r7
 80200d6:	47c8      	blx	r9
 80200d8:	3001      	adds	r0, #1
 80200da:	d0e6      	beq.n	80200aa <_printf_common+0xae>
 80200dc:	3601      	adds	r6, #1
 80200de:	e7d9      	b.n	8020094 <_printf_common+0x98>

080200e0 <_printf_i>:
 80200e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80200e4:	7e0f      	ldrb	r7, [r1, #24]
 80200e6:	4691      	mov	r9, r2
 80200e8:	2f78      	cmp	r7, #120	@ 0x78
 80200ea:	4680      	mov	r8, r0
 80200ec:	460c      	mov	r4, r1
 80200ee:	469a      	mov	sl, r3
 80200f0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80200f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80200f6:	d807      	bhi.n	8020108 <_printf_i+0x28>
 80200f8:	2f62      	cmp	r7, #98	@ 0x62
 80200fa:	d80a      	bhi.n	8020112 <_printf_i+0x32>
 80200fc:	2f00      	cmp	r7, #0
 80200fe:	f000 80d1 	beq.w	80202a4 <_printf_i+0x1c4>
 8020102:	2f58      	cmp	r7, #88	@ 0x58
 8020104:	f000 80b8 	beq.w	8020278 <_printf_i+0x198>
 8020108:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802010c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8020110:	e03a      	b.n	8020188 <_printf_i+0xa8>
 8020112:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8020116:	2b15      	cmp	r3, #21
 8020118:	d8f6      	bhi.n	8020108 <_printf_i+0x28>
 802011a:	a101      	add	r1, pc, #4	@ (adr r1, 8020120 <_printf_i+0x40>)
 802011c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8020120:	08020179 	.word	0x08020179
 8020124:	0802018d 	.word	0x0802018d
 8020128:	08020109 	.word	0x08020109
 802012c:	08020109 	.word	0x08020109
 8020130:	08020109 	.word	0x08020109
 8020134:	08020109 	.word	0x08020109
 8020138:	0802018d 	.word	0x0802018d
 802013c:	08020109 	.word	0x08020109
 8020140:	08020109 	.word	0x08020109
 8020144:	08020109 	.word	0x08020109
 8020148:	08020109 	.word	0x08020109
 802014c:	0802028b 	.word	0x0802028b
 8020150:	080201b7 	.word	0x080201b7
 8020154:	08020245 	.word	0x08020245
 8020158:	08020109 	.word	0x08020109
 802015c:	08020109 	.word	0x08020109
 8020160:	080202ad 	.word	0x080202ad
 8020164:	08020109 	.word	0x08020109
 8020168:	080201b7 	.word	0x080201b7
 802016c:	08020109 	.word	0x08020109
 8020170:	08020109 	.word	0x08020109
 8020174:	0802024d 	.word	0x0802024d
 8020178:	6833      	ldr	r3, [r6, #0]
 802017a:	1d1a      	adds	r2, r3, #4
 802017c:	681b      	ldr	r3, [r3, #0]
 802017e:	6032      	str	r2, [r6, #0]
 8020180:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8020184:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8020188:	2301      	movs	r3, #1
 802018a:	e09c      	b.n	80202c6 <_printf_i+0x1e6>
 802018c:	6833      	ldr	r3, [r6, #0]
 802018e:	6820      	ldr	r0, [r4, #0]
 8020190:	1d19      	adds	r1, r3, #4
 8020192:	6031      	str	r1, [r6, #0]
 8020194:	0606      	lsls	r6, r0, #24
 8020196:	d501      	bpl.n	802019c <_printf_i+0xbc>
 8020198:	681d      	ldr	r5, [r3, #0]
 802019a:	e003      	b.n	80201a4 <_printf_i+0xc4>
 802019c:	0645      	lsls	r5, r0, #25
 802019e:	d5fb      	bpl.n	8020198 <_printf_i+0xb8>
 80201a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80201a4:	2d00      	cmp	r5, #0
 80201a6:	da03      	bge.n	80201b0 <_printf_i+0xd0>
 80201a8:	232d      	movs	r3, #45	@ 0x2d
 80201aa:	426d      	negs	r5, r5
 80201ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80201b0:	230a      	movs	r3, #10
 80201b2:	4858      	ldr	r0, [pc, #352]	@ (8020314 <_printf_i+0x234>)
 80201b4:	e011      	b.n	80201da <_printf_i+0xfa>
 80201b6:	6821      	ldr	r1, [r4, #0]
 80201b8:	6833      	ldr	r3, [r6, #0]
 80201ba:	0608      	lsls	r0, r1, #24
 80201bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80201c0:	d402      	bmi.n	80201c8 <_printf_i+0xe8>
 80201c2:	0649      	lsls	r1, r1, #25
 80201c4:	bf48      	it	mi
 80201c6:	b2ad      	uxthmi	r5, r5
 80201c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80201ca:	6033      	str	r3, [r6, #0]
 80201cc:	bf14      	ite	ne
 80201ce:	230a      	movne	r3, #10
 80201d0:	2308      	moveq	r3, #8
 80201d2:	4850      	ldr	r0, [pc, #320]	@ (8020314 <_printf_i+0x234>)
 80201d4:	2100      	movs	r1, #0
 80201d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80201da:	6866      	ldr	r6, [r4, #4]
 80201dc:	2e00      	cmp	r6, #0
 80201de:	60a6      	str	r6, [r4, #8]
 80201e0:	db05      	blt.n	80201ee <_printf_i+0x10e>
 80201e2:	6821      	ldr	r1, [r4, #0]
 80201e4:	432e      	orrs	r6, r5
 80201e6:	f021 0104 	bic.w	r1, r1, #4
 80201ea:	6021      	str	r1, [r4, #0]
 80201ec:	d04b      	beq.n	8020286 <_printf_i+0x1a6>
 80201ee:	4616      	mov	r6, r2
 80201f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80201f4:	fb03 5711 	mls	r7, r3, r1, r5
 80201f8:	5dc7      	ldrb	r7, [r0, r7]
 80201fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80201fe:	462f      	mov	r7, r5
 8020200:	42bb      	cmp	r3, r7
 8020202:	460d      	mov	r5, r1
 8020204:	d9f4      	bls.n	80201f0 <_printf_i+0x110>
 8020206:	2b08      	cmp	r3, #8
 8020208:	d10b      	bne.n	8020222 <_printf_i+0x142>
 802020a:	6823      	ldr	r3, [r4, #0]
 802020c:	07df      	lsls	r7, r3, #31
 802020e:	d508      	bpl.n	8020222 <_printf_i+0x142>
 8020210:	6923      	ldr	r3, [r4, #16]
 8020212:	6861      	ldr	r1, [r4, #4]
 8020214:	4299      	cmp	r1, r3
 8020216:	bfde      	ittt	le
 8020218:	2330      	movle	r3, #48	@ 0x30
 802021a:	f806 3c01 	strble.w	r3, [r6, #-1]
 802021e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8020222:	1b92      	subs	r2, r2, r6
 8020224:	6122      	str	r2, [r4, #16]
 8020226:	464b      	mov	r3, r9
 8020228:	4621      	mov	r1, r4
 802022a:	4640      	mov	r0, r8
 802022c:	f8cd a000 	str.w	sl, [sp]
 8020230:	aa03      	add	r2, sp, #12
 8020232:	f7ff fee3 	bl	801fffc <_printf_common>
 8020236:	3001      	adds	r0, #1
 8020238:	d14a      	bne.n	80202d0 <_printf_i+0x1f0>
 802023a:	f04f 30ff 	mov.w	r0, #4294967295
 802023e:	b004      	add	sp, #16
 8020240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020244:	6823      	ldr	r3, [r4, #0]
 8020246:	f043 0320 	orr.w	r3, r3, #32
 802024a:	6023      	str	r3, [r4, #0]
 802024c:	2778      	movs	r7, #120	@ 0x78
 802024e:	4832      	ldr	r0, [pc, #200]	@ (8020318 <_printf_i+0x238>)
 8020250:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8020254:	6823      	ldr	r3, [r4, #0]
 8020256:	6831      	ldr	r1, [r6, #0]
 8020258:	061f      	lsls	r7, r3, #24
 802025a:	f851 5b04 	ldr.w	r5, [r1], #4
 802025e:	d402      	bmi.n	8020266 <_printf_i+0x186>
 8020260:	065f      	lsls	r7, r3, #25
 8020262:	bf48      	it	mi
 8020264:	b2ad      	uxthmi	r5, r5
 8020266:	6031      	str	r1, [r6, #0]
 8020268:	07d9      	lsls	r1, r3, #31
 802026a:	bf44      	itt	mi
 802026c:	f043 0320 	orrmi.w	r3, r3, #32
 8020270:	6023      	strmi	r3, [r4, #0]
 8020272:	b11d      	cbz	r5, 802027c <_printf_i+0x19c>
 8020274:	2310      	movs	r3, #16
 8020276:	e7ad      	b.n	80201d4 <_printf_i+0xf4>
 8020278:	4826      	ldr	r0, [pc, #152]	@ (8020314 <_printf_i+0x234>)
 802027a:	e7e9      	b.n	8020250 <_printf_i+0x170>
 802027c:	6823      	ldr	r3, [r4, #0]
 802027e:	f023 0320 	bic.w	r3, r3, #32
 8020282:	6023      	str	r3, [r4, #0]
 8020284:	e7f6      	b.n	8020274 <_printf_i+0x194>
 8020286:	4616      	mov	r6, r2
 8020288:	e7bd      	b.n	8020206 <_printf_i+0x126>
 802028a:	6833      	ldr	r3, [r6, #0]
 802028c:	6825      	ldr	r5, [r4, #0]
 802028e:	1d18      	adds	r0, r3, #4
 8020290:	6961      	ldr	r1, [r4, #20]
 8020292:	6030      	str	r0, [r6, #0]
 8020294:	062e      	lsls	r6, r5, #24
 8020296:	681b      	ldr	r3, [r3, #0]
 8020298:	d501      	bpl.n	802029e <_printf_i+0x1be>
 802029a:	6019      	str	r1, [r3, #0]
 802029c:	e002      	b.n	80202a4 <_printf_i+0x1c4>
 802029e:	0668      	lsls	r0, r5, #25
 80202a0:	d5fb      	bpl.n	802029a <_printf_i+0x1ba>
 80202a2:	8019      	strh	r1, [r3, #0]
 80202a4:	2300      	movs	r3, #0
 80202a6:	4616      	mov	r6, r2
 80202a8:	6123      	str	r3, [r4, #16]
 80202aa:	e7bc      	b.n	8020226 <_printf_i+0x146>
 80202ac:	6833      	ldr	r3, [r6, #0]
 80202ae:	2100      	movs	r1, #0
 80202b0:	1d1a      	adds	r2, r3, #4
 80202b2:	6032      	str	r2, [r6, #0]
 80202b4:	681e      	ldr	r6, [r3, #0]
 80202b6:	6862      	ldr	r2, [r4, #4]
 80202b8:	4630      	mov	r0, r6
 80202ba:	f000 fb78 	bl	80209ae <memchr>
 80202be:	b108      	cbz	r0, 80202c4 <_printf_i+0x1e4>
 80202c0:	1b80      	subs	r0, r0, r6
 80202c2:	6060      	str	r0, [r4, #4]
 80202c4:	6863      	ldr	r3, [r4, #4]
 80202c6:	6123      	str	r3, [r4, #16]
 80202c8:	2300      	movs	r3, #0
 80202ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80202ce:	e7aa      	b.n	8020226 <_printf_i+0x146>
 80202d0:	4632      	mov	r2, r6
 80202d2:	4649      	mov	r1, r9
 80202d4:	4640      	mov	r0, r8
 80202d6:	6923      	ldr	r3, [r4, #16]
 80202d8:	47d0      	blx	sl
 80202da:	3001      	adds	r0, #1
 80202dc:	d0ad      	beq.n	802023a <_printf_i+0x15a>
 80202de:	6823      	ldr	r3, [r4, #0]
 80202e0:	079b      	lsls	r3, r3, #30
 80202e2:	d413      	bmi.n	802030c <_printf_i+0x22c>
 80202e4:	68e0      	ldr	r0, [r4, #12]
 80202e6:	9b03      	ldr	r3, [sp, #12]
 80202e8:	4298      	cmp	r0, r3
 80202ea:	bfb8      	it	lt
 80202ec:	4618      	movlt	r0, r3
 80202ee:	e7a6      	b.n	802023e <_printf_i+0x15e>
 80202f0:	2301      	movs	r3, #1
 80202f2:	4632      	mov	r2, r6
 80202f4:	4649      	mov	r1, r9
 80202f6:	4640      	mov	r0, r8
 80202f8:	47d0      	blx	sl
 80202fa:	3001      	adds	r0, #1
 80202fc:	d09d      	beq.n	802023a <_printf_i+0x15a>
 80202fe:	3501      	adds	r5, #1
 8020300:	68e3      	ldr	r3, [r4, #12]
 8020302:	9903      	ldr	r1, [sp, #12]
 8020304:	1a5b      	subs	r3, r3, r1
 8020306:	42ab      	cmp	r3, r5
 8020308:	dcf2      	bgt.n	80202f0 <_printf_i+0x210>
 802030a:	e7eb      	b.n	80202e4 <_printf_i+0x204>
 802030c:	2500      	movs	r5, #0
 802030e:	f104 0619 	add.w	r6, r4, #25
 8020312:	e7f5      	b.n	8020300 <_printf_i+0x220>
 8020314:	0802f0e5 	.word	0x0802f0e5
 8020318:	0802f0f6 	.word	0x0802f0f6

0802031c <std>:
 802031c:	2300      	movs	r3, #0
 802031e:	b510      	push	{r4, lr}
 8020320:	4604      	mov	r4, r0
 8020322:	e9c0 3300 	strd	r3, r3, [r0]
 8020326:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802032a:	6083      	str	r3, [r0, #8]
 802032c:	8181      	strh	r1, [r0, #12]
 802032e:	6643      	str	r3, [r0, #100]	@ 0x64
 8020330:	81c2      	strh	r2, [r0, #14]
 8020332:	6183      	str	r3, [r0, #24]
 8020334:	4619      	mov	r1, r3
 8020336:	2208      	movs	r2, #8
 8020338:	305c      	adds	r0, #92	@ 0x5c
 802033a:	f000 fa87 	bl	802084c <memset>
 802033e:	4b0d      	ldr	r3, [pc, #52]	@ (8020374 <std+0x58>)
 8020340:	6224      	str	r4, [r4, #32]
 8020342:	6263      	str	r3, [r4, #36]	@ 0x24
 8020344:	4b0c      	ldr	r3, [pc, #48]	@ (8020378 <std+0x5c>)
 8020346:	62a3      	str	r3, [r4, #40]	@ 0x28
 8020348:	4b0c      	ldr	r3, [pc, #48]	@ (802037c <std+0x60>)
 802034a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802034c:	4b0c      	ldr	r3, [pc, #48]	@ (8020380 <std+0x64>)
 802034e:	6323      	str	r3, [r4, #48]	@ 0x30
 8020350:	4b0c      	ldr	r3, [pc, #48]	@ (8020384 <std+0x68>)
 8020352:	429c      	cmp	r4, r3
 8020354:	d006      	beq.n	8020364 <std+0x48>
 8020356:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802035a:	4294      	cmp	r4, r2
 802035c:	d002      	beq.n	8020364 <std+0x48>
 802035e:	33d0      	adds	r3, #208	@ 0xd0
 8020360:	429c      	cmp	r4, r3
 8020362:	d105      	bne.n	8020370 <std+0x54>
 8020364:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8020368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802036c:	f000 bb1c 	b.w	80209a8 <__retarget_lock_init_recursive>
 8020370:	bd10      	pop	{r4, pc}
 8020372:	bf00      	nop
 8020374:	08020645 	.word	0x08020645
 8020378:	0802066b 	.word	0x0802066b
 802037c:	080206a3 	.word	0x080206a3
 8020380:	080206c7 	.word	0x080206c7
 8020384:	2000debc 	.word	0x2000debc

08020388 <stdio_exit_handler>:
 8020388:	4a02      	ldr	r2, [pc, #8]	@ (8020394 <stdio_exit_handler+0xc>)
 802038a:	4903      	ldr	r1, [pc, #12]	@ (8020398 <stdio_exit_handler+0x10>)
 802038c:	4803      	ldr	r0, [pc, #12]	@ (802039c <stdio_exit_handler+0x14>)
 802038e:	f000 b869 	b.w	8020464 <_fwalk_sglue>
 8020392:	bf00      	nop
 8020394:	20000120 	.word	0x20000120
 8020398:	08022c35 	.word	0x08022c35
 802039c:	20000130 	.word	0x20000130

080203a0 <cleanup_stdio>:
 80203a0:	6841      	ldr	r1, [r0, #4]
 80203a2:	4b0c      	ldr	r3, [pc, #48]	@ (80203d4 <cleanup_stdio+0x34>)
 80203a4:	b510      	push	{r4, lr}
 80203a6:	4299      	cmp	r1, r3
 80203a8:	4604      	mov	r4, r0
 80203aa:	d001      	beq.n	80203b0 <cleanup_stdio+0x10>
 80203ac:	f002 fc42 	bl	8022c34 <_fflush_r>
 80203b0:	68a1      	ldr	r1, [r4, #8]
 80203b2:	4b09      	ldr	r3, [pc, #36]	@ (80203d8 <cleanup_stdio+0x38>)
 80203b4:	4299      	cmp	r1, r3
 80203b6:	d002      	beq.n	80203be <cleanup_stdio+0x1e>
 80203b8:	4620      	mov	r0, r4
 80203ba:	f002 fc3b 	bl	8022c34 <_fflush_r>
 80203be:	68e1      	ldr	r1, [r4, #12]
 80203c0:	4b06      	ldr	r3, [pc, #24]	@ (80203dc <cleanup_stdio+0x3c>)
 80203c2:	4299      	cmp	r1, r3
 80203c4:	d004      	beq.n	80203d0 <cleanup_stdio+0x30>
 80203c6:	4620      	mov	r0, r4
 80203c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80203cc:	f002 bc32 	b.w	8022c34 <_fflush_r>
 80203d0:	bd10      	pop	{r4, pc}
 80203d2:	bf00      	nop
 80203d4:	2000debc 	.word	0x2000debc
 80203d8:	2000df24 	.word	0x2000df24
 80203dc:	2000df8c 	.word	0x2000df8c

080203e0 <global_stdio_init.part.0>:
 80203e0:	b510      	push	{r4, lr}
 80203e2:	4b0b      	ldr	r3, [pc, #44]	@ (8020410 <global_stdio_init.part.0+0x30>)
 80203e4:	4c0b      	ldr	r4, [pc, #44]	@ (8020414 <global_stdio_init.part.0+0x34>)
 80203e6:	4a0c      	ldr	r2, [pc, #48]	@ (8020418 <global_stdio_init.part.0+0x38>)
 80203e8:	4620      	mov	r0, r4
 80203ea:	601a      	str	r2, [r3, #0]
 80203ec:	2104      	movs	r1, #4
 80203ee:	2200      	movs	r2, #0
 80203f0:	f7ff ff94 	bl	802031c <std>
 80203f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80203f8:	2201      	movs	r2, #1
 80203fa:	2109      	movs	r1, #9
 80203fc:	f7ff ff8e 	bl	802031c <std>
 8020400:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8020404:	2202      	movs	r2, #2
 8020406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802040a:	2112      	movs	r1, #18
 802040c:	f7ff bf86 	b.w	802031c <std>
 8020410:	2000dff4 	.word	0x2000dff4
 8020414:	2000debc 	.word	0x2000debc
 8020418:	08020389 	.word	0x08020389

0802041c <__sfp_lock_acquire>:
 802041c:	4801      	ldr	r0, [pc, #4]	@ (8020424 <__sfp_lock_acquire+0x8>)
 802041e:	f000 bac4 	b.w	80209aa <__retarget_lock_acquire_recursive>
 8020422:	bf00      	nop
 8020424:	2000dffd 	.word	0x2000dffd

08020428 <__sfp_lock_release>:
 8020428:	4801      	ldr	r0, [pc, #4]	@ (8020430 <__sfp_lock_release+0x8>)
 802042a:	f000 babf 	b.w	80209ac <__retarget_lock_release_recursive>
 802042e:	bf00      	nop
 8020430:	2000dffd 	.word	0x2000dffd

08020434 <__sinit>:
 8020434:	b510      	push	{r4, lr}
 8020436:	4604      	mov	r4, r0
 8020438:	f7ff fff0 	bl	802041c <__sfp_lock_acquire>
 802043c:	6a23      	ldr	r3, [r4, #32]
 802043e:	b11b      	cbz	r3, 8020448 <__sinit+0x14>
 8020440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020444:	f7ff bff0 	b.w	8020428 <__sfp_lock_release>
 8020448:	4b04      	ldr	r3, [pc, #16]	@ (802045c <__sinit+0x28>)
 802044a:	6223      	str	r3, [r4, #32]
 802044c:	4b04      	ldr	r3, [pc, #16]	@ (8020460 <__sinit+0x2c>)
 802044e:	681b      	ldr	r3, [r3, #0]
 8020450:	2b00      	cmp	r3, #0
 8020452:	d1f5      	bne.n	8020440 <__sinit+0xc>
 8020454:	f7ff ffc4 	bl	80203e0 <global_stdio_init.part.0>
 8020458:	e7f2      	b.n	8020440 <__sinit+0xc>
 802045a:	bf00      	nop
 802045c:	080203a1 	.word	0x080203a1
 8020460:	2000dff4 	.word	0x2000dff4

08020464 <_fwalk_sglue>:
 8020464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020468:	4607      	mov	r7, r0
 802046a:	4688      	mov	r8, r1
 802046c:	4614      	mov	r4, r2
 802046e:	2600      	movs	r6, #0
 8020470:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8020474:	f1b9 0901 	subs.w	r9, r9, #1
 8020478:	d505      	bpl.n	8020486 <_fwalk_sglue+0x22>
 802047a:	6824      	ldr	r4, [r4, #0]
 802047c:	2c00      	cmp	r4, #0
 802047e:	d1f7      	bne.n	8020470 <_fwalk_sglue+0xc>
 8020480:	4630      	mov	r0, r6
 8020482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020486:	89ab      	ldrh	r3, [r5, #12]
 8020488:	2b01      	cmp	r3, #1
 802048a:	d907      	bls.n	802049c <_fwalk_sglue+0x38>
 802048c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020490:	3301      	adds	r3, #1
 8020492:	d003      	beq.n	802049c <_fwalk_sglue+0x38>
 8020494:	4629      	mov	r1, r5
 8020496:	4638      	mov	r0, r7
 8020498:	47c0      	blx	r8
 802049a:	4306      	orrs	r6, r0
 802049c:	3568      	adds	r5, #104	@ 0x68
 802049e:	e7e9      	b.n	8020474 <_fwalk_sglue+0x10>

080204a0 <iprintf>:
 80204a0:	b40f      	push	{r0, r1, r2, r3}
 80204a2:	b507      	push	{r0, r1, r2, lr}
 80204a4:	4906      	ldr	r1, [pc, #24]	@ (80204c0 <iprintf+0x20>)
 80204a6:	ab04      	add	r3, sp, #16
 80204a8:	6808      	ldr	r0, [r1, #0]
 80204aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80204ae:	6881      	ldr	r1, [r0, #8]
 80204b0:	9301      	str	r3, [sp, #4]
 80204b2:	f002 f8db 	bl	802266c <_vfiprintf_r>
 80204b6:	b003      	add	sp, #12
 80204b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80204bc:	b004      	add	sp, #16
 80204be:	4770      	bx	lr
 80204c0:	2000012c 	.word	0x2000012c

080204c4 <_puts_r>:
 80204c4:	6a03      	ldr	r3, [r0, #32]
 80204c6:	b570      	push	{r4, r5, r6, lr}
 80204c8:	4605      	mov	r5, r0
 80204ca:	460e      	mov	r6, r1
 80204cc:	6884      	ldr	r4, [r0, #8]
 80204ce:	b90b      	cbnz	r3, 80204d4 <_puts_r+0x10>
 80204d0:	f7ff ffb0 	bl	8020434 <__sinit>
 80204d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80204d6:	07db      	lsls	r3, r3, #31
 80204d8:	d405      	bmi.n	80204e6 <_puts_r+0x22>
 80204da:	89a3      	ldrh	r3, [r4, #12]
 80204dc:	0598      	lsls	r0, r3, #22
 80204de:	d402      	bmi.n	80204e6 <_puts_r+0x22>
 80204e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80204e2:	f000 fa62 	bl	80209aa <__retarget_lock_acquire_recursive>
 80204e6:	89a3      	ldrh	r3, [r4, #12]
 80204e8:	0719      	lsls	r1, r3, #28
 80204ea:	d502      	bpl.n	80204f2 <_puts_r+0x2e>
 80204ec:	6923      	ldr	r3, [r4, #16]
 80204ee:	2b00      	cmp	r3, #0
 80204f0:	d135      	bne.n	802055e <_puts_r+0x9a>
 80204f2:	4621      	mov	r1, r4
 80204f4:	4628      	mov	r0, r5
 80204f6:	f000 f929 	bl	802074c <__swsetup_r>
 80204fa:	b380      	cbz	r0, 802055e <_puts_r+0x9a>
 80204fc:	f04f 35ff 	mov.w	r5, #4294967295
 8020500:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020502:	07da      	lsls	r2, r3, #31
 8020504:	d405      	bmi.n	8020512 <_puts_r+0x4e>
 8020506:	89a3      	ldrh	r3, [r4, #12]
 8020508:	059b      	lsls	r3, r3, #22
 802050a:	d402      	bmi.n	8020512 <_puts_r+0x4e>
 802050c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802050e:	f000 fa4d 	bl	80209ac <__retarget_lock_release_recursive>
 8020512:	4628      	mov	r0, r5
 8020514:	bd70      	pop	{r4, r5, r6, pc}
 8020516:	2b00      	cmp	r3, #0
 8020518:	da04      	bge.n	8020524 <_puts_r+0x60>
 802051a:	69a2      	ldr	r2, [r4, #24]
 802051c:	429a      	cmp	r2, r3
 802051e:	dc17      	bgt.n	8020550 <_puts_r+0x8c>
 8020520:	290a      	cmp	r1, #10
 8020522:	d015      	beq.n	8020550 <_puts_r+0x8c>
 8020524:	6823      	ldr	r3, [r4, #0]
 8020526:	1c5a      	adds	r2, r3, #1
 8020528:	6022      	str	r2, [r4, #0]
 802052a:	7019      	strb	r1, [r3, #0]
 802052c:	68a3      	ldr	r3, [r4, #8]
 802052e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8020532:	3b01      	subs	r3, #1
 8020534:	60a3      	str	r3, [r4, #8]
 8020536:	2900      	cmp	r1, #0
 8020538:	d1ed      	bne.n	8020516 <_puts_r+0x52>
 802053a:	2b00      	cmp	r3, #0
 802053c:	da11      	bge.n	8020562 <_puts_r+0x9e>
 802053e:	4622      	mov	r2, r4
 8020540:	210a      	movs	r1, #10
 8020542:	4628      	mov	r0, r5
 8020544:	f000 f8c3 	bl	80206ce <__swbuf_r>
 8020548:	3001      	adds	r0, #1
 802054a:	d0d7      	beq.n	80204fc <_puts_r+0x38>
 802054c:	250a      	movs	r5, #10
 802054e:	e7d7      	b.n	8020500 <_puts_r+0x3c>
 8020550:	4622      	mov	r2, r4
 8020552:	4628      	mov	r0, r5
 8020554:	f000 f8bb 	bl	80206ce <__swbuf_r>
 8020558:	3001      	adds	r0, #1
 802055a:	d1e7      	bne.n	802052c <_puts_r+0x68>
 802055c:	e7ce      	b.n	80204fc <_puts_r+0x38>
 802055e:	3e01      	subs	r6, #1
 8020560:	e7e4      	b.n	802052c <_puts_r+0x68>
 8020562:	6823      	ldr	r3, [r4, #0]
 8020564:	1c5a      	adds	r2, r3, #1
 8020566:	6022      	str	r2, [r4, #0]
 8020568:	220a      	movs	r2, #10
 802056a:	701a      	strb	r2, [r3, #0]
 802056c:	e7ee      	b.n	802054c <_puts_r+0x88>
	...

08020570 <puts>:
 8020570:	4b02      	ldr	r3, [pc, #8]	@ (802057c <puts+0xc>)
 8020572:	4601      	mov	r1, r0
 8020574:	6818      	ldr	r0, [r3, #0]
 8020576:	f7ff bfa5 	b.w	80204c4 <_puts_r>
 802057a:	bf00      	nop
 802057c:	2000012c 	.word	0x2000012c

08020580 <sniprintf>:
 8020580:	b40c      	push	{r2, r3}
 8020582:	b530      	push	{r4, r5, lr}
 8020584:	4b18      	ldr	r3, [pc, #96]	@ (80205e8 <sniprintf+0x68>)
 8020586:	1e0c      	subs	r4, r1, #0
 8020588:	681d      	ldr	r5, [r3, #0]
 802058a:	b09d      	sub	sp, #116	@ 0x74
 802058c:	da08      	bge.n	80205a0 <sniprintf+0x20>
 802058e:	238b      	movs	r3, #139	@ 0x8b
 8020590:	f04f 30ff 	mov.w	r0, #4294967295
 8020594:	602b      	str	r3, [r5, #0]
 8020596:	b01d      	add	sp, #116	@ 0x74
 8020598:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802059c:	b002      	add	sp, #8
 802059e:	4770      	bx	lr
 80205a0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80205a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80205a8:	f04f 0300 	mov.w	r3, #0
 80205ac:	931b      	str	r3, [sp, #108]	@ 0x6c
 80205ae:	bf0c      	ite	eq
 80205b0:	4623      	moveq	r3, r4
 80205b2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80205b6:	9304      	str	r3, [sp, #16]
 80205b8:	9307      	str	r3, [sp, #28]
 80205ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80205be:	9002      	str	r0, [sp, #8]
 80205c0:	9006      	str	r0, [sp, #24]
 80205c2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80205c6:	4628      	mov	r0, r5
 80205c8:	ab21      	add	r3, sp, #132	@ 0x84
 80205ca:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80205cc:	a902      	add	r1, sp, #8
 80205ce:	9301      	str	r3, [sp, #4]
 80205d0:	f001 fd5a 	bl	8022088 <_svfiprintf_r>
 80205d4:	1c43      	adds	r3, r0, #1
 80205d6:	bfbc      	itt	lt
 80205d8:	238b      	movlt	r3, #139	@ 0x8b
 80205da:	602b      	strlt	r3, [r5, #0]
 80205dc:	2c00      	cmp	r4, #0
 80205de:	d0da      	beq.n	8020596 <sniprintf+0x16>
 80205e0:	2200      	movs	r2, #0
 80205e2:	9b02      	ldr	r3, [sp, #8]
 80205e4:	701a      	strb	r2, [r3, #0]
 80205e6:	e7d6      	b.n	8020596 <sniprintf+0x16>
 80205e8:	2000012c 	.word	0x2000012c

080205ec <siscanf>:
 80205ec:	b40e      	push	{r1, r2, r3}
 80205ee:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80205f2:	b570      	push	{r4, r5, r6, lr}
 80205f4:	2500      	movs	r5, #0
 80205f6:	b09d      	sub	sp, #116	@ 0x74
 80205f8:	ac21      	add	r4, sp, #132	@ 0x84
 80205fa:	f854 6b04 	ldr.w	r6, [r4], #4
 80205fe:	f8ad 2014 	strh.w	r2, [sp, #20]
 8020602:	951b      	str	r5, [sp, #108]	@ 0x6c
 8020604:	9002      	str	r0, [sp, #8]
 8020606:	9006      	str	r0, [sp, #24]
 8020608:	f7df fde8 	bl	80001dc <strlen>
 802060c:	4b0b      	ldr	r3, [pc, #44]	@ (802063c <siscanf+0x50>)
 802060e:	9003      	str	r0, [sp, #12]
 8020610:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020612:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8020616:	9007      	str	r0, [sp, #28]
 8020618:	4809      	ldr	r0, [pc, #36]	@ (8020640 <siscanf+0x54>)
 802061a:	f8ad 3016 	strh.w	r3, [sp, #22]
 802061e:	4632      	mov	r2, r6
 8020620:	4623      	mov	r3, r4
 8020622:	a902      	add	r1, sp, #8
 8020624:	6800      	ldr	r0, [r0, #0]
 8020626:	950f      	str	r5, [sp, #60]	@ 0x3c
 8020628:	9514      	str	r5, [sp, #80]	@ 0x50
 802062a:	9401      	str	r4, [sp, #4]
 802062c:	f001 fe82 	bl	8022334 <__ssvfiscanf_r>
 8020630:	b01d      	add	sp, #116	@ 0x74
 8020632:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8020636:	b003      	add	sp, #12
 8020638:	4770      	bx	lr
 802063a:	bf00      	nop
 802063c:	08020667 	.word	0x08020667
 8020640:	2000012c 	.word	0x2000012c

08020644 <__sread>:
 8020644:	b510      	push	{r4, lr}
 8020646:	460c      	mov	r4, r1
 8020648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802064c:	f000 f95e 	bl	802090c <_read_r>
 8020650:	2800      	cmp	r0, #0
 8020652:	bfab      	itete	ge
 8020654:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8020656:	89a3      	ldrhlt	r3, [r4, #12]
 8020658:	181b      	addge	r3, r3, r0
 802065a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802065e:	bfac      	ite	ge
 8020660:	6563      	strge	r3, [r4, #84]	@ 0x54
 8020662:	81a3      	strhlt	r3, [r4, #12]
 8020664:	bd10      	pop	{r4, pc}

08020666 <__seofread>:
 8020666:	2000      	movs	r0, #0
 8020668:	4770      	bx	lr

0802066a <__swrite>:
 802066a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802066e:	461f      	mov	r7, r3
 8020670:	898b      	ldrh	r3, [r1, #12]
 8020672:	4605      	mov	r5, r0
 8020674:	05db      	lsls	r3, r3, #23
 8020676:	460c      	mov	r4, r1
 8020678:	4616      	mov	r6, r2
 802067a:	d505      	bpl.n	8020688 <__swrite+0x1e>
 802067c:	2302      	movs	r3, #2
 802067e:	2200      	movs	r2, #0
 8020680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020684:	f000 f930 	bl	80208e8 <_lseek_r>
 8020688:	89a3      	ldrh	r3, [r4, #12]
 802068a:	4632      	mov	r2, r6
 802068c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8020690:	81a3      	strh	r3, [r4, #12]
 8020692:	4628      	mov	r0, r5
 8020694:	463b      	mov	r3, r7
 8020696:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802069a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802069e:	f000 b947 	b.w	8020930 <_write_r>

080206a2 <__sseek>:
 80206a2:	b510      	push	{r4, lr}
 80206a4:	460c      	mov	r4, r1
 80206a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80206aa:	f000 f91d 	bl	80208e8 <_lseek_r>
 80206ae:	1c43      	adds	r3, r0, #1
 80206b0:	89a3      	ldrh	r3, [r4, #12]
 80206b2:	bf15      	itete	ne
 80206b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80206b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80206ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80206be:	81a3      	strheq	r3, [r4, #12]
 80206c0:	bf18      	it	ne
 80206c2:	81a3      	strhne	r3, [r4, #12]
 80206c4:	bd10      	pop	{r4, pc}

080206c6 <__sclose>:
 80206c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80206ca:	f000 b8fd 	b.w	80208c8 <_close_r>

080206ce <__swbuf_r>:
 80206ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80206d0:	460e      	mov	r6, r1
 80206d2:	4614      	mov	r4, r2
 80206d4:	4605      	mov	r5, r0
 80206d6:	b118      	cbz	r0, 80206e0 <__swbuf_r+0x12>
 80206d8:	6a03      	ldr	r3, [r0, #32]
 80206da:	b90b      	cbnz	r3, 80206e0 <__swbuf_r+0x12>
 80206dc:	f7ff feaa 	bl	8020434 <__sinit>
 80206e0:	69a3      	ldr	r3, [r4, #24]
 80206e2:	60a3      	str	r3, [r4, #8]
 80206e4:	89a3      	ldrh	r3, [r4, #12]
 80206e6:	071a      	lsls	r2, r3, #28
 80206e8:	d501      	bpl.n	80206ee <__swbuf_r+0x20>
 80206ea:	6923      	ldr	r3, [r4, #16]
 80206ec:	b943      	cbnz	r3, 8020700 <__swbuf_r+0x32>
 80206ee:	4621      	mov	r1, r4
 80206f0:	4628      	mov	r0, r5
 80206f2:	f000 f82b 	bl	802074c <__swsetup_r>
 80206f6:	b118      	cbz	r0, 8020700 <__swbuf_r+0x32>
 80206f8:	f04f 37ff 	mov.w	r7, #4294967295
 80206fc:	4638      	mov	r0, r7
 80206fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020700:	6823      	ldr	r3, [r4, #0]
 8020702:	6922      	ldr	r2, [r4, #16]
 8020704:	b2f6      	uxtb	r6, r6
 8020706:	1a98      	subs	r0, r3, r2
 8020708:	6963      	ldr	r3, [r4, #20]
 802070a:	4637      	mov	r7, r6
 802070c:	4283      	cmp	r3, r0
 802070e:	dc05      	bgt.n	802071c <__swbuf_r+0x4e>
 8020710:	4621      	mov	r1, r4
 8020712:	4628      	mov	r0, r5
 8020714:	f002 fa8e 	bl	8022c34 <_fflush_r>
 8020718:	2800      	cmp	r0, #0
 802071a:	d1ed      	bne.n	80206f8 <__swbuf_r+0x2a>
 802071c:	68a3      	ldr	r3, [r4, #8]
 802071e:	3b01      	subs	r3, #1
 8020720:	60a3      	str	r3, [r4, #8]
 8020722:	6823      	ldr	r3, [r4, #0]
 8020724:	1c5a      	adds	r2, r3, #1
 8020726:	6022      	str	r2, [r4, #0]
 8020728:	701e      	strb	r6, [r3, #0]
 802072a:	6962      	ldr	r2, [r4, #20]
 802072c:	1c43      	adds	r3, r0, #1
 802072e:	429a      	cmp	r2, r3
 8020730:	d004      	beq.n	802073c <__swbuf_r+0x6e>
 8020732:	89a3      	ldrh	r3, [r4, #12]
 8020734:	07db      	lsls	r3, r3, #31
 8020736:	d5e1      	bpl.n	80206fc <__swbuf_r+0x2e>
 8020738:	2e0a      	cmp	r6, #10
 802073a:	d1df      	bne.n	80206fc <__swbuf_r+0x2e>
 802073c:	4621      	mov	r1, r4
 802073e:	4628      	mov	r0, r5
 8020740:	f002 fa78 	bl	8022c34 <_fflush_r>
 8020744:	2800      	cmp	r0, #0
 8020746:	d0d9      	beq.n	80206fc <__swbuf_r+0x2e>
 8020748:	e7d6      	b.n	80206f8 <__swbuf_r+0x2a>
	...

0802074c <__swsetup_r>:
 802074c:	b538      	push	{r3, r4, r5, lr}
 802074e:	4b29      	ldr	r3, [pc, #164]	@ (80207f4 <__swsetup_r+0xa8>)
 8020750:	4605      	mov	r5, r0
 8020752:	6818      	ldr	r0, [r3, #0]
 8020754:	460c      	mov	r4, r1
 8020756:	b118      	cbz	r0, 8020760 <__swsetup_r+0x14>
 8020758:	6a03      	ldr	r3, [r0, #32]
 802075a:	b90b      	cbnz	r3, 8020760 <__swsetup_r+0x14>
 802075c:	f7ff fe6a 	bl	8020434 <__sinit>
 8020760:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020764:	0719      	lsls	r1, r3, #28
 8020766:	d422      	bmi.n	80207ae <__swsetup_r+0x62>
 8020768:	06da      	lsls	r2, r3, #27
 802076a:	d407      	bmi.n	802077c <__swsetup_r+0x30>
 802076c:	2209      	movs	r2, #9
 802076e:	602a      	str	r2, [r5, #0]
 8020770:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020774:	f04f 30ff 	mov.w	r0, #4294967295
 8020778:	81a3      	strh	r3, [r4, #12]
 802077a:	e033      	b.n	80207e4 <__swsetup_r+0x98>
 802077c:	0758      	lsls	r0, r3, #29
 802077e:	d512      	bpl.n	80207a6 <__swsetup_r+0x5a>
 8020780:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8020782:	b141      	cbz	r1, 8020796 <__swsetup_r+0x4a>
 8020784:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8020788:	4299      	cmp	r1, r3
 802078a:	d002      	beq.n	8020792 <__swsetup_r+0x46>
 802078c:	4628      	mov	r0, r5
 802078e:	f000 ffa7 	bl	80216e0 <_free_r>
 8020792:	2300      	movs	r3, #0
 8020794:	6363      	str	r3, [r4, #52]	@ 0x34
 8020796:	89a3      	ldrh	r3, [r4, #12]
 8020798:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802079c:	81a3      	strh	r3, [r4, #12]
 802079e:	2300      	movs	r3, #0
 80207a0:	6063      	str	r3, [r4, #4]
 80207a2:	6923      	ldr	r3, [r4, #16]
 80207a4:	6023      	str	r3, [r4, #0]
 80207a6:	89a3      	ldrh	r3, [r4, #12]
 80207a8:	f043 0308 	orr.w	r3, r3, #8
 80207ac:	81a3      	strh	r3, [r4, #12]
 80207ae:	6923      	ldr	r3, [r4, #16]
 80207b0:	b94b      	cbnz	r3, 80207c6 <__swsetup_r+0x7a>
 80207b2:	89a3      	ldrh	r3, [r4, #12]
 80207b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80207b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80207bc:	d003      	beq.n	80207c6 <__swsetup_r+0x7a>
 80207be:	4621      	mov	r1, r4
 80207c0:	4628      	mov	r0, r5
 80207c2:	f002 fa96 	bl	8022cf2 <__smakebuf_r>
 80207c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80207ca:	f013 0201 	ands.w	r2, r3, #1
 80207ce:	d00a      	beq.n	80207e6 <__swsetup_r+0x9a>
 80207d0:	2200      	movs	r2, #0
 80207d2:	60a2      	str	r2, [r4, #8]
 80207d4:	6962      	ldr	r2, [r4, #20]
 80207d6:	4252      	negs	r2, r2
 80207d8:	61a2      	str	r2, [r4, #24]
 80207da:	6922      	ldr	r2, [r4, #16]
 80207dc:	b942      	cbnz	r2, 80207f0 <__swsetup_r+0xa4>
 80207de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80207e2:	d1c5      	bne.n	8020770 <__swsetup_r+0x24>
 80207e4:	bd38      	pop	{r3, r4, r5, pc}
 80207e6:	0799      	lsls	r1, r3, #30
 80207e8:	bf58      	it	pl
 80207ea:	6962      	ldrpl	r2, [r4, #20]
 80207ec:	60a2      	str	r2, [r4, #8]
 80207ee:	e7f4      	b.n	80207da <__swsetup_r+0x8e>
 80207f0:	2000      	movs	r0, #0
 80207f2:	e7f7      	b.n	80207e4 <__swsetup_r+0x98>
 80207f4:	2000012c 	.word	0x2000012c

080207f8 <memcmp>:
 80207f8:	b510      	push	{r4, lr}
 80207fa:	3901      	subs	r1, #1
 80207fc:	4402      	add	r2, r0
 80207fe:	4290      	cmp	r0, r2
 8020800:	d101      	bne.n	8020806 <memcmp+0xe>
 8020802:	2000      	movs	r0, #0
 8020804:	e005      	b.n	8020812 <memcmp+0x1a>
 8020806:	7803      	ldrb	r3, [r0, #0]
 8020808:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802080c:	42a3      	cmp	r3, r4
 802080e:	d001      	beq.n	8020814 <memcmp+0x1c>
 8020810:	1b18      	subs	r0, r3, r4
 8020812:	bd10      	pop	{r4, pc}
 8020814:	3001      	adds	r0, #1
 8020816:	e7f2      	b.n	80207fe <memcmp+0x6>

08020818 <memmove>:
 8020818:	4288      	cmp	r0, r1
 802081a:	b510      	push	{r4, lr}
 802081c:	eb01 0402 	add.w	r4, r1, r2
 8020820:	d902      	bls.n	8020828 <memmove+0x10>
 8020822:	4284      	cmp	r4, r0
 8020824:	4623      	mov	r3, r4
 8020826:	d807      	bhi.n	8020838 <memmove+0x20>
 8020828:	1e43      	subs	r3, r0, #1
 802082a:	42a1      	cmp	r1, r4
 802082c:	d008      	beq.n	8020840 <memmove+0x28>
 802082e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020832:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020836:	e7f8      	b.n	802082a <memmove+0x12>
 8020838:	4601      	mov	r1, r0
 802083a:	4402      	add	r2, r0
 802083c:	428a      	cmp	r2, r1
 802083e:	d100      	bne.n	8020842 <memmove+0x2a>
 8020840:	bd10      	pop	{r4, pc}
 8020842:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8020846:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802084a:	e7f7      	b.n	802083c <memmove+0x24>

0802084c <memset>:
 802084c:	4603      	mov	r3, r0
 802084e:	4402      	add	r2, r0
 8020850:	4293      	cmp	r3, r2
 8020852:	d100      	bne.n	8020856 <memset+0xa>
 8020854:	4770      	bx	lr
 8020856:	f803 1b01 	strb.w	r1, [r3], #1
 802085a:	e7f9      	b.n	8020850 <memset+0x4>

0802085c <strchr>:
 802085c:	4603      	mov	r3, r0
 802085e:	b2c9      	uxtb	r1, r1
 8020860:	4618      	mov	r0, r3
 8020862:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020866:	b112      	cbz	r2, 802086e <strchr+0x12>
 8020868:	428a      	cmp	r2, r1
 802086a:	d1f9      	bne.n	8020860 <strchr+0x4>
 802086c:	4770      	bx	lr
 802086e:	2900      	cmp	r1, #0
 8020870:	bf18      	it	ne
 8020872:	2000      	movne	r0, #0
 8020874:	4770      	bx	lr

08020876 <strncmp>:
 8020876:	b510      	push	{r4, lr}
 8020878:	b16a      	cbz	r2, 8020896 <strncmp+0x20>
 802087a:	3901      	subs	r1, #1
 802087c:	1884      	adds	r4, r0, r2
 802087e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020882:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8020886:	429a      	cmp	r2, r3
 8020888:	d103      	bne.n	8020892 <strncmp+0x1c>
 802088a:	42a0      	cmp	r0, r4
 802088c:	d001      	beq.n	8020892 <strncmp+0x1c>
 802088e:	2a00      	cmp	r2, #0
 8020890:	d1f5      	bne.n	802087e <strncmp+0x8>
 8020892:	1ad0      	subs	r0, r2, r3
 8020894:	bd10      	pop	{r4, pc}
 8020896:	4610      	mov	r0, r2
 8020898:	e7fc      	b.n	8020894 <strncmp+0x1e>

0802089a <strncpy>:
 802089a:	4603      	mov	r3, r0
 802089c:	b510      	push	{r4, lr}
 802089e:	3901      	subs	r1, #1
 80208a0:	b132      	cbz	r2, 80208b0 <strncpy+0x16>
 80208a2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80208a6:	3a01      	subs	r2, #1
 80208a8:	f803 4b01 	strb.w	r4, [r3], #1
 80208ac:	2c00      	cmp	r4, #0
 80208ae:	d1f7      	bne.n	80208a0 <strncpy+0x6>
 80208b0:	2100      	movs	r1, #0
 80208b2:	441a      	add	r2, r3
 80208b4:	4293      	cmp	r3, r2
 80208b6:	d100      	bne.n	80208ba <strncpy+0x20>
 80208b8:	bd10      	pop	{r4, pc}
 80208ba:	f803 1b01 	strb.w	r1, [r3], #1
 80208be:	e7f9      	b.n	80208b4 <strncpy+0x1a>

080208c0 <_localeconv_r>:
 80208c0:	4800      	ldr	r0, [pc, #0]	@ (80208c4 <_localeconv_r+0x4>)
 80208c2:	4770      	bx	lr
 80208c4:	2000026c 	.word	0x2000026c

080208c8 <_close_r>:
 80208c8:	b538      	push	{r3, r4, r5, lr}
 80208ca:	2300      	movs	r3, #0
 80208cc:	4d05      	ldr	r5, [pc, #20]	@ (80208e4 <_close_r+0x1c>)
 80208ce:	4604      	mov	r4, r0
 80208d0:	4608      	mov	r0, r1
 80208d2:	602b      	str	r3, [r5, #0]
 80208d4:	f7e2 fccc 	bl	8003270 <_close>
 80208d8:	1c43      	adds	r3, r0, #1
 80208da:	d102      	bne.n	80208e2 <_close_r+0x1a>
 80208dc:	682b      	ldr	r3, [r5, #0]
 80208de:	b103      	cbz	r3, 80208e2 <_close_r+0x1a>
 80208e0:	6023      	str	r3, [r4, #0]
 80208e2:	bd38      	pop	{r3, r4, r5, pc}
 80208e4:	2000dff8 	.word	0x2000dff8

080208e8 <_lseek_r>:
 80208e8:	b538      	push	{r3, r4, r5, lr}
 80208ea:	4604      	mov	r4, r0
 80208ec:	4608      	mov	r0, r1
 80208ee:	4611      	mov	r1, r2
 80208f0:	2200      	movs	r2, #0
 80208f2:	4d05      	ldr	r5, [pc, #20]	@ (8020908 <_lseek_r+0x20>)
 80208f4:	602a      	str	r2, [r5, #0]
 80208f6:	461a      	mov	r2, r3
 80208f8:	f7e2 fcde 	bl	80032b8 <_lseek>
 80208fc:	1c43      	adds	r3, r0, #1
 80208fe:	d102      	bne.n	8020906 <_lseek_r+0x1e>
 8020900:	682b      	ldr	r3, [r5, #0]
 8020902:	b103      	cbz	r3, 8020906 <_lseek_r+0x1e>
 8020904:	6023      	str	r3, [r4, #0]
 8020906:	bd38      	pop	{r3, r4, r5, pc}
 8020908:	2000dff8 	.word	0x2000dff8

0802090c <_read_r>:
 802090c:	b538      	push	{r3, r4, r5, lr}
 802090e:	4604      	mov	r4, r0
 8020910:	4608      	mov	r0, r1
 8020912:	4611      	mov	r1, r2
 8020914:	2200      	movs	r2, #0
 8020916:	4d05      	ldr	r5, [pc, #20]	@ (802092c <_read_r+0x20>)
 8020918:	602a      	str	r2, [r5, #0]
 802091a:	461a      	mov	r2, r3
 802091c:	f7e2 fc6f 	bl	80031fe <_read>
 8020920:	1c43      	adds	r3, r0, #1
 8020922:	d102      	bne.n	802092a <_read_r+0x1e>
 8020924:	682b      	ldr	r3, [r5, #0]
 8020926:	b103      	cbz	r3, 802092a <_read_r+0x1e>
 8020928:	6023      	str	r3, [r4, #0]
 802092a:	bd38      	pop	{r3, r4, r5, pc}
 802092c:	2000dff8 	.word	0x2000dff8

08020930 <_write_r>:
 8020930:	b538      	push	{r3, r4, r5, lr}
 8020932:	4604      	mov	r4, r0
 8020934:	4608      	mov	r0, r1
 8020936:	4611      	mov	r1, r2
 8020938:	2200      	movs	r2, #0
 802093a:	4d05      	ldr	r5, [pc, #20]	@ (8020950 <_write_r+0x20>)
 802093c:	602a      	str	r2, [r5, #0]
 802093e:	461a      	mov	r2, r3
 8020940:	f7e2 fc7a 	bl	8003238 <_write>
 8020944:	1c43      	adds	r3, r0, #1
 8020946:	d102      	bne.n	802094e <_write_r+0x1e>
 8020948:	682b      	ldr	r3, [r5, #0]
 802094a:	b103      	cbz	r3, 802094e <_write_r+0x1e>
 802094c:	6023      	str	r3, [r4, #0]
 802094e:	bd38      	pop	{r3, r4, r5, pc}
 8020950:	2000dff8 	.word	0x2000dff8

08020954 <__errno>:
 8020954:	4b01      	ldr	r3, [pc, #4]	@ (802095c <__errno+0x8>)
 8020956:	6818      	ldr	r0, [r3, #0]
 8020958:	4770      	bx	lr
 802095a:	bf00      	nop
 802095c:	2000012c 	.word	0x2000012c

08020960 <__libc_init_array>:
 8020960:	b570      	push	{r4, r5, r6, lr}
 8020962:	2600      	movs	r6, #0
 8020964:	4d0c      	ldr	r5, [pc, #48]	@ (8020998 <__libc_init_array+0x38>)
 8020966:	4c0d      	ldr	r4, [pc, #52]	@ (802099c <__libc_init_array+0x3c>)
 8020968:	1b64      	subs	r4, r4, r5
 802096a:	10a4      	asrs	r4, r4, #2
 802096c:	42a6      	cmp	r6, r4
 802096e:	d109      	bne.n	8020984 <__libc_init_array+0x24>
 8020970:	f002 fc4e 	bl	8023210 <_init>
 8020974:	2600      	movs	r6, #0
 8020976:	4d0a      	ldr	r5, [pc, #40]	@ (80209a0 <__libc_init_array+0x40>)
 8020978:	4c0a      	ldr	r4, [pc, #40]	@ (80209a4 <__libc_init_array+0x44>)
 802097a:	1b64      	subs	r4, r4, r5
 802097c:	10a4      	asrs	r4, r4, #2
 802097e:	42a6      	cmp	r6, r4
 8020980:	d105      	bne.n	802098e <__libc_init_array+0x2e>
 8020982:	bd70      	pop	{r4, r5, r6, pc}
 8020984:	f855 3b04 	ldr.w	r3, [r5], #4
 8020988:	4798      	blx	r3
 802098a:	3601      	adds	r6, #1
 802098c:	e7ee      	b.n	802096c <__libc_init_array+0xc>
 802098e:	f855 3b04 	ldr.w	r3, [r5], #4
 8020992:	4798      	blx	r3
 8020994:	3601      	adds	r6, #1
 8020996:	e7f2      	b.n	802097e <__libc_init_array+0x1e>
 8020998:	0802f458 	.word	0x0802f458
 802099c:	0802f458 	.word	0x0802f458
 80209a0:	0802f458 	.word	0x0802f458
 80209a4:	0802f45c 	.word	0x0802f45c

080209a8 <__retarget_lock_init_recursive>:
 80209a8:	4770      	bx	lr

080209aa <__retarget_lock_acquire_recursive>:
 80209aa:	4770      	bx	lr

080209ac <__retarget_lock_release_recursive>:
 80209ac:	4770      	bx	lr

080209ae <memchr>:
 80209ae:	4603      	mov	r3, r0
 80209b0:	b510      	push	{r4, lr}
 80209b2:	b2c9      	uxtb	r1, r1
 80209b4:	4402      	add	r2, r0
 80209b6:	4293      	cmp	r3, r2
 80209b8:	4618      	mov	r0, r3
 80209ba:	d101      	bne.n	80209c0 <memchr+0x12>
 80209bc:	2000      	movs	r0, #0
 80209be:	e003      	b.n	80209c8 <memchr+0x1a>
 80209c0:	7804      	ldrb	r4, [r0, #0]
 80209c2:	3301      	adds	r3, #1
 80209c4:	428c      	cmp	r4, r1
 80209c6:	d1f6      	bne.n	80209b6 <memchr+0x8>
 80209c8:	bd10      	pop	{r4, pc}

080209ca <memcpy>:
 80209ca:	440a      	add	r2, r1
 80209cc:	4291      	cmp	r1, r2
 80209ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80209d2:	d100      	bne.n	80209d6 <memcpy+0xc>
 80209d4:	4770      	bx	lr
 80209d6:	b510      	push	{r4, lr}
 80209d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80209dc:	4291      	cmp	r1, r2
 80209de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80209e2:	d1f9      	bne.n	80209d8 <memcpy+0xe>
 80209e4:	bd10      	pop	{r4, pc}
	...

080209e8 <__assert_func>:
 80209e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80209ea:	4614      	mov	r4, r2
 80209ec:	461a      	mov	r2, r3
 80209ee:	4b09      	ldr	r3, [pc, #36]	@ (8020a14 <__assert_func+0x2c>)
 80209f0:	4605      	mov	r5, r0
 80209f2:	681b      	ldr	r3, [r3, #0]
 80209f4:	68d8      	ldr	r0, [r3, #12]
 80209f6:	b14c      	cbz	r4, 8020a0c <__assert_func+0x24>
 80209f8:	4b07      	ldr	r3, [pc, #28]	@ (8020a18 <__assert_func+0x30>)
 80209fa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80209fe:	9100      	str	r1, [sp, #0]
 8020a00:	462b      	mov	r3, r5
 8020a02:	4906      	ldr	r1, [pc, #24]	@ (8020a1c <__assert_func+0x34>)
 8020a04:	f002 f93e 	bl	8022c84 <fiprintf>
 8020a08:	f002 fa52 	bl	8022eb0 <abort>
 8020a0c:	4b04      	ldr	r3, [pc, #16]	@ (8020a20 <__assert_func+0x38>)
 8020a0e:	461c      	mov	r4, r3
 8020a10:	e7f3      	b.n	80209fa <__assert_func+0x12>
 8020a12:	bf00      	nop
 8020a14:	2000012c 	.word	0x2000012c
 8020a18:	0802f107 	.word	0x0802f107
 8020a1c:	0802f114 	.word	0x0802f114
 8020a20:	0802f142 	.word	0x0802f142

08020a24 <quorem>:
 8020a24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a28:	6903      	ldr	r3, [r0, #16]
 8020a2a:	690c      	ldr	r4, [r1, #16]
 8020a2c:	4607      	mov	r7, r0
 8020a2e:	42a3      	cmp	r3, r4
 8020a30:	db7e      	blt.n	8020b30 <quorem+0x10c>
 8020a32:	3c01      	subs	r4, #1
 8020a34:	00a3      	lsls	r3, r4, #2
 8020a36:	f100 0514 	add.w	r5, r0, #20
 8020a3a:	f101 0814 	add.w	r8, r1, #20
 8020a3e:	9300      	str	r3, [sp, #0]
 8020a40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020a44:	9301      	str	r3, [sp, #4]
 8020a46:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8020a4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020a4e:	3301      	adds	r3, #1
 8020a50:	429a      	cmp	r2, r3
 8020a52:	fbb2 f6f3 	udiv	r6, r2, r3
 8020a56:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8020a5a:	d32e      	bcc.n	8020aba <quorem+0x96>
 8020a5c:	f04f 0a00 	mov.w	sl, #0
 8020a60:	46c4      	mov	ip, r8
 8020a62:	46ae      	mov	lr, r5
 8020a64:	46d3      	mov	fp, sl
 8020a66:	f85c 3b04 	ldr.w	r3, [ip], #4
 8020a6a:	b298      	uxth	r0, r3
 8020a6c:	fb06 a000 	mla	r0, r6, r0, sl
 8020a70:	0c1b      	lsrs	r3, r3, #16
 8020a72:	0c02      	lsrs	r2, r0, #16
 8020a74:	fb06 2303 	mla	r3, r6, r3, r2
 8020a78:	f8de 2000 	ldr.w	r2, [lr]
 8020a7c:	b280      	uxth	r0, r0
 8020a7e:	b292      	uxth	r2, r2
 8020a80:	1a12      	subs	r2, r2, r0
 8020a82:	445a      	add	r2, fp
 8020a84:	f8de 0000 	ldr.w	r0, [lr]
 8020a88:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8020a8c:	b29b      	uxth	r3, r3
 8020a8e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8020a92:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8020a96:	b292      	uxth	r2, r2
 8020a98:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8020a9c:	45e1      	cmp	r9, ip
 8020a9e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8020aa2:	f84e 2b04 	str.w	r2, [lr], #4
 8020aa6:	d2de      	bcs.n	8020a66 <quorem+0x42>
 8020aa8:	9b00      	ldr	r3, [sp, #0]
 8020aaa:	58eb      	ldr	r3, [r5, r3]
 8020aac:	b92b      	cbnz	r3, 8020aba <quorem+0x96>
 8020aae:	9b01      	ldr	r3, [sp, #4]
 8020ab0:	3b04      	subs	r3, #4
 8020ab2:	429d      	cmp	r5, r3
 8020ab4:	461a      	mov	r2, r3
 8020ab6:	d32f      	bcc.n	8020b18 <quorem+0xf4>
 8020ab8:	613c      	str	r4, [r7, #16]
 8020aba:	4638      	mov	r0, r7
 8020abc:	f001 f980 	bl	8021dc0 <__mcmp>
 8020ac0:	2800      	cmp	r0, #0
 8020ac2:	db25      	blt.n	8020b10 <quorem+0xec>
 8020ac4:	4629      	mov	r1, r5
 8020ac6:	2000      	movs	r0, #0
 8020ac8:	f858 2b04 	ldr.w	r2, [r8], #4
 8020acc:	f8d1 c000 	ldr.w	ip, [r1]
 8020ad0:	fa1f fe82 	uxth.w	lr, r2
 8020ad4:	fa1f f38c 	uxth.w	r3, ip
 8020ad8:	eba3 030e 	sub.w	r3, r3, lr
 8020adc:	4403      	add	r3, r0
 8020ade:	0c12      	lsrs	r2, r2, #16
 8020ae0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8020ae4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8020ae8:	b29b      	uxth	r3, r3
 8020aea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020aee:	45c1      	cmp	r9, r8
 8020af0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8020af4:	f841 3b04 	str.w	r3, [r1], #4
 8020af8:	d2e6      	bcs.n	8020ac8 <quorem+0xa4>
 8020afa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020afe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020b02:	b922      	cbnz	r2, 8020b0e <quorem+0xea>
 8020b04:	3b04      	subs	r3, #4
 8020b06:	429d      	cmp	r5, r3
 8020b08:	461a      	mov	r2, r3
 8020b0a:	d30b      	bcc.n	8020b24 <quorem+0x100>
 8020b0c:	613c      	str	r4, [r7, #16]
 8020b0e:	3601      	adds	r6, #1
 8020b10:	4630      	mov	r0, r6
 8020b12:	b003      	add	sp, #12
 8020b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b18:	6812      	ldr	r2, [r2, #0]
 8020b1a:	3b04      	subs	r3, #4
 8020b1c:	2a00      	cmp	r2, #0
 8020b1e:	d1cb      	bne.n	8020ab8 <quorem+0x94>
 8020b20:	3c01      	subs	r4, #1
 8020b22:	e7c6      	b.n	8020ab2 <quorem+0x8e>
 8020b24:	6812      	ldr	r2, [r2, #0]
 8020b26:	3b04      	subs	r3, #4
 8020b28:	2a00      	cmp	r2, #0
 8020b2a:	d1ef      	bne.n	8020b0c <quorem+0xe8>
 8020b2c:	3c01      	subs	r4, #1
 8020b2e:	e7ea      	b.n	8020b06 <quorem+0xe2>
 8020b30:	2000      	movs	r0, #0
 8020b32:	e7ee      	b.n	8020b12 <quorem+0xee>
 8020b34:	0000      	movs	r0, r0
	...

08020b38 <_dtoa_r>:
 8020b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b3c:	4614      	mov	r4, r2
 8020b3e:	461d      	mov	r5, r3
 8020b40:	69c7      	ldr	r7, [r0, #28]
 8020b42:	b097      	sub	sp, #92	@ 0x5c
 8020b44:	4681      	mov	r9, r0
 8020b46:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8020b4a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8020b4c:	b97f      	cbnz	r7, 8020b6e <_dtoa_r+0x36>
 8020b4e:	2010      	movs	r0, #16
 8020b50:	f000 fe0e 	bl	8021770 <malloc>
 8020b54:	4602      	mov	r2, r0
 8020b56:	f8c9 001c 	str.w	r0, [r9, #28]
 8020b5a:	b920      	cbnz	r0, 8020b66 <_dtoa_r+0x2e>
 8020b5c:	21ef      	movs	r1, #239	@ 0xef
 8020b5e:	4bac      	ldr	r3, [pc, #688]	@ (8020e10 <_dtoa_r+0x2d8>)
 8020b60:	48ac      	ldr	r0, [pc, #688]	@ (8020e14 <_dtoa_r+0x2dc>)
 8020b62:	f7ff ff41 	bl	80209e8 <__assert_func>
 8020b66:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8020b6a:	6007      	str	r7, [r0, #0]
 8020b6c:	60c7      	str	r7, [r0, #12]
 8020b6e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8020b72:	6819      	ldr	r1, [r3, #0]
 8020b74:	b159      	cbz	r1, 8020b8e <_dtoa_r+0x56>
 8020b76:	685a      	ldr	r2, [r3, #4]
 8020b78:	2301      	movs	r3, #1
 8020b7a:	4093      	lsls	r3, r2
 8020b7c:	604a      	str	r2, [r1, #4]
 8020b7e:	608b      	str	r3, [r1, #8]
 8020b80:	4648      	mov	r0, r9
 8020b82:	f000 feeb 	bl	802195c <_Bfree>
 8020b86:	2200      	movs	r2, #0
 8020b88:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8020b8c:	601a      	str	r2, [r3, #0]
 8020b8e:	1e2b      	subs	r3, r5, #0
 8020b90:	bfaf      	iteee	ge
 8020b92:	2300      	movge	r3, #0
 8020b94:	2201      	movlt	r2, #1
 8020b96:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8020b9a:	9307      	strlt	r3, [sp, #28]
 8020b9c:	bfa8      	it	ge
 8020b9e:	6033      	strge	r3, [r6, #0]
 8020ba0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8020ba4:	4b9c      	ldr	r3, [pc, #624]	@ (8020e18 <_dtoa_r+0x2e0>)
 8020ba6:	bfb8      	it	lt
 8020ba8:	6032      	strlt	r2, [r6, #0]
 8020baa:	ea33 0308 	bics.w	r3, r3, r8
 8020bae:	d112      	bne.n	8020bd6 <_dtoa_r+0x9e>
 8020bb0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8020bb4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8020bb6:	6013      	str	r3, [r2, #0]
 8020bb8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8020bbc:	4323      	orrs	r3, r4
 8020bbe:	f000 855e 	beq.w	802167e <_dtoa_r+0xb46>
 8020bc2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020bc4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8020e1c <_dtoa_r+0x2e4>
 8020bc8:	2b00      	cmp	r3, #0
 8020bca:	f000 8560 	beq.w	802168e <_dtoa_r+0xb56>
 8020bce:	f10a 0303 	add.w	r3, sl, #3
 8020bd2:	f000 bd5a 	b.w	802168a <_dtoa_r+0xb52>
 8020bd6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8020bda:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8020bde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8020be2:	2200      	movs	r2, #0
 8020be4:	2300      	movs	r3, #0
 8020be6:	f7df ff25 	bl	8000a34 <__aeabi_dcmpeq>
 8020bea:	4607      	mov	r7, r0
 8020bec:	b158      	cbz	r0, 8020c06 <_dtoa_r+0xce>
 8020bee:	2301      	movs	r3, #1
 8020bf0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8020bf2:	6013      	str	r3, [r2, #0]
 8020bf4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020bf6:	b113      	cbz	r3, 8020bfe <_dtoa_r+0xc6>
 8020bf8:	4b89      	ldr	r3, [pc, #548]	@ (8020e20 <_dtoa_r+0x2e8>)
 8020bfa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8020bfc:	6013      	str	r3, [r2, #0]
 8020bfe:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8020e24 <_dtoa_r+0x2ec>
 8020c02:	f000 bd44 	b.w	802168e <_dtoa_r+0xb56>
 8020c06:	ab14      	add	r3, sp, #80	@ 0x50
 8020c08:	9301      	str	r3, [sp, #4]
 8020c0a:	ab15      	add	r3, sp, #84	@ 0x54
 8020c0c:	9300      	str	r3, [sp, #0]
 8020c0e:	4648      	mov	r0, r9
 8020c10:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8020c14:	f001 f984 	bl	8021f20 <__d2b>
 8020c18:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8020c1c:	9003      	str	r0, [sp, #12]
 8020c1e:	2e00      	cmp	r6, #0
 8020c20:	d078      	beq.n	8020d14 <_dtoa_r+0x1dc>
 8020c22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8020c26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020c28:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8020c2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8020c30:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8020c34:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8020c38:	9712      	str	r7, [sp, #72]	@ 0x48
 8020c3a:	4619      	mov	r1, r3
 8020c3c:	2200      	movs	r2, #0
 8020c3e:	4b7a      	ldr	r3, [pc, #488]	@ (8020e28 <_dtoa_r+0x2f0>)
 8020c40:	f7df fad8 	bl	80001f4 <__aeabi_dsub>
 8020c44:	a36c      	add	r3, pc, #432	@ (adr r3, 8020df8 <_dtoa_r+0x2c0>)
 8020c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c4a:	f7df fc8b 	bl	8000564 <__aeabi_dmul>
 8020c4e:	a36c      	add	r3, pc, #432	@ (adr r3, 8020e00 <_dtoa_r+0x2c8>)
 8020c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c54:	f7df fad0 	bl	80001f8 <__adddf3>
 8020c58:	4604      	mov	r4, r0
 8020c5a:	4630      	mov	r0, r6
 8020c5c:	460d      	mov	r5, r1
 8020c5e:	f7df fc17 	bl	8000490 <__aeabi_i2d>
 8020c62:	a369      	add	r3, pc, #420	@ (adr r3, 8020e08 <_dtoa_r+0x2d0>)
 8020c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c68:	f7df fc7c 	bl	8000564 <__aeabi_dmul>
 8020c6c:	4602      	mov	r2, r0
 8020c6e:	460b      	mov	r3, r1
 8020c70:	4620      	mov	r0, r4
 8020c72:	4629      	mov	r1, r5
 8020c74:	f7df fac0 	bl	80001f8 <__adddf3>
 8020c78:	4604      	mov	r4, r0
 8020c7a:	460d      	mov	r5, r1
 8020c7c:	f7df ff22 	bl	8000ac4 <__aeabi_d2iz>
 8020c80:	2200      	movs	r2, #0
 8020c82:	4607      	mov	r7, r0
 8020c84:	2300      	movs	r3, #0
 8020c86:	4620      	mov	r0, r4
 8020c88:	4629      	mov	r1, r5
 8020c8a:	f7df fedd 	bl	8000a48 <__aeabi_dcmplt>
 8020c8e:	b140      	cbz	r0, 8020ca2 <_dtoa_r+0x16a>
 8020c90:	4638      	mov	r0, r7
 8020c92:	f7df fbfd 	bl	8000490 <__aeabi_i2d>
 8020c96:	4622      	mov	r2, r4
 8020c98:	462b      	mov	r3, r5
 8020c9a:	f7df fecb 	bl	8000a34 <__aeabi_dcmpeq>
 8020c9e:	b900      	cbnz	r0, 8020ca2 <_dtoa_r+0x16a>
 8020ca0:	3f01      	subs	r7, #1
 8020ca2:	2f16      	cmp	r7, #22
 8020ca4:	d854      	bhi.n	8020d50 <_dtoa_r+0x218>
 8020ca6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8020caa:	4b60      	ldr	r3, [pc, #384]	@ (8020e2c <_dtoa_r+0x2f4>)
 8020cac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8020cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020cb4:	f7df fec8 	bl	8000a48 <__aeabi_dcmplt>
 8020cb8:	2800      	cmp	r0, #0
 8020cba:	d04b      	beq.n	8020d54 <_dtoa_r+0x21c>
 8020cbc:	2300      	movs	r3, #0
 8020cbe:	3f01      	subs	r7, #1
 8020cc0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020cc2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020cc4:	1b9b      	subs	r3, r3, r6
 8020cc6:	1e5a      	subs	r2, r3, #1
 8020cc8:	bf49      	itett	mi
 8020cca:	f1c3 0301 	rsbmi	r3, r3, #1
 8020cce:	2300      	movpl	r3, #0
 8020cd0:	9304      	strmi	r3, [sp, #16]
 8020cd2:	2300      	movmi	r3, #0
 8020cd4:	9209      	str	r2, [sp, #36]	@ 0x24
 8020cd6:	bf54      	ite	pl
 8020cd8:	9304      	strpl	r3, [sp, #16]
 8020cda:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8020cdc:	2f00      	cmp	r7, #0
 8020cde:	db3b      	blt.n	8020d58 <_dtoa_r+0x220>
 8020ce0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020ce2:	970e      	str	r7, [sp, #56]	@ 0x38
 8020ce4:	443b      	add	r3, r7
 8020ce6:	9309      	str	r3, [sp, #36]	@ 0x24
 8020ce8:	2300      	movs	r3, #0
 8020cea:	930a      	str	r3, [sp, #40]	@ 0x28
 8020cec:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8020cee:	2b09      	cmp	r3, #9
 8020cf0:	d865      	bhi.n	8020dbe <_dtoa_r+0x286>
 8020cf2:	2b05      	cmp	r3, #5
 8020cf4:	bfc4      	itt	gt
 8020cf6:	3b04      	subgt	r3, #4
 8020cf8:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8020cfa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8020cfc:	bfc8      	it	gt
 8020cfe:	2400      	movgt	r4, #0
 8020d00:	f1a3 0302 	sub.w	r3, r3, #2
 8020d04:	bfd8      	it	le
 8020d06:	2401      	movle	r4, #1
 8020d08:	2b03      	cmp	r3, #3
 8020d0a:	d864      	bhi.n	8020dd6 <_dtoa_r+0x29e>
 8020d0c:	e8df f003 	tbb	[pc, r3]
 8020d10:	2c385553 	.word	0x2c385553
 8020d14:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8020d18:	441e      	add	r6, r3
 8020d1a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8020d1e:	2b20      	cmp	r3, #32
 8020d20:	bfc1      	itttt	gt
 8020d22:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8020d26:	fa08 f803 	lslgt.w	r8, r8, r3
 8020d2a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8020d2e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8020d32:	bfd6      	itet	le
 8020d34:	f1c3 0320 	rsble	r3, r3, #32
 8020d38:	ea48 0003 	orrgt.w	r0, r8, r3
 8020d3c:	fa04 f003 	lslle.w	r0, r4, r3
 8020d40:	f7df fb96 	bl	8000470 <__aeabi_ui2d>
 8020d44:	2201      	movs	r2, #1
 8020d46:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8020d4a:	3e01      	subs	r6, #1
 8020d4c:	9212      	str	r2, [sp, #72]	@ 0x48
 8020d4e:	e774      	b.n	8020c3a <_dtoa_r+0x102>
 8020d50:	2301      	movs	r3, #1
 8020d52:	e7b5      	b.n	8020cc0 <_dtoa_r+0x188>
 8020d54:	900f      	str	r0, [sp, #60]	@ 0x3c
 8020d56:	e7b4      	b.n	8020cc2 <_dtoa_r+0x18a>
 8020d58:	9b04      	ldr	r3, [sp, #16]
 8020d5a:	1bdb      	subs	r3, r3, r7
 8020d5c:	9304      	str	r3, [sp, #16]
 8020d5e:	427b      	negs	r3, r7
 8020d60:	930a      	str	r3, [sp, #40]	@ 0x28
 8020d62:	2300      	movs	r3, #0
 8020d64:	930e      	str	r3, [sp, #56]	@ 0x38
 8020d66:	e7c1      	b.n	8020cec <_dtoa_r+0x1b4>
 8020d68:	2301      	movs	r3, #1
 8020d6a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020d6c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8020d6e:	eb07 0b03 	add.w	fp, r7, r3
 8020d72:	f10b 0301 	add.w	r3, fp, #1
 8020d76:	2b01      	cmp	r3, #1
 8020d78:	9308      	str	r3, [sp, #32]
 8020d7a:	bfb8      	it	lt
 8020d7c:	2301      	movlt	r3, #1
 8020d7e:	e006      	b.n	8020d8e <_dtoa_r+0x256>
 8020d80:	2301      	movs	r3, #1
 8020d82:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020d84:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8020d86:	2b00      	cmp	r3, #0
 8020d88:	dd28      	ble.n	8020ddc <_dtoa_r+0x2a4>
 8020d8a:	469b      	mov	fp, r3
 8020d8c:	9308      	str	r3, [sp, #32]
 8020d8e:	2100      	movs	r1, #0
 8020d90:	2204      	movs	r2, #4
 8020d92:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8020d96:	f102 0514 	add.w	r5, r2, #20
 8020d9a:	429d      	cmp	r5, r3
 8020d9c:	d926      	bls.n	8020dec <_dtoa_r+0x2b4>
 8020d9e:	6041      	str	r1, [r0, #4]
 8020da0:	4648      	mov	r0, r9
 8020da2:	f000 fd9b 	bl	80218dc <_Balloc>
 8020da6:	4682      	mov	sl, r0
 8020da8:	2800      	cmp	r0, #0
 8020daa:	d143      	bne.n	8020e34 <_dtoa_r+0x2fc>
 8020dac:	4602      	mov	r2, r0
 8020dae:	f240 11af 	movw	r1, #431	@ 0x1af
 8020db2:	4b1f      	ldr	r3, [pc, #124]	@ (8020e30 <_dtoa_r+0x2f8>)
 8020db4:	e6d4      	b.n	8020b60 <_dtoa_r+0x28>
 8020db6:	2300      	movs	r3, #0
 8020db8:	e7e3      	b.n	8020d82 <_dtoa_r+0x24a>
 8020dba:	2300      	movs	r3, #0
 8020dbc:	e7d5      	b.n	8020d6a <_dtoa_r+0x232>
 8020dbe:	2401      	movs	r4, #1
 8020dc0:	2300      	movs	r3, #0
 8020dc2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8020dc4:	9320      	str	r3, [sp, #128]	@ 0x80
 8020dc6:	f04f 3bff 	mov.w	fp, #4294967295
 8020dca:	2200      	movs	r2, #0
 8020dcc:	2312      	movs	r3, #18
 8020dce:	f8cd b020 	str.w	fp, [sp, #32]
 8020dd2:	9221      	str	r2, [sp, #132]	@ 0x84
 8020dd4:	e7db      	b.n	8020d8e <_dtoa_r+0x256>
 8020dd6:	2301      	movs	r3, #1
 8020dd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020dda:	e7f4      	b.n	8020dc6 <_dtoa_r+0x28e>
 8020ddc:	f04f 0b01 	mov.w	fp, #1
 8020de0:	465b      	mov	r3, fp
 8020de2:	f8cd b020 	str.w	fp, [sp, #32]
 8020de6:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8020dea:	e7d0      	b.n	8020d8e <_dtoa_r+0x256>
 8020dec:	3101      	adds	r1, #1
 8020dee:	0052      	lsls	r2, r2, #1
 8020df0:	e7d1      	b.n	8020d96 <_dtoa_r+0x25e>
 8020df2:	bf00      	nop
 8020df4:	f3af 8000 	nop.w
 8020df8:	636f4361 	.word	0x636f4361
 8020dfc:	3fd287a7 	.word	0x3fd287a7
 8020e00:	8b60c8b3 	.word	0x8b60c8b3
 8020e04:	3fc68a28 	.word	0x3fc68a28
 8020e08:	509f79fb 	.word	0x509f79fb
 8020e0c:	3fd34413 	.word	0x3fd34413
 8020e10:	0802f066 	.word	0x0802f066
 8020e14:	0802f150 	.word	0x0802f150
 8020e18:	7ff00000 	.word	0x7ff00000
 8020e1c:	0802f14c 	.word	0x0802f14c
 8020e20:	0802f23a 	.word	0x0802f23a
 8020e24:	0802f239 	.word	0x0802f239
 8020e28:	3ff80000 	.word	0x3ff80000
 8020e2c:	0802f380 	.word	0x0802f380
 8020e30:	0802f1a8 	.word	0x0802f1a8
 8020e34:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8020e38:	6018      	str	r0, [r3, #0]
 8020e3a:	9b08      	ldr	r3, [sp, #32]
 8020e3c:	2b0e      	cmp	r3, #14
 8020e3e:	f200 80a1 	bhi.w	8020f84 <_dtoa_r+0x44c>
 8020e42:	2c00      	cmp	r4, #0
 8020e44:	f000 809e 	beq.w	8020f84 <_dtoa_r+0x44c>
 8020e48:	2f00      	cmp	r7, #0
 8020e4a:	dd33      	ble.n	8020eb4 <_dtoa_r+0x37c>
 8020e4c:	4b9c      	ldr	r3, [pc, #624]	@ (80210c0 <_dtoa_r+0x588>)
 8020e4e:	f007 020f 	and.w	r2, r7, #15
 8020e52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020e56:	05f8      	lsls	r0, r7, #23
 8020e58:	e9d3 3400 	ldrd	r3, r4, [r3]
 8020e5c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8020e60:	ea4f 1427 	mov.w	r4, r7, asr #4
 8020e64:	d516      	bpl.n	8020e94 <_dtoa_r+0x35c>
 8020e66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8020e6a:	4b96      	ldr	r3, [pc, #600]	@ (80210c4 <_dtoa_r+0x58c>)
 8020e6c:	2603      	movs	r6, #3
 8020e6e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8020e72:	f7df fca1 	bl	80007b8 <__aeabi_ddiv>
 8020e76:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8020e7a:	f004 040f 	and.w	r4, r4, #15
 8020e7e:	4d91      	ldr	r5, [pc, #580]	@ (80210c4 <_dtoa_r+0x58c>)
 8020e80:	b954      	cbnz	r4, 8020e98 <_dtoa_r+0x360>
 8020e82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8020e86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8020e8a:	f7df fc95 	bl	80007b8 <__aeabi_ddiv>
 8020e8e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8020e92:	e028      	b.n	8020ee6 <_dtoa_r+0x3ae>
 8020e94:	2602      	movs	r6, #2
 8020e96:	e7f2      	b.n	8020e7e <_dtoa_r+0x346>
 8020e98:	07e1      	lsls	r1, r4, #31
 8020e9a:	d508      	bpl.n	8020eae <_dtoa_r+0x376>
 8020e9c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8020ea0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8020ea4:	f7df fb5e 	bl	8000564 <__aeabi_dmul>
 8020ea8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8020eac:	3601      	adds	r6, #1
 8020eae:	1064      	asrs	r4, r4, #1
 8020eb0:	3508      	adds	r5, #8
 8020eb2:	e7e5      	b.n	8020e80 <_dtoa_r+0x348>
 8020eb4:	f000 80af 	beq.w	8021016 <_dtoa_r+0x4de>
 8020eb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8020ebc:	427c      	negs	r4, r7
 8020ebe:	4b80      	ldr	r3, [pc, #512]	@ (80210c0 <_dtoa_r+0x588>)
 8020ec0:	f004 020f 	and.w	r2, r4, #15
 8020ec4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ecc:	f7df fb4a 	bl	8000564 <__aeabi_dmul>
 8020ed0:	2602      	movs	r6, #2
 8020ed2:	2300      	movs	r3, #0
 8020ed4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8020ed8:	4d7a      	ldr	r5, [pc, #488]	@ (80210c4 <_dtoa_r+0x58c>)
 8020eda:	1124      	asrs	r4, r4, #4
 8020edc:	2c00      	cmp	r4, #0
 8020ede:	f040 808f 	bne.w	8021000 <_dtoa_r+0x4c8>
 8020ee2:	2b00      	cmp	r3, #0
 8020ee4:	d1d3      	bne.n	8020e8e <_dtoa_r+0x356>
 8020ee6:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8020eea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020eec:	2b00      	cmp	r3, #0
 8020eee:	f000 8094 	beq.w	802101a <_dtoa_r+0x4e2>
 8020ef2:	2200      	movs	r2, #0
 8020ef4:	4620      	mov	r0, r4
 8020ef6:	4629      	mov	r1, r5
 8020ef8:	4b73      	ldr	r3, [pc, #460]	@ (80210c8 <_dtoa_r+0x590>)
 8020efa:	f7df fda5 	bl	8000a48 <__aeabi_dcmplt>
 8020efe:	2800      	cmp	r0, #0
 8020f00:	f000 808b 	beq.w	802101a <_dtoa_r+0x4e2>
 8020f04:	9b08      	ldr	r3, [sp, #32]
 8020f06:	2b00      	cmp	r3, #0
 8020f08:	f000 8087 	beq.w	802101a <_dtoa_r+0x4e2>
 8020f0c:	f1bb 0f00 	cmp.w	fp, #0
 8020f10:	dd34      	ble.n	8020f7c <_dtoa_r+0x444>
 8020f12:	4620      	mov	r0, r4
 8020f14:	2200      	movs	r2, #0
 8020f16:	4629      	mov	r1, r5
 8020f18:	4b6c      	ldr	r3, [pc, #432]	@ (80210cc <_dtoa_r+0x594>)
 8020f1a:	f7df fb23 	bl	8000564 <__aeabi_dmul>
 8020f1e:	465c      	mov	r4, fp
 8020f20:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8020f24:	f107 38ff 	add.w	r8, r7, #4294967295
 8020f28:	3601      	adds	r6, #1
 8020f2a:	4630      	mov	r0, r6
 8020f2c:	f7df fab0 	bl	8000490 <__aeabi_i2d>
 8020f30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8020f34:	f7df fb16 	bl	8000564 <__aeabi_dmul>
 8020f38:	2200      	movs	r2, #0
 8020f3a:	4b65      	ldr	r3, [pc, #404]	@ (80210d0 <_dtoa_r+0x598>)
 8020f3c:	f7df f95c 	bl	80001f8 <__adddf3>
 8020f40:	4605      	mov	r5, r0
 8020f42:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8020f46:	2c00      	cmp	r4, #0
 8020f48:	d16a      	bne.n	8021020 <_dtoa_r+0x4e8>
 8020f4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8020f4e:	2200      	movs	r2, #0
 8020f50:	4b60      	ldr	r3, [pc, #384]	@ (80210d4 <_dtoa_r+0x59c>)
 8020f52:	f7df f94f 	bl	80001f4 <__aeabi_dsub>
 8020f56:	4602      	mov	r2, r0
 8020f58:	460b      	mov	r3, r1
 8020f5a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8020f5e:	462a      	mov	r2, r5
 8020f60:	4633      	mov	r3, r6
 8020f62:	f7df fd8f 	bl	8000a84 <__aeabi_dcmpgt>
 8020f66:	2800      	cmp	r0, #0
 8020f68:	f040 8298 	bne.w	802149c <_dtoa_r+0x964>
 8020f6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8020f70:	462a      	mov	r2, r5
 8020f72:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8020f76:	f7df fd67 	bl	8000a48 <__aeabi_dcmplt>
 8020f7a:	bb38      	cbnz	r0, 8020fcc <_dtoa_r+0x494>
 8020f7c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8020f80:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8020f84:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020f86:	2b00      	cmp	r3, #0
 8020f88:	f2c0 8157 	blt.w	802123a <_dtoa_r+0x702>
 8020f8c:	2f0e      	cmp	r7, #14
 8020f8e:	f300 8154 	bgt.w	802123a <_dtoa_r+0x702>
 8020f92:	4b4b      	ldr	r3, [pc, #300]	@ (80210c0 <_dtoa_r+0x588>)
 8020f94:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8020f98:	e9d3 3400 	ldrd	r3, r4, [r3]
 8020f9c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8020fa0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8020fa2:	2b00      	cmp	r3, #0
 8020fa4:	f280 80e5 	bge.w	8021172 <_dtoa_r+0x63a>
 8020fa8:	9b08      	ldr	r3, [sp, #32]
 8020faa:	2b00      	cmp	r3, #0
 8020fac:	f300 80e1 	bgt.w	8021172 <_dtoa_r+0x63a>
 8020fb0:	d10c      	bne.n	8020fcc <_dtoa_r+0x494>
 8020fb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8020fb6:	2200      	movs	r2, #0
 8020fb8:	4b46      	ldr	r3, [pc, #280]	@ (80210d4 <_dtoa_r+0x59c>)
 8020fba:	f7df fad3 	bl	8000564 <__aeabi_dmul>
 8020fbe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8020fc2:	f7df fd55 	bl	8000a70 <__aeabi_dcmpge>
 8020fc6:	2800      	cmp	r0, #0
 8020fc8:	f000 8266 	beq.w	8021498 <_dtoa_r+0x960>
 8020fcc:	2400      	movs	r4, #0
 8020fce:	4625      	mov	r5, r4
 8020fd0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8020fd2:	4656      	mov	r6, sl
 8020fd4:	ea6f 0803 	mvn.w	r8, r3
 8020fd8:	2700      	movs	r7, #0
 8020fda:	4621      	mov	r1, r4
 8020fdc:	4648      	mov	r0, r9
 8020fde:	f000 fcbd 	bl	802195c <_Bfree>
 8020fe2:	2d00      	cmp	r5, #0
 8020fe4:	f000 80bd 	beq.w	8021162 <_dtoa_r+0x62a>
 8020fe8:	b12f      	cbz	r7, 8020ff6 <_dtoa_r+0x4be>
 8020fea:	42af      	cmp	r7, r5
 8020fec:	d003      	beq.n	8020ff6 <_dtoa_r+0x4be>
 8020fee:	4639      	mov	r1, r7
 8020ff0:	4648      	mov	r0, r9
 8020ff2:	f000 fcb3 	bl	802195c <_Bfree>
 8020ff6:	4629      	mov	r1, r5
 8020ff8:	4648      	mov	r0, r9
 8020ffa:	f000 fcaf 	bl	802195c <_Bfree>
 8020ffe:	e0b0      	b.n	8021162 <_dtoa_r+0x62a>
 8021000:	07e2      	lsls	r2, r4, #31
 8021002:	d505      	bpl.n	8021010 <_dtoa_r+0x4d8>
 8021004:	e9d5 2300 	ldrd	r2, r3, [r5]
 8021008:	f7df faac 	bl	8000564 <__aeabi_dmul>
 802100c:	2301      	movs	r3, #1
 802100e:	3601      	adds	r6, #1
 8021010:	1064      	asrs	r4, r4, #1
 8021012:	3508      	adds	r5, #8
 8021014:	e762      	b.n	8020edc <_dtoa_r+0x3a4>
 8021016:	2602      	movs	r6, #2
 8021018:	e765      	b.n	8020ee6 <_dtoa_r+0x3ae>
 802101a:	46b8      	mov	r8, r7
 802101c:	9c08      	ldr	r4, [sp, #32]
 802101e:	e784      	b.n	8020f2a <_dtoa_r+0x3f2>
 8021020:	4b27      	ldr	r3, [pc, #156]	@ (80210c0 <_dtoa_r+0x588>)
 8021022:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8021024:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8021028:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802102c:	4454      	add	r4, sl
 802102e:	2900      	cmp	r1, #0
 8021030:	d054      	beq.n	80210dc <_dtoa_r+0x5a4>
 8021032:	2000      	movs	r0, #0
 8021034:	4928      	ldr	r1, [pc, #160]	@ (80210d8 <_dtoa_r+0x5a0>)
 8021036:	f7df fbbf 	bl	80007b8 <__aeabi_ddiv>
 802103a:	4633      	mov	r3, r6
 802103c:	462a      	mov	r2, r5
 802103e:	f7df f8d9 	bl	80001f4 <__aeabi_dsub>
 8021042:	4656      	mov	r6, sl
 8021044:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8021048:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802104c:	f7df fd3a 	bl	8000ac4 <__aeabi_d2iz>
 8021050:	4605      	mov	r5, r0
 8021052:	f7df fa1d 	bl	8000490 <__aeabi_i2d>
 8021056:	4602      	mov	r2, r0
 8021058:	460b      	mov	r3, r1
 802105a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802105e:	f7df f8c9 	bl	80001f4 <__aeabi_dsub>
 8021062:	4602      	mov	r2, r0
 8021064:	460b      	mov	r3, r1
 8021066:	3530      	adds	r5, #48	@ 0x30
 8021068:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802106c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8021070:	f806 5b01 	strb.w	r5, [r6], #1
 8021074:	f7df fce8 	bl	8000a48 <__aeabi_dcmplt>
 8021078:	2800      	cmp	r0, #0
 802107a:	d172      	bne.n	8021162 <_dtoa_r+0x62a>
 802107c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8021080:	2000      	movs	r0, #0
 8021082:	4911      	ldr	r1, [pc, #68]	@ (80210c8 <_dtoa_r+0x590>)
 8021084:	f7df f8b6 	bl	80001f4 <__aeabi_dsub>
 8021088:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802108c:	f7df fcdc 	bl	8000a48 <__aeabi_dcmplt>
 8021090:	2800      	cmp	r0, #0
 8021092:	f040 80b4 	bne.w	80211fe <_dtoa_r+0x6c6>
 8021096:	42a6      	cmp	r6, r4
 8021098:	f43f af70 	beq.w	8020f7c <_dtoa_r+0x444>
 802109c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80210a0:	2200      	movs	r2, #0
 80210a2:	4b0a      	ldr	r3, [pc, #40]	@ (80210cc <_dtoa_r+0x594>)
 80210a4:	f7df fa5e 	bl	8000564 <__aeabi_dmul>
 80210a8:	2200      	movs	r2, #0
 80210aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80210ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80210b2:	4b06      	ldr	r3, [pc, #24]	@ (80210cc <_dtoa_r+0x594>)
 80210b4:	f7df fa56 	bl	8000564 <__aeabi_dmul>
 80210b8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80210bc:	e7c4      	b.n	8021048 <_dtoa_r+0x510>
 80210be:	bf00      	nop
 80210c0:	0802f380 	.word	0x0802f380
 80210c4:	0802f358 	.word	0x0802f358
 80210c8:	3ff00000 	.word	0x3ff00000
 80210cc:	40240000 	.word	0x40240000
 80210d0:	401c0000 	.word	0x401c0000
 80210d4:	40140000 	.word	0x40140000
 80210d8:	3fe00000 	.word	0x3fe00000
 80210dc:	4631      	mov	r1, r6
 80210de:	4628      	mov	r0, r5
 80210e0:	f7df fa40 	bl	8000564 <__aeabi_dmul>
 80210e4:	4656      	mov	r6, sl
 80210e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80210ea:	9413      	str	r4, [sp, #76]	@ 0x4c
 80210ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80210f0:	f7df fce8 	bl	8000ac4 <__aeabi_d2iz>
 80210f4:	4605      	mov	r5, r0
 80210f6:	f7df f9cb 	bl	8000490 <__aeabi_i2d>
 80210fa:	4602      	mov	r2, r0
 80210fc:	460b      	mov	r3, r1
 80210fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8021102:	f7df f877 	bl	80001f4 <__aeabi_dsub>
 8021106:	4602      	mov	r2, r0
 8021108:	460b      	mov	r3, r1
 802110a:	3530      	adds	r5, #48	@ 0x30
 802110c:	f806 5b01 	strb.w	r5, [r6], #1
 8021110:	42a6      	cmp	r6, r4
 8021112:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8021116:	f04f 0200 	mov.w	r2, #0
 802111a:	d124      	bne.n	8021166 <_dtoa_r+0x62e>
 802111c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8021120:	4bae      	ldr	r3, [pc, #696]	@ (80213dc <_dtoa_r+0x8a4>)
 8021122:	f7df f869 	bl	80001f8 <__adddf3>
 8021126:	4602      	mov	r2, r0
 8021128:	460b      	mov	r3, r1
 802112a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802112e:	f7df fca9 	bl	8000a84 <__aeabi_dcmpgt>
 8021132:	2800      	cmp	r0, #0
 8021134:	d163      	bne.n	80211fe <_dtoa_r+0x6c6>
 8021136:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802113a:	2000      	movs	r0, #0
 802113c:	49a7      	ldr	r1, [pc, #668]	@ (80213dc <_dtoa_r+0x8a4>)
 802113e:	f7df f859 	bl	80001f4 <__aeabi_dsub>
 8021142:	4602      	mov	r2, r0
 8021144:	460b      	mov	r3, r1
 8021146:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802114a:	f7df fc7d 	bl	8000a48 <__aeabi_dcmplt>
 802114e:	2800      	cmp	r0, #0
 8021150:	f43f af14 	beq.w	8020f7c <_dtoa_r+0x444>
 8021154:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8021156:	1e73      	subs	r3, r6, #1
 8021158:	9313      	str	r3, [sp, #76]	@ 0x4c
 802115a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 802115e:	2b30      	cmp	r3, #48	@ 0x30
 8021160:	d0f8      	beq.n	8021154 <_dtoa_r+0x61c>
 8021162:	4647      	mov	r7, r8
 8021164:	e03b      	b.n	80211de <_dtoa_r+0x6a6>
 8021166:	4b9e      	ldr	r3, [pc, #632]	@ (80213e0 <_dtoa_r+0x8a8>)
 8021168:	f7df f9fc 	bl	8000564 <__aeabi_dmul>
 802116c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8021170:	e7bc      	b.n	80210ec <_dtoa_r+0x5b4>
 8021172:	4656      	mov	r6, sl
 8021174:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8021178:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802117c:	4620      	mov	r0, r4
 802117e:	4629      	mov	r1, r5
 8021180:	f7df fb1a 	bl	80007b8 <__aeabi_ddiv>
 8021184:	f7df fc9e 	bl	8000ac4 <__aeabi_d2iz>
 8021188:	4680      	mov	r8, r0
 802118a:	f7df f981 	bl	8000490 <__aeabi_i2d>
 802118e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8021192:	f7df f9e7 	bl	8000564 <__aeabi_dmul>
 8021196:	4602      	mov	r2, r0
 8021198:	460b      	mov	r3, r1
 802119a:	4620      	mov	r0, r4
 802119c:	4629      	mov	r1, r5
 802119e:	f7df f829 	bl	80001f4 <__aeabi_dsub>
 80211a2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80211a6:	9d08      	ldr	r5, [sp, #32]
 80211a8:	f806 4b01 	strb.w	r4, [r6], #1
 80211ac:	eba6 040a 	sub.w	r4, r6, sl
 80211b0:	42a5      	cmp	r5, r4
 80211b2:	4602      	mov	r2, r0
 80211b4:	460b      	mov	r3, r1
 80211b6:	d133      	bne.n	8021220 <_dtoa_r+0x6e8>
 80211b8:	f7df f81e 	bl	80001f8 <__adddf3>
 80211bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80211c0:	4604      	mov	r4, r0
 80211c2:	460d      	mov	r5, r1
 80211c4:	f7df fc5e 	bl	8000a84 <__aeabi_dcmpgt>
 80211c8:	b9c0      	cbnz	r0, 80211fc <_dtoa_r+0x6c4>
 80211ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80211ce:	4620      	mov	r0, r4
 80211d0:	4629      	mov	r1, r5
 80211d2:	f7df fc2f 	bl	8000a34 <__aeabi_dcmpeq>
 80211d6:	b110      	cbz	r0, 80211de <_dtoa_r+0x6a6>
 80211d8:	f018 0f01 	tst.w	r8, #1
 80211dc:	d10e      	bne.n	80211fc <_dtoa_r+0x6c4>
 80211de:	4648      	mov	r0, r9
 80211e0:	9903      	ldr	r1, [sp, #12]
 80211e2:	f000 fbbb 	bl	802195c <_Bfree>
 80211e6:	2300      	movs	r3, #0
 80211e8:	7033      	strb	r3, [r6, #0]
 80211ea:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80211ec:	3701      	adds	r7, #1
 80211ee:	601f      	str	r7, [r3, #0]
 80211f0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80211f2:	2b00      	cmp	r3, #0
 80211f4:	f000 824b 	beq.w	802168e <_dtoa_r+0xb56>
 80211f8:	601e      	str	r6, [r3, #0]
 80211fa:	e248      	b.n	802168e <_dtoa_r+0xb56>
 80211fc:	46b8      	mov	r8, r7
 80211fe:	4633      	mov	r3, r6
 8021200:	461e      	mov	r6, r3
 8021202:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8021206:	2a39      	cmp	r2, #57	@ 0x39
 8021208:	d106      	bne.n	8021218 <_dtoa_r+0x6e0>
 802120a:	459a      	cmp	sl, r3
 802120c:	d1f8      	bne.n	8021200 <_dtoa_r+0x6c8>
 802120e:	2230      	movs	r2, #48	@ 0x30
 8021210:	f108 0801 	add.w	r8, r8, #1
 8021214:	f88a 2000 	strb.w	r2, [sl]
 8021218:	781a      	ldrb	r2, [r3, #0]
 802121a:	3201      	adds	r2, #1
 802121c:	701a      	strb	r2, [r3, #0]
 802121e:	e7a0      	b.n	8021162 <_dtoa_r+0x62a>
 8021220:	2200      	movs	r2, #0
 8021222:	4b6f      	ldr	r3, [pc, #444]	@ (80213e0 <_dtoa_r+0x8a8>)
 8021224:	f7df f99e 	bl	8000564 <__aeabi_dmul>
 8021228:	2200      	movs	r2, #0
 802122a:	2300      	movs	r3, #0
 802122c:	4604      	mov	r4, r0
 802122e:	460d      	mov	r5, r1
 8021230:	f7df fc00 	bl	8000a34 <__aeabi_dcmpeq>
 8021234:	2800      	cmp	r0, #0
 8021236:	d09f      	beq.n	8021178 <_dtoa_r+0x640>
 8021238:	e7d1      	b.n	80211de <_dtoa_r+0x6a6>
 802123a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802123c:	2a00      	cmp	r2, #0
 802123e:	f000 80ea 	beq.w	8021416 <_dtoa_r+0x8de>
 8021242:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8021244:	2a01      	cmp	r2, #1
 8021246:	f300 80cd 	bgt.w	80213e4 <_dtoa_r+0x8ac>
 802124a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802124c:	2a00      	cmp	r2, #0
 802124e:	f000 80c1 	beq.w	80213d4 <_dtoa_r+0x89c>
 8021252:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8021256:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8021258:	9e04      	ldr	r6, [sp, #16]
 802125a:	9a04      	ldr	r2, [sp, #16]
 802125c:	2101      	movs	r1, #1
 802125e:	441a      	add	r2, r3
 8021260:	9204      	str	r2, [sp, #16]
 8021262:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021264:	4648      	mov	r0, r9
 8021266:	441a      	add	r2, r3
 8021268:	9209      	str	r2, [sp, #36]	@ 0x24
 802126a:	f000 fc2b 	bl	8021ac4 <__i2b>
 802126e:	4605      	mov	r5, r0
 8021270:	b166      	cbz	r6, 802128c <_dtoa_r+0x754>
 8021272:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021274:	2b00      	cmp	r3, #0
 8021276:	dd09      	ble.n	802128c <_dtoa_r+0x754>
 8021278:	42b3      	cmp	r3, r6
 802127a:	bfa8      	it	ge
 802127c:	4633      	movge	r3, r6
 802127e:	9a04      	ldr	r2, [sp, #16]
 8021280:	1af6      	subs	r6, r6, r3
 8021282:	1ad2      	subs	r2, r2, r3
 8021284:	9204      	str	r2, [sp, #16]
 8021286:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021288:	1ad3      	subs	r3, r2, r3
 802128a:	9309      	str	r3, [sp, #36]	@ 0x24
 802128c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802128e:	b30b      	cbz	r3, 80212d4 <_dtoa_r+0x79c>
 8021290:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021292:	2b00      	cmp	r3, #0
 8021294:	f000 80c6 	beq.w	8021424 <_dtoa_r+0x8ec>
 8021298:	2c00      	cmp	r4, #0
 802129a:	f000 80c0 	beq.w	802141e <_dtoa_r+0x8e6>
 802129e:	4629      	mov	r1, r5
 80212a0:	4622      	mov	r2, r4
 80212a2:	4648      	mov	r0, r9
 80212a4:	f000 fcc6 	bl	8021c34 <__pow5mult>
 80212a8:	9a03      	ldr	r2, [sp, #12]
 80212aa:	4601      	mov	r1, r0
 80212ac:	4605      	mov	r5, r0
 80212ae:	4648      	mov	r0, r9
 80212b0:	f000 fc1e 	bl	8021af0 <__multiply>
 80212b4:	9903      	ldr	r1, [sp, #12]
 80212b6:	4680      	mov	r8, r0
 80212b8:	4648      	mov	r0, r9
 80212ba:	f000 fb4f 	bl	802195c <_Bfree>
 80212be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80212c0:	1b1b      	subs	r3, r3, r4
 80212c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80212c4:	f000 80b1 	beq.w	802142a <_dtoa_r+0x8f2>
 80212c8:	4641      	mov	r1, r8
 80212ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80212cc:	4648      	mov	r0, r9
 80212ce:	f000 fcb1 	bl	8021c34 <__pow5mult>
 80212d2:	9003      	str	r0, [sp, #12]
 80212d4:	2101      	movs	r1, #1
 80212d6:	4648      	mov	r0, r9
 80212d8:	f000 fbf4 	bl	8021ac4 <__i2b>
 80212dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80212de:	4604      	mov	r4, r0
 80212e0:	2b00      	cmp	r3, #0
 80212e2:	f000 81d8 	beq.w	8021696 <_dtoa_r+0xb5e>
 80212e6:	461a      	mov	r2, r3
 80212e8:	4601      	mov	r1, r0
 80212ea:	4648      	mov	r0, r9
 80212ec:	f000 fca2 	bl	8021c34 <__pow5mult>
 80212f0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80212f2:	4604      	mov	r4, r0
 80212f4:	2b01      	cmp	r3, #1
 80212f6:	f300 809f 	bgt.w	8021438 <_dtoa_r+0x900>
 80212fa:	9b06      	ldr	r3, [sp, #24]
 80212fc:	2b00      	cmp	r3, #0
 80212fe:	f040 8097 	bne.w	8021430 <_dtoa_r+0x8f8>
 8021302:	9b07      	ldr	r3, [sp, #28]
 8021304:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8021308:	2b00      	cmp	r3, #0
 802130a:	f040 8093 	bne.w	8021434 <_dtoa_r+0x8fc>
 802130e:	9b07      	ldr	r3, [sp, #28]
 8021310:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8021314:	0d1b      	lsrs	r3, r3, #20
 8021316:	051b      	lsls	r3, r3, #20
 8021318:	b133      	cbz	r3, 8021328 <_dtoa_r+0x7f0>
 802131a:	9b04      	ldr	r3, [sp, #16]
 802131c:	3301      	adds	r3, #1
 802131e:	9304      	str	r3, [sp, #16]
 8021320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021322:	3301      	adds	r3, #1
 8021324:	9309      	str	r3, [sp, #36]	@ 0x24
 8021326:	2301      	movs	r3, #1
 8021328:	930a      	str	r3, [sp, #40]	@ 0x28
 802132a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802132c:	2b00      	cmp	r3, #0
 802132e:	f000 81b8 	beq.w	80216a2 <_dtoa_r+0xb6a>
 8021332:	6923      	ldr	r3, [r4, #16]
 8021334:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8021338:	6918      	ldr	r0, [r3, #16]
 802133a:	f000 fb77 	bl	8021a2c <__hi0bits>
 802133e:	f1c0 0020 	rsb	r0, r0, #32
 8021342:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021344:	4418      	add	r0, r3
 8021346:	f010 001f 	ands.w	r0, r0, #31
 802134a:	f000 8082 	beq.w	8021452 <_dtoa_r+0x91a>
 802134e:	f1c0 0320 	rsb	r3, r0, #32
 8021352:	2b04      	cmp	r3, #4
 8021354:	dd73      	ble.n	802143e <_dtoa_r+0x906>
 8021356:	9b04      	ldr	r3, [sp, #16]
 8021358:	f1c0 001c 	rsb	r0, r0, #28
 802135c:	4403      	add	r3, r0
 802135e:	9304      	str	r3, [sp, #16]
 8021360:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021362:	4406      	add	r6, r0
 8021364:	4403      	add	r3, r0
 8021366:	9309      	str	r3, [sp, #36]	@ 0x24
 8021368:	9b04      	ldr	r3, [sp, #16]
 802136a:	2b00      	cmp	r3, #0
 802136c:	dd05      	ble.n	802137a <_dtoa_r+0x842>
 802136e:	461a      	mov	r2, r3
 8021370:	4648      	mov	r0, r9
 8021372:	9903      	ldr	r1, [sp, #12]
 8021374:	f000 fcb8 	bl	8021ce8 <__lshift>
 8021378:	9003      	str	r0, [sp, #12]
 802137a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802137c:	2b00      	cmp	r3, #0
 802137e:	dd05      	ble.n	802138c <_dtoa_r+0x854>
 8021380:	4621      	mov	r1, r4
 8021382:	461a      	mov	r2, r3
 8021384:	4648      	mov	r0, r9
 8021386:	f000 fcaf 	bl	8021ce8 <__lshift>
 802138a:	4604      	mov	r4, r0
 802138c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802138e:	2b00      	cmp	r3, #0
 8021390:	d061      	beq.n	8021456 <_dtoa_r+0x91e>
 8021392:	4621      	mov	r1, r4
 8021394:	9803      	ldr	r0, [sp, #12]
 8021396:	f000 fd13 	bl	8021dc0 <__mcmp>
 802139a:	2800      	cmp	r0, #0
 802139c:	da5b      	bge.n	8021456 <_dtoa_r+0x91e>
 802139e:	2300      	movs	r3, #0
 80213a0:	220a      	movs	r2, #10
 80213a2:	4648      	mov	r0, r9
 80213a4:	9903      	ldr	r1, [sp, #12]
 80213a6:	f000 fafb 	bl	80219a0 <__multadd>
 80213aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80213ac:	f107 38ff 	add.w	r8, r7, #4294967295
 80213b0:	9003      	str	r0, [sp, #12]
 80213b2:	2b00      	cmp	r3, #0
 80213b4:	f000 8177 	beq.w	80216a6 <_dtoa_r+0xb6e>
 80213b8:	4629      	mov	r1, r5
 80213ba:	2300      	movs	r3, #0
 80213bc:	220a      	movs	r2, #10
 80213be:	4648      	mov	r0, r9
 80213c0:	f000 faee 	bl	80219a0 <__multadd>
 80213c4:	f1bb 0f00 	cmp.w	fp, #0
 80213c8:	4605      	mov	r5, r0
 80213ca:	dc6f      	bgt.n	80214ac <_dtoa_r+0x974>
 80213cc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80213ce:	2b02      	cmp	r3, #2
 80213d0:	dc49      	bgt.n	8021466 <_dtoa_r+0x92e>
 80213d2:	e06b      	b.n	80214ac <_dtoa_r+0x974>
 80213d4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80213d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80213da:	e73c      	b.n	8021256 <_dtoa_r+0x71e>
 80213dc:	3fe00000 	.word	0x3fe00000
 80213e0:	40240000 	.word	0x40240000
 80213e4:	9b08      	ldr	r3, [sp, #32]
 80213e6:	1e5c      	subs	r4, r3, #1
 80213e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80213ea:	42a3      	cmp	r3, r4
 80213ec:	db09      	blt.n	8021402 <_dtoa_r+0x8ca>
 80213ee:	1b1c      	subs	r4, r3, r4
 80213f0:	9b08      	ldr	r3, [sp, #32]
 80213f2:	2b00      	cmp	r3, #0
 80213f4:	f6bf af30 	bge.w	8021258 <_dtoa_r+0x720>
 80213f8:	9b04      	ldr	r3, [sp, #16]
 80213fa:	9a08      	ldr	r2, [sp, #32]
 80213fc:	1a9e      	subs	r6, r3, r2
 80213fe:	2300      	movs	r3, #0
 8021400:	e72b      	b.n	802125a <_dtoa_r+0x722>
 8021402:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021404:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021406:	1ae3      	subs	r3, r4, r3
 8021408:	441a      	add	r2, r3
 802140a:	940a      	str	r4, [sp, #40]	@ 0x28
 802140c:	9e04      	ldr	r6, [sp, #16]
 802140e:	2400      	movs	r4, #0
 8021410:	9b08      	ldr	r3, [sp, #32]
 8021412:	920e      	str	r2, [sp, #56]	@ 0x38
 8021414:	e721      	b.n	802125a <_dtoa_r+0x722>
 8021416:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8021418:	9e04      	ldr	r6, [sp, #16]
 802141a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802141c:	e728      	b.n	8021270 <_dtoa_r+0x738>
 802141e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8021422:	e751      	b.n	80212c8 <_dtoa_r+0x790>
 8021424:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021426:	9903      	ldr	r1, [sp, #12]
 8021428:	e750      	b.n	80212cc <_dtoa_r+0x794>
 802142a:	f8cd 800c 	str.w	r8, [sp, #12]
 802142e:	e751      	b.n	80212d4 <_dtoa_r+0x79c>
 8021430:	2300      	movs	r3, #0
 8021432:	e779      	b.n	8021328 <_dtoa_r+0x7f0>
 8021434:	9b06      	ldr	r3, [sp, #24]
 8021436:	e777      	b.n	8021328 <_dtoa_r+0x7f0>
 8021438:	2300      	movs	r3, #0
 802143a:	930a      	str	r3, [sp, #40]	@ 0x28
 802143c:	e779      	b.n	8021332 <_dtoa_r+0x7fa>
 802143e:	d093      	beq.n	8021368 <_dtoa_r+0x830>
 8021440:	9a04      	ldr	r2, [sp, #16]
 8021442:	331c      	adds	r3, #28
 8021444:	441a      	add	r2, r3
 8021446:	9204      	str	r2, [sp, #16]
 8021448:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802144a:	441e      	add	r6, r3
 802144c:	441a      	add	r2, r3
 802144e:	9209      	str	r2, [sp, #36]	@ 0x24
 8021450:	e78a      	b.n	8021368 <_dtoa_r+0x830>
 8021452:	4603      	mov	r3, r0
 8021454:	e7f4      	b.n	8021440 <_dtoa_r+0x908>
 8021456:	9b08      	ldr	r3, [sp, #32]
 8021458:	46b8      	mov	r8, r7
 802145a:	2b00      	cmp	r3, #0
 802145c:	dc20      	bgt.n	80214a0 <_dtoa_r+0x968>
 802145e:	469b      	mov	fp, r3
 8021460:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8021462:	2b02      	cmp	r3, #2
 8021464:	dd1e      	ble.n	80214a4 <_dtoa_r+0x96c>
 8021466:	f1bb 0f00 	cmp.w	fp, #0
 802146a:	f47f adb1 	bne.w	8020fd0 <_dtoa_r+0x498>
 802146e:	4621      	mov	r1, r4
 8021470:	465b      	mov	r3, fp
 8021472:	2205      	movs	r2, #5
 8021474:	4648      	mov	r0, r9
 8021476:	f000 fa93 	bl	80219a0 <__multadd>
 802147a:	4601      	mov	r1, r0
 802147c:	4604      	mov	r4, r0
 802147e:	9803      	ldr	r0, [sp, #12]
 8021480:	f000 fc9e 	bl	8021dc0 <__mcmp>
 8021484:	2800      	cmp	r0, #0
 8021486:	f77f ada3 	ble.w	8020fd0 <_dtoa_r+0x498>
 802148a:	4656      	mov	r6, sl
 802148c:	2331      	movs	r3, #49	@ 0x31
 802148e:	f108 0801 	add.w	r8, r8, #1
 8021492:	f806 3b01 	strb.w	r3, [r6], #1
 8021496:	e59f      	b.n	8020fd8 <_dtoa_r+0x4a0>
 8021498:	46b8      	mov	r8, r7
 802149a:	9c08      	ldr	r4, [sp, #32]
 802149c:	4625      	mov	r5, r4
 802149e:	e7f4      	b.n	802148a <_dtoa_r+0x952>
 80214a0:	f8dd b020 	ldr.w	fp, [sp, #32]
 80214a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80214a6:	2b00      	cmp	r3, #0
 80214a8:	f000 8101 	beq.w	80216ae <_dtoa_r+0xb76>
 80214ac:	2e00      	cmp	r6, #0
 80214ae:	dd05      	ble.n	80214bc <_dtoa_r+0x984>
 80214b0:	4629      	mov	r1, r5
 80214b2:	4632      	mov	r2, r6
 80214b4:	4648      	mov	r0, r9
 80214b6:	f000 fc17 	bl	8021ce8 <__lshift>
 80214ba:	4605      	mov	r5, r0
 80214bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80214be:	2b00      	cmp	r3, #0
 80214c0:	d05c      	beq.n	802157c <_dtoa_r+0xa44>
 80214c2:	4648      	mov	r0, r9
 80214c4:	6869      	ldr	r1, [r5, #4]
 80214c6:	f000 fa09 	bl	80218dc <_Balloc>
 80214ca:	4606      	mov	r6, r0
 80214cc:	b928      	cbnz	r0, 80214da <_dtoa_r+0x9a2>
 80214ce:	4602      	mov	r2, r0
 80214d0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80214d4:	4b80      	ldr	r3, [pc, #512]	@ (80216d8 <_dtoa_r+0xba0>)
 80214d6:	f7ff bb43 	b.w	8020b60 <_dtoa_r+0x28>
 80214da:	692a      	ldr	r2, [r5, #16]
 80214dc:	f105 010c 	add.w	r1, r5, #12
 80214e0:	3202      	adds	r2, #2
 80214e2:	0092      	lsls	r2, r2, #2
 80214e4:	300c      	adds	r0, #12
 80214e6:	f7ff fa70 	bl	80209ca <memcpy>
 80214ea:	2201      	movs	r2, #1
 80214ec:	4631      	mov	r1, r6
 80214ee:	4648      	mov	r0, r9
 80214f0:	f000 fbfa 	bl	8021ce8 <__lshift>
 80214f4:	462f      	mov	r7, r5
 80214f6:	4605      	mov	r5, r0
 80214f8:	f10a 0301 	add.w	r3, sl, #1
 80214fc:	9304      	str	r3, [sp, #16]
 80214fe:	eb0a 030b 	add.w	r3, sl, fp
 8021502:	930a      	str	r3, [sp, #40]	@ 0x28
 8021504:	9b06      	ldr	r3, [sp, #24]
 8021506:	f003 0301 	and.w	r3, r3, #1
 802150a:	9309      	str	r3, [sp, #36]	@ 0x24
 802150c:	9b04      	ldr	r3, [sp, #16]
 802150e:	4621      	mov	r1, r4
 8021510:	9803      	ldr	r0, [sp, #12]
 8021512:	f103 3bff 	add.w	fp, r3, #4294967295
 8021516:	f7ff fa85 	bl	8020a24 <quorem>
 802151a:	4603      	mov	r3, r0
 802151c:	4639      	mov	r1, r7
 802151e:	3330      	adds	r3, #48	@ 0x30
 8021520:	9006      	str	r0, [sp, #24]
 8021522:	9803      	ldr	r0, [sp, #12]
 8021524:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021526:	f000 fc4b 	bl	8021dc0 <__mcmp>
 802152a:	462a      	mov	r2, r5
 802152c:	9008      	str	r0, [sp, #32]
 802152e:	4621      	mov	r1, r4
 8021530:	4648      	mov	r0, r9
 8021532:	f000 fc61 	bl	8021df8 <__mdiff>
 8021536:	68c2      	ldr	r2, [r0, #12]
 8021538:	4606      	mov	r6, r0
 802153a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802153c:	bb02      	cbnz	r2, 8021580 <_dtoa_r+0xa48>
 802153e:	4601      	mov	r1, r0
 8021540:	9803      	ldr	r0, [sp, #12]
 8021542:	f000 fc3d 	bl	8021dc0 <__mcmp>
 8021546:	4602      	mov	r2, r0
 8021548:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802154a:	4631      	mov	r1, r6
 802154c:	4648      	mov	r0, r9
 802154e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8021552:	f000 fa03 	bl	802195c <_Bfree>
 8021556:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8021558:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802155a:	9e04      	ldr	r6, [sp, #16]
 802155c:	ea42 0103 	orr.w	r1, r2, r3
 8021560:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021562:	4319      	orrs	r1, r3
 8021564:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021566:	d10d      	bne.n	8021584 <_dtoa_r+0xa4c>
 8021568:	2b39      	cmp	r3, #57	@ 0x39
 802156a:	d027      	beq.n	80215bc <_dtoa_r+0xa84>
 802156c:	9a08      	ldr	r2, [sp, #32]
 802156e:	2a00      	cmp	r2, #0
 8021570:	dd01      	ble.n	8021576 <_dtoa_r+0xa3e>
 8021572:	9b06      	ldr	r3, [sp, #24]
 8021574:	3331      	adds	r3, #49	@ 0x31
 8021576:	f88b 3000 	strb.w	r3, [fp]
 802157a:	e52e      	b.n	8020fda <_dtoa_r+0x4a2>
 802157c:	4628      	mov	r0, r5
 802157e:	e7b9      	b.n	80214f4 <_dtoa_r+0x9bc>
 8021580:	2201      	movs	r2, #1
 8021582:	e7e2      	b.n	802154a <_dtoa_r+0xa12>
 8021584:	9908      	ldr	r1, [sp, #32]
 8021586:	2900      	cmp	r1, #0
 8021588:	db04      	blt.n	8021594 <_dtoa_r+0xa5c>
 802158a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 802158c:	4301      	orrs	r1, r0
 802158e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021590:	4301      	orrs	r1, r0
 8021592:	d120      	bne.n	80215d6 <_dtoa_r+0xa9e>
 8021594:	2a00      	cmp	r2, #0
 8021596:	ddee      	ble.n	8021576 <_dtoa_r+0xa3e>
 8021598:	2201      	movs	r2, #1
 802159a:	9903      	ldr	r1, [sp, #12]
 802159c:	4648      	mov	r0, r9
 802159e:	9304      	str	r3, [sp, #16]
 80215a0:	f000 fba2 	bl	8021ce8 <__lshift>
 80215a4:	4621      	mov	r1, r4
 80215a6:	9003      	str	r0, [sp, #12]
 80215a8:	f000 fc0a 	bl	8021dc0 <__mcmp>
 80215ac:	2800      	cmp	r0, #0
 80215ae:	9b04      	ldr	r3, [sp, #16]
 80215b0:	dc02      	bgt.n	80215b8 <_dtoa_r+0xa80>
 80215b2:	d1e0      	bne.n	8021576 <_dtoa_r+0xa3e>
 80215b4:	07da      	lsls	r2, r3, #31
 80215b6:	d5de      	bpl.n	8021576 <_dtoa_r+0xa3e>
 80215b8:	2b39      	cmp	r3, #57	@ 0x39
 80215ba:	d1da      	bne.n	8021572 <_dtoa_r+0xa3a>
 80215bc:	2339      	movs	r3, #57	@ 0x39
 80215be:	f88b 3000 	strb.w	r3, [fp]
 80215c2:	4633      	mov	r3, r6
 80215c4:	461e      	mov	r6, r3
 80215c6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80215ca:	3b01      	subs	r3, #1
 80215cc:	2a39      	cmp	r2, #57	@ 0x39
 80215ce:	d04e      	beq.n	802166e <_dtoa_r+0xb36>
 80215d0:	3201      	adds	r2, #1
 80215d2:	701a      	strb	r2, [r3, #0]
 80215d4:	e501      	b.n	8020fda <_dtoa_r+0x4a2>
 80215d6:	2a00      	cmp	r2, #0
 80215d8:	dd03      	ble.n	80215e2 <_dtoa_r+0xaaa>
 80215da:	2b39      	cmp	r3, #57	@ 0x39
 80215dc:	d0ee      	beq.n	80215bc <_dtoa_r+0xa84>
 80215de:	3301      	adds	r3, #1
 80215e0:	e7c9      	b.n	8021576 <_dtoa_r+0xa3e>
 80215e2:	9a04      	ldr	r2, [sp, #16]
 80215e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80215e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80215ea:	428a      	cmp	r2, r1
 80215ec:	d028      	beq.n	8021640 <_dtoa_r+0xb08>
 80215ee:	2300      	movs	r3, #0
 80215f0:	220a      	movs	r2, #10
 80215f2:	9903      	ldr	r1, [sp, #12]
 80215f4:	4648      	mov	r0, r9
 80215f6:	f000 f9d3 	bl	80219a0 <__multadd>
 80215fa:	42af      	cmp	r7, r5
 80215fc:	9003      	str	r0, [sp, #12]
 80215fe:	f04f 0300 	mov.w	r3, #0
 8021602:	f04f 020a 	mov.w	r2, #10
 8021606:	4639      	mov	r1, r7
 8021608:	4648      	mov	r0, r9
 802160a:	d107      	bne.n	802161c <_dtoa_r+0xae4>
 802160c:	f000 f9c8 	bl	80219a0 <__multadd>
 8021610:	4607      	mov	r7, r0
 8021612:	4605      	mov	r5, r0
 8021614:	9b04      	ldr	r3, [sp, #16]
 8021616:	3301      	adds	r3, #1
 8021618:	9304      	str	r3, [sp, #16]
 802161a:	e777      	b.n	802150c <_dtoa_r+0x9d4>
 802161c:	f000 f9c0 	bl	80219a0 <__multadd>
 8021620:	4629      	mov	r1, r5
 8021622:	4607      	mov	r7, r0
 8021624:	2300      	movs	r3, #0
 8021626:	220a      	movs	r2, #10
 8021628:	4648      	mov	r0, r9
 802162a:	f000 f9b9 	bl	80219a0 <__multadd>
 802162e:	4605      	mov	r5, r0
 8021630:	e7f0      	b.n	8021614 <_dtoa_r+0xadc>
 8021632:	f1bb 0f00 	cmp.w	fp, #0
 8021636:	bfcc      	ite	gt
 8021638:	465e      	movgt	r6, fp
 802163a:	2601      	movle	r6, #1
 802163c:	2700      	movs	r7, #0
 802163e:	4456      	add	r6, sl
 8021640:	2201      	movs	r2, #1
 8021642:	9903      	ldr	r1, [sp, #12]
 8021644:	4648      	mov	r0, r9
 8021646:	9304      	str	r3, [sp, #16]
 8021648:	f000 fb4e 	bl	8021ce8 <__lshift>
 802164c:	4621      	mov	r1, r4
 802164e:	9003      	str	r0, [sp, #12]
 8021650:	f000 fbb6 	bl	8021dc0 <__mcmp>
 8021654:	2800      	cmp	r0, #0
 8021656:	dcb4      	bgt.n	80215c2 <_dtoa_r+0xa8a>
 8021658:	d102      	bne.n	8021660 <_dtoa_r+0xb28>
 802165a:	9b04      	ldr	r3, [sp, #16]
 802165c:	07db      	lsls	r3, r3, #31
 802165e:	d4b0      	bmi.n	80215c2 <_dtoa_r+0xa8a>
 8021660:	4633      	mov	r3, r6
 8021662:	461e      	mov	r6, r3
 8021664:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8021668:	2a30      	cmp	r2, #48	@ 0x30
 802166a:	d0fa      	beq.n	8021662 <_dtoa_r+0xb2a>
 802166c:	e4b5      	b.n	8020fda <_dtoa_r+0x4a2>
 802166e:	459a      	cmp	sl, r3
 8021670:	d1a8      	bne.n	80215c4 <_dtoa_r+0xa8c>
 8021672:	2331      	movs	r3, #49	@ 0x31
 8021674:	f108 0801 	add.w	r8, r8, #1
 8021678:	f88a 3000 	strb.w	r3, [sl]
 802167c:	e4ad      	b.n	8020fda <_dtoa_r+0x4a2>
 802167e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021680:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80216dc <_dtoa_r+0xba4>
 8021684:	b11b      	cbz	r3, 802168e <_dtoa_r+0xb56>
 8021686:	f10a 0308 	add.w	r3, sl, #8
 802168a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802168c:	6013      	str	r3, [r2, #0]
 802168e:	4650      	mov	r0, sl
 8021690:	b017      	add	sp, #92	@ 0x5c
 8021692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021696:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8021698:	2b01      	cmp	r3, #1
 802169a:	f77f ae2e 	ble.w	80212fa <_dtoa_r+0x7c2>
 802169e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80216a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80216a2:	2001      	movs	r0, #1
 80216a4:	e64d      	b.n	8021342 <_dtoa_r+0x80a>
 80216a6:	f1bb 0f00 	cmp.w	fp, #0
 80216aa:	f77f aed9 	ble.w	8021460 <_dtoa_r+0x928>
 80216ae:	4656      	mov	r6, sl
 80216b0:	4621      	mov	r1, r4
 80216b2:	9803      	ldr	r0, [sp, #12]
 80216b4:	f7ff f9b6 	bl	8020a24 <quorem>
 80216b8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80216bc:	f806 3b01 	strb.w	r3, [r6], #1
 80216c0:	eba6 020a 	sub.w	r2, r6, sl
 80216c4:	4593      	cmp	fp, r2
 80216c6:	ddb4      	ble.n	8021632 <_dtoa_r+0xafa>
 80216c8:	2300      	movs	r3, #0
 80216ca:	220a      	movs	r2, #10
 80216cc:	4648      	mov	r0, r9
 80216ce:	9903      	ldr	r1, [sp, #12]
 80216d0:	f000 f966 	bl	80219a0 <__multadd>
 80216d4:	9003      	str	r0, [sp, #12]
 80216d6:	e7eb      	b.n	80216b0 <_dtoa_r+0xb78>
 80216d8:	0802f1a8 	.word	0x0802f1a8
 80216dc:	0802f143 	.word	0x0802f143

080216e0 <_free_r>:
 80216e0:	b538      	push	{r3, r4, r5, lr}
 80216e2:	4605      	mov	r5, r0
 80216e4:	2900      	cmp	r1, #0
 80216e6:	d040      	beq.n	802176a <_free_r+0x8a>
 80216e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80216ec:	1f0c      	subs	r4, r1, #4
 80216ee:	2b00      	cmp	r3, #0
 80216f0:	bfb8      	it	lt
 80216f2:	18e4      	addlt	r4, r4, r3
 80216f4:	f000 f8e6 	bl	80218c4 <__malloc_lock>
 80216f8:	4a1c      	ldr	r2, [pc, #112]	@ (802176c <_free_r+0x8c>)
 80216fa:	6813      	ldr	r3, [r2, #0]
 80216fc:	b933      	cbnz	r3, 802170c <_free_r+0x2c>
 80216fe:	6063      	str	r3, [r4, #4]
 8021700:	6014      	str	r4, [r2, #0]
 8021702:	4628      	mov	r0, r5
 8021704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021708:	f000 b8e2 	b.w	80218d0 <__malloc_unlock>
 802170c:	42a3      	cmp	r3, r4
 802170e:	d908      	bls.n	8021722 <_free_r+0x42>
 8021710:	6820      	ldr	r0, [r4, #0]
 8021712:	1821      	adds	r1, r4, r0
 8021714:	428b      	cmp	r3, r1
 8021716:	bf01      	itttt	eq
 8021718:	6819      	ldreq	r1, [r3, #0]
 802171a:	685b      	ldreq	r3, [r3, #4]
 802171c:	1809      	addeq	r1, r1, r0
 802171e:	6021      	streq	r1, [r4, #0]
 8021720:	e7ed      	b.n	80216fe <_free_r+0x1e>
 8021722:	461a      	mov	r2, r3
 8021724:	685b      	ldr	r3, [r3, #4]
 8021726:	b10b      	cbz	r3, 802172c <_free_r+0x4c>
 8021728:	42a3      	cmp	r3, r4
 802172a:	d9fa      	bls.n	8021722 <_free_r+0x42>
 802172c:	6811      	ldr	r1, [r2, #0]
 802172e:	1850      	adds	r0, r2, r1
 8021730:	42a0      	cmp	r0, r4
 8021732:	d10b      	bne.n	802174c <_free_r+0x6c>
 8021734:	6820      	ldr	r0, [r4, #0]
 8021736:	4401      	add	r1, r0
 8021738:	1850      	adds	r0, r2, r1
 802173a:	4283      	cmp	r3, r0
 802173c:	6011      	str	r1, [r2, #0]
 802173e:	d1e0      	bne.n	8021702 <_free_r+0x22>
 8021740:	6818      	ldr	r0, [r3, #0]
 8021742:	685b      	ldr	r3, [r3, #4]
 8021744:	4408      	add	r0, r1
 8021746:	6010      	str	r0, [r2, #0]
 8021748:	6053      	str	r3, [r2, #4]
 802174a:	e7da      	b.n	8021702 <_free_r+0x22>
 802174c:	d902      	bls.n	8021754 <_free_r+0x74>
 802174e:	230c      	movs	r3, #12
 8021750:	602b      	str	r3, [r5, #0]
 8021752:	e7d6      	b.n	8021702 <_free_r+0x22>
 8021754:	6820      	ldr	r0, [r4, #0]
 8021756:	1821      	adds	r1, r4, r0
 8021758:	428b      	cmp	r3, r1
 802175a:	bf01      	itttt	eq
 802175c:	6819      	ldreq	r1, [r3, #0]
 802175e:	685b      	ldreq	r3, [r3, #4]
 8021760:	1809      	addeq	r1, r1, r0
 8021762:	6021      	streq	r1, [r4, #0]
 8021764:	6063      	str	r3, [r4, #4]
 8021766:	6054      	str	r4, [r2, #4]
 8021768:	e7cb      	b.n	8021702 <_free_r+0x22>
 802176a:	bd38      	pop	{r3, r4, r5, pc}
 802176c:	2000e004 	.word	0x2000e004

08021770 <malloc>:
 8021770:	4b02      	ldr	r3, [pc, #8]	@ (802177c <malloc+0xc>)
 8021772:	4601      	mov	r1, r0
 8021774:	6818      	ldr	r0, [r3, #0]
 8021776:	f000 b825 	b.w	80217c4 <_malloc_r>
 802177a:	bf00      	nop
 802177c:	2000012c 	.word	0x2000012c

08021780 <sbrk_aligned>:
 8021780:	b570      	push	{r4, r5, r6, lr}
 8021782:	4e0f      	ldr	r6, [pc, #60]	@ (80217c0 <sbrk_aligned+0x40>)
 8021784:	460c      	mov	r4, r1
 8021786:	6831      	ldr	r1, [r6, #0]
 8021788:	4605      	mov	r5, r0
 802178a:	b911      	cbnz	r1, 8021792 <sbrk_aligned+0x12>
 802178c:	f001 fb80 	bl	8022e90 <_sbrk_r>
 8021790:	6030      	str	r0, [r6, #0]
 8021792:	4621      	mov	r1, r4
 8021794:	4628      	mov	r0, r5
 8021796:	f001 fb7b 	bl	8022e90 <_sbrk_r>
 802179a:	1c43      	adds	r3, r0, #1
 802179c:	d103      	bne.n	80217a6 <sbrk_aligned+0x26>
 802179e:	f04f 34ff 	mov.w	r4, #4294967295
 80217a2:	4620      	mov	r0, r4
 80217a4:	bd70      	pop	{r4, r5, r6, pc}
 80217a6:	1cc4      	adds	r4, r0, #3
 80217a8:	f024 0403 	bic.w	r4, r4, #3
 80217ac:	42a0      	cmp	r0, r4
 80217ae:	d0f8      	beq.n	80217a2 <sbrk_aligned+0x22>
 80217b0:	1a21      	subs	r1, r4, r0
 80217b2:	4628      	mov	r0, r5
 80217b4:	f001 fb6c 	bl	8022e90 <_sbrk_r>
 80217b8:	3001      	adds	r0, #1
 80217ba:	d1f2      	bne.n	80217a2 <sbrk_aligned+0x22>
 80217bc:	e7ef      	b.n	802179e <sbrk_aligned+0x1e>
 80217be:	bf00      	nop
 80217c0:	2000e000 	.word	0x2000e000

080217c4 <_malloc_r>:
 80217c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80217c8:	1ccd      	adds	r5, r1, #3
 80217ca:	f025 0503 	bic.w	r5, r5, #3
 80217ce:	3508      	adds	r5, #8
 80217d0:	2d0c      	cmp	r5, #12
 80217d2:	bf38      	it	cc
 80217d4:	250c      	movcc	r5, #12
 80217d6:	2d00      	cmp	r5, #0
 80217d8:	4606      	mov	r6, r0
 80217da:	db01      	blt.n	80217e0 <_malloc_r+0x1c>
 80217dc:	42a9      	cmp	r1, r5
 80217de:	d904      	bls.n	80217ea <_malloc_r+0x26>
 80217e0:	230c      	movs	r3, #12
 80217e2:	6033      	str	r3, [r6, #0]
 80217e4:	2000      	movs	r0, #0
 80217e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80217ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80218c0 <_malloc_r+0xfc>
 80217ee:	f000 f869 	bl	80218c4 <__malloc_lock>
 80217f2:	f8d8 3000 	ldr.w	r3, [r8]
 80217f6:	461c      	mov	r4, r3
 80217f8:	bb44      	cbnz	r4, 802184c <_malloc_r+0x88>
 80217fa:	4629      	mov	r1, r5
 80217fc:	4630      	mov	r0, r6
 80217fe:	f7ff ffbf 	bl	8021780 <sbrk_aligned>
 8021802:	1c43      	adds	r3, r0, #1
 8021804:	4604      	mov	r4, r0
 8021806:	d158      	bne.n	80218ba <_malloc_r+0xf6>
 8021808:	f8d8 4000 	ldr.w	r4, [r8]
 802180c:	4627      	mov	r7, r4
 802180e:	2f00      	cmp	r7, #0
 8021810:	d143      	bne.n	802189a <_malloc_r+0xd6>
 8021812:	2c00      	cmp	r4, #0
 8021814:	d04b      	beq.n	80218ae <_malloc_r+0xea>
 8021816:	6823      	ldr	r3, [r4, #0]
 8021818:	4639      	mov	r1, r7
 802181a:	4630      	mov	r0, r6
 802181c:	eb04 0903 	add.w	r9, r4, r3
 8021820:	f001 fb36 	bl	8022e90 <_sbrk_r>
 8021824:	4581      	cmp	r9, r0
 8021826:	d142      	bne.n	80218ae <_malloc_r+0xea>
 8021828:	6821      	ldr	r1, [r4, #0]
 802182a:	4630      	mov	r0, r6
 802182c:	1a6d      	subs	r5, r5, r1
 802182e:	4629      	mov	r1, r5
 8021830:	f7ff ffa6 	bl	8021780 <sbrk_aligned>
 8021834:	3001      	adds	r0, #1
 8021836:	d03a      	beq.n	80218ae <_malloc_r+0xea>
 8021838:	6823      	ldr	r3, [r4, #0]
 802183a:	442b      	add	r3, r5
 802183c:	6023      	str	r3, [r4, #0]
 802183e:	f8d8 3000 	ldr.w	r3, [r8]
 8021842:	685a      	ldr	r2, [r3, #4]
 8021844:	bb62      	cbnz	r2, 80218a0 <_malloc_r+0xdc>
 8021846:	f8c8 7000 	str.w	r7, [r8]
 802184a:	e00f      	b.n	802186c <_malloc_r+0xa8>
 802184c:	6822      	ldr	r2, [r4, #0]
 802184e:	1b52      	subs	r2, r2, r5
 8021850:	d420      	bmi.n	8021894 <_malloc_r+0xd0>
 8021852:	2a0b      	cmp	r2, #11
 8021854:	d917      	bls.n	8021886 <_malloc_r+0xc2>
 8021856:	1961      	adds	r1, r4, r5
 8021858:	42a3      	cmp	r3, r4
 802185a:	6025      	str	r5, [r4, #0]
 802185c:	bf18      	it	ne
 802185e:	6059      	strne	r1, [r3, #4]
 8021860:	6863      	ldr	r3, [r4, #4]
 8021862:	bf08      	it	eq
 8021864:	f8c8 1000 	streq.w	r1, [r8]
 8021868:	5162      	str	r2, [r4, r5]
 802186a:	604b      	str	r3, [r1, #4]
 802186c:	4630      	mov	r0, r6
 802186e:	f000 f82f 	bl	80218d0 <__malloc_unlock>
 8021872:	f104 000b 	add.w	r0, r4, #11
 8021876:	1d23      	adds	r3, r4, #4
 8021878:	f020 0007 	bic.w	r0, r0, #7
 802187c:	1ac2      	subs	r2, r0, r3
 802187e:	bf1c      	itt	ne
 8021880:	1a1b      	subne	r3, r3, r0
 8021882:	50a3      	strne	r3, [r4, r2]
 8021884:	e7af      	b.n	80217e6 <_malloc_r+0x22>
 8021886:	6862      	ldr	r2, [r4, #4]
 8021888:	42a3      	cmp	r3, r4
 802188a:	bf0c      	ite	eq
 802188c:	f8c8 2000 	streq.w	r2, [r8]
 8021890:	605a      	strne	r2, [r3, #4]
 8021892:	e7eb      	b.n	802186c <_malloc_r+0xa8>
 8021894:	4623      	mov	r3, r4
 8021896:	6864      	ldr	r4, [r4, #4]
 8021898:	e7ae      	b.n	80217f8 <_malloc_r+0x34>
 802189a:	463c      	mov	r4, r7
 802189c:	687f      	ldr	r7, [r7, #4]
 802189e:	e7b6      	b.n	802180e <_malloc_r+0x4a>
 80218a0:	461a      	mov	r2, r3
 80218a2:	685b      	ldr	r3, [r3, #4]
 80218a4:	42a3      	cmp	r3, r4
 80218a6:	d1fb      	bne.n	80218a0 <_malloc_r+0xdc>
 80218a8:	2300      	movs	r3, #0
 80218aa:	6053      	str	r3, [r2, #4]
 80218ac:	e7de      	b.n	802186c <_malloc_r+0xa8>
 80218ae:	230c      	movs	r3, #12
 80218b0:	4630      	mov	r0, r6
 80218b2:	6033      	str	r3, [r6, #0]
 80218b4:	f000 f80c 	bl	80218d0 <__malloc_unlock>
 80218b8:	e794      	b.n	80217e4 <_malloc_r+0x20>
 80218ba:	6005      	str	r5, [r0, #0]
 80218bc:	e7d6      	b.n	802186c <_malloc_r+0xa8>
 80218be:	bf00      	nop
 80218c0:	2000e004 	.word	0x2000e004

080218c4 <__malloc_lock>:
 80218c4:	4801      	ldr	r0, [pc, #4]	@ (80218cc <__malloc_lock+0x8>)
 80218c6:	f7ff b870 	b.w	80209aa <__retarget_lock_acquire_recursive>
 80218ca:	bf00      	nop
 80218cc:	2000dffc 	.word	0x2000dffc

080218d0 <__malloc_unlock>:
 80218d0:	4801      	ldr	r0, [pc, #4]	@ (80218d8 <__malloc_unlock+0x8>)
 80218d2:	f7ff b86b 	b.w	80209ac <__retarget_lock_release_recursive>
 80218d6:	bf00      	nop
 80218d8:	2000dffc 	.word	0x2000dffc

080218dc <_Balloc>:
 80218dc:	b570      	push	{r4, r5, r6, lr}
 80218de:	69c6      	ldr	r6, [r0, #28]
 80218e0:	4604      	mov	r4, r0
 80218e2:	460d      	mov	r5, r1
 80218e4:	b976      	cbnz	r6, 8021904 <_Balloc+0x28>
 80218e6:	2010      	movs	r0, #16
 80218e8:	f7ff ff42 	bl	8021770 <malloc>
 80218ec:	4602      	mov	r2, r0
 80218ee:	61e0      	str	r0, [r4, #28]
 80218f0:	b920      	cbnz	r0, 80218fc <_Balloc+0x20>
 80218f2:	216b      	movs	r1, #107	@ 0x6b
 80218f4:	4b17      	ldr	r3, [pc, #92]	@ (8021954 <_Balloc+0x78>)
 80218f6:	4818      	ldr	r0, [pc, #96]	@ (8021958 <_Balloc+0x7c>)
 80218f8:	f7ff f876 	bl	80209e8 <__assert_func>
 80218fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021900:	6006      	str	r6, [r0, #0]
 8021902:	60c6      	str	r6, [r0, #12]
 8021904:	69e6      	ldr	r6, [r4, #28]
 8021906:	68f3      	ldr	r3, [r6, #12]
 8021908:	b183      	cbz	r3, 802192c <_Balloc+0x50>
 802190a:	69e3      	ldr	r3, [r4, #28]
 802190c:	68db      	ldr	r3, [r3, #12]
 802190e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8021912:	b9b8      	cbnz	r0, 8021944 <_Balloc+0x68>
 8021914:	2101      	movs	r1, #1
 8021916:	fa01 f605 	lsl.w	r6, r1, r5
 802191a:	1d72      	adds	r2, r6, #5
 802191c:	4620      	mov	r0, r4
 802191e:	0092      	lsls	r2, r2, #2
 8021920:	f001 facd 	bl	8022ebe <_calloc_r>
 8021924:	b160      	cbz	r0, 8021940 <_Balloc+0x64>
 8021926:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802192a:	e00e      	b.n	802194a <_Balloc+0x6e>
 802192c:	2221      	movs	r2, #33	@ 0x21
 802192e:	2104      	movs	r1, #4
 8021930:	4620      	mov	r0, r4
 8021932:	f001 fac4 	bl	8022ebe <_calloc_r>
 8021936:	69e3      	ldr	r3, [r4, #28]
 8021938:	60f0      	str	r0, [r6, #12]
 802193a:	68db      	ldr	r3, [r3, #12]
 802193c:	2b00      	cmp	r3, #0
 802193e:	d1e4      	bne.n	802190a <_Balloc+0x2e>
 8021940:	2000      	movs	r0, #0
 8021942:	bd70      	pop	{r4, r5, r6, pc}
 8021944:	6802      	ldr	r2, [r0, #0]
 8021946:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802194a:	2300      	movs	r3, #0
 802194c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8021950:	e7f7      	b.n	8021942 <_Balloc+0x66>
 8021952:	bf00      	nop
 8021954:	0802f066 	.word	0x0802f066
 8021958:	0802f1b9 	.word	0x0802f1b9

0802195c <_Bfree>:
 802195c:	b570      	push	{r4, r5, r6, lr}
 802195e:	69c6      	ldr	r6, [r0, #28]
 8021960:	4605      	mov	r5, r0
 8021962:	460c      	mov	r4, r1
 8021964:	b976      	cbnz	r6, 8021984 <_Bfree+0x28>
 8021966:	2010      	movs	r0, #16
 8021968:	f7ff ff02 	bl	8021770 <malloc>
 802196c:	4602      	mov	r2, r0
 802196e:	61e8      	str	r0, [r5, #28]
 8021970:	b920      	cbnz	r0, 802197c <_Bfree+0x20>
 8021972:	218f      	movs	r1, #143	@ 0x8f
 8021974:	4b08      	ldr	r3, [pc, #32]	@ (8021998 <_Bfree+0x3c>)
 8021976:	4809      	ldr	r0, [pc, #36]	@ (802199c <_Bfree+0x40>)
 8021978:	f7ff f836 	bl	80209e8 <__assert_func>
 802197c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021980:	6006      	str	r6, [r0, #0]
 8021982:	60c6      	str	r6, [r0, #12]
 8021984:	b13c      	cbz	r4, 8021996 <_Bfree+0x3a>
 8021986:	69eb      	ldr	r3, [r5, #28]
 8021988:	6862      	ldr	r2, [r4, #4]
 802198a:	68db      	ldr	r3, [r3, #12]
 802198c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8021990:	6021      	str	r1, [r4, #0]
 8021992:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8021996:	bd70      	pop	{r4, r5, r6, pc}
 8021998:	0802f066 	.word	0x0802f066
 802199c:	0802f1b9 	.word	0x0802f1b9

080219a0 <__multadd>:
 80219a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80219a4:	4607      	mov	r7, r0
 80219a6:	460c      	mov	r4, r1
 80219a8:	461e      	mov	r6, r3
 80219aa:	2000      	movs	r0, #0
 80219ac:	690d      	ldr	r5, [r1, #16]
 80219ae:	f101 0c14 	add.w	ip, r1, #20
 80219b2:	f8dc 3000 	ldr.w	r3, [ip]
 80219b6:	3001      	adds	r0, #1
 80219b8:	b299      	uxth	r1, r3
 80219ba:	fb02 6101 	mla	r1, r2, r1, r6
 80219be:	0c1e      	lsrs	r6, r3, #16
 80219c0:	0c0b      	lsrs	r3, r1, #16
 80219c2:	fb02 3306 	mla	r3, r2, r6, r3
 80219c6:	b289      	uxth	r1, r1
 80219c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80219cc:	4285      	cmp	r5, r0
 80219ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80219d2:	f84c 1b04 	str.w	r1, [ip], #4
 80219d6:	dcec      	bgt.n	80219b2 <__multadd+0x12>
 80219d8:	b30e      	cbz	r6, 8021a1e <__multadd+0x7e>
 80219da:	68a3      	ldr	r3, [r4, #8]
 80219dc:	42ab      	cmp	r3, r5
 80219de:	dc19      	bgt.n	8021a14 <__multadd+0x74>
 80219e0:	6861      	ldr	r1, [r4, #4]
 80219e2:	4638      	mov	r0, r7
 80219e4:	3101      	adds	r1, #1
 80219e6:	f7ff ff79 	bl	80218dc <_Balloc>
 80219ea:	4680      	mov	r8, r0
 80219ec:	b928      	cbnz	r0, 80219fa <__multadd+0x5a>
 80219ee:	4602      	mov	r2, r0
 80219f0:	21ba      	movs	r1, #186	@ 0xba
 80219f2:	4b0c      	ldr	r3, [pc, #48]	@ (8021a24 <__multadd+0x84>)
 80219f4:	480c      	ldr	r0, [pc, #48]	@ (8021a28 <__multadd+0x88>)
 80219f6:	f7fe fff7 	bl	80209e8 <__assert_func>
 80219fa:	6922      	ldr	r2, [r4, #16]
 80219fc:	f104 010c 	add.w	r1, r4, #12
 8021a00:	3202      	adds	r2, #2
 8021a02:	0092      	lsls	r2, r2, #2
 8021a04:	300c      	adds	r0, #12
 8021a06:	f7fe ffe0 	bl	80209ca <memcpy>
 8021a0a:	4621      	mov	r1, r4
 8021a0c:	4638      	mov	r0, r7
 8021a0e:	f7ff ffa5 	bl	802195c <_Bfree>
 8021a12:	4644      	mov	r4, r8
 8021a14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8021a18:	3501      	adds	r5, #1
 8021a1a:	615e      	str	r6, [r3, #20]
 8021a1c:	6125      	str	r5, [r4, #16]
 8021a1e:	4620      	mov	r0, r4
 8021a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021a24:	0802f1a8 	.word	0x0802f1a8
 8021a28:	0802f1b9 	.word	0x0802f1b9

08021a2c <__hi0bits>:
 8021a2c:	4603      	mov	r3, r0
 8021a2e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8021a32:	bf3a      	itte	cc
 8021a34:	0403      	lslcc	r3, r0, #16
 8021a36:	2010      	movcc	r0, #16
 8021a38:	2000      	movcs	r0, #0
 8021a3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8021a3e:	bf3c      	itt	cc
 8021a40:	021b      	lslcc	r3, r3, #8
 8021a42:	3008      	addcc	r0, #8
 8021a44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8021a48:	bf3c      	itt	cc
 8021a4a:	011b      	lslcc	r3, r3, #4
 8021a4c:	3004      	addcc	r0, #4
 8021a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8021a52:	bf3c      	itt	cc
 8021a54:	009b      	lslcc	r3, r3, #2
 8021a56:	3002      	addcc	r0, #2
 8021a58:	2b00      	cmp	r3, #0
 8021a5a:	db05      	blt.n	8021a68 <__hi0bits+0x3c>
 8021a5c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8021a60:	f100 0001 	add.w	r0, r0, #1
 8021a64:	bf08      	it	eq
 8021a66:	2020      	moveq	r0, #32
 8021a68:	4770      	bx	lr

08021a6a <__lo0bits>:
 8021a6a:	6803      	ldr	r3, [r0, #0]
 8021a6c:	4602      	mov	r2, r0
 8021a6e:	f013 0007 	ands.w	r0, r3, #7
 8021a72:	d00b      	beq.n	8021a8c <__lo0bits+0x22>
 8021a74:	07d9      	lsls	r1, r3, #31
 8021a76:	d421      	bmi.n	8021abc <__lo0bits+0x52>
 8021a78:	0798      	lsls	r0, r3, #30
 8021a7a:	bf49      	itett	mi
 8021a7c:	085b      	lsrmi	r3, r3, #1
 8021a7e:	089b      	lsrpl	r3, r3, #2
 8021a80:	2001      	movmi	r0, #1
 8021a82:	6013      	strmi	r3, [r2, #0]
 8021a84:	bf5c      	itt	pl
 8021a86:	2002      	movpl	r0, #2
 8021a88:	6013      	strpl	r3, [r2, #0]
 8021a8a:	4770      	bx	lr
 8021a8c:	b299      	uxth	r1, r3
 8021a8e:	b909      	cbnz	r1, 8021a94 <__lo0bits+0x2a>
 8021a90:	2010      	movs	r0, #16
 8021a92:	0c1b      	lsrs	r3, r3, #16
 8021a94:	b2d9      	uxtb	r1, r3
 8021a96:	b909      	cbnz	r1, 8021a9c <__lo0bits+0x32>
 8021a98:	3008      	adds	r0, #8
 8021a9a:	0a1b      	lsrs	r3, r3, #8
 8021a9c:	0719      	lsls	r1, r3, #28
 8021a9e:	bf04      	itt	eq
 8021aa0:	091b      	lsreq	r3, r3, #4
 8021aa2:	3004      	addeq	r0, #4
 8021aa4:	0799      	lsls	r1, r3, #30
 8021aa6:	bf04      	itt	eq
 8021aa8:	089b      	lsreq	r3, r3, #2
 8021aaa:	3002      	addeq	r0, #2
 8021aac:	07d9      	lsls	r1, r3, #31
 8021aae:	d403      	bmi.n	8021ab8 <__lo0bits+0x4e>
 8021ab0:	085b      	lsrs	r3, r3, #1
 8021ab2:	f100 0001 	add.w	r0, r0, #1
 8021ab6:	d003      	beq.n	8021ac0 <__lo0bits+0x56>
 8021ab8:	6013      	str	r3, [r2, #0]
 8021aba:	4770      	bx	lr
 8021abc:	2000      	movs	r0, #0
 8021abe:	4770      	bx	lr
 8021ac0:	2020      	movs	r0, #32
 8021ac2:	4770      	bx	lr

08021ac4 <__i2b>:
 8021ac4:	b510      	push	{r4, lr}
 8021ac6:	460c      	mov	r4, r1
 8021ac8:	2101      	movs	r1, #1
 8021aca:	f7ff ff07 	bl	80218dc <_Balloc>
 8021ace:	4602      	mov	r2, r0
 8021ad0:	b928      	cbnz	r0, 8021ade <__i2b+0x1a>
 8021ad2:	f240 1145 	movw	r1, #325	@ 0x145
 8021ad6:	4b04      	ldr	r3, [pc, #16]	@ (8021ae8 <__i2b+0x24>)
 8021ad8:	4804      	ldr	r0, [pc, #16]	@ (8021aec <__i2b+0x28>)
 8021ada:	f7fe ff85 	bl	80209e8 <__assert_func>
 8021ade:	2301      	movs	r3, #1
 8021ae0:	6144      	str	r4, [r0, #20]
 8021ae2:	6103      	str	r3, [r0, #16]
 8021ae4:	bd10      	pop	{r4, pc}
 8021ae6:	bf00      	nop
 8021ae8:	0802f1a8 	.word	0x0802f1a8
 8021aec:	0802f1b9 	.word	0x0802f1b9

08021af0 <__multiply>:
 8021af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021af4:	4617      	mov	r7, r2
 8021af6:	690a      	ldr	r2, [r1, #16]
 8021af8:	693b      	ldr	r3, [r7, #16]
 8021afa:	4689      	mov	r9, r1
 8021afc:	429a      	cmp	r2, r3
 8021afe:	bfa2      	ittt	ge
 8021b00:	463b      	movge	r3, r7
 8021b02:	460f      	movge	r7, r1
 8021b04:	4699      	movge	r9, r3
 8021b06:	693d      	ldr	r5, [r7, #16]
 8021b08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8021b0c:	68bb      	ldr	r3, [r7, #8]
 8021b0e:	6879      	ldr	r1, [r7, #4]
 8021b10:	eb05 060a 	add.w	r6, r5, sl
 8021b14:	42b3      	cmp	r3, r6
 8021b16:	b085      	sub	sp, #20
 8021b18:	bfb8      	it	lt
 8021b1a:	3101      	addlt	r1, #1
 8021b1c:	f7ff fede 	bl	80218dc <_Balloc>
 8021b20:	b930      	cbnz	r0, 8021b30 <__multiply+0x40>
 8021b22:	4602      	mov	r2, r0
 8021b24:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8021b28:	4b40      	ldr	r3, [pc, #256]	@ (8021c2c <__multiply+0x13c>)
 8021b2a:	4841      	ldr	r0, [pc, #260]	@ (8021c30 <__multiply+0x140>)
 8021b2c:	f7fe ff5c 	bl	80209e8 <__assert_func>
 8021b30:	f100 0414 	add.w	r4, r0, #20
 8021b34:	4623      	mov	r3, r4
 8021b36:	2200      	movs	r2, #0
 8021b38:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8021b3c:	4573      	cmp	r3, lr
 8021b3e:	d320      	bcc.n	8021b82 <__multiply+0x92>
 8021b40:	f107 0814 	add.w	r8, r7, #20
 8021b44:	f109 0114 	add.w	r1, r9, #20
 8021b48:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8021b4c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8021b50:	9302      	str	r3, [sp, #8]
 8021b52:	1beb      	subs	r3, r5, r7
 8021b54:	3b15      	subs	r3, #21
 8021b56:	f023 0303 	bic.w	r3, r3, #3
 8021b5a:	3304      	adds	r3, #4
 8021b5c:	3715      	adds	r7, #21
 8021b5e:	42bd      	cmp	r5, r7
 8021b60:	bf38      	it	cc
 8021b62:	2304      	movcc	r3, #4
 8021b64:	9301      	str	r3, [sp, #4]
 8021b66:	9b02      	ldr	r3, [sp, #8]
 8021b68:	9103      	str	r1, [sp, #12]
 8021b6a:	428b      	cmp	r3, r1
 8021b6c:	d80c      	bhi.n	8021b88 <__multiply+0x98>
 8021b6e:	2e00      	cmp	r6, #0
 8021b70:	dd03      	ble.n	8021b7a <__multiply+0x8a>
 8021b72:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8021b76:	2b00      	cmp	r3, #0
 8021b78:	d055      	beq.n	8021c26 <__multiply+0x136>
 8021b7a:	6106      	str	r6, [r0, #16]
 8021b7c:	b005      	add	sp, #20
 8021b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021b82:	f843 2b04 	str.w	r2, [r3], #4
 8021b86:	e7d9      	b.n	8021b3c <__multiply+0x4c>
 8021b88:	f8b1 a000 	ldrh.w	sl, [r1]
 8021b8c:	f1ba 0f00 	cmp.w	sl, #0
 8021b90:	d01f      	beq.n	8021bd2 <__multiply+0xe2>
 8021b92:	46c4      	mov	ip, r8
 8021b94:	46a1      	mov	r9, r4
 8021b96:	2700      	movs	r7, #0
 8021b98:	f85c 2b04 	ldr.w	r2, [ip], #4
 8021b9c:	f8d9 3000 	ldr.w	r3, [r9]
 8021ba0:	fa1f fb82 	uxth.w	fp, r2
 8021ba4:	b29b      	uxth	r3, r3
 8021ba6:	fb0a 330b 	mla	r3, sl, fp, r3
 8021baa:	443b      	add	r3, r7
 8021bac:	f8d9 7000 	ldr.w	r7, [r9]
 8021bb0:	0c12      	lsrs	r2, r2, #16
 8021bb2:	0c3f      	lsrs	r7, r7, #16
 8021bb4:	fb0a 7202 	mla	r2, sl, r2, r7
 8021bb8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8021bbc:	b29b      	uxth	r3, r3
 8021bbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021bc2:	4565      	cmp	r5, ip
 8021bc4:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8021bc8:	f849 3b04 	str.w	r3, [r9], #4
 8021bcc:	d8e4      	bhi.n	8021b98 <__multiply+0xa8>
 8021bce:	9b01      	ldr	r3, [sp, #4]
 8021bd0:	50e7      	str	r7, [r4, r3]
 8021bd2:	9b03      	ldr	r3, [sp, #12]
 8021bd4:	3104      	adds	r1, #4
 8021bd6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8021bda:	f1b9 0f00 	cmp.w	r9, #0
 8021bde:	d020      	beq.n	8021c22 <__multiply+0x132>
 8021be0:	4647      	mov	r7, r8
 8021be2:	46a4      	mov	ip, r4
 8021be4:	f04f 0a00 	mov.w	sl, #0
 8021be8:	6823      	ldr	r3, [r4, #0]
 8021bea:	f8b7 b000 	ldrh.w	fp, [r7]
 8021bee:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8021bf2:	b29b      	uxth	r3, r3
 8021bf4:	fb09 220b 	mla	r2, r9, fp, r2
 8021bf8:	4452      	add	r2, sl
 8021bfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021bfe:	f84c 3b04 	str.w	r3, [ip], #4
 8021c02:	f857 3b04 	ldr.w	r3, [r7], #4
 8021c06:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8021c0a:	f8bc 3000 	ldrh.w	r3, [ip]
 8021c0e:	42bd      	cmp	r5, r7
 8021c10:	fb09 330a 	mla	r3, r9, sl, r3
 8021c14:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8021c18:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8021c1c:	d8e5      	bhi.n	8021bea <__multiply+0xfa>
 8021c1e:	9a01      	ldr	r2, [sp, #4]
 8021c20:	50a3      	str	r3, [r4, r2]
 8021c22:	3404      	adds	r4, #4
 8021c24:	e79f      	b.n	8021b66 <__multiply+0x76>
 8021c26:	3e01      	subs	r6, #1
 8021c28:	e7a1      	b.n	8021b6e <__multiply+0x7e>
 8021c2a:	bf00      	nop
 8021c2c:	0802f1a8 	.word	0x0802f1a8
 8021c30:	0802f1b9 	.word	0x0802f1b9

08021c34 <__pow5mult>:
 8021c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021c38:	4615      	mov	r5, r2
 8021c3a:	f012 0203 	ands.w	r2, r2, #3
 8021c3e:	4607      	mov	r7, r0
 8021c40:	460e      	mov	r6, r1
 8021c42:	d007      	beq.n	8021c54 <__pow5mult+0x20>
 8021c44:	4c25      	ldr	r4, [pc, #148]	@ (8021cdc <__pow5mult+0xa8>)
 8021c46:	3a01      	subs	r2, #1
 8021c48:	2300      	movs	r3, #0
 8021c4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8021c4e:	f7ff fea7 	bl	80219a0 <__multadd>
 8021c52:	4606      	mov	r6, r0
 8021c54:	10ad      	asrs	r5, r5, #2
 8021c56:	d03d      	beq.n	8021cd4 <__pow5mult+0xa0>
 8021c58:	69fc      	ldr	r4, [r7, #28]
 8021c5a:	b97c      	cbnz	r4, 8021c7c <__pow5mult+0x48>
 8021c5c:	2010      	movs	r0, #16
 8021c5e:	f7ff fd87 	bl	8021770 <malloc>
 8021c62:	4602      	mov	r2, r0
 8021c64:	61f8      	str	r0, [r7, #28]
 8021c66:	b928      	cbnz	r0, 8021c74 <__pow5mult+0x40>
 8021c68:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8021c6c:	4b1c      	ldr	r3, [pc, #112]	@ (8021ce0 <__pow5mult+0xac>)
 8021c6e:	481d      	ldr	r0, [pc, #116]	@ (8021ce4 <__pow5mult+0xb0>)
 8021c70:	f7fe feba 	bl	80209e8 <__assert_func>
 8021c74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8021c78:	6004      	str	r4, [r0, #0]
 8021c7a:	60c4      	str	r4, [r0, #12]
 8021c7c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8021c80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8021c84:	b94c      	cbnz	r4, 8021c9a <__pow5mult+0x66>
 8021c86:	f240 2171 	movw	r1, #625	@ 0x271
 8021c8a:	4638      	mov	r0, r7
 8021c8c:	f7ff ff1a 	bl	8021ac4 <__i2b>
 8021c90:	2300      	movs	r3, #0
 8021c92:	4604      	mov	r4, r0
 8021c94:	f8c8 0008 	str.w	r0, [r8, #8]
 8021c98:	6003      	str	r3, [r0, #0]
 8021c9a:	f04f 0900 	mov.w	r9, #0
 8021c9e:	07eb      	lsls	r3, r5, #31
 8021ca0:	d50a      	bpl.n	8021cb8 <__pow5mult+0x84>
 8021ca2:	4631      	mov	r1, r6
 8021ca4:	4622      	mov	r2, r4
 8021ca6:	4638      	mov	r0, r7
 8021ca8:	f7ff ff22 	bl	8021af0 <__multiply>
 8021cac:	4680      	mov	r8, r0
 8021cae:	4631      	mov	r1, r6
 8021cb0:	4638      	mov	r0, r7
 8021cb2:	f7ff fe53 	bl	802195c <_Bfree>
 8021cb6:	4646      	mov	r6, r8
 8021cb8:	106d      	asrs	r5, r5, #1
 8021cba:	d00b      	beq.n	8021cd4 <__pow5mult+0xa0>
 8021cbc:	6820      	ldr	r0, [r4, #0]
 8021cbe:	b938      	cbnz	r0, 8021cd0 <__pow5mult+0x9c>
 8021cc0:	4622      	mov	r2, r4
 8021cc2:	4621      	mov	r1, r4
 8021cc4:	4638      	mov	r0, r7
 8021cc6:	f7ff ff13 	bl	8021af0 <__multiply>
 8021cca:	6020      	str	r0, [r4, #0]
 8021ccc:	f8c0 9000 	str.w	r9, [r0]
 8021cd0:	4604      	mov	r4, r0
 8021cd2:	e7e4      	b.n	8021c9e <__pow5mult+0x6a>
 8021cd4:	4630      	mov	r0, r6
 8021cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021cda:	bf00      	nop
 8021cdc:	0802f34c 	.word	0x0802f34c
 8021ce0:	0802f066 	.word	0x0802f066
 8021ce4:	0802f1b9 	.word	0x0802f1b9

08021ce8 <__lshift>:
 8021ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021cec:	460c      	mov	r4, r1
 8021cee:	4607      	mov	r7, r0
 8021cf0:	4691      	mov	r9, r2
 8021cf2:	6923      	ldr	r3, [r4, #16]
 8021cf4:	6849      	ldr	r1, [r1, #4]
 8021cf6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8021cfa:	68a3      	ldr	r3, [r4, #8]
 8021cfc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8021d00:	f108 0601 	add.w	r6, r8, #1
 8021d04:	42b3      	cmp	r3, r6
 8021d06:	db0b      	blt.n	8021d20 <__lshift+0x38>
 8021d08:	4638      	mov	r0, r7
 8021d0a:	f7ff fde7 	bl	80218dc <_Balloc>
 8021d0e:	4605      	mov	r5, r0
 8021d10:	b948      	cbnz	r0, 8021d26 <__lshift+0x3e>
 8021d12:	4602      	mov	r2, r0
 8021d14:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8021d18:	4b27      	ldr	r3, [pc, #156]	@ (8021db8 <__lshift+0xd0>)
 8021d1a:	4828      	ldr	r0, [pc, #160]	@ (8021dbc <__lshift+0xd4>)
 8021d1c:	f7fe fe64 	bl	80209e8 <__assert_func>
 8021d20:	3101      	adds	r1, #1
 8021d22:	005b      	lsls	r3, r3, #1
 8021d24:	e7ee      	b.n	8021d04 <__lshift+0x1c>
 8021d26:	2300      	movs	r3, #0
 8021d28:	f100 0114 	add.w	r1, r0, #20
 8021d2c:	f100 0210 	add.w	r2, r0, #16
 8021d30:	4618      	mov	r0, r3
 8021d32:	4553      	cmp	r3, sl
 8021d34:	db33      	blt.n	8021d9e <__lshift+0xb6>
 8021d36:	6920      	ldr	r0, [r4, #16]
 8021d38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8021d3c:	f104 0314 	add.w	r3, r4, #20
 8021d40:	f019 091f 	ands.w	r9, r9, #31
 8021d44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8021d48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8021d4c:	d02b      	beq.n	8021da6 <__lshift+0xbe>
 8021d4e:	468a      	mov	sl, r1
 8021d50:	2200      	movs	r2, #0
 8021d52:	f1c9 0e20 	rsb	lr, r9, #32
 8021d56:	6818      	ldr	r0, [r3, #0]
 8021d58:	fa00 f009 	lsl.w	r0, r0, r9
 8021d5c:	4310      	orrs	r0, r2
 8021d5e:	f84a 0b04 	str.w	r0, [sl], #4
 8021d62:	f853 2b04 	ldr.w	r2, [r3], #4
 8021d66:	459c      	cmp	ip, r3
 8021d68:	fa22 f20e 	lsr.w	r2, r2, lr
 8021d6c:	d8f3      	bhi.n	8021d56 <__lshift+0x6e>
 8021d6e:	ebac 0304 	sub.w	r3, ip, r4
 8021d72:	3b15      	subs	r3, #21
 8021d74:	f023 0303 	bic.w	r3, r3, #3
 8021d78:	3304      	adds	r3, #4
 8021d7a:	f104 0015 	add.w	r0, r4, #21
 8021d7e:	4560      	cmp	r0, ip
 8021d80:	bf88      	it	hi
 8021d82:	2304      	movhi	r3, #4
 8021d84:	50ca      	str	r2, [r1, r3]
 8021d86:	b10a      	cbz	r2, 8021d8c <__lshift+0xa4>
 8021d88:	f108 0602 	add.w	r6, r8, #2
 8021d8c:	3e01      	subs	r6, #1
 8021d8e:	4638      	mov	r0, r7
 8021d90:	4621      	mov	r1, r4
 8021d92:	612e      	str	r6, [r5, #16]
 8021d94:	f7ff fde2 	bl	802195c <_Bfree>
 8021d98:	4628      	mov	r0, r5
 8021d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021d9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8021da2:	3301      	adds	r3, #1
 8021da4:	e7c5      	b.n	8021d32 <__lshift+0x4a>
 8021da6:	3904      	subs	r1, #4
 8021da8:	f853 2b04 	ldr.w	r2, [r3], #4
 8021dac:	459c      	cmp	ip, r3
 8021dae:	f841 2f04 	str.w	r2, [r1, #4]!
 8021db2:	d8f9      	bhi.n	8021da8 <__lshift+0xc0>
 8021db4:	e7ea      	b.n	8021d8c <__lshift+0xa4>
 8021db6:	bf00      	nop
 8021db8:	0802f1a8 	.word	0x0802f1a8
 8021dbc:	0802f1b9 	.word	0x0802f1b9

08021dc0 <__mcmp>:
 8021dc0:	4603      	mov	r3, r0
 8021dc2:	690a      	ldr	r2, [r1, #16]
 8021dc4:	6900      	ldr	r0, [r0, #16]
 8021dc6:	b530      	push	{r4, r5, lr}
 8021dc8:	1a80      	subs	r0, r0, r2
 8021dca:	d10e      	bne.n	8021dea <__mcmp+0x2a>
 8021dcc:	3314      	adds	r3, #20
 8021dce:	3114      	adds	r1, #20
 8021dd0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8021dd4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8021dd8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8021ddc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8021de0:	4295      	cmp	r5, r2
 8021de2:	d003      	beq.n	8021dec <__mcmp+0x2c>
 8021de4:	d205      	bcs.n	8021df2 <__mcmp+0x32>
 8021de6:	f04f 30ff 	mov.w	r0, #4294967295
 8021dea:	bd30      	pop	{r4, r5, pc}
 8021dec:	42a3      	cmp	r3, r4
 8021dee:	d3f3      	bcc.n	8021dd8 <__mcmp+0x18>
 8021df0:	e7fb      	b.n	8021dea <__mcmp+0x2a>
 8021df2:	2001      	movs	r0, #1
 8021df4:	e7f9      	b.n	8021dea <__mcmp+0x2a>
	...

08021df8 <__mdiff>:
 8021df8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021dfc:	4689      	mov	r9, r1
 8021dfe:	4606      	mov	r6, r0
 8021e00:	4611      	mov	r1, r2
 8021e02:	4648      	mov	r0, r9
 8021e04:	4614      	mov	r4, r2
 8021e06:	f7ff ffdb 	bl	8021dc0 <__mcmp>
 8021e0a:	1e05      	subs	r5, r0, #0
 8021e0c:	d112      	bne.n	8021e34 <__mdiff+0x3c>
 8021e0e:	4629      	mov	r1, r5
 8021e10:	4630      	mov	r0, r6
 8021e12:	f7ff fd63 	bl	80218dc <_Balloc>
 8021e16:	4602      	mov	r2, r0
 8021e18:	b928      	cbnz	r0, 8021e26 <__mdiff+0x2e>
 8021e1a:	f240 2137 	movw	r1, #567	@ 0x237
 8021e1e:	4b3e      	ldr	r3, [pc, #248]	@ (8021f18 <__mdiff+0x120>)
 8021e20:	483e      	ldr	r0, [pc, #248]	@ (8021f1c <__mdiff+0x124>)
 8021e22:	f7fe fde1 	bl	80209e8 <__assert_func>
 8021e26:	2301      	movs	r3, #1
 8021e28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8021e2c:	4610      	mov	r0, r2
 8021e2e:	b003      	add	sp, #12
 8021e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e34:	bfbc      	itt	lt
 8021e36:	464b      	movlt	r3, r9
 8021e38:	46a1      	movlt	r9, r4
 8021e3a:	4630      	mov	r0, r6
 8021e3c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8021e40:	bfba      	itte	lt
 8021e42:	461c      	movlt	r4, r3
 8021e44:	2501      	movlt	r5, #1
 8021e46:	2500      	movge	r5, #0
 8021e48:	f7ff fd48 	bl	80218dc <_Balloc>
 8021e4c:	4602      	mov	r2, r0
 8021e4e:	b918      	cbnz	r0, 8021e58 <__mdiff+0x60>
 8021e50:	f240 2145 	movw	r1, #581	@ 0x245
 8021e54:	4b30      	ldr	r3, [pc, #192]	@ (8021f18 <__mdiff+0x120>)
 8021e56:	e7e3      	b.n	8021e20 <__mdiff+0x28>
 8021e58:	f100 0b14 	add.w	fp, r0, #20
 8021e5c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8021e60:	f109 0310 	add.w	r3, r9, #16
 8021e64:	60c5      	str	r5, [r0, #12]
 8021e66:	f04f 0c00 	mov.w	ip, #0
 8021e6a:	f109 0514 	add.w	r5, r9, #20
 8021e6e:	46d9      	mov	r9, fp
 8021e70:	6926      	ldr	r6, [r4, #16]
 8021e72:	f104 0e14 	add.w	lr, r4, #20
 8021e76:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8021e7a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8021e7e:	9301      	str	r3, [sp, #4]
 8021e80:	9b01      	ldr	r3, [sp, #4]
 8021e82:	f85e 0b04 	ldr.w	r0, [lr], #4
 8021e86:	f853 af04 	ldr.w	sl, [r3, #4]!
 8021e8a:	b281      	uxth	r1, r0
 8021e8c:	9301      	str	r3, [sp, #4]
 8021e8e:	fa1f f38a 	uxth.w	r3, sl
 8021e92:	1a5b      	subs	r3, r3, r1
 8021e94:	0c00      	lsrs	r0, r0, #16
 8021e96:	4463      	add	r3, ip
 8021e98:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8021e9c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8021ea0:	b29b      	uxth	r3, r3
 8021ea2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8021ea6:	4576      	cmp	r6, lr
 8021ea8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8021eac:	f849 3b04 	str.w	r3, [r9], #4
 8021eb0:	d8e6      	bhi.n	8021e80 <__mdiff+0x88>
 8021eb2:	1b33      	subs	r3, r6, r4
 8021eb4:	3b15      	subs	r3, #21
 8021eb6:	f023 0303 	bic.w	r3, r3, #3
 8021eba:	3415      	adds	r4, #21
 8021ebc:	3304      	adds	r3, #4
 8021ebe:	42a6      	cmp	r6, r4
 8021ec0:	bf38      	it	cc
 8021ec2:	2304      	movcc	r3, #4
 8021ec4:	441d      	add	r5, r3
 8021ec6:	445b      	add	r3, fp
 8021ec8:	461e      	mov	r6, r3
 8021eca:	462c      	mov	r4, r5
 8021ecc:	4544      	cmp	r4, r8
 8021ece:	d30e      	bcc.n	8021eee <__mdiff+0xf6>
 8021ed0:	f108 0103 	add.w	r1, r8, #3
 8021ed4:	1b49      	subs	r1, r1, r5
 8021ed6:	f021 0103 	bic.w	r1, r1, #3
 8021eda:	3d03      	subs	r5, #3
 8021edc:	45a8      	cmp	r8, r5
 8021ede:	bf38      	it	cc
 8021ee0:	2100      	movcc	r1, #0
 8021ee2:	440b      	add	r3, r1
 8021ee4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8021ee8:	b199      	cbz	r1, 8021f12 <__mdiff+0x11a>
 8021eea:	6117      	str	r7, [r2, #16]
 8021eec:	e79e      	b.n	8021e2c <__mdiff+0x34>
 8021eee:	46e6      	mov	lr, ip
 8021ef0:	f854 1b04 	ldr.w	r1, [r4], #4
 8021ef4:	fa1f fc81 	uxth.w	ip, r1
 8021ef8:	44f4      	add	ip, lr
 8021efa:	0c08      	lsrs	r0, r1, #16
 8021efc:	4471      	add	r1, lr
 8021efe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8021f02:	b289      	uxth	r1, r1
 8021f04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8021f08:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8021f0c:	f846 1b04 	str.w	r1, [r6], #4
 8021f10:	e7dc      	b.n	8021ecc <__mdiff+0xd4>
 8021f12:	3f01      	subs	r7, #1
 8021f14:	e7e6      	b.n	8021ee4 <__mdiff+0xec>
 8021f16:	bf00      	nop
 8021f18:	0802f1a8 	.word	0x0802f1a8
 8021f1c:	0802f1b9 	.word	0x0802f1b9

08021f20 <__d2b>:
 8021f20:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8021f24:	2101      	movs	r1, #1
 8021f26:	4690      	mov	r8, r2
 8021f28:	4699      	mov	r9, r3
 8021f2a:	9e08      	ldr	r6, [sp, #32]
 8021f2c:	f7ff fcd6 	bl	80218dc <_Balloc>
 8021f30:	4604      	mov	r4, r0
 8021f32:	b930      	cbnz	r0, 8021f42 <__d2b+0x22>
 8021f34:	4602      	mov	r2, r0
 8021f36:	f240 310f 	movw	r1, #783	@ 0x30f
 8021f3a:	4b23      	ldr	r3, [pc, #140]	@ (8021fc8 <__d2b+0xa8>)
 8021f3c:	4823      	ldr	r0, [pc, #140]	@ (8021fcc <__d2b+0xac>)
 8021f3e:	f7fe fd53 	bl	80209e8 <__assert_func>
 8021f42:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8021f46:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8021f4a:	b10d      	cbz	r5, 8021f50 <__d2b+0x30>
 8021f4c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8021f50:	9301      	str	r3, [sp, #4]
 8021f52:	f1b8 0300 	subs.w	r3, r8, #0
 8021f56:	d024      	beq.n	8021fa2 <__d2b+0x82>
 8021f58:	4668      	mov	r0, sp
 8021f5a:	9300      	str	r3, [sp, #0]
 8021f5c:	f7ff fd85 	bl	8021a6a <__lo0bits>
 8021f60:	e9dd 1200 	ldrd	r1, r2, [sp]
 8021f64:	b1d8      	cbz	r0, 8021f9e <__d2b+0x7e>
 8021f66:	f1c0 0320 	rsb	r3, r0, #32
 8021f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8021f6e:	430b      	orrs	r3, r1
 8021f70:	40c2      	lsrs	r2, r0
 8021f72:	6163      	str	r3, [r4, #20]
 8021f74:	9201      	str	r2, [sp, #4]
 8021f76:	9b01      	ldr	r3, [sp, #4]
 8021f78:	2b00      	cmp	r3, #0
 8021f7a:	bf0c      	ite	eq
 8021f7c:	2201      	moveq	r2, #1
 8021f7e:	2202      	movne	r2, #2
 8021f80:	61a3      	str	r3, [r4, #24]
 8021f82:	6122      	str	r2, [r4, #16]
 8021f84:	b1ad      	cbz	r5, 8021fb2 <__d2b+0x92>
 8021f86:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8021f8a:	4405      	add	r5, r0
 8021f8c:	6035      	str	r5, [r6, #0]
 8021f8e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8021f92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021f94:	6018      	str	r0, [r3, #0]
 8021f96:	4620      	mov	r0, r4
 8021f98:	b002      	add	sp, #8
 8021f9a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8021f9e:	6161      	str	r1, [r4, #20]
 8021fa0:	e7e9      	b.n	8021f76 <__d2b+0x56>
 8021fa2:	a801      	add	r0, sp, #4
 8021fa4:	f7ff fd61 	bl	8021a6a <__lo0bits>
 8021fa8:	9b01      	ldr	r3, [sp, #4]
 8021faa:	2201      	movs	r2, #1
 8021fac:	6163      	str	r3, [r4, #20]
 8021fae:	3020      	adds	r0, #32
 8021fb0:	e7e7      	b.n	8021f82 <__d2b+0x62>
 8021fb2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8021fb6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8021fba:	6030      	str	r0, [r6, #0]
 8021fbc:	6918      	ldr	r0, [r3, #16]
 8021fbe:	f7ff fd35 	bl	8021a2c <__hi0bits>
 8021fc2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8021fc6:	e7e4      	b.n	8021f92 <__d2b+0x72>
 8021fc8:	0802f1a8 	.word	0x0802f1a8
 8021fcc:	0802f1b9 	.word	0x0802f1b9

08021fd0 <__ssputs_r>:
 8021fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021fd4:	461f      	mov	r7, r3
 8021fd6:	688e      	ldr	r6, [r1, #8]
 8021fd8:	4682      	mov	sl, r0
 8021fda:	42be      	cmp	r6, r7
 8021fdc:	460c      	mov	r4, r1
 8021fde:	4690      	mov	r8, r2
 8021fe0:	680b      	ldr	r3, [r1, #0]
 8021fe2:	d82d      	bhi.n	8022040 <__ssputs_r+0x70>
 8021fe4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8021fe8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8021fec:	d026      	beq.n	802203c <__ssputs_r+0x6c>
 8021fee:	6965      	ldr	r5, [r4, #20]
 8021ff0:	6909      	ldr	r1, [r1, #16]
 8021ff2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021ff6:	eba3 0901 	sub.w	r9, r3, r1
 8021ffa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8021ffe:	1c7b      	adds	r3, r7, #1
 8022000:	444b      	add	r3, r9
 8022002:	106d      	asrs	r5, r5, #1
 8022004:	429d      	cmp	r5, r3
 8022006:	bf38      	it	cc
 8022008:	461d      	movcc	r5, r3
 802200a:	0553      	lsls	r3, r2, #21
 802200c:	d527      	bpl.n	802205e <__ssputs_r+0x8e>
 802200e:	4629      	mov	r1, r5
 8022010:	f7ff fbd8 	bl	80217c4 <_malloc_r>
 8022014:	4606      	mov	r6, r0
 8022016:	b360      	cbz	r0, 8022072 <__ssputs_r+0xa2>
 8022018:	464a      	mov	r2, r9
 802201a:	6921      	ldr	r1, [r4, #16]
 802201c:	f7fe fcd5 	bl	80209ca <memcpy>
 8022020:	89a3      	ldrh	r3, [r4, #12]
 8022022:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8022026:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802202a:	81a3      	strh	r3, [r4, #12]
 802202c:	6126      	str	r6, [r4, #16]
 802202e:	444e      	add	r6, r9
 8022030:	6026      	str	r6, [r4, #0]
 8022032:	463e      	mov	r6, r7
 8022034:	6165      	str	r5, [r4, #20]
 8022036:	eba5 0509 	sub.w	r5, r5, r9
 802203a:	60a5      	str	r5, [r4, #8]
 802203c:	42be      	cmp	r6, r7
 802203e:	d900      	bls.n	8022042 <__ssputs_r+0x72>
 8022040:	463e      	mov	r6, r7
 8022042:	4632      	mov	r2, r6
 8022044:	4641      	mov	r1, r8
 8022046:	6820      	ldr	r0, [r4, #0]
 8022048:	f7fe fbe6 	bl	8020818 <memmove>
 802204c:	2000      	movs	r0, #0
 802204e:	68a3      	ldr	r3, [r4, #8]
 8022050:	1b9b      	subs	r3, r3, r6
 8022052:	60a3      	str	r3, [r4, #8]
 8022054:	6823      	ldr	r3, [r4, #0]
 8022056:	4433      	add	r3, r6
 8022058:	6023      	str	r3, [r4, #0]
 802205a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802205e:	462a      	mov	r2, r5
 8022060:	f000 ff53 	bl	8022f0a <_realloc_r>
 8022064:	4606      	mov	r6, r0
 8022066:	2800      	cmp	r0, #0
 8022068:	d1e0      	bne.n	802202c <__ssputs_r+0x5c>
 802206a:	4650      	mov	r0, sl
 802206c:	6921      	ldr	r1, [r4, #16]
 802206e:	f7ff fb37 	bl	80216e0 <_free_r>
 8022072:	230c      	movs	r3, #12
 8022074:	f8ca 3000 	str.w	r3, [sl]
 8022078:	89a3      	ldrh	r3, [r4, #12]
 802207a:	f04f 30ff 	mov.w	r0, #4294967295
 802207e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022082:	81a3      	strh	r3, [r4, #12]
 8022084:	e7e9      	b.n	802205a <__ssputs_r+0x8a>
	...

08022088 <_svfiprintf_r>:
 8022088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802208c:	4698      	mov	r8, r3
 802208e:	898b      	ldrh	r3, [r1, #12]
 8022090:	4607      	mov	r7, r0
 8022092:	061b      	lsls	r3, r3, #24
 8022094:	460d      	mov	r5, r1
 8022096:	4614      	mov	r4, r2
 8022098:	b09d      	sub	sp, #116	@ 0x74
 802209a:	d510      	bpl.n	80220be <_svfiprintf_r+0x36>
 802209c:	690b      	ldr	r3, [r1, #16]
 802209e:	b973      	cbnz	r3, 80220be <_svfiprintf_r+0x36>
 80220a0:	2140      	movs	r1, #64	@ 0x40
 80220a2:	f7ff fb8f 	bl	80217c4 <_malloc_r>
 80220a6:	6028      	str	r0, [r5, #0]
 80220a8:	6128      	str	r0, [r5, #16]
 80220aa:	b930      	cbnz	r0, 80220ba <_svfiprintf_r+0x32>
 80220ac:	230c      	movs	r3, #12
 80220ae:	603b      	str	r3, [r7, #0]
 80220b0:	f04f 30ff 	mov.w	r0, #4294967295
 80220b4:	b01d      	add	sp, #116	@ 0x74
 80220b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80220ba:	2340      	movs	r3, #64	@ 0x40
 80220bc:	616b      	str	r3, [r5, #20]
 80220be:	2300      	movs	r3, #0
 80220c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80220c2:	2320      	movs	r3, #32
 80220c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80220c8:	2330      	movs	r3, #48	@ 0x30
 80220ca:	f04f 0901 	mov.w	r9, #1
 80220ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80220d2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 802226c <_svfiprintf_r+0x1e4>
 80220d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80220da:	4623      	mov	r3, r4
 80220dc:	469a      	mov	sl, r3
 80220de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80220e2:	b10a      	cbz	r2, 80220e8 <_svfiprintf_r+0x60>
 80220e4:	2a25      	cmp	r2, #37	@ 0x25
 80220e6:	d1f9      	bne.n	80220dc <_svfiprintf_r+0x54>
 80220e8:	ebba 0b04 	subs.w	fp, sl, r4
 80220ec:	d00b      	beq.n	8022106 <_svfiprintf_r+0x7e>
 80220ee:	465b      	mov	r3, fp
 80220f0:	4622      	mov	r2, r4
 80220f2:	4629      	mov	r1, r5
 80220f4:	4638      	mov	r0, r7
 80220f6:	f7ff ff6b 	bl	8021fd0 <__ssputs_r>
 80220fa:	3001      	adds	r0, #1
 80220fc:	f000 80a7 	beq.w	802224e <_svfiprintf_r+0x1c6>
 8022100:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022102:	445a      	add	r2, fp
 8022104:	9209      	str	r2, [sp, #36]	@ 0x24
 8022106:	f89a 3000 	ldrb.w	r3, [sl]
 802210a:	2b00      	cmp	r3, #0
 802210c:	f000 809f 	beq.w	802224e <_svfiprintf_r+0x1c6>
 8022110:	2300      	movs	r3, #0
 8022112:	f04f 32ff 	mov.w	r2, #4294967295
 8022116:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802211a:	f10a 0a01 	add.w	sl, sl, #1
 802211e:	9304      	str	r3, [sp, #16]
 8022120:	9307      	str	r3, [sp, #28]
 8022122:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8022126:	931a      	str	r3, [sp, #104]	@ 0x68
 8022128:	4654      	mov	r4, sl
 802212a:	2205      	movs	r2, #5
 802212c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022130:	484e      	ldr	r0, [pc, #312]	@ (802226c <_svfiprintf_r+0x1e4>)
 8022132:	f7fe fc3c 	bl	80209ae <memchr>
 8022136:	9a04      	ldr	r2, [sp, #16]
 8022138:	b9d8      	cbnz	r0, 8022172 <_svfiprintf_r+0xea>
 802213a:	06d0      	lsls	r0, r2, #27
 802213c:	bf44      	itt	mi
 802213e:	2320      	movmi	r3, #32
 8022140:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8022144:	0711      	lsls	r1, r2, #28
 8022146:	bf44      	itt	mi
 8022148:	232b      	movmi	r3, #43	@ 0x2b
 802214a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802214e:	f89a 3000 	ldrb.w	r3, [sl]
 8022152:	2b2a      	cmp	r3, #42	@ 0x2a
 8022154:	d015      	beq.n	8022182 <_svfiprintf_r+0xfa>
 8022156:	4654      	mov	r4, sl
 8022158:	2000      	movs	r0, #0
 802215a:	f04f 0c0a 	mov.w	ip, #10
 802215e:	9a07      	ldr	r2, [sp, #28]
 8022160:	4621      	mov	r1, r4
 8022162:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022166:	3b30      	subs	r3, #48	@ 0x30
 8022168:	2b09      	cmp	r3, #9
 802216a:	d94b      	bls.n	8022204 <_svfiprintf_r+0x17c>
 802216c:	b1b0      	cbz	r0, 802219c <_svfiprintf_r+0x114>
 802216e:	9207      	str	r2, [sp, #28]
 8022170:	e014      	b.n	802219c <_svfiprintf_r+0x114>
 8022172:	eba0 0308 	sub.w	r3, r0, r8
 8022176:	fa09 f303 	lsl.w	r3, r9, r3
 802217a:	4313      	orrs	r3, r2
 802217c:	46a2      	mov	sl, r4
 802217e:	9304      	str	r3, [sp, #16]
 8022180:	e7d2      	b.n	8022128 <_svfiprintf_r+0xa0>
 8022182:	9b03      	ldr	r3, [sp, #12]
 8022184:	1d19      	adds	r1, r3, #4
 8022186:	681b      	ldr	r3, [r3, #0]
 8022188:	9103      	str	r1, [sp, #12]
 802218a:	2b00      	cmp	r3, #0
 802218c:	bfbb      	ittet	lt
 802218e:	425b      	neglt	r3, r3
 8022190:	f042 0202 	orrlt.w	r2, r2, #2
 8022194:	9307      	strge	r3, [sp, #28]
 8022196:	9307      	strlt	r3, [sp, #28]
 8022198:	bfb8      	it	lt
 802219a:	9204      	strlt	r2, [sp, #16]
 802219c:	7823      	ldrb	r3, [r4, #0]
 802219e:	2b2e      	cmp	r3, #46	@ 0x2e
 80221a0:	d10a      	bne.n	80221b8 <_svfiprintf_r+0x130>
 80221a2:	7863      	ldrb	r3, [r4, #1]
 80221a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80221a6:	d132      	bne.n	802220e <_svfiprintf_r+0x186>
 80221a8:	9b03      	ldr	r3, [sp, #12]
 80221aa:	3402      	adds	r4, #2
 80221ac:	1d1a      	adds	r2, r3, #4
 80221ae:	681b      	ldr	r3, [r3, #0]
 80221b0:	9203      	str	r2, [sp, #12]
 80221b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80221b6:	9305      	str	r3, [sp, #20]
 80221b8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8022270 <_svfiprintf_r+0x1e8>
 80221bc:	2203      	movs	r2, #3
 80221be:	4650      	mov	r0, sl
 80221c0:	7821      	ldrb	r1, [r4, #0]
 80221c2:	f7fe fbf4 	bl	80209ae <memchr>
 80221c6:	b138      	cbz	r0, 80221d8 <_svfiprintf_r+0x150>
 80221c8:	2240      	movs	r2, #64	@ 0x40
 80221ca:	9b04      	ldr	r3, [sp, #16]
 80221cc:	eba0 000a 	sub.w	r0, r0, sl
 80221d0:	4082      	lsls	r2, r0
 80221d2:	4313      	orrs	r3, r2
 80221d4:	3401      	adds	r4, #1
 80221d6:	9304      	str	r3, [sp, #16]
 80221d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80221dc:	2206      	movs	r2, #6
 80221de:	4825      	ldr	r0, [pc, #148]	@ (8022274 <_svfiprintf_r+0x1ec>)
 80221e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80221e4:	f7fe fbe3 	bl	80209ae <memchr>
 80221e8:	2800      	cmp	r0, #0
 80221ea:	d036      	beq.n	802225a <_svfiprintf_r+0x1d2>
 80221ec:	4b22      	ldr	r3, [pc, #136]	@ (8022278 <_svfiprintf_r+0x1f0>)
 80221ee:	bb1b      	cbnz	r3, 8022238 <_svfiprintf_r+0x1b0>
 80221f0:	9b03      	ldr	r3, [sp, #12]
 80221f2:	3307      	adds	r3, #7
 80221f4:	f023 0307 	bic.w	r3, r3, #7
 80221f8:	3308      	adds	r3, #8
 80221fa:	9303      	str	r3, [sp, #12]
 80221fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80221fe:	4433      	add	r3, r6
 8022200:	9309      	str	r3, [sp, #36]	@ 0x24
 8022202:	e76a      	b.n	80220da <_svfiprintf_r+0x52>
 8022204:	460c      	mov	r4, r1
 8022206:	2001      	movs	r0, #1
 8022208:	fb0c 3202 	mla	r2, ip, r2, r3
 802220c:	e7a8      	b.n	8022160 <_svfiprintf_r+0xd8>
 802220e:	2300      	movs	r3, #0
 8022210:	f04f 0c0a 	mov.w	ip, #10
 8022214:	4619      	mov	r1, r3
 8022216:	3401      	adds	r4, #1
 8022218:	9305      	str	r3, [sp, #20]
 802221a:	4620      	mov	r0, r4
 802221c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022220:	3a30      	subs	r2, #48	@ 0x30
 8022222:	2a09      	cmp	r2, #9
 8022224:	d903      	bls.n	802222e <_svfiprintf_r+0x1a6>
 8022226:	2b00      	cmp	r3, #0
 8022228:	d0c6      	beq.n	80221b8 <_svfiprintf_r+0x130>
 802222a:	9105      	str	r1, [sp, #20]
 802222c:	e7c4      	b.n	80221b8 <_svfiprintf_r+0x130>
 802222e:	4604      	mov	r4, r0
 8022230:	2301      	movs	r3, #1
 8022232:	fb0c 2101 	mla	r1, ip, r1, r2
 8022236:	e7f0      	b.n	802221a <_svfiprintf_r+0x192>
 8022238:	ab03      	add	r3, sp, #12
 802223a:	9300      	str	r3, [sp, #0]
 802223c:	462a      	mov	r2, r5
 802223e:	4638      	mov	r0, r7
 8022240:	4b0e      	ldr	r3, [pc, #56]	@ (802227c <_svfiprintf_r+0x1f4>)
 8022242:	a904      	add	r1, sp, #16
 8022244:	f7fd fcae 	bl	801fba4 <_printf_float>
 8022248:	1c42      	adds	r2, r0, #1
 802224a:	4606      	mov	r6, r0
 802224c:	d1d6      	bne.n	80221fc <_svfiprintf_r+0x174>
 802224e:	89ab      	ldrh	r3, [r5, #12]
 8022250:	065b      	lsls	r3, r3, #25
 8022252:	f53f af2d 	bmi.w	80220b0 <_svfiprintf_r+0x28>
 8022256:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022258:	e72c      	b.n	80220b4 <_svfiprintf_r+0x2c>
 802225a:	ab03      	add	r3, sp, #12
 802225c:	9300      	str	r3, [sp, #0]
 802225e:	462a      	mov	r2, r5
 8022260:	4638      	mov	r0, r7
 8022262:	4b06      	ldr	r3, [pc, #24]	@ (802227c <_svfiprintf_r+0x1f4>)
 8022264:	a904      	add	r1, sp, #16
 8022266:	f7fd ff3b 	bl	80200e0 <_printf_i>
 802226a:	e7ed      	b.n	8022248 <_svfiprintf_r+0x1c0>
 802226c:	0802f212 	.word	0x0802f212
 8022270:	0802f218 	.word	0x0802f218
 8022274:	0802f21c 	.word	0x0802f21c
 8022278:	0801fba5 	.word	0x0801fba5
 802227c:	08021fd1 	.word	0x08021fd1

08022280 <_sungetc_r>:
 8022280:	b538      	push	{r3, r4, r5, lr}
 8022282:	1c4b      	adds	r3, r1, #1
 8022284:	4614      	mov	r4, r2
 8022286:	d103      	bne.n	8022290 <_sungetc_r+0x10>
 8022288:	f04f 35ff 	mov.w	r5, #4294967295
 802228c:	4628      	mov	r0, r5
 802228e:	bd38      	pop	{r3, r4, r5, pc}
 8022290:	8993      	ldrh	r3, [r2, #12]
 8022292:	b2cd      	uxtb	r5, r1
 8022294:	f023 0320 	bic.w	r3, r3, #32
 8022298:	8193      	strh	r3, [r2, #12]
 802229a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802229c:	6852      	ldr	r2, [r2, #4]
 802229e:	b18b      	cbz	r3, 80222c4 <_sungetc_r+0x44>
 80222a0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80222a2:	4293      	cmp	r3, r2
 80222a4:	dd08      	ble.n	80222b8 <_sungetc_r+0x38>
 80222a6:	6823      	ldr	r3, [r4, #0]
 80222a8:	1e5a      	subs	r2, r3, #1
 80222aa:	6022      	str	r2, [r4, #0]
 80222ac:	f803 5c01 	strb.w	r5, [r3, #-1]
 80222b0:	6863      	ldr	r3, [r4, #4]
 80222b2:	3301      	adds	r3, #1
 80222b4:	6063      	str	r3, [r4, #4]
 80222b6:	e7e9      	b.n	802228c <_sungetc_r+0xc>
 80222b8:	4621      	mov	r1, r4
 80222ba:	f000 fd8f 	bl	8022ddc <__submore>
 80222be:	2800      	cmp	r0, #0
 80222c0:	d0f1      	beq.n	80222a6 <_sungetc_r+0x26>
 80222c2:	e7e1      	b.n	8022288 <_sungetc_r+0x8>
 80222c4:	6921      	ldr	r1, [r4, #16]
 80222c6:	6823      	ldr	r3, [r4, #0]
 80222c8:	b151      	cbz	r1, 80222e0 <_sungetc_r+0x60>
 80222ca:	4299      	cmp	r1, r3
 80222cc:	d208      	bcs.n	80222e0 <_sungetc_r+0x60>
 80222ce:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80222d2:	42a9      	cmp	r1, r5
 80222d4:	d104      	bne.n	80222e0 <_sungetc_r+0x60>
 80222d6:	3b01      	subs	r3, #1
 80222d8:	3201      	adds	r2, #1
 80222da:	6023      	str	r3, [r4, #0]
 80222dc:	6062      	str	r2, [r4, #4]
 80222de:	e7d5      	b.n	802228c <_sungetc_r+0xc>
 80222e0:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80222e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80222e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80222ea:	2303      	movs	r3, #3
 80222ec:	63a3      	str	r3, [r4, #56]	@ 0x38
 80222ee:	4623      	mov	r3, r4
 80222f0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80222f4:	6023      	str	r3, [r4, #0]
 80222f6:	2301      	movs	r3, #1
 80222f8:	e7dc      	b.n	80222b4 <_sungetc_r+0x34>

080222fa <__ssrefill_r>:
 80222fa:	b510      	push	{r4, lr}
 80222fc:	460c      	mov	r4, r1
 80222fe:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8022300:	b169      	cbz	r1, 802231e <__ssrefill_r+0x24>
 8022302:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8022306:	4299      	cmp	r1, r3
 8022308:	d001      	beq.n	802230e <__ssrefill_r+0x14>
 802230a:	f7ff f9e9 	bl	80216e0 <_free_r>
 802230e:	2000      	movs	r0, #0
 8022310:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8022312:	6360      	str	r0, [r4, #52]	@ 0x34
 8022314:	6063      	str	r3, [r4, #4]
 8022316:	b113      	cbz	r3, 802231e <__ssrefill_r+0x24>
 8022318:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 802231a:	6023      	str	r3, [r4, #0]
 802231c:	bd10      	pop	{r4, pc}
 802231e:	6923      	ldr	r3, [r4, #16]
 8022320:	f04f 30ff 	mov.w	r0, #4294967295
 8022324:	6023      	str	r3, [r4, #0]
 8022326:	2300      	movs	r3, #0
 8022328:	6063      	str	r3, [r4, #4]
 802232a:	89a3      	ldrh	r3, [r4, #12]
 802232c:	f043 0320 	orr.w	r3, r3, #32
 8022330:	81a3      	strh	r3, [r4, #12]
 8022332:	e7f3      	b.n	802231c <__ssrefill_r+0x22>

08022334 <__ssvfiscanf_r>:
 8022334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022338:	460c      	mov	r4, r1
 802233a:	2100      	movs	r1, #0
 802233c:	4606      	mov	r6, r0
 802233e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8022342:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8022346:	49ab      	ldr	r1, [pc, #684]	@ (80225f4 <__ssvfiscanf_r+0x2c0>)
 8022348:	f10d 0804 	add.w	r8, sp, #4
 802234c:	91a0      	str	r1, [sp, #640]	@ 0x280
 802234e:	49aa      	ldr	r1, [pc, #680]	@ (80225f8 <__ssvfiscanf_r+0x2c4>)
 8022350:	4faa      	ldr	r7, [pc, #680]	@ (80225fc <__ssvfiscanf_r+0x2c8>)
 8022352:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8022356:	91a1      	str	r1, [sp, #644]	@ 0x284
 8022358:	9300      	str	r3, [sp, #0]
 802235a:	f892 9000 	ldrb.w	r9, [r2]
 802235e:	f1b9 0f00 	cmp.w	r9, #0
 8022362:	f000 8159 	beq.w	8022618 <__ssvfiscanf_r+0x2e4>
 8022366:	f817 3009 	ldrb.w	r3, [r7, r9]
 802236a:	1c55      	adds	r5, r2, #1
 802236c:	f013 0308 	ands.w	r3, r3, #8
 8022370:	d019      	beq.n	80223a6 <__ssvfiscanf_r+0x72>
 8022372:	6863      	ldr	r3, [r4, #4]
 8022374:	2b00      	cmp	r3, #0
 8022376:	dd0f      	ble.n	8022398 <__ssvfiscanf_r+0x64>
 8022378:	6823      	ldr	r3, [r4, #0]
 802237a:	781a      	ldrb	r2, [r3, #0]
 802237c:	5cba      	ldrb	r2, [r7, r2]
 802237e:	0712      	lsls	r2, r2, #28
 8022380:	d401      	bmi.n	8022386 <__ssvfiscanf_r+0x52>
 8022382:	462a      	mov	r2, r5
 8022384:	e7e9      	b.n	802235a <__ssvfiscanf_r+0x26>
 8022386:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8022388:	3301      	adds	r3, #1
 802238a:	3201      	adds	r2, #1
 802238c:	9245      	str	r2, [sp, #276]	@ 0x114
 802238e:	6862      	ldr	r2, [r4, #4]
 8022390:	6023      	str	r3, [r4, #0]
 8022392:	3a01      	subs	r2, #1
 8022394:	6062      	str	r2, [r4, #4]
 8022396:	e7ec      	b.n	8022372 <__ssvfiscanf_r+0x3e>
 8022398:	4621      	mov	r1, r4
 802239a:	4630      	mov	r0, r6
 802239c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 802239e:	4798      	blx	r3
 80223a0:	2800      	cmp	r0, #0
 80223a2:	d0e9      	beq.n	8022378 <__ssvfiscanf_r+0x44>
 80223a4:	e7ed      	b.n	8022382 <__ssvfiscanf_r+0x4e>
 80223a6:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 80223aa:	f040 8086 	bne.w	80224ba <__ssvfiscanf_r+0x186>
 80223ae:	9341      	str	r3, [sp, #260]	@ 0x104
 80223b0:	9343      	str	r3, [sp, #268]	@ 0x10c
 80223b2:	7853      	ldrb	r3, [r2, #1]
 80223b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80223b6:	bf04      	itt	eq
 80223b8:	2310      	moveq	r3, #16
 80223ba:	1c95      	addeq	r5, r2, #2
 80223bc:	f04f 020a 	mov.w	r2, #10
 80223c0:	bf08      	it	eq
 80223c2:	9341      	streq	r3, [sp, #260]	@ 0x104
 80223c4:	46aa      	mov	sl, r5
 80223c6:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80223ca:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80223ce:	2b09      	cmp	r3, #9
 80223d0:	d91e      	bls.n	8022410 <__ssvfiscanf_r+0xdc>
 80223d2:	f8df b22c 	ldr.w	fp, [pc, #556]	@ 8022600 <__ssvfiscanf_r+0x2cc>
 80223d6:	2203      	movs	r2, #3
 80223d8:	4658      	mov	r0, fp
 80223da:	f7fe fae8 	bl	80209ae <memchr>
 80223de:	b138      	cbz	r0, 80223f0 <__ssvfiscanf_r+0xbc>
 80223e0:	2301      	movs	r3, #1
 80223e2:	4655      	mov	r5, sl
 80223e4:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80223e6:	eba0 000b 	sub.w	r0, r0, fp
 80223ea:	4083      	lsls	r3, r0
 80223ec:	4313      	orrs	r3, r2
 80223ee:	9341      	str	r3, [sp, #260]	@ 0x104
 80223f0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80223f4:	2b78      	cmp	r3, #120	@ 0x78
 80223f6:	d806      	bhi.n	8022406 <__ssvfiscanf_r+0xd2>
 80223f8:	2b57      	cmp	r3, #87	@ 0x57
 80223fa:	d810      	bhi.n	802241e <__ssvfiscanf_r+0xea>
 80223fc:	2b25      	cmp	r3, #37	@ 0x25
 80223fe:	d05c      	beq.n	80224ba <__ssvfiscanf_r+0x186>
 8022400:	d856      	bhi.n	80224b0 <__ssvfiscanf_r+0x17c>
 8022402:	2b00      	cmp	r3, #0
 8022404:	d074      	beq.n	80224f0 <__ssvfiscanf_r+0x1bc>
 8022406:	2303      	movs	r3, #3
 8022408:	9347      	str	r3, [sp, #284]	@ 0x11c
 802240a:	230a      	movs	r3, #10
 802240c:	9342      	str	r3, [sp, #264]	@ 0x108
 802240e:	e087      	b.n	8022520 <__ssvfiscanf_r+0x1ec>
 8022410:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8022412:	4655      	mov	r5, sl
 8022414:	fb02 1103 	mla	r1, r2, r3, r1
 8022418:	3930      	subs	r1, #48	@ 0x30
 802241a:	9143      	str	r1, [sp, #268]	@ 0x10c
 802241c:	e7d2      	b.n	80223c4 <__ssvfiscanf_r+0x90>
 802241e:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8022422:	2a20      	cmp	r2, #32
 8022424:	d8ef      	bhi.n	8022406 <__ssvfiscanf_r+0xd2>
 8022426:	a101      	add	r1, pc, #4	@ (adr r1, 802242c <__ssvfiscanf_r+0xf8>)
 8022428:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802242c:	080224ff 	.word	0x080224ff
 8022430:	08022407 	.word	0x08022407
 8022434:	08022407 	.word	0x08022407
 8022438:	08022559 	.word	0x08022559
 802243c:	08022407 	.word	0x08022407
 8022440:	08022407 	.word	0x08022407
 8022444:	08022407 	.word	0x08022407
 8022448:	08022407 	.word	0x08022407
 802244c:	08022407 	.word	0x08022407
 8022450:	08022407 	.word	0x08022407
 8022454:	08022407 	.word	0x08022407
 8022458:	0802256f 	.word	0x0802256f
 802245c:	08022555 	.word	0x08022555
 8022460:	080224b7 	.word	0x080224b7
 8022464:	080224b7 	.word	0x080224b7
 8022468:	080224b7 	.word	0x080224b7
 802246c:	08022407 	.word	0x08022407
 8022470:	08022511 	.word	0x08022511
 8022474:	08022407 	.word	0x08022407
 8022478:	08022407 	.word	0x08022407
 802247c:	08022407 	.word	0x08022407
 8022480:	08022407 	.word	0x08022407
 8022484:	0802257f 	.word	0x0802257f
 8022488:	08022519 	.word	0x08022519
 802248c:	080224f7 	.word	0x080224f7
 8022490:	08022407 	.word	0x08022407
 8022494:	08022407 	.word	0x08022407
 8022498:	0802257b 	.word	0x0802257b
 802249c:	08022407 	.word	0x08022407
 80224a0:	08022555 	.word	0x08022555
 80224a4:	08022407 	.word	0x08022407
 80224a8:	08022407 	.word	0x08022407
 80224ac:	080224ff 	.word	0x080224ff
 80224b0:	3b45      	subs	r3, #69	@ 0x45
 80224b2:	2b02      	cmp	r3, #2
 80224b4:	d8a7      	bhi.n	8022406 <__ssvfiscanf_r+0xd2>
 80224b6:	2305      	movs	r3, #5
 80224b8:	e031      	b.n	802251e <__ssvfiscanf_r+0x1ea>
 80224ba:	6863      	ldr	r3, [r4, #4]
 80224bc:	2b00      	cmp	r3, #0
 80224be:	dd0d      	ble.n	80224dc <__ssvfiscanf_r+0x1a8>
 80224c0:	6823      	ldr	r3, [r4, #0]
 80224c2:	781a      	ldrb	r2, [r3, #0]
 80224c4:	454a      	cmp	r2, r9
 80224c6:	f040 80a7 	bne.w	8022618 <__ssvfiscanf_r+0x2e4>
 80224ca:	3301      	adds	r3, #1
 80224cc:	6862      	ldr	r2, [r4, #4]
 80224ce:	6023      	str	r3, [r4, #0]
 80224d0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80224d2:	3a01      	subs	r2, #1
 80224d4:	3301      	adds	r3, #1
 80224d6:	6062      	str	r2, [r4, #4]
 80224d8:	9345      	str	r3, [sp, #276]	@ 0x114
 80224da:	e752      	b.n	8022382 <__ssvfiscanf_r+0x4e>
 80224dc:	4621      	mov	r1, r4
 80224de:	4630      	mov	r0, r6
 80224e0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80224e2:	4798      	blx	r3
 80224e4:	2800      	cmp	r0, #0
 80224e6:	d0eb      	beq.n	80224c0 <__ssvfiscanf_r+0x18c>
 80224e8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80224ea:	2800      	cmp	r0, #0
 80224ec:	f040 808c 	bne.w	8022608 <__ssvfiscanf_r+0x2d4>
 80224f0:	f04f 30ff 	mov.w	r0, #4294967295
 80224f4:	e08c      	b.n	8022610 <__ssvfiscanf_r+0x2dc>
 80224f6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80224f8:	f042 0220 	orr.w	r2, r2, #32
 80224fc:	9241      	str	r2, [sp, #260]	@ 0x104
 80224fe:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8022500:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8022504:	9241      	str	r2, [sp, #260]	@ 0x104
 8022506:	2210      	movs	r2, #16
 8022508:	2b6e      	cmp	r3, #110	@ 0x6e
 802250a:	9242      	str	r2, [sp, #264]	@ 0x108
 802250c:	d902      	bls.n	8022514 <__ssvfiscanf_r+0x1e0>
 802250e:	e005      	b.n	802251c <__ssvfiscanf_r+0x1e8>
 8022510:	2300      	movs	r3, #0
 8022512:	9342      	str	r3, [sp, #264]	@ 0x108
 8022514:	2303      	movs	r3, #3
 8022516:	e002      	b.n	802251e <__ssvfiscanf_r+0x1ea>
 8022518:	2308      	movs	r3, #8
 802251a:	9342      	str	r3, [sp, #264]	@ 0x108
 802251c:	2304      	movs	r3, #4
 802251e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8022520:	6863      	ldr	r3, [r4, #4]
 8022522:	2b00      	cmp	r3, #0
 8022524:	dd39      	ble.n	802259a <__ssvfiscanf_r+0x266>
 8022526:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8022528:	0659      	lsls	r1, r3, #25
 802252a:	d404      	bmi.n	8022536 <__ssvfiscanf_r+0x202>
 802252c:	6823      	ldr	r3, [r4, #0]
 802252e:	781a      	ldrb	r2, [r3, #0]
 8022530:	5cba      	ldrb	r2, [r7, r2]
 8022532:	0712      	lsls	r2, r2, #28
 8022534:	d438      	bmi.n	80225a8 <__ssvfiscanf_r+0x274>
 8022536:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8022538:	2b02      	cmp	r3, #2
 802253a:	dc47      	bgt.n	80225cc <__ssvfiscanf_r+0x298>
 802253c:	466b      	mov	r3, sp
 802253e:	4622      	mov	r2, r4
 8022540:	4630      	mov	r0, r6
 8022542:	a941      	add	r1, sp, #260	@ 0x104
 8022544:	f000 f9aa 	bl	802289c <_scanf_chars>
 8022548:	2801      	cmp	r0, #1
 802254a:	d065      	beq.n	8022618 <__ssvfiscanf_r+0x2e4>
 802254c:	2802      	cmp	r0, #2
 802254e:	f47f af18 	bne.w	8022382 <__ssvfiscanf_r+0x4e>
 8022552:	e7c9      	b.n	80224e8 <__ssvfiscanf_r+0x1b4>
 8022554:	220a      	movs	r2, #10
 8022556:	e7d7      	b.n	8022508 <__ssvfiscanf_r+0x1d4>
 8022558:	4629      	mov	r1, r5
 802255a:	4640      	mov	r0, r8
 802255c:	f000 fc05 	bl	8022d6a <__sccl>
 8022560:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8022562:	4605      	mov	r5, r0
 8022564:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022568:	9341      	str	r3, [sp, #260]	@ 0x104
 802256a:	2301      	movs	r3, #1
 802256c:	e7d7      	b.n	802251e <__ssvfiscanf_r+0x1ea>
 802256e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8022570:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022574:	9341      	str	r3, [sp, #260]	@ 0x104
 8022576:	2300      	movs	r3, #0
 8022578:	e7d1      	b.n	802251e <__ssvfiscanf_r+0x1ea>
 802257a:	2302      	movs	r3, #2
 802257c:	e7cf      	b.n	802251e <__ssvfiscanf_r+0x1ea>
 802257e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8022580:	06c3      	lsls	r3, r0, #27
 8022582:	f53f aefe 	bmi.w	8022382 <__ssvfiscanf_r+0x4e>
 8022586:	9b00      	ldr	r3, [sp, #0]
 8022588:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 802258a:	1d19      	adds	r1, r3, #4
 802258c:	9100      	str	r1, [sp, #0]
 802258e:	681b      	ldr	r3, [r3, #0]
 8022590:	07c0      	lsls	r0, r0, #31
 8022592:	bf4c      	ite	mi
 8022594:	801a      	strhmi	r2, [r3, #0]
 8022596:	601a      	strpl	r2, [r3, #0]
 8022598:	e6f3      	b.n	8022382 <__ssvfiscanf_r+0x4e>
 802259a:	4621      	mov	r1, r4
 802259c:	4630      	mov	r0, r6
 802259e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80225a0:	4798      	blx	r3
 80225a2:	2800      	cmp	r0, #0
 80225a4:	d0bf      	beq.n	8022526 <__ssvfiscanf_r+0x1f2>
 80225a6:	e79f      	b.n	80224e8 <__ssvfiscanf_r+0x1b4>
 80225a8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80225aa:	3201      	adds	r2, #1
 80225ac:	9245      	str	r2, [sp, #276]	@ 0x114
 80225ae:	6862      	ldr	r2, [r4, #4]
 80225b0:	3a01      	subs	r2, #1
 80225b2:	2a00      	cmp	r2, #0
 80225b4:	6062      	str	r2, [r4, #4]
 80225b6:	dd02      	ble.n	80225be <__ssvfiscanf_r+0x28a>
 80225b8:	3301      	adds	r3, #1
 80225ba:	6023      	str	r3, [r4, #0]
 80225bc:	e7b6      	b.n	802252c <__ssvfiscanf_r+0x1f8>
 80225be:	4621      	mov	r1, r4
 80225c0:	4630      	mov	r0, r6
 80225c2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80225c4:	4798      	blx	r3
 80225c6:	2800      	cmp	r0, #0
 80225c8:	d0b0      	beq.n	802252c <__ssvfiscanf_r+0x1f8>
 80225ca:	e78d      	b.n	80224e8 <__ssvfiscanf_r+0x1b4>
 80225cc:	2b04      	cmp	r3, #4
 80225ce:	dc06      	bgt.n	80225de <__ssvfiscanf_r+0x2aa>
 80225d0:	466b      	mov	r3, sp
 80225d2:	4622      	mov	r2, r4
 80225d4:	4630      	mov	r0, r6
 80225d6:	a941      	add	r1, sp, #260	@ 0x104
 80225d8:	f000 f9ba 	bl	8022950 <_scanf_i>
 80225dc:	e7b4      	b.n	8022548 <__ssvfiscanf_r+0x214>
 80225de:	4b09      	ldr	r3, [pc, #36]	@ (8022604 <__ssvfiscanf_r+0x2d0>)
 80225e0:	2b00      	cmp	r3, #0
 80225e2:	f43f aece 	beq.w	8022382 <__ssvfiscanf_r+0x4e>
 80225e6:	466b      	mov	r3, sp
 80225e8:	4622      	mov	r2, r4
 80225ea:	4630      	mov	r0, r6
 80225ec:	a941      	add	r1, sp, #260	@ 0x104
 80225ee:	f3af 8000 	nop.w
 80225f2:	e7a9      	b.n	8022548 <__ssvfiscanf_r+0x214>
 80225f4:	08022281 	.word	0x08022281
 80225f8:	080222fb 	.word	0x080222fb
 80225fc:	0802f249 	.word	0x0802f249
 8022600:	0802f218 	.word	0x0802f218
 8022604:	00000000 	.word	0x00000000
 8022608:	89a3      	ldrh	r3, [r4, #12]
 802260a:	065b      	lsls	r3, r3, #25
 802260c:	f53f af70 	bmi.w	80224f0 <__ssvfiscanf_r+0x1bc>
 8022610:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8022614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022618:	9844      	ldr	r0, [sp, #272]	@ 0x110
 802261a:	e7f9      	b.n	8022610 <__ssvfiscanf_r+0x2dc>

0802261c <__sfputc_r>:
 802261c:	6893      	ldr	r3, [r2, #8]
 802261e:	b410      	push	{r4}
 8022620:	3b01      	subs	r3, #1
 8022622:	2b00      	cmp	r3, #0
 8022624:	6093      	str	r3, [r2, #8]
 8022626:	da07      	bge.n	8022638 <__sfputc_r+0x1c>
 8022628:	6994      	ldr	r4, [r2, #24]
 802262a:	42a3      	cmp	r3, r4
 802262c:	db01      	blt.n	8022632 <__sfputc_r+0x16>
 802262e:	290a      	cmp	r1, #10
 8022630:	d102      	bne.n	8022638 <__sfputc_r+0x1c>
 8022632:	bc10      	pop	{r4}
 8022634:	f7fe b84b 	b.w	80206ce <__swbuf_r>
 8022638:	6813      	ldr	r3, [r2, #0]
 802263a:	1c58      	adds	r0, r3, #1
 802263c:	6010      	str	r0, [r2, #0]
 802263e:	7019      	strb	r1, [r3, #0]
 8022640:	4608      	mov	r0, r1
 8022642:	bc10      	pop	{r4}
 8022644:	4770      	bx	lr

08022646 <__sfputs_r>:
 8022646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022648:	4606      	mov	r6, r0
 802264a:	460f      	mov	r7, r1
 802264c:	4614      	mov	r4, r2
 802264e:	18d5      	adds	r5, r2, r3
 8022650:	42ac      	cmp	r4, r5
 8022652:	d101      	bne.n	8022658 <__sfputs_r+0x12>
 8022654:	2000      	movs	r0, #0
 8022656:	e007      	b.n	8022668 <__sfputs_r+0x22>
 8022658:	463a      	mov	r2, r7
 802265a:	4630      	mov	r0, r6
 802265c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022660:	f7ff ffdc 	bl	802261c <__sfputc_r>
 8022664:	1c43      	adds	r3, r0, #1
 8022666:	d1f3      	bne.n	8022650 <__sfputs_r+0xa>
 8022668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802266c <_vfiprintf_r>:
 802266c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022670:	460d      	mov	r5, r1
 8022672:	4614      	mov	r4, r2
 8022674:	4698      	mov	r8, r3
 8022676:	4606      	mov	r6, r0
 8022678:	b09d      	sub	sp, #116	@ 0x74
 802267a:	b118      	cbz	r0, 8022684 <_vfiprintf_r+0x18>
 802267c:	6a03      	ldr	r3, [r0, #32]
 802267e:	b90b      	cbnz	r3, 8022684 <_vfiprintf_r+0x18>
 8022680:	f7fd fed8 	bl	8020434 <__sinit>
 8022684:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8022686:	07d9      	lsls	r1, r3, #31
 8022688:	d405      	bmi.n	8022696 <_vfiprintf_r+0x2a>
 802268a:	89ab      	ldrh	r3, [r5, #12]
 802268c:	059a      	lsls	r2, r3, #22
 802268e:	d402      	bmi.n	8022696 <_vfiprintf_r+0x2a>
 8022690:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8022692:	f7fe f98a 	bl	80209aa <__retarget_lock_acquire_recursive>
 8022696:	89ab      	ldrh	r3, [r5, #12]
 8022698:	071b      	lsls	r3, r3, #28
 802269a:	d501      	bpl.n	80226a0 <_vfiprintf_r+0x34>
 802269c:	692b      	ldr	r3, [r5, #16]
 802269e:	b99b      	cbnz	r3, 80226c8 <_vfiprintf_r+0x5c>
 80226a0:	4629      	mov	r1, r5
 80226a2:	4630      	mov	r0, r6
 80226a4:	f7fe f852 	bl	802074c <__swsetup_r>
 80226a8:	b170      	cbz	r0, 80226c8 <_vfiprintf_r+0x5c>
 80226aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80226ac:	07dc      	lsls	r4, r3, #31
 80226ae:	d504      	bpl.n	80226ba <_vfiprintf_r+0x4e>
 80226b0:	f04f 30ff 	mov.w	r0, #4294967295
 80226b4:	b01d      	add	sp, #116	@ 0x74
 80226b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80226ba:	89ab      	ldrh	r3, [r5, #12]
 80226bc:	0598      	lsls	r0, r3, #22
 80226be:	d4f7      	bmi.n	80226b0 <_vfiprintf_r+0x44>
 80226c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80226c2:	f7fe f973 	bl	80209ac <__retarget_lock_release_recursive>
 80226c6:	e7f3      	b.n	80226b0 <_vfiprintf_r+0x44>
 80226c8:	2300      	movs	r3, #0
 80226ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80226cc:	2320      	movs	r3, #32
 80226ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80226d2:	2330      	movs	r3, #48	@ 0x30
 80226d4:	f04f 0901 	mov.w	r9, #1
 80226d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80226dc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8022888 <_vfiprintf_r+0x21c>
 80226e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80226e4:	4623      	mov	r3, r4
 80226e6:	469a      	mov	sl, r3
 80226e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80226ec:	b10a      	cbz	r2, 80226f2 <_vfiprintf_r+0x86>
 80226ee:	2a25      	cmp	r2, #37	@ 0x25
 80226f0:	d1f9      	bne.n	80226e6 <_vfiprintf_r+0x7a>
 80226f2:	ebba 0b04 	subs.w	fp, sl, r4
 80226f6:	d00b      	beq.n	8022710 <_vfiprintf_r+0xa4>
 80226f8:	465b      	mov	r3, fp
 80226fa:	4622      	mov	r2, r4
 80226fc:	4629      	mov	r1, r5
 80226fe:	4630      	mov	r0, r6
 8022700:	f7ff ffa1 	bl	8022646 <__sfputs_r>
 8022704:	3001      	adds	r0, #1
 8022706:	f000 80a7 	beq.w	8022858 <_vfiprintf_r+0x1ec>
 802270a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802270c:	445a      	add	r2, fp
 802270e:	9209      	str	r2, [sp, #36]	@ 0x24
 8022710:	f89a 3000 	ldrb.w	r3, [sl]
 8022714:	2b00      	cmp	r3, #0
 8022716:	f000 809f 	beq.w	8022858 <_vfiprintf_r+0x1ec>
 802271a:	2300      	movs	r3, #0
 802271c:	f04f 32ff 	mov.w	r2, #4294967295
 8022720:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022724:	f10a 0a01 	add.w	sl, sl, #1
 8022728:	9304      	str	r3, [sp, #16]
 802272a:	9307      	str	r3, [sp, #28]
 802272c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8022730:	931a      	str	r3, [sp, #104]	@ 0x68
 8022732:	4654      	mov	r4, sl
 8022734:	2205      	movs	r2, #5
 8022736:	f814 1b01 	ldrb.w	r1, [r4], #1
 802273a:	4853      	ldr	r0, [pc, #332]	@ (8022888 <_vfiprintf_r+0x21c>)
 802273c:	f7fe f937 	bl	80209ae <memchr>
 8022740:	9a04      	ldr	r2, [sp, #16]
 8022742:	b9d8      	cbnz	r0, 802277c <_vfiprintf_r+0x110>
 8022744:	06d1      	lsls	r1, r2, #27
 8022746:	bf44      	itt	mi
 8022748:	2320      	movmi	r3, #32
 802274a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802274e:	0713      	lsls	r3, r2, #28
 8022750:	bf44      	itt	mi
 8022752:	232b      	movmi	r3, #43	@ 0x2b
 8022754:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8022758:	f89a 3000 	ldrb.w	r3, [sl]
 802275c:	2b2a      	cmp	r3, #42	@ 0x2a
 802275e:	d015      	beq.n	802278c <_vfiprintf_r+0x120>
 8022760:	4654      	mov	r4, sl
 8022762:	2000      	movs	r0, #0
 8022764:	f04f 0c0a 	mov.w	ip, #10
 8022768:	9a07      	ldr	r2, [sp, #28]
 802276a:	4621      	mov	r1, r4
 802276c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022770:	3b30      	subs	r3, #48	@ 0x30
 8022772:	2b09      	cmp	r3, #9
 8022774:	d94b      	bls.n	802280e <_vfiprintf_r+0x1a2>
 8022776:	b1b0      	cbz	r0, 80227a6 <_vfiprintf_r+0x13a>
 8022778:	9207      	str	r2, [sp, #28]
 802277a:	e014      	b.n	80227a6 <_vfiprintf_r+0x13a>
 802277c:	eba0 0308 	sub.w	r3, r0, r8
 8022780:	fa09 f303 	lsl.w	r3, r9, r3
 8022784:	4313      	orrs	r3, r2
 8022786:	46a2      	mov	sl, r4
 8022788:	9304      	str	r3, [sp, #16]
 802278a:	e7d2      	b.n	8022732 <_vfiprintf_r+0xc6>
 802278c:	9b03      	ldr	r3, [sp, #12]
 802278e:	1d19      	adds	r1, r3, #4
 8022790:	681b      	ldr	r3, [r3, #0]
 8022792:	9103      	str	r1, [sp, #12]
 8022794:	2b00      	cmp	r3, #0
 8022796:	bfbb      	ittet	lt
 8022798:	425b      	neglt	r3, r3
 802279a:	f042 0202 	orrlt.w	r2, r2, #2
 802279e:	9307      	strge	r3, [sp, #28]
 80227a0:	9307      	strlt	r3, [sp, #28]
 80227a2:	bfb8      	it	lt
 80227a4:	9204      	strlt	r2, [sp, #16]
 80227a6:	7823      	ldrb	r3, [r4, #0]
 80227a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80227aa:	d10a      	bne.n	80227c2 <_vfiprintf_r+0x156>
 80227ac:	7863      	ldrb	r3, [r4, #1]
 80227ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80227b0:	d132      	bne.n	8022818 <_vfiprintf_r+0x1ac>
 80227b2:	9b03      	ldr	r3, [sp, #12]
 80227b4:	3402      	adds	r4, #2
 80227b6:	1d1a      	adds	r2, r3, #4
 80227b8:	681b      	ldr	r3, [r3, #0]
 80227ba:	9203      	str	r2, [sp, #12]
 80227bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80227c0:	9305      	str	r3, [sp, #20]
 80227c2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 802288c <_vfiprintf_r+0x220>
 80227c6:	2203      	movs	r2, #3
 80227c8:	4650      	mov	r0, sl
 80227ca:	7821      	ldrb	r1, [r4, #0]
 80227cc:	f7fe f8ef 	bl	80209ae <memchr>
 80227d0:	b138      	cbz	r0, 80227e2 <_vfiprintf_r+0x176>
 80227d2:	2240      	movs	r2, #64	@ 0x40
 80227d4:	9b04      	ldr	r3, [sp, #16]
 80227d6:	eba0 000a 	sub.w	r0, r0, sl
 80227da:	4082      	lsls	r2, r0
 80227dc:	4313      	orrs	r3, r2
 80227de:	3401      	adds	r4, #1
 80227e0:	9304      	str	r3, [sp, #16]
 80227e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80227e6:	2206      	movs	r2, #6
 80227e8:	4829      	ldr	r0, [pc, #164]	@ (8022890 <_vfiprintf_r+0x224>)
 80227ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80227ee:	f7fe f8de 	bl	80209ae <memchr>
 80227f2:	2800      	cmp	r0, #0
 80227f4:	d03f      	beq.n	8022876 <_vfiprintf_r+0x20a>
 80227f6:	4b27      	ldr	r3, [pc, #156]	@ (8022894 <_vfiprintf_r+0x228>)
 80227f8:	bb1b      	cbnz	r3, 8022842 <_vfiprintf_r+0x1d6>
 80227fa:	9b03      	ldr	r3, [sp, #12]
 80227fc:	3307      	adds	r3, #7
 80227fe:	f023 0307 	bic.w	r3, r3, #7
 8022802:	3308      	adds	r3, #8
 8022804:	9303      	str	r3, [sp, #12]
 8022806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022808:	443b      	add	r3, r7
 802280a:	9309      	str	r3, [sp, #36]	@ 0x24
 802280c:	e76a      	b.n	80226e4 <_vfiprintf_r+0x78>
 802280e:	460c      	mov	r4, r1
 8022810:	2001      	movs	r0, #1
 8022812:	fb0c 3202 	mla	r2, ip, r2, r3
 8022816:	e7a8      	b.n	802276a <_vfiprintf_r+0xfe>
 8022818:	2300      	movs	r3, #0
 802281a:	f04f 0c0a 	mov.w	ip, #10
 802281e:	4619      	mov	r1, r3
 8022820:	3401      	adds	r4, #1
 8022822:	9305      	str	r3, [sp, #20]
 8022824:	4620      	mov	r0, r4
 8022826:	f810 2b01 	ldrb.w	r2, [r0], #1
 802282a:	3a30      	subs	r2, #48	@ 0x30
 802282c:	2a09      	cmp	r2, #9
 802282e:	d903      	bls.n	8022838 <_vfiprintf_r+0x1cc>
 8022830:	2b00      	cmp	r3, #0
 8022832:	d0c6      	beq.n	80227c2 <_vfiprintf_r+0x156>
 8022834:	9105      	str	r1, [sp, #20]
 8022836:	e7c4      	b.n	80227c2 <_vfiprintf_r+0x156>
 8022838:	4604      	mov	r4, r0
 802283a:	2301      	movs	r3, #1
 802283c:	fb0c 2101 	mla	r1, ip, r1, r2
 8022840:	e7f0      	b.n	8022824 <_vfiprintf_r+0x1b8>
 8022842:	ab03      	add	r3, sp, #12
 8022844:	9300      	str	r3, [sp, #0]
 8022846:	462a      	mov	r2, r5
 8022848:	4630      	mov	r0, r6
 802284a:	4b13      	ldr	r3, [pc, #76]	@ (8022898 <_vfiprintf_r+0x22c>)
 802284c:	a904      	add	r1, sp, #16
 802284e:	f7fd f9a9 	bl	801fba4 <_printf_float>
 8022852:	4607      	mov	r7, r0
 8022854:	1c78      	adds	r0, r7, #1
 8022856:	d1d6      	bne.n	8022806 <_vfiprintf_r+0x19a>
 8022858:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802285a:	07d9      	lsls	r1, r3, #31
 802285c:	d405      	bmi.n	802286a <_vfiprintf_r+0x1fe>
 802285e:	89ab      	ldrh	r3, [r5, #12]
 8022860:	059a      	lsls	r2, r3, #22
 8022862:	d402      	bmi.n	802286a <_vfiprintf_r+0x1fe>
 8022864:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8022866:	f7fe f8a1 	bl	80209ac <__retarget_lock_release_recursive>
 802286a:	89ab      	ldrh	r3, [r5, #12]
 802286c:	065b      	lsls	r3, r3, #25
 802286e:	f53f af1f 	bmi.w	80226b0 <_vfiprintf_r+0x44>
 8022872:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022874:	e71e      	b.n	80226b4 <_vfiprintf_r+0x48>
 8022876:	ab03      	add	r3, sp, #12
 8022878:	9300      	str	r3, [sp, #0]
 802287a:	462a      	mov	r2, r5
 802287c:	4630      	mov	r0, r6
 802287e:	4b06      	ldr	r3, [pc, #24]	@ (8022898 <_vfiprintf_r+0x22c>)
 8022880:	a904      	add	r1, sp, #16
 8022882:	f7fd fc2d 	bl	80200e0 <_printf_i>
 8022886:	e7e4      	b.n	8022852 <_vfiprintf_r+0x1e6>
 8022888:	0802f212 	.word	0x0802f212
 802288c:	0802f218 	.word	0x0802f218
 8022890:	0802f21c 	.word	0x0802f21c
 8022894:	0801fba5 	.word	0x0801fba5
 8022898:	08022647 	.word	0x08022647

0802289c <_scanf_chars>:
 802289c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80228a0:	4615      	mov	r5, r2
 80228a2:	688a      	ldr	r2, [r1, #8]
 80228a4:	4680      	mov	r8, r0
 80228a6:	460c      	mov	r4, r1
 80228a8:	b932      	cbnz	r2, 80228b8 <_scanf_chars+0x1c>
 80228aa:	698a      	ldr	r2, [r1, #24]
 80228ac:	2a00      	cmp	r2, #0
 80228ae:	bf14      	ite	ne
 80228b0:	f04f 32ff 	movne.w	r2, #4294967295
 80228b4:	2201      	moveq	r2, #1
 80228b6:	608a      	str	r2, [r1, #8]
 80228b8:	2700      	movs	r7, #0
 80228ba:	6822      	ldr	r2, [r4, #0]
 80228bc:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 802294c <_scanf_chars+0xb0>
 80228c0:	06d1      	lsls	r1, r2, #27
 80228c2:	bf5f      	itttt	pl
 80228c4:	681a      	ldrpl	r2, [r3, #0]
 80228c6:	1d11      	addpl	r1, r2, #4
 80228c8:	6019      	strpl	r1, [r3, #0]
 80228ca:	6816      	ldrpl	r6, [r2, #0]
 80228cc:	69a0      	ldr	r0, [r4, #24]
 80228ce:	b188      	cbz	r0, 80228f4 <_scanf_chars+0x58>
 80228d0:	2801      	cmp	r0, #1
 80228d2:	d107      	bne.n	80228e4 <_scanf_chars+0x48>
 80228d4:	682b      	ldr	r3, [r5, #0]
 80228d6:	781a      	ldrb	r2, [r3, #0]
 80228d8:	6963      	ldr	r3, [r4, #20]
 80228da:	5c9b      	ldrb	r3, [r3, r2]
 80228dc:	b953      	cbnz	r3, 80228f4 <_scanf_chars+0x58>
 80228de:	2f00      	cmp	r7, #0
 80228e0:	d031      	beq.n	8022946 <_scanf_chars+0xaa>
 80228e2:	e022      	b.n	802292a <_scanf_chars+0x8e>
 80228e4:	2802      	cmp	r0, #2
 80228e6:	d120      	bne.n	802292a <_scanf_chars+0x8e>
 80228e8:	682b      	ldr	r3, [r5, #0]
 80228ea:	781b      	ldrb	r3, [r3, #0]
 80228ec:	f819 3003 	ldrb.w	r3, [r9, r3]
 80228f0:	071b      	lsls	r3, r3, #28
 80228f2:	d41a      	bmi.n	802292a <_scanf_chars+0x8e>
 80228f4:	6823      	ldr	r3, [r4, #0]
 80228f6:	3701      	adds	r7, #1
 80228f8:	06da      	lsls	r2, r3, #27
 80228fa:	bf5e      	ittt	pl
 80228fc:	682b      	ldrpl	r3, [r5, #0]
 80228fe:	781b      	ldrbpl	r3, [r3, #0]
 8022900:	f806 3b01 	strbpl.w	r3, [r6], #1
 8022904:	682a      	ldr	r2, [r5, #0]
 8022906:	686b      	ldr	r3, [r5, #4]
 8022908:	3201      	adds	r2, #1
 802290a:	602a      	str	r2, [r5, #0]
 802290c:	68a2      	ldr	r2, [r4, #8]
 802290e:	3b01      	subs	r3, #1
 8022910:	3a01      	subs	r2, #1
 8022912:	606b      	str	r3, [r5, #4]
 8022914:	60a2      	str	r2, [r4, #8]
 8022916:	b142      	cbz	r2, 802292a <_scanf_chars+0x8e>
 8022918:	2b00      	cmp	r3, #0
 802291a:	dcd7      	bgt.n	80228cc <_scanf_chars+0x30>
 802291c:	4629      	mov	r1, r5
 802291e:	4640      	mov	r0, r8
 8022920:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8022924:	4798      	blx	r3
 8022926:	2800      	cmp	r0, #0
 8022928:	d0d0      	beq.n	80228cc <_scanf_chars+0x30>
 802292a:	6823      	ldr	r3, [r4, #0]
 802292c:	f013 0310 	ands.w	r3, r3, #16
 8022930:	d105      	bne.n	802293e <_scanf_chars+0xa2>
 8022932:	68e2      	ldr	r2, [r4, #12]
 8022934:	3201      	adds	r2, #1
 8022936:	60e2      	str	r2, [r4, #12]
 8022938:	69a2      	ldr	r2, [r4, #24]
 802293a:	b102      	cbz	r2, 802293e <_scanf_chars+0xa2>
 802293c:	7033      	strb	r3, [r6, #0]
 802293e:	2000      	movs	r0, #0
 8022940:	6923      	ldr	r3, [r4, #16]
 8022942:	443b      	add	r3, r7
 8022944:	6123      	str	r3, [r4, #16]
 8022946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802294a:	bf00      	nop
 802294c:	0802f249 	.word	0x0802f249

08022950 <_scanf_i>:
 8022950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022954:	460c      	mov	r4, r1
 8022956:	4698      	mov	r8, r3
 8022958:	4b72      	ldr	r3, [pc, #456]	@ (8022b24 <_scanf_i+0x1d4>)
 802295a:	b087      	sub	sp, #28
 802295c:	4682      	mov	sl, r0
 802295e:	4616      	mov	r6, r2
 8022960:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8022964:	ab03      	add	r3, sp, #12
 8022966:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802296a:	4b6f      	ldr	r3, [pc, #444]	@ (8022b28 <_scanf_i+0x1d8>)
 802296c:	69a1      	ldr	r1, [r4, #24]
 802296e:	4a6f      	ldr	r2, [pc, #444]	@ (8022b2c <_scanf_i+0x1dc>)
 8022970:	4627      	mov	r7, r4
 8022972:	2903      	cmp	r1, #3
 8022974:	bf08      	it	eq
 8022976:	461a      	moveq	r2, r3
 8022978:	68a3      	ldr	r3, [r4, #8]
 802297a:	9201      	str	r2, [sp, #4]
 802297c:	1e5a      	subs	r2, r3, #1
 802297e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8022982:	bf81      	itttt	hi
 8022984:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8022988:	eb03 0905 	addhi.w	r9, r3, r5
 802298c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8022990:	60a3      	strhi	r3, [r4, #8]
 8022992:	f857 3b1c 	ldr.w	r3, [r7], #28
 8022996:	bf98      	it	ls
 8022998:	f04f 0900 	movls.w	r9, #0
 802299c:	463d      	mov	r5, r7
 802299e:	f04f 0b00 	mov.w	fp, #0
 80229a2:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80229a6:	6023      	str	r3, [r4, #0]
 80229a8:	6831      	ldr	r1, [r6, #0]
 80229aa:	ab03      	add	r3, sp, #12
 80229ac:	2202      	movs	r2, #2
 80229ae:	7809      	ldrb	r1, [r1, #0]
 80229b0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80229b4:	f7fd fffb 	bl	80209ae <memchr>
 80229b8:	b328      	cbz	r0, 8022a06 <_scanf_i+0xb6>
 80229ba:	f1bb 0f01 	cmp.w	fp, #1
 80229be:	d159      	bne.n	8022a74 <_scanf_i+0x124>
 80229c0:	6862      	ldr	r2, [r4, #4]
 80229c2:	b92a      	cbnz	r2, 80229d0 <_scanf_i+0x80>
 80229c4:	2108      	movs	r1, #8
 80229c6:	6822      	ldr	r2, [r4, #0]
 80229c8:	6061      	str	r1, [r4, #4]
 80229ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80229ce:	6022      	str	r2, [r4, #0]
 80229d0:	6822      	ldr	r2, [r4, #0]
 80229d2:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80229d6:	6022      	str	r2, [r4, #0]
 80229d8:	68a2      	ldr	r2, [r4, #8]
 80229da:	1e51      	subs	r1, r2, #1
 80229dc:	60a1      	str	r1, [r4, #8]
 80229de:	b192      	cbz	r2, 8022a06 <_scanf_i+0xb6>
 80229e0:	6832      	ldr	r2, [r6, #0]
 80229e2:	1c51      	adds	r1, r2, #1
 80229e4:	6031      	str	r1, [r6, #0]
 80229e6:	7812      	ldrb	r2, [r2, #0]
 80229e8:	f805 2b01 	strb.w	r2, [r5], #1
 80229ec:	6872      	ldr	r2, [r6, #4]
 80229ee:	3a01      	subs	r2, #1
 80229f0:	2a00      	cmp	r2, #0
 80229f2:	6072      	str	r2, [r6, #4]
 80229f4:	dc07      	bgt.n	8022a06 <_scanf_i+0xb6>
 80229f6:	4631      	mov	r1, r6
 80229f8:	4650      	mov	r0, sl
 80229fa:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80229fe:	4790      	blx	r2
 8022a00:	2800      	cmp	r0, #0
 8022a02:	f040 8085 	bne.w	8022b10 <_scanf_i+0x1c0>
 8022a06:	f10b 0b01 	add.w	fp, fp, #1
 8022a0a:	f1bb 0f03 	cmp.w	fp, #3
 8022a0e:	d1cb      	bne.n	80229a8 <_scanf_i+0x58>
 8022a10:	6863      	ldr	r3, [r4, #4]
 8022a12:	b90b      	cbnz	r3, 8022a18 <_scanf_i+0xc8>
 8022a14:	230a      	movs	r3, #10
 8022a16:	6063      	str	r3, [r4, #4]
 8022a18:	6863      	ldr	r3, [r4, #4]
 8022a1a:	4945      	ldr	r1, [pc, #276]	@ (8022b30 <_scanf_i+0x1e0>)
 8022a1c:	6960      	ldr	r0, [r4, #20]
 8022a1e:	1ac9      	subs	r1, r1, r3
 8022a20:	f000 f9a3 	bl	8022d6a <__sccl>
 8022a24:	f04f 0b00 	mov.w	fp, #0
 8022a28:	68a3      	ldr	r3, [r4, #8]
 8022a2a:	6822      	ldr	r2, [r4, #0]
 8022a2c:	2b00      	cmp	r3, #0
 8022a2e:	d03d      	beq.n	8022aac <_scanf_i+0x15c>
 8022a30:	6831      	ldr	r1, [r6, #0]
 8022a32:	6960      	ldr	r0, [r4, #20]
 8022a34:	f891 c000 	ldrb.w	ip, [r1]
 8022a38:	f810 000c 	ldrb.w	r0, [r0, ip]
 8022a3c:	2800      	cmp	r0, #0
 8022a3e:	d035      	beq.n	8022aac <_scanf_i+0x15c>
 8022a40:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8022a44:	d124      	bne.n	8022a90 <_scanf_i+0x140>
 8022a46:	0510      	lsls	r0, r2, #20
 8022a48:	d522      	bpl.n	8022a90 <_scanf_i+0x140>
 8022a4a:	f10b 0b01 	add.w	fp, fp, #1
 8022a4e:	f1b9 0f00 	cmp.w	r9, #0
 8022a52:	d003      	beq.n	8022a5c <_scanf_i+0x10c>
 8022a54:	3301      	adds	r3, #1
 8022a56:	f109 39ff 	add.w	r9, r9, #4294967295
 8022a5a:	60a3      	str	r3, [r4, #8]
 8022a5c:	6873      	ldr	r3, [r6, #4]
 8022a5e:	3b01      	subs	r3, #1
 8022a60:	2b00      	cmp	r3, #0
 8022a62:	6073      	str	r3, [r6, #4]
 8022a64:	dd1b      	ble.n	8022a9e <_scanf_i+0x14e>
 8022a66:	6833      	ldr	r3, [r6, #0]
 8022a68:	3301      	adds	r3, #1
 8022a6a:	6033      	str	r3, [r6, #0]
 8022a6c:	68a3      	ldr	r3, [r4, #8]
 8022a6e:	3b01      	subs	r3, #1
 8022a70:	60a3      	str	r3, [r4, #8]
 8022a72:	e7d9      	b.n	8022a28 <_scanf_i+0xd8>
 8022a74:	f1bb 0f02 	cmp.w	fp, #2
 8022a78:	d1ae      	bne.n	80229d8 <_scanf_i+0x88>
 8022a7a:	6822      	ldr	r2, [r4, #0]
 8022a7c:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8022a80:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8022a84:	d1c4      	bne.n	8022a10 <_scanf_i+0xc0>
 8022a86:	2110      	movs	r1, #16
 8022a88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8022a8c:	6061      	str	r1, [r4, #4]
 8022a8e:	e7a2      	b.n	80229d6 <_scanf_i+0x86>
 8022a90:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8022a94:	6022      	str	r2, [r4, #0]
 8022a96:	780b      	ldrb	r3, [r1, #0]
 8022a98:	f805 3b01 	strb.w	r3, [r5], #1
 8022a9c:	e7de      	b.n	8022a5c <_scanf_i+0x10c>
 8022a9e:	4631      	mov	r1, r6
 8022aa0:	4650      	mov	r0, sl
 8022aa2:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8022aa6:	4798      	blx	r3
 8022aa8:	2800      	cmp	r0, #0
 8022aaa:	d0df      	beq.n	8022a6c <_scanf_i+0x11c>
 8022aac:	6823      	ldr	r3, [r4, #0]
 8022aae:	05d9      	lsls	r1, r3, #23
 8022ab0:	d50d      	bpl.n	8022ace <_scanf_i+0x17e>
 8022ab2:	42bd      	cmp	r5, r7
 8022ab4:	d909      	bls.n	8022aca <_scanf_i+0x17a>
 8022ab6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8022aba:	4632      	mov	r2, r6
 8022abc:	4650      	mov	r0, sl
 8022abe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8022ac2:	f105 39ff 	add.w	r9, r5, #4294967295
 8022ac6:	4798      	blx	r3
 8022ac8:	464d      	mov	r5, r9
 8022aca:	42bd      	cmp	r5, r7
 8022acc:	d028      	beq.n	8022b20 <_scanf_i+0x1d0>
 8022ace:	6822      	ldr	r2, [r4, #0]
 8022ad0:	f012 0210 	ands.w	r2, r2, #16
 8022ad4:	d113      	bne.n	8022afe <_scanf_i+0x1ae>
 8022ad6:	702a      	strb	r2, [r5, #0]
 8022ad8:	4639      	mov	r1, r7
 8022ada:	6863      	ldr	r3, [r4, #4]
 8022adc:	4650      	mov	r0, sl
 8022ade:	9e01      	ldr	r6, [sp, #4]
 8022ae0:	47b0      	blx	r6
 8022ae2:	f8d8 3000 	ldr.w	r3, [r8]
 8022ae6:	6821      	ldr	r1, [r4, #0]
 8022ae8:	1d1a      	adds	r2, r3, #4
 8022aea:	f8c8 2000 	str.w	r2, [r8]
 8022aee:	f011 0f20 	tst.w	r1, #32
 8022af2:	681b      	ldr	r3, [r3, #0]
 8022af4:	d00f      	beq.n	8022b16 <_scanf_i+0x1c6>
 8022af6:	6018      	str	r0, [r3, #0]
 8022af8:	68e3      	ldr	r3, [r4, #12]
 8022afa:	3301      	adds	r3, #1
 8022afc:	60e3      	str	r3, [r4, #12]
 8022afe:	2000      	movs	r0, #0
 8022b00:	6923      	ldr	r3, [r4, #16]
 8022b02:	1bed      	subs	r5, r5, r7
 8022b04:	445d      	add	r5, fp
 8022b06:	442b      	add	r3, r5
 8022b08:	6123      	str	r3, [r4, #16]
 8022b0a:	b007      	add	sp, #28
 8022b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b10:	f04f 0b00 	mov.w	fp, #0
 8022b14:	e7ca      	b.n	8022aac <_scanf_i+0x15c>
 8022b16:	07ca      	lsls	r2, r1, #31
 8022b18:	bf4c      	ite	mi
 8022b1a:	8018      	strhmi	r0, [r3, #0]
 8022b1c:	6018      	strpl	r0, [r3, #0]
 8022b1e:	e7eb      	b.n	8022af8 <_scanf_i+0x1a8>
 8022b20:	2001      	movs	r0, #1
 8022b22:	e7f2      	b.n	8022b0a <_scanf_i+0x1ba>
 8022b24:	08025f94 	.word	0x08025f94
 8022b28:	0801fa51 	.word	0x0801fa51
 8022b2c:	08023045 	.word	0x08023045
 8022b30:	0802f233 	.word	0x0802f233

08022b34 <__sflush_r>:
 8022b34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8022b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022b3a:	0716      	lsls	r6, r2, #28
 8022b3c:	4605      	mov	r5, r0
 8022b3e:	460c      	mov	r4, r1
 8022b40:	d454      	bmi.n	8022bec <__sflush_r+0xb8>
 8022b42:	684b      	ldr	r3, [r1, #4]
 8022b44:	2b00      	cmp	r3, #0
 8022b46:	dc02      	bgt.n	8022b4e <__sflush_r+0x1a>
 8022b48:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8022b4a:	2b00      	cmp	r3, #0
 8022b4c:	dd48      	ble.n	8022be0 <__sflush_r+0xac>
 8022b4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8022b50:	2e00      	cmp	r6, #0
 8022b52:	d045      	beq.n	8022be0 <__sflush_r+0xac>
 8022b54:	2300      	movs	r3, #0
 8022b56:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8022b5a:	682f      	ldr	r7, [r5, #0]
 8022b5c:	6a21      	ldr	r1, [r4, #32]
 8022b5e:	602b      	str	r3, [r5, #0]
 8022b60:	d030      	beq.n	8022bc4 <__sflush_r+0x90>
 8022b62:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8022b64:	89a3      	ldrh	r3, [r4, #12]
 8022b66:	0759      	lsls	r1, r3, #29
 8022b68:	d505      	bpl.n	8022b76 <__sflush_r+0x42>
 8022b6a:	6863      	ldr	r3, [r4, #4]
 8022b6c:	1ad2      	subs	r2, r2, r3
 8022b6e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8022b70:	b10b      	cbz	r3, 8022b76 <__sflush_r+0x42>
 8022b72:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8022b74:	1ad2      	subs	r2, r2, r3
 8022b76:	2300      	movs	r3, #0
 8022b78:	4628      	mov	r0, r5
 8022b7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8022b7c:	6a21      	ldr	r1, [r4, #32]
 8022b7e:	47b0      	blx	r6
 8022b80:	1c43      	adds	r3, r0, #1
 8022b82:	89a3      	ldrh	r3, [r4, #12]
 8022b84:	d106      	bne.n	8022b94 <__sflush_r+0x60>
 8022b86:	6829      	ldr	r1, [r5, #0]
 8022b88:	291d      	cmp	r1, #29
 8022b8a:	d82b      	bhi.n	8022be4 <__sflush_r+0xb0>
 8022b8c:	4a28      	ldr	r2, [pc, #160]	@ (8022c30 <__sflush_r+0xfc>)
 8022b8e:	40ca      	lsrs	r2, r1
 8022b90:	07d6      	lsls	r6, r2, #31
 8022b92:	d527      	bpl.n	8022be4 <__sflush_r+0xb0>
 8022b94:	2200      	movs	r2, #0
 8022b96:	6062      	str	r2, [r4, #4]
 8022b98:	6922      	ldr	r2, [r4, #16]
 8022b9a:	04d9      	lsls	r1, r3, #19
 8022b9c:	6022      	str	r2, [r4, #0]
 8022b9e:	d504      	bpl.n	8022baa <__sflush_r+0x76>
 8022ba0:	1c42      	adds	r2, r0, #1
 8022ba2:	d101      	bne.n	8022ba8 <__sflush_r+0x74>
 8022ba4:	682b      	ldr	r3, [r5, #0]
 8022ba6:	b903      	cbnz	r3, 8022baa <__sflush_r+0x76>
 8022ba8:	6560      	str	r0, [r4, #84]	@ 0x54
 8022baa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022bac:	602f      	str	r7, [r5, #0]
 8022bae:	b1b9      	cbz	r1, 8022be0 <__sflush_r+0xac>
 8022bb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8022bb4:	4299      	cmp	r1, r3
 8022bb6:	d002      	beq.n	8022bbe <__sflush_r+0x8a>
 8022bb8:	4628      	mov	r0, r5
 8022bba:	f7fe fd91 	bl	80216e0 <_free_r>
 8022bbe:	2300      	movs	r3, #0
 8022bc0:	6363      	str	r3, [r4, #52]	@ 0x34
 8022bc2:	e00d      	b.n	8022be0 <__sflush_r+0xac>
 8022bc4:	2301      	movs	r3, #1
 8022bc6:	4628      	mov	r0, r5
 8022bc8:	47b0      	blx	r6
 8022bca:	4602      	mov	r2, r0
 8022bcc:	1c50      	adds	r0, r2, #1
 8022bce:	d1c9      	bne.n	8022b64 <__sflush_r+0x30>
 8022bd0:	682b      	ldr	r3, [r5, #0]
 8022bd2:	2b00      	cmp	r3, #0
 8022bd4:	d0c6      	beq.n	8022b64 <__sflush_r+0x30>
 8022bd6:	2b1d      	cmp	r3, #29
 8022bd8:	d001      	beq.n	8022bde <__sflush_r+0xaa>
 8022bda:	2b16      	cmp	r3, #22
 8022bdc:	d11d      	bne.n	8022c1a <__sflush_r+0xe6>
 8022bde:	602f      	str	r7, [r5, #0]
 8022be0:	2000      	movs	r0, #0
 8022be2:	e021      	b.n	8022c28 <__sflush_r+0xf4>
 8022be4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022be8:	b21b      	sxth	r3, r3
 8022bea:	e01a      	b.n	8022c22 <__sflush_r+0xee>
 8022bec:	690f      	ldr	r7, [r1, #16]
 8022bee:	2f00      	cmp	r7, #0
 8022bf0:	d0f6      	beq.n	8022be0 <__sflush_r+0xac>
 8022bf2:	0793      	lsls	r3, r2, #30
 8022bf4:	bf18      	it	ne
 8022bf6:	2300      	movne	r3, #0
 8022bf8:	680e      	ldr	r6, [r1, #0]
 8022bfa:	bf08      	it	eq
 8022bfc:	694b      	ldreq	r3, [r1, #20]
 8022bfe:	1bf6      	subs	r6, r6, r7
 8022c00:	600f      	str	r7, [r1, #0]
 8022c02:	608b      	str	r3, [r1, #8]
 8022c04:	2e00      	cmp	r6, #0
 8022c06:	ddeb      	ble.n	8022be0 <__sflush_r+0xac>
 8022c08:	4633      	mov	r3, r6
 8022c0a:	463a      	mov	r2, r7
 8022c0c:	4628      	mov	r0, r5
 8022c0e:	6a21      	ldr	r1, [r4, #32]
 8022c10:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8022c14:	47e0      	blx	ip
 8022c16:	2800      	cmp	r0, #0
 8022c18:	dc07      	bgt.n	8022c2a <__sflush_r+0xf6>
 8022c1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022c1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022c22:	f04f 30ff 	mov.w	r0, #4294967295
 8022c26:	81a3      	strh	r3, [r4, #12]
 8022c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022c2a:	4407      	add	r7, r0
 8022c2c:	1a36      	subs	r6, r6, r0
 8022c2e:	e7e9      	b.n	8022c04 <__sflush_r+0xd0>
 8022c30:	20400001 	.word	0x20400001

08022c34 <_fflush_r>:
 8022c34:	b538      	push	{r3, r4, r5, lr}
 8022c36:	690b      	ldr	r3, [r1, #16]
 8022c38:	4605      	mov	r5, r0
 8022c3a:	460c      	mov	r4, r1
 8022c3c:	b913      	cbnz	r3, 8022c44 <_fflush_r+0x10>
 8022c3e:	2500      	movs	r5, #0
 8022c40:	4628      	mov	r0, r5
 8022c42:	bd38      	pop	{r3, r4, r5, pc}
 8022c44:	b118      	cbz	r0, 8022c4e <_fflush_r+0x1a>
 8022c46:	6a03      	ldr	r3, [r0, #32]
 8022c48:	b90b      	cbnz	r3, 8022c4e <_fflush_r+0x1a>
 8022c4a:	f7fd fbf3 	bl	8020434 <__sinit>
 8022c4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022c52:	2b00      	cmp	r3, #0
 8022c54:	d0f3      	beq.n	8022c3e <_fflush_r+0xa>
 8022c56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8022c58:	07d0      	lsls	r0, r2, #31
 8022c5a:	d404      	bmi.n	8022c66 <_fflush_r+0x32>
 8022c5c:	0599      	lsls	r1, r3, #22
 8022c5e:	d402      	bmi.n	8022c66 <_fflush_r+0x32>
 8022c60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022c62:	f7fd fea2 	bl	80209aa <__retarget_lock_acquire_recursive>
 8022c66:	4628      	mov	r0, r5
 8022c68:	4621      	mov	r1, r4
 8022c6a:	f7ff ff63 	bl	8022b34 <__sflush_r>
 8022c6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022c70:	4605      	mov	r5, r0
 8022c72:	07da      	lsls	r2, r3, #31
 8022c74:	d4e4      	bmi.n	8022c40 <_fflush_r+0xc>
 8022c76:	89a3      	ldrh	r3, [r4, #12]
 8022c78:	059b      	lsls	r3, r3, #22
 8022c7a:	d4e1      	bmi.n	8022c40 <_fflush_r+0xc>
 8022c7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022c7e:	f7fd fe95 	bl	80209ac <__retarget_lock_release_recursive>
 8022c82:	e7dd      	b.n	8022c40 <_fflush_r+0xc>

08022c84 <fiprintf>:
 8022c84:	b40e      	push	{r1, r2, r3}
 8022c86:	b503      	push	{r0, r1, lr}
 8022c88:	4601      	mov	r1, r0
 8022c8a:	ab03      	add	r3, sp, #12
 8022c8c:	4805      	ldr	r0, [pc, #20]	@ (8022ca4 <fiprintf+0x20>)
 8022c8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8022c92:	6800      	ldr	r0, [r0, #0]
 8022c94:	9301      	str	r3, [sp, #4]
 8022c96:	f7ff fce9 	bl	802266c <_vfiprintf_r>
 8022c9a:	b002      	add	sp, #8
 8022c9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8022ca0:	b003      	add	sp, #12
 8022ca2:	4770      	bx	lr
 8022ca4:	2000012c 	.word	0x2000012c

08022ca8 <__swhatbuf_r>:
 8022ca8:	b570      	push	{r4, r5, r6, lr}
 8022caa:	460c      	mov	r4, r1
 8022cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022cb0:	4615      	mov	r5, r2
 8022cb2:	2900      	cmp	r1, #0
 8022cb4:	461e      	mov	r6, r3
 8022cb6:	b096      	sub	sp, #88	@ 0x58
 8022cb8:	da0c      	bge.n	8022cd4 <__swhatbuf_r+0x2c>
 8022cba:	89a3      	ldrh	r3, [r4, #12]
 8022cbc:	2100      	movs	r1, #0
 8022cbe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8022cc2:	bf14      	ite	ne
 8022cc4:	2340      	movne	r3, #64	@ 0x40
 8022cc6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8022cca:	2000      	movs	r0, #0
 8022ccc:	6031      	str	r1, [r6, #0]
 8022cce:	602b      	str	r3, [r5, #0]
 8022cd0:	b016      	add	sp, #88	@ 0x58
 8022cd2:	bd70      	pop	{r4, r5, r6, pc}
 8022cd4:	466a      	mov	r2, sp
 8022cd6:	f000 f8b9 	bl	8022e4c <_fstat_r>
 8022cda:	2800      	cmp	r0, #0
 8022cdc:	dbed      	blt.n	8022cba <__swhatbuf_r+0x12>
 8022cde:	9901      	ldr	r1, [sp, #4]
 8022ce0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8022ce4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8022ce8:	4259      	negs	r1, r3
 8022cea:	4159      	adcs	r1, r3
 8022cec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8022cf0:	e7eb      	b.n	8022cca <__swhatbuf_r+0x22>

08022cf2 <__smakebuf_r>:
 8022cf2:	898b      	ldrh	r3, [r1, #12]
 8022cf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022cf6:	079d      	lsls	r5, r3, #30
 8022cf8:	4606      	mov	r6, r0
 8022cfa:	460c      	mov	r4, r1
 8022cfc:	d507      	bpl.n	8022d0e <__smakebuf_r+0x1c>
 8022cfe:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8022d02:	6023      	str	r3, [r4, #0]
 8022d04:	6123      	str	r3, [r4, #16]
 8022d06:	2301      	movs	r3, #1
 8022d08:	6163      	str	r3, [r4, #20]
 8022d0a:	b003      	add	sp, #12
 8022d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022d0e:	466a      	mov	r2, sp
 8022d10:	ab01      	add	r3, sp, #4
 8022d12:	f7ff ffc9 	bl	8022ca8 <__swhatbuf_r>
 8022d16:	9f00      	ldr	r7, [sp, #0]
 8022d18:	4605      	mov	r5, r0
 8022d1a:	4639      	mov	r1, r7
 8022d1c:	4630      	mov	r0, r6
 8022d1e:	f7fe fd51 	bl	80217c4 <_malloc_r>
 8022d22:	b948      	cbnz	r0, 8022d38 <__smakebuf_r+0x46>
 8022d24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022d28:	059a      	lsls	r2, r3, #22
 8022d2a:	d4ee      	bmi.n	8022d0a <__smakebuf_r+0x18>
 8022d2c:	f023 0303 	bic.w	r3, r3, #3
 8022d30:	f043 0302 	orr.w	r3, r3, #2
 8022d34:	81a3      	strh	r3, [r4, #12]
 8022d36:	e7e2      	b.n	8022cfe <__smakebuf_r+0xc>
 8022d38:	89a3      	ldrh	r3, [r4, #12]
 8022d3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8022d3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8022d42:	81a3      	strh	r3, [r4, #12]
 8022d44:	9b01      	ldr	r3, [sp, #4]
 8022d46:	6020      	str	r0, [r4, #0]
 8022d48:	b15b      	cbz	r3, 8022d62 <__smakebuf_r+0x70>
 8022d4a:	4630      	mov	r0, r6
 8022d4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022d50:	f000 f88e 	bl	8022e70 <_isatty_r>
 8022d54:	b128      	cbz	r0, 8022d62 <__smakebuf_r+0x70>
 8022d56:	89a3      	ldrh	r3, [r4, #12]
 8022d58:	f023 0303 	bic.w	r3, r3, #3
 8022d5c:	f043 0301 	orr.w	r3, r3, #1
 8022d60:	81a3      	strh	r3, [r4, #12]
 8022d62:	89a3      	ldrh	r3, [r4, #12]
 8022d64:	431d      	orrs	r5, r3
 8022d66:	81a5      	strh	r5, [r4, #12]
 8022d68:	e7cf      	b.n	8022d0a <__smakebuf_r+0x18>

08022d6a <__sccl>:
 8022d6a:	b570      	push	{r4, r5, r6, lr}
 8022d6c:	780b      	ldrb	r3, [r1, #0]
 8022d6e:	4604      	mov	r4, r0
 8022d70:	2b5e      	cmp	r3, #94	@ 0x5e
 8022d72:	bf0b      	itete	eq
 8022d74:	784b      	ldrbeq	r3, [r1, #1]
 8022d76:	1c4a      	addne	r2, r1, #1
 8022d78:	1c8a      	addeq	r2, r1, #2
 8022d7a:	2100      	movne	r1, #0
 8022d7c:	bf08      	it	eq
 8022d7e:	2101      	moveq	r1, #1
 8022d80:	3801      	subs	r0, #1
 8022d82:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8022d86:	f800 1f01 	strb.w	r1, [r0, #1]!
 8022d8a:	42a8      	cmp	r0, r5
 8022d8c:	d1fb      	bne.n	8022d86 <__sccl+0x1c>
 8022d8e:	b90b      	cbnz	r3, 8022d94 <__sccl+0x2a>
 8022d90:	1e50      	subs	r0, r2, #1
 8022d92:	bd70      	pop	{r4, r5, r6, pc}
 8022d94:	f081 0101 	eor.w	r1, r1, #1
 8022d98:	4610      	mov	r0, r2
 8022d9a:	54e1      	strb	r1, [r4, r3]
 8022d9c:	4602      	mov	r2, r0
 8022d9e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8022da2:	2d2d      	cmp	r5, #45	@ 0x2d
 8022da4:	d005      	beq.n	8022db2 <__sccl+0x48>
 8022da6:	2d5d      	cmp	r5, #93	@ 0x5d
 8022da8:	d016      	beq.n	8022dd8 <__sccl+0x6e>
 8022daa:	2d00      	cmp	r5, #0
 8022dac:	d0f1      	beq.n	8022d92 <__sccl+0x28>
 8022dae:	462b      	mov	r3, r5
 8022db0:	e7f2      	b.n	8022d98 <__sccl+0x2e>
 8022db2:	7846      	ldrb	r6, [r0, #1]
 8022db4:	2e5d      	cmp	r6, #93	@ 0x5d
 8022db6:	d0fa      	beq.n	8022dae <__sccl+0x44>
 8022db8:	42b3      	cmp	r3, r6
 8022dba:	dcf8      	bgt.n	8022dae <__sccl+0x44>
 8022dbc:	461a      	mov	r2, r3
 8022dbe:	3002      	adds	r0, #2
 8022dc0:	3201      	adds	r2, #1
 8022dc2:	4296      	cmp	r6, r2
 8022dc4:	54a1      	strb	r1, [r4, r2]
 8022dc6:	dcfb      	bgt.n	8022dc0 <__sccl+0x56>
 8022dc8:	1af2      	subs	r2, r6, r3
 8022dca:	3a01      	subs	r2, #1
 8022dcc:	42b3      	cmp	r3, r6
 8022dce:	bfa8      	it	ge
 8022dd0:	2200      	movge	r2, #0
 8022dd2:	1c5d      	adds	r5, r3, #1
 8022dd4:	18ab      	adds	r3, r5, r2
 8022dd6:	e7e1      	b.n	8022d9c <__sccl+0x32>
 8022dd8:	4610      	mov	r0, r2
 8022dda:	e7da      	b.n	8022d92 <__sccl+0x28>

08022ddc <__submore>:
 8022ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022de0:	460c      	mov	r4, r1
 8022de2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8022de4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8022de8:	4299      	cmp	r1, r3
 8022dea:	d11b      	bne.n	8022e24 <__submore+0x48>
 8022dec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8022df0:	f7fe fce8 	bl	80217c4 <_malloc_r>
 8022df4:	b918      	cbnz	r0, 8022dfe <__submore+0x22>
 8022df6:	f04f 30ff 	mov.w	r0, #4294967295
 8022dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022dfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8022e02:	63a3      	str	r3, [r4, #56]	@ 0x38
 8022e04:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8022e08:	6360      	str	r0, [r4, #52]	@ 0x34
 8022e0a:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8022e0e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8022e12:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8022e16:	7043      	strb	r3, [r0, #1]
 8022e18:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8022e1c:	7003      	strb	r3, [r0, #0]
 8022e1e:	6020      	str	r0, [r4, #0]
 8022e20:	2000      	movs	r0, #0
 8022e22:	e7ea      	b.n	8022dfa <__submore+0x1e>
 8022e24:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8022e26:	0077      	lsls	r7, r6, #1
 8022e28:	463a      	mov	r2, r7
 8022e2a:	f000 f86e 	bl	8022f0a <_realloc_r>
 8022e2e:	4605      	mov	r5, r0
 8022e30:	2800      	cmp	r0, #0
 8022e32:	d0e0      	beq.n	8022df6 <__submore+0x1a>
 8022e34:	eb00 0806 	add.w	r8, r0, r6
 8022e38:	4601      	mov	r1, r0
 8022e3a:	4632      	mov	r2, r6
 8022e3c:	4640      	mov	r0, r8
 8022e3e:	f7fd fdc4 	bl	80209ca <memcpy>
 8022e42:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8022e46:	f8c4 8000 	str.w	r8, [r4]
 8022e4a:	e7e9      	b.n	8022e20 <__submore+0x44>

08022e4c <_fstat_r>:
 8022e4c:	b538      	push	{r3, r4, r5, lr}
 8022e4e:	2300      	movs	r3, #0
 8022e50:	4d06      	ldr	r5, [pc, #24]	@ (8022e6c <_fstat_r+0x20>)
 8022e52:	4604      	mov	r4, r0
 8022e54:	4608      	mov	r0, r1
 8022e56:	4611      	mov	r1, r2
 8022e58:	602b      	str	r3, [r5, #0]
 8022e5a:	f7e0 fa14 	bl	8003286 <_fstat>
 8022e5e:	1c43      	adds	r3, r0, #1
 8022e60:	d102      	bne.n	8022e68 <_fstat_r+0x1c>
 8022e62:	682b      	ldr	r3, [r5, #0]
 8022e64:	b103      	cbz	r3, 8022e68 <_fstat_r+0x1c>
 8022e66:	6023      	str	r3, [r4, #0]
 8022e68:	bd38      	pop	{r3, r4, r5, pc}
 8022e6a:	bf00      	nop
 8022e6c:	2000dff8 	.word	0x2000dff8

08022e70 <_isatty_r>:
 8022e70:	b538      	push	{r3, r4, r5, lr}
 8022e72:	2300      	movs	r3, #0
 8022e74:	4d05      	ldr	r5, [pc, #20]	@ (8022e8c <_isatty_r+0x1c>)
 8022e76:	4604      	mov	r4, r0
 8022e78:	4608      	mov	r0, r1
 8022e7a:	602b      	str	r3, [r5, #0]
 8022e7c:	f7e0 fa12 	bl	80032a4 <_isatty>
 8022e80:	1c43      	adds	r3, r0, #1
 8022e82:	d102      	bne.n	8022e8a <_isatty_r+0x1a>
 8022e84:	682b      	ldr	r3, [r5, #0]
 8022e86:	b103      	cbz	r3, 8022e8a <_isatty_r+0x1a>
 8022e88:	6023      	str	r3, [r4, #0]
 8022e8a:	bd38      	pop	{r3, r4, r5, pc}
 8022e8c:	2000dff8 	.word	0x2000dff8

08022e90 <_sbrk_r>:
 8022e90:	b538      	push	{r3, r4, r5, lr}
 8022e92:	2300      	movs	r3, #0
 8022e94:	4d05      	ldr	r5, [pc, #20]	@ (8022eac <_sbrk_r+0x1c>)
 8022e96:	4604      	mov	r4, r0
 8022e98:	4608      	mov	r0, r1
 8022e9a:	602b      	str	r3, [r5, #0]
 8022e9c:	f7e0 fa18 	bl	80032d0 <_sbrk>
 8022ea0:	1c43      	adds	r3, r0, #1
 8022ea2:	d102      	bne.n	8022eaa <_sbrk_r+0x1a>
 8022ea4:	682b      	ldr	r3, [r5, #0]
 8022ea6:	b103      	cbz	r3, 8022eaa <_sbrk_r+0x1a>
 8022ea8:	6023      	str	r3, [r4, #0]
 8022eaa:	bd38      	pop	{r3, r4, r5, pc}
 8022eac:	2000dff8 	.word	0x2000dff8

08022eb0 <abort>:
 8022eb0:	2006      	movs	r0, #6
 8022eb2:	b508      	push	{r3, lr}
 8022eb4:	f000 f8fe 	bl	80230b4 <raise>
 8022eb8:	2001      	movs	r0, #1
 8022eba:	f7e0 f995 	bl	80031e8 <_exit>

08022ebe <_calloc_r>:
 8022ebe:	b570      	push	{r4, r5, r6, lr}
 8022ec0:	fba1 5402 	umull	r5, r4, r1, r2
 8022ec4:	b934      	cbnz	r4, 8022ed4 <_calloc_r+0x16>
 8022ec6:	4629      	mov	r1, r5
 8022ec8:	f7fe fc7c 	bl	80217c4 <_malloc_r>
 8022ecc:	4606      	mov	r6, r0
 8022ece:	b928      	cbnz	r0, 8022edc <_calloc_r+0x1e>
 8022ed0:	4630      	mov	r0, r6
 8022ed2:	bd70      	pop	{r4, r5, r6, pc}
 8022ed4:	220c      	movs	r2, #12
 8022ed6:	2600      	movs	r6, #0
 8022ed8:	6002      	str	r2, [r0, #0]
 8022eda:	e7f9      	b.n	8022ed0 <_calloc_r+0x12>
 8022edc:	462a      	mov	r2, r5
 8022ede:	4621      	mov	r1, r4
 8022ee0:	f7fd fcb4 	bl	802084c <memset>
 8022ee4:	e7f4      	b.n	8022ed0 <_calloc_r+0x12>

08022ee6 <__ascii_mbtowc>:
 8022ee6:	b082      	sub	sp, #8
 8022ee8:	b901      	cbnz	r1, 8022eec <__ascii_mbtowc+0x6>
 8022eea:	a901      	add	r1, sp, #4
 8022eec:	b142      	cbz	r2, 8022f00 <__ascii_mbtowc+0x1a>
 8022eee:	b14b      	cbz	r3, 8022f04 <__ascii_mbtowc+0x1e>
 8022ef0:	7813      	ldrb	r3, [r2, #0]
 8022ef2:	600b      	str	r3, [r1, #0]
 8022ef4:	7812      	ldrb	r2, [r2, #0]
 8022ef6:	1e10      	subs	r0, r2, #0
 8022ef8:	bf18      	it	ne
 8022efa:	2001      	movne	r0, #1
 8022efc:	b002      	add	sp, #8
 8022efe:	4770      	bx	lr
 8022f00:	4610      	mov	r0, r2
 8022f02:	e7fb      	b.n	8022efc <__ascii_mbtowc+0x16>
 8022f04:	f06f 0001 	mvn.w	r0, #1
 8022f08:	e7f8      	b.n	8022efc <__ascii_mbtowc+0x16>

08022f0a <_realloc_r>:
 8022f0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022f0e:	4607      	mov	r7, r0
 8022f10:	4614      	mov	r4, r2
 8022f12:	460d      	mov	r5, r1
 8022f14:	b921      	cbnz	r1, 8022f20 <_realloc_r+0x16>
 8022f16:	4611      	mov	r1, r2
 8022f18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022f1c:	f7fe bc52 	b.w	80217c4 <_malloc_r>
 8022f20:	b92a      	cbnz	r2, 8022f2e <_realloc_r+0x24>
 8022f22:	f7fe fbdd 	bl	80216e0 <_free_r>
 8022f26:	4625      	mov	r5, r4
 8022f28:	4628      	mov	r0, r5
 8022f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022f2e:	f000 f8dd 	bl	80230ec <_malloc_usable_size_r>
 8022f32:	4284      	cmp	r4, r0
 8022f34:	4606      	mov	r6, r0
 8022f36:	d802      	bhi.n	8022f3e <_realloc_r+0x34>
 8022f38:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8022f3c:	d8f4      	bhi.n	8022f28 <_realloc_r+0x1e>
 8022f3e:	4621      	mov	r1, r4
 8022f40:	4638      	mov	r0, r7
 8022f42:	f7fe fc3f 	bl	80217c4 <_malloc_r>
 8022f46:	4680      	mov	r8, r0
 8022f48:	b908      	cbnz	r0, 8022f4e <_realloc_r+0x44>
 8022f4a:	4645      	mov	r5, r8
 8022f4c:	e7ec      	b.n	8022f28 <_realloc_r+0x1e>
 8022f4e:	42b4      	cmp	r4, r6
 8022f50:	4622      	mov	r2, r4
 8022f52:	4629      	mov	r1, r5
 8022f54:	bf28      	it	cs
 8022f56:	4632      	movcs	r2, r6
 8022f58:	f7fd fd37 	bl	80209ca <memcpy>
 8022f5c:	4629      	mov	r1, r5
 8022f5e:	4638      	mov	r0, r7
 8022f60:	f7fe fbbe 	bl	80216e0 <_free_r>
 8022f64:	e7f1      	b.n	8022f4a <_realloc_r+0x40>
	...

08022f68 <_strtoul_l.isra.0>:
 8022f68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022f6c:	4686      	mov	lr, r0
 8022f6e:	460d      	mov	r5, r1
 8022f70:	4e33      	ldr	r6, [pc, #204]	@ (8023040 <_strtoul_l.isra.0+0xd8>)
 8022f72:	4628      	mov	r0, r5
 8022f74:	f815 4b01 	ldrb.w	r4, [r5], #1
 8022f78:	5d37      	ldrb	r7, [r6, r4]
 8022f7a:	f017 0708 	ands.w	r7, r7, #8
 8022f7e:	d1f8      	bne.n	8022f72 <_strtoul_l.isra.0+0xa>
 8022f80:	2c2d      	cmp	r4, #45	@ 0x2d
 8022f82:	d110      	bne.n	8022fa6 <_strtoul_l.isra.0+0x3e>
 8022f84:	2701      	movs	r7, #1
 8022f86:	782c      	ldrb	r4, [r5, #0]
 8022f88:	1c85      	adds	r5, r0, #2
 8022f8a:	f033 0010 	bics.w	r0, r3, #16
 8022f8e:	d115      	bne.n	8022fbc <_strtoul_l.isra.0+0x54>
 8022f90:	2c30      	cmp	r4, #48	@ 0x30
 8022f92:	d10d      	bne.n	8022fb0 <_strtoul_l.isra.0+0x48>
 8022f94:	7828      	ldrb	r0, [r5, #0]
 8022f96:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8022f9a:	2858      	cmp	r0, #88	@ 0x58
 8022f9c:	d108      	bne.n	8022fb0 <_strtoul_l.isra.0+0x48>
 8022f9e:	786c      	ldrb	r4, [r5, #1]
 8022fa0:	3502      	adds	r5, #2
 8022fa2:	2310      	movs	r3, #16
 8022fa4:	e00a      	b.n	8022fbc <_strtoul_l.isra.0+0x54>
 8022fa6:	2c2b      	cmp	r4, #43	@ 0x2b
 8022fa8:	bf04      	itt	eq
 8022faa:	782c      	ldrbeq	r4, [r5, #0]
 8022fac:	1c85      	addeq	r5, r0, #2
 8022fae:	e7ec      	b.n	8022f8a <_strtoul_l.isra.0+0x22>
 8022fb0:	2b00      	cmp	r3, #0
 8022fb2:	d1f6      	bne.n	8022fa2 <_strtoul_l.isra.0+0x3a>
 8022fb4:	2c30      	cmp	r4, #48	@ 0x30
 8022fb6:	bf14      	ite	ne
 8022fb8:	230a      	movne	r3, #10
 8022fba:	2308      	moveq	r3, #8
 8022fbc:	f04f 38ff 	mov.w	r8, #4294967295
 8022fc0:	fbb8 f8f3 	udiv	r8, r8, r3
 8022fc4:	2600      	movs	r6, #0
 8022fc6:	fb03 f908 	mul.w	r9, r3, r8
 8022fca:	4630      	mov	r0, r6
 8022fcc:	ea6f 0909 	mvn.w	r9, r9
 8022fd0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8022fd4:	f1bc 0f09 	cmp.w	ip, #9
 8022fd8:	d810      	bhi.n	8022ffc <_strtoul_l.isra.0+0x94>
 8022fda:	4664      	mov	r4, ip
 8022fdc:	42a3      	cmp	r3, r4
 8022fde:	dd1e      	ble.n	802301e <_strtoul_l.isra.0+0xb6>
 8022fe0:	f1b6 3fff 	cmp.w	r6, #4294967295
 8022fe4:	d007      	beq.n	8022ff6 <_strtoul_l.isra.0+0x8e>
 8022fe6:	4580      	cmp	r8, r0
 8022fe8:	d316      	bcc.n	8023018 <_strtoul_l.isra.0+0xb0>
 8022fea:	d101      	bne.n	8022ff0 <_strtoul_l.isra.0+0x88>
 8022fec:	45a1      	cmp	r9, r4
 8022fee:	db13      	blt.n	8023018 <_strtoul_l.isra.0+0xb0>
 8022ff0:	2601      	movs	r6, #1
 8022ff2:	fb00 4003 	mla	r0, r0, r3, r4
 8022ff6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8022ffa:	e7e9      	b.n	8022fd0 <_strtoul_l.isra.0+0x68>
 8022ffc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8023000:	f1bc 0f19 	cmp.w	ip, #25
 8023004:	d801      	bhi.n	802300a <_strtoul_l.isra.0+0xa2>
 8023006:	3c37      	subs	r4, #55	@ 0x37
 8023008:	e7e8      	b.n	8022fdc <_strtoul_l.isra.0+0x74>
 802300a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 802300e:	f1bc 0f19 	cmp.w	ip, #25
 8023012:	d804      	bhi.n	802301e <_strtoul_l.isra.0+0xb6>
 8023014:	3c57      	subs	r4, #87	@ 0x57
 8023016:	e7e1      	b.n	8022fdc <_strtoul_l.isra.0+0x74>
 8023018:	f04f 36ff 	mov.w	r6, #4294967295
 802301c:	e7eb      	b.n	8022ff6 <_strtoul_l.isra.0+0x8e>
 802301e:	1c73      	adds	r3, r6, #1
 8023020:	d106      	bne.n	8023030 <_strtoul_l.isra.0+0xc8>
 8023022:	2322      	movs	r3, #34	@ 0x22
 8023024:	4630      	mov	r0, r6
 8023026:	f8ce 3000 	str.w	r3, [lr]
 802302a:	b932      	cbnz	r2, 802303a <_strtoul_l.isra.0+0xd2>
 802302c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023030:	b107      	cbz	r7, 8023034 <_strtoul_l.isra.0+0xcc>
 8023032:	4240      	negs	r0, r0
 8023034:	2a00      	cmp	r2, #0
 8023036:	d0f9      	beq.n	802302c <_strtoul_l.isra.0+0xc4>
 8023038:	b106      	cbz	r6, 802303c <_strtoul_l.isra.0+0xd4>
 802303a:	1e69      	subs	r1, r5, #1
 802303c:	6011      	str	r1, [r2, #0]
 802303e:	e7f5      	b.n	802302c <_strtoul_l.isra.0+0xc4>
 8023040:	0802f249 	.word	0x0802f249

08023044 <_strtoul_r>:
 8023044:	f7ff bf90 	b.w	8022f68 <_strtoul_l.isra.0>

08023048 <__ascii_wctomb>:
 8023048:	4603      	mov	r3, r0
 802304a:	4608      	mov	r0, r1
 802304c:	b141      	cbz	r1, 8023060 <__ascii_wctomb+0x18>
 802304e:	2aff      	cmp	r2, #255	@ 0xff
 8023050:	d904      	bls.n	802305c <__ascii_wctomb+0x14>
 8023052:	228a      	movs	r2, #138	@ 0x8a
 8023054:	f04f 30ff 	mov.w	r0, #4294967295
 8023058:	601a      	str	r2, [r3, #0]
 802305a:	4770      	bx	lr
 802305c:	2001      	movs	r0, #1
 802305e:	700a      	strb	r2, [r1, #0]
 8023060:	4770      	bx	lr

08023062 <_raise_r>:
 8023062:	291f      	cmp	r1, #31
 8023064:	b538      	push	{r3, r4, r5, lr}
 8023066:	4605      	mov	r5, r0
 8023068:	460c      	mov	r4, r1
 802306a:	d904      	bls.n	8023076 <_raise_r+0x14>
 802306c:	2316      	movs	r3, #22
 802306e:	6003      	str	r3, [r0, #0]
 8023070:	f04f 30ff 	mov.w	r0, #4294967295
 8023074:	bd38      	pop	{r3, r4, r5, pc}
 8023076:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8023078:	b112      	cbz	r2, 8023080 <_raise_r+0x1e>
 802307a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802307e:	b94b      	cbnz	r3, 8023094 <_raise_r+0x32>
 8023080:	4628      	mov	r0, r5
 8023082:	f000 f831 	bl	80230e8 <_getpid_r>
 8023086:	4622      	mov	r2, r4
 8023088:	4601      	mov	r1, r0
 802308a:	4628      	mov	r0, r5
 802308c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023090:	f000 b818 	b.w	80230c4 <_kill_r>
 8023094:	2b01      	cmp	r3, #1
 8023096:	d00a      	beq.n	80230ae <_raise_r+0x4c>
 8023098:	1c59      	adds	r1, r3, #1
 802309a:	d103      	bne.n	80230a4 <_raise_r+0x42>
 802309c:	2316      	movs	r3, #22
 802309e:	6003      	str	r3, [r0, #0]
 80230a0:	2001      	movs	r0, #1
 80230a2:	e7e7      	b.n	8023074 <_raise_r+0x12>
 80230a4:	2100      	movs	r1, #0
 80230a6:	4620      	mov	r0, r4
 80230a8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80230ac:	4798      	blx	r3
 80230ae:	2000      	movs	r0, #0
 80230b0:	e7e0      	b.n	8023074 <_raise_r+0x12>
	...

080230b4 <raise>:
 80230b4:	4b02      	ldr	r3, [pc, #8]	@ (80230c0 <raise+0xc>)
 80230b6:	4601      	mov	r1, r0
 80230b8:	6818      	ldr	r0, [r3, #0]
 80230ba:	f7ff bfd2 	b.w	8023062 <_raise_r>
 80230be:	bf00      	nop
 80230c0:	2000012c 	.word	0x2000012c

080230c4 <_kill_r>:
 80230c4:	b538      	push	{r3, r4, r5, lr}
 80230c6:	2300      	movs	r3, #0
 80230c8:	4d06      	ldr	r5, [pc, #24]	@ (80230e4 <_kill_r+0x20>)
 80230ca:	4604      	mov	r4, r0
 80230cc:	4608      	mov	r0, r1
 80230ce:	4611      	mov	r1, r2
 80230d0:	602b      	str	r3, [r5, #0]
 80230d2:	f7e0 f877 	bl	80031c4 <_kill>
 80230d6:	1c43      	adds	r3, r0, #1
 80230d8:	d102      	bne.n	80230e0 <_kill_r+0x1c>
 80230da:	682b      	ldr	r3, [r5, #0]
 80230dc:	b103      	cbz	r3, 80230e0 <_kill_r+0x1c>
 80230de:	6023      	str	r3, [r4, #0]
 80230e0:	bd38      	pop	{r3, r4, r5, pc}
 80230e2:	bf00      	nop
 80230e4:	2000dff8 	.word	0x2000dff8

080230e8 <_getpid_r>:
 80230e8:	f7e0 b864 	b.w	80031b4 <_getpid>

080230ec <_malloc_usable_size_r>:
 80230ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80230f0:	1f18      	subs	r0, r3, #4
 80230f2:	2b00      	cmp	r3, #0
 80230f4:	bfbc      	itt	lt
 80230f6:	580b      	ldrlt	r3, [r1, r0]
 80230f8:	18c0      	addlt	r0, r0, r3
 80230fa:	4770      	bx	lr

080230fc <sqrtf>:
 80230fc:	b538      	push	{r3, r4, r5, lr}
 80230fe:	4605      	mov	r5, r0
 8023100:	f000 f816 	bl	8023130 <__ieee754_sqrtf>
 8023104:	4629      	mov	r1, r5
 8023106:	4604      	mov	r4, r0
 8023108:	4628      	mov	r0, r5
 802310a:	f7de f827 	bl	800115c <__aeabi_fcmpun>
 802310e:	b968      	cbnz	r0, 802312c <sqrtf+0x30>
 8023110:	2100      	movs	r1, #0
 8023112:	4628      	mov	r0, r5
 8023114:	f7dd fffa 	bl	800110c <__aeabi_fcmplt>
 8023118:	b140      	cbz	r0, 802312c <sqrtf+0x30>
 802311a:	f7fd fc1b 	bl	8020954 <__errno>
 802311e:	2321      	movs	r3, #33	@ 0x21
 8023120:	2100      	movs	r1, #0
 8023122:	6003      	str	r3, [r0, #0]
 8023124:	4608      	mov	r0, r1
 8023126:	f7dd ff07 	bl	8000f38 <__aeabi_fdiv>
 802312a:	4604      	mov	r4, r0
 802312c:	4620      	mov	r0, r4
 802312e:	bd38      	pop	{r3, r4, r5, pc}

08023130 <__ieee754_sqrtf>:
 8023130:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8023134:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8023138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802313c:	4603      	mov	r3, r0
 802313e:	4604      	mov	r4, r0
 8023140:	d30a      	bcc.n	8023158 <__ieee754_sqrtf+0x28>
 8023142:	4601      	mov	r1, r0
 8023144:	f7dd fe44 	bl	8000dd0 <__aeabi_fmul>
 8023148:	4601      	mov	r1, r0
 802314a:	4620      	mov	r0, r4
 802314c:	f7dd fd38 	bl	8000bc0 <__addsf3>
 8023150:	4604      	mov	r4, r0
 8023152:	4620      	mov	r0, r4
 8023154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023158:	2a00      	cmp	r2, #0
 802315a:	d0fa      	beq.n	8023152 <__ieee754_sqrtf+0x22>
 802315c:	2800      	cmp	r0, #0
 802315e:	da06      	bge.n	802316e <__ieee754_sqrtf+0x3e>
 8023160:	4601      	mov	r1, r0
 8023162:	f7dd fd2b 	bl	8000bbc <__aeabi_fsub>
 8023166:	4601      	mov	r1, r0
 8023168:	f7dd fee6 	bl	8000f38 <__aeabi_fdiv>
 802316c:	e7f0      	b.n	8023150 <__ieee754_sqrtf+0x20>
 802316e:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 8023172:	d03c      	beq.n	80231ee <__ieee754_sqrtf+0xbe>
 8023174:	15c2      	asrs	r2, r0, #23
 8023176:	2400      	movs	r4, #0
 8023178:	2019      	movs	r0, #25
 802317a:	4626      	mov	r6, r4
 802317c:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8023180:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8023184:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 8023188:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 802318c:	07d2      	lsls	r2, r2, #31
 802318e:	bf58      	it	pl
 8023190:	005b      	lslpl	r3, r3, #1
 8023192:	106d      	asrs	r5, r5, #1
 8023194:	005b      	lsls	r3, r3, #1
 8023196:	1872      	adds	r2, r6, r1
 8023198:	429a      	cmp	r2, r3
 802319a:	bfcf      	iteee	gt
 802319c:	461a      	movgt	r2, r3
 802319e:	1856      	addle	r6, r2, r1
 80231a0:	1864      	addle	r4, r4, r1
 80231a2:	1a9a      	suble	r2, r3, r2
 80231a4:	3801      	subs	r0, #1
 80231a6:	ea4f 0342 	mov.w	r3, r2, lsl #1
 80231aa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80231ae:	d1f2      	bne.n	8023196 <__ieee754_sqrtf+0x66>
 80231b0:	b1ba      	cbz	r2, 80231e2 <__ieee754_sqrtf+0xb2>
 80231b2:	4e15      	ldr	r6, [pc, #84]	@ (8023208 <__ieee754_sqrtf+0xd8>)
 80231b4:	4f15      	ldr	r7, [pc, #84]	@ (802320c <__ieee754_sqrtf+0xdc>)
 80231b6:	6830      	ldr	r0, [r6, #0]
 80231b8:	6839      	ldr	r1, [r7, #0]
 80231ba:	f7dd fcff 	bl	8000bbc <__aeabi_fsub>
 80231be:	f8d6 8000 	ldr.w	r8, [r6]
 80231c2:	4601      	mov	r1, r0
 80231c4:	4640      	mov	r0, r8
 80231c6:	f7dd ffab 	bl	8001120 <__aeabi_fcmple>
 80231ca:	b150      	cbz	r0, 80231e2 <__ieee754_sqrtf+0xb2>
 80231cc:	6830      	ldr	r0, [r6, #0]
 80231ce:	6839      	ldr	r1, [r7, #0]
 80231d0:	f7dd fcf6 	bl	8000bc0 <__addsf3>
 80231d4:	6836      	ldr	r6, [r6, #0]
 80231d6:	4601      	mov	r1, r0
 80231d8:	4630      	mov	r0, r6
 80231da:	f7dd ff97 	bl	800110c <__aeabi_fcmplt>
 80231de:	b170      	cbz	r0, 80231fe <__ieee754_sqrtf+0xce>
 80231e0:	3402      	adds	r4, #2
 80231e2:	1064      	asrs	r4, r4, #1
 80231e4:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 80231e8:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 80231ec:	e7b1      	b.n	8023152 <__ieee754_sqrtf+0x22>
 80231ee:	005b      	lsls	r3, r3, #1
 80231f0:	0218      	lsls	r0, r3, #8
 80231f2:	460a      	mov	r2, r1
 80231f4:	f101 0101 	add.w	r1, r1, #1
 80231f8:	d5f9      	bpl.n	80231ee <__ieee754_sqrtf+0xbe>
 80231fa:	4252      	negs	r2, r2
 80231fc:	e7bb      	b.n	8023176 <__ieee754_sqrtf+0x46>
 80231fe:	3401      	adds	r4, #1
 8023200:	f024 0401 	bic.w	r4, r4, #1
 8023204:	e7ed      	b.n	80231e2 <__ieee754_sqrtf+0xb2>
 8023206:	bf00      	nop
 8023208:	0802f44c 	.word	0x0802f44c
 802320c:	0802f448 	.word	0x0802f448

08023210 <_init>:
 8023210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023212:	bf00      	nop
 8023214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023216:	bc08      	pop	{r3}
 8023218:	469e      	mov	lr, r3
 802321a:	4770      	bx	lr

0802321c <_fini>:
 802321c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802321e:	bf00      	nop
 8023220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023222:	bc08      	pop	{r3}
 8023224:	469e      	mov	lr, r3
 8023226:	4770      	bx	lr
